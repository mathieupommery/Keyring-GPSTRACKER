
balise_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cb5c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ae0  0801cca0  0801cca0  0001dca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f780  0801f780  00020780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f788  0801f788  00020788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f78c  0801f78c  0002078c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002f0  20000008  0801f790  00021008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002afc  200002f8  0801fa80  000212f8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20002df4  0801fa80  00021df4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000212f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037f74  00000000  00000000  00021328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007d5b  00000000  00000000  0005929c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002fa8  00000000  00000000  00060ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002470  00000000  00000000  00063fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f18f  00000000  00000000  00066410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c72e  00000000  00000000  0009559f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001069ed  00000000  00000000  000d1ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d86ba  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e3d4  00000000  00000000  001d8700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  001e6ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002f8 	.word	0x200002f8
 800015c:	00000000 	.word	0x00000000
 8000160:	0801cc84 	.word	0x0801cc84

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002fc 	.word	0x200002fc
 800017c:	0801cc84 	.word	0x0801cc84

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9be 	b.w	8000fcc <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	468e      	mov	lr, r1
 8000cdc:	4604      	mov	r4, r0
 8000cde:	4688      	mov	r8, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14a      	bne.n	8000d7a <__udivmoddi4+0xa6>
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	4617      	mov	r7, r2
 8000ce8:	d962      	bls.n	8000db0 <__udivmoddi4+0xdc>
 8000cea:	fab2 f682 	clz	r6, r2
 8000cee:	b14e      	cbz	r6, 8000d04 <__udivmoddi4+0x30>
 8000cf0:	f1c6 0320 	rsb	r3, r6, #32
 8000cf4:	fa01 f806 	lsl.w	r8, r1, r6
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	40b7      	lsls	r7, r6
 8000cfe:	ea43 0808 	orr.w	r8, r3, r8
 8000d02:	40b4      	lsls	r4, r6
 8000d04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d08:	fa1f fc87 	uxth.w	ip, r7
 8000d0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d10:	0c23      	lsrs	r3, r4, #16
 8000d12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x62>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d28:	f080 80ea 	bcs.w	8000f00 <__udivmoddi4+0x22c>
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	f240 80e7 	bls.w	8000f00 <__udivmoddi4+0x22c>
 8000d32:	3902      	subs	r1, #2
 8000d34:	443b      	add	r3, r7
 8000d36:	1a9a      	subs	r2, r3, r2
 8000d38:	b2a3      	uxth	r3, r4
 8000d3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4a:	459c      	cmp	ip, r3
 8000d4c:	d909      	bls.n	8000d62 <__udivmoddi4+0x8e>
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d54:	f080 80d6 	bcs.w	8000f04 <__udivmoddi4+0x230>
 8000d58:	459c      	cmp	ip, r3
 8000d5a:	f240 80d3 	bls.w	8000f04 <__udivmoddi4+0x230>
 8000d5e:	443b      	add	r3, r7
 8000d60:	3802      	subs	r0, #2
 8000d62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d66:	eba3 030c 	sub.w	r3, r3, ip
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	b11d      	cbz	r5, 8000d76 <__udivmoddi4+0xa2>
 8000d6e:	40f3      	lsrs	r3, r6
 8000d70:	2200      	movs	r2, #0
 8000d72:	e9c5 3200 	strd	r3, r2, [r5]
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d905      	bls.n	8000d8a <__udivmoddi4+0xb6>
 8000d7e:	b10d      	cbz	r5, 8000d84 <__udivmoddi4+0xb0>
 8000d80:	e9c5 0100 	strd	r0, r1, [r5]
 8000d84:	2100      	movs	r1, #0
 8000d86:	4608      	mov	r0, r1
 8000d88:	e7f5      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000d8a:	fab3 f183 	clz	r1, r3
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d146      	bne.n	8000e20 <__udivmoddi4+0x14c>
 8000d92:	4573      	cmp	r3, lr
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xc8>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 8105 	bhi.w	8000fa6 <__udivmoddi4+0x2d2>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	4690      	mov	r8, r2
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e5      	beq.n	8000d76 <__udivmoddi4+0xa2>
 8000daa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dae:	e7e2      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000db0:	2a00      	cmp	r2, #0
 8000db2:	f000 8090 	beq.w	8000ed6 <__udivmoddi4+0x202>
 8000db6:	fab2 f682 	clz	r6, r2
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	f040 80a4 	bne.w	8000f08 <__udivmoddi4+0x234>
 8000dc0:	1a8a      	subs	r2, r1, r2
 8000dc2:	0c03      	lsrs	r3, r0, #16
 8000dc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc8:	b280      	uxth	r0, r0
 8000dca:	b2bc      	uxth	r4, r7
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dd2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dda:	fb04 f20c 	mul.w	r2, r4, ip
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x11e>
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000de8:	d202      	bcs.n	8000df0 <__udivmoddi4+0x11c>
 8000dea:	429a      	cmp	r2, r3
 8000dec:	f200 80e0 	bhi.w	8000fb0 <__udivmoddi4+0x2dc>
 8000df0:	46c4      	mov	ip, r8
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000df8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dfc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e00:	fb02 f404 	mul.w	r4, r2, r4
 8000e04:	429c      	cmp	r4, r3
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0x144>
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x142>
 8000e10:	429c      	cmp	r4, r3
 8000e12:	f200 80ca 	bhi.w	8000faa <__udivmoddi4+0x2d6>
 8000e16:	4602      	mov	r2, r0
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e1e:	e7a5      	b.n	8000d6c <__udivmoddi4+0x98>
 8000e20:	f1c1 0620 	rsb	r6, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2a:	431f      	orrs	r7, r3
 8000e2c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e30:	fa20 f306 	lsr.w	r3, r0, r6
 8000e34:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	fa1f fc87 	uxth.w	ip, r7
 8000e46:	fbbe f0f9 	udiv	r0, lr, r9
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e54:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x1a0>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e66:	f080 809c 	bcs.w	8000fa2 <__udivmoddi4+0x2ce>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f240 8099 	bls.w	8000fa2 <__udivmoddi4+0x2ce>
 8000e70:	3802      	subs	r0, #2
 8000e72:	443c      	add	r4, r7
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	fa1f fe83 	uxth.w	lr, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e88:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e8c:	45a4      	cmp	ip, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1ce>
 8000e90:	193c      	adds	r4, r7, r4
 8000e92:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e96:	f080 8082 	bcs.w	8000f9e <__udivmoddi4+0x2ca>
 8000e9a:	45a4      	cmp	ip, r4
 8000e9c:	d97f      	bls.n	8000f9e <__udivmoddi4+0x2ca>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	443c      	add	r4, r7
 8000ea2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ea6:	eba4 040c 	sub.w	r4, r4, ip
 8000eaa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000eae:	4564      	cmp	r4, ip
 8000eb0:	4673      	mov	r3, lr
 8000eb2:	46e1      	mov	r9, ip
 8000eb4:	d362      	bcc.n	8000f7c <__udivmoddi4+0x2a8>
 8000eb6:	d05f      	beq.n	8000f78 <__udivmoddi4+0x2a4>
 8000eb8:	b15d      	cbz	r5, 8000ed2 <__udivmoddi4+0x1fe>
 8000eba:	ebb8 0203 	subs.w	r2, r8, r3
 8000ebe:	eb64 0409 	sbc.w	r4, r4, r9
 8000ec2:	fa04 f606 	lsl.w	r6, r4, r6
 8000ec6:	fa22 f301 	lsr.w	r3, r2, r1
 8000eca:	431e      	orrs	r6, r3
 8000ecc:	40cc      	lsrs	r4, r1
 8000ece:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e74f      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000ed6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eda:	0c01      	lsrs	r1, r0, #16
 8000edc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ee0:	b280      	uxth	r0, r0
 8000ee2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4638      	mov	r0, r7
 8000eea:	463c      	mov	r4, r7
 8000eec:	46b8      	mov	r8, r7
 8000eee:	46be      	mov	lr, r7
 8000ef0:	2620      	movs	r6, #32
 8000ef2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ef6:	eba2 0208 	sub.w	r2, r2, r8
 8000efa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000efe:	e766      	b.n	8000dce <__udivmoddi4+0xfa>
 8000f00:	4601      	mov	r1, r0
 8000f02:	e718      	b.n	8000d36 <__udivmoddi4+0x62>
 8000f04:	4610      	mov	r0, r2
 8000f06:	e72c      	b.n	8000d62 <__udivmoddi4+0x8e>
 8000f08:	f1c6 0220 	rsb	r2, r6, #32
 8000f0c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f10:	40b7      	lsls	r7, r6
 8000f12:	40b1      	lsls	r1, r6
 8000f14:	fa20 f202 	lsr.w	r2, r0, r2
 8000f18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f22:	b2bc      	uxth	r4, r7
 8000f24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f28:	0c11      	lsrs	r1, r2, #16
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb08 f904 	mul.w	r9, r8, r4
 8000f32:	40b0      	lsls	r0, r6
 8000f34:	4589      	cmp	r9, r1
 8000f36:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f3a:	b280      	uxth	r0, r0
 8000f3c:	d93e      	bls.n	8000fbc <__udivmoddi4+0x2e8>
 8000f3e:	1879      	adds	r1, r7, r1
 8000f40:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f44:	d201      	bcs.n	8000f4a <__udivmoddi4+0x276>
 8000f46:	4589      	cmp	r9, r1
 8000f48:	d81f      	bhi.n	8000f8a <__udivmoddi4+0x2b6>
 8000f4a:	eba1 0109 	sub.w	r1, r1, r9
 8000f4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f52:	fb09 f804 	mul.w	r8, r9, r4
 8000f56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	4542      	cmp	r2, r8
 8000f62:	d229      	bcs.n	8000fb8 <__udivmoddi4+0x2e4>
 8000f64:	18ba      	adds	r2, r7, r2
 8000f66:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f6a:	d2c4      	bcs.n	8000ef6 <__udivmoddi4+0x222>
 8000f6c:	4542      	cmp	r2, r8
 8000f6e:	d2c2      	bcs.n	8000ef6 <__udivmoddi4+0x222>
 8000f70:	f1a9 0102 	sub.w	r1, r9, #2
 8000f74:	443a      	add	r2, r7
 8000f76:	e7be      	b.n	8000ef6 <__udivmoddi4+0x222>
 8000f78:	45f0      	cmp	r8, lr
 8000f7a:	d29d      	bcs.n	8000eb8 <__udivmoddi4+0x1e4>
 8000f7c:	ebbe 0302 	subs.w	r3, lr, r2
 8000f80:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f84:	3801      	subs	r0, #1
 8000f86:	46e1      	mov	r9, ip
 8000f88:	e796      	b.n	8000eb8 <__udivmoddi4+0x1e4>
 8000f8a:	eba7 0909 	sub.w	r9, r7, r9
 8000f8e:	4449      	add	r1, r9
 8000f90:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f94:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f98:	fb09 f804 	mul.w	r8, r9, r4
 8000f9c:	e7db      	b.n	8000f56 <__udivmoddi4+0x282>
 8000f9e:	4673      	mov	r3, lr
 8000fa0:	e77f      	b.n	8000ea2 <__udivmoddi4+0x1ce>
 8000fa2:	4650      	mov	r0, sl
 8000fa4:	e766      	b.n	8000e74 <__udivmoddi4+0x1a0>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e6fd      	b.n	8000da6 <__udivmoddi4+0xd2>
 8000faa:	443b      	add	r3, r7
 8000fac:	3a02      	subs	r2, #2
 8000fae:	e733      	b.n	8000e18 <__udivmoddi4+0x144>
 8000fb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb4:	443b      	add	r3, r7
 8000fb6:	e71c      	b.n	8000df2 <__udivmoddi4+0x11e>
 8000fb8:	4649      	mov	r1, r9
 8000fba:	e79c      	b.n	8000ef6 <__udivmoddi4+0x222>
 8000fbc:	eba1 0109 	sub.w	r1, r1, r9
 8000fc0:	46c4      	mov	ip, r8
 8000fc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc6:	fb09 f804 	mul.w	r8, r9, r4
 8000fca:	e7c4      	b.n	8000f56 <__udivmoddi4+0x282>

08000fcc <__aeabi_idiv0>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800101a:	4b38      	ldr	r3, [pc, #224]	@ (80010fc <MX_ADC1_Init+0xf8>)
 800101c:	4a38      	ldr	r2, [pc, #224]	@ (8001100 <MX_ADC1_Init+0xfc>)
 800101e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001020:	4b36      	ldr	r3, [pc, #216]	@ (80010fc <MX_ADC1_Init+0xf8>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001026:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <MX_ADC1_Init+0xf8>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102c:	4b33      	ldr	r3, [pc, #204]	@ (80010fc <MX_ADC1_Init+0xf8>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001032:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <MX_ADC1_Init+0xf8>)
 8001034:	2201      	movs	r2, #1
 8001036:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001038:	4b30      	ldr	r3, [pc, #192]	@ (80010fc <MX_ADC1_Init+0xf8>)
 800103a:	2204      	movs	r2, #4
 800103c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800103e:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <MX_ADC1_Init+0xf8>)
 8001040:	2200      	movs	r2, #0
 8001042:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001044:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <MX_ADC1_Init+0xf8>)
 8001046:	2201      	movs	r2, #1
 8001048:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800104a:	4b2c      	ldr	r3, [pc, #176]	@ (80010fc <MX_ADC1_Init+0xf8>)
 800104c:	2203      	movs	r2, #3
 800104e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001050:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <MX_ADC1_Init+0xf8>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001058:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <MX_ADC1_Init+0xf8>)
 800105a:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 800105e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001060:	4b26      	ldr	r3, [pc, #152]	@ (80010fc <MX_ADC1_Init+0xf8>)
 8001062:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001066:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001068:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <MX_ADC1_Init+0xf8>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001070:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <MX_ADC1_Init+0xf8>)
 8001072:	2200      	movs	r2, #0
 8001074:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001076:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <MX_ADC1_Init+0xf8>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107e:	481f      	ldr	r0, [pc, #124]	@ (80010fc <MX_ADC1_Init+0xf8>)
 8001080:	f006 faa4 	bl	80075cc <HAL_ADC_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800108a:	f001 f822 	bl	80020d2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800108e:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <MX_ADC1_Init+0x100>)
 8001090:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001092:	2306      	movs	r3, #6
 8001094:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001096:	2307      	movs	r3, #7
 8001098:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800109a:	237f      	movs	r3, #127	@ 0x7f
 800109c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800109e:	2304      	movs	r3, #4
 80010a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4619      	mov	r1, r3
 80010aa:	4814      	ldr	r0, [pc, #80]	@ (80010fc <MX_ADC1_Init+0xf8>)
 80010ac:	f006 fc72 	bl	8007994 <HAL_ADC_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010b6:	f001 f80c 	bl	80020d2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010ba:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <MX_ADC1_Init+0x104>)
 80010bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010be:	230c      	movs	r3, #12
 80010c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	4619      	mov	r1, r3
 80010c6:	480d      	ldr	r0, [pc, #52]	@ (80010fc <MX_ADC1_Init+0xf8>)
 80010c8:	f006 fc64 	bl	8007994 <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80010d2:	f000 fffe 	bl	80020d2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <MX_ADC1_Init+0x108>)
 80010d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010da:	2312      	movs	r3, #18
 80010dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010de:	463b      	mov	r3, r7
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	@ (80010fc <MX_ADC1_Init+0xf8>)
 80010e4:	f006 fc56 	bl	8007994 <HAL_ADC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010ee:	f000 fff0 	bl	80020d2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000314 	.word	0x20000314
 8001100:	50040000 	.word	0x50040000
 8001104:	80000001 	.word	0x80000001
 8001108:	c7520000 	.word	0xc7520000
 800110c:	25b00200 	.word	0x25b00200

08001110 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a22      	ldr	r2, [pc, #136]	@ (80011b8 <HAL_ADC_MspInit+0xa8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d13e      	bne.n	80011b0 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001132:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001136:	f7ff ff4b 	bl	8000fd0 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2001      	movs	r0, #1
 800113c:	f7ff ff48 	bl	8000fd0 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001140:	2310      	movs	r3, #16
 8001142:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001144:	2303      	movs	r3, #3
 8001146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001156:	f007 fd3f 	bl	8008bd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800115a:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <HAL_ADC_MspInit+0xac>)
 800115c:	4a18      	ldr	r2, [pc, #96]	@ (80011c0 <HAL_ADC_MspInit+0xb0>)
 800115e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001160:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <HAL_ADC_MspInit+0xac>)
 8001162:	2205      	movs	r2, #5
 8001164:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_ADC_MspInit+0xac>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_ADC_MspInit+0xac>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_ADC_MspInit+0xac>)
 8001174:	2280      	movs	r2, #128	@ 0x80
 8001176:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001178:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <HAL_ADC_MspInit+0xac>)
 800117a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800117e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001180:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <HAL_ADC_MspInit+0xac>)
 8001182:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001186:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <HAL_ADC_MspInit+0xac>)
 800118a:	2220      	movs	r2, #32
 800118c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <HAL_ADC_MspInit+0xac>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001194:	4809      	ldr	r0, [pc, #36]	@ (80011bc <HAL_ADC_MspInit+0xac>)
 8001196:	f007 f9e1 	bl	800855c <HAL_DMA_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 80011a0:	f000 ff97 	bl	80020d2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a05      	ldr	r2, [pc, #20]	@ (80011bc <HAL_ADC_MspInit+0xac>)
 80011a8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011aa:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <HAL_ADC_MspInit+0xac>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	50040000 	.word	0x50040000
 80011bc:	20000378 	.word	0x20000378
 80011c0:	40020008 	.word	0x40020008
 80011c4:	00000000 	.word	0x00000000

080011c8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80011c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a54      	ldr	r2, [pc, #336]	@ (8001328 <HAL_ADC_ConvCpltCallback+0x160>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	f040 8091 	bne.w	8001300 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 80011de:	4b53      	ldr	r3, [pc, #332]	@ (800132c <HAL_ADC_ConvCpltCallback+0x164>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f976 	bl	80004d4 <__aeabi_i2d>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	a14a      	add	r1, pc, #296	@ (adr r1, 8001318 <HAL_ADC_ConvCpltCallback+0x150>)
 80011ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011f2:	f7ff fb03 	bl	80007fc <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fccb 	bl	8000b98 <__aeabi_d2f>
 8001202:	4603      	mov	r3, r0
 8001204:	4a4a      	ldr	r2, [pc, #296]	@ (8001330 <HAL_ADC_ConvCpltCallback+0x168>)
 8001206:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001208:	4b4a      	ldr	r3, [pc, #296]	@ (8001334 <HAL_ADC_ConvCpltCallback+0x16c>)
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	4b4a      	ldr	r3, [pc, #296]	@ (8001338 <HAL_ADC_ConvCpltCallback+0x170>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001218:	ee17 0a90 	vmov	r0, s15
 800121c:	f7ff f96c 	bl	80004f8 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	f04f 0000 	mov.w	r0, #0
 8001228:	4944      	ldr	r1, [pc, #272]	@ (800133c <HAL_ADC_ConvCpltCallback+0x174>)
 800122a:	f7ff fae7 	bl	80007fc <__aeabi_ddiv>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4690      	mov	r8, r2
 8001234:	4699      	mov	r9, r3
 8001236:	4b3d      	ldr	r3, [pc, #244]	@ (800132c <HAL_ADC_ConvCpltCallback+0x164>)
 8001238:	885b      	ldrh	r3, [r3, #2]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f94a 	bl	80004d4 <__aeabi_i2d>
 8001240:	4604      	mov	r4, r0
 8001242:	460d      	mov	r5, r1
 8001244:	4b3a      	ldr	r3, [pc, #232]	@ (8001330 <HAL_ADC_ConvCpltCallback+0x168>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f955 	bl	80004f8 <__aeabi_f2d>
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <HAL_ADC_ConvCpltCallback+0x178>)
 8001254:	f7ff fad2 	bl	80007fc <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4620      	mov	r0, r4
 800125e:	4629      	mov	r1, r5
 8001260:	f7ff f9a2 	bl	80005a8 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4614      	mov	r4, r2
 800126a:	461d      	mov	r5, r3
 800126c:	4b32      	ldr	r3, [pc, #200]	@ (8001338 <HAL_ADC_ConvCpltCallback+0x170>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f941 	bl	80004f8 <__aeabi_f2d>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4620      	mov	r0, r4
 800127c:	4629      	mov	r1, r5
 800127e:	f7fe ffdb 	bl	8000238 <__aeabi_dsub>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4640      	mov	r0, r8
 8001288:	4649      	mov	r1, r9
 800128a:	f7ff f98d 	bl	80005a8 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fc7f 	bl	8000b98 <__aeabi_d2f>
 800129a:	ee07 0a10 	vmov	s14, r0
 800129e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a6:	4b27      	ldr	r3, [pc, #156]	@ (8001344 <HAL_ADC_ConvCpltCallback+0x17c>)
 80012a8:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 80012ac:	4b1f      	ldr	r3, [pc, #124]	@ (800132c <HAL_ADC_ConvCpltCallback+0x164>)
 80012ae:	889b      	ldrh	r3, [r3, #4]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f90f 	bl	80004d4 <__aeabi_i2d>
 80012b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001320 <HAL_ADC_ConvCpltCallback+0x158>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff fa9e 	bl	80007fc <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	f7fe ffb6 	bl	800023c <__adddf3>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4614      	mov	r4, r2
 80012d6:	461d      	mov	r5, r3
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_ADC_ConvCpltCallback+0x168>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f90b 	bl	80004f8 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4620      	mov	r0, r4
 80012e8:	4629      	mov	r1, r5
 80012ea:	f7ff f95d 	bl	80005a8 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff fc4f 	bl	8000b98 <__aeabi_d2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <HAL_ADC_ConvCpltCallback+0x180>)
 80012fe:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001300:	2203      	movs	r2, #3
 8001302:	490a      	ldr	r1, [pc, #40]	@ (800132c <HAL_ADC_ConvCpltCallback+0x164>)
 8001304:	4811      	ldr	r0, [pc, #68]	@ (800134c <HAL_ADC_ConvCpltCallback+0x184>)
 8001306:	f006 faad 	bl	8007864 <HAL_ADC_Start_DMA>



}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001314:	f3af 8000 	nop.w
 8001318:	d70a3d70 	.word	0xd70a3d70
 800131c:	40b36323 	.word	0x40b36323
 8001320:	00000000 	.word	0x00000000
 8001324:	40affe00 	.word	0x40affe00
 8001328:	50040000 	.word	0x50040000
 800132c:	20000790 	.word	0x20000790
 8001330:	2000079c 	.word	0x2000079c
 8001334:	20000008 	.word	0x20000008
 8001338:	2000000c 	.word	0x2000000c
 800133c:	40590000 	.word	0x40590000
 8001340:	40080000 	.word	0x40080000
 8001344:	20000798 	.word	0x20000798
 8001348:	200007a0 	.word	0x200007a0
 800134c:	20000314 	.word	0x20000314

08001350 <bmp581_init_precise_normal>:
extern float temp;
uint8_t odrcheck=0;

//Ox18 donc 11000 pour ODR donc 5hz en mode normal avec oversampling a 128 pour la pression et 8 pour la temperature

uint8_t bmp581_init_precise_normal(BMP_t * bmp581){
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af04      	add	r7, sp, #16
 8001356:	6078      	str	r0, [r7, #4]

//	uint8_t OSR_tmask = 0b01111111;
//	uint8_t ODR_tmask = 0b01100001;

	uint8_t OSR_tmask = 0b01111011;
 8001358:	237b      	movs	r3, #123	@ 0x7b
 800135a:	72fb      	strb	r3, [r7, #11]
	uint8_t ODR_tmask = 0b01101001;
 800135c:	2369      	movs	r3, #105	@ 0x69
 800135e:	72bb      	strb	r3, [r7, #10]
	uint8_t DSP_conf_mask = 0b00101011;
 8001360:	232b      	movs	r3, #43	@ 0x2b
 8001362:	727b      	strb	r3, [r7, #9]
	uint8_t DSP_conf_mask2 = 0b00010010;
 8001364:	2312      	movs	r3, #18
 8001366:	723b      	strb	r3, [r7, #8]
	int check=0;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 800136c:	2364      	movs	r3, #100	@ 0x64
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	f107 030b 	add.w	r3, r7, #11
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	2236      	movs	r2, #54	@ 0x36
 800137e:	218e      	movs	r1, #142	@ 0x8e
 8001380:	482a      	ldr	r0, [pc, #168]	@ (800142c <bmp581_init_precise_normal+0xdc>)
 8001382:	f008 f8c9 	bl	8009518 <HAL_I2C_Mem_Write>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <bmp581_init_precise_normal+0x40>
			check=1;
 800138c:	2301      	movs	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
		}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 8001390:	2364      	movs	r3, #100	@ 0x64
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	2301      	movs	r3, #1
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	f107 030a 	add.w	r3, r7, #10
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2301      	movs	r3, #1
 80013a0:	2237      	movs	r2, #55	@ 0x37
 80013a2:	218e      	movs	r1, #142	@ 0x8e
 80013a4:	4821      	ldr	r0, [pc, #132]	@ (800142c <bmp581_init_precise_normal+0xdc>)
 80013a6:	f008 f8b7 	bl	8009518 <HAL_I2C_Mem_Write>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <bmp581_init_precise_normal+0x64>
					check=1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask, 1, 100)!=HAL_OK){
 80013b4:	2364      	movs	r3, #100	@ 0x64
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	2301      	movs	r3, #1
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	f107 0309 	add.w	r3, r7, #9
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2301      	movs	r3, #1
 80013c4:	2230      	movs	r2, #48	@ 0x30
 80013c6:	218e      	movs	r1, #142	@ 0x8e
 80013c8:	4818      	ldr	r0, [pc, #96]	@ (800142c <bmp581_init_precise_normal+0xdc>)
 80013ca:	f008 f8a5 	bl	8009518 <HAL_I2C_Mem_Write>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <bmp581_init_precise_normal+0x88>
				check=1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
			}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask2, 1, 100)!=HAL_OK){
 80013d8:	2364      	movs	r3, #100	@ 0x64
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	2301      	movs	r3, #1
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	2230      	movs	r2, #48	@ 0x30
 80013ea:	218e      	movs	r1, #142	@ 0x8e
 80013ec:	480f      	ldr	r0, [pc, #60]	@ (800142c <bmp581_init_precise_normal+0xdc>)
 80013ee:	f008 f893 	bl	8009518 <HAL_I2C_Mem_Write>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <bmp581_init_precise_normal+0xac>
					check=1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_OSR_EFF, 1, &odrcheck, 1, 100)!=HAL_OK){
 80013fc:	2364      	movs	r3, #100	@ 0x64
 80013fe:	9302      	str	r3, [sp, #8]
 8001400:	2301      	movs	r3, #1
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <bmp581_init_precise_normal+0xe0>)
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2301      	movs	r3, #1
 800140a:	2238      	movs	r2, #56	@ 0x38
 800140c:	218f      	movs	r1, #143	@ 0x8f
 800140e:	4807      	ldr	r0, [pc, #28]	@ (800142c <bmp581_init_precise_normal+0xdc>)
 8001410:	f008 f996 	bl	8009740 <HAL_I2C_Mem_Read>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <bmp581_init_precise_normal+0xce>
					check=1;
 800141a:	2301      	movs	r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
				}


	return check;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	b2db      	uxtb	r3, r3

}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200003f4 	.word	0x200003f4
 8001430:	200003f0 	.word	0x200003f0
 8001434:	00000000 	.word	0x00000000

08001438 <bmp581_read_precise_normal>:




uint8_t bmp581_read_precise_normal(BMP_t * bmp581){
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b08e      	sub	sp, #56	@ 0x38
 800143c:	af04      	add	r7, sp, #16
 800143e:	6078      	str	r0, [r7, #4]
		int check=0;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
		uint8_t recarray[6];
		int32_t intbuffertemp=0;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
		int32_t intbufferpres=0;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]

		double tmoy=0;
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9c7 2304 	strd	r2, r3, [r7, #16]
//			check=1;
//		}
//		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_PRESS_DATA_MSB, 1, &recarray[5], 1, 100)!=HAL_OK){
//			check=1;
//		}
		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_XLSB, 1, &recarray, 6, 100)!=HAL_OK){
 8001458:	2364      	movs	r3, #100	@ 0x64
 800145a:	9302      	str	r3, [sp, #8]
 800145c:	2306      	movs	r3, #6
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	221d      	movs	r2, #29
 800146a:	218f      	movs	r1, #143	@ 0x8f
 800146c:	4866      	ldr	r0, [pc, #408]	@ (8001608 <bmp581_read_precise_normal+0x1d0>)
 800146e:	f008 f967 	bl	8009740 <HAL_I2C_Mem_Read>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <bmp581_read_precise_normal+0x44>
					check=1;
 8001478:	2301      	movs	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
				}


		if(check==0){
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	2b00      	cmp	r3, #0
 8001480:	f040 80a1 	bne.w	80015c6 <bmp581_read_precise_normal+0x18e>

		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 8001484:	7abb      	ldrb	r3, [r7, #10]
 8001486:	041a      	lsls	r2, r3, #16
 8001488:	7a7b      	ldrb	r3, [r7, #9]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	4313      	orrs	r3, r2
 800148e:	7a3a      	ldrb	r2, [r7, #8]
 8001490:	4313      	orrs	r3, r2
 8001492:	623b      	str	r3, [r7, #32]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 8001494:	7b7b      	ldrb	r3, [r7, #13]
 8001496:	041a      	lsls	r2, r3, #16
 8001498:	7b3b      	ldrb	r3, [r7, #12]
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	4313      	orrs	r3, r2
 800149e:	7afa      	ldrb	r2, [r7, #11]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61fb      	str	r3, [r7, #28]
		bmptemp=(double)intbuffertemp/65536.0;
 80014a4:	6a38      	ldr	r0, [r7, #32]
 80014a6:	f7ff f815 	bl	80004d4 <__aeabi_i2d>
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	4b57      	ldr	r3, [pc, #348]	@ (800160c <bmp581_read_precise_normal+0x1d4>)
 80014b0:	f7ff f9a4 	bl	80007fc <__aeabi_ddiv>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4955      	ldr	r1, [pc, #340]	@ (8001610 <bmp581_read_precise_normal+0x1d8>)
 80014ba:	e9c1 2300 	strd	r2, r3, [r1]
		bmppress=(double) intbufferpres/64.0;
 80014be:	69f8      	ldr	r0, [r7, #28]
 80014c0:	f7ff f808 	bl	80004d4 <__aeabi_i2d>
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	4b52      	ldr	r3, [pc, #328]	@ (8001614 <bmp581_read_precise_normal+0x1dc>)
 80014ca:	f7ff f997 	bl	80007fc <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4951      	ldr	r1, [pc, #324]	@ (8001618 <bmp581_read_precise_normal+0x1e0>)
 80014d4:	e9c1 2300 	strd	r2, r3, [r1]

		//alt=(double)(288.15/0.0065)*(1-pow((double)(finalpress*1000.0)/101325.0, (double)(287.05*0.0065)/(9.80665)));
		bmpalt=(double) ((8.314*293.15)/(9.80665*0.028964))*log((double)101325.0/(bmppress));
 80014d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001618 <bmp581_read_precise_normal+0x1e0>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	a13e      	add	r1, pc, #248	@ (adr r1, 80015d8 <bmp581_read_precise_normal+0x1a0>)
 80014e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014e4:	f7ff f98a 	bl	80007fc <__aeabi_ddiv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	ec43 2b17 	vmov	d7, r2, r3
 80014f0:	eeb0 0a47 	vmov.f32	s0, s14
 80014f4:	eef0 0a67 	vmov.f32	s1, s15
 80014f8:	f019 fc3a 	bl	801ad70 <log>
 80014fc:	ec51 0b10 	vmov	r0, r1, d0
 8001500:	a337      	add	r3, pc, #220	@ (adr r3, 80015e0 <bmp581_read_precise_normal+0x1a8>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff f84f 	bl	80005a8 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4943      	ldr	r1, [pc, #268]	@ (800161c <bmp581_read_precise_normal+0x1e4>)
 8001510:	e9c1 2300 	strd	r2, r3, [r1]
		tmoy=(double) 293.15+bmptemp+(0.0065*bmpalt)/2;
 8001514:	4b3e      	ldr	r3, [pc, #248]	@ (8001610 <bmp581_read_precise_normal+0x1d8>)
 8001516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800151a:	a333      	add	r3, pc, #204	@ (adr r3, 80015e8 <bmp581_read_precise_normal+0x1b0>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7fe fe8c 	bl	800023c <__adddf3>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4614      	mov	r4, r2
 800152a:	461d      	mov	r5, r3
 800152c:	4b3b      	ldr	r3, [pc, #236]	@ (800161c <bmp581_read_precise_normal+0x1e4>)
 800152e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001532:	a32f      	add	r3, pc, #188	@ (adr r3, 80015f0 <bmp581_read_precise_normal+0x1b8>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f836 	bl	80005a8 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800154c:	f7ff f956 	bl	80007fc <__aeabi_ddiv>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7fe fe70 	bl	800023c <__adddf3>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	e9c7 2304 	strd	r2, r3, [r7, #16]
		bmpalt=(double) ((8.314*tmoy)/(9.80665*0.028964))*log((double)101325.0/(bmppress));
 8001564:	a324      	add	r3, pc, #144	@ (adr r3, 80015f8 <bmp581_read_precise_normal+0x1c0>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800156e:	f7ff f81b 	bl	80005a8 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	a321      	add	r3, pc, #132	@ (adr r3, 8001600 <bmp581_read_precise_normal+0x1c8>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7ff f93c 	bl	80007fc <__aeabi_ddiv>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4614      	mov	r4, r2
 800158a:	461d      	mov	r5, r3
 800158c:	4b22      	ldr	r3, [pc, #136]	@ (8001618 <bmp581_read_precise_normal+0x1e0>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	a111      	add	r1, pc, #68	@ (adr r1, 80015d8 <bmp581_read_precise_normal+0x1a0>)
 8001594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001598:	f7ff f930 	bl	80007fc <__aeabi_ddiv>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	ec43 2b17 	vmov	d7, r2, r3
 80015a4:	eeb0 0a47 	vmov.f32	s0, s14
 80015a8:	eef0 0a67 	vmov.f32	s1, s15
 80015ac:	f019 fbe0 	bl	801ad70 <log>
 80015b0:	ec53 2b10 	vmov	r2, r3, d0
 80015b4:	4620      	mov	r0, r4
 80015b6:	4629      	mov	r1, r5
 80015b8:	f7fe fff6 	bl	80005a8 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4916      	ldr	r1, [pc, #88]	@ (800161c <bmp581_read_precise_normal+0x1e4>)
 80015c2:	e9c1 2300 	strd	r2, r3, [r1]



		}

		return check;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c8:	b2db      	uxtb	r3, r3
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3728      	adds	r7, #40	@ 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bdb0      	pop	{r4, r5, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	f3af 8000 	nop.w
 80015d8:	00000000 	.word	0x00000000
 80015dc:	40f8bcd0 	.word	0x40f8bcd0
 80015e0:	81a9275b 	.word	0x81a9275b
 80015e4:	40c0c254 	.word	0x40c0c254
 80015e8:	66666666 	.word	0x66666666
 80015ec:	40725266 	.word	0x40725266
 80015f0:	76c8b439 	.word	0x76c8b439
 80015f4:	3f7a9fbe 	.word	0x3f7a9fbe
 80015f8:	9ba5e354 	.word	0x9ba5e354
 80015fc:	4020a0c4 	.word	0x4020a0c4
 8001600:	50527f89 	.word	0x50527f89
 8001604:	3fd22db5 	.word	0x3fd22db5
 8001608:	200003f4 	.word	0x200003f4
 800160c:	40f00000 	.word	0x40f00000
 8001610:	200003d8 	.word	0x200003d8
 8001614:	40500000 	.word	0x40500000
 8001618:	200003e0 	.word	0x200003e0
 800161c:	200003e8 	.word	0x200003e8

08001620 <LL_AHB1_GRP1_EnableClock>:
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800162c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800162e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800163c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4013      	ands	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001644:	68fb      	ldr	r3, [r7, #12]
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001656:	2004      	movs	r0, #4
 8001658:	f7ff ffe2 	bl	8001620 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff ffdf 	bl	8001620 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 4, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2104      	movs	r1, #4
 8001666:	200b      	movs	r0, #11
 8001668:	f006 ff43 	bl	80084f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800166c:	200b      	movs	r0, #11
 800166e:	f006 ff5a 	bl	8008526 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2102      	movs	r1, #2
 8001676:	200c      	movs	r0, #12
 8001678:	f006 ff3b 	bl	80084f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800167c:	200c      	movs	r0, #12
 800167e:	f006 ff52 	bl	8008526 <HAL_NVIC_EnableIRQ>

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}

08001686 <dcRemoval>:

#include "filter.h"


DC_FILTER_T dcRemoval(float x, float prev_w, float alpha)
{
 8001686:	b480      	push	{r7}
 8001688:	b08b      	sub	sp, #44	@ 0x2c
 800168a:	af00      	add	r7, sp, #0
 800168c:	ed87 0a05 	vstr	s0, [r7, #20]
 8001690:	edc7 0a04 	vstr	s1, [r7, #16]
 8001694:	ed87 1a03 	vstr	s2, [r7, #12]
  DC_FILTER_T filtered;
  filtered.w = x + alpha * prev_w;
 8001698:	ed97 7a03 	vldr	s14, [r7, #12]
 800169c:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ac:	edc7 7a06 	vstr	s15, [r7, #24]
  filtered.result = filtered.w - prev_w;
 80016b0:	ed97 7a06 	vldr	s14, [r7, #24]
 80016b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016bc:	edc7 7a07 	vstr	s15, [r7, #28]

  return filtered;
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	f107 0218 	add.w	r2, r7, #24
 80016c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80016d0:	6a3a      	ldr	r2, [r7, #32]
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	ee07 2a10 	vmov	s14, r2
 80016d8:	ee07 3a90 	vmov	s15, r3
}
 80016dc:	eeb0 0a47 	vmov.f32	s0, s14
 80016e0:	eef0 0a67 	vmov.f32	s1, s15
 80016e4:	372c      	adds	r7, #44	@ 0x2c
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <lowPassButterworthFilter>:

//Low pass butterworth filter order=1 alpha1=0.1
void lowPassButterworthFilter(float x, BUTTERWORTH_FILTER_T * filterResult)
{
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80016fa:	6038      	str	r0, [r7, #0]
	filterResult->v[0] = filterResult->v[1];
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	601a      	str	r2, [r3, #0]

    //Fs = 100Hz and Fc = 10Hz
    filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7fe fef7 	bl	80004f8 <__aeabi_f2d>
 800170a:	a319      	add	r3, pc, #100	@ (adr r3, 8001770 <lowPassButterworthFilter+0x80>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f7fe ff4a 	bl	80005a8 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4614      	mov	r4, r2
 800171a:	461d      	mov	r5, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fee9 	bl	80004f8 <__aeabi_f2d>
 8001726:	a314      	add	r3, pc, #80	@ (adr r3, 8001778 <lowPassButterworthFilter+0x88>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe ff3c 	bl	80005a8 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe fd80 	bl	800023c <__adddf3>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa28 	bl	8000b98 <__aeabi_d2f>
 8001748:	4602      	mov	r2, r0
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	605a      	str	r2, [r3, #4]

    //Fs = 100Hz and Fc = 4Hz
    //filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter

    filterResult->result = filterResult->v[0] + filterResult->v[1];
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	ed93 7a00 	vldr	s14, [r3]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	edd3 7a01 	vldr	s15, [r3, #4]
 800175a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bdb0      	pop	{r4, r5, r7, pc}
 800176c:	f3af 8000 	nop.w
 8001770:	5e7c4548 	.word	0x5e7c4548
 8001774:	3fcf63ef 	.word	0x3fcf63ef
 8001778:	50c1dd5c 	.word	0x50c1dd5c
 800177c:	3fe04e08 	.word	0x3fe04e08

08001780 <meanDiff>:

float meanDiff(float M, MEAN_DIFF_FILTER_T* filterValues)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	ed87 0a01 	vstr	s0, [r7, #4]
 800178a:	6038      	str	r0, [r7, #0]
  float avg = 0;
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]

  filterValues->sum -= filterValues->values[filterValues->index];
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	edd3 7a00 	vldr	s15, [r3]
 80017a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  filterValues->values[filterValues->index] = M;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]
  filterValues->sum += filterValues->values[filterValues->index];
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

  filterValues->index++;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017e8:	3301      	adds	r3, #1
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80017f8:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <meanDiff+0xe0>)
 80017fa:	fba3 1302 	umull	r1, r3, r3, r2
 80017fe:	08d9      	lsrs	r1, r3, #3
 8001800:	460b      	mov	r3, r1
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	1a5b      	subs	r3, r3, r1
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	b2da      	uxtb	r2, r3
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001816:	2b0e      	cmp	r3, #14
 8001818:	d807      	bhi.n	800182a <meanDiff+0xaa>
    filterValues->count++;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001820:	3301      	adds	r3, #1
 8001822:	b2da      	uxtb	r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  avg = filterValues->sum / filterValues->count;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800183e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001842:	edc7 7a03 	vstr	s15, [r7, #12]
  return avg - M;
 8001846:	ed97 7a03 	vldr	s14, [r7, #12]
 800184a:	edd7 7a01 	vldr	s15, [r7, #4]
 800184e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001852:	eeb0 0a67 	vmov.f32	s0, s15
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	88888889 	.word	0x88888889

08001864 <LL_AHB2_GRP1_EnableClock>:
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001870:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001872:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4313      	orrs	r3, r2
 800187a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001880:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001888:	68fb      	ldr	r3, [r7, #12]
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ac:	2004      	movs	r0, #4
 80018ae:	f7ff ffd9 	bl	8001864 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	2002      	movs	r0, #2
 80018b4:	f7ff ffd6 	bl	8001864 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	2001      	movs	r0, #1
 80018ba:	f7ff ffd3 	bl	8001864 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2101      	movs	r1, #1
 80018c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c6:	f007 fb0f 	bl	8008ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2183      	movs	r1, #131	@ 0x83
 80018ce:	481b      	ldr	r0, [pc, #108]	@ (800193c <MX_GPIO_Init+0xa4>)
 80018d0:	f007 fb0a 	bl	8008ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018d4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018da:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80018de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4815      	ldr	r0, [pc, #84]	@ (8001940 <MX_GPIO_Init+0xa8>)
 80018ea:	f007 f975 	bl	8008bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018ee:	2301      	movs	r3, #1
 80018f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	4619      	mov	r1, r3
 8001902:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001906:	f007 f967 	bl	8008bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|SPI_CS_Pin;
 800190a:	2383      	movs	r3, #131	@ 0x83
 800190c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4619      	mov	r1, r3
 800191e:	4807      	ldr	r0, [pc, #28]	@ (800193c <MX_GPIO_Init+0xa4>)
 8001920:	f007 f95a 	bl	8008bd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2101      	movs	r1, #1
 8001928:	2028      	movs	r0, #40	@ 0x28
 800192a:	f006 fde2 	bl	80084f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800192e:	2028      	movs	r0, #40	@ 0x28
 8001930:	f006 fdf9 	bl	8008526 <HAL_NVIC_EnableIRQ>

}
 8001934:	bf00      	nop
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	48000400 	.word	0x48000400
 8001940:	48000800 	.word	0x48000800

08001944 <LL_AHB2_GRP1_EnableClock>:
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001950:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001952:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4313      	orrs	r3, r2
 800195a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001960:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001968:	68fb      	ldr	r3, [r7, #12]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001976:	b480      	push	{r7}
 8001978:	b085      	sub	sp, #20
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001982:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001984:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4313      	orrs	r3, r2
 800198c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800198e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001992:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4013      	ands	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <MX_I2C1_Init+0x74>)
 80019ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001a20 <MX_I2C1_Init+0x78>)
 80019b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <MX_I2C1_Init+0x74>)
 80019b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a24 <MX_I2C1_Init+0x7c>)
 80019b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019b8:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <MX_I2C1_Init+0x74>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019be:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <MX_I2C1_Init+0x74>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c4:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <MX_I2C1_Init+0x74>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019ca:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <MX_I2C1_Init+0x74>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <MX_I2C1_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d6:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <MX_I2C1_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <MX_I2C1_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e2:	480e      	ldr	r0, [pc, #56]	@ (8001a1c <MX_I2C1_Init+0x74>)
 80019e4:	f007 faee 	bl	8008fc4 <HAL_I2C_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019ee:	f000 fb70 	bl	80020d2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019f2:	2100      	movs	r1, #0
 80019f4:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <MX_I2C1_Init+0x74>)
 80019f6:	f008 fb0b 	bl	800a010 <HAL_I2CEx_ConfigAnalogFilter>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a00:	f000 fb67 	bl	80020d2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a04:	2100      	movs	r1, #0
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <MX_I2C1_Init+0x74>)
 8001a08:	f008 fb4d 	bl	800a0a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a12:	f000 fb5e 	bl	80020d2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200003f4 	.word	0x200003f4
 8001a20:	40005400 	.word	0x40005400
 8001a24:	10b17db5 	.word	0x10b17db5

08001a28 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <MX_I2C3_Init+0x7c>)
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa8 <MX_I2C3_Init+0x80>)
 8001a30:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00910B1C;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <MX_I2C3_Init+0x7c>)
 8001a34:	4a1d      	ldr	r2, [pc, #116]	@ (8001aac <MX_I2C3_Init+0x84>)
 8001a36:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <MX_I2C3_Init+0x7c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <MX_I2C3_Init+0x7c>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a44:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <MX_I2C3_Init+0x7c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001a4a:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <MX_I2C3_Init+0x7c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a50:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <MX_I2C3_Init+0x7c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <MX_I2C3_Init+0x7c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <MX_I2C3_Init+0x7c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a62:	4810      	ldr	r0, [pc, #64]	@ (8001aa4 <MX_I2C3_Init+0x7c>)
 8001a64:	f007 faae 	bl	8008fc4 <HAL_I2C_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001a6e:	f000 fb30 	bl	80020d2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a72:	2100      	movs	r1, #0
 8001a74:	480b      	ldr	r0, [pc, #44]	@ (8001aa4 <MX_I2C3_Init+0x7c>)
 8001a76:	f008 facb 	bl	800a010 <HAL_I2CEx_ConfigAnalogFilter>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001a80:	f000 fb27 	bl	80020d2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a84:	2100      	movs	r1, #0
 8001a86:	4807      	ldr	r0, [pc, #28]	@ (8001aa4 <MX_I2C3_Init+0x7c>)
 8001a88:	f008 fb0d 	bl	800a0a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001a92:	f000 fb1e 	bl	80020d2 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8001a96:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001a9a:	f008 fb51 	bl	800a140 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000448 	.word	0x20000448
 8001aa8:	40005c00 	.word	0x40005c00
 8001aac:	00910b1c 	.word	0x00910b1c

08001ab0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b09c      	sub	sp, #112	@ 0x70
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	2250      	movs	r2, #80	@ 0x50
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f016 fc32 	bl	801833a <memset>
  if(i2cHandle->Instance==I2C1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a37      	ldr	r2, [pc, #220]	@ (8001bb8 <HAL_I2C_MspInit+0x108>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d127      	bne.n	8001b30 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ae4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4618      	mov	r0, r3
 8001af0:	f00b fcaf 	bl	800d452 <HAL_RCCEx_PeriphCLKConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001afa:	f000 faea 	bl	80020d2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	2002      	movs	r0, #2
 8001b00:	f7ff ff20 	bl	8001944 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b04:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0a:	2312      	movs	r3, #18
 8001b0c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b16:	2304      	movs	r3, #4
 8001b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4826      	ldr	r0, [pc, #152]	@ (8001bbc <HAL_I2C_MspInit+0x10c>)
 8001b22:	f007 f859 	bl	8008bd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b26:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001b2a:	f7ff ff24 	bl	8001976 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001b2e:	e03e      	b.n	8001bae <HAL_I2C_MspInit+0xfe>
  else if(i2cHandle->Instance==I2C3)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a22      	ldr	r2, [pc, #136]	@ (8001bc0 <HAL_I2C_MspInit+0x110>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d139      	bne.n	8001bae <HAL_I2C_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001b3e:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001b42:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f00b fc82 	bl	800d452 <HAL_RCCEx_PeriphCLKConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8001b54:	f000 fabd 	bl	80020d2 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f7ff fef3 	bl	8001944 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	2002      	movs	r0, #2
 8001b60:	f7ff fef0 	bl	8001944 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b68:	2312      	movs	r3, #18
 8001b6a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b74:	2304      	movs	r3, #4
 8001b76:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b82:	f007 f829 	bl	8008bd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b86:	2310      	movs	r3, #16
 8001b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8a:	2312      	movs	r3, #18
 8001b8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b96:	2304      	movs	r3, #4
 8001b98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4806      	ldr	r0, [pc, #24]	@ (8001bbc <HAL_I2C_MspInit+0x10c>)
 8001ba2:	f007 f819 	bl	8008bd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ba6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001baa:	f7ff fee4 	bl	8001976 <LL_APB1_GRP1_EnableClock>
}
 8001bae:	bf00      	nop
 8001bb0:	3770      	adds	r7, #112	@ 0x70
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40005400 	.word	0x40005400
 8001bbc:	48000400 	.word	0x48000400
 8001bc0:	40005c00 	.word	0x40005c00

08001bc4 <LL_AHB3_GRP1_EnableClock>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <MX_IPCC_Init+0x20>)
 8001bfe:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <MX_IPCC_Init+0x24>)
 8001c00:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001c02:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <MX_IPCC_Init+0x20>)
 8001c04:	f008 faae 	bl	800a164 <HAL_IPCC_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001c0e:	f000 fa60 	bl	80020d2 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000049c 	.word	0x2000049c
 8001c1c:	58000c00 	.word	0x58000c00

08001c20 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c64 <HAL_IPCC_MspInit+0x44>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d113      	bne.n	8001c5a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001c32:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001c36:	f7ff ffc5 	bl	8001bc4 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	202c      	movs	r0, #44	@ 0x2c
 8001c40:	f006 fc57 	bl	80084f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001c44:	202c      	movs	r0, #44	@ 0x2c
 8001c46:	f006 fc6e 	bl	8008526 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	202d      	movs	r0, #45	@ 0x2d
 8001c50:	f006 fc4f 	bl	80084f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001c54:	202d      	movs	r0, #45	@ 0x2d
 8001c56:	f006 fc66 	bl	8008526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	58000c00 	.word	0x58000c00

08001c68 <LL_AHB2_GRP1_EnableClock>:
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c84:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cac:	d12f      	bne.n	8001d0e <HAL_GPIO_EXTI_Callback+0x72>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)== GPIO_PIN_RESET){
 8001cae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cb2:	4833      	ldr	r0, [pc, #204]	@ (8001d80 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001cb4:	f007 f900 	bl	8008eb8 <HAL_GPIO_ReadPin>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_GPIO_EXTI_Callback+0x36>

					boutonAtime=0;
 8001cbe:	4b31      	ldr	r3, [pc, #196]	@ (8001d84 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 8001cc4:	f005 fa7e 	bl	80071c4 <HAL_GetTick>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d88 <HAL_GPIO_EXTI_Callback+0xec>)
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e010      	b.n	8001cf4 <HAL_GPIO_EXTI_Callback+0x58>


				}
				else{
					BTN_A++;
 8001cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8001d8c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8001d8c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001cda:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8001cdc:	f005 fa72 	bl	80071c4 <HAL_GetTick>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4a29      	ldr	r2, [pc, #164]	@ (8001d88 <HAL_GPIO_EXTI_Callback+0xec>)
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b26      	ldr	r3, [pc, #152]	@ (8001d84 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001cec:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8001cee:	4b26      	ldr	r3, [pc, #152]	@ (8001d88 <HAL_GPIO_EXTI_Callback+0xec>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001cfc:	db07      	blt.n	8001d0e <HAL_GPIO_EXTI_Callback+0x72>
					BTN_A_LONG++;
 8001cfe:	4b24      	ldr	r3, [pc, #144]	@ (8001d90 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3301      	adds	r3, #1
 8001d04:	4a22      	ldr	r2, [pc, #136]	@ (8001d90 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d06:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 8001d08:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_15){
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d14:	d12f      	bne.n	8001d76 <HAL_GPIO_EXTI_Callback+0xda>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)== GPIO_PIN_RESET){
 8001d16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d1a:	4819      	ldr	r0, [pc, #100]	@ (8001d80 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001d1c:	f007 f8cc 	bl	8008eb8 <HAL_GPIO_ReadPin>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <HAL_GPIO_EXTI_Callback+0x9e>

			boutonBtime=0;
 8001d26:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 8001d2c:	f005 fa4a 	bl	80071c4 <HAL_GetTick>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e010      	b.n	8001d5c <HAL_GPIO_EXTI_Callback+0xc0>


		}
		else{
			BTN_B++;
 8001d3a:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <HAL_GPIO_EXTI_Callback+0x100>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	4a16      	ldr	r2, [pc, #88]	@ (8001d9c <HAL_GPIO_EXTI_Callback+0x100>)
 8001d42:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 8001d44:	f005 fa3e 	bl	80071c4 <HAL_GetTick>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a13      	ldr	r2, [pc, #76]	@ (8001d98 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001d54:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001d64:	db07      	blt.n	8001d76 <HAL_GPIO_EXTI_Callback+0xda>
			BTN_B_LONG++;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <HAL_GPIO_EXTI_Callback+0x104>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001da0 <HAL_GPIO_EXTI_Callback+0x104>)
 8001d6e:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8001d70:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <HAL_GPIO_EXTI_Callback+0x100>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
		}



	}
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	48000800 	.word	0x48000800
 8001d84:	20000a8c 	.word	0x20000a8c
 8001d88:	20000a94 	.word	0x20000a94
 8001d8c:	20000768 	.word	0x20000768
 8001d90:	20000aa0 	.word	0x20000aa0
 8001d94:	20000a90 	.word	0x20000a90
 8001d98:	20000a98 	.word	0x20000a98
 8001d9c:	2000076c 	.word	0x2000076c
 8001da0:	20000a9c 	.word	0x20000a9c

08001da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	@ 0x28
 8001da8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001daa:	f005 f957 	bl	800705c <HAL_Init>

  /* USER CODE BEGIN Init */

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  void (*boot_jump)(void);

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbc:	2004      	movs	r0, #4
 8001dbe:	f7ff ff53 	bl	8001c68 <LL_AHB2_GRP1_EnableClock>
   GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8001dc2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001dc6:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	485d      	ldr	r0, [pc, #372]	@ (8001f4c <main+0x1a8>)
 8001dd6:	f006 feff 	bl	8008bd8 <HAL_GPIO_Init>
   /* If both Select and Reset button held down at boot time, then immediately
    * jump to DFU bootloader, rather than start the Snickerdoodle application.
    */
   if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_RESET) &&
 8001dda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001dde:	485b      	ldr	r0, [pc, #364]	@ (8001f4c <main+0x1a8>)
 8001de0:	f007 f86a 	bl	8008eb8 <HAL_GPIO_ReadPin>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d115      	bne.n	8001e16 <main+0x72>
 	  (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET))
 8001dea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dee:	4857      	ldr	r0, [pc, #348]	@ (8001f4c <main+0x1a8>)
 8001df0:	f007 f862 	bl	8008eb8 <HAL_GPIO_ReadPin>
 8001df4:	4603      	mov	r3, r0
   if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_RESET) &&
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10d      	bne.n	8001e16 <main+0x72>
   {
 	  HAL_DeInit();
 8001dfa:	f005 f94f 	bl	800709c <HAL_DeInit>
 	  boot_jump = (void (*)(void))(*((uint32_t *)(SYS_MEM_START_ADDR + 4)));
 8001dfe:	4b54      	ldr	r3, [pc, #336]	@ (8001f50 <main+0x1ac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	61fb      	str	r3, [r7, #28]
 	  __set_MSP(*(__IO uint32_t*)SYS_MEM_START_ADDR);
 8001e04:	4b53      	ldr	r3, [pc, #332]	@ (8001f54 <main+0x1b0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f383 8808 	msr	MSP, r3
}
 8001e10:	bf00      	nop

 	  /* NOTE WELL: This call never returns: */
 	  boot_jump();
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	4798      	blx	r3
   }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e16:	f000 f8c7 	bl	8001fa8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e1a:	f000 f929 	bl	8002070 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001e1e:	f7ff feeb 	bl	8001bf8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e22:	f7ff fd39 	bl	8001898 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e26:	f7ff fc14 	bl	8001652 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e2a:	f7ff f8eb 	bl	8001004 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001e2e:	f7ff fdbb 	bl	80019a8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001e32:	f7ff fdf9 	bl	8001a28 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001e36:	f004 fe97 	bl	8006b68 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8001e3a:	f004 fc07 	bl	800664c <MX_TIM2_Init>
  MX_TIM16_Init();
 8001e3e:	f004 fc53 	bl	80066e8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001e42:	f004 fc79 	bl	8006738 <MX_TIM17_Init>
  MX_SPI1_Init();
 8001e46:	f001 fb4d 	bl	80034e4 <MX_SPI1_Init>
  MX_USB_Device_Init();
 8001e4a:	f013 fdaf 	bl	80159ac <MX_USB_Device_Init>
  MX_RTC_Init();
 8001e4e:	f001 fa77 	bl	8003340 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */



  	ssd1306_Init();
 8001e52:	f001 fdd1 	bl	80039f8 <ssd1306_Init>

  	HAL_Delay(10);
 8001e56:	200a      	movs	r0, #10
 8001e58:	f005 f9cc 	bl	80071f4 <HAL_Delay>
  	ssd1306_Fill(Black);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f001 fe35 	bl	8003acc <ssd1306_Fill>

  	ssd1306_DrawBitmap(32, 32, startimg, 64, 32, White);
 8001e62:	2301      	movs	r3, #1
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	2320      	movs	r3, #32
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2340      	movs	r3, #64	@ 0x40
 8001e6c:	4a3a      	ldr	r2, [pc, #232]	@ (8001f58 <main+0x1b4>)
 8001e6e:	2120      	movs	r1, #32
 8001e70:	2020      	movs	r0, #32
 8001e72:	f002 f876 	bl	8003f62 <ssd1306_DrawBitmap>
  	ssd1306_UpdateScreen();
 8001e76:	f001 fe41 	bl	8003afc <ssd1306_UpdateScreen>


  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	4937      	ldr	r1, [pc, #220]	@ (8001f5c <main+0x1b8>)
 8001e7e:	4838      	ldr	r0, [pc, #224]	@ (8001f60 <main+0x1bc>)
 8001e80:	f005 fcf0 	bl	8007864 <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start(&htim2);
 8001e84:	4837      	ldr	r0, [pc, #220]	@ (8001f64 <main+0x1c0>)
 8001e86:	f00d f98d 	bl	800f1a4 <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim16);
 8001e8a:	4837      	ldr	r0, [pc, #220]	@ (8001f68 <main+0x1c4>)
 8001e8c:	f00d f9d0 	bl	800f230 <HAL_TIM_Base_Start_IT>
  	//HAL_TIM_Base_Start_IT(&htim17);

  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8001e90:	2201      	movs	r2, #1
 8001e92:	2101      	movs	r1, #1
 8001e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e98:	f007 f826 	bl	8008ee8 <HAL_GPIO_WritePin>

  	HAL_Delay(100);
 8001e9c:	2064      	movs	r0, #100	@ 0x64
 8001e9e:	f005 f9a9 	bl	80071f4 <HAL_Delay>
  	HAL_UART_Abort(&hlpuart1);
 8001ea2:	4832      	ldr	r0, [pc, #200]	@ (8001f6c <main+0x1c8>)
 8001ea4:	f00d fe8a 	bl	800fbbc <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8001ea8:	2240      	movs	r2, #64	@ 0x40
 8001eaa:	4931      	ldr	r1, [pc, #196]	@ (8001f70 <main+0x1cc>)
 8001eac:	482f      	ldr	r0, [pc, #188]	@ (8001f6c <main+0x1c8>)
 8001eae:	f00d fe39 	bl	800fb24 <HAL_UART_Receive_DMA>


  	memset(flashread,'1',256);
 8001eb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eb6:	2131      	movs	r1, #49	@ 0x31
 8001eb8:	482e      	ldr	r0, [pc, #184]	@ (8001f74 <main+0x1d0>)
 8001eba:	f016 fa3e 	bl	801833a <memset>
  	memset(flashwrite,'\0',256);
 8001ebe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	482c      	ldr	r0, [pc, #176]	@ (8001f78 <main+0x1d4>)
 8001ec6:	f016 fa38 	bl	801833a <memset>
  	memset((uint8_t *)bufferscreen ,'\0',50);
 8001eca:	2232      	movs	r2, #50	@ 0x32
 8001ecc:	2100      	movs	r1, #0
 8001ece:	482b      	ldr	r0, [pc, #172]	@ (8001f7c <main+0x1d8>)
 8001ed0:	f016 fa33 	bl	801833a <memset>



  	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_7);
 8001ed4:	2380      	movs	r3, #128	@ 0x80
 8001ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8001f80 <main+0x1dc>)
 8001ed8:	492a      	ldr	r1, [pc, #168]	@ (8001f84 <main+0x1e0>)
 8001eda:	482b      	ldr	r0, [pc, #172]	@ (8001f88 <main+0x1e4>)
 8001edc:	f013 fc4d 	bl	801577a <SPIF_Init>
  	getindex();
 8001ee0:	f001 fc56 	bl	8003790 <getindex>

  	ssd1306_Fill(Black);
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f001 fdf1 	bl	8003acc <ssd1306_Fill>

  	bmp581->i2c=&hi2c1;
 8001eea:	4b28      	ldr	r3, [pc, #160]	@ (8001f8c <main+0x1e8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a28      	ldr	r2, [pc, #160]	@ (8001f90 <main+0x1ec>)
 8001ef0:	601a      	str	r2, [r3, #0]
  	bmp581->addr=0x47;
 8001ef2:	4b26      	ldr	r3, [pc, #152]	@ (8001f8c <main+0x1e8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2247      	movs	r2, #71	@ 0x47
 8001ef8:	711a      	strb	r2, [r3, #4]

  	if(bmp581_init_precise_normal(&bmp581)!=0){
 8001efa:	4824      	ldr	r0, [pc, #144]	@ (8001f8c <main+0x1e8>)
 8001efc:	f7ff fa28 	bl	8001350 <bmp581_init_precise_normal>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00f      	beq.n	8001f26 <main+0x182>
  		ssd1306_SetCursor(32,42);
 8001f06:	212a      	movs	r1, #42	@ 0x2a
 8001f08:	2020      	movs	r0, #32
 8001f0a:	f001 ff21 	bl	8003d50 <ssd1306_SetCursor>
  		ssd1306_WriteString("bmp prbm", Font_7x10, White);
 8001f0e:	4a21      	ldr	r2, [pc, #132]	@ (8001f94 <main+0x1f0>)
 8001f10:	2301      	movs	r3, #1
 8001f12:	ca06      	ldmia	r2, {r1, r2}
 8001f14:	4820      	ldr	r0, [pc, #128]	@ (8001f98 <main+0x1f4>)
 8001f16:	f001 fef5 	bl	8003d04 <ssd1306_WriteString>
  		ssd1306_UpdateScreen();
 8001f1a:	f001 fdef 	bl	8003afc <ssd1306_UpdateScreen>
  		HAL_Delay(1000);
 8001f1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f22:	f005 f967 	bl	80071f4 <HAL_Delay>

  	}


  	state=STATE_SPEED;
 8001f26:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <main+0x1f8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
  	BTN_A=0;
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa0 <main+0x1fc>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
  	BTN_A_LONG=0;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <main+0x200>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]

  	HAL_Delay(500);
 8001f38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f3c:	f005 f95a 	bl	80071f4 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  statemachine();
 8001f40:	f002 fa7a 	bl	8004438 <statemachine>
	  ssd1306_UpdateScreen();
 8001f44:	f001 fdda 	bl	8003afc <ssd1306_UpdateScreen>
	  statemachine();
 8001f48:	bf00      	nop
 8001f4a:	e7f9      	b.n	8001f40 <main+0x19c>
 8001f4c:	48000800 	.word	0x48000800
 8001f50:	1fff0004 	.word	0x1fff0004
 8001f54:	1fff0000 	.word	0x1fff0000
 8001f58:	0801d008 	.word	0x0801d008
 8001f5c:	20000790 	.word	0x20000790
 8001f60:	20000314 	.word	0x20000314
 8001f64:	200010f0 	.word	0x200010f0
 8001f68:	2000113c 	.word	0x2000113c
 8001f6c:	200011d4 	.word	0x200011d4
 8001f70:	200004e4 	.word	0x200004e4
 8001f74:	200008a4 	.word	0x200008a4
 8001f78:	200007a4 	.word	0x200007a4
 8001f7c:	200009c8 	.word	0x200009c8
 8001f80:	48000400 	.word	0x48000400
 8001f84:	20000c78 	.word	0x20000c78
 8001f88:	20000770 	.word	0x20000770
 8001f8c:	20000aec 	.word	0x20000aec
 8001f90:	200003f4 	.word	0x200003f4
 8001f94:	20000020 	.word	0x20000020
 8001f98:	0801cca0 	.word	0x0801cca0
 8001f9c:	200004d8 	.word	0x200004d8
 8001fa0:	20000768 	.word	0x20000768
 8001fa4:	20000aa0 	.word	0x20000aa0

08001fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b09a      	sub	sp, #104	@ 0x68
 8001fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fae:	f107 0320 	add.w	r3, r7, #32
 8001fb2:	2248      	movs	r2, #72	@ 0x48
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f016 f9bf 	bl	801833a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
 8001fca:	615a      	str	r2, [r3, #20]
 8001fcc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fce:	4b27      	ldr	r3, [pc, #156]	@ (800206c <SystemClock_Config+0xc4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fd6:	4a25      	ldr	r2, [pc, #148]	@ (800206c <SystemClock_Config+0xc4>)
 8001fd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b23      	ldr	r3, [pc, #140]	@ (800206c <SystemClock_Config+0xc4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001fea:	2303      	movs	r3, #3
 8001fec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ffa:	2340      	movs	r3, #64	@ 0x40
 8001ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ffe:	2302      	movs	r3, #2
 8002000:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002002:	2303      	movs	r3, #3
 8002004:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002006:	2310      	movs	r3, #16
 8002008:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 800200a:	2308      	movs	r3, #8
 800200c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800200e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002012:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002014:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002018:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800201a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800201e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002020:	f107 0320 	add.w	r3, r7, #32
 8002024:	4618      	mov	r0, r3
 8002026:	f00a fa63 	bl	800c4f0 <HAL_RCC_OscConfig>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002030:	f000 f84f 	bl	80020d2 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002034:	236f      	movs	r3, #111	@ 0x6f
 8002036:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002038:	2303      	movs	r3, #3
 800203a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2103      	movs	r1, #3
 8002054:	4618      	mov	r0, r3
 8002056:	f00a fdbf 	bl	800cbd8 <HAL_RCC_ClockConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002060:	f000 f837 	bl	80020d2 <Error_Handler>
  }
}
 8002064:	bf00      	nop
 8002066:	3768      	adds	r7, #104	@ 0x68
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	58000400 	.word	0x58000400

08002070 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b094      	sub	sp, #80	@ 0x50
 8002074:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002076:	463b      	mov	r3, r7
 8002078:	2250      	movs	r2, #80	@ 0x50
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f016 f95c 	bl	801833a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8002082:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 8002086:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002088:	2306      	movs	r3, #6
 800208a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800208c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002090:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002092:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002096:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002098:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800209c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 800209e:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 80020a2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80020a4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80020a8:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80020aa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80020ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80020b0:	2300      	movs	r3, #0
 80020b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80020b4:	2310      	movs	r3, #16
 80020b6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b8:	463b      	mov	r3, r7
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00b f9c9 	bl	800d452 <HAL_RCCEx_PeriphCLKConfig>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80020c6:	f000 f804 	bl	80020d2 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  //LL_HSEM_1StepLock( HSEM, 5 );

  /* USER CODE END Smps */
}
 80020ca:	bf00      	nop
 80020cc:	3750      	adds	r7, #80	@ 0x50
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020d6:	b672      	cpsid	i
}
 80020d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020da:	bf00      	nop
 80020dc:	e7fd      	b.n	80020da <Error_Handler+0x8>

080020de <gps_checksum>:

char *data[15];
extern uint8_t receivedtrame[64];

int gps_checksum(char *nmea_data)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7fe f89a 	bl	8000220 <strlen>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d801      	bhi.n	80020f6 <gps_checksum+0x18>
 80020f2:	2300      	movs	r3, #0
 80020f4:	e038      	b.n	8002168 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7fe f892 	bl	8000220 <strlen>
 80020fc:	4603      	mov	r3, r0
 80020fe:	3b04      	subs	r3, #4
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7fe f889 	bl	8000220 <strlen>
 800210e:	4603      	mov	r3, r0
 8002110:	3b03      	subs	r3, #3
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	e00a      	b.n	800213a <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	4053      	eors	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	3301      	adds	r3, #1
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe f870 	bl	8000220 <strlen>
 8002140:	4603      	mov	r3, r0
 8002142:	1f5a      	subs	r2, r3, #5
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	429a      	cmp	r2, r3
 8002148:	d8ec      	bhi.n	8002124 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 800214a:	f107 0308 	add.w	r3, r7, #8
 800214e:	2210      	movs	r2, #16
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f015 f926 	bl	80173a4 <strtol>
 8002158:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	429a      	cmp	r2, r3
 8002160:	d101      	bne.n	8002166 <gps_checksum+0x88>
        return 1;
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8002166:	2300      	movs	r3, #0
    }
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b0b7      	sub	sp, #220	@ 0xdc
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8002180:	f107 0320 	add.w	r3, r7, #32
 8002184:	2264      	movs	r2, #100	@ 0x64
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f016 f8d6 	bl	801833a <memset>
    char *marker = strtok(inputString, ",");
 800218e:	49c2      	ldr	r1, [pc, #776]	@ (8002498 <nmea_GPGGA+0x328>)
 8002190:	6838      	ldr	r0, [r7, #0]
 8002192:	f016 f8ed 	bl	8018370 <strtok>
 8002196:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 800219a:	e027      	b.n	80021ec <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800219c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80021a0:	f7fe f83e 	bl	8000220 <strlen>
 80021a4:	4603      	mov	r3, r0
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 80021ac:	1c63      	adds	r3, r4, #1
 80021ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80021b2:	4610      	mov	r0, r2
 80021b4:	f014 f94e 	bl	8016454 <malloc>
 80021b8:	4603      	mov	r3, r0
 80021ba:	461a      	mov	r2, r3
 80021bc:	00a3      	lsls	r3, r4, #2
 80021be:	33d8      	adds	r3, #216	@ 0xd8
 80021c0:	443b      	add	r3, r7
 80021c2:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 80021c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80021ca:	3b01      	subs	r3, #1
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	33d8      	adds	r3, #216	@ 0xd8
 80021d0:	443b      	add	r3, r7
 80021d2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80021d6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80021da:	4618      	mov	r0, r3
 80021dc:	f016 f9c1 	bl	8018562 <strcpy>
        marker = strtok(NULL, ",");
 80021e0:	49ad      	ldr	r1, [pc, #692]	@ (8002498 <nmea_GPGGA+0x328>)
 80021e2:	2000      	movs	r0, #0
 80021e4:	f016 f8c4 	bl	8018370 <strtok>
 80021e8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 80021ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1d3      	bne.n	800219c <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80021f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 80021fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	332c      	adds	r3, #44	@ 0x2c
 8002208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f016 f9a8 	bl	8018562 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8002212:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002216:	2b53      	cmp	r3, #83	@ 0x53
 8002218:	d004      	beq.n	8002224 <nmea_GPGGA+0xb4>
 800221a:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 800221e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002220:	f040 8159 	bne.w	80024d6 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800222a:	e010      	b.n	800224e <nmea_GPGGA+0xde>
 800222c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800222e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002232:	4413      	add	r3, r2
 8002234:	7819      	ldrb	r1, [r3, #0]
 8002236:	f107 021c 	add.w	r2, r7, #28
 800223a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800223e:	4413      	add	r3, r2
 8002240:	460a      	mov	r2, r1
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002248:	3301      	adds	r3, #1
 800224a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800224e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002252:	2b01      	cmp	r3, #1
 8002254:	ddea      	ble.n	800222c <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800225c:	e011      	b.n	8002282 <nmea_GPGGA+0x112>
 800225e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002260:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002264:	3302      	adds	r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	7819      	ldrb	r1, [r3, #0]
 800226a:	f107 0214 	add.w	r2, r7, #20
 800226e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002272:	4413      	add	r3, r2
 8002274:	460a      	mov	r2, r1
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800227c:	3301      	adds	r3, #1
 800227e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002282:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002286:	2b05      	cmp	r3, #5
 8002288:	dde9      	ble.n	800225e <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800228a:	f107 031c 	add.w	r3, r7, #28
 800228e:	220a      	movs	r2, #10
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f015 f886 	bl	80173a4 <strtol>
 8002298:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f014 ff9e 	bl	80171e4 <strtof>
 80022a8:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80022ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022b0:	ee07 3a90 	vmov	s15, r3
 80022b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022b8:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 80022bc:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 800249c <nmea_GPGGA+0x32c>
 80022c0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c8:	ee17 0a90 	vmov	r0, s15
 80022cc:	f7fe f914 	bl	80004f8 <__aeabi_f2d>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80022de:	e010      	b.n	8002302 <nmea_GPGGA+0x192>
 80022e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022e6:	4413      	add	r3, r2
 80022e8:	7819      	ldrb	r1, [r3, #0]
 80022ea:	f107 0210 	add.w	r2, r7, #16
 80022ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022f2:	4413      	add	r3, r2
 80022f4:	460a      	mov	r2, r1
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022fc:	3301      	adds	r3, #1
 80022fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002306:	2b02      	cmp	r3, #2
 8002308:	ddea      	ble.n	80022e0 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002310:	e011      	b.n	8002336 <nmea_GPGGA+0x1c6>
 8002312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002314:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002318:	3303      	adds	r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	7819      	ldrb	r1, [r3, #0]
 800231e:	f107 0208 	add.w	r2, r7, #8
 8002322:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002326:	4413      	add	r3, r2
 8002328:	460a      	mov	r2, r1
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002330:	3301      	adds	r3, #1
 8002332:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002336:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800233a:	2b05      	cmp	r3, #5
 800233c:	dde9      	ble.n	8002312 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	220a      	movs	r2, #10
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f015 f82c 	bl	80173a4 <strtol>
 800234c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8002350:	f107 0308 	add.w	r3, r7, #8
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f014 ff44 	bl	80171e4 <strtof>
 800235c:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8002360:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800236c:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8002370:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 800249c <nmea_GPGGA+0x32c>
 8002374:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237c:	ee17 0a90 	vmov	r0, s15
 8002380:	f7fe f8ba 	bl	80004f8 <__aeabi_f2d>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002398:	f7fe fb6e 	bl	8000a78 <__aeabi_dcmpeq>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d176      	bne.n	8002490 <nmea_GPGGA+0x320>
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80023ae:	f7fe fb63 	bl	8000a78 <__aeabi_dcmpeq>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d16b      	bne.n	8002490 <nmea_GPGGA+0x320>
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	4b38      	ldr	r3, [pc, #224]	@ (80024a0 <nmea_GPGGA+0x330>)
 80023be:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80023c2:	f7fe fb63 	bl	8000a8c <__aeabi_dcmplt>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d061      	beq.n	8002490 <nmea_GPGGA+0x320>
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	4b34      	ldr	r3, [pc, #208]	@ (80024a4 <nmea_GPGGA+0x334>)
 80023d2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80023d6:	f7fe fb59 	bl	8000a8c <__aeabi_dcmplt>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d057      	beq.n	8002490 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80023e6:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 80023f0:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80023f8:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8002402:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8002404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f014 feeb 	bl	80171e4 <strtof>
 800240e:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8002412:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002416:	eef5 7a40 	vcmp.f32	s15, #0.0
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	d102      	bne.n	8002426 <nmea_GPGGA+0x2b6>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	e001      	b.n	800242a <nmea_GPGGA+0x2ba>
 8002426:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 800242e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002430:	220a      	movs	r2, #10
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f014 ffb5 	bl	80173a4 <strtol>
 800243a:	4602      	mov	r2, r0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8002440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002442:	220a      	movs	r2, #10
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f014 ffac 	bl	80173a4 <strtol>
 800244c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8002450:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002454:	2b00      	cmp	r3, #0
 8002456:	bfcc      	ite	gt
 8002458:	2301      	movgt	r3, #1
 800245a:	2300      	movle	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 8002464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f014 febb 	bl	80171e4 <strtof>
 800246e:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8002472:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002476:	eef5 7a40 	vcmp.f32	s15, #0.0
 800247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247e:	d102      	bne.n	8002486 <nmea_GPGGA+0x316>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	e001      	b.n	800248a <nmea_GPGGA+0x31a>
 8002486:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800248e:	e022      	b.n	80024d6 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002496:	e016      	b.n	80024c6 <nmea_GPGGA+0x356>
 8002498:	0801ccac 	.word	0x0801ccac
 800249c:	42700000 	.word	0x42700000
 80024a0:	40568000 	.word	0x40568000
 80024a4:	40668000 	.word	0x40668000
 80024a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	33d8      	adds	r3, #216	@ 0xd8
 80024b0:	443b      	add	r3, r7
 80024b2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f013 ffd4 	bl	8016464 <free>
 80024bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024c0:	3301      	adds	r3, #1
 80024c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80024c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80024ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024ce:	429a      	cmp	r2, r3
 80024d0:	dbea      	blt.n	80024a8 <nmea_GPGGA+0x338>
            return 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e019      	b.n	800250a <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024dc:	e00e      	b.n	80024fc <nmea_GPGGA+0x38c>
 80024de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	33d8      	adds	r3, #216	@ 0xd8
 80024e6:	443b      	add	r3, r7
 80024e8:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f013 ffb9 	bl	8016464 <free>
 80024f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024f6:	3301      	adds	r3, #1
 80024f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002500:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002504:	429a      	cmp	r2, r3
 8002506:	dbea      	blt.n	80024de <nmea_GPGGA+0x36e>
    return 1;
 8002508:	2301      	movs	r3, #1
}
 800250a:	4618      	mov	r0, r3
 800250c:	37dc      	adds	r7, #220	@ 0xdc
 800250e:	46bd      	mov	sp, r7
 8002510:	bd90      	pop	{r4, r7, pc}
 8002512:	bf00      	nop
 8002514:	0000      	movs	r0, r0
	...

08002518 <nmea_GNRMC>:
//    return 1;
//}



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b0a1      	sub	sp, #132	@ 0x84
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	2264      	movs	r2, #100	@ 0x64
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f015 ff03 	bl	801833a <memset>
    char *marker = strtok(inputString, ",");
 8002534:	4930      	ldr	r1, [pc, #192]	@ (80025f8 <nmea_GNRMC+0xe0>)
 8002536:	6838      	ldr	r0, [r7, #0]
 8002538:	f015 ff1a 	bl	8018370 <strtok>
 800253c:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 800253e:	e021      	b.n	8002584 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002540:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002542:	f7fd fe6d 	bl	8000220 <strlen>
 8002546:	4603      	mov	r3, r0
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 800254c:	1c63      	adds	r3, r4, #1
 800254e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002550:	4610      	mov	r0, r2
 8002552:	f013 ff7f 	bl	8016454 <malloc>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	00a3      	lsls	r3, r4, #2
 800255c:	3380      	adds	r3, #128	@ 0x80
 800255e:	443b      	add	r3, r7
 8002560:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8002564:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002566:	3b01      	subs	r3, #1
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	3380      	adds	r3, #128	@ 0x80
 800256c:	443b      	add	r3, r7
 800256e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002572:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002574:	4618      	mov	r0, r3
 8002576:	f015 fff4 	bl	8018562 <strcpy>
        marker = strtok(NULL, ",");
 800257a:	491f      	ldr	r1, [pc, #124]	@ (80025f8 <nmea_GNRMC+0xe0>)
 800257c:	2000      	movs	r0, #0
 800257e:	f015 fef7 	bl	8018370 <strtok>
 8002582:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 8002584:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1da      	bne.n	8002540 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 800258a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f014 fe28 	bl	80171e4 <strtof>
 8002594:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 8002598:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800259a:	f7fd ffad 	bl	80004f8 <__aeabi_f2d>
 800259e:	a314      	add	r3, pc, #80	@ (adr r3, 80025f0 <nmea_GNRMC+0xd8>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f7fe f92a 	bl	80007fc <__aeabi_ddiv>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f7fe faf2 	bl	8000b98 <__aeabi_d2f>
 80025b4:	4602      	mov	r2, r0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 80025ba:	2300      	movs	r3, #0
 80025bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80025be:	e00b      	b.n	80025d8 <nmea_GNRMC+0xc0>
 80025c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	3380      	adds	r3, #128	@ 0x80
 80025c6:	443b      	add	r3, r7
 80025c8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f013 ff49 	bl	8016464 <free>
 80025d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025d4:	3301      	adds	r3, #1
 80025d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80025d8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80025da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025dc:	429a      	cmp	r2, r3
 80025de:	dbef      	blt.n	80025c0 <nmea_GNRMC+0xa8>
    return 1;
 80025e0:	2301      	movs	r3, #1
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3784      	adds	r7, #132	@ 0x84
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd90      	pop	{r4, r7, pc}
 80025ea:	bf00      	nop
 80025ec:	f3af 8000 	nop.w
 80025f0:	be76c8b4 	.word	0xbe76c8b4
 80025f4:	3fff1a9f 	.word	0x3fff1a9f
 80025f8:	0801ccac 	.word	0x0801ccac

080025fc <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 80025fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8002606:	223c      	movs	r2, #60	@ 0x3c
 8002608:	2100      	movs	r1, #0
 800260a:	485c      	ldr	r0, [pc, #368]	@ (800277c <nmea_parse+0x180>)
 800260c:	f015 fe95 	bl	801833a <memset>
    char * token = strtok(buffer, "$");
 8002610:	495b      	ldr	r1, [pc, #364]	@ (8002780 <nmea_parse+0x184>)
 8002612:	6838      	ldr	r0, [r7, #0]
 8002614:	f015 feac 	bl	8018370 <strtok>
 8002618:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 800261e:	e01d      	b.n	800265c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002620:	6978      	ldr	r0, [r7, #20]
 8002622:	f7fd fdfd 	bl	8000220 <strlen>
 8002626:	4603      	mov	r3, r0
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	693c      	ldr	r4, [r7, #16]
 800262c:	1c63      	adds	r3, r4, #1
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	4610      	mov	r0, r2
 8002632:	f013 ff0f 	bl	8016454 <malloc>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	4b50      	ldr	r3, [pc, #320]	@ (800277c <nmea_parse+0x180>)
 800263c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	3b01      	subs	r3, #1
 8002644:	4a4d      	ldr	r2, [pc, #308]	@ (800277c <nmea_parse+0x180>)
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	6979      	ldr	r1, [r7, #20]
 800264c:	4618      	mov	r0, r3
 800264e:	f015 ff88 	bl	8018562 <strcpy>
        token = strtok(NULL, "$");
 8002652:	494b      	ldr	r1, [pc, #300]	@ (8002780 <nmea_parse+0x184>)
 8002654:	2000      	movs	r0, #0
 8002656:	f015 fe8b 	bl	8018370 <strtok>
 800265a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1de      	bne.n	8002620 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	e06e      	b.n	8002746 <nmea_parse+0x14a>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8002668:	4a44      	ldr	r2, [pc, #272]	@ (800277c <nmea_parse+0x180>)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002670:	4944      	ldr	r1, [pc, #272]	@ (8002784 <nmea_parse+0x188>)
 8002672:	4618      	mov	r0, r3
 8002674:	f015 fed8 	bl	8018428 <strstr>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d060      	beq.n	8002740 <nmea_parse+0x144>
 800267e:	4a3f      	ldr	r2, [pc, #252]	@ (800277c <nmea_parse+0x180>)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fd29 	bl	80020de <gps_checksum>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d056      	beq.n	8002740 <nmea_parse+0x144>
           if(strstr(data[i], "GNRMC")!=NULL){
 8002692:	4a3a      	ldr	r2, [pc, #232]	@ (800277c <nmea_parse+0x180>)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	493b      	ldr	r1, [pc, #236]	@ (8002788 <nmea_parse+0x18c>)
 800269c:	4618      	mov	r0, r3
 800269e:	f015 fec3 	bl	8018428 <strstr>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d020      	beq.n	80026ea <nmea_parse+0xee>
        	   nmea_GNRMC(gps_data, data[i]);
 80026a8:	4a34      	ldr	r2, [pc, #208]	@ (800277c <nmea_parse+0x180>)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	4619      	mov	r1, r3
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ff30 	bl	8002518 <nmea_GNRMC>
        	   memcpy((uint8_t *) receivedtrame,(uint8_t *)data[i],64);
 80026b8:	4a30      	ldr	r2, [pc, #192]	@ (800277c <nmea_parse+0x180>)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c0:	4a32      	ldr	r2, [pc, #200]	@ (800278c <nmea_parse+0x190>)
 80026c2:	4610      	mov	r0, r2
 80026c4:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80026c8:	4602      	mov	r2, r0
 80026ca:	4619      	mov	r1, r3
 80026cc:	f8d1 c000 	ldr.w	ip, [r1]
 80026d0:	684e      	ldr	r6, [r1, #4]
 80026d2:	688d      	ldr	r5, [r1, #8]
 80026d4:	68c9      	ldr	r1, [r1, #12]
 80026d6:	f8c2 c000 	str.w	ip, [r2]
 80026da:	6056      	str	r6, [r2, #4]
 80026dc:	6095      	str	r5, [r2, #8]
 80026de:	60d1      	str	r1, [r2, #12]
 80026e0:	3310      	adds	r3, #16
 80026e2:	3010      	adds	r0, #16
 80026e4:	42a3      	cmp	r3, r4
 80026e6:	d1ef      	bne.n	80026c8 <nmea_parse+0xcc>
 80026e8:	e02a      	b.n	8002740 <nmea_parse+0x144>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 80026ea:	4a24      	ldr	r2, [pc, #144]	@ (800277c <nmea_parse+0x180>)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f2:	4927      	ldr	r1, [pc, #156]	@ (8002790 <nmea_parse+0x194>)
 80026f4:	4618      	mov	r0, r3
 80026f6:	f015 fe97 	bl	8018428 <strstr>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01f      	beq.n	8002740 <nmea_parse+0x144>
               nmea_GPGGA(gps_data, data[i]);
 8002700:	4a1e      	ldr	r2, [pc, #120]	@ (800277c <nmea_parse+0x180>)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff fd30 	bl	8002170 <nmea_GPGGA>
               memcpy((uint8_t *) receivedtrame,(uint8_t *)data[i],64);
 8002710:	4a1a      	ldr	r2, [pc, #104]	@ (800277c <nmea_parse+0x180>)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002718:	4a1c      	ldr	r2, [pc, #112]	@ (800278c <nmea_parse+0x190>)
 800271a:	4610      	mov	r0, r2
 800271c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8002720:	4602      	mov	r2, r0
 8002722:	4619      	mov	r1, r3
 8002724:	f8d1 c000 	ldr.w	ip, [r1]
 8002728:	684e      	ldr	r6, [r1, #4]
 800272a:	688d      	ldr	r5, [r1, #8]
 800272c:	68c9      	ldr	r1, [r1, #12]
 800272e:	f8c2 c000 	str.w	ip, [r2]
 8002732:	6056      	str	r6, [r2, #4]
 8002734:	6095      	str	r5, [r2, #8]
 8002736:	60d1      	str	r1, [r2, #12]
 8002738:	3310      	adds	r3, #16
 800273a:	3010      	adds	r0, #16
 800273c:	42a3      	cmp	r3, r4
 800273e:	d1ef      	bne.n	8002720 <nmea_parse+0x124>
    for(int i = 0; i<cnt; i++){
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3301      	adds	r3, #1
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	429a      	cmp	r2, r3
 800274c:	db8c      	blt.n	8002668 <nmea_parse+0x6c>
           }

       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	e009      	b.n	8002768 <nmea_parse+0x16c>
 8002754:	4a09      	ldr	r2, [pc, #36]	@ (800277c <nmea_parse+0x180>)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275c:	4618      	mov	r0, r3
 800275e:	f013 fe81 	bl	8016464 <free>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	3301      	adds	r3, #1
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	429a      	cmp	r2, r3
 800276e:	dbf1      	blt.n	8002754 <nmea_parse+0x158>


}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800277a:	bf00      	nop
 800277c:	20000af0 	.word	0x20000af0
 8002780:	0801ccb0 	.word	0x0801ccb0
 8002784:	0801ccb4 	.word	0x0801ccb4
 8002788:	0801ccb8 	.word	0x0801ccb8
 800278c:	20000aa8 	.word	0x20000aa8
 8002790:	0801ccc0 	.word	0x0801ccc0
 8002794:	00000000 	.word	0x00000000

08002798 <distancecalc>:

double distancecalc(double lat1, double lat2, double long1, double long2){
 8002798:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800279c:	b08a      	sub	sp, #40	@ 0x28
 800279e:	af00      	add	r7, sp, #0
 80027a0:	ed87 0b06 	vstr	d0, [r7, #24]
 80027a4:	ed87 1b04 	vstr	d1, [r7, #16]
 80027a8:	ed87 2b02 	vstr	d2, [r7, #8]
 80027ac:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 80027bc:	a358      	add	r3, pc, #352	@ (adr r3, 8002920 <distancecalc+0x188>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027c6:	f7fd feef 	bl	80005a8 <__aeabi_dmul>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	ec43 2b17 	vmov	d7, r2, r3
 80027d2:	eeb0 0a47 	vmov.f32	s0, s14
 80027d6:	eef0 0a67 	vmov.f32	s1, s15
 80027da:	f018 fc6d 	bl	801b0b8 <sinl>
 80027de:	ec55 4b10 	vmov	r4, r5, d0
 80027e2:	a34f      	add	r3, pc, #316	@ (adr r3, 8002920 <distancecalc+0x188>)
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027ec:	f7fd fedc 	bl	80005a8 <__aeabi_dmul>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	ec43 2b17 	vmov	d7, r2, r3
 80027f8:	eeb0 0a47 	vmov.f32	s0, s14
 80027fc:	eef0 0a67 	vmov.f32	s1, s15
 8002800:	f018 fc5a 	bl	801b0b8 <sinl>
 8002804:	ec53 2b10 	vmov	r2, r3, d0
 8002808:	4620      	mov	r0, r4
 800280a:	4629      	mov	r1, r5
 800280c:	f7fd fecc 	bl	80005a8 <__aeabi_dmul>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4614      	mov	r4, r2
 8002816:	461d      	mov	r5, r3
 8002818:	a341      	add	r3, pc, #260	@ (adr r3, 8002920 <distancecalc+0x188>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002822:	f7fd fec1 	bl	80005a8 <__aeabi_dmul>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	ec43 2b17 	vmov	d7, r2, r3
 800282e:	eeb0 0a47 	vmov.f32	s0, s14
 8002832:	eef0 0a67 	vmov.f32	s1, s15
 8002836:	f018 fc3d 	bl	801b0b4 <cosl>
 800283a:	ec59 8b10 	vmov	r8, r9, d0
 800283e:	a338      	add	r3, pc, #224	@ (adr r3, 8002920 <distancecalc+0x188>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002848:	f7fd feae 	bl	80005a8 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	ec43 2b17 	vmov	d7, r2, r3
 8002854:	eeb0 0a47 	vmov.f32	s0, s14
 8002858:	eef0 0a67 	vmov.f32	s1, s15
 800285c:	f018 fc2a 	bl	801b0b4 <cosl>
 8002860:	ec53 2b10 	vmov	r2, r3, d0
 8002864:	4640      	mov	r0, r8
 8002866:	4649      	mov	r1, r9
 8002868:	f7fd fe9e 	bl	80005a8 <__aeabi_dmul>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4690      	mov	r8, r2
 8002872:	4699      	mov	r9, r3
 8002874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800287c:	f7fd fcdc 	bl	8000238 <__aeabi_dsub>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	a325      	add	r3, pc, #148	@ (adr r3, 8002920 <distancecalc+0x188>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	f7fd fe8b 	bl	80005a8 <__aeabi_dmul>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	ec43 2b17 	vmov	d7, r2, r3
 800289a:	eeb0 0a47 	vmov.f32	s0, s14
 800289e:	eef0 0a67 	vmov.f32	s1, s15
 80028a2:	f018 fc07 	bl	801b0b4 <cosl>
 80028a6:	ec53 2b10 	vmov	r2, r3, d0
 80028aa:	4640      	mov	r0, r8
 80028ac:	4649      	mov	r1, r9
 80028ae:	f7fd fe7b 	bl	80005a8 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4620      	mov	r0, r4
 80028b8:	4629      	mov	r1, r5
 80028ba:	f7fd fcbf 	bl	800023c <__adddf3>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	ec43 2b17 	vmov	d7, r2, r3
 80028c6:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8002918 <distancecalc+0x180>
 80028ca:	eeb0 0a47 	vmov.f32	s0, s14
 80028ce:	eef0 0a67 	vmov.f32	s1, s15
 80028d2:	f018 fb97 	bl	801b004 <fmin>
 80028d6:	eeb0 7a40 	vmov.f32	s14, s0
 80028da:	eef0 7a60 	vmov.f32	s15, s1
 80028de:	eeb0 0a47 	vmov.f32	s0, s14
 80028e2:	eef0 0a67 	vmov.f32	s1, s15
 80028e6:	f018 fbe9 	bl	801b0bc <acosl>
 80028ea:	ec51 0b10 	vmov	r0, r1, d0
 80028ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8002928 <distancecalc+0x190>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fe58 	bl	80005a8 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 8002900:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002904:	ec43 2b17 	vmov	d7, r2, r3
}
 8002908:	eeb0 0a47 	vmov.f32	s0, s14
 800290c:	eef0 0a67 	vmov.f32	s1, s15
 8002910:	3728      	adds	r7, #40	@ 0x28
 8002912:	46bd      	mov	sp, r7
 8002914:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002918:	00000000 	.word	0x00000000
 800291c:	3ff00000 	.word	0x3ff00000
 8002920:	a2529d39 	.word	0xa2529d39
 8002924:	3f91df46 	.word	0x3f91df46
 8002928:	00000000 	.word	0x00000000
 800292c:	41584dae 	.word	0x41584dae

08002930 <pulseOximeter_readRegister>:
* @param None
* @retval None
*/

int8_t pulseOximeter_readRegister(uint8_t reg, uint8_t* value)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af02      	add	r7, sp, #8
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retStatus;
	uint8_t buf[2];

	buf[0] = reg;
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x03;
 8002940:	2303      	movs	r3, #3
 8002942:	737b      	strb	r3, [r7, #13]

	uint8_t address = (I2C_SLAVE_ID | I2C_WRITE);
 8002944:	23ae      	movs	r3, #174	@ 0xae
 8002946:	73fb      	strb	r3, [r7, #15]

	retStatus = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	b299      	uxth	r1, r3
 800294c:	f107 020c 	add.w	r2, r7, #12
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	2301      	movs	r3, #1
 8002958:	4813      	ldr	r0, [pc, #76]	@ (80029a8 <pulseOximeter_readRegister+0x78>)
 800295a:	f006 fbcf 	bl	80090fc <HAL_I2C_Master_Transmit>
 800295e:	4603      	mov	r3, r0
 8002960:	73bb      	strb	r3, [r7, #14]
	if( retStatus != HAL_OK ){
 8002962:	7bbb      	ldrb	r3, [r7, #14]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <pulseOximeter_readRegister+0x3e>
		return -1;
 8002968:	f04f 33ff 	mov.w	r3, #4294967295
 800296c:	e018      	b.n	80029a0 <pulseOximeter_readRegister+0x70>
	}

	address = (I2C_SLAVE_ID | I2C_READ);
 800296e:	23af      	movs	r3, #175	@ 0xaf
 8002970:	73fb      	strb	r3, [r7, #15]
	retStatus = HAL_I2C_Master_Receive(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	b299      	uxth	r1, r3
 8002976:	f107 020c 	add.w	r2, r7, #12
 800297a:	f04f 33ff 	mov.w	r3, #4294967295
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2301      	movs	r3, #1
 8002982:	4809      	ldr	r0, [pc, #36]	@ (80029a8 <pulseOximeter_readRegister+0x78>)
 8002984:	f006 fcd2 	bl	800932c <HAL_I2C_Master_Receive>
 8002988:	4603      	mov	r3, r0
 800298a:	73bb      	strb	r3, [r7, #14]
	if( retStatus != HAL_OK ){
 800298c:	7bbb      	ldrb	r3, [r7, #14]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <pulseOximeter_readRegister+0x68>
		return -1;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	e003      	b.n	80029a0 <pulseOximeter_readRegister+0x70>
	}

	*value = buf[0];
 8002998:	7b3a      	ldrb	r2, [r7, #12]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	701a      	strb	r2, [r3, #0]

	return 0;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	200003f4 	.word	0x200003f4

080029ac <pulseOximeter_writeRegister>:

HAL_StatusTypeDef pulseOximeter_writeRegister(uint8_t reg, uint8_t value)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	4603      	mov	r3, r0
 80029b4:	460a      	mov	r2, r1
 80029b6:	71fb      	strb	r3, [r7, #7]
 80029b8:	4613      	mov	r3, r2
 80029ba:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef retStatus;
	uint8_t buf[2];
	buf[0] = reg;
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80029c0:	79bb      	ldrb	r3, [r7, #6]
 80029c2:	737b      	strb	r3, [r7, #13]

	uint8_t address = (I2C_SLAVE_ID | I2C_WRITE);
 80029c4:	23ae      	movs	r3, #174	@ 0xae
 80029c6:	73fb      	strb	r3, [r7, #15]
	retStatus = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 2, HAL_MAX_DELAY);
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	b299      	uxth	r1, r3
 80029cc:	f107 020c 	add.w	r2, r7, #12
 80029d0:	f04f 33ff 	mov.w	r3, #4294967295
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	2302      	movs	r3, #2
 80029d8:	4804      	ldr	r0, [pc, #16]	@ (80029ec <pulseOximeter_writeRegister+0x40>)
 80029da:	f006 fb8f 	bl	80090fc <HAL_I2C_Master_Transmit>
 80029de:	4603      	mov	r3, r0
 80029e0:	73bb      	strb	r3, [r7, #14]

	return retStatus;
 80029e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	200003f4 	.word	0x200003f4

080029f0 <pulseOximeter_setMeasurementMode>:


void pulseOximeter_setMeasurementMode(MEASUREMENT_MODE mode)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
	int8_t readStatus = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
	uint8_t readResult;

	readStatus = pulseOximeter_readRegister(MODE_CONFIG, &readResult);
 80029fe:	f107 030e 	add.w	r3, r7, #14
 8002a02:	4619      	mov	r1, r3
 8002a04:	2009      	movs	r0, #9
 8002a06:	f7ff ff93 	bl	8002930 <pulseOximeter_readRegister>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	73fb      	strb	r3, [r7, #15]
	if( readStatus == -1){
 8002a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d02c      	beq.n	8002a72 <pulseOximeter_setMeasurementMode+0x82>
		return;
	}

	readResult &= ~(0x7 << 0);
 8002a18:	7bbb      	ldrb	r3, [r7, #14]
 8002a1a:	f023 0307 	bic.w	r3, r3, #7
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	73bb      	strb	r3, [r7, #14]

	switch(mode){
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d012      	beq.n	8002a4e <pulseOximeter_setMeasurementMode+0x5e>
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	dc24      	bgt.n	8002a76 <pulseOximeter_setMeasurementMode+0x86>
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <pulseOximeter_setMeasurementMode+0x46>
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d006      	beq.n	8002a42 <pulseOximeter_setMeasurementMode+0x52>
	case HEART_RATE:	readResult = readResult | (0x02 << 0); break;
	case SPO2:	readResult = readResult | (0x03 << 0); break;
	case MULTI_LED:	readResult = readResult | (0x07 << 0); break;
	default: return; break;
 8002a34:	e01f      	b.n	8002a76 <pulseOximeter_setMeasurementMode+0x86>
	case HEART_RATE:	readResult = readResult | (0x02 << 0); break;
 8002a36:	7bbb      	ldrb	r3, [r7, #14]
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	73bb      	strb	r3, [r7, #14]
 8002a40:	e00b      	b.n	8002a5a <pulseOximeter_setMeasurementMode+0x6a>
	case SPO2:	readResult = readResult | (0x03 << 0); break;
 8002a42:	7bbb      	ldrb	r3, [r7, #14]
 8002a44:	f043 0303 	orr.w	r3, r3, #3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	73bb      	strb	r3, [r7, #14]
 8002a4c:	e005      	b.n	8002a5a <pulseOximeter_setMeasurementMode+0x6a>
	case MULTI_LED:	readResult = readResult | (0x07 << 0); break;
 8002a4e:	7bbb      	ldrb	r3, [r7, #14]
 8002a50:	f043 0307 	orr.w	r3, r3, #7
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	73bb      	strb	r3, [r7, #14]
 8002a58:	bf00      	nop
	}

	if( pulseOximeter_writeRegister(MODE_CONFIG, readResult) != HAL_OK){
 8002a5a:	7bbb      	ldrb	r3, [r7, #14]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	2009      	movs	r0, #9
 8002a60:	f7ff ffa4 	bl	80029ac <pulseOximeter_writeRegister>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d107      	bne.n	8002a7a <pulseOximeter_setMeasurementMode+0x8a>
		return;
	}
	else{
		measurementMode = mode;
 8002a6a:	4a06      	ldr	r2, [pc, #24]	@ (8002a84 <pulseOximeter_setMeasurementMode+0x94>)
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	7013      	strb	r3, [r2, #0]
 8002a70:	e004      	b.n	8002a7c <pulseOximeter_setMeasurementMode+0x8c>
		return;
 8002a72:	bf00      	nop
 8002a74:	e002      	b.n	8002a7c <pulseOximeter_setMeasurementMode+0x8c>
	default: return; break;
 8002a76:	bf00      	nop
 8002a78:	e000      	b.n	8002a7c <pulseOximeter_setMeasurementMode+0x8c>
		return;
 8002a7a:	bf00      	nop
	}
}
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000014 	.word	0x20000014

08002a88 <pulseOximeter_resetRegisters>:
		default: return NORMAL; break;
	}
}

void pulseOximeter_resetRegisters(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
	int8_t readStatus;
	uint8_t readResult;


	readStatus = pulseOximeter_readRegister(MODE_CONFIG, &readResult);
 8002a8e:	1dbb      	adds	r3, r7, #6
 8002a90:	4619      	mov	r1, r3
 8002a92:	2009      	movs	r0, #9
 8002a94:	f7ff ff4c 	bl	8002930 <pulseOximeter_readRegister>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]
	if( readStatus == -1){
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa4:	d011      	beq.n	8002aca <pulseOximeter_resetRegisters+0x42>
		return;
	}

	readResult &= ~(0x01 << 6);
 8002aa6:	79bb      	ldrb	r3, [r7, #6]
 8002aa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	71bb      	strb	r3, [r7, #6]
	readResult = readResult | (0x01 << 6);
 8002ab0:	79bb      	ldrb	r3, [r7, #6]
 8002ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	71bb      	strb	r3, [r7, #6]
	if( pulseOximeter_writeRegister(MODE_CONFIG, readResult) != HAL_OK){
 8002aba:	79bb      	ldrb	r3, [r7, #6]
 8002abc:	4619      	mov	r1, r3
 8002abe:	2009      	movs	r0, #9
 8002ac0:	f7ff ff74 	bl	80029ac <pulseOximeter_writeRegister>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	e000      	b.n	8002acc <pulseOximeter_resetRegisters+0x44>
		return;
 8002aca:	bf00      	nop
		return;
	}
}
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <pulseOximeter_setLedCurrent>:

void pulseOximeter_setLedCurrent(uint8_t led, float currentLevel)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	ed87 0a00 	vstr	s0, [r7]
 8002ae0:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73bb      	strb	r3, [r7, #14]
	uint8_t ledRegister = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]

	switch(led){
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d002      	beq.n	8002af6 <pulseOximeter_setLedCurrent+0x22>
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d003      	beq.n	8002afc <pulseOximeter_setLedCurrent+0x28>
 8002af4:	e005      	b.n	8002b02 <pulseOximeter_setLedCurrent+0x2e>
	case RED_LED: ledRegister = LED_PULSE_AMP_1; break;
 8002af6:	230c      	movs	r3, #12
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	e002      	b.n	8002b02 <pulseOximeter_setLedCurrent+0x2e>
	case IR_LED:	ledRegister = LED_PULSE_AMP_2; break;
 8002afc:	230d      	movs	r3, #13
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	bf00      	nop
	}

	// slope derived from MAX30102 DataSheet
	value = (uint8_t)(5.0 * currentLevel);
 8002b02:	6838      	ldr	r0, [r7, #0]
 8002b04:	f7fd fcf8 	bl	80004f8 <__aeabi_f2d>
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <pulseOximeter_setLedCurrent+0x64>)
 8002b0e:	f7fd fd4b 	bl	80005a8 <__aeabi_dmul>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f7fe f81d 	bl	8000b58 <__aeabi_d2uiz>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	73bb      	strb	r3, [r7, #14]

	if( pulseOximeter_writeRegister(ledRegister, value) != HAL_OK){
 8002b22:	7bba      	ldrb	r2, [r7, #14]
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff3f 	bl	80029ac <pulseOximeter_writeRegister>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
		return;
	}
	else{

	}
}
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40140000 	.word	0x40140000

08002b3c <pulseOximeter_setSampleRate>:

	return currentLevel;
}

void pulseOximeter_setSampleRate(uint8_t sampleRate)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
	int8_t readStatus = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
	uint8_t readResult;

	readStatus = pulseOximeter_readRegister(SPO2_CONFIG, &readResult);
 8002b4a:	f107 030e 	add.w	r3, r7, #14
 8002b4e:	4619      	mov	r1, r3
 8002b50:	200a      	movs	r0, #10
 8002b52:	f7ff feed 	bl	8002930 <pulseOximeter_readRegister>
 8002b56:	4603      	mov	r3, r0
 8002b58:	73fb      	strb	r3, [r7, #15]
	if( readStatus == -1){
 8002b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b62:	d016      	beq.n	8002b92 <pulseOximeter_setSampleRate+0x56>
		return;
	}

	readResult &= ~(0x1C << 0);
 8002b64:	7bbb      	ldrb	r3, [r7, #14]
 8002b66:	f023 031c 	bic.w	r3, r3, #28
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	73bb      	strb	r3, [r7, #14]

	readResult = readResult | (sampleRate << 2);
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	b25a      	sxtb	r2, r3
 8002b76:	7bbb      	ldrb	r3, [r7, #14]
 8002b78:	b25b      	sxtb	r3, r3
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	73bb      	strb	r3, [r7, #14]

	if( pulseOximeter_writeRegister(SPO2_CONFIG, readResult) != HAL_OK){
 8002b82:	7bbb      	ldrb	r3, [r7, #14]
 8002b84:	4619      	mov	r1, r3
 8002b86:	200a      	movs	r0, #10
 8002b88:	f7ff ff10 	bl	80029ac <pulseOximeter_writeRegister>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	e000      	b.n	8002b94 <pulseOximeter_setSampleRate+0x58>
		return;
 8002b92:	bf00      	nop
		return;
	}
	else{

	}
}
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <pulseOximeter_resetFifo>:
		return (PULSE_WIDTH)result;
}

// Write zero to all FIFO registers
void pulseOximeter_resetFifo(void)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	af00      	add	r7, sp, #0
	pulseOximeter_writeRegister(FIFO_WRITE_PTR, 0);
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	2004      	movs	r0, #4
 8002ba2:	f7ff ff03 	bl	80029ac <pulseOximeter_writeRegister>
	pulseOximeter_writeRegister(FIFO_READ_POINTER, 0);
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	2006      	movs	r0, #6
 8002baa:	f7ff feff 	bl	80029ac <pulseOximeter_writeRegister>
	pulseOximeter_writeRegister(FIFO_OVF_COUNTER, 0);
 8002bae:	2100      	movs	r1, #0
 8002bb0:	2005      	movs	r0, #5
 8002bb2:	f7ff fefb 	bl	80029ac <pulseOximeter_writeRegister>
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <pulseOximeter_initFifo>:

//
void pulseOximeter_initFifo(void)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	af00      	add	r7, sp, #0
		// FIFO almost full interrupt enable
		pulseOximeter_writeRegister(INT_ENABLE_1, 0x40);

		pulseOximeter_clearInterrupt();
	}else{
		pulseOximeter_writeRegister(FIFO_CONFIG, 0x0F);
 8002bbe:	210f      	movs	r1, #15
 8002bc0:	2008      	movs	r0, #8
 8002bc2:	f7ff fef3 	bl	80029ac <pulseOximeter_writeRegister>
		pulseOximeter_writeRegister(INT_ENABLE_1, 0x00);
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2002      	movs	r0, #2
 8002bca:	f7ff feef 	bl	80029ac <pulseOximeter_writeRegister>
	}
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <pulseOximeter_readFifo>:

FIFO_LED_DATA pulseOximeter_readFifo(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af02      	add	r7, sp, #8
	uint8_t address;uint8_t buf[12];
	uint8_t numBytes = 6;
 8002bda:	2306      	movs	r3, #6
 8002bdc:	75fb      	strb	r3, [r7, #23]

	buf[0] = FIFO_DATA;
 8002bde:	2307      	movs	r3, #7
 8002be0:	713b      	strb	r3, [r7, #4]

	address = (I2C_SLAVE_ID | I2C_WRITE);
 8002be2:	23ae      	movs	r3, #174	@ 0xae
 8002be4:	75bb      	strb	r3, [r7, #22]

	HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8002be6:	7dbb      	ldrb	r3, [r7, #22]
 8002be8:	b299      	uxth	r1, r3
 8002bea:	1d3a      	adds	r2, r7, #4
 8002bec:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	481c      	ldr	r0, [pc, #112]	@ (8002c68 <pulseOximeter_readFifo+0x94>)
 8002bf6:	f006 fa81 	bl	80090fc <HAL_I2C_Master_Transmit>

	address = (I2C_SLAVE_ID | I2C_READ);
 8002bfa:	23af      	movs	r3, #175	@ 0xaf
 8002bfc:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Receive(&hi2c1, address, buf, numBytes, HAL_MAX_DELAY);
 8002bfe:	7dbb      	ldrb	r3, [r7, #22]
 8002c00:	b299      	uxth	r1, r3
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	1d3a      	adds	r2, r7, #4
 8002c08:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0c:	9000      	str	r0, [sp, #0]
 8002c0e:	4816      	ldr	r0, [pc, #88]	@ (8002c68 <pulseOximeter_readFifo+0x94>)
 8002c10:	f006 fb8c 	bl	800932c <HAL_I2C_Master_Receive>

	fifoData.irLedRaw = 0;
 8002c14:	4b15      	ldr	r3, [pc, #84]	@ (8002c6c <pulseOximeter_readFifo+0x98>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	805a      	strh	r2, [r3, #2]
	fifoData.redLedRaw = 0;
 8002c1a:	4b14      	ldr	r3, [pc, #80]	@ (8002c6c <pulseOximeter_readFifo+0x98>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	801a      	strh	r2, [r3, #0]

	fifoData.irLedRaw = (buf[4] << 8) | (buf[5] << 0);
 8002c20:	7a3b      	ldrb	r3, [r7, #8]
 8002c22:	b21b      	sxth	r3, r3
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	b21a      	sxth	r2, r3
 8002c28:	7a7b      	ldrb	r3, [r7, #9]
 8002c2a:	b21b      	sxth	r3, r3
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	b21b      	sxth	r3, r3
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	4b0e      	ldr	r3, [pc, #56]	@ (8002c6c <pulseOximeter_readFifo+0x98>)
 8002c34:	805a      	strh	r2, [r3, #2]
	fifoData.redLedRaw =(buf[1] << 8) | (buf[0] << 0);
 8002c36:	797b      	ldrb	r3, [r7, #5]
 8002c38:	b21b      	sxth	r3, r3
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	b21a      	sxth	r2, r3
 8002c3e:	793b      	ldrb	r3, [r7, #4]
 8002c40:	b21b      	sxth	r3, r3
 8002c42:	4313      	orrs	r3, r2
 8002c44:	b21b      	sxth	r3, r3
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	4b08      	ldr	r3, [pc, #32]	@ (8002c6c <pulseOximeter_readFifo+0x98>)
 8002c4a:	801a      	strh	r2, [r3, #0]

	return fifoData;
 8002c4c:	4b07      	ldr	r3, [pc, #28]	@ (8002c6c <pulseOximeter_readFifo+0x98>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	2300      	movs	r3, #0
 8002c54:	8a3a      	ldrh	r2, [r7, #16]
 8002c56:	f362 030f 	bfi	r3, r2, #0, #16
 8002c5a:	8a7a      	ldrh	r2, [r7, #18]
 8002c5c:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	200003f4 	.word	0x200003f4
 8002c6c:	20000b54 	.word	0x20000b54

08002c70 <pulseOximeter_readTemperature>:
	pulseOximeter_readRegister(INT_STATUS_1, &readResult);
}


float pulseOximeter_readTemperature(void)
{
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
	uint8_t tempDone = 1;
 8002c76:	2301      	movs	r3, #1
 8002c78:	71fb      	strb	r3, [r7, #7]
	int8_t tempFraction;
	uint8_t tempInteger;
	float temperature;

	// Initiate a temperature conversion
	pulseOximeter_writeRegister(DIE_TEMP_CONFIG, 1);
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	2021      	movs	r0, #33	@ 0x21
 8002c7e:	f7ff fe95 	bl	80029ac <pulseOximeter_writeRegister>

	// Wait for conversion finish
	while( tempDone != 0 )
 8002c82:	e004      	b.n	8002c8e <pulseOximeter_readTemperature+0x1e>
	{
		pulseOximeter_readRegister(DIE_TEMP_CONFIG, &tempDone);
 8002c84:	1dfb      	adds	r3, r7, #7
 8002c86:	4619      	mov	r1, r3
 8002c88:	2021      	movs	r0, #33	@ 0x21
 8002c8a:	f7ff fe51 	bl	8002930 <pulseOximeter_readRegister>
	while( tempDone != 0 )
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f7      	bne.n	8002c84 <pulseOximeter_readTemperature+0x14>
	}

	// Read Die temperature integer register
	pulseOximeter_readRegister(DIE_TEMP_INTEGER, &readResult);
 8002c94:	1dbb      	adds	r3, r7, #6
 8002c96:	4619      	mov	r1, r3
 8002c98:	201f      	movs	r0, #31
 8002c9a:	f7ff fe49 	bl	8002930 <pulseOximeter_readRegister>
	tempInteger = readResult;
 8002c9e:	79bb      	ldrb	r3, [r7, #6]
 8002ca0:	73fb      	strb	r3, [r7, #15]

	// Read Die temperature fraction register
	pulseOximeter_readRegister(DIE_TEMP_FRACTION, &readResult);
 8002ca2:	1dbb      	adds	r3, r7, #6
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	2020      	movs	r0, #32
 8002ca8:	f7ff fe42 	bl	8002930 <pulseOximeter_readRegister>
	tempFraction = readResult;
 8002cac:	79bb      	ldrb	r3, [r7, #6]
 8002cae:	73bb      	strb	r3, [r7, #14]

	// Conversion factor found in MAX30102 DataSheet
	temperature = tempInteger + (tempFraction*0.0625);
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fc0e 	bl	80004d4 <__aeabi_i2d>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	460d      	mov	r5, r1
 8002cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fc07 	bl	80004d4 <__aeabi_i2d>
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <pulseOximeter_readTemperature+0x8c>)
 8002ccc:	f7fd fc6c 	bl	80005a8 <__aeabi_dmul>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	f7fd fab0 	bl	800023c <__adddf3>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f7fd ff58 	bl	8000b98 <__aeabi_d2f>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	60bb      	str	r3, [r7, #8]

	return temperature;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	ee07 3a90 	vmov	s15, r3
}
 8002cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfc:	3fb00000 	.word	0x3fb00000

08002d00 <pulseOximeter_update>:

MAX30102 pulseOximeter_update(FIFO_LED_DATA m_fifoData)
{
 8002d00:	b5b0      	push	{r4, r5, r7, lr}
 8002d02:	b08e      	sub	sp, #56	@ 0x38
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
	MAX30102 result = {
 8002d0a:	f107 0308 	add.w	r3, r7, #8
 8002d0e:	2228      	movs	r2, #40	@ 0x28
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f015 fb11 	bl	801833a <memset>
 8002d18:	4b99      	ldr	r3, [pc, #612]	@ (8002f80 <pulseOximeter_update+0x280>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	61fb      	str	r3, [r7, #28]
	/*float dcFilteredIR*/ 0.0,
	/*float dcFilteredRed*/ 0.0,
	/*float temperature;*/ 0.0
  };

	result.temperature = pulseOximeter_readTemperature();
 8002d1e:	f7ff ffa7 	bl	8002c70 <pulseOximeter_readTemperature>
 8002d22:	eef0 7a40 	vmov.f32	s15, s0
 8002d26:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	dcFilterIR = dcRemoval( (float)m_fifoData.irLedRaw, dcFilterIR.w, ALPHA );
 8002d2a:	887b      	ldrh	r3, [r7, #2]
 8002d2c:	ee07 3a90 	vmov	s15, r3
 8002d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d34:	4b93      	ldr	r3, [pc, #588]	@ (8002f84 <pulseOximeter_update+0x284>)
 8002d36:	ed93 7a00 	vldr	s14, [r3]
 8002d3a:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 8002f88 <pulseOximeter_update+0x288>
 8002d3e:	eef0 0a47 	vmov.f32	s1, s14
 8002d42:	eeb0 0a67 	vmov.f32	s0, s15
 8002d46:	f7fe fc9e 	bl	8001686 <dcRemoval>
 8002d4a:	eeb0 7a40 	vmov.f32	s14, s0
 8002d4e:	eef0 7a60 	vmov.f32	s15, s1
 8002d52:	4b8c      	ldr	r3, [pc, #560]	@ (8002f84 <pulseOximeter_update+0x284>)
 8002d54:	ed83 7a00 	vstr	s14, [r3]
 8002d58:	edc3 7a01 	vstr	s15, [r3, #4]
	dcFilterRed = dcRemoval( (float)m_fifoData.redLedRaw, dcFilterRed.w, ALPHA );
 8002d5c:	883b      	ldrh	r3, [r7, #0]
 8002d5e:	ee07 3a90 	vmov	s15, r3
 8002d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d66:	4b89      	ldr	r3, [pc, #548]	@ (8002f8c <pulseOximeter_update+0x28c>)
 8002d68:	ed93 7a00 	vldr	s14, [r3]
 8002d6c:	ed9f 1a86 	vldr	s2, [pc, #536]	@ 8002f88 <pulseOximeter_update+0x288>
 8002d70:	eef0 0a47 	vmov.f32	s1, s14
 8002d74:	eeb0 0a67 	vmov.f32	s0, s15
 8002d78:	f7fe fc85 	bl	8001686 <dcRemoval>
 8002d7c:	eeb0 7a40 	vmov.f32	s14, s0
 8002d80:	eef0 7a60 	vmov.f32	s15, s1
 8002d84:	4b81      	ldr	r3, [pc, #516]	@ (8002f8c <pulseOximeter_update+0x28c>)
 8002d86:	ed83 7a00 	vstr	s14, [r3]
 8002d8a:	edc3 7a01 	vstr	s15, [r3, #4]

	float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 8002d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f84 <pulseOximeter_update+0x284>)
 8002d90:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d94:	487e      	ldr	r0, [pc, #504]	@ (8002f90 <pulseOximeter_update+0x290>)
 8002d96:	eeb0 0a67 	vmov.f32	s0, s15
 8002d9a:	f7fe fcf1 	bl	8001780 <meanDiff>
 8002d9e:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 8002da2:	487c      	ldr	r0, [pc, #496]	@ (8002f94 <pulseOximeter_update+0x294>)
 8002da4:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002da8:	f7fe fca2 	bl	80016f0 <lowPassButterworthFilter>

	irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 8002dac:	4b75      	ldr	r3, [pc, #468]	@ (8002f84 <pulseOximeter_update+0x284>)
 8002dae:	ed93 7a01 	vldr	s14, [r3, #4]
 8002db2:	4b74      	ldr	r3, [pc, #464]	@ (8002f84 <pulseOximeter_update+0x284>)
 8002db4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002db8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dbc:	4b76      	ldr	r3, [pc, #472]	@ (8002f98 <pulseOximeter_update+0x298>)
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc6:	4b74      	ldr	r3, [pc, #464]	@ (8002f98 <pulseOximeter_update+0x298>)
 8002dc8:	edc3 7a00 	vstr	s15, [r3]
	redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 8002dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8002f8c <pulseOximeter_update+0x28c>)
 8002dce:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dd2:	4b6e      	ldr	r3, [pc, #440]	@ (8002f8c <pulseOximeter_update+0x28c>)
 8002dd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ddc:	4b6f      	ldr	r3, [pc, #444]	@ (8002f9c <pulseOximeter_update+0x29c>)
 8002dde:	edd3 7a00 	vldr	s15, [r3]
 8002de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f9c <pulseOximeter_update+0x29c>)
 8002de8:	edc3 7a00 	vstr	s15, [r3]
	samplesRecorded++;
 8002dec:	4b6c      	ldr	r3, [pc, #432]	@ (8002fa0 <pulseOximeter_update+0x2a0>)
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	3301      	adds	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa0 <pulseOximeter_update+0x2a0>)
 8002df6:	801a      	strh	r2, [r3, #0]

	if( detectPulse( lpbFilterIR.result ) && samplesRecorded > 0 )
 8002df8:	4b66      	ldr	r3, [pc, #408]	@ (8002f94 <pulseOximeter_update+0x294>)
 8002dfa:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8002e02:	f000 f8d9 	bl	8002fb8 <detectPulse>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8088 	beq.w	8002f1e <pulseOximeter_update+0x21e>
 8002e0e:	4b64      	ldr	r3, [pc, #400]	@ (8002fa0 <pulseOximeter_update+0x2a0>)
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8083 	beq.w	8002f1e <pulseOximeter_update+0x21e>
	{
		result.pulseDetected=true;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	723b      	strb	r3, [r7, #8]
		pulsesDetected++;
 8002e1c:	4b61      	ldr	r3, [pc, #388]	@ (8002fa4 <pulseOximeter_update+0x2a4>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b5f      	ldr	r3, [pc, #380]	@ (8002fa4 <pulseOximeter_update+0x2a4>)
 8002e26:	801a      	strh	r2, [r3, #0]

		float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 8002e28:	4b5c      	ldr	r3, [pc, #368]	@ (8002f9c <pulseOximeter_update+0x29c>)
 8002e2a:	ed93 7a00 	vldr	s14, [r3]
 8002e2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002fa0 <pulseOximeter_update+0x2a0>)
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e3a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e3e:	ee16 0a90 	vmov	r0, s13
 8002e42:	f7fd fb59 	bl	80004f8 <__aeabi_f2d>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	ec43 2b10 	vmov	d0, r2, r3
 8002e4e:	f017 ffcd 	bl	801adec <sqrt>
 8002e52:	eeb0 7a40 	vmov.f32	s14, s0
 8002e56:	eef0 7a60 	vmov.f32	s15, s1
 8002e5a:	eeb0 0a47 	vmov.f32	s0, s14
 8002e5e:	eef0 0a67 	vmov.f32	s1, s15
 8002e62:	f017 ff85 	bl	801ad70 <log>
 8002e66:	ec55 4b10 	vmov	r4, r5, d0
 8002e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002f98 <pulseOximeter_update+0x298>)
 8002e6c:	ed93 7a00 	vldr	s14, [r3]
 8002e70:	4b4b      	ldr	r3, [pc, #300]	@ (8002fa0 <pulseOximeter_update+0x2a0>)
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	ee07 3a90 	vmov	s15, r3
 8002e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e80:	ee16 0a90 	vmov	r0, s13
 8002e84:	f7fd fb38 	bl	80004f8 <__aeabi_f2d>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	ec43 2b10 	vmov	d0, r2, r3
 8002e90:	f017 ffac 	bl	801adec <sqrt>
 8002e94:	eeb0 7a40 	vmov.f32	s14, s0
 8002e98:	eef0 7a60 	vmov.f32	s15, s1
 8002e9c:	eeb0 0a47 	vmov.f32	s0, s14
 8002ea0:	eef0 0a67 	vmov.f32	s1, s15
 8002ea4:	f017 ff64 	bl	801ad70 <log>
 8002ea8:	ec53 2b10 	vmov	r2, r3, d0
 8002eac:	4620      	mov	r0, r4
 8002eae:	4629      	mov	r1, r5
 8002eb0:	f7fd fca4 	bl	80007fc <__aeabi_ddiv>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f7fd fe6c 	bl	8000b98 <__aeabi_d2f>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	633b      	str	r3, [r7, #48]	@ 0x30

		//This is my adjusted standard model, so it shows 0.89 as 94% saturation. It is probably far from correct, requires proper empircal calibration
		currentSpO2Value = 110.0 - 18.0 * ratioRMS;
 8002ec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ec6:	f7fd fb17 	bl	80004f8 <__aeabi_f2d>
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	4b36      	ldr	r3, [pc, #216]	@ (8002fa8 <pulseOximeter_update+0x2a8>)
 8002ed0:	f7fd fb6a 	bl	80005a8 <__aeabi_dmul>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	f04f 0000 	mov.w	r0, #0
 8002edc:	4933      	ldr	r1, [pc, #204]	@ (8002fac <pulseOximeter_update+0x2ac>)
 8002ede:	f7fd f9ab 	bl	8000238 <__aeabi_dsub>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f7fd fe55 	bl	8000b98 <__aeabi_d2f>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4a23      	ldr	r2, [pc, #140]	@ (8002f80 <pulseOximeter_update+0x280>)
 8002ef2:	6013      	str	r3, [r2, #0]
		result.SpO2 = currentSpO2Value;
 8002ef4:	4b22      	ldr	r3, [pc, #136]	@ (8002f80 <pulseOximeter_update+0x280>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	61fb      	str	r3, [r7, #28]

		if( pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0)
 8002efa:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa4 <pulseOximeter_update+0x2a4>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10a      	bne.n	8002f1e <pulseOximeter_update+0x21e>
		{
			irACValueSqSum = 0;
 8002f08:	4b23      	ldr	r3, [pc, #140]	@ (8002f98 <pulseOximeter_update+0x298>)
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
			redACValueSqSum = 0;
 8002f10:	4b22      	ldr	r3, [pc, #136]	@ (8002f9c <pulseOximeter_update+0x29c>)
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
			samplesRecorded = 0;
 8002f18:	4b21      	ldr	r3, [pc, #132]	@ (8002fa0 <pulseOximeter_update+0x2a0>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	801a      	strh	r2, [r3, #0]
		}
	}

	balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <pulseOximeter_update+0x28c>)
 8002f20:	edd3 7a00 	vldr	s15, [r3]
 8002f24:	4b17      	ldr	r3, [pc, #92]	@ (8002f84 <pulseOximeter_update+0x284>)
 8002f26:	ed93 7a00 	vldr	s14, [r3]
 8002f2a:	eef0 0a47 	vmov.f32	s1, s14
 8002f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f32:	f000 f94d 	bl	80031d0 <balanceIntesities>


	result.heartBPM = currentBPM;
 8002f36:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb0 <pulseOximeter_update+0x2b0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]
	result.irCardiogram = lpbFilterIR.result;
 8002f3c:	4b15      	ldr	r3, [pc, #84]	@ (8002f94 <pulseOximeter_update+0x294>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	613b      	str	r3, [r7, #16]
	result.irDcValue = dcFilterIR.w;
 8002f42:	4b10      	ldr	r3, [pc, #64]	@ (8002f84 <pulseOximeter_update+0x284>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	617b      	str	r3, [r7, #20]
	result.redDcValue = dcFilterRed.w;
 8002f48:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <pulseOximeter_update+0x28c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	61bb      	str	r3, [r7, #24]
	result.lastBeatThreshold = lastBeatThreshold;
 8002f4e:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <pulseOximeter_update+0x2b4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	623b      	str	r3, [r7, #32]
	result.dcFilteredIR = dcFilterIR.result;
 8002f54:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <pulseOximeter_update+0x284>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
	result.dcFilteredRed = dcFilterRed.result;
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f8c <pulseOximeter_update+0x28c>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	62bb      	str	r3, [r7, #40]	@ 0x28

	return result;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	461d      	mov	r5, r3
 8002f64:	f107 0408 	add.w	r4, r7, #8
 8002f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f74:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	3738      	adds	r7, #56	@ 0x38
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f80:	20000c00 	.word	0x20000c00
 8002f84:	20000b58 	.word	0x20000b58
 8002f88:	3f733333 	.word	0x3f733333
 8002f8c:	20000b60 	.word	0x20000b60
 8002f90:	20000b68 	.word	0x20000b68
 8002f94:	20000bb0 	.word	0x20000bb0
 8002f98:	20000bf4 	.word	0x20000bf4
 8002f9c:	20000bf8 	.word	0x20000bf8
 8002fa0:	20000bfc 	.word	0x20000bfc
 8002fa4:	20000bfe 	.word	0x20000bfe
 8002fa8:	40320000 	.word	0x40320000
 8002fac:	405b8000 	.word	0x405b8000
 8002fb0:	20000bbc 	.word	0x20000bbc
 8002fb4:	20000bf0 	.word	0x20000bf0

08002fb8 <detectPulse>:


bool detectPulse(float sensor_value)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	ed87 0a01 	vstr	s0, [r7, #4]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint32_t currentBeat = 0;
  static uint32_t lastBeat = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 8002fc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fc6:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8003194 <detectPulse+0x1dc>
 8002fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd2:	dd14      	ble.n	8002ffe <detectPulse+0x46>
  {
    currentPulseDetectorState = PULSE_IDLE;
 8002fd4:	4b70      	ldr	r3, [pc, #448]	@ (8003198 <detectPulse+0x1e0>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
    prev_sensor_value = 0;
 8002fda:	4b70      	ldr	r3, [pc, #448]	@ (800319c <detectPulse+0x1e4>)
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
    lastBeat = 0;
 8002fe2:	4b6f      	ldr	r3, [pc, #444]	@ (80031a0 <detectPulse+0x1e8>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
    currentBeat = 0;
 8002fe8:	4b6e      	ldr	r3, [pc, #440]	@ (80031a4 <detectPulse+0x1ec>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 8002fee:	4b6e      	ldr	r3, [pc, #440]	@ (80031a8 <detectPulse+0x1f0>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
    lastBeatThreshold = 0;
 8002ff4:	4b6d      	ldr	r3, [pc, #436]	@ (80031ac <detectPulse+0x1f4>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
    return false;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e0c5      	b.n	800318a <detectPulse+0x1d2>
  }

  switch(currentPulseDetectorState)
 8002ffe:	4b66      	ldr	r3, [pc, #408]	@ (8003198 <detectPulse+0x1e0>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b02      	cmp	r3, #2
 8003004:	f000 809f 	beq.w	8003146 <detectPulse+0x18e>
 8003008:	2b02      	cmp	r3, #2
 800300a:	f300 80ba 	bgt.w	8003182 <detectPulse+0x1ca>
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <detectPulse+0x60>
 8003012:	2b01      	cmp	r3, #1
 8003014:	d011      	beq.n	800303a <detectPulse+0x82>
 8003016:	e0b4      	b.n	8003182 <detectPulse+0x1ca>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 8003018:	edd7 7a01 	vldr	s15, [r7, #4]
 800301c:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80031b0 <detectPulse+0x1f8>
 8003020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003028:	da00      	bge.n	800302c <detectPulse+0x74>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 800302a:	e0aa      	b.n	8003182 <detectPulse+0x1ca>
        currentPulseDetectorState = PULSE_TRACE_UP;
 800302c:	4b5a      	ldr	r3, [pc, #360]	@ (8003198 <detectPulse+0x1e0>)
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
        values_went_down = 0;
 8003032:	4b5d      	ldr	r3, [pc, #372]	@ (80031a8 <detectPulse+0x1f0>)
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
      break;
 8003038:	e0a3      	b.n	8003182 <detectPulse+0x1ca>

    case PULSE_TRACE_UP:
      if(sensor_value > prev_sensor_value)
 800303a:	4b58      	ldr	r3, [pc, #352]	@ (800319c <detectPulse+0x1e4>)
 800303c:	edd3 7a00 	vldr	s15, [r3]
 8003040:	ed97 7a01 	vldr	s14, [r7, #4]
 8003044:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304c:	dd0d      	ble.n	800306a <detectPulse+0xb2>
      {
        currentBeat = HAL_GetTick();
 800304e:	f004 f8b9 	bl	80071c4 <HAL_GetTick>
 8003052:	4603      	mov	r3, r0
 8003054:	4a53      	ldr	r2, [pc, #332]	@ (80031a4 <detectPulse+0x1ec>)
 8003056:	6013      	str	r3, [r2, #0]
        lastBeatThreshold = sensor_value;
 8003058:	edd7 7a01 	vldr	s15, [r7, #4]
 800305c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003060:	ee17 2a90 	vmov	r2, s15
 8003064:	4b51      	ldr	r3, [pc, #324]	@ (80031ac <detectPulse+0x1f4>)
 8003066:	601a      	str	r2, [r3, #0]

        currentPulseDetectorState = PULSE_TRACE_DOWN;

        return true;
      }
      break;
 8003068:	e08b      	b.n	8003182 <detectPulse+0x1ca>
    	uint32_t beatDuration = currentBeat - lastBeat;
 800306a:	4b4e      	ldr	r3, [pc, #312]	@ (80031a4 <detectPulse+0x1ec>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4b4c      	ldr	r3, [pc, #304]	@ (80031a0 <detectPulse+0x1e8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	60fb      	str	r3, [r7, #12]
        lastBeat = currentBeat;
 8003076:	4b4b      	ldr	r3, [pc, #300]	@ (80031a4 <detectPulse+0x1ec>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a49      	ldr	r2, [pc, #292]	@ (80031a0 <detectPulse+0x1e8>)
 800307c:	6013      	str	r3, [r2, #0]
        float rawBPM = 0;
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
        if(beatDuration > 0)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <detectPulse+0xe8>
          rawBPM = 60000.0 / (float)beatDuration;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003094:	eddf 6a47 	vldr	s13, [pc, #284]	@ 80031b4 <detectPulse+0x1fc>
 8003098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800309c:	edc7 7a05 	vstr	s15, [r7, #20]
        valuesBPM[bpmIndex] = rawBPM;
 80030a0:	4b45      	ldr	r3, [pc, #276]	@ (80031b8 <detectPulse+0x200>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	4a45      	ldr	r2, [pc, #276]	@ (80031bc <detectPulse+0x204>)
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	601a      	str	r2, [r3, #0]
        valuesBPMSum = 0;
 80030ae:	4b44      	ldr	r3, [pc, #272]	@ (80031c0 <detectPulse+0x208>)
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	e010      	b.n	80030de <detectPulse+0x126>
          valuesBPMSum += valuesBPM[i];
 80030bc:	4a3f      	ldr	r2, [pc, #252]	@ (80031bc <detectPulse+0x204>)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	ed93 7a00 	vldr	s14, [r3]
 80030c8:	4b3d      	ldr	r3, [pc, #244]	@ (80031c0 <detectPulse+0x208>)
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d2:	4b3b      	ldr	r3, [pc, #236]	@ (80031c0 <detectPulse+0x208>)
 80030d4:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	3301      	adds	r3, #1
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b09      	cmp	r3, #9
 80030e2:	ddeb      	ble.n	80030bc <detectPulse+0x104>
        bpmIndex++;
 80030e4:	4b34      	ldr	r3, [pc, #208]	@ (80031b8 <detectPulse+0x200>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	3301      	adds	r3, #1
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	4b32      	ldr	r3, [pc, #200]	@ (80031b8 <detectPulse+0x200>)
 80030ee:	701a      	strb	r2, [r3, #0]
        bpmIndex = bpmIndex % PULSE_BPM_SAMPLE_SIZE;
 80030f0:	4b31      	ldr	r3, [pc, #196]	@ (80031b8 <detectPulse+0x200>)
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	4b33      	ldr	r3, [pc, #204]	@ (80031c4 <detectPulse+0x20c>)
 80030f6:	fba3 1302 	umull	r1, r3, r3, r2
 80030fa:	08d9      	lsrs	r1, r3, #3
 80030fc:	460b      	mov	r3, r1
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	b2da      	uxtb	r2, r3
 8003108:	4b2b      	ldr	r3, [pc, #172]	@ (80031b8 <detectPulse+0x200>)
 800310a:	701a      	strb	r2, [r3, #0]
        if(valuesBPMCount < PULSE_BPM_SAMPLE_SIZE)
 800310c:	4b2e      	ldr	r3, [pc, #184]	@ (80031c8 <detectPulse+0x210>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b09      	cmp	r3, #9
 8003112:	d805      	bhi.n	8003120 <detectPulse+0x168>
          valuesBPMCount++;
 8003114:	4b2c      	ldr	r3, [pc, #176]	@ (80031c8 <detectPulse+0x210>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	b2da      	uxtb	r2, r3
 800311c:	4b2a      	ldr	r3, [pc, #168]	@ (80031c8 <detectPulse+0x210>)
 800311e:	701a      	strb	r2, [r3, #0]
        currentBPM = valuesBPMSum / valuesBPMCount;
 8003120:	4b27      	ldr	r3, [pc, #156]	@ (80031c0 <detectPulse+0x208>)
 8003122:	edd3 6a00 	vldr	s13, [r3]
 8003126:	4b28      	ldr	r3, [pc, #160]	@ (80031c8 <detectPulse+0x210>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003136:	4b25      	ldr	r3, [pc, #148]	@ (80031cc <detectPulse+0x214>)
 8003138:	edc3 7a00 	vstr	s15, [r3]
        currentPulseDetectorState = PULSE_TRACE_DOWN;
 800313c:	4b16      	ldr	r3, [pc, #88]	@ (8003198 <detectPulse+0x1e0>)
 800313e:	2202      	movs	r2, #2
 8003140:	701a      	strb	r2, [r3, #0]
        return true;
 8003142:	2301      	movs	r3, #1
 8003144:	e021      	b.n	800318a <detectPulse+0x1d2>

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 8003146:	4b15      	ldr	r3, [pc, #84]	@ (800319c <detectPulse+0x1e4>)
 8003148:	edd3 7a00 	vldr	s15, [r3]
 800314c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003158:	d505      	bpl.n	8003166 <detectPulse+0x1ae>
      {
        values_went_down++;
 800315a:	4b13      	ldr	r3, [pc, #76]	@ (80031a8 <detectPulse+0x1f0>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	3301      	adds	r3, #1
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4b11      	ldr	r3, [pc, #68]	@ (80031a8 <detectPulse+0x1f0>)
 8003164:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 8003166:	edd7 7a01 	vldr	s15, [r7, #4]
 800316a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80031b0 <detectPulse+0x1f8>
 800316e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003176:	d400      	bmi.n	800317a <detectPulse+0x1c2>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 8003178:	e002      	b.n	8003180 <detectPulse+0x1c8>
        currentPulseDetectorState = PULSE_IDLE;
 800317a:	4b07      	ldr	r3, [pc, #28]	@ (8003198 <detectPulse+0x1e0>)
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
      break;
 8003180:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 8003182:	4a06      	ldr	r2, [pc, #24]	@ (800319c <detectPulse+0x1e4>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6013      	str	r3, [r2, #0]
  return false;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	44fa0000 	.word	0x44fa0000
 8003198:	20000c0c 	.word	0x20000c0c
 800319c:	20000c10 	.word	0x20000c10
 80031a0:	20000c14 	.word	0x20000c14
 80031a4:	20000c18 	.word	0x20000c18
 80031a8:	20000c1c 	.word	0x20000c1c
 80031ac:	20000bf0 	.word	0x20000bf0
 80031b0:	42c80000 	.word	0x42c80000
 80031b4:	476a6000 	.word	0x476a6000
 80031b8:	20000bed 	.word	0x20000bed
 80031bc:	20000bc0 	.word	0x20000bc0
 80031c0:	20000be8 	.word	0x20000be8
 80031c4:	cccccccd 	.word	0xcccccccd
 80031c8:	20000bec 	.word	0x20000bec
 80031cc:	20000bbc 	.word	0x20000bbc

080031d0 <balanceIntesities>:

void balanceIntesities( float redLedDC, float IRLedDC )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80031da:	edc7 0a00 	vstr	s1, [r7]
	uint32_t currentTime = HAL_GetTick();
 80031de:	f003 fff1 	bl	80071c4 <HAL_GetTick>
 80031e2:	60f8      	str	r0, [r7, #12]
  if( currentTime - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031ee:	4b3a      	ldr	r3, [pc, #232]	@ (80032d8 <balanceIntesities+0x108>)
 80031f0:	edd3 7a00 	vldr	s15, [r3]
 80031f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80032dc <balanceIntesities+0x10c>
 80031fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003204:	da00      	bge.n	8003208 <balanceIntesities+0x38>
      pulseOximeter_setLedCurrent(IR_LED, IrLedCurrent);
    }

    lastREDLedCurrentCheck = HAL_GetTick();
  }
}
 8003206:	e063      	b.n	80032d0 <balanceIntesities+0x100>
	  if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < MAX30100_LED_CURRENT_50MA)
 8003208:	ed97 7a00 	vldr	s14, [r7]
 800320c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003214:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80032e0 <balanceIntesities+0x110>
 8003218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	dd20      	ble.n	8003264 <balanceIntesities+0x94>
 8003222:	4b30      	ldr	r3, [pc, #192]	@ (80032e4 <balanceIntesities+0x114>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b0e      	cmp	r3, #14
 8003228:	d81c      	bhi.n	8003264 <balanceIntesities+0x94>
      redLEDCurrent++;
 800322a:	4b2e      	ldr	r3, [pc, #184]	@ (80032e4 <balanceIntesities+0x114>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	3301      	adds	r3, #1
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4b2c      	ldr	r3, [pc, #176]	@ (80032e4 <balanceIntesities+0x114>)
 8003234:	701a      	strb	r2, [r3, #0]
      pulseOximeter_setLedCurrent(RED_LED, redLEDCurrent);
 8003236:	4b2b      	ldr	r3, [pc, #172]	@ (80032e4 <balanceIntesities+0x114>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	ee07 3a90 	vmov	s15, r3
 800323e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003242:	eeb0 0a67 	vmov.f32	s0, s15
 8003246:	2001      	movs	r0, #1
 8003248:	f7ff fc44 	bl	8002ad4 <pulseOximeter_setLedCurrent>
	  pulseOximeter_setLedCurrent(IR_LED, IrLedCurrent);
 800324c:	4b26      	ldr	r3, [pc, #152]	@ (80032e8 <balanceIntesities+0x118>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	ee07 3a90 	vmov	s15, r3
 8003254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003258:	eeb0 0a67 	vmov.f32	s0, s15
 800325c:	2002      	movs	r0, #2
 800325e:	f7ff fc39 	bl	8002ad4 <pulseOximeter_setLedCurrent>
 8003262:	e02c      	b.n	80032be <balanceIntesities+0xee>
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 8003264:	ed97 7a01 	vldr	s14, [r7, #4]
 8003268:	edd7 7a00 	vldr	s15, [r7]
 800326c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003270:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80032e0 <balanceIntesities+0x110>
 8003274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	dd1f      	ble.n	80032be <balanceIntesities+0xee>
 800327e:	4b19      	ldr	r3, [pc, #100]	@ (80032e4 <balanceIntesities+0x114>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01b      	beq.n	80032be <balanceIntesities+0xee>
      redLEDCurrent--;pulseOximeter_setLedCurrent(RED_LED, redLEDCurrent);
 8003286:	4b17      	ldr	r3, [pc, #92]	@ (80032e4 <balanceIntesities+0x114>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	3b01      	subs	r3, #1
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4b15      	ldr	r3, [pc, #84]	@ (80032e4 <balanceIntesities+0x114>)
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	4b14      	ldr	r3, [pc, #80]	@ (80032e4 <balanceIntesities+0x114>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329e:	eeb0 0a67 	vmov.f32	s0, s15
 80032a2:	2001      	movs	r0, #1
 80032a4:	f7ff fc16 	bl	8002ad4 <pulseOximeter_setLedCurrent>
      pulseOximeter_setLedCurrent(IR_LED, IrLedCurrent);
 80032a8:	4b0f      	ldr	r3, [pc, #60]	@ (80032e8 <balanceIntesities+0x118>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	ee07 3a90 	vmov	s15, r3
 80032b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b4:	eeb0 0a67 	vmov.f32	s0, s15
 80032b8:	2002      	movs	r0, #2
 80032ba:	f7ff fc0b 	bl	8002ad4 <pulseOximeter_setLedCurrent>
    lastREDLedCurrentCheck = HAL_GetTick();
 80032be:	f003 ff81 	bl	80071c4 <HAL_GetTick>
 80032c2:	ee07 0a90 	vmov	s15, r0
 80032c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ca:	4b03      	ldr	r3, [pc, #12]	@ (80032d8 <balanceIntesities+0x108>)
 80032cc:	edc3 7a00 	vstr	s15, [r3]
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000c08 	.word	0x20000c08
 80032dc:	43fa0000 	.word	0x43fa0000
 80032e0:	477de800 	.word	0x477de800
 80032e4:	20000c04 	.word	0x20000c04
 80032e8:	20000c0d 	.word	0x20000c0d

080032ec <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80032f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <LL_APB1_GRP1_EnableClock>:
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800331a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800331c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4313      	orrs	r3, r2
 8003324:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800332a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4013      	ands	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003332:	68fb      	ldr	r3, [r7, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003346:	1d3b      	adds	r3, r7, #4
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003354:	2300      	movs	r3, #0
 8003356:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003358:	4b2b      	ldr	r3, [pc, #172]	@ (8003408 <MX_RTC_Init+0xc8>)
 800335a:	4a2c      	ldr	r2, [pc, #176]	@ (800340c <MX_RTC_Init+0xcc>)
 800335c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800335e:	4b2a      	ldr	r3, [pc, #168]	@ (8003408 <MX_RTC_Init+0xc8>)
 8003360:	2200      	movs	r2, #0
 8003362:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003364:	4b28      	ldr	r3, [pc, #160]	@ (8003408 <MX_RTC_Init+0xc8>)
 8003366:	227f      	movs	r2, #127	@ 0x7f
 8003368:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800336a:	4b27      	ldr	r3, [pc, #156]	@ (8003408 <MX_RTC_Init+0xc8>)
 800336c:	22ff      	movs	r2, #255	@ 0xff
 800336e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003370:	4b25      	ldr	r3, [pc, #148]	@ (8003408 <MX_RTC_Init+0xc8>)
 8003372:	2200      	movs	r2, #0
 8003374:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003376:	4b24      	ldr	r3, [pc, #144]	@ (8003408 <MX_RTC_Init+0xc8>)
 8003378:	2200      	movs	r2, #0
 800337a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800337c:	4b22      	ldr	r3, [pc, #136]	@ (8003408 <MX_RTC_Init+0xc8>)
 800337e:	2200      	movs	r2, #0
 8003380:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003382:	4b21      	ldr	r3, [pc, #132]	@ (8003408 <MX_RTC_Init+0xc8>)
 8003384:	2200      	movs	r2, #0
 8003386:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003388:	481f      	ldr	r0, [pc, #124]	@ (8003408 <MX_RTC_Init+0xc8>)
 800338a:	f00a fae9 	bl	800d960 <HAL_RTC_Init>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8003394:	f7fe fe9d 	bl	80020d2 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003398:	2300      	movs	r3, #0
 800339a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800339c:	2300      	movs	r3, #0
 800339e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	2201      	movs	r2, #1
 80033b4:	4619      	mov	r1, r3
 80033b6:	4814      	ldr	r0, [pc, #80]	@ (8003408 <MX_RTC_Init+0xc8>)
 80033b8:	f00a fb82 	bl	800dac0 <HAL_RTC_SetTime>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80033c2:	f7fe fe86 	bl	80020d2 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80033c6:	2301      	movs	r3, #1
 80033c8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80033ca:	2301      	movs	r3, #1
 80033cc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80033ce:	2301      	movs	r3, #1
 80033d0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80033d6:	463b      	mov	r3, r7
 80033d8:	2201      	movs	r2, #1
 80033da:	4619      	mov	r1, r3
 80033dc:	480a      	ldr	r0, [pc, #40]	@ (8003408 <MX_RTC_Init+0xc8>)
 80033de:	f00a fc33 	bl	800dc48 <HAL_RTC_SetDate>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_RTC_Init+0xac>
  {
    Error_Handler();
 80033e8:	f7fe fe73 	bl	80020d2 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80033ec:	2204      	movs	r2, #4
 80033ee:	2100      	movs	r1, #0
 80033f0:	4805      	ldr	r0, [pc, #20]	@ (8003408 <MX_RTC_Init+0xc8>)
 80033f2:	f00a fd47 	bl	800de84 <HAL_RTCEx_SetWakeUpTimer_IT>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 80033fc:	f7fe fe69 	bl	80020d2 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003400:	bf00      	nop
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20000c20 	.word	0x20000c20
 800340c:	40002800 	.word	0x40002800

08003410 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b096      	sub	sp, #88	@ 0x58
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003418:	f107 0308 	add.w	r3, r7, #8
 800341c:	2250      	movs	r2, #80	@ 0x50
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f014 ff8a 	bl	801833a <memset>
  if(rtcHandle->Instance==RTC)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a14      	ldr	r2, [pc, #80]	@ (800347c <HAL_RTC_MspInit+0x6c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d121      	bne.n	8003474 <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

	  HAL_PWR_EnableBkUpAccess();
 8003430:	f008 fcba 	bl	800bda8 <HAL_PWR_EnableBkUpAccess>




	  HAL_PWR_EnableBkUpAccess();
 8003434:	f008 fcb8 	bl	800bda8 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003438:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800343c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800343e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003442:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003444:	f107 0308 	add.w	r3, r7, #8
 8003448:	4618      	mov	r0, r3
 800344a:	f00a f802 	bl	800d452 <HAL_RCCEx_PeriphCLKConfig>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003454:	f7fe fe3d 	bl	80020d2 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003458:	f7ff ff48 	bl	80032ec <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800345c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003460:	f7ff ff55 	bl	800330e <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003464:	2200      	movs	r2, #0
 8003466:	2100      	movs	r1, #0
 8003468:	2003      	movs	r0, #3
 800346a:	f005 f842 	bl	80084f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800346e:	2003      	movs	r0, #3
 8003470:	f005 f859 	bl	8008526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003474:	bf00      	nop
 8003476:	3758      	adds	r7, #88	@ 0x58
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40002800 	.word	0x40002800

08003480 <LL_AHB2_GRP1_EnableClock>:
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800348c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800348e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4313      	orrs	r3, r2
 8003496:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003498:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800349c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4013      	ands	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034a4:	68fb      	ldr	r3, [r7, #12]
}
 80034a6:	bf00      	nop
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b085      	sub	sp, #20
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80034ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80034c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80034ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4013      	ands	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034d6:	68fb      	ldr	r3, [r7, #12]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80034e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003558 <MX_SPI1_Init+0x74>)
 80034ea:	4a1c      	ldr	r2, [pc, #112]	@ (800355c <MX_SPI1_Init+0x78>)
 80034ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003558 <MX_SPI1_Init+0x74>)
 80034f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80034f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80034f6:	4b18      	ldr	r3, [pc, #96]	@ (8003558 <MX_SPI1_Init+0x74>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034fc:	4b16      	ldr	r3, [pc, #88]	@ (8003558 <MX_SPI1_Init+0x74>)
 80034fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003502:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003504:	4b14      	ldr	r3, [pc, #80]	@ (8003558 <MX_SPI1_Init+0x74>)
 8003506:	2200      	movs	r2, #0
 8003508:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800350a:	4b13      	ldr	r3, [pc, #76]	@ (8003558 <MX_SPI1_Init+0x74>)
 800350c:	2200      	movs	r2, #0
 800350e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003510:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <MX_SPI1_Init+0x74>)
 8003512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003516:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003518:	4b0f      	ldr	r3, [pc, #60]	@ (8003558 <MX_SPI1_Init+0x74>)
 800351a:	2210      	movs	r2, #16
 800351c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800351e:	4b0e      	ldr	r3, [pc, #56]	@ (8003558 <MX_SPI1_Init+0x74>)
 8003520:	2200      	movs	r2, #0
 8003522:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003524:	4b0c      	ldr	r3, [pc, #48]	@ (8003558 <MX_SPI1_Init+0x74>)
 8003526:	2200      	movs	r2, #0
 8003528:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800352a:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <MX_SPI1_Init+0x74>)
 800352c:	2200      	movs	r2, #0
 800352e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003530:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <MX_SPI1_Init+0x74>)
 8003532:	2207      	movs	r2, #7
 8003534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003536:	4b08      	ldr	r3, [pc, #32]	@ (8003558 <MX_SPI1_Init+0x74>)
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800353c:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <MX_SPI1_Init+0x74>)
 800353e:	2208      	movs	r2, #8
 8003540:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003542:	4805      	ldr	r0, [pc, #20]	@ (8003558 <MX_SPI1_Init+0x74>)
 8003544:	f00a fd8a 	bl	800e05c <HAL_SPI_Init>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800354e:	f7fe fdc0 	bl	80020d2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000c78 	.word	0x20000c78
 800355c:	40013000 	.word	0x40013000

08003560 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 030c 	add.w	r3, r7, #12
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1c      	ldr	r2, [pc, #112]	@ (80035f0 <HAL_SPI_MspInit+0x90>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d132      	bne.n	80035e8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003582:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003586:	f7ff ff94 	bl	80034b2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358a:	2001      	movs	r0, #1
 800358c:	f7ff ff78 	bl	8003480 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003590:	2002      	movs	r0, #2
 8003592:	f7ff ff75 	bl	8003480 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8003596:	2342      	movs	r3, #66	@ 0x42
 8003598:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	2302      	movs	r3, #2
 800359c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035a6:	2305      	movs	r3, #5
 80035a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035aa:	f107 030c 	add.w	r3, r7, #12
 80035ae:	4619      	mov	r1, r3
 80035b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035b4:	f005 fb10 	bl	8008bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80035b8:	2320      	movs	r3, #32
 80035ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035bc:	2302      	movs	r3, #2
 80035be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035c8:	2305      	movs	r3, #5
 80035ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035cc:	f107 030c 	add.w	r3, r7, #12
 80035d0:	4619      	mov	r1, r3
 80035d2:	4808      	ldr	r0, [pc, #32]	@ (80035f4 <HAL_SPI_MspInit+0x94>)
 80035d4:	f005 fb00 	bl	8008bd8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 80035d8:	2200      	movs	r2, #0
 80035da:	2103      	movs	r1, #3
 80035dc:	2022      	movs	r0, #34	@ 0x22
 80035de:	f004 ff88 	bl	80084f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80035e2:	2022      	movs	r0, #34	@ 0x22
 80035e4:	f004 ff9f 	bl	8008526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80035e8:	bf00      	nop
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40013000 	.word	0x40013000
 80035f4:	48000400 	.word	0x48000400

080035f8 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2,double baroalt){
 80035f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035fc:	ed2d 8b02 	vpush	{d8}
 8003600:	b0ab      	sub	sp, #172	@ 0xac
 8003602:	af18      	add	r7, sp, #96	@ 0x60
 8003604:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8003606:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
 800360a:	edc7 0a0d 	vstr	s1, [r7, #52]	@ 0x34
 800360e:	6339      	str	r1, [r7, #48]	@ 0x30
 8003610:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003612:	ed87 1a0a 	vstr	s2, [r7, #40]	@ 0x28
 8003616:	ed87 2b08 	vstr	d2, [r7, #32]
	int framesize=0;
 800361a:	2300      	movs	r3, #0
 800361c:	647b      	str	r3, [r7, #68]	@ 0x44
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%0.2lf,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,baroalt,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 800361e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003620:	f7fc ff6a 	bl	80004f8 <__aeabi_f2d>
 8003624:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003628:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800362a:	f7fc ff65 	bl	80004f8 <__aeabi_f2d>
 800362e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003636:	4618      	mov	r0, r3
 8003638:	f7fc ff5e 	bl	80004f8 <__aeabi_f2d>
 800363c:	a333      	add	r3, pc, #204	@ (adr r3, 800370c <csvframe+0x114>)
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	f7fc ffb1 	bl	80005a8 <__aeabi_dmul>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	ec43 2b18 	vmov	d8, r2, r3
 800364e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003650:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 800365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fc ff4a 	bl	80004f8 <__aeabi_f2d>
 8003664:	4682      	mov	sl, r0
 8003666:	468b      	mov	fp, r1
 8003668:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800366a:	f7fc ff45 	bl	80004f8 <__aeabi_f2d>
 800366e:	4b20      	ldr	r3, [pc, #128]	@ (80036f0 <csvframe+0xf8>)
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	4b1f      	ldr	r3, [pc, #124]	@ (80036f4 <csvframe+0xfc>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	4b1f      	ldr	r3, [pc, #124]	@ (80036f8 <csvframe+0x100>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	4b1e      	ldr	r3, [pc, #120]	@ (80036fc <csvframe+0x104>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	461e      	mov	r6, r3
 8003686:	4b1e      	ldr	r3, [pc, #120]	@ (8003700 <csvframe+0x108>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	4b1d      	ldr	r3, [pc, #116]	@ (8003704 <csvframe+0x10c>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	9317      	str	r3, [sp, #92]	@ 0x5c
 8003692:	9216      	str	r2, [sp, #88]	@ 0x58
 8003694:	9615      	str	r6, [sp, #84]	@ 0x54
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	9214      	str	r2, [sp, #80]	@ 0x50
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	9213      	str	r2, [sp, #76]	@ 0x4c
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80036a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036a6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80036aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80036ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80036b2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 80036b6:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80036ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80036be:	ed8d 8b04 	vstr	d8, [sp, #16]
 80036c2:	ed97 7b04 	vldr	d7, [r7, #16]
 80036c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80036ca:	ed97 7b06 	vldr	d7, [r7, #24]
 80036ce:	ed8d 7b00 	vstr	d7, [sp]
 80036d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003708 <csvframe+0x110>)
 80036d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80036da:	f014 fd93 	bl	8018204 <sniprintf>
 80036de:	6478      	str	r0, [r7, #68]	@ 0x44
	return framesize;
 80036e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	374c      	adds	r7, #76	@ 0x4c
 80036e6:	46bd      	mov	sp, r7
 80036e8:	ecbd 8b02 	vpop	{d8}
 80036ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036f0:	20000012 	.word	0x20000012
 80036f4:	20000011 	.word	0x20000011
 80036f8:	20000010 	.word	0x20000010
 80036fc:	20000a85 	.word	0x20000a85
 8003700:	20000a86 	.word	0x20000a86
 8003704:	20000a84 	.word	0x20000a84
 8003708:	0801ccc8 	.word	0x0801ccc8
 800370c:	cccccccd 	.word	0xcccccccd
 8003710:	400ccccc 	.word	0x400ccccc

08003714 <storeindex>:


void storeindex(void){
 8003714:	b580      	push	{r7, lr}
 8003716:	b09c      	sub	sp, #112	@ 0x70
 8003718:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 800371a:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 800371e:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8003720:	463b      	mov	r3, r7
 8003722:	2264      	movs	r2, #100	@ 0x64
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f014 fe07 	bl	801833a <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 800372c:	4b14      	ldr	r3, [pc, #80]	@ (8003780 <storeindex+0x6c>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	4b14      	ldr	r3, [pc, #80]	@ (8003784 <storeindex+0x70>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4638      	mov	r0, r7
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	4a13      	ldr	r2, [pc, #76]	@ (8003788 <storeindex+0x74>)
 800373c:	2164      	movs	r1, #100	@ 0x64
 800373e:	f014 fd61 	bl	8018204 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8003742:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003744:	2b00      	cmp	r3, #0
 8003746:	da00      	bge.n	800374a <storeindex+0x36>
 8003748:	330f      	adds	r3, #15
 800374a:	111b      	asrs	r3, r3, #4
 800374c:	4618      	mov	r0, r3
 800374e:	f7fc fec1 	bl	80004d4 <__aeabi_i2d>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4610      	mov	r0, r2
 8003758:	4619      	mov	r1, r3
 800375a:	f7fd f9d5 	bl	8000b08 <__aeabi_d2iz>
 800375e:	4603      	mov	r3, r0
 8003760:	4619      	mov	r1, r3
 8003762:	480a      	ldr	r0, [pc, #40]	@ (800378c <storeindex+0x78>)
 8003764:	f012 f855 	bl	8015812 <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8003768:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800376a:	463a      	mov	r2, r7
 800376c:	2300      	movs	r3, #0
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2364      	movs	r3, #100	@ 0x64
 8003772:	4806      	ldr	r0, [pc, #24]	@ (800378c <storeindex+0x78>)
 8003774:	f012 f8d0 	bl	8015918 <SPIF_WritePage>

}
 8003778:	bf00      	nop
 800377a:	3768      	adds	r7, #104	@ 0x68
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	200009a4 	.word	0x200009a4
 8003784:	200009a8 	.word	0x200009a8
 8003788:	0801cd24 	.word	0x0801cd24
 800378c:	20000770 	.word	0x20000770

08003790 <getindex>:

void getindex(void){
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8003796:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 800379a:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	2300      	movs	r3, #0
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	2332      	movs	r3, #50	@ 0x32
 80037a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003854 <getindex+0xc4>)
 80037a6:	482c      	ldr	r0, [pc, #176]	@ (8003858 <getindex+0xc8>)
 80037a8:	f012 f8d4 	bl	8015954 <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 80037ac:	220a      	movs	r2, #10
 80037ae:	2124      	movs	r1, #36	@ 0x24
 80037b0:	482a      	ldr	r0, [pc, #168]	@ (800385c <getindex+0xcc>)
 80037b2:	f014 fdc2 	bl	801833a <memset>
	memset(numbuf2,'$',10);
 80037b6:	220a      	movs	r2, #10
 80037b8:	2124      	movs	r1, #36	@ 0x24
 80037ba:	4829      	ldr	r0, [pc, #164]	@ (8003860 <getindex+0xd0>)
 80037bc:	f014 fdbd 	bl	801833a <memset>
	int cnt=0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 80037c4:	4b23      	ldr	r3, [pc, #140]	@ (8003854 <getindex+0xc4>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	2b09      	cmp	r3, #9
 80037ce:	dc3a      	bgt.n	8003846 <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 80037d0:	e00b      	b.n	80037ea <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 80037d2:	4a20      	ldr	r2, [pc, #128]	@ (8003854 <getindex+0xc4>)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	7819      	ldrb	r1, [r3, #0]
 80037da:	4a20      	ldr	r2, [pc, #128]	@ (800385c <getindex+0xcc>)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	460a      	mov	r2, r1
 80037e2:	701a      	strb	r2, [r3, #0]
			  cnt++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3301      	adds	r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 80037ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003854 <getindex+0xc4>)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b24      	cmp	r3, #36	@ 0x24
 80037f4:	d1ed      	bne.n	80037d2 <getindex+0x42>
		  }
		  cnt++;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3301      	adds	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8003800:	e00e      	b.n	8003820 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8003802:	4a14      	ldr	r2, [pc, #80]	@ (8003854 <getindex+0xc4>)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4413      	add	r3, r2
 8003808:	7819      	ldrb	r1, [r3, #0]
 800380a:	4a15      	ldr	r2, [pc, #84]	@ (8003860 <getindex+0xd0>)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4413      	add	r3, r2
 8003810:	460a      	mov	r2, r1
 8003812:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	3301      	adds	r3, #1
 8003818:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	3301      	adds	r3, #1
 800381e:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8003820:	4a0c      	ldr	r2, [pc, #48]	@ (8003854 <getindex+0xc4>)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4413      	add	r3, r2
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b24      	cmp	r3, #36	@ 0x24
 800382a:	d1ea      	bne.n	8003802 <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 800382c:	480b      	ldr	r0, [pc, #44]	@ (800385c <getindex+0xcc>)
 800382e:	f012 fe0d 	bl	801644c <atoi>
 8003832:	4603      	mov	r3, r0
 8003834:	4a0b      	ldr	r2, [pc, #44]	@ (8003864 <getindex+0xd4>)
 8003836:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8003838:	4809      	ldr	r0, [pc, #36]	@ (8003860 <getindex+0xd0>)
 800383a:	f012 fe07 	bl	801644c <atoi>
 800383e:	4603      	mov	r3, r0
 8003840:	4a09      	ldr	r2, [pc, #36]	@ (8003868 <getindex+0xd8>)
 8003842:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8003844:	e001      	b.n	800384a <getindex+0xba>
		storeindex();
 8003846:	f7ff ff65 	bl	8003714 <storeindex>
}
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000c44 	.word	0x20000c44
 8003858:	20000770 	.word	0x20000770
 800385c:	200009b0 	.word	0x200009b0
 8003860:	200009bc 	.word	0x200009bc
 8003864:	200009a4 	.word	0x200009a4
 8003868:	200009a8 	.word	0x200009a8

0800386c <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af02      	add	r7, sp, #8
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8003876:	4b3f      	ldr	r3, [pc, #252]	@ (8003974 <writebuffertoflash+0x108>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3301      	adds	r3, #1
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	2b00      	cmp	r3, #0
 8003882:	d11b      	bne.n	80038bc <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8003884:	4b3c      	ldr	r3, [pc, #240]	@ (8003978 <writebuffertoflash+0x10c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d117      	bne.n	80038bc <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 800388c:	4b39      	ldr	r3, [pc, #228]	@ (8003974 <writebuffertoflash+0x108>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3301      	adds	r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	da00      	bge.n	8003898 <writebuffertoflash+0x2c>
 8003896:	330f      	adds	r3, #15
 8003898:	111b      	asrs	r3, r3, #4
 800389a:	4618      	mov	r0, r3
 800389c:	f7fc fe1a 	bl	80004d4 <__aeabi_i2d>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4610      	mov	r0, r2
 80038a6:	4619      	mov	r1, r3
 80038a8:	f7fd f92e 	bl	8000b08 <__aeabi_d2iz>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4619      	mov	r1, r3
 80038b0:	4832      	ldr	r0, [pc, #200]	@ (800397c <writebuffertoflash+0x110>)
 80038b2:	f011 ffae 	bl	8015812 <SPIF_EraseSector>
		sectoreraseen=1;
 80038b6:	4b30      	ldr	r3, [pc, #192]	@ (8003978 <writebuffertoflash+0x10c>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 80038bc:	4b30      	ldr	r3, [pc, #192]	@ (8003980 <writebuffertoflash+0x114>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4413      	add	r3, r2
 80038c4:	2bff      	cmp	r3, #255	@ 0xff
 80038c6:	dc11      	bgt.n	80038ec <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 80038c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003974 <writebuffertoflash+0x108>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4619      	mov	r1, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003980 <writebuffertoflash+0x114>)
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	9200      	str	r2, [sp, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4828      	ldr	r0, [pc, #160]	@ (800397c <writebuffertoflash+0x110>)
 80038da:	f012 f81d 	bl	8015918 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 80038de:	4b28      	ldr	r3, [pc, #160]	@ (8003980 <writebuffertoflash+0x114>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	4413      	add	r3, r2
 80038e6:	4a26      	ldr	r2, [pc, #152]	@ (8003980 <writebuffertoflash+0x114>)
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e03c      	b.n	8003966 <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 80038ec:	4b21      	ldr	r3, [pc, #132]	@ (8003974 <writebuffertoflash+0x108>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4619      	mov	r1, r3
 80038f2:	4b23      	ldr	r3, [pc, #140]	@ (8003980 <writebuffertoflash+0x114>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80038fa:	461a      	mov	r2, r3
 80038fc:	4b20      	ldr	r3, [pc, #128]	@ (8003980 <writebuffertoflash+0x114>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	4613      	mov	r3, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	481d      	ldr	r0, [pc, #116]	@ (800397c <writebuffertoflash+0x110>)
 8003908:	f012 f806 	bl	8015918 <SPIF_WritePage>
		HAL_Delay(100);
 800390c:	2064      	movs	r0, #100	@ 0x64
 800390e:	f003 fc71 	bl	80071f4 <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8003912:	4b18      	ldr	r3, [pc, #96]	@ (8003974 <writebuffertoflash+0x108>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3301      	adds	r3, #1
 8003918:	4618      	mov	r0, r3
 800391a:	4b19      	ldr	r3, [pc, #100]	@ (8003980 <writebuffertoflash+0x114>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003922:	461a      	mov	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	1899      	adds	r1, r3, r2
 8003928:	4b15      	ldr	r3, [pc, #84]	@ (8003980 <writebuffertoflash+0x114>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	461a      	mov	r2, r3
 8003936:	2300      	movs	r3, #0
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	4613      	mov	r3, r2
 800393c:	460a      	mov	r2, r1
 800393e:	4601      	mov	r1, r0
 8003940:	480e      	ldr	r0, [pc, #56]	@ (800397c <writebuffertoflash+0x110>)
 8003942:	f011 ffe9 	bl	8015918 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8003946:	4b0b      	ldr	r3, [pc, #44]	@ (8003974 <writebuffertoflash+0x108>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3301      	adds	r3, #1
 800394c:	4a09      	ldr	r2, [pc, #36]	@ (8003974 <writebuffertoflash+0x108>)
 800394e:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8003950:	4b09      	ldr	r3, [pc, #36]	@ (8003978 <writebuffertoflash+0x10c>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8003956:	4b0a      	ldr	r3, [pc, #40]	@ (8003980 <writebuffertoflash+0x114>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	4a07      	ldr	r2, [pc, #28]	@ (8003980 <writebuffertoflash+0x114>)
 8003964:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8003966:	f7ff fed5 	bl	8003714 <storeindex>

}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	200009a8 	.word	0x200009a8
 8003978:	200009ac 	.word	0x200009ac
 800397c:	20000770 	.word	0x20000770
 8003980:	200009a4 	.word	0x200009a4

08003984 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003988:	bf00      	nop
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af04      	add	r7, sp, #16
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800399e:	f04f 33ff 	mov.w	r3, #4294967295
 80039a2:	9302      	str	r3, [sp, #8]
 80039a4:	2301      	movs	r3, #1
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	1dfb      	adds	r3, r7, #7
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2301      	movs	r3, #1
 80039ae:	2200      	movs	r2, #0
 80039b0:	2178      	movs	r1, #120	@ 0x78
 80039b2:	4803      	ldr	r0, [pc, #12]	@ (80039c0 <ssd1306_WriteCommand+0x2c>)
 80039b4:	f005 fdb0 	bl	8009518 <HAL_I2C_Mem_Write>
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000448 	.word	0x20000448

080039c4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af04      	add	r7, sp, #16
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	f04f 32ff 	mov.w	r2, #4294967295
 80039d6:	9202      	str	r2, [sp, #8]
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	2301      	movs	r3, #1
 80039e0:	2240      	movs	r2, #64	@ 0x40
 80039e2:	2178      	movs	r1, #120	@ 0x78
 80039e4:	4803      	ldr	r0, [pc, #12]	@ (80039f4 <ssd1306_WriteData+0x30>)
 80039e6:	f005 fd97 	bl	8009518 <HAL_I2C_Mem_Write>
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000448 	.word	0x20000448

080039f8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80039fc:	f7ff ffc2 	bl	8003984 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003a00:	2064      	movs	r0, #100	@ 0x64
 8003a02:	f003 fbf7 	bl	80071f4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003a06:	2000      	movs	r0, #0
 8003a08:	f000 fb1a 	bl	8004040 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003a0c:	2020      	movs	r0, #32
 8003a0e:	f7ff ffc1 	bl	8003994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003a12:	2000      	movs	r0, #0
 8003a14:	f7ff ffbe 	bl	8003994 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003a18:	20b0      	movs	r0, #176	@ 0xb0
 8003a1a:	f7ff ffbb 	bl	8003994 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003a1e:	20c8      	movs	r0, #200	@ 0xc8
 8003a20:	f7ff ffb8 	bl	8003994 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003a24:	2000      	movs	r0, #0
 8003a26:	f7ff ffb5 	bl	8003994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003a2a:	2010      	movs	r0, #16
 8003a2c:	f7ff ffb2 	bl	8003994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003a30:	2040      	movs	r0, #64	@ 0x40
 8003a32:	f7ff ffaf 	bl	8003994 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003a36:	20ff      	movs	r0, #255	@ 0xff
 8003a38:	f000 faee 	bl	8004018 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003a3c:	20a1      	movs	r0, #161	@ 0xa1
 8003a3e:	f7ff ffa9 	bl	8003994 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003a42:	20a6      	movs	r0, #166	@ 0xa6
 8003a44:	f7ff ffa6 	bl	8003994 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003a48:	20a8      	movs	r0, #168	@ 0xa8
 8003a4a:	f7ff ffa3 	bl	8003994 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003a4e:	203f      	movs	r0, #63	@ 0x3f
 8003a50:	f7ff ffa0 	bl	8003994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003a54:	20a4      	movs	r0, #164	@ 0xa4
 8003a56:	f7ff ff9d 	bl	8003994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003a5a:	20d3      	movs	r0, #211	@ 0xd3
 8003a5c:	f7ff ff9a 	bl	8003994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003a60:	2000      	movs	r0, #0
 8003a62:	f7ff ff97 	bl	8003994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003a66:	20d5      	movs	r0, #213	@ 0xd5
 8003a68:	f7ff ff94 	bl	8003994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003a6c:	20f0      	movs	r0, #240	@ 0xf0
 8003a6e:	f7ff ff91 	bl	8003994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003a72:	20d9      	movs	r0, #217	@ 0xd9
 8003a74:	f7ff ff8e 	bl	8003994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003a78:	2022      	movs	r0, #34	@ 0x22
 8003a7a:	f7ff ff8b 	bl	8003994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003a7e:	20da      	movs	r0, #218	@ 0xda
 8003a80:	f7ff ff88 	bl	8003994 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003a84:	2012      	movs	r0, #18
 8003a86:	f7ff ff85 	bl	8003994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003a8a:	20db      	movs	r0, #219	@ 0xdb
 8003a8c:	f7ff ff82 	bl	8003994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003a90:	2020      	movs	r0, #32
 8003a92:	f7ff ff7f 	bl	8003994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003a96:	208d      	movs	r0, #141	@ 0x8d
 8003a98:	f7ff ff7c 	bl	8003994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003a9c:	2014      	movs	r0, #20
 8003a9e:	f7ff ff79 	bl	8003994 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	f000 facc 	bl	8004040 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	f000 f80f 	bl	8003acc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003aae:	f000 f825 	bl	8003afc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003ab2:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <ssd1306_Init+0xd0>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003ab8:	4b03      	ldr	r3, [pc, #12]	@ (8003ac8 <ssd1306_Init+0xd0>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003abe:	4b02      	ldr	r3, [pc, #8]	@ (8003ac8 <ssd1306_Init+0xd0>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	711a      	strb	r2, [r3, #4]
}
 8003ac4:	bf00      	nop
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	200010dc 	.word	0x200010dc

08003acc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <ssd1306_Fill+0x14>
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <ssd1306_Fill+0x16>
 8003ae0:	23ff      	movs	r3, #255	@ 0xff
 8003ae2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4803      	ldr	r0, [pc, #12]	@ (8003af8 <ssd1306_Fill+0x2c>)
 8003aea:	f014 fc26 	bl	801833a <memset>
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000cdc 	.word	0x20000cdc

08003afc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003b02:	2300      	movs	r3, #0
 8003b04:	71fb      	strb	r3, [r7, #7]
 8003b06:	e016      	b.n	8003b36 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	3b50      	subs	r3, #80	@ 0x50
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff ff40 	bl	8003994 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003b14:	2000      	movs	r0, #0
 8003b16:	f7ff ff3d 	bl	8003994 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003b1a:	2010      	movs	r0, #16
 8003b1c:	f7ff ff3a 	bl	8003994 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	01db      	lsls	r3, r3, #7
 8003b24:	4a08      	ldr	r2, [pc, #32]	@ (8003b48 <ssd1306_UpdateScreen+0x4c>)
 8003b26:	4413      	add	r3, r2
 8003b28:	2180      	movs	r1, #128	@ 0x80
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ff4a 	bl	80039c4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	3301      	adds	r3, #1
 8003b34:	71fb      	strb	r3, [r7, #7]
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	2b07      	cmp	r3, #7
 8003b3a:	d9e5      	bls.n	8003b08 <ssd1306_UpdateScreen+0xc>
    }
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000cdc 	.word	0x20000cdc

08003b4c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
 8003b56:	460b      	mov	r3, r1
 8003b58:	71bb      	strb	r3, [r7, #6]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	db3d      	blt.n	8003be2 <ssd1306_DrawPixel+0x96>
 8003b66:	79bb      	ldrb	r3, [r7, #6]
 8003b68:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b6a:	d83a      	bhi.n	8003be2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003b6c:	797b      	ldrb	r3, [r7, #5]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d11a      	bne.n	8003ba8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003b72:	79fa      	ldrb	r2, [r7, #7]
 8003b74:	79bb      	ldrb	r3, [r7, #6]
 8003b76:	08db      	lsrs	r3, r3, #3
 8003b78:	b2d8      	uxtb	r0, r3
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	01db      	lsls	r3, r3, #7
 8003b7e:	4413      	add	r3, r2
 8003b80:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf0 <ssd1306_DrawPixel+0xa4>)
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	b25a      	sxtb	r2, r3
 8003b86:	79bb      	ldrb	r3, [r7, #6]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b92:	b25b      	sxtb	r3, r3
 8003b94:	4313      	orrs	r3, r2
 8003b96:	b259      	sxtb	r1, r3
 8003b98:	79fa      	ldrb	r2, [r7, #7]
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	01db      	lsls	r3, r3, #7
 8003b9e:	4413      	add	r3, r2
 8003ba0:	b2c9      	uxtb	r1, r1
 8003ba2:	4a13      	ldr	r2, [pc, #76]	@ (8003bf0 <ssd1306_DrawPixel+0xa4>)
 8003ba4:	54d1      	strb	r1, [r2, r3]
 8003ba6:	e01d      	b.n	8003be4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003ba8:	79fa      	ldrb	r2, [r7, #7]
 8003baa:	79bb      	ldrb	r3, [r7, #6]
 8003bac:	08db      	lsrs	r3, r3, #3
 8003bae:	b2d8      	uxtb	r0, r3
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	01db      	lsls	r3, r3, #7
 8003bb4:	4413      	add	r3, r2
 8003bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8003bf0 <ssd1306_DrawPixel+0xa4>)
 8003bb8:	5cd3      	ldrb	r3, [r2, r3]
 8003bba:	b25a      	sxtb	r2, r3
 8003bbc:	79bb      	ldrb	r3, [r7, #6]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	b25b      	sxtb	r3, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	b25b      	sxtb	r3, r3
 8003bce:	4013      	ands	r3, r2
 8003bd0:	b259      	sxtb	r1, r3
 8003bd2:	79fa      	ldrb	r2, [r7, #7]
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	01db      	lsls	r3, r3, #7
 8003bd8:	4413      	add	r3, r2
 8003bda:	b2c9      	uxtb	r1, r1
 8003bdc:	4a04      	ldr	r2, [pc, #16]	@ (8003bf0 <ssd1306_DrawPixel+0xa4>)
 8003bde:	54d1      	strb	r1, [r2, r3]
 8003be0:	e000      	b.n	8003be4 <ssd1306_DrawPixel+0x98>
        return;
 8003be2:	bf00      	nop
    }
}
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000cdc 	.word	0x20000cdc

08003bf4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b089      	sub	sp, #36	@ 0x24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	1d38      	adds	r0, r7, #4
 8003bfe:	e880 0006 	stmia.w	r0, {r1, r2}
 8003c02:	461a      	mov	r2, r3
 8003c04:	4623      	mov	r3, r4
 8003c06:	73fb      	strb	r3, [r7, #15]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b1f      	cmp	r3, #31
 8003c10:	d902      	bls.n	8003c18 <ssd1306_WriteChar+0x24>
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b7e      	cmp	r3, #126	@ 0x7e
 8003c16:	d901      	bls.n	8003c1c <ssd1306_WriteChar+0x28>
        return 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e06c      	b.n	8003cf6 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003c1c:	4b38      	ldr	r3, [pc, #224]	@ (8003d00 <ssd1306_WriteChar+0x10c>)
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	793b      	ldrb	r3, [r7, #4]
 8003c24:	4413      	add	r3, r2
 8003c26:	2b80      	cmp	r3, #128	@ 0x80
 8003c28:	dc06      	bgt.n	8003c38 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003c2a:	4b35      	ldr	r3, [pc, #212]	@ (8003d00 <ssd1306_WriteChar+0x10c>)
 8003c2c:	885b      	ldrh	r3, [r3, #2]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	797b      	ldrb	r3, [r7, #5]
 8003c32:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003c34:	2b40      	cmp	r3, #64	@ 0x40
 8003c36:	dd01      	ble.n	8003c3c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e05c      	b.n	8003cf6 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	e04c      	b.n	8003cdc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	3b20      	subs	r3, #32
 8003c48:	7979      	ldrb	r1, [r7, #5]
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	4619      	mov	r1, r3
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	440b      	add	r3, r1
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	4413      	add	r3, r2
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	e034      	b.n	8003ccc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d012      	beq.n	8003c98 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003c72:	4b23      	ldr	r3, [pc, #140]	@ (8003d00 <ssd1306_WriteChar+0x10c>)
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	b2d8      	uxtb	r0, r3
 8003c80:	4b1f      	ldr	r3, [pc, #124]	@ (8003d00 <ssd1306_WriteChar+0x10c>)
 8003c82:	885b      	ldrh	r3, [r3, #2]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	7bba      	ldrb	r2, [r7, #14]
 8003c90:	4619      	mov	r1, r3
 8003c92:	f7ff ff5b 	bl	8003b4c <ssd1306_DrawPixel>
 8003c96:	e016      	b.n	8003cc6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003c98:	4b19      	ldr	r3, [pc, #100]	@ (8003d00 <ssd1306_WriteChar+0x10c>)
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	b2d8      	uxtb	r0, r3
 8003ca6:	4b16      	ldr	r3, [pc, #88]	@ (8003d00 <ssd1306_WriteChar+0x10c>)
 8003ca8:	885b      	ldrh	r3, [r3, #2]
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	b2d9      	uxtb	r1, r3
 8003cb4:	7bbb      	ldrb	r3, [r7, #14]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bf0c      	ite	eq
 8003cba:	2301      	moveq	r3, #1
 8003cbc:	2300      	movne	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f7ff ff43 	bl	8003b4c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	793b      	ldrb	r3, [r7, #4]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d3c5      	bcc.n	8003c62 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
 8003cdc:	797b      	ldrb	r3, [r7, #5]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d3ad      	bcc.n	8003c42 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003ce6:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <ssd1306_WriteChar+0x10c>)
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	793a      	ldrb	r2, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	4b03      	ldr	r3, [pc, #12]	@ (8003d00 <ssd1306_WriteChar+0x10c>)
 8003cf2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3724      	adds	r7, #36	@ 0x24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd90      	pop	{r4, r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	200010dc 	.word	0x200010dc

08003d04 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	1d38      	adds	r0, r7, #4
 8003d0e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003d12:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003d14:	e012      	b.n	8003d3c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	7818      	ldrb	r0, [r3, #0]
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	1d3a      	adds	r2, r7, #4
 8003d1e:	ca06      	ldmia	r2, {r1, r2}
 8003d20:	f7ff ff68 	bl	8003bf4 <ssd1306_WriteChar>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d002      	beq.n	8003d36 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	e008      	b.n	8003d48 <ssd1306_WriteString+0x44>
        }
        str++;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e8      	bne.n	8003d16 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	781b      	ldrb	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	460a      	mov	r2, r1
 8003d5a:	71fb      	strb	r3, [r7, #7]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <ssd1306_SetCursor+0x2c>)
 8003d66:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003d68:	79bb      	ldrb	r3, [r7, #6]
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	4b03      	ldr	r3, [pc, #12]	@ (8003d7c <ssd1306_SetCursor+0x2c>)
 8003d6e:	805a      	strh	r2, [r3, #2]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	200010dc 	.word	0x200010dc

08003d80 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b089      	sub	sp, #36	@ 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4604      	mov	r4, r0
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	71fb      	strb	r3, [r7, #7]
 8003d92:	4603      	mov	r3, r0
 8003d94:	71bb      	strb	r3, [r7, #6]
 8003d96:	460b      	mov	r3, r1
 8003d98:	717b      	strb	r3, [r7, #5]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8003d9e:	797a      	ldrb	r2, [r7, #5]
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bfb8      	it	lt
 8003da8:	425b      	neglt	r3, r3
 8003daa:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8003dac:	793a      	ldrb	r2, [r7, #4]
 8003dae:	79bb      	ldrb	r3, [r7, #6]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	bfb8      	it	lt
 8003db6:	425b      	neglt	r3, r3
 8003db8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8003dba:	79fa      	ldrb	r2, [r7, #7]
 8003dbc:	797b      	ldrb	r3, [r7, #5]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d201      	bcs.n	8003dc6 <ssd1306_Line+0x46>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e001      	b.n	8003dca <ssd1306_Line+0x4a>
 8003dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dca:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8003dcc:	79ba      	ldrb	r2, [r7, #6]
 8003dce:	793b      	ldrb	r3, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d201      	bcs.n	8003dd8 <ssd1306_Line+0x58>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e001      	b.n	8003ddc <ssd1306_Line+0x5c>
 8003dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ddc:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8003de6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003dea:	7939      	ldrb	r1, [r7, #4]
 8003dec:	797b      	ldrb	r3, [r7, #5]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff feac 	bl	8003b4c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8003df4:	e024      	b.n	8003e40 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8003df6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003dfa:	79b9      	ldrb	r1, [r7, #6]
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fea4 	bl	8003b4c <ssd1306_DrawPixel>
        error2 = error * 2;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	425b      	negs	r3, r3
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	dd08      	ble.n	8003e26 <ssd1306_Line+0xa6>
            error -= deltaY;
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	4413      	add	r3, r2
 8003e24:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	da08      	bge.n	8003e40 <ssd1306_Line+0xc0>
            error += deltaX;
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	4413      	add	r3, r2
 8003e34:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	79bb      	ldrb	r3, [r7, #6]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8003e40:	79fa      	ldrb	r2, [r7, #7]
 8003e42:	797b      	ldrb	r3, [r7, #5]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d1d6      	bne.n	8003df6 <ssd1306_Line+0x76>
 8003e48:	79ba      	ldrb	r2, [r7, #6]
 8003e4a:	793b      	ldrb	r3, [r7, #4]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d1d2      	bne.n	8003df6 <ssd1306_Line+0x76>
        }
    }
    return;
 8003e50:	bf00      	nop
}
 8003e52:	3724      	adds	r7, #36	@ 0x24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd90      	pop	{r4, r7, pc}

08003e58 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	4604      	mov	r4, r0
 8003e60:	4608      	mov	r0, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	461a      	mov	r2, r3
 8003e66:	4623      	mov	r3, r4
 8003e68:	71fb      	strb	r3, [r7, #7]
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	71bb      	strb	r3, [r7, #6]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	717b      	strb	r3, [r7, #5]
 8003e72:	4613      	mov	r3, r2
 8003e74:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8003e76:	79bc      	ldrb	r4, [r7, #6]
 8003e78:	797a      	ldrb	r2, [r7, #5]
 8003e7a:	79b9      	ldrb	r1, [r7, #6]
 8003e7c:	79f8      	ldrb	r0, [r7, #7]
 8003e7e:	7e3b      	ldrb	r3, [r7, #24]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	4623      	mov	r3, r4
 8003e84:	f7ff ff7c 	bl	8003d80 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003e88:	793c      	ldrb	r4, [r7, #4]
 8003e8a:	797a      	ldrb	r2, [r7, #5]
 8003e8c:	79b9      	ldrb	r1, [r7, #6]
 8003e8e:	7978      	ldrb	r0, [r7, #5]
 8003e90:	7e3b      	ldrb	r3, [r7, #24]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	4623      	mov	r3, r4
 8003e96:	f7ff ff73 	bl	8003d80 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8003e9a:	793c      	ldrb	r4, [r7, #4]
 8003e9c:	79fa      	ldrb	r2, [r7, #7]
 8003e9e:	7939      	ldrb	r1, [r7, #4]
 8003ea0:	7978      	ldrb	r0, [r7, #5]
 8003ea2:	7e3b      	ldrb	r3, [r7, #24]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	f7ff ff6a 	bl	8003d80 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8003eac:	79bc      	ldrb	r4, [r7, #6]
 8003eae:	79fa      	ldrb	r2, [r7, #7]
 8003eb0:	7939      	ldrb	r1, [r7, #4]
 8003eb2:	79f8      	ldrb	r0, [r7, #7]
 8003eb4:	7e3b      	ldrb	r3, [r7, #24]
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	4623      	mov	r3, r4
 8003eba:	f7ff ff61 	bl	8003d80 <ssd1306_Line>

    return;
 8003ebe:	bf00      	nop
}
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd90      	pop	{r4, r7, pc}

08003ec6 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003ec6:	b590      	push	{r4, r7, lr}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	4604      	mov	r4, r0
 8003ece:	4608      	mov	r0, r1
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4623      	mov	r3, r4
 8003ed6:	71fb      	strb	r3, [r7, #7]
 8003ed8:	4603      	mov	r3, r0
 8003eda:	71bb      	strb	r3, [r7, #6]
 8003edc:	460b      	mov	r3, r1
 8003ede:	717b      	strb	r3, [r7, #5]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8003ee4:	79fa      	ldrb	r2, [r7, #7]
 8003ee6:	797b      	ldrb	r3, [r7, #5]
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	bf28      	it	cs
 8003eec:	4613      	movcs	r3, r2
 8003eee:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8003ef0:	797a      	ldrb	r2, [r7, #5]
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	bf38      	it	cc
 8003ef8:	4613      	movcc	r3, r2
 8003efa:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8003efc:	79ba      	ldrb	r2, [r7, #6]
 8003efe:	793b      	ldrb	r3, [r7, #4]
 8003f00:	4293      	cmp	r3, r2
 8003f02:	bf28      	it	cs
 8003f04:	4613      	movcs	r3, r2
 8003f06:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8003f08:	793a      	ldrb	r2, [r7, #4]
 8003f0a:	79bb      	ldrb	r3, [r7, #6]
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	bf38      	it	cc
 8003f10:	4613      	movcc	r3, r2
 8003f12:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8003f14:	7afb      	ldrb	r3, [r7, #11]
 8003f16:	73fb      	strb	r3, [r7, #15]
 8003f18:	e017      	b.n	8003f4a <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8003f1a:	7b7b      	ldrb	r3, [r7, #13]
 8003f1c:	73bb      	strb	r3, [r7, #14]
 8003f1e:	e009      	b.n	8003f34 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8003f20:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003f24:	7bf9      	ldrb	r1, [r7, #15]
 8003f26:	7bbb      	ldrb	r3, [r7, #14]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fe0f 	bl	8003b4c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8003f2e:	7bbb      	ldrb	r3, [r7, #14]
 8003f30:	3301      	adds	r3, #1
 8003f32:	73bb      	strb	r3, [r7, #14]
 8003f34:	7bba      	ldrb	r2, [r7, #14]
 8003f36:	7b3b      	ldrb	r3, [r7, #12]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d803      	bhi.n	8003f44 <ssd1306_FillRectangle+0x7e>
 8003f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	daed      	bge.n	8003f20 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	3301      	adds	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	7abb      	ldrb	r3, [r7, #10]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d803      	bhi.n	8003f5a <ssd1306_FillRectangle+0x94>
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f56:	d9e0      	bls.n	8003f1a <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
}
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd90      	pop	{r4, r7, pc}

08003f62 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	603a      	str	r2, [r7, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	71fb      	strb	r3, [r7, #7]
 8003f70:	460b      	mov	r3, r1
 8003f72:	71bb      	strb	r3, [r7, #6]
 8003f74:	4613      	mov	r3, r2
 8003f76:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003f78:	797b      	ldrb	r3, [r7, #5]
 8003f7a:	3307      	adds	r3, #7
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	da00      	bge.n	8003f82 <ssd1306_DrawBitmap+0x20>
 8003f80:	3307      	adds	r3, #7
 8003f82:	10db      	asrs	r3, r3, #3
 8003f84:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	db3e      	blt.n	8004010 <ssd1306_DrawBitmap+0xae>
 8003f92:	79bb      	ldrb	r3, [r7, #6]
 8003f94:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f96:	d83b      	bhi.n	8004010 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73bb      	strb	r3, [r7, #14]
 8003f9c:	e033      	b.n	8004006 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	737b      	strb	r3, [r7, #13]
 8003fa2:	e026      	b.n	8003ff2 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8003fa4:	7b7b      	ldrb	r3, [r7, #13]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
 8003fb4:	e00d      	b.n	8003fd2 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003fb6:	7bbb      	ldrb	r3, [r7, #14]
 8003fb8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003fbc:	fb02 f303 	mul.w	r3, r2, r3
 8003fc0:	7b7a      	ldrb	r2, [r7, #13]
 8003fc2:	08d2      	lsrs	r2, r2, #3
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	4413      	add	r3, r2
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8003fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	da08      	bge.n	8003fec <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8003fda:	79fa      	ldrb	r2, [r7, #7]
 8003fdc:	7b7b      	ldrb	r3, [r7, #13]
 8003fde:	4413      	add	r3, r2
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	7f3a      	ldrb	r2, [r7, #28]
 8003fe4:	79b9      	ldrb	r1, [r7, #6]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fdb0 	bl	8003b4c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8003fec:	7b7b      	ldrb	r3, [r7, #13]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	737b      	strb	r3, [r7, #13]
 8003ff2:	7b7a      	ldrb	r2, [r7, #13]
 8003ff4:	797b      	ldrb	r3, [r7, #5]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d3d4      	bcc.n	8003fa4 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8003ffa:	7bbb      	ldrb	r3, [r7, #14]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	73bb      	strb	r3, [r7, #14]
 8004000:	79bb      	ldrb	r3, [r7, #6]
 8004002:	3301      	adds	r3, #1
 8004004:	71bb      	strb	r3, [r7, #6]
 8004006:	7bba      	ldrb	r2, [r7, #14]
 8004008:	7e3b      	ldrb	r3, [r7, #24]
 800400a:	429a      	cmp	r2, r3
 800400c:	d3c7      	bcc.n	8003f9e <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800400e:	e000      	b.n	8004012 <ssd1306_DrawBitmap+0xb0>
        return;
 8004010:	bf00      	nop
}
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004022:	2381      	movs	r3, #129	@ 0x81
 8004024:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fcb3 	bl	8003994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff fcaf 	bl	8003994 <ssd1306_WriteCommand>
}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004050:	23af      	movs	r3, #175	@ 0xaf
 8004052:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004054:	4b08      	ldr	r3, [pc, #32]	@ (8004078 <ssd1306_SetDisplayOn+0x38>)
 8004056:	2201      	movs	r2, #1
 8004058:	715a      	strb	r2, [r3, #5]
 800405a:	e004      	b.n	8004066 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800405c:	23ae      	movs	r3, #174	@ 0xae
 800405e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004060:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <ssd1306_SetDisplayOn+0x38>)
 8004062:	2200      	movs	r2, #0
 8004064:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fc93 	bl	8003994 <ssd1306_WriteCommand>
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	200010dc 	.word	0x200010dc
 800407c:	00000000 	.word	0x00000000

08004080 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b087      	sub	sp, #28
 8004084:	af02      	add	r7, sp, #8
 8004086:	ed87 0a03 	vstr	s0, [r7, #12]
 800408a:	60b8      	str	r0, [r7, #8]
 800408c:	6079      	str	r1, [r7, #4]
 800408e:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	330f      	adds	r3, #15
 8004096:	b2d8      	uxtb	r0, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	3301      	adds	r3, #1
 800409e:	b2d9      	uxtb	r1, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	330f      	adds	r3, #15
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	3305      	adds	r3, #5
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2401      	movs	r4, #1
 80040b2:	9400      	str	r4, [sp, #0]
 80040b4:	f7ff fe64 	bl	8003d80 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	3310      	adds	r3, #16
 80040be:	b2d8      	uxtb	r0, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	3301      	adds	r3, #1
 80040c6:	b2d9      	uxtb	r1, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	3310      	adds	r3, #16
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	3305      	adds	r3, #5
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2401      	movs	r4, #1
 80040da:	9400      	str	r4, [sp, #0]
 80040dc:	f7ff fe50 	bl	8003d80 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	b2d8      	uxtb	r0, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	b2d9      	uxtb	r1, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	330e      	adds	r3, #14
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	3306      	adds	r3, #6
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2401      	movs	r4, #1
 80040fa:	9400      	str	r4, [sp, #0]
 80040fc:	f7ff feac 	bl	8003e58 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7fc f9f9 	bl	80004f8 <__aeabi_f2d>
 8004106:	a396      	add	r3, pc, #600	@ (adr r3, 8004360 <batterygauge+0x2e0>)
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f7fc fcc8 	bl	8000aa0 <__aeabi_dcmple>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d02a      	beq.n	800416c <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	3302      	adds	r3, #2
 800411c:	b2d8      	uxtb	r0, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	3302      	adds	r3, #2
 8004124:	b2d9      	uxtb	r1, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	3303      	adds	r3, #3
 800412c:	b2da      	uxtb	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	3304      	adds	r3, #4
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2401      	movs	r4, #1
 8004138:	9400      	str	r4, [sp, #0]
 800413a:	f7ff fe8d 	bl	8003e58 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d113      	bne.n	800416c <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	3302      	adds	r3, #2
 800414a:	b2d8      	uxtb	r0, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	3302      	adds	r3, #2
 8004152:	b2d9      	uxtb	r1, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	3303      	adds	r3, #3
 800415a:	b2da      	uxtb	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	3304      	adds	r3, #4
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2401      	movs	r4, #1
 8004166:	9400      	str	r4, [sp, #0]
 8004168:	f7ff fe76 	bl	8003e58 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7fc f9c3 	bl	80004f8 <__aeabi_f2d>
 8004172:	a37b      	add	r3, pc, #492	@ (adr r3, 8004360 <batterygauge+0x2e0>)
 8004174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004178:	f7fc fca6 	bl	8000ac8 <__aeabi_dcmpgt>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d035      	beq.n	80041ee <batterygauge+0x16e>
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f7fc f9b8 	bl	80004f8 <__aeabi_f2d>
 8004188:	a377      	add	r3, pc, #476	@ (adr r3, 8004368 <batterygauge+0x2e8>)
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	f7fc fc87 	bl	8000aa0 <__aeabi_dcmple>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d02a      	beq.n	80041ee <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	3302      	adds	r3, #2
 800419e:	b2d8      	uxtb	r0, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	3302      	adds	r3, #2
 80041a6:	b2d9      	uxtb	r1, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	3303      	adds	r3, #3
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	3304      	adds	r3, #4
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2401      	movs	r4, #1
 80041ba:	9400      	str	r4, [sp, #0]
 80041bc:	f7ff fe4c 	bl	8003e58 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d113      	bne.n	80041ee <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	3305      	adds	r3, #5
 80041cc:	b2d8      	uxtb	r0, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	3302      	adds	r3, #2
 80041d4:	b2d9      	uxtb	r1, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	3306      	adds	r3, #6
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	3304      	adds	r3, #4
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2401      	movs	r4, #1
 80041e8:	9400      	str	r4, [sp, #0]
 80041ea:	f7ff fe35 	bl	8003e58 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7fc f982 	bl	80004f8 <__aeabi_f2d>
 80041f4:	a35c      	add	r3, pc, #368	@ (adr r3, 8004368 <batterygauge+0x2e8>)
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f7fc fc65 	bl	8000ac8 <__aeabi_dcmpgt>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d049      	beq.n	8004298 <batterygauge+0x218>
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f7fc f977 	bl	80004f8 <__aeabi_f2d>
 800420a:	a359      	add	r3, pc, #356	@ (adr r3, 8004370 <batterygauge+0x2f0>)
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f7fc fc46 	bl	8000aa0 <__aeabi_dcmple>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d03e      	beq.n	8004298 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	3302      	adds	r3, #2
 8004220:	b2d8      	uxtb	r0, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	3302      	adds	r3, #2
 8004228:	b2d9      	uxtb	r1, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	3303      	adds	r3, #3
 8004230:	b2da      	uxtb	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	3304      	adds	r3, #4
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2401      	movs	r4, #1
 800423c:	9400      	str	r4, [sp, #0]
 800423e:	f7ff fe0b 	bl	8003e58 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	3305      	adds	r3, #5
 8004248:	b2d8      	uxtb	r0, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	3302      	adds	r3, #2
 8004250:	b2d9      	uxtb	r1, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	3306      	adds	r3, #6
 8004258:	b2da      	uxtb	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	3304      	adds	r3, #4
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2401      	movs	r4, #1
 8004264:	9400      	str	r4, [sp, #0]
 8004266:	f7ff fdf7 	bl	8003e58 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d113      	bne.n	8004298 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	3308      	adds	r3, #8
 8004276:	b2d8      	uxtb	r0, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	3302      	adds	r3, #2
 800427e:	b2d9      	uxtb	r1, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	3309      	adds	r3, #9
 8004286:	b2da      	uxtb	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	3304      	adds	r3, #4
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2401      	movs	r4, #1
 8004292:	9400      	str	r4, [sp, #0]
 8004294:	f7ff fde0 	bl	8003e58 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7fc f92d 	bl	80004f8 <__aeabi_f2d>
 800429e:	a334      	add	r3, pc, #208	@ (adr r3, 8004370 <batterygauge+0x2f0>)
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f7fc fc10 	bl	8000ac8 <__aeabi_dcmpgt>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d100      	bne.n	80042b0 <batterygauge+0x230>
	}




}
 80042ae:	e052      	b.n	8004356 <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	3302      	adds	r3, #2
 80042b6:	b2d8      	uxtb	r0, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3302      	adds	r3, #2
 80042be:	b2d9      	uxtb	r1, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	3303      	adds	r3, #3
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3304      	adds	r3, #4
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2401      	movs	r4, #1
 80042d2:	9400      	str	r4, [sp, #0]
 80042d4:	f7ff fdc0 	bl	8003e58 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	3305      	adds	r3, #5
 80042de:	b2d8      	uxtb	r0, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	3302      	adds	r3, #2
 80042e6:	b2d9      	uxtb	r1, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	3306      	adds	r3, #6
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	3304      	adds	r3, #4
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2401      	movs	r4, #1
 80042fa:	9400      	str	r4, [sp, #0]
 80042fc:	f7ff fdac 	bl	8003e58 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	3308      	adds	r3, #8
 8004306:	b2d8      	uxtb	r0, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	3302      	adds	r3, #2
 800430e:	b2d9      	uxtb	r1, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	3309      	adds	r3, #9
 8004316:	b2da      	uxtb	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	3304      	adds	r3, #4
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2401      	movs	r4, #1
 8004322:	9400      	str	r4, [sp, #0]
 8004324:	f7ff fd98 	bl	8003e58 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d113      	bne.n	8004356 <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	330b      	adds	r3, #11
 8004334:	b2d8      	uxtb	r0, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	3302      	adds	r3, #2
 800433c:	b2d9      	uxtb	r1, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	330c      	adds	r3, #12
 8004344:	b2da      	uxtb	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	3304      	adds	r3, #4
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2401      	movs	r4, #1
 8004350:	9400      	str	r4, [sp, #0]
 8004352:	f7ff fd81 	bl	8003e58 <ssd1306_DrawRectangle>
}
 8004356:	bf00      	nop
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	bd90      	pop	{r4, r7, pc}
 800435e:	bf00      	nop
 8004360:	9999999a 	.word	0x9999999a
 8004364:	400d9999 	.word	0x400d9999
 8004368:	33333333 	.word	0x33333333
 800436c:	400f3333 	.word	0x400f3333
 8004370:	66666666 	.word	0x66666666
 8004374:	40106666 	.word	0x40106666

08004378 <percentage>:

void percentage(float percent){
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af02      	add	r7, sp, #8
 800437e:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fc f8b8 	bl	80004f8 <__aeabi_f2d>
 8004388:	a329      	add	r3, pc, #164	@ (adr r3, 8004430 <percentage+0xb8>)
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f7fc f90b 	bl	80005a8 <__aeabi_dmul>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	4b20      	ldr	r3, [pc, #128]	@ (8004420 <percentage+0xa8>)
 80043a0:	f7fb ff4c 	bl	800023c <__adddf3>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	ec43 2b17 	vmov	d7, r2, r3
 80043ac:	eeb0 0a47 	vmov.f32	s0, s14
 80043b0:	eef0 0a67 	vmov.f32	s1, s15
 80043b4:	f016 ff5c 	bl	801b270 <floor>
 80043b8:	ec53 2b10 	vmov	r2, r3, d0
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	f7fc fbca 	bl	8000b58 <__aeabi_d2uiz>
 80043c4:	4603      	mov	r3, r0
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	2301      	movs	r3, #1
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	2338      	movs	r3, #56	@ 0x38
 80043ce:	2128      	movs	r1, #40	@ 0x28
 80043d0:	2020      	movs	r0, #32
 80043d2:	f7ff fd78 	bl	8003ec6 <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 96, 56, White);
 80043d6:	2301      	movs	r3, #1
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	2338      	movs	r3, #56	@ 0x38
 80043dc:	2260      	movs	r2, #96	@ 0x60
 80043de:	2128      	movs	r1, #40	@ 0x28
 80043e0:	2020      	movs	r0, #32
 80043e2:	f7ff fd39 	bl	8003e58 <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fc f886 	bl	80004f8 <__aeabi_f2d>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	e9cd 2300 	strd	r2, r3, [sp]
 80043f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004424 <percentage+0xac>)
 80043f6:	2114      	movs	r1, #20
 80043f8:	480b      	ldr	r0, [pc, #44]	@ (8004428 <percentage+0xb0>)
 80043fa:	f013 ff03 	bl	8018204 <sniprintf>
	ssd1306_SetCursor(45,44);
 80043fe:	212c      	movs	r1, #44	@ 0x2c
 8004400:	202d      	movs	r0, #45	@ 0x2d
 8004402:	f7ff fca5 	bl	8003d50 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 8004406:	4a09      	ldr	r2, [pc, #36]	@ (800442c <percentage+0xb4>)
 8004408:	2301      	movs	r3, #1
 800440a:	ca06      	ldmia	r2, {r1, r2}
 800440c:	4806      	ldr	r0, [pc, #24]	@ (8004428 <percentage+0xb0>)
 800440e:	f7ff fc79 	bl	8003d04 <ssd1306_WriteString>


}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	f3af 8000 	nop.w
 8004420:	40400000 	.word	0x40400000
 8004424:	0801cd38 	.word	0x0801cd38
 8004428:	200009c8 	.word	0x200009c8
 800442c:	20000018 	.word	0x20000018
 8004430:	47ae147b 	.word	0x47ae147b
 8004434:	3fe47ae1 	.word	0x3fe47ae1

08004438 <statemachine>:
long currentMillis = 0;
long lastMillis = 0;



void statemachine(void){
 8004438:	b5b0      	push	{r4, r5, r7, lr}
 800443a:	ed2d 8b02 	vpush	{d8}
 800443e:	b094      	sub	sp, #80	@ 0x50
 8004440:	af04      	add	r7, sp, #16
	switch(state){
 8004442:	4bbb      	ldr	r3, [pc, #748]	@ (8004730 <statemachine+0x2f8>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b05      	cmp	r3, #5
 8004448:	f201 8662 	bhi.w	8006110 <statemachine+0x1cd8>
 800444c:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <statemachine+0x1c>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	0800446d 	.word	0x0800446d
 8004458:	080047c3 	.word	0x080047c3
 800445c:	08005031 	.word	0x08005031
 8004460:	08005837 	.word	0x08005837
 8004464:	08005a95 	.word	0x08005a95
 8004468:	08005fc5 	.word	0x08005fc5
	 case STATE_SPEED:
		 nmea_parse(&myData, DataBuffer);
 800446c:	49b1      	ldr	r1, [pc, #708]	@ (8004734 <statemachine+0x2fc>)
 800446e:	48b2      	ldr	r0, [pc, #712]	@ (8004738 <statemachine+0x300>)
 8004470:	f7fe f8c4 	bl	80025fc <nmea_parse>
		ssd1306_Fill(Black);
 8004474:	2000      	movs	r0, #0
 8004476:	f7ff fb29 	bl	8003acc <ssd1306_Fill>

				 if(myData.speed>=vitmax){
 800447a:	4baf      	ldr	r3, [pc, #700]	@ (8004738 <statemachine+0x300>)
 800447c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004480:	4bae      	ldr	r3, [pc, #696]	@ (800473c <statemachine+0x304>)
 8004482:	edd3 7a00 	vldr	s15, [r3]
 8004486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800448a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448e:	db03      	blt.n	8004498 <statemachine+0x60>
									 vitmax=myData.speed;
 8004490:	4ba9      	ldr	r3, [pc, #676]	@ (8004738 <statemachine+0x300>)
 8004492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004494:	4aa9      	ldr	r2, [pc, #676]	@ (800473c <statemachine+0x304>)
 8004496:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	63fb      	str	r3, [r7, #60]	@ 0x3c
								 float sec=0;
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	63bb      	str	r3, [r7, #56]	@ 0x38
								 if (myData.speed!=0){
 80044a4:	4ba4      	ldr	r3, [pc, #656]	@ (8004738 <statemachine+0x300>)
 80044a6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80044aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b2:	d032      	beq.n	800451a <statemachine+0xe2>
									 pace=1000/(60*myData.speed);
 80044b4:	4ba0      	ldr	r3, [pc, #640]	@ (8004738 <statemachine+0x300>)
 80044b6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80044ba:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8004740 <statemachine+0x308>
 80044be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80044c2:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 8004744 <statemachine+0x30c>
 80044c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ca:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
									 sec=(pace-floor(pace))*60;
 80044ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80044d0:	f7fc f812 	bl	80004f8 <__aeabi_f2d>
 80044d4:	4604      	mov	r4, r0
 80044d6:	460d      	mov	r5, r1
 80044d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80044da:	f7fc f80d 	bl	80004f8 <__aeabi_f2d>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	ec43 2b10 	vmov	d0, r2, r3
 80044e6:	f016 fec3 	bl	801b270 <floor>
 80044ea:	ec53 2b10 	vmov	r2, r3, d0
 80044ee:	4620      	mov	r0, r4
 80044f0:	4629      	mov	r1, r5
 80044f2:	f7fb fea1 	bl	8000238 <__aeabi_dsub>
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4610      	mov	r0, r2
 80044fc:	4619      	mov	r1, r3
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	4b91      	ldr	r3, [pc, #580]	@ (8004748 <statemachine+0x310>)
 8004504:	f7fc f850 	bl	80005a8 <__aeabi_dmul>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4610      	mov	r0, r2
 800450e:	4619      	mov	r1, r3
 8004510:	f7fc fb42 	bl	8000b98 <__aeabi_d2f>
 8004514:	4603      	mov	r3, r0
 8004516:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004518:	e001      	b.n	800451e <statemachine+0xe6>
								 }
								 else {
									 pace=99;
 800451a:	4b8c      	ldr	r3, [pc, #560]	@ (800474c <statemachine+0x314>)
 800451c:	63fb      	str	r3, [r7, #60]	@ 0x3c
								 }


				  switch(spdstate){
 800451e:	4b8c      	ldr	r3, [pc, #560]	@ (8004750 <statemachine+0x318>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b02      	cmp	r3, #2
 8004524:	f000 8087 	beq.w	8004636 <statemachine+0x1fe>
 8004528:	2b02      	cmp	r3, #2
 800452a:	f300 812c 	bgt.w	8004786 <statemachine+0x34e>
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <statemachine+0x100>
 8004532:	2b01      	cmp	r3, #1
 8004534:	d040      	beq.n	80045b8 <statemachine+0x180>
 8004536:	e126      	b.n	8004786 <statemachine+0x34e>


				 case STATE_GROS:


						ssd1306_SetCursor(32, 32);
 8004538:	2120      	movs	r1, #32
 800453a:	2020      	movs	r0, #32
 800453c:	f7ff fc08 	bl	8003d50 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 8004540:	4b7d      	ldr	r3, [pc, #500]	@ (8004738 <statemachine+0x300>)
 8004542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004544:	4618      	mov	r0, r3
 8004546:	f7fb ffd7 	bl	80004f8 <__aeabi_f2d>
 800454a:	a377      	add	r3, pc, #476	@ (adr r3, 8004728 <statemachine+0x2f0>)
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	f7fc f82a 	bl	80005a8 <__aeabi_dmul>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	e9cd 2300 	strd	r2, r3, [sp]
 800455c:	4a7d      	ldr	r2, [pc, #500]	@ (8004754 <statemachine+0x31c>)
 800455e:	210f      	movs	r1, #15
 8004560:	487d      	ldr	r0, [pc, #500]	@ (8004758 <statemachine+0x320>)
 8004562:	f013 fe4f 	bl	8018204 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 8004566:	4a7d      	ldr	r2, [pc, #500]	@ (800475c <statemachine+0x324>)
 8004568:	2301      	movs	r3, #1
 800456a:	ca06      	ldmia	r2, {r1, r2}
 800456c:	487a      	ldr	r0, [pc, #488]	@ (8004758 <statemachine+0x320>)
 800456e:	f7ff fbc9 	bl	8003d04 <ssd1306_WriteString>
						ssd1306_SetCursor(32, 56);
 8004572:	2138      	movs	r1, #56	@ 0x38
 8004574:	2020      	movs	r0, #32
 8004576:	f7ff fbeb 	bl	8003d50 <ssd1306_SetCursor>
						ssd1306_WriteString("Vit(kmh)", Font_6x8, White);
 800457a:	4a79      	ldr	r2, [pc, #484]	@ (8004760 <statemachine+0x328>)
 800457c:	2301      	movs	r3, #1
 800457e:	ca06      	ldmia	r2, {r1, r2}
 8004580:	4878      	ldr	r0, [pc, #480]	@ (8004764 <statemachine+0x32c>)
 8004582:	f7ff fbbf 	bl	8003d04 <ssd1306_WriteString>
						batterygauge(vbat,79, 57,1);
 8004586:	4b78      	ldr	r3, [pc, #480]	@ (8004768 <statemachine+0x330>)
 8004588:	edd3 7a00 	vldr	s15, [r3]
 800458c:	2201      	movs	r2, #1
 800458e:	2139      	movs	r1, #57	@ 0x39
 8004590:	204f      	movs	r0, #79	@ 0x4f
 8004592:	eeb0 0a67 	vmov.f32	s0, s15
 8004596:	f7ff fd73 	bl	8004080 <batterygauge>

					 if(BTN_B>=1){
 800459a:	4b74      	ldr	r3, [pc, #464]	@ (800476c <statemachine+0x334>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f340 80bb 	ble.w	800471a <statemachine+0x2e2>
							spdstate++;
 80045a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004750 <statemachine+0x318>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	3301      	adds	r3, #1
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	4b68      	ldr	r3, [pc, #416]	@ (8004750 <statemachine+0x318>)
 80045ae:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 80045b0:	4b6e      	ldr	r3, [pc, #440]	@ (800476c <statemachine+0x334>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
					 					 				  	}




				  break;
 80045b6:	e0b0      	b.n	800471a <statemachine+0x2e2>
				 case STATE_GROS1:

					 ssd1306_SetCursor(32, 32);
 80045b8:	2120      	movs	r1, #32
 80045ba:	2020      	movs	r0, #32
 80045bc:	f7ff fbc8 	bl	8003d50 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "%0.1f",vitmax*3.6);
 80045c0:	4b5e      	ldr	r3, [pc, #376]	@ (800473c <statemachine+0x304>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fb ff97 	bl	80004f8 <__aeabi_f2d>
 80045ca:	a357      	add	r3, pc, #348	@ (adr r3, 8004728 <statemachine+0x2f0>)
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	f7fb ffea 	bl	80005a8 <__aeabi_dmul>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	e9cd 2300 	strd	r2, r3, [sp]
 80045dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004754 <statemachine+0x31c>)
 80045de:	210f      	movs	r1, #15
 80045e0:	485d      	ldr	r0, [pc, #372]	@ (8004758 <statemachine+0x320>)
 80045e2:	f013 fe0f 	bl	8018204 <sniprintf>
					 ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 80045e6:	4a5d      	ldr	r2, [pc, #372]	@ (800475c <statemachine+0x324>)
 80045e8:	2301      	movs	r3, #1
 80045ea:	ca06      	ldmia	r2, {r1, r2}
 80045ec:	485a      	ldr	r0, [pc, #360]	@ (8004758 <statemachine+0x320>)
 80045ee:	f7ff fb89 	bl	8003d04 <ssd1306_WriteString>
					 ssd1306_SetCursor(32, 56);
 80045f2:	2138      	movs	r1, #56	@ 0x38
 80045f4:	2020      	movs	r0, #32
 80045f6:	f7ff fbab 	bl	8003d50 <ssd1306_SetCursor>
					 ssd1306_WriteString("maxV", Font_6x8, White);
 80045fa:	4a59      	ldr	r2, [pc, #356]	@ (8004760 <statemachine+0x328>)
 80045fc:	2301      	movs	r3, #1
 80045fe:	ca06      	ldmia	r2, {r1, r2}
 8004600:	485b      	ldr	r0, [pc, #364]	@ (8004770 <statemachine+0x338>)
 8004602:	f7ff fb7f 	bl	8003d04 <ssd1306_WriteString>
					 batterygauge(vbat,79, 57,1);
 8004606:	4b58      	ldr	r3, [pc, #352]	@ (8004768 <statemachine+0x330>)
 8004608:	edd3 7a00 	vldr	s15, [r3]
 800460c:	2201      	movs	r2, #1
 800460e:	2139      	movs	r1, #57	@ 0x39
 8004610:	204f      	movs	r0, #79	@ 0x4f
 8004612:	eeb0 0a67 	vmov.f32	s0, s15
 8004616:	f7ff fd33 	bl	8004080 <batterygauge>





					 if(BTN_B>=1){
 800461a:	4b54      	ldr	r3, [pc, #336]	@ (800476c <statemachine+0x334>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	dd7d      	ble.n	800471e <statemachine+0x2e6>
					 							spdstate++;
 8004622:	4b4b      	ldr	r3, [pc, #300]	@ (8004750 <statemachine+0x318>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	3301      	adds	r3, #1
 8004628:	b2da      	uxtb	r2, r3
 800462a:	4b49      	ldr	r3, [pc, #292]	@ (8004750 <statemachine+0x318>)
 800462c:	701a      	strb	r2, [r3, #0]
					 							BTN_B=0;
 800462e:	4b4f      	ldr	r3, [pc, #316]	@ (800476c <statemachine+0x334>)
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]

					 					 					 				  	}



					 break;
 8004634:	e073      	b.n	800471e <statemachine+0x2e6>
				  case STATE_SUMMARY:
				  						ssd1306_SetCursor(32, 32);
 8004636:	2120      	movs	r1, #32
 8004638:	2020      	movs	r0, #32
 800463a:	f7ff fb89 	bl	8003d50 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "%0.0fmin%0.0fs",floor(pace),floor(sec));
 800463e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004640:	f7fb ff5a 	bl	80004f8 <__aeabi_f2d>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	ec43 2b10 	vmov	d0, r2, r3
 800464c:	f016 fe10 	bl	801b270 <floor>
 8004650:	eeb0 8a40 	vmov.f32	s16, s0
 8004654:	eef0 8a60 	vmov.f32	s17, s1
 8004658:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800465a:	f7fb ff4d 	bl	80004f8 <__aeabi_f2d>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	ec43 2b10 	vmov	d0, r2, r3
 8004666:	f016 fe03 	bl	801b270 <floor>
 800466a:	eeb0 7a40 	vmov.f32	s14, s0
 800466e:	eef0 7a60 	vmov.f32	s15, s1
 8004672:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004676:	ed8d 8b00 	vstr	d8, [sp]
 800467a:	4a3e      	ldr	r2, [pc, #248]	@ (8004774 <statemachine+0x33c>)
 800467c:	210f      	movs	r1, #15
 800467e:	4836      	ldr	r0, [pc, #216]	@ (8004758 <statemachine+0x320>)
 8004680:	f013 fdc0 	bl	8018204 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004684:	4a3c      	ldr	r2, [pc, #240]	@ (8004778 <statemachine+0x340>)
 8004686:	2301      	movs	r3, #1
 8004688:	ca06      	ldmia	r2, {r1, r2}
 800468a:	4833      	ldr	r0, [pc, #204]	@ (8004758 <statemachine+0x320>)
 800468c:	f7ff fb3a 	bl	8003d04 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 42);
 8004690:	212a      	movs	r1, #42	@ 0x2a
 8004692:	2020      	movs	r0, #32
 8004694:	f7ff fb5c 	bl	8003d50 <ssd1306_SetCursor>
				  						ssd1306_WriteString("pace", Font_6x8, White);
 8004698:	4a31      	ldr	r2, [pc, #196]	@ (8004760 <statemachine+0x328>)
 800469a:	2301      	movs	r3, #1
 800469c:	ca06      	ldmia	r2, {r1, r2}
 800469e:	4837      	ldr	r0, [pc, #220]	@ (800477c <statemachine+0x344>)
 80046a0:	f7ff fb30 	bl	8003d04 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 56);
 80046a4:	2138      	movs	r1, #56	@ 0x38
 80046a6:	2020      	movs	r0, #32
 80046a8:	f7ff fb52 	bl	8003d50 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "V=%0.1fkmh",vitmax*3.6);
 80046ac:	4b23      	ldr	r3, [pc, #140]	@ (800473c <statemachine+0x304>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fb ff21 	bl	80004f8 <__aeabi_f2d>
 80046b6:	a31c      	add	r3, pc, #112	@ (adr r3, 8004728 <statemachine+0x2f0>)
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	f7fb ff74 	bl	80005a8 <__aeabi_dmul>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	e9cd 2300 	strd	r2, r3, [sp]
 80046c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004780 <statemachine+0x348>)
 80046ca:	210f      	movs	r1, #15
 80046cc:	4822      	ldr	r0, [pc, #136]	@ (8004758 <statemachine+0x320>)
 80046ce:	f013 fd99 	bl	8018204 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80046d2:	4a23      	ldr	r2, [pc, #140]	@ (8004760 <statemachine+0x328>)
 80046d4:	2301      	movs	r3, #1
 80046d6:	ca06      	ldmia	r2, {r1, r2}
 80046d8:	481f      	ldr	r0, [pc, #124]	@ (8004758 <statemachine+0x320>)
 80046da:	f7ff fb13 	bl	8003d04 <ssd1306_WriteString>
				  						batterygauge(vbat,79, 43,1);
 80046de:	4b22      	ldr	r3, [pc, #136]	@ (8004768 <statemachine+0x330>)
 80046e0:	edd3 7a00 	vldr	s15, [r3]
 80046e4:	2201      	movs	r2, #1
 80046e6:	212b      	movs	r1, #43	@ 0x2b
 80046e8:	204f      	movs	r0, #79	@ 0x4f
 80046ea:	eeb0 0a67 	vmov.f32	s0, s15
 80046ee:	f7ff fcc7 	bl	8004080 <batterygauge>



				  					 if(BTN_B>=1){
 80046f2:	4b1e      	ldr	r3, [pc, #120]	@ (800476c <statemachine+0x334>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	dd44      	ble.n	8004784 <statemachine+0x34c>
				  								spdstate--;
 80046fa:	4b15      	ldr	r3, [pc, #84]	@ (8004750 <statemachine+0x318>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	3b01      	subs	r3, #1
 8004700:	b2da      	uxtb	r2, r3
 8004702:	4b13      	ldr	r3, [pc, #76]	@ (8004750 <statemachine+0x318>)
 8004704:	701a      	strb	r2, [r3, #0]
				  								spdstate--;
 8004706:	4b12      	ldr	r3, [pc, #72]	@ (8004750 <statemachine+0x318>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	3b01      	subs	r3, #1
 800470c:	b2da      	uxtb	r2, r3
 800470e:	4b10      	ldr	r3, [pc, #64]	@ (8004750 <statemachine+0x318>)
 8004710:	701a      	strb	r2, [r3, #0]
				  								BTN_B=0;
 8004712:	4b16      	ldr	r3, [pc, #88]	@ (800476c <statemachine+0x334>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
				  					 					 				  	}




				  					 break;
 8004718:	e034      	b.n	8004784 <statemachine+0x34c>
				  break;
 800471a:	bf00      	nop
 800471c:	e033      	b.n	8004786 <statemachine+0x34e>
					 break;
 800471e:	bf00      	nop
 8004720:	e031      	b.n	8004786 <statemachine+0x34e>
 8004722:	bf00      	nop
 8004724:	f3af 8000 	nop.w
 8004728:	cccccccd 	.word	0xcccccccd
 800472c:	400ccccc 	.word	0x400ccccc
 8004730:	200004d8 	.word	0x200004d8
 8004734:	20000524 	.word	0x20000524
 8004738:	20000728 	.word	0x20000728
 800473c:	20000a3c 	.word	0x20000a3c
 8004740:	42700000 	.word	0x42700000
 8004744:	447a0000 	.word	0x447a0000
 8004748:	404e0000 	.word	0x404e0000
 800474c:	42c60000 	.word	0x42c60000
 8004750:	200004d9 	.word	0x200004d9
 8004754:	0801cd44 	.word	0x0801cd44
 8004758:	200009c8 	.word	0x200009c8
 800475c:	20000028 	.word	0x20000028
 8004760:	20000018 	.word	0x20000018
 8004764:	0801cd4c 	.word	0x0801cd4c
 8004768:	200007a0 	.word	0x200007a0
 800476c:	2000076c 	.word	0x2000076c
 8004770:	0801cd58 	.word	0x0801cd58
 8004774:	0801cd60 	.word	0x0801cd60
 8004778:	20000020 	.word	0x20000020
 800477c:	0801cd70 	.word	0x0801cd70
 8004780:	0801cd78 	.word	0x0801cd78
				  					 break;
 8004784:	bf00      	nop
				  }
				  					if(BTN_A>=1){
 8004786:	4b70      	ldr	r3, [pc, #448]	@ (8004948 <statemachine+0x510>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	dd0b      	ble.n	80047a6 <statemachine+0x36e>
				  									 					state++;
 800478e:	4b6f      	ldr	r3, [pc, #444]	@ (800494c <statemachine+0x514>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	3301      	adds	r3, #1
 8004794:	b2da      	uxtb	r2, r3
 8004796:	4b6d      	ldr	r3, [pc, #436]	@ (800494c <statemachine+0x514>)
 8004798:	701a      	strb	r2, [r3, #0]
				  									 					BTN_A=0;
 800479a:	4b6b      	ldr	r3, [pc, #428]	@ (8004948 <statemachine+0x510>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
				  									 					BTN_B=0;
 80047a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004950 <statemachine+0x518>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
				  									  	}
				  									 	 if(BTN_B_LONG>=1){
 80047a6:	4b6b      	ldr	r3, [pc, #428]	@ (8004954 <statemachine+0x51c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f341 84a4 	ble.w	80060f8 <statemachine+0x1cc0>
				  									 					  							  vitmax=0;
 80047b0:	4b69      	ldr	r3, [pc, #420]	@ (8004958 <statemachine+0x520>)
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
				  									 					  							BTN_B_LONG=0;
 80047b8:	4b66      	ldr	r3, [pc, #408]	@ (8004954 <statemachine+0x51c>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
				  									 					  						}
				  									 	 break;
 80047be:	f001 bc9b 	b.w	80060f8 <statemachine+0x1cc0>


				  case STATE_BALISE:
					  ssd1306_Fill(Black);
 80047c2:	2000      	movs	r0, #0
 80047c4:	f7ff f982 	bl	8003acc <ssd1306_Fill>

					  if(settimeen==0){
 80047c8:	4b64      	ldr	r3, [pc, #400]	@ (800495c <statemachine+0x524>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d145      	bne.n	800485c <statemachine+0x424>

						  if(myData.fix==1){
 80047d0:	4b63      	ldr	r3, [pc, #396]	@ (8004960 <statemachine+0x528>)
 80047d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d141      	bne.n	800485c <statemachine+0x424>
							settimeen=1;
 80047d8:	4b60      	ldr	r3, [pc, #384]	@ (800495c <statemachine+0x524>)
 80047da:	2201      	movs	r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 80047de:	4b60      	ldr	r3, [pc, #384]	@ (8004960 <statemachine+0x528>)
 80047e0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	0092      	lsls	r2, r2, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004960 <statemachine+0x528>)
 80047f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	4413      	add	r3, r2
 8004802:	b2da      	uxtb	r2, r3
 8004804:	4b57      	ldr	r3, [pc, #348]	@ (8004964 <statemachine+0x52c>)
 8004806:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004808:	4b55      	ldr	r3, [pc, #340]	@ (8004960 <statemachine+0x528>)
 800480a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	b2db      	uxtb	r3, r3
 8004814:	461a      	mov	r2, r3
 8004816:	0092      	lsls	r2, r2, #2
 8004818:	4413      	add	r3, r2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	b2da      	uxtb	r2, r3
 800481e:	4b50      	ldr	r3, [pc, #320]	@ (8004960 <statemachine+0x528>)
 8004820:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	b2db      	uxtb	r3, r3
 800482a:	4413      	add	r3, r2
 800482c:	b2da      	uxtb	r2, r3
 800482e:	4b4e      	ldr	r3, [pc, #312]	@ (8004968 <statemachine+0x530>)
 8004830:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004832:	4b4b      	ldr	r3, [pc, #300]	@ (8004960 <statemachine+0x528>)
 8004834:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	b2db      	uxtb	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	0092      	lsls	r2, r2, #2
 8004842:	4413      	add	r3, r2
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	b2da      	uxtb	r2, r3
 8004848:	4b45      	ldr	r3, [pc, #276]	@ (8004960 <statemachine+0x528>)
 800484a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	b2db      	uxtb	r3, r3
 8004854:	4413      	add	r3, r2
 8004856:	b2da      	uxtb	r2, r3
 8004858:	4b44      	ldr	r3, [pc, #272]	@ (800496c <statemachine+0x534>)
 800485a:	701a      	strb	r2, [r3, #0]





					  switch(balisestate){
 800485c:	4b44      	ldr	r3, [pc, #272]	@ (8004970 <statemachine+0x538>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b02      	cmp	r3, #2
 8004862:	f000 838d 	beq.w	8004f80 <statemachine+0xb48>
 8004866:	2b02      	cmp	r3, #2
 8004868:	f301 8448 	bgt.w	80060fc <statemachine+0x1cc4>
 800486c:	2b00      	cmp	r3, #0
 800486e:	d004      	beq.n	800487a <statemachine+0x442>
 8004870:	2b01      	cmp	r3, #1
 8004872:	f000 8093 	beq.w	800499c <statemachine+0x564>
						  				 									 									  	}

					  }


					  break;
 8004876:	f001 bc41 	b.w	80060fc <statemachine+0x1cc4>
						  ssd1306_SetCursor(32,32);
 800487a:	2120      	movs	r1, #32
 800487c:	2020      	movs	r0, #32
 800487e:	f7ff fa67 	bl	8003d50 <ssd1306_SetCursor>
						  ssd1306_WriteString("Tracker",Font_6x8,White);
 8004882:	4a3c      	ldr	r2, [pc, #240]	@ (8004974 <statemachine+0x53c>)
 8004884:	2301      	movs	r3, #1
 8004886:	ca06      	ldmia	r2, {r1, r2}
 8004888:	483b      	ldr	r0, [pc, #236]	@ (8004978 <statemachine+0x540>)
 800488a:	f7ff fa3b 	bl	8003d04 <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "offset=%d",pageoffset);
 800488e:	4b3b      	ldr	r3, [pc, #236]	@ (800497c <statemachine+0x544>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a3b      	ldr	r2, [pc, #236]	@ (8004980 <statemachine+0x548>)
 8004894:	2132      	movs	r1, #50	@ 0x32
 8004896:	483b      	ldr	r0, [pc, #236]	@ (8004984 <statemachine+0x54c>)
 8004898:	f013 fcb4 	bl	8018204 <sniprintf>
						  ssd1306_SetCursor(32,42);
 800489c:	212a      	movs	r1, #42	@ 0x2a
 800489e:	2020      	movs	r0, #32
 80048a0:	f7ff fa56 	bl	8003d50 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 80048a4:	4a38      	ldr	r2, [pc, #224]	@ (8004988 <statemachine+0x550>)
 80048a6:	2301      	movs	r3, #1
 80048a8:	ca06      	ldmia	r2, {r1, r2}
 80048aa:	4836      	ldr	r0, [pc, #216]	@ (8004984 <statemachine+0x54c>)
 80048ac:	f7ff fa2a 	bl	8003d04 <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 80048b0:	4b36      	ldr	r3, [pc, #216]	@ (800498c <statemachine+0x554>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a36      	ldr	r2, [pc, #216]	@ (8004990 <statemachine+0x558>)
 80048b6:	2132      	movs	r1, #50	@ 0x32
 80048b8:	4832      	ldr	r0, [pc, #200]	@ (8004984 <statemachine+0x54c>)
 80048ba:	f013 fca3 	bl	8018204 <sniprintf>
						  ssd1306_SetCursor(32,52);
 80048be:	2134      	movs	r1, #52	@ 0x34
 80048c0:	2020      	movs	r0, #32
 80048c2:	f7ff fa45 	bl	8003d50 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 80048c6:	4a30      	ldr	r2, [pc, #192]	@ (8004988 <statemachine+0x550>)
 80048c8:	2301      	movs	r3, #1
 80048ca:	ca06      	ldmia	r2, {r1, r2}
 80048cc:	482d      	ldr	r0, [pc, #180]	@ (8004984 <statemachine+0x54c>)
 80048ce:	f7ff fa19 	bl	8003d04 <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 80048d2:	4b20      	ldr	r3, [pc, #128]	@ (8004954 <statemachine+0x51c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	dd0e      	ble.n	80048f8 <statemachine+0x4c0>
							balisestate++;
 80048da:	4b25      	ldr	r3, [pc, #148]	@ (8004970 <statemachine+0x538>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	3301      	adds	r3, #1
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	4b23      	ldr	r3, [pc, #140]	@ (8004970 <statemachine+0x538>)
 80048e4:	701a      	strb	r2, [r3, #0]
							BTN_B_LONG=0;
 80048e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004954 <statemachine+0x51c>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
							BTN_A=0;
 80048ec:	4b16      	ldr	r3, [pc, #88]	@ (8004948 <statemachine+0x510>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim17);
 80048f2:	4828      	ldr	r0, [pc, #160]	@ (8004994 <statemachine+0x55c>)
 80048f4:	f00a fc9c 	bl	800f230 <HAL_TIM_Base_Start_IT>
						  if(BTN_A>=1){
 80048f8:	4b13      	ldr	r3, [pc, #76]	@ (8004948 <statemachine+0x510>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	dd0e      	ble.n	800491e <statemachine+0x4e6>
						  				  			 	state++;
 8004900:	4b12      	ldr	r3, [pc, #72]	@ (800494c <statemachine+0x514>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	3301      	adds	r3, #1
 8004906:	b2da      	uxtb	r2, r3
 8004908:	4b10      	ldr	r3, [pc, #64]	@ (800494c <statemachine+0x514>)
 800490a:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 800490c:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <statemachine+0x510>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8004912:	4b0f      	ldr	r3, [pc, #60]	@ (8004950 <statemachine+0x518>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
						  				  			 	settimeen=0;
 8004918:	4b10      	ldr	r3, [pc, #64]	@ (800495c <statemachine+0x524>)
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 800491e:	4b1e      	ldr	r3, [pc, #120]	@ (8004998 <statemachine+0x560>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f340 837e 	ble.w	8005024 <statemachine+0xbec>
									  state--;
 8004928:	4b08      	ldr	r3, [pc, #32]	@ (800494c <statemachine+0x514>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	3b01      	subs	r3, #1
 800492e:	b2da      	uxtb	r2, r3
 8004930:	4b06      	ldr	r3, [pc, #24]	@ (800494c <statemachine+0x514>)
 8004932:	701a      	strb	r2, [r3, #0]
									BTN_A_LONG=0;
 8004934:	4b18      	ldr	r3, [pc, #96]	@ (8004998 <statemachine+0x560>)
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
									BTN_B=0;
 800493a:	4b05      	ldr	r3, [pc, #20]	@ (8004950 <statemachine+0x518>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
									settimeen=0;
 8004940:	4b06      	ldr	r3, [pc, #24]	@ (800495c <statemachine+0x524>)
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
						  break;
 8004946:	e36d      	b.n	8005024 <statemachine+0xbec>
 8004948:	20000768 	.word	0x20000768
 800494c:	200004d8 	.word	0x200004d8
 8004950:	2000076c 	.word	0x2000076c
 8004954:	20000a9c 	.word	0x20000a9c
 8004958:	20000a3c 	.word	0x20000a3c
 800495c:	20000a88 	.word	0x20000a88
 8004960:	20000728 	.word	0x20000728
 8004964:	20000a85 	.word	0x20000a85
 8004968:	20000a86 	.word	0x20000a86
 800496c:	20000a84 	.word	0x20000a84
 8004970:	200004dd 	.word	0x200004dd
 8004974:	20000018 	.word	0x20000018
 8004978:	0801cd84 	.word	0x0801cd84
 800497c:	200009a4 	.word	0x200009a4
 8004980:	0801cd8c 	.word	0x0801cd8c
 8004984:	200009c8 	.word	0x200009c8
 8004988:	20000020 	.word	0x20000020
 800498c:	200009a8 	.word	0x200009a8
 8004990:	0801cd98 	.word	0x0801cd98
 8004994:	20001188 	.word	0x20001188
 8004998:	20000aa0 	.word	0x20000aa0
						  if(myData.speed>=vitmax){
 800499c:	4baa      	ldr	r3, [pc, #680]	@ (8004c48 <statemachine+0x810>)
 800499e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80049a2:	4baa      	ldr	r3, [pc, #680]	@ (8004c4c <statemachine+0x814>)
 80049a4:	edd3 7a00 	vldr	s15, [r3]
 80049a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b0:	db03      	blt.n	80049ba <statemachine+0x582>
						  									 vitmax=myData.speed;
 80049b2:	4ba5      	ldr	r3, [pc, #660]	@ (8004c48 <statemachine+0x810>)
 80049b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b6:	4aa5      	ldr	r2, [pc, #660]	@ (8004c4c <statemachine+0x814>)
 80049b8:	6013      	str	r3, [r2, #0]
						  if(pagenumber+1>=MAX_WRITE_PAGE){
 80049ba:	4ba5      	ldr	r3, [pc, #660]	@ (8004c50 <statemachine+0x818>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f246 32fd 	movw	r2, #25597	@ 0x63fd
 80049c2:	4293      	cmp	r3, r2
 80049c4:	dd05      	ble.n	80049d2 <statemachine+0x59a>
							  HAL_TIM_Base_Stop_IT(&htim17);
 80049c6:	48a3      	ldr	r0, [pc, #652]	@ (8004c54 <statemachine+0x81c>)
 80049c8:	f00a fc80 	bl	800f2cc <HAL_TIM_Base_Stop_IT>
							  balisestate=2;
 80049cc:	4ba2      	ldr	r3, [pc, #648]	@ (8004c58 <statemachine+0x820>)
 80049ce:	2202      	movs	r2, #2
 80049d0:	701a      	strb	r2, [r3, #0]
						  if(enablewrite==1){
 80049d2:	4ba2      	ldr	r3, [pc, #648]	@ (8004c5c <statemachine+0x824>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	f040 80bb 	bne.w	8004b52 <statemachine+0x71a>
							  oldlat=myData.latitude;
 80049dc:	4b9a      	ldr	r3, [pc, #616]	@ (8004c48 <statemachine+0x810>)
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	499f      	ldr	r1, [pc, #636]	@ (8004c60 <statemachine+0x828>)
 80049e4:	e9c1 2300 	strd	r2, r3, [r1]
							  oldlong=myData.longitude;
 80049e8:	4b97      	ldr	r3, [pc, #604]	@ (8004c48 <statemachine+0x810>)
 80049ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80049ee:	499d      	ldr	r1, [pc, #628]	@ (8004c64 <statemachine+0x82c>)
 80049f0:	e9c1 2300 	strd	r2, r3, [r1]
							  nmea_parse(&myData, DataBuffer);
 80049f4:	499c      	ldr	r1, [pc, #624]	@ (8004c68 <statemachine+0x830>)
 80049f6:	4894      	ldr	r0, [pc, #592]	@ (8004c48 <statemachine+0x810>)
 80049f8:	f7fd fe00 	bl	80025fc <nmea_parse>
							  bmp581_read_precise_normal(&bmp581);
 80049fc:	489b      	ldr	r0, [pc, #620]	@ (8004c6c <statemachine+0x834>)
 80049fe:	f7fc fd1b 	bl	8001438 <bmp581_read_precise_normal>
							  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 8004a02:	4b97      	ldr	r3, [pc, #604]	@ (8004c60 <statemachine+0x828>)
 8004a04:	ed93 7b00 	vldr	d7, [r3]
 8004a08:	4b8f      	ldr	r3, [pc, #572]	@ (8004c48 <statemachine+0x810>)
 8004a0a:	ed93 6b00 	vldr	d6, [r3]
 8004a0e:	4b95      	ldr	r3, [pc, #596]	@ (8004c64 <statemachine+0x82c>)
 8004a10:	ed93 5b00 	vldr	d5, [r3]
 8004a14:	4b8c      	ldr	r3, [pc, #560]	@ (8004c48 <statemachine+0x810>)
 8004a16:	ed93 4b04 	vldr	d4, [r3, #16]
 8004a1a:	eeb0 3a44 	vmov.f32	s6, s8
 8004a1e:	eef0 3a64 	vmov.f32	s7, s9
 8004a22:	eeb0 2a45 	vmov.f32	s4, s10
 8004a26:	eef0 2a65 	vmov.f32	s5, s11
 8004a2a:	eeb0 1a46 	vmov.f32	s2, s12
 8004a2e:	eef0 1a66 	vmov.f32	s3, s13
 8004a32:	eeb0 0a47 	vmov.f32	s0, s14
 8004a36:	eef0 0a67 	vmov.f32	s1, s15
 8004a3a:	f7fd fead 	bl	8002798 <distancecalc>
 8004a3e:	ec51 0b10 	vmov	r0, r1, d0
 8004a42:	a37f      	add	r3, pc, #508	@ (adr r3, 8004c40 <statemachine+0x808>)
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f7fc f83e 	bl	8000ac8 <__aeabi_dcmpgt>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d02c      	beq.n	8004aac <statemachine+0x674>
								  myData.latitude=oldlat;
 8004a52:	4b83      	ldr	r3, [pc, #524]	@ (8004c60 <statemachine+0x828>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	497b      	ldr	r1, [pc, #492]	@ (8004c48 <statemachine+0x810>)
 8004a5a:	e9c1 2300 	strd	r2, r3, [r1]
								  myData.longitude=oldlong;
 8004a5e:	4b81      	ldr	r3, [pc, #516]	@ (8004c64 <statemachine+0x82c>)
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	4978      	ldr	r1, [pc, #480]	@ (8004c48 <statemachine+0x810>)
 8004a66:	e9c1 2304 	strd	r2, r3, [r1, #16]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop,bmpalt);
 8004a6a:	4b81      	ldr	r3, [pc, #516]	@ (8004c70 <statemachine+0x838>)
 8004a6c:	edd3 6a00 	vldr	s13, [r3]
 8004a70:	4b80      	ldr	r3, [pc, #512]	@ (8004c74 <statemachine+0x83c>)
 8004a72:	ed93 6a00 	vldr	s12, [r3]
 8004a76:	4b74      	ldr	r3, [pc, #464]	@ (8004c48 <statemachine+0x810>)
 8004a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7a:	4a73      	ldr	r2, [pc, #460]	@ (8004c48 <statemachine+0x810>)
 8004a7c:	edd2 5a08 	vldr	s11, [r2, #32]
 8004a80:	4a7d      	ldr	r2, [pc, #500]	@ (8004c78 <statemachine+0x840>)
 8004a82:	ed92 7b00 	vldr	d7, [r2]
 8004a86:	eeb0 2a47 	vmov.f32	s4, s14
 8004a8a:	eef0 2a67 	vmov.f32	s5, s15
 8004a8e:	eeb0 1a65 	vmov.f32	s2, s11
 8004a92:	461a      	mov	r2, r3
 8004a94:	496c      	ldr	r1, [pc, #432]	@ (8004c48 <statemachine+0x810>)
 8004a96:	eef0 0a46 	vmov.f32	s1, s12
 8004a9a:	eeb0 0a66 	vmov.f32	s0, s13
 8004a9e:	4877      	ldr	r0, [pc, #476]	@ (8004c7c <statemachine+0x844>)
 8004aa0:	f7fe fdaa 	bl	80035f8 <csvframe>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4a76      	ldr	r2, [pc, #472]	@ (8004c80 <statemachine+0x848>)
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e049      	b.n	8004b40 <statemachine+0x708>
								  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8004aac:	4b6c      	ldr	r3, [pc, #432]	@ (8004c60 <statemachine+0x828>)
 8004aae:	ed93 7b00 	vldr	d7, [r3]
 8004ab2:	4b65      	ldr	r3, [pc, #404]	@ (8004c48 <statemachine+0x810>)
 8004ab4:	ed93 6b00 	vldr	d6, [r3]
 8004ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8004c64 <statemachine+0x82c>)
 8004aba:	ed93 5b00 	vldr	d5, [r3]
 8004abe:	4b62      	ldr	r3, [pc, #392]	@ (8004c48 <statemachine+0x810>)
 8004ac0:	ed93 4b04 	vldr	d4, [r3, #16]
 8004ac4:	eeb0 3a44 	vmov.f32	s6, s8
 8004ac8:	eef0 3a64 	vmov.f32	s7, s9
 8004acc:	eeb0 2a45 	vmov.f32	s4, s10
 8004ad0:	eef0 2a65 	vmov.f32	s5, s11
 8004ad4:	eeb0 1a46 	vmov.f32	s2, s12
 8004ad8:	eef0 1a66 	vmov.f32	s3, s13
 8004adc:	eeb0 0a47 	vmov.f32	s0, s14
 8004ae0:	eef0 0a67 	vmov.f32	s1, s15
 8004ae4:	f7fd fe58 	bl	8002798 <distancecalc>
 8004ae8:	ec51 0b10 	vmov	r0, r1, d0
 8004aec:	4b65      	ldr	r3, [pc, #404]	@ (8004c84 <statemachine+0x84c>)
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	f7fb fba3 	bl	800023c <__adddf3>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4962      	ldr	r1, [pc, #392]	@ (8004c84 <statemachine+0x84c>)
 8004afc:	e9c1 2300 	strd	r2, r3, [r1]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop,bmpalt);
 8004b00:	4b5b      	ldr	r3, [pc, #364]	@ (8004c70 <statemachine+0x838>)
 8004b02:	edd3 6a00 	vldr	s13, [r3]
 8004b06:	4b5b      	ldr	r3, [pc, #364]	@ (8004c74 <statemachine+0x83c>)
 8004b08:	ed93 6a00 	vldr	s12, [r3]
 8004b0c:	4b4e      	ldr	r3, [pc, #312]	@ (8004c48 <statemachine+0x810>)
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	4a4d      	ldr	r2, [pc, #308]	@ (8004c48 <statemachine+0x810>)
 8004b12:	edd2 5a08 	vldr	s11, [r2, #32]
 8004b16:	4a58      	ldr	r2, [pc, #352]	@ (8004c78 <statemachine+0x840>)
 8004b18:	ed92 7b00 	vldr	d7, [r2]
 8004b1c:	eeb0 2a47 	vmov.f32	s4, s14
 8004b20:	eef0 2a67 	vmov.f32	s5, s15
 8004b24:	eeb0 1a65 	vmov.f32	s2, s11
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4947      	ldr	r1, [pc, #284]	@ (8004c48 <statemachine+0x810>)
 8004b2c:	eef0 0a46 	vmov.f32	s1, s12
 8004b30:	eeb0 0a66 	vmov.f32	s0, s13
 8004b34:	4851      	ldr	r0, [pc, #324]	@ (8004c7c <statemachine+0x844>)
 8004b36:	f7fe fd5f 	bl	80035f8 <csvframe>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	4a50      	ldr	r2, [pc, #320]	@ (8004c80 <statemachine+0x848>)
 8004b3e:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004b40:	4b4f      	ldr	r3, [pc, #316]	@ (8004c80 <statemachine+0x848>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4619      	mov	r1, r3
 8004b46:	484d      	ldr	r0, [pc, #308]	@ (8004c7c <statemachine+0x844>)
 8004b48:	f7fe fe90 	bl	800386c <writebuffertoflash>
							  enablewrite=0;
 8004b4c:	4b43      	ldr	r3, [pc, #268]	@ (8004c5c <statemachine+0x824>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
						  ssd1306_SetCursor(32,32);
 8004b52:	2120      	movs	r1, #32
 8004b54:	2020      	movs	r0, #32
 8004b56:	f7ff f8fb 	bl	8003d50 <ssd1306_SetCursor>
						  switch(ecranstate){
 8004b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c88 <statemachine+0x850>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b05      	cmp	r3, #5
 8004b60:	f200 818f 	bhi.w	8004e82 <statemachine+0xa4a>
 8004b64:	a201      	add	r2, pc, #4	@ (adr r2, 8004b6c <statemachine+0x734>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004b85 	.word	0x08004b85
 8004b70:	08004bd7 	.word	0x08004bd7
 8004b74:	08004cb5 	.word	0x08004cb5
 8004b78:	08004d1f 	.word	0x08004d1f
 8004b7c:	08004d77 	.word	0x08004d77
 8004b80:	08004dd5 	.word	0x08004dd5
							  snprintf((char *)bufferscreen,50,"%d",pagenumber);
 8004b84:	4b32      	ldr	r3, [pc, #200]	@ (8004c50 <statemachine+0x818>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a40      	ldr	r2, [pc, #256]	@ (8004c8c <statemachine+0x854>)
 8004b8a:	2132      	movs	r1, #50	@ 0x32
 8004b8c:	4840      	ldr	r0, [pc, #256]	@ (8004c90 <statemachine+0x858>)
 8004b8e:	f013 fb39 	bl	8018204 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004b92:	4a40      	ldr	r2, [pc, #256]	@ (8004c94 <statemachine+0x85c>)
 8004b94:	2301      	movs	r3, #1
 8004b96:	ca06      	ldmia	r2, {r1, r2}
 8004b98:	483d      	ldr	r0, [pc, #244]	@ (8004c90 <statemachine+0x858>)
 8004b9a:	f7ff f8b3 	bl	8003d04 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8004b9e:	212a      	movs	r1, #42	@ 0x2a
 8004ba0:	2020      	movs	r0, #32
 8004ba2:	f7ff f8d5 	bl	8003d50 <ssd1306_SetCursor>
							  ssd1306_WriteString("PageNb",Font_6x8,White);
 8004ba6:	4a3c      	ldr	r2, [pc, #240]	@ (8004c98 <statemachine+0x860>)
 8004ba8:	2301      	movs	r3, #1
 8004baa:	ca06      	ldmia	r2, {r1, r2}
 8004bac:	483b      	ldr	r0, [pc, #236]	@ (8004c9c <statemachine+0x864>)
 8004bae:	f7ff f8a9 	bl	8003d04 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca0 <statemachine+0x868>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f340 8158 	ble.w	8004e6c <statemachine+0xa34>
														  ecranstate++;
 8004bbc:	4b32      	ldr	r3, [pc, #200]	@ (8004c88 <statemachine+0x850>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	4b30      	ldr	r3, [pc, #192]	@ (8004c88 <statemachine+0x850>)
 8004bc6:	701a      	strb	r2, [r3, #0]
													  	BTN_B=0;
 8004bc8:	4b35      	ldr	r3, [pc, #212]	@ (8004ca0 <statemachine+0x868>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
													  	BTN_A=0;
 8004bce:	4b35      	ldr	r3, [pc, #212]	@ (8004ca4 <statemachine+0x86c>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
							  break;
 8004bd4:	e14a      	b.n	8004e6c <statemachine+0xa34>
							  snprintf((char  *)bufferscreen,50,"%0.3lf",distanceparcouru/1000);
 8004bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8004c84 <statemachine+0x84c>)
 8004bd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	4b31      	ldr	r3, [pc, #196]	@ (8004ca8 <statemachine+0x870>)
 8004be2:	f7fb fe0b 	bl	80007fc <__aeabi_ddiv>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	e9cd 2300 	strd	r2, r3, [sp]
 8004bee:	4a2f      	ldr	r2, [pc, #188]	@ (8004cac <statemachine+0x874>)
 8004bf0:	2132      	movs	r1, #50	@ 0x32
 8004bf2:	4827      	ldr	r0, [pc, #156]	@ (8004c90 <statemachine+0x858>)
 8004bf4:	f013 fb06 	bl	8018204 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004bf8:	4a26      	ldr	r2, [pc, #152]	@ (8004c94 <statemachine+0x85c>)
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	ca06      	ldmia	r2, {r1, r2}
 8004bfe:	4824      	ldr	r0, [pc, #144]	@ (8004c90 <statemachine+0x858>)
 8004c00:	f7ff f880 	bl	8003d04 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8004c04:	212a      	movs	r1, #42	@ 0x2a
 8004c06:	2020      	movs	r0, #32
 8004c08:	f7ff f8a2 	bl	8003d50 <ssd1306_SetCursor>
							  ssd1306_WriteString("Dist(km)",Font_6x8,White);
 8004c0c:	4a22      	ldr	r2, [pc, #136]	@ (8004c98 <statemachine+0x860>)
 8004c0e:	2301      	movs	r3, #1
 8004c10:	ca06      	ldmia	r2, {r1, r2}
 8004c12:	4827      	ldr	r0, [pc, #156]	@ (8004cb0 <statemachine+0x878>)
 8004c14:	f7ff f876 	bl	8003d04 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004c18:	4b21      	ldr	r3, [pc, #132]	@ (8004ca0 <statemachine+0x868>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f340 8127 	ble.w	8004e70 <statemachine+0xa38>
							  														  ecranstate++;
 8004c22:	4b19      	ldr	r3, [pc, #100]	@ (8004c88 <statemachine+0x850>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	3301      	adds	r3, #1
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	4b17      	ldr	r3, [pc, #92]	@ (8004c88 <statemachine+0x850>)
 8004c2c:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8004c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca0 <statemachine+0x868>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8004c34:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca4 <statemachine+0x86c>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
							  break;
 8004c3a:	e119      	b.n	8004e70 <statemachine+0xa38>
 8004c3c:	f3af 8000 	nop.w
 8004c40:	00000000 	.word	0x00000000
 8004c44:	40616000 	.word	0x40616000
 8004c48:	20000728 	.word	0x20000728
 8004c4c:	20000a3c 	.word	0x20000a3c
 8004c50:	200009a8 	.word	0x200009a8
 8004c54:	20001188 	.word	0x20001188
 8004c58:	200004dd 	.word	0x200004dd
 8004c5c:	20000a80 	.word	0x20000a80
 8004c60:	20000a70 	.word	0x20000a70
 8004c64:	20000a78 	.word	0x20000a78
 8004c68:	20000524 	.word	0x20000524
 8004c6c:	20000aec 	.word	0x20000aec
 8004c70:	20000798 	.word	0x20000798
 8004c74:	200007a0 	.word	0x200007a0
 8004c78:	200003e8 	.word	0x200003e8
 8004c7c:	200007a4 	.word	0x200007a4
 8004c80:	20000a54 	.word	0x20000a54
 8004c84:	20000a68 	.word	0x20000a68
 8004c88:	20000ae8 	.word	0x20000ae8
 8004c8c:	0801cda0 	.word	0x0801cda0
 8004c90:	200009c8 	.word	0x200009c8
 8004c94:	20000020 	.word	0x20000020
 8004c98:	20000018 	.word	0x20000018
 8004c9c:	0801cda4 	.word	0x0801cda4
 8004ca0:	2000076c 	.word	0x2000076c
 8004ca4:	20000768 	.word	0x20000768
 8004ca8:	408f4000 	.word	0x408f4000
 8004cac:	0801cdac 	.word	0x0801cdac
 8004cb0:	0801cdb4 	.word	0x0801cdb4
							  snprintf((char  *)bufferscreen,50,"%0.1f",myData.speed*3.6);
 8004cb4:	4b9c      	ldr	r3, [pc, #624]	@ (8004f28 <statemachine+0xaf0>)
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fb fc1d 	bl	80004f8 <__aeabi_f2d>
 8004cbe:	a398      	add	r3, pc, #608	@ (adr r3, 8004f20 <statemachine+0xae8>)
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f7fb fc70 	bl	80005a8 <__aeabi_dmul>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	e9cd 2300 	strd	r2, r3, [sp]
 8004cd0:	4a96      	ldr	r2, [pc, #600]	@ (8004f2c <statemachine+0xaf4>)
 8004cd2:	2132      	movs	r1, #50	@ 0x32
 8004cd4:	4896      	ldr	r0, [pc, #600]	@ (8004f30 <statemachine+0xaf8>)
 8004cd6:	f013 fa95 	bl	8018204 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004cda:	4a96      	ldr	r2, [pc, #600]	@ (8004f34 <statemachine+0xafc>)
 8004cdc:	2301      	movs	r3, #1
 8004cde:	ca06      	ldmia	r2, {r1, r2}
 8004ce0:	4893      	ldr	r0, [pc, #588]	@ (8004f30 <statemachine+0xaf8>)
 8004ce2:	f7ff f80f 	bl	8003d04 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8004ce6:	212a      	movs	r1, #42	@ 0x2a
 8004ce8:	2020      	movs	r0, #32
 8004cea:	f7ff f831 	bl	8003d50 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vit(kmh)",Font_6x8,White);
 8004cee:	4a92      	ldr	r2, [pc, #584]	@ (8004f38 <statemachine+0xb00>)
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	ca06      	ldmia	r2, {r1, r2}
 8004cf4:	4891      	ldr	r0, [pc, #580]	@ (8004f3c <statemachine+0xb04>)
 8004cf6:	f7ff f805 	bl	8003d04 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004cfa:	4b91      	ldr	r3, [pc, #580]	@ (8004f40 <statemachine+0xb08>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f340 80b8 	ble.w	8004e74 <statemachine+0xa3c>
							  														  ecranstate++;
 8004d04:	4b8f      	ldr	r3, [pc, #572]	@ (8004f44 <statemachine+0xb0c>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	4b8d      	ldr	r3, [pc, #564]	@ (8004f44 <statemachine+0xb0c>)
 8004d0e:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8004d10:	4b8b      	ldr	r3, [pc, #556]	@ (8004f40 <statemachine+0xb08>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8004d16:	4b8c      	ldr	r3, [pc, #560]	@ (8004f48 <statemachine+0xb10>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
							  break;
 8004d1c:	e0aa      	b.n	8004e74 <statemachine+0xa3c>
							  snprintf((char  *)bufferscreen,50,"%0.1lf",bmpalt);
 8004d1e:	4b8b      	ldr	r3, [pc, #556]	@ (8004f4c <statemachine+0xb14>)
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	e9cd 2300 	strd	r2, r3, [sp]
 8004d28:	4a89      	ldr	r2, [pc, #548]	@ (8004f50 <statemachine+0xb18>)
 8004d2a:	2132      	movs	r1, #50	@ 0x32
 8004d2c:	4880      	ldr	r0, [pc, #512]	@ (8004f30 <statemachine+0xaf8>)
 8004d2e:	f013 fa69 	bl	8018204 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004d32:	4a80      	ldr	r2, [pc, #512]	@ (8004f34 <statemachine+0xafc>)
 8004d34:	2301      	movs	r3, #1
 8004d36:	ca06      	ldmia	r2, {r1, r2}
 8004d38:	487d      	ldr	r0, [pc, #500]	@ (8004f30 <statemachine+0xaf8>)
 8004d3a:	f7fe ffe3 	bl	8003d04 <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,42);
 8004d3e:	212a      	movs	r1, #42	@ 0x2a
 8004d40:	2020      	movs	r0, #32
 8004d42:	f7ff f805 	bl	8003d50 <ssd1306_SetCursor>
							  							ssd1306_WriteString("alt(m)",Font_6x8,White);
 8004d46:	4a7c      	ldr	r2, [pc, #496]	@ (8004f38 <statemachine+0xb00>)
 8004d48:	2301      	movs	r3, #1
 8004d4a:	ca06      	ldmia	r2, {r1, r2}
 8004d4c:	4881      	ldr	r0, [pc, #516]	@ (8004f54 <statemachine+0xb1c>)
 8004d4e:	f7fe ffd9 	bl	8003d04 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004d52:	4b7b      	ldr	r3, [pc, #492]	@ (8004f40 <statemachine+0xb08>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f340 808e 	ble.w	8004e78 <statemachine+0xa40>
							  														  ecranstate++;
 8004d5c:	4b79      	ldr	r3, [pc, #484]	@ (8004f44 <statemachine+0xb0c>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	3301      	adds	r3, #1
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	4b77      	ldr	r3, [pc, #476]	@ (8004f44 <statemachine+0xb0c>)
 8004d66:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8004d68:	4b75      	ldr	r3, [pc, #468]	@ (8004f40 <statemachine+0xb08>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8004d6e:	4b76      	ldr	r3, [pc, #472]	@ (8004f48 <statemachine+0xb10>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
							  break;
 8004d74:	e080      	b.n	8004e78 <statemachine+0xa40>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vbat);
 8004d76:	4b78      	ldr	r3, [pc, #480]	@ (8004f58 <statemachine+0xb20>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fb fbbc 	bl	80004f8 <__aeabi_f2d>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	e9cd 2300 	strd	r2, r3, [sp]
 8004d88:	4a68      	ldr	r2, [pc, #416]	@ (8004f2c <statemachine+0xaf4>)
 8004d8a:	2132      	movs	r1, #50	@ 0x32
 8004d8c:	4868      	ldr	r0, [pc, #416]	@ (8004f30 <statemachine+0xaf8>)
 8004d8e:	f013 fa39 	bl	8018204 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004d92:	4a68      	ldr	r2, [pc, #416]	@ (8004f34 <statemachine+0xafc>)
 8004d94:	2301      	movs	r3, #1
 8004d96:	ca06      	ldmia	r2, {r1, r2}
 8004d98:	4865      	ldr	r0, [pc, #404]	@ (8004f30 <statemachine+0xaf8>)
 8004d9a:	f7fe ffb3 	bl	8003d04 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8004d9e:	212a      	movs	r1, #42	@ 0x2a
 8004da0:	2020      	movs	r0, #32
 8004da2:	f7fe ffd5 	bl	8003d50 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vbat(V)",Font_6x8,White);
 8004da6:	4a64      	ldr	r2, [pc, #400]	@ (8004f38 <statemachine+0xb00>)
 8004da8:	2301      	movs	r3, #1
 8004daa:	ca06      	ldmia	r2, {r1, r2}
 8004dac:	486b      	ldr	r0, [pc, #428]	@ (8004f5c <statemachine+0xb24>)
 8004dae:	f7fe ffa9 	bl	8003d04 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004db2:	4b63      	ldr	r3, [pc, #396]	@ (8004f40 <statemachine+0xb08>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	dd60      	ble.n	8004e7c <statemachine+0xa44>
							  														  ecranstate++;
 8004dba:	4b62      	ldr	r3, [pc, #392]	@ (8004f44 <statemachine+0xb0c>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	4b60      	ldr	r3, [pc, #384]	@ (8004f44 <statemachine+0xb0c>)
 8004dc4:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8004dc6:	4b5e      	ldr	r3, [pc, #376]	@ (8004f40 <statemachine+0xb08>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8004dcc:	4b5e      	ldr	r3, [pc, #376]	@ (8004f48 <statemachine+0xb10>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
							  break;
 8004dd2:	e053      	b.n	8004e7c <statemachine+0xa44>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vitmax*3.6);
 8004dd4:	4b62      	ldr	r3, [pc, #392]	@ (8004f60 <statemachine+0xb28>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fb fb8d 	bl	80004f8 <__aeabi_f2d>
 8004dde:	a350      	add	r3, pc, #320	@ (adr r3, 8004f20 <statemachine+0xae8>)
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f7fb fbe0 	bl	80005a8 <__aeabi_dmul>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	e9cd 2300 	strd	r2, r3, [sp]
 8004df0:	4a4e      	ldr	r2, [pc, #312]	@ (8004f2c <statemachine+0xaf4>)
 8004df2:	2132      	movs	r1, #50	@ 0x32
 8004df4:	484e      	ldr	r0, [pc, #312]	@ (8004f30 <statemachine+0xaf8>)
 8004df6:	f013 fa05 	bl	8018204 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004dfa:	4a4e      	ldr	r2, [pc, #312]	@ (8004f34 <statemachine+0xafc>)
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	ca06      	ldmia	r2, {r1, r2}
 8004e00:	484b      	ldr	r0, [pc, #300]	@ (8004f30 <statemachine+0xaf8>)
 8004e02:	f7fe ff7f 	bl	8003d04 <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,42);
 8004e06:	212a      	movs	r1, #42	@ 0x2a
 8004e08:	2020      	movs	r0, #32
 8004e0a:	f7fe ffa1 	bl	8003d50 <ssd1306_SetCursor>
							  							ssd1306_WriteString("MaxV",Font_6x8,White);
 8004e0e:	4a4a      	ldr	r2, [pc, #296]	@ (8004f38 <statemachine+0xb00>)
 8004e10:	2301      	movs	r3, #1
 8004e12:	ca06      	ldmia	r2, {r1, r2}
 8004e14:	4853      	ldr	r0, [pc, #332]	@ (8004f64 <statemachine+0xb2c>)
 8004e16:	f7fe ff75 	bl	8003d04 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004e1a:	4b49      	ldr	r3, [pc, #292]	@ (8004f40 <statemachine+0xb08>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	dd2e      	ble.n	8004e80 <statemachine+0xa48>
							  														ecranstate--;
 8004e22:	4b48      	ldr	r3, [pc, #288]	@ (8004f44 <statemachine+0xb0c>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	4b46      	ldr	r3, [pc, #280]	@ (8004f44 <statemachine+0xb0c>)
 8004e2c:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8004e2e:	4b45      	ldr	r3, [pc, #276]	@ (8004f44 <statemachine+0xb0c>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	4b43      	ldr	r3, [pc, #268]	@ (8004f44 <statemachine+0xb0c>)
 8004e38:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8004e3a:	4b42      	ldr	r3, [pc, #264]	@ (8004f44 <statemachine+0xb0c>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	4b40      	ldr	r3, [pc, #256]	@ (8004f44 <statemachine+0xb0c>)
 8004e44:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8004e46:	4b3f      	ldr	r3, [pc, #252]	@ (8004f44 <statemachine+0xb0c>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f44 <statemachine+0xb0c>)
 8004e50:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8004e52:	4b3c      	ldr	r3, [pc, #240]	@ (8004f44 <statemachine+0xb0c>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f44 <statemachine+0xb0c>)
 8004e5c:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8004e5e:	4b38      	ldr	r3, [pc, #224]	@ (8004f40 <statemachine+0xb08>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8004e64:	4b38      	ldr	r3, [pc, #224]	@ (8004f48 <statemachine+0xb10>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
							  break;
 8004e6a:	e009      	b.n	8004e80 <statemachine+0xa48>
							  break;
 8004e6c:	bf00      	nop
 8004e6e:	e008      	b.n	8004e82 <statemachine+0xa4a>
							  break;
 8004e70:	bf00      	nop
 8004e72:	e006      	b.n	8004e82 <statemachine+0xa4a>
							  break;
 8004e74:	bf00      	nop
 8004e76:	e004      	b.n	8004e82 <statemachine+0xa4a>
							  break;
 8004e78:	bf00      	nop
 8004e7a:	e002      	b.n	8004e82 <statemachine+0xa4a>
							  break;
 8004e7c:	bf00      	nop
 8004e7e:	e000      	b.n	8004e82 <statemachine+0xa4a>
							  break;
 8004e80:	bf00      	nop
						 	batterygauge(vbat,79, 42,1);
 8004e82:	4b35      	ldr	r3, [pc, #212]	@ (8004f58 <statemachine+0xb20>)
 8004e84:	edd3 7a00 	vldr	s15, [r3]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	212a      	movs	r1, #42	@ 0x2a
 8004e8c:	204f      	movs	r0, #79	@ 0x4f
 8004e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e92:	f7ff f8f5 	bl	8004080 <batterygauge>
						 	ssd1306_SetCursor(32,52);
 8004e96:	2134      	movs	r1, #52	@ 0x34
 8004e98:	2020      	movs	r0, #32
 8004e9a:	f7fe ff59 	bl	8003d50 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 8004e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8004f58 <statemachine+0xb20>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fb fb28 	bl	80004f8 <__aeabi_f2d>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	e9cd 2300 	strd	r2, r3, [sp]
 8004eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8004f68 <statemachine+0xb30>)
 8004eb2:	2132      	movs	r1, #50	@ 0x32
 8004eb4:	481e      	ldr	r0, [pc, #120]	@ (8004f30 <statemachine+0xaf8>)
 8004eb6:	f013 f9a5 	bl	8018204 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004eba:	4a1f      	ldr	r2, [pc, #124]	@ (8004f38 <statemachine+0xb00>)
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	ca06      	ldmia	r2, {r1, r2}
 8004ec0:	481b      	ldr	r0, [pc, #108]	@ (8004f30 <statemachine+0xaf8>)
 8004ec2:	f7fe ff1f 	bl	8003d04 <ssd1306_WriteString>
						 	ssd1306_SetCursor(65,52);
 8004ec6:	2134      	movs	r1, #52	@ 0x34
 8004ec8:	2041      	movs	r0, #65	@ 0x41
 8004eca:	f7fe ff41 	bl	8003d50 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 8004ece:	4b16      	ldr	r3, [pc, #88]	@ (8004f28 <statemachine+0xaf0>)
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed2:	4a26      	ldr	r2, [pc, #152]	@ (8004f6c <statemachine+0xb34>)
 8004ed4:	2132      	movs	r1, #50	@ 0x32
 8004ed6:	4816      	ldr	r0, [pc, #88]	@ (8004f30 <statemachine+0xaf8>)
 8004ed8:	f013 f994 	bl	8018204 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004edc:	4a16      	ldr	r2, [pc, #88]	@ (8004f38 <statemachine+0xb00>)
 8004ede:	2301      	movs	r3, #1
 8004ee0:	ca06      	ldmia	r2, {r1, r2}
 8004ee2:	4813      	ldr	r0, [pc, #76]	@ (8004f30 <statemachine+0xaf8>)
 8004ee4:	f7fe ff0e 	bl	8003d04 <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8004ee8:	4b21      	ldr	r3, [pc, #132]	@ (8004f70 <statemachine+0xb38>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f340 809c 	ble.w	800502a <statemachine+0xbf2>
						  						  balisestate--;
 8004ef2:	4b20      	ldr	r3, [pc, #128]	@ (8004f74 <statemachine+0xb3c>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	4b1e      	ldr	r3, [pc, #120]	@ (8004f74 <statemachine+0xb3c>)
 8004efc:	701a      	strb	r2, [r3, #0]
						  						  BTN_B_LONG=0;
 8004efe:	4b1c      	ldr	r3, [pc, #112]	@ (8004f70 <statemachine+0xb38>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
						  						  BTN_A=0;
 8004f04:	4b10      	ldr	r3, [pc, #64]	@ (8004f48 <statemachine+0xb10>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
						  						  HAL_TIM_Base_Stop_IT(&htim17);
 8004f0a:	481b      	ldr	r0, [pc, #108]	@ (8004f78 <statemachine+0xb40>)
 8004f0c:	f00a f9de 	bl	800f2cc <HAL_TIM_Base_Stop_IT>
						  						HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8004f10:	2200      	movs	r2, #0
 8004f12:	2102      	movs	r1, #2
 8004f14:	4819      	ldr	r0, [pc, #100]	@ (8004f7c <statemachine+0xb44>)
 8004f16:	f003 ffe7 	bl	8008ee8 <HAL_GPIO_WritePin>
						  break;
 8004f1a:	e086      	b.n	800502a <statemachine+0xbf2>
 8004f1c:	f3af 8000 	nop.w
 8004f20:	cccccccd 	.word	0xcccccccd
 8004f24:	400ccccc 	.word	0x400ccccc
 8004f28:	20000728 	.word	0x20000728
 8004f2c:	0801cd44 	.word	0x0801cd44
 8004f30:	200009c8 	.word	0x200009c8
 8004f34:	20000020 	.word	0x20000020
 8004f38:	20000018 	.word	0x20000018
 8004f3c:	0801cd4c 	.word	0x0801cd4c
 8004f40:	2000076c 	.word	0x2000076c
 8004f44:	20000ae8 	.word	0x20000ae8
 8004f48:	20000768 	.word	0x20000768
 8004f4c:	200003e8 	.word	0x200003e8
 8004f50:	0801cdc0 	.word	0x0801cdc0
 8004f54:	0801cdc8 	.word	0x0801cdc8
 8004f58:	200007a0 	.word	0x200007a0
 8004f5c:	0801cdd0 	.word	0x0801cdd0
 8004f60:	20000a3c 	.word	0x20000a3c
 8004f64:	0801cdd8 	.word	0x0801cdd8
 8004f68:	0801cde0 	.word	0x0801cde0
 8004f6c:	0801cde8 	.word	0x0801cde8
 8004f70:	20000a9c 	.word	0x20000a9c
 8004f74:	200004dd 	.word	0x200004dd
 8004f78:	20001188 	.word	0x20001188
 8004f7c:	48000400 	.word	0x48000400
						  ssd1306_SetCursor(32,32);
 8004f80:	2120      	movs	r1, #32
 8004f82:	2020      	movs	r0, #32
 8004f84:	f7fe fee4 	bl	8003d50 <ssd1306_SetCursor>
						  ssd1306_WriteString("fin de",Font_6x8,White);
 8004f88:	4a98      	ldr	r2, [pc, #608]	@ (80051ec <statemachine+0xdb4>)
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	ca06      	ldmia	r2, {r1, r2}
 8004f8e:	4898      	ldr	r0, [pc, #608]	@ (80051f0 <statemachine+0xdb8>)
 8004f90:	f7fe feb8 	bl	8003d04 <ssd1306_WriteString>
						  ssd1306_SetCursor(32,42);
 8004f94:	212a      	movs	r1, #42	@ 0x2a
 8004f96:	2020      	movs	r0, #32
 8004f98:	f7fe feda 	bl	8003d50 <ssd1306_SetCursor>
						  ssd1306_WriteString("memoire",Font_6x8,White);
 8004f9c:	4a93      	ldr	r2, [pc, #588]	@ (80051ec <statemachine+0xdb4>)
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	ca06      	ldmia	r2, {r1, r2}
 8004fa2:	4894      	ldr	r0, [pc, #592]	@ (80051f4 <statemachine+0xdbc>)
 8004fa4:	f7fe feae 	bl	8003d04 <ssd1306_WriteString>
						  ssd1306_SetCursor(32,52);
 8004fa8:	2134      	movs	r1, #52	@ 0x34
 8004faa:	2020      	movs	r0, #32
 8004fac:	f7fe fed0 	bl	8003d50 <ssd1306_SetCursor>
						  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 8004fb0:	4b91      	ldr	r3, [pc, #580]	@ (80051f8 <statemachine+0xdc0>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b91      	ldr	r3, [pc, #580]	@ (80051fc <statemachine+0xdc4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	4a90      	ldr	r2, [pc, #576]	@ (8005200 <statemachine+0xdc8>)
 8004fbe:	2132      	movs	r1, #50	@ 0x32
 8004fc0:	4890      	ldr	r0, [pc, #576]	@ (8005204 <statemachine+0xdcc>)
 8004fc2:	f013 f91f 	bl	8018204 <sniprintf>
						  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004fc6:	4a89      	ldr	r2, [pc, #548]	@ (80051ec <statemachine+0xdb4>)
 8004fc8:	2301      	movs	r3, #1
 8004fca:	ca06      	ldmia	r2, {r1, r2}
 8004fcc:	488d      	ldr	r0, [pc, #564]	@ (8005204 <statemachine+0xdcc>)
 8004fce:	f7fe fe99 	bl	8003d04 <ssd1306_WriteString>
						  if(BTN_A>=1){
 8004fd2:	4b8d      	ldr	r3, [pc, #564]	@ (8005208 <statemachine+0xdd0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	dd0e      	ble.n	8004ff8 <statemachine+0xbc0>
						  				  			 	state++;
 8004fda:	4b8c      	ldr	r3, [pc, #560]	@ (800520c <statemachine+0xdd4>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	4b8a      	ldr	r3, [pc, #552]	@ (800520c <statemachine+0xdd4>)
 8004fe4:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8004fe6:	4b88      	ldr	r3, [pc, #544]	@ (8005208 <statemachine+0xdd0>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8004fec:	4b88      	ldr	r3, [pc, #544]	@ (8005210 <statemachine+0xdd8>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
						  				  			settimeen=0;
 8004ff2:	4b88      	ldr	r3, [pc, #544]	@ (8005214 <statemachine+0xddc>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8004ff8:	4b87      	ldr	r3, [pc, #540]	@ (8005218 <statemachine+0xde0>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f341 807d 	ble.w	80060fc <statemachine+0x1cc4>
						  				 									 									  			 	state--;
 8005002:	4b82      	ldr	r3, [pc, #520]	@ (800520c <statemachine+0xdd4>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	3b01      	subs	r3, #1
 8005008:	b2da      	uxtb	r2, r3
 800500a:	4b80      	ldr	r3, [pc, #512]	@ (800520c <statemachine+0xdd4>)
 800500c:	701a      	strb	r2, [r3, #0]
						  				 									 									  			 	BTN_A=0;
 800500e:	4b7e      	ldr	r3, [pc, #504]	@ (8005208 <statemachine+0xdd0>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_B=0;
 8005014:	4b7e      	ldr	r3, [pc, #504]	@ (8005210 <statemachine+0xdd8>)
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_A_LONG=0;
 800501a:	4b7f      	ldr	r3, [pc, #508]	@ (8005218 <statemachine+0xde0>)
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
					  break;
 8005020:	f001 b86c 	b.w	80060fc <statemachine+0x1cc4>
						  break;
 8005024:	bf00      	nop
 8005026:	f001 b869 	b.w	80060fc <statemachine+0x1cc4>
						  break;
 800502a:	bf00      	nop
					  break;
 800502c:	f001 b866 	b.w	80060fc <statemachine+0x1cc4>

	case STATE_POS:
			  ssd1306_Fill(Black);
 8005030:	2000      	movs	r0, #0
 8005032:	f7fe fd4b 	bl	8003acc <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8005036:	4979      	ldr	r1, [pc, #484]	@ (800521c <statemachine+0xde4>)
 8005038:	4879      	ldr	r0, [pc, #484]	@ (8005220 <statemachine+0xde8>)
 800503a:	f7fd fadf 	bl	80025fc <nmea_parse>
			  switch(posstate){
 800503e:	4b79      	ldr	r3, [pc, #484]	@ (8005224 <statemachine+0xdec>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b06      	cmp	r3, #6
 8005044:	f200 83d1 	bhi.w	80057ea <statemachine+0x13b2>
 8005048:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <statemachine+0xc18>)
 800504a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504e:	bf00      	nop
 8005050:	0800506d 	.word	0x0800506d
 8005054:	08005117 	.word	0x08005117
 8005058:	08005251 	.word	0x08005251
 800505c:	0800530f 	.word	0x0800530f
 8005060:	080053cd 	.word	0x080053cd
 8005064:	08005525 	.word	0x08005525
 8005068:	08005607 	.word	0x08005607

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 32);
 800506c:	2120      	movs	r1, #32
 800506e:	2020      	movs	r0, #32
 8005070:	f7fe fe6e 	bl	8003d50 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 8005074:	4a6c      	ldr	r2, [pc, #432]	@ (8005228 <statemachine+0xdf0>)
 8005076:	210f      	movs	r1, #15
 8005078:	4862      	ldr	r0, [pc, #392]	@ (8005204 <statemachine+0xdcc>)
 800507a:	f013 f8c3 	bl	8018204 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800507e:	4a5b      	ldr	r2, [pc, #364]	@ (80051ec <statemachine+0xdb4>)
 8005080:	2301      	movs	r3, #1
 8005082:	ca06      	ldmia	r2, {r1, r2}
 8005084:	485f      	ldr	r0, [pc, #380]	@ (8005204 <statemachine+0xdcc>)
 8005086:	f7fe fe3d 	bl	8003d04 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 800508a:	4b65      	ldr	r3, [pc, #404]	@ (8005220 <statemachine+0xde8>)
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	e9cd 2300 	strd	r2, r3, [sp]
 8005094:	4a65      	ldr	r2, [pc, #404]	@ (800522c <statemachine+0xdf4>)
 8005096:	210f      	movs	r1, #15
 8005098:	485a      	ldr	r0, [pc, #360]	@ (8005204 <statemachine+0xdcc>)
 800509a:	f013 f8b3 	bl	8018204 <sniprintf>
						ssd1306_SetCursor(32, 40);
 800509e:	2128      	movs	r1, #40	@ 0x28
 80050a0:	2020      	movs	r0, #32
 80050a2:	f7fe fe55 	bl	8003d50 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80050a6:	4a51      	ldr	r2, [pc, #324]	@ (80051ec <statemachine+0xdb4>)
 80050a8:	2301      	movs	r3, #1
 80050aa:	ca06      	ldmia	r2, {r1, r2}
 80050ac:	4855      	ldr	r0, [pc, #340]	@ (8005204 <statemachine+0xdcc>)
 80050ae:	f7fe fe29 	bl	8003d04 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 80050b2:	4a5f      	ldr	r2, [pc, #380]	@ (8005230 <statemachine+0xdf8>)
 80050b4:	210f      	movs	r1, #15
 80050b6:	4853      	ldr	r0, [pc, #332]	@ (8005204 <statemachine+0xdcc>)
 80050b8:	f013 f8a4 	bl	8018204 <sniprintf>
						ssd1306_SetCursor(32, 48);
 80050bc:	2130      	movs	r1, #48	@ 0x30
 80050be:	2020      	movs	r0, #32
 80050c0:	f7fe fe46 	bl	8003d50 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80050c4:	4a49      	ldr	r2, [pc, #292]	@ (80051ec <statemachine+0xdb4>)
 80050c6:	2301      	movs	r3, #1
 80050c8:	ca06      	ldmia	r2, {r1, r2}
 80050ca:	484e      	ldr	r0, [pc, #312]	@ (8005204 <statemachine+0xdcc>)
 80050cc:	f7fe fe1a 	bl	8003d04 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 80050d0:	4b53      	ldr	r3, [pc, #332]	@ (8005220 <statemachine+0xde8>)
 80050d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80050d6:	e9cd 2300 	strd	r2, r3, [sp]
 80050da:	4a54      	ldr	r2, [pc, #336]	@ (800522c <statemachine+0xdf4>)
 80050dc:	210f      	movs	r1, #15
 80050de:	4849      	ldr	r0, [pc, #292]	@ (8005204 <statemachine+0xdcc>)
 80050e0:	f013 f890 	bl	8018204 <sniprintf>
						ssd1306_SetCursor(32, 56);
 80050e4:	2138      	movs	r1, #56	@ 0x38
 80050e6:	2020      	movs	r0, #32
 80050e8:	f7fe fe32 	bl	8003d50 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80050ec:	4a3f      	ldr	r2, [pc, #252]	@ (80051ec <statemachine+0xdb4>)
 80050ee:	2301      	movs	r3, #1
 80050f0:	ca06      	ldmia	r2, {r1, r2}
 80050f2:	4844      	ldr	r0, [pc, #272]	@ (8005204 <statemachine+0xdcc>)
 80050f4:	f7fe fe06 	bl	8003d04 <ssd1306_WriteString>
				  if(BTN_B>=1){
 80050f8:	4b45      	ldr	r3, [pc, #276]	@ (8005210 <statemachine+0xdd8>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f340 8339 	ble.w	8005774 <statemachine+0x133c>
					  posstate++;
 8005102:	4b48      	ldr	r3, [pc, #288]	@ (8005224 <statemachine+0xdec>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	3301      	adds	r3, #1
 8005108:	b2da      	uxtb	r2, r3
 800510a:	4b46      	ldr	r3, [pc, #280]	@ (8005224 <statemachine+0xdec>)
 800510c:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 800510e:	4b40      	ldr	r3, [pc, #256]	@ (8005210 <statemachine+0xdd8>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
				  }



				  break;
 8005114:	e32e      	b.n	8005774 <statemachine+0x133c>
			  case STATE_INFO:
				ssd1306_Fill(Black);
 8005116:	2000      	movs	r0, #0
 8005118:	f7fe fcd8 	bl	8003acc <ssd1306_Fill>
				nmea_parse(&myData, DataBuffer);
 800511c:	493f      	ldr	r1, [pc, #252]	@ (800521c <statemachine+0xde4>)
 800511e:	4840      	ldr	r0, [pc, #256]	@ (8005220 <statemachine+0xde8>)
 8005120:	f7fd fa6c 	bl	80025fc <nmea_parse>
				snprintf((char *)bufferscreen,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8005124:	4b3e      	ldr	r3, [pc, #248]	@ (8005220 <statemachine+0xde8>)
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	4618      	mov	r0, r3
 800512a:	f7fb f9e5 	bl	80004f8 <__aeabi_f2d>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	e9cd 2300 	strd	r2, r3, [sp]
 8005136:	4a3f      	ldr	r2, [pc, #252]	@ (8005234 <statemachine+0xdfc>)
 8005138:	210f      	movs	r1, #15
 800513a:	4832      	ldr	r0, [pc, #200]	@ (8005204 <statemachine+0xdcc>)
 800513c:	f013 f862 	bl	8018204 <sniprintf>
				ssd1306_SetCursor(32, 32);
 8005140:	2120      	movs	r1, #32
 8005142:	2020      	movs	r0, #32
 8005144:	f7fe fe04 	bl	8003d50 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005148:	4a3b      	ldr	r2, [pc, #236]	@ (8005238 <statemachine+0xe00>)
 800514a:	2301      	movs	r3, #1
 800514c:	ca06      	ldmia	r2, {r1, r2}
 800514e:	482d      	ldr	r0, [pc, #180]	@ (8005204 <statemachine+0xdcc>)
 8005150:	f7fe fdd8 	bl	8003d04 <ssd1306_WriteString>
				snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 8005154:	4b39      	ldr	r3, [pc, #228]	@ (800523c <statemachine+0xe04>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4618      	mov	r0, r3
 800515a:	f7fb f9cd 	bl	80004f8 <__aeabi_f2d>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	e9cd 2300 	strd	r2, r3, [sp]
 8005166:	4a36      	ldr	r2, [pc, #216]	@ (8005240 <statemachine+0xe08>)
 8005168:	2114      	movs	r1, #20
 800516a:	4826      	ldr	r0, [pc, #152]	@ (8005204 <statemachine+0xdcc>)
 800516c:	f013 f84a 	bl	8018204 <sniprintf>
				ssd1306_SetCursor(32, 42);
 8005170:	212a      	movs	r1, #42	@ 0x2a
 8005172:	2020      	movs	r0, #32
 8005174:	f7fe fdec 	bl	8003d50 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005178:	4a2f      	ldr	r2, [pc, #188]	@ (8005238 <statemachine+0xe00>)
 800517a:	2301      	movs	r3, #1
 800517c:	ca06      	ldmia	r2, {r1, r2}
 800517e:	4821      	ldr	r0, [pc, #132]	@ (8005204 <statemachine+0xdcc>)
 8005180:	f7fe fdc0 	bl	8003d04 <ssd1306_WriteString>
				ssd1306_SetCursor(32, 52);
 8005184:	2134      	movs	r1, #52	@ 0x34
 8005186:	2020      	movs	r0, #32
 8005188:	f7fe fde2 	bl	8003d50 <ssd1306_SetCursor>
				snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 800518c:	4b2d      	ldr	r3, [pc, #180]	@ (8005244 <statemachine+0xe0c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f7fb f9b1 	bl	80004f8 <__aeabi_f2d>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	e9cd 2300 	strd	r2, r3, [sp]
 800519e:	4a2a      	ldr	r2, [pc, #168]	@ (8005248 <statemachine+0xe10>)
 80051a0:	210f      	movs	r1, #15
 80051a2:	4818      	ldr	r0, [pc, #96]	@ (8005204 <statemachine+0xdcc>)
 80051a4:	f013 f82e 	bl	8018204 <sniprintf>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80051a8:	4a23      	ldr	r2, [pc, #140]	@ (8005238 <statemachine+0xe00>)
 80051aa:	2301      	movs	r3, #1
 80051ac:	ca06      	ldmia	r2, {r1, r2}
 80051ae:	4815      	ldr	r0, [pc, #84]	@ (8005204 <statemachine+0xdcc>)
 80051b0:	f7fe fda8 	bl	8003d04 <ssd1306_WriteString>
				 if(BTN_B>=1){
 80051b4:	4b16      	ldr	r3, [pc, #88]	@ (8005210 <statemachine+0xdd8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	dd08      	ble.n	80051ce <statemachine+0xd96>
								  					  posstate++;
 80051bc:	4b19      	ldr	r3, [pc, #100]	@ (8005224 <statemachine+0xdec>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	4b17      	ldr	r3, [pc, #92]	@ (8005224 <statemachine+0xdec>)
 80051c6:	701a      	strb	r2, [r3, #0]
								  					  BTN_B=0;
 80051c8:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <statemachine+0xdd8>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
								  				  }
								  if(BTN_B_LONG>=1){
 80051ce:	4b1f      	ldr	r3, [pc, #124]	@ (800524c <statemachine+0xe14>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f340 82d0 	ble.w	8005778 <statemachine+0x1340>
													  posstate--;
 80051d8:	4b12      	ldr	r3, [pc, #72]	@ (8005224 <statemachine+0xdec>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	3b01      	subs	r3, #1
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <statemachine+0xdec>)
 80051e2:	701a      	strb	r2, [r3, #0]
													BTN_B_LONG=0;
 80051e4:	4b19      	ldr	r3, [pc, #100]	@ (800524c <statemachine+0xe14>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
												}

				  break;
 80051ea:	e2c5      	b.n	8005778 <statemachine+0x1340>
 80051ec:	20000018 	.word	0x20000018
 80051f0:	0801cdf0 	.word	0x0801cdf0
 80051f4:	0801cdf8 	.word	0x0801cdf8
 80051f8:	200009a4 	.word	0x200009a4
 80051fc:	200009a8 	.word	0x200009a8
 8005200:	0801ce00 	.word	0x0801ce00
 8005204:	200009c8 	.word	0x200009c8
 8005208:	20000768 	.word	0x20000768
 800520c:	200004d8 	.word	0x200004d8
 8005210:	2000076c 	.word	0x2000076c
 8005214:	20000a88 	.word	0x20000a88
 8005218:	20000aa0 	.word	0x20000aa0
 800521c:	20000524 	.word	0x20000524
 8005220:	20000728 	.word	0x20000728
 8005224:	200004da 	.word	0x200004da
 8005228:	0801ce08 	.word	0x0801ce08
 800522c:	0801ce14 	.word	0x0801ce14
 8005230:	0801ce1c 	.word	0x0801ce1c
 8005234:	0801ce28 	.word	0x0801ce28
 8005238:	20000020 	.word	0x20000020
 800523c:	200007a0 	.word	0x200007a0
 8005240:	0801ce34 	.word	0x0801ce34
 8005244:	20000798 	.word	0x20000798
 8005248:	0801ce40 	.word	0x0801ce40
 800524c:	20000a9c 	.word	0x20000a9c
			  case STATE_LAT:
						ssd1306_SetCursor(32, 32);
 8005250:	2120      	movs	r1, #32
 8005252:	2020      	movs	r0, #32
 8005254:	f7fe fd7c 	bl	8003d50 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 8005258:	4aa1      	ldr	r2, [pc, #644]	@ (80054e0 <statemachine+0x10a8>)
 800525a:	210f      	movs	r1, #15
 800525c:	48a1      	ldr	r0, [pc, #644]	@ (80054e4 <statemachine+0x10ac>)
 800525e:	f012 ffd1 	bl	8018204 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005262:	4aa1      	ldr	r2, [pc, #644]	@ (80054e8 <statemachine+0x10b0>)
 8005264:	2301      	movs	r3, #1
 8005266:	ca06      	ldmia	r2, {r1, r2}
 8005268:	489e      	ldr	r0, [pc, #632]	@ (80054e4 <statemachine+0x10ac>)
 800526a:	f7fe fd4b 	bl	8003d04 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 800526e:	4b9f      	ldr	r3, [pc, #636]	@ (80054ec <statemachine+0x10b4>)
 8005270:	7a1b      	ldrb	r3, [r3, #8]
 8005272:	4a9f      	ldr	r2, [pc, #636]	@ (80054f0 <statemachine+0x10b8>)
 8005274:	210f      	movs	r1, #15
 8005276:	489b      	ldr	r0, [pc, #620]	@ (80054e4 <statemachine+0x10ac>)
 8005278:	f012 ffc4 	bl	8018204 <sniprintf>
						ssd1306_SetCursor(32, 40);
 800527c:	2128      	movs	r1, #40	@ 0x28
 800527e:	2020      	movs	r0, #32
 8005280:	f7fe fd66 	bl	8003d50 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005284:	4a98      	ldr	r2, [pc, #608]	@ (80054e8 <statemachine+0x10b0>)
 8005286:	2301      	movs	r3, #1
 8005288:	ca06      	ldmia	r2, {r1, r2}
 800528a:	4896      	ldr	r0, [pc, #600]	@ (80054e4 <statemachine+0x10ac>)
 800528c:	f7fe fd3a 	bl	8003d04 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 8005290:	4a98      	ldr	r2, [pc, #608]	@ (80054f4 <statemachine+0x10bc>)
 8005292:	210f      	movs	r1, #15
 8005294:	4893      	ldr	r0, [pc, #588]	@ (80054e4 <statemachine+0x10ac>)
 8005296:	f012 ffb5 	bl	8018204 <sniprintf>
						ssd1306_SetCursor(32, 48);
 800529a:	2130      	movs	r1, #48	@ 0x30
 800529c:	2020      	movs	r0, #32
 800529e:	f7fe fd57 	bl	8003d50 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80052a2:	4a91      	ldr	r2, [pc, #580]	@ (80054e8 <statemachine+0x10b0>)
 80052a4:	2301      	movs	r3, #1
 80052a6:	ca06      	ldmia	r2, {r1, r2}
 80052a8:	488e      	ldr	r0, [pc, #568]	@ (80054e4 <statemachine+0x10ac>)
 80052aa:	f7fe fd2b 	bl	8003d04 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 80052ae:	4b8f      	ldr	r3, [pc, #572]	@ (80054ec <statemachine+0x10b4>)
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	e9cd 2300 	strd	r2, r3, [sp]
 80052b8:	4a8f      	ldr	r2, [pc, #572]	@ (80054f8 <statemachine+0x10c0>)
 80052ba:	210f      	movs	r1, #15
 80052bc:	4889      	ldr	r0, [pc, #548]	@ (80054e4 <statemachine+0x10ac>)
 80052be:	f012 ffa1 	bl	8018204 <sniprintf>
						ssd1306_SetCursor(32, 56);
 80052c2:	2138      	movs	r1, #56	@ 0x38
 80052c4:	2020      	movs	r0, #32
 80052c6:	f7fe fd43 	bl	8003d50 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80052ca:	4a87      	ldr	r2, [pc, #540]	@ (80054e8 <statemachine+0x10b0>)
 80052cc:	2301      	movs	r3, #1
 80052ce:	ca06      	ldmia	r2, {r1, r2}
 80052d0:	4884      	ldr	r0, [pc, #528]	@ (80054e4 <statemachine+0x10ac>)
 80052d2:	f7fe fd17 	bl	8003d04 <ssd1306_WriteString>


				  if(BTN_B>=1){
 80052d6:	4b89      	ldr	r3, [pc, #548]	@ (80054fc <statemachine+0x10c4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	dd08      	ble.n	80052f0 <statemachine+0xeb8>
				  					  posstate++;
 80052de:	4b88      	ldr	r3, [pc, #544]	@ (8005500 <statemachine+0x10c8>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	3301      	adds	r3, #1
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	4b86      	ldr	r3, [pc, #536]	@ (8005500 <statemachine+0x10c8>)
 80052e8:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80052ea:	4b84      	ldr	r3, [pc, #528]	@ (80054fc <statemachine+0x10c4>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80052f0:	4b84      	ldr	r3, [pc, #528]	@ (8005504 <statemachine+0x10cc>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f340 8241 	ble.w	800577c <statemachine+0x1344>
									  posstate--;
 80052fa:	4b81      	ldr	r3, [pc, #516]	@ (8005500 <statemachine+0x10c8>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	3b01      	subs	r3, #1
 8005300:	b2da      	uxtb	r2, r3
 8005302:	4b7f      	ldr	r3, [pc, #508]	@ (8005500 <statemachine+0x10c8>)
 8005304:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8005306:	4b7f      	ldr	r3, [pc, #508]	@ (8005504 <statemachine+0x10cc>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
								}



				  break;
 800530c:	e236      	b.n	800577c <statemachine+0x1344>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 32);
 800530e:	2120      	movs	r1, #32
 8005310:	2020      	movs	r0, #32
 8005312:	f7fe fd1d 	bl	8003d50 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 8005316:	4a7c      	ldr	r2, [pc, #496]	@ (8005508 <statemachine+0x10d0>)
 8005318:	210f      	movs	r1, #15
 800531a:	4872      	ldr	r0, [pc, #456]	@ (80054e4 <statemachine+0x10ac>)
 800531c:	f012 ff72 	bl	8018204 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005320:	4a71      	ldr	r2, [pc, #452]	@ (80054e8 <statemachine+0x10b0>)
 8005322:	2301      	movs	r3, #1
 8005324:	ca06      	ldmia	r2, {r1, r2}
 8005326:	486f      	ldr	r0, [pc, #444]	@ (80054e4 <statemachine+0x10ac>)
 8005328:	f7fe fcec 	bl	8003d04 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 800532c:	4b6f      	ldr	r3, [pc, #444]	@ (80054ec <statemachine+0x10b4>)
 800532e:	7e1b      	ldrb	r3, [r3, #24]
 8005330:	4a6f      	ldr	r2, [pc, #444]	@ (80054f0 <statemachine+0x10b8>)
 8005332:	210f      	movs	r1, #15
 8005334:	486b      	ldr	r0, [pc, #428]	@ (80054e4 <statemachine+0x10ac>)
 8005336:	f012 ff65 	bl	8018204 <sniprintf>
					ssd1306_SetCursor(32, 40);
 800533a:	2128      	movs	r1, #40	@ 0x28
 800533c:	2020      	movs	r0, #32
 800533e:	f7fe fd07 	bl	8003d50 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005342:	4a69      	ldr	r2, [pc, #420]	@ (80054e8 <statemachine+0x10b0>)
 8005344:	2301      	movs	r3, #1
 8005346:	ca06      	ldmia	r2, {r1, r2}
 8005348:	4866      	ldr	r0, [pc, #408]	@ (80054e4 <statemachine+0x10ac>)
 800534a:	f7fe fcdb 	bl	8003d04 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 800534e:	4a6f      	ldr	r2, [pc, #444]	@ (800550c <statemachine+0x10d4>)
 8005350:	210f      	movs	r1, #15
 8005352:	4864      	ldr	r0, [pc, #400]	@ (80054e4 <statemachine+0x10ac>)
 8005354:	f012 ff56 	bl	8018204 <sniprintf>
					ssd1306_SetCursor(32, 48);
 8005358:	2130      	movs	r1, #48	@ 0x30
 800535a:	2020      	movs	r0, #32
 800535c:	f7fe fcf8 	bl	8003d50 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005360:	4a61      	ldr	r2, [pc, #388]	@ (80054e8 <statemachine+0x10b0>)
 8005362:	2301      	movs	r3, #1
 8005364:	ca06      	ldmia	r2, {r1, r2}
 8005366:	485f      	ldr	r0, [pc, #380]	@ (80054e4 <statemachine+0x10ac>)
 8005368:	f7fe fccc 	bl	8003d04 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 800536c:	4b5f      	ldr	r3, [pc, #380]	@ (80054ec <statemachine+0x10b4>)
 800536e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005372:	e9cd 2300 	strd	r2, r3, [sp]
 8005376:	4a60      	ldr	r2, [pc, #384]	@ (80054f8 <statemachine+0x10c0>)
 8005378:	210f      	movs	r1, #15
 800537a:	485a      	ldr	r0, [pc, #360]	@ (80054e4 <statemachine+0x10ac>)
 800537c:	f012 ff42 	bl	8018204 <sniprintf>
					ssd1306_SetCursor(32, 56);
 8005380:	2138      	movs	r1, #56	@ 0x38
 8005382:	2020      	movs	r0, #32
 8005384:	f7fe fce4 	bl	8003d50 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005388:	4a57      	ldr	r2, [pc, #348]	@ (80054e8 <statemachine+0x10b0>)
 800538a:	2301      	movs	r3, #1
 800538c:	ca06      	ldmia	r2, {r1, r2}
 800538e:	4855      	ldr	r0, [pc, #340]	@ (80054e4 <statemachine+0x10ac>)
 8005390:	f7fe fcb8 	bl	8003d04 <ssd1306_WriteString>

				  if(BTN_B>=1){
 8005394:	4b59      	ldr	r3, [pc, #356]	@ (80054fc <statemachine+0x10c4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	dd08      	ble.n	80053ae <statemachine+0xf76>
				  					  posstate++;
 800539c:	4b58      	ldr	r3, [pc, #352]	@ (8005500 <statemachine+0x10c8>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	3301      	adds	r3, #1
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	4b56      	ldr	r3, [pc, #344]	@ (8005500 <statemachine+0x10c8>)
 80053a6:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80053a8:	4b54      	ldr	r3, [pc, #336]	@ (80054fc <statemachine+0x10c4>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80053ae:	4b55      	ldr	r3, [pc, #340]	@ (8005504 <statemachine+0x10cc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f340 81e4 	ble.w	8005780 <statemachine+0x1348>
									  posstate--;
 80053b8:	4b51      	ldr	r3, [pc, #324]	@ (8005500 <statemachine+0x10c8>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	3b01      	subs	r3, #1
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005500 <statemachine+0x10c8>)
 80053c2:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 80053c4:	4b4f      	ldr	r3, [pc, #316]	@ (8005504 <statemachine+0x10cc>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
								}

				  break;
 80053ca:	e1d9      	b.n	8005780 <statemachine+0x1348>
			  case STATE_ALT:


				  						ssd1306_SetCursor(32, 32);
 80053cc:	2120      	movs	r1, #32
 80053ce:	2020      	movs	r0, #32
 80053d0:	f7fe fcbe 	bl	8003d50 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 80053d4:	4a4e      	ldr	r2, [pc, #312]	@ (8005510 <statemachine+0x10d8>)
 80053d6:	210f      	movs	r1, #15
 80053d8:	4842      	ldr	r0, [pc, #264]	@ (80054e4 <statemachine+0x10ac>)
 80053da:	f012 ff13 	bl	8018204 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80053de:	4a42      	ldr	r2, [pc, #264]	@ (80054e8 <statemachine+0x10b0>)
 80053e0:	2301      	movs	r3, #1
 80053e2:	ca06      	ldmia	r2, {r1, r2}
 80053e4:	483f      	ldr	r0, [pc, #252]	@ (80054e4 <statemachine+0x10ac>)
 80053e6:	f7fe fc8d 	bl	8003d04 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80053ea:	4b40      	ldr	r3, [pc, #256]	@ (80054ec <statemachine+0x10b4>)
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fb f882 	bl	80004f8 <__aeabi_f2d>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	e9cd 2300 	strd	r2, r3, [sp]
 80053fc:	4a45      	ldr	r2, [pc, #276]	@ (8005514 <statemachine+0x10dc>)
 80053fe:	210f      	movs	r1, #15
 8005400:	4838      	ldr	r0, [pc, #224]	@ (80054e4 <statemachine+0x10ac>)
 8005402:	f012 feff 	bl	8018204 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8005406:	2128      	movs	r1, #40	@ 0x28
 8005408:	2020      	movs	r0, #32
 800540a:	f7fe fca1 	bl	8003d50 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800540e:	4a36      	ldr	r2, [pc, #216]	@ (80054e8 <statemachine+0x10b0>)
 8005410:	2301      	movs	r3, #1
 8005412:	ca06      	ldmia	r2, {r1, r2}
 8005414:	4833      	ldr	r0, [pc, #204]	@ (80054e4 <statemachine+0x10ac>)
 8005416:	f7fe fc75 	bl	8003d04 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 800541a:	4a3f      	ldr	r2, [pc, #252]	@ (8005518 <statemachine+0x10e0>)
 800541c:	210f      	movs	r1, #15
 800541e:	4831      	ldr	r0, [pc, #196]	@ (80054e4 <statemachine+0x10ac>)
 8005420:	f012 fef0 	bl	8018204 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8005424:	2130      	movs	r1, #48	@ 0x30
 8005426:	2020      	movs	r0, #32
 8005428:	f7fe fc92 	bl	8003d50 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800542c:	4a2e      	ldr	r2, [pc, #184]	@ (80054e8 <statemachine+0x10b0>)
 800542e:	2301      	movs	r3, #1
 8005430:	ca06      	ldmia	r2, {r1, r2}
 8005432:	482c      	ldr	r0, [pc, #176]	@ (80054e4 <statemachine+0x10ac>)
 8005434:	f7fe fc66 	bl	8003d04 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8005438:	4b2c      	ldr	r3, [pc, #176]	@ (80054ec <statemachine+0x10b4>)
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	4618      	mov	r0, r3
 800543e:	f7fb f85b 	bl	80004f8 <__aeabi_f2d>
 8005442:	a325      	add	r3, pc, #148	@ (adr r3, 80054d8 <statemachine+0x10a0>)
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	f7fb f8ae 	bl	80005a8 <__aeabi_dmul>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	f7fb fba0 	bl	8000b98 <__aeabi_d2f>
 8005458:	4603      	mov	r3, r0
 800545a:	ee00 3a10 	vmov	s0, r3
 800545e:	f015 fd9b 	bl	801af98 <expf>
 8005462:	eef0 7a40 	vmov.f32	s15, s0
 8005466:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800551c <statemachine+0x10e4>
 800546a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800546e:	ee17 0a90 	vmov	r0, s15
 8005472:	f7fb f841 	bl	80004f8 <__aeabi_f2d>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	e9cd 2300 	strd	r2, r3, [sp]
 800547e:	4a28      	ldr	r2, [pc, #160]	@ (8005520 <statemachine+0x10e8>)
 8005480:	210f      	movs	r1, #15
 8005482:	4818      	ldr	r0, [pc, #96]	@ (80054e4 <statemachine+0x10ac>)
 8005484:	f012 febe 	bl	8018204 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8005488:	2138      	movs	r1, #56	@ 0x38
 800548a:	2020      	movs	r0, #32
 800548c:	f7fe fc60 	bl	8003d50 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005490:	4a15      	ldr	r2, [pc, #84]	@ (80054e8 <statemachine+0x10b0>)
 8005492:	2301      	movs	r3, #1
 8005494:	ca06      	ldmia	r2, {r1, r2}
 8005496:	4813      	ldr	r0, [pc, #76]	@ (80054e4 <statemachine+0x10ac>)
 8005498:	f7fe fc34 	bl	8003d04 <ssd1306_WriteString>

				  if(BTN_B>=1){
 800549c:	4b17      	ldr	r3, [pc, #92]	@ (80054fc <statemachine+0x10c4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	dd08      	ble.n	80054b6 <statemachine+0x107e>
				  					posstate++;
 80054a4:	4b16      	ldr	r3, [pc, #88]	@ (8005500 <statemachine+0x10c8>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	4b14      	ldr	r3, [pc, #80]	@ (8005500 <statemachine+0x10c8>)
 80054ae:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 80054b0:	4b12      	ldr	r3, [pc, #72]	@ (80054fc <statemachine+0x10c4>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80054b6:	4b13      	ldr	r3, [pc, #76]	@ (8005504 <statemachine+0x10cc>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f340 8162 	ble.w	8005784 <statemachine+0x134c>
					  posstate--;
 80054c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005500 <statemachine+0x10c8>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005500 <statemachine+0x10c8>)
 80054ca:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 80054cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005504 <statemachine+0x10cc>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
				}
				  break;
 80054d2:	e157      	b.n	8005784 <statemachine+0x134c>
 80054d4:	f3af 8000 	nop.w
 80054d8:	fb798882 	.word	0xfb798882
 80054dc:	bf1e1818 	.word	0xbf1e1818
 80054e0:	0801ce4c 	.word	0x0801ce4c
 80054e4:	200009c8 	.word	0x200009c8
 80054e8:	20000018 	.word	0x20000018
 80054ec:	20000728 	.word	0x20000728
 80054f0:	0801ce58 	.word	0x0801ce58
 80054f4:	0801ce08 	.word	0x0801ce08
 80054f8:	0801ce14 	.word	0x0801ce14
 80054fc:	2000076c 	.word	0x2000076c
 8005500:	200004da 	.word	0x200004da
 8005504:	20000a9c 	.word	0x20000a9c
 8005508:	0801ce5c 	.word	0x0801ce5c
 800550c:	0801ce1c 	.word	0x0801ce1c
 8005510:	0801ce68 	.word	0x0801ce68
 8005514:	0801ce74 	.word	0x0801ce74
 8005518:	0801ce7c 	.word	0x0801ce7c
 800551c:	447a0000 	.word	0x447a0000
 8005520:	0801ce88 	.word	0x0801ce88
			  case STATE_ALTBARO:

				  	  	  	  	  	  	bmp581_read_precise_normal(bmp581);
 8005524:	4b99      	ldr	r3, [pc, #612]	@ (800578c <statemachine+0x1354>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f7fb ff85 	bl	8001438 <bmp581_read_precise_normal>
				  						ssd1306_SetCursor(32, 32);
 800552e:	2120      	movs	r1, #32
 8005530:	2020      	movs	r0, #32
 8005532:	f7fe fc0d 	bl	8003d50 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "baroalt:");
 8005536:	4a96      	ldr	r2, [pc, #600]	@ (8005790 <statemachine+0x1358>)
 8005538:	210f      	movs	r1, #15
 800553a:	4896      	ldr	r0, [pc, #600]	@ (8005794 <statemachine+0x135c>)
 800553c:	f012 fe62 	bl	8018204 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005540:	4a95      	ldr	r2, [pc, #596]	@ (8005798 <statemachine+0x1360>)
 8005542:	2301      	movs	r3, #1
 8005544:	ca06      	ldmia	r2, {r1, r2}
 8005546:	4893      	ldr	r0, [pc, #588]	@ (8005794 <statemachine+0x135c>)
 8005548:	f7fe fbdc 	bl	8003d04 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.2lf m",bmpalt);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 800554c:	4b93      	ldr	r3, [pc, #588]	@ (800579c <statemachine+0x1364>)
 800554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005552:	e9cd 2300 	strd	r2, r3, [sp]
 8005556:	4a92      	ldr	r2, [pc, #584]	@ (80057a0 <statemachine+0x1368>)
 8005558:	210f      	movs	r1, #15
 800555a:	488e      	ldr	r0, [pc, #568]	@ (8005794 <statemachine+0x135c>)
 800555c:	f012 fe52 	bl	8018204 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8005560:	2128      	movs	r1, #40	@ 0x28
 8005562:	2020      	movs	r0, #32
 8005564:	f7fe fbf4 	bl	8003d50 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005568:	4a8b      	ldr	r2, [pc, #556]	@ (8005798 <statemachine+0x1360>)
 800556a:	2301      	movs	r3, #1
 800556c:	ca06      	ldmia	r2, {r1, r2}
 800556e:	4889      	ldr	r0, [pc, #548]	@ (8005794 <statemachine+0x135c>)
 8005570:	f7fe fbc8 	bl	8003d04 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "baropress:");
 8005574:	4a8b      	ldr	r2, [pc, #556]	@ (80057a4 <statemachine+0x136c>)
 8005576:	210f      	movs	r1, #15
 8005578:	4886      	ldr	r0, [pc, #536]	@ (8005794 <statemachine+0x135c>)
 800557a:	f012 fe43 	bl	8018204 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 800557e:	2130      	movs	r1, #48	@ 0x30
 8005580:	2020      	movs	r0, #32
 8005582:	f7fe fbe5 	bl	8003d50 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005586:	4a84      	ldr	r2, [pc, #528]	@ (8005798 <statemachine+0x1360>)
 8005588:	2301      	movs	r3, #1
 800558a:	ca06      	ldmia	r2, {r1, r2}
 800558c:	4881      	ldr	r0, [pc, #516]	@ (8005794 <statemachine+0x135c>)
 800558e:	f7fe fbb9 	bl	8003d04 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.3lfkPa",bmppress/1000.0);
 8005592:	4b85      	ldr	r3, [pc, #532]	@ (80057a8 <statemachine+0x1370>)
 8005594:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	4b83      	ldr	r3, [pc, #524]	@ (80057ac <statemachine+0x1374>)
 800559e:	f7fb f92d 	bl	80007fc <__aeabi_ddiv>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	e9cd 2300 	strd	r2, r3, [sp]
 80055aa:	4a81      	ldr	r2, [pc, #516]	@ (80057b0 <statemachine+0x1378>)
 80055ac:	210f      	movs	r1, #15
 80055ae:	4879      	ldr	r0, [pc, #484]	@ (8005794 <statemachine+0x135c>)
 80055b0:	f012 fe28 	bl	8018204 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80055b4:	2138      	movs	r1, #56	@ 0x38
 80055b6:	2020      	movs	r0, #32
 80055b8:	f7fe fbca 	bl	8003d50 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80055bc:	4a76      	ldr	r2, [pc, #472]	@ (8005798 <statemachine+0x1360>)
 80055be:	2301      	movs	r3, #1
 80055c0:	ca06      	ldmia	r2, {r1, r2}
 80055c2:	4874      	ldr	r0, [pc, #464]	@ (8005794 <statemachine+0x135c>)
 80055c4:	f7fe fb9e 	bl	8003d04 <ssd1306_WriteString>
				  						HAL_Delay(200);
 80055c8:	20c8      	movs	r0, #200	@ 0xc8
 80055ca:	f001 fe13 	bl	80071f4 <HAL_Delay>

				  if(BTN_B>=1){
 80055ce:	4b79      	ldr	r3, [pc, #484]	@ (80057b4 <statemachine+0x137c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	dd08      	ble.n	80055e8 <statemachine+0x11b0>
				  					posstate++;
 80055d6:	4b78      	ldr	r3, [pc, #480]	@ (80057b8 <statemachine+0x1380>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	3301      	adds	r3, #1
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	4b76      	ldr	r3, [pc, #472]	@ (80057b8 <statemachine+0x1380>)
 80055e0:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 80055e2:	4b74      	ldr	r3, [pc, #464]	@ (80057b4 <statemachine+0x137c>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80055e8:	4b74      	ldr	r3, [pc, #464]	@ (80057bc <statemachine+0x1384>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f340 80cb 	ble.w	8005788 <statemachine+0x1350>
					  posstate--;
 80055f2:	4b71      	ldr	r3, [pc, #452]	@ (80057b8 <statemachine+0x1380>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	4b6f      	ldr	r3, [pc, #444]	@ (80057b8 <statemachine+0x1380>)
 80055fc:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 80055fe:	4b6f      	ldr	r3, [pc, #444]	@ (80057bc <statemachine+0x1384>)
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
				}
				  break;
 8005604:	e0c0      	b.n	8005788 <statemachine+0x1350>
			  case STATE_HEURE:
			  			  ssd1306_Fill(Black);
 8005606:	2000      	movs	r0, #0
 8005608:	f7fe fa60 	bl	8003acc <ssd1306_Fill>
			  			  nmea_parse(&myData, DataBuffer);
 800560c:	496c      	ldr	r1, [pc, #432]	@ (80057c0 <statemachine+0x1388>)
 800560e:	486d      	ldr	r0, [pc, #436]	@ (80057c4 <statemachine+0x138c>)
 8005610:	f7fc fff4 	bl	80025fc <nmea_parse>
			  			  if(settimeen==0){
 8005614:	4b6c      	ldr	r3, [pc, #432]	@ (80057c8 <statemachine+0x1390>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d141      	bne.n	80056a0 <statemachine+0x1268>

			  							settimeen=1;
 800561c:	4b6a      	ldr	r3, [pc, #424]	@ (80057c8 <statemachine+0x1390>)
 800561e:	2201      	movs	r2, #1
 8005620:	601a      	str	r2, [r3, #0]
			  							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8005622:	4b68      	ldr	r3, [pc, #416]	@ (80057c4 <statemachine+0x138c>)
 8005624:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	b2db      	uxtb	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	0092      	lsls	r2, r2, #2
 8005632:	4413      	add	r3, r2
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	b2da      	uxtb	r2, r3
 8005638:	4b62      	ldr	r3, [pc, #392]	@ (80057c4 <statemachine+0x138c>)
 800563a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	b2db      	uxtb	r3, r3
 8005644:	4413      	add	r3, r2
 8005646:	b2da      	uxtb	r2, r3
 8005648:	4b60      	ldr	r3, [pc, #384]	@ (80057cc <statemachine+0x1394>)
 800564a:	701a      	strb	r2, [r3, #0]
			  							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 800564c:	4b5d      	ldr	r3, [pc, #372]	@ (80057c4 <statemachine+0x138c>)
 800564e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	b2db      	uxtb	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	0092      	lsls	r2, r2, #2
 800565c:	4413      	add	r3, r2
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	b2da      	uxtb	r2, r3
 8005662:	4b58      	ldr	r3, [pc, #352]	@ (80057c4 <statemachine+0x138c>)
 8005664:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	b2db      	uxtb	r3, r3
 800566e:	4413      	add	r3, r2
 8005670:	b2da      	uxtb	r2, r3
 8005672:	4b57      	ldr	r3, [pc, #348]	@ (80057d0 <statemachine+0x1398>)
 8005674:	701a      	strb	r2, [r3, #0]
			  							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8005676:	4b53      	ldr	r3, [pc, #332]	@ (80057c4 <statemachine+0x138c>)
 8005678:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800567c:	f003 030f 	and.w	r3, r3, #15
 8005680:	b2db      	uxtb	r3, r3
 8005682:	461a      	mov	r2, r3
 8005684:	0092      	lsls	r2, r2, #2
 8005686:	4413      	add	r3, r2
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	b2da      	uxtb	r2, r3
 800568c:	4b4d      	ldr	r3, [pc, #308]	@ (80057c4 <statemachine+0x138c>)
 800568e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	b2db      	uxtb	r3, r3
 8005698:	4413      	add	r3, r2
 800569a:	b2da      	uxtb	r2, r3
 800569c:	4b4d      	ldr	r3, [pc, #308]	@ (80057d4 <statemachine+0x139c>)
 800569e:	701a      	strb	r2, [r3, #0]


			  					  }


			  				  ssd1306_SetCursor(32, 32);
 80056a0:	2120      	movs	r1, #32
 80056a2:	2020      	movs	r0, #32
 80056a4:	f7fe fb54 	bl	8003d50 <ssd1306_SetCursor>
			  				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 80056a8:	4a3b      	ldr	r2, [pc, #236]	@ (8005798 <statemachine+0x1360>)
 80056aa:	2301      	movs	r3, #1
 80056ac:	ca06      	ldmia	r2, {r1, r2}
 80056ae:	484a      	ldr	r0, [pc, #296]	@ (80057d8 <statemachine+0x13a0>)
 80056b0:	f7fe fb28 	bl	8003d04 <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 42);
 80056b4:	212a      	movs	r1, #42	@ 0x2a
 80056b6:	2020      	movs	r0, #32
 80056b8:	f7fe fb4a 	bl	8003d50 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 80056bc:	4b43      	ldr	r3, [pc, #268]	@ (80057cc <statemachine+0x1394>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b43      	ldr	r3, [pc, #268]	@ (80057d0 <statemachine+0x1398>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	4613      	mov	r3, r2
 80056ca:	4a44      	ldr	r2, [pc, #272]	@ (80057dc <statemachine+0x13a4>)
 80056cc:	210f      	movs	r1, #15
 80056ce:	4831      	ldr	r0, [pc, #196]	@ (8005794 <statemachine+0x135c>)
 80056d0:	f012 fd98 	bl	8018204 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80056d4:	4a42      	ldr	r2, [pc, #264]	@ (80057e0 <statemachine+0x13a8>)
 80056d6:	2301      	movs	r3, #1
 80056d8:	ca06      	ldmia	r2, {r1, r2}
 80056da:	482e      	ldr	r0, [pc, #184]	@ (8005794 <statemachine+0x135c>)
 80056dc:	f7fe fb12 	bl	8003d04 <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 52);
 80056e0:	2134      	movs	r1, #52	@ 0x34
 80056e2:	2020      	movs	r0, #32
 80056e4:	f7fe fb34 	bl	8003d50 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 80056e8:	4b3a      	ldr	r3, [pc, #232]	@ (80057d4 <statemachine+0x139c>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	4a3d      	ldr	r2, [pc, #244]	@ (80057e4 <statemachine+0x13ac>)
 80056ee:	210f      	movs	r1, #15
 80056f0:	4828      	ldr	r0, [pc, #160]	@ (8005794 <statemachine+0x135c>)
 80056f2:	f012 fd87 	bl	8018204 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80056f6:	4a3a      	ldr	r2, [pc, #232]	@ (80057e0 <statemachine+0x13a8>)
 80056f8:	2301      	movs	r3, #1
 80056fa:	ca06      	ldmia	r2, {r1, r2}
 80056fc:	4825      	ldr	r0, [pc, #148]	@ (8005794 <statemachine+0x135c>)
 80056fe:	f7fe fb01 	bl	8003d04 <ssd1306_WriteString>
			  				if(BTN_B>=1){
 8005702:	4b2c      	ldr	r3, [pc, #176]	@ (80057b4 <statemachine+0x137c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	dd26      	ble.n	8005758 <statemachine+0x1320>
			  					posstate--;
 800570a:	4b2b      	ldr	r3, [pc, #172]	@ (80057b8 <statemachine+0x1380>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	3b01      	subs	r3, #1
 8005710:	b2da      	uxtb	r2, r3
 8005712:	4b29      	ldr	r3, [pc, #164]	@ (80057b8 <statemachine+0x1380>)
 8005714:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005716:	4b28      	ldr	r3, [pc, #160]	@ (80057b8 <statemachine+0x1380>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	3b01      	subs	r3, #1
 800571c:	b2da      	uxtb	r2, r3
 800571e:	4b26      	ldr	r3, [pc, #152]	@ (80057b8 <statemachine+0x1380>)
 8005720:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005722:	4b25      	ldr	r3, [pc, #148]	@ (80057b8 <statemachine+0x1380>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	3b01      	subs	r3, #1
 8005728:	b2da      	uxtb	r2, r3
 800572a:	4b23      	ldr	r3, [pc, #140]	@ (80057b8 <statemachine+0x1380>)
 800572c:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 800572e:	4b22      	ldr	r3, [pc, #136]	@ (80057b8 <statemachine+0x1380>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	3b01      	subs	r3, #1
 8005734:	b2da      	uxtb	r2, r3
 8005736:	4b20      	ldr	r3, [pc, #128]	@ (80057b8 <statemachine+0x1380>)
 8005738:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 800573a:	4b1f      	ldr	r3, [pc, #124]	@ (80057b8 <statemachine+0x1380>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	3b01      	subs	r3, #1
 8005740:	b2da      	uxtb	r2, r3
 8005742:	4b1d      	ldr	r3, [pc, #116]	@ (80057b8 <statemachine+0x1380>)
 8005744:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005746:	4b1c      	ldr	r3, [pc, #112]	@ (80057b8 <statemachine+0x1380>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	3b01      	subs	r3, #1
 800574c:	b2da      	uxtb	r2, r3
 800574e:	4b1a      	ldr	r3, [pc, #104]	@ (80057b8 <statemachine+0x1380>)
 8005750:	701a      	strb	r2, [r3, #0]
			  					BTN_B=0;
 8005752:	4b18      	ldr	r3, [pc, #96]	@ (80057b4 <statemachine+0x137c>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
			  				}
			  				if(BTN_B_LONG>=1){
 8005758:	4b18      	ldr	r3, [pc, #96]	@ (80057bc <statemachine+0x1384>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	dd43      	ble.n	80057e8 <statemachine+0x13b0>
			  							  					posstate--;
 8005760:	4b15      	ldr	r3, [pc, #84]	@ (80057b8 <statemachine+0x1380>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	3b01      	subs	r3, #1
 8005766:	b2da      	uxtb	r2, r3
 8005768:	4b13      	ldr	r3, [pc, #76]	@ (80057b8 <statemachine+0x1380>)
 800576a:	701a      	strb	r2, [r3, #0]
			  							  					BTN_B_LONG=0;
 800576c:	4b13      	ldr	r3, [pc, #76]	@ (80057bc <statemachine+0x1384>)
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
			  							  				}
			  			break;
 8005772:	e039      	b.n	80057e8 <statemachine+0x13b0>
				  break;
 8005774:	bf00      	nop
 8005776:	e038      	b.n	80057ea <statemachine+0x13b2>
				  break;
 8005778:	bf00      	nop
 800577a:	e036      	b.n	80057ea <statemachine+0x13b2>
				  break;
 800577c:	bf00      	nop
 800577e:	e034      	b.n	80057ea <statemachine+0x13b2>
				  break;
 8005780:	bf00      	nop
 8005782:	e032      	b.n	80057ea <statemachine+0x13b2>
				  break;
 8005784:	bf00      	nop
 8005786:	e030      	b.n	80057ea <statemachine+0x13b2>
				  break;
 8005788:	bf00      	nop
 800578a:	e02e      	b.n	80057ea <statemachine+0x13b2>
 800578c:	20000aec 	.word	0x20000aec
 8005790:	0801ce94 	.word	0x0801ce94
 8005794:	200009c8 	.word	0x200009c8
 8005798:	20000018 	.word	0x20000018
 800579c:	200003e8 	.word	0x200003e8
 80057a0:	0801cea0 	.word	0x0801cea0
 80057a4:	0801ceac 	.word	0x0801ceac
 80057a8:	200003e0 	.word	0x200003e0
 80057ac:	408f4000 	.word	0x408f4000
 80057b0:	0801ceb8 	.word	0x0801ceb8
 80057b4:	2000076c 	.word	0x2000076c
 80057b8:	200004da 	.word	0x200004da
 80057bc:	20000a9c 	.word	0x20000a9c
 80057c0:	20000524 	.word	0x20000524
 80057c4:	20000728 	.word	0x20000728
 80057c8:	20000a88 	.word	0x20000a88
 80057cc:	20000a85 	.word	0x20000a85
 80057d0:	20000a86 	.word	0x20000a86
 80057d4:	20000a84 	.word	0x20000a84
 80057d8:	0801cec4 	.word	0x0801cec4
 80057dc:	0801cecc 	.word	0x0801cecc
 80057e0:	20000020 	.word	0x20000020
 80057e4:	0801ced8 	.word	0x0801ced8
			  			break;
 80057e8:	bf00      	nop
			  }

					if(BTN_A>=1){
 80057ea:	4b96      	ldr	r3, [pc, #600]	@ (8005a44 <statemachine+0x160c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	dd0b      	ble.n	800580a <statemachine+0x13d2>
							state++;
 80057f2:	4b95      	ldr	r3, [pc, #596]	@ (8005a48 <statemachine+0x1610>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	3301      	adds	r3, #1
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	4b93      	ldr	r3, [pc, #588]	@ (8005a48 <statemachine+0x1610>)
 80057fc:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 80057fe:	4b91      	ldr	r3, [pc, #580]	@ (8005a44 <statemachine+0x160c>)
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8005804:	4b91      	ldr	r3, [pc, #580]	@ (8005a4c <statemachine+0x1614>)
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 800580a:	4b91      	ldr	r3, [pc, #580]	@ (8005a50 <statemachine+0x1618>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	f340 8476 	ble.w	8006100 <statemachine+0x1cc8>
									 									 									  			 	state--;
 8005814:	4b8c      	ldr	r3, [pc, #560]	@ (8005a48 <statemachine+0x1610>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	3b01      	subs	r3, #1
 800581a:	b2da      	uxtb	r2, r3
 800581c:	4b8a      	ldr	r3, [pc, #552]	@ (8005a48 <statemachine+0x1610>)
 800581e:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 8005820:	4b88      	ldr	r3, [pc, #544]	@ (8005a44 <statemachine+0x160c>)
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 8005826:	4b89      	ldr	r3, [pc, #548]	@ (8005a4c <statemachine+0x1614>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 800582c:	4b88      	ldr	r3, [pc, #544]	@ (8005a50 <statemachine+0x1618>)
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 8005832:	f000 bc65 	b.w	8006100 <statemachine+0x1cc8>
		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8005836:	2000      	movs	r0, #0
 8005838:	f7fe f948 	bl	8003acc <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 800583c:	2120      	movs	r1, #32
 800583e:	2020      	movs	r0, #32
 8005840:	f7fe fa86 	bl	8003d50 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8005844:	4a83      	ldr	r2, [pc, #524]	@ (8005a54 <statemachine+0x161c>)
 8005846:	2301      	movs	r3, #1
 8005848:	ca06      	ldmia	r2, {r1, r2}
 800584a:	4883      	ldr	r0, [pc, #524]	@ (8005a58 <statemachine+0x1620>)
 800584c:	f7fe fa5a 	bl	8003d04 <ssd1306_WriteString>
			  ssd1306_SetCursor(32,40);
 8005850:	2128      	movs	r1, #40	@ 0x28
 8005852:	2020      	movs	r0, #32
 8005854:	f7fe fa7c 	bl	8003d50 <ssd1306_SetCursor>

			  switch(chronostate){
 8005858:	4b80      	ldr	r3, [pc, #512]	@ (8005a5c <statemachine+0x1624>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b02      	cmp	r3, #2
 800585e:	d03b      	beq.n	80058d8 <statemachine+0x14a0>
 8005860:	2b02      	cmp	r3, #2
 8005862:	dc6a      	bgt.n	800593a <statemachine+0x1502>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <statemachine+0x1436>
 8005868:	2b01      	cmp	r3, #1
 800586a:	d01d      	beq.n	80058a8 <statemachine+0x1470>
 800586c:	e065      	b.n	800593a <statemachine+0x1502>
			  case STATE_RESET:
				  min=0;
 800586e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a60 <statemachine+0x1628>)
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8005876:	4b7b      	ldr	r3, [pc, #492]	@ (8005a64 <statemachine+0x162c>)
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
				  calctime=0;
 800587e:	4b7a      	ldr	r3, [pc, #488]	@ (8005a68 <statemachine+0x1630>)
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 8005884:	4b71      	ldr	r3, [pc, #452]	@ (8005a4c <statemachine+0x1614>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	dd51      	ble.n	8005930 <statemachine+0x14f8>
				  		chronostate++;
 800588c:	4b73      	ldr	r3, [pc, #460]	@ (8005a5c <statemachine+0x1624>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	3301      	adds	r3, #1
 8005892:	b2da      	uxtb	r2, r3
 8005894:	4b71      	ldr	r3, [pc, #452]	@ (8005a5c <statemachine+0x1624>)
 8005896:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005898:	4b6c      	ldr	r3, [pc, #432]	@ (8005a4c <statemachine+0x1614>)
 800589a:	2200      	movs	r2, #0
 800589c:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 800589e:	4b73      	ldr	r3, [pc, #460]	@ (8005a6c <statemachine+0x1634>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a73      	ldr	r2, [pc, #460]	@ (8005a70 <statemachine+0x1638>)
 80058a4:	6013      	str	r3, [r2, #0]

				  }


				  break;
 80058a6:	e043      	b.n	8005930 <statemachine+0x14f8>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 80058a8:	4b70      	ldr	r3, [pc, #448]	@ (8005a6c <statemachine+0x1634>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	4b70      	ldr	r3, [pc, #448]	@ (8005a70 <statemachine+0x1638>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	1ad2      	subs	r2, r2, r3
 80058b2:	4b70      	ldr	r3, [pc, #448]	@ (8005a74 <statemachine+0x163c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4413      	add	r3, r2
 80058b8:	4a6b      	ldr	r2, [pc, #428]	@ (8005a68 <statemachine+0x1630>)
 80058ba:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 80058bc:	4b63      	ldr	r3, [pc, #396]	@ (8005a4c <statemachine+0x1614>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	dd37      	ble.n	8005934 <statemachine+0x14fc>
				  		chronostate++;
 80058c4:	4b65      	ldr	r3, [pc, #404]	@ (8005a5c <statemachine+0x1624>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	3301      	adds	r3, #1
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	4b63      	ldr	r3, [pc, #396]	@ (8005a5c <statemachine+0x1624>)
 80058ce:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 80058d0:	4b5e      	ldr	r3, [pc, #376]	@ (8005a4c <statemachine+0x1614>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
			  }


				  break;
 80058d6:	e02d      	b.n	8005934 <statemachine+0x14fc>
			  case STATE_PAUSE:
				  timehandler=calctime;
 80058d8:	4b63      	ldr	r3, [pc, #396]	@ (8005a68 <statemachine+0x1630>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a65      	ldr	r2, [pc, #404]	@ (8005a74 <statemachine+0x163c>)
 80058de:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 80058e0:	4b5a      	ldr	r3, [pc, #360]	@ (8005a4c <statemachine+0x1614>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	dd0c      	ble.n	8005902 <statemachine+0x14ca>
				  			chronostate--;
 80058e8:	4b5c      	ldr	r3, [pc, #368]	@ (8005a5c <statemachine+0x1624>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	4b5a      	ldr	r3, [pc, #360]	@ (8005a5c <statemachine+0x1624>)
 80058f2:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 80058f4:	4b55      	ldr	r3, [pc, #340]	@ (8005a4c <statemachine+0x1614>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 80058fa:	4b5c      	ldr	r3, [pc, #368]	@ (8005a6c <statemachine+0x1634>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a5c      	ldr	r2, [pc, #368]	@ (8005a70 <statemachine+0x1638>)
 8005900:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 8005902:	4b5d      	ldr	r3, [pc, #372]	@ (8005a78 <statemachine+0x1640>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	dd16      	ble.n	8005938 <statemachine+0x1500>
				  				  	chronostate--;
 800590a:	4b54      	ldr	r3, [pc, #336]	@ (8005a5c <statemachine+0x1624>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	3b01      	subs	r3, #1
 8005910:	b2da      	uxtb	r2, r3
 8005912:	4b52      	ldr	r3, [pc, #328]	@ (8005a5c <statemachine+0x1624>)
 8005914:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 8005916:	4b51      	ldr	r3, [pc, #324]	@ (8005a5c <statemachine+0x1624>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	3b01      	subs	r3, #1
 800591c:	b2da      	uxtb	r2, r3
 800591e:	4b4f      	ldr	r3, [pc, #316]	@ (8005a5c <statemachine+0x1624>)
 8005920:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 8005922:	4b55      	ldr	r3, [pc, #340]	@ (8005a78 <statemachine+0x1640>)
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 8005928:	4b52      	ldr	r3, [pc, #328]	@ (8005a74 <statemachine+0x163c>)
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 800592e:	e003      	b.n	8005938 <statemachine+0x1500>
				  break;
 8005930:	bf00      	nop
 8005932:	e002      	b.n	800593a <statemachine+0x1502>
				  break;
 8005934:	bf00      	nop
 8005936:	e000      	b.n	800593a <statemachine+0x1502>
				  break;
 8005938:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 800593a:	4b4b      	ldr	r3, [pc, #300]	@ (8005a68 <statemachine+0x1630>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005946:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8005a7c <statemachine+0x1644>
 800594a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800594e:	ee16 0a90 	vmov	r0, s13
 8005952:	f7fa fdd1 	bl	80004f8 <__aeabi_f2d>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	ec43 2b10 	vmov	d0, r2, r3
 800595e:	f015 fc87 	bl	801b270 <floor>
 8005962:	ec53 2b10 	vmov	r2, r3, d0
 8005966:	4610      	mov	r0, r2
 8005968:	4619      	mov	r1, r3
 800596a:	f7fb f915 	bl	8000b98 <__aeabi_d2f>
 800596e:	4603      	mov	r3, r0
 8005970:	4a3b      	ldr	r2, [pc, #236]	@ (8005a60 <statemachine+0x1628>)
 8005972:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8005974:	4b3c      	ldr	r3, [pc, #240]	@ (8005a68 <statemachine+0x1630>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	ee07 3a90 	vmov	s15, r3
 800597c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005980:	4b37      	ldr	r3, [pc, #220]	@ (8005a60 <statemachine+0x1628>)
 8005982:	edd3 7a00 	vldr	s15, [r3]
 8005986:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005a7c <statemachine+0x1644>
 800598a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800598e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005992:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8005a80 <statemachine+0x1648>
 8005996:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800599a:	4b32      	ldr	r3, [pc, #200]	@ (8005a64 <statemachine+0x162c>)
 800599c:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 80059a0:	4b2f      	ldr	r3, [pc, #188]	@ (8005a60 <statemachine+0x1628>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fa fda7 	bl	80004f8 <__aeabi_f2d>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	e9cd 2300 	strd	r2, r3, [sp]
 80059b2:	4a34      	ldr	r2, [pc, #208]	@ (8005a84 <statemachine+0x164c>)
 80059b4:	210f      	movs	r1, #15
 80059b6:	4834      	ldr	r0, [pc, #208]	@ (8005a88 <statemachine+0x1650>)
 80059b8:	f012 fc24 	bl	8018204 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80059bc:	4a33      	ldr	r2, [pc, #204]	@ (8005a8c <statemachine+0x1654>)
 80059be:	2301      	movs	r3, #1
 80059c0:	ca06      	ldmia	r2, {r1, r2}
 80059c2:	4831      	ldr	r0, [pc, #196]	@ (8005a88 <statemachine+0x1650>)
 80059c4:	f7fe f99e 	bl	8003d04 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 80059c8:	2132      	movs	r1, #50	@ 0x32
 80059ca:	2020      	movs	r0, #32
 80059cc:	f7fe f9c0 	bl	8003d50 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 80059d0:	4b24      	ldr	r3, [pc, #144]	@ (8005a64 <statemachine+0x162c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fa fd8f 	bl	80004f8 <__aeabi_f2d>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	e9cd 2300 	strd	r2, r3, [sp]
 80059e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005a90 <statemachine+0x1658>)
 80059e4:	210f      	movs	r1, #15
 80059e6:	4828      	ldr	r0, [pc, #160]	@ (8005a88 <statemachine+0x1650>)
 80059e8:	f012 fc0c 	bl	8018204 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80059ec:	4a27      	ldr	r2, [pc, #156]	@ (8005a8c <statemachine+0x1654>)
 80059ee:	2301      	movs	r3, #1
 80059f0:	ca06      	ldmia	r2, {r1, r2}
 80059f2:	4825      	ldr	r0, [pc, #148]	@ (8005a88 <statemachine+0x1650>)
 80059f4:	f7fe f986 	bl	8003d04 <ssd1306_WriteString>


			  if(BTN_A>=1){
 80059f8:	4b12      	ldr	r3, [pc, #72]	@ (8005a44 <statemachine+0x160c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	dd0b      	ble.n	8005a18 <statemachine+0x15e0>
			 	state++;
 8005a00:	4b11      	ldr	r3, [pc, #68]	@ (8005a48 <statemachine+0x1610>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	3301      	adds	r3, #1
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	4b0f      	ldr	r3, [pc, #60]	@ (8005a48 <statemachine+0x1610>)
 8005a0a:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8005a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a44 <statemachine+0x160c>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8005a12:	4b0e      	ldr	r3, [pc, #56]	@ (8005a4c <statemachine+0x1614>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8005a18:	4b0d      	ldr	r3, [pc, #52]	@ (8005a50 <statemachine+0x1618>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f340 8371 	ble.w	8006104 <statemachine+0x1ccc>
			  				 									 									  			 	state--;
 8005a22:	4b09      	ldr	r3, [pc, #36]	@ (8005a48 <statemachine+0x1610>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	4b07      	ldr	r3, [pc, #28]	@ (8005a48 <statemachine+0x1610>)
 8005a2c:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8005a2e:	4b05      	ldr	r3, [pc, #20]	@ (8005a44 <statemachine+0x160c>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8005a34:	4b05      	ldr	r3, [pc, #20]	@ (8005a4c <statemachine+0x1614>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8005a3a:	4b05      	ldr	r3, [pc, #20]	@ (8005a50 <statemachine+0x1618>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8005a40:	e360      	b.n	8006104 <statemachine+0x1ccc>
 8005a42:	bf00      	nop
 8005a44:	20000768 	.word	0x20000768
 8005a48:	200004d8 	.word	0x200004d8
 8005a4c:	2000076c 	.word	0x2000076c
 8005a50:	20000aa0 	.word	0x20000aa0
 8005a54:	20000018 	.word	0x20000018
 8005a58:	0801cee4 	.word	0x0801cee4
 8005a5c:	200004db 	.word	0x200004db
 8005a60:	20000a44 	.word	0x20000a44
 8005a64:	20000a40 	.word	0x20000a40
 8005a68:	20000a4c 	.word	0x20000a4c
 8005a6c:	200012c8 	.word	0x200012c8
 8005a70:	20000a48 	.word	0x20000a48
 8005a74:	20000a50 	.word	0x20000a50
 8005a78:	20000a9c 	.word	0x20000a9c
 8005a7c:	476a6000 	.word	0x476a6000
 8005a80:	447a0000 	.word	0x447a0000
 8005a84:	0801ceec 	.word	0x0801ceec
 8005a88:	200009c8 	.word	0x200009c8
 8005a8c:	20000020 	.word	0x20000020
 8005a90:	0801cef8 	.word	0x0801cef8




			  case STATE_USB:
				  ssd1306_Fill(Black);
 8005a94:	2000      	movs	r0, #0
 8005a96:	f7fe f819 	bl	8003acc <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 8005a9a:	2120      	movs	r1, #32
 8005a9c:	2020      	movs	r0, #32
 8005a9e:	f7fe f957 	bl	8003d50 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8005aa2:	4aa8      	ldr	r2, [pc, #672]	@ (8005d44 <statemachine+0x190c>)
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	ca06      	ldmia	r2, {r1, r2}
 8005aa8:	48a7      	ldr	r0, [pc, #668]	@ (8005d48 <statemachine+0x1910>)
 8005aaa:	f7fe f92b 	bl	8003d04 <ssd1306_WriteString>
				  switch(usbstate){
 8005aae:	4ba7      	ldr	r3, [pc, #668]	@ (8005d4c <statemachine+0x1914>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	f000 812b 	beq.w	8005d0e <statemachine+0x18d6>
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	f300 8325 	bgt.w	8006108 <statemachine+0x1cd0>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <statemachine+0x1690>
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d042      	beq.n	8005b4c <statemachine+0x1714>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 8005ac6:	e31f      	b.n	8006108 <statemachine+0x1cd0>
				 					  ssd1306_SetCursor(32,40);
 8005ac8:	2128      	movs	r1, #40	@ 0x28
 8005aca:	2020      	movs	r0, #32
 8005acc:	f7fe f940 	bl	8003d50 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8005ad0:	4a9c      	ldr	r2, [pc, #624]	@ (8005d44 <statemachine+0x190c>)
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	ca06      	ldmia	r2, {r1, r2}
 8005ad6:	489e      	ldr	r0, [pc, #632]	@ (8005d50 <statemachine+0x1918>)
 8005ad8:	f7fe f914 	bl	8003d04 <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8005adc:	4b9d      	ldr	r3, [pc, #628]	@ (8005d54 <statemachine+0x191c>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8005ae2:	4b9d      	ldr	r3, [pc, #628]	@ (8005d58 <statemachine+0x1920>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	dd0b      	ble.n	8005b02 <statemachine+0x16ca>
				 						  usbstate++;
 8005aea:	4b98      	ldr	r3, [pc, #608]	@ (8005d4c <statemachine+0x1914>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	3301      	adds	r3, #1
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	4b96      	ldr	r3, [pc, #600]	@ (8005d4c <statemachine+0x1914>)
 8005af4:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8005af6:	4b98      	ldr	r3, [pc, #608]	@ (8005d58 <statemachine+0x1920>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8005afc:	4b97      	ldr	r3, [pc, #604]	@ (8005d5c <statemachine+0x1924>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005b02:	4b96      	ldr	r3, [pc, #600]	@ (8005d5c <statemachine+0x1924>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	dd0b      	ble.n	8005b22 <statemachine+0x16ea>
				 						 state++;
 8005b0a:	4b95      	ldr	r3, [pc, #596]	@ (8005d60 <statemachine+0x1928>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	4b93      	ldr	r3, [pc, #588]	@ (8005d60 <statemachine+0x1928>)
 8005b14:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005b16:	4b91      	ldr	r3, [pc, #580]	@ (8005d5c <statemachine+0x1924>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005b1c:	4b8e      	ldr	r3, [pc, #568]	@ (8005d58 <statemachine+0x1920>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005b22:	4b90      	ldr	r3, [pc, #576]	@ (8005d64 <statemachine+0x192c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f340 821e 	ble.w	8005f68 <statemachine+0x1b30>
				 									 									 									  			 	state--;
 8005b2c:	4b8c      	ldr	r3, [pc, #560]	@ (8005d60 <statemachine+0x1928>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	4b8a      	ldr	r3, [pc, #552]	@ (8005d60 <statemachine+0x1928>)
 8005b36:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 8005b38:	4b88      	ldr	r3, [pc, #544]	@ (8005d5c <statemachine+0x1924>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 8005b3e:	4b86      	ldr	r3, [pc, #536]	@ (8005d58 <statemachine+0x1920>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 8005b44:	4b87      	ldr	r3, [pc, #540]	@ (8005d64 <statemachine+0x192c>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
				 					  break;
 8005b4a:	e20d      	b.n	8005f68 <statemachine+0x1b30>
				 					 ssd1306_SetCursor(32,40);
 8005b4c:	2128      	movs	r1, #40	@ 0x28
 8005b4e:	2020      	movs	r0, #32
 8005b50:	f7fe f8fe 	bl	8003d50 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8005b54:	4a7b      	ldr	r2, [pc, #492]	@ (8005d44 <statemachine+0x190c>)
 8005b56:	2301      	movs	r3, #1
 8005b58:	ca06      	ldmia	r2, {r1, r2}
 8005b5a:	4883      	ldr	r0, [pc, #524]	@ (8005d68 <statemachine+0x1930>)
 8005b5c:	f7fe f8d2 	bl	8003d04 <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8005b60:	2130      	movs	r1, #48	@ 0x30
 8005b62:	2020      	movs	r0, #32
 8005b64:	f7fe f8f4 	bl	8003d50 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8005b68:	4a76      	ldr	r2, [pc, #472]	@ (8005d44 <statemachine+0x190c>)
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	ca06      	ldmia	r2, {r1, r2}
 8005b6e:	487f      	ldr	r0, [pc, #508]	@ (8005d6c <statemachine+0x1934>)
 8005b70:	f7fe f8c8 	bl	8003d04 <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8005b74:	4b7e      	ldr	r3, [pc, #504]	@ (8005d70 <statemachine+0x1938>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d137      	bne.n	8005bec <statemachine+0x17b4>
					 					 ssd1306_Fill(Black);
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f7fd ffa5 	bl	8003acc <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,32);
 8005b82:	2120      	movs	r1, #32
 8005b84:	2020      	movs	r0, #32
 8005b86:	f7fe f8e3 	bl	8003d50 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8005b8a:	4a6e      	ldr	r2, [pc, #440]	@ (8005d44 <statemachine+0x190c>)
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	ca06      	ldmia	r2, {r1, r2}
 8005b90:	486d      	ldr	r0, [pc, #436]	@ (8005d48 <statemachine+0x1910>)
 8005b92:	f7fe f8b7 	bl	8003d04 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,42);
 8005b96:	212a      	movs	r1, #42	@ 0x2a
 8005b98:	2020      	movs	r0, #32
 8005b9a:	f7fe f8d9 	bl	8003d50 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 8005b9e:	4a75      	ldr	r2, [pc, #468]	@ (8005d74 <statemachine+0x193c>)
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	ca06      	ldmia	r2, {r1, r2}
 8005ba4:	4874      	ldr	r0, [pc, #464]	@ (8005d78 <statemachine+0x1940>)
 8005ba6:	f7fe f8ad 	bl	8003d04 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,56);
 8005baa:	2138      	movs	r1, #56	@ 0x38
 8005bac:	2020      	movs	r0, #32
 8005bae:	f7fe f8cf 	bl	8003d50 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8005bb2:	4b72      	ldr	r3, [pc, #456]	@ (8005d7c <statemachine+0x1944>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bbe:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8005d80 <statemachine+0x1948>
 8005bc2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005bc6:	ee16 0a90 	vmov	r0, s13
 8005bca:	f7fa fc95 	bl	80004f8 <__aeabi_f2d>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	e9cd 2300 	strd	r2, r3, [sp]
 8005bd6:	4a6b      	ldr	r2, [pc, #428]	@ (8005d84 <statemachine+0x194c>)
 8005bd8:	2132      	movs	r1, #50	@ 0x32
 8005bda:	486b      	ldr	r0, [pc, #428]	@ (8005d88 <statemachine+0x1950>)
 8005bdc:	f012 fb12 	bl	8018204 <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005be0:	4a58      	ldr	r2, [pc, #352]	@ (8005d44 <statemachine+0x190c>)
 8005be2:	2301      	movs	r3, #1
 8005be4:	ca06      	ldmia	r2, {r1, r2}
 8005be6:	4868      	ldr	r0, [pc, #416]	@ (8005d88 <statemachine+0x1950>)
 8005be8:	f7fe f88c 	bl	8003d04 <ssd1306_WriteString>
				 					if(BTN_A>=1){
 8005bec:	4b5b      	ldr	r3, [pc, #364]	@ (8005d5c <statemachine+0x1924>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dd7a      	ble.n	8005cea <statemachine+0x18b2>
				 						erasetime=HAL_GetTick();
 8005bf4:	f001 fae6 	bl	80071c4 <HAL_GetTick>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	4b5f      	ldr	r3, [pc, #380]	@ (8005d7c <statemachine+0x1944>)
 8005bfe:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005c00:	2300      	movs	r3, #0
 8005c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c04:	e03f      	b.n	8005c86 <statemachine+0x184e>
				 							ssd1306_Fill(Black);
 8005c06:	2000      	movs	r0, #0
 8005c08:	f7fd ff60 	bl	8003acc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8005c0c:	2120      	movs	r1, #32
 8005c0e:	2020      	movs	r0, #32
 8005c10:	f7fe f89e 	bl	8003d50 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 8005c14:	4a4b      	ldr	r2, [pc, #300]	@ (8005d44 <statemachine+0x190c>)
 8005c16:	2301      	movs	r3, #1
 8005c18:	ca06      	ldmia	r2, {r1, r2}
 8005c1a:	484b      	ldr	r0, [pc, #300]	@ (8005d48 <statemachine+0x1910>)
 8005c1c:	f7fe f872 	bl	8003d04 <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8005c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c22:	4619      	mov	r1, r3
 8005c24:	4859      	ldr	r0, [pc, #356]	@ (8005d8c <statemachine+0x1954>)
 8005c26:	f00f fdf4 	bl	8015812 <SPIF_EraseSector>
				 							if(i>=1){
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	dd21      	ble.n	8005c74 <statemachine+0x183c>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8005c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c32:	2264      	movs	r2, #100	@ 0x64
 8005c34:	fb02 f303 	mul.w	r3, r2, r3
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005c40:	4b53      	ldr	r3, [pc, #332]	@ (8005d90 <statemachine+0x1958>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	da00      	bge.n	8005c4a <statemachine+0x1812>
 8005c48:	330f      	adds	r3, #15
 8005c4a:	111b      	asrs	r3, r3, #4
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fa fc41 	bl	80004d4 <__aeabi_i2d>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4610      	mov	r0, r2
 8005c58:	4619      	mov	r1, r3
 8005c5a:	f7fa ff55 	bl	8000b08 <__aeabi_d2iz>
 8005c5e:	ee07 0a90 	vmov	s15, r0
 8005c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c66:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005c6a:	eeb0 0a47 	vmov.f32	s0, s14
 8005c6e:	f7fe fb83 	bl	8004378 <percentage>
 8005c72:	e003      	b.n	8005c7c <statemachine+0x1844>
				 								percentage((float) 0);
 8005c74:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8005d94 <statemachine+0x195c>
 8005c78:	f7fe fb7e 	bl	8004378 <percentage>
				 							ssd1306_UpdateScreen();
 8005c7c:	f7fd ff3e 	bl	8003afc <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c82:	3301      	adds	r3, #1
 8005c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c86:	4b42      	ldr	r3, [pc, #264]	@ (8005d90 <statemachine+0x1958>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	da00      	bge.n	8005c90 <statemachine+0x1858>
 8005c8e:	330f      	adds	r3, #15
 8005c90:	111b      	asrs	r3, r3, #4
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fa fc1e 	bl	80004d4 <__aeabi_i2d>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	f7fa ff32 	bl	8000b08 <__aeabi_d2iz>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	ddac      	ble.n	8005c06 <statemachine+0x17ce>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 8005cac:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8005cb0:	4836      	ldr	r0, [pc, #216]	@ (8005d8c <statemachine+0x1954>)
 8005cb2:	f00f fdae 	bl	8015812 <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 8005cb6:	f001 fa85 	bl	80071c4 <HAL_GetTick>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4a2f      	ldr	r2, [pc, #188]	@ (8005d7c <statemachine+0x1944>)
 8005cbe:	6812      	ldr	r2, [r2, #0]
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8005d7c <statemachine+0x1944>)
 8005cc6:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 8005cc8:	4b29      	ldr	r3, [pc, #164]	@ (8005d70 <statemachine+0x1938>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 8005cce:	4b32      	ldr	r3, [pc, #200]	@ (8005d98 <statemachine+0x1960>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 8005cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8005d90 <statemachine+0x1958>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
				 						storeindex();
 8005cda:	f7fd fd1b 	bl	8003714 <storeindex>
				 						BTN_A=0;
 8005cde:	4b1f      	ldr	r3, [pc, #124]	@ (8005d5c <statemachine+0x1924>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 8005ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8005d58 <statemachine+0x1920>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 8005cea:	4b1b      	ldr	r3, [pc, #108]	@ (8005d58 <statemachine+0x1920>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f340 813c 	ble.w	8005f6c <statemachine+0x1b34>
					 						usbstate++;
 8005cf4:	4b15      	ldr	r3, [pc, #84]	@ (8005d4c <statemachine+0x1914>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	4b13      	ldr	r3, [pc, #76]	@ (8005d4c <statemachine+0x1914>)
 8005cfe:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 8005d00:	4b15      	ldr	r3, [pc, #84]	@ (8005d58 <statemachine+0x1920>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 8005d06:	4b15      	ldr	r3, [pc, #84]	@ (8005d5c <statemachine+0x1924>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
				 			  break;
 8005d0c:	e12e      	b.n	8005f6c <statemachine+0x1b34>
				 					ssd1306_Fill(Black);
 8005d0e:	2000      	movs	r0, #0
 8005d10:	f7fd fedc 	bl	8003acc <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 8005d14:	2128      	movs	r1, #40	@ 0x28
 8005d16:	2020      	movs	r0, #32
 8005d18:	f7fe f81a 	bl	8003d50 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8005d1c:	4a09      	ldr	r2, [pc, #36]	@ (8005d44 <statemachine+0x190c>)
 8005d1e:	2301      	movs	r3, #1
 8005d20:	ca06      	ldmia	r2, {r1, r2}
 8005d22:	481e      	ldr	r0, [pc, #120]	@ (8005d9c <statemachine+0x1964>)
 8005d24:	f7fd ffee 	bl	8003d04 <ssd1306_WriteString>
				 					if(pagenumber>0){
 8005d28:	4b19      	ldr	r3, [pc, #100]	@ (8005d90 <statemachine+0x1958>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f340 80ae 	ble.w	8005e8e <statemachine+0x1a56>
				 					int i=0;
 8005d32:	2300      	movs	r3, #0
 8005d34:	633b      	str	r3, [r7, #48]	@ 0x30
				 					if(usbtransmiten==0){
 8005d36:	4b07      	ldr	r3, [pc, #28]	@ (8005d54 <statemachine+0x191c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f040 8095 	bne.w	8005e6a <statemachine+0x1a32>
				 						while(i<pagenumber){
 8005d40:	e065      	b.n	8005e0e <statemachine+0x19d6>
 8005d42:	bf00      	nop
 8005d44:	20000018 	.word	0x20000018
 8005d48:	0801cf00 	.word	0x0801cf00
 8005d4c:	200004dc 	.word	0x200004dc
 8005d50:	0801cf04 	.word	0x0801cf04
 8005d54:	20000a60 	.word	0x20000a60
 8005d58:	2000076c 	.word	0x2000076c
 8005d5c:	20000768 	.word	0x20000768
 8005d60:	200004d8 	.word	0x200004d8
 8005d64:	20000aa0 	.word	0x20000aa0
 8005d68:	0801cf10 	.word	0x0801cf10
 8005d6c:	0801cf18 	.word	0x0801cf18
 8005d70:	20000a5c 	.word	0x20000a5c
 8005d74:	20000020 	.word	0x20000020
 8005d78:	0801cf24 	.word	0x0801cf24
 8005d7c:	20000a58 	.word	0x20000a58
 8005d80:	447a0000 	.word	0x447a0000
 8005d84:	0801cf28 	.word	0x0801cf28
 8005d88:	200009c8 	.word	0x200009c8
 8005d8c:	20000770 	.word	0x20000770
 8005d90:	200009a8 	.word	0x200009a8
 8005d94:	00000000 	.word	0x00000000
 8005d98:	200009a4 	.word	0x200009a4
 8005d9c:	0801cf30 	.word	0x0801cf30
				 							ssd1306_Fill(Black);
 8005da0:	2000      	movs	r0, #0
 8005da2:	f7fd fe93 	bl	8003acc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8005da6:	2120      	movs	r1, #32
 8005da8:	2020      	movs	r0, #32
 8005daa:	f7fd ffd1 	bl	8003d50 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005dae:	4a71      	ldr	r2, [pc, #452]	@ (8005f74 <statemachine+0x1b3c>)
 8005db0:	2301      	movs	r3, #1
 8005db2:	ca06      	ldmia	r2, {r1, r2}
 8005db4:	4870      	ldr	r0, [pc, #448]	@ (8005f78 <statemachine+0x1b40>)
 8005db6:	f7fd ffa5 	bl	8003d04 <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 8005dba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005dc4:	4a6d      	ldr	r2, [pc, #436]	@ (8005f7c <statemachine+0x1b44>)
 8005dc6:	486e      	ldr	r0, [pc, #440]	@ (8005f80 <statemachine+0x1b48>)
 8005dc8:	f00f fdc4 	bl	8015954 <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 8005dcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005dd0:	486a      	ldr	r0, [pc, #424]	@ (8005f7c <statemachine+0x1b44>)
 8005dd2:	f00f febf 	bl	8015b54 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd8:	2264      	movs	r2, #100	@ 0x64
 8005dda:	fb02 f303 	mul.w	r3, r2, r3
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005de6:	4b67      	ldr	r3, [pc, #412]	@ (8005f84 <statemachine+0x1b4c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005df2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005df6:	eeb0 0a66 	vmov.f32	s0, s13
 8005dfa:	f7fe fabd 	bl	8004378 <percentage>
				 							ssd1306_UpdateScreen();
 8005dfe:	f7fd fe7d 	bl	8003afc <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 8005e02:	207d      	movs	r0, #125	@ 0x7d
 8005e04:	f001 f9f6 	bl	80071f4 <HAL_Delay>
				 							i++;
 8005e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	633b      	str	r3, [r7, #48]	@ 0x30
				 						while(i<pagenumber){
 8005e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8005f84 <statemachine+0x1b4c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e14:	429a      	cmp	r2, r3
 8005e16:	dbc3      	blt.n	8005da0 <statemachine+0x1968>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 8005e18:	4b5a      	ldr	r3, [pc, #360]	@ (8005f84 <statemachine+0x1b4c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4b5a      	ldr	r3, [pc, #360]	@ (8005f88 <statemachine+0x1b50>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	2300      	movs	r3, #0
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	4a54      	ldr	r2, [pc, #336]	@ (8005f7c <statemachine+0x1b44>)
 8005e2c:	4854      	ldr	r0, [pc, #336]	@ (8005f80 <statemachine+0x1b48>)
 8005e2e:	f00f fd91 	bl	8015954 <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 8005e32:	4b55      	ldr	r3, [pc, #340]	@ (8005f88 <statemachine+0x1b50>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4850      	ldr	r0, [pc, #320]	@ (8005f7c <statemachine+0x1b44>)
 8005e3c:	f00f fe8a 	bl	8015b54 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 8005e40:	207d      	movs	r0, #125	@ 0x7d
 8005e42:	f001 f9d7 	bl	80071f4 <HAL_Delay>
				 						int taillefin=0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
										taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 8005e4a:	4a50      	ldr	r2, [pc, #320]	@ (8005f8c <statemachine+0x1b54>)
 8005e4c:	2140      	movs	r1, #64	@ 0x40
 8005e4e:	4850      	ldr	r0, [pc, #320]	@ (8005f90 <statemachine+0x1b58>)
 8005e50:	f012 f9d8 	bl	8018204 <sniprintf>
 8005e54:	62f8      	str	r0, [r7, #44]	@ 0x2c
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 8005e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	484c      	ldr	r0, [pc, #304]	@ (8005f90 <statemachine+0x1b58>)
 8005e5e:	f00f fe79 	bl	8015b54 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8005e62:	4b4c      	ldr	r3, [pc, #304]	@ (8005f94 <statemachine+0x1b5c>)
 8005e64:	2201      	movs	r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	e003      	b.n	8005e72 <statemachine+0x1a3a>
				 						usbpercent=1;
 8005e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8005f98 <statemachine+0x1b60>)
 8005e6c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005e70:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 8005e72:	2000      	movs	r0, #0
 8005e74:	f7fd fe2a 	bl	8003acc <ssd1306_Fill>
				 					ssd1306_SetCursor(32,48);
 8005e78:	2130      	movs	r1, #48	@ 0x30
 8005e7a:	2020      	movs	r0, #32
 8005e7c:	f7fd ff68 	bl	8003d50 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8005e80:	4a46      	ldr	r2, [pc, #280]	@ (8005f9c <statemachine+0x1b64>)
 8005e82:	2301      	movs	r3, #1
 8005e84:	ca06      	ldmia	r2, {r1, r2}
 8005e86:	4846      	ldr	r0, [pc, #280]	@ (8005fa0 <statemachine+0x1b68>)
 8005e88:	f7fd ff3c 	bl	8003d04 <ssd1306_WriteString>
 8005e8c:	e016      	b.n	8005ebc <statemachine+0x1a84>
				 							ssd1306_Fill(Black);
 8005e8e:	2000      	movs	r0, #0
 8005e90:	f7fd fe1c 	bl	8003acc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 8005e94:	2128      	movs	r1, #40	@ 0x28
 8005e96:	2020      	movs	r0, #32
 8005e98:	f7fd ff5a 	bl	8003d50 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_7x10,White);
 8005e9c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f9c <statemachine+0x1b64>)
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	ca06      	ldmia	r2, {r1, r2}
 8005ea2:	4835      	ldr	r0, [pc, #212]	@ (8005f78 <statemachine+0x1b40>)
 8005ea4:	f7fd ff2e 	bl	8003d04 <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,50);
 8005ea8:	2132      	movs	r1, #50	@ 0x32
 8005eaa:	2020      	movs	r0, #32
 8005eac:	f7fd ff50 	bl	8003d50 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_7x10,White);
 8005eb0:	4a3a      	ldr	r2, [pc, #232]	@ (8005f9c <statemachine+0x1b64>)
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	ca06      	ldmia	r2, {r1, r2}
 8005eb6:	483b      	ldr	r0, [pc, #236]	@ (8005fa4 <statemachine+0x1b6c>)
 8005eb8:	f7fd ff24 	bl	8003d04 <ssd1306_WriteString>
				 					if(BTN_B>=1){
 8005ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8005fa8 <statemachine+0x1b70>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	dd11      	ble.n	8005ee8 <statemachine+0x1ab0>
				 									 						usbstate--;
 8005ec4:	4b39      	ldr	r3, [pc, #228]	@ (8005fac <statemachine+0x1b74>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	4b37      	ldr	r3, [pc, #220]	@ (8005fac <statemachine+0x1b74>)
 8005ece:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 8005ed0:	4b36      	ldr	r3, [pc, #216]	@ (8005fac <statemachine+0x1b74>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	4b34      	ldr	r3, [pc, #208]	@ (8005fac <statemachine+0x1b74>)
 8005eda:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 8005edc:	4b32      	ldr	r3, [pc, #200]	@ (8005fa8 <statemachine+0x1b70>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 8005ee2:	4b33      	ldr	r3, [pc, #204]	@ (8005fb0 <statemachine+0x1b78>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005ee8:	4b31      	ldr	r3, [pc, #196]	@ (8005fb0 <statemachine+0x1b78>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	dd27      	ble.n	8005f40 <statemachine+0x1b08>
				 									  			 	state++;
 8005ef0:	4b30      	ldr	r3, [pc, #192]	@ (8005fb4 <statemachine+0x1b7c>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8005fb4 <statemachine+0x1b7c>)
 8005efa:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005efc:	4b2c      	ldr	r3, [pc, #176]	@ (8005fb0 <statemachine+0x1b78>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005f02:	4b29      	ldr	r3, [pc, #164]	@ (8005fa8 <statemachine+0x1b70>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
				 									  			  pulseOximeter_resetRegisters();
 8005f08:	f7fc fdbe 	bl	8002a88 <pulseOximeter_resetRegisters>
				 									  			  pulseOximeter_initFifo();
 8005f0c:	f7fc fe55 	bl	8002bba <pulseOximeter_initFifo>
				 									  			  pulseOximeter_setSampleRate(_100SPS);
 8005f10:	2001      	movs	r0, #1
 8005f12:	f7fc fe13 	bl	8002b3c <pulseOximeter_setSampleRate>
				 									  			  pulseOximeter_setLedCurrent(RED_LED, 50);
 8005f16:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8005fb8 <statemachine+0x1b80>
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	f7fc fdda 	bl	8002ad4 <pulseOximeter_setLedCurrent>
				 									  			  pulseOximeter_setLedCurrent(IR_LED, 5);
 8005f20:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8005f24:	2002      	movs	r0, #2
 8005f26:	f7fc fdd5 	bl	8002ad4 <pulseOximeter_setLedCurrent>
				 									  			  pulseOximeter_resetFifo();
 8005f2a:	f7fc fe36 	bl	8002b9a <pulseOximeter_resetFifo>
				 									  			  pulseOximeter_setMeasurementMode(SPO2);
 8005f2e:	2001      	movs	r0, #1
 8005f30:	f7fc fd5e 	bl	80029f0 <pulseOximeter_setMeasurementMode>
				 									  			  currentMillis = HAL_GetTick();
 8005f34:	f001 f946 	bl	80071c4 <HAL_GetTick>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8005fbc <statemachine+0x1b84>)
 8005f3e:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005f40:	4b1f      	ldr	r3, [pc, #124]	@ (8005fc0 <statemachine+0x1b88>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	dd13      	ble.n	8005f70 <statemachine+0x1b38>
				 									 									  			 	state--;
 8005f48:	4b1a      	ldr	r3, [pc, #104]	@ (8005fb4 <statemachine+0x1b7c>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	4b18      	ldr	r3, [pc, #96]	@ (8005fb4 <statemachine+0x1b7c>)
 8005f52:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 8005f54:	4b16      	ldr	r3, [pc, #88]	@ (8005fb0 <statemachine+0x1b78>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 8005f5a:	4b13      	ldr	r3, [pc, #76]	@ (8005fa8 <statemachine+0x1b70>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 8005f60:	4b17      	ldr	r3, [pc, #92]	@ (8005fc0 <statemachine+0x1b88>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
				 					 break;
 8005f66:	e003      	b.n	8005f70 <statemachine+0x1b38>
				 					  break;
 8005f68:	bf00      	nop
 8005f6a:	e0cd      	b.n	8006108 <statemachine+0x1cd0>
				 			  break;
 8005f6c:	bf00      	nop
 8005f6e:	e0cb      	b.n	8006108 <statemachine+0x1cd0>
				 					 break;
 8005f70:	bf00      	nop
				  break;
 8005f72:	e0c9      	b.n	8006108 <statemachine+0x1cd0>
 8005f74:	20000018 	.word	0x20000018
 8005f78:	0801cf30 	.word	0x0801cf30
 8005f7c:	200008a4 	.word	0x200008a4
 8005f80:	20000770 	.word	0x20000770
 8005f84:	200009a8 	.word	0x200009a8
 8005f88:	200009a4 	.word	0x200009a4
 8005f8c:	0801cf38 	.word	0x0801cf38
 8005f90:	200009fc 	.word	0x200009fc
 8005f94:	20000a60 	.word	0x20000a60
 8005f98:	20000a64 	.word	0x20000a64
 8005f9c:	20000020 	.word	0x20000020
 8005fa0:	0801cf48 	.word	0x0801cf48
 8005fa4:	0801cf50 	.word	0x0801cf50
 8005fa8:	2000076c 	.word	0x2000076c
 8005fac:	200004dc 	.word	0x200004dc
 8005fb0:	20000768 	.word	0x20000768
 8005fb4:	200004d8 	.word	0x200004d8
 8005fb8:	42480000 	.word	0x42480000
 8005fbc:	200010e8 	.word	0x200010e8
 8005fc0:	20000aa0 	.word	0x20000aa0

				  case STATE_SETTING:
					  ssd1306_Fill(Black);
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	f7fd fd81 	bl	8003acc <ssd1306_Fill>
					  ssd1306_SetCursor(32,32);
 8005fca:	2120      	movs	r1, #32
 8005fcc:	2020      	movs	r0, #32
 8005fce:	f7fd febf 	bl	8003d50 <ssd1306_SetCursor>
					  ssd1306_WriteString("max30102",Font_7x10,White);
 8005fd2:	4a52      	ldr	r2, [pc, #328]	@ (800611c <statemachine+0x1ce4>)
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	ca06      	ldmia	r2, {r1, r2}
 8005fd8:	4851      	ldr	r0, [pc, #324]	@ (8006120 <statemachine+0x1ce8>)
 8005fda:	f7fd fe93 	bl	8003d04 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,42);
 8005fde:	212a      	movs	r1, #42	@ 0x2a
 8005fe0:	2020      	movs	r0, #32
 8005fe2:	f7fd feb5 	bl	8003d50 <ssd1306_SetCursor>
					  currentMillis = HAL_GetTick();
 8005fe6:	f001 f8ed 	bl	80071c4 <HAL_GetTick>
 8005fea:	4603      	mov	r3, r0
 8005fec:	461a      	mov	r2, r3
 8005fee:	4b4d      	ldr	r3, [pc, #308]	@ (8006124 <statemachine+0x1cec>)
 8005ff0:	601a      	str	r2, [r3, #0]

					  fifoLedData = pulseOximeter_readFifo();
 8005ff2:	f7fc fdef 	bl	8002bd4 <pulseOximeter_readFifo>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4a4b      	ldr	r2, [pc, #300]	@ (8006128 <statemachine+0x1cf0>)
 8005ffa:	6013      	str	r3, [r2, #0]

					  pulseOximeter = pulseOximeter_update(fifoLedData);
 8005ffc:	4c4b      	ldr	r4, [pc, #300]	@ (800612c <statemachine+0x1cf4>)
 8005ffe:	463b      	mov	r3, r7
 8006000:	4a49      	ldr	r2, [pc, #292]	@ (8006128 <statemachine+0x1cf0>)
 8006002:	6811      	ldr	r1, [r2, #0]
 8006004:	4618      	mov	r0, r3
 8006006:	f7fc fe7b 	bl	8002d00 <pulseOximeter_update>
 800600a:	4625      	mov	r5, r4
 800600c:	463c      	mov	r4, r7
 800600e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006016:	e894 0003 	ldmia.w	r4, {r0, r1}
 800601a:	e885 0003 	stmia.w	r5, {r0, r1}

					  pulseOximeter_resetFifo();
 800601e:	f7fc fdbc 	bl	8002b9a <pulseOximeter_resetFifo>

					  HAL_Delay(10);
 8006022:	200a      	movs	r0, #10
 8006024:	f001 f8e6 	bl	80071f4 <HAL_Delay>
					  snprintf((char  *)bufferscreen,50,"spo2=%f",pulseOximeter.SpO2);
 8006028:	4b40      	ldr	r3, [pc, #256]	@ (800612c <statemachine+0x1cf4>)
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	4618      	mov	r0, r3
 800602e:	f7fa fa63 	bl	80004f8 <__aeabi_f2d>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	e9cd 2300 	strd	r2, r3, [sp]
 800603a:	4a3d      	ldr	r2, [pc, #244]	@ (8006130 <statemachine+0x1cf8>)
 800603c:	2132      	movs	r1, #50	@ 0x32
 800603e:	483d      	ldr	r0, [pc, #244]	@ (8006134 <statemachine+0x1cfc>)
 8006040:	f012 f8e0 	bl	8018204 <sniprintf>
					  ssd1306_WriteString((char  *)bufferscreen,Font_7x10,White);
 8006044:	4a35      	ldr	r2, [pc, #212]	@ (800611c <statemachine+0x1ce4>)
 8006046:	2301      	movs	r3, #1
 8006048:	ca06      	ldmia	r2, {r1, r2}
 800604a:	483a      	ldr	r0, [pc, #232]	@ (8006134 <statemachine+0x1cfc>)
 800604c:	f7fd fe5a 	bl	8003d04 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,52);
 8006050:	2134      	movs	r1, #52	@ 0x34
 8006052:	2020      	movs	r0, #32
 8006054:	f7fd fe7c 	bl	8003d50 <ssd1306_SetCursor>
					  snprintf((char  *)bufferscreen,50,"bpm=%f",pulseOximeter.heartBPM);
 8006058:	4b34      	ldr	r3, [pc, #208]	@ (800612c <statemachine+0x1cf4>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	4618      	mov	r0, r3
 800605e:	f7fa fa4b 	bl	80004f8 <__aeabi_f2d>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	e9cd 2300 	strd	r2, r3, [sp]
 800606a:	4a33      	ldr	r2, [pc, #204]	@ (8006138 <statemachine+0x1d00>)
 800606c:	2132      	movs	r1, #50	@ 0x32
 800606e:	4831      	ldr	r0, [pc, #196]	@ (8006134 <statemachine+0x1cfc>)
 8006070:	f012 f8c8 	bl	8018204 <sniprintf>
					  ssd1306_WriteString((char  *)bufferscreen,Font_7x10,White);
 8006074:	4a29      	ldr	r2, [pc, #164]	@ (800611c <statemachine+0x1ce4>)
 8006076:	2301      	movs	r3, #1
 8006078:	ca06      	ldmia	r2, {r1, r2}
 800607a:	482e      	ldr	r0, [pc, #184]	@ (8006134 <statemachine+0x1cfc>)
 800607c:	f7fd fe42 	bl	8003d04 <ssd1306_WriteString>

					  				 					 if(BTN_A>=1){
 8006080:	4b2e      	ldr	r3, [pc, #184]	@ (800613c <statemachine+0x1d04>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	dd23      	ble.n	80060d0 <statemachine+0x1c98>
					  				 									  			 	state--;
 8006088:	4b2d      	ldr	r3, [pc, #180]	@ (8006140 <statemachine+0x1d08>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	3b01      	subs	r3, #1
 800608e:	b2da      	uxtb	r2, r3
 8006090:	4b2b      	ldr	r3, [pc, #172]	@ (8006140 <statemachine+0x1d08>)
 8006092:	701a      	strb	r2, [r3, #0]
					  				 									  			state--;
 8006094:	4b2a      	ldr	r3, [pc, #168]	@ (8006140 <statemachine+0x1d08>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	3b01      	subs	r3, #1
 800609a:	b2da      	uxtb	r2, r3
 800609c:	4b28      	ldr	r3, [pc, #160]	@ (8006140 <statemachine+0x1d08>)
 800609e:	701a      	strb	r2, [r3, #0]
					  				 									  		state--;
 80060a0:	4b27      	ldr	r3, [pc, #156]	@ (8006140 <statemachine+0x1d08>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	4b25      	ldr	r3, [pc, #148]	@ (8006140 <statemachine+0x1d08>)
 80060aa:	701a      	strb	r2, [r3, #0]
					  				 									  	state--;
 80060ac:	4b24      	ldr	r3, [pc, #144]	@ (8006140 <statemachine+0x1d08>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	4b22      	ldr	r3, [pc, #136]	@ (8006140 <statemachine+0x1d08>)
 80060b6:	701a      	strb	r2, [r3, #0]
					  				 									 state--;
 80060b8:	4b21      	ldr	r3, [pc, #132]	@ (8006140 <statemachine+0x1d08>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	3b01      	subs	r3, #1
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	4b1f      	ldr	r3, [pc, #124]	@ (8006140 <statemachine+0x1d08>)
 80060c2:	701a      	strb	r2, [r3, #0]
					  				 									  			 	BTN_A=0;
 80060c4:	4b1d      	ldr	r3, [pc, #116]	@ (800613c <statemachine+0x1d04>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
					  				 									  			 	BTN_B=0;
 80060ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006144 <statemachine+0x1d0c>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
					  				 									  	}
					  				 					if(BTN_A_LONG>=1){
 80060d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006148 <statemachine+0x1d10>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	dd19      	ble.n	800610c <statemachine+0x1cd4>
					  				 									 									  			 	state--;
 80060d8:	4b19      	ldr	r3, [pc, #100]	@ (8006140 <statemachine+0x1d08>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	3b01      	subs	r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b17      	ldr	r3, [pc, #92]	@ (8006140 <statemachine+0x1d08>)
 80060e2:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 80060e4:	4b15      	ldr	r3, [pc, #84]	@ (800613c <statemachine+0x1d04>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 80060ea:	4b16      	ldr	r3, [pc, #88]	@ (8006144 <statemachine+0x1d0c>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 80060f0:	4b15      	ldr	r3, [pc, #84]	@ (8006148 <statemachine+0x1d10>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
					  				 									 									  	}
					  break;
 80060f6:	e009      	b.n	800610c <statemachine+0x1cd4>
				  									 	 break;
 80060f8:	bf00      	nop
 80060fa:	e008      	b.n	800610e <statemachine+0x1cd6>
					  break;
 80060fc:	bf00      	nop
 80060fe:	e006      	b.n	800610e <statemachine+0x1cd6>
			  break;
 8006100:	bf00      	nop
 8006102:	e004      	b.n	800610e <statemachine+0x1cd6>
			  break;
 8006104:	bf00      	nop
 8006106:	e002      	b.n	800610e <statemachine+0x1cd6>
				  break;
 8006108:	bf00      	nop
 800610a:	e000      	b.n	800610e <statemachine+0x1cd6>
					  break;
 800610c:	bf00      	nop




	}
return ;
 800610e:	bf00      	nop
 8006110:	bf00      	nop
}
 8006112:	3740      	adds	r7, #64	@ 0x40
 8006114:	46bd      	mov	sp, r7
 8006116:	ecbd 8b02 	vpop	{d8}
 800611a:	bdb0      	pop	{r4, r5, r7, pc}
 800611c:	20000020 	.word	0x20000020
 8006120:	0801cf58 	.word	0x0801cf58
 8006124:	200010e8 	.word	0x200010e8
 8006128:	200010e4 	.word	0x200010e4
 800612c:	20000b2c 	.word	0x20000b2c
 8006130:	0801cf64 	.word	0x0801cf64
 8006134:	200009c8 	.word	0x200009c8
 8006138:	0801cf6c 	.word	0x0801cf6c
 800613c:	20000768 	.word	0x20000768
 8006140:	200004d8 	.word	0x200004d8
 8006144:	2000076c 	.word	0x2000076c
 8006148:	20000aa0 	.word	0x20000aa0

0800614c <LL_AHB3_GRP1_EnableClock>:
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006158:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800615a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4313      	orrs	r3, r2
 8006162:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006168:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4013      	ands	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006170:	68fb      	ldr	r3, [r7, #12]
}
 8006172:	bf00      	nop
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	af00      	add	r7, sp, #0



  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8006182:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006186:	f7ff ffe1 	bl	800614c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800618a:	2200      	movs	r2, #0
 800618c:	2100      	movs	r1, #0
 800618e:	202e      	movs	r0, #46	@ 0x2e
 8006190:	f002 f9af 	bl	80084f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006194:	202e      	movs	r0, #46	@ 0x2e
 8006196:	f002 f9c6 	bl	8008526 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800619a:	bf00      	nop
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   ssd1306_SetCursor(32, 20);
 80061a4:	2114      	movs	r1, #20
 80061a6:	2020      	movs	r0, #32
 80061a8:	f7fd fdd2 	bl	8003d50 <ssd1306_SetCursor>
	   	  ssd1306_WriteString("NMI", Font_7x10, White);
 80061ac:	4a04      	ldr	r2, [pc, #16]	@ (80061c0 <NMI_Handler+0x20>)
 80061ae:	2301      	movs	r3, #1
 80061b0:	ca06      	ldmia	r2, {r1, r2}
 80061b2:	4804      	ldr	r0, [pc, #16]	@ (80061c4 <NMI_Handler+0x24>)
 80061b4:	f7fd fda6 	bl	8003d04 <ssd1306_WriteString>
	   	  ssd1306_UpdateScreen();
 80061b8:	f7fd fca0 	bl	8003afc <ssd1306_UpdateScreen>
	   ssd1306_SetCursor(32, 20);
 80061bc:	bf00      	nop
 80061be:	e7f1      	b.n	80061a4 <NMI_Handler+0x4>
 80061c0:	20000020 	.word	0x20000020
 80061c4:	0801cf74 	.word	0x0801cf74

080061c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80061cc:	2114      	movs	r1, #20
 80061ce:	2020      	movs	r0, #32
 80061d0:	f7fd fdbe 	bl	8003d50 <ssd1306_SetCursor>
	  ssd1306_WriteString("hardfault", Font_7x10, White);
 80061d4:	4a04      	ldr	r2, [pc, #16]	@ (80061e8 <HardFault_Handler+0x20>)
 80061d6:	2301      	movs	r3, #1
 80061d8:	ca06      	ldmia	r2, {r1, r2}
 80061da:	4804      	ldr	r0, [pc, #16]	@ (80061ec <HardFault_Handler+0x24>)
 80061dc:	f7fd fd92 	bl	8003d04 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80061e0:	f7fd fc8c 	bl	8003afc <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80061e4:	bf00      	nop
 80061e6:	e7f1      	b.n	80061cc <HardFault_Handler+0x4>
 80061e8:	20000020 	.word	0x20000020
 80061ec:	0801cf78 	.word	0x0801cf78

080061f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80061f4:	2114      	movs	r1, #20
 80061f6:	2020      	movs	r0, #32
 80061f8:	f7fd fdaa 	bl	8003d50 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("mem", Font_7x10, White);
 80061fc:	4a04      	ldr	r2, [pc, #16]	@ (8006210 <MemManage_Handler+0x20>)
 80061fe:	2301      	movs	r3, #1
 8006200:	ca06      	ldmia	r2, {r1, r2}
 8006202:	4804      	ldr	r0, [pc, #16]	@ (8006214 <MemManage_Handler+0x24>)
 8006204:	f7fd fd7e 	bl	8003d04 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006208:	f7fd fc78 	bl	8003afc <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 800620c:	bf00      	nop
 800620e:	e7f1      	b.n	80061f4 <MemManage_Handler+0x4>
 8006210:	20000020 	.word	0x20000020
 8006214:	0801cf84 	.word	0x0801cf84

08006218 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 800621c:	2114      	movs	r1, #20
 800621e:	2020      	movs	r0, #32
 8006220:	f7fd fd96 	bl	8003d50 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("bus", Font_7x10, White);
 8006224:	4a04      	ldr	r2, [pc, #16]	@ (8006238 <BusFault_Handler+0x20>)
 8006226:	2301      	movs	r3, #1
 8006228:	ca06      	ldmia	r2, {r1, r2}
 800622a:	4804      	ldr	r0, [pc, #16]	@ (800623c <BusFault_Handler+0x24>)
 800622c:	f7fd fd6a 	bl	8003d04 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006230:	f7fd fc64 	bl	8003afc <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006234:	bf00      	nop
 8006236:	e7f1      	b.n	800621c <BusFault_Handler+0x4>
 8006238:	20000020 	.word	0x20000020
 800623c:	0801cf88 	.word	0x0801cf88

08006240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006244:	2114      	movs	r1, #20
 8006246:	2020      	movs	r0, #32
 8006248:	f7fd fd82 	bl	8003d50 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("usage", Font_7x10, White);
 800624c:	4a04      	ldr	r2, [pc, #16]	@ (8006260 <UsageFault_Handler+0x20>)
 800624e:	2301      	movs	r3, #1
 8006250:	ca06      	ldmia	r2, {r1, r2}
 8006252:	4804      	ldr	r0, [pc, #16]	@ (8006264 <UsageFault_Handler+0x24>)
 8006254:	f7fd fd56 	bl	8003d04 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006258:	f7fd fc50 	bl	8003afc <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 800625c:	bf00      	nop
 800625e:	e7f1      	b.n	8006244 <UsageFault_Handler+0x4>
 8006260:	20000020 	.word	0x20000020
 8006264:	0801cf8c 	.word	0x0801cf8c

08006268 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800626c:	bf00      	nop
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006276:	b480      	push	{r7}
 8006278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800627a:	bf00      	nop
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006288:	bf00      	nop
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006296:	f000 ff81 	bl	800719c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800629a:	bf00      	nop
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80062a4:	4802      	ldr	r0, [pc, #8]	@ (80062b0 <RTC_WKUP_IRQHandler+0x10>)
 80062a6:	f007 fea9 	bl	800dffc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80062aa:	bf00      	nop
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000c20 	.word	0x20000c20

080062b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80062b8:	4802      	ldr	r0, [pc, #8]	@ (80062c4 <DMA1_Channel1_IRQHandler+0x10>)
 80062ba:	f002 fb30 	bl	800891e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80062be:	bf00      	nop
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000378 	.word	0x20000378

080062c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80062cc:	4802      	ldr	r0, [pc, #8]	@ (80062d8 <DMA1_Channel2_IRQHandler+0x10>)
 80062ce:	f002 fb26 	bl	800891e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80062d2:	bf00      	nop
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20001268 	.word	0x20001268

080062dc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80062e0:	4802      	ldr	r0, [pc, #8]	@ (80062ec <USB_LP_IRQHandler+0x10>)
 80062e2:	f004 f94f 	bl	800a584 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80062e6:	bf00      	nop
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	200027ac 	.word	0x200027ac

080062f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80062f4:	4806      	ldr	r0, [pc, #24]	@ (8006310 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80062f6:	f009 f818 	bl	800f32a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  updatedate();
 80062fa:	f000 fa7b 	bl	80067f4 <updatedate>
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 80062fe:	2101      	movs	r1, #1
 8006300:	4804      	ldr	r0, [pc, #16]	@ (8006314 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8006302:	f002 fe09 	bl	8008f18 <HAL_GPIO_TogglePin>
  bluetoothsend=1;
 8006306:	4b04      	ldr	r3, [pc, #16]	@ (8006318 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8006308:	2201      	movs	r2, #1
 800630a:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800630c:	bf00      	nop
 800630e:	bd80      	pop	{r7, pc}
 8006310:	2000113c 	.word	0x2000113c
 8006314:	48000400 	.word	0x48000400
 8006318:	20000aa4 	.word	0x20000aa4

0800631c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8006320:	4805      	ldr	r0, [pc, #20]	@ (8006338 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8006322:	f009 f802 	bl	800f32a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 8006326:	2102      	movs	r1, #2
 8006328:	4804      	ldr	r0, [pc, #16]	@ (800633c <TIM1_TRG_COM_TIM17_IRQHandler+0x20>)
 800632a:	f002 fdf5 	bl	8008f18 <HAL_GPIO_TogglePin>
  enablewrite=1;
 800632e:	4b04      	ldr	r3, [pc, #16]	@ (8006340 <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 8006330:	2201      	movs	r2, #1
 8006332:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8006334:	bf00      	nop
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20001188 	.word	0x20001188
 800633c:	48000400 	.word	0x48000400
 8006340:	20000a80 	.word	0x20000a80

08006344 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006348:	4802      	ldr	r0, [pc, #8]	@ (8006354 <SPI1_IRQHandler+0x10>)
 800634a:	f008 fbf7 	bl	800eb3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800634e:	bf00      	nop
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	20000c78 	.word	0x20000c78

08006358 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800635c:	4802      	ldr	r0, [pc, #8]	@ (8006368 <LPUART1_IRQHandler+0x10>)
 800635e:	f009 fd3b 	bl	800fdd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006362:	bf00      	nop
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	200011d4 	.word	0x200011d4

0800636c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8006370:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006374:	f002 fdea 	bl	8008f4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006378:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800637c:	f002 fde6 	bl	8008f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006380:	bf00      	nop
 8006382:	bd80      	pop	{r7, pc}

08006384 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8006388:	4802      	ldr	r0, [pc, #8]	@ (8006394 <IPCC_C1_RX_IRQHandler+0x10>)
 800638a:	f003 ff6b 	bl	800a264 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800638e:	bf00      	nop
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	2000049c 	.word	0x2000049c

08006398 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800639c:	4802      	ldr	r0, [pc, #8]	@ (80063a8 <IPCC_C1_TX_IRQHandler+0x10>)
 800639e:	f003 ff13 	bl	800a1c8 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80063a2:	bf00      	nop
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	2000049c 	.word	0x2000049c

080063ac <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80063b0:	f002 fde4 	bl	8008f7c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80063b4:	bf00      	nop
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0
  return 1;
 80063bc:	2301      	movs	r3, #1
}
 80063be:	4618      	mov	r0, r3
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <_kill>:

int _kill(int pid, int sig)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80063d2:	f012 f899 	bl	8018508 <__errno>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2216      	movs	r2, #22
 80063da:	601a      	str	r2, [r3, #0]
  return -1;
 80063dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <_exit>:

void _exit (int status)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80063f0:	f04f 31ff 	mov.w	r1, #4294967295
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff ffe7 	bl	80063c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80063fa:	bf00      	nop
 80063fc:	e7fd      	b.n	80063fa <_exit+0x12>

080063fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b086      	sub	sp, #24
 8006402:	af00      	add	r7, sp, #0
 8006404:	60f8      	str	r0, [r7, #12]
 8006406:	60b9      	str	r1, [r7, #8]
 8006408:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	e00a      	b.n	8006426 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006410:	f3af 8000 	nop.w
 8006414:	4601      	mov	r1, r0
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	60ba      	str	r2, [r7, #8]
 800641c:	b2ca      	uxtb	r2, r1
 800641e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	3301      	adds	r3, #1
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	429a      	cmp	r2, r3
 800642c:	dbf0      	blt.n	8006410 <_read+0x12>
  }

  return len;
 800642e:	687b      	ldr	r3, [r7, #4]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e009      	b.n	800645e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	60ba      	str	r2, [r7, #8]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	3301      	adds	r3, #1
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	429a      	cmp	r2, r3
 8006464:	dbf1      	blt.n	800644a <_write+0x12>
  }
  return len;
 8006466:	687b      	ldr	r3, [r7, #4]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <_close>:

int _close(int file)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006478:	f04f 33ff 	mov.w	r3, #4294967295
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006498:	605a      	str	r2, [r3, #4]
  return 0;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <_isatty>:

int _isatty(int file)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80064b0:	2301      	movs	r3, #1
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80064be:	b480      	push	{r7}
 80064c0:	b085      	sub	sp, #20
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80064e0:	4a14      	ldr	r2, [pc, #80]	@ (8006534 <_sbrk+0x5c>)
 80064e2:	4b15      	ldr	r3, [pc, #84]	@ (8006538 <_sbrk+0x60>)
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80064ec:	4b13      	ldr	r3, [pc, #76]	@ (800653c <_sbrk+0x64>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d102      	bne.n	80064fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80064f4:	4b11      	ldr	r3, [pc, #68]	@ (800653c <_sbrk+0x64>)
 80064f6:	4a12      	ldr	r2, [pc, #72]	@ (8006540 <_sbrk+0x68>)
 80064f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80064fa:	4b10      	ldr	r3, [pc, #64]	@ (800653c <_sbrk+0x64>)
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4413      	add	r3, r2
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	429a      	cmp	r2, r3
 8006506:	d207      	bcs.n	8006518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006508:	f011 fffe 	bl	8018508 <__errno>
 800650c:	4603      	mov	r3, r0
 800650e:	220c      	movs	r2, #12
 8006510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006512:	f04f 33ff 	mov.w	r3, #4294967295
 8006516:	e009      	b.n	800652c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006518:	4b08      	ldr	r3, [pc, #32]	@ (800653c <_sbrk+0x64>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800651e:	4b07      	ldr	r3, [pc, #28]	@ (800653c <_sbrk+0x64>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4413      	add	r3, r2
 8006526:	4a05      	ldr	r2, [pc, #20]	@ (800653c <_sbrk+0x64>)
 8006528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800652a:	68fb      	ldr	r3, [r7, #12]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	20030000 	.word	0x20030000
 8006538:	00000400 	.word	0x00000400
 800653c:	200010ec 	.word	0x200010ec
 8006540:	20002df8 	.word	0x20002df8

08006544 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8006548:	4b24      	ldr	r3, [pc, #144]	@ (80065dc <SystemInit+0x98>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654e:	4a23      	ldr	r2, [pc, #140]	@ (80065dc <SystemInit+0x98>)
 8006550:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006554:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006562:	f043 0301 	orr.w	r3, r3, #1
 8006566:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8006568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800656c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8006570:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8006572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800657c:	4b18      	ldr	r3, [pc, #96]	@ (80065e0 <SystemInit+0x9c>)
 800657e:	4013      	ands	r3, r2
 8006580:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8006582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800658a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800658e:	f023 0305 	bic.w	r3, r3, #5
 8006592:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800659a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800659e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065a2:	f023 0301 	bic.w	r3, r3, #1
 80065a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80065aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ae:	4a0d      	ldr	r2, [pc, #52]	@ (80065e4 <SystemInit+0xa0>)
 80065b0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80065b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065b6:	4a0b      	ldr	r2, [pc, #44]	@ (80065e4 <SystemInit+0xa0>)
 80065b8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80065ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80065ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ce:	2200      	movs	r2, #0
 80065d0:	619a      	str	r2, [r3, #24]
}
 80065d2:	bf00      	nop
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	e000ed00 	.word	0xe000ed00
 80065e0:	faf6fefb 	.word	0xfaf6fefb
 80065e4:	22041000 	.word	0x22041000

080065e8 <LL_APB1_GRP1_EnableClock>:
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80065f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80065f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006604:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4013      	ands	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800660c:	68fb      	ldr	r3, [r7, #12]
}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <LL_APB2_GRP1_EnableClock>:
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006626:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006628:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4313      	orrs	r3, r2
 8006630:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006636:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4013      	ands	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800663e:	68fb      	ldr	r3, [r7, #12]
}
 8006640:	bf00      	nop
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006652:	f107 0310 	add.w	r3, r7, #16
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	605a      	str	r2, [r3, #4]
 800665c:	609a      	str	r2, [r3, #8]
 800665e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006660:	1d3b      	adds	r3, r7, #4
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	605a      	str	r2, [r3, #4]
 8006668:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800666a:	4b1e      	ldr	r3, [pc, #120]	@ (80066e4 <MX_TIM2_Init+0x98>)
 800666c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006670:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8006672:	4b1c      	ldr	r3, [pc, #112]	@ (80066e4 <MX_TIM2_Init+0x98>)
 8006674:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8006678:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800667a:	4b1a      	ldr	r3, [pc, #104]	@ (80066e4 <MX_TIM2_Init+0x98>)
 800667c:	2200      	movs	r2, #0
 800667e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8006680:	4b18      	ldr	r3, [pc, #96]	@ (80066e4 <MX_TIM2_Init+0x98>)
 8006682:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006686:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006688:	4b16      	ldr	r3, [pc, #88]	@ (80066e4 <MX_TIM2_Init+0x98>)
 800668a:	2200      	movs	r2, #0
 800668c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800668e:	4b15      	ldr	r3, [pc, #84]	@ (80066e4 <MX_TIM2_Init+0x98>)
 8006690:	2200      	movs	r2, #0
 8006692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006694:	4813      	ldr	r0, [pc, #76]	@ (80066e4 <MX_TIM2_Init+0x98>)
 8006696:	f008 fd2d 	bl	800f0f4 <HAL_TIM_Base_Init>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80066a0:	f7fb fd17 	bl	80020d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80066a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80066a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80066aa:	f107 0310 	add.w	r3, r7, #16
 80066ae:	4619      	mov	r1, r3
 80066b0:	480c      	ldr	r0, [pc, #48]	@ (80066e4 <MX_TIM2_Init+0x98>)
 80066b2:	f008 ff41 	bl	800f538 <HAL_TIM_ConfigClockSource>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80066bc:	f7fb fd09 	bl	80020d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80066c0:	2320      	movs	r3, #32
 80066c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80066c8:	1d3b      	adds	r3, r7, #4
 80066ca:	4619      	mov	r1, r3
 80066cc:	4805      	ldr	r0, [pc, #20]	@ (80066e4 <MX_TIM2_Init+0x98>)
 80066ce:	f009 f93b 	bl	800f948 <HAL_TIMEx_MasterConfigSynchronization>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80066d8:	f7fb fcfb 	bl	80020d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80066dc:	bf00      	nop
 80066de:	3720      	adds	r7, #32
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	200010f0 	.word	0x200010f0

080066e8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80066ec:	4b10      	ldr	r3, [pc, #64]	@ (8006730 <MX_TIM16_Init+0x48>)
 80066ee:	4a11      	ldr	r2, [pc, #68]	@ (8006734 <MX_TIM16_Init+0x4c>)
 80066f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 80066f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006730 <MX_TIM16_Init+0x48>)
 80066f4:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80066f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006730 <MX_TIM16_Init+0x48>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8006700:	4b0b      	ldr	r3, [pc, #44]	@ (8006730 <MX_TIM16_Init+0x48>)
 8006702:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006706:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006708:	4b09      	ldr	r3, [pc, #36]	@ (8006730 <MX_TIM16_Init+0x48>)
 800670a:	2200      	movs	r2, #0
 800670c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800670e:	4b08      	ldr	r3, [pc, #32]	@ (8006730 <MX_TIM16_Init+0x48>)
 8006710:	2200      	movs	r2, #0
 8006712:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006714:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <MX_TIM16_Init+0x48>)
 8006716:	2200      	movs	r2, #0
 8006718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800671a:	4805      	ldr	r0, [pc, #20]	@ (8006730 <MX_TIM16_Init+0x48>)
 800671c:	f008 fcea 	bl	800f0f4 <HAL_TIM_Base_Init>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8006726:	f7fb fcd4 	bl	80020d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800672a:	bf00      	nop
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	2000113c 	.word	0x2000113c
 8006734:	40014400 	.word	0x40014400

08006738 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800673c:	4b0f      	ldr	r3, [pc, #60]	@ (800677c <MX_TIM17_Init+0x44>)
 800673e:	4a10      	ldr	r2, [pc, #64]	@ (8006780 <MX_TIM17_Init+0x48>)
 8006740:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 8006742:	4b0e      	ldr	r3, [pc, #56]	@ (800677c <MX_TIM17_Init+0x44>)
 8006744:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006748:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800674a:	4b0c      	ldr	r3, [pc, #48]	@ (800677c <MX_TIM17_Init+0x44>)
 800674c:	2200      	movs	r2, #0
 800674e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 200-1;
 8006750:	4b0a      	ldr	r3, [pc, #40]	@ (800677c <MX_TIM17_Init+0x44>)
 8006752:	22c7      	movs	r2, #199	@ 0xc7
 8006754:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006756:	4b09      	ldr	r3, [pc, #36]	@ (800677c <MX_TIM17_Init+0x44>)
 8006758:	2200      	movs	r2, #0
 800675a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800675c:	4b07      	ldr	r3, [pc, #28]	@ (800677c <MX_TIM17_Init+0x44>)
 800675e:	2200      	movs	r2, #0
 8006760:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006762:	4b06      	ldr	r3, [pc, #24]	@ (800677c <MX_TIM17_Init+0x44>)
 8006764:	2200      	movs	r2, #0
 8006766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8006768:	4804      	ldr	r0, [pc, #16]	@ (800677c <MX_TIM17_Init+0x44>)
 800676a:	f008 fcc3 	bl	800f0f4 <HAL_TIM_Base_Init>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8006774:	f7fb fcad 	bl	80020d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8006778:	bf00      	nop
 800677a:	bd80      	pop	{r7, pc}
 800677c:	20001188 	.word	0x20001188
 8006780:	40014800 	.word	0x40014800

08006784 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006794:	d103      	bne.n	800679e <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006796:	2001      	movs	r0, #1
 8006798:	f7ff ff26 	bl	80065e8 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800679c:	e022      	b.n	80067e4 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM16)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a12      	ldr	r2, [pc, #72]	@ (80067ec <HAL_TIM_Base_MspInit+0x68>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d10c      	bne.n	80067c2 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80067a8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80067ac:	f7ff ff35 	bl	800661a <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 80067b0:	2200      	movs	r2, #0
 80067b2:	2104      	movs	r1, #4
 80067b4:	2019      	movs	r0, #25
 80067b6:	f001 fe9c 	bl	80084f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80067ba:	2019      	movs	r0, #25
 80067bc:	f001 feb3 	bl	8008526 <HAL_NVIC_EnableIRQ>
}
 80067c0:	e010      	b.n	80067e4 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM17)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a0a      	ldr	r2, [pc, #40]	@ (80067f0 <HAL_TIM_Base_MspInit+0x6c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d10b      	bne.n	80067e4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80067cc:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80067d0:	f7ff ff23 	bl	800661a <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 80067d4:	2200      	movs	r2, #0
 80067d6:	2102      	movs	r1, #2
 80067d8:	201a      	movs	r0, #26
 80067da:	f001 fe8a 	bl	80084f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80067de:	201a      	movs	r0, #26
 80067e0:	f001 fea1 	bl	8008526 <HAL_NVIC_EnableIRQ>
}
 80067e4:	bf00      	nop
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	40014400 	.word	0x40014400
 80067f0:	40014800 	.word	0x40014800

080067f4 <updatedate>:
  /* USER CODE END TIM17_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0

	SEC+=1;
 80067f8:	4b98      	ldr	r3, [pc, #608]	@ (8006a5c <updatedate+0x268>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	3301      	adds	r3, #1
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	4b96      	ldr	r3, [pc, #600]	@ (8006a5c <updatedate+0x268>)
 8006802:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8006804:	4b95      	ldr	r3, [pc, #596]	@ (8006a5c <updatedate+0x268>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b3b      	cmp	r3, #59	@ 0x3b
 800680a:	d908      	bls.n	800681e <updatedate+0x2a>
		SEC=0;
 800680c:	4b93      	ldr	r3, [pc, #588]	@ (8006a5c <updatedate+0x268>)
 800680e:	2200      	movs	r2, #0
 8006810:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 8006812:	4b93      	ldr	r3, [pc, #588]	@ (8006a60 <updatedate+0x26c>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	3301      	adds	r3, #1
 8006818:	b2da      	uxtb	r2, r3
 800681a:	4b91      	ldr	r3, [pc, #580]	@ (8006a60 <updatedate+0x26c>)
 800681c:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 800681e:	4b90      	ldr	r3, [pc, #576]	@ (8006a60 <updatedate+0x26c>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b3b      	cmp	r3, #59	@ 0x3b
 8006824:	d908      	bls.n	8006838 <updatedate+0x44>

		MINUTE=0;
 8006826:	4b8e      	ldr	r3, [pc, #568]	@ (8006a60 <updatedate+0x26c>)
 8006828:	2200      	movs	r2, #0
 800682a:	701a      	strb	r2, [r3, #0]
		HR+=1;
 800682c:	4b8d      	ldr	r3, [pc, #564]	@ (8006a64 <updatedate+0x270>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	3301      	adds	r3, #1
 8006832:	b2da      	uxtb	r2, r3
 8006834:	4b8b      	ldr	r3, [pc, #556]	@ (8006a64 <updatedate+0x270>)
 8006836:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 8006838:	4b8a      	ldr	r3, [pc, #552]	@ (8006a64 <updatedate+0x270>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b17      	cmp	r3, #23
 800683e:	d908      	bls.n	8006852 <updatedate+0x5e>
		HR=0;
 8006840:	4b88      	ldr	r3, [pc, #544]	@ (8006a64 <updatedate+0x270>)
 8006842:	2200      	movs	r2, #0
 8006844:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 8006846:	4b88      	ldr	r3, [pc, #544]	@ (8006a68 <updatedate+0x274>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	3301      	adds	r3, #1
 800684c:	b2da      	uxtb	r2, r3
 800684e:	4b86      	ldr	r3, [pc, #536]	@ (8006a68 <updatedate+0x274>)
 8006850:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 8006852:	4b86      	ldr	r3, [pc, #536]	@ (8006a6c <updatedate+0x278>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b0b      	cmp	r3, #11
 8006858:	f200 8137 	bhi.w	8006aca <updatedate+0x2d6>
 800685c:	a201      	add	r2, pc, #4	@ (adr r2, 8006864 <updatedate+0x70>)
 800685e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006862:	bf00      	nop
 8006864:	08006895 	.word	0x08006895
 8006868:	080068bf 	.word	0x080068bf
 800686c:	080068e9 	.word	0x080068e9
 8006870:	08006913 	.word	0x08006913
 8006874:	0800693d 	.word	0x0800693d
 8006878:	08006967 	.word	0x08006967
 800687c:	08006991 	.word	0x08006991
 8006880:	080069bb 	.word	0x080069bb
 8006884:	080069e3 	.word	0x080069e3
 8006888:	08006a0b 	.word	0x08006a0b
 800688c:	08006a33 	.word	0x08006a33
 8006890:	08006a75 	.word	0x08006a75

	case JANVIER:
		if(JOURS>31){
 8006894:	4b74      	ldr	r3, [pc, #464]	@ (8006a68 <updatedate+0x274>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b1f      	cmp	r3, #31
 800689a:	f240 80ff 	bls.w	8006a9c <updatedate+0x2a8>
			JOURS=1;
 800689e:	4b72      	ldr	r3, [pc, #456]	@ (8006a68 <updatedate+0x274>)
 80068a0:	2201      	movs	r2, #1
 80068a2:	701a      	strb	r2, [r3, #0]
			mois++;
 80068a4:	4b71      	ldr	r3, [pc, #452]	@ (8006a6c <updatedate+0x278>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	3301      	adds	r3, #1
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	4b6f      	ldr	r3, [pc, #444]	@ (8006a6c <updatedate+0x278>)
 80068ae:	701a      	strb	r2, [r3, #0]
			MOIS++;
 80068b0:	4b6f      	ldr	r3, [pc, #444]	@ (8006a70 <updatedate+0x27c>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	3301      	adds	r3, #1
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	4b6d      	ldr	r3, [pc, #436]	@ (8006a70 <updatedate+0x27c>)
 80068ba:	701a      	strb	r2, [r3, #0]
		}

		break;
 80068bc:	e0ee      	b.n	8006a9c <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 80068be:	4b6a      	ldr	r3, [pc, #424]	@ (8006a68 <updatedate+0x274>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b1d      	cmp	r3, #29
 80068c4:	f240 80ec 	bls.w	8006aa0 <updatedate+0x2ac>
					JOURS=1;
 80068c8:	4b67      	ldr	r3, [pc, #412]	@ (8006a68 <updatedate+0x274>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	701a      	strb	r2, [r3, #0]
					mois++;
 80068ce:	4b67      	ldr	r3, [pc, #412]	@ (8006a6c <updatedate+0x278>)
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	3301      	adds	r3, #1
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	4b65      	ldr	r3, [pc, #404]	@ (8006a6c <updatedate+0x278>)
 80068d8:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80068da:	4b65      	ldr	r3, [pc, #404]	@ (8006a70 <updatedate+0x27c>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	3301      	adds	r3, #1
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	4b63      	ldr	r3, [pc, #396]	@ (8006a70 <updatedate+0x27c>)
 80068e4:	701a      	strb	r2, [r3, #0]
				}
		break;
 80068e6:	e0db      	b.n	8006aa0 <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 80068e8:	4b5f      	ldr	r3, [pc, #380]	@ (8006a68 <updatedate+0x274>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b1f      	cmp	r3, #31
 80068ee:	f240 80d9 	bls.w	8006aa4 <updatedate+0x2b0>
					JOURS=1;
 80068f2:	4b5d      	ldr	r3, [pc, #372]	@ (8006a68 <updatedate+0x274>)
 80068f4:	2201      	movs	r2, #1
 80068f6:	701a      	strb	r2, [r3, #0]
					mois++;
 80068f8:	4b5c      	ldr	r3, [pc, #368]	@ (8006a6c <updatedate+0x278>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	3301      	adds	r3, #1
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	4b5a      	ldr	r3, [pc, #360]	@ (8006a6c <updatedate+0x278>)
 8006902:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006904:	4b5a      	ldr	r3, [pc, #360]	@ (8006a70 <updatedate+0x27c>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	3301      	adds	r3, #1
 800690a:	b2da      	uxtb	r2, r3
 800690c:	4b58      	ldr	r3, [pc, #352]	@ (8006a70 <updatedate+0x27c>)
 800690e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006910:	e0c8      	b.n	8006aa4 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8006912:	4b55      	ldr	r3, [pc, #340]	@ (8006a68 <updatedate+0x274>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b1e      	cmp	r3, #30
 8006918:	f240 80c6 	bls.w	8006aa8 <updatedate+0x2b4>
					JOURS=1;
 800691c:	4b52      	ldr	r3, [pc, #328]	@ (8006a68 <updatedate+0x274>)
 800691e:	2201      	movs	r2, #1
 8006920:	701a      	strb	r2, [r3, #0]
					mois++;
 8006922:	4b52      	ldr	r3, [pc, #328]	@ (8006a6c <updatedate+0x278>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	3301      	adds	r3, #1
 8006928:	b2da      	uxtb	r2, r3
 800692a:	4b50      	ldr	r3, [pc, #320]	@ (8006a6c <updatedate+0x278>)
 800692c:	701a      	strb	r2, [r3, #0]
					MOIS++;
 800692e:	4b50      	ldr	r3, [pc, #320]	@ (8006a70 <updatedate+0x27c>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	3301      	adds	r3, #1
 8006934:	b2da      	uxtb	r2, r3
 8006936:	4b4e      	ldr	r3, [pc, #312]	@ (8006a70 <updatedate+0x27c>)
 8006938:	701a      	strb	r2, [r3, #0]
				}
		break;
 800693a:	e0b5      	b.n	8006aa8 <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 800693c:	4b4a      	ldr	r3, [pc, #296]	@ (8006a68 <updatedate+0x274>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	2b1f      	cmp	r3, #31
 8006942:	f240 80b3 	bls.w	8006aac <updatedate+0x2b8>
					JOURS=1;
 8006946:	4b48      	ldr	r3, [pc, #288]	@ (8006a68 <updatedate+0x274>)
 8006948:	2201      	movs	r2, #1
 800694a:	701a      	strb	r2, [r3, #0]
					mois++;
 800694c:	4b47      	ldr	r3, [pc, #284]	@ (8006a6c <updatedate+0x278>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	3301      	adds	r3, #1
 8006952:	b2da      	uxtb	r2, r3
 8006954:	4b45      	ldr	r3, [pc, #276]	@ (8006a6c <updatedate+0x278>)
 8006956:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006958:	4b45      	ldr	r3, [pc, #276]	@ (8006a70 <updatedate+0x27c>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	b2da      	uxtb	r2, r3
 8006960:	4b43      	ldr	r3, [pc, #268]	@ (8006a70 <updatedate+0x27c>)
 8006962:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006964:	e0a2      	b.n	8006aac <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 8006966:	4b40      	ldr	r3, [pc, #256]	@ (8006a68 <updatedate+0x274>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b1e      	cmp	r3, #30
 800696c:	f240 80a0 	bls.w	8006ab0 <updatedate+0x2bc>
					JOURS=1;
 8006970:	4b3d      	ldr	r3, [pc, #244]	@ (8006a68 <updatedate+0x274>)
 8006972:	2201      	movs	r2, #1
 8006974:	701a      	strb	r2, [r3, #0]
					mois++;
 8006976:	4b3d      	ldr	r3, [pc, #244]	@ (8006a6c <updatedate+0x278>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	3301      	adds	r3, #1
 800697c:	b2da      	uxtb	r2, r3
 800697e:	4b3b      	ldr	r3, [pc, #236]	@ (8006a6c <updatedate+0x278>)
 8006980:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006982:	4b3b      	ldr	r3, [pc, #236]	@ (8006a70 <updatedate+0x27c>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	3301      	adds	r3, #1
 8006988:	b2da      	uxtb	r2, r3
 800698a:	4b39      	ldr	r3, [pc, #228]	@ (8006a70 <updatedate+0x27c>)
 800698c:	701a      	strb	r2, [r3, #0]
				}
		break;
 800698e:	e08f      	b.n	8006ab0 <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8006990:	4b35      	ldr	r3, [pc, #212]	@ (8006a68 <updatedate+0x274>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b1f      	cmp	r3, #31
 8006996:	f240 808d 	bls.w	8006ab4 <updatedate+0x2c0>
					JOURS=1;
 800699a:	4b33      	ldr	r3, [pc, #204]	@ (8006a68 <updatedate+0x274>)
 800699c:	2201      	movs	r2, #1
 800699e:	701a      	strb	r2, [r3, #0]
					mois++;
 80069a0:	4b32      	ldr	r3, [pc, #200]	@ (8006a6c <updatedate+0x278>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	3301      	adds	r3, #1
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	4b30      	ldr	r3, [pc, #192]	@ (8006a6c <updatedate+0x278>)
 80069aa:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80069ac:	4b30      	ldr	r3, [pc, #192]	@ (8006a70 <updatedate+0x27c>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	3301      	adds	r3, #1
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006a70 <updatedate+0x27c>)
 80069b6:	701a      	strb	r2, [r3, #0]
				}
		break;
 80069b8:	e07c      	b.n	8006ab4 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 80069ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006a68 <updatedate+0x274>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b1f      	cmp	r3, #31
 80069c0:	d97a      	bls.n	8006ab8 <updatedate+0x2c4>
					JOURS=1;
 80069c2:	4b29      	ldr	r3, [pc, #164]	@ (8006a68 <updatedate+0x274>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	701a      	strb	r2, [r3, #0]
					mois++;
 80069c8:	4b28      	ldr	r3, [pc, #160]	@ (8006a6c <updatedate+0x278>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	3301      	adds	r3, #1
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	4b26      	ldr	r3, [pc, #152]	@ (8006a6c <updatedate+0x278>)
 80069d2:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80069d4:	4b26      	ldr	r3, [pc, #152]	@ (8006a70 <updatedate+0x27c>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	3301      	adds	r3, #1
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	4b24      	ldr	r3, [pc, #144]	@ (8006a70 <updatedate+0x27c>)
 80069de:	701a      	strb	r2, [r3, #0]
				}
		break;
 80069e0:	e06a      	b.n	8006ab8 <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 80069e2:	4b21      	ldr	r3, [pc, #132]	@ (8006a68 <updatedate+0x274>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b1e      	cmp	r3, #30
 80069e8:	d968      	bls.n	8006abc <updatedate+0x2c8>
					JOURS=1;
 80069ea:	4b1f      	ldr	r3, [pc, #124]	@ (8006a68 <updatedate+0x274>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	701a      	strb	r2, [r3, #0]
					mois++;
 80069f0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a6c <updatedate+0x278>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	4b1c      	ldr	r3, [pc, #112]	@ (8006a6c <updatedate+0x278>)
 80069fa:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80069fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006a70 <updatedate+0x27c>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	3301      	adds	r3, #1
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	4b1a      	ldr	r3, [pc, #104]	@ (8006a70 <updatedate+0x27c>)
 8006a06:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006a08:	e058      	b.n	8006abc <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8006a0a:	4b17      	ldr	r3, [pc, #92]	@ (8006a68 <updatedate+0x274>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b1f      	cmp	r3, #31
 8006a10:	d956      	bls.n	8006ac0 <updatedate+0x2cc>
					JOURS=1;
 8006a12:	4b15      	ldr	r3, [pc, #84]	@ (8006a68 <updatedate+0x274>)
 8006a14:	2201      	movs	r2, #1
 8006a16:	701a      	strb	r2, [r3, #0]
					mois++;
 8006a18:	4b14      	ldr	r3, [pc, #80]	@ (8006a6c <updatedate+0x278>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	4b12      	ldr	r3, [pc, #72]	@ (8006a6c <updatedate+0x278>)
 8006a22:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006a24:	4b12      	ldr	r3, [pc, #72]	@ (8006a70 <updatedate+0x27c>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	4b10      	ldr	r3, [pc, #64]	@ (8006a70 <updatedate+0x27c>)
 8006a2e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006a30:	e046      	b.n	8006ac0 <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8006a32:	4b0d      	ldr	r3, [pc, #52]	@ (8006a68 <updatedate+0x274>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b1e      	cmp	r3, #30
 8006a38:	d944      	bls.n	8006ac4 <updatedate+0x2d0>
					JOURS=1;
 8006a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a68 <updatedate+0x274>)
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	701a      	strb	r2, [r3, #0]
					mois++;
 8006a40:	4b0a      	ldr	r3, [pc, #40]	@ (8006a6c <updatedate+0x278>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	3301      	adds	r3, #1
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	4b08      	ldr	r3, [pc, #32]	@ (8006a6c <updatedate+0x278>)
 8006a4a:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006a4c:	4b08      	ldr	r3, [pc, #32]	@ (8006a70 <updatedate+0x27c>)
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	3301      	adds	r3, #1
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	4b06      	ldr	r3, [pc, #24]	@ (8006a70 <updatedate+0x27c>)
 8006a56:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006a58:	e034      	b.n	8006ac4 <updatedate+0x2d0>
 8006a5a:	bf00      	nop
 8006a5c:	20000a84 	.word	0x20000a84
 8006a60:	20000a86 	.word	0x20000a86
 8006a64:	20000a85 	.word	0x20000a85
 8006a68:	20000010 	.word	0x20000010
 8006a6c:	20000a87 	.word	0x20000a87
 8006a70:	20000011 	.word	0x20000011
	case DECEMBRE:
		if(JOURS>31){
 8006a74:	4b1f      	ldr	r3, [pc, #124]	@ (8006af4 <updatedate+0x300>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b1f      	cmp	r3, #31
 8006a7a:	d925      	bls.n	8006ac8 <updatedate+0x2d4>
					JOURS=1;
 8006a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006af4 <updatedate+0x300>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	701a      	strb	r2, [r3, #0]
					mois++;
 8006a82:	4b1d      	ldr	r3, [pc, #116]	@ (8006af8 <updatedate+0x304>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	3301      	adds	r3, #1
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006af8 <updatedate+0x304>)
 8006a8c:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8006afc <updatedate+0x308>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	3301      	adds	r3, #1
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	4b19      	ldr	r3, [pc, #100]	@ (8006afc <updatedate+0x308>)
 8006a98:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006a9a:	e015      	b.n	8006ac8 <updatedate+0x2d4>
		break;
 8006a9c:	bf00      	nop
 8006a9e:	e014      	b.n	8006aca <updatedate+0x2d6>
		break;
 8006aa0:	bf00      	nop
 8006aa2:	e012      	b.n	8006aca <updatedate+0x2d6>
		break;
 8006aa4:	bf00      	nop
 8006aa6:	e010      	b.n	8006aca <updatedate+0x2d6>
		break;
 8006aa8:	bf00      	nop
 8006aaa:	e00e      	b.n	8006aca <updatedate+0x2d6>
		break;
 8006aac:	bf00      	nop
 8006aae:	e00c      	b.n	8006aca <updatedate+0x2d6>
		break;
 8006ab0:	bf00      	nop
 8006ab2:	e00a      	b.n	8006aca <updatedate+0x2d6>
		break;
 8006ab4:	bf00      	nop
 8006ab6:	e008      	b.n	8006aca <updatedate+0x2d6>
		break;
 8006ab8:	bf00      	nop
 8006aba:	e006      	b.n	8006aca <updatedate+0x2d6>
		break;
 8006abc:	bf00      	nop
 8006abe:	e004      	b.n	8006aca <updatedate+0x2d6>
		break;
 8006ac0:	bf00      	nop
 8006ac2:	e002      	b.n	8006aca <updatedate+0x2d6>
		break;
 8006ac4:	bf00      	nop
 8006ac6:	e000      	b.n	8006aca <updatedate+0x2d6>
		break;
 8006ac8:	bf00      	nop

	}

	if(MOIS>12){
 8006aca:	4b0c      	ldr	r3, [pc, #48]	@ (8006afc <updatedate+0x308>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	2b0c      	cmp	r3, #12
 8006ad0:	d90b      	bls.n	8006aea <updatedate+0x2f6>
		mois=JANVIER;
 8006ad2:	4b09      	ldr	r3, [pc, #36]	@ (8006af8 <updatedate+0x304>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 8006ad8:	4b08      	ldr	r3, [pc, #32]	@ (8006afc <updatedate+0x308>)
 8006ada:	2201      	movs	r2, #1
 8006adc:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8006ade:	4b08      	ldr	r3, [pc, #32]	@ (8006b00 <updatedate+0x30c>)
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	4b06      	ldr	r3, [pc, #24]	@ (8006b00 <updatedate+0x30c>)
 8006ae8:	801a      	strh	r2, [r3, #0]
	}
}
 8006aea:	bf00      	nop
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	20000010 	.word	0x20000010
 8006af8:	20000a87 	.word	0x20000a87
 8006afc:	20000011 	.word	0x20000011
 8006b00:	20000012 	.word	0x20000012

08006b04 <LL_AHB2_GRP1_EnableClock>:
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4013      	ands	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b28:	68fb      	ldr	r3, [r7, #12]
}
 8006b2a:	bf00      	nop
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <LL_APB1_GRP2_EnableClock>:
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006b3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4013      	ands	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
}
 8006b5c:	bf00      	nop
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006b6c:	4b22      	ldr	r3, [pc, #136]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006b6e:	4a23      	ldr	r2, [pc, #140]	@ (8006bfc <MX_LPUART1_UART_Init+0x94>)
 8006b70:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8006b72:	4b21      	ldr	r3, [pc, #132]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006b74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006b78:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006b80:	4b1d      	ldr	r3, [pc, #116]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006b86:	4b1c      	ldr	r3, [pc, #112]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006b8e:	220c      	movs	r2, #12
 8006b90:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b92:	4b19      	ldr	r3, [pc, #100]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b98:	4b17      	ldr	r3, [pc, #92]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006b9e:	4b16      	ldr	r3, [pc, #88]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006ba4:	4b14      	ldr	r3, [pc, #80]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8006baa:	4b13      	ldr	r3, [pc, #76]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006bb0:	4811      	ldr	r0, [pc, #68]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006bb2:	f008 ff67 	bl	800fa84 <HAL_UART_Init>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8006bbc:	f7fb fa89 	bl	80020d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	480d      	ldr	r0, [pc, #52]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006bc4:	f00a fb2c 	bl	8011220 <HAL_UARTEx_SetTxFifoThreshold>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006bce:	f7fb fa80 	bl	80020d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	4808      	ldr	r0, [pc, #32]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006bd6:	f00a fb61 	bl	801129c <HAL_UARTEx_SetRxFifoThreshold>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006be0:	f7fb fa77 	bl	80020d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006be4:	4804      	ldr	r0, [pc, #16]	@ (8006bf8 <MX_LPUART1_UART_Init+0x90>)
 8006be6:	f00a fae2 	bl	80111ae <HAL_UARTEx_DisableFifoMode>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006bf0:	f7fb fa6f 	bl	80020d2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006bf4:	bf00      	nop
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	200011d4 	.word	0x200011d4
 8006bfc:	40008000 	.word	0x40008000

08006c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b09c      	sub	sp, #112	@ 0x70
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c08:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	609a      	str	r2, [r3, #8]
 8006c14:	60da      	str	r2, [r3, #12]
 8006c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006c18:	f107 030c 	add.w	r3, r7, #12
 8006c1c:	2250      	movs	r2, #80	@ 0x50
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f011 fb8a 	bl	801833a <memset>
  if(uartHandle->Instance==LPUART1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8006ce8 <HAL_UART_MspInit+0xe8>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d157      	bne.n	8006ce0 <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006c30:	2302      	movs	r3, #2
 8006c32:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8006c34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006c38:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c3a:	f107 030c 	add.w	r3, r7, #12
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f006 fc07 	bl	800d452 <HAL_RCCEx_PeriphCLKConfig>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006c4a:	f7fb fa42 	bl	80020d2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006c4e:	2001      	movs	r0, #1
 8006c50:	f7ff ff71 	bl	8006b36 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c54:	2001      	movs	r0, #1
 8006c56:	f7ff ff55 	bl	8006b04 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006c5a:	230c      	movs	r3, #12
 8006c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c66:	2300      	movs	r3, #0
 8006c68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c6e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006c72:	4619      	mov	r1, r3
 8006c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006c78:	f001 ffae 	bl	8008bd8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8006c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8006cec <HAL_UART_MspInit+0xec>)
 8006c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8006cf0 <HAL_UART_MspInit+0xf0>)
 8006c80:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8006c82:	4b1a      	ldr	r3, [pc, #104]	@ (8006cec <HAL_UART_MspInit+0xec>)
 8006c84:	2210      	movs	r2, #16
 8006c86:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c88:	4b18      	ldr	r3, [pc, #96]	@ (8006cec <HAL_UART_MspInit+0xec>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c8e:	4b17      	ldr	r3, [pc, #92]	@ (8006cec <HAL_UART_MspInit+0xec>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006c94:	4b15      	ldr	r3, [pc, #84]	@ (8006cec <HAL_UART_MspInit+0xec>)
 8006c96:	2280      	movs	r2, #128	@ 0x80
 8006c98:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c9a:	4b14      	ldr	r3, [pc, #80]	@ (8006cec <HAL_UART_MspInit+0xec>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ca0:	4b12      	ldr	r3, [pc, #72]	@ (8006cec <HAL_UART_MspInit+0xec>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8006ca6:	4b11      	ldr	r3, [pc, #68]	@ (8006cec <HAL_UART_MspInit+0xec>)
 8006ca8:	2220      	movs	r2, #32
 8006caa:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006cac:	4b0f      	ldr	r3, [pc, #60]	@ (8006cec <HAL_UART_MspInit+0xec>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8006cb2:	480e      	ldr	r0, [pc, #56]	@ (8006cec <HAL_UART_MspInit+0xec>)
 8006cb4:	f001 fc52 	bl	800855c <HAL_DMA_Init>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8006cbe:	f7fb fa08 	bl	80020d2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a09      	ldr	r2, [pc, #36]	@ (8006cec <HAL_UART_MspInit+0xec>)
 8006cc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006cca:	4a08      	ldr	r2, [pc, #32]	@ (8006cec <HAL_UART_MspInit+0xec>)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2102      	movs	r1, #2
 8006cd4:	2025      	movs	r0, #37	@ 0x25
 8006cd6:	f001 fc0c 	bl	80084f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006cda:	2025      	movs	r0, #37	@ 0x25
 8006cdc:	f001 fc23 	bl	8008526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8006ce0:	bf00      	nop
 8006ce2:	3770      	adds	r7, #112	@ 0x70
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40008000 	.word	0x40008000
 8006cec:	20001268 	.word	0x20001268
 8006cf0:	4002001c 	.word	0x4002001c

08006cf4 <HAL_UART_RxCpltCallback>:
  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
	if(huart->Instance==LPUART1){
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a31      	ldr	r2, [pc, #196]	@ (8006dc8 <HAL_UART_RxCpltCallback+0xd4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d15c      	bne.n	8006dc0 <HAL_UART_RxCpltCallback+0xcc>
	oldPos = newPos; //keep track of the last position in the buffer
 8006d06:	4b31      	ldr	r3, [pc, #196]	@ (8006dcc <HAL_UART_RxCpltCallback+0xd8>)
 8006d08:	881a      	ldrh	r2, [r3, #0]
 8006d0a:	4b31      	ldr	r3, [pc, #196]	@ (8006dd0 <HAL_UART_RxCpltCallback+0xdc>)
 8006d0c:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8006d0e:	4b30      	ldr	r3, [pc, #192]	@ (8006dd0 <HAL_UART_RxCpltCallback+0xdc>)
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8006d16:	d922      	bls.n	8006d5e <HAL_UART_RxCpltCallback+0x6a>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8006d18:	4b2d      	ldr	r3, [pc, #180]	@ (8006dd0 <HAL_UART_RxCpltCallback+0xdc>)
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006d20:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8006d22:	4b2b      	ldr	r3, [pc, #172]	@ (8006dd0 <HAL_UART_RxCpltCallback+0xdc>)
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	4b2a      	ldr	r3, [pc, #168]	@ (8006dd4 <HAL_UART_RxCpltCallback+0xe0>)
 8006d2a:	4413      	add	r3, r2
 8006d2c:	89fa      	ldrh	r2, [r7, #14]
 8006d2e:	492a      	ldr	r1, [pc, #168]	@ (8006dd8 <HAL_UART_RxCpltCallback+0xe4>)
 8006d30:	4618      	mov	r0, r3
 8006d32:	f011 fc1e 	bl	8018572 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8006d36:	4b26      	ldr	r3, [pc, #152]	@ (8006dd0 <HAL_UART_RxCpltCallback+0xdc>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8006d3c:	89fb      	ldrh	r3, [r7, #14]
 8006d3e:	4a26      	ldr	r2, [pc, #152]	@ (8006dd8 <HAL_UART_RxCpltCallback+0xe4>)
 8006d40:	1899      	adds	r1, r3, r2
 8006d42:	89fb      	ldrh	r3, [r7, #14]
 8006d44:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8006d48:	461a      	mov	r2, r3
 8006d4a:	4822      	ldr	r0, [pc, #136]	@ (8006dd4 <HAL_UART_RxCpltCallback+0xe0>)
 8006d4c:	f011 fc11 	bl	8018572 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8006d50:	89fb      	ldrh	r3, [r7, #14]
 8006d52:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	4b1c      	ldr	r3, [pc, #112]	@ (8006dcc <HAL_UART_RxCpltCallback+0xd8>)
 8006d5a:	801a      	strh	r2, [r3, #0]
 8006d5c:	e01e      	b.n	8006d9c <HAL_UART_RxCpltCallback+0xa8>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8006d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8006dd0 <HAL_UART_RxCpltCallback+0xdc>)
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	4b1b      	ldr	r3, [pc, #108]	@ (8006dd4 <HAL_UART_RxCpltCallback+0xe0>)
 8006d66:	441a      	add	r2, r3
 8006d68:	4b1b      	ldr	r3, [pc, #108]	@ (8006dd8 <HAL_UART_RxCpltCallback+0xe4>)
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8006d70:	4602      	mov	r2, r0
 8006d72:	4619      	mov	r1, r3
 8006d74:	f8d1 c000 	ldr.w	ip, [r1]
 8006d78:	684e      	ldr	r6, [r1, #4]
 8006d7a:	688d      	ldr	r5, [r1, #8]
 8006d7c:	68c9      	ldr	r1, [r1, #12]
 8006d7e:	f8c2 c000 	str.w	ip, [r2]
 8006d82:	6056      	str	r6, [r2, #4]
 8006d84:	6095      	str	r5, [r2, #8]
 8006d86:	60d1      	str	r1, [r2, #12]
 8006d88:	3310      	adds	r3, #16
 8006d8a:	3010      	adds	r0, #16
 8006d8c:	42a3      	cmp	r3, r4
 8006d8e:	d1ef      	bne.n	8006d70 <HAL_UART_RxCpltCallback+0x7c>
				newPos = 64+oldPos; //update buffer position
 8006d90:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd0 <HAL_UART_RxCpltCallback+0xdc>)
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	3340      	adds	r3, #64	@ 0x40
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	4b0c      	ldr	r3, [pc, #48]	@ (8006dcc <HAL_UART_RxCpltCallback+0xd8>)
 8006d9a:	801a      	strh	r2, [r3, #0]
			}




			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 8006d9c:	2240      	movs	r2, #64	@ 0x40
 8006d9e:	490e      	ldr	r1, [pc, #56]	@ (8006dd8 <HAL_UART_RxCpltCallback+0xe4>)
 8006da0:	480e      	ldr	r0, [pc, #56]	@ (8006ddc <HAL_UART_RxCpltCallback+0xe8>)
 8006da2:	f008 febf 	bl	800fb24 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8006da6:	4b0e      	ldr	r3, [pc, #56]	@ (8006de0 <HAL_UART_RxCpltCallback+0xec>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	4b0c      	ldr	r3, [pc, #48]	@ (8006de0 <HAL_UART_RxCpltCallback+0xec>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0204 	bic.w	r2, r2, #4
 8006db4:	601a      	str	r2, [r3, #0]


	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8006db6:	2240      	movs	r2, #64	@ 0x40
 8006db8:	4907      	ldr	r1, [pc, #28]	@ (8006dd8 <HAL_UART_RxCpltCallback+0xe4>)
 8006dba:	4808      	ldr	r0, [pc, #32]	@ (8006ddc <HAL_UART_RxCpltCallback+0xe8>)
 8006dbc:	f008 feb2 	bl	800fb24 <HAL_UART_Receive_DMA>

	}

}
 8006dc0:	bf00      	nop
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dc8:	40008000 	.word	0x40008000
 8006dcc:	200004e0 	.word	0x200004e0
 8006dd0:	200004de 	.word	0x200004de
 8006dd4:	20000524 	.word	0x20000524
 8006dd8:	200004e4 	.word	0x200004e4
 8006ddc:	200011d4 	.word	0x200011d4
 8006de0:	20001268 	.word	0x20001268

08006de4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006de4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006de6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006de8:	3304      	adds	r3, #4

08006dea <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006dea:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006dec:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8006dee:	d3f9      	bcc.n	8006de4 <CopyDataInit>
  bx lr
 8006df0:	4770      	bx	lr

08006df2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8006df2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006df4:	3004      	adds	r0, #4

08006df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8006df6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8006df8:	d3fb      	bcc.n	8006df2 <FillZerobss>
  bx lr
 8006dfa:	4770      	bx	lr

08006dfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006dfc:	480c      	ldr	r0, [pc, #48]	@ (8006e30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006dfe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006e00:	f7ff fba0 	bl	8006544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006e04:	480b      	ldr	r0, [pc, #44]	@ (8006e34 <LoopForever+0x6>)
 8006e06:	490c      	ldr	r1, [pc, #48]	@ (8006e38 <LoopForever+0xa>)
 8006e08:	4a0c      	ldr	r2, [pc, #48]	@ (8006e3c <LoopForever+0xe>)
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f7ff ffed 	bl	8006dea <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8006e10:	480b      	ldr	r0, [pc, #44]	@ (8006e40 <LoopForever+0x12>)
 8006e12:	490c      	ldr	r1, [pc, #48]	@ (8006e44 <LoopForever+0x16>)
 8006e14:	4a0c      	ldr	r2, [pc, #48]	@ (8006e48 <LoopForever+0x1a>)
 8006e16:	2300      	movs	r3, #0
 8006e18:	f7ff ffe7 	bl	8006dea <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8006e1c:	480b      	ldr	r0, [pc, #44]	@ (8006e4c <LoopForever+0x1e>)
 8006e1e:	490c      	ldr	r1, [pc, #48]	@ (8006e50 <LoopForever+0x22>)
 8006e20:	2300      	movs	r3, #0
 8006e22:	f7ff ffe8 	bl	8006df6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006e26:	f011 fb75 	bl	8018514 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006e2a:	f7fa ffbb 	bl	8001da4 <main>

08006e2e <LoopForever>:

LoopForever:
  b LoopForever
 8006e2e:	e7fe      	b.n	8006e2e <LoopForever>
  ldr   r0, =_estack
 8006e30:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8006e34:	20000008 	.word	0x20000008
 8006e38:	200002f8 	.word	0x200002f8
 8006e3c:	0801f790 	.word	0x0801f790
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8006e40:	20030000 	.word	0x20030000
 8006e44:	20030000 	.word	0x20030000
 8006e48:	0801fa80 	.word	0x0801fa80
  INIT_BSS _sbss, _ebss
 8006e4c:	200002f8 	.word	0x200002f8
 8006e50:	20002df4 	.word	0x20002df4

08006e54 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006e54:	e7fe      	b.n	8006e54 <ADC1_IRQHandler>

08006e56 <LL_AHB1_GRP1_ForceReset>:
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8006e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <LL_AHB1_GRP1_ReleaseReset>:
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8006e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e90:	4013      	ands	r3, r2
 8006e92:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <LL_AHB2_GRP1_ForceReset>:
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2RSTR, Periphs);
 8006ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <LL_AHB2_GRP1_ReleaseReset>:
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 8006ecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006eda:	4013      	ands	r3, r2
 8006edc:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <LL_AHB3_GRP1_ForceReset>:
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3RSTR, Periphs);
 8006ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ef6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ef8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <LL_AHB3_GRP1_ReleaseReset>:
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB3RSTR, Periphs);
 8006f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	43db      	mvns	r3, r3
 8006f20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f24:	4013      	ands	r3, r2
 8006f26:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <LL_APB1_GRP1_ForceReset>:
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8006f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <LL_APB1_GRP2_ForceReset>:
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8006f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <LL_APB1_GRP1_ReleaseReset>:
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8006f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f92:	4013      	ands	r3, r2
 8006f94:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <LL_APB1_GRP2_ReleaseReset>:
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8006faa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	43db      	mvns	r3, r3
 8006fb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fb8:	4013      	ands	r3, r2
 8006fba:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <LL_APB2_GRP1_ForceReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8006fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <LL_APB2_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8006ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ff8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007002:	4013      	ands	r3, r2
 8007004:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <LL_APB3_GRP1_ForceReset>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_RF
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ForceReset(uint32_t Periphs)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB3RSTR, Periphs);
 800701a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800701e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007020:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4313      	orrs	r3, r2
 8007028:	644b      	str	r3, [r1, #68]	@ 0x44
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <LL_APB3_GRP1_ReleaseReset>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_RF
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ReleaseReset(uint32_t Periphs)
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB3RSTR, Periphs);
 800703e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007042:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	43db      	mvns	r3, r3
 8007048:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800704c:	4013      	ands	r3, r2
 800704e:	644b      	str	r3, [r1, #68]	@ 0x44
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007066:	4b0c      	ldr	r3, [pc, #48]	@ (8007098 <HAL_Init+0x3c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a0b      	ldr	r2, [pc, #44]	@ (8007098 <HAL_Init+0x3c>)
 800706c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007070:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007072:	2003      	movs	r0, #3
 8007074:	f001 fa32 	bl	80084dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007078:	200f      	movs	r0, #15
 800707a:	f000 f855 	bl	8007128 <HAL_InitTick>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	71fb      	strb	r3, [r7, #7]
 8007088:	e001      	b.n	800708e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800708a:	f7ff f878 	bl	800617e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800708e:	79fb      	ldrb	r3, [r7, #7]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	58004000 	.word	0x58004000

0800709c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295
 80070a4:	f7ff ff46 	bl	8006f34 <LL_APB1_GRP1_ForceReset>
 80070a8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ac:	f7ff ff54 	bl	8006f58 <LL_APB1_GRP2_ForceReset>
  __HAL_RCC_APB1_RELEASE_RESET();
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295
 80070b4:	f7ff ff62 	bl	8006f7c <LL_APB1_GRP1_ReleaseReset>
 80070b8:	f04f 30ff 	mov.w	r0, #4294967295
 80070bc:	f7ff ff71 	bl	8006fa2 <LL_APB1_GRP2_ReleaseReset>

  __HAL_RCC_APB2_FORCE_RESET();
 80070c0:	f04f 30ff 	mov.w	r0, #4294967295
 80070c4:	f7ff ff80 	bl	8006fc8 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_APB2_RELEASE_RESET();
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	f7ff ff8e 	bl	8006fec <LL_APB2_GRP1_ReleaseReset>

  __HAL_RCC_APB3_FORCE_RESET();
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295
 80070d4:	f7ff ff9d 	bl	8007012 <LL_APB3_GRP1_ForceReset>
  __HAL_RCC_APB3_RELEASE_RESET();
 80070d8:	f04f 30ff 	mov.w	r0, #4294967295
 80070dc:	f7ff ffab 	bl	8007036 <LL_APB3_GRP1_ReleaseReset>

  __HAL_RCC_AHB1_FORCE_RESET();
 80070e0:	f04f 30ff 	mov.w	r0, #4294967295
 80070e4:	f7ff feb7 	bl	8006e56 <LL_AHB1_GRP1_ForceReset>
  __HAL_RCC_AHB1_RELEASE_RESET();
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ec:	f7ff fec5 	bl	8006e7a <LL_AHB1_GRP1_ReleaseReset>

  __HAL_RCC_AHB2_FORCE_RESET();
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295
 80070f4:	f7ff fed4 	bl	8006ea0 <LL_AHB2_GRP1_ForceReset>
  __HAL_RCC_AHB2_RELEASE_RESET();
 80070f8:	f04f 30ff 	mov.w	r0, #4294967295
 80070fc:	f7ff fee2 	bl	8006ec4 <LL_AHB2_GRP1_ReleaseReset>

  __HAL_RCC_AHB3_FORCE_RESET();
 8007100:	f04f 30ff 	mov.w	r0, #4294967295
 8007104:	f7ff fef1 	bl	8006eea <LL_AHB3_GRP1_ForceReset>
  __HAL_RCC_AHB3_RELEASE_RESET();
 8007108:	f04f 30ff 	mov.w	r0, #4294967295
 800710c:	f7ff feff 	bl	8006f0e <LL_AHB3_GRP1_ReleaseReset>

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8007110:	f000 f803 	bl	800711a <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	bd80      	pop	{r7, pc}

0800711a <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800711a:	b480      	push	{r7}
 800711c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800711e:	bf00      	nop
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007134:	4b17      	ldr	r3, [pc, #92]	@ (8007194 <HAL_InitTick+0x6c>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d024      	beq.n	8007186 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800713c:	f005 fef8 	bl	800cf30 <HAL_RCC_GetHCLKFreq>
 8007140:	4602      	mov	r2, r0
 8007142:	4b14      	ldr	r3, [pc, #80]	@ (8007194 <HAL_InitTick+0x6c>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	4619      	mov	r1, r3
 8007148:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800714c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007150:	fbb2 f3f3 	udiv	r3, r2, r3
 8007154:	4618      	mov	r0, r3
 8007156:	f001 f9f4 	bl	8008542 <HAL_SYSTICK_Config>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10f      	bne.n	8007180 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b0f      	cmp	r3, #15
 8007164:	d809      	bhi.n	800717a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007166:	2200      	movs	r2, #0
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	f04f 30ff 	mov.w	r0, #4294967295
 800716e:	f001 f9c0 	bl	80084f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007172:	4a09      	ldr	r2, [pc, #36]	@ (8007198 <HAL_InitTick+0x70>)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	e007      	b.n	800718a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	73fb      	strb	r3, [r7, #15]
 800717e:	e004      	b.n	800718a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	73fb      	strb	r3, [r7, #15]
 8007184:	e001      	b.n	800718a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800718a:	7bfb      	ldrb	r3, [r7, #15]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20000038 	.word	0x20000038
 8007198:	20000034 	.word	0x20000034

0800719c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80071a0:	4b06      	ldr	r3, [pc, #24]	@ (80071bc <HAL_IncTick+0x20>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	4b06      	ldr	r3, [pc, #24]	@ (80071c0 <HAL_IncTick+0x24>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4413      	add	r3, r2
 80071ac:	4a04      	ldr	r2, [pc, #16]	@ (80071c0 <HAL_IncTick+0x24>)
 80071ae:	6013      	str	r3, [r2, #0]
}
 80071b0:	bf00      	nop
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20000038 	.word	0x20000038
 80071c0:	200012c8 	.word	0x200012c8

080071c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
  return uwTick;
 80071c8:	4b03      	ldr	r3, [pc, #12]	@ (80071d8 <HAL_GetTick+0x14>)
 80071ca:	681b      	ldr	r3, [r3, #0]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	200012c8 	.word	0x200012c8

080071dc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80071e0:	4b03      	ldr	r3, [pc, #12]	@ (80071f0 <HAL_GetTickPrio+0x14>)
 80071e2:	681b      	ldr	r3, [r3, #0]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	20000034 	.word	0x20000034

080071f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80071fc:	f7ff ffe2 	bl	80071c4 <HAL_GetTick>
 8007200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720c:	d005      	beq.n	800721a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800720e:	4b0a      	ldr	r3, [pc, #40]	@ (8007238 <HAL_Delay+0x44>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4413      	add	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800721a:	bf00      	nop
 800721c:	f7ff ffd2 	bl	80071c4 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	429a      	cmp	r2, r3
 800722a:	d8f7      	bhi.n	800721c <HAL_Delay+0x28>
  {
  }
}
 800722c:	bf00      	nop
 800722e:	bf00      	nop
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20000038 	.word	0x20000038

0800723c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	431a      	orrs	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	431a      	orrs	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	609a      	str	r2, [r3, #8]
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8007298:	4618      	mov	r0, r3
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3360      	adds	r3, #96	@ 0x60
 80072b6:	461a      	mov	r2, r3
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	4b08      	ldr	r3, [pc, #32]	@ (80072e8 <LL_ADC_SetOffset+0x44>)
 80072c6:	4013      	ands	r3, r2
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80072dc:	bf00      	nop
 80072de:	371c      	adds	r7, #28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	03fff000 	.word	0x03fff000

080072ec <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3360      	adds	r3, #96	@ 0x60
 80072fa:	461a      	mov	r2, r3
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3360      	adds	r3, #96	@ 0x60
 8007328:	461a      	mov	r2, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	431a      	orrs	r2, r3
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007362:	2301      	movs	r3, #1
 8007364:	e000      	b.n	8007368 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007366:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	3330      	adds	r3, #48	@ 0x30
 8007384:	461a      	mov	r2, r3
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	0a1b      	lsrs	r3, r3, #8
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	f003 030c 	and.w	r3, r3, #12
 8007390:	4413      	add	r3, r2
 8007392:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 031f 	and.w	r3, r3, #31
 800739e:	211f      	movs	r1, #31
 80073a0:	fa01 f303 	lsl.w	r3, r1, r3
 80073a4:	43db      	mvns	r3, r3
 80073a6:	401a      	ands	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	0e9b      	lsrs	r3, r3, #26
 80073ac:	f003 011f 	and.w	r1, r3, #31
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ba:	431a      	orrs	r2, r3
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80073c0:	bf00      	nop
 80073c2:	371c      	adds	r7, #28
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3314      	adds	r3, #20
 80073dc:	461a      	mov	r2, r3
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	0e5b      	lsrs	r3, r3, #25
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	4413      	add	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	0d1b      	lsrs	r3, r3, #20
 80073f4:	f003 031f 	and.w	r3, r3, #31
 80073f8:	2107      	movs	r1, #7
 80073fa:	fa01 f303 	lsl.w	r3, r1, r3
 80073fe:	43db      	mvns	r3, r3
 8007400:	401a      	ands	r2, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	0d1b      	lsrs	r3, r3, #20
 8007406:	f003 031f 	and.w	r3, r3, #31
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	fa01 f303 	lsl.w	r3, r1, r3
 8007410:	431a      	orrs	r2, r3
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007416:	bf00      	nop
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800743c:	43db      	mvns	r3, r3
 800743e:	401a      	ands	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f003 0318 	and.w	r3, r3, #24
 8007446:	4908      	ldr	r1, [pc, #32]	@ (8007468 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007448:	40d9      	lsrs	r1, r3
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	400b      	ands	r3, r1
 800744e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007452:	431a      	orrs	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800745a:	bf00      	nop
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	0007ffff 	.word	0x0007ffff

0800746c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800747c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6093      	str	r3, [r2, #8]
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074a4:	d101      	bne.n	80074aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80074a6:	2301      	movs	r3, #1
 80074a8:	e000      	b.n	80074ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80074c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80074cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074f4:	d101      	bne.n	80074fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e000      	b.n	80074fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007518:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800751c:	f043 0201 	orr.w	r2, r3, #1
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	2b01      	cmp	r3, #1
 8007542:	d101      	bne.n	8007548 <LL_ADC_IsEnabled+0x18>
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <LL_ADC_IsEnabled+0x1a>
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007566:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800756a:	f043 0204 	orr.w	r2, r3, #4
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f003 0304 	and.w	r3, r3, #4
 800758e:	2b04      	cmp	r3, #4
 8007590:	d101      	bne.n	8007596 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007592:	2301      	movs	r3, #1
 8007594:	e000      	b.n	8007598 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f003 0308 	and.w	r3, r3, #8
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d101      	bne.n	80075bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e000      	b.n	80075be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
	...

080075cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80075d8:	2300      	movs	r3, #0
 80075da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80075dc:	2300      	movs	r3, #0
 80075de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e12e      	b.n	8007848 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d109      	bne.n	800760c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7f9 fd89 	bl	8001110 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f7ff ff3d 	bl	8007490 <LL_ADC_IsDeepPowerDownEnabled>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d004      	beq.n	8007626 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff ff23 	bl	800746c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff ff58 	bl	80074e0 <LL_ADC_IsInternalRegulatorEnabled>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d115      	bne.n	8007662 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff ff3c 	bl	80074b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007640:	4b83      	ldr	r3, [pc, #524]	@ (8007850 <HAL_ADC_Init+0x284>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	099b      	lsrs	r3, r3, #6
 8007646:	4a83      	ldr	r2, [pc, #524]	@ (8007854 <HAL_ADC_Init+0x288>)
 8007648:	fba2 2303 	umull	r2, r3, r2, r3
 800764c:	099b      	lsrs	r3, r3, #6
 800764e:	3301      	adds	r3, #1
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007654:	e002      	b.n	800765c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	3b01      	subs	r3, #1
 800765a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1f9      	bne.n	8007656 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff ff3a 	bl	80074e0 <LL_ADC_IsInternalRegulatorEnabled>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10d      	bne.n	800768e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007676:	f043 0210 	orr.w	r2, r3, #16
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007682:	f043 0201 	orr.w	r2, r3, #1
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff ff73 	bl	800757e <LL_ADC_REG_IsConversionOngoing>
 8007698:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800769e:	f003 0310 	and.w	r3, r3, #16
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f040 80c7 	bne.w	8007836 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f040 80c3 	bne.w	8007836 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80076b8:	f043 0202 	orr.w	r2, r3, #2
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7ff ff33 	bl	8007530 <LL_ADC_IsEnabled>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10b      	bne.n	80076e8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80076d0:	4861      	ldr	r0, [pc, #388]	@ (8007858 <HAL_ADC_Init+0x28c>)
 80076d2:	f7ff ff2d 	bl	8007530 <LL_ADC_IsEnabled>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d105      	bne.n	80076e8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	4619      	mov	r1, r3
 80076e2:	485e      	ldr	r0, [pc, #376]	@ (800785c <HAL_ADC_Init+0x290>)
 80076e4:	f7ff fdaa 	bl	800723c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7e5b      	ldrb	r3, [r3, #25]
 80076ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80076f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80076f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80076fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007706:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8007708:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	4313      	orrs	r3, r2
 800770e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d106      	bne.n	8007728 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771e:	3b01      	subs	r3, #1
 8007720:	045b      	lsls	r3, r3, #17
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	4313      	orrs	r3, r2
 8007726:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800772c:	2b00      	cmp	r3, #0
 800772e:	d009      	beq.n	8007744 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007734:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	4313      	orrs	r3, r2
 8007742:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	4b45      	ldr	r3, [pc, #276]	@ (8007860 <HAL_ADC_Init+0x294>)
 800774c:	4013      	ands	r3, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	69b9      	ldr	r1, [r7, #24]
 8007754:	430b      	orrs	r3, r1
 8007756:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff ff0e 	bl	800757e <LL_ADC_REG_IsConversionOngoing>
 8007762:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff ff1b 	bl	80075a4 <LL_ADC_INJ_IsConversionOngoing>
 800776e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d13d      	bne.n	80077f2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d13a      	bne.n	80077f2 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007780:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007788:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800778a:	4313      	orrs	r3, r2
 800778c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007798:	f023 0302 	bic.w	r3, r3, #2
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6812      	ldr	r2, [r2, #0]
 80077a0:	69b9      	ldr	r1, [r7, #24]
 80077a2:	430b      	orrs	r3, r1
 80077a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d118      	bne.n	80077e2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80077ba:	f023 0304 	bic.w	r3, r3, #4
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80077c6:	4311      	orrs	r1, r2
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80077cc:	4311      	orrs	r1, r2
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80077d2:	430a      	orrs	r2, r1
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0201 	orr.w	r2, r2, #1
 80077de:	611a      	str	r2, [r3, #16]
 80077e0:	e007      	b.n	80077f2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	691a      	ldr	r2, [r3, #16]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0201 	bic.w	r2, r2, #1
 80077f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d10c      	bne.n	8007814 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007800:	f023 010f 	bic.w	r1, r3, #15
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	1e5a      	subs	r2, r3, #1
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	631a      	str	r2, [r3, #48]	@ 0x30
 8007812:	e007      	b.n	8007824 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 020f 	bic.w	r2, r2, #15
 8007822:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007828:	f023 0303 	bic.w	r3, r3, #3
 800782c:	f043 0201 	orr.w	r2, r3, #1
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	655a      	str	r2, [r3, #84]	@ 0x54
 8007834:	e007      	b.n	8007846 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800783a:	f043 0210 	orr.w	r2, r3, #16
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007846:	7ffb      	ldrb	r3, [r7, #31]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3720      	adds	r7, #32
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20000030 	.word	0x20000030
 8007854:	053e2d63 	.word	0x053e2d63
 8007858:	50040000 	.word	0x50040000
 800785c:	50040300 	.word	0x50040300
 8007860:	fff0c007 	.word	0xfff0c007

08007864 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4618      	mov	r0, r3
 8007876:	f7ff fe82 	bl	800757e <LL_ADC_REG_IsConversionOngoing>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d167      	bne.n	8007950 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007886:	2b01      	cmp	r3, #1
 8007888:	d101      	bne.n	800788e <HAL_ADC_Start_DMA+0x2a>
 800788a:	2302      	movs	r3, #2
 800788c:	e063      	b.n	8007956 <HAL_ADC_Start_DMA+0xf2>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fc42 	bl	8008120 <ADC_Enable>
 800789c:	4603      	mov	r3, r0
 800789e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80078a0:	7dfb      	ldrb	r3, [r7, #23]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d14f      	bne.n	8007946 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80078ae:	f023 0301 	bic.w	r3, r3, #1
 80078b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d006      	beq.n	80078d4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ca:	f023 0206 	bic.w	r2, r3, #6
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80078d2:	e002      	b.n	80078da <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078de:	4a20      	ldr	r2, [pc, #128]	@ (8007960 <HAL_ADC_Start_DMA+0xfc>)
 80078e0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007964 <HAL_ADC_Start_DMA+0x100>)
 80078e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007968 <HAL_ADC_Start_DMA+0x104>)
 80078f0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	221c      	movs	r2, #28
 80078f8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f042 0210 	orr.w	r2, r2, #16
 8007910:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f042 0201 	orr.w	r2, r2, #1
 8007920:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3340      	adds	r3, #64	@ 0x40
 800792c:	4619      	mov	r1, r3
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f000 febb 	bl	80086ac <HAL_DMA_Start_IT>
 8007936:	4603      	mov	r3, r0
 8007938:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4618      	mov	r0, r3
 8007940:	f7ff fe09 	bl	8007556 <LL_ADC_REG_StartConversion>
 8007944:	e006      	b.n	8007954 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800794e:	e001      	b.n	8007954 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007950:	2302      	movs	r3, #2
 8007952:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007954:	7dfb      	ldrb	r3, [r7, #23]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	08008215 	.word	0x08008215
 8007964:	080082ed 	.word	0x080082ed
 8007968:	08008309 	.word	0x08008309

0800796c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b0b6      	sub	sp, #216	@ 0xd8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_ADC_ConfigChannel+0x22>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e39f      	b.n	80080f6 <HAL_ADC_ConfigChannel+0x762>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff fddb 	bl	800757e <LL_ADC_REG_IsConversionOngoing>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f040 8384 	bne.w	80080d8 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6818      	ldr	r0, [r3, #0]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	6859      	ldr	r1, [r3, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	f7ff fcc9 	bl	8007374 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff fdc9 	bl	800757e <LL_ADC_REG_IsConversionOngoing>
 80079ec:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7ff fdd5 	bl	80075a4 <LL_ADC_INJ_IsConversionOngoing>
 80079fa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80079fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f040 81a6 	bne.w	8007d54 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007a08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f040 81a1 	bne.w	8007d54 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6818      	ldr	r0, [r3, #0]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	6819      	ldr	r1, [r3, #0]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f7ff fcd4 	bl	80073cc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	695a      	ldr	r2, [r3, #20]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	08db      	lsrs	r3, r3, #3
 8007a30:	f003 0303 	and.w	r3, r3, #3
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d00a      	beq.n	8007a5c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6818      	ldr	r0, [r3, #0]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	6919      	ldr	r1, [r3, #16]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a56:	f7ff fc25 	bl	80072a4 <LL_ADC_SetOffset>
 8007a5a:	e17b      	b.n	8007d54 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2100      	movs	r1, #0
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff fc42 	bl	80072ec <LL_ADC_GetOffsetChannel>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <HAL_ADC_ConfigChannel+0xf4>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2100      	movs	r1, #0
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7ff fc37 	bl	80072ec <LL_ADC_GetOffsetChannel>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	0e9b      	lsrs	r3, r3, #26
 8007a82:	f003 021f 	and.w	r2, r3, #31
 8007a86:	e01e      	b.n	8007ac6 <HAL_ADC_ConfigChannel+0x132>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff fc2c 	bl	80072ec <LL_ADC_GetOffsetChannel>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007a9e:	fa93 f3a3 	rbit	r3, r3
 8007aa2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007aa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007aaa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007aae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8007ab6:	2320      	movs	r3, #32
 8007ab8:	e004      	b.n	8007ac4 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8007aba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007abe:	fab3 f383 	clz	r3, r3
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d105      	bne.n	8007ade <HAL_ADC_ConfigChannel+0x14a>
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	0e9b      	lsrs	r3, r3, #26
 8007ad8:	f003 031f 	and.w	r3, r3, #31
 8007adc:	e018      	b.n	8007b10 <HAL_ADC_ConfigChannel+0x17c>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ae6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007aea:	fa93 f3a3 	rbit	r3, r3
 8007aee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007af6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007afa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8007b02:	2320      	movs	r3, #32
 8007b04:	e004      	b.n	8007b10 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8007b06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b0a:	fab3 f383 	clz	r3, r3
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d106      	bne.n	8007b22 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff fbfb 	bl	8007318 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2101      	movs	r1, #1
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff fbdf 	bl	80072ec <LL_ADC_GetOffsetChannel>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <HAL_ADC_ConfigChannel+0x1ba>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7ff fbd4 	bl	80072ec <LL_ADC_GetOffsetChannel>
 8007b44:	4603      	mov	r3, r0
 8007b46:	0e9b      	lsrs	r3, r3, #26
 8007b48:	f003 021f 	and.w	r2, r3, #31
 8007b4c:	e01e      	b.n	8007b8c <HAL_ADC_ConfigChannel+0x1f8>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2101      	movs	r1, #1
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7ff fbc9 	bl	80072ec <LL_ADC_GetOffsetChannel>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b64:	fa93 f3a3 	rbit	r3, r3
 8007b68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007b6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007b74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8007b7c:	2320      	movs	r3, #32
 8007b7e:	e004      	b.n	8007b8a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8007b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b84:	fab3 f383 	clz	r3, r3
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d105      	bne.n	8007ba4 <HAL_ADC_ConfigChannel+0x210>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	0e9b      	lsrs	r3, r3, #26
 8007b9e:	f003 031f 	and.w	r3, r3, #31
 8007ba2:	e018      	b.n	8007bd6 <HAL_ADC_ConfigChannel+0x242>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bb0:	fa93 f3a3 	rbit	r3, r3
 8007bb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007bb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007bbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8007bc8:	2320      	movs	r3, #32
 8007bca:	e004      	b.n	8007bd6 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8007bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007bd0:	fab3 f383 	clz	r3, r3
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d106      	bne.n	8007be8 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2200      	movs	r2, #0
 8007be0:	2101      	movs	r1, #1
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7ff fb98 	bl	8007318 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2102      	movs	r1, #2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff fb7c 	bl	80072ec <LL_ADC_GetOffsetChannel>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10a      	bne.n	8007c14 <HAL_ADC_ConfigChannel+0x280>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2102      	movs	r1, #2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7ff fb71 	bl	80072ec <LL_ADC_GetOffsetChannel>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	0e9b      	lsrs	r3, r3, #26
 8007c0e:	f003 021f 	and.w	r2, r3, #31
 8007c12:	e01e      	b.n	8007c52 <HAL_ADC_ConfigChannel+0x2be>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2102      	movs	r1, #2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff fb66 	bl	80072ec <LL_ADC_GetOffsetChannel>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c2a:	fa93 f3a3 	rbit	r3, r3
 8007c2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007c32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8007c42:	2320      	movs	r3, #32
 8007c44:	e004      	b.n	8007c50 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8007c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c4a:	fab3 f383 	clz	r3, r3
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d105      	bne.n	8007c6a <HAL_ADC_ConfigChannel+0x2d6>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	0e9b      	lsrs	r3, r3, #26
 8007c64:	f003 031f 	and.w	r3, r3, #31
 8007c68:	e016      	b.n	8007c98 <HAL_ADC_ConfigChannel+0x304>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c76:	fa93 f3a3 	rbit	r3, r3
 8007c7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007c7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007c82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8007c8a:	2320      	movs	r3, #32
 8007c8c:	e004      	b.n	8007c98 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8007c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c92:	fab3 f383 	clz	r3, r3
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d106      	bne.n	8007caa <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2102      	movs	r1, #2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7ff fb37 	bl	8007318 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2103      	movs	r1, #3
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7ff fb1b 	bl	80072ec <LL_ADC_GetOffsetChannel>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10a      	bne.n	8007cd6 <HAL_ADC_ConfigChannel+0x342>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2103      	movs	r1, #3
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff fb10 	bl	80072ec <LL_ADC_GetOffsetChannel>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	0e9b      	lsrs	r3, r3, #26
 8007cd0:	f003 021f 	and.w	r2, r3, #31
 8007cd4:	e017      	b.n	8007d06 <HAL_ADC_ConfigChannel+0x372>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2103      	movs	r1, #3
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7ff fb05 	bl	80072ec <LL_ADC_GetOffsetChannel>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ce6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ce8:	fa93 f3a3 	rbit	r3, r3
 8007cec:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8007cee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cf0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8007cf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8007cf8:	2320      	movs	r3, #32
 8007cfa:	e003      	b.n	8007d04 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8007cfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cfe:	fab3 f383 	clz	r3, r3
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d105      	bne.n	8007d1e <HAL_ADC_ConfigChannel+0x38a>
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	0e9b      	lsrs	r3, r3, #26
 8007d18:	f003 031f 	and.w	r3, r3, #31
 8007d1c:	e011      	b.n	8007d42 <HAL_ADC_ConfigChannel+0x3ae>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d26:	fa93 f3a3 	rbit	r3, r3
 8007d2a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007d2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8007d36:	2320      	movs	r3, #32
 8007d38:	e003      	b.n	8007d42 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8007d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d3c:	fab3 f383 	clz	r3, r3
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d106      	bne.n	8007d54 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2103      	movs	r1, #3
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff fae2 	bl	8007318 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff fbe9 	bl	8007530 <LL_ADC_IsEnabled>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f040 81c2 	bne.w	80080ea <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	6819      	ldr	r1, [r3, #0]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	461a      	mov	r2, r3
 8007d74:	f7ff fb56 	bl	8007424 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	4a8e      	ldr	r2, [pc, #568]	@ (8007fb8 <HAL_ADC_ConfigChannel+0x624>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	f040 8130 	bne.w	8007fe4 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10b      	bne.n	8007dac <HAL_ADC_ConfigChannel+0x418>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	0e9b      	lsrs	r3, r3, #26
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	f003 031f 	and.w	r3, r3, #31
 8007da0:	2b09      	cmp	r3, #9
 8007da2:	bf94      	ite	ls
 8007da4:	2301      	movls	r3, #1
 8007da6:	2300      	movhi	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	e019      	b.n	8007de0 <HAL_ADC_ConfigChannel+0x44c>
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007db4:	fa93 f3a3 	rbit	r3, r3
 8007db8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007dba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dbc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007dbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8007dc4:	2320      	movs	r3, #32
 8007dc6:	e003      	b.n	8007dd0 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8007dc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dca:	fab3 f383 	clz	r3, r3
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	f003 031f 	and.w	r3, r3, #31
 8007dd6:	2b09      	cmp	r3, #9
 8007dd8:	bf94      	ite	ls
 8007dda:	2301      	movls	r3, #1
 8007ddc:	2300      	movhi	r3, #0
 8007dde:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d079      	beq.n	8007ed8 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d107      	bne.n	8007e00 <HAL_ADC_ConfigChannel+0x46c>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	0e9b      	lsrs	r3, r3, #26
 8007df6:	3301      	adds	r3, #1
 8007df8:	069b      	lsls	r3, r3, #26
 8007dfa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007dfe:	e015      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x498>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e08:	fa93 f3a3 	rbit	r3, r3
 8007e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e10:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8007e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8007e18:	2320      	movs	r3, #32
 8007e1a:	e003      	b.n	8007e24 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8007e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e1e:	fab3 f383 	clz	r3, r3
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	3301      	adds	r3, #1
 8007e26:	069b      	lsls	r3, r3, #26
 8007e28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d109      	bne.n	8007e4c <HAL_ADC_ConfigChannel+0x4b8>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	0e9b      	lsrs	r3, r3, #26
 8007e3e:	3301      	adds	r3, #1
 8007e40:	f003 031f 	and.w	r3, r3, #31
 8007e44:	2101      	movs	r1, #1
 8007e46:	fa01 f303 	lsl.w	r3, r1, r3
 8007e4a:	e017      	b.n	8007e7c <HAL_ADC_ConfigChannel+0x4e8>
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e54:	fa93 f3a3 	rbit	r3, r3
 8007e58:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8007e64:	2320      	movs	r3, #32
 8007e66:	e003      	b.n	8007e70 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8007e68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e6a:	fab3 f383 	clz	r3, r3
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	3301      	adds	r3, #1
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	2101      	movs	r1, #1
 8007e78:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7c:	ea42 0103 	orr.w	r1, r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10a      	bne.n	8007ea2 <HAL_ADC_ConfigChannel+0x50e>
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	0e9b      	lsrs	r3, r3, #26
 8007e92:	3301      	adds	r3, #1
 8007e94:	f003 021f 	and.w	r2, r3, #31
 8007e98:	4613      	mov	r3, r2
 8007e9a:	005b      	lsls	r3, r3, #1
 8007e9c:	4413      	add	r3, r2
 8007e9e:	051b      	lsls	r3, r3, #20
 8007ea0:	e018      	b.n	8007ed4 <HAL_ADC_ConfigChannel+0x540>
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eaa:	fa93 f3a3 	rbit	r3, r3
 8007eae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8007eba:	2320      	movs	r3, #32
 8007ebc:	e003      	b.n	8007ec6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8007ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec0:	fab3 f383 	clz	r3, r3
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	f003 021f 	and.w	r2, r3, #31
 8007ecc:	4613      	mov	r3, r2
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	4413      	add	r3, r2
 8007ed2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	e080      	b.n	8007fda <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d107      	bne.n	8007ef4 <HAL_ADC_ConfigChannel+0x560>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	0e9b      	lsrs	r3, r3, #26
 8007eea:	3301      	adds	r3, #1
 8007eec:	069b      	lsls	r3, r3, #26
 8007eee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007ef2:	e015      	b.n	8007f20 <HAL_ADC_ConfigChannel+0x58c>
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efc:	fa93 f3a3 	rbit	r3, r3
 8007f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8007f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f04:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8007f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8007f0c:	2320      	movs	r3, #32
 8007f0e:	e003      	b.n	8007f18 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8007f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f12:	fab3 f383 	clz	r3, r3
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	3301      	adds	r3, #1
 8007f1a:	069b      	lsls	r3, r3, #26
 8007f1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d109      	bne.n	8007f40 <HAL_ADC_ConfigChannel+0x5ac>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	0e9b      	lsrs	r3, r3, #26
 8007f32:	3301      	adds	r3, #1
 8007f34:	f003 031f 	and.w	r3, r3, #31
 8007f38:	2101      	movs	r1, #1
 8007f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3e:	e017      	b.n	8007f70 <HAL_ADC_ConfigChannel+0x5dc>
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	fa93 f3a3 	rbit	r3, r3
 8007f4c:	61fb      	str	r3, [r7, #28]
  return result;
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8007f58:	2320      	movs	r3, #32
 8007f5a:	e003      	b.n	8007f64 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	fab3 f383 	clz	r3, r3
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	3301      	adds	r3, #1
 8007f66:	f003 031f 	and.w	r3, r3, #31
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f70:	ea42 0103 	orr.w	r1, r2, r3
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10d      	bne.n	8007f9c <HAL_ADC_ConfigChannel+0x608>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	0e9b      	lsrs	r3, r3, #26
 8007f86:	3301      	adds	r3, #1
 8007f88:	f003 021f 	and.w	r2, r3, #31
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	4413      	add	r3, r2
 8007f92:	3b1e      	subs	r3, #30
 8007f94:	051b      	lsls	r3, r3, #20
 8007f96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007f9a:	e01d      	b.n	8007fd8 <HAL_ADC_ConfigChannel+0x644>
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	fa93 f3a3 	rbit	r3, r3
 8007fa8:	613b      	str	r3, [r7, #16]
  return result;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d103      	bne.n	8007fbc <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8007fb4:	2320      	movs	r3, #32
 8007fb6:	e005      	b.n	8007fc4 <HAL_ADC_ConfigChannel+0x630>
 8007fb8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	fab3 f383 	clz	r3, r3
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	f003 021f 	and.w	r2, r3, #31
 8007fca:	4613      	mov	r3, r2
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	4413      	add	r3, r2
 8007fd0:	3b1e      	subs	r3, #30
 8007fd2:	051b      	lsls	r3, r3, #20
 8007fd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007fd8:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007fde:	4619      	mov	r1, r3
 8007fe0:	f7ff f9f4 	bl	80073cc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	4b45      	ldr	r3, [pc, #276]	@ (8008100 <HAL_ADC_ConfigChannel+0x76c>)
 8007fea:	4013      	ands	r3, r2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d07c      	beq.n	80080ea <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007ff0:	4844      	ldr	r0, [pc, #272]	@ (8008104 <HAL_ADC_ConfigChannel+0x770>)
 8007ff2:	f7ff f949 	bl	8007288 <LL_ADC_GetCommonPathInternalCh>
 8007ff6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007ffa:	4843      	ldr	r0, [pc, #268]	@ (8008108 <HAL_ADC_ConfigChannel+0x774>)
 8007ffc:	f7ff fa98 	bl	8007530 <LL_ADC_IsEnabled>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d15e      	bne.n	80080c4 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a40      	ldr	r2, [pc, #256]	@ (800810c <HAL_ADC_ConfigChannel+0x778>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d127      	bne.n	8008060 <HAL_ADC_ConfigChannel+0x6cc>
 8008010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008014:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d121      	bne.n	8008060 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a39      	ldr	r2, [pc, #228]	@ (8008108 <HAL_ADC_ConfigChannel+0x774>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d161      	bne.n	80080ea <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800802a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800802e:	4619      	mov	r1, r3
 8008030:	4834      	ldr	r0, [pc, #208]	@ (8008104 <HAL_ADC_ConfigChannel+0x770>)
 8008032:	f7ff f916 	bl	8007262 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008036:	4b36      	ldr	r3, [pc, #216]	@ (8008110 <HAL_ADC_ConfigChannel+0x77c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	099b      	lsrs	r3, r3, #6
 800803c:	4a35      	ldr	r2, [pc, #212]	@ (8008114 <HAL_ADC_ConfigChannel+0x780>)
 800803e:	fba2 2303 	umull	r2, r3, r2, r3
 8008042:	099b      	lsrs	r3, r3, #6
 8008044:	1c5a      	adds	r2, r3, #1
 8008046:	4613      	mov	r3, r2
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8008050:	e002      	b.n	8008058 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	3b01      	subs	r3, #1
 8008056:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1f9      	bne.n	8008052 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800805e:	e044      	b.n	80080ea <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a2c      	ldr	r2, [pc, #176]	@ (8008118 <HAL_ADC_ConfigChannel+0x784>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d113      	bne.n	8008092 <HAL_ADC_ConfigChannel+0x6fe>
 800806a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800806e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10d      	bne.n	8008092 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a23      	ldr	r2, [pc, #140]	@ (8008108 <HAL_ADC_ConfigChannel+0x774>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d134      	bne.n	80080ea <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008084:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008088:	4619      	mov	r1, r3
 800808a:	481e      	ldr	r0, [pc, #120]	@ (8008104 <HAL_ADC_ConfigChannel+0x770>)
 800808c:	f7ff f8e9 	bl	8007262 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008090:	e02b      	b.n	80080ea <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a21      	ldr	r2, [pc, #132]	@ (800811c <HAL_ADC_ConfigChannel+0x788>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d126      	bne.n	80080ea <HAL_ADC_ConfigChannel+0x756>
 800809c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80080a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d120      	bne.n	80080ea <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a16      	ldr	r2, [pc, #88]	@ (8008108 <HAL_ADC_ConfigChannel+0x774>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d11b      	bne.n	80080ea <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80080b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80080b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80080ba:	4619      	mov	r1, r3
 80080bc:	4811      	ldr	r0, [pc, #68]	@ (8008104 <HAL_ADC_ConfigChannel+0x770>)
 80080be:	f7ff f8d0 	bl	8007262 <LL_ADC_SetCommonPathInternalCh>
 80080c2:	e012      	b.n	80080ea <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080c8:	f043 0220 	orr.w	r2, r3, #32
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80080d6:	e008      	b.n	80080ea <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080dc:	f043 0220 	orr.w	r2, r3, #32
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80080f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	37d8      	adds	r7, #216	@ 0xd8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	80080000 	.word	0x80080000
 8008104:	50040300 	.word	0x50040300
 8008108:	50040000 	.word	0x50040000
 800810c:	c7520000 	.word	0xc7520000
 8008110:	20000030 	.word	0x20000030
 8008114:	053e2d63 	.word	0x053e2d63
 8008118:	cb840000 	.word	0xcb840000
 800811c:	80000001 	.word	0x80000001

08008120 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008128:	2300      	movs	r3, #0
 800812a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff f9fd 	bl	8007530 <LL_ADC_IsEnabled>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d15e      	bne.n	80081fa <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	4b30      	ldr	r3, [pc, #192]	@ (8008204 <ADC_Enable+0xe4>)
 8008144:	4013      	ands	r3, r2
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00d      	beq.n	8008166 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800814e:	f043 0210 	orr.w	r2, r3, #16
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800815a:	f043 0201 	orr.w	r2, r3, #1
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e04a      	b.n	80081fc <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff f9cc 	bl	8007508 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8008170:	4825      	ldr	r0, [pc, #148]	@ (8008208 <ADC_Enable+0xe8>)
 8008172:	f7ff f889 	bl	8007288 <LL_ADC_GetCommonPathInternalCh>
 8008176:	4603      	mov	r3, r0
 8008178:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00f      	beq.n	80081a0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008180:	4b22      	ldr	r3, [pc, #136]	@ (800820c <ADC_Enable+0xec>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	099b      	lsrs	r3, r3, #6
 8008186:	4a22      	ldr	r2, [pc, #136]	@ (8008210 <ADC_Enable+0xf0>)
 8008188:	fba2 2303 	umull	r2, r3, r2, r3
 800818c:	099b      	lsrs	r3, r3, #6
 800818e:	3301      	adds	r3, #1
 8008190:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8008192:	e002      	b.n	800819a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	3b01      	subs	r3, #1
 8008198:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1f9      	bne.n	8008194 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80081a0:	f7ff f810 	bl	80071c4 <HAL_GetTick>
 80081a4:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80081a6:	e021      	b.n	80081ec <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7ff f9bf 	bl	8007530 <LL_ADC_IsEnabled>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d104      	bne.n	80081c2 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4618      	mov	r0, r3
 80081be:	f7ff f9a3 	bl	8007508 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80081c2:	f7fe ffff 	bl	80071c4 <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d90d      	bls.n	80081ec <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081d4:	f043 0210 	orr.w	r2, r3, #16
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081e0:	f043 0201 	orr.w	r2, r3, #1
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e007      	b.n	80081fc <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0301 	and.w	r3, r3, #1
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d1d6      	bne.n	80081a8 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	8000003f 	.word	0x8000003f
 8008208:	50040300 	.word	0x50040300
 800820c:	20000030 	.word	0x20000030
 8008210:	053e2d63 	.word	0x053e2d63

08008214 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008220:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008226:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800822a:	2b00      	cmp	r3, #0
 800822c:	d14b      	bne.n	80082c6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008232:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	2b00      	cmp	r3, #0
 8008246:	d021      	beq.n	800828c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff f87e 	bl	800734e <LL_ADC_REG_IsTriggerSourceSWStart>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d032      	beq.n	80082be <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d12b      	bne.n	80082be <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800826a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d11f      	bne.n	80082be <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008282:	f043 0201 	orr.w	r2, r3, #1
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	655a      	str	r2, [r3, #84]	@ 0x54
 800828a:	e018      	b.n	80082be <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d111      	bne.n	80082be <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800829e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d105      	bne.n	80082be <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082b6:	f043 0201 	orr.w	r2, r3, #1
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f7f8 ff82 	bl	80011c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80082c4:	e00e      	b.n	80082e4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ca:	f003 0310 	and.w	r3, r3, #16
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7ff fb54 	bl	8007980 <HAL_ADC_ErrorCallback>
}
 80082d8:	e004      	b.n	80082e4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	4798      	blx	r3
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff fb36 	bl	800796c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008314:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800831a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008326:	f043 0204 	orr.w	r2, r3, #4
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff fb26 	bl	8007980 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008334:	bf00      	nop
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f003 0307 	and.w	r3, r3, #7
 800834a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800834c:	4b0c      	ldr	r3, [pc, #48]	@ (8008380 <__NVIC_SetPriorityGrouping+0x44>)
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008358:	4013      	ands	r3, r2
 800835a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008364:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800836c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800836e:	4a04      	ldr	r2, [pc, #16]	@ (8008380 <__NVIC_SetPriorityGrouping+0x44>)
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	60d3      	str	r3, [r2, #12]
}
 8008374:	bf00      	nop
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	e000ed00 	.word	0xe000ed00

08008384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008388:	4b04      	ldr	r3, [pc, #16]	@ (800839c <__NVIC_GetPriorityGrouping+0x18>)
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	0a1b      	lsrs	r3, r3, #8
 800838e:	f003 0307 	and.w	r3, r3, #7
}
 8008392:	4618      	mov	r0, r3
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	e000ed00 	.word	0xe000ed00

080083a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	db0b      	blt.n	80083ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	f003 021f 	and.w	r2, r3, #31
 80083b8:	4907      	ldr	r1, [pc, #28]	@ (80083d8 <__NVIC_EnableIRQ+0x38>)
 80083ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083be:	095b      	lsrs	r3, r3, #5
 80083c0:	2001      	movs	r0, #1
 80083c2:	fa00 f202 	lsl.w	r2, r0, r2
 80083c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	e000e100 	.word	0xe000e100

080083dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4603      	mov	r3, r0
 80083e4:	6039      	str	r1, [r7, #0]
 80083e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	db0a      	blt.n	8008406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	490c      	ldr	r1, [pc, #48]	@ (8008428 <__NVIC_SetPriority+0x4c>)
 80083f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083fa:	0112      	lsls	r2, r2, #4
 80083fc:	b2d2      	uxtb	r2, r2
 80083fe:	440b      	add	r3, r1
 8008400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008404:	e00a      	b.n	800841c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	b2da      	uxtb	r2, r3
 800840a:	4908      	ldr	r1, [pc, #32]	@ (800842c <__NVIC_SetPriority+0x50>)
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	f003 030f 	and.w	r3, r3, #15
 8008412:	3b04      	subs	r3, #4
 8008414:	0112      	lsls	r2, r2, #4
 8008416:	b2d2      	uxtb	r2, r2
 8008418:	440b      	add	r3, r1
 800841a:	761a      	strb	r2, [r3, #24]
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	e000e100 	.word	0xe000e100
 800842c:	e000ed00 	.word	0xe000ed00

08008430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008430:	b480      	push	{r7}
 8008432:	b089      	sub	sp, #36	@ 0x24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f003 0307 	and.w	r3, r3, #7
 8008442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	f1c3 0307 	rsb	r3, r3, #7
 800844a:	2b04      	cmp	r3, #4
 800844c:	bf28      	it	cs
 800844e:	2304      	movcs	r3, #4
 8008450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	3304      	adds	r3, #4
 8008456:	2b06      	cmp	r3, #6
 8008458:	d902      	bls.n	8008460 <NVIC_EncodePriority+0x30>
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	3b03      	subs	r3, #3
 800845e:	e000      	b.n	8008462 <NVIC_EncodePriority+0x32>
 8008460:	2300      	movs	r3, #0
 8008462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008464:	f04f 32ff 	mov.w	r2, #4294967295
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	fa02 f303 	lsl.w	r3, r2, r3
 800846e:	43da      	mvns	r2, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	401a      	ands	r2, r3
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008478:	f04f 31ff 	mov.w	r1, #4294967295
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	fa01 f303 	lsl.w	r3, r1, r3
 8008482:	43d9      	mvns	r1, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008488:	4313      	orrs	r3, r2
         );
}
 800848a:	4618      	mov	r0, r3
 800848c:	3724      	adds	r7, #36	@ 0x24
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
	...

08008498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084a8:	d301      	bcc.n	80084ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80084aa:	2301      	movs	r3, #1
 80084ac:	e00f      	b.n	80084ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084ae:	4a0a      	ldr	r2, [pc, #40]	@ (80084d8 <SysTick_Config+0x40>)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80084b6:	210f      	movs	r1, #15
 80084b8:	f04f 30ff 	mov.w	r0, #4294967295
 80084bc:	f7ff ff8e 	bl	80083dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084c0:	4b05      	ldr	r3, [pc, #20]	@ (80084d8 <SysTick_Config+0x40>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084c6:	4b04      	ldr	r3, [pc, #16]	@ (80084d8 <SysTick_Config+0x40>)
 80084c8:	2207      	movs	r2, #7
 80084ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	e000e010 	.word	0xe000e010

080084dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7ff ff29 	bl	800833c <__NVIC_SetPriorityGrouping>
}
 80084ea:	bf00      	nop
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b086      	sub	sp, #24
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	4603      	mov	r3, r0
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	607a      	str	r2, [r7, #4]
 80084fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008500:	f7ff ff40 	bl	8008384 <__NVIC_GetPriorityGrouping>
 8008504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	68b9      	ldr	r1, [r7, #8]
 800850a:	6978      	ldr	r0, [r7, #20]
 800850c:	f7ff ff90 	bl	8008430 <NVIC_EncodePriority>
 8008510:	4602      	mov	r2, r0
 8008512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008516:	4611      	mov	r1, r2
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff ff5f 	bl	80083dc <__NVIC_SetPriority>
}
 800851e:	bf00      	nop
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b082      	sub	sp, #8
 800852a:	af00      	add	r7, sp, #0
 800852c:	4603      	mov	r3, r0
 800852e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008534:	4618      	mov	r0, r3
 8008536:	f7ff ff33 	bl	80083a0 <__NVIC_EnableIRQ>
}
 800853a:	bf00      	nop
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7ff ffa4 	bl	8008498 <SysTick_Config>
 8008550:	4603      	mov	r3, r0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e08e      	b.n	800868c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	4b47      	ldr	r3, [pc, #284]	@ (8008694 <HAL_DMA_Init+0x138>)
 8008576:	429a      	cmp	r2, r3
 8008578:	d80f      	bhi.n	800859a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	461a      	mov	r2, r3
 8008580:	4b45      	ldr	r3, [pc, #276]	@ (8008698 <HAL_DMA_Init+0x13c>)
 8008582:	4413      	add	r3, r2
 8008584:	4a45      	ldr	r2, [pc, #276]	@ (800869c <HAL_DMA_Init+0x140>)
 8008586:	fba2 2303 	umull	r2, r3, r2, r3
 800858a:	091b      	lsrs	r3, r3, #4
 800858c:	009a      	lsls	r2, r3, #2
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a42      	ldr	r2, [pc, #264]	@ (80086a0 <HAL_DMA_Init+0x144>)
 8008596:	641a      	str	r2, [r3, #64]	@ 0x40
 8008598:	e00e      	b.n	80085b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	461a      	mov	r2, r3
 80085a0:	4b40      	ldr	r3, [pc, #256]	@ (80086a4 <HAL_DMA_Init+0x148>)
 80085a2:	4413      	add	r3, r2
 80085a4:	4a3d      	ldr	r2, [pc, #244]	@ (800869c <HAL_DMA_Init+0x140>)
 80085a6:	fba2 2303 	umull	r2, r3, r2, r3
 80085aa:	091b      	lsrs	r3, r3, #4
 80085ac:	009a      	lsls	r2, r3, #2
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a3c      	ldr	r2, [pc, #240]	@ (80086a8 <HAL_DMA_Init+0x14c>)
 80085b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80085ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80085dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fa80 	bl	8008b10 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008618:	d102      	bne.n	8008620 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008628:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800862c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008636:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d010      	beq.n	8008662 <HAL_DMA_Init+0x106>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	2b04      	cmp	r3, #4
 8008646:	d80c      	bhi.n	8008662 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fa9f 	bl	8008b8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800865e:	605a      	str	r2, [r3, #4]
 8008660:	e008      	b.n	8008674 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	40020407 	.word	0x40020407
 8008698:	bffdfff8 	.word	0xbffdfff8
 800869c:	cccccccd 	.word	0xcccccccd
 80086a0:	40020000 	.word	0x40020000
 80086a4:	bffdfbf8 	.word	0xbffdfbf8
 80086a8:	40020400 	.word	0x40020400

080086ac <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d101      	bne.n	80086cc <HAL_DMA_Start_IT+0x20>
 80086c8:	2302      	movs	r3, #2
 80086ca:	e066      	b.n	800879a <HAL_DMA_Start_IT+0xee>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d155      	bne.n	800878c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2202      	movs	r2, #2
 80086e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 0201 	bic.w	r2, r2, #1
 80086fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	68b9      	ldr	r1, [r7, #8]
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f000 f9c5 	bl	8008a94 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800870e:	2b00      	cmp	r3, #0
 8008710:	d008      	beq.n	8008724 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f042 020e 	orr.w	r2, r2, #14
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	e00f      	b.n	8008744 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0204 	bic.w	r2, r2, #4
 8008732:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 020a 	orr.w	r2, r2, #10
 8008742:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d007      	beq.n	8008762 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800875c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008760:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008766:	2b00      	cmp	r3, #0
 8008768:	d007      	beq.n	800877a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008774:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008778:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f042 0201 	orr.w	r2, r2, #1
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	e005      	b.n	8008798 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008794:	2302      	movs	r3, #2
 8008796:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008798:	7dfb      	ldrb	r3, [r7, #23]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80087a2:	b480      	push	{r7}
 80087a4:	b083      	sub	sp, #12
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e04f      	b.n	8008854 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d008      	beq.n	80087d2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2204      	movs	r2, #4
 80087c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e040      	b.n	8008854 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 020e 	bic.w	r2, r2, #14
 80087e0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80087f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f022 0201 	bic.w	r2, r2, #1
 8008800:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008806:	f003 021c 	and.w	r2, r3, #28
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800880e:	2101      	movs	r1, #1
 8008810:	fa01 f202 	lsl.w	r2, r1, r2
 8008814:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800881e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00c      	beq.n	8008842 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008832:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008836:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008840:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008872:	b2db      	uxtb	r3, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	d005      	beq.n	8008884 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2204      	movs	r2, #4
 800887c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	73fb      	strb	r3, [r7, #15]
 8008882:	e047      	b.n	8008914 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 020e 	bic.w	r2, r2, #14
 8008892:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0201 	bic.w	r2, r2, #1
 80088a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80088b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088b8:	f003 021c 	and.w	r2, r3, #28
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c0:	2101      	movs	r1, #1
 80088c2:	fa01 f202 	lsl.w	r2, r1, r2
 80088c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80088d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00c      	beq.n	80088f4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80088e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80088f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	4798      	blx	r3
    }
  }
  return status;
 8008914:	7bfb      	ldrb	r3, [r7, #15]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893a:	f003 031c 	and.w	r3, r3, #28
 800893e:	2204      	movs	r2, #4
 8008940:	409a      	lsls	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	4013      	ands	r3, r2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d026      	beq.n	8008998 <HAL_DMA_IRQHandler+0x7a>
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b00      	cmp	r3, #0
 8008952:	d021      	beq.n	8008998 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0320 	and.w	r3, r3, #32
 800895e:	2b00      	cmp	r3, #0
 8008960:	d107      	bne.n	8008972 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0204 	bic.w	r2, r2, #4
 8008970:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008976:	f003 021c 	and.w	r2, r3, #28
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800897e:	2104      	movs	r1, #4
 8008980:	fa01 f202 	lsl.w	r2, r1, r2
 8008984:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800898a:	2b00      	cmp	r3, #0
 800898c:	d071      	beq.n	8008a72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008996:	e06c      	b.n	8008a72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800899c:	f003 031c 	and.w	r3, r3, #28
 80089a0:	2202      	movs	r2, #2
 80089a2:	409a      	lsls	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4013      	ands	r3, r2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d02e      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xec>
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d029      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0320 	and.w	r3, r3, #32
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10b      	bne.n	80089dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f022 020a 	bic.w	r2, r2, #10
 80089d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e0:	f003 021c 	and.w	r2, r3, #28
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e8:	2102      	movs	r1, #2
 80089ea:	fa01 f202 	lsl.w	r2, r1, r2
 80089ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d038      	beq.n	8008a72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008a08:	e033      	b.n	8008a72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a0e:	f003 031c 	and.w	r3, r3, #28
 8008a12:	2208      	movs	r2, #8
 8008a14:	409a      	lsls	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4013      	ands	r3, r2
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d02a      	beq.n	8008a74 <HAL_DMA_IRQHandler+0x156>
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d025      	beq.n	8008a74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 020e 	bic.w	r2, r2, #14
 8008a36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a3c:	f003 021c 	and.w	r2, r3, #28
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a44:	2101      	movs	r1, #1
 8008a46:	fa01 f202 	lsl.w	r2, r1, r2
 8008a4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d004      	beq.n	8008a74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008a72:	bf00      	nop
 8008a74:	bf00      	nop
}
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
 8008aa0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008aaa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d004      	beq.n	8008abe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008abc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ac2:	f003 021c 	and.w	r2, r3, #28
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aca:	2101      	movs	r1, #1
 8008acc:	fa01 f202 	lsl.w	r2, r1, r2
 8008ad0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	2b10      	cmp	r3, #16
 8008ae0:	d108      	bne.n	8008af4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008af2:	e007      	b.n	8008b04 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	60da      	str	r2, [r3, #12]
}
 8008b04:	bf00      	nop
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	4b17      	ldr	r3, [pc, #92]	@ (8008b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d80a      	bhi.n	8008b3a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b28:	089b      	lsrs	r3, r3, #2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b30:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6493      	str	r3, [r2, #72]	@ 0x48
 8008b38:	e007      	b.n	8008b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b3e:	089b      	lsrs	r3, r3, #2
 8008b40:	009a      	lsls	r2, r3, #2
 8008b42:	4b0f      	ldr	r3, [pc, #60]	@ (8008b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008b44:	4413      	add	r3, r2
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	3b08      	subs	r3, #8
 8008b52:	4a0c      	ldr	r2, [pc, #48]	@ (8008b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008b54:	fba2 2303 	umull	r2, r3, r2, r3
 8008b58:	091b      	lsrs	r3, r3, #4
 8008b5a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8008b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008b60:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f003 031f 	and.w	r3, r3, #31
 8008b68:	2201      	movs	r2, #1
 8008b6a:	409a      	lsls	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008b70:	bf00      	nop
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	40020407 	.word	0x40020407
 8008b80:	4002081c 	.word	0x4002081c
 8008b84:	cccccccd 	.word	0xcccccccd
 8008b88:	40020880 	.word	0x40020880

08008b8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b9c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8008bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008ba2:	4413      	add	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a09      	ldr	r2, [pc, #36]	@ (8008bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008bb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	f003 0303 	and.w	r3, r3, #3
 8008bba:	2201      	movs	r2, #1
 8008bbc:	409a      	lsls	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008bc2:	bf00      	nop
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	1000823f 	.word	0x1000823f
 8008bd4:	40020940 	.word	0x40020940

08008bd8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008be2:	2300      	movs	r3, #0
 8008be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008be6:	e14c      	b.n	8008e82 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	2101      	movs	r1, #1
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 813e 	beq.w	8008e7c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f003 0303 	and.w	r3, r3, #3
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d005      	beq.n	8008c18 <HAL_GPIO_Init+0x40>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f003 0303 	and.w	r3, r3, #3
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d130      	bne.n	8008c7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	005b      	lsls	r3, r3, #1
 8008c22:	2203      	movs	r2, #3
 8008c24:	fa02 f303 	lsl.w	r3, r2, r3
 8008c28:	43db      	mvns	r3, r3
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	68da      	ldr	r2, [r3, #12]
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c4e:	2201      	movs	r2, #1
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	fa02 f303 	lsl.w	r3, r2, r3
 8008c56:	43db      	mvns	r3, r3
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	091b      	lsrs	r3, r3, #4
 8008c64:	f003 0201 	and.w	r2, r3, #1
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f003 0303 	and.w	r3, r3, #3
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	d017      	beq.n	8008cb6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	2203      	movs	r2, #3
 8008c92:	fa02 f303 	lsl.w	r3, r2, r3
 8008c96:	43db      	mvns	r3, r3
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f003 0303 	and.w	r3, r3, #3
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d123      	bne.n	8008d0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	08da      	lsrs	r2, r3, #3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3208      	adds	r2, #8
 8008cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	220f      	movs	r2, #15
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	43db      	mvns	r3, r3
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	691a      	ldr	r2, [r3, #16]
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f003 0307 	and.w	r3, r3, #7
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf6:	693a      	ldr	r2, [r7, #16]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	08da      	lsrs	r2, r3, #3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	3208      	adds	r2, #8
 8008d04:	6939      	ldr	r1, [r7, #16]
 8008d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	2203      	movs	r2, #3
 8008d16:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1a:	43db      	mvns	r3, r3
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	4013      	ands	r3, r2
 8008d20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f003 0203 	and.w	r2, r3, #3
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	005b      	lsls	r3, r3, #1
 8008d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 8098 	beq.w	8008e7c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008d4c:	4a54      	ldr	r2, [pc, #336]	@ (8008ea0 <HAL_GPIO_Init+0x2c8>)
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	089b      	lsrs	r3, r3, #2
 8008d52:	3302      	adds	r3, #2
 8008d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	220f      	movs	r2, #15
 8008d64:	fa02 f303 	lsl.w	r3, r2, r3
 8008d68:	43db      	mvns	r3, r3
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008d76:	d019      	beq.n	8008dac <HAL_GPIO_Init+0x1d4>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8008ea4 <HAL_GPIO_Init+0x2cc>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d013      	beq.n	8008da8 <HAL_GPIO_Init+0x1d0>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a49      	ldr	r2, [pc, #292]	@ (8008ea8 <HAL_GPIO_Init+0x2d0>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d00d      	beq.n	8008da4 <HAL_GPIO_Init+0x1cc>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a48      	ldr	r2, [pc, #288]	@ (8008eac <HAL_GPIO_Init+0x2d4>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d007      	beq.n	8008da0 <HAL_GPIO_Init+0x1c8>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a47      	ldr	r2, [pc, #284]	@ (8008eb0 <HAL_GPIO_Init+0x2d8>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d101      	bne.n	8008d9c <HAL_GPIO_Init+0x1c4>
 8008d98:	2304      	movs	r3, #4
 8008d9a:	e008      	b.n	8008dae <HAL_GPIO_Init+0x1d6>
 8008d9c:	2307      	movs	r3, #7
 8008d9e:	e006      	b.n	8008dae <HAL_GPIO_Init+0x1d6>
 8008da0:	2303      	movs	r3, #3
 8008da2:	e004      	b.n	8008dae <HAL_GPIO_Init+0x1d6>
 8008da4:	2302      	movs	r3, #2
 8008da6:	e002      	b.n	8008dae <HAL_GPIO_Init+0x1d6>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e000      	b.n	8008dae <HAL_GPIO_Init+0x1d6>
 8008dac:	2300      	movs	r3, #0
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	f002 0203 	and.w	r2, r2, #3
 8008db4:	0092      	lsls	r2, r2, #2
 8008db6:	4093      	lsls	r3, r2
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008dbe:	4938      	ldr	r1, [pc, #224]	@ (8008ea0 <HAL_GPIO_Init+0x2c8>)
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	089b      	lsrs	r3, r3, #2
 8008dc4:	3302      	adds	r3, #2
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008dcc:	4b39      	ldr	r3, [pc, #228]	@ (8008eb4 <HAL_GPIO_Init+0x2dc>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	43db      	mvns	r3, r3
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	4013      	ands	r3, r2
 8008dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d003      	beq.n	8008df0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008df0:	4a30      	ldr	r2, [pc, #192]	@ (8008eb4 <HAL_GPIO_Init+0x2dc>)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008df6:	4b2f      	ldr	r3, [pc, #188]	@ (8008eb4 <HAL_GPIO_Init+0x2dc>)
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	43db      	mvns	r3, r3
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	4013      	ands	r3, r2
 8008e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008e1a:	4a26      	ldr	r2, [pc, #152]	@ (8008eb4 <HAL_GPIO_Init+0x2dc>)
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008e20:	4b24      	ldr	r3, [pc, #144]	@ (8008eb4 <HAL_GPIO_Init+0x2dc>)
 8008e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	43db      	mvns	r3, r3
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008e46:	4a1b      	ldr	r2, [pc, #108]	@ (8008eb4 <HAL_GPIO_Init+0x2dc>)
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8008e4e:	4b19      	ldr	r3, [pc, #100]	@ (8008eb4 <HAL_GPIO_Init+0x2dc>)
 8008e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	43db      	mvns	r3, r3
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d003      	beq.n	8008e74 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008e74:	4a0f      	ldr	r2, [pc, #60]	@ (8008eb4 <HAL_GPIO_Init+0x2dc>)
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	fa22 f303 	lsr.w	r3, r2, r3
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f47f aeab 	bne.w	8008be8 <HAL_GPIO_Init+0x10>
  }
}
 8008e92:	bf00      	nop
 8008e94:	bf00      	nop
 8008e96:	371c      	adds	r7, #28
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	40010000 	.word	0x40010000
 8008ea4:	48000400 	.word	0x48000400
 8008ea8:	48000800 	.word	0x48000800
 8008eac:	48000c00 	.word	0x48000c00
 8008eb0:	48001000 	.word	0x48001000
 8008eb4:	58000800 	.word	0x58000800

08008eb8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691a      	ldr	r2, [r3, #16]
 8008ec8:	887b      	ldrh	r3, [r7, #2]
 8008eca:	4013      	ands	r3, r2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	73fb      	strb	r3, [r7, #15]
 8008ed4:	e001      	b.n	8008eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	807b      	strh	r3, [r7, #2]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ef8:	787b      	ldrb	r3, [r7, #1]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008efe:	887a      	ldrh	r2, [r7, #2]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008f04:	e002      	b.n	8008f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008f06:	887a      	ldrh	r2, [r7, #2]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f2a:	887a      	ldrh	r2, [r7, #2]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	041a      	lsls	r2, r3, #16
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	43d9      	mvns	r1, r3
 8008f36:	887b      	ldrh	r3, [r7, #2]
 8008f38:	400b      	ands	r3, r1
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	619a      	str	r2, [r3, #24]
}
 8008f40:	bf00      	nop
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008f56:	4b08      	ldr	r3, [pc, #32]	@ (8008f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f58:	68da      	ldr	r2, [r3, #12]
 8008f5a:	88fb      	ldrh	r3, [r7, #6]
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d006      	beq.n	8008f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008f62:	4a05      	ldr	r2, [pc, #20]	@ (8008f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f64:	88fb      	ldrh	r3, [r7, #6]
 8008f66:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008f68:	88fb      	ldrh	r3, [r7, #6]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7f8 fe96 	bl	8001c9c <HAL_GPIO_EXTI_Callback>
  }
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	58000800 	.word	0x58000800

08008f7c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8008f82:	4b0a      	ldr	r3, [pc, #40]	@ (8008fac <HAL_HSEM_IRQHandler+0x30>)
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8008f88:	4b08      	ldr	r3, [pc, #32]	@ (8008fac <HAL_HSEM_IRQHandler+0x30>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	43db      	mvns	r3, r3
 8008f90:	4906      	ldr	r1, [pc, #24]	@ (8008fac <HAL_HSEM_IRQHandler+0x30>)
 8008f92:	4013      	ands	r3, r2
 8008f94:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8008f96:	4a05      	ldr	r2, [pc, #20]	@ (8008fac <HAL_HSEM_IRQHandler+0x30>)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f807 	bl	8008fb0 <HAL_HSEM_FreeCallback>
}
 8008fa2:	bf00      	nop
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	58001500 	.word	0x58001500

08008fb0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e08d      	b.n	80090f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7f8 fd60 	bl	8001ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2224      	movs	r2, #36	@ 0x24
 8008ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f022 0201 	bic.w	r2, r2, #1
 8009006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009014:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009024:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d107      	bne.n	800903e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	689a      	ldr	r2, [r3, #8]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800903a:	609a      	str	r2, [r3, #8]
 800903c:	e006      	b.n	800904c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	689a      	ldr	r2, [r3, #8]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800904a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	2b02      	cmp	r3, #2
 8009052:	d108      	bne.n	8009066 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009062:	605a      	str	r2, [r3, #4]
 8009064:	e007      	b.n	8009076 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009074:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	6812      	ldr	r2, [r2, #0]
 8009080:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009088:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68da      	ldr	r2, [r3, #12]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009098:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	691a      	ldr	r2, [r3, #16]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	69d9      	ldr	r1, [r3, #28]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6a1a      	ldr	r2, [r3, #32]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0201 	orr.w	r2, r2, #1
 80090d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
	...

080090fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af02      	add	r7, sp, #8
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	607a      	str	r2, [r7, #4]
 8009106:	461a      	mov	r2, r3
 8009108:	460b      	mov	r3, r1
 800910a:	817b      	strh	r3, [r7, #10]
 800910c:	4613      	mov	r3, r2
 800910e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b20      	cmp	r3, #32
 800911a:	f040 80fd 	bne.w	8009318 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009124:	2b01      	cmp	r3, #1
 8009126:	d101      	bne.n	800912c <HAL_I2C_Master_Transmit+0x30>
 8009128:	2302      	movs	r3, #2
 800912a:	e0f6      	b.n	800931a <HAL_I2C_Master_Transmit+0x21e>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009134:	f7fe f846 	bl	80071c4 <HAL_GetTick>
 8009138:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	2319      	movs	r3, #25
 8009140:	2201      	movs	r2, #1
 8009142:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f000 fce0 	bl	8009b0c <I2C_WaitOnFlagUntilTimeout>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e0e1      	b.n	800931a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2221      	movs	r2, #33	@ 0x21
 800915a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2210      	movs	r2, #16
 8009162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	893a      	ldrh	r2, [r7, #8]
 8009176:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009182:	b29b      	uxth	r3, r3
 8009184:	2bff      	cmp	r3, #255	@ 0xff
 8009186:	d906      	bls.n	8009196 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	22ff      	movs	r2, #255	@ 0xff
 800918c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800918e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	e007      	b.n	80091a6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800919a:	b29a      	uxth	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80091a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80091a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d024      	beq.n	80091f8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b2:	781a      	ldrb	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	3b01      	subs	r3, #1
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091d6:	3b01      	subs	r3, #1
 80091d8:	b29a      	uxth	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	3301      	adds	r3, #1
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	8979      	ldrh	r1, [r7, #10]
 80091ea:	4b4e      	ldr	r3, [pc, #312]	@ (8009324 <HAL_I2C_Master_Transmit+0x228>)
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f000 fedb 	bl	8009fac <I2C_TransferConfig>
 80091f6:	e066      	b.n	80092c6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	8979      	ldrh	r1, [r7, #10]
 8009200:	4b48      	ldr	r3, [pc, #288]	@ (8009324 <HAL_I2C_Master_Transmit+0x228>)
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f000 fed0 	bl	8009fac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800920c:	e05b      	b.n	80092c6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	6a39      	ldr	r1, [r7, #32]
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 fcd3 	bl	8009bbe <I2C_WaitOnTXISFlagUntilTimeout>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e07b      	b.n	800931a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009226:	781a      	ldrb	r2, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009232:	1c5a      	adds	r2, r3, #1
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800923c:	b29b      	uxth	r3, r3
 800923e:	3b01      	subs	r3, #1
 8009240:	b29a      	uxth	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800924a:	3b01      	subs	r3, #1
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009256:	b29b      	uxth	r3, r3
 8009258:	2b00      	cmp	r3, #0
 800925a:	d034      	beq.n	80092c6 <HAL_I2C_Master_Transmit+0x1ca>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009260:	2b00      	cmp	r3, #0
 8009262:	d130      	bne.n	80092c6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	2200      	movs	r2, #0
 800926c:	2180      	movs	r1, #128	@ 0x80
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f000 fc4c 	bl	8009b0c <I2C_WaitOnFlagUntilTimeout>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e04d      	b.n	800931a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009282:	b29b      	uxth	r3, r3
 8009284:	2bff      	cmp	r3, #255	@ 0xff
 8009286:	d90e      	bls.n	80092a6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	22ff      	movs	r2, #255	@ 0xff
 800928c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009292:	b2da      	uxtb	r2, r3
 8009294:	8979      	ldrh	r1, [r7, #10]
 8009296:	2300      	movs	r3, #0
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f000 fe84 	bl	8009fac <I2C_TransferConfig>
 80092a4:	e00f      	b.n	80092c6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	8979      	ldrh	r1, [r7, #10]
 80092b8:	2300      	movs	r3, #0
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 fe73 	bl	8009fac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d19e      	bne.n	800920e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	6a39      	ldr	r1, [r7, #32]
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f000 fcb9 	bl	8009c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d001      	beq.n	80092e4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e01a      	b.n	800931a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2220      	movs	r2, #32
 80092ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6859      	ldr	r1, [r3, #4]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009328 <HAL_I2C_Master_Transmit+0x22c>)
 80092f8:	400b      	ands	r3, r1
 80092fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2220      	movs	r2, #32
 8009300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	e000      	b.n	800931a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009318:	2302      	movs	r3, #2
  }
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	80002000 	.word	0x80002000
 8009328:	fe00e800 	.word	0xfe00e800

0800932c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af02      	add	r7, sp, #8
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	607a      	str	r2, [r7, #4]
 8009336:	461a      	mov	r2, r3
 8009338:	460b      	mov	r3, r1
 800933a:	817b      	strh	r3, [r7, #10]
 800933c:	4613      	mov	r3, r2
 800933e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b20      	cmp	r3, #32
 800934a:	f040 80db 	bne.w	8009504 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009354:	2b01      	cmp	r3, #1
 8009356:	d101      	bne.n	800935c <HAL_I2C_Master_Receive+0x30>
 8009358:	2302      	movs	r3, #2
 800935a:	e0d4      	b.n	8009506 <HAL_I2C_Master_Receive+0x1da>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009364:	f7fd ff2e 	bl	80071c4 <HAL_GetTick>
 8009368:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	2319      	movs	r3, #25
 8009370:	2201      	movs	r2, #1
 8009372:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 fbc8 	bl	8009b0c <I2C_WaitOnFlagUntilTimeout>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e0bf      	b.n	8009506 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2222      	movs	r2, #34	@ 0x22
 800938a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2210      	movs	r2, #16
 8009392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	893a      	ldrh	r2, [r7, #8]
 80093a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	2bff      	cmp	r3, #255	@ 0xff
 80093b6:	d90e      	bls.n	80093d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	22ff      	movs	r2, #255	@ 0xff
 80093bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	8979      	ldrh	r1, [r7, #10]
 80093c6:	4b52      	ldr	r3, [pc, #328]	@ (8009510 <HAL_I2C_Master_Receive+0x1e4>)
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 fdec 	bl	8009fac <I2C_TransferConfig>
 80093d4:	e06d      	b.n	80094b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093da:	b29a      	uxth	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	8979      	ldrh	r1, [r7, #10]
 80093e8:	4b49      	ldr	r3, [pc, #292]	@ (8009510 <HAL_I2C_Master_Receive+0x1e4>)
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 fddb 	bl	8009fac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80093f6:	e05c      	b.n	80094b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	6a39      	ldr	r1, [r7, #32]
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 fc69 	bl	8009cd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e07c      	b.n	8009506 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009416:	b2d2      	uxtb	r2, r2
 8009418:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800941e:	1c5a      	adds	r2, r3, #1
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009428:	3b01      	subs	r3, #1
 800942a:	b29a      	uxth	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009434:	b29b      	uxth	r3, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	b29a      	uxth	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009442:	b29b      	uxth	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	d034      	beq.n	80094b2 <HAL_I2C_Master_Receive+0x186>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800944c:	2b00      	cmp	r3, #0
 800944e:	d130      	bne.n	80094b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	2200      	movs	r2, #0
 8009458:	2180      	movs	r1, #128	@ 0x80
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 fb56 	bl	8009b0c <I2C_WaitOnFlagUntilTimeout>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e04d      	b.n	8009506 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800946e:	b29b      	uxth	r3, r3
 8009470:	2bff      	cmp	r3, #255	@ 0xff
 8009472:	d90e      	bls.n	8009492 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	22ff      	movs	r2, #255	@ 0xff
 8009478:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800947e:	b2da      	uxtb	r2, r3
 8009480:	8979      	ldrh	r1, [r7, #10]
 8009482:	2300      	movs	r3, #0
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f000 fd8e 	bl	8009fac <I2C_TransferConfig>
 8009490:	e00f      	b.n	80094b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009496:	b29a      	uxth	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	8979      	ldrh	r1, [r7, #10]
 80094a4:	2300      	movs	r3, #0
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 fd7d 	bl	8009fac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d19d      	bne.n	80093f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	6a39      	ldr	r1, [r7, #32]
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 fbc3 	bl	8009c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e01a      	b.n	8009506 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2220      	movs	r2, #32
 80094d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6859      	ldr	r1, [r3, #4]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009514 <HAL_I2C_Master_Receive+0x1e8>)
 80094e4:	400b      	ands	r3, r1
 80094e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2220      	movs	r2, #32
 80094ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	e000      	b.n	8009506 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009504:	2302      	movs	r3, #2
  }
}
 8009506:	4618      	mov	r0, r3
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	80002400 	.word	0x80002400
 8009514:	fe00e800 	.word	0xfe00e800

08009518 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af02      	add	r7, sp, #8
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	4608      	mov	r0, r1
 8009522:	4611      	mov	r1, r2
 8009524:	461a      	mov	r2, r3
 8009526:	4603      	mov	r3, r0
 8009528:	817b      	strh	r3, [r7, #10]
 800952a:	460b      	mov	r3, r1
 800952c:	813b      	strh	r3, [r7, #8]
 800952e:	4613      	mov	r3, r2
 8009530:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b20      	cmp	r3, #32
 800953c:	f040 80f9 	bne.w	8009732 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d002      	beq.n	800954c <HAL_I2C_Mem_Write+0x34>
 8009546:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009548:	2b00      	cmp	r3, #0
 800954a:	d105      	bne.n	8009558 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009552:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e0ed      	b.n	8009734 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800955e:	2b01      	cmp	r3, #1
 8009560:	d101      	bne.n	8009566 <HAL_I2C_Mem_Write+0x4e>
 8009562:	2302      	movs	r3, #2
 8009564:	e0e6      	b.n	8009734 <HAL_I2C_Mem_Write+0x21c>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800956e:	f7fd fe29 	bl	80071c4 <HAL_GetTick>
 8009572:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	2319      	movs	r3, #25
 800957a:	2201      	movs	r2, #1
 800957c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 fac3 	bl	8009b0c <I2C_WaitOnFlagUntilTimeout>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e0d1      	b.n	8009734 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2221      	movs	r2, #33	@ 0x21
 8009594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2240      	movs	r2, #64	@ 0x40
 800959c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6a3a      	ldr	r2, [r7, #32]
 80095aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80095b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80095b8:	88f8      	ldrh	r0, [r7, #6]
 80095ba:	893a      	ldrh	r2, [r7, #8]
 80095bc:	8979      	ldrh	r1, [r7, #10]
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	9301      	str	r3, [sp, #4]
 80095c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	4603      	mov	r3, r0
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 f9d3 	bl	8009974 <I2C_RequestMemoryWrite>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d005      	beq.n	80095e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	e0a9      	b.n	8009734 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	2bff      	cmp	r3, #255	@ 0xff
 80095e8:	d90e      	bls.n	8009608 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	22ff      	movs	r2, #255	@ 0xff
 80095ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	8979      	ldrh	r1, [r7, #10]
 80095f8:	2300      	movs	r3, #0
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f000 fcd3 	bl	8009fac <I2C_TransferConfig>
 8009606:	e00f      	b.n	8009628 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800960c:	b29a      	uxth	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009616:	b2da      	uxtb	r2, r3
 8009618:	8979      	ldrh	r1, [r7, #10]
 800961a:	2300      	movs	r3, #0
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f000 fcc2 	bl	8009fac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 fac6 	bl	8009bbe <I2C_WaitOnTXISFlagUntilTimeout>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e07b      	b.n	8009734 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009640:	781a      	ldrb	r2, [r3, #0]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964c:	1c5a      	adds	r2, r3, #1
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009656:	b29b      	uxth	r3, r3
 8009658:	3b01      	subs	r3, #1
 800965a:	b29a      	uxth	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009664:	3b01      	subs	r3, #1
 8009666:	b29a      	uxth	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009670:	b29b      	uxth	r3, r3
 8009672:	2b00      	cmp	r3, #0
 8009674:	d034      	beq.n	80096e0 <HAL_I2C_Mem_Write+0x1c8>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800967a:	2b00      	cmp	r3, #0
 800967c:	d130      	bne.n	80096e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009684:	2200      	movs	r2, #0
 8009686:	2180      	movs	r1, #128	@ 0x80
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f000 fa3f 	bl	8009b0c <I2C_WaitOnFlagUntilTimeout>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e04d      	b.n	8009734 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800969c:	b29b      	uxth	r3, r3
 800969e:	2bff      	cmp	r3, #255	@ 0xff
 80096a0:	d90e      	bls.n	80096c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	22ff      	movs	r2, #255	@ 0xff
 80096a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	8979      	ldrh	r1, [r7, #10]
 80096b0:	2300      	movs	r3, #0
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 fc77 	bl	8009fac <I2C_TransferConfig>
 80096be:	e00f      	b.n	80096e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	8979      	ldrh	r1, [r7, #10]
 80096d2:	2300      	movs	r3, #0
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 fc66 	bl	8009fac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d19e      	bne.n	8009628 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f000 faac 	bl	8009c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e01a      	b.n	8009734 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2220      	movs	r2, #32
 8009704:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6859      	ldr	r1, [r3, #4]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	4b0a      	ldr	r3, [pc, #40]	@ (800973c <HAL_I2C_Mem_Write+0x224>)
 8009712:	400b      	ands	r3, r1
 8009714:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2220      	movs	r2, #32
 800971a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	e000      	b.n	8009734 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009732:	2302      	movs	r3, #2
  }
}
 8009734:	4618      	mov	r0, r3
 8009736:	3718      	adds	r7, #24
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	fe00e800 	.word	0xfe00e800

08009740 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b088      	sub	sp, #32
 8009744:	af02      	add	r7, sp, #8
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	4608      	mov	r0, r1
 800974a:	4611      	mov	r1, r2
 800974c:	461a      	mov	r2, r3
 800974e:	4603      	mov	r3, r0
 8009750:	817b      	strh	r3, [r7, #10]
 8009752:	460b      	mov	r3, r1
 8009754:	813b      	strh	r3, [r7, #8]
 8009756:	4613      	mov	r3, r2
 8009758:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b20      	cmp	r3, #32
 8009764:	f040 80fd 	bne.w	8009962 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009768:	6a3b      	ldr	r3, [r7, #32]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d002      	beq.n	8009774 <HAL_I2C_Mem_Read+0x34>
 800976e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009770:	2b00      	cmp	r3, #0
 8009772:	d105      	bne.n	8009780 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800977a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e0f1      	b.n	8009964 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009786:	2b01      	cmp	r3, #1
 8009788:	d101      	bne.n	800978e <HAL_I2C_Mem_Read+0x4e>
 800978a:	2302      	movs	r3, #2
 800978c:	e0ea      	b.n	8009964 <HAL_I2C_Mem_Read+0x224>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009796:	f7fd fd15 	bl	80071c4 <HAL_GetTick>
 800979a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	2319      	movs	r3, #25
 80097a2:	2201      	movs	r2, #1
 80097a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f000 f9af 	bl	8009b0c <I2C_WaitOnFlagUntilTimeout>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e0d5      	b.n	8009964 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2222      	movs	r2, #34	@ 0x22
 80097bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2240      	movs	r2, #64	@ 0x40
 80097c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a3a      	ldr	r2, [r7, #32]
 80097d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80097d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80097e0:	88f8      	ldrh	r0, [r7, #6]
 80097e2:	893a      	ldrh	r2, [r7, #8]
 80097e4:	8979      	ldrh	r1, [r7, #10]
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	4603      	mov	r3, r0
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f000 f913 	bl	8009a1c <I2C_RequestMemoryRead>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d005      	beq.n	8009808 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e0ad      	b.n	8009964 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800980c:	b29b      	uxth	r3, r3
 800980e:	2bff      	cmp	r3, #255	@ 0xff
 8009810:	d90e      	bls.n	8009830 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	22ff      	movs	r2, #255	@ 0xff
 8009816:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800981c:	b2da      	uxtb	r2, r3
 800981e:	8979      	ldrh	r1, [r7, #10]
 8009820:	4b52      	ldr	r3, [pc, #328]	@ (800996c <HAL_I2C_Mem_Read+0x22c>)
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 fbbf 	bl	8009fac <I2C_TransferConfig>
 800982e:	e00f      	b.n	8009850 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009834:	b29a      	uxth	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800983e:	b2da      	uxtb	r2, r3
 8009840:	8979      	ldrh	r1, [r7, #10]
 8009842:	4b4a      	ldr	r3, [pc, #296]	@ (800996c <HAL_I2C_Mem_Read+0x22c>)
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f000 fbae 	bl	8009fac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009856:	2200      	movs	r2, #0
 8009858:	2104      	movs	r1, #4
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f000 f956 	bl	8009b0c <I2C_WaitOnFlagUntilTimeout>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e07c      	b.n	8009964 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009874:	b2d2      	uxtb	r2, r2
 8009876:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800987c:	1c5a      	adds	r2, r3, #1
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009886:	3b01      	subs	r3, #1
 8009888:	b29a      	uxth	r2, r3
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009892:	b29b      	uxth	r3, r3
 8009894:	3b01      	subs	r3, #1
 8009896:	b29a      	uxth	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d034      	beq.n	8009910 <HAL_I2C_Mem_Read+0x1d0>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d130      	bne.n	8009910 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b4:	2200      	movs	r2, #0
 80098b6:	2180      	movs	r1, #128	@ 0x80
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f000 f927 	bl	8009b0c <I2C_WaitOnFlagUntilTimeout>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e04d      	b.n	8009964 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	2bff      	cmp	r3, #255	@ 0xff
 80098d0:	d90e      	bls.n	80098f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	22ff      	movs	r2, #255	@ 0xff
 80098d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	8979      	ldrh	r1, [r7, #10]
 80098e0:	2300      	movs	r3, #0
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 fb5f 	bl	8009fac <I2C_TransferConfig>
 80098ee:	e00f      	b.n	8009910 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	8979      	ldrh	r1, [r7, #10]
 8009902:	2300      	movs	r3, #0
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 fb4e 	bl	8009fac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009914:	b29b      	uxth	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d19a      	bne.n	8009850 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f000 f994 	bl	8009c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d001      	beq.n	800992e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e01a      	b.n	8009964 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2220      	movs	r2, #32
 8009934:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	6859      	ldr	r1, [r3, #4]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	4b0b      	ldr	r3, [pc, #44]	@ (8009970 <HAL_I2C_Mem_Read+0x230>)
 8009942:	400b      	ands	r3, r1
 8009944:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2220      	movs	r2, #32
 800994a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	e000      	b.n	8009964 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009962:	2302      	movs	r3, #2
  }
}
 8009964:	4618      	mov	r0, r3
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	80002400 	.word	0x80002400
 8009970:	fe00e800 	.word	0xfe00e800

08009974 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af02      	add	r7, sp, #8
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	4608      	mov	r0, r1
 800997e:	4611      	mov	r1, r2
 8009980:	461a      	mov	r2, r3
 8009982:	4603      	mov	r3, r0
 8009984:	817b      	strh	r3, [r7, #10]
 8009986:	460b      	mov	r3, r1
 8009988:	813b      	strh	r3, [r7, #8]
 800998a:	4613      	mov	r3, r2
 800998c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800998e:	88fb      	ldrh	r3, [r7, #6]
 8009990:	b2da      	uxtb	r2, r3
 8009992:	8979      	ldrh	r1, [r7, #10]
 8009994:	4b20      	ldr	r3, [pc, #128]	@ (8009a18 <I2C_RequestMemoryWrite+0xa4>)
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 fb05 	bl	8009fac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099a2:	69fa      	ldr	r2, [r7, #28]
 80099a4:	69b9      	ldr	r1, [r7, #24]
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 f909 	bl	8009bbe <I2C_WaitOnTXISFlagUntilTimeout>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e02c      	b.n	8009a10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80099b6:	88fb      	ldrh	r3, [r7, #6]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d105      	bne.n	80099c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099bc:	893b      	ldrh	r3, [r7, #8]
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80099c6:	e015      	b.n	80099f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80099c8:	893b      	ldrh	r3, [r7, #8]
 80099ca:	0a1b      	lsrs	r3, r3, #8
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099d6:	69fa      	ldr	r2, [r7, #28]
 80099d8:	69b9      	ldr	r1, [r7, #24]
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 f8ef 	bl	8009bbe <I2C_WaitOnTXISFlagUntilTimeout>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e012      	b.n	8009a10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099ea:	893b      	ldrh	r3, [r7, #8]
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	2200      	movs	r2, #0
 80099fc:	2180      	movs	r1, #128	@ 0x80
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f000 f884 	bl	8009b0c <I2C_WaitOnFlagUntilTimeout>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e000      	b.n	8009a10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	80002000 	.word	0x80002000

08009a1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af02      	add	r7, sp, #8
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	4608      	mov	r0, r1
 8009a26:	4611      	mov	r1, r2
 8009a28:	461a      	mov	r2, r3
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	817b      	strh	r3, [r7, #10]
 8009a2e:	460b      	mov	r3, r1
 8009a30:	813b      	strh	r3, [r7, #8]
 8009a32:	4613      	mov	r3, r2
 8009a34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009a36:	88fb      	ldrh	r3, [r7, #6]
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	8979      	ldrh	r1, [r7, #10]
 8009a3c:	4b20      	ldr	r3, [pc, #128]	@ (8009ac0 <I2C_RequestMemoryRead+0xa4>)
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	2300      	movs	r3, #0
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 fab2 	bl	8009fac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a48:	69fa      	ldr	r2, [r7, #28]
 8009a4a:	69b9      	ldr	r1, [r7, #24]
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f000 f8b6 	bl	8009bbe <I2C_WaitOnTXISFlagUntilTimeout>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e02c      	b.n	8009ab6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a5c:	88fb      	ldrh	r3, [r7, #6]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d105      	bne.n	8009a6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a62:	893b      	ldrh	r3, [r7, #8]
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a6c:	e015      	b.n	8009a9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009a6e:	893b      	ldrh	r3, [r7, #8]
 8009a70:	0a1b      	lsrs	r3, r3, #8
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a7c:	69fa      	ldr	r2, [r7, #28]
 8009a7e:	69b9      	ldr	r1, [r7, #24]
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f000 f89c 	bl	8009bbe <I2C_WaitOnTXISFlagUntilTimeout>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e012      	b.n	8009ab6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a90:	893b      	ldrh	r3, [r7, #8]
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2140      	movs	r1, #64	@ 0x40
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f000 f831 	bl	8009b0c <I2C_WaitOnFlagUntilTimeout>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e000      	b.n	8009ab6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	80002000 	.word	0x80002000

08009ac4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	f003 0302 	and.w	r3, r3, #2
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d103      	bne.n	8009ae2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	f003 0301 	and.w	r3, r3, #1
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d007      	beq.n	8009b00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	699a      	ldr	r2, [r3, #24]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f042 0201 	orr.w	r2, r2, #1
 8009afe:	619a      	str	r2, [r3, #24]
  }
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	603b      	str	r3, [r7, #0]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b1c:	e03b      	b.n	8009b96 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b1e:	69ba      	ldr	r2, [r7, #24]
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 f962 	bl	8009dec <I2C_IsErrorOccurred>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e041      	b.n	8009bb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b38:	d02d      	beq.n	8009b96 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b3a:	f7fd fb43 	bl	80071c4 <HAL_GetTick>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	683a      	ldr	r2, [r7, #0]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d302      	bcc.n	8009b50 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d122      	bne.n	8009b96 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	699a      	ldr	r2, [r3, #24]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	4013      	ands	r3, r2
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	bf0c      	ite	eq
 8009b60:	2301      	moveq	r3, #1
 8009b62:	2300      	movne	r3, #0
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	461a      	mov	r2, r3
 8009b68:	79fb      	ldrb	r3, [r7, #7]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d113      	bne.n	8009b96 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b72:	f043 0220 	orr.w	r2, r3, #32
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2220      	movs	r2, #32
 8009b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e00f      	b.n	8009bb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	699a      	ldr	r2, [r3, #24]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	bf0c      	ite	eq
 8009ba6:	2301      	moveq	r3, #1
 8009ba8:	2300      	movne	r3, #0
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	461a      	mov	r2, r3
 8009bae:	79fb      	ldrb	r3, [r7, #7]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d0b4      	beq.n	8009b1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b084      	sub	sp, #16
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	60f8      	str	r0, [r7, #12]
 8009bc6:	60b9      	str	r1, [r7, #8]
 8009bc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009bca:	e033      	b.n	8009c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	68b9      	ldr	r1, [r7, #8]
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f000 f90b 	bl	8009dec <I2C_IsErrorOccurred>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e031      	b.n	8009c44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be6:	d025      	beq.n	8009c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009be8:	f7fd faec 	bl	80071c4 <HAL_GetTick>
 8009bec:	4602      	mov	r2, r0
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d302      	bcc.n	8009bfe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d11a      	bne.n	8009c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	f003 0302 	and.w	r3, r3, #2
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d013      	beq.n	8009c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c10:	f043 0220 	orr.w	r2, r3, #32
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2220      	movs	r2, #32
 8009c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e007      	b.n	8009c44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	f003 0302 	and.w	r3, r3, #2
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d1c4      	bne.n	8009bcc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c58:	e02f      	b.n	8009cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	68b9      	ldr	r1, [r7, #8]
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 f8c4 	bl	8009dec <I2C_IsErrorOccurred>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e02d      	b.n	8009cca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c6e:	f7fd faa9 	bl	80071c4 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d302      	bcc.n	8009c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d11a      	bne.n	8009cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	f003 0320 	and.w	r3, r3, #32
 8009c8e:	2b20      	cmp	r3, #32
 8009c90:	d013      	beq.n	8009cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c96:	f043 0220 	orr.w	r2, r3, #32
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2220      	movs	r2, #32
 8009ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e007      	b.n	8009cca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	f003 0320 	and.w	r3, r3, #32
 8009cc4:	2b20      	cmp	r3, #32
 8009cc6:	d1c8      	bne.n	8009c5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
	...

08009cd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009ce4:	e071      	b.n	8009dca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	68b9      	ldr	r1, [r7, #8]
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 f87e 	bl	8009dec <I2C_IsErrorOccurred>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	f003 0320 	and.w	r3, r3, #32
 8009d04:	2b20      	cmp	r3, #32
 8009d06:	d13b      	bne.n	8009d80 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009d08:	7dfb      	ldrb	r3, [r7, #23]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d138      	bne.n	8009d80 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	f003 0304 	and.w	r3, r3, #4
 8009d18:	2b04      	cmp	r3, #4
 8009d1a:	d105      	bne.n	8009d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	f003 0310 	and.w	r3, r3, #16
 8009d32:	2b10      	cmp	r3, #16
 8009d34:	d121      	bne.n	8009d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2210      	movs	r2, #16
 8009d3c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2204      	movs	r2, #4
 8009d42:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2220      	movs	r2, #32
 8009d4a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6859      	ldr	r1, [r3, #4]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	4b24      	ldr	r3, [pc, #144]	@ (8009de8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009d58:	400b      	ands	r3, r1
 8009d5a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2220      	movs	r2, #32
 8009d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	75fb      	strb	r3, [r7, #23]
 8009d78:	e002      	b.n	8009d80 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009d80:	f7fd fa20 	bl	80071c4 <HAL_GetTick>
 8009d84:	4602      	mov	r2, r0
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	1ad3      	subs	r3, r2, r3
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d302      	bcc.n	8009d96 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d119      	bne.n	8009dca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009d96:	7dfb      	ldrb	r3, [r7, #23]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d116      	bne.n	8009dca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	f003 0304 	and.w	r3, r3, #4
 8009da6:	2b04      	cmp	r3, #4
 8009da8:	d00f      	beq.n	8009dca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dae:	f043 0220 	orr.w	r2, r3, #32
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2220      	movs	r2, #32
 8009dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	f003 0304 	and.w	r3, r3, #4
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d002      	beq.n	8009dde <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009dd8:	7dfb      	ldrb	r3, [r7, #23]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d083      	beq.n	8009ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	fe00e800 	.word	0xfe00e800

08009dec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08a      	sub	sp, #40	@ 0x28
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	f003 0310 	and.w	r3, r3, #16
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d068      	beq.n	8009eea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2210      	movs	r2, #16
 8009e1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009e20:	e049      	b.n	8009eb6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e28:	d045      	beq.n	8009eb6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009e2a:	f7fd f9cb 	bl	80071c4 <HAL_GetTick>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d302      	bcc.n	8009e40 <I2C_IsErrorOccurred+0x54>
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d13a      	bne.n	8009eb6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e62:	d121      	bne.n	8009ea8 <I2C_IsErrorOccurred+0xbc>
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e6a:	d01d      	beq.n	8009ea8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009e6c:	7cfb      	ldrb	r3, [r7, #19]
 8009e6e:	2b20      	cmp	r3, #32
 8009e70:	d01a      	beq.n	8009ea8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e80:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009e82:	f7fd f99f 	bl	80071c4 <HAL_GetTick>
 8009e86:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e88:	e00e      	b.n	8009ea8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009e8a:	f7fd f99b 	bl	80071c4 <HAL_GetTick>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	2b19      	cmp	r3, #25
 8009e96:	d907      	bls.n	8009ea8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	f043 0320 	orr.w	r3, r3, #32
 8009e9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009ea6:	e006      	b.n	8009eb6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	f003 0320 	and.w	r3, r3, #32
 8009eb2:	2b20      	cmp	r3, #32
 8009eb4:	d1e9      	bne.n	8009e8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	f003 0320 	and.w	r3, r3, #32
 8009ec0:	2b20      	cmp	r3, #32
 8009ec2:	d003      	beq.n	8009ecc <I2C_IsErrorOccurred+0xe0>
 8009ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d0aa      	beq.n	8009e22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d103      	bne.n	8009edc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2220      	movs	r2, #32
 8009eda:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	f043 0304 	orr.w	r3, r3, #4
 8009ee2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00b      	beq.n	8009f14 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009efc:	6a3b      	ldr	r3, [r7, #32]
 8009efe:	f043 0301 	orr.w	r3, r3, #1
 8009f02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00b      	beq.n	8009f36 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	f043 0308 	orr.w	r3, r3, #8
 8009f24:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009f2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009f40:	6a3b      	ldr	r3, [r7, #32]
 8009f42:	f043 0302 	orr.w	r3, r3, #2
 8009f46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009f58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d01c      	beq.n	8009f9a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f7ff fdaf 	bl	8009ac4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6859      	ldr	r1, [r3, #4]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa8 <I2C_IsErrorOccurred+0x1bc>)
 8009f72:	400b      	ands	r3, r1
 8009f74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	431a      	orrs	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3728      	adds	r7, #40	@ 0x28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	fe00e800 	.word	0xfe00e800

08009fac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b087      	sub	sp, #28
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	607b      	str	r3, [r7, #4]
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	817b      	strh	r3, [r7, #10]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009fbe:	897b      	ldrh	r3, [r7, #10]
 8009fc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009fc4:	7a7b      	ldrb	r3, [r7, #9]
 8009fc6:	041b      	lsls	r3, r3, #16
 8009fc8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009fcc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009fda:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	0d5b      	lsrs	r3, r3, #21
 8009fe6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009fea:	4b08      	ldr	r3, [pc, #32]	@ (800a00c <I2C_TransferConfig+0x60>)
 8009fec:	430b      	orrs	r3, r1
 8009fee:	43db      	mvns	r3, r3
 8009ff0:	ea02 0103 	and.w	r1, r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009ffe:	bf00      	nop
 800a000:	371c      	adds	r7, #28
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	03ff63ff 	.word	0x03ff63ff

0800a010 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b20      	cmp	r3, #32
 800a024:	d138      	bne.n	800a098 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d101      	bne.n	800a034 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a030:	2302      	movs	r3, #2
 800a032:	e032      	b.n	800a09a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2224      	movs	r2, #36	@ 0x24
 800a040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 0201 	bic.w	r2, r2, #1
 800a052:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a062:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6819      	ldr	r1, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	430a      	orrs	r2, r1
 800a072:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f042 0201 	orr.w	r2, r2, #1
 800a082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2220      	movs	r2, #32
 800a088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	e000      	b.n	800a09a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a098:	2302      	movs	r3, #2
  }
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b085      	sub	sp, #20
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b20      	cmp	r3, #32
 800a0ba:	d139      	bne.n	800a130 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d101      	bne.n	800a0ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e033      	b.n	800a132 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2224      	movs	r2, #36	@ 0x24
 800a0d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f022 0201 	bic.w	r2, r2, #1
 800a0e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a0f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	021b      	lsls	r3, r3, #8
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	4313      	orrs	r3, r2
 800a102:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f042 0201 	orr.w	r2, r2, #1
 800a11a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2220      	movs	r2, #32
 800a120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	e000      	b.n	800a132 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a130:	2302      	movs	r3, #2
  }
}
 800a132:	4618      	mov	r0, r3
 800a134:	3714      	adds	r7, #20
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
	...

0800a140 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800a148:	4b05      	ldr	r3, [pc, #20]	@ (800a160 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	4904      	ldr	r1, [pc, #16]	@ (800a160 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4313      	orrs	r3, r2
 800a152:	604b      	str	r3, [r1, #4]
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	40010000 	.word	0x40010000

0800a164 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d01e      	beq.n	800a1b4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800a176:	4b13      	ldr	r3, [pc, #76]	@ (800a1c4 <HAL_IPCC_Init+0x60>)
 800a178:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a180:	b2db      	uxtb	r3, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	d102      	bne.n	800a18c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7f7 fd4a 	bl	8001c20 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800a18c:	68b8      	ldr	r0, [r7, #8]
 800a18e:	f000 f8f5 	bl	800a37c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f8c6 	bl	800a330 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800a1b2:	e001      	b.n	800a1b8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	58000c00 	.word	0x58000c00

0800a1c8 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800a1d4:	4b22      	ldr	r3, [pc, #136]	@ (800a260 <HAL_IPCC_TX_IRQHandler+0x98>)
 800a1d6:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	43db      	mvns	r3, r3
 800a1de:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800a1e2:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	041b      	lsls	r3, r3, #16
 800a1ea:	43db      	mvns	r3, r3
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800a1f2:	e02c      	b.n	800a24e <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_MASK));
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f003 030f 	and.w	r3, r3, #15
 800a1fa:	3310      	adds	r3, #16
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a202:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	4013      	ands	r3, r2
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d01c      	beq.n	800a248 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	431a      	orrs	r2, r3
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	3306      	adds	r3, #6
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	4413      	add	r3, r2
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d009      	beq.n	800a23e <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	3306      	adds	r3, #6
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	4413      	add	r3, r2
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	6939      	ldr	r1, [r7, #16]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	43db      	mvns	r3, r3
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	4013      	ands	r3, r2
 800a246:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	3301      	adds	r3, #1
 800a24c:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1cf      	bne.n	800a1f4 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 800a254:	bf00      	nop
 800a256:	bf00      	nop
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	58000c00 	.word	0x58000c00

0800a264 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b088      	sub	sp, #32
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 800a26c:	2300      	movs	r3, #0
 800a26e:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800a270:	4b20      	ldr	r3, [pc, #128]	@ (800a2f4 <HAL_IPCC_RX_IRQHandler+0x90>)
 800a272:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 800a274:	4b20      	ldr	r3, [pc, #128]	@ (800a2f8 <HAL_IPCC_RX_IRQHandler+0x94>)
 800a276:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	43db      	mvns	r3, r3
 800a27e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a282:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	69fa      	ldr	r2, [r7, #28]
 800a28a:	4013      	ands	r3, r2
 800a28c:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800a28e:	e029      	b.n	800a2e4 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	f003 030f 	and.w	r3, r3, #15
 800a296:	2201      	movs	r2, #1
 800a298:	fa02 f303 	lsl.w	r3, r2, r3
 800a29c:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	4013      	ands	r3, r2
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d01a      	beq.n	800a2de <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	4413      	add	r3, r2
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d008      	beq.n	800a2d4 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	69b9      	ldr	r1, [r7, #24]
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	43db      	mvns	r3, r3
 800a2d8:	69fa      	ldr	r2, [r7, #28]
 800a2da:	4013      	ands	r3, r2
 800a2dc:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1d2      	bne.n	800a290 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 800a2ea:	bf00      	nop
 800a2ec:	bf00      	nop
 800a2ee:	3720      	adds	r7, #32
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	58000c00 	.word	0x58000c00
 800a2f8:	58000c10 	.word	0x58000c10

0800a2fc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	4613      	mov	r3, r2
 800a308:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800a30a:	bf00      	nop
 800a30c:	3714      	adds	r7, #20
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a316:	b480      	push	{r7}
 800a318:	b085      	sub	sp, #20
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	60f8      	str	r0, [r7, #12]
 800a31e:	60b9      	str	r1, [r7, #8]
 800a320:	4613      	mov	r3, r2
 800a322:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800a324:	bf00      	nop
 800a326:	3714      	adds	r7, #20
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a338:	2300      	movs	r3, #0
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	e00f      	b.n	800a35e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	4a0b      	ldr	r2, [pc, #44]	@ (800a374 <IPCC_SetDefaultCallbacks+0x44>)
 800a348:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3306      	adds	r3, #6
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	4a08      	ldr	r2, [pc, #32]	@ (800a378 <IPCC_SetDefaultCallbacks+0x48>)
 800a356:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3301      	adds	r3, #1
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2b05      	cmp	r3, #5
 800a362:	d9ec      	bls.n	800a33e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800a364:	bf00      	nop
 800a366:	bf00      	nop
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	0800a2fd 	.word	0x0800a2fd
 800a378:	0800a317 	.word	0x0800a317

0800a37c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800a390:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	223f      	movs	r2, #63	@ 0x3f
 800a396:	609a      	str	r2, [r3, #8]
}
 800a398:	bf00      	nop
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d101      	bne.n	800a3b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e0c0      	b.n	800a538 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d106      	bne.n	800a3d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f00b fd3c 	bl	8015e48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2203      	movs	r2, #3
 800a3d4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f007 f800 	bl	80113e2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	73fb      	strb	r3, [r7, #15]
 800a3e6:	e03e      	b.n	800a466 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a3e8:	7bfa      	ldrb	r2, [r7, #15]
 800a3ea:	6879      	ldr	r1, [r7, #4]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4413      	add	r3, r2
 800a3f2:	00db      	lsls	r3, r3, #3
 800a3f4:	440b      	add	r3, r1
 800a3f6:	3311      	adds	r3, #17
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a3fc:	7bfa      	ldrb	r2, [r7, #15]
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	4613      	mov	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	00db      	lsls	r3, r3, #3
 800a408:	440b      	add	r3, r1
 800a40a:	3310      	adds	r3, #16
 800a40c:	7bfa      	ldrb	r2, [r7, #15]
 800a40e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a410:	7bfa      	ldrb	r2, [r7, #15]
 800a412:	6879      	ldr	r1, [r7, #4]
 800a414:	4613      	mov	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	00db      	lsls	r3, r3, #3
 800a41c:	440b      	add	r3, r1
 800a41e:	3313      	adds	r3, #19
 800a420:	2200      	movs	r2, #0
 800a422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a424:	7bfa      	ldrb	r2, [r7, #15]
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	4613      	mov	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4413      	add	r3, r2
 800a42e:	00db      	lsls	r3, r3, #3
 800a430:	440b      	add	r3, r1
 800a432:	3320      	adds	r3, #32
 800a434:	2200      	movs	r2, #0
 800a436:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a438:	7bfa      	ldrb	r2, [r7, #15]
 800a43a:	6879      	ldr	r1, [r7, #4]
 800a43c:	4613      	mov	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4413      	add	r3, r2
 800a442:	00db      	lsls	r3, r3, #3
 800a444:	440b      	add	r3, r1
 800a446:	3324      	adds	r3, #36	@ 0x24
 800a448:	2200      	movs	r2, #0
 800a44a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
 800a44e:	6879      	ldr	r1, [r7, #4]
 800a450:	1c5a      	adds	r2, r3, #1
 800a452:	4613      	mov	r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	00db      	lsls	r3, r3, #3
 800a45a:	440b      	add	r3, r1
 800a45c:	2200      	movs	r2, #0
 800a45e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a460:	7bfb      	ldrb	r3, [r7, #15]
 800a462:	3301      	adds	r3, #1
 800a464:	73fb      	strb	r3, [r7, #15]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	791b      	ldrb	r3, [r3, #4]
 800a46a:	7bfa      	ldrb	r2, [r7, #15]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d3bb      	bcc.n	800a3e8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a470:	2300      	movs	r3, #0
 800a472:	73fb      	strb	r3, [r7, #15]
 800a474:	e044      	b.n	800a500 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a476:	7bfa      	ldrb	r2, [r7, #15]
 800a478:	6879      	ldr	r1, [r7, #4]
 800a47a:	4613      	mov	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	4413      	add	r3, r2
 800a480:	00db      	lsls	r3, r3, #3
 800a482:	440b      	add	r3, r1
 800a484:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800a488:	2200      	movs	r2, #0
 800a48a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a48c:	7bfa      	ldrb	r2, [r7, #15]
 800a48e:	6879      	ldr	r1, [r7, #4]
 800a490:	4613      	mov	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	440b      	add	r3, r1
 800a49a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a49e:	7bfa      	ldrb	r2, [r7, #15]
 800a4a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a4a2:	7bfa      	ldrb	r2, [r7, #15]
 800a4a4:	6879      	ldr	r1, [r7, #4]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	00db      	lsls	r3, r3, #3
 800a4ae:	440b      	add	r3, r1
 800a4b0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a4b8:	7bfa      	ldrb	r2, [r7, #15]
 800a4ba:	6879      	ldr	r1, [r7, #4]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4413      	add	r3, r2
 800a4c2:	00db      	lsls	r3, r3, #3
 800a4c4:	440b      	add	r3, r1
 800a4c6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a4ce:	7bfa      	ldrb	r2, [r7, #15]
 800a4d0:	6879      	ldr	r1, [r7, #4]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	4413      	add	r3, r2
 800a4d8:	00db      	lsls	r3, r3, #3
 800a4da:	440b      	add	r3, r1
 800a4dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a4e4:	7bfa      	ldrb	r2, [r7, #15]
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	4413      	add	r3, r2
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	440b      	add	r3, r1
 800a4f2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	73fb      	strb	r3, [r7, #15]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	791b      	ldrb	r3, [r3, #4]
 800a504:	7bfa      	ldrb	r2, [r7, #15]
 800a506:	429a      	cmp	r2, r3
 800a508:	d3b5      	bcc.n	800a476 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6818      	ldr	r0, [r3, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3304      	adds	r3, #4
 800a512:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a516:	f006 ff7f 	bl	8011418 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	7a9b      	ldrb	r3, [r3, #10]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d102      	bne.n	800a536 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f001 fc0e 	bl	800bd52 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d101      	bne.n	800a556 <HAL_PCD_Start+0x16>
 800a552:	2302      	movs	r3, #2
 800a554:	e012      	b.n	800a57c <HAL_PCD_Start+0x3c>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4618      	mov	r0, r3
 800a564:	f006 ff26 	bl	80113b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f008 fd03 	bl	8012f78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4618      	mov	r0, r3
 800a592:	f008 fd08 	bl	8012fa6 <USB_ReadInterrupts>
 800a596:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d003      	beq.n	800a5aa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fb06 	bl	800abb4 <PCD_EP_ISR_Handler>

    return;
 800a5a8:	e110      	b.n	800a7cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d013      	beq.n	800a5dc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5c6:	b292      	uxth	r2, r2
 800a5c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f00b fcc8 	bl	8015f62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 f8fc 	bl	800a7d2 <HAL_PCD_SetAddress>

    return;
 800a5da:	e0f7      	b.n	800a7cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00c      	beq.n	800a600 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a5f8:	b292      	uxth	r2, r2
 800a5fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a5fe:	e0e5      	b.n	800a7cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00c      	beq.n	800a624 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a612:	b29a      	uxth	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a61c:	b292      	uxth	r2, r2
 800a61e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a622:	e0d3      	b.n	800a7cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d034      	beq.n	800a698 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a636:	b29a      	uxth	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f022 0204 	bic.w	r2, r2, #4
 800a640:	b292      	uxth	r2, r2
 800a642:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a64e:	b29a      	uxth	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f022 0208 	bic.w	r2, r2, #8
 800a658:	b292      	uxth	r2, r2
 800a65a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a664:	2b01      	cmp	r3, #1
 800a666:	d107      	bne.n	800a678 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a670:	2100      	movs	r1, #0
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f00b fe6a 	bl	801634c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f00b fcab 	bl	8015fd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a686:	b29a      	uxth	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a690:	b292      	uxth	r2, r2
 800a692:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a696:	e099      	b.n	800a7cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d027      	beq.n	800a6f2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f042 0208 	orr.w	r2, r2, #8
 800a6b4:	b292      	uxth	r2, r2
 800a6b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a6cc:	b292      	uxth	r2, r2
 800a6ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f042 0204 	orr.w	r2, r2, #4
 800a6e4:	b292      	uxth	r2, r2
 800a6e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f00b fc58 	bl	8015fa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a6f0:	e06c      	b.n	800a7cc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d040      	beq.n	800a77e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a704:	b29a      	uxth	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a70e:	b292      	uxth	r2, r2
 800a710:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d12b      	bne.n	800a776 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a726:	b29a      	uxth	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f042 0204 	orr.w	r2, r2, #4
 800a730:	b292      	uxth	r2, r2
 800a732:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a73e:	b29a      	uxth	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f042 0208 	orr.w	r2, r2, #8
 800a748:	b292      	uxth	r2, r2
 800a74a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2201      	movs	r2, #1
 800a752:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a75e:	b29b      	uxth	r3, r3
 800a760:	089b      	lsrs	r3, r3, #2
 800a762:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a76c:	2101      	movs	r1, #1
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f00b fdec 	bl	801634c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a774:	e02a      	b.n	800a7cc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f00b fc12 	bl	8015fa0 <HAL_PCD_SuspendCallback>
    return;
 800a77c:	e026      	b.n	800a7cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00f      	beq.n	800a7a8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a790:	b29a      	uxth	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a79a:	b292      	uxth	r2, r2
 800a79c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f00b fbd0 	bl	8015f46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a7a6:	e011      	b.n	800a7cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00c      	beq.n	800a7cc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a7c4:	b292      	uxth	r2, r2
 800a7c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a7ca:	bf00      	nop
  }
}
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b082      	sub	sp, #8
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
 800a7da:	460b      	mov	r3, r1
 800a7dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d101      	bne.n	800a7ec <HAL_PCD_SetAddress+0x1a>
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	e012      	b.n	800a812 <HAL_PCD_SetAddress+0x40>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	78fa      	ldrb	r2, [r7, #3]
 800a7f8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	78fa      	ldrb	r2, [r7, #3]
 800a800:	4611      	mov	r1, r2
 800a802:	4618      	mov	r0, r3
 800a804:	f008 fba4 	bl	8012f50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b084      	sub	sp, #16
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	4608      	mov	r0, r1
 800a824:	4611      	mov	r1, r2
 800a826:	461a      	mov	r2, r3
 800a828:	4603      	mov	r3, r0
 800a82a:	70fb      	strb	r3, [r7, #3]
 800a82c:	460b      	mov	r3, r1
 800a82e:	803b      	strh	r3, [r7, #0]
 800a830:	4613      	mov	r3, r2
 800a832:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	da0e      	bge.n	800a85e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	f003 0207 	and.w	r2, r3, #7
 800a846:	4613      	mov	r3, r2
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4413      	add	r3, r2
 800a84c:	00db      	lsls	r3, r3, #3
 800a84e:	3310      	adds	r3, #16
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	4413      	add	r3, r2
 800a854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2201      	movs	r2, #1
 800a85a:	705a      	strb	r2, [r3, #1]
 800a85c:	e00e      	b.n	800a87c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	f003 0207 	and.w	r2, r3, #7
 800a864:	4613      	mov	r3, r2
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	4413      	add	r3, r2
 800a86a:	00db      	lsls	r3, r3, #3
 800a86c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	4413      	add	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	f003 0307 	and.w	r3, r3, #7
 800a882:	b2da      	uxtb	r2, r3
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800a888:	883b      	ldrh	r3, [r7, #0]
 800a88a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	78ba      	ldrb	r2, [r7, #2]
 800a896:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a898:	78bb      	ldrb	r3, [r7, #2]
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d102      	bne.n	800a8a4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d101      	bne.n	800a8b2 <HAL_PCD_EP_Open+0x98>
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	e00e      	b.n	800a8d0 <HAL_PCD_EP_Open+0xb6>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68f9      	ldr	r1, [r7, #12]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f006 fdc7 	bl	8011454 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800a8ce:	7afb      	ldrb	r3, [r7, #11]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a8e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	da0e      	bge.n	800a90a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8ec:	78fb      	ldrb	r3, [r7, #3]
 800a8ee:	f003 0207 	and.w	r2, r3, #7
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	00db      	lsls	r3, r3, #3
 800a8fa:	3310      	adds	r3, #16
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	4413      	add	r3, r2
 800a900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2201      	movs	r2, #1
 800a906:	705a      	strb	r2, [r3, #1]
 800a908:	e00e      	b.n	800a928 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a90a:	78fb      	ldrb	r3, [r7, #3]
 800a90c:	f003 0207 	and.w	r2, r3, #7
 800a910:	4613      	mov	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	4413      	add	r3, r2
 800a920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a928:	78fb      	ldrb	r3, [r7, #3]
 800a92a:	f003 0307 	and.w	r3, r3, #7
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d101      	bne.n	800a942 <HAL_PCD_EP_Close+0x6a>
 800a93e:	2302      	movs	r3, #2
 800a940:	e00e      	b.n	800a960 <HAL_PCD_EP_Close+0x88>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68f9      	ldr	r1, [r7, #12]
 800a950:	4618      	mov	r0, r3
 800a952:	f007 fa67 	bl	8011e24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	607a      	str	r2, [r7, #4]
 800a972:	603b      	str	r3, [r7, #0]
 800a974:	460b      	mov	r3, r1
 800a976:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a978:	7afb      	ldrb	r3, [r7, #11]
 800a97a:	f003 0207 	and.w	r2, r3, #7
 800a97e:	4613      	mov	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	4413      	add	r3, r2
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	4413      	add	r3, r2
 800a98e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a9a8:	7afb      	ldrb	r3, [r7, #11]
 800a9aa:	f003 0307 	and.w	r3, r3, #7
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	6979      	ldr	r1, [r7, #20]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f007 fc1f 	bl	80121fe <USB_EPStartXfer>

  return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b083      	sub	sp, #12
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a9d6:	78fb      	ldrb	r3, [r7, #3]
 800a9d8:	f003 0207 	and.w	r2, r3, #7
 800a9dc:	6879      	ldr	r1, [r7, #4]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	00db      	lsls	r3, r3, #3
 800a9e6:	440b      	add	r3, r1
 800a9e8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a9ec:	681b      	ldr	r3, [r3, #0]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	370c      	adds	r7, #12
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b086      	sub	sp, #24
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	60f8      	str	r0, [r7, #12]
 800aa02:	607a      	str	r2, [r7, #4]
 800aa04:	603b      	str	r3, [r7, #0]
 800aa06:	460b      	mov	r3, r1
 800aa08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa0a:	7afb      	ldrb	r3, [r7, #11]
 800aa0c:	f003 0207 	and.w	r2, r3, #7
 800aa10:	4613      	mov	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	00db      	lsls	r3, r3, #3
 800aa18:	3310      	adds	r3, #16
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	2201      	movs	r2, #1
 800aa44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aa46:	7afb      	ldrb	r3, [r7, #11]
 800aa48:	f003 0307 	and.w	r3, r3, #7
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	6979      	ldr	r1, [r7, #20]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f007 fbd0 	bl	80121fe <USB_EPStartXfer>

  return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800aa74:	78fb      	ldrb	r3, [r7, #3]
 800aa76:	f003 0307 	and.w	r3, r3, #7
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	7912      	ldrb	r2, [r2, #4]
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d901      	bls.n	800aa86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e03e      	b.n	800ab04 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800aa86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	da0e      	bge.n	800aaac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa8e:	78fb      	ldrb	r3, [r7, #3]
 800aa90:	f003 0207 	and.w	r2, r3, #7
 800aa94:	4613      	mov	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	3310      	adds	r3, #16
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	705a      	strb	r2, [r3, #1]
 800aaaa:	e00c      	b.n	800aac6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800aaac:	78fa      	ldrb	r2, [r7, #3]
 800aaae:	4613      	mov	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	00db      	lsls	r3, r3, #3
 800aab6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	4413      	add	r3, r2
 800aabe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2201      	movs	r2, #1
 800aaca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aacc:	78fb      	ldrb	r3, [r7, #3]
 800aace:	f003 0307 	and.w	r3, r3, #7
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d101      	bne.n	800aae6 <HAL_PCD_EP_SetStall+0x7e>
 800aae2:	2302      	movs	r3, #2
 800aae4:	e00e      	b.n	800ab04 <HAL_PCD_EP_SetStall+0x9c>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68f9      	ldr	r1, [r7, #12]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f008 f931 	bl	8012d5c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ab18:	78fb      	ldrb	r3, [r7, #3]
 800ab1a:	f003 030f 	and.w	r3, r3, #15
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	7912      	ldrb	r2, [r2, #4]
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d901      	bls.n	800ab2a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e040      	b.n	800abac <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ab2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	da0e      	bge.n	800ab50 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab32:	78fb      	ldrb	r3, [r7, #3]
 800ab34:	f003 0207 	and.w	r2, r3, #7
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	3310      	adds	r3, #16
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	4413      	add	r3, r2
 800ab46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	705a      	strb	r2, [r3, #1]
 800ab4e:	e00e      	b.n	800ab6e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab50:	78fb      	ldrb	r3, [r7, #3]
 800ab52:	f003 0207 	and.w	r2, r3, #7
 800ab56:	4613      	mov	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	00db      	lsls	r3, r3, #3
 800ab5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	4413      	add	r3, r2
 800ab66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab74:	78fb      	ldrb	r3, [r7, #3]
 800ab76:	f003 0307 	and.w	r3, r3, #7
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d101      	bne.n	800ab8e <HAL_PCD_EP_ClrStall+0x82>
 800ab8a:	2302      	movs	r3, #2
 800ab8c:	e00e      	b.n	800abac <HAL_PCD_EP_ClrStall+0xa0>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2201      	movs	r2, #1
 800ab92:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68f9      	ldr	r1, [r7, #12]
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f008 f92e 	bl	8012dfe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b092      	sub	sp, #72	@ 0x48
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800abbc:	e333      	b.n	800b226 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800abc6:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800abc8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	f003 030f 	and.w	r3, r3, #15
 800abd0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800abd4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f040 8108 	bne.w	800adee <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800abde:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800abe0:	f003 0310 	and.w	r3, r3, #16
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d14c      	bne.n	800ac82 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	881b      	ldrh	r3, [r3, #0]
 800abee:	b29b      	uxth	r3, r3
 800abf0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800abf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abf8:	813b      	strh	r3, [r7, #8]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	893b      	ldrh	r3, [r7, #8]
 800ac00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	3310      	adds	r3, #16
 800ac10:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	00db      	lsls	r3, r3, #3
 800ac24:	4413      	add	r3, r2
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	6812      	ldr	r2, [r2, #0]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac30:	881b      	ldrh	r3, [r3, #0]
 800ac32:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ac36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac38:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800ac3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac3c:	695a      	ldr	r2, [r3, #20]
 800ac3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac40:	69db      	ldr	r3, [r3, #28]
 800ac42:	441a      	add	r2, r3
 800ac44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac46:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800ac48:	2100      	movs	r1, #0
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f00b f961 	bl	8015f12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	7b1b      	ldrb	r3, [r3, #12]
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 82e5 	beq.w	800b226 <PCD_EP_ISR_Handler+0x672>
 800ac5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac5e:	699b      	ldr	r3, [r3, #24]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f040 82e0 	bne.w	800b226 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	7b1b      	ldrb	r3, [r3, #12]
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	731a      	strb	r2, [r3, #12]
 800ac80:	e2d1      	b.n	800b226 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac88:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800ac92:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ac94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d032      	beq.n	800ad02 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	461a      	mov	r2, r3
 800aca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	00db      	lsls	r3, r3, #3
 800acae:	4413      	add	r3, r2
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	6812      	ldr	r2, [r2, #0]
 800acb4:	4413      	add	r3, r2
 800acb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800acba:	881b      	ldrh	r3, [r3, #0]
 800acbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800acc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acc2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6818      	ldr	r0, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800acce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acd0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800acd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acd4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	f008 f9b8 	bl	801304c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	881b      	ldrh	r3, [r3, #0]
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800ace8:	4013      	ands	r3, r2
 800acea:	817b      	strh	r3, [r7, #10]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	897a      	ldrh	r2, [r7, #10]
 800acf2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800acf6:	b292      	uxth	r2, r2
 800acf8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f00b f8dc 	bl	8015eb8 <HAL_PCD_SetupStageCallback>
 800ad00:	e291      	b.n	800b226 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ad02:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f280 828d 	bge.w	800b226 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	881b      	ldrh	r3, [r3, #0]
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800ad18:	4013      	ands	r3, r2
 800ad1a:	81fb      	strh	r3, [r7, #14]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	89fa      	ldrh	r2, [r7, #14]
 800ad22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ad26:	b292      	uxth	r2, r2
 800ad28:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	461a      	mov	r2, r3
 800ad36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	00db      	lsls	r3, r3, #3
 800ad3c:	4413      	add	r3, r2
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	6812      	ldr	r2, [r2, #0]
 800ad42:	4413      	add	r3, r2
 800ad44:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ad4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad50:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800ad52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad54:	69db      	ldr	r3, [r3, #28]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d019      	beq.n	800ad8e <PCD_EP_ISR_Handler+0x1da>
 800ad5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad5c:	695b      	ldr	r3, [r3, #20]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d015      	beq.n	800ad8e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6818      	ldr	r0, [r3, #0]
 800ad66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad68:	6959      	ldr	r1, [r3, #20]
 800ad6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad6c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800ad6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad70:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	f008 f96a 	bl	801304c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800ad78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad7a:	695a      	ldr	r2, [r3, #20]
 800ad7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad7e:	69db      	ldr	r3, [r3, #28]
 800ad80:	441a      	add	r2, r3
 800ad82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad84:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800ad86:	2100      	movs	r1, #0
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f00b f8a7 	bl	8015edc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	881b      	ldrh	r3, [r3, #0]
 800ad94:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800ad96:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ad98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f040 8242 	bne.w	800b226 <PCD_EP_ISR_Handler+0x672>
 800ada2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ada4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ada8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800adac:	f000 823b 	beq.w	800b226 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	881b      	ldrh	r3, [r3, #0]
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800adbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adc0:	81bb      	strh	r3, [r7, #12]
 800adc2:	89bb      	ldrh	r3, [r7, #12]
 800adc4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800adc8:	81bb      	strh	r3, [r7, #12]
 800adca:	89bb      	ldrh	r3, [r7, #12]
 800adcc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800add0:	81bb      	strh	r3, [r7, #12]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	89bb      	ldrh	r3, [r7, #12]
 800add8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800addc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ade0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ade4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ade8:	b29b      	uxth	r3, r3
 800adea:	8013      	strh	r3, [r2, #0]
 800adec:	e21b      	b.n	800b226 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ae00:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f280 80f1 	bge.w	800afec <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4413      	add	r3, r2
 800ae18:	881b      	ldrh	r3, [r3, #0]
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800ae20:	4013      	ands	r3, r2
 800ae22:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4413      	add	r3, r2
 800ae32:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800ae34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ae38:	b292      	uxth	r2, r2
 800ae3a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800ae3c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800ae40:	4613      	mov	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4413      	add	r3, r2
 800ae46:	00db      	lsls	r3, r3, #3
 800ae48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	4413      	add	r3, r2
 800ae50:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ae52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae54:	7b1b      	ldrb	r3, [r3, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d123      	bne.n	800aea2 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	461a      	mov	r2, r3
 800ae66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	00db      	lsls	r3, r3, #3
 800ae6c:	4413      	add	r3, r2
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	6812      	ldr	r2, [r2, #0]
 800ae72:	4413      	add	r3, r2
 800ae74:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae7e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800ae82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f000 808b 	beq.w	800afa2 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6818      	ldr	r0, [r3, #0]
 800ae90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae92:	6959      	ldr	r1, [r3, #20]
 800ae94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae96:	88da      	ldrh	r2, [r3, #6]
 800ae98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae9c:	f008 f8d6 	bl	801304c <USB_ReadPMA>
 800aea0:	e07f      	b.n	800afa2 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800aea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aea4:	78db      	ldrb	r3, [r3, #3]
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d109      	bne.n	800aebe <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800aeaa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aeac:	461a      	mov	r2, r3
 800aeae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f9c6 	bl	800b242 <HAL_PCD_EP_DB_Receive>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800aebc:	e071      	b.n	800afa2 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4413      	add	r3, r2
 800aecc:	881b      	ldrh	r3, [r3, #0]
 800aece:	b29b      	uxth	r3, r3
 800aed0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aed8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	441a      	add	r2, r3
 800aee8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aeea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aeee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aef6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	4413      	add	r3, r2
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af14:	2b00      	cmp	r3, #0
 800af16:	d022      	beq.n	800af5e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af20:	b29b      	uxth	r3, r3
 800af22:	461a      	mov	r2, r3
 800af24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	4413      	add	r3, r2
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	6812      	ldr	r2, [r2, #0]
 800af30:	4413      	add	r3, r2
 800af32:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af36:	881b      	ldrh	r3, [r3, #0]
 800af38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af3c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800af40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800af44:	2b00      	cmp	r3, #0
 800af46:	d02c      	beq.n	800afa2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6818      	ldr	r0, [r3, #0]
 800af4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af4e:	6959      	ldr	r1, [r3, #20]
 800af50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af52:	891a      	ldrh	r2, [r3, #8]
 800af54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800af58:	f008 f878 	bl	801304c <USB_ReadPMA>
 800af5c:	e021      	b.n	800afa2 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af66:	b29b      	uxth	r3, r3
 800af68:	461a      	mov	r2, r3
 800af6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	00db      	lsls	r3, r3, #3
 800af70:	4413      	add	r3, r2
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	6812      	ldr	r2, [r2, #0]
 800af76:	4413      	add	r3, r2
 800af78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800af7c:	881b      	ldrh	r3, [r3, #0]
 800af7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af82:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800af86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d009      	beq.n	800afa2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6818      	ldr	r0, [r3, #0]
 800af92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af94:	6959      	ldr	r1, [r3, #20]
 800af96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af98:	895a      	ldrh	r2, [r3, #10]
 800af9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800af9e:	f008 f855 	bl	801304c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800afa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afa4:	69da      	ldr	r2, [r3, #28]
 800afa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800afaa:	441a      	add	r2, r3
 800afac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800afb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afb2:	695a      	ldr	r2, [r3, #20]
 800afb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800afb8:	441a      	add	r2, r3
 800afba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afbc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800afbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d005      	beq.n	800afd2 <PCD_EP_ISR_Handler+0x41e>
 800afc6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800afca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d206      	bcs.n	800afe0 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800afd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	4619      	mov	r1, r3
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f00a ff7f 	bl	8015edc <HAL_PCD_DataOutStageCallback>
 800afde:	e005      	b.n	800afec <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800afe6:	4618      	mov	r0, r3
 800afe8:	f007 f909 	bl	80121fe <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800afec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800afee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f000 8117 	beq.w	800b226 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800aff8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800affc:	4613      	mov	r3, r2
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	4413      	add	r3, r2
 800b002:	00db      	lsls	r3, r3, #3
 800b004:	3310      	adds	r3, #16
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	4413      	add	r3, r2
 800b00a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	461a      	mov	r2, r3
 800b012:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4413      	add	r3, r2
 800b01a:	881b      	ldrh	r3, [r3, #0]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800b022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b026:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	461a      	mov	r2, r3
 800b02e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	441a      	add	r2, r3
 800b036:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b03c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b040:	b29b      	uxth	r3, r3
 800b042:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800b044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b046:	78db      	ldrb	r3, [r3, #3]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	f040 80a1 	bne.w	800b190 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800b04e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b050:	2200      	movs	r2, #0
 800b052:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800b054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b056:	7b1b      	ldrb	r3, [r3, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 8092 	beq.w	800b182 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b05e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b064:	2b00      	cmp	r3, #0
 800b066:	d046      	beq.n	800b0f6 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b06a:	785b      	ldrb	r3, [r3, #1]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d126      	bne.n	800b0be <PCD_EP_ISR_Handler+0x50a>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	617b      	str	r3, [r7, #20]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b07e:	b29b      	uxth	r3, r3
 800b080:	461a      	mov	r2, r3
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	4413      	add	r3, r2
 800b086:	617b      	str	r3, [r7, #20]
 800b088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	00da      	lsls	r2, r3, #3
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	4413      	add	r3, r2
 800b092:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b096:	613b      	str	r3, [r7, #16]
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	881b      	ldrh	r3, [r3, #0]
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	801a      	strh	r2, [r3, #0]
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	801a      	strh	r2, [r3, #0]
 800b0bc:	e061      	b.n	800b182 <PCD_EP_ISR_Handler+0x5ce>
 800b0be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0c0:	785b      	ldrb	r3, [r3, #1]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d15d      	bne.n	800b182 <PCD_EP_ISR_Handler+0x5ce>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	61fb      	str	r3, [r7, #28]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	4413      	add	r3, r2
 800b0dc:	61fb      	str	r3, [r7, #28]
 800b0de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	00da      	lsls	r2, r3, #3
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b0ec:	61bb      	str	r3, [r7, #24]
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	801a      	strh	r2, [r3, #0]
 800b0f4:	e045      	b.n	800b182 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0fe:	785b      	ldrb	r3, [r3, #1]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d126      	bne.n	800b152 <PCD_EP_ISR_Handler+0x59e>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	627b      	str	r3, [r7, #36]	@ 0x24
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b112:	b29b      	uxth	r3, r3
 800b114:	461a      	mov	r2, r3
 800b116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b118:	4413      	add	r3, r2
 800b11a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b11c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	00da      	lsls	r2, r3, #3
 800b122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b124:	4413      	add	r3, r2
 800b126:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b12a:	623b      	str	r3, [r7, #32]
 800b12c:	6a3b      	ldr	r3, [r7, #32]
 800b12e:	881b      	ldrh	r3, [r3, #0]
 800b130:	b29b      	uxth	r3, r3
 800b132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b136:	b29a      	uxth	r2, r3
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	801a      	strh	r2, [r3, #0]
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	b29b      	uxth	r3, r3
 800b142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	801a      	strh	r2, [r3, #0]
 800b150:	e017      	b.n	800b182 <PCD_EP_ISR_Handler+0x5ce>
 800b152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b154:	785b      	ldrb	r3, [r3, #1]
 800b156:	2b01      	cmp	r3, #1
 800b158:	d113      	bne.n	800b182 <PCD_EP_ISR_Handler+0x5ce>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b162:	b29b      	uxth	r3, r3
 800b164:	461a      	mov	r2, r3
 800b166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b168:	4413      	add	r3, r2
 800b16a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b16c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	00da      	lsls	r2, r3, #3
 800b172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b174:	4413      	add	r3, r2
 800b176:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b17a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17e:	2200      	movs	r2, #0
 800b180:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f00a fec2 	bl	8015f12 <HAL_PCD_DataInStageCallback>
 800b18e:	e04a      	b.n	800b226 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800b190:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b196:	2b00      	cmp	r3, #0
 800b198:	d13f      	bne.n	800b21a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	00db      	lsls	r3, r3, #3
 800b1ac:	4413      	add	r3, r2
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	6812      	ldr	r2, [r2, #0]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b1b8:	881b      	ldrh	r3, [r3, #0]
 800b1ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1be:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800b1c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1c2:	699a      	ldr	r2, [r3, #24]
 800b1c4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d906      	bls.n	800b1d8 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800b1ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1cc:	699a      	ldr	r2, [r3, #24]
 800b1ce:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b1d0:	1ad2      	subs	r2, r2, r3
 800b1d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1d4:	619a      	str	r2, [r3, #24]
 800b1d6:	e002      	b.n	800b1de <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800b1d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1da:	2200      	movs	r2, #0
 800b1dc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800b1de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d106      	bne.n	800b1f4 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b1e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f00a fe90 	bl	8015f12 <HAL_PCD_DataInStageCallback>
 800b1f2:	e018      	b.n	800b226 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800b1f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1f6:	695a      	ldr	r2, [r3, #20]
 800b1f8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b1fa:	441a      	add	r2, r3
 800b1fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1fe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800b200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b202:	69da      	ldr	r2, [r3, #28]
 800b204:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b206:	441a      	add	r2, r3
 800b208:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b20a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b212:	4618      	mov	r0, r3
 800b214:	f006 fff3 	bl	80121fe <USB_EPStartXfer>
 800b218:	e005      	b.n	800b226 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800b21a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b21c:	461a      	mov	r2, r3
 800b21e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f917 	bl	800b454 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b22e:	b29b      	uxth	r3, r3
 800b230:	b21b      	sxth	r3, r3
 800b232:	2b00      	cmp	r3, #0
 800b234:	f6ff acc3 	blt.w	800abbe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3748      	adds	r7, #72	@ 0x48
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b088      	sub	sp, #32
 800b246:	af00      	add	r7, sp, #0
 800b248:	60f8      	str	r0, [r7, #12]
 800b24a:	60b9      	str	r1, [r7, #8]
 800b24c:	4613      	mov	r3, r2
 800b24e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b250:	88fb      	ldrh	r3, [r7, #6]
 800b252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b256:	2b00      	cmp	r3, #0
 800b258:	d07c      	beq.n	800b354 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b262:	b29b      	uxth	r3, r3
 800b264:	461a      	mov	r2, r3
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	00db      	lsls	r3, r3, #3
 800b26c:	4413      	add	r3, r2
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	6812      	ldr	r2, [r2, #0]
 800b272:	4413      	add	r3, r2
 800b274:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b278:	881b      	ldrh	r3, [r3, #0]
 800b27a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b27e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	699a      	ldr	r2, [r3, #24]
 800b284:	8b7b      	ldrh	r3, [r7, #26]
 800b286:	429a      	cmp	r2, r3
 800b288:	d306      	bcc.n	800b298 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	699a      	ldr	r2, [r3, #24]
 800b28e:	8b7b      	ldrh	r3, [r7, #26]
 800b290:	1ad2      	subs	r2, r2, r3
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	619a      	str	r2, [r3, #24]
 800b296:	e002      	b.n	800b29e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	2200      	movs	r2, #0
 800b29c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	699b      	ldr	r3, [r3, #24]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d123      	bne.n	800b2ee <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	881b      	ldrh	r3, [r3, #0]
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b2bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2c0:	833b      	strh	r3, [r7, #24]
 800b2c2:	8b3b      	ldrh	r3, [r7, #24]
 800b2c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b2c8:	833b      	strh	r3, [r7, #24]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	441a      	add	r2, r3
 800b2d8:	8b3b      	ldrh	r3, [r7, #24]
 800b2da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b2ee:	88fb      	ldrh	r3, [r7, #6]
 800b2f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d01f      	beq.n	800b338 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	881b      	ldrh	r3, [r3, #0]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b30e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b312:	82fb      	strh	r3, [r7, #22]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	461a      	mov	r2, r3
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	441a      	add	r2, r3
 800b322:	8afb      	ldrh	r3, [r7, #22]
 800b324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b32c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b330:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b334:	b29b      	uxth	r3, r3
 800b336:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b338:	8b7b      	ldrh	r3, [r7, #26]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f000 8085 	beq.w	800b44a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6818      	ldr	r0, [r3, #0]
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	6959      	ldr	r1, [r3, #20]
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	891a      	ldrh	r2, [r3, #8]
 800b34c:	8b7b      	ldrh	r3, [r7, #26]
 800b34e:	f007 fe7d 	bl	801304c <USB_ReadPMA>
 800b352:	e07a      	b.n	800b44a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	461a      	mov	r2, r3
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	00db      	lsls	r3, r3, #3
 800b366:	4413      	add	r3, r2
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	6812      	ldr	r2, [r2, #0]
 800b36c:	4413      	add	r3, r2
 800b36e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b372:	881b      	ldrh	r3, [r3, #0]
 800b374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b378:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	699a      	ldr	r2, [r3, #24]
 800b37e:	8b7b      	ldrh	r3, [r7, #26]
 800b380:	429a      	cmp	r2, r3
 800b382:	d306      	bcc.n	800b392 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	699a      	ldr	r2, [r3, #24]
 800b388:	8b7b      	ldrh	r3, [r7, #26]
 800b38a:	1ad2      	subs	r2, r2, r3
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	619a      	str	r2, [r3, #24]
 800b390:	e002      	b.n	800b398 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2200      	movs	r2, #0
 800b396:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	699b      	ldr	r3, [r3, #24]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d123      	bne.n	800b3e8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	4413      	add	r3, r2
 800b3ae:	881b      	ldrh	r3, [r3, #0]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b3b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3ba:	83fb      	strh	r3, [r7, #30]
 800b3bc:	8bfb      	ldrh	r3, [r7, #30]
 800b3be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b3c2:	83fb      	strh	r3, [r7, #30]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	441a      	add	r2, r3
 800b3d2:	8bfb      	ldrh	r3, [r7, #30]
 800b3d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b3e8:	88fb      	ldrh	r3, [r7, #6]
 800b3ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d11f      	bne.n	800b432 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	4413      	add	r3, r2
 800b400:	881b      	ldrh	r3, [r3, #0]
 800b402:	b29b      	uxth	r3, r3
 800b404:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b40c:	83bb      	strh	r3, [r7, #28]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	441a      	add	r2, r3
 800b41c:	8bbb      	ldrh	r3, [r7, #28]
 800b41e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b42a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b42e:	b29b      	uxth	r3, r3
 800b430:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b432:	8b7b      	ldrh	r3, [r7, #26]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d008      	beq.n	800b44a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6818      	ldr	r0, [r3, #0]
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	6959      	ldr	r1, [r3, #20]
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	895a      	ldrh	r2, [r3, #10]
 800b444:	8b7b      	ldrh	r3, [r7, #26]
 800b446:	f007 fe01 	bl	801304c <USB_ReadPMA>
    }
  }

  return count;
 800b44a:	8b7b      	ldrh	r3, [r7, #26]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3720      	adds	r7, #32
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b0a6      	sub	sp, #152	@ 0x98
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	4613      	mov	r3, r2
 800b460:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b462:	88fb      	ldrh	r3, [r7, #6]
 800b464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f000 81f7 	beq.w	800b85c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b476:	b29b      	uxth	r3, r3
 800b478:	461a      	mov	r2, r3
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	00db      	lsls	r3, r3, #3
 800b480:	4413      	add	r3, r2
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	6812      	ldr	r2, [r2, #0]
 800b486:	4413      	add	r3, r2
 800b488:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b48c:	881b      	ldrh	r3, [r3, #0]
 800b48e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b492:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	699a      	ldr	r2, [r3, #24]
 800b49a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d907      	bls.n	800b4b2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	699a      	ldr	r2, [r3, #24]
 800b4a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b4aa:	1ad2      	subs	r2, r2, r3
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	619a      	str	r2, [r3, #24]
 800b4b0:	e002      	b.n	800b4b8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	699b      	ldr	r3, [r3, #24]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f040 80e1 	bne.w	800b684 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	785b      	ldrb	r3, [r3, #1]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d126      	bne.n	800b518 <HAL_PCD_EP_DB_Transmit+0xc4>
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	461a      	mov	r2, r3
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4de:	4413      	add	r3, r2
 800b4e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	00da      	lsls	r2, r3, #3
 800b4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ea:	4413      	add	r3, r2
 800b4ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b4f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f4:	881b      	ldrh	r3, [r3, #0]
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b500:	801a      	strh	r2, [r3, #0]
 800b502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b504:	881b      	ldrh	r3, [r3, #0]
 800b506:	b29b      	uxth	r3, r3
 800b508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b50c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b510:	b29a      	uxth	r2, r3
 800b512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b514:	801a      	strh	r2, [r3, #0]
 800b516:	e01a      	b.n	800b54e <HAL_PCD_EP_DB_Transmit+0xfa>
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	785b      	ldrb	r3, [r3, #1]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d116      	bne.n	800b54e <HAL_PCD_EP_DB_Transmit+0xfa>
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b52e:	b29b      	uxth	r3, r3
 800b530:	461a      	mov	r2, r3
 800b532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b534:	4413      	add	r3, r2
 800b536:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	00da      	lsls	r2, r3, #3
 800b53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b540:	4413      	add	r3, r2
 800b542:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b546:	637b      	str	r3, [r7, #52]	@ 0x34
 800b548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b54a:	2200      	movs	r2, #0
 800b54c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	785b      	ldrb	r3, [r3, #1]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d126      	bne.n	800b5aa <HAL_PCD_EP_DB_Transmit+0x156>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	623b      	str	r3, [r7, #32]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	461a      	mov	r2, r3
 800b56e:	6a3b      	ldr	r3, [r7, #32]
 800b570:	4413      	add	r3, r2
 800b572:	623b      	str	r3, [r7, #32]
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	00da      	lsls	r2, r3, #3
 800b57a:	6a3b      	ldr	r3, [r7, #32]
 800b57c:	4413      	add	r3, r2
 800b57e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b582:	61fb      	str	r3, [r7, #28]
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	881b      	ldrh	r3, [r3, #0]
 800b588:	b29b      	uxth	r3, r3
 800b58a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b58e:	b29a      	uxth	r2, r3
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	801a      	strh	r2, [r3, #0]
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	b29b      	uxth	r3, r3
 800b59a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b59e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	801a      	strh	r2, [r3, #0]
 800b5a8:	e017      	b.n	800b5da <HAL_PCD_EP_DB_Transmit+0x186>
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	785b      	ldrb	r3, [r3, #1]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d113      	bne.n	800b5da <HAL_PCD_EP_DB_Transmit+0x186>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	461a      	mov	r2, r3
 800b5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c0:	4413      	add	r3, r2
 800b5c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	00da      	lsls	r2, r3, #3
 800b5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5cc:	4413      	add	r3, r2
 800b5ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b5d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	78db      	ldrb	r3, [r3, #3]
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d123      	bne.n	800b62a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4413      	add	r3, r2
 800b5f0:	881b      	ldrh	r3, [r3, #0]
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5fc:	837b      	strh	r3, [r7, #26]
 800b5fe:	8b7b      	ldrh	r3, [r7, #26]
 800b600:	f083 0320 	eor.w	r3, r3, #32
 800b604:	837b      	strh	r3, [r7, #26]
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	461a      	mov	r2, r3
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	441a      	add	r2, r3
 800b614:	8b7b      	ldrh	r3, [r7, #26]
 800b616:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b61a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b61e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b626:	b29b      	uxth	r3, r3
 800b628:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	4619      	mov	r1, r3
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f00a fc6e 	bl	8015f12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b636:	88fb      	ldrh	r3, [r7, #6]
 800b638:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d01f      	beq.n	800b680 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	461a      	mov	r2, r3
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	4413      	add	r3, r2
 800b64e:	881b      	ldrh	r3, [r3, #0]
 800b650:	b29b      	uxth	r3, r3
 800b652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b65a:	833b      	strh	r3, [r7, #24]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	461a      	mov	r2, r3
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	441a      	add	r2, r3
 800b66a:	8b3b      	ldrh	r3, [r7, #24]
 800b66c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b670:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b674:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b680:	2300      	movs	r3, #0
 800b682:	e31f      	b.n	800bcc4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b684:	88fb      	ldrh	r3, [r7, #6]
 800b686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d021      	beq.n	800b6d2 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	4413      	add	r3, r2
 800b69c:	881b      	ldrh	r3, [r3, #0]
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	441a      	add	r2, r3
 800b6ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b6be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b6ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	f040 82ca 	bne.w	800bc72 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	695a      	ldr	r2, [r3, #20]
 800b6e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b6e6:	441a      	add	r2, r3
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	69da      	ldr	r2, [r3, #28]
 800b6f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b6f4:	441a      	add	r2, r3
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	6a1a      	ldr	r2, [r3, #32]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	429a      	cmp	r2, r3
 800b704:	d309      	bcc.n	800b71a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	6a1a      	ldr	r2, [r3, #32]
 800b710:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b712:	1ad2      	subs	r2, r2, r3
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	621a      	str	r2, [r3, #32]
 800b718:	e015      	b.n	800b746 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d107      	bne.n	800b732 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800b722:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b726:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b730:	e009      	b.n	800b746 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2200      	movs	r2, #0
 800b736:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	6a1b      	ldr	r3, [r3, #32]
 800b73e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	2200      	movs	r2, #0
 800b744:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	785b      	ldrb	r3, [r3, #1]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d15f      	bne.n	800b80e <HAL_PCD_EP_DB_Transmit+0x3ba>
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	643b      	str	r3, [r7, #64]	@ 0x40
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	461a      	mov	r2, r3
 800b760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b762:	4413      	add	r3, r2
 800b764:	643b      	str	r3, [r7, #64]	@ 0x40
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	00da      	lsls	r2, r3, #3
 800b76c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b76e:	4413      	add	r3, r2
 800b770:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b774:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b778:	881b      	ldrh	r3, [r3, #0]
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b780:	b29a      	uxth	r2, r3
 800b782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b784:	801a      	strh	r2, [r3, #0]
 800b786:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10a      	bne.n	800b7a2 <HAL_PCD_EP_DB_Transmit+0x34e>
 800b78c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b78e:	881b      	ldrh	r3, [r3, #0]
 800b790:	b29b      	uxth	r3, r3
 800b792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b79e:	801a      	strh	r2, [r3, #0]
 800b7a0:	e051      	b.n	800b846 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b7a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7a4:	2b3e      	cmp	r3, #62	@ 0x3e
 800b7a6:	d816      	bhi.n	800b7d6 <HAL_PCD_EP_DB_Transmit+0x382>
 800b7a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7aa:	085b      	lsrs	r3, r3, #1
 800b7ac:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7b0:	f003 0301 	and.w	r3, r3, #1
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d002      	beq.n	800b7be <HAL_PCD_EP_DB_Transmit+0x36a>
 800b7b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	029b      	lsls	r3, r3, #10
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7d2:	801a      	strh	r2, [r3, #0]
 800b7d4:	e037      	b.n	800b846 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b7d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7d8:	095b      	lsrs	r3, r3, #5
 800b7da:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7de:	f003 031f 	and.w	r3, r3, #31
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d102      	bne.n	800b7ec <HAL_PCD_EP_DB_Transmit+0x398>
 800b7e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ee:	881b      	ldrh	r3, [r3, #0]
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	029b      	lsls	r3, r3, #10
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b806:	b29a      	uxth	r2, r3
 800b808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b80a:	801a      	strh	r2, [r3, #0]
 800b80c:	e01b      	b.n	800b846 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	785b      	ldrb	r3, [r3, #1]
 800b812:	2b01      	cmp	r3, #1
 800b814:	d117      	bne.n	800b846 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b824:	b29b      	uxth	r3, r3
 800b826:	461a      	mov	r2, r3
 800b828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b82a:	4413      	add	r3, r2
 800b82c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	00da      	lsls	r2, r3, #3
 800b834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b836:	4413      	add	r3, r2
 800b838:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b83c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b83e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b840:	b29a      	uxth	r2, r3
 800b842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b844:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6818      	ldr	r0, [r3, #0]
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	6959      	ldr	r1, [r3, #20]
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	891a      	ldrh	r2, [r3, #8]
 800b852:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b854:	b29b      	uxth	r3, r3
 800b856:	f007 fbb6 	bl	8012fc6 <USB_WritePMA>
 800b85a:	e20a      	b.n	800bc72 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b864:	b29b      	uxth	r3, r3
 800b866:	461a      	mov	r2, r3
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	00db      	lsls	r3, r3, #3
 800b86e:	4413      	add	r3, r2
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	6812      	ldr	r2, [r2, #0]
 800b874:	4413      	add	r3, r2
 800b876:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b87a:	881b      	ldrh	r3, [r3, #0]
 800b87c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b880:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	699a      	ldr	r2, [r3, #24]
 800b888:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d307      	bcc.n	800b8a0 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	699a      	ldr	r2, [r3, #24]
 800b894:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b898:	1ad2      	subs	r2, r2, r3
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	619a      	str	r2, [r3, #24]
 800b89e:	e002      	b.n	800b8a6 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	699b      	ldr	r3, [r3, #24]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f040 80f6 	bne.w	800ba9c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	785b      	ldrb	r3, [r3, #1]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d126      	bne.n	800b906 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	677b      	str	r3, [r7, #116]	@ 0x74
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b8cc:	4413      	add	r3, r2
 800b8ce:	677b      	str	r3, [r7, #116]	@ 0x74
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	00da      	lsls	r2, r3, #3
 800b8d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b8d8:	4413      	add	r3, r2
 800b8da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b8de:	673b      	str	r3, [r7, #112]	@ 0x70
 800b8e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b8e2:	881b      	ldrh	r3, [r3, #0]
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b8ee:	801a      	strh	r2, [r3, #0]
 800b8f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b8f2:	881b      	ldrh	r3, [r3, #0]
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8fe:	b29a      	uxth	r2, r3
 800b900:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b902:	801a      	strh	r2, [r3, #0]
 800b904:	e01a      	b.n	800b93c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	785b      	ldrb	r3, [r3, #1]
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d116      	bne.n	800b93c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	461a      	mov	r2, r3
 800b920:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b922:	4413      	add	r3, r2
 800b924:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	00da      	lsls	r2, r3, #3
 800b92c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b92e:	4413      	add	r3, r2
 800b930:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b934:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b936:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b938:	2200      	movs	r2, #0
 800b93a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	785b      	ldrb	r3, [r3, #1]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d12f      	bne.n	800b9ac <HAL_PCD_EP_DB_Transmit+0x558>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	461a      	mov	r2, r3
 800b960:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b964:	4413      	add	r3, r2
 800b966:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	00da      	lsls	r2, r3, #3
 800b970:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b974:	4413      	add	r3, r2
 800b976:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b97a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b97e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b982:	881b      	ldrh	r3, [r3, #0]
 800b984:	b29b      	uxth	r3, r3
 800b986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b990:	801a      	strh	r2, [r3, #0]
 800b992:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b996:	881b      	ldrh	r3, [r3, #0]
 800b998:	b29b      	uxth	r3, r3
 800b99a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b99e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b9a8:	801a      	strh	r2, [r3, #0]
 800b9aa:	e01c      	b.n	800b9e6 <HAL_PCD_EP_DB_Transmit+0x592>
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	785b      	ldrb	r3, [r3, #1]
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d118      	bne.n	800b9e6 <HAL_PCD_EP_DB_Transmit+0x592>
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b9c4:	4413      	add	r3, r2
 800b9c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	00da      	lsls	r2, r3, #3
 800b9d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b9d4:	4413      	add	r3, r2
 800b9d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b9da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b9de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	78db      	ldrb	r3, [r3, #3]
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d127      	bne.n	800ba3e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4413      	add	r3, r2
 800b9fc:	881b      	ldrh	r3, [r3, #0]
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba08:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800ba0c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ba10:	f083 0320 	eor.w	r3, r3, #32
 800ba14:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	441a      	add	r2, r3
 800ba26:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ba2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	4619      	mov	r1, r3
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f00a fa64 	bl	8015f12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ba4a:	88fb      	ldrh	r3, [r7, #6]
 800ba4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d121      	bne.n	800ba98 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	461a      	mov	r2, r3
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4413      	add	r3, r2
 800ba62:	881b      	ldrh	r3, [r3, #0]
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba6e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	461a      	mov	r2, r3
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	441a      	add	r2, r3
 800ba80:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ba84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ba90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	e113      	b.n	800bcc4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ba9c:	88fb      	ldrh	r3, [r7, #6]
 800ba9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d121      	bne.n	800baea <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	4413      	add	r3, r2
 800bab4:	881b      	ldrh	r3, [r3, #0]
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800babc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bac0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	461a      	mov	r2, r3
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	441a      	add	r2, r3
 800bad2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800bad6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bada:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bade:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	f040 80be 	bne.w	800bc72 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	695a      	ldr	r2, [r3, #20]
 800bafa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bafe:	441a      	add	r2, r3
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	69da      	ldr	r2, [r3, #28]
 800bb08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bb0c:	441a      	add	r2, r3
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	6a1a      	ldr	r2, [r3, #32]
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	691b      	ldr	r3, [r3, #16]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d309      	bcc.n	800bb32 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	6a1a      	ldr	r2, [r3, #32]
 800bb28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb2a:	1ad2      	subs	r2, r2, r3
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	621a      	str	r2, [r3, #32]
 800bb30:	e015      	b.n	800bb5e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	6a1b      	ldr	r3, [r3, #32]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d107      	bne.n	800bb4a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800bb3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bb3e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800bb48:	e009      	b.n	800bb5e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	2200      	movs	r2, #0
 800bb54:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	785b      	ldrb	r3, [r3, #1]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d15f      	bne.n	800bc2c <HAL_PCD_EP_DB_Transmit+0x7d8>
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb80:	4413      	add	r3, r2
 800bb82:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	00da      	lsls	r2, r3, #3
 800bb8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb8c:	4413      	add	r3, r2
 800bb8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb92:	667b      	str	r3, [r7, #100]	@ 0x64
 800bb94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb96:	881b      	ldrh	r3, [r3, #0]
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb9e:	b29a      	uxth	r2, r3
 800bba0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bba2:	801a      	strh	r2, [r3, #0]
 800bba4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10a      	bne.n	800bbc0 <HAL_PCD_EP_DB_Transmit+0x76c>
 800bbaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bbac:	881b      	ldrh	r3, [r3, #0]
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbb8:	b29a      	uxth	r2, r3
 800bbba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bbbc:	801a      	strh	r2, [r3, #0]
 800bbbe:	e04e      	b.n	800bc5e <HAL_PCD_EP_DB_Transmit+0x80a>
 800bbc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbc2:	2b3e      	cmp	r3, #62	@ 0x3e
 800bbc4:	d816      	bhi.n	800bbf4 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800bbc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbc8:	085b      	lsrs	r3, r3, #1
 800bbca:	663b      	str	r3, [r7, #96]	@ 0x60
 800bbcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbce:	f003 0301 	and.w	r3, r3, #1
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d002      	beq.n	800bbdc <HAL_PCD_EP_DB_Transmit+0x788>
 800bbd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bbd8:	3301      	adds	r3, #1
 800bbda:	663b      	str	r3, [r7, #96]	@ 0x60
 800bbdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bbde:	881b      	ldrh	r3, [r3, #0]
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	029b      	lsls	r3, r3, #10
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	4313      	orrs	r3, r2
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bbf0:	801a      	strh	r2, [r3, #0]
 800bbf2:	e034      	b.n	800bc5e <HAL_PCD_EP_DB_Transmit+0x80a>
 800bbf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbf6:	095b      	lsrs	r3, r3, #5
 800bbf8:	663b      	str	r3, [r7, #96]	@ 0x60
 800bbfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbfc:	f003 031f 	and.w	r3, r3, #31
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d102      	bne.n	800bc0a <HAL_PCD_EP_DB_Transmit+0x7b6>
 800bc04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc06:	3b01      	subs	r3, #1
 800bc08:	663b      	str	r3, [r7, #96]	@ 0x60
 800bc0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	b29a      	uxth	r2, r3
 800bc10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	029b      	lsls	r3, r3, #10
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc28:	801a      	strh	r2, [r3, #0]
 800bc2a:	e018      	b.n	800bc5e <HAL_PCD_EP_DB_Transmit+0x80a>
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	785b      	ldrb	r3, [r3, #1]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d114      	bne.n	800bc5e <HAL_PCD_EP_DB_Transmit+0x80a>
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	461a      	mov	r2, r3
 800bc40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc42:	4413      	add	r3, r2
 800bc44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	00da      	lsls	r2, r3, #3
 800bc4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc4e:	4413      	add	r3, r2
 800bc50:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bc54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bc56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc5c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6818      	ldr	r0, [r3, #0]
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	6959      	ldr	r1, [r3, #20]
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	895a      	ldrh	r2, [r3, #10]
 800bc6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	f007 f9aa 	bl	8012fc6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	461a      	mov	r2, r3
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4413      	add	r3, r2
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc8c:	82fb      	strh	r3, [r7, #22]
 800bc8e:	8afb      	ldrh	r3, [r7, #22]
 800bc90:	f083 0310 	eor.w	r3, r3, #16
 800bc94:	82fb      	strh	r3, [r7, #22]
 800bc96:	8afb      	ldrh	r3, [r7, #22]
 800bc98:	f083 0320 	eor.w	r3, r3, #32
 800bc9c:	82fb      	strh	r3, [r7, #22]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	461a      	mov	r2, r3
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	441a      	add	r2, r3
 800bcac:	8afb      	ldrh	r3, [r7, #22]
 800bcae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3798      	adds	r7, #152	@ 0x98
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b087      	sub	sp, #28
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	607b      	str	r3, [r7, #4]
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	817b      	strh	r3, [r7, #10]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800bcde:	897b      	ldrh	r3, [r7, #10]
 800bce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00b      	beq.n	800bd02 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bcea:	897b      	ldrh	r3, [r7, #10]
 800bcec:	f003 0207 	and.w	r2, r3, #7
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4413      	add	r3, r2
 800bcf6:	00db      	lsls	r3, r3, #3
 800bcf8:	3310      	adds	r3, #16
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	617b      	str	r3, [r7, #20]
 800bd00:	e009      	b.n	800bd16 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bd02:	897a      	ldrh	r2, [r7, #10]
 800bd04:	4613      	mov	r3, r2
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	4413      	add	r3, r2
 800bd0a:	00db      	lsls	r3, r3, #3
 800bd0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	4413      	add	r3, r2
 800bd14:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800bd16:	893b      	ldrh	r3, [r7, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d107      	bne.n	800bd2c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	80da      	strh	r2, [r3, #6]
 800bd2a:	e00b      	b.n	800bd44 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	0c1b      	lsrs	r3, r3, #16
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	371c      	adds	r7, #28
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr

0800bd52 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bd52:	b480      	push	{r7}
 800bd54:	b085      	sub	sp, #20
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	f043 0301 	orr.w	r3, r3, #1
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	f043 0302 	orr.w	r3, r3, #2
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3714      	adds	r7, #20
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr
	...

0800bda8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bdac:	4b05      	ldr	r3, [pc, #20]	@ (800bdc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a04      	ldr	r2, [pc, #16]	@ (800bdc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bdb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bdb6:	6013      	str	r3, [r2, #0]
}
 800bdb8:	bf00      	nop
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	58000400 	.word	0x58000400

0800bdc8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800bdcc:	4b04      	ldr	r3, [pc, #16]	@ (800bde0 <HAL_PWREx_GetVoltageRange+0x18>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop
 800bde0:	58000400 	.word	0x58000400

0800bde4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800bde4:	b480      	push	{r7}
 800bde6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800bde8:	4b05      	ldr	r3, [pc, #20]	@ (800be00 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	4a04      	ldr	r2, [pc, #16]	@ (800be00 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bdee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bdf2:	6053      	str	r3, [r2, #4]
}
 800bdf4:	bf00      	nop
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	58000400 	.word	0x58000400

0800be04 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800be04:	b480      	push	{r7}
 800be06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800be08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be16:	d101      	bne.n	800be1c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800be18:	2301      	movs	r3, #1
 800be1a:	e000      	b.n	800be1e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <LL_RCC_HSE_Enable>:
{
 800be28:	b480      	push	{r7}
 800be2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800be2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be3a:	6013      	str	r3, [r2, #0]
}
 800be3c:	bf00      	nop
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr

0800be46 <LL_RCC_HSE_Disable>:
{
 800be46:	b480      	push	{r7}
 800be48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800be4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be58:	6013      	str	r3, [r2, #0]
}
 800be5a:	bf00      	nop
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <LL_RCC_HSE_IsReady>:
{
 800be64:	b480      	push	{r7}
 800be66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800be68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be76:	d101      	bne.n	800be7c <LL_RCC_HSE_IsReady+0x18>
 800be78:	2301      	movs	r3, #1
 800be7a:	e000      	b.n	800be7e <LL_RCC_HSE_IsReady+0x1a>
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <LL_RCC_HSI_Enable>:
{
 800be88:	b480      	push	{r7}
 800be8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800be8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be9a:	6013      	str	r3, [r2, #0]
}
 800be9c:	bf00      	nop
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <LL_RCC_HSI_Disable>:
{
 800bea6:	b480      	push	{r7}
 800bea8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800beaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800beb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800beb8:	6013      	str	r3, [r2, #0]
}
 800beba:	bf00      	nop
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <LL_RCC_HSI_IsReady>:
{
 800bec4:	b480      	push	{r7}
 800bec6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800bec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bed6:	d101      	bne.n	800bedc <LL_RCC_HSI_IsReady+0x18>
 800bed8:	2301      	movs	r3, #1
 800beda:	e000      	b.n	800bede <LL_RCC_HSI_IsReady+0x1a>
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <LL_RCC_HSI_SetCalibTrimming>:
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800bef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	061b      	lsls	r3, r3, #24
 800befe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf02:	4313      	orrs	r3, r2
 800bf04:	604b      	str	r3, [r1, #4]
}
 800bf06:	bf00      	nop
 800bf08:	370c      	adds	r7, #12
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr

0800bf12 <LL_RCC_HSI48_Enable>:
{
 800bf12:	b480      	push	{r7}
 800bf14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bf16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bf1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf22:	f043 0301 	orr.w	r3, r3, #1
 800bf26:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800bf2a:	bf00      	nop
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <LL_RCC_HSI48_Disable>:
{
 800bf34:	b480      	push	{r7}
 800bf36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bf38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bf40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf44:	f023 0301 	bic.w	r3, r3, #1
 800bf48:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800bf4c:	bf00      	nop
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <LL_RCC_HSI48_IsReady>:
{
 800bf56:	b480      	push	{r7}
 800bf58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800bf5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bf62:	f003 0302 	and.w	r3, r3, #2
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	d101      	bne.n	800bf6e <LL_RCC_HSI48_IsReady+0x18>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e000      	b.n	800bf70 <LL_RCC_HSI48_IsReady+0x1a>
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr

0800bf7a <LL_RCC_LSE_Enable>:
{
 800bf7a:	b480      	push	{r7}
 800bf7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bf7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf8a:	f043 0301 	orr.w	r3, r3, #1
 800bf8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bf92:	bf00      	nop
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <LL_RCC_LSE_Disable>:
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bfa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfa8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bfac:	f023 0301 	bic.w	r3, r3, #1
 800bfb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bfb4:	bf00      	nop
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr

0800bfbe <LL_RCC_LSE_EnableBypass>:
{
 800bfbe:	b480      	push	{r7}
 800bfc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bfc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bfce:	f043 0304 	orr.w	r3, r3, #4
 800bfd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bfd6:	bf00      	nop
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <LL_RCC_LSE_DisableBypass>:
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bfe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bff0:	f023 0304 	bic.w	r3, r3, #4
 800bff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bff8:	bf00      	nop
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr

0800c002 <LL_RCC_LSE_IsReady>:
{
 800c002:	b480      	push	{r7}
 800c004:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c006:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c00a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c00e:	f003 0302 	and.w	r3, r3, #2
 800c012:	2b02      	cmp	r3, #2
 800c014:	d101      	bne.n	800c01a <LL_RCC_LSE_IsReady+0x18>
 800c016:	2301      	movs	r3, #1
 800c018:	e000      	b.n	800c01c <LL_RCC_LSE_IsReady+0x1a>
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr

0800c026 <LL_RCC_LSI1_Enable>:
{
 800c026:	b480      	push	{r7}
 800c028:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c02a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c02e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c032:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c036:	f043 0301 	orr.w	r3, r3, #1
 800c03a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800c03e:	bf00      	nop
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <LL_RCC_LSI1_Disable>:
{
 800c048:	b480      	push	{r7}
 800c04a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c04c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c050:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c054:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c058:	f023 0301 	bic.w	r3, r3, #1
 800c05c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800c060:	bf00      	nop
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <LL_RCC_LSI1_IsReady>:
{
 800c06a:	b480      	push	{r7}
 800c06c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800c06e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c076:	f003 0302 	and.w	r3, r3, #2
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	d101      	bne.n	800c082 <LL_RCC_LSI1_IsReady+0x18>
 800c07e:	2301      	movs	r3, #1
 800c080:	e000      	b.n	800c084 <LL_RCC_LSI1_IsReady+0x1a>
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr

0800c08e <LL_RCC_LSI2_Enable>:
{
 800c08e:	b480      	push	{r7}
 800c090:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c09a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c09e:	f043 0304 	orr.w	r3, r3, #4
 800c0a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800c0a6:	bf00      	nop
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <LL_RCC_LSI2_Disable>:
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c0b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c0bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c0c0:	f023 0304 	bic.w	r3, r3, #4
 800c0c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800c0c8:	bf00      	nop
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr

0800c0d2 <LL_RCC_LSI2_IsReady>:
{
 800c0d2:	b480      	push	{r7}
 800c0d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800c0d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c0de:	f003 0308 	and.w	r3, r3, #8
 800c0e2:	2b08      	cmp	r3, #8
 800c0e4:	d101      	bne.n	800c0ea <LL_RCC_LSI2_IsReady+0x18>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e000      	b.n	800c0ec <LL_RCC_LSI2_IsReady+0x1a>
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <LL_RCC_LSI2_SetTrimming>:
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b083      	sub	sp, #12
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800c0fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c106:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	021b      	lsls	r3, r3, #8
 800c10e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c112:	4313      	orrs	r3, r2
 800c114:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <LL_RCC_MSI_Enable>:
{
 800c124:	b480      	push	{r7}
 800c126:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800c128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c132:	f043 0301 	orr.w	r3, r3, #1
 800c136:	6013      	str	r3, [r2, #0]
}
 800c138:	bf00      	nop
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr

0800c142 <LL_RCC_MSI_Disable>:
{
 800c142:	b480      	push	{r7}
 800c144:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800c146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c150:	f023 0301 	bic.w	r3, r3, #1
 800c154:	6013      	str	r3, [r2, #0]
}
 800c156:	bf00      	nop
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <LL_RCC_MSI_IsReady>:
{
 800c160:	b480      	push	{r7}
 800c162:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800c164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f003 0302 	and.w	r3, r3, #2
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d101      	bne.n	800c176 <LL_RCC_MSI_IsReady+0x16>
 800c172:	2301      	movs	r3, #1
 800c174:	e000      	b.n	800c178 <LL_RCC_MSI_IsReady+0x18>
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <LL_RCC_MSI_SetRange>:
{
 800c182:	b480      	push	{r7}
 800c184:	b083      	sub	sp, #12
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800c18a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c194:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	600b      	str	r3, [r1, #0]
}
 800c19e:	bf00      	nop
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <LL_RCC_MSI_GetRange>:
{
 800c1aa:	b480      	push	{r7}
 800c1ac:	b083      	sub	sp, #12
 800c1ae:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c1b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c1ba:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2bb0      	cmp	r3, #176	@ 0xb0
 800c1c0:	d901      	bls.n	800c1c6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800c1c2:	23b0      	movs	r3, #176	@ 0xb0
 800c1c4:	607b      	str	r3, [r7, #4]
  return msiRange;
 800c1c6:	687b      	ldr	r3, [r7, #4]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <LL_RCC_MSI_SetCalibTrimming>:
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c1dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	021b      	lsls	r3, r3, #8
 800c1ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	604b      	str	r3, [r1, #4]
}
 800c1f2:	bf00      	nop
 800c1f4:	370c      	adds	r7, #12
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr

0800c1fe <LL_RCC_SetSysClkSource>:
{
 800c1fe:	b480      	push	{r7}
 800c200:	b083      	sub	sp, #12
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	f023 0203 	bic.w	r2, r3, #3
 800c210:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	4313      	orrs	r3, r2
 800c218:	608b      	str	r3, [r1, #8]
}
 800c21a:	bf00      	nop
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <LL_RCC_GetSysClkSource>:
{
 800c226:	b480      	push	{r7}
 800c228:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c22a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	f003 030c 	and.w	r3, r3, #12
}
 800c234:	4618      	mov	r0, r3
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr

0800c23e <LL_RCC_SetAHBPrescaler>:
{
 800c23e:	b480      	push	{r7}
 800c240:	b083      	sub	sp, #12
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c250:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4313      	orrs	r3, r2
 800c258:	608b      	str	r3, [r1, #8]
}
 800c25a:	bf00      	nop
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr

0800c266 <LL_C2_RCC_SetAHBPrescaler>:
{
 800c266:	b480      	push	{r7}
 800c268:	b083      	sub	sp, #12
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c26e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c272:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c276:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c27a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4313      	orrs	r3, r2
 800c282:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800c286:	bf00      	nop
 800c288:	370c      	adds	r7, #12
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr

0800c292 <LL_RCC_SetAHB4Prescaler>:
{
 800c292:	b480      	push	{r7}
 800c294:	b083      	sub	sp, #12
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c29a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c29e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c2a2:	f023 020f 	bic.w	r2, r3, #15
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	091b      	lsrs	r3, r3, #4
 800c2aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800c2b4:	bf00      	nop
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <LL_RCC_SetAPB1Prescaler>:
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c2c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2cc:	689b      	ldr	r3, [r3, #8]
 800c2ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c2d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	608b      	str	r3, [r1, #8]
}
 800c2dc:	bf00      	nop
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <LL_RCC_SetAPB2Prescaler>:
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c2f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c2fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4313      	orrs	r3, r2
 800c302:	608b      	str	r3, [r1, #8]
}
 800c304:	bf00      	nop
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <LL_RCC_GetAHBPrescaler>:
{
 800c310:	b480      	push	{r7}
 800c312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <LL_RCC_GetAHB4Prescaler>:
{
 800c328:	b480      	push	{r7}
 800c32a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c32c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c330:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c334:	011b      	lsls	r3, r3, #4
 800c336:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <LL_RCC_GetAPB1Prescaler>:
{
 800c344:	b480      	push	{r7}
 800c346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800c352:	4618      	mov	r0, r3
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <LL_RCC_GetAPB2Prescaler>:
{
 800c35c:	b480      	push	{r7}
 800c35e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c374:	b480      	push	{r7}
 800c376:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c382:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c386:	6013      	str	r3, [r2, #0]
}
 800c388:	bf00      	nop
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800c392:	b480      	push	{r7}
 800c394:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c3a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c3a4:	6013      	str	r3, [r2, #0]
}
 800c3a6:	bf00      	nop
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c3b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c3c2:	d101      	bne.n	800c3c8 <LL_RCC_PLL_IsReady+0x18>
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e000      	b.n	800c3ca <LL_RCC_PLL_IsReady+0x1a>
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c3d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	0a1b      	lsrs	r3, r3, #8
 800c3e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr

0800c3ee <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c3ee:	b480      	push	{r7}
 800c3f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c3f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c406:	b480      	push	{r7}
 800c408:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c40a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c40e:	68db      	ldr	r3, [r3, #12]
 800c410:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800c414:	4618      	mov	r0, r3
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr

0800c41e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c41e:	b480      	push	{r7}
 800c420:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	f003 0303 	and.w	r3, r3, #3
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr

0800c436 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800c436:	b480      	push	{r7}
 800c438:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c43a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c448:	d101      	bne.n	800c44e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c44a:	2301      	movs	r3, #1
 800c44c:	e000      	b.n	800c450 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800c45a:	b480      	push	{r7}
 800c45c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c45e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c462:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c46a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c46e:	d101      	bne.n	800c474 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800c470:	2301      	movs	r3, #1
 800c472:	e000      	b.n	800c476 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800c480:	b480      	push	{r7}
 800c482:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c488:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c48c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c494:	d101      	bne.n	800c49a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c496:	2301      	movs	r3, #1
 800c498:	e000      	b.n	800c49c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c49a:	2300      	movs	r3, #0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr

0800c4a6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800c4a6:	b480      	push	{r7}
 800c4a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c4aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c4b8:	d101      	bne.n	800c4be <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e000      	b.n	800c4c0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr

0800c4ca <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800c4ca:	b480      	push	{r7}
 800c4cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c4ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c4d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c4dc:	d101      	bne.n	800c4e2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e000      	b.n	800c4e4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr
	...

0800c4f0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c4f0:	b590      	push	{r4, r7, lr}
 800c4f2:	b08d      	sub	sp, #52	@ 0x34
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d101      	bne.n	800c502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e363      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f003 0320 	and.w	r3, r3, #32
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f000 808d 	beq.w	800c62a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c510:	f7ff fe89 	bl	800c226 <LL_RCC_GetSysClkSource>
 800c514:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c516:	f7ff ff82 	bl	800c41e <LL_RCC_PLL_GetMainSource>
 800c51a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d005      	beq.n	800c52e <HAL_RCC_OscConfig+0x3e>
 800c522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c524:	2b0c      	cmp	r3, #12
 800c526:	d147      	bne.n	800c5b8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d144      	bne.n	800c5b8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	69db      	ldr	r3, [r3, #28]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800c536:	2301      	movs	r3, #1
 800c538:	e347      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c53e:	f7ff fe34 	bl	800c1aa <LL_RCC_MSI_GetRange>
 800c542:	4603      	mov	r3, r0
 800c544:	429c      	cmp	r4, r3
 800c546:	d914      	bls.n	800c572 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c54c:	4618      	mov	r0, r3
 800c54e:	f000 fd2f 	bl	800cfb0 <RCC_SetFlashLatencyFromMSIRange>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d001      	beq.n	800c55c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800c558:	2301      	movs	r3, #1
 800c55a:	e336      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c560:	4618      	mov	r0, r3
 800c562:	f7ff fe0e 	bl	800c182 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6a1b      	ldr	r3, [r3, #32]
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7ff fe32 	bl	800c1d4 <LL_RCC_MSI_SetCalibTrimming>
 800c570:	e013      	b.n	800c59a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c576:	4618      	mov	r0, r3
 800c578:	f7ff fe03 	bl	800c182 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6a1b      	ldr	r3, [r3, #32]
 800c580:	4618      	mov	r0, r3
 800c582:	f7ff fe27 	bl	800c1d4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c58a:	4618      	mov	r0, r3
 800c58c:	f000 fd10 	bl	800cfb0 <RCC_SetFlashLatencyFromMSIRange>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d001      	beq.n	800c59a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800c596:	2301      	movs	r3, #1
 800c598:	e317      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c59a:	f000 fcc9 	bl	800cf30 <HAL_RCC_GetHCLKFreq>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	4aa4      	ldr	r2, [pc, #656]	@ (800c834 <HAL_RCC_OscConfig+0x344>)
 800c5a2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c5a4:	4ba4      	ldr	r3, [pc, #656]	@ (800c838 <HAL_RCC_OscConfig+0x348>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fa fdbd 	bl	8007128 <HAL_InitTick>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d039      	beq.n	800c628 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	e308      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	69db      	ldr	r3, [r3, #28]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d01e      	beq.n	800c5fe <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c5c0:	f7ff fdb0 	bl	800c124 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c5c4:	f7fa fdfe 	bl	80071c4 <HAL_GetTick>
 800c5c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c5ca:	e008      	b.n	800c5de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c5cc:	f7fa fdfa 	bl	80071c4 <HAL_GetTick>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	d901      	bls.n	800c5de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c5da:	2303      	movs	r3, #3
 800c5dc:	e2f5      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c5de:	f7ff fdbf 	bl	800c160 <LL_RCC_MSI_IsReady>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d0f1      	beq.n	800c5cc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7ff fdc8 	bl	800c182 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7ff fdec 	bl	800c1d4 <LL_RCC_MSI_SetCalibTrimming>
 800c5fc:	e015      	b.n	800c62a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c5fe:	f7ff fda0 	bl	800c142 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c602:	f7fa fddf 	bl	80071c4 <HAL_GetTick>
 800c606:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c608:	e008      	b.n	800c61c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c60a:	f7fa fddb 	bl	80071c4 <HAL_GetTick>
 800c60e:	4602      	mov	r2, r0
 800c610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c612:	1ad3      	subs	r3, r2, r3
 800c614:	2b02      	cmp	r3, #2
 800c616:	d901      	bls.n	800c61c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800c618:	2303      	movs	r3, #3
 800c61a:	e2d6      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c61c:	f7ff fda0 	bl	800c160 <LL_RCC_MSI_IsReady>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1f1      	bne.n	800c60a <HAL_RCC_OscConfig+0x11a>
 800c626:	e000      	b.n	800c62a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c628:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f003 0301 	and.w	r3, r3, #1
 800c632:	2b00      	cmp	r3, #0
 800c634:	d047      	beq.n	800c6c6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c636:	f7ff fdf6 	bl	800c226 <LL_RCC_GetSysClkSource>
 800c63a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c63c:	f7ff feef 	bl	800c41e <LL_RCC_PLL_GetMainSource>
 800c640:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c642:	6a3b      	ldr	r3, [r7, #32]
 800c644:	2b08      	cmp	r3, #8
 800c646:	d005      	beq.n	800c654 <HAL_RCC_OscConfig+0x164>
 800c648:	6a3b      	ldr	r3, [r7, #32]
 800c64a:	2b0c      	cmp	r3, #12
 800c64c:	d108      	bne.n	800c660 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	2b03      	cmp	r3, #3
 800c652:	d105      	bne.n	800c660 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d134      	bne.n	800c6c6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800c65c:	2301      	movs	r3, #1
 800c65e:	e2b4      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c668:	d102      	bne.n	800c670 <HAL_RCC_OscConfig+0x180>
 800c66a:	f7ff fbdd 	bl	800be28 <LL_RCC_HSE_Enable>
 800c66e:	e001      	b.n	800c674 <HAL_RCC_OscConfig+0x184>
 800c670:	f7ff fbe9 	bl	800be46 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d012      	beq.n	800c6a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c67c:	f7fa fda2 	bl	80071c4 <HAL_GetTick>
 800c680:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c682:	e008      	b.n	800c696 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c684:	f7fa fd9e 	bl	80071c4 <HAL_GetTick>
 800c688:	4602      	mov	r2, r0
 800c68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	2b64      	cmp	r3, #100	@ 0x64
 800c690:	d901      	bls.n	800c696 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800c692:	2303      	movs	r3, #3
 800c694:	e299      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c696:	f7ff fbe5 	bl	800be64 <LL_RCC_HSE_IsReady>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d0f1      	beq.n	800c684 <HAL_RCC_OscConfig+0x194>
 800c6a0:	e011      	b.n	800c6c6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6a2:	f7fa fd8f 	bl	80071c4 <HAL_GetTick>
 800c6a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c6a8:	e008      	b.n	800c6bc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c6aa:	f7fa fd8b 	bl	80071c4 <HAL_GetTick>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b2:	1ad3      	subs	r3, r2, r3
 800c6b4:	2b64      	cmp	r3, #100	@ 0x64
 800c6b6:	d901      	bls.n	800c6bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c6b8:	2303      	movs	r3, #3
 800c6ba:	e286      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c6bc:	f7ff fbd2 	bl	800be64 <LL_RCC_HSE_IsReady>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1f1      	bne.n	800c6aa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f003 0302 	and.w	r3, r3, #2
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d04c      	beq.n	800c76c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c6d2:	f7ff fda8 	bl	800c226 <LL_RCC_GetSysClkSource>
 800c6d6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c6d8:	f7ff fea1 	bl	800c41e <LL_RCC_PLL_GetMainSource>
 800c6dc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	2b04      	cmp	r3, #4
 800c6e2:	d005      	beq.n	800c6f0 <HAL_RCC_OscConfig+0x200>
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	2b0c      	cmp	r3, #12
 800c6e8:	d10e      	bne.n	800c708 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d10b      	bne.n	800c708 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d101      	bne.n	800c6fc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	e266      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	691b      	ldr	r3, [r3, #16]
 800c700:	4618      	mov	r0, r3
 800c702:	f7ff fbf1 	bl	800bee8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c706:	e031      	b.n	800c76c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d019      	beq.n	800c744 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c710:	f7ff fbba 	bl	800be88 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c714:	f7fa fd56 	bl	80071c4 <HAL_GetTick>
 800c718:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c71a:	e008      	b.n	800c72e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c71c:	f7fa fd52 	bl	80071c4 <HAL_GetTick>
 800c720:	4602      	mov	r2, r0
 800c722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	2b02      	cmp	r3, #2
 800c728:	d901      	bls.n	800c72e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c72a:	2303      	movs	r3, #3
 800c72c:	e24d      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c72e:	f7ff fbc9 	bl	800bec4 <LL_RCC_HSI_IsReady>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d0f1      	beq.n	800c71c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff fbd3 	bl	800bee8 <LL_RCC_HSI_SetCalibTrimming>
 800c742:	e013      	b.n	800c76c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c744:	f7ff fbaf 	bl	800bea6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c748:	f7fa fd3c 	bl	80071c4 <HAL_GetTick>
 800c74c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c74e:	e008      	b.n	800c762 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c750:	f7fa fd38 	bl	80071c4 <HAL_GetTick>
 800c754:	4602      	mov	r2, r0
 800c756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c758:	1ad3      	subs	r3, r2, r3
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d901      	bls.n	800c762 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c75e:	2303      	movs	r3, #3
 800c760:	e233      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c762:	f7ff fbaf 	bl	800bec4 <LL_RCC_HSI_IsReady>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d1f1      	bne.n	800c750 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f003 0308 	and.w	r3, r3, #8
 800c774:	2b00      	cmp	r3, #0
 800c776:	d106      	bne.n	800c786 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c780:	2b00      	cmp	r3, #0
 800c782:	f000 80a3 	beq.w	800c8cc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d076      	beq.n	800c87c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f003 0310 	and.w	r3, r3, #16
 800c796:	2b00      	cmp	r3, #0
 800c798:	d046      	beq.n	800c828 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c79a:	f7ff fc66 	bl	800c06a <LL_RCC_LSI1_IsReady>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d113      	bne.n	800c7cc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c7a4:	f7ff fc3f 	bl	800c026 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c7a8:	f7fa fd0c 	bl	80071c4 <HAL_GetTick>
 800c7ac:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c7ae:	e008      	b.n	800c7c2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c7b0:	f7fa fd08 	bl	80071c4 <HAL_GetTick>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b8:	1ad3      	subs	r3, r2, r3
 800c7ba:	2b02      	cmp	r3, #2
 800c7bc:	d901      	bls.n	800c7c2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c7be:	2303      	movs	r3, #3
 800c7c0:	e203      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c7c2:	f7ff fc52 	bl	800c06a <LL_RCC_LSI1_IsReady>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d0f1      	beq.n	800c7b0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c7cc:	f7ff fc5f 	bl	800c08e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7d0:	f7fa fcf8 	bl	80071c4 <HAL_GetTick>
 800c7d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c7d6:	e008      	b.n	800c7ea <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c7d8:	f7fa fcf4 	bl	80071c4 <HAL_GetTick>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	2b03      	cmp	r3, #3
 800c7e4:	d901      	bls.n	800c7ea <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c7e6:	2303      	movs	r3, #3
 800c7e8:	e1ef      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c7ea:	f7ff fc72 	bl	800c0d2 <LL_RCC_LSI2_IsReady>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d0f1      	beq.n	800c7d8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	699b      	ldr	r3, [r3, #24]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7ff fc7c 	bl	800c0f6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c7fe:	f7ff fc23 	bl	800c048 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c802:	f7fa fcdf 	bl	80071c4 <HAL_GetTick>
 800c806:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c808:	e008      	b.n	800c81c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c80a:	f7fa fcdb 	bl	80071c4 <HAL_GetTick>
 800c80e:	4602      	mov	r2, r0
 800c810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c812:	1ad3      	subs	r3, r2, r3
 800c814:	2b02      	cmp	r3, #2
 800c816:	d901      	bls.n	800c81c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c818:	2303      	movs	r3, #3
 800c81a:	e1d6      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c81c:	f7ff fc25 	bl	800c06a <LL_RCC_LSI1_IsReady>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d1f1      	bne.n	800c80a <HAL_RCC_OscConfig+0x31a>
 800c826:	e051      	b.n	800c8cc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c828:	f7ff fbfd 	bl	800c026 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c82c:	f7fa fcca 	bl	80071c4 <HAL_GetTick>
 800c830:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c832:	e00c      	b.n	800c84e <HAL_RCC_OscConfig+0x35e>
 800c834:	20000030 	.word	0x20000030
 800c838:	20000034 	.word	0x20000034
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c83c:	f7fa fcc2 	bl	80071c4 <HAL_GetTick>
 800c840:	4602      	mov	r2, r0
 800c842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	2b02      	cmp	r3, #2
 800c848:	d901      	bls.n	800c84e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c84a:	2303      	movs	r3, #3
 800c84c:	e1bd      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c84e:	f7ff fc0c 	bl	800c06a <LL_RCC_LSI1_IsReady>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d0f1      	beq.n	800c83c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c858:	f7ff fc2a 	bl	800c0b0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c85c:	e008      	b.n	800c870 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c85e:	f7fa fcb1 	bl	80071c4 <HAL_GetTick>
 800c862:	4602      	mov	r2, r0
 800c864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	2b03      	cmp	r3, #3
 800c86a:	d901      	bls.n	800c870 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c86c:	2303      	movs	r3, #3
 800c86e:	e1ac      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c870:	f7ff fc2f 	bl	800c0d2 <LL_RCC_LSI2_IsReady>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1f1      	bne.n	800c85e <HAL_RCC_OscConfig+0x36e>
 800c87a:	e027      	b.n	800c8cc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c87c:	f7ff fc18 	bl	800c0b0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c880:	f7fa fca0 	bl	80071c4 <HAL_GetTick>
 800c884:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c886:	e008      	b.n	800c89a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c888:	f7fa fc9c 	bl	80071c4 <HAL_GetTick>
 800c88c:	4602      	mov	r2, r0
 800c88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c890:	1ad3      	subs	r3, r2, r3
 800c892:	2b03      	cmp	r3, #3
 800c894:	d901      	bls.n	800c89a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c896:	2303      	movs	r3, #3
 800c898:	e197      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c89a:	f7ff fc1a 	bl	800c0d2 <LL_RCC_LSI2_IsReady>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1f1      	bne.n	800c888 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c8a4:	f7ff fbd0 	bl	800c048 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8a8:	f7fa fc8c 	bl	80071c4 <HAL_GetTick>
 800c8ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c8ae:	e008      	b.n	800c8c2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c8b0:	f7fa fc88 	bl	80071c4 <HAL_GetTick>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d901      	bls.n	800c8c2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800c8be:	2303      	movs	r3, #3
 800c8c0:	e183      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c8c2:	f7ff fbd2 	bl	800c06a <LL_RCC_LSI1_IsReady>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1f1      	bne.n	800c8b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 0304 	and.w	r3, r3, #4
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d05b      	beq.n	800c990 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c8d8:	4ba7      	ldr	r3, [pc, #668]	@ (800cb78 <HAL_RCC_OscConfig+0x688>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d114      	bne.n	800c90e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c8e4:	f7ff fa60 	bl	800bda8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c8e8:	f7fa fc6c 	bl	80071c4 <HAL_GetTick>
 800c8ec:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c8ee:	e008      	b.n	800c902 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8f0:	f7fa fc68 	bl	80071c4 <HAL_GetTick>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d901      	bls.n	800c902 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800c8fe:	2303      	movs	r3, #3
 800c900:	e163      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c902:	4b9d      	ldr	r3, [pc, #628]	@ (800cb78 <HAL_RCC_OscConfig+0x688>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d0f0      	beq.n	800c8f0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	2b01      	cmp	r3, #1
 800c914:	d102      	bne.n	800c91c <HAL_RCC_OscConfig+0x42c>
 800c916:	f7ff fb30 	bl	800bf7a <LL_RCC_LSE_Enable>
 800c91a:	e00c      	b.n	800c936 <HAL_RCC_OscConfig+0x446>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	2b05      	cmp	r3, #5
 800c922:	d104      	bne.n	800c92e <HAL_RCC_OscConfig+0x43e>
 800c924:	f7ff fb4b 	bl	800bfbe <LL_RCC_LSE_EnableBypass>
 800c928:	f7ff fb27 	bl	800bf7a <LL_RCC_LSE_Enable>
 800c92c:	e003      	b.n	800c936 <HAL_RCC_OscConfig+0x446>
 800c92e:	f7ff fb35 	bl	800bf9c <LL_RCC_LSE_Disable>
 800c932:	f7ff fb55 	bl	800bfe0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d014      	beq.n	800c968 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c93e:	f7fa fc41 	bl	80071c4 <HAL_GetTick>
 800c942:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c944:	e00a      	b.n	800c95c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c946:	f7fa fc3d 	bl	80071c4 <HAL_GetTick>
 800c94a:	4602      	mov	r2, r0
 800c94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c954:	4293      	cmp	r3, r2
 800c956:	d901      	bls.n	800c95c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800c958:	2303      	movs	r3, #3
 800c95a:	e136      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c95c:	f7ff fb51 	bl	800c002 <LL_RCC_LSE_IsReady>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d0ef      	beq.n	800c946 <HAL_RCC_OscConfig+0x456>
 800c966:	e013      	b.n	800c990 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c968:	f7fa fc2c 	bl	80071c4 <HAL_GetTick>
 800c96c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c96e:	e00a      	b.n	800c986 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c970:	f7fa fc28 	bl	80071c4 <HAL_GetTick>
 800c974:	4602      	mov	r2, r0
 800c976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c978:	1ad3      	subs	r3, r2, r3
 800c97a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c97e:	4293      	cmp	r3, r2
 800c980:	d901      	bls.n	800c986 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800c982:	2303      	movs	r3, #3
 800c984:	e121      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c986:	f7ff fb3c 	bl	800c002 <LL_RCC_LSE_IsReady>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1ef      	bne.n	800c970 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d02c      	beq.n	800c9f6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d014      	beq.n	800c9ce <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c9a4:	f7ff fab5 	bl	800bf12 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9a8:	f7fa fc0c 	bl	80071c4 <HAL_GetTick>
 800c9ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c9ae:	e008      	b.n	800c9c2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c9b0:	f7fa fc08 	bl	80071c4 <HAL_GetTick>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d901      	bls.n	800c9c2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	e103      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c9c2:	f7ff fac8 	bl	800bf56 <LL_RCC_HSI48_IsReady>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d0f1      	beq.n	800c9b0 <HAL_RCC_OscConfig+0x4c0>
 800c9cc:	e013      	b.n	800c9f6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c9ce:	f7ff fab1 	bl	800bf34 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9d2:	f7fa fbf7 	bl	80071c4 <HAL_GetTick>
 800c9d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c9d8:	e008      	b.n	800c9ec <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c9da:	f7fa fbf3 	bl	80071c4 <HAL_GetTick>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d901      	bls.n	800c9ec <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800c9e8:	2303      	movs	r3, #3
 800c9ea:	e0ee      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c9ec:	f7ff fab3 	bl	800bf56 <LL_RCC_HSI48_IsReady>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1f1      	bne.n	800c9da <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f000 80e4 	beq.w	800cbc8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca00:	f7ff fc11 	bl	800c226 <LL_RCC_GetSysClkSource>
 800ca04:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800ca06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca12:	2b02      	cmp	r3, #2
 800ca14:	f040 80b4 	bne.w	800cb80 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f003 0203 	and.w	r2, r3, #3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d123      	bne.n	800ca6e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d11c      	bne.n	800ca6e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	0a1b      	lsrs	r3, r3, #8
 800ca38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d114      	bne.n	800ca6e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d10d      	bne.n	800ca6e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d106      	bne.n	800ca6e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d05d      	beq.n	800cb2a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	2b0c      	cmp	r3, #12
 800ca72:	d058      	beq.n	800cb26 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ca74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d001      	beq.n	800ca86 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	e0a1      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ca86:	f7ff fc84 	bl	800c392 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ca8a:	f7fa fb9b 	bl	80071c4 <HAL_GetTick>
 800ca8e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ca90:	e008      	b.n	800caa4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca92:	f7fa fb97 	bl	80071c4 <HAL_GetTick>
 800ca96:	4602      	mov	r2, r0
 800ca98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca9a:	1ad3      	subs	r3, r2, r3
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d901      	bls.n	800caa4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800caa0:	2303      	movs	r3, #3
 800caa2:	e092      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800caa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1ef      	bne.n	800ca92 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cab6:	68da      	ldr	r2, [r3, #12]
 800cab8:	4b30      	ldr	r3, [pc, #192]	@ (800cb7c <HAL_RCC_OscConfig+0x68c>)
 800caba:	4013      	ands	r3, r2
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800cac4:	4311      	orrs	r1, r2
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800caca:	0212      	lsls	r2, r2, #8
 800cacc:	4311      	orrs	r1, r2
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800cad2:	4311      	orrs	r1, r2
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800cad8:	4311      	orrs	r1, r2
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800cade:	430a      	orrs	r2, r1
 800cae0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cae4:	4313      	orrs	r3, r2
 800cae6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800cae8:	f7ff fc44 	bl	800c374 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800caec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800caf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cafa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cafc:	f7fa fb62 	bl	80071c4 <HAL_GetTick>
 800cb00:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb02:	e008      	b.n	800cb16 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb04:	f7fa fb5e 	bl	80071c4 <HAL_GetTick>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d901      	bls.n	800cb16 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800cb12:	2303      	movs	r3, #3
 800cb14:	e059      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d0ef      	beq.n	800cb04 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cb24:	e050      	b.n	800cbc8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	e04f      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d147      	bne.n	800cbc8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800cb38:	f7ff fc1c 	bl	800c374 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cb3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cb46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cb4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cb4c:	f7fa fb3a 	bl	80071c4 <HAL_GetTick>
 800cb50:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb52:	e008      	b.n	800cb66 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb54:	f7fa fb36 	bl	80071c4 <HAL_GetTick>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d901      	bls.n	800cb66 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800cb62:	2303      	movs	r3, #3
 800cb64:	e031      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d0ef      	beq.n	800cb54 <HAL_RCC_OscConfig+0x664>
 800cb74:	e028      	b.n	800cbc8 <HAL_RCC_OscConfig+0x6d8>
 800cb76:	bf00      	nop
 800cb78:	58000400 	.word	0x58000400
 800cb7c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	2b0c      	cmp	r3, #12
 800cb84:	d01e      	beq.n	800cbc4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb86:	f7ff fc04 	bl	800c392 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb8a:	f7fa fb1b 	bl	80071c4 <HAL_GetTick>
 800cb8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cb90:	e008      	b.n	800cba4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb92:	f7fa fb17 	bl	80071c4 <HAL_GetTick>
 800cb96:	4602      	mov	r2, r0
 800cb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d901      	bls.n	800cba4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e012      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1ef      	bne.n	800cb92 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800cbb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cbb6:	68da      	ldr	r2, [r3, #12]
 800cbb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cbbc:	4b05      	ldr	r3, [pc, #20]	@ (800cbd4 <HAL_RCC_OscConfig+0x6e4>)
 800cbbe:	4013      	ands	r3, r2
 800cbc0:	60cb      	str	r3, [r1, #12]
 800cbc2:	e001      	b.n	800cbc8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e000      	b.n	800cbca <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3734      	adds	r7, #52	@ 0x34
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd90      	pop	{r4, r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	eefefffc 	.word	0xeefefffc

0800cbd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d101      	bne.n	800cbec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	e12d      	b.n	800ce48 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cbec:	4b98      	ldr	r3, [pc, #608]	@ (800ce50 <HAL_RCC_ClockConfig+0x278>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f003 0307 	and.w	r3, r3, #7
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d91b      	bls.n	800cc32 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbfa:	4b95      	ldr	r3, [pc, #596]	@ (800ce50 <HAL_RCC_ClockConfig+0x278>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f023 0207 	bic.w	r2, r3, #7
 800cc02:	4993      	ldr	r1, [pc, #588]	@ (800ce50 <HAL_RCC_ClockConfig+0x278>)
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	4313      	orrs	r3, r2
 800cc08:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc0a:	f7fa fadb 	bl	80071c4 <HAL_GetTick>
 800cc0e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc10:	e008      	b.n	800cc24 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cc12:	f7fa fad7 	bl	80071c4 <HAL_GetTick>
 800cc16:	4602      	mov	r2, r0
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d901      	bls.n	800cc24 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800cc20:	2303      	movs	r3, #3
 800cc22:	e111      	b.n	800ce48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc24:	4b8a      	ldr	r3, [pc, #552]	@ (800ce50 <HAL_RCC_ClockConfig+0x278>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 0307 	and.w	r3, r3, #7
 800cc2c:	683a      	ldr	r2, [r7, #0]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d1ef      	bne.n	800cc12 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 0302 	and.w	r3, r3, #2
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d016      	beq.n	800cc6c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7ff fafb 	bl	800c23e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cc48:	f7fa fabc 	bl	80071c4 <HAL_GetTick>
 800cc4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800cc4e:	e008      	b.n	800cc62 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cc50:	f7fa fab8 	bl	80071c4 <HAL_GetTick>
 800cc54:	4602      	mov	r2, r0
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d901      	bls.n	800cc62 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800cc5e:	2303      	movs	r3, #3
 800cc60:	e0f2      	b.n	800ce48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800cc62:	f7ff fbe8 	bl	800c436 <LL_RCC_IsActiveFlag_HPRE>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d0f1      	beq.n	800cc50 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f003 0320 	and.w	r3, r3, #32
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d016      	beq.n	800cca6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	695b      	ldr	r3, [r3, #20]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7ff faf2 	bl	800c266 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cc82:	f7fa fa9f 	bl	80071c4 <HAL_GetTick>
 800cc86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800cc88:	e008      	b.n	800cc9c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cc8a:	f7fa fa9b 	bl	80071c4 <HAL_GetTick>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	1ad3      	subs	r3, r2, r3
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d901      	bls.n	800cc9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800cc98:	2303      	movs	r3, #3
 800cc9a:	e0d5      	b.n	800ce48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800cc9c:	f7ff fbdd 	bl	800c45a <LL_RCC_IsActiveFlag_C2HPRE>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d0f1      	beq.n	800cc8a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d016      	beq.n	800cce0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7ff faeb 	bl	800c292 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ccbc:	f7fa fa82 	bl	80071c4 <HAL_GetTick>
 800ccc0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ccc2:	e008      	b.n	800ccd6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ccc4:	f7fa fa7e 	bl	80071c4 <HAL_GetTick>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	1ad3      	subs	r3, r2, r3
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d901      	bls.n	800ccd6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	e0b8      	b.n	800ce48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ccd6:	f7ff fbd3 	bl	800c480 <LL_RCC_IsActiveFlag_SHDHPRE>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d0f1      	beq.n	800ccc4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f003 0304 	and.w	r3, r3, #4
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d016      	beq.n	800cd1a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7ff fae5 	bl	800c2c0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ccf6:	f7fa fa65 	bl	80071c4 <HAL_GetTick>
 800ccfa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ccfc:	e008      	b.n	800cd10 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ccfe:	f7fa fa61 	bl	80071c4 <HAL_GetTick>
 800cd02:	4602      	mov	r2, r0
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d901      	bls.n	800cd10 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	e09b      	b.n	800ce48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cd10:	f7ff fbc9 	bl	800c4a6 <LL_RCC_IsActiveFlag_PPRE1>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d0f1      	beq.n	800ccfe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f003 0308 	and.w	r3, r3, #8
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d017      	beq.n	800cd56 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	691b      	ldr	r3, [r3, #16]
 800cd2a:	00db      	lsls	r3, r3, #3
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7ff fadb 	bl	800c2e8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cd32:	f7fa fa47 	bl	80071c4 <HAL_GetTick>
 800cd36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cd38:	e008      	b.n	800cd4c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cd3a:	f7fa fa43 	bl	80071c4 <HAL_GetTick>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	d901      	bls.n	800cd4c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	e07d      	b.n	800ce48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cd4c:	f7ff fbbd 	bl	800c4ca <LL_RCC_IsActiveFlag_PPRE2>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d0f1      	beq.n	800cd3a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f003 0301 	and.w	r3, r3, #1
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d043      	beq.n	800cdea <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d106      	bne.n	800cd78 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800cd6a:	f7ff f87b 	bl	800be64 <LL_RCC_HSE_IsReady>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d11e      	bne.n	800cdb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cd74:	2301      	movs	r3, #1
 800cd76:	e067      	b.n	800ce48 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	2b03      	cmp	r3, #3
 800cd7e:	d106      	bne.n	800cd8e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800cd80:	f7ff fb16 	bl	800c3b0 <LL_RCC_PLL_IsReady>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d113      	bne.n	800cdb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e05c      	b.n	800ce48 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d106      	bne.n	800cda4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800cd96:	f7ff f9e3 	bl	800c160 <LL_RCC_MSI_IsReady>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d108      	bne.n	800cdb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cda0:	2301      	movs	r3, #1
 800cda2:	e051      	b.n	800ce48 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800cda4:	f7ff f88e 	bl	800bec4 <LL_RCC_HSI_IsReady>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d101      	bne.n	800cdb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e04a      	b.n	800ce48 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7ff fa21 	bl	800c1fe <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdbc:	f7fa fa02 	bl	80071c4 <HAL_GetTick>
 800cdc0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cdc2:	e00a      	b.n	800cdda <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cdc4:	f7fa f9fe 	bl	80071c4 <HAL_GetTick>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	1ad3      	subs	r3, r2, r3
 800cdce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d901      	bls.n	800cdda <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	e036      	b.n	800ce48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cdda:	f7ff fa24 	bl	800c226 <LL_RCC_GetSysClkSource>
 800cdde:	4602      	mov	r2, r0
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d1ec      	bne.n	800cdc4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cdea:	4b19      	ldr	r3, [pc, #100]	@ (800ce50 <HAL_RCC_ClockConfig+0x278>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f003 0307 	and.w	r3, r3, #7
 800cdf2:	683a      	ldr	r2, [r7, #0]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d21b      	bcs.n	800ce30 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cdf8:	4b15      	ldr	r3, [pc, #84]	@ (800ce50 <HAL_RCC_ClockConfig+0x278>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f023 0207 	bic.w	r2, r3, #7
 800ce00:	4913      	ldr	r1, [pc, #76]	@ (800ce50 <HAL_RCC_ClockConfig+0x278>)
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	4313      	orrs	r3, r2
 800ce06:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce08:	f7fa f9dc 	bl	80071c4 <HAL_GetTick>
 800ce0c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce0e:	e008      	b.n	800ce22 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ce10:	f7fa f9d8 	bl	80071c4 <HAL_GetTick>
 800ce14:	4602      	mov	r2, r0
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	2b02      	cmp	r3, #2
 800ce1c:	d901      	bls.n	800ce22 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800ce1e:	2303      	movs	r3, #3
 800ce20:	e012      	b.n	800ce48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce22:	4b0b      	ldr	r3, [pc, #44]	@ (800ce50 <HAL_RCC_ClockConfig+0x278>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 0307 	and.w	r3, r3, #7
 800ce2a:	683a      	ldr	r2, [r7, #0]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d1ef      	bne.n	800ce10 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800ce30:	f000 f87e 	bl	800cf30 <HAL_RCC_GetHCLKFreq>
 800ce34:	4603      	mov	r3, r0
 800ce36:	4a07      	ldr	r2, [pc, #28]	@ (800ce54 <HAL_RCC_ClockConfig+0x27c>)
 800ce38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800ce3a:	f7fa f9cf 	bl	80071dc <HAL_GetTickPrio>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fa f971 	bl	8007128 <HAL_InitTick>
 800ce46:	4603      	mov	r3, r0
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	58004000 	.word	0x58004000
 800ce54:	20000030 	.word	0x20000030

0800ce58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce58:	b590      	push	{r4, r7, lr}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ce5e:	f7ff f9e2 	bl	800c226 <LL_RCC_GetSysClkSource>
 800ce62:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10a      	bne.n	800ce80 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ce6a:	f7ff f99e 	bl	800c1aa <LL_RCC_MSI_GetRange>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	091b      	lsrs	r3, r3, #4
 800ce72:	f003 030f 	and.w	r3, r3, #15
 800ce76:	4a2b      	ldr	r2, [pc, #172]	@ (800cf24 <HAL_RCC_GetSysClockFreq+0xcc>)
 800ce78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce7c:	60fb      	str	r3, [r7, #12]
 800ce7e:	e04b      	b.n	800cf18 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2b04      	cmp	r3, #4
 800ce84:	d102      	bne.n	800ce8c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ce86:	4b28      	ldr	r3, [pc, #160]	@ (800cf28 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ce88:	60fb      	str	r3, [r7, #12]
 800ce8a:	e045      	b.n	800cf18 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b08      	cmp	r3, #8
 800ce90:	d10a      	bne.n	800cea8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ce92:	f7fe ffb7 	bl	800be04 <LL_RCC_HSE_IsEnabledDiv2>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d102      	bne.n	800cea2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800ce9c:	4b22      	ldr	r3, [pc, #136]	@ (800cf28 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ce9e:	60fb      	str	r3, [r7, #12]
 800cea0:	e03a      	b.n	800cf18 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800cea2:	4b22      	ldr	r3, [pc, #136]	@ (800cf2c <HAL_RCC_GetSysClockFreq+0xd4>)
 800cea4:	60fb      	str	r3, [r7, #12]
 800cea6:	e037      	b.n	800cf18 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800cea8:	f7ff fab9 	bl	800c41e <LL_RCC_PLL_GetMainSource>
 800ceac:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	2b02      	cmp	r3, #2
 800ceb2:	d003      	beq.n	800cebc <HAL_RCC_GetSysClockFreq+0x64>
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	d003      	beq.n	800cec2 <HAL_RCC_GetSysClockFreq+0x6a>
 800ceba:	e00d      	b.n	800ced8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800cebc:	4b1a      	ldr	r3, [pc, #104]	@ (800cf28 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cebe:	60bb      	str	r3, [r7, #8]
        break;
 800cec0:	e015      	b.n	800ceee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cec2:	f7fe ff9f 	bl	800be04 <LL_RCC_HSE_IsEnabledDiv2>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d102      	bne.n	800ced2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800cecc:	4b16      	ldr	r3, [pc, #88]	@ (800cf28 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cece:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800ced0:	e00d      	b.n	800ceee <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800ced2:	4b16      	ldr	r3, [pc, #88]	@ (800cf2c <HAL_RCC_GetSysClockFreq+0xd4>)
 800ced4:	60bb      	str	r3, [r7, #8]
        break;
 800ced6:	e00a      	b.n	800ceee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ced8:	f7ff f967 	bl	800c1aa <LL_RCC_MSI_GetRange>
 800cedc:	4603      	mov	r3, r0
 800cede:	091b      	lsrs	r3, r3, #4
 800cee0:	f003 030f 	and.w	r3, r3, #15
 800cee4:	4a0f      	ldr	r2, [pc, #60]	@ (800cf24 <HAL_RCC_GetSysClockFreq+0xcc>)
 800cee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceea:	60bb      	str	r3, [r7, #8]
        break;
 800ceec:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800ceee:	f7ff fa71 	bl	800c3d4 <LL_RCC_PLL_GetN>
 800cef2:	4602      	mov	r2, r0
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	fb03 f402 	mul.w	r4, r3, r2
 800cefa:	f7ff fa84 	bl	800c406 <LL_RCC_PLL_GetDivider>
 800cefe:	4603      	mov	r3, r0
 800cf00:	091b      	lsrs	r3, r3, #4
 800cf02:	3301      	adds	r3, #1
 800cf04:	fbb4 f4f3 	udiv	r4, r4, r3
 800cf08:	f7ff fa71 	bl	800c3ee <LL_RCC_PLL_GetR>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	0f5b      	lsrs	r3, r3, #29
 800cf10:	3301      	adds	r3, #1
 800cf12:	fbb4 f3f3 	udiv	r3, r4, r3
 800cf16:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800cf18:	68fb      	ldr	r3, [r7, #12]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3714      	adds	r7, #20
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd90      	pop	{r4, r7, pc}
 800cf22:	bf00      	nop
 800cf24:	0801f094 	.word	0x0801f094
 800cf28:	00f42400 	.word	0x00f42400
 800cf2c:	01e84800 	.word	0x01e84800

0800cf30 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf30:	b598      	push	{r3, r4, r7, lr}
 800cf32:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800cf34:	f7ff ff90 	bl	800ce58 <HAL_RCC_GetSysClockFreq>
 800cf38:	4604      	mov	r4, r0
 800cf3a:	f7ff f9e9 	bl	800c310 <LL_RCC_GetAHBPrescaler>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	091b      	lsrs	r3, r3, #4
 800cf42:	f003 030f 	and.w	r3, r3, #15
 800cf46:	4a03      	ldr	r2, [pc, #12]	@ (800cf54 <HAL_RCC_GetHCLKFreq+0x24>)
 800cf48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf4c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	bd98      	pop	{r3, r4, r7, pc}
 800cf54:	0801f034 	.word	0x0801f034

0800cf58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf58:	b598      	push	{r3, r4, r7, lr}
 800cf5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800cf5c:	f7ff ffe8 	bl	800cf30 <HAL_RCC_GetHCLKFreq>
 800cf60:	4604      	mov	r4, r0
 800cf62:	f7ff f9ef 	bl	800c344 <LL_RCC_GetAPB1Prescaler>
 800cf66:	4603      	mov	r3, r0
 800cf68:	0a1b      	lsrs	r3, r3, #8
 800cf6a:	f003 0307 	and.w	r3, r3, #7
 800cf6e:	4a04      	ldr	r2, [pc, #16]	@ (800cf80 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cf70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf74:	f003 031f 	and.w	r3, r3, #31
 800cf78:	fa24 f303 	lsr.w	r3, r4, r3
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	bd98      	pop	{r3, r4, r7, pc}
 800cf80:	0801f074 	.word	0x0801f074

0800cf84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf84:	b598      	push	{r3, r4, r7, lr}
 800cf86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800cf88:	f7ff ffd2 	bl	800cf30 <HAL_RCC_GetHCLKFreq>
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	f7ff f9e5 	bl	800c35c <LL_RCC_GetAPB2Prescaler>
 800cf92:	4603      	mov	r3, r0
 800cf94:	0adb      	lsrs	r3, r3, #11
 800cf96:	f003 0307 	and.w	r3, r3, #7
 800cf9a:	4a04      	ldr	r2, [pc, #16]	@ (800cfac <HAL_RCC_GetPCLK2Freq+0x28>)
 800cf9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfa0:	f003 031f 	and.w	r3, r3, #31
 800cfa4:	fa24 f303 	lsr.w	r3, r4, r3
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	bd98      	pop	{r3, r4, r7, pc}
 800cfac:	0801f074 	.word	0x0801f074

0800cfb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800cfb0:	b590      	push	{r4, r7, lr}
 800cfb2:	b085      	sub	sp, #20
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2bb0      	cmp	r3, #176	@ 0xb0
 800cfbc:	d903      	bls.n	800cfc6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800cfbe:	4b15      	ldr	r3, [pc, #84]	@ (800d014 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800cfc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfc2:	60fb      	str	r3, [r7, #12]
 800cfc4:	e007      	b.n	800cfd6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	091b      	lsrs	r3, r3, #4
 800cfca:	f003 030f 	and.w	r3, r3, #15
 800cfce:	4a11      	ldr	r2, [pc, #68]	@ (800d014 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800cfd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfd4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800cfd6:	f7ff f9a7 	bl	800c328 <LL_RCC_GetAHB4Prescaler>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	091b      	lsrs	r3, r3, #4
 800cfde:	f003 030f 	and.w	r3, r3, #15
 800cfe2:	4a0d      	ldr	r2, [pc, #52]	@ (800d018 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800cfe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfee:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	4a0a      	ldr	r2, [pc, #40]	@ (800d01c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800cff4:	fba2 2303 	umull	r2, r3, r2, r3
 800cff8:	0c9c      	lsrs	r4, r3, #18
 800cffa:	f7fe fee5 	bl	800bdc8 <HAL_PWREx_GetVoltageRange>
 800cffe:	4603      	mov	r3, r0
 800d000:	4619      	mov	r1, r3
 800d002:	4620      	mov	r0, r4
 800d004:	f000 f80c 	bl	800d020 <RCC_SetFlashLatency>
 800d008:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3714      	adds	r7, #20
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd90      	pop	{r4, r7, pc}
 800d012:	bf00      	nop
 800d014:	0801f094 	.word	0x0801f094
 800d018:	0801f034 	.word	0x0801f034
 800d01c:	431bde83 	.word	0x431bde83

0800d020 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800d020:	b590      	push	{r4, r7, lr}
 800d022:	b093      	sub	sp, #76	@ 0x4c
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800d02a:	4b37      	ldr	r3, [pc, #220]	@ (800d108 <RCC_SetFlashLatency+0xe8>)
 800d02c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800d030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d032:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800d036:	4a35      	ldr	r2, [pc, #212]	@ (800d10c <RCC_SetFlashLatency+0xec>)
 800d038:	f107 031c 	add.w	r3, r7, #28
 800d03c:	ca07      	ldmia	r2, {r0, r1, r2}
 800d03e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800d042:	4b33      	ldr	r3, [pc, #204]	@ (800d110 <RCC_SetFlashLatency+0xf0>)
 800d044:	f107 040c 	add.w	r4, r7, #12
 800d048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d04a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800d04e:	2300      	movs	r3, #0
 800d050:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d058:	d11a      	bne.n	800d090 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d05a:	2300      	movs	r3, #0
 800d05c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d05e:	e013      	b.n	800d088 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800d060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	3348      	adds	r3, #72	@ 0x48
 800d066:	443b      	add	r3, r7
 800d068:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d807      	bhi.n	800d082 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	3348      	adds	r3, #72	@ 0x48
 800d078:	443b      	add	r3, r7
 800d07a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d07e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800d080:	e020      	b.n	800d0c4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d084:	3301      	adds	r3, #1
 800d086:	643b      	str	r3, [r7, #64]	@ 0x40
 800d088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d08a:	2b03      	cmp	r3, #3
 800d08c:	d9e8      	bls.n	800d060 <RCC_SetFlashLatency+0x40>
 800d08e:	e019      	b.n	800d0c4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d090:	2300      	movs	r3, #0
 800d092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d094:	e013      	b.n	800d0be <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800d096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	3348      	adds	r3, #72	@ 0x48
 800d09c:	443b      	add	r3, r7
 800d09e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d807      	bhi.n	800d0b8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d0a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	3348      	adds	r3, #72	@ 0x48
 800d0ae:	443b      	add	r3, r7
 800d0b0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d0b4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800d0b6:	e005      	b.n	800d0c4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d0b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0c0:	2b02      	cmp	r3, #2
 800d0c2:	d9e8      	bls.n	800d096 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800d0c4:	4b13      	ldr	r3, [pc, #76]	@ (800d114 <RCC_SetFlashLatency+0xf4>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f023 0207 	bic.w	r2, r3, #7
 800d0cc:	4911      	ldr	r1, [pc, #68]	@ (800d114 <RCC_SetFlashLatency+0xf4>)
 800d0ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d0d4:	f7fa f876 	bl	80071c4 <HAL_GetTick>
 800d0d8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d0da:	e008      	b.n	800d0ee <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d0dc:	f7fa f872 	bl	80071c4 <HAL_GetTick>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e4:	1ad3      	subs	r3, r2, r3
 800d0e6:	2b02      	cmp	r3, #2
 800d0e8:	d901      	bls.n	800d0ee <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800d0ea:	2303      	movs	r3, #3
 800d0ec:	e007      	b.n	800d0fe <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d0ee:	4b09      	ldr	r3, [pc, #36]	@ (800d114 <RCC_SetFlashLatency+0xf4>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f003 0307 	and.w	r3, r3, #7
 800d0f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d1ef      	bne.n	800d0dc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800d0fc:	2300      	movs	r3, #0
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	374c      	adds	r7, #76	@ 0x4c
 800d102:	46bd      	mov	sp, r7
 800d104:	bd90      	pop	{r4, r7, pc}
 800d106:	bf00      	nop
 800d108:	0801cf94 	.word	0x0801cf94
 800d10c:	0801cfa4 	.word	0x0801cfa4
 800d110:	0801cfb0 	.word	0x0801cfb0
 800d114:	58004000 	.word	0x58004000

0800d118 <LL_RCC_LSE_IsEnabled>:
{
 800d118:	b480      	push	{r7}
 800d11a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800d11c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d124:	f003 0301 	and.w	r3, r3, #1
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d101      	bne.n	800d130 <LL_RCC_LSE_IsEnabled+0x18>
 800d12c:	2301      	movs	r3, #1
 800d12e:	e000      	b.n	800d132 <LL_RCC_LSE_IsEnabled+0x1a>
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <LL_RCC_LSE_IsReady>:
{
 800d13c:	b480      	push	{r7}
 800d13e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d148:	f003 0302 	and.w	r3, r3, #2
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d101      	bne.n	800d154 <LL_RCC_LSE_IsReady+0x18>
 800d150:	2301      	movs	r3, #1
 800d152:	e000      	b.n	800d156 <LL_RCC_LSE_IsReady+0x1a>
 800d154:	2300      	movs	r3, #0
}
 800d156:	4618      	mov	r0, r3
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <LL_RCC_SetRFWKPClockSource>:
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800d168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d16c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d170:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d174:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	4313      	orrs	r3, r2
 800d17c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800d180:	bf00      	nop
 800d182:	370c      	adds	r7, #12
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <LL_RCC_SetSMPSClockSource>:
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800d194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d19a:	f023 0203 	bic.w	r2, r3, #3
 800d19e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800d1a8:	bf00      	nop
 800d1aa:	370c      	adds	r7, #12
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr

0800d1b4 <LL_RCC_SetSMPSPrescaler>:
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800d1bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1c2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800d1c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800d1d0:	bf00      	nop
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <LL_RCC_SetUSARTClockSource>:
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800d1e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1ec:	f023 0203 	bic.w	r2, r3, #3
 800d1f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d1fc:	bf00      	nop
 800d1fe:	370c      	adds	r7, #12
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr

0800d208 <LL_RCC_SetLPUARTClockSource>:
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800d210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d218:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d21c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	4313      	orrs	r3, r2
 800d224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d228:	bf00      	nop
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <LL_RCC_SetI2CClockSource>:
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800d23c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d240:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	091b      	lsrs	r3, r3, #4
 800d248:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800d24c:	43db      	mvns	r3, r3
 800d24e:	401a      	ands	r2, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	011b      	lsls	r3, r3, #4
 800d254:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800d258:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d25c:	4313      	orrs	r3, r2
 800d25e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d262:	bf00      	nop
 800d264:	370c      	adds	r7, #12
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr

0800d26e <LL_RCC_SetLPTIMClockSource>:
{
 800d26e:	b480      	push	{r7}
 800d270:	b083      	sub	sp, #12
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800d276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d27a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	0c1b      	lsrs	r3, r3, #16
 800d282:	041b      	lsls	r3, r3, #16
 800d284:	43db      	mvns	r3, r3
 800d286:	401a      	ands	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	041b      	lsls	r3, r3, #16
 800d28c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d290:	4313      	orrs	r3, r2
 800d292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d296:	bf00      	nop
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <LL_RCC_SetSAIClockSource>:
{
 800d2a2:	b480      	push	{r7}
 800d2a4:	b083      	sub	sp, #12
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800d2aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d2b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d2c2:	bf00      	nop
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <LL_RCC_SetRNGClockSource>:
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	b083      	sub	sp, #12
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800d2d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2de:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800d2e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d2ee:	bf00      	nop
 800d2f0:	370c      	adds	r7, #12
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr

0800d2fa <LL_RCC_SetCLK48ClockSource>:
{
 800d2fa:	b480      	push	{r7}
 800d2fc:	b083      	sub	sp, #12
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d30a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d30e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4313      	orrs	r3, r2
 800d316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d31a:	bf00      	nop
 800d31c:	370c      	adds	r7, #12
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr

0800d326 <LL_RCC_SetUSBClockSource>:
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b082      	sub	sp, #8
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f7ff ffe3 	bl	800d2fa <LL_RCC_SetCLK48ClockSource>
}
 800d334:	bf00      	nop
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <LL_RCC_SetADCClockSource>:
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800d344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d34c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d350:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	4313      	orrs	r3, r2
 800d358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d35c:	bf00      	nop
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <LL_RCC_SetRTCClockSource>:
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d370:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d378:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d37c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4313      	orrs	r3, r2
 800d384:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800d388:	bf00      	nop
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <LL_RCC_GetRTCClockSource>:
{
 800d394:	b480      	push	{r7}
 800d396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d39c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr

0800d3ae <LL_RCC_ForceBackupDomainReset>:
{
 800d3ae:	b480      	push	{r7}
 800d3b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d3b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d3be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d3c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d3c6:	bf00      	nop
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <LL_RCC_ReleaseBackupDomainReset>:
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d3d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d3e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d3e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d3e8:	bf00      	nop
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr

0800d3f2 <LL_RCC_PLLSAI1_Enable>:
{
 800d3f2:	b480      	push	{r7}
 800d3f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d3f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d400:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d404:	6013      	str	r3, [r2, #0]
}
 800d406:	bf00      	nop
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <LL_RCC_PLLSAI1_Disable>:
{
 800d410:	b480      	push	{r7}
 800d412:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d41e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d422:	6013      	str	r3, [r2, #0]
}
 800d424:	bf00      	nop
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr

0800d42e <LL_RCC_PLLSAI1_IsReady>:
{
 800d42e:	b480      	push	{r7}
 800d430:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800d432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d43c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d440:	d101      	bne.n	800d446 <LL_RCC_PLLSAI1_IsReady+0x18>
 800d442:	2301      	movs	r3, #1
 800d444:	e000      	b.n	800d448 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800d446:	2300      	movs	r3, #0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b088      	sub	sp, #32
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800d45a:	2300      	movs	r3, #0
 800d45c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d45e:	2300      	movs	r3, #0
 800d460:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d034      	beq.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d472:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d476:	d021      	beq.n	800d4bc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800d478:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d47c:	d81b      	bhi.n	800d4b6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d47e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d482:	d01d      	beq.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800d484:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d488:	d815      	bhi.n	800d4b6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d00b      	beq.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800d48e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d492:	d110      	bne.n	800d4b6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800d494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d49e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d4a2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800d4a4:	e00d      	b.n	800d4c2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	3304      	adds	r3, #4
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f000 f947 	bl	800d73e <RCCEx_PLLSAI1_ConfigNP>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d4b4:	e005      	b.n	800d4c2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	77fb      	strb	r3, [r7, #31]
        break;
 800d4ba:	e002      	b.n	800d4c2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d4bc:	bf00      	nop
 800d4be:	e000      	b.n	800d4c2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d4c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4c2:	7ffb      	ldrb	r3, [r7, #31]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d105      	bne.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fee8 	bl	800d2a2 <LL_RCC_SetSAIClockSource>
 800d4d2:	e001      	b.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4d4:	7ffb      	ldrb	r3, [r7, #31]
 800d4d6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d046      	beq.n	800d572 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800d4e4:	f7ff ff56 	bl	800d394 <LL_RCC_GetRTCClockSource>
 800d4e8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4ee:	69ba      	ldr	r2, [r7, #24]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d03c      	beq.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d4f4:	f7fe fc58 	bl	800bda8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800d4f8:	69bb      	ldr	r3, [r7, #24]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d105      	bne.n	800d50a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff ff30 	bl	800d368 <LL_RCC_SetRTCClockSource>
 800d508:	e02e      	b.n	800d568 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800d50a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d512:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800d514:	f7ff ff4b 	bl	800d3ae <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800d518:	f7ff ff5a 	bl	800d3d0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d526:	4313      	orrs	r3, r2
 800d528:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800d52a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800d534:	f7ff fdf0 	bl	800d118 <LL_RCC_LSE_IsEnabled>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d114      	bne.n	800d568 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d53e:	f7f9 fe41 	bl	80071c4 <HAL_GetTick>
 800d542:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800d544:	e00b      	b.n	800d55e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d546:	f7f9 fe3d 	bl	80071c4 <HAL_GetTick>
 800d54a:	4602      	mov	r2, r0
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	1ad3      	subs	r3, r2, r3
 800d550:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d554:	4293      	cmp	r3, r2
 800d556:	d902      	bls.n	800d55e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800d558:	2303      	movs	r3, #3
 800d55a:	77fb      	strb	r3, [r7, #31]
              break;
 800d55c:	e004      	b.n	800d568 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800d55e:	f7ff fded 	bl	800d13c <LL_RCC_LSE_IsReady>
 800d562:	4603      	mov	r3, r0
 800d564:	2b01      	cmp	r3, #1
 800d566:	d1ee      	bne.n	800d546 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800d568:	7ffb      	ldrb	r3, [r7, #31]
 800d56a:	77bb      	strb	r3, [r7, #30]
 800d56c:	e001      	b.n	800d572 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d56e:	7ffb      	ldrb	r3, [r7, #31]
 800d570:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d004      	beq.n	800d588 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	699b      	ldr	r3, [r3, #24]
 800d582:	4618      	mov	r0, r3
 800d584:	f7ff fe2a 	bl	800d1dc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f003 0302 	and.w	r3, r3, #2
 800d590:	2b00      	cmp	r3, #0
 800d592:	d004      	beq.n	800d59e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	69db      	ldr	r3, [r3, #28]
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff fe35 	bl	800d208 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f003 0310 	and.w	r3, r3, #16
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d004      	beq.n	800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7ff fe5d 	bl	800d26e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f003 0320 	and.w	r3, r3, #32
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d004      	beq.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7ff fe52 	bl	800d26e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f003 0304 	and.w	r3, r3, #4
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d004      	beq.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6a1b      	ldr	r3, [r3, #32]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7ff fe2a 	bl	800d234 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f003 0308 	and.w	r3, r3, #8
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d004      	beq.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7ff fe1f 	bl	800d234 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d022      	beq.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d606:	4618      	mov	r0, r3
 800d608:	f7ff fe8d 	bl	800d326 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d610:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d614:	d107      	bne.n	800d626 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800d616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d620:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d624:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d62a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d62e:	d10b      	bne.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	3304      	adds	r3, #4
 800d634:	4618      	mov	r0, r3
 800d636:	f000 f8dd 	bl	800d7f4 <RCCEx_PLLSAI1_ConfigNQ>
 800d63a:	4603      	mov	r3, r0
 800d63c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d63e:	7ffb      	ldrb	r3, [r7, #31]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d001      	beq.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800d644:	7ffb      	ldrb	r3, [r7, #31]
 800d646:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d650:	2b00      	cmp	r3, #0
 800d652:	d02b      	beq.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d65c:	d008      	beq.n	800d670 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d662:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d666:	d003      	beq.n	800d670 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d105      	bne.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d674:	4618      	mov	r0, r3
 800d676:	f7ff fe2a 	bl	800d2ce <LL_RCC_SetRNGClockSource>
 800d67a:	e00a      	b.n	800d692 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d680:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d684:	60fb      	str	r3, [r7, #12]
 800d686:	2000      	movs	r0, #0
 800d688:	f7ff fe21 	bl	800d2ce <LL_RCC_SetRNGClockSource>
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f7ff fe34 	bl	800d2fa <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d696:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d69a:	d107      	bne.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d69c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d6a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d6aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d022      	beq.n	800d6fe <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7ff fe3d 	bl	800d33c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d6ca:	d107      	bne.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d6cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d6d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d6da:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d6e4:	d10b      	bne.n	800d6fe <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	3304      	adds	r3, #4
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f000 f8dd 	bl	800d8aa <RCCEx_PLLSAI1_ConfigNR>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d6f4:	7ffb      	ldrb	r3, [r7, #31]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d001      	beq.n	800d6fe <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800d6fa:	7ffb      	ldrb	r3, [r7, #31]
 800d6fc:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d706:	2b00      	cmp	r3, #0
 800d708:	d004      	beq.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d70e:	4618      	mov	r0, r3
 800d710:	f7ff fd26 	bl	800d160 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d009      	beq.n	800d734 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d724:	4618      	mov	r0, r3
 800d726:	f7ff fd45 	bl	800d1b4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d72e:	4618      	mov	r0, r3
 800d730:	f7ff fd2c 	bl	800d18c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800d734:	7fbb      	ldrb	r3, [r7, #30]
}
 800d736:	4618      	mov	r0, r3
 800d738:	3720      	adds	r7, #32
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b084      	sub	sp, #16
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d746:	2300      	movs	r3, #0
 800d748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d74a:	f7ff fe61 	bl	800d410 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d74e:	f7f9 fd39 	bl	80071c4 <HAL_GetTick>
 800d752:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d754:	e009      	b.n	800d76a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d756:	f7f9 fd35 	bl	80071c4 <HAL_GetTick>
 800d75a:	4602      	mov	r2, r0
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	1ad3      	subs	r3, r2, r3
 800d760:	2b02      	cmp	r3, #2
 800d762:	d902      	bls.n	800d76a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d764:	2303      	movs	r3, #3
 800d766:	73fb      	strb	r3, [r7, #15]
      break;
 800d768:	e004      	b.n	800d774 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d76a:	f7ff fe60 	bl	800d42e <LL_RCC_PLLSAI1_IsReady>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1f0      	bne.n	800d756 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d774:	7bfb      	ldrb	r3, [r7, #15]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d137      	bne.n	800d7ea <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d77a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d77e:	691b      	ldr	r3, [r3, #16]
 800d780:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	021b      	lsls	r3, r3, #8
 800d78a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d78e:	4313      	orrs	r3, r2
 800d790:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d796:	691b      	ldr	r3, [r3, #16]
 800d798:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d7a8:	f7ff fe23 	bl	800d3f2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7ac:	f7f9 fd0a 	bl	80071c4 <HAL_GetTick>
 800d7b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d7b2:	e009      	b.n	800d7c8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d7b4:	f7f9 fd06 	bl	80071c4 <HAL_GetTick>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	1ad3      	subs	r3, r2, r3
 800d7be:	2b02      	cmp	r3, #2
 800d7c0:	d902      	bls.n	800d7c8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d7c2:	2303      	movs	r3, #3
 800d7c4:	73fb      	strb	r3, [r7, #15]
        break;
 800d7c6:	e004      	b.n	800d7d2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d7c8:	f7ff fe31 	bl	800d42e <LL_RCC_PLLSAI1_IsReady>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d1f0      	bne.n	800d7b4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d7d2:	7bfb      	ldrb	r3, [r7, #15]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d108      	bne.n	800d7ea <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d7d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7dc:	691a      	ldr	r2, [r3, #16]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	691b      	ldr	r3, [r3, #16]
 800d7e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3710      	adds	r7, #16
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d800:	f7ff fe06 	bl	800d410 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d804:	f7f9 fcde 	bl	80071c4 <HAL_GetTick>
 800d808:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d80a:	e009      	b.n	800d820 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d80c:	f7f9 fcda 	bl	80071c4 <HAL_GetTick>
 800d810:	4602      	mov	r2, r0
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	1ad3      	subs	r3, r2, r3
 800d816:	2b02      	cmp	r3, #2
 800d818:	d902      	bls.n	800d820 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d81a:	2303      	movs	r3, #3
 800d81c:	73fb      	strb	r3, [r7, #15]
      break;
 800d81e:	e004      	b.n	800d82a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d820:	f7ff fe05 	bl	800d42e <LL_RCC_PLLSAI1_IsReady>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1f0      	bne.n	800d80c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d82a:	7bfb      	ldrb	r3, [r7, #15]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d137      	bne.n	800d8a0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d834:	691b      	ldr	r3, [r3, #16]
 800d836:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	021b      	lsls	r3, r3, #8
 800d840:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d844:	4313      	orrs	r3, r2
 800d846:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d84c:	691b      	ldr	r3, [r3, #16]
 800d84e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	689b      	ldr	r3, [r3, #8]
 800d856:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d85a:	4313      	orrs	r3, r2
 800d85c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d85e:	f7ff fdc8 	bl	800d3f2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d862:	f7f9 fcaf 	bl	80071c4 <HAL_GetTick>
 800d866:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d868:	e009      	b.n	800d87e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d86a:	f7f9 fcab 	bl	80071c4 <HAL_GetTick>
 800d86e:	4602      	mov	r2, r0
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	2b02      	cmp	r3, #2
 800d876:	d902      	bls.n	800d87e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d878:	2303      	movs	r3, #3
 800d87a:	73fb      	strb	r3, [r7, #15]
        break;
 800d87c:	e004      	b.n	800d888 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d87e:	f7ff fdd6 	bl	800d42e <LL_RCC_PLLSAI1_IsReady>
 800d882:	4603      	mov	r3, r0
 800d884:	2b01      	cmp	r3, #1
 800d886:	d1f0      	bne.n	800d86a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d888:	7bfb      	ldrb	r3, [r7, #15]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d108      	bne.n	800d8a0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d88e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d892:	691a      	ldr	r2, [r3, #16]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	691b      	ldr	r3, [r3, #16]
 800d898:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d89c:	4313      	orrs	r3, r2
 800d89e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b084      	sub	sp, #16
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d8b6:	f7ff fdab 	bl	800d410 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d8ba:	f7f9 fc83 	bl	80071c4 <HAL_GetTick>
 800d8be:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d8c0:	e009      	b.n	800d8d6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d8c2:	f7f9 fc7f 	bl	80071c4 <HAL_GetTick>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	1ad3      	subs	r3, r2, r3
 800d8cc:	2b02      	cmp	r3, #2
 800d8ce:	d902      	bls.n	800d8d6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d8d0:	2303      	movs	r3, #3
 800d8d2:	73fb      	strb	r3, [r7, #15]
      break;
 800d8d4:	e004      	b.n	800d8e0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d8d6:	f7ff fdaa 	bl	800d42e <LL_RCC_PLLSAI1_IsReady>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d1f0      	bne.n	800d8c2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d8e0:	7bfb      	ldrb	r3, [r7, #15]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d137      	bne.n	800d956 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d8e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8ea:	691b      	ldr	r3, [r3, #16]
 800d8ec:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	021b      	lsls	r3, r3, #8
 800d8f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d8fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d902:	691b      	ldr	r3, [r3, #16]
 800d904:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d910:	4313      	orrs	r3, r2
 800d912:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d914:	f7ff fd6d 	bl	800d3f2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d918:	f7f9 fc54 	bl	80071c4 <HAL_GetTick>
 800d91c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d91e:	e009      	b.n	800d934 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d920:	f7f9 fc50 	bl	80071c4 <HAL_GetTick>
 800d924:	4602      	mov	r2, r0
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	1ad3      	subs	r3, r2, r3
 800d92a:	2b02      	cmp	r3, #2
 800d92c:	d902      	bls.n	800d934 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d92e:	2303      	movs	r3, #3
 800d930:	73fb      	strb	r3, [r7, #15]
        break;
 800d932:	e004      	b.n	800d93e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d934:	f7ff fd7b 	bl	800d42e <LL_RCC_PLLSAI1_IsReady>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d1f0      	bne.n	800d920 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d93e:	7bfb      	ldrb	r3, [r7, #15]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d108      	bne.n	800d956 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d948:	691a      	ldr	r2, [r3, #16]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d952:	4313      	orrs	r3, r2
 800d954:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d956:	7bfb      	ldrb	r3, [r7, #15]
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3710      	adds	r7, #16
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d101      	bne.n	800d972 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800d96e:	2301      	movs	r3, #1
 800d970:	e09f      	b.n	800dab2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d106      	bne.n	800d98c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2200      	movs	r2, #0
 800d982:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f7f5 fd42 	bl	8003410 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2202      	movs	r2, #2
 800d990:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d994:	4b49      	ldr	r3, [pc, #292]	@ (800dabc <HAL_RTC_Init+0x15c>)
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	f003 0310 	and.w	r3, r3, #16
 800d99c:	2b10      	cmp	r3, #16
 800d99e:	d07e      	beq.n	800da9e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	22ca      	movs	r2, #202	@ 0xca
 800d9a6:	625a      	str	r2, [r3, #36]	@ 0x24
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2253      	movs	r2, #83	@ 0x53
 800d9ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 fa1d 	bl	800ddf0 <RTC_EnterInitMode>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d00a      	beq.n	800d9d2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	22ff      	movs	r2, #255	@ 0xff
 800d9c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2204      	movs	r2, #4
 800d9c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	73fb      	strb	r3, [r7, #15]
 800d9d0:	e067      	b.n	800daa2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	6812      	ldr	r2, [r2, #0]
 800d9dc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d9e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9e4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	6899      	ldr	r1, [r3, #8]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	685a      	ldr	r2, [r3, #4]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	691b      	ldr	r3, [r3, #16]
 800d9f4:	431a      	orrs	r2, r3
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	431a      	orrs	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	430a      	orrs	r2, r1
 800da02:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	68d2      	ldr	r2, [r2, #12]
 800da0c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	6919      	ldr	r1, [r3, #16]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	041a      	lsls	r2, r3, #16
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	430a      	orrs	r2, r1
 800da20:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	68da      	ldr	r2, [r3, #12]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800da30:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f022 0203 	bic.w	r2, r2, #3
 800da40:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	69da      	ldr	r2, [r3, #28]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	695b      	ldr	r3, [r3, #20]
 800da50:	431a      	orrs	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	430a      	orrs	r2, r1
 800da58:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	f003 0320 	and.w	r3, r3, #32
 800da64:	2b00      	cmp	r3, #0
 800da66:	d113      	bne.n	800da90 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f000 f99b 	bl	800dda4 <HAL_RTC_WaitForSynchro>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00d      	beq.n	800da90 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	22ff      	movs	r2, #255	@ 0xff
 800da7a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2204      	movs	r2, #4
 800da80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2200      	movs	r2, #0
 800da88:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800da8c:	2301      	movs	r3, #1
 800da8e:	e010      	b.n	800dab2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	22ff      	movs	r2, #255	@ 0xff
 800da96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800da98:	2300      	movs	r3, #0
 800da9a:	73fb      	strb	r3, [r7, #15]
 800da9c:	e001      	b.n	800daa2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800da9e:	2300      	movs	r3, #0
 800daa0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800daa2:	7bfb      	ldrb	r3, [r7, #15]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d103      	bne.n	800dab0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2201      	movs	r2, #1
 800daac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800dab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3710      	adds	r7, #16
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	40002800 	.word	0x40002800

0800dac0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dac0:	b590      	push	{r4, r7, lr}
 800dac2:	b087      	sub	sp, #28
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d101      	bne.n	800dada <HAL_RTC_SetTime+0x1a>
 800dad6:	2302      	movs	r3, #2
 800dad8:	e0b2      	b.n	800dc40 <HAL_RTC_SetTime+0x180>
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2201      	movs	r2, #1
 800dade:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2202      	movs	r2, #2
 800dae6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d126      	bne.n	800db3e <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d102      	bne.n	800db04 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	2200      	movs	r2, #0
 800db02:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	4618      	mov	r0, r3
 800db0a:	f000 f99b 	bl	800de44 <RTC_ByteToBcd2>
 800db0e:	4603      	mov	r3, r0
 800db10:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	785b      	ldrb	r3, [r3, #1]
 800db16:	4618      	mov	r0, r3
 800db18:	f000 f994 	bl	800de44 <RTC_ByteToBcd2>
 800db1c:	4603      	mov	r3, r0
 800db1e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800db20:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	789b      	ldrb	r3, [r3, #2]
 800db26:	4618      	mov	r0, r3
 800db28:	f000 f98c 	bl	800de44 <RTC_ByteToBcd2>
 800db2c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800db2e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	78db      	ldrb	r3, [r3, #3]
 800db36:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800db38:	4313      	orrs	r3, r2
 800db3a:	617b      	str	r3, [r7, #20]
 800db3c:	e018      	b.n	800db70 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d102      	bne.n	800db52 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	2200      	movs	r2, #0
 800db50:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	785b      	ldrb	r3, [r3, #1]
 800db5c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800db5e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800db60:	68ba      	ldr	r2, [r7, #8]
 800db62:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800db64:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	78db      	ldrb	r3, [r3, #3]
 800db6a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800db6c:	4313      	orrs	r3, r2
 800db6e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	22ca      	movs	r2, #202	@ 0xca
 800db76:	625a      	str	r2, [r3, #36]	@ 0x24
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2253      	movs	r2, #83	@ 0x53
 800db7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800db80:	68f8      	ldr	r0, [r7, #12]
 800db82:	f000 f935 	bl	800ddf0 <RTC_EnterInitMode>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d00d      	beq.n	800dba8 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	22ff      	movs	r2, #255	@ 0xff
 800db92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2204      	movs	r2, #4
 800db98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2200      	movs	r2, #0
 800dba0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800dba4:	2301      	movs	r3, #1
 800dba6:	e04b      	b.n	800dc40 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800dbb2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800dbb6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	689a      	ldr	r2, [r3, #8]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800dbc6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	6899      	ldr	r1, [r3, #8]
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	68da      	ldr	r2, [r3, #12]
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	691b      	ldr	r3, [r3, #16]
 800dbd6:	431a      	orrs	r2, r3
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	430a      	orrs	r2, r1
 800dbde:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	68da      	ldr	r2, [r3, #12]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dbee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	f003 0320 	and.w	r3, r3, #32
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d113      	bne.n	800dc26 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dbfe:	68f8      	ldr	r0, [r7, #12]
 800dc00:	f000 f8d0 	bl	800dda4 <HAL_RTC_WaitForSynchro>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d00d      	beq.n	800dc26 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	22ff      	movs	r2, #255	@ 0xff
 800dc10:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2204      	movs	r2, #4
 800dc16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800dc22:	2301      	movs	r3, #1
 800dc24:	e00c      	b.n	800dc40 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	22ff      	movs	r2, #255	@ 0xff
 800dc2c:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2201      	movs	r2, #1
 800dc32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800dc3e:	2300      	movs	r3, #0
  }
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	371c      	adds	r7, #28
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd90      	pop	{r4, r7, pc}

0800dc48 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dc48:	b590      	push	{r4, r7, lr}
 800dc4a:	b087      	sub	sp, #28
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d101      	bne.n	800dc62 <HAL_RTC_SetDate+0x1a>
 800dc5e:	2302      	movs	r3, #2
 800dc60:	e09c      	b.n	800dd9c <HAL_RTC_SetDate+0x154>
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2201      	movs	r2, #1
 800dc66:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2202      	movs	r2, #2
 800dc6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d10e      	bne.n	800dc96 <HAL_RTC_SetDate+0x4e>
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	785b      	ldrb	r3, [r3, #1]
 800dc7c:	f003 0310 	and.w	r3, r3, #16
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d008      	beq.n	800dc96 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	785b      	ldrb	r3, [r3, #1]
 800dc88:	f023 0310 	bic.w	r3, r3, #16
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	330a      	adds	r3, #10
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d11c      	bne.n	800dcd6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	78db      	ldrb	r3, [r3, #3]
 800dca0:	4618      	mov	r0, r3
 800dca2:	f000 f8cf 	bl	800de44 <RTC_ByteToBcd2>
 800dca6:	4603      	mov	r3, r0
 800dca8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	785b      	ldrb	r3, [r3, #1]
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f000 f8c8 	bl	800de44 <RTC_ByteToBcd2>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dcb8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	789b      	ldrb	r3, [r3, #2]
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f000 f8c0 	bl	800de44 <RTC_ByteToBcd2>
 800dcc4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800dcc6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	617b      	str	r3, [r7, #20]
 800dcd4:	e00e      	b.n	800dcf4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	78db      	ldrb	r3, [r3, #3]
 800dcda:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	785b      	ldrb	r3, [r3, #1]
 800dce0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dce2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800dce8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dcf0:	4313      	orrs	r3, r2
 800dcf2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	22ca      	movs	r2, #202	@ 0xca
 800dcfa:	625a      	str	r2, [r3, #36]	@ 0x24
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2253      	movs	r2, #83	@ 0x53
 800dd02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800dd04:	68f8      	ldr	r0, [r7, #12]
 800dd06:	f000 f873 	bl	800ddf0 <RTC_EnterInitMode>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00d      	beq.n	800dd2c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	22ff      	movs	r2, #255	@ 0xff
 800dd16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2204      	movs	r2, #4
 800dd1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800dd28:	2301      	movs	r3, #1
 800dd2a:	e037      	b.n	800dd9c <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dd36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800dd3a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	68da      	ldr	r2, [r3, #12]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dd4a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	f003 0320 	and.w	r3, r3, #32
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d113      	bne.n	800dd82 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f000 f822 	bl	800dda4 <HAL_RTC_WaitForSynchro>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d00d      	beq.n	800dd82 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	22ff      	movs	r2, #255	@ 0xff
 800dd6c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2204      	movs	r2, #4
 800dd72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e00c      	b.n	800dd9c <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	22ff      	movs	r2, #255	@ 0xff
 800dd88:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800dd9a:	2300      	movs	r3, #0
  }
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	371c      	adds	r7, #28
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd90      	pop	{r4, r7, pc}

0800dda4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	68da      	ldr	r2, [r3, #12]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800ddba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ddbc:	f7f9 fa02 	bl	80071c4 <HAL_GetTick>
 800ddc0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ddc2:	e009      	b.n	800ddd8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ddc4:	f7f9 f9fe 	bl	80071c4 <HAL_GetTick>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	1ad3      	subs	r3, r2, r3
 800ddce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ddd2:	d901      	bls.n	800ddd8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800ddd4:	2303      	movs	r3, #3
 800ddd6:	e007      	b.n	800dde8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	f003 0320 	and.w	r3, r3, #32
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d0ee      	beq.n	800ddc4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800dde6:	2300      	movs	r3, #0
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3710      	adds	r7, #16
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	68db      	ldr	r3, [r3, #12]
 800ddfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de02:	2b00      	cmp	r3, #0
 800de04:	d119      	bne.n	800de3a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f04f 32ff 	mov.w	r2, #4294967295
 800de0e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800de10:	f7f9 f9d8 	bl	80071c4 <HAL_GetTick>
 800de14:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800de16:	e009      	b.n	800de2c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800de18:	f7f9 f9d4 	bl	80071c4 <HAL_GetTick>
 800de1c:	4602      	mov	r2, r0
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	1ad3      	subs	r3, r2, r3
 800de22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800de26:	d901      	bls.n	800de2c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800de28:	2303      	movs	r3, #3
 800de2a:	e007      	b.n	800de3c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de36:	2b00      	cmp	r3, #0
 800de38:	d0ee      	beq.n	800de18 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3710      	adds	r7, #16
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	4603      	mov	r3, r0
 800de4c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800de4e:	2300      	movs	r3, #0
 800de50:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800de52:	79fb      	ldrb	r3, [r7, #7]
 800de54:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800de56:	e005      	b.n	800de64 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	3301      	adds	r3, #1
 800de5c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800de5e:	7afb      	ldrb	r3, [r7, #11]
 800de60:	3b0a      	subs	r3, #10
 800de62:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800de64:	7afb      	ldrb	r3, [r7, #11]
 800de66:	2b09      	cmp	r3, #9
 800de68:	d8f6      	bhi.n	800de58 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	011b      	lsls	r3, r3, #4
 800de70:	b2da      	uxtb	r2, r3
 800de72:	7afb      	ldrb	r3, [r7, #11]
 800de74:	4313      	orrs	r3, r2
 800de76:	b2db      	uxtb	r3, r3
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3714      	adds	r7, #20
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b086      	sub	sp, #24
 800de88:	af00      	add	r7, sp, #0
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f893 3020 	ldrb.w	r3, [r3, #32]
 800de96:	2b01      	cmp	r3, #1
 800de98:	d101      	bne.n	800de9e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800de9a:	2302      	movs	r3, #2
 800de9c:	e0a8      	b.n	800dff0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2202      	movs	r2, #2
 800deaa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	22ca      	movs	r2, #202	@ 0xca
 800deb4:	625a      	str	r2, [r3, #36]	@ 0x24
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	2253      	movs	r2, #83	@ 0x53
 800debc:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d020      	beq.n	800df0e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800decc:	f7f9 f97a 	bl	80071c4 <HAL_GetTick>
 800ded0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800ded2:	e015      	b.n	800df00 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ded4:	f7f9 f976 	bl	80071c4 <HAL_GetTick>
 800ded8:	4602      	mov	r2, r0
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	1ad3      	subs	r3, r2, r3
 800dede:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dee2:	d90d      	bls.n	800df00 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	22ff      	movs	r2, #255	@ 0xff
 800deea:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2203      	movs	r2, #3
 800def0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2200      	movs	r2, #0
 800def8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800defc:	2303      	movs	r3, #3
 800defe:	e077      	b.n	800dff0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	68db      	ldr	r3, [r3, #12]
 800df06:	f003 0304 	and.w	r3, r3, #4
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d1e2      	bne.n	800ded4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	689a      	ldr	r2, [r3, #8]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800df1c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	b2da      	uxtb	r2, r3
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800df2e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800df30:	f7f9 f948 	bl	80071c4 <HAL_GetTick>
 800df34:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800df36:	e015      	b.n	800df64 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800df38:	f7f9 f944 	bl	80071c4 <HAL_GetTick>
 800df3c:	4602      	mov	r2, r0
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	1ad3      	subs	r3, r2, r3
 800df42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800df46:	d90d      	bls.n	800df64 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	22ff      	movs	r2, #255	@ 0xff
 800df4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2203      	movs	r2, #3
 800df54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2200      	movs	r2, #0
 800df5c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800df60:	2303      	movs	r3, #3
 800df62:	e045      	b.n	800dff0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	f003 0304 	and.w	r3, r3, #4
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d0e2      	beq.n	800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	689a      	ldr	r2, [r3, #8]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f022 0207 	bic.w	r2, r2, #7
 800df88:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	6899      	ldr	r1, [r3, #8]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	430a      	orrs	r2, r1
 800df98:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800df9a:	4b17      	ldr	r3, [pc, #92]	@ (800dff8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800df9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfa0:	4a15      	ldr	r2, [pc, #84]	@ (800dff8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dfa2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dfa6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800dfaa:	4b13      	ldr	r3, [pc, #76]	@ (800dff8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4a12      	ldr	r2, [pc, #72]	@ (800dff8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dfb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dfb4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	689a      	ldr	r2, [r3, #8]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dfc4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	689a      	ldr	r2, [r3, #8]
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dfd4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	22ff      	movs	r2, #255	@ 0xff
 800dfdc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3718      	adds	r7, #24
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	58000800 	.word	0x58000800

0800dffc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b082      	sub	sp, #8
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	68db      	ldr	r3, [r3, #12]
 800e00a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d00b      	beq.n	800e02a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f000 f818 	bl	800e048 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	b2da      	uxtb	r2, r3
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800e028:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800e02a:	4b06      	ldr	r3, [pc, #24]	@ (800e044 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800e02c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800e030:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2201      	movs	r2, #1
 800e036:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800e03a:	bf00      	nop
 800e03c:	3708      	adds	r7, #8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	58000800 	.word	0x58000800

0800e048 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800e050:	bf00      	nop
 800e052:	370c      	adds	r7, #12
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d101      	bne.n	800e06e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	e095      	b.n	800e19a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e072:	2b00      	cmp	r3, #0
 800e074:	d108      	bne.n	800e088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e07e:	d009      	beq.n	800e094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2200      	movs	r2, #0
 800e084:	61da      	str	r2, [r3, #28]
 800e086:	e005      	b.n	800e094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2200      	movs	r2, #0
 800e092:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d106      	bne.n	800e0b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7f5 fa56 	bl	8003560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2202      	movs	r2, #2
 800e0b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	681a      	ldr	r2, [r3, #0]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e0ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e0d4:	d902      	bls.n	800e0dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	60fb      	str	r3, [r7, #12]
 800e0da:	e002      	b.n	800e0e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e0dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e0e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800e0ea:	d007      	beq.n	800e0fc <HAL_SPI_Init+0xa0>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e0f4:	d002      	beq.n	800e0fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	689b      	ldr	r3, [r3, #8]
 800e108:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e10c:	431a      	orrs	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	691b      	ldr	r3, [r3, #16]
 800e112:	f003 0302 	and.w	r3, r3, #2
 800e116:	431a      	orrs	r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	695b      	ldr	r3, [r3, #20]
 800e11c:	f003 0301 	and.w	r3, r3, #1
 800e120:	431a      	orrs	r2, r3
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	699b      	ldr	r3, [r3, #24]
 800e126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e12a:	431a      	orrs	r2, r3
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	69db      	ldr	r3, [r3, #28]
 800e130:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e134:	431a      	orrs	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6a1b      	ldr	r3, [r3, #32]
 800e13a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e13e:	ea42 0103 	orr.w	r1, r2, r3
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e146:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	430a      	orrs	r2, r1
 800e150:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	699b      	ldr	r3, [r3, #24]
 800e156:	0c1b      	lsrs	r3, r3, #16
 800e158:	f003 0204 	and.w	r2, r3, #4
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e160:	f003 0310 	and.w	r3, r3, #16
 800e164:	431a      	orrs	r2, r3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e16a:	f003 0308 	and.w	r3, r3, #8
 800e16e:	431a      	orrs	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e178:	ea42 0103 	orr.w	r1, r2, r3
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	430a      	orrs	r2, r1
 800e188:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800e198:	2300      	movs	r3, #0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b088      	sub	sp, #32
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	60f8      	str	r0, [r7, #12]
 800e1aa:	60b9      	str	r1, [r7, #8]
 800e1ac:	603b      	str	r3, [r7, #0]
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e1b2:	f7f9 f807 	bl	80071c4 <HAL_GetTick>
 800e1b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800e1b8:	88fb      	ldrh	r3, [r7, #6]
 800e1ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	d001      	beq.n	800e1cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800e1c8:	2302      	movs	r3, #2
 800e1ca:	e15c      	b.n	800e486 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d002      	beq.n	800e1d8 <HAL_SPI_Transmit+0x36>
 800e1d2:	88fb      	ldrh	r3, [r7, #6]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d101      	bne.n	800e1dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	e154      	b.n	800e486 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d101      	bne.n	800e1ea <HAL_SPI_Transmit+0x48>
 800e1e6:	2302      	movs	r3, #2
 800e1e8:	e14d      	b.n	800e486 <HAL_SPI_Transmit+0x2e4>
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2203      	movs	r2, #3
 800e1f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	88fa      	ldrh	r2, [r7, #6]
 800e20a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	88fa      	ldrh	r2, [r7, #6]
 800e210:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2200      	movs	r2, #0
 800e216:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2200      	movs	r2, #0
 800e224:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2200      	movs	r2, #0
 800e22c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2200      	movs	r2, #0
 800e232:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e23c:	d10f      	bne.n	800e25e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e24c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e25c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e268:	2b40      	cmp	r3, #64	@ 0x40
 800e26a:	d007      	beq.n	800e27c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e27a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e284:	d952      	bls.n	800e32c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d002      	beq.n	800e294 <HAL_SPI_Transmit+0xf2>
 800e28e:	8b7b      	ldrh	r3, [r7, #26]
 800e290:	2b01      	cmp	r3, #1
 800e292:	d145      	bne.n	800e320 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e298:	881a      	ldrh	r2, [r3, #0]
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2a4:	1c9a      	adds	r2, r3, #2
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	3b01      	subs	r3, #1
 800e2b2:	b29a      	uxth	r2, r3
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e2b8:	e032      	b.n	800e320 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	f003 0302 	and.w	r3, r3, #2
 800e2c4:	2b02      	cmp	r3, #2
 800e2c6:	d112      	bne.n	800e2ee <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2cc:	881a      	ldrh	r2, [r3, #0]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2d8:	1c9a      	adds	r2, r3, #2
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	3b01      	subs	r3, #1
 800e2e6:	b29a      	uxth	r2, r3
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e2ec:	e018      	b.n	800e320 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2ee:	f7f8 ff69 	bl	80071c4 <HAL_GetTick>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	1ad3      	subs	r3, r2, r3
 800e2f8:	683a      	ldr	r2, [r7, #0]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d803      	bhi.n	800e306 <HAL_SPI_Transmit+0x164>
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e304:	d102      	bne.n	800e30c <HAL_SPI_Transmit+0x16a>
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d109      	bne.n	800e320 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2201      	movs	r2, #1
 800e310:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2200      	movs	r2, #0
 800e318:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e31c:	2303      	movs	r3, #3
 800e31e:	e0b2      	b.n	800e486 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e324:	b29b      	uxth	r3, r3
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1c7      	bne.n	800e2ba <HAL_SPI_Transmit+0x118>
 800e32a:	e083      	b.n	800e434 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <HAL_SPI_Transmit+0x198>
 800e334:	8b7b      	ldrh	r3, [r7, #26]
 800e336:	2b01      	cmp	r3, #1
 800e338:	d177      	bne.n	800e42a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e33e:	b29b      	uxth	r3, r3
 800e340:	2b01      	cmp	r3, #1
 800e342:	d912      	bls.n	800e36a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e348:	881a      	ldrh	r2, [r3, #0]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e354:	1c9a      	adds	r2, r3, #2
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e35e:	b29b      	uxth	r3, r3
 800e360:	3b02      	subs	r3, #2
 800e362:	b29a      	uxth	r2, r3
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e368:	e05f      	b.n	800e42a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	330c      	adds	r3, #12
 800e374:	7812      	ldrb	r2, [r2, #0]
 800e376:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e37c:	1c5a      	adds	r2, r3, #1
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e386:	b29b      	uxth	r3, r3
 800e388:	3b01      	subs	r3, #1
 800e38a:	b29a      	uxth	r2, r3
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e390:	e04b      	b.n	800e42a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	f003 0302 	and.w	r3, r3, #2
 800e39c:	2b02      	cmp	r3, #2
 800e39e:	d12b      	bne.n	800e3f8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d912      	bls.n	800e3d0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3ae:	881a      	ldrh	r2, [r3, #0]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3ba:	1c9a      	adds	r2, r3, #2
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	3b02      	subs	r3, #2
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e3ce:	e02c      	b.n	800e42a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	330c      	adds	r3, #12
 800e3da:	7812      	ldrb	r2, [r2, #0]
 800e3dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3e2:	1c5a      	adds	r2, r3, #1
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e3f6:	e018      	b.n	800e42a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3f8:	f7f8 fee4 	bl	80071c4 <HAL_GetTick>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	1ad3      	subs	r3, r2, r3
 800e402:	683a      	ldr	r2, [r7, #0]
 800e404:	429a      	cmp	r2, r3
 800e406:	d803      	bhi.n	800e410 <HAL_SPI_Transmit+0x26e>
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40e:	d102      	bne.n	800e416 <HAL_SPI_Transmit+0x274>
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d109      	bne.n	800e42a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2201      	movs	r2, #1
 800e41a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e426:	2303      	movs	r3, #3
 800e428:	e02d      	b.n	800e486 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e42e:	b29b      	uxth	r3, r3
 800e430:	2b00      	cmp	r3, #0
 800e432:	d1ae      	bne.n	800e392 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e434:	69fa      	ldr	r2, [r7, #28]
 800e436:	6839      	ldr	r1, [r7, #0]
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f000 fe15 	bl	800f068 <SPI_EndRxTxTransaction>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d002      	beq.n	800e44a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2220      	movs	r2, #32
 800e448:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10a      	bne.n	800e468 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e452:	2300      	movs	r3, #0
 800e454:	617b      	str	r3, [r7, #20]
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	617b      	str	r3, [r7, #20]
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	689b      	ldr	r3, [r3, #8]
 800e464:	617b      	str	r3, [r7, #20]
 800e466:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2201      	movs	r2, #1
 800e46c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2200      	movs	r2, #0
 800e474:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800e480:	2301      	movs	r3, #1
 800e482:	e000      	b.n	800e486 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800e484:	2300      	movs	r3, #0
  }
}
 800e486:	4618      	mov	r0, r3
 800e488:	3720      	adds	r7, #32
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e48e:	b580      	push	{r7, lr}
 800e490:	b088      	sub	sp, #32
 800e492:	af02      	add	r7, sp, #8
 800e494:	60f8      	str	r0, [r7, #12]
 800e496:	60b9      	str	r1, [r7, #8]
 800e498:	603b      	str	r3, [r7, #0]
 800e49a:	4613      	mov	r3, r2
 800e49c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d001      	beq.n	800e4ae <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800e4aa:	2302      	movs	r3, #2
 800e4ac:	e123      	b.n	800e6f6 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d002      	beq.n	800e4ba <HAL_SPI_Receive+0x2c>
 800e4b4:	88fb      	ldrh	r3, [r7, #6]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d101      	bne.n	800e4be <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	e11b      	b.n	800e6f6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e4c6:	d112      	bne.n	800e4ee <HAL_SPI_Receive+0x60>
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d10e      	bne.n	800e4ee <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2204      	movs	r2, #4
 800e4d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e4d8:	88fa      	ldrh	r2, [r7, #6]
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	4613      	mov	r3, r2
 800e4e0:	68ba      	ldr	r2, [r7, #8]
 800e4e2:	68b9      	ldr	r1, [r7, #8]
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f000 f90a 	bl	800e6fe <HAL_SPI_TransmitReceive>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	e103      	b.n	800e6f6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4ee:	f7f8 fe69 	bl	80071c4 <HAL_GetTick>
 800e4f2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d101      	bne.n	800e502 <HAL_SPI_Receive+0x74>
 800e4fe:	2302      	movs	r3, #2
 800e500:	e0f9      	b.n	800e6f6 <HAL_SPI_Receive+0x268>
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2201      	movs	r2, #1
 800e506:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2204      	movs	r2, #4
 800e50e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2200      	movs	r2, #0
 800e516:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	68ba      	ldr	r2, [r7, #8]
 800e51c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	88fa      	ldrh	r2, [r7, #6]
 800e522:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	88fa      	ldrh	r2, [r7, #6]
 800e52a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2200      	movs	r2, #0
 800e532:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2200      	movs	r2, #0
 800e538:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2200      	movs	r2, #0
 800e544:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2200      	movs	r2, #0
 800e54a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e554:	d908      	bls.n	800e568 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	685a      	ldr	r2, [r3, #4]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e564:	605a      	str	r2, [r3, #4]
 800e566:	e007      	b.n	800e578 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	685a      	ldr	r2, [r3, #4]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e576:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	689b      	ldr	r3, [r3, #8]
 800e57c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e580:	d10f      	bne.n	800e5a2 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e590:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e5a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5ac:	2b40      	cmp	r3, #64	@ 0x40
 800e5ae:	d007      	beq.n	800e5c0 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e5be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e5c8:	d875      	bhi.n	800e6b6 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e5ca:	e037      	b.n	800e63c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	689b      	ldr	r3, [r3, #8]
 800e5d2:	f003 0301 	and.w	r3, r3, #1
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d117      	bne.n	800e60a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f103 020c 	add.w	r2, r3, #12
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5e6:	7812      	ldrb	r2, [r2, #0]
 800e5e8:	b2d2      	uxtb	r2, r2
 800e5ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5f0:	1c5a      	adds	r2, r3, #1
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	3b01      	subs	r3, #1
 800e600:	b29a      	uxth	r2, r3
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e608:	e018      	b.n	800e63c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e60a:	f7f8 fddb 	bl	80071c4 <HAL_GetTick>
 800e60e:	4602      	mov	r2, r0
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	1ad3      	subs	r3, r2, r3
 800e614:	683a      	ldr	r2, [r7, #0]
 800e616:	429a      	cmp	r2, r3
 800e618:	d803      	bhi.n	800e622 <HAL_SPI_Receive+0x194>
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e620:	d102      	bne.n	800e628 <HAL_SPI_Receive+0x19a>
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d109      	bne.n	800e63c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2201      	movs	r2, #1
 800e62c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2200      	movs	r2, #0
 800e634:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e638:	2303      	movs	r3, #3
 800e63a:	e05c      	b.n	800e6f6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e642:	b29b      	uxth	r3, r3
 800e644:	2b00      	cmp	r3, #0
 800e646:	d1c1      	bne.n	800e5cc <HAL_SPI_Receive+0x13e>
 800e648:	e03b      	b.n	800e6c2 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	f003 0301 	and.w	r3, r3, #1
 800e654:	2b01      	cmp	r3, #1
 800e656:	d115      	bne.n	800e684 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	68da      	ldr	r2, [r3, #12]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e662:	b292      	uxth	r2, r2
 800e664:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e66a:	1c9a      	adds	r2, r3, #2
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e676:	b29b      	uxth	r3, r3
 800e678:	3b01      	subs	r3, #1
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e682:	e018      	b.n	800e6b6 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e684:	f7f8 fd9e 	bl	80071c4 <HAL_GetTick>
 800e688:	4602      	mov	r2, r0
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	1ad3      	subs	r3, r2, r3
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	429a      	cmp	r2, r3
 800e692:	d803      	bhi.n	800e69c <HAL_SPI_Receive+0x20e>
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e69a:	d102      	bne.n	800e6a2 <HAL_SPI_Receive+0x214>
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d109      	bne.n	800e6b6 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e6b2:	2303      	movs	r3, #3
 800e6b4:	e01f      	b.n	800e6f6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d1c3      	bne.n	800e64a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e6c2:	697a      	ldr	r2, [r7, #20]
 800e6c4:	6839      	ldr	r1, [r7, #0]
 800e6c6:	68f8      	ldr	r0, [r7, #12]
 800e6c8:	f000 fc76 	bl	800efb8 <SPI_EndRxTransaction>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d002      	beq.n	800e6d8 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2220      	movs	r2, #32
 800e6d6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d001      	beq.n	800e6f4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	e000      	b.n	800e6f6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800e6f4:	2300      	movs	r3, #0
  }
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3718      	adds	r7, #24
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e6fe:	b580      	push	{r7, lr}
 800e700:	b08a      	sub	sp, #40	@ 0x28
 800e702:	af00      	add	r7, sp, #0
 800e704:	60f8      	str	r0, [r7, #12]
 800e706:	60b9      	str	r1, [r7, #8]
 800e708:	607a      	str	r2, [r7, #4]
 800e70a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e70c:	2301      	movs	r3, #1
 800e70e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e710:	f7f8 fd58 	bl	80071c4 <HAL_GetTick>
 800e714:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e71c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800e724:	887b      	ldrh	r3, [r7, #2]
 800e726:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800e728:	887b      	ldrh	r3, [r7, #2]
 800e72a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e72c:	7ffb      	ldrb	r3, [r7, #31]
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d00c      	beq.n	800e74c <HAL_SPI_TransmitReceive+0x4e>
 800e732:	69bb      	ldr	r3, [r7, #24]
 800e734:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e738:	d106      	bne.n	800e748 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d102      	bne.n	800e748 <HAL_SPI_TransmitReceive+0x4a>
 800e742:	7ffb      	ldrb	r3, [r7, #31]
 800e744:	2b04      	cmp	r3, #4
 800e746:	d001      	beq.n	800e74c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800e748:	2302      	movs	r3, #2
 800e74a:	e1f3      	b.n	800eb34 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d005      	beq.n	800e75e <HAL_SPI_TransmitReceive+0x60>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d002      	beq.n	800e75e <HAL_SPI_TransmitReceive+0x60>
 800e758:	887b      	ldrh	r3, [r7, #2]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d101      	bne.n	800e762 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800e75e:	2301      	movs	r3, #1
 800e760:	e1e8      	b.n	800eb34 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d101      	bne.n	800e770 <HAL_SPI_TransmitReceive+0x72>
 800e76c:	2302      	movs	r3, #2
 800e76e:	e1e1      	b.n	800eb34 <HAL_SPI_TransmitReceive+0x436>
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2201      	movs	r2, #1
 800e774:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	2b04      	cmp	r3, #4
 800e782:	d003      	beq.n	800e78c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2205      	movs	r2, #5
 800e788:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2200      	movs	r2, #0
 800e790:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	887a      	ldrh	r2, [r7, #2]
 800e79c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	887a      	ldrh	r2, [r7, #2]
 800e7a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	68ba      	ldr	r2, [r7, #8]
 800e7ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	887a      	ldrh	r2, [r7, #2]
 800e7b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	887a      	ldrh	r2, [r7, #2]
 800e7b8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e7ce:	d802      	bhi.n	800e7d6 <HAL_SPI_TransmitReceive+0xd8>
 800e7d0:	8abb      	ldrh	r3, [r7, #20]
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d908      	bls.n	800e7e8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e7e4:	605a      	str	r2, [r3, #4]
 800e7e6:	e007      	b.n	800e7f8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	685a      	ldr	r2, [r3, #4]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e7f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e802:	2b40      	cmp	r3, #64	@ 0x40
 800e804:	d007      	beq.n	800e816 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	681a      	ldr	r2, [r3, #0]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e814:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	68db      	ldr	r3, [r3, #12]
 800e81a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e81e:	f240 8083 	bls.w	800e928 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d002      	beq.n	800e830 <HAL_SPI_TransmitReceive+0x132>
 800e82a:	8afb      	ldrh	r3, [r7, #22]
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d16f      	bne.n	800e910 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e834:	881a      	ldrh	r2, [r3, #0]
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e840:	1c9a      	adds	r2, r3, #2
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	3b01      	subs	r3, #1
 800e84e:	b29a      	uxth	r2, r3
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e854:	e05c      	b.n	800e910 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	689b      	ldr	r3, [r3, #8]
 800e85c:	f003 0302 	and.w	r3, r3, #2
 800e860:	2b02      	cmp	r3, #2
 800e862:	d11b      	bne.n	800e89c <HAL_SPI_TransmitReceive+0x19e>
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e868:	b29b      	uxth	r3, r3
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d016      	beq.n	800e89c <HAL_SPI_TransmitReceive+0x19e>
 800e86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e870:	2b01      	cmp	r3, #1
 800e872:	d113      	bne.n	800e89c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e878:	881a      	ldrh	r2, [r3, #0]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e884:	1c9a      	adds	r2, r3, #2
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e88e:	b29b      	uxth	r3, r3
 800e890:	3b01      	subs	r3, #1
 800e892:	b29a      	uxth	r2, r3
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e898:	2300      	movs	r3, #0
 800e89a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	689b      	ldr	r3, [r3, #8]
 800e8a2:	f003 0301 	and.w	r3, r3, #1
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d11c      	bne.n	800e8e4 <HAL_SPI_TransmitReceive+0x1e6>
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e8b0:	b29b      	uxth	r3, r3
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d016      	beq.n	800e8e4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	68da      	ldr	r2, [r3, #12]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8c0:	b292      	uxth	r2, r2
 800e8c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8c8:	1c9a      	adds	r2, r3, #2
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	3b01      	subs	r3, #1
 800e8d8:	b29a      	uxth	r2, r3
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e8e4:	f7f8 fc6e 	bl	80071c4 <HAL_GetTick>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	6a3b      	ldr	r3, [r7, #32]
 800e8ec:	1ad3      	subs	r3, r2, r3
 800e8ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d80d      	bhi.n	800e910 <HAL_SPI_TransmitReceive+0x212>
 800e8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8fa:	d009      	beq.n	800e910 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2201      	movs	r2, #1
 800e900:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2200      	movs	r2, #0
 800e908:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800e90c:	2303      	movs	r3, #3
 800e90e:	e111      	b.n	800eb34 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e914:	b29b      	uxth	r3, r3
 800e916:	2b00      	cmp	r3, #0
 800e918:	d19d      	bne.n	800e856 <HAL_SPI_TransmitReceive+0x158>
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e920:	b29b      	uxth	r3, r3
 800e922:	2b00      	cmp	r3, #0
 800e924:	d197      	bne.n	800e856 <HAL_SPI_TransmitReceive+0x158>
 800e926:	e0e5      	b.n	800eaf4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d003      	beq.n	800e938 <HAL_SPI_TransmitReceive+0x23a>
 800e930:	8afb      	ldrh	r3, [r7, #22]
 800e932:	2b01      	cmp	r3, #1
 800e934:	f040 80d1 	bne.w	800eada <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e93c:	b29b      	uxth	r3, r3
 800e93e:	2b01      	cmp	r3, #1
 800e940:	d912      	bls.n	800e968 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e946:	881a      	ldrh	r2, [r3, #0]
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e952:	1c9a      	adds	r2, r3, #2
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	3b02      	subs	r3, #2
 800e960:	b29a      	uxth	r2, r3
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e966:	e0b8      	b.n	800eada <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	330c      	adds	r3, #12
 800e972:	7812      	ldrb	r2, [r2, #0]
 800e974:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e97a:	1c5a      	adds	r2, r3, #1
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e984:	b29b      	uxth	r3, r3
 800e986:	3b01      	subs	r3, #1
 800e988:	b29a      	uxth	r2, r3
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e98e:	e0a4      	b.n	800eada <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	689b      	ldr	r3, [r3, #8]
 800e996:	f003 0302 	and.w	r3, r3, #2
 800e99a:	2b02      	cmp	r3, #2
 800e99c:	d134      	bne.n	800ea08 <HAL_SPI_TransmitReceive+0x30a>
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e9a2:	b29b      	uxth	r3, r3
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d02f      	beq.n	800ea08 <HAL_SPI_TransmitReceive+0x30a>
 800e9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9aa:	2b01      	cmp	r3, #1
 800e9ac:	d12c      	bne.n	800ea08 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d912      	bls.n	800e9de <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9bc:	881a      	ldrh	r2, [r3, #0]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9c8:	1c9a      	adds	r2, r3, #2
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	3b02      	subs	r3, #2
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e9dc:	e012      	b.n	800ea04 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	330c      	adds	r3, #12
 800e9e8:	7812      	ldrb	r2, [r2, #0]
 800e9ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9f0:	1c5a      	adds	r2, r3, #1
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ea04:	2300      	movs	r3, #0
 800ea06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	f003 0301 	and.w	r3, r3, #1
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d148      	bne.n	800eaa8 <HAL_SPI_TransmitReceive+0x3aa>
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ea1c:	b29b      	uxth	r3, r3
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d042      	beq.n	800eaa8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d923      	bls.n	800ea76 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	68da      	ldr	r2, [r3, #12]
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea38:	b292      	uxth	r2, r2
 800ea3a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea40:	1c9a      	adds	r2, r3, #2
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	3b02      	subs	r3, #2
 800ea50:	b29a      	uxth	r2, r3
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d81f      	bhi.n	800eaa4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	685a      	ldr	r2, [r3, #4]
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ea72:	605a      	str	r2, [r3, #4]
 800ea74:	e016      	b.n	800eaa4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f103 020c 	add.w	r2, r3, #12
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea82:	7812      	ldrb	r2, [r2, #0]
 800ea84:	b2d2      	uxtb	r2, r2
 800ea86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea8c:	1c5a      	adds	r2, r3, #1
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	3b01      	subs	r3, #1
 800ea9c:	b29a      	uxth	r2, r3
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eaa8:	f7f8 fb8c 	bl	80071c4 <HAL_GetTick>
 800eaac:	4602      	mov	r2, r0
 800eaae:	6a3b      	ldr	r3, [r7, #32]
 800eab0:	1ad3      	subs	r3, r2, r3
 800eab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d803      	bhi.n	800eac0 <HAL_SPI_TransmitReceive+0x3c2>
 800eab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eabe:	d102      	bne.n	800eac6 <HAL_SPI_TransmitReceive+0x3c8>
 800eac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d109      	bne.n	800eada <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2201      	movs	r2, #1
 800eaca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2200      	movs	r2, #0
 800ead2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800ead6:	2303      	movs	r3, #3
 800ead8:	e02c      	b.n	800eb34 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eade:	b29b      	uxth	r3, r3
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f47f af55 	bne.w	800e990 <HAL_SPI_TransmitReceive+0x292>
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	f47f af4e 	bne.w	800e990 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eaf4:	6a3a      	ldr	r2, [r7, #32]
 800eaf6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f000 fab5 	bl	800f068 <SPI_EndRxTxTransaction>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d008      	beq.n	800eb16 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2220      	movs	r2, #32
 800eb08:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800eb12:	2301      	movs	r3, #1
 800eb14:	e00e      	b.n	800eb34 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2201      	movs	r2, #1
 800eb1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d001      	beq.n	800eb32 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e000      	b.n	800eb34 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800eb32:	2300      	movs	r3, #0
  }
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3728      	adds	r7, #40	@ 0x28
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b088      	sub	sp, #32
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	689b      	ldr	r3, [r3, #8]
 800eb52:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800eb54:	69bb      	ldr	r3, [r7, #24]
 800eb56:	099b      	lsrs	r3, r3, #6
 800eb58:	f003 0301 	and.w	r3, r3, #1
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d10f      	bne.n	800eb80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00a      	beq.n	800eb80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	099b      	lsrs	r3, r3, #6
 800eb6e:	f003 0301 	and.w	r3, r3, #1
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d004      	beq.n	800eb80 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	4798      	blx	r3
    return;
 800eb7e:	e0d7      	b.n	800ed30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	085b      	lsrs	r3, r3, #1
 800eb84:	f003 0301 	and.w	r3, r3, #1
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d00a      	beq.n	800eba2 <HAL_SPI_IRQHandler+0x66>
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	09db      	lsrs	r3, r3, #7
 800eb90:	f003 0301 	and.w	r3, r3, #1
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d004      	beq.n	800eba2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	4798      	blx	r3
    return;
 800eba0:	e0c6      	b.n	800ed30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800eba2:	69bb      	ldr	r3, [r7, #24]
 800eba4:	095b      	lsrs	r3, r3, #5
 800eba6:	f003 0301 	and.w	r3, r3, #1
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d10c      	bne.n	800ebc8 <HAL_SPI_IRQHandler+0x8c>
 800ebae:	69bb      	ldr	r3, [r7, #24]
 800ebb0:	099b      	lsrs	r3, r3, #6
 800ebb2:	f003 0301 	and.w	r3, r3, #1
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d106      	bne.n	800ebc8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	0a1b      	lsrs	r3, r3, #8
 800ebbe:	f003 0301 	and.w	r3, r3, #1
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f000 80b4 	beq.w	800ed30 <HAL_SPI_IRQHandler+0x1f4>
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	095b      	lsrs	r3, r3, #5
 800ebcc:	f003 0301 	and.w	r3, r3, #1
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	f000 80ad 	beq.w	800ed30 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ebd6:	69bb      	ldr	r3, [r7, #24]
 800ebd8:	099b      	lsrs	r3, r3, #6
 800ebda:	f003 0301 	and.w	r3, r3, #1
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d023      	beq.n	800ec2a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	2b03      	cmp	r3, #3
 800ebec:	d011      	beq.n	800ec12 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ebf2:	f043 0204 	orr.w	r2, r3, #4
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	617b      	str	r3, [r7, #20]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	68db      	ldr	r3, [r3, #12]
 800ec04:	617b      	str	r3, [r7, #20]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	689b      	ldr	r3, [r3, #8]
 800ec0c:	617b      	str	r3, [r7, #20]
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	e00b      	b.n	800ec2a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ec12:	2300      	movs	r3, #0
 800ec14:	613b      	str	r3, [r7, #16]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	613b      	str	r3, [r7, #16]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	689b      	ldr	r3, [r3, #8]
 800ec24:	613b      	str	r3, [r7, #16]
 800ec26:	693b      	ldr	r3, [r7, #16]
        return;
 800ec28:	e082      	b.n	800ed30 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	095b      	lsrs	r3, r3, #5
 800ec2e:	f003 0301 	and.w	r3, r3, #1
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d014      	beq.n	800ec60 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec3a:	f043 0201 	orr.w	r2, r3, #1
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ec42:	2300      	movs	r3, #0
 800ec44:	60fb      	str	r3, [r7, #12]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	60fb      	str	r3, [r7, #12]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ec5c:	601a      	str	r2, [r3, #0]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	0a1b      	lsrs	r3, r3, #8
 800ec64:	f003 0301 	and.w	r3, r3, #1
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d00c      	beq.n	800ec86 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec70:	f043 0208 	orr.w	r2, r3, #8
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ec78:	2300      	movs	r3, #0
 800ec7a:	60bb      	str	r3, [r7, #8]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	60bb      	str	r3, [r7, #8]
 800ec84:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d04f      	beq.n	800ed2e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	685a      	ldr	r2, [r3, #4]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ec9c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2201      	movs	r2, #1
 800eca2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800eca6:	69fb      	ldr	r3, [r7, #28]
 800eca8:	f003 0302 	and.w	r3, r3, #2
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d104      	bne.n	800ecba <HAL_SPI_IRQHandler+0x17e>
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	f003 0301 	and.w	r3, r3, #1
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d034      	beq.n	800ed24 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	685a      	ldr	r2, [r3, #4]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f022 0203 	bic.w	r2, r2, #3
 800ecc8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d011      	beq.n	800ecf6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecd6:	4a18      	ldr	r2, [pc, #96]	@ (800ed38 <HAL_SPI_IRQHandler+0x1fc>)
 800ecd8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7f9 fdbe 	bl	8008860 <HAL_DMA_Abort_IT>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d005      	beq.n	800ecf6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ecee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d016      	beq.n	800ed2c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed02:	4a0d      	ldr	r2, [pc, #52]	@ (800ed38 <HAL_SPI_IRQHandler+0x1fc>)
 800ed04:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7f9 fda8 	bl	8008860 <HAL_DMA_Abort_IT>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d00a      	beq.n	800ed2c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800ed22:	e003      	b.n	800ed2c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f000 f809 	bl	800ed3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ed2a:	e000      	b.n	800ed2e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ed2c:	bf00      	nop
    return;
 800ed2e:	bf00      	nop
  }
}
 800ed30:	3720      	adds	r7, #32
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	0800ed51 	.word	0x0800ed51

0800ed3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ed44:	bf00      	nop
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2200      	movs	r2, #0
 800ed62:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ed6c:	68f8      	ldr	r0, [r7, #12]
 800ed6e:	f7ff ffe5 	bl	800ed3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ed72:	bf00      	nop
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
	...

0800ed7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b088      	sub	sp, #32
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	603b      	str	r3, [r7, #0]
 800ed88:	4613      	mov	r3, r2
 800ed8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ed8c:	f7f8 fa1a 	bl	80071c4 <HAL_GetTick>
 800ed90:	4602      	mov	r2, r0
 800ed92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed94:	1a9b      	subs	r3, r3, r2
 800ed96:	683a      	ldr	r2, [r7, #0]
 800ed98:	4413      	add	r3, r2
 800ed9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ed9c:	f7f8 fa12 	bl	80071c4 <HAL_GetTick>
 800eda0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800eda2:	4b39      	ldr	r3, [pc, #228]	@ (800ee88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	015b      	lsls	r3, r3, #5
 800eda8:	0d1b      	lsrs	r3, r3, #20
 800edaa:	69fa      	ldr	r2, [r7, #28]
 800edac:	fb02 f303 	mul.w	r3, r2, r3
 800edb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800edb2:	e054      	b.n	800ee5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edba:	d050      	beq.n	800ee5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800edbc:	f7f8 fa02 	bl	80071c4 <HAL_GetTick>
 800edc0:	4602      	mov	r2, r0
 800edc2:	69bb      	ldr	r3, [r7, #24]
 800edc4:	1ad3      	subs	r3, r2, r3
 800edc6:	69fa      	ldr	r2, [r7, #28]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d902      	bls.n	800edd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800edcc:	69fb      	ldr	r3, [r7, #28]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d13d      	bne.n	800ee4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	685a      	ldr	r2, [r3, #4]
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ede0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800edea:	d111      	bne.n	800ee10 <SPI_WaitFlagStateUntilTimeout+0x94>
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800edf4:	d004      	beq.n	800ee00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	689b      	ldr	r3, [r3, #8]
 800edfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800edfe:	d107      	bne.n	800ee10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	681a      	ldr	r2, [r3, #0]
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ee0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ee18:	d10f      	bne.n	800ee3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	681a      	ldr	r2, [r3, #0]
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ee28:	601a      	str	r2, [r3, #0]
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ee38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2200      	movs	r2, #0
 800ee46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ee4a:	2303      	movs	r3, #3
 800ee4c:	e017      	b.n	800ee7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d101      	bne.n	800ee58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ee54:	2300      	movs	r3, #0
 800ee56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	3b01      	subs	r3, #1
 800ee5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	689a      	ldr	r2, [r3, #8]
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	4013      	ands	r3, r2
 800ee68:	68ba      	ldr	r2, [r7, #8]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	bf0c      	ite	eq
 800ee6e:	2301      	moveq	r3, #1
 800ee70:	2300      	movne	r3, #0
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	461a      	mov	r2, r3
 800ee76:	79fb      	ldrb	r3, [r7, #7]
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d19b      	bne.n	800edb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ee7c:	2300      	movs	r3, #0
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3720      	adds	r7, #32
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	20000030 	.word	0x20000030

0800ee8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b08a      	sub	sp, #40	@ 0x28
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	60f8      	str	r0, [r7, #12]
 800ee94:	60b9      	str	r1, [r7, #8]
 800ee96:	607a      	str	r2, [r7, #4]
 800ee98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ee9e:	f7f8 f991 	bl	80071c4 <HAL_GetTick>
 800eea2:	4602      	mov	r2, r0
 800eea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eea6:	1a9b      	subs	r3, r3, r2
 800eea8:	683a      	ldr	r2, [r7, #0]
 800eeaa:	4413      	add	r3, r2
 800eeac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800eeae:	f7f8 f989 	bl	80071c4 <HAL_GetTick>
 800eeb2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	330c      	adds	r3, #12
 800eeba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800eebc:	4b3d      	ldr	r3, [pc, #244]	@ (800efb4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	4613      	mov	r3, r2
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	4413      	add	r3, r2
 800eec6:	00da      	lsls	r2, r3, #3
 800eec8:	1ad3      	subs	r3, r2, r3
 800eeca:	0d1b      	lsrs	r3, r3, #20
 800eecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eece:	fb02 f303 	mul.w	r3, r2, r3
 800eed2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800eed4:	e060      	b.n	800ef98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800eedc:	d107      	bne.n	800eeee <SPI_WaitFifoStateUntilTimeout+0x62>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d104      	bne.n	800eeee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800eeec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eef4:	d050      	beq.n	800ef98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eef6:	f7f8 f965 	bl	80071c4 <HAL_GetTick>
 800eefa:	4602      	mov	r2, r0
 800eefc:	6a3b      	ldr	r3, [r7, #32]
 800eefe:	1ad3      	subs	r3, r2, r3
 800ef00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d902      	bls.n	800ef0c <SPI_WaitFifoStateUntilTimeout+0x80>
 800ef06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d13d      	bne.n	800ef88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	685a      	ldr	r2, [r3, #4]
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ef1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ef24:	d111      	bne.n	800ef4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	689b      	ldr	r3, [r3, #8]
 800ef2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef2e:	d004      	beq.n	800ef3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ef38:	d107      	bne.n	800ef4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ef48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ef52:	d10f      	bne.n	800ef74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ef62:	601a      	str	r2, [r3, #0]
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ef72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2201      	movs	r2, #1
 800ef78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ef84:	2303      	movs	r3, #3
 800ef86:	e010      	b.n	800efaa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d101      	bne.n	800ef92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	3b01      	subs	r3, #1
 800ef96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	689a      	ldr	r2, [r3, #8]
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	4013      	ands	r3, r2
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d196      	bne.n	800eed6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800efa8:	2300      	movs	r3, #0
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3728      	adds	r7, #40	@ 0x28
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	20000030 	.word	0x20000030

0800efb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b086      	sub	sp, #24
 800efbc:	af02      	add	r7, sp, #8
 800efbe:	60f8      	str	r0, [r7, #12]
 800efc0:	60b9      	str	r1, [r7, #8]
 800efc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800efcc:	d111      	bne.n	800eff2 <SPI_EndRxTransaction+0x3a>
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800efd6:	d004      	beq.n	800efe2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	689b      	ldr	r3, [r3, #8]
 800efdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800efe0:	d107      	bne.n	800eff2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	681a      	ldr	r2, [r3, #0]
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eff0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	2200      	movs	r2, #0
 800effa:	2180      	movs	r1, #128	@ 0x80
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f7ff febd 	bl	800ed7c <SPI_WaitFlagStateUntilTimeout>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d007      	beq.n	800f018 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f00c:	f043 0220 	orr.w	r2, r3, #32
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f014:	2303      	movs	r3, #3
 800f016:	e023      	b.n	800f060 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f020:	d11d      	bne.n	800f05e <SPI_EndRxTransaction+0xa6>
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	689b      	ldr	r3, [r3, #8]
 800f026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f02a:	d004      	beq.n	800f036 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	689b      	ldr	r3, [r3, #8]
 800f030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f034:	d113      	bne.n	800f05e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	2200      	movs	r2, #0
 800f03e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800f042:	68f8      	ldr	r0, [r7, #12]
 800f044:	f7ff ff22 	bl	800ee8c <SPI_WaitFifoStateUntilTimeout>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d007      	beq.n	800f05e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f052:	f043 0220 	orr.w	r2, r3, #32
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800f05a:	2303      	movs	r3, #3
 800f05c:	e000      	b.n	800f060 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800f05e:	2300      	movs	r3, #0
}
 800f060:	4618      	mov	r0, r3
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af02      	add	r7, sp, #8
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	2200      	movs	r2, #0
 800f07c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800f080:	68f8      	ldr	r0, [r7, #12]
 800f082:	f7ff ff03 	bl	800ee8c <SPI_WaitFifoStateUntilTimeout>
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d007      	beq.n	800f09c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f090:	f043 0220 	orr.w	r2, r3, #32
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f098:	2303      	movs	r3, #3
 800f09a:	e027      	b.n	800f0ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	9300      	str	r3, [sp, #0]
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	2180      	movs	r1, #128	@ 0x80
 800f0a6:	68f8      	ldr	r0, [r7, #12]
 800f0a8:	f7ff fe68 	bl	800ed7c <SPI_WaitFlagStateUntilTimeout>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d007      	beq.n	800f0c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f0b6:	f043 0220 	orr.w	r2, r3, #32
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f0be:	2303      	movs	r3, #3
 800f0c0:	e014      	b.n	800f0ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	9300      	str	r3, [sp, #0]
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f7ff fedc 	bl	800ee8c <SPI_WaitFifoStateUntilTimeout>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d007      	beq.n	800f0ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f0de:	f043 0220 	orr.w	r2, r3, #32
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f0e6:	2303      	movs	r3, #3
 800f0e8:	e000      	b.n	800f0ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f0ea:	2300      	movs	r3, #0
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3710      	adds	r7, #16
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d101      	bne.n	800f106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f102:	2301      	movs	r3, #1
 800f104:	e049      	b.n	800f19a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d106      	bne.n	800f120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2200      	movs	r2, #0
 800f116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f7f7 fb32 	bl	8006784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2202      	movs	r2, #2
 800f124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	3304      	adds	r3, #4
 800f130:	4619      	mov	r1, r3
 800f132:	4610      	mov	r0, r2
 800f134:	f000 fafc 	bl	800f730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2201      	movs	r2, #1
 800f13c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2201      	movs	r2, #1
 800f144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2201      	movs	r2, #1
 800f14c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2201      	movs	r2, #1
 800f154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2201      	movs	r2, #1
 800f15c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2201      	movs	r2, #1
 800f164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2201      	movs	r2, #1
 800f16c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2201      	movs	r2, #1
 800f174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2201      	movs	r2, #1
 800f184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2201      	movs	r2, #1
 800f18c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2201      	movs	r2, #1
 800f194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f198:	2300      	movs	r3, #0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3708      	adds	r7, #8
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
	...

0800f1a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b085      	sub	sp, #20
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f1b2:	b2db      	uxtb	r3, r3
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	d001      	beq.n	800f1bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	e02e      	b.n	800f21a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2202      	movs	r2, #2
 800f1c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	4a17      	ldr	r2, [pc, #92]	@ (800f228 <HAL_TIM_Base_Start+0x84>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d004      	beq.n	800f1d8 <HAL_TIM_Base_Start+0x34>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f1d6:	d115      	bne.n	800f204 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	689a      	ldr	r2, [r3, #8]
 800f1de:	4b13      	ldr	r3, [pc, #76]	@ (800f22c <HAL_TIM_Base_Start+0x88>)
 800f1e0:	4013      	ands	r3, r2
 800f1e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2b06      	cmp	r3, #6
 800f1e8:	d015      	beq.n	800f216 <HAL_TIM_Base_Start+0x72>
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f1f0:	d011      	beq.n	800f216 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	f042 0201 	orr.w	r2, r2, #1
 800f200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f202:	e008      	b.n	800f216 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f042 0201 	orr.w	r2, r2, #1
 800f212:	601a      	str	r2, [r3, #0]
 800f214:	e000      	b.n	800f218 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f216:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f218:	2300      	movs	r3, #0
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3714      	adds	r7, #20
 800f21e:	46bd      	mov	sp, r7
 800f220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f224:	4770      	bx	lr
 800f226:	bf00      	nop
 800f228:	40012c00 	.word	0x40012c00
 800f22c:	00010007 	.word	0x00010007

0800f230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f230:	b480      	push	{r7}
 800f232:	b085      	sub	sp, #20
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	2b01      	cmp	r3, #1
 800f242:	d001      	beq.n	800f248 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f244:	2301      	movs	r3, #1
 800f246:	e036      	b.n	800f2b6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2202      	movs	r2, #2
 800f24c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	68da      	ldr	r2, [r3, #12]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f042 0201 	orr.w	r2, r2, #1
 800f25e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	4a17      	ldr	r2, [pc, #92]	@ (800f2c4 <HAL_TIM_Base_Start_IT+0x94>)
 800f266:	4293      	cmp	r3, r2
 800f268:	d004      	beq.n	800f274 <HAL_TIM_Base_Start_IT+0x44>
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f272:	d115      	bne.n	800f2a0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	689a      	ldr	r2, [r3, #8]
 800f27a:	4b13      	ldr	r3, [pc, #76]	@ (800f2c8 <HAL_TIM_Base_Start_IT+0x98>)
 800f27c:	4013      	ands	r3, r2
 800f27e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2b06      	cmp	r3, #6
 800f284:	d015      	beq.n	800f2b2 <HAL_TIM_Base_Start_IT+0x82>
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f28c:	d011      	beq.n	800f2b2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f042 0201 	orr.w	r2, r2, #1
 800f29c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f29e:	e008      	b.n	800f2b2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f042 0201 	orr.w	r2, r2, #1
 800f2ae:	601a      	str	r2, [r3, #0]
 800f2b0:	e000      	b.n	800f2b4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f2b4:	2300      	movs	r3, #0
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3714      	adds	r7, #20
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr
 800f2c2:	bf00      	nop
 800f2c4:	40012c00 	.word	0x40012c00
 800f2c8:	00010007 	.word	0x00010007

0800f2cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b083      	sub	sp, #12
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	68da      	ldr	r2, [r3, #12]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f022 0201 	bic.w	r2, r2, #1
 800f2e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	6a1a      	ldr	r2, [r3, #32]
 800f2ea:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f2ee:	4013      	ands	r3, r2
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d10f      	bne.n	800f314 <HAL_TIM_Base_Stop_IT+0x48>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	6a1a      	ldr	r2, [r3, #32]
 800f2fa:	f240 4344 	movw	r3, #1092	@ 0x444
 800f2fe:	4013      	ands	r3, r2
 800f300:	2b00      	cmp	r3, #0
 800f302:	d107      	bne.n	800f314 <HAL_TIM_Base_Stop_IT+0x48>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f022 0201 	bic.w	r2, r2, #1
 800f312:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2201      	movs	r2, #1
 800f318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800f31c:	2300      	movs	r3, #0
}
 800f31e:	4618      	mov	r0, r3
 800f320:	370c      	adds	r7, #12
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr

0800f32a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f32a:	b580      	push	{r7, lr}
 800f32c:	b084      	sub	sp, #16
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	691b      	ldr	r3, [r3, #16]
 800f340:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	f003 0302 	and.w	r3, r3, #2
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d020      	beq.n	800f38e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f003 0302 	and.w	r3, r3, #2
 800f352:	2b00      	cmp	r3, #0
 800f354:	d01b      	beq.n	800f38e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f06f 0202 	mvn.w	r2, #2
 800f35e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2201      	movs	r2, #1
 800f364:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	699b      	ldr	r3, [r3, #24]
 800f36c:	f003 0303 	and.w	r3, r3, #3
 800f370:	2b00      	cmp	r3, #0
 800f372:	d003      	beq.n	800f37c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f000 f9bc 	bl	800f6f2 <HAL_TIM_IC_CaptureCallback>
 800f37a:	e005      	b.n	800f388 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 f9ae 	bl	800f6de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 f9bf 	bl	800f706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2200      	movs	r2, #0
 800f38c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	f003 0304 	and.w	r3, r3, #4
 800f394:	2b00      	cmp	r3, #0
 800f396:	d020      	beq.n	800f3da <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f003 0304 	and.w	r3, r3, #4
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d01b      	beq.n	800f3da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f06f 0204 	mvn.w	r2, #4
 800f3aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2202      	movs	r2, #2
 800f3b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	699b      	ldr	r3, [r3, #24]
 800f3b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d003      	beq.n	800f3c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 f996 	bl	800f6f2 <HAL_TIM_IC_CaptureCallback>
 800f3c6:	e005      	b.n	800f3d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f000 f988 	bl	800f6de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 f999 	bl	800f706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	f003 0308 	and.w	r3, r3, #8
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d020      	beq.n	800f426 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f003 0308 	and.w	r3, r3, #8
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d01b      	beq.n	800f426 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f06f 0208 	mvn.w	r2, #8
 800f3f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2204      	movs	r2, #4
 800f3fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	69db      	ldr	r3, [r3, #28]
 800f404:	f003 0303 	and.w	r3, r3, #3
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d003      	beq.n	800f414 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 f970 	bl	800f6f2 <HAL_TIM_IC_CaptureCallback>
 800f412:	e005      	b.n	800f420 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f000 f962 	bl	800f6de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 f973 	bl	800f706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2200      	movs	r2, #0
 800f424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	f003 0310 	and.w	r3, r3, #16
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d020      	beq.n	800f472 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f003 0310 	and.w	r3, r3, #16
 800f436:	2b00      	cmp	r3, #0
 800f438:	d01b      	beq.n	800f472 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f06f 0210 	mvn.w	r2, #16
 800f442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2208      	movs	r2, #8
 800f448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	69db      	ldr	r3, [r3, #28]
 800f450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f454:	2b00      	cmp	r3, #0
 800f456:	d003      	beq.n	800f460 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f000 f94a 	bl	800f6f2 <HAL_TIM_IC_CaptureCallback>
 800f45e:	e005      	b.n	800f46c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f000 f93c 	bl	800f6de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 f94d 	bl	800f706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2200      	movs	r2, #0
 800f470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	f003 0301 	and.w	r3, r3, #1
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d00c      	beq.n	800f496 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	f003 0301 	and.w	r3, r3, #1
 800f482:	2b00      	cmp	r3, #0
 800f484:	d007      	beq.n	800f496 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	f06f 0201 	mvn.w	r2, #1
 800f48e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 f91a 	bl	800f6ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d104      	bne.n	800f4aa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00c      	beq.n	800f4c4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d007      	beq.n	800f4c4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f4bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f000 faac 	bl	800fa1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d00c      	beq.n	800f4e8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d007      	beq.n	800f4e8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f4e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 faa4 	bl	800fa30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d00c      	beq.n	800f50c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d007      	beq.n	800f50c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 f907 	bl	800f71a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	f003 0320 	and.w	r3, r3, #32
 800f512:	2b00      	cmp	r3, #0
 800f514:	d00c      	beq.n	800f530 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	f003 0320 	and.w	r3, r3, #32
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d007      	beq.n	800f530 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	f06f 0220 	mvn.w	r2, #32
 800f528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 fa6c 	bl	800fa08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f530:	bf00      	nop
 800f532:	3710      	adds	r7, #16
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b084      	sub	sp, #16
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f542:	2300      	movs	r3, #0
 800f544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f54c:	2b01      	cmp	r3, #1
 800f54e:	d101      	bne.n	800f554 <HAL_TIM_ConfigClockSource+0x1c>
 800f550:	2302      	movs	r3, #2
 800f552:	e0b6      	b.n	800f6c2 <HAL_TIM_ConfigClockSource+0x18a>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2201      	movs	r2, #1
 800f558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2202      	movs	r2, #2
 800f560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	689b      	ldr	r3, [r3, #8]
 800f56a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f572:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f57e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	68ba      	ldr	r2, [r7, #8]
 800f586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f590:	d03e      	beq.n	800f610 <HAL_TIM_ConfigClockSource+0xd8>
 800f592:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f596:	f200 8087 	bhi.w	800f6a8 <HAL_TIM_ConfigClockSource+0x170>
 800f59a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f59e:	f000 8086 	beq.w	800f6ae <HAL_TIM_ConfigClockSource+0x176>
 800f5a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f5a6:	d87f      	bhi.n	800f6a8 <HAL_TIM_ConfigClockSource+0x170>
 800f5a8:	2b70      	cmp	r3, #112	@ 0x70
 800f5aa:	d01a      	beq.n	800f5e2 <HAL_TIM_ConfigClockSource+0xaa>
 800f5ac:	2b70      	cmp	r3, #112	@ 0x70
 800f5ae:	d87b      	bhi.n	800f6a8 <HAL_TIM_ConfigClockSource+0x170>
 800f5b0:	2b60      	cmp	r3, #96	@ 0x60
 800f5b2:	d050      	beq.n	800f656 <HAL_TIM_ConfigClockSource+0x11e>
 800f5b4:	2b60      	cmp	r3, #96	@ 0x60
 800f5b6:	d877      	bhi.n	800f6a8 <HAL_TIM_ConfigClockSource+0x170>
 800f5b8:	2b50      	cmp	r3, #80	@ 0x50
 800f5ba:	d03c      	beq.n	800f636 <HAL_TIM_ConfigClockSource+0xfe>
 800f5bc:	2b50      	cmp	r3, #80	@ 0x50
 800f5be:	d873      	bhi.n	800f6a8 <HAL_TIM_ConfigClockSource+0x170>
 800f5c0:	2b40      	cmp	r3, #64	@ 0x40
 800f5c2:	d058      	beq.n	800f676 <HAL_TIM_ConfigClockSource+0x13e>
 800f5c4:	2b40      	cmp	r3, #64	@ 0x40
 800f5c6:	d86f      	bhi.n	800f6a8 <HAL_TIM_ConfigClockSource+0x170>
 800f5c8:	2b30      	cmp	r3, #48	@ 0x30
 800f5ca:	d064      	beq.n	800f696 <HAL_TIM_ConfigClockSource+0x15e>
 800f5cc:	2b30      	cmp	r3, #48	@ 0x30
 800f5ce:	d86b      	bhi.n	800f6a8 <HAL_TIM_ConfigClockSource+0x170>
 800f5d0:	2b20      	cmp	r3, #32
 800f5d2:	d060      	beq.n	800f696 <HAL_TIM_ConfigClockSource+0x15e>
 800f5d4:	2b20      	cmp	r3, #32
 800f5d6:	d867      	bhi.n	800f6a8 <HAL_TIM_ConfigClockSource+0x170>
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d05c      	beq.n	800f696 <HAL_TIM_ConfigClockSource+0x15e>
 800f5dc:	2b10      	cmp	r3, #16
 800f5de:	d05a      	beq.n	800f696 <HAL_TIM_ConfigClockSource+0x15e>
 800f5e0:	e062      	b.n	800f6a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f5f2:	f000 f989 	bl	800f908 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	689b      	ldr	r3, [r3, #8]
 800f5fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	68ba      	ldr	r2, [r7, #8]
 800f60c:	609a      	str	r2, [r3, #8]
      break;
 800f60e:	e04f      	b.n	800f6b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f620:	f000 f972 	bl	800f908 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	689a      	ldr	r2, [r3, #8]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f632:	609a      	str	r2, [r3, #8]
      break;
 800f634:	e03c      	b.n	800f6b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f642:	461a      	mov	r2, r3
 800f644:	f000 f8e4 	bl	800f810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	2150      	movs	r1, #80	@ 0x50
 800f64e:	4618      	mov	r0, r3
 800f650:	f000 f93d 	bl	800f8ce <TIM_ITRx_SetConfig>
      break;
 800f654:	e02c      	b.n	800f6b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f662:	461a      	mov	r2, r3
 800f664:	f000 f903 	bl	800f86e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	2160      	movs	r1, #96	@ 0x60
 800f66e:	4618      	mov	r0, r3
 800f670:	f000 f92d 	bl	800f8ce <TIM_ITRx_SetConfig>
      break;
 800f674:	e01c      	b.n	800f6b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f682:	461a      	mov	r2, r3
 800f684:	f000 f8c4 	bl	800f810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	2140      	movs	r1, #64	@ 0x40
 800f68e:	4618      	mov	r0, r3
 800f690:	f000 f91d 	bl	800f8ce <TIM_ITRx_SetConfig>
      break;
 800f694:	e00c      	b.n	800f6b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	4619      	mov	r1, r3
 800f6a0:	4610      	mov	r0, r2
 800f6a2:	f000 f914 	bl	800f8ce <TIM_ITRx_SetConfig>
      break;
 800f6a6:	e003      	b.n	800f6b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	73fb      	strb	r3, [r7, #15]
      break;
 800f6ac:	e000      	b.n	800f6b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800f6ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3710      	adds	r7, #16
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}

0800f6ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f6ca:	b480      	push	{r7}
 800f6cc:	b083      	sub	sp, #12
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f6d2:	bf00      	nop
 800f6d4:	370c      	adds	r7, #12
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr

0800f6de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f6de:	b480      	push	{r7}
 800f6e0:	b083      	sub	sp, #12
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f6e6:	bf00      	nop
 800f6e8:	370c      	adds	r7, #12
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr

0800f6f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f6f2:	b480      	push	{r7}
 800f6f4:	b083      	sub	sp, #12
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f6fa:	bf00      	nop
 800f6fc:	370c      	adds	r7, #12
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f706:	b480      	push	{r7}
 800f708:	b083      	sub	sp, #12
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f70e:	bf00      	nop
 800f710:	370c      	adds	r7, #12
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr

0800f71a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f71a:	b480      	push	{r7}
 800f71c:	b083      	sub	sp, #12
 800f71e:	af00      	add	r7, sp, #0
 800f720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f722:	bf00      	nop
 800f724:	370c      	adds	r7, #12
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr
	...

0800f730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f730:	b480      	push	{r7}
 800f732:	b085      	sub	sp, #20
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	4a30      	ldr	r2, [pc, #192]	@ (800f804 <TIM_Base_SetConfig+0xd4>)
 800f744:	4293      	cmp	r3, r2
 800f746:	d003      	beq.n	800f750 <TIM_Base_SetConfig+0x20>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f74e:	d108      	bne.n	800f762 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	68fa      	ldr	r2, [r7, #12]
 800f75e:	4313      	orrs	r3, r2
 800f760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	4a27      	ldr	r2, [pc, #156]	@ (800f804 <TIM_Base_SetConfig+0xd4>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d00b      	beq.n	800f782 <TIM_Base_SetConfig+0x52>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f770:	d007      	beq.n	800f782 <TIM_Base_SetConfig+0x52>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	4a24      	ldr	r2, [pc, #144]	@ (800f808 <TIM_Base_SetConfig+0xd8>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d003      	beq.n	800f782 <TIM_Base_SetConfig+0x52>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4a23      	ldr	r2, [pc, #140]	@ (800f80c <TIM_Base_SetConfig+0xdc>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d108      	bne.n	800f794 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	68db      	ldr	r3, [r3, #12]
 800f78e:	68fa      	ldr	r2, [r7, #12]
 800f790:	4313      	orrs	r3, r2
 800f792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	695b      	ldr	r3, [r3, #20]
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	68fa      	ldr	r2, [r7, #12]
 800f7a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	689a      	ldr	r2, [r3, #8]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	681a      	ldr	r2, [r3, #0]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	4a12      	ldr	r2, [pc, #72]	@ (800f804 <TIM_Base_SetConfig+0xd4>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d007      	beq.n	800f7d0 <TIM_Base_SetConfig+0xa0>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	4a11      	ldr	r2, [pc, #68]	@ (800f808 <TIM_Base_SetConfig+0xd8>)
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d003      	beq.n	800f7d0 <TIM_Base_SetConfig+0xa0>
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	4a10      	ldr	r2, [pc, #64]	@ (800f80c <TIM_Base_SetConfig+0xdc>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d103      	bne.n	800f7d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	691a      	ldr	r2, [r3, #16]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	691b      	ldr	r3, [r3, #16]
 800f7e2:	f003 0301 	and.w	r3, r3, #1
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d105      	bne.n	800f7f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	691b      	ldr	r3, [r3, #16]
 800f7ee:	f023 0201 	bic.w	r2, r3, #1
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	611a      	str	r2, [r3, #16]
  }
}
 800f7f6:	bf00      	nop
 800f7f8:	3714      	adds	r7, #20
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	40012c00 	.word	0x40012c00
 800f808:	40014400 	.word	0x40014400
 800f80c:	40014800 	.word	0x40014800

0800f810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f810:	b480      	push	{r7}
 800f812:	b087      	sub	sp, #28
 800f814:	af00      	add	r7, sp, #0
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6a1b      	ldr	r3, [r3, #32]
 800f820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	6a1b      	ldr	r3, [r3, #32]
 800f826:	f023 0201 	bic.w	r2, r3, #1
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	699b      	ldr	r3, [r3, #24]
 800f832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f83a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	011b      	lsls	r3, r3, #4
 800f840:	693a      	ldr	r2, [r7, #16]
 800f842:	4313      	orrs	r3, r2
 800f844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	f023 030a 	bic.w	r3, r3, #10
 800f84c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f84e:	697a      	ldr	r2, [r7, #20]
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	4313      	orrs	r3, r2
 800f854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	693a      	ldr	r2, [r7, #16]
 800f85a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	697a      	ldr	r2, [r7, #20]
 800f860:	621a      	str	r2, [r3, #32]
}
 800f862:	bf00      	nop
 800f864:	371c      	adds	r7, #28
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr

0800f86e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f86e:	b480      	push	{r7}
 800f870:	b087      	sub	sp, #28
 800f872:	af00      	add	r7, sp, #0
 800f874:	60f8      	str	r0, [r7, #12]
 800f876:	60b9      	str	r1, [r7, #8]
 800f878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	6a1b      	ldr	r3, [r3, #32]
 800f87e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	6a1b      	ldr	r3, [r3, #32]
 800f884:	f023 0210 	bic.w	r2, r3, #16
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	699b      	ldr	r3, [r3, #24]
 800f890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f898:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	031b      	lsls	r3, r3, #12
 800f89e:	693a      	ldr	r2, [r7, #16]
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f8aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	011b      	lsls	r3, r3, #4
 800f8b0:	697a      	ldr	r2, [r7, #20]
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	693a      	ldr	r2, [r7, #16]
 800f8ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	697a      	ldr	r2, [r7, #20]
 800f8c0:	621a      	str	r2, [r3, #32]
}
 800f8c2:	bf00      	nop
 800f8c4:	371c      	adds	r7, #28
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr

0800f8ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f8ce:	b480      	push	{r7}
 800f8d0:	b085      	sub	sp, #20
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
 800f8d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f8e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f8e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f8ea:	683a      	ldr	r2, [r7, #0]
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	4313      	orrs	r3, r2
 800f8f0:	f043 0307 	orr.w	r3, r3, #7
 800f8f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	609a      	str	r2, [r3, #8]
}
 800f8fc:	bf00      	nop
 800f8fe:	3714      	adds	r7, #20
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr

0800f908 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f908:	b480      	push	{r7}
 800f90a:	b087      	sub	sp, #28
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	607a      	str	r2, [r7, #4]
 800f914:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	689b      	ldr	r3, [r3, #8]
 800f91a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f922:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	021a      	lsls	r2, r3, #8
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	431a      	orrs	r2, r3
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	4313      	orrs	r3, r2
 800f930:	697a      	ldr	r2, [r7, #20]
 800f932:	4313      	orrs	r3, r2
 800f934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	697a      	ldr	r2, [r7, #20]
 800f93a:	609a      	str	r2, [r3, #8]
}
 800f93c:	bf00      	nop
 800f93e:	371c      	adds	r7, #28
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr

0800f948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f948:	b480      	push	{r7}
 800f94a:	b085      	sub	sp, #20
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f958:	2b01      	cmp	r3, #1
 800f95a:	d101      	bne.n	800f960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f95c:	2302      	movs	r3, #2
 800f95e:	e04a      	b.n	800f9f6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2201      	movs	r2, #1
 800f964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2202      	movs	r2, #2
 800f96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	689b      	ldr	r3, [r3, #8]
 800f97e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4a1f      	ldr	r2, [pc, #124]	@ (800fa04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f986:	4293      	cmp	r3, r2
 800f988:	d108      	bne.n	800f99c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f990:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	4313      	orrs	r3, r2
 800f99a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f9a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	68fa      	ldr	r2, [r7, #12]
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	68fa      	ldr	r2, [r7, #12]
 800f9b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	4a12      	ldr	r2, [pc, #72]	@ (800fa04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d004      	beq.n	800f9ca <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9c8:	d10c      	bne.n	800f9e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f9d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	689b      	ldr	r3, [r3, #8]
 800f9d6:	68ba      	ldr	r2, [r7, #8]
 800f9d8:	4313      	orrs	r3, r2
 800f9da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	68ba      	ldr	r2, [r7, #8]
 800f9e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f9f4:	2300      	movs	r3, #0
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3714      	adds	r7, #20
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa00:	4770      	bx	lr
 800fa02:	bf00      	nop
 800fa04:	40012c00 	.word	0x40012c00

0800fa08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b083      	sub	sp, #12
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fa10:	bf00      	nop
 800fa12:	370c      	adds	r7, #12
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b083      	sub	sp, #12
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fa24:	bf00      	nop
 800fa26:	370c      	adds	r7, #12
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b083      	sub	sp, #12
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fa38:	bf00      	nop
 800fa3a:	370c      	adds	r7, #12
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr

0800fa44 <LL_RCC_GetUSARTClockSource>:
{
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800fa4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa50:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	4013      	ands	r3, r2
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	370c      	adds	r7, #12
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <LL_RCC_GetLPUARTClockSource>:
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800fa6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa70:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	4013      	ands	r3, r2
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	370c      	adds	r7, #12
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d101      	bne.n	800fa96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fa92:	2301      	movs	r3, #1
 800fa94:	e042      	b.n	800fb1c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d106      	bne.n	800faae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2200      	movs	r2, #0
 800faa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f7f7 f8a9 	bl	8006c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2224      	movs	r2, #36	@ 0x24
 800fab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f022 0201 	bic.w	r2, r2, #1
 800fac4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faca:	2b00      	cmp	r3, #0
 800facc:	d002      	beq.n	800fad4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 ff16 	bl	8010900 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 fceb 	bl	80104b0 <UART_SetConfig>
 800fada:	4603      	mov	r3, r0
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d101      	bne.n	800fae4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fae0:	2301      	movs	r3, #1
 800fae2:	e01b      	b.n	800fb1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	685a      	ldr	r2, [r3, #4]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800faf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	689a      	ldr	r2, [r3, #8]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fb02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f042 0201 	orr.w	r2, r2, #1
 800fb12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f000 ff95 	bl	8010a44 <UART_CheckIdleState>
 800fb1a:	4603      	mov	r3, r0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3708      	adds	r7, #8
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b08a      	sub	sp, #40	@ 0x28
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	60b9      	str	r1, [r7, #8]
 800fb2e:	4613      	mov	r3, r2
 800fb30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fb38:	2b20      	cmp	r3, #32
 800fb3a:	d137      	bne.n	800fbac <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d002      	beq.n	800fb48 <HAL_UART_Receive_DMA+0x24>
 800fb42:	88fb      	ldrh	r3, [r7, #6]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d101      	bne.n	800fb4c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	e030      	b.n	800fbae <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	4a18      	ldr	r2, [pc, #96]	@ (800fbb8 <HAL_UART_Receive_DMA+0x94>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d01f      	beq.n	800fb9c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	685b      	ldr	r3, [r3, #4]
 800fb62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d018      	beq.n	800fb9c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	e853 3f00 	ldrex	r3, [r3]
 800fb76:	613b      	str	r3, [r7, #16]
   return(result);
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fb7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	461a      	mov	r2, r3
 800fb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb88:	623b      	str	r3, [r7, #32]
 800fb8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb8c:	69f9      	ldr	r1, [r7, #28]
 800fb8e:	6a3a      	ldr	r2, [r7, #32]
 800fb90:	e841 2300 	strex	r3, r2, [r1]
 800fb94:	61bb      	str	r3, [r7, #24]
   return(result);
 800fb96:	69bb      	ldr	r3, [r7, #24]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d1e6      	bne.n	800fb6a <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fb9c:	88fb      	ldrh	r3, [r7, #6]
 800fb9e:	461a      	mov	r2, r3
 800fba0:	68b9      	ldr	r1, [r7, #8]
 800fba2:	68f8      	ldr	r0, [r7, #12]
 800fba4:	f001 f866 	bl	8010c74 <UART_Start_Receive_DMA>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	e000      	b.n	800fbae <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fbac:	2302      	movs	r3, #2
  }
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3728      	adds	r7, #40	@ 0x28
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	40008000 	.word	0x40008000

0800fbbc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b0a0      	sub	sp, #128	@ 0x80
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fbcc:	e853 3f00 	ldrex	r3, [r3]
 800fbd0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800fbd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fbd4:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800fbd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	461a      	mov	r2, r3
 800fbe0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fbe2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fbe4:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800fbe8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800fbea:	e841 2300 	strex	r3, r2, [r1]
 800fbee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800fbf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d1e6      	bne.n	800fbc4 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	3308      	adds	r3, #8
 800fbfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc00:	e853 3f00 	ldrex	r3, [r3]
 800fc04:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fc06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc08:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800fc0c:	f023 0301 	bic.w	r3, r3, #1
 800fc10:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	3308      	adds	r3, #8
 800fc18:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800fc1a:	657a      	str	r2, [r7, #84]	@ 0x54
 800fc1c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fc20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fc22:	e841 2300 	strex	r3, r2, [r1]
 800fc26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800fc28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d1e3      	bne.n	800fbf6 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d118      	bne.n	800fc68 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc3e:	e853 3f00 	ldrex	r3, [r3]
 800fc42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc46:	f023 0310 	bic.w	r3, r3, #16
 800fc4a:	677b      	str	r3, [r7, #116]	@ 0x74
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	461a      	mov	r2, r3
 800fc52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fc54:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fc5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fc5c:	e841 2300 	strex	r3, r2, [r1]
 800fc60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fc62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d1e6      	bne.n	800fc36 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	689b      	ldr	r3, [r3, #8]
 800fc6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc72:	2b80      	cmp	r3, #128	@ 0x80
 800fc74:	d137      	bne.n	800fce6 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	3308      	adds	r3, #8
 800fc7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc7e:	6a3b      	ldr	r3, [r7, #32]
 800fc80:	e853 3f00 	ldrex	r3, [r3]
 800fc84:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc8c:	673b      	str	r3, [r7, #112]	@ 0x70
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	3308      	adds	r3, #8
 800fc94:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fc96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fc98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc9e:	e841 2300 	strex	r3, r2, [r1]
 800fca2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d1e5      	bne.n	800fc76 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d019      	beq.n	800fce6 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7f8 fd6f 	bl	80087a2 <HAL_DMA_Abort>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d00d      	beq.n	800fce6 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7f8 fed4 	bl	8008a7c <HAL_DMA_GetError>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	2b20      	cmp	r3, #32
 800fcd8:	d105      	bne.n	800fce6 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2210      	movs	r2, #16
 800fcde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fce2:	2303      	movs	r3, #3
 800fce4:	e073      	b.n	800fdce <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcf0:	2b40      	cmp	r3, #64	@ 0x40
 800fcf2:	d13b      	bne.n	800fd6c <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	3308      	adds	r3, #8
 800fcfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	e853 3f00 	ldrex	r3, [r3]
 800fd02:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	3308      	adds	r3, #8
 800fd12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fd14:	61ba      	str	r2, [r7, #24]
 800fd16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd18:	6979      	ldr	r1, [r7, #20]
 800fd1a:	69ba      	ldr	r2, [r7, #24]
 800fd1c:	e841 2300 	strex	r3, r2, [r1]
 800fd20:	613b      	str	r3, [r7, #16]
   return(result);
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d1e5      	bne.n	800fcf4 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d01c      	beq.n	800fd6c <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd38:	2200      	movs	r2, #0
 800fd3a:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7f8 fd2d 	bl	80087a2 <HAL_DMA_Abort>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d00e      	beq.n	800fd6c <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7f8 fe91 	bl	8008a7c <HAL_DMA_GetError>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	2b20      	cmp	r3, #32
 800fd5e:	d105      	bne.n	800fd6c <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2210      	movs	r2, #16
 800fd64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fd68:	2303      	movs	r3, #3
 800fd6a:	e030      	b.n	800fdce <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2200      	movs	r2, #0
 800fd78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	220f      	movs	r2, #15
 800fd82:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd8c:	d107      	bne.n	800fd9e <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	699a      	ldr	r2, [r3, #24]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f042 0210 	orr.w	r2, r2, #16
 800fd9c:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	699a      	ldr	r2, [r3, #24]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	f042 0208 	orr.w	r2, r2, #8
 800fdac:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2220      	movs	r2, #32
 800fdb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2220      	movs	r2, #32
 800fdba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800fdcc:	2300      	movs	r3, #0
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3780      	adds	r7, #128	@ 0x80
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}
	...

0800fdd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b0ba      	sub	sp, #232	@ 0xe8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	69db      	ldr	r3, [r3, #28]
 800fde6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	689b      	ldr	r3, [r3, #8]
 800fdfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fdfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fe02:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fe06:	4013      	ands	r3, r2
 800fe08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fe0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d11b      	bne.n	800fe4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fe14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe18:	f003 0320 	and.w	r3, r3, #32
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d015      	beq.n	800fe4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fe20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe24:	f003 0320 	and.w	r3, r3, #32
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d105      	bne.n	800fe38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fe2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fe30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d009      	beq.n	800fe4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	f000 8300 	beq.w	8010442 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	4798      	blx	r3
      }
      return;
 800fe4a:	e2fa      	b.n	8010442 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fe4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	f000 8123 	beq.w	801009c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fe56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fe5a:	4b8d      	ldr	r3, [pc, #564]	@ (8010090 <HAL_UART_IRQHandler+0x2b8>)
 800fe5c:	4013      	ands	r3, r2
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d106      	bne.n	800fe70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fe62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fe66:	4b8b      	ldr	r3, [pc, #556]	@ (8010094 <HAL_UART_IRQHandler+0x2bc>)
 800fe68:	4013      	ands	r3, r2
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	f000 8116 	beq.w	801009c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fe70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe74:	f003 0301 	and.w	r3, r3, #1
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d011      	beq.n	800fea0 <HAL_UART_IRQHandler+0xc8>
 800fe7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d00b      	beq.n	800fea0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe96:	f043 0201 	orr.w	r2, r3, #1
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fea4:	f003 0302 	and.w	r3, r3, #2
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d011      	beq.n	800fed0 <HAL_UART_IRQHandler+0xf8>
 800feac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800feb0:	f003 0301 	and.w	r3, r3, #1
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d00b      	beq.n	800fed0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2202      	movs	r2, #2
 800febe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fec6:	f043 0204 	orr.w	r2, r3, #4
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fed4:	f003 0304 	and.w	r3, r3, #4
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d011      	beq.n	800ff00 <HAL_UART_IRQHandler+0x128>
 800fedc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fee0:	f003 0301 	and.w	r3, r3, #1
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d00b      	beq.n	800ff00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	2204      	movs	r2, #4
 800feee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fef6:	f043 0202 	orr.w	r2, r3, #2
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ff00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff04:	f003 0308 	and.w	r3, r3, #8
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d017      	beq.n	800ff3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ff0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff10:	f003 0320 	and.w	r3, r3, #32
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d105      	bne.n	800ff24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ff18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ff1c:	4b5c      	ldr	r3, [pc, #368]	@ (8010090 <HAL_UART_IRQHandler+0x2b8>)
 800ff1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d00b      	beq.n	800ff3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2208      	movs	r2, #8
 800ff2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff32:	f043 0208 	orr.w	r2, r3, #8
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ff3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d012      	beq.n	800ff6e <HAL_UART_IRQHandler+0x196>
 800ff48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d00c      	beq.n	800ff6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ff5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff64:	f043 0220 	orr.w	r2, r3, #32
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	f000 8266 	beq.w	8010446 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ff7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff7e:	f003 0320 	and.w	r3, r3, #32
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d013      	beq.n	800ffae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ff86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff8a:	f003 0320 	and.w	r3, r3, #32
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d105      	bne.n	800ff9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ff92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d007      	beq.n	800ffae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d003      	beq.n	800ffae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	689b      	ldr	r3, [r3, #8]
 800ffbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffc2:	2b40      	cmp	r3, #64	@ 0x40
 800ffc4:	d005      	beq.n	800ffd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ffc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ffca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d054      	beq.n	801007c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 ff35 	bl	8010e42 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	689b      	ldr	r3, [r3, #8]
 800ffde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffe2:	2b40      	cmp	r3, #64	@ 0x40
 800ffe4:	d146      	bne.n	8010074 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	3308      	adds	r3, #8
 800ffec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fff4:	e853 3f00 	ldrex	r3, [r3]
 800fff8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010004:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	3308      	adds	r3, #8
 801000e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010012:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010016:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801001a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801001e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010022:	e841 2300 	strex	r3, r2, [r1]
 8010026:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801002a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801002e:	2b00      	cmp	r3, #0
 8010030:	d1d9      	bne.n	800ffe6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010038:	2b00      	cmp	r3, #0
 801003a:	d017      	beq.n	801006c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010042:	4a15      	ldr	r2, [pc, #84]	@ (8010098 <HAL_UART_IRQHandler+0x2c0>)
 8010044:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801004c:	4618      	mov	r0, r3
 801004e:	f7f8 fc07 	bl	8008860 <HAL_DMA_Abort_IT>
 8010052:	4603      	mov	r3, r0
 8010054:	2b00      	cmp	r3, #0
 8010056:	d019      	beq.n	801008c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801005e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010060:	687a      	ldr	r2, [r7, #4]
 8010062:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010066:	4610      	mov	r0, r2
 8010068:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801006a:	e00f      	b.n	801008c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f000 fa09 	bl	8010484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010072:	e00b      	b.n	801008c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f000 fa05 	bl	8010484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801007a:	e007      	b.n	801008c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f000 fa01 	bl	8010484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2200      	movs	r2, #0
 8010086:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801008a:	e1dc      	b.n	8010446 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801008c:	bf00      	nop
    return;
 801008e:	e1da      	b.n	8010446 <HAL_UART_IRQHandler+0x66e>
 8010090:	10000001 	.word	0x10000001
 8010094:	04000120 	.word	0x04000120
 8010098:	080110f9 	.word	0x080110f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	f040 8170 	bne.w	8010386 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80100a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100aa:	f003 0310 	and.w	r3, r3, #16
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f000 8169 	beq.w	8010386 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80100b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100b8:	f003 0310 	and.w	r3, r3, #16
 80100bc:	2b00      	cmp	r3, #0
 80100be:	f000 8162 	beq.w	8010386 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	2210      	movs	r2, #16
 80100c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	689b      	ldr	r3, [r3, #8]
 80100d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100d4:	2b40      	cmp	r3, #64	@ 0x40
 80100d6:	f040 80d8 	bne.w	801028a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80100e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	f000 80af 	beq.w	8010250 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80100f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80100fc:	429a      	cmp	r2, r3
 80100fe:	f080 80a7 	bcs.w	8010250 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010108:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	f003 0320 	and.w	r3, r3, #32
 801011a:	2b00      	cmp	r3, #0
 801011c:	f040 8087 	bne.w	801022e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010128:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801012c:	e853 3f00 	ldrex	r3, [r3]
 8010130:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010134:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801013c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	461a      	mov	r2, r3
 8010146:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801014a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801014e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010152:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010156:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801015a:	e841 2300 	strex	r3, r2, [r1]
 801015e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010162:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010166:	2b00      	cmp	r3, #0
 8010168:	d1da      	bne.n	8010120 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	3308      	adds	r3, #8
 8010170:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010172:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010174:	e853 3f00 	ldrex	r3, [r3]
 8010178:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801017a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801017c:	f023 0301 	bic.w	r3, r3, #1
 8010180:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	3308      	adds	r3, #8
 801018a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801018e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010192:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010194:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010196:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801019a:	e841 2300 	strex	r3, r2, [r1]
 801019e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80101a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d1e1      	bne.n	801016a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	3308      	adds	r3, #8
 80101ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80101b0:	e853 3f00 	ldrex	r3, [r3]
 80101b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80101b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80101b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80101bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	3308      	adds	r3, #8
 80101c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80101ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80101cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80101d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80101d2:	e841 2300 	strex	r3, r2, [r1]
 80101d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80101d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d1e3      	bne.n	80101a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2220      	movs	r2, #32
 80101e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2200      	movs	r2, #0
 80101ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101f4:	e853 3f00 	ldrex	r3, [r3]
 80101f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80101fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80101fc:	f023 0310 	bic.w	r3, r3, #16
 8010200:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	461a      	mov	r2, r3
 801020a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801020e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010210:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010212:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010214:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010216:	e841 2300 	strex	r3, r2, [r1]
 801021a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801021c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801021e:	2b00      	cmp	r3, #0
 8010220:	d1e4      	bne.n	80101ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010228:	4618      	mov	r0, r3
 801022a:	f7f8 faba 	bl	80087a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2202      	movs	r2, #2
 8010232:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010240:	b29b      	uxth	r3, r3
 8010242:	1ad3      	subs	r3, r2, r3
 8010244:	b29b      	uxth	r3, r3
 8010246:	4619      	mov	r1, r3
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f000 f925 	bl	8010498 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801024e:	e0fc      	b.n	801044a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801025a:	429a      	cmp	r2, r3
 801025c:	f040 80f5 	bne.w	801044a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	f003 0320 	and.w	r3, r3, #32
 801026e:	2b20      	cmp	r3, #32
 8010270:	f040 80eb 	bne.w	801044a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2202      	movs	r2, #2
 8010278:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010280:	4619      	mov	r1, r3
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f000 f908 	bl	8010498 <HAL_UARTEx_RxEventCallback>
      return;
 8010288:	e0df      	b.n	801044a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010296:	b29b      	uxth	r3, r3
 8010298:	1ad3      	subs	r3, r2, r3
 801029a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f000 80d1 	beq.w	801044e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80102ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	f000 80cc 	beq.w	801044e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102be:	e853 3f00 	ldrex	r3, [r3]
 80102c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80102c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80102ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	461a      	mov	r2, r3
 80102d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80102d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80102da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80102de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80102e0:	e841 2300 	strex	r3, r2, [r1]
 80102e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80102e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d1e4      	bne.n	80102b6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	3308      	adds	r3, #8
 80102f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f6:	e853 3f00 	ldrex	r3, [r3]
 80102fa:	623b      	str	r3, [r7, #32]
   return(result);
 80102fc:	6a3b      	ldr	r3, [r7, #32]
 80102fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010302:	f023 0301 	bic.w	r3, r3, #1
 8010306:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	3308      	adds	r3, #8
 8010310:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010314:	633a      	str	r2, [r7, #48]	@ 0x30
 8010316:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010318:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801031a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801031c:	e841 2300 	strex	r3, r2, [r1]
 8010320:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010324:	2b00      	cmp	r3, #0
 8010326:	d1e1      	bne.n	80102ec <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2220      	movs	r2, #32
 801032c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2200      	movs	r2, #0
 8010334:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2200      	movs	r2, #0
 801033a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	e853 3f00 	ldrex	r3, [r3]
 8010348:	60fb      	str	r3, [r7, #12]
   return(result);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	f023 0310 	bic.w	r3, r3, #16
 8010350:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	461a      	mov	r2, r3
 801035a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801035e:	61fb      	str	r3, [r7, #28]
 8010360:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010362:	69b9      	ldr	r1, [r7, #24]
 8010364:	69fa      	ldr	r2, [r7, #28]
 8010366:	e841 2300 	strex	r3, r2, [r1]
 801036a:	617b      	str	r3, [r7, #20]
   return(result);
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d1e4      	bne.n	801033c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2202      	movs	r2, #2
 8010376:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010378:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801037c:	4619      	mov	r1, r3
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f000 f88a 	bl	8010498 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010384:	e063      	b.n	801044e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801038a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801038e:	2b00      	cmp	r3, #0
 8010390:	d00e      	beq.n	80103b0 <HAL_UART_IRQHandler+0x5d8>
 8010392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801039a:	2b00      	cmp	r3, #0
 801039c:	d008      	beq.n	80103b0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80103a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f000 fee2 	bl	8011172 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80103ae:	e051      	b.n	8010454 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80103b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d014      	beq.n	80103e6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80103bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d105      	bne.n	80103d4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80103c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80103cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d008      	beq.n	80103e6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d03a      	beq.n	8010452 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	4798      	blx	r3
    }
    return;
 80103e4:	e035      	b.n	8010452 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80103e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d009      	beq.n	8010406 <HAL_UART_IRQHandler+0x62e>
 80103f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d003      	beq.n	8010406 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f000 fe8c 	bl	801111c <UART_EndTransmit_IT>
    return;
 8010404:	e026      	b.n	8010454 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801040a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801040e:	2b00      	cmp	r3, #0
 8010410:	d009      	beq.n	8010426 <HAL_UART_IRQHandler+0x64e>
 8010412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010416:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801041a:	2b00      	cmp	r3, #0
 801041c:	d003      	beq.n	8010426 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f000 febb 	bl	801119a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010424:	e016      	b.n	8010454 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801042a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801042e:	2b00      	cmp	r3, #0
 8010430:	d010      	beq.n	8010454 <HAL_UART_IRQHandler+0x67c>
 8010432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010436:	2b00      	cmp	r3, #0
 8010438:	da0c      	bge.n	8010454 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f000 fea3 	bl	8011186 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010440:	e008      	b.n	8010454 <HAL_UART_IRQHandler+0x67c>
      return;
 8010442:	bf00      	nop
 8010444:	e006      	b.n	8010454 <HAL_UART_IRQHandler+0x67c>
    return;
 8010446:	bf00      	nop
 8010448:	e004      	b.n	8010454 <HAL_UART_IRQHandler+0x67c>
      return;
 801044a:	bf00      	nop
 801044c:	e002      	b.n	8010454 <HAL_UART_IRQHandler+0x67c>
      return;
 801044e:	bf00      	nop
 8010450:	e000      	b.n	8010454 <HAL_UART_IRQHandler+0x67c>
    return;
 8010452:	bf00      	nop
  }
}
 8010454:	37e8      	adds	r7, #232	@ 0xe8
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
 801045a:	bf00      	nop

0801045c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801045c:	b480      	push	{r7}
 801045e:	b083      	sub	sp, #12
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010464:	bf00      	nop
 8010466:	370c      	adds	r7, #12
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr

08010470 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010478:	bf00      	nop
 801047a:	370c      	adds	r7, #12
 801047c:	46bd      	mov	sp, r7
 801047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010482:	4770      	bx	lr

08010484 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010484:	b480      	push	{r7}
 8010486:	b083      	sub	sp, #12
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801048c:	bf00      	nop
 801048e:	370c      	adds	r7, #12
 8010490:	46bd      	mov	sp, r7
 8010492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010496:	4770      	bx	lr

08010498 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010498:	b480      	push	{r7}
 801049a:	b083      	sub	sp, #12
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
 80104a0:	460b      	mov	r3, r1
 80104a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80104a4:	bf00      	nop
 80104a6:	370c      	adds	r7, #12
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80104b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80104b4:	b08c      	sub	sp, #48	@ 0x30
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80104ba:	2300      	movs	r3, #0
 80104bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	689a      	ldr	r2, [r3, #8]
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	691b      	ldr	r3, [r3, #16]
 80104c8:	431a      	orrs	r2, r3
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	695b      	ldr	r3, [r3, #20]
 80104ce:	431a      	orrs	r2, r3
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	69db      	ldr	r3, [r3, #28]
 80104d4:	4313      	orrs	r3, r2
 80104d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	4baf      	ldr	r3, [pc, #700]	@ (801079c <UART_SetConfig+0x2ec>)
 80104e0:	4013      	ands	r3, r2
 80104e2:	697a      	ldr	r2, [r7, #20]
 80104e4:	6812      	ldr	r2, [r2, #0]
 80104e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80104e8:	430b      	orrs	r3, r1
 80104ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	685b      	ldr	r3, [r3, #4]
 80104f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	68da      	ldr	r2, [r3, #12]
 80104fa:	697b      	ldr	r3, [r7, #20]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	430a      	orrs	r2, r1
 8010500:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	699b      	ldr	r3, [r3, #24]
 8010506:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4aa4      	ldr	r2, [pc, #656]	@ (80107a0 <UART_SetConfig+0x2f0>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d004      	beq.n	801051c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	6a1b      	ldr	r3, [r3, #32]
 8010516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010518:	4313      	orrs	r3, r2
 801051a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	689b      	ldr	r3, [r3, #8]
 8010522:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8010526:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 801052a:	697a      	ldr	r2, [r7, #20]
 801052c:	6812      	ldr	r2, [r2, #0]
 801052e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010530:	430b      	orrs	r3, r1
 8010532:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801053a:	f023 010f 	bic.w	r1, r3, #15
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	430a      	orrs	r2, r1
 8010548:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	4a95      	ldr	r2, [pc, #596]	@ (80107a4 <UART_SetConfig+0x2f4>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d125      	bne.n	80105a0 <UART_SetConfig+0xf0>
 8010554:	2003      	movs	r0, #3
 8010556:	f7ff fa75 	bl	800fa44 <LL_RCC_GetUSARTClockSource>
 801055a:	4603      	mov	r3, r0
 801055c:	2b03      	cmp	r3, #3
 801055e:	d81b      	bhi.n	8010598 <UART_SetConfig+0xe8>
 8010560:	a201      	add	r2, pc, #4	@ (adr r2, 8010568 <UART_SetConfig+0xb8>)
 8010562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010566:	bf00      	nop
 8010568:	08010579 	.word	0x08010579
 801056c:	08010589 	.word	0x08010589
 8010570:	08010581 	.word	0x08010581
 8010574:	08010591 	.word	0x08010591
 8010578:	2301      	movs	r3, #1
 801057a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801057e:	e042      	b.n	8010606 <UART_SetConfig+0x156>
 8010580:	2302      	movs	r3, #2
 8010582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010586:	e03e      	b.n	8010606 <UART_SetConfig+0x156>
 8010588:	2304      	movs	r3, #4
 801058a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801058e:	e03a      	b.n	8010606 <UART_SetConfig+0x156>
 8010590:	2308      	movs	r3, #8
 8010592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010596:	e036      	b.n	8010606 <UART_SetConfig+0x156>
 8010598:	2310      	movs	r3, #16
 801059a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801059e:	e032      	b.n	8010606 <UART_SetConfig+0x156>
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	4a7e      	ldr	r2, [pc, #504]	@ (80107a0 <UART_SetConfig+0x2f0>)
 80105a6:	4293      	cmp	r3, r2
 80105a8:	d12a      	bne.n	8010600 <UART_SetConfig+0x150>
 80105aa:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80105ae:	f7ff fa59 	bl	800fa64 <LL_RCC_GetLPUARTClockSource>
 80105b2:	4603      	mov	r3, r0
 80105b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80105b8:	d01a      	beq.n	80105f0 <UART_SetConfig+0x140>
 80105ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80105be:	d81b      	bhi.n	80105f8 <UART_SetConfig+0x148>
 80105c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80105c4:	d00c      	beq.n	80105e0 <UART_SetConfig+0x130>
 80105c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80105ca:	d815      	bhi.n	80105f8 <UART_SetConfig+0x148>
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d003      	beq.n	80105d8 <UART_SetConfig+0x128>
 80105d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80105d4:	d008      	beq.n	80105e8 <UART_SetConfig+0x138>
 80105d6:	e00f      	b.n	80105f8 <UART_SetConfig+0x148>
 80105d8:	2300      	movs	r3, #0
 80105da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80105de:	e012      	b.n	8010606 <UART_SetConfig+0x156>
 80105e0:	2302      	movs	r3, #2
 80105e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80105e6:	e00e      	b.n	8010606 <UART_SetConfig+0x156>
 80105e8:	2304      	movs	r3, #4
 80105ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80105ee:	e00a      	b.n	8010606 <UART_SetConfig+0x156>
 80105f0:	2308      	movs	r3, #8
 80105f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80105f6:	e006      	b.n	8010606 <UART_SetConfig+0x156>
 80105f8:	2310      	movs	r3, #16
 80105fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80105fe:	e002      	b.n	8010606 <UART_SetConfig+0x156>
 8010600:	2310      	movs	r3, #16
 8010602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	4a65      	ldr	r2, [pc, #404]	@ (80107a0 <UART_SetConfig+0x2f0>)
 801060c:	4293      	cmp	r3, r2
 801060e:	f040 8097 	bne.w	8010740 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010612:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010616:	2b08      	cmp	r3, #8
 8010618:	d823      	bhi.n	8010662 <UART_SetConfig+0x1b2>
 801061a:	a201      	add	r2, pc, #4	@ (adr r2, 8010620 <UART_SetConfig+0x170>)
 801061c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010620:	08010645 	.word	0x08010645
 8010624:	08010663 	.word	0x08010663
 8010628:	0801064d 	.word	0x0801064d
 801062c:	08010663 	.word	0x08010663
 8010630:	08010653 	.word	0x08010653
 8010634:	08010663 	.word	0x08010663
 8010638:	08010663 	.word	0x08010663
 801063c:	08010663 	.word	0x08010663
 8010640:	0801065b 	.word	0x0801065b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010644:	f7fc fc88 	bl	800cf58 <HAL_RCC_GetPCLK1Freq>
 8010648:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801064a:	e010      	b.n	801066e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801064c:	4b56      	ldr	r3, [pc, #344]	@ (80107a8 <UART_SetConfig+0x2f8>)
 801064e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010650:	e00d      	b.n	801066e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010652:	f7fc fc01 	bl	800ce58 <HAL_RCC_GetSysClockFreq>
 8010656:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010658:	e009      	b.n	801066e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801065a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801065e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010660:	e005      	b.n	801066e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8010662:	2300      	movs	r3, #0
 8010664:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010666:	2301      	movs	r3, #1
 8010668:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801066c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801066e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010670:	2b00      	cmp	r3, #0
 8010672:	f000 812b 	beq.w	80108cc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801067a:	4a4c      	ldr	r2, [pc, #304]	@ (80107ac <UART_SetConfig+0x2fc>)
 801067c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010680:	461a      	mov	r2, r3
 8010682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010684:	fbb3 f3f2 	udiv	r3, r3, r2
 8010688:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	685a      	ldr	r2, [r3, #4]
 801068e:	4613      	mov	r3, r2
 8010690:	005b      	lsls	r3, r3, #1
 8010692:	4413      	add	r3, r2
 8010694:	69ba      	ldr	r2, [r7, #24]
 8010696:	429a      	cmp	r2, r3
 8010698:	d305      	bcc.n	80106a6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80106a0:	69ba      	ldr	r2, [r7, #24]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d903      	bls.n	80106ae <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80106a6:	2301      	movs	r3, #1
 80106a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80106ac:	e10e      	b.n	80108cc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80106ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106b0:	2200      	movs	r2, #0
 80106b2:	60bb      	str	r3, [r7, #8]
 80106b4:	60fa      	str	r2, [r7, #12]
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106ba:	4a3c      	ldr	r2, [pc, #240]	@ (80107ac <UART_SetConfig+0x2fc>)
 80106bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	2200      	movs	r2, #0
 80106c4:	603b      	str	r3, [r7, #0]
 80106c6:	607a      	str	r2, [r7, #4]
 80106c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80106d0:	f7f0 fab2 	bl	8000c38 <__aeabi_uldivmod>
 80106d4:	4602      	mov	r2, r0
 80106d6:	460b      	mov	r3, r1
 80106d8:	4610      	mov	r0, r2
 80106da:	4619      	mov	r1, r3
 80106dc:	f04f 0200 	mov.w	r2, #0
 80106e0:	f04f 0300 	mov.w	r3, #0
 80106e4:	020b      	lsls	r3, r1, #8
 80106e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80106ea:	0202      	lsls	r2, r0, #8
 80106ec:	6979      	ldr	r1, [r7, #20]
 80106ee:	6849      	ldr	r1, [r1, #4]
 80106f0:	0849      	lsrs	r1, r1, #1
 80106f2:	2000      	movs	r0, #0
 80106f4:	460c      	mov	r4, r1
 80106f6:	4605      	mov	r5, r0
 80106f8:	eb12 0804 	adds.w	r8, r2, r4
 80106fc:	eb43 0905 	adc.w	r9, r3, r5
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	685b      	ldr	r3, [r3, #4]
 8010704:	2200      	movs	r2, #0
 8010706:	469a      	mov	sl, r3
 8010708:	4693      	mov	fp, r2
 801070a:	4652      	mov	r2, sl
 801070c:	465b      	mov	r3, fp
 801070e:	4640      	mov	r0, r8
 8010710:	4649      	mov	r1, r9
 8010712:	f7f0 fa91 	bl	8000c38 <__aeabi_uldivmod>
 8010716:	4602      	mov	r2, r0
 8010718:	460b      	mov	r3, r1
 801071a:	4613      	mov	r3, r2
 801071c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801071e:	6a3b      	ldr	r3, [r7, #32]
 8010720:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010724:	d308      	bcc.n	8010738 <UART_SetConfig+0x288>
 8010726:	6a3b      	ldr	r3, [r7, #32]
 8010728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801072c:	d204      	bcs.n	8010738 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	6a3a      	ldr	r2, [r7, #32]
 8010734:	60da      	str	r2, [r3, #12]
 8010736:	e0c9      	b.n	80108cc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8010738:	2301      	movs	r3, #1
 801073a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801073e:	e0c5      	b.n	80108cc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	69db      	ldr	r3, [r3, #28]
 8010744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010748:	d16d      	bne.n	8010826 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801074a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801074e:	3b01      	subs	r3, #1
 8010750:	2b07      	cmp	r3, #7
 8010752:	d82d      	bhi.n	80107b0 <UART_SetConfig+0x300>
 8010754:	a201      	add	r2, pc, #4	@ (adr r2, 801075c <UART_SetConfig+0x2ac>)
 8010756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801075a:	bf00      	nop
 801075c:	0801077d 	.word	0x0801077d
 8010760:	08010785 	.word	0x08010785
 8010764:	080107b1 	.word	0x080107b1
 8010768:	0801078b 	.word	0x0801078b
 801076c:	080107b1 	.word	0x080107b1
 8010770:	080107b1 	.word	0x080107b1
 8010774:	080107b1 	.word	0x080107b1
 8010778:	08010793 	.word	0x08010793
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801077c:	f7fc fc02 	bl	800cf84 <HAL_RCC_GetPCLK2Freq>
 8010780:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010782:	e01b      	b.n	80107bc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010784:	4b08      	ldr	r3, [pc, #32]	@ (80107a8 <UART_SetConfig+0x2f8>)
 8010786:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010788:	e018      	b.n	80107bc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801078a:	f7fc fb65 	bl	800ce58 <HAL_RCC_GetSysClockFreq>
 801078e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010790:	e014      	b.n	80107bc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010796:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010798:	e010      	b.n	80107bc <UART_SetConfig+0x30c>
 801079a:	bf00      	nop
 801079c:	cfff69f3 	.word	0xcfff69f3
 80107a0:	40008000 	.word	0x40008000
 80107a4:	40013800 	.word	0x40013800
 80107a8:	00f42400 	.word	0x00f42400
 80107ac:	0801f0d4 	.word	0x0801f0d4
      default:
        pclk = 0U;
 80107b0:	2300      	movs	r3, #0
 80107b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80107b4:	2301      	movs	r3, #1
 80107b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80107ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80107bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107be:	2b00      	cmp	r3, #0
 80107c0:	f000 8084 	beq.w	80108cc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107c8:	4a4b      	ldr	r2, [pc, #300]	@ (80108f8 <UART_SetConfig+0x448>)
 80107ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107ce:	461a      	mov	r2, r3
 80107d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80107d6:	005a      	lsls	r2, r3, #1
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	685b      	ldr	r3, [r3, #4]
 80107dc:	085b      	lsrs	r3, r3, #1
 80107de:	441a      	add	r2, r3
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80107e8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80107ea:	6a3b      	ldr	r3, [r7, #32]
 80107ec:	2b0f      	cmp	r3, #15
 80107ee:	d916      	bls.n	801081e <UART_SetConfig+0x36e>
 80107f0:	6a3b      	ldr	r3, [r7, #32]
 80107f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80107f6:	d212      	bcs.n	801081e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80107f8:	6a3b      	ldr	r3, [r7, #32]
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	f023 030f 	bic.w	r3, r3, #15
 8010800:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010802:	6a3b      	ldr	r3, [r7, #32]
 8010804:	085b      	lsrs	r3, r3, #1
 8010806:	b29b      	uxth	r3, r3
 8010808:	f003 0307 	and.w	r3, r3, #7
 801080c:	b29a      	uxth	r2, r3
 801080e:	8bfb      	ldrh	r3, [r7, #30]
 8010810:	4313      	orrs	r3, r2
 8010812:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	8bfa      	ldrh	r2, [r7, #30]
 801081a:	60da      	str	r2, [r3, #12]
 801081c:	e056      	b.n	80108cc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801081e:	2301      	movs	r3, #1
 8010820:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010824:	e052      	b.n	80108cc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010826:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801082a:	3b01      	subs	r3, #1
 801082c:	2b07      	cmp	r3, #7
 801082e:	d822      	bhi.n	8010876 <UART_SetConfig+0x3c6>
 8010830:	a201      	add	r2, pc, #4	@ (adr r2, 8010838 <UART_SetConfig+0x388>)
 8010832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010836:	bf00      	nop
 8010838:	08010859 	.word	0x08010859
 801083c:	08010861 	.word	0x08010861
 8010840:	08010877 	.word	0x08010877
 8010844:	08010867 	.word	0x08010867
 8010848:	08010877 	.word	0x08010877
 801084c:	08010877 	.word	0x08010877
 8010850:	08010877 	.word	0x08010877
 8010854:	0801086f 	.word	0x0801086f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010858:	f7fc fb94 	bl	800cf84 <HAL_RCC_GetPCLK2Freq>
 801085c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801085e:	e010      	b.n	8010882 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010860:	4b26      	ldr	r3, [pc, #152]	@ (80108fc <UART_SetConfig+0x44c>)
 8010862:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010864:	e00d      	b.n	8010882 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010866:	f7fc faf7 	bl	800ce58 <HAL_RCC_GetSysClockFreq>
 801086a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801086c:	e009      	b.n	8010882 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801086e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010872:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010874:	e005      	b.n	8010882 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8010876:	2300      	movs	r3, #0
 8010878:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801087a:	2301      	movs	r3, #1
 801087c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010880:	bf00      	nop
    }

    if (pclk != 0U)
 8010882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010884:	2b00      	cmp	r3, #0
 8010886:	d021      	beq.n	80108cc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801088c:	4a1a      	ldr	r2, [pc, #104]	@ (80108f8 <UART_SetConfig+0x448>)
 801088e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010892:	461a      	mov	r2, r3
 8010894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010896:	fbb3 f2f2 	udiv	r2, r3, r2
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	085b      	lsrs	r3, r3, #1
 80108a0:	441a      	add	r2, r3
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	685b      	ldr	r3, [r3, #4]
 80108a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80108aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80108ac:	6a3b      	ldr	r3, [r7, #32]
 80108ae:	2b0f      	cmp	r3, #15
 80108b0:	d909      	bls.n	80108c6 <UART_SetConfig+0x416>
 80108b2:	6a3b      	ldr	r3, [r7, #32]
 80108b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80108b8:	d205      	bcs.n	80108c6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80108ba:	6a3b      	ldr	r3, [r7, #32]
 80108bc:	b29a      	uxth	r2, r3
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	60da      	str	r2, [r3, #12]
 80108c4:	e002      	b.n	80108cc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80108c6:	2301      	movs	r3, #1
 80108c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	2201      	movs	r2, #1
 80108d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	2201      	movs	r2, #1
 80108d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	2200      	movs	r2, #0
 80108e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	2200      	movs	r2, #0
 80108e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80108e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3730      	adds	r7, #48	@ 0x30
 80108f0:	46bd      	mov	sp, r7
 80108f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80108f6:	bf00      	nop
 80108f8:	0801f0d4 	.word	0x0801f0d4
 80108fc:	00f42400 	.word	0x00f42400

08010900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010900:	b480      	push	{r7}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801090c:	f003 0308 	and.w	r3, r3, #8
 8010910:	2b00      	cmp	r3, #0
 8010912:	d00a      	beq.n	801092a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	685b      	ldr	r3, [r3, #4]
 801091a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	430a      	orrs	r2, r1
 8010928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801092e:	f003 0301 	and.w	r3, r3, #1
 8010932:	2b00      	cmp	r3, #0
 8010934:	d00a      	beq.n	801094c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	685b      	ldr	r3, [r3, #4]
 801093c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	430a      	orrs	r2, r1
 801094a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010950:	f003 0302 	and.w	r3, r3, #2
 8010954:	2b00      	cmp	r3, #0
 8010956:	d00a      	beq.n	801096e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	430a      	orrs	r2, r1
 801096c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010972:	f003 0304 	and.w	r3, r3, #4
 8010976:	2b00      	cmp	r3, #0
 8010978:	d00a      	beq.n	8010990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	430a      	orrs	r2, r1
 801098e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010994:	f003 0310 	and.w	r3, r3, #16
 8010998:	2b00      	cmp	r3, #0
 801099a:	d00a      	beq.n	80109b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	689b      	ldr	r3, [r3, #8]
 80109a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	430a      	orrs	r2, r1
 80109b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109b6:	f003 0320 	and.w	r3, r3, #32
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d00a      	beq.n	80109d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	689b      	ldr	r3, [r3, #8]
 80109c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	430a      	orrs	r2, r1
 80109d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d01a      	beq.n	8010a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	685b      	ldr	r3, [r3, #4]
 80109e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	430a      	orrs	r2, r1
 80109f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80109fe:	d10a      	bne.n	8010a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	685b      	ldr	r3, [r3, #4]
 8010a06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	430a      	orrs	r2, r1
 8010a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d00a      	beq.n	8010a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	685b      	ldr	r3, [r3, #4]
 8010a28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	430a      	orrs	r2, r1
 8010a36:	605a      	str	r2, [r3, #4]
  }
}
 8010a38:	bf00      	nop
 8010a3a:	370c      	adds	r7, #12
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr

08010a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b098      	sub	sp, #96	@ 0x60
 8010a48:	af02      	add	r7, sp, #8
 8010a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010a54:	f7f6 fbb6 	bl	80071c4 <HAL_GetTick>
 8010a58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f003 0308 	and.w	r3, r3, #8
 8010a64:	2b08      	cmp	r3, #8
 8010a66:	d12f      	bne.n	8010ac8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010a6c:	9300      	str	r3, [sp, #0]
 8010a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a70:	2200      	movs	r2, #0
 8010a72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f000 f88e 	bl	8010b98 <UART_WaitOnFlagUntilTimeout>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d022      	beq.n	8010ac8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a8a:	e853 3f00 	ldrex	r3, [r3]
 8010a8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010a96:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010aa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010aa2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010aa8:	e841 2300 	strex	r3, r2, [r1]
 8010aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d1e6      	bne.n	8010a82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2220      	movs	r2, #32
 8010ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010ac4:	2303      	movs	r3, #3
 8010ac6:	e063      	b.n	8010b90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	f003 0304 	and.w	r3, r3, #4
 8010ad2:	2b04      	cmp	r3, #4
 8010ad4:	d149      	bne.n	8010b6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ad6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010ada:	9300      	str	r3, [sp, #0]
 8010adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ade:	2200      	movs	r2, #0
 8010ae0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f000 f857 	bl	8010b98 <UART_WaitOnFlagUntilTimeout>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d03c      	beq.n	8010b6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010af8:	e853 3f00 	ldrex	r3, [r3]
 8010afc:	623b      	str	r3, [r7, #32]
   return(result);
 8010afe:	6a3b      	ldr	r3, [r7, #32]
 8010b00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b16:	e841 2300 	strex	r3, r2, [r1]
 8010b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d1e6      	bne.n	8010af0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	3308      	adds	r3, #8
 8010b28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	e853 3f00 	ldrex	r3, [r3]
 8010b30:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f023 0301 	bic.w	r3, r3, #1
 8010b38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	3308      	adds	r3, #8
 8010b40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b42:	61fa      	str	r2, [r7, #28]
 8010b44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b46:	69b9      	ldr	r1, [r7, #24]
 8010b48:	69fa      	ldr	r2, [r7, #28]
 8010b4a:	e841 2300 	strex	r3, r2, [r1]
 8010b4e:	617b      	str	r3, [r7, #20]
   return(result);
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d1e5      	bne.n	8010b22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2220      	movs	r2, #32
 8010b5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2200      	movs	r2, #0
 8010b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b66:	2303      	movs	r3, #3
 8010b68:	e012      	b.n	8010b90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2220      	movs	r2, #32
 8010b6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2220      	movs	r2, #32
 8010b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2200      	movs	r2, #0
 8010b84:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b8e:	2300      	movs	r3, #0
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3758      	adds	r7, #88	@ 0x58
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}

08010b98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b084      	sub	sp, #16
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	60f8      	str	r0, [r7, #12]
 8010ba0:	60b9      	str	r1, [r7, #8]
 8010ba2:	603b      	str	r3, [r7, #0]
 8010ba4:	4613      	mov	r3, r2
 8010ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ba8:	e04f      	b.n	8010c4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010baa:	69bb      	ldr	r3, [r7, #24]
 8010bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bb0:	d04b      	beq.n	8010c4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010bb2:	f7f6 fb07 	bl	80071c4 <HAL_GetTick>
 8010bb6:	4602      	mov	r2, r0
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	1ad3      	subs	r3, r2, r3
 8010bbc:	69ba      	ldr	r2, [r7, #24]
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d302      	bcc.n	8010bc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d101      	bne.n	8010bcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010bc8:	2303      	movs	r3, #3
 8010bca:	e04e      	b.n	8010c6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	f003 0304 	and.w	r3, r3, #4
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d037      	beq.n	8010c4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	2b80      	cmp	r3, #128	@ 0x80
 8010bde:	d034      	beq.n	8010c4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	2b40      	cmp	r3, #64	@ 0x40
 8010be4:	d031      	beq.n	8010c4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	69db      	ldr	r3, [r3, #28]
 8010bec:	f003 0308 	and.w	r3, r3, #8
 8010bf0:	2b08      	cmp	r3, #8
 8010bf2:	d110      	bne.n	8010c16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	2208      	movs	r2, #8
 8010bfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010bfc:	68f8      	ldr	r0, [r7, #12]
 8010bfe:	f000 f920 	bl	8010e42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2208      	movs	r2, #8
 8010c06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010c12:	2301      	movs	r3, #1
 8010c14:	e029      	b.n	8010c6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	69db      	ldr	r3, [r3, #28]
 8010c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010c20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010c24:	d111      	bne.n	8010c4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010c2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010c30:	68f8      	ldr	r0, [r7, #12]
 8010c32:	f000 f906 	bl	8010e42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2220      	movs	r2, #32
 8010c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2200      	movs	r2, #0
 8010c42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010c46:	2303      	movs	r3, #3
 8010c48:	e00f      	b.n	8010c6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	69da      	ldr	r2, [r3, #28]
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	4013      	ands	r3, r2
 8010c54:	68ba      	ldr	r2, [r7, #8]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	bf0c      	ite	eq
 8010c5a:	2301      	moveq	r3, #1
 8010c5c:	2300      	movne	r3, #0
 8010c5e:	b2db      	uxtb	r3, r3
 8010c60:	461a      	mov	r2, r3
 8010c62:	79fb      	ldrb	r3, [r7, #7]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d0a0      	beq.n	8010baa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c68:	2300      	movs	r3, #0
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3710      	adds	r7, #16
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
	...

08010c74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b096      	sub	sp, #88	@ 0x58
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	60f8      	str	r0, [r7, #12]
 8010c7c:	60b9      	str	r1, [r7, #8]
 8010c7e:	4613      	mov	r3, r2
 8010c80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	68ba      	ldr	r2, [r7, #8]
 8010c86:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	88fa      	ldrh	r2, [r7, #6]
 8010c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	2200      	movs	r2, #0
 8010c94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2222      	movs	r2, #34	@ 0x22
 8010c9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d02d      	beq.n	8010d06 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010cb0:	4a40      	ldr	r2, [pc, #256]	@ (8010db4 <UART_Start_Receive_DMA+0x140>)
 8010cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010cba:	4a3f      	ldr	r2, [pc, #252]	@ (8010db8 <UART_Start_Receive_DMA+0x144>)
 8010cbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010cc4:	4a3d      	ldr	r2, [pc, #244]	@ (8010dbc <UART_Start_Receive_DMA+0x148>)
 8010cc6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010cce:	2200      	movs	r2, #0
 8010cd0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	3324      	adds	r3, #36	@ 0x24
 8010cde:	4619      	mov	r1, r3
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ce4:	461a      	mov	r2, r3
 8010ce6:	88fb      	ldrh	r3, [r7, #6]
 8010ce8:	f7f7 fce0 	bl	80086ac <HAL_DMA_Start_IT>
 8010cec:	4603      	mov	r3, r0
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d009      	beq.n	8010d06 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	2210      	movs	r2, #16
 8010cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2220      	movs	r2, #32
 8010cfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010d02:	2301      	movs	r3, #1
 8010d04:	e051      	b.n	8010daa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	691b      	ldr	r3, [r3, #16]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d018      	beq.n	8010d40 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d16:	e853 3f00 	ldrex	r3, [r3]
 8010d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010d22:	657b      	str	r3, [r7, #84]	@ 0x54
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	461a      	mov	r2, r3
 8010d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d2e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d30:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010d32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010d34:	e841 2300 	strex	r3, r2, [r1]
 8010d38:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d1e6      	bne.n	8010d0e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	3308      	adds	r3, #8
 8010d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d4a:	e853 3f00 	ldrex	r3, [r3]
 8010d4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d52:	f043 0301 	orr.w	r3, r3, #1
 8010d56:	653b      	str	r3, [r7, #80]	@ 0x50
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	3308      	adds	r3, #8
 8010d5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010d60:	637a      	str	r2, [r7, #52]	@ 0x34
 8010d62:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010d66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010d68:	e841 2300 	strex	r3, r2, [r1]
 8010d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d1e5      	bne.n	8010d40 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	3308      	adds	r3, #8
 8010d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	e853 3f00 	ldrex	r3, [r3]
 8010d82:	613b      	str	r3, [r7, #16]
   return(result);
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	3308      	adds	r3, #8
 8010d92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010d94:	623a      	str	r2, [r7, #32]
 8010d96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d98:	69f9      	ldr	r1, [r7, #28]
 8010d9a:	6a3a      	ldr	r2, [r7, #32]
 8010d9c:	e841 2300 	strex	r3, r2, [r1]
 8010da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8010da2:	69bb      	ldr	r3, [r7, #24]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d1e5      	bne.n	8010d74 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010da8:	2300      	movs	r3, #0
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3758      	adds	r7, #88	@ 0x58
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	08010f0f 	.word	0x08010f0f
 8010db8:	0801103b 	.word	0x0801103b
 8010dbc:	08011079 	.word	0x08011079

08010dc0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	b08f      	sub	sp, #60	@ 0x3c
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dce:	6a3b      	ldr	r3, [r7, #32]
 8010dd0:	e853 3f00 	ldrex	r3, [r3]
 8010dd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8010dd6:	69fb      	ldr	r3, [r7, #28]
 8010dd8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	461a      	mov	r2, r3
 8010de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010de8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010dec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010dee:	e841 2300 	strex	r3, r2, [r1]
 8010df2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d1e6      	bne.n	8010dc8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	3308      	adds	r3, #8
 8010e00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	e853 3f00 	ldrex	r3, [r3]
 8010e08:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010e10:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	3308      	adds	r3, #8
 8010e18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e1a:	61ba      	str	r2, [r7, #24]
 8010e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e1e:	6979      	ldr	r1, [r7, #20]
 8010e20:	69ba      	ldr	r2, [r7, #24]
 8010e22:	e841 2300 	strex	r3, r2, [r1]
 8010e26:	613b      	str	r3, [r7, #16]
   return(result);
 8010e28:	693b      	ldr	r3, [r7, #16]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d1e5      	bne.n	8010dfa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2220      	movs	r2, #32
 8010e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010e36:	bf00      	nop
 8010e38:	373c      	adds	r7, #60	@ 0x3c
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e40:	4770      	bx	lr

08010e42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010e42:	b480      	push	{r7}
 8010e44:	b095      	sub	sp, #84	@ 0x54
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e52:	e853 3f00 	ldrex	r3, [r3]
 8010e56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	461a      	mov	r2, r3
 8010e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e68:	643b      	str	r3, [r7, #64]	@ 0x40
 8010e6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010e6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010e70:	e841 2300 	strex	r3, r2, [r1]
 8010e74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d1e6      	bne.n	8010e4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	3308      	adds	r3, #8
 8010e82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e84:	6a3b      	ldr	r3, [r7, #32]
 8010e86:	e853 3f00 	ldrex	r3, [r3]
 8010e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8010e8c:	69fb      	ldr	r3, [r7, #28]
 8010e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010e92:	f023 0301 	bic.w	r3, r3, #1
 8010e96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	3308      	adds	r3, #8
 8010e9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ea0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ea8:	e841 2300 	strex	r3, r2, [r1]
 8010eac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d1e3      	bne.n	8010e7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010eb8:	2b01      	cmp	r3, #1
 8010eba:	d118      	bne.n	8010eee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	e853 3f00 	ldrex	r3, [r3]
 8010ec8:	60bb      	str	r3, [r7, #8]
   return(result);
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	f023 0310 	bic.w	r3, r3, #16
 8010ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010eda:	61bb      	str	r3, [r7, #24]
 8010edc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ede:	6979      	ldr	r1, [r7, #20]
 8010ee0:	69ba      	ldr	r2, [r7, #24]
 8010ee2:	e841 2300 	strex	r3, r2, [r1]
 8010ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d1e6      	bne.n	8010ebc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2220      	movs	r2, #32
 8010ef2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2200      	movs	r2, #0
 8010f00:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010f02:	bf00      	nop
 8010f04:	3754      	adds	r7, #84	@ 0x54
 8010f06:	46bd      	mov	sp, r7
 8010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0c:	4770      	bx	lr

08010f0e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010f0e:	b580      	push	{r7, lr}
 8010f10:	b09c      	sub	sp, #112	@ 0x70
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f1a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f003 0320 	and.w	r3, r3, #32
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d171      	bne.n	801100e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010f2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f3a:	e853 3f00 	ldrex	r3, [r3]
 8010f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010f40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010f46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010f50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010f52:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010f56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010f58:	e841 2300 	strex	r3, r2, [r1]
 8010f5c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d1e6      	bne.n	8010f32 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	3308      	adds	r3, #8
 8010f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f6e:	e853 3f00 	ldrex	r3, [r3]
 8010f72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f76:	f023 0301 	bic.w	r3, r3, #1
 8010f7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8010f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	3308      	adds	r3, #8
 8010f82:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010f84:	647a      	str	r2, [r7, #68]	@ 0x44
 8010f86:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010f8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f8c:	e841 2300 	strex	r3, r2, [r1]
 8010f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d1e5      	bne.n	8010f64 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	3308      	adds	r3, #8
 8010f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fa2:	e853 3f00 	ldrex	r3, [r3]
 8010fa6:	623b      	str	r3, [r7, #32]
   return(result);
 8010fa8:	6a3b      	ldr	r3, [r7, #32]
 8010faa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010fae:	663b      	str	r3, [r7, #96]	@ 0x60
 8010fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	3308      	adds	r3, #8
 8010fb6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010fb8:	633a      	str	r2, [r7, #48]	@ 0x30
 8010fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fc0:	e841 2300 	strex	r3, r2, [r1]
 8010fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d1e5      	bne.n	8010f98 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fce:	2220      	movs	r2, #32
 8010fd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	d118      	bne.n	801100e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010fdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	e853 3f00 	ldrex	r3, [r3]
 8010fe8:	60fb      	str	r3, [r7, #12]
   return(result);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f023 0310 	bic.w	r3, r3, #16
 8010ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ffa:	61fb      	str	r3, [r7, #28]
 8010ffc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ffe:	69b9      	ldr	r1, [r7, #24]
 8011000:	69fa      	ldr	r2, [r7, #28]
 8011002:	e841 2300 	strex	r3, r2, [r1]
 8011006:	617b      	str	r3, [r7, #20]
   return(result);
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d1e6      	bne.n	8010fdc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801100e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011010:	2200      	movs	r2, #0
 8011012:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011014:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011018:	2b01      	cmp	r3, #1
 801101a:	d107      	bne.n	801102c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801101c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801101e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011022:	4619      	mov	r1, r3
 8011024:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011026:	f7ff fa37 	bl	8010498 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801102a:	e002      	b.n	8011032 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 801102c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801102e:	f7f5 fe61 	bl	8006cf4 <HAL_UART_RxCpltCallback>
}
 8011032:	bf00      	nop
 8011034:	3770      	adds	r7, #112	@ 0x70
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}

0801103a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801103a:	b580      	push	{r7, lr}
 801103c:	b084      	sub	sp, #16
 801103e:	af00      	add	r7, sp, #0
 8011040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011046:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2201      	movs	r2, #1
 801104c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011052:	2b01      	cmp	r3, #1
 8011054:	d109      	bne.n	801106a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801105c:	085b      	lsrs	r3, r3, #1
 801105e:	b29b      	uxth	r3, r3
 8011060:	4619      	mov	r1, r3
 8011062:	68f8      	ldr	r0, [r7, #12]
 8011064:	f7ff fa18 	bl	8010498 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011068:	e002      	b.n	8011070 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801106a:	68f8      	ldr	r0, [r7, #12]
 801106c:	f7ff fa00 	bl	8010470 <HAL_UART_RxHalfCpltCallback>
}
 8011070:	bf00      	nop
 8011072:	3710      	adds	r7, #16
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b086      	sub	sp, #24
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011084:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801108c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011094:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	689b      	ldr	r3, [r3, #8]
 801109c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110a0:	2b80      	cmp	r3, #128	@ 0x80
 80110a2:	d109      	bne.n	80110b8 <UART_DMAError+0x40>
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	2b21      	cmp	r3, #33	@ 0x21
 80110a8:	d106      	bne.n	80110b8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	2200      	movs	r2, #0
 80110ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80110b2:	6978      	ldr	r0, [r7, #20]
 80110b4:	f7ff fe84 	bl	8010dc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	689b      	ldr	r3, [r3, #8]
 80110be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110c2:	2b40      	cmp	r3, #64	@ 0x40
 80110c4:	d109      	bne.n	80110da <UART_DMAError+0x62>
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	2b22      	cmp	r3, #34	@ 0x22
 80110ca:	d106      	bne.n	80110da <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	2200      	movs	r2, #0
 80110d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80110d4:	6978      	ldr	r0, [r7, #20]
 80110d6:	f7ff feb4 	bl	8010e42 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80110e0:	f043 0210 	orr.w	r2, r3, #16
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80110ea:	6978      	ldr	r0, [r7, #20]
 80110ec:	f7ff f9ca 	bl	8010484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80110f0:	bf00      	nop
 80110f2:	3718      	adds	r7, #24
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}

080110f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011104:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2200      	movs	r2, #0
 801110a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801110e:	68f8      	ldr	r0, [r7, #12]
 8011110:	f7ff f9b8 	bl	8010484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011114:	bf00      	nop
 8011116:	3710      	adds	r7, #16
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b088      	sub	sp, #32
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	e853 3f00 	ldrex	r3, [r3]
 8011130:	60bb      	str	r3, [r7, #8]
   return(result);
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011138:	61fb      	str	r3, [r7, #28]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	461a      	mov	r2, r3
 8011140:	69fb      	ldr	r3, [r7, #28]
 8011142:	61bb      	str	r3, [r7, #24]
 8011144:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011146:	6979      	ldr	r1, [r7, #20]
 8011148:	69ba      	ldr	r2, [r7, #24]
 801114a:	e841 2300 	strex	r3, r2, [r1]
 801114e:	613b      	str	r3, [r7, #16]
   return(result);
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d1e6      	bne.n	8011124 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2220      	movs	r2, #32
 801115a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2200      	movs	r2, #0
 8011162:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f7ff f979 	bl	801045c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801116a:	bf00      	nop
 801116c:	3720      	adds	r7, #32
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}

08011172 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011172:	b480      	push	{r7}
 8011174:	b083      	sub	sp, #12
 8011176:	af00      	add	r7, sp, #0
 8011178:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801117a:	bf00      	nop
 801117c:	370c      	adds	r7, #12
 801117e:	46bd      	mov	sp, r7
 8011180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011184:	4770      	bx	lr

08011186 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011186:	b480      	push	{r7}
 8011188:	b083      	sub	sp, #12
 801118a:	af00      	add	r7, sp, #0
 801118c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801118e:	bf00      	nop
 8011190:	370c      	adds	r7, #12
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr

0801119a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801119a:	b480      	push	{r7}
 801119c:	b083      	sub	sp, #12
 801119e:	af00      	add	r7, sp, #0
 80111a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80111a2:	bf00      	nop
 80111a4:	370c      	adds	r7, #12
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr

080111ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80111ae:	b480      	push	{r7}
 80111b0:	b085      	sub	sp, #20
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d101      	bne.n	80111c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80111c0:	2302      	movs	r3, #2
 80111c2:	e027      	b.n	8011214 <HAL_UARTEx_DisableFifoMode+0x66>
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2201      	movs	r2, #1
 80111c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2224      	movs	r2, #36	@ 0x24
 80111d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	681a      	ldr	r2, [r3, #0]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f022 0201 	bic.w	r2, r2, #1
 80111ea:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80111f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2200      	movs	r2, #0
 80111f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	68fa      	ldr	r2, [r7, #12]
 8011200:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2220      	movs	r2, #32
 8011206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2200      	movs	r2, #0
 801120e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011212:	2300      	movs	r3, #0
}
 8011214:	4618      	mov	r0, r3
 8011216:	3714      	adds	r7, #20
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr

08011220 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b084      	sub	sp, #16
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011230:	2b01      	cmp	r3, #1
 8011232:	d101      	bne.n	8011238 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011234:	2302      	movs	r3, #2
 8011236:	e02d      	b.n	8011294 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2201      	movs	r2, #1
 801123c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2224      	movs	r2, #36	@ 0x24
 8011244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	681a      	ldr	r2, [r3, #0]
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f022 0201 	bic.w	r2, r2, #1
 801125e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	689b      	ldr	r3, [r3, #8]
 8011266:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	683a      	ldr	r2, [r7, #0]
 8011270:	430a      	orrs	r2, r1
 8011272:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f000 f84f 	bl	8011318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	68fa      	ldr	r2, [r7, #12]
 8011280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2220      	movs	r2, #32
 8011286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2200      	movs	r2, #0
 801128e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011292:	2300      	movs	r3, #0
}
 8011294:	4618      	mov	r0, r3
 8011296:	3710      	adds	r7, #16
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b084      	sub	sp, #16
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80112ac:	2b01      	cmp	r3, #1
 80112ae:	d101      	bne.n	80112b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80112b0:	2302      	movs	r3, #2
 80112b2:	e02d      	b.n	8011310 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2201      	movs	r2, #1
 80112b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2224      	movs	r2, #36	@ 0x24
 80112c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	681a      	ldr	r2, [r3, #0]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	f022 0201 	bic.w	r2, r2, #1
 80112da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	689b      	ldr	r3, [r3, #8]
 80112e2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	683a      	ldr	r2, [r7, #0]
 80112ec:	430a      	orrs	r2, r1
 80112ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f000 f811 	bl	8011318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	68fa      	ldr	r2, [r7, #12]
 80112fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2220      	movs	r2, #32
 8011302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2200      	movs	r2, #0
 801130a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801130e:	2300      	movs	r3, #0
}
 8011310:	4618      	mov	r0, r3
 8011312:	3710      	adds	r7, #16
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}

08011318 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011318:	b480      	push	{r7}
 801131a:	b085      	sub	sp, #20
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011324:	2b00      	cmp	r3, #0
 8011326:	d108      	bne.n	801133a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2201      	movs	r2, #1
 801132c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2201      	movs	r2, #1
 8011334:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011338:	e031      	b.n	801139e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801133a:	2308      	movs	r3, #8
 801133c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801133e:	2308      	movs	r3, #8
 8011340:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	689b      	ldr	r3, [r3, #8]
 8011348:	0e5b      	lsrs	r3, r3, #25
 801134a:	b2db      	uxtb	r3, r3
 801134c:	f003 0307 	and.w	r3, r3, #7
 8011350:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	689b      	ldr	r3, [r3, #8]
 8011358:	0f5b      	lsrs	r3, r3, #29
 801135a:	b2db      	uxtb	r3, r3
 801135c:	f003 0307 	and.w	r3, r3, #7
 8011360:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011362:	7bbb      	ldrb	r3, [r7, #14]
 8011364:	7b3a      	ldrb	r2, [r7, #12]
 8011366:	4911      	ldr	r1, [pc, #68]	@ (80113ac <UARTEx_SetNbDataToProcess+0x94>)
 8011368:	5c8a      	ldrb	r2, [r1, r2]
 801136a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801136e:	7b3a      	ldrb	r2, [r7, #12]
 8011370:	490f      	ldr	r1, [pc, #60]	@ (80113b0 <UARTEx_SetNbDataToProcess+0x98>)
 8011372:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011374:	fb93 f3f2 	sdiv	r3, r3, r2
 8011378:	b29a      	uxth	r2, r3
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011380:	7bfb      	ldrb	r3, [r7, #15]
 8011382:	7b7a      	ldrb	r2, [r7, #13]
 8011384:	4909      	ldr	r1, [pc, #36]	@ (80113ac <UARTEx_SetNbDataToProcess+0x94>)
 8011386:	5c8a      	ldrb	r2, [r1, r2]
 8011388:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801138c:	7b7a      	ldrb	r2, [r7, #13]
 801138e:	4908      	ldr	r1, [pc, #32]	@ (80113b0 <UARTEx_SetNbDataToProcess+0x98>)
 8011390:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011392:	fb93 f3f2 	sdiv	r3, r3, r2
 8011396:	b29a      	uxth	r2, r3
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801139e:	bf00      	nop
 80113a0:	3714      	adds	r7, #20
 80113a2:	46bd      	mov	sp, r7
 80113a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a8:	4770      	bx	lr
 80113aa:	bf00      	nop
 80113ac:	0801f0ec 	.word	0x0801f0ec
 80113b0:	0801f0f4 	.word	0x0801f0f4

080113b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b085      	sub	sp, #20
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2200      	movs	r2, #0
 80113c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80113c4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80113c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	b29a      	uxth	r2, r3
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80113d4:	2300      	movs	r3, #0
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3714      	adds	r7, #20
 80113da:	46bd      	mov	sp, r7
 80113dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e0:	4770      	bx	lr

080113e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80113e2:	b480      	push	{r7}
 80113e4:	b085      	sub	sp, #20
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80113ea:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80113ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80113f6:	b29a      	uxth	r2, r3
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	43db      	mvns	r3, r3
 80113fe:	b29b      	uxth	r3, r3
 8011400:	4013      	ands	r3, r2
 8011402:	b29a      	uxth	r2, r3
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801140a:	2300      	movs	r3, #0
}
 801140c:	4618      	mov	r0, r3
 801140e:	3714      	adds	r7, #20
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr

08011418 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8011418:	b480      	push	{r7}
 801141a:	b085      	sub	sp, #20
 801141c:	af00      	add	r7, sp, #0
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	1d3b      	adds	r3, r7, #4
 8011422:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	2201      	movs	r2, #1
 801142a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	2200      	movs	r2, #0
 8011432:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	2200      	movs	r2, #0
 801143a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	2200      	movs	r2, #0
 8011442:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8011446:	2300      	movs	r3, #0
}
 8011448:	4618      	mov	r0, r3
 801144a:	3714      	adds	r7, #20
 801144c:	46bd      	mov	sp, r7
 801144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011452:	4770      	bx	lr

08011454 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011454:	b480      	push	{r7}
 8011456:	b0a7      	sub	sp, #156	@ 0x9c
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801145e:	2300      	movs	r3, #0
 8011460:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8011464:	687a      	ldr	r2, [r7, #4]
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	009b      	lsls	r3, r3, #2
 801146c:	4413      	add	r3, r2
 801146e:	881b      	ldrh	r3, [r3, #0]
 8011470:	b29b      	uxth	r3, r3
 8011472:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8011476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801147a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	78db      	ldrb	r3, [r3, #3]
 8011482:	2b03      	cmp	r3, #3
 8011484:	d81f      	bhi.n	80114c6 <USB_ActivateEndpoint+0x72>
 8011486:	a201      	add	r2, pc, #4	@ (adr r2, 801148c <USB_ActivateEndpoint+0x38>)
 8011488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801148c:	0801149d 	.word	0x0801149d
 8011490:	080114b9 	.word	0x080114b9
 8011494:	080114cf 	.word	0x080114cf
 8011498:	080114ab 	.word	0x080114ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801149c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80114a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80114a4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80114a8:	e012      	b.n	80114d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80114aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80114ae:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80114b2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80114b6:	e00b      	b.n	80114d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80114b8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80114bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80114c0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80114c4:	e004      	b.n	80114d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80114c6:	2301      	movs	r3, #1
 80114c8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80114cc:	e000      	b.n	80114d0 <USB_ActivateEndpoint+0x7c>
      break;
 80114ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80114d0:	687a      	ldr	r2, [r7, #4]
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	781b      	ldrb	r3, [r3, #0]
 80114d6:	009b      	lsls	r3, r3, #2
 80114d8:	441a      	add	r2, r3
 80114da:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80114de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80114e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80114e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	009b      	lsls	r3, r3, #2
 80114fa:	4413      	add	r3, r2
 80114fc:	881b      	ldrh	r3, [r3, #0]
 80114fe:	b29b      	uxth	r3, r3
 8011500:	b21b      	sxth	r3, r3
 8011502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801150a:	b21a      	sxth	r2, r3
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	781b      	ldrb	r3, [r3, #0]
 8011510:	b21b      	sxth	r3, r3
 8011512:	4313      	orrs	r3, r2
 8011514:	b21b      	sxth	r3, r3
 8011516:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 801151a:	687a      	ldr	r2, [r7, #4]
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	441a      	add	r2, r3
 8011524:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8011528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801152c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011538:	b29b      	uxth	r3, r3
 801153a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	7b1b      	ldrb	r3, [r3, #12]
 8011540:	2b00      	cmp	r3, #0
 8011542:	f040 8180 	bne.w	8011846 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	785b      	ldrb	r3, [r3, #1]
 801154a:	2b00      	cmp	r3, #0
 801154c:	f000 8084 	beq.w	8011658 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	61bb      	str	r3, [r7, #24]
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801155a:	b29b      	uxth	r3, r3
 801155c:	461a      	mov	r2, r3
 801155e:	69bb      	ldr	r3, [r7, #24]
 8011560:	4413      	add	r3, r2
 8011562:	61bb      	str	r3, [r7, #24]
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	00da      	lsls	r2, r3, #3
 801156a:	69bb      	ldr	r3, [r7, #24]
 801156c:	4413      	add	r3, r2
 801156e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011572:	617b      	str	r3, [r7, #20]
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	88db      	ldrh	r3, [r3, #6]
 8011578:	085b      	lsrs	r3, r3, #1
 801157a:	b29b      	uxth	r3, r3
 801157c:	005b      	lsls	r3, r3, #1
 801157e:	b29a      	uxth	r2, r3
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011584:	687a      	ldr	r2, [r7, #4]
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	4413      	add	r3, r2
 801158e:	881b      	ldrh	r3, [r3, #0]
 8011590:	827b      	strh	r3, [r7, #18]
 8011592:	8a7b      	ldrh	r3, [r7, #18]
 8011594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011598:	2b00      	cmp	r3, #0
 801159a:	d01b      	beq.n	80115d4 <USB_ActivateEndpoint+0x180>
 801159c:	687a      	ldr	r2, [r7, #4]
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	781b      	ldrb	r3, [r3, #0]
 80115a2:	009b      	lsls	r3, r3, #2
 80115a4:	4413      	add	r3, r2
 80115a6:	881b      	ldrh	r3, [r3, #0]
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80115ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115b2:	823b      	strh	r3, [r7, #16]
 80115b4:	687a      	ldr	r2, [r7, #4]
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	009b      	lsls	r3, r3, #2
 80115bc:	441a      	add	r2, r3
 80115be:	8a3b      	ldrh	r3, [r7, #16]
 80115c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80115c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80115c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80115cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	78db      	ldrb	r3, [r3, #3]
 80115d8:	2b01      	cmp	r3, #1
 80115da:	d020      	beq.n	801161e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80115dc:	687a      	ldr	r2, [r7, #4]
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	009b      	lsls	r3, r3, #2
 80115e4:	4413      	add	r3, r2
 80115e6:	881b      	ldrh	r3, [r3, #0]
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80115ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80115f2:	81bb      	strh	r3, [r7, #12]
 80115f4:	89bb      	ldrh	r3, [r7, #12]
 80115f6:	f083 0320 	eor.w	r3, r3, #32
 80115fa:	81bb      	strh	r3, [r7, #12]
 80115fc:	687a      	ldr	r2, [r7, #4]
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	009b      	lsls	r3, r3, #2
 8011604:	441a      	add	r2, r3
 8011606:	89bb      	ldrh	r3, [r7, #12]
 8011608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801160c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011618:	b29b      	uxth	r3, r3
 801161a:	8013      	strh	r3, [r2, #0]
 801161c:	e3f9      	b.n	8011e12 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801161e:	687a      	ldr	r2, [r7, #4]
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	781b      	ldrb	r3, [r3, #0]
 8011624:	009b      	lsls	r3, r3, #2
 8011626:	4413      	add	r3, r2
 8011628:	881b      	ldrh	r3, [r3, #0]
 801162a:	b29b      	uxth	r3, r3
 801162c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011630:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011634:	81fb      	strh	r3, [r7, #14]
 8011636:	687a      	ldr	r2, [r7, #4]
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	009b      	lsls	r3, r3, #2
 801163e:	441a      	add	r2, r3
 8011640:	89fb      	ldrh	r3, [r7, #14]
 8011642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801164a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801164e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011652:	b29b      	uxth	r3, r3
 8011654:	8013      	strh	r3, [r2, #0]
 8011656:	e3dc      	b.n	8011e12 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	633b      	str	r3, [r7, #48]	@ 0x30
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011662:	b29b      	uxth	r3, r3
 8011664:	461a      	mov	r2, r3
 8011666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011668:	4413      	add	r3, r2
 801166a:	633b      	str	r3, [r7, #48]	@ 0x30
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	781b      	ldrb	r3, [r3, #0]
 8011670:	00da      	lsls	r2, r3, #3
 8011672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011674:	4413      	add	r3, r2
 8011676:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801167a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	88db      	ldrh	r3, [r3, #6]
 8011680:	085b      	lsrs	r3, r3, #1
 8011682:	b29b      	uxth	r3, r3
 8011684:	005b      	lsls	r3, r3, #1
 8011686:	b29a      	uxth	r2, r3
 8011688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801168a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011696:	b29b      	uxth	r3, r3
 8011698:	461a      	mov	r2, r3
 801169a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801169c:	4413      	add	r3, r2
 801169e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	781b      	ldrb	r3, [r3, #0]
 80116a4:	00da      	lsls	r2, r3, #3
 80116a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116a8:	4413      	add	r3, r2
 80116aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80116ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80116b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116b2:	881b      	ldrh	r3, [r3, #0]
 80116b4:	b29b      	uxth	r3, r3
 80116b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80116ba:	b29a      	uxth	r2, r3
 80116bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116be:	801a      	strh	r2, [r3, #0]
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	691b      	ldr	r3, [r3, #16]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d10a      	bne.n	80116de <USB_ActivateEndpoint+0x28a>
 80116c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ca:	881b      	ldrh	r3, [r3, #0]
 80116cc:	b29b      	uxth	r3, r3
 80116ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116d6:	b29a      	uxth	r2, r3
 80116d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116da:	801a      	strh	r2, [r3, #0]
 80116dc:	e041      	b.n	8011762 <USB_ActivateEndpoint+0x30e>
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	691b      	ldr	r3, [r3, #16]
 80116e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80116e4:	d81c      	bhi.n	8011720 <USB_ActivateEndpoint+0x2cc>
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	691b      	ldr	r3, [r3, #16]
 80116ea:	085b      	lsrs	r3, r3, #1
 80116ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	691b      	ldr	r3, [r3, #16]
 80116f4:	f003 0301 	and.w	r3, r3, #1
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d004      	beq.n	8011706 <USB_ActivateEndpoint+0x2b2>
 80116fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011700:	3301      	adds	r3, #1
 8011702:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011708:	881b      	ldrh	r3, [r3, #0]
 801170a:	b29a      	uxth	r2, r3
 801170c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011710:	b29b      	uxth	r3, r3
 8011712:	029b      	lsls	r3, r3, #10
 8011714:	b29b      	uxth	r3, r3
 8011716:	4313      	orrs	r3, r2
 8011718:	b29a      	uxth	r2, r3
 801171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801171c:	801a      	strh	r2, [r3, #0]
 801171e:	e020      	b.n	8011762 <USB_ActivateEndpoint+0x30e>
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	691b      	ldr	r3, [r3, #16]
 8011724:	095b      	lsrs	r3, r3, #5
 8011726:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	691b      	ldr	r3, [r3, #16]
 801172e:	f003 031f 	and.w	r3, r3, #31
 8011732:	2b00      	cmp	r3, #0
 8011734:	d104      	bne.n	8011740 <USB_ActivateEndpoint+0x2ec>
 8011736:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801173a:	3b01      	subs	r3, #1
 801173c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011742:	881b      	ldrh	r3, [r3, #0]
 8011744:	b29a      	uxth	r2, r3
 8011746:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801174a:	b29b      	uxth	r3, r3
 801174c:	029b      	lsls	r3, r3, #10
 801174e:	b29b      	uxth	r3, r3
 8011750:	4313      	orrs	r3, r2
 8011752:	b29b      	uxth	r3, r3
 8011754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801175c:	b29a      	uxth	r2, r3
 801175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011760:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011762:	687a      	ldr	r2, [r7, #4]
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	009b      	lsls	r3, r3, #2
 801176a:	4413      	add	r3, r2
 801176c:	881b      	ldrh	r3, [r3, #0]
 801176e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011770:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011776:	2b00      	cmp	r3, #0
 8011778:	d01b      	beq.n	80117b2 <USB_ActivateEndpoint+0x35e>
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	009b      	lsls	r3, r3, #2
 8011782:	4413      	add	r3, r2
 8011784:	881b      	ldrh	r3, [r3, #0]
 8011786:	b29b      	uxth	r3, r3
 8011788:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801178c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011790:	843b      	strh	r3, [r7, #32]
 8011792:	687a      	ldr	r2, [r7, #4]
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	781b      	ldrb	r3, [r3, #0]
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	441a      	add	r2, r3
 801179c:	8c3b      	ldrh	r3, [r7, #32]
 801179e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80117aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117ae:	b29b      	uxth	r3, r3
 80117b0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d124      	bne.n	8011804 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80117ba:	687a      	ldr	r2, [r7, #4]
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	009b      	lsls	r3, r3, #2
 80117c2:	4413      	add	r3, r2
 80117c4:	881b      	ldrh	r3, [r3, #0]
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80117cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80117d0:	83bb      	strh	r3, [r7, #28]
 80117d2:	8bbb      	ldrh	r3, [r7, #28]
 80117d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80117d8:	83bb      	strh	r3, [r7, #28]
 80117da:	8bbb      	ldrh	r3, [r7, #28]
 80117dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80117e0:	83bb      	strh	r3, [r7, #28]
 80117e2:	687a      	ldr	r2, [r7, #4]
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	009b      	lsls	r3, r3, #2
 80117ea:	441a      	add	r2, r3
 80117ec:	8bbb      	ldrh	r3, [r7, #28]
 80117ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80117fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117fe:	b29b      	uxth	r3, r3
 8011800:	8013      	strh	r3, [r2, #0]
 8011802:	e306      	b.n	8011e12 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8011804:	687a      	ldr	r2, [r7, #4]
 8011806:	683b      	ldr	r3, [r7, #0]
 8011808:	781b      	ldrb	r3, [r3, #0]
 801180a:	009b      	lsls	r3, r3, #2
 801180c:	4413      	add	r3, r2
 801180e:	881b      	ldrh	r3, [r3, #0]
 8011810:	b29b      	uxth	r3, r3
 8011812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801181a:	83fb      	strh	r3, [r7, #30]
 801181c:	8bfb      	ldrh	r3, [r7, #30]
 801181e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011822:	83fb      	strh	r3, [r7, #30]
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	009b      	lsls	r3, r3, #2
 801182c:	441a      	add	r2, r3
 801182e:	8bfb      	ldrh	r3, [r7, #30]
 8011830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011838:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801183c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011840:	b29b      	uxth	r3, r3
 8011842:	8013      	strh	r3, [r2, #0]
 8011844:	e2e5      	b.n	8011e12 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	78db      	ldrb	r3, [r3, #3]
 801184a:	2b02      	cmp	r3, #2
 801184c:	d11e      	bne.n	801188c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801184e:	687a      	ldr	r2, [r7, #4]
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	781b      	ldrb	r3, [r3, #0]
 8011854:	009b      	lsls	r3, r3, #2
 8011856:	4413      	add	r3, r2
 8011858:	881b      	ldrh	r3, [r3, #0]
 801185a:	b29b      	uxth	r3, r3
 801185c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011864:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8011868:	687a      	ldr	r2, [r7, #4]
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	009b      	lsls	r3, r3, #2
 8011870:	441a      	add	r2, r3
 8011872:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8011876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801187a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801187e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011886:	b29b      	uxth	r3, r3
 8011888:	8013      	strh	r3, [r2, #0]
 801188a:	e01d      	b.n	80118c8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801188c:	687a      	ldr	r2, [r7, #4]
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	009b      	lsls	r3, r3, #2
 8011894:	4413      	add	r3, r2
 8011896:	881b      	ldrh	r3, [r3, #0]
 8011898:	b29b      	uxth	r3, r3
 801189a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 801189e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80118a2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80118a6:	687a      	ldr	r2, [r7, #4]
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	009b      	lsls	r3, r3, #2
 80118ae:	441a      	add	r2, r3
 80118b0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80118b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80118b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80118bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80118c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118c4:	b29b      	uxth	r3, r3
 80118c6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80118d2:	b29b      	uxth	r3, r3
 80118d4:	461a      	mov	r2, r3
 80118d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80118d8:	4413      	add	r3, r2
 80118da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	00da      	lsls	r2, r3, #3
 80118e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80118e4:	4413      	add	r3, r2
 80118e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80118ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	891b      	ldrh	r3, [r3, #8]
 80118f0:	085b      	lsrs	r3, r3, #1
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	005b      	lsls	r3, r3, #1
 80118f6:	b29a      	uxth	r2, r3
 80118f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80118fa:	801a      	strh	r2, [r3, #0]
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011906:	b29b      	uxth	r3, r3
 8011908:	461a      	mov	r2, r3
 801190a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801190c:	4413      	add	r3, r2
 801190e:	677b      	str	r3, [r7, #116]	@ 0x74
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	00da      	lsls	r2, r3, #3
 8011916:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011918:	4413      	add	r3, r2
 801191a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801191e:	673b      	str	r3, [r7, #112]	@ 0x70
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	895b      	ldrh	r3, [r3, #10]
 8011924:	085b      	lsrs	r3, r3, #1
 8011926:	b29b      	uxth	r3, r3
 8011928:	005b      	lsls	r3, r3, #1
 801192a:	b29a      	uxth	r2, r3
 801192c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801192e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	785b      	ldrb	r3, [r3, #1]
 8011934:	2b00      	cmp	r3, #0
 8011936:	f040 81af 	bne.w	8011c98 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801193a:	687a      	ldr	r2, [r7, #4]
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	781b      	ldrb	r3, [r3, #0]
 8011940:	009b      	lsls	r3, r3, #2
 8011942:	4413      	add	r3, r2
 8011944:	881b      	ldrh	r3, [r3, #0]
 8011946:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 801194a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 801194e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011952:	2b00      	cmp	r3, #0
 8011954:	d01d      	beq.n	8011992 <USB_ActivateEndpoint+0x53e>
 8011956:	687a      	ldr	r2, [r7, #4]
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	781b      	ldrb	r3, [r3, #0]
 801195c:	009b      	lsls	r3, r3, #2
 801195e:	4413      	add	r3, r2
 8011960:	881b      	ldrh	r3, [r3, #0]
 8011962:	b29b      	uxth	r3, r3
 8011964:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801196c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8011970:	687a      	ldr	r2, [r7, #4]
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	781b      	ldrb	r3, [r3, #0]
 8011976:	009b      	lsls	r3, r3, #2
 8011978:	441a      	add	r2, r3
 801197a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801197e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011986:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801198a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801198e:	b29b      	uxth	r3, r3
 8011990:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	009b      	lsls	r3, r3, #2
 801199a:	4413      	add	r3, r2
 801199c:	881b      	ldrh	r3, [r3, #0]
 801199e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80119a2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80119a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d01d      	beq.n	80119ea <USB_ActivateEndpoint+0x596>
 80119ae:	687a      	ldr	r2, [r7, #4]
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	009b      	lsls	r3, r3, #2
 80119b6:	4413      	add	r3, r2
 80119b8:	881b      	ldrh	r3, [r3, #0]
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80119c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80119c4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80119c8:	687a      	ldr	r2, [r7, #4]
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	781b      	ldrb	r3, [r3, #0]
 80119ce:	009b      	lsls	r3, r3, #2
 80119d0:	441a      	add	r2, r3
 80119d2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80119d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80119da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80119de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80119e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	785b      	ldrb	r3, [r3, #1]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d16b      	bne.n	8011aca <USB_ActivateEndpoint+0x676>
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80119fc:	b29b      	uxth	r3, r3
 80119fe:	461a      	mov	r2, r3
 8011a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a02:	4413      	add	r3, r2
 8011a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	781b      	ldrb	r3, [r3, #0]
 8011a0a:	00da      	lsls	r2, r3, #3
 8011a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a0e:	4413      	add	r3, r2
 8011a10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a18:	881b      	ldrh	r3, [r3, #0]
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a20:	b29a      	uxth	r2, r3
 8011a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a24:	801a      	strh	r2, [r3, #0]
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	691b      	ldr	r3, [r3, #16]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d10a      	bne.n	8011a44 <USB_ActivateEndpoint+0x5f0>
 8011a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a30:	881b      	ldrh	r3, [r3, #0]
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a40:	801a      	strh	r2, [r3, #0]
 8011a42:	e05d      	b.n	8011b00 <USB_ActivateEndpoint+0x6ac>
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	691b      	ldr	r3, [r3, #16]
 8011a48:	2b3e      	cmp	r3, #62	@ 0x3e
 8011a4a:	d81c      	bhi.n	8011a86 <USB_ActivateEndpoint+0x632>
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	691b      	ldr	r3, [r3, #16]
 8011a50:	085b      	lsrs	r3, r3, #1
 8011a52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	691b      	ldr	r3, [r3, #16]
 8011a5a:	f003 0301 	and.w	r3, r3, #1
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d004      	beq.n	8011a6c <USB_ActivateEndpoint+0x618>
 8011a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011a66:	3301      	adds	r3, #1
 8011a68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011a6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a6e:	881b      	ldrh	r3, [r3, #0]
 8011a70:	b29a      	uxth	r2, r3
 8011a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011a76:	b29b      	uxth	r3, r3
 8011a78:	029b      	lsls	r3, r3, #10
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	4313      	orrs	r3, r2
 8011a7e:	b29a      	uxth	r2, r3
 8011a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a82:	801a      	strh	r2, [r3, #0]
 8011a84:	e03c      	b.n	8011b00 <USB_ActivateEndpoint+0x6ac>
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	691b      	ldr	r3, [r3, #16]
 8011a8a:	095b      	lsrs	r3, r3, #5
 8011a8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	691b      	ldr	r3, [r3, #16]
 8011a94:	f003 031f 	and.w	r3, r3, #31
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d104      	bne.n	8011aa6 <USB_ActivateEndpoint+0x652>
 8011a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011aa0:	3b01      	subs	r3, #1
 8011aa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011aa8:	881b      	ldrh	r3, [r3, #0]
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	029b      	lsls	r3, r3, #10
 8011ab4:	b29b      	uxth	r3, r3
 8011ab6:	4313      	orrs	r3, r2
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ac2:	b29a      	uxth	r2, r3
 8011ac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011ac6:	801a      	strh	r2, [r3, #0]
 8011ac8:	e01a      	b.n	8011b00 <USB_ActivateEndpoint+0x6ac>
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	785b      	ldrb	r3, [r3, #1]
 8011ace:	2b01      	cmp	r3, #1
 8011ad0:	d116      	bne.n	8011b00 <USB_ActivateEndpoint+0x6ac>
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	657b      	str	r3, [r7, #84]	@ 0x54
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	461a      	mov	r2, r3
 8011ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ae2:	4413      	add	r3, r2
 8011ae4:	657b      	str	r3, [r7, #84]	@ 0x54
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	781b      	ldrb	r3, [r3, #0]
 8011aea:	00da      	lsls	r2, r3, #3
 8011aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011aee:	4413      	add	r3, r2
 8011af0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011af4:	653b      	str	r3, [r7, #80]	@ 0x50
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	691b      	ldr	r3, [r3, #16]
 8011afa:	b29a      	uxth	r2, r3
 8011afc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011afe:	801a      	strh	r2, [r3, #0]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	785b      	ldrb	r3, [r3, #1]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d16b      	bne.n	8011be4 <USB_ActivateEndpoint+0x790>
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011b16:	b29b      	uxth	r3, r3
 8011b18:	461a      	mov	r2, r3
 8011b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b1c:	4413      	add	r3, r2
 8011b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	00da      	lsls	r2, r3, #3
 8011b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b28:	4413      	add	r3, r2
 8011b2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b32:	881b      	ldrh	r3, [r3, #0]
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011b3a:	b29a      	uxth	r2, r3
 8011b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b3e:	801a      	strh	r2, [r3, #0]
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	691b      	ldr	r3, [r3, #16]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d10a      	bne.n	8011b5e <USB_ActivateEndpoint+0x70a>
 8011b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b4a:	881b      	ldrh	r3, [r3, #0]
 8011b4c:	b29b      	uxth	r3, r3
 8011b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011b56:	b29a      	uxth	r2, r3
 8011b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b5a:	801a      	strh	r2, [r3, #0]
 8011b5c:	e05b      	b.n	8011c16 <USB_ActivateEndpoint+0x7c2>
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	691b      	ldr	r3, [r3, #16]
 8011b62:	2b3e      	cmp	r3, #62	@ 0x3e
 8011b64:	d81c      	bhi.n	8011ba0 <USB_ActivateEndpoint+0x74c>
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	691b      	ldr	r3, [r3, #16]
 8011b6a:	085b      	lsrs	r3, r3, #1
 8011b6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	691b      	ldr	r3, [r3, #16]
 8011b74:	f003 0301 	and.w	r3, r3, #1
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d004      	beq.n	8011b86 <USB_ActivateEndpoint+0x732>
 8011b7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011b80:	3301      	adds	r3, #1
 8011b82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b88:	881b      	ldrh	r3, [r3, #0]
 8011b8a:	b29a      	uxth	r2, r3
 8011b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	029b      	lsls	r3, r3, #10
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	4313      	orrs	r3, r2
 8011b98:	b29a      	uxth	r2, r3
 8011b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b9c:	801a      	strh	r2, [r3, #0]
 8011b9e:	e03a      	b.n	8011c16 <USB_ActivateEndpoint+0x7c2>
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	691b      	ldr	r3, [r3, #16]
 8011ba4:	095b      	lsrs	r3, r3, #5
 8011ba6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	691b      	ldr	r3, [r3, #16]
 8011bae:	f003 031f 	and.w	r3, r3, #31
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d104      	bne.n	8011bc0 <USB_ActivateEndpoint+0x76c>
 8011bb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011bba:	3b01      	subs	r3, #1
 8011bbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bc2:	881b      	ldrh	r3, [r3, #0]
 8011bc4:	b29a      	uxth	r2, r3
 8011bc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	029b      	lsls	r3, r3, #10
 8011bce:	b29b      	uxth	r3, r3
 8011bd0:	4313      	orrs	r3, r2
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011bdc:	b29a      	uxth	r2, r3
 8011bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011be0:	801a      	strh	r2, [r3, #0]
 8011be2:	e018      	b.n	8011c16 <USB_ActivateEndpoint+0x7c2>
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	785b      	ldrb	r3, [r3, #1]
 8011be8:	2b01      	cmp	r3, #1
 8011bea:	d114      	bne.n	8011c16 <USB_ActivateEndpoint+0x7c2>
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bf8:	4413      	add	r3, r2
 8011bfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	00da      	lsls	r2, r3, #3
 8011c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c04:	4413      	add	r3, r2
 8011c06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	691b      	ldr	r3, [r3, #16]
 8011c10:	b29a      	uxth	r2, r3
 8011c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c14:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011c16:	687a      	ldr	r2, [r7, #4]
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	781b      	ldrb	r3, [r3, #0]
 8011c1c:	009b      	lsls	r3, r3, #2
 8011c1e:	4413      	add	r3, r2
 8011c20:	881b      	ldrh	r3, [r3, #0]
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011c2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011c30:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011c34:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011c36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011c38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011c3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	009b      	lsls	r3, r3, #2
 8011c46:	441a      	add	r2, r3
 8011c48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011c4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011c5e:	687a      	ldr	r2, [r7, #4]
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	009b      	lsls	r3, r3, #2
 8011c66:	4413      	add	r3, r2
 8011c68:	881b      	ldrh	r3, [r3, #0]
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c74:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8011c76:	687a      	ldr	r2, [r7, #4]
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	781b      	ldrb	r3, [r3, #0]
 8011c7c:	009b      	lsls	r3, r3, #2
 8011c7e:	441a      	add	r2, r3
 8011c80:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	8013      	strh	r3, [r2, #0]
 8011c96:	e0bc      	b.n	8011e12 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	781b      	ldrb	r3, [r3, #0]
 8011c9e:	009b      	lsls	r3, r3, #2
 8011ca0:	4413      	add	r3, r2
 8011ca2:	881b      	ldrh	r3, [r3, #0]
 8011ca4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8011ca8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d01d      	beq.n	8011cf0 <USB_ActivateEndpoint+0x89c>
 8011cb4:	687a      	ldr	r2, [r7, #4]
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	009b      	lsls	r3, r3, #2
 8011cbc:	4413      	add	r3, r2
 8011cbe:	881b      	ldrh	r3, [r3, #0]
 8011cc0:	b29b      	uxth	r3, r3
 8011cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011cca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	009b      	lsls	r3, r3, #2
 8011cd6:	441a      	add	r2, r3
 8011cd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8011cdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ce4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011cf0:	687a      	ldr	r2, [r7, #4]
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	4413      	add	r3, r2
 8011cfa:	881b      	ldrh	r3, [r3, #0]
 8011cfc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8011d00:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8011d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d01d      	beq.n	8011d48 <USB_ActivateEndpoint+0x8f4>
 8011d0c:	687a      	ldr	r2, [r7, #4]
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	4413      	add	r3, r2
 8011d16:	881b      	ldrh	r3, [r3, #0]
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d22:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8011d26:	687a      	ldr	r2, [r7, #4]
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	009b      	lsls	r3, r3, #2
 8011d2e:	441a      	add	r2, r3
 8011d30:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8011d34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d40:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011d44:	b29b      	uxth	r3, r3
 8011d46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	78db      	ldrb	r3, [r3, #3]
 8011d4c:	2b01      	cmp	r3, #1
 8011d4e:	d024      	beq.n	8011d9a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011d50:	687a      	ldr	r2, [r7, #4]
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	781b      	ldrb	r3, [r3, #0]
 8011d56:	009b      	lsls	r3, r3, #2
 8011d58:	4413      	add	r3, r2
 8011d5a:	881b      	ldrh	r3, [r3, #0]
 8011d5c:	b29b      	uxth	r3, r3
 8011d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011d66:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011d6a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011d6e:	f083 0320 	eor.w	r3, r3, #32
 8011d72:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	009b      	lsls	r3, r3, #2
 8011d7e:	441a      	add	r2, r3
 8011d80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	8013      	strh	r3, [r2, #0]
 8011d98:	e01d      	b.n	8011dd6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	009b      	lsls	r3, r3, #2
 8011da2:	4413      	add	r3, r2
 8011da4:	881b      	ldrh	r3, [r3, #0]
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011dac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011db0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8011db4:	687a      	ldr	r2, [r7, #4]
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	441a      	add	r2, r3
 8011dbe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8011dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011dd6:	687a      	ldr	r2, [r7, #4]
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	009b      	lsls	r3, r3, #2
 8011dde:	4413      	add	r3, r2
 8011de0:	881b      	ldrh	r3, [r3, #0]
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011dec:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8011df0:	687a      	ldr	r2, [r7, #4]
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	009b      	lsls	r3, r3, #2
 8011df8:	441a      	add	r2, r3
 8011dfa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8011dfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e0e:	b29b      	uxth	r3, r3
 8011e10:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011e12:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8011e16:	4618      	mov	r0, r3
 8011e18:	379c      	adds	r7, #156	@ 0x9c
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e20:	4770      	bx	lr
 8011e22:	bf00      	nop

08011e24 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011e24:	b480      	push	{r7}
 8011e26:	b08d      	sub	sp, #52	@ 0x34
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	7b1b      	ldrb	r3, [r3, #12]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	f040 808e 	bne.w	8011f54 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	785b      	ldrb	r3, [r3, #1]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d044      	beq.n	8011eca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011e40:	687a      	ldr	r2, [r7, #4]
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	4413      	add	r3, r2
 8011e4a:	881b      	ldrh	r3, [r3, #0]
 8011e4c:	81bb      	strh	r3, [r7, #12]
 8011e4e:	89bb      	ldrh	r3, [r7, #12]
 8011e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d01b      	beq.n	8011e90 <USB_DeactivateEndpoint+0x6c>
 8011e58:	687a      	ldr	r2, [r7, #4]
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	781b      	ldrb	r3, [r3, #0]
 8011e5e:	009b      	lsls	r3, r3, #2
 8011e60:	4413      	add	r3, r2
 8011e62:	881b      	ldrh	r3, [r3, #0]
 8011e64:	b29b      	uxth	r3, r3
 8011e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e6e:	817b      	strh	r3, [r7, #10]
 8011e70:	687a      	ldr	r2, [r7, #4]
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	781b      	ldrb	r3, [r3, #0]
 8011e76:	009b      	lsls	r3, r3, #2
 8011e78:	441a      	add	r2, r3
 8011e7a:	897b      	ldrh	r3, [r7, #10]
 8011e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011e8c:	b29b      	uxth	r3, r3
 8011e8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011e90:	687a      	ldr	r2, [r7, #4]
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	009b      	lsls	r3, r3, #2
 8011e98:	4413      	add	r3, r2
 8011e9a:	881b      	ldrh	r3, [r3, #0]
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011ea6:	813b      	strh	r3, [r7, #8]
 8011ea8:	687a      	ldr	r2, [r7, #4]
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	781b      	ldrb	r3, [r3, #0]
 8011eae:	009b      	lsls	r3, r3, #2
 8011eb0:	441a      	add	r2, r3
 8011eb2:	893b      	ldrh	r3, [r7, #8]
 8011eb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011eb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ec4:	b29b      	uxth	r3, r3
 8011ec6:	8013      	strh	r3, [r2, #0]
 8011ec8:	e192      	b.n	80121f0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	009b      	lsls	r3, r3, #2
 8011ed2:	4413      	add	r3, r2
 8011ed4:	881b      	ldrh	r3, [r3, #0]
 8011ed6:	827b      	strh	r3, [r7, #18]
 8011ed8:	8a7b      	ldrh	r3, [r7, #18]
 8011eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d01b      	beq.n	8011f1a <USB_DeactivateEndpoint+0xf6>
 8011ee2:	687a      	ldr	r2, [r7, #4]
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	009b      	lsls	r3, r3, #2
 8011eea:	4413      	add	r3, r2
 8011eec:	881b      	ldrh	r3, [r3, #0]
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ef8:	823b      	strh	r3, [r7, #16]
 8011efa:	687a      	ldr	r2, [r7, #4]
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	009b      	lsls	r3, r3, #2
 8011f02:	441a      	add	r2, r3
 8011f04:	8a3b      	ldrh	r3, [r7, #16]
 8011f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	781b      	ldrb	r3, [r3, #0]
 8011f20:	009b      	lsls	r3, r3, #2
 8011f22:	4413      	add	r3, r2
 8011f24:	881b      	ldrh	r3, [r3, #0]
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f30:	81fb      	strh	r3, [r7, #14]
 8011f32:	687a      	ldr	r2, [r7, #4]
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	009b      	lsls	r3, r3, #2
 8011f3a:	441a      	add	r2, r3
 8011f3c:	89fb      	ldrh	r3, [r7, #14]
 8011f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	8013      	strh	r3, [r2, #0]
 8011f52:	e14d      	b.n	80121f0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	785b      	ldrb	r3, [r3, #1]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	f040 80a5 	bne.w	80120a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011f5e:	687a      	ldr	r2, [r7, #4]
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	781b      	ldrb	r3, [r3, #0]
 8011f64:	009b      	lsls	r3, r3, #2
 8011f66:	4413      	add	r3, r2
 8011f68:	881b      	ldrh	r3, [r3, #0]
 8011f6a:	843b      	strh	r3, [r7, #32]
 8011f6c:	8c3b      	ldrh	r3, [r7, #32]
 8011f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d01b      	beq.n	8011fae <USB_DeactivateEndpoint+0x18a>
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	683b      	ldr	r3, [r7, #0]
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	009b      	lsls	r3, r3, #2
 8011f7e:	4413      	add	r3, r2
 8011f80:	881b      	ldrh	r3, [r3, #0]
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011f88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f8c:	83fb      	strh	r3, [r7, #30]
 8011f8e:	687a      	ldr	r2, [r7, #4]
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	781b      	ldrb	r3, [r3, #0]
 8011f94:	009b      	lsls	r3, r3, #2
 8011f96:	441a      	add	r2, r3
 8011f98:	8bfb      	ldrh	r3, [r7, #30]
 8011f9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011fa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011fae:	687a      	ldr	r2, [r7, #4]
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	009b      	lsls	r3, r3, #2
 8011fb6:	4413      	add	r3, r2
 8011fb8:	881b      	ldrh	r3, [r3, #0]
 8011fba:	83bb      	strh	r3, [r7, #28]
 8011fbc:	8bbb      	ldrh	r3, [r7, #28]
 8011fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d01b      	beq.n	8011ffe <USB_DeactivateEndpoint+0x1da>
 8011fc6:	687a      	ldr	r2, [r7, #4]
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	009b      	lsls	r3, r3, #2
 8011fce:	4413      	add	r3, r2
 8011fd0:	881b      	ldrh	r3, [r3, #0]
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011fdc:	837b      	strh	r3, [r7, #26]
 8011fde:	687a      	ldr	r2, [r7, #4]
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	009b      	lsls	r3, r3, #2
 8011fe6:	441a      	add	r2, r3
 8011fe8:	8b7b      	ldrh	r3, [r7, #26]
 8011fea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011fee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011ff6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011ffa:	b29b      	uxth	r3, r3
 8011ffc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011ffe:	687a      	ldr	r2, [r7, #4]
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	781b      	ldrb	r3, [r3, #0]
 8012004:	009b      	lsls	r3, r3, #2
 8012006:	4413      	add	r3, r2
 8012008:	881b      	ldrh	r3, [r3, #0]
 801200a:	b29b      	uxth	r3, r3
 801200c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012014:	833b      	strh	r3, [r7, #24]
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	009b      	lsls	r3, r3, #2
 801201e:	441a      	add	r2, r3
 8012020:	8b3b      	ldrh	r3, [r7, #24]
 8012022:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012026:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801202a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801202e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012032:	b29b      	uxth	r3, r3
 8012034:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	009b      	lsls	r3, r3, #2
 801203e:	4413      	add	r3, r2
 8012040:	881b      	ldrh	r3, [r3, #0]
 8012042:	b29b      	uxth	r3, r3
 8012044:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801204c:	82fb      	strh	r3, [r7, #22]
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	683b      	ldr	r3, [r7, #0]
 8012052:	781b      	ldrb	r3, [r3, #0]
 8012054:	009b      	lsls	r3, r3, #2
 8012056:	441a      	add	r2, r3
 8012058:	8afb      	ldrh	r3, [r7, #22]
 801205a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801205e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801206a:	b29b      	uxth	r3, r3
 801206c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801206e:	687a      	ldr	r2, [r7, #4]
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	009b      	lsls	r3, r3, #2
 8012076:	4413      	add	r3, r2
 8012078:	881b      	ldrh	r3, [r3, #0]
 801207a:	b29b      	uxth	r3, r3
 801207c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012084:	82bb      	strh	r3, [r7, #20]
 8012086:	687a      	ldr	r2, [r7, #4]
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	009b      	lsls	r3, r3, #2
 801208e:	441a      	add	r2, r3
 8012090:	8abb      	ldrh	r3, [r7, #20]
 8012092:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012096:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801209a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801209e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	8013      	strh	r3, [r2, #0]
 80120a6:	e0a3      	b.n	80121f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80120a8:	687a      	ldr	r2, [r7, #4]
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	781b      	ldrb	r3, [r3, #0]
 80120ae:	009b      	lsls	r3, r3, #2
 80120b0:	4413      	add	r3, r2
 80120b2:	881b      	ldrh	r3, [r3, #0]
 80120b4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80120b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80120b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d01b      	beq.n	80120f8 <USB_DeactivateEndpoint+0x2d4>
 80120c0:	687a      	ldr	r2, [r7, #4]
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	009b      	lsls	r3, r3, #2
 80120c8:	4413      	add	r3, r2
 80120ca:	881b      	ldrh	r3, [r3, #0]
 80120cc:	b29b      	uxth	r3, r3
 80120ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80120d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80120d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80120d8:	687a      	ldr	r2, [r7, #4]
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	009b      	lsls	r3, r3, #2
 80120e0:	441a      	add	r2, r3
 80120e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80120e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80120e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80120ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80120f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120f4:	b29b      	uxth	r3, r3
 80120f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80120f8:	687a      	ldr	r2, [r7, #4]
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	781b      	ldrb	r3, [r3, #0]
 80120fe:	009b      	lsls	r3, r3, #2
 8012100:	4413      	add	r3, r2
 8012102:	881b      	ldrh	r3, [r3, #0]
 8012104:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8012106:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801210c:	2b00      	cmp	r3, #0
 801210e:	d01b      	beq.n	8012148 <USB_DeactivateEndpoint+0x324>
 8012110:	687a      	ldr	r2, [r7, #4]
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	781b      	ldrb	r3, [r3, #0]
 8012116:	009b      	lsls	r3, r3, #2
 8012118:	4413      	add	r3, r2
 801211a:	881b      	ldrh	r3, [r3, #0]
 801211c:	b29b      	uxth	r3, r3
 801211e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012126:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012128:	687a      	ldr	r2, [r7, #4]
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	009b      	lsls	r3, r3, #2
 8012130:	441a      	add	r2, r3
 8012132:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012134:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012138:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801213c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012140:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012144:	b29b      	uxth	r3, r3
 8012146:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8012148:	687a      	ldr	r2, [r7, #4]
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	009b      	lsls	r3, r3, #2
 8012150:	4413      	add	r3, r2
 8012152:	881b      	ldrh	r3, [r3, #0]
 8012154:	b29b      	uxth	r3, r3
 8012156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801215a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801215e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012160:	687a      	ldr	r2, [r7, #4]
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	781b      	ldrb	r3, [r3, #0]
 8012166:	009b      	lsls	r3, r3, #2
 8012168:	441a      	add	r2, r3
 801216a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801216c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012170:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012174:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801217c:	b29b      	uxth	r3, r3
 801217e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	781b      	ldrb	r3, [r3, #0]
 8012186:	009b      	lsls	r3, r3, #2
 8012188:	4413      	add	r3, r2
 801218a:	881b      	ldrh	r3, [r3, #0]
 801218c:	b29b      	uxth	r3, r3
 801218e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012192:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012196:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012198:	687a      	ldr	r2, [r7, #4]
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	009b      	lsls	r3, r3, #2
 80121a0:	441a      	add	r2, r3
 80121a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80121a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80121a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80121ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80121b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80121b8:	687a      	ldr	r2, [r7, #4]
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	781b      	ldrb	r3, [r3, #0]
 80121be:	009b      	lsls	r3, r3, #2
 80121c0:	4413      	add	r3, r2
 80121c2:	881b      	ldrh	r3, [r3, #0]
 80121c4:	b29b      	uxth	r3, r3
 80121c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80121ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80121ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80121d0:	687a      	ldr	r2, [r7, #4]
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	441a      	add	r2, r3
 80121da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80121dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80121e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80121e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80121e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121ec:	b29b      	uxth	r3, r3
 80121ee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80121f0:	2300      	movs	r3, #0
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3734      	adds	r7, #52	@ 0x34
 80121f6:	46bd      	mov	sp, r7
 80121f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fc:	4770      	bx	lr

080121fe <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80121fe:	b580      	push	{r7, lr}
 8012200:	b0ac      	sub	sp, #176	@ 0xb0
 8012202:	af00      	add	r7, sp, #0
 8012204:	6078      	str	r0, [r7, #4]
 8012206:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	785b      	ldrb	r3, [r3, #1]
 801220c:	2b01      	cmp	r3, #1
 801220e:	f040 84ca 	bne.w	8012ba6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	699a      	ldr	r2, [r3, #24]
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	691b      	ldr	r3, [r3, #16]
 801221a:	429a      	cmp	r2, r3
 801221c:	d904      	bls.n	8012228 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	691b      	ldr	r3, [r3, #16]
 8012222:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012226:	e003      	b.n	8012230 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	699b      	ldr	r3, [r3, #24]
 801222c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	7b1b      	ldrb	r3, [r3, #12]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d122      	bne.n	801227e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	6959      	ldr	r1, [r3, #20]
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	88da      	ldrh	r2, [r3, #6]
 8012240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012244:	b29b      	uxth	r3, r3
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f000 febd 	bl	8012fc6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	613b      	str	r3, [r7, #16]
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012256:	b29b      	uxth	r3, r3
 8012258:	461a      	mov	r2, r3
 801225a:	693b      	ldr	r3, [r7, #16]
 801225c:	4413      	add	r3, r2
 801225e:	613b      	str	r3, [r7, #16]
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	00da      	lsls	r2, r3, #3
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	4413      	add	r3, r2
 801226a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801226e:	60fb      	str	r3, [r7, #12]
 8012270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012274:	b29a      	uxth	r2, r3
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	801a      	strh	r2, [r3, #0]
 801227a:	f000 bc6f 	b.w	8012b5c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	78db      	ldrb	r3, [r3, #3]
 8012282:	2b02      	cmp	r3, #2
 8012284:	f040 831e 	bne.w	80128c4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	6a1a      	ldr	r2, [r3, #32]
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	691b      	ldr	r3, [r3, #16]
 8012290:	429a      	cmp	r2, r3
 8012292:	f240 82cf 	bls.w	8012834 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8012296:	687a      	ldr	r2, [r7, #4]
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	781b      	ldrb	r3, [r3, #0]
 801229c:	009b      	lsls	r3, r3, #2
 801229e:	4413      	add	r3, r2
 80122a0:	881b      	ldrh	r3, [r3, #0]
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80122a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80122ac:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80122b0:	687a      	ldr	r2, [r7, #4]
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	009b      	lsls	r3, r3, #2
 80122b8:	441a      	add	r2, r3
 80122ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80122be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80122c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80122c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80122ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122ce:	b29b      	uxth	r3, r3
 80122d0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	6a1a      	ldr	r2, [r3, #32]
 80122d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122da:	1ad2      	subs	r2, r2, r3
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80122e0:	687a      	ldr	r2, [r7, #4]
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	781b      	ldrb	r3, [r3, #0]
 80122e6:	009b      	lsls	r3, r3, #2
 80122e8:	4413      	add	r3, r2
 80122ea:	881b      	ldrh	r3, [r3, #0]
 80122ec:	b29b      	uxth	r3, r3
 80122ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	f000 814f 	beq.w	8012596 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	785b      	ldrb	r3, [r3, #1]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d16b      	bne.n	80123dc <USB_EPStartXfer+0x1de>
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801230e:	b29b      	uxth	r3, r3
 8012310:	461a      	mov	r2, r3
 8012312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012314:	4413      	add	r3, r2
 8012316:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	00da      	lsls	r2, r3, #3
 801231e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012320:	4413      	add	r3, r2
 8012322:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012326:	627b      	str	r3, [r7, #36]	@ 0x24
 8012328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801232a:	881b      	ldrh	r3, [r3, #0]
 801232c:	b29b      	uxth	r3, r3
 801232e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012332:	b29a      	uxth	r2, r3
 8012334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012336:	801a      	strh	r2, [r3, #0]
 8012338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801233c:	2b00      	cmp	r3, #0
 801233e:	d10a      	bne.n	8012356 <USB_EPStartXfer+0x158>
 8012340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012342:	881b      	ldrh	r3, [r3, #0]
 8012344:	b29b      	uxth	r3, r3
 8012346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801234a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801234e:	b29a      	uxth	r2, r3
 8012350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012352:	801a      	strh	r2, [r3, #0]
 8012354:	e05b      	b.n	801240e <USB_EPStartXfer+0x210>
 8012356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801235a:	2b3e      	cmp	r3, #62	@ 0x3e
 801235c:	d81c      	bhi.n	8012398 <USB_EPStartXfer+0x19a>
 801235e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012362:	085b      	lsrs	r3, r3, #1
 8012364:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801236c:	f003 0301 	and.w	r3, r3, #1
 8012370:	2b00      	cmp	r3, #0
 8012372:	d004      	beq.n	801237e <USB_EPStartXfer+0x180>
 8012374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012378:	3301      	adds	r3, #1
 801237a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012380:	881b      	ldrh	r3, [r3, #0]
 8012382:	b29a      	uxth	r2, r3
 8012384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012388:	b29b      	uxth	r3, r3
 801238a:	029b      	lsls	r3, r3, #10
 801238c:	b29b      	uxth	r3, r3
 801238e:	4313      	orrs	r3, r2
 8012390:	b29a      	uxth	r2, r3
 8012392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012394:	801a      	strh	r2, [r3, #0]
 8012396:	e03a      	b.n	801240e <USB_EPStartXfer+0x210>
 8012398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801239c:	095b      	lsrs	r3, r3, #5
 801239e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80123a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123a6:	f003 031f 	and.w	r3, r3, #31
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d104      	bne.n	80123b8 <USB_EPStartXfer+0x1ba>
 80123ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80123b2:	3b01      	subs	r3, #1
 80123b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80123b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ba:	881b      	ldrh	r3, [r3, #0]
 80123bc:	b29a      	uxth	r2, r3
 80123be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80123c2:	b29b      	uxth	r3, r3
 80123c4:	029b      	lsls	r3, r3, #10
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	4313      	orrs	r3, r2
 80123ca:	b29b      	uxth	r3, r3
 80123cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123d4:	b29a      	uxth	r2, r3
 80123d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123d8:	801a      	strh	r2, [r3, #0]
 80123da:	e018      	b.n	801240e <USB_EPStartXfer+0x210>
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	785b      	ldrb	r3, [r3, #1]
 80123e0:	2b01      	cmp	r3, #1
 80123e2:	d114      	bne.n	801240e <USB_EPStartXfer+0x210>
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80123ea:	b29b      	uxth	r3, r3
 80123ec:	461a      	mov	r2, r3
 80123ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123f0:	4413      	add	r3, r2
 80123f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	781b      	ldrb	r3, [r3, #0]
 80123f8:	00da      	lsls	r2, r3, #3
 80123fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123fc:	4413      	add	r3, r2
 80123fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012408:	b29a      	uxth	r2, r3
 801240a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801240c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	895b      	ldrh	r3, [r3, #10]
 8012412:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	6959      	ldr	r1, [r3, #20]
 801241a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801241e:	b29b      	uxth	r3, r3
 8012420:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f000 fdce 	bl	8012fc6 <USB_WritePMA>
            ep->xfer_buff += len;
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	695a      	ldr	r2, [r3, #20]
 801242e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012432:	441a      	add	r2, r3
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	6a1a      	ldr	r2, [r3, #32]
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	691b      	ldr	r3, [r3, #16]
 8012440:	429a      	cmp	r2, r3
 8012442:	d907      	bls.n	8012454 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	6a1a      	ldr	r2, [r3, #32]
 8012448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801244c:	1ad2      	subs	r2, r2, r3
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	621a      	str	r2, [r3, #32]
 8012452:	e006      	b.n	8012462 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	6a1b      	ldr	r3, [r3, #32]
 8012458:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	2200      	movs	r2, #0
 8012460:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	785b      	ldrb	r3, [r3, #1]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d16b      	bne.n	8012542 <USB_EPStartXfer+0x344>
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	61bb      	str	r3, [r7, #24]
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012474:	b29b      	uxth	r3, r3
 8012476:	461a      	mov	r2, r3
 8012478:	69bb      	ldr	r3, [r7, #24]
 801247a:	4413      	add	r3, r2
 801247c:	61bb      	str	r3, [r7, #24]
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	781b      	ldrb	r3, [r3, #0]
 8012482:	00da      	lsls	r2, r3, #3
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	4413      	add	r3, r2
 8012488:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801248c:	617b      	str	r3, [r7, #20]
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	881b      	ldrh	r3, [r3, #0]
 8012492:	b29b      	uxth	r3, r3
 8012494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012498:	b29a      	uxth	r2, r3
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	801a      	strh	r2, [r3, #0]
 801249e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d10a      	bne.n	80124bc <USB_EPStartXfer+0x2be>
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	881b      	ldrh	r3, [r3, #0]
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124b4:	b29a      	uxth	r2, r3
 80124b6:	697b      	ldr	r3, [r7, #20]
 80124b8:	801a      	strh	r2, [r3, #0]
 80124ba:	e05d      	b.n	8012578 <USB_EPStartXfer+0x37a>
 80124bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80124c2:	d81c      	bhi.n	80124fe <USB_EPStartXfer+0x300>
 80124c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124c8:	085b      	lsrs	r3, r3, #1
 80124ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80124ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124d2:	f003 0301 	and.w	r3, r3, #1
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d004      	beq.n	80124e4 <USB_EPStartXfer+0x2e6>
 80124da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80124de:	3301      	adds	r3, #1
 80124e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	881b      	ldrh	r3, [r3, #0]
 80124e8:	b29a      	uxth	r2, r3
 80124ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	029b      	lsls	r3, r3, #10
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	4313      	orrs	r3, r2
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	801a      	strh	r2, [r3, #0]
 80124fc:	e03c      	b.n	8012578 <USB_EPStartXfer+0x37a>
 80124fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012502:	095b      	lsrs	r3, r3, #5
 8012504:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801250c:	f003 031f 	and.w	r3, r3, #31
 8012510:	2b00      	cmp	r3, #0
 8012512:	d104      	bne.n	801251e <USB_EPStartXfer+0x320>
 8012514:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012518:	3b01      	subs	r3, #1
 801251a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	881b      	ldrh	r3, [r3, #0]
 8012522:	b29a      	uxth	r2, r3
 8012524:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012528:	b29b      	uxth	r3, r3
 801252a:	029b      	lsls	r3, r3, #10
 801252c:	b29b      	uxth	r3, r3
 801252e:	4313      	orrs	r3, r2
 8012530:	b29b      	uxth	r3, r3
 8012532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801253a:	b29a      	uxth	r2, r3
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	801a      	strh	r2, [r3, #0]
 8012540:	e01a      	b.n	8012578 <USB_EPStartXfer+0x37a>
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	785b      	ldrb	r3, [r3, #1]
 8012546:	2b01      	cmp	r3, #1
 8012548:	d116      	bne.n	8012578 <USB_EPStartXfer+0x37a>
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	623b      	str	r3, [r7, #32]
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012554:	b29b      	uxth	r3, r3
 8012556:	461a      	mov	r2, r3
 8012558:	6a3b      	ldr	r3, [r7, #32]
 801255a:	4413      	add	r3, r2
 801255c:	623b      	str	r3, [r7, #32]
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	781b      	ldrb	r3, [r3, #0]
 8012562:	00da      	lsls	r2, r3, #3
 8012564:	6a3b      	ldr	r3, [r7, #32]
 8012566:	4413      	add	r3, r2
 8012568:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801256c:	61fb      	str	r3, [r7, #28]
 801256e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012572:	b29a      	uxth	r2, r3
 8012574:	69fb      	ldr	r3, [r7, #28]
 8012576:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	891b      	ldrh	r3, [r3, #8]
 801257c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	6959      	ldr	r1, [r3, #20]
 8012584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012588:	b29b      	uxth	r3, r3
 801258a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 fd19 	bl	8012fc6 <USB_WritePMA>
 8012594:	e2e2      	b.n	8012b5c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	785b      	ldrb	r3, [r3, #1]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d16b      	bne.n	8012676 <USB_EPStartXfer+0x478>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80125a8:	b29b      	uxth	r3, r3
 80125aa:	461a      	mov	r2, r3
 80125ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80125ae:	4413      	add	r3, r2
 80125b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	00da      	lsls	r2, r3, #3
 80125b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80125ba:	4413      	add	r3, r2
 80125bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80125c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80125c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125c4:	881b      	ldrh	r3, [r3, #0]
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80125cc:	b29a      	uxth	r2, r3
 80125ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125d0:	801a      	strh	r2, [r3, #0]
 80125d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d10a      	bne.n	80125f0 <USB_EPStartXfer+0x3f2>
 80125da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125dc:	881b      	ldrh	r3, [r3, #0]
 80125de:	b29b      	uxth	r3, r3
 80125e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125e8:	b29a      	uxth	r2, r3
 80125ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125ec:	801a      	strh	r2, [r3, #0]
 80125ee:	e05d      	b.n	80126ac <USB_EPStartXfer+0x4ae>
 80125f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80125f6:	d81c      	bhi.n	8012632 <USB_EPStartXfer+0x434>
 80125f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125fc:	085b      	lsrs	r3, r3, #1
 80125fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012606:	f003 0301 	and.w	r3, r3, #1
 801260a:	2b00      	cmp	r3, #0
 801260c:	d004      	beq.n	8012618 <USB_EPStartXfer+0x41a>
 801260e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012612:	3301      	adds	r3, #1
 8012614:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801261a:	881b      	ldrh	r3, [r3, #0]
 801261c:	b29a      	uxth	r2, r3
 801261e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012622:	b29b      	uxth	r3, r3
 8012624:	029b      	lsls	r3, r3, #10
 8012626:	b29b      	uxth	r3, r3
 8012628:	4313      	orrs	r3, r2
 801262a:	b29a      	uxth	r2, r3
 801262c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801262e:	801a      	strh	r2, [r3, #0]
 8012630:	e03c      	b.n	80126ac <USB_EPStartXfer+0x4ae>
 8012632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012636:	095b      	lsrs	r3, r3, #5
 8012638:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801263c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012640:	f003 031f 	and.w	r3, r3, #31
 8012644:	2b00      	cmp	r3, #0
 8012646:	d104      	bne.n	8012652 <USB_EPStartXfer+0x454>
 8012648:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801264c:	3b01      	subs	r3, #1
 801264e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012654:	881b      	ldrh	r3, [r3, #0]
 8012656:	b29a      	uxth	r2, r3
 8012658:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801265c:	b29b      	uxth	r3, r3
 801265e:	029b      	lsls	r3, r3, #10
 8012660:	b29b      	uxth	r3, r3
 8012662:	4313      	orrs	r3, r2
 8012664:	b29b      	uxth	r3, r3
 8012666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801266a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801266e:	b29a      	uxth	r2, r3
 8012670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012672:	801a      	strh	r2, [r3, #0]
 8012674:	e01a      	b.n	80126ac <USB_EPStartXfer+0x4ae>
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	785b      	ldrb	r3, [r3, #1]
 801267a:	2b01      	cmp	r3, #1
 801267c:	d116      	bne.n	80126ac <USB_EPStartXfer+0x4ae>
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	653b      	str	r3, [r7, #80]	@ 0x50
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012688:	b29b      	uxth	r3, r3
 801268a:	461a      	mov	r2, r3
 801268c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801268e:	4413      	add	r3, r2
 8012690:	653b      	str	r3, [r7, #80]	@ 0x50
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	00da      	lsls	r2, r3, #3
 8012698:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801269a:	4413      	add	r3, r2
 801269c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80126a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80126a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126a6:	b29a      	uxth	r2, r3
 80126a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	891b      	ldrh	r3, [r3, #8]
 80126b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	6959      	ldr	r1, [r3, #20]
 80126b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126bc:	b29b      	uxth	r3, r3
 80126be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	f000 fc7f 	bl	8012fc6 <USB_WritePMA>
            ep->xfer_buff += len;
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	695a      	ldr	r2, [r3, #20]
 80126cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126d0:	441a      	add	r2, r3
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	6a1a      	ldr	r2, [r3, #32]
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	691b      	ldr	r3, [r3, #16]
 80126de:	429a      	cmp	r2, r3
 80126e0:	d907      	bls.n	80126f2 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	6a1a      	ldr	r2, [r3, #32]
 80126e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126ea:	1ad2      	subs	r2, r2, r3
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	621a      	str	r2, [r3, #32]
 80126f0:	e006      	b.n	8012700 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	6a1b      	ldr	r3, [r3, #32]
 80126f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	2200      	movs	r2, #0
 80126fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	643b      	str	r3, [r7, #64]	@ 0x40
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	785b      	ldrb	r3, [r3, #1]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d16b      	bne.n	80127e4 <USB_EPStartXfer+0x5e6>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012716:	b29b      	uxth	r3, r3
 8012718:	461a      	mov	r2, r3
 801271a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801271c:	4413      	add	r3, r2
 801271e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	00da      	lsls	r2, r3, #3
 8012726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012728:	4413      	add	r3, r2
 801272a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801272e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012732:	881b      	ldrh	r3, [r3, #0]
 8012734:	b29b      	uxth	r3, r3
 8012736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801273a:	b29a      	uxth	r2, r3
 801273c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801273e:	801a      	strh	r2, [r3, #0]
 8012740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012744:	2b00      	cmp	r3, #0
 8012746:	d10a      	bne.n	801275e <USB_EPStartXfer+0x560>
 8012748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801274a:	881b      	ldrh	r3, [r3, #0]
 801274c:	b29b      	uxth	r3, r3
 801274e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012756:	b29a      	uxth	r2, r3
 8012758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801275a:	801a      	strh	r2, [r3, #0]
 801275c:	e05b      	b.n	8012816 <USB_EPStartXfer+0x618>
 801275e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012762:	2b3e      	cmp	r3, #62	@ 0x3e
 8012764:	d81c      	bhi.n	80127a0 <USB_EPStartXfer+0x5a2>
 8012766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801276a:	085b      	lsrs	r3, r3, #1
 801276c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012770:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012774:	f003 0301 	and.w	r3, r3, #1
 8012778:	2b00      	cmp	r3, #0
 801277a:	d004      	beq.n	8012786 <USB_EPStartXfer+0x588>
 801277c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012780:	3301      	adds	r3, #1
 8012782:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012788:	881b      	ldrh	r3, [r3, #0]
 801278a:	b29a      	uxth	r2, r3
 801278c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012790:	b29b      	uxth	r3, r3
 8012792:	029b      	lsls	r3, r3, #10
 8012794:	b29b      	uxth	r3, r3
 8012796:	4313      	orrs	r3, r2
 8012798:	b29a      	uxth	r2, r3
 801279a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801279c:	801a      	strh	r2, [r3, #0]
 801279e:	e03a      	b.n	8012816 <USB_EPStartXfer+0x618>
 80127a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127a4:	095b      	lsrs	r3, r3, #5
 80127a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80127aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127ae:	f003 031f 	and.w	r3, r3, #31
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d104      	bne.n	80127c0 <USB_EPStartXfer+0x5c2>
 80127b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80127ba:	3b01      	subs	r3, #1
 80127bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80127c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127c2:	881b      	ldrh	r3, [r3, #0]
 80127c4:	b29a      	uxth	r2, r3
 80127c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	029b      	lsls	r3, r3, #10
 80127ce:	b29b      	uxth	r3, r3
 80127d0:	4313      	orrs	r3, r2
 80127d2:	b29b      	uxth	r3, r3
 80127d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80127d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80127dc:	b29a      	uxth	r2, r3
 80127de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127e0:	801a      	strh	r2, [r3, #0]
 80127e2:	e018      	b.n	8012816 <USB_EPStartXfer+0x618>
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	785b      	ldrb	r3, [r3, #1]
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	d114      	bne.n	8012816 <USB_EPStartXfer+0x618>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80127f2:	b29b      	uxth	r3, r3
 80127f4:	461a      	mov	r2, r3
 80127f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127f8:	4413      	add	r3, r2
 80127fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	00da      	lsls	r2, r3, #3
 8012802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012804:	4413      	add	r3, r2
 8012806:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801280a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801280c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012810:	b29a      	uxth	r2, r3
 8012812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012814:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	895b      	ldrh	r3, [r3, #10]
 801281a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	6959      	ldr	r1, [r3, #20]
 8012822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012826:	b29b      	uxth	r3, r3
 8012828:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	f000 fbca 	bl	8012fc6 <USB_WritePMA>
 8012832:	e193      	b.n	8012b5c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	6a1b      	ldr	r3, [r3, #32]
 8012838:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801283c:	687a      	ldr	r2, [r7, #4]
 801283e:	683b      	ldr	r3, [r7, #0]
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	009b      	lsls	r3, r3, #2
 8012844:	4413      	add	r3, r2
 8012846:	881b      	ldrh	r3, [r3, #0]
 8012848:	b29b      	uxth	r3, r3
 801284a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 801284e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012852:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	009b      	lsls	r3, r3, #2
 801285e:	441a      	add	r2, r3
 8012860:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8012864:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012868:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801286c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012874:	b29b      	uxth	r3, r3
 8012876:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012882:	b29b      	uxth	r3, r3
 8012884:	461a      	mov	r2, r3
 8012886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012888:	4413      	add	r3, r2
 801288a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	781b      	ldrb	r3, [r3, #0]
 8012890:	00da      	lsls	r2, r3, #3
 8012892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012894:	4413      	add	r3, r2
 8012896:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801289a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801289c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128a0:	b29a      	uxth	r2, r3
 80128a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80128a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	891b      	ldrh	r3, [r3, #8]
 80128aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	6959      	ldr	r1, [r3, #20]
 80128b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128b6:	b29b      	uxth	r3, r3
 80128b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f000 fb82 	bl	8012fc6 <USB_WritePMA>
 80128c2:	e14b      	b.n	8012b5c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	6a1a      	ldr	r2, [r3, #32]
 80128c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128cc:	1ad2      	subs	r2, r2, r3
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80128d2:	687a      	ldr	r2, [r7, #4]
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	009b      	lsls	r3, r3, #2
 80128da:	4413      	add	r3, r2
 80128dc:	881b      	ldrh	r3, [r3, #0]
 80128de:	b29b      	uxth	r3, r3
 80128e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	f000 809a 	beq.w	8012a1e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	785b      	ldrb	r3, [r3, #1]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d16b      	bne.n	80129ce <USB_EPStartXfer+0x7d0>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012900:	b29b      	uxth	r3, r3
 8012902:	461a      	mov	r2, r3
 8012904:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012906:	4413      	add	r3, r2
 8012908:	66bb      	str	r3, [r7, #104]	@ 0x68
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	00da      	lsls	r2, r3, #3
 8012910:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012912:	4413      	add	r3, r2
 8012914:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012918:	667b      	str	r3, [r7, #100]	@ 0x64
 801291a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801291c:	881b      	ldrh	r3, [r3, #0]
 801291e:	b29b      	uxth	r3, r3
 8012920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012924:	b29a      	uxth	r2, r3
 8012926:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012928:	801a      	strh	r2, [r3, #0]
 801292a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801292e:	2b00      	cmp	r3, #0
 8012930:	d10a      	bne.n	8012948 <USB_EPStartXfer+0x74a>
 8012932:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012934:	881b      	ldrh	r3, [r3, #0]
 8012936:	b29b      	uxth	r3, r3
 8012938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801293c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012940:	b29a      	uxth	r2, r3
 8012942:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012944:	801a      	strh	r2, [r3, #0]
 8012946:	e05b      	b.n	8012a00 <USB_EPStartXfer+0x802>
 8012948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801294c:	2b3e      	cmp	r3, #62	@ 0x3e
 801294e:	d81c      	bhi.n	801298a <USB_EPStartXfer+0x78c>
 8012950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012954:	085b      	lsrs	r3, r3, #1
 8012956:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801295a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801295e:	f003 0301 	and.w	r3, r3, #1
 8012962:	2b00      	cmp	r3, #0
 8012964:	d004      	beq.n	8012970 <USB_EPStartXfer+0x772>
 8012966:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801296a:	3301      	adds	r3, #1
 801296c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012972:	881b      	ldrh	r3, [r3, #0]
 8012974:	b29a      	uxth	r2, r3
 8012976:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801297a:	b29b      	uxth	r3, r3
 801297c:	029b      	lsls	r3, r3, #10
 801297e:	b29b      	uxth	r3, r3
 8012980:	4313      	orrs	r3, r2
 8012982:	b29a      	uxth	r2, r3
 8012984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012986:	801a      	strh	r2, [r3, #0]
 8012988:	e03a      	b.n	8012a00 <USB_EPStartXfer+0x802>
 801298a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801298e:	095b      	lsrs	r3, r3, #5
 8012990:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012998:	f003 031f 	and.w	r3, r3, #31
 801299c:	2b00      	cmp	r3, #0
 801299e:	d104      	bne.n	80129aa <USB_EPStartXfer+0x7ac>
 80129a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80129a4:	3b01      	subs	r3, #1
 80129a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80129aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80129ac:	881b      	ldrh	r3, [r3, #0]
 80129ae:	b29a      	uxth	r2, r3
 80129b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80129b4:	b29b      	uxth	r3, r3
 80129b6:	029b      	lsls	r3, r3, #10
 80129b8:	b29b      	uxth	r3, r3
 80129ba:	4313      	orrs	r3, r2
 80129bc:	b29b      	uxth	r3, r3
 80129be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80129c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80129c6:	b29a      	uxth	r2, r3
 80129c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80129ca:	801a      	strh	r2, [r3, #0]
 80129cc:	e018      	b.n	8012a00 <USB_EPStartXfer+0x802>
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	785b      	ldrb	r3, [r3, #1]
 80129d2:	2b01      	cmp	r3, #1
 80129d4:	d114      	bne.n	8012a00 <USB_EPStartXfer+0x802>
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80129dc:	b29b      	uxth	r3, r3
 80129de:	461a      	mov	r2, r3
 80129e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80129e2:	4413      	add	r3, r2
 80129e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	00da      	lsls	r2, r3, #3
 80129ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80129ee:	4413      	add	r3, r2
 80129f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80129f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80129f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80129fa:	b29a      	uxth	r2, r3
 80129fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80129fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	895b      	ldrh	r3, [r3, #10]
 8012a04:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	6959      	ldr	r1, [r3, #20]
 8012a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f000 fad5 	bl	8012fc6 <USB_WritePMA>
 8012a1c:	e09e      	b.n	8012b5c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	785b      	ldrb	r3, [r3, #1]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d16b      	bne.n	8012afe <USB_EPStartXfer+0x900>
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012a30:	b29b      	uxth	r3, r3
 8012a32:	461a      	mov	r2, r3
 8012a34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012a36:	4413      	add	r3, r2
 8012a38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	00da      	lsls	r2, r3, #3
 8012a40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012a42:	4413      	add	r3, r2
 8012a44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012a48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012a4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a4c:	881b      	ldrh	r3, [r3, #0]
 8012a4e:	b29b      	uxth	r3, r3
 8012a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012a54:	b29a      	uxth	r2, r3
 8012a56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a58:	801a      	strh	r2, [r3, #0]
 8012a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d10a      	bne.n	8012a78 <USB_EPStartXfer+0x87a>
 8012a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a64:	881b      	ldrh	r3, [r3, #0]
 8012a66:	b29b      	uxth	r3, r3
 8012a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a70:	b29a      	uxth	r2, r3
 8012a72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a74:	801a      	strh	r2, [r3, #0]
 8012a76:	e063      	b.n	8012b40 <USB_EPStartXfer+0x942>
 8012a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012a7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8012a7e:	d81c      	bhi.n	8012aba <USB_EPStartXfer+0x8bc>
 8012a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012a84:	085b      	lsrs	r3, r3, #1
 8012a86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012a8e:	f003 0301 	and.w	r3, r3, #1
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d004      	beq.n	8012aa0 <USB_EPStartXfer+0x8a2>
 8012a96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012a9a:	3301      	adds	r3, #1
 8012a9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012aa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012aa2:	881b      	ldrh	r3, [r3, #0]
 8012aa4:	b29a      	uxth	r2, r3
 8012aa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012aaa:	b29b      	uxth	r3, r3
 8012aac:	029b      	lsls	r3, r3, #10
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	4313      	orrs	r3, r2
 8012ab2:	b29a      	uxth	r2, r3
 8012ab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012ab6:	801a      	strh	r2, [r3, #0]
 8012ab8:	e042      	b.n	8012b40 <USB_EPStartXfer+0x942>
 8012aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012abe:	095b      	lsrs	r3, r3, #5
 8012ac0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012ac8:	f003 031f 	and.w	r3, r3, #31
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d104      	bne.n	8012ada <USB_EPStartXfer+0x8dc>
 8012ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012ad4:	3b01      	subs	r3, #1
 8012ad6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012ada:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012adc:	881b      	ldrh	r3, [r3, #0]
 8012ade:	b29a      	uxth	r2, r3
 8012ae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012ae4:	b29b      	uxth	r3, r3
 8012ae6:	029b      	lsls	r3, r3, #10
 8012ae8:	b29b      	uxth	r3, r3
 8012aea:	4313      	orrs	r3, r2
 8012aec:	b29b      	uxth	r3, r3
 8012aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012af6:	b29a      	uxth	r2, r3
 8012af8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012afa:	801a      	strh	r2, [r3, #0]
 8012afc:	e020      	b.n	8012b40 <USB_EPStartXfer+0x942>
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	785b      	ldrb	r3, [r3, #1]
 8012b02:	2b01      	cmp	r3, #1
 8012b04:	d11c      	bne.n	8012b40 <USB_EPStartXfer+0x942>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012b12:	b29b      	uxth	r3, r3
 8012b14:	461a      	mov	r2, r3
 8012b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012b1a:	4413      	add	r3, r2
 8012b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	00da      	lsls	r2, r3, #3
 8012b26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012b2a:	4413      	add	r3, r2
 8012b2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012b30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012b38:	b29a      	uxth	r2, r3
 8012b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012b3e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	891b      	ldrh	r3, [r3, #8]
 8012b44:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	6959      	ldr	r1, [r3, #20]
 8012b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012b50:	b29b      	uxth	r3, r3
 8012b52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 fa35 	bl	8012fc6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012b5c:	687a      	ldr	r2, [r7, #4]
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	009b      	lsls	r3, r3, #2
 8012b64:	4413      	add	r3, r2
 8012b66:	881b      	ldrh	r3, [r3, #0]
 8012b68:	b29b      	uxth	r3, r3
 8012b6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012b6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012b72:	817b      	strh	r3, [r7, #10]
 8012b74:	897b      	ldrh	r3, [r7, #10]
 8012b76:	f083 0310 	eor.w	r3, r3, #16
 8012b7a:	817b      	strh	r3, [r7, #10]
 8012b7c:	897b      	ldrh	r3, [r7, #10]
 8012b7e:	f083 0320 	eor.w	r3, r3, #32
 8012b82:	817b      	strh	r3, [r7, #10]
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	009b      	lsls	r3, r3, #2
 8012b8c:	441a      	add	r2, r3
 8012b8e:	897b      	ldrh	r3, [r7, #10]
 8012b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ba0:	b29b      	uxth	r3, r3
 8012ba2:	8013      	strh	r3, [r2, #0]
 8012ba4:	e0d5      	b.n	8012d52 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	7b1b      	ldrb	r3, [r3, #12]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d156      	bne.n	8012c5c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8012bae:	683b      	ldr	r3, [r7, #0]
 8012bb0:	699b      	ldr	r3, [r3, #24]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d122      	bne.n	8012bfc <USB_EPStartXfer+0x9fe>
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	78db      	ldrb	r3, [r3, #3]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d11e      	bne.n	8012bfc <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	009b      	lsls	r3, r3, #2
 8012bc6:	4413      	add	r3, r2
 8012bc8:	881b      	ldrh	r3, [r3, #0]
 8012bca:	b29b      	uxth	r3, r3
 8012bcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012bd4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	781b      	ldrb	r3, [r3, #0]
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	441a      	add	r2, r3
 8012be2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012bee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8012bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	8013      	strh	r3, [r2, #0]
 8012bfa:	e01d      	b.n	8012c38 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8012bfc:	687a      	ldr	r2, [r7, #4]
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	009b      	lsls	r3, r3, #2
 8012c04:	4413      	add	r3, r2
 8012c06:	881b      	ldrh	r3, [r3, #0]
 8012c08:	b29b      	uxth	r3, r3
 8012c0a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8012c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c12:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	781b      	ldrb	r3, [r3, #0]
 8012c1c:	009b      	lsls	r3, r3, #2
 8012c1e:	441a      	add	r2, r3
 8012c20:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8012c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012c2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c34:	b29b      	uxth	r3, r3
 8012c36:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	699a      	ldr	r2, [r3, #24]
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	691b      	ldr	r3, [r3, #16]
 8012c40:	429a      	cmp	r2, r3
 8012c42:	d907      	bls.n	8012c54 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	699a      	ldr	r2, [r3, #24]
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	691b      	ldr	r3, [r3, #16]
 8012c4c:	1ad2      	subs	r2, r2, r3
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	619a      	str	r2, [r3, #24]
 8012c52:	e054      	b.n	8012cfe <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	2200      	movs	r2, #0
 8012c58:	619a      	str	r2, [r3, #24]
 8012c5a:	e050      	b.n	8012cfe <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	78db      	ldrb	r3, [r3, #3]
 8012c60:	2b02      	cmp	r3, #2
 8012c62:	d142      	bne.n	8012cea <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	69db      	ldr	r3, [r3, #28]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d048      	beq.n	8012cfe <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012c6c:	687a      	ldr	r2, [r7, #4]
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	781b      	ldrb	r3, [r3, #0]
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	4413      	add	r3, r2
 8012c76:	881b      	ldrh	r3, [r3, #0]
 8012c78:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012c7c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012c80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d005      	beq.n	8012c94 <USB_EPStartXfer+0xa96>
 8012c88:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d10b      	bne.n	8012cac <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012c94:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d12e      	bne.n	8012cfe <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012ca0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d128      	bne.n	8012cfe <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012cac:	687a      	ldr	r2, [r7, #4]
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	009b      	lsls	r3, r3, #2
 8012cb4:	4413      	add	r3, r2
 8012cb6:	881b      	ldrh	r3, [r3, #0]
 8012cb8:	b29b      	uxth	r3, r3
 8012cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012cc2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8012cc6:	687a      	ldr	r2, [r7, #4]
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	009b      	lsls	r3, r3, #2
 8012cce:	441a      	add	r2, r3
 8012cd0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8012cd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012cd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012cdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012ce0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012ce4:	b29b      	uxth	r3, r3
 8012ce6:	8013      	strh	r3, [r2, #0]
 8012ce8:	e009      	b.n	8012cfe <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	78db      	ldrb	r3, [r3, #3]
 8012cee:	2b01      	cmp	r3, #1
 8012cf0:	d103      	bne.n	8012cfa <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8012cf2:	683b      	ldr	r3, [r7, #0]
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	619a      	str	r2, [r3, #24]
 8012cf8:	e001      	b.n	8012cfe <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	e02a      	b.n	8012d54 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012cfe:	687a      	ldr	r2, [r7, #4]
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	781b      	ldrb	r3, [r3, #0]
 8012d04:	009b      	lsls	r3, r3, #2
 8012d06:	4413      	add	r3, r2
 8012d08:	881b      	ldrh	r3, [r3, #0]
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012d14:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012d18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012d1c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012d20:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012d24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012d28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012d2c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012d30:	687a      	ldr	r2, [r7, #4]
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	009b      	lsls	r3, r3, #2
 8012d38:	441a      	add	r2, r3
 8012d3a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012d3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012d42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012d52:	2300      	movs	r3, #0
}
 8012d54:	4618      	mov	r0, r3
 8012d56:	37b0      	adds	r7, #176	@ 0xb0
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}

08012d5c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	b085      	sub	sp, #20
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	785b      	ldrb	r3, [r3, #1]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d020      	beq.n	8012db0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	009b      	lsls	r3, r3, #2
 8012d76:	4413      	add	r3, r2
 8012d78:	881b      	ldrh	r3, [r3, #0]
 8012d7a:	b29b      	uxth	r3, r3
 8012d7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012d80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012d84:	81bb      	strh	r3, [r7, #12]
 8012d86:	89bb      	ldrh	r3, [r7, #12]
 8012d88:	f083 0310 	eor.w	r3, r3, #16
 8012d8c:	81bb      	strh	r3, [r7, #12]
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	009b      	lsls	r3, r3, #2
 8012d96:	441a      	add	r2, r3
 8012d98:	89bb      	ldrh	r3, [r7, #12]
 8012d9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012d9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012daa:	b29b      	uxth	r3, r3
 8012dac:	8013      	strh	r3, [r2, #0]
 8012dae:	e01f      	b.n	8012df0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012db0:	687a      	ldr	r2, [r7, #4]
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	781b      	ldrb	r3, [r3, #0]
 8012db6:	009b      	lsls	r3, r3, #2
 8012db8:	4413      	add	r3, r2
 8012dba:	881b      	ldrh	r3, [r3, #0]
 8012dbc:	b29b      	uxth	r3, r3
 8012dbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012dc6:	81fb      	strh	r3, [r7, #14]
 8012dc8:	89fb      	ldrh	r3, [r7, #14]
 8012dca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012dce:	81fb      	strh	r3, [r7, #14]
 8012dd0:	687a      	ldr	r2, [r7, #4]
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	009b      	lsls	r3, r3, #2
 8012dd8:	441a      	add	r2, r3
 8012dda:	89fb      	ldrh	r3, [r7, #14]
 8012ddc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012de0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012dec:	b29b      	uxth	r3, r3
 8012dee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012df0:	2300      	movs	r3, #0
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	3714      	adds	r7, #20
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr

08012dfe <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012dfe:	b480      	push	{r7}
 8012e00:	b087      	sub	sp, #28
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
 8012e06:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	785b      	ldrb	r3, [r3, #1]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d04c      	beq.n	8012eaa <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012e10:	687a      	ldr	r2, [r7, #4]
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	781b      	ldrb	r3, [r3, #0]
 8012e16:	009b      	lsls	r3, r3, #2
 8012e18:	4413      	add	r3, r2
 8012e1a:	881b      	ldrh	r3, [r3, #0]
 8012e1c:	823b      	strh	r3, [r7, #16]
 8012e1e:	8a3b      	ldrh	r3, [r7, #16]
 8012e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d01b      	beq.n	8012e60 <USB_EPClearStall+0x62>
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	781b      	ldrb	r3, [r3, #0]
 8012e2e:	009b      	lsls	r3, r3, #2
 8012e30:	4413      	add	r3, r2
 8012e32:	881b      	ldrh	r3, [r3, #0]
 8012e34:	b29b      	uxth	r3, r3
 8012e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012e3e:	81fb      	strh	r3, [r7, #14]
 8012e40:	687a      	ldr	r2, [r7, #4]
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	009b      	lsls	r3, r3, #2
 8012e48:	441a      	add	r2, r3
 8012e4a:	89fb      	ldrh	r3, [r7, #14]
 8012e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012e54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012e58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012e5c:	b29b      	uxth	r3, r3
 8012e5e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	78db      	ldrb	r3, [r3, #3]
 8012e64:	2b01      	cmp	r3, #1
 8012e66:	d06c      	beq.n	8012f42 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012e68:	687a      	ldr	r2, [r7, #4]
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	781b      	ldrb	r3, [r3, #0]
 8012e6e:	009b      	lsls	r3, r3, #2
 8012e70:	4413      	add	r3, r2
 8012e72:	881b      	ldrh	r3, [r3, #0]
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012e7e:	81bb      	strh	r3, [r7, #12]
 8012e80:	89bb      	ldrh	r3, [r7, #12]
 8012e82:	f083 0320 	eor.w	r3, r3, #32
 8012e86:	81bb      	strh	r3, [r7, #12]
 8012e88:	687a      	ldr	r2, [r7, #4]
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	781b      	ldrb	r3, [r3, #0]
 8012e8e:	009b      	lsls	r3, r3, #2
 8012e90:	441a      	add	r2, r3
 8012e92:	89bb      	ldrh	r3, [r7, #12]
 8012e94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012e98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ea4:	b29b      	uxth	r3, r3
 8012ea6:	8013      	strh	r3, [r2, #0]
 8012ea8:	e04b      	b.n	8012f42 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012eaa:	687a      	ldr	r2, [r7, #4]
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	009b      	lsls	r3, r3, #2
 8012eb2:	4413      	add	r3, r2
 8012eb4:	881b      	ldrh	r3, [r3, #0]
 8012eb6:	82fb      	strh	r3, [r7, #22]
 8012eb8:	8afb      	ldrh	r3, [r7, #22]
 8012eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d01b      	beq.n	8012efa <USB_EPClearStall+0xfc>
 8012ec2:	687a      	ldr	r2, [r7, #4]
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	009b      	lsls	r3, r3, #2
 8012eca:	4413      	add	r3, r2
 8012ecc:	881b      	ldrh	r3, [r3, #0]
 8012ece:	b29b      	uxth	r3, r3
 8012ed0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012ed8:	82bb      	strh	r3, [r7, #20]
 8012eda:	687a      	ldr	r2, [r7, #4]
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	009b      	lsls	r3, r3, #2
 8012ee2:	441a      	add	r2, r3
 8012ee4:	8abb      	ldrh	r3, [r7, #20]
 8012ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012eee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ef6:	b29b      	uxth	r3, r3
 8012ef8:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012efa:	687a      	ldr	r2, [r7, #4]
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	009b      	lsls	r3, r3, #2
 8012f02:	4413      	add	r3, r2
 8012f04:	881b      	ldrh	r3, [r3, #0]
 8012f06:	b29b      	uxth	r3, r3
 8012f08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012f10:	827b      	strh	r3, [r7, #18]
 8012f12:	8a7b      	ldrh	r3, [r7, #18]
 8012f14:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012f18:	827b      	strh	r3, [r7, #18]
 8012f1a:	8a7b      	ldrh	r3, [r7, #18]
 8012f1c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012f20:	827b      	strh	r3, [r7, #18]
 8012f22:	687a      	ldr	r2, [r7, #4]
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	009b      	lsls	r3, r3, #2
 8012f2a:	441a      	add	r2, r3
 8012f2c:	8a7b      	ldrh	r3, [r7, #18]
 8012f2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012f32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012f36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012f3e:	b29b      	uxth	r3, r3
 8012f40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012f42:	2300      	movs	r3, #0
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	371c      	adds	r7, #28
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4e:	4770      	bx	lr

08012f50 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012f50:	b480      	push	{r7}
 8012f52:	b083      	sub	sp, #12
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	460b      	mov	r3, r1
 8012f5a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012f5c:	78fb      	ldrb	r3, [r7, #3]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d103      	bne.n	8012f6a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2280      	movs	r2, #128	@ 0x80
 8012f66:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8012f6a:	2300      	movs	r3, #0
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	370c      	adds	r7, #12
 8012f70:	46bd      	mov	sp, r7
 8012f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f76:	4770      	bx	lr

08012f78 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012f78:	b480      	push	{r7}
 8012f7a:	b083      	sub	sp, #12
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012f90:	b29a      	uxth	r2, r3
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8012f98:	2300      	movs	r3, #0
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	370c      	adds	r7, #12
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa4:	4770      	bx	lr

08012fa6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8012fa6:	b480      	push	{r7}
 8012fa8:	b085      	sub	sp, #20
 8012faa:	af00      	add	r7, sp, #0
 8012fac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8012fb4:	b29b      	uxth	r3, r3
 8012fb6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012fb8:	68fb      	ldr	r3, [r7, #12]
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3714      	adds	r7, #20
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc4:	4770      	bx	lr

08012fc6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012fc6:	b480      	push	{r7}
 8012fc8:	b08b      	sub	sp, #44	@ 0x2c
 8012fca:	af00      	add	r7, sp, #0
 8012fcc:	60f8      	str	r0, [r7, #12]
 8012fce:	60b9      	str	r1, [r7, #8]
 8012fd0:	4611      	mov	r1, r2
 8012fd2:	461a      	mov	r2, r3
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	80fb      	strh	r3, [r7, #6]
 8012fd8:	4613      	mov	r3, r2
 8012fda:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012fdc:	88bb      	ldrh	r3, [r7, #4]
 8012fde:	3301      	adds	r3, #1
 8012fe0:	085b      	lsrs	r3, r3, #1
 8012fe2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012fec:	88fa      	ldrh	r2, [r7, #6]
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	4413      	add	r3, r2
 8012ff2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012ff6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012ff8:	69bb      	ldr	r3, [r7, #24]
 8012ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ffc:	e01c      	b.n	8013038 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8012ffe:	69fb      	ldr	r3, [r7, #28]
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8013004:	69fb      	ldr	r3, [r7, #28]
 8013006:	3301      	adds	r3, #1
 8013008:	781b      	ldrb	r3, [r3, #0]
 801300a:	b21b      	sxth	r3, r3
 801300c:	021b      	lsls	r3, r3, #8
 801300e:	b21a      	sxth	r2, r3
 8013010:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013014:	4313      	orrs	r3, r2
 8013016:	b21b      	sxth	r3, r3
 8013018:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801301a:	6a3b      	ldr	r3, [r7, #32]
 801301c:	8a7a      	ldrh	r2, [r7, #18]
 801301e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8013020:	6a3b      	ldr	r3, [r7, #32]
 8013022:	3302      	adds	r3, #2
 8013024:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8013026:	69fb      	ldr	r3, [r7, #28]
 8013028:	3301      	adds	r3, #1
 801302a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801302c:	69fb      	ldr	r3, [r7, #28]
 801302e:	3301      	adds	r3, #1
 8013030:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8013032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013034:	3b01      	subs	r3, #1
 8013036:	627b      	str	r3, [r7, #36]	@ 0x24
 8013038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801303a:	2b00      	cmp	r3, #0
 801303c:	d1df      	bne.n	8012ffe <USB_WritePMA+0x38>
  }
}
 801303e:	bf00      	nop
 8013040:	bf00      	nop
 8013042:	372c      	adds	r7, #44	@ 0x2c
 8013044:	46bd      	mov	sp, r7
 8013046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304a:	4770      	bx	lr

0801304c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801304c:	b480      	push	{r7}
 801304e:	b08b      	sub	sp, #44	@ 0x2c
 8013050:	af00      	add	r7, sp, #0
 8013052:	60f8      	str	r0, [r7, #12]
 8013054:	60b9      	str	r1, [r7, #8]
 8013056:	4611      	mov	r1, r2
 8013058:	461a      	mov	r2, r3
 801305a:	460b      	mov	r3, r1
 801305c:	80fb      	strh	r3, [r7, #6]
 801305e:	4613      	mov	r3, r2
 8013060:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8013062:	88bb      	ldrh	r3, [r7, #4]
 8013064:	085b      	lsrs	r3, r3, #1
 8013066:	b29b      	uxth	r3, r3
 8013068:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013072:	88fa      	ldrh	r2, [r7, #6]
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	4413      	add	r3, r2
 8013078:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801307c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801307e:	69bb      	ldr	r3, [r7, #24]
 8013080:	627b      	str	r3, [r7, #36]	@ 0x24
 8013082:	e018      	b.n	80130b6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8013084:	6a3b      	ldr	r3, [r7, #32]
 8013086:	881b      	ldrh	r3, [r3, #0]
 8013088:	b29b      	uxth	r3, r3
 801308a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801308c:	6a3b      	ldr	r3, [r7, #32]
 801308e:	3302      	adds	r3, #2
 8013090:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8013092:	693b      	ldr	r3, [r7, #16]
 8013094:	b2da      	uxtb	r2, r3
 8013096:	69fb      	ldr	r3, [r7, #28]
 8013098:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801309a:	69fb      	ldr	r3, [r7, #28]
 801309c:	3301      	adds	r3, #1
 801309e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80130a0:	693b      	ldr	r3, [r7, #16]
 80130a2:	0a1b      	lsrs	r3, r3, #8
 80130a4:	b2da      	uxtb	r2, r3
 80130a6:	69fb      	ldr	r3, [r7, #28]
 80130a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80130aa:	69fb      	ldr	r3, [r7, #28]
 80130ac:	3301      	adds	r3, #1
 80130ae:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80130b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130b2:	3b01      	subs	r3, #1
 80130b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80130b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d1e3      	bne.n	8013084 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80130bc:	88bb      	ldrh	r3, [r7, #4]
 80130be:	f003 0301 	and.w	r3, r3, #1
 80130c2:	b29b      	uxth	r3, r3
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d007      	beq.n	80130d8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80130c8:	6a3b      	ldr	r3, [r7, #32]
 80130ca:	881b      	ldrh	r3, [r3, #0]
 80130cc:	b29b      	uxth	r3, r3
 80130ce:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	b2da      	uxtb	r2, r3
 80130d4:	69fb      	ldr	r3, [r7, #28]
 80130d6:	701a      	strb	r2, [r3, #0]
  }
}
 80130d8:	bf00      	nop
 80130da:	372c      	adds	r7, #44	@ 0x2c
 80130dc:	46bd      	mov	sp, r7
 80130de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e2:	4770      	bx	lr

080130e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b084      	sub	sp, #16
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	460b      	mov	r3, r1
 80130ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80130f0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80130f4:	f003 f960 	bl	80163b8 <USBD_static_malloc>
 80130f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d109      	bne.n	8013114 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	32b0      	adds	r2, #176	@ 0xb0
 801310a:	2100      	movs	r1, #0
 801310c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013110:	2302      	movs	r3, #2
 8013112:	e0d4      	b.n	80132be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013114:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8013118:	2100      	movs	r1, #0
 801311a:	68f8      	ldr	r0, [r7, #12]
 801311c:	f005 f90d 	bl	801833a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	32b0      	adds	r2, #176	@ 0xb0
 801312a:	68f9      	ldr	r1, [r7, #12]
 801312c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	32b0      	adds	r2, #176	@ 0xb0
 801313a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	7c1b      	ldrb	r3, [r3, #16]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d138      	bne.n	80131be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801314c:	4b5e      	ldr	r3, [pc, #376]	@ (80132c8 <USBD_CDC_Init+0x1e4>)
 801314e:	7819      	ldrb	r1, [r3, #0]
 8013150:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013154:	2202      	movs	r2, #2
 8013156:	6878      	ldr	r0, [r7, #4]
 8013158:	f002 ffd5 	bl	8016106 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801315c:	4b5a      	ldr	r3, [pc, #360]	@ (80132c8 <USBD_CDC_Init+0x1e4>)
 801315e:	781b      	ldrb	r3, [r3, #0]
 8013160:	f003 020f 	and.w	r2, r3, #15
 8013164:	6879      	ldr	r1, [r7, #4]
 8013166:	4613      	mov	r3, r2
 8013168:	009b      	lsls	r3, r3, #2
 801316a:	4413      	add	r3, r2
 801316c:	009b      	lsls	r3, r3, #2
 801316e:	440b      	add	r3, r1
 8013170:	3324      	adds	r3, #36	@ 0x24
 8013172:	2201      	movs	r2, #1
 8013174:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013176:	4b55      	ldr	r3, [pc, #340]	@ (80132cc <USBD_CDC_Init+0x1e8>)
 8013178:	7819      	ldrb	r1, [r3, #0]
 801317a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801317e:	2202      	movs	r2, #2
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	f002 ffc0 	bl	8016106 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013186:	4b51      	ldr	r3, [pc, #324]	@ (80132cc <USBD_CDC_Init+0x1e8>)
 8013188:	781b      	ldrb	r3, [r3, #0]
 801318a:	f003 020f 	and.w	r2, r3, #15
 801318e:	6879      	ldr	r1, [r7, #4]
 8013190:	4613      	mov	r3, r2
 8013192:	009b      	lsls	r3, r3, #2
 8013194:	4413      	add	r3, r2
 8013196:	009b      	lsls	r3, r3, #2
 8013198:	440b      	add	r3, r1
 801319a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801319e:	2201      	movs	r2, #1
 80131a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80131a2:	4b4b      	ldr	r3, [pc, #300]	@ (80132d0 <USBD_CDC_Init+0x1ec>)
 80131a4:	781b      	ldrb	r3, [r3, #0]
 80131a6:	f003 020f 	and.w	r2, r3, #15
 80131aa:	6879      	ldr	r1, [r7, #4]
 80131ac:	4613      	mov	r3, r2
 80131ae:	009b      	lsls	r3, r3, #2
 80131b0:	4413      	add	r3, r2
 80131b2:	009b      	lsls	r3, r3, #2
 80131b4:	440b      	add	r3, r1
 80131b6:	3326      	adds	r3, #38	@ 0x26
 80131b8:	2210      	movs	r2, #16
 80131ba:	801a      	strh	r2, [r3, #0]
 80131bc:	e035      	b.n	801322a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80131be:	4b42      	ldr	r3, [pc, #264]	@ (80132c8 <USBD_CDC_Init+0x1e4>)
 80131c0:	7819      	ldrb	r1, [r3, #0]
 80131c2:	2340      	movs	r3, #64	@ 0x40
 80131c4:	2202      	movs	r2, #2
 80131c6:	6878      	ldr	r0, [r7, #4]
 80131c8:	f002 ff9d 	bl	8016106 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80131cc:	4b3e      	ldr	r3, [pc, #248]	@ (80132c8 <USBD_CDC_Init+0x1e4>)
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	f003 020f 	and.w	r2, r3, #15
 80131d4:	6879      	ldr	r1, [r7, #4]
 80131d6:	4613      	mov	r3, r2
 80131d8:	009b      	lsls	r3, r3, #2
 80131da:	4413      	add	r3, r2
 80131dc:	009b      	lsls	r3, r3, #2
 80131de:	440b      	add	r3, r1
 80131e0:	3324      	adds	r3, #36	@ 0x24
 80131e2:	2201      	movs	r2, #1
 80131e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80131e6:	4b39      	ldr	r3, [pc, #228]	@ (80132cc <USBD_CDC_Init+0x1e8>)
 80131e8:	7819      	ldrb	r1, [r3, #0]
 80131ea:	2340      	movs	r3, #64	@ 0x40
 80131ec:	2202      	movs	r2, #2
 80131ee:	6878      	ldr	r0, [r7, #4]
 80131f0:	f002 ff89 	bl	8016106 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80131f4:	4b35      	ldr	r3, [pc, #212]	@ (80132cc <USBD_CDC_Init+0x1e8>)
 80131f6:	781b      	ldrb	r3, [r3, #0]
 80131f8:	f003 020f 	and.w	r2, r3, #15
 80131fc:	6879      	ldr	r1, [r7, #4]
 80131fe:	4613      	mov	r3, r2
 8013200:	009b      	lsls	r3, r3, #2
 8013202:	4413      	add	r3, r2
 8013204:	009b      	lsls	r3, r3, #2
 8013206:	440b      	add	r3, r1
 8013208:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801320c:	2201      	movs	r2, #1
 801320e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013210:	4b2f      	ldr	r3, [pc, #188]	@ (80132d0 <USBD_CDC_Init+0x1ec>)
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	f003 020f 	and.w	r2, r3, #15
 8013218:	6879      	ldr	r1, [r7, #4]
 801321a:	4613      	mov	r3, r2
 801321c:	009b      	lsls	r3, r3, #2
 801321e:	4413      	add	r3, r2
 8013220:	009b      	lsls	r3, r3, #2
 8013222:	440b      	add	r3, r1
 8013224:	3326      	adds	r3, #38	@ 0x26
 8013226:	2210      	movs	r2, #16
 8013228:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801322a:	4b29      	ldr	r3, [pc, #164]	@ (80132d0 <USBD_CDC_Init+0x1ec>)
 801322c:	7819      	ldrb	r1, [r3, #0]
 801322e:	2308      	movs	r3, #8
 8013230:	2203      	movs	r2, #3
 8013232:	6878      	ldr	r0, [r7, #4]
 8013234:	f002 ff67 	bl	8016106 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8013238:	4b25      	ldr	r3, [pc, #148]	@ (80132d0 <USBD_CDC_Init+0x1ec>)
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	f003 020f 	and.w	r2, r3, #15
 8013240:	6879      	ldr	r1, [r7, #4]
 8013242:	4613      	mov	r3, r2
 8013244:	009b      	lsls	r3, r3, #2
 8013246:	4413      	add	r3, r2
 8013248:	009b      	lsls	r3, r3, #2
 801324a:	440b      	add	r3, r1
 801324c:	3324      	adds	r3, #36	@ 0x24
 801324e:	2201      	movs	r2, #1
 8013250:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	2200      	movs	r2, #0
 8013256:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013260:	687a      	ldr	r2, [r7, #4]
 8013262:	33b0      	adds	r3, #176	@ 0xb0
 8013264:	009b      	lsls	r3, r3, #2
 8013266:	4413      	add	r3, r2
 8013268:	685b      	ldr	r3, [r3, #4]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	2200      	movs	r2, #0
 8013272:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2200      	movs	r2, #0
 801327a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8013284:	2b00      	cmp	r3, #0
 8013286:	d101      	bne.n	801328c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8013288:	2302      	movs	r3, #2
 801328a:	e018      	b.n	80132be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	7c1b      	ldrb	r3, [r3, #16]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d10a      	bne.n	80132aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013294:	4b0d      	ldr	r3, [pc, #52]	@ (80132cc <USBD_CDC_Init+0x1e8>)
 8013296:	7819      	ldrb	r1, [r3, #0]
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801329e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80132a2:	6878      	ldr	r0, [r7, #4]
 80132a4:	f003 f81e 	bl	80162e4 <USBD_LL_PrepareReceive>
 80132a8:	e008      	b.n	80132bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80132aa:	4b08      	ldr	r3, [pc, #32]	@ (80132cc <USBD_CDC_Init+0x1e8>)
 80132ac:	7819      	ldrb	r1, [r3, #0]
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80132b4:	2340      	movs	r3, #64	@ 0x40
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f003 f814 	bl	80162e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80132bc:	2300      	movs	r3, #0
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3710      	adds	r7, #16
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
 80132c6:	bf00      	nop
 80132c8:	200000c3 	.word	0x200000c3
 80132cc:	200000c4 	.word	0x200000c4
 80132d0:	200000c5 	.word	0x200000c5

080132d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b082      	sub	sp, #8
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
 80132dc:	460b      	mov	r3, r1
 80132de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80132e0:	4b3a      	ldr	r3, [pc, #232]	@ (80133cc <USBD_CDC_DeInit+0xf8>)
 80132e2:	781b      	ldrb	r3, [r3, #0]
 80132e4:	4619      	mov	r1, r3
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f002 ff33 	bl	8016152 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80132ec:	4b37      	ldr	r3, [pc, #220]	@ (80133cc <USBD_CDC_DeInit+0xf8>)
 80132ee:	781b      	ldrb	r3, [r3, #0]
 80132f0:	f003 020f 	and.w	r2, r3, #15
 80132f4:	6879      	ldr	r1, [r7, #4]
 80132f6:	4613      	mov	r3, r2
 80132f8:	009b      	lsls	r3, r3, #2
 80132fa:	4413      	add	r3, r2
 80132fc:	009b      	lsls	r3, r3, #2
 80132fe:	440b      	add	r3, r1
 8013300:	3324      	adds	r3, #36	@ 0x24
 8013302:	2200      	movs	r2, #0
 8013304:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8013306:	4b32      	ldr	r3, [pc, #200]	@ (80133d0 <USBD_CDC_DeInit+0xfc>)
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	4619      	mov	r1, r3
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f002 ff20 	bl	8016152 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8013312:	4b2f      	ldr	r3, [pc, #188]	@ (80133d0 <USBD_CDC_DeInit+0xfc>)
 8013314:	781b      	ldrb	r3, [r3, #0]
 8013316:	f003 020f 	and.w	r2, r3, #15
 801331a:	6879      	ldr	r1, [r7, #4]
 801331c:	4613      	mov	r3, r2
 801331e:	009b      	lsls	r3, r3, #2
 8013320:	4413      	add	r3, r2
 8013322:	009b      	lsls	r3, r3, #2
 8013324:	440b      	add	r3, r1
 8013326:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801332a:	2200      	movs	r2, #0
 801332c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801332e:	4b29      	ldr	r3, [pc, #164]	@ (80133d4 <USBD_CDC_DeInit+0x100>)
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	4619      	mov	r1, r3
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f002 ff0c 	bl	8016152 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801333a:	4b26      	ldr	r3, [pc, #152]	@ (80133d4 <USBD_CDC_DeInit+0x100>)
 801333c:	781b      	ldrb	r3, [r3, #0]
 801333e:	f003 020f 	and.w	r2, r3, #15
 8013342:	6879      	ldr	r1, [r7, #4]
 8013344:	4613      	mov	r3, r2
 8013346:	009b      	lsls	r3, r3, #2
 8013348:	4413      	add	r3, r2
 801334a:	009b      	lsls	r3, r3, #2
 801334c:	440b      	add	r3, r1
 801334e:	3324      	adds	r3, #36	@ 0x24
 8013350:	2200      	movs	r2, #0
 8013352:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8013354:	4b1f      	ldr	r3, [pc, #124]	@ (80133d4 <USBD_CDC_DeInit+0x100>)
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	f003 020f 	and.w	r2, r3, #15
 801335c:	6879      	ldr	r1, [r7, #4]
 801335e:	4613      	mov	r3, r2
 8013360:	009b      	lsls	r3, r3, #2
 8013362:	4413      	add	r3, r2
 8013364:	009b      	lsls	r3, r3, #2
 8013366:	440b      	add	r3, r1
 8013368:	3326      	adds	r3, #38	@ 0x26
 801336a:	2200      	movs	r2, #0
 801336c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	32b0      	adds	r2, #176	@ 0xb0
 8013378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d01f      	beq.n	80133c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013386:	687a      	ldr	r2, [r7, #4]
 8013388:	33b0      	adds	r3, #176	@ 0xb0
 801338a:	009b      	lsls	r3, r3, #2
 801338c:	4413      	add	r3, r2
 801338e:	685b      	ldr	r3, [r3, #4]
 8013390:	685b      	ldr	r3, [r3, #4]
 8013392:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	32b0      	adds	r2, #176	@ 0xb0
 801339e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133a2:	4618      	mov	r0, r3
 80133a4:	f003 f816 	bl	80163d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	32b0      	adds	r2, #176	@ 0xb0
 80133b2:	2100      	movs	r1, #0
 80133b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2200      	movs	r2, #0
 80133bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80133c0:	2300      	movs	r3, #0
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3708      	adds	r7, #8
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}
 80133ca:	bf00      	nop
 80133cc:	200000c3 	.word	0x200000c3
 80133d0:	200000c4 	.word	0x200000c4
 80133d4:	200000c5 	.word	0x200000c5

080133d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b086      	sub	sp, #24
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
 80133e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	32b0      	adds	r2, #176	@ 0xb0
 80133ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80133f2:	2300      	movs	r3, #0
 80133f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80133f6:	2300      	movs	r3, #0
 80133f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80133fa:	2300      	movs	r3, #0
 80133fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d101      	bne.n	8013408 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013404:	2303      	movs	r3, #3
 8013406:	e0bf      	b.n	8013588 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013408:	683b      	ldr	r3, [r7, #0]
 801340a:	781b      	ldrb	r3, [r3, #0]
 801340c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013410:	2b00      	cmp	r3, #0
 8013412:	d050      	beq.n	80134b6 <USBD_CDC_Setup+0xde>
 8013414:	2b20      	cmp	r3, #32
 8013416:	f040 80af 	bne.w	8013578 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	88db      	ldrh	r3, [r3, #6]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d03a      	beq.n	8013498 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	781b      	ldrb	r3, [r3, #0]
 8013426:	b25b      	sxtb	r3, r3
 8013428:	2b00      	cmp	r3, #0
 801342a:	da1b      	bge.n	8013464 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013432:	687a      	ldr	r2, [r7, #4]
 8013434:	33b0      	adds	r3, #176	@ 0xb0
 8013436:	009b      	lsls	r3, r3, #2
 8013438:	4413      	add	r3, r2
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	689b      	ldr	r3, [r3, #8]
 801343e:	683a      	ldr	r2, [r7, #0]
 8013440:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013442:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013444:	683a      	ldr	r2, [r7, #0]
 8013446:	88d2      	ldrh	r2, [r2, #6]
 8013448:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	88db      	ldrh	r3, [r3, #6]
 801344e:	2b07      	cmp	r3, #7
 8013450:	bf28      	it	cs
 8013452:	2307      	movcs	r3, #7
 8013454:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	89fa      	ldrh	r2, [r7, #14]
 801345a:	4619      	mov	r1, r3
 801345c:	6878      	ldr	r0, [r7, #4]
 801345e:	f001 fd2b 	bl	8014eb8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8013462:	e090      	b.n	8013586 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	785a      	ldrb	r2, [r3, #1]
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	88db      	ldrh	r3, [r3, #6]
 8013472:	2b3f      	cmp	r3, #63	@ 0x3f
 8013474:	d803      	bhi.n	801347e <USBD_CDC_Setup+0xa6>
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	88db      	ldrh	r3, [r3, #6]
 801347a:	b2da      	uxtb	r2, r3
 801347c:	e000      	b.n	8013480 <USBD_CDC_Setup+0xa8>
 801347e:	2240      	movs	r2, #64	@ 0x40
 8013480:	693b      	ldr	r3, [r7, #16]
 8013482:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8013486:	6939      	ldr	r1, [r7, #16]
 8013488:	693b      	ldr	r3, [r7, #16]
 801348a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801348e:	461a      	mov	r2, r3
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f001 fd3d 	bl	8014f10 <USBD_CtlPrepareRx>
      break;
 8013496:	e076      	b.n	8013586 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801349e:	687a      	ldr	r2, [r7, #4]
 80134a0:	33b0      	adds	r3, #176	@ 0xb0
 80134a2:	009b      	lsls	r3, r3, #2
 80134a4:	4413      	add	r3, r2
 80134a6:	685b      	ldr	r3, [r3, #4]
 80134a8:	689b      	ldr	r3, [r3, #8]
 80134aa:	683a      	ldr	r2, [r7, #0]
 80134ac:	7850      	ldrb	r0, [r2, #1]
 80134ae:	2200      	movs	r2, #0
 80134b0:	6839      	ldr	r1, [r7, #0]
 80134b2:	4798      	blx	r3
      break;
 80134b4:	e067      	b.n	8013586 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	785b      	ldrb	r3, [r3, #1]
 80134ba:	2b0b      	cmp	r3, #11
 80134bc:	d851      	bhi.n	8013562 <USBD_CDC_Setup+0x18a>
 80134be:	a201      	add	r2, pc, #4	@ (adr r2, 80134c4 <USBD_CDC_Setup+0xec>)
 80134c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134c4:	080134f5 	.word	0x080134f5
 80134c8:	08013571 	.word	0x08013571
 80134cc:	08013563 	.word	0x08013563
 80134d0:	08013563 	.word	0x08013563
 80134d4:	08013563 	.word	0x08013563
 80134d8:	08013563 	.word	0x08013563
 80134dc:	08013563 	.word	0x08013563
 80134e0:	08013563 	.word	0x08013563
 80134e4:	08013563 	.word	0x08013563
 80134e8:	08013563 	.word	0x08013563
 80134ec:	0801351f 	.word	0x0801351f
 80134f0:	08013549 	.word	0x08013549
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134fa:	b2db      	uxtb	r3, r3
 80134fc:	2b03      	cmp	r3, #3
 80134fe:	d107      	bne.n	8013510 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013500:	f107 030a 	add.w	r3, r7, #10
 8013504:	2202      	movs	r2, #2
 8013506:	4619      	mov	r1, r3
 8013508:	6878      	ldr	r0, [r7, #4]
 801350a:	f001 fcd5 	bl	8014eb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801350e:	e032      	b.n	8013576 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013510:	6839      	ldr	r1, [r7, #0]
 8013512:	6878      	ldr	r0, [r7, #4]
 8013514:	f001 fc53 	bl	8014dbe <USBD_CtlError>
            ret = USBD_FAIL;
 8013518:	2303      	movs	r3, #3
 801351a:	75fb      	strb	r3, [r7, #23]
          break;
 801351c:	e02b      	b.n	8013576 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013524:	b2db      	uxtb	r3, r3
 8013526:	2b03      	cmp	r3, #3
 8013528:	d107      	bne.n	801353a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801352a:	f107 030d 	add.w	r3, r7, #13
 801352e:	2201      	movs	r2, #1
 8013530:	4619      	mov	r1, r3
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f001 fcc0 	bl	8014eb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013538:	e01d      	b.n	8013576 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801353a:	6839      	ldr	r1, [r7, #0]
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f001 fc3e 	bl	8014dbe <USBD_CtlError>
            ret = USBD_FAIL;
 8013542:	2303      	movs	r3, #3
 8013544:	75fb      	strb	r3, [r7, #23]
          break;
 8013546:	e016      	b.n	8013576 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801354e:	b2db      	uxtb	r3, r3
 8013550:	2b03      	cmp	r3, #3
 8013552:	d00f      	beq.n	8013574 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013554:	6839      	ldr	r1, [r7, #0]
 8013556:	6878      	ldr	r0, [r7, #4]
 8013558:	f001 fc31 	bl	8014dbe <USBD_CtlError>
            ret = USBD_FAIL;
 801355c:	2303      	movs	r3, #3
 801355e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013560:	e008      	b.n	8013574 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013562:	6839      	ldr	r1, [r7, #0]
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f001 fc2a 	bl	8014dbe <USBD_CtlError>
          ret = USBD_FAIL;
 801356a:	2303      	movs	r3, #3
 801356c:	75fb      	strb	r3, [r7, #23]
          break;
 801356e:	e002      	b.n	8013576 <USBD_CDC_Setup+0x19e>
          break;
 8013570:	bf00      	nop
 8013572:	e008      	b.n	8013586 <USBD_CDC_Setup+0x1ae>
          break;
 8013574:	bf00      	nop
      }
      break;
 8013576:	e006      	b.n	8013586 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013578:	6839      	ldr	r1, [r7, #0]
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f001 fc1f 	bl	8014dbe <USBD_CtlError>
      ret = USBD_FAIL;
 8013580:	2303      	movs	r3, #3
 8013582:	75fb      	strb	r3, [r7, #23]
      break;
 8013584:	bf00      	nop
  }

  return (uint8_t)ret;
 8013586:	7dfb      	ldrb	r3, [r7, #23]
}
 8013588:	4618      	mov	r0, r3
 801358a:	3718      	adds	r7, #24
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}

08013590 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b084      	sub	sp, #16
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
 8013598:	460b      	mov	r3, r1
 801359a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80135a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	32b0      	adds	r2, #176	@ 0xb0
 80135ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d101      	bne.n	80135ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80135b6:	2303      	movs	r3, #3
 80135b8:	e065      	b.n	8013686 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	32b0      	adds	r2, #176	@ 0xb0
 80135c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80135ca:	78fb      	ldrb	r3, [r7, #3]
 80135cc:	f003 020f 	and.w	r2, r3, #15
 80135d0:	6879      	ldr	r1, [r7, #4]
 80135d2:	4613      	mov	r3, r2
 80135d4:	009b      	lsls	r3, r3, #2
 80135d6:	4413      	add	r3, r2
 80135d8:	009b      	lsls	r3, r3, #2
 80135da:	440b      	add	r3, r1
 80135dc:	3318      	adds	r3, #24
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d02f      	beq.n	8013644 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80135e4:	78fb      	ldrb	r3, [r7, #3]
 80135e6:	f003 020f 	and.w	r2, r3, #15
 80135ea:	6879      	ldr	r1, [r7, #4]
 80135ec:	4613      	mov	r3, r2
 80135ee:	009b      	lsls	r3, r3, #2
 80135f0:	4413      	add	r3, r2
 80135f2:	009b      	lsls	r3, r3, #2
 80135f4:	440b      	add	r3, r1
 80135f6:	3318      	adds	r3, #24
 80135f8:	681a      	ldr	r2, [r3, #0]
 80135fa:	78fb      	ldrb	r3, [r7, #3]
 80135fc:	f003 010f 	and.w	r1, r3, #15
 8013600:	68f8      	ldr	r0, [r7, #12]
 8013602:	460b      	mov	r3, r1
 8013604:	009b      	lsls	r3, r3, #2
 8013606:	440b      	add	r3, r1
 8013608:	00db      	lsls	r3, r3, #3
 801360a:	4403      	add	r3, r0
 801360c:	3320      	adds	r3, #32
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	fbb2 f1f3 	udiv	r1, r2, r3
 8013614:	fb01 f303 	mul.w	r3, r1, r3
 8013618:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801361a:	2b00      	cmp	r3, #0
 801361c:	d112      	bne.n	8013644 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801361e:	78fb      	ldrb	r3, [r7, #3]
 8013620:	f003 020f 	and.w	r2, r3, #15
 8013624:	6879      	ldr	r1, [r7, #4]
 8013626:	4613      	mov	r3, r2
 8013628:	009b      	lsls	r3, r3, #2
 801362a:	4413      	add	r3, r2
 801362c:	009b      	lsls	r3, r3, #2
 801362e:	440b      	add	r3, r1
 8013630:	3318      	adds	r3, #24
 8013632:	2200      	movs	r2, #0
 8013634:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013636:	78f9      	ldrb	r1, [r7, #3]
 8013638:	2300      	movs	r3, #0
 801363a:	2200      	movs	r2, #0
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	f002 fe30 	bl	80162a2 <USBD_LL_Transmit>
 8013642:	e01f      	b.n	8013684 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	2200      	movs	r2, #0
 8013648:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013652:	687a      	ldr	r2, [r7, #4]
 8013654:	33b0      	adds	r3, #176	@ 0xb0
 8013656:	009b      	lsls	r3, r3, #2
 8013658:	4413      	add	r3, r2
 801365a:	685b      	ldr	r3, [r3, #4]
 801365c:	691b      	ldr	r3, [r3, #16]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d010      	beq.n	8013684 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013668:	687a      	ldr	r2, [r7, #4]
 801366a:	33b0      	adds	r3, #176	@ 0xb0
 801366c:	009b      	lsls	r3, r3, #2
 801366e:	4413      	add	r3, r2
 8013670:	685b      	ldr	r3, [r3, #4]
 8013672:	691b      	ldr	r3, [r3, #16]
 8013674:	68ba      	ldr	r2, [r7, #8]
 8013676:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801367a:	68ba      	ldr	r2, [r7, #8]
 801367c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8013680:	78fa      	ldrb	r2, [r7, #3]
 8013682:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013684:	2300      	movs	r3, #0
}
 8013686:	4618      	mov	r0, r3
 8013688:	3710      	adds	r7, #16
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}

0801368e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801368e:	b580      	push	{r7, lr}
 8013690:	b084      	sub	sp, #16
 8013692:	af00      	add	r7, sp, #0
 8013694:	6078      	str	r0, [r7, #4]
 8013696:	460b      	mov	r3, r1
 8013698:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	32b0      	adds	r2, #176	@ 0xb0
 80136a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	32b0      	adds	r2, #176	@ 0xb0
 80136b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d101      	bne.n	80136c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80136bc:	2303      	movs	r3, #3
 80136be:	e01a      	b.n	80136f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80136c0:	78fb      	ldrb	r3, [r7, #3]
 80136c2:	4619      	mov	r1, r3
 80136c4:	6878      	ldr	r0, [r7, #4]
 80136c6:	f002 fe2e 	bl	8016326 <USBD_LL_GetRxDataSize>
 80136ca:	4602      	mov	r2, r0
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80136d8:	687a      	ldr	r2, [r7, #4]
 80136da:	33b0      	adds	r3, #176	@ 0xb0
 80136dc:	009b      	lsls	r3, r3, #2
 80136de:	4413      	add	r3, r2
 80136e0:	685b      	ldr	r3, [r3, #4]
 80136e2:	68db      	ldr	r3, [r3, #12]
 80136e4:	68fa      	ldr	r2, [r7, #12]
 80136e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80136ea:	68fa      	ldr	r2, [r7, #12]
 80136ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80136f0:	4611      	mov	r1, r2
 80136f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80136f4:	2300      	movs	r3, #0
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3710      	adds	r7, #16
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}

080136fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80136fe:	b580      	push	{r7, lr}
 8013700:	b084      	sub	sp, #16
 8013702:	af00      	add	r7, sp, #0
 8013704:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	32b0      	adds	r2, #176	@ 0xb0
 8013710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013714:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d101      	bne.n	8013720 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801371c:	2303      	movs	r3, #3
 801371e:	e024      	b.n	801376a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013726:	687a      	ldr	r2, [r7, #4]
 8013728:	33b0      	adds	r3, #176	@ 0xb0
 801372a:	009b      	lsls	r3, r3, #2
 801372c:	4413      	add	r3, r2
 801372e:	685b      	ldr	r3, [r3, #4]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d019      	beq.n	8013768 <USBD_CDC_EP0_RxReady+0x6a>
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801373a:	2bff      	cmp	r3, #255	@ 0xff
 801373c:	d014      	beq.n	8013768 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013744:	687a      	ldr	r2, [r7, #4]
 8013746:	33b0      	adds	r3, #176	@ 0xb0
 8013748:	009b      	lsls	r3, r3, #2
 801374a:	4413      	add	r3, r2
 801374c:	685b      	ldr	r3, [r3, #4]
 801374e:	689b      	ldr	r3, [r3, #8]
 8013750:	68fa      	ldr	r2, [r7, #12]
 8013752:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8013756:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013758:	68fa      	ldr	r2, [r7, #12]
 801375a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801375e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	22ff      	movs	r2, #255	@ 0xff
 8013764:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8013768:	2300      	movs	r3, #0
}
 801376a:	4618      	mov	r0, r3
 801376c:	3710      	adds	r7, #16
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
	...

08013774 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b086      	sub	sp, #24
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801377c:	2182      	movs	r1, #130	@ 0x82
 801377e:	4818      	ldr	r0, [pc, #96]	@ (80137e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013780:	f000 fcbd 	bl	80140fe <USBD_GetEpDesc>
 8013784:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013786:	2101      	movs	r1, #1
 8013788:	4815      	ldr	r0, [pc, #84]	@ (80137e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801378a:	f000 fcb8 	bl	80140fe <USBD_GetEpDesc>
 801378e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013790:	2181      	movs	r1, #129	@ 0x81
 8013792:	4813      	ldr	r0, [pc, #76]	@ (80137e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013794:	f000 fcb3 	bl	80140fe <USBD_GetEpDesc>
 8013798:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d002      	beq.n	80137a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	2210      	movs	r2, #16
 80137a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d006      	beq.n	80137ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	2200      	movs	r2, #0
 80137b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80137b4:	711a      	strb	r2, [r3, #4]
 80137b6:	2200      	movs	r2, #0
 80137b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d006      	beq.n	80137ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	2200      	movs	r2, #0
 80137c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80137c8:	711a      	strb	r2, [r3, #4]
 80137ca:	2200      	movs	r2, #0
 80137cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	2243      	movs	r2, #67	@ 0x43
 80137d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80137d4:	4b02      	ldr	r3, [pc, #8]	@ (80137e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3718      	adds	r7, #24
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
 80137de:	bf00      	nop
 80137e0:	20000080 	.word	0x20000080

080137e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b086      	sub	sp, #24
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80137ec:	2182      	movs	r1, #130	@ 0x82
 80137ee:	4818      	ldr	r0, [pc, #96]	@ (8013850 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80137f0:	f000 fc85 	bl	80140fe <USBD_GetEpDesc>
 80137f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80137f6:	2101      	movs	r1, #1
 80137f8:	4815      	ldr	r0, [pc, #84]	@ (8013850 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80137fa:	f000 fc80 	bl	80140fe <USBD_GetEpDesc>
 80137fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013800:	2181      	movs	r1, #129	@ 0x81
 8013802:	4813      	ldr	r0, [pc, #76]	@ (8013850 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013804:	f000 fc7b 	bl	80140fe <USBD_GetEpDesc>
 8013808:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801380a:	697b      	ldr	r3, [r7, #20]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d002      	beq.n	8013816 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013810:	697b      	ldr	r3, [r7, #20]
 8013812:	2210      	movs	r2, #16
 8013814:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013816:	693b      	ldr	r3, [r7, #16]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d006      	beq.n	801382a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801381c:	693b      	ldr	r3, [r7, #16]
 801381e:	2200      	movs	r2, #0
 8013820:	711a      	strb	r2, [r3, #4]
 8013822:	2200      	movs	r2, #0
 8013824:	f042 0202 	orr.w	r2, r2, #2
 8013828:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d006      	beq.n	801383e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	2200      	movs	r2, #0
 8013834:	711a      	strb	r2, [r3, #4]
 8013836:	2200      	movs	r2, #0
 8013838:	f042 0202 	orr.w	r2, r2, #2
 801383c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2243      	movs	r2, #67	@ 0x43
 8013842:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013844:	4b02      	ldr	r3, [pc, #8]	@ (8013850 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8013846:	4618      	mov	r0, r3
 8013848:	3718      	adds	r7, #24
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
 801384e:	bf00      	nop
 8013850:	20000080 	.word	0x20000080

08013854 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b086      	sub	sp, #24
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801385c:	2182      	movs	r1, #130	@ 0x82
 801385e:	4818      	ldr	r0, [pc, #96]	@ (80138c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013860:	f000 fc4d 	bl	80140fe <USBD_GetEpDesc>
 8013864:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013866:	2101      	movs	r1, #1
 8013868:	4815      	ldr	r0, [pc, #84]	@ (80138c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801386a:	f000 fc48 	bl	80140fe <USBD_GetEpDesc>
 801386e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013870:	2181      	movs	r1, #129	@ 0x81
 8013872:	4813      	ldr	r0, [pc, #76]	@ (80138c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013874:	f000 fc43 	bl	80140fe <USBD_GetEpDesc>
 8013878:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d002      	beq.n	8013886 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	2210      	movs	r2, #16
 8013884:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013886:	693b      	ldr	r3, [r7, #16]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d006      	beq.n	801389a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	2200      	movs	r2, #0
 8013890:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013894:	711a      	strb	r2, [r3, #4]
 8013896:	2200      	movs	r2, #0
 8013898:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d006      	beq.n	80138ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	2200      	movs	r2, #0
 80138a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80138a8:	711a      	strb	r2, [r3, #4]
 80138aa:	2200      	movs	r2, #0
 80138ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	2243      	movs	r2, #67	@ 0x43
 80138b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80138b4:	4b02      	ldr	r3, [pc, #8]	@ (80138c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	3718      	adds	r7, #24
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}
 80138be:	bf00      	nop
 80138c0:	20000080 	.word	0x20000080

080138c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80138c4:	b480      	push	{r7}
 80138c6:	b083      	sub	sp, #12
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	220a      	movs	r2, #10
 80138d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80138d2:	4b03      	ldr	r3, [pc, #12]	@ (80138e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	370c      	adds	r7, #12
 80138d8:	46bd      	mov	sp, r7
 80138da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138de:	4770      	bx	lr
 80138e0:	2000003c 	.word	0x2000003c

080138e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80138e4:	b480      	push	{r7}
 80138e6:	b083      	sub	sp, #12
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
 80138ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80138ee:	683b      	ldr	r3, [r7, #0]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d101      	bne.n	80138f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80138f4:	2303      	movs	r3, #3
 80138f6:	e009      	b.n	801390c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80138fe:	687a      	ldr	r2, [r7, #4]
 8013900:	33b0      	adds	r3, #176	@ 0xb0
 8013902:	009b      	lsls	r3, r3, #2
 8013904:	4413      	add	r3, r2
 8013906:	683a      	ldr	r2, [r7, #0]
 8013908:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801390a:	2300      	movs	r3, #0
}
 801390c:	4618      	mov	r0, r3
 801390e:	370c      	adds	r7, #12
 8013910:	46bd      	mov	sp, r7
 8013912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013916:	4770      	bx	lr

08013918 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013918:	b480      	push	{r7}
 801391a:	b087      	sub	sp, #28
 801391c:	af00      	add	r7, sp, #0
 801391e:	60f8      	str	r0, [r7, #12]
 8013920:	60b9      	str	r1, [r7, #8]
 8013922:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	32b0      	adds	r2, #176	@ 0xb0
 801392e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013932:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d101      	bne.n	801393e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801393a:	2303      	movs	r3, #3
 801393c:	e008      	b.n	8013950 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	68ba      	ldr	r2, [r7, #8]
 8013942:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	687a      	ldr	r2, [r7, #4]
 801394a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801394e:	2300      	movs	r3, #0
}
 8013950:	4618      	mov	r0, r3
 8013952:	371c      	adds	r7, #28
 8013954:	46bd      	mov	sp, r7
 8013956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395a:	4770      	bx	lr

0801395c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801395c:	b480      	push	{r7}
 801395e:	b085      	sub	sp, #20
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
 8013964:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	32b0      	adds	r2, #176	@ 0xb0
 8013970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013974:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d101      	bne.n	8013980 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801397c:	2303      	movs	r3, #3
 801397e:	e004      	b.n	801398a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	683a      	ldr	r2, [r7, #0]
 8013984:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8013988:	2300      	movs	r3, #0
}
 801398a:	4618      	mov	r0, r3
 801398c:	3714      	adds	r7, #20
 801398e:	46bd      	mov	sp, r7
 8013990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013994:	4770      	bx	lr
	...

08013998 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b084      	sub	sp, #16
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	32b0      	adds	r2, #176	@ 0xb0
 80139aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139ae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80139b0:	2301      	movs	r3, #1
 80139b2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d101      	bne.n	80139be <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80139ba:	2303      	movs	r3, #3
 80139bc:	e025      	b.n	8013a0a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80139be:	68bb      	ldr	r3, [r7, #8]
 80139c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d11f      	bne.n	8013a08 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	2201      	movs	r2, #1
 80139cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80139d0:	4b10      	ldr	r3, [pc, #64]	@ (8013a14 <USBD_CDC_TransmitPacket+0x7c>)
 80139d2:	781b      	ldrb	r3, [r3, #0]
 80139d4:	f003 020f 	and.w	r2, r3, #15
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	4613      	mov	r3, r2
 80139e2:	009b      	lsls	r3, r3, #2
 80139e4:	4413      	add	r3, r2
 80139e6:	009b      	lsls	r3, r3, #2
 80139e8:	4403      	add	r3, r0
 80139ea:	3318      	adds	r3, #24
 80139ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80139ee:	4b09      	ldr	r3, [pc, #36]	@ (8013a14 <USBD_CDC_TransmitPacket+0x7c>)
 80139f0:	7819      	ldrb	r1, [r3, #0]
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	f002 fc4f 	bl	80162a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013a04:	2300      	movs	r3, #0
 8013a06:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	3710      	adds	r7, #16
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd80      	pop	{r7, pc}
 8013a12:	bf00      	nop
 8013a14:	200000c3 	.word	0x200000c3

08013a18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b084      	sub	sp, #16
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	32b0      	adds	r2, #176	@ 0xb0
 8013a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a2e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	32b0      	adds	r2, #176	@ 0xb0
 8013a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d101      	bne.n	8013a46 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013a42:	2303      	movs	r3, #3
 8013a44:	e018      	b.n	8013a78 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	7c1b      	ldrb	r3, [r3, #16]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d10a      	bne.n	8013a64 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8013a80 <USBD_CDC_ReceivePacket+0x68>)
 8013a50:	7819      	ldrb	r1, [r3, #0]
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013a58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f002 fc41 	bl	80162e4 <USBD_LL_PrepareReceive>
 8013a62:	e008      	b.n	8013a76 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013a64:	4b06      	ldr	r3, [pc, #24]	@ (8013a80 <USBD_CDC_ReceivePacket+0x68>)
 8013a66:	7819      	ldrb	r1, [r3, #0]
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013a6e:	2340      	movs	r3, #64	@ 0x40
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f002 fc37 	bl	80162e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013a76:	2300      	movs	r3, #0
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3710      	adds	r7, #16
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}
 8013a80:	200000c4 	.word	0x200000c4

08013a84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b086      	sub	sp, #24
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	60f8      	str	r0, [r7, #12]
 8013a8c:	60b9      	str	r1, [r7, #8]
 8013a8e:	4613      	mov	r3, r2
 8013a90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d101      	bne.n	8013a9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013a98:	2303      	movs	r3, #3
 8013a9a:	e01f      	b.n	8013adc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	2200      	movs	r2, #0
 8013ab0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d003      	beq.n	8013ac2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	68ba      	ldr	r2, [r7, #8]
 8013abe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	2201      	movs	r2, #1
 8013ac6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	79fa      	ldrb	r2, [r7, #7]
 8013ace:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013ad0:	68f8      	ldr	r0, [r7, #12]
 8013ad2:	f002 fa9b 	bl	801600c <USBD_LL_Init>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	3718      	adds	r7, #24
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}

08013ae4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b084      	sub	sp, #16
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013aee:	2300      	movs	r3, #0
 8013af0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d101      	bne.n	8013afc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013af8:	2303      	movs	r3, #3
 8013afa:	e025      	b.n	8013b48 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	683a      	ldr	r2, [r7, #0]
 8013b00:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	32ae      	adds	r2, #174	@ 0xae
 8013b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d00f      	beq.n	8013b38 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	32ae      	adds	r2, #174	@ 0xae
 8013b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b28:	f107 020e 	add.w	r2, r7, #14
 8013b2c:	4610      	mov	r0, r2
 8013b2e:	4798      	blx	r3
 8013b30:	4602      	mov	r2, r0
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013b3e:	1c5a      	adds	r2, r3, #1
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8013b46:	2300      	movs	r3, #0
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3710      	adds	r7, #16
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}

08013b50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b082      	sub	sp, #8
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f002 fab9 	bl	80160d0 <USBD_LL_Start>
 8013b5e:	4603      	mov	r3, r0
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3708      	adds	r7, #8
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}

08013b68 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b083      	sub	sp, #12
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013b70:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	370c      	adds	r7, #12
 8013b76:	46bd      	mov	sp, r7
 8013b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7c:	4770      	bx	lr

08013b7e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013b7e:	b580      	push	{r7, lr}
 8013b80:	b084      	sub	sp, #16
 8013b82:	af00      	add	r7, sp, #0
 8013b84:	6078      	str	r0, [r7, #4]
 8013b86:	460b      	mov	r3, r1
 8013b88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d009      	beq.n	8013bac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	78fa      	ldrb	r2, [r7, #3]
 8013ba2:	4611      	mov	r1, r2
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	4798      	blx	r3
 8013ba8:	4603      	mov	r3, r0
 8013baa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bae:	4618      	mov	r0, r3
 8013bb0:	3710      	adds	r7, #16
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}

08013bb6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013bb6:	b580      	push	{r7, lr}
 8013bb8:	b084      	sub	sp, #16
 8013bba:	af00      	add	r7, sp, #0
 8013bbc:	6078      	str	r0, [r7, #4]
 8013bbe:	460b      	mov	r3, r1
 8013bc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013bcc:	685b      	ldr	r3, [r3, #4]
 8013bce:	78fa      	ldrb	r2, [r7, #3]
 8013bd0:	4611      	mov	r1, r2
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	4798      	blx	r3
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d001      	beq.n	8013be0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013bdc:	2303      	movs	r3, #3
 8013bde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013be2:	4618      	mov	r0, r3
 8013be4:	3710      	adds	r7, #16
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd80      	pop	{r7, pc}

08013bea <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013bea:	b580      	push	{r7, lr}
 8013bec:	b084      	sub	sp, #16
 8013bee:	af00      	add	r7, sp, #0
 8013bf0:	6078      	str	r0, [r7, #4]
 8013bf2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013bfa:	6839      	ldr	r1, [r7, #0]
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f001 f8a4 	bl	8014d4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	2201      	movs	r2, #1
 8013c06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013c10:	461a      	mov	r2, r3
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013c1e:	f003 031f 	and.w	r3, r3, #31
 8013c22:	2b02      	cmp	r3, #2
 8013c24:	d01a      	beq.n	8013c5c <USBD_LL_SetupStage+0x72>
 8013c26:	2b02      	cmp	r3, #2
 8013c28:	d822      	bhi.n	8013c70 <USBD_LL_SetupStage+0x86>
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d002      	beq.n	8013c34 <USBD_LL_SetupStage+0x4a>
 8013c2e:	2b01      	cmp	r3, #1
 8013c30:	d00a      	beq.n	8013c48 <USBD_LL_SetupStage+0x5e>
 8013c32:	e01d      	b.n	8013c70 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013c3a:	4619      	mov	r1, r3
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	f000 fad1 	bl	80141e4 <USBD_StdDevReq>
 8013c42:	4603      	mov	r3, r0
 8013c44:	73fb      	strb	r3, [r7, #15]
      break;
 8013c46:	e020      	b.n	8013c8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013c4e:	4619      	mov	r1, r3
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f000 fb39 	bl	80142c8 <USBD_StdItfReq>
 8013c56:	4603      	mov	r3, r0
 8013c58:	73fb      	strb	r3, [r7, #15]
      break;
 8013c5a:	e016      	b.n	8013c8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013c62:	4619      	mov	r1, r3
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f000 fb9b 	bl	80143a0 <USBD_StdEPReq>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8013c6e:	e00c      	b.n	8013c8a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013c76:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013c7a:	b2db      	uxtb	r3, r3
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f002 fa86 	bl	8016190 <USBD_LL_StallEP>
 8013c84:	4603      	mov	r3, r0
 8013c86:	73fb      	strb	r3, [r7, #15]
      break;
 8013c88:	bf00      	nop
  }

  return ret;
 8013c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	3710      	adds	r7, #16
 8013c90:	46bd      	mov	sp, r7
 8013c92:	bd80      	pop	{r7, pc}

08013c94 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b086      	sub	sp, #24
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	60f8      	str	r0, [r7, #12]
 8013c9c:	460b      	mov	r3, r1
 8013c9e:	607a      	str	r2, [r7, #4]
 8013ca0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013ca6:	7afb      	ldrb	r3, [r7, #11]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d16e      	bne.n	8013d8a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013cb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013cba:	2b03      	cmp	r3, #3
 8013cbc:	f040 8098 	bne.w	8013df0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013cc0:	693b      	ldr	r3, [r7, #16]
 8013cc2:	689a      	ldr	r2, [r3, #8]
 8013cc4:	693b      	ldr	r3, [r7, #16]
 8013cc6:	68db      	ldr	r3, [r3, #12]
 8013cc8:	429a      	cmp	r2, r3
 8013cca:	d913      	bls.n	8013cf4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013ccc:	693b      	ldr	r3, [r7, #16]
 8013cce:	689a      	ldr	r2, [r3, #8]
 8013cd0:	693b      	ldr	r3, [r7, #16]
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	1ad2      	subs	r2, r2, r3
 8013cd6:	693b      	ldr	r3, [r7, #16]
 8013cd8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013cda:	693b      	ldr	r3, [r7, #16]
 8013cdc:	68da      	ldr	r2, [r3, #12]
 8013cde:	693b      	ldr	r3, [r7, #16]
 8013ce0:	689b      	ldr	r3, [r3, #8]
 8013ce2:	4293      	cmp	r3, r2
 8013ce4:	bf28      	it	cs
 8013ce6:	4613      	movcs	r3, r2
 8013ce8:	461a      	mov	r2, r3
 8013cea:	6879      	ldr	r1, [r7, #4]
 8013cec:	68f8      	ldr	r0, [r7, #12]
 8013cee:	f001 f92c 	bl	8014f4a <USBD_CtlContinueRx>
 8013cf2:	e07d      	b.n	8013df0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013cfa:	f003 031f 	and.w	r3, r3, #31
 8013cfe:	2b02      	cmp	r3, #2
 8013d00:	d014      	beq.n	8013d2c <USBD_LL_DataOutStage+0x98>
 8013d02:	2b02      	cmp	r3, #2
 8013d04:	d81d      	bhi.n	8013d42 <USBD_LL_DataOutStage+0xae>
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d002      	beq.n	8013d10 <USBD_LL_DataOutStage+0x7c>
 8013d0a:	2b01      	cmp	r3, #1
 8013d0c:	d003      	beq.n	8013d16 <USBD_LL_DataOutStage+0x82>
 8013d0e:	e018      	b.n	8013d42 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013d10:	2300      	movs	r3, #0
 8013d12:	75bb      	strb	r3, [r7, #22]
            break;
 8013d14:	e018      	b.n	8013d48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013d1c:	b2db      	uxtb	r3, r3
 8013d1e:	4619      	mov	r1, r3
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	f000 f9d2 	bl	80140ca <USBD_CoreFindIF>
 8013d26:	4603      	mov	r3, r0
 8013d28:	75bb      	strb	r3, [r7, #22]
            break;
 8013d2a:	e00d      	b.n	8013d48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013d32:	b2db      	uxtb	r3, r3
 8013d34:	4619      	mov	r1, r3
 8013d36:	68f8      	ldr	r0, [r7, #12]
 8013d38:	f000 f9d4 	bl	80140e4 <USBD_CoreFindEP>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	75bb      	strb	r3, [r7, #22]
            break;
 8013d40:	e002      	b.n	8013d48 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013d42:	2300      	movs	r3, #0
 8013d44:	75bb      	strb	r3, [r7, #22]
            break;
 8013d46:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013d48:	7dbb      	ldrb	r3, [r7, #22]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d119      	bne.n	8013d82 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d54:	b2db      	uxtb	r3, r3
 8013d56:	2b03      	cmp	r3, #3
 8013d58:	d113      	bne.n	8013d82 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013d5a:	7dba      	ldrb	r2, [r7, #22]
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	32ae      	adds	r2, #174	@ 0xae
 8013d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d64:	691b      	ldr	r3, [r3, #16]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d00b      	beq.n	8013d82 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013d6a:	7dba      	ldrb	r2, [r7, #22]
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013d72:	7dba      	ldrb	r2, [r7, #22]
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	32ae      	adds	r2, #174	@ 0xae
 8013d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d7c:	691b      	ldr	r3, [r3, #16]
 8013d7e:	68f8      	ldr	r0, [r7, #12]
 8013d80:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013d82:	68f8      	ldr	r0, [r7, #12]
 8013d84:	f001 f8f2 	bl	8014f6c <USBD_CtlSendStatus>
 8013d88:	e032      	b.n	8013df0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013d8a:	7afb      	ldrb	r3, [r7, #11]
 8013d8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013d90:	b2db      	uxtb	r3, r3
 8013d92:	4619      	mov	r1, r3
 8013d94:	68f8      	ldr	r0, [r7, #12]
 8013d96:	f000 f9a5 	bl	80140e4 <USBD_CoreFindEP>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013d9e:	7dbb      	ldrb	r3, [r7, #22]
 8013da0:	2bff      	cmp	r3, #255	@ 0xff
 8013da2:	d025      	beq.n	8013df0 <USBD_LL_DataOutStage+0x15c>
 8013da4:	7dbb      	ldrb	r3, [r7, #22]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d122      	bne.n	8013df0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013db0:	b2db      	uxtb	r3, r3
 8013db2:	2b03      	cmp	r3, #3
 8013db4:	d117      	bne.n	8013de6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013db6:	7dba      	ldrb	r2, [r7, #22]
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	32ae      	adds	r2, #174	@ 0xae
 8013dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dc0:	699b      	ldr	r3, [r3, #24]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d00f      	beq.n	8013de6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013dc6:	7dba      	ldrb	r2, [r7, #22]
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013dce:	7dba      	ldrb	r2, [r7, #22]
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	32ae      	adds	r2, #174	@ 0xae
 8013dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dd8:	699b      	ldr	r3, [r3, #24]
 8013dda:	7afa      	ldrb	r2, [r7, #11]
 8013ddc:	4611      	mov	r1, r2
 8013dde:	68f8      	ldr	r0, [r7, #12]
 8013de0:	4798      	blx	r3
 8013de2:	4603      	mov	r3, r0
 8013de4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013de6:	7dfb      	ldrb	r3, [r7, #23]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d001      	beq.n	8013df0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013dec:	7dfb      	ldrb	r3, [r7, #23]
 8013dee:	e000      	b.n	8013df2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013df0:	2300      	movs	r3, #0
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	3718      	adds	r7, #24
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}

08013dfa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013dfa:	b580      	push	{r7, lr}
 8013dfc:	b086      	sub	sp, #24
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	60f8      	str	r0, [r7, #12]
 8013e02:	460b      	mov	r3, r1
 8013e04:	607a      	str	r2, [r7, #4]
 8013e06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013e08:	7afb      	ldrb	r3, [r7, #11]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d16f      	bne.n	8013eee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	3314      	adds	r3, #20
 8013e12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013e1a:	2b02      	cmp	r3, #2
 8013e1c:	d15a      	bne.n	8013ed4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	689a      	ldr	r2, [r3, #8]
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	68db      	ldr	r3, [r3, #12]
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d914      	bls.n	8013e54 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	689a      	ldr	r2, [r3, #8]
 8013e2e:	693b      	ldr	r3, [r7, #16]
 8013e30:	68db      	ldr	r3, [r3, #12]
 8013e32:	1ad2      	subs	r2, r2, r3
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013e38:	693b      	ldr	r3, [r7, #16]
 8013e3a:	689b      	ldr	r3, [r3, #8]
 8013e3c:	461a      	mov	r2, r3
 8013e3e:	6879      	ldr	r1, [r7, #4]
 8013e40:	68f8      	ldr	r0, [r7, #12]
 8013e42:	f001 f854 	bl	8014eee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e46:	2300      	movs	r3, #0
 8013e48:	2200      	movs	r2, #0
 8013e4a:	2100      	movs	r1, #0
 8013e4c:	68f8      	ldr	r0, [r7, #12]
 8013e4e:	f002 fa49 	bl	80162e4 <USBD_LL_PrepareReceive>
 8013e52:	e03f      	b.n	8013ed4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	68da      	ldr	r2, [r3, #12]
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	689b      	ldr	r3, [r3, #8]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d11c      	bne.n	8013e9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	685a      	ldr	r2, [r3, #4]
 8013e64:	693b      	ldr	r3, [r7, #16]
 8013e66:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	d316      	bcc.n	8013e9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	685a      	ldr	r2, [r3, #4]
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013e76:	429a      	cmp	r2, r3
 8013e78:	d20f      	bcs.n	8013e9a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	2100      	movs	r1, #0
 8013e7e:	68f8      	ldr	r0, [r7, #12]
 8013e80:	f001 f835 	bl	8014eee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	2200      	movs	r2, #0
 8013e88:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	2200      	movs	r2, #0
 8013e90:	2100      	movs	r1, #0
 8013e92:	68f8      	ldr	r0, [r7, #12]
 8013e94:	f002 fa26 	bl	80162e4 <USBD_LL_PrepareReceive>
 8013e98:	e01c      	b.n	8013ed4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ea0:	b2db      	uxtb	r3, r3
 8013ea2:	2b03      	cmp	r3, #3
 8013ea4:	d10f      	bne.n	8013ec6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013eac:	68db      	ldr	r3, [r3, #12]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d009      	beq.n	8013ec6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013ec0:	68db      	ldr	r3, [r3, #12]
 8013ec2:	68f8      	ldr	r0, [r7, #12]
 8013ec4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013ec6:	2180      	movs	r1, #128	@ 0x80
 8013ec8:	68f8      	ldr	r0, [r7, #12]
 8013eca:	f002 f961 	bl	8016190 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013ece:	68f8      	ldr	r0, [r7, #12]
 8013ed0:	f001 f85f 	bl	8014f92 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d03a      	beq.n	8013f54 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013ede:	68f8      	ldr	r0, [r7, #12]
 8013ee0:	f7ff fe42 	bl	8013b68 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013eec:	e032      	b.n	8013f54 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013eee:	7afb      	ldrb	r3, [r7, #11]
 8013ef0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013ef4:	b2db      	uxtb	r3, r3
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	68f8      	ldr	r0, [r7, #12]
 8013efa:	f000 f8f3 	bl	80140e4 <USBD_CoreFindEP>
 8013efe:	4603      	mov	r3, r0
 8013f00:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013f02:	7dfb      	ldrb	r3, [r7, #23]
 8013f04:	2bff      	cmp	r3, #255	@ 0xff
 8013f06:	d025      	beq.n	8013f54 <USBD_LL_DataInStage+0x15a>
 8013f08:	7dfb      	ldrb	r3, [r7, #23]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d122      	bne.n	8013f54 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f14:	b2db      	uxtb	r3, r3
 8013f16:	2b03      	cmp	r3, #3
 8013f18:	d11c      	bne.n	8013f54 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013f1a:	7dfa      	ldrb	r2, [r7, #23]
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	32ae      	adds	r2, #174	@ 0xae
 8013f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f24:	695b      	ldr	r3, [r3, #20]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d014      	beq.n	8013f54 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013f2a:	7dfa      	ldrb	r2, [r7, #23]
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013f32:	7dfa      	ldrb	r2, [r7, #23]
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	32ae      	adds	r2, #174	@ 0xae
 8013f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f3c:	695b      	ldr	r3, [r3, #20]
 8013f3e:	7afa      	ldrb	r2, [r7, #11]
 8013f40:	4611      	mov	r1, r2
 8013f42:	68f8      	ldr	r0, [r7, #12]
 8013f44:	4798      	blx	r3
 8013f46:	4603      	mov	r3, r0
 8013f48:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013f4a:	7dbb      	ldrb	r3, [r7, #22]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d001      	beq.n	8013f54 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013f50:	7dbb      	ldrb	r3, [r7, #22]
 8013f52:	e000      	b.n	8013f56 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013f54:	2300      	movs	r3, #0
}
 8013f56:	4618      	mov	r0, r3
 8013f58:	3718      	adds	r7, #24
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	bd80      	pop	{r7, pc}

08013f5e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013f5e:	b580      	push	{r7, lr}
 8013f60:	b084      	sub	sp, #16
 8013f62:	af00      	add	r7, sp, #0
 8013f64:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f66:	2300      	movs	r3, #0
 8013f68:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	2201      	movs	r2, #1
 8013f6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2200      	movs	r2, #0
 8013f76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2200      	movs	r2, #0
 8013f84:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d014      	beq.n	8013fc4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013fa0:	685b      	ldr	r3, [r3, #4]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d00e      	beq.n	8013fc4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013fac:	685b      	ldr	r3, [r3, #4]
 8013fae:	687a      	ldr	r2, [r7, #4]
 8013fb0:	6852      	ldr	r2, [r2, #4]
 8013fb2:	b2d2      	uxtb	r2, r2
 8013fb4:	4611      	mov	r1, r2
 8013fb6:	6878      	ldr	r0, [r7, #4]
 8013fb8:	4798      	blx	r3
 8013fba:	4603      	mov	r3, r0
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d001      	beq.n	8013fc4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013fc0:	2303      	movs	r3, #3
 8013fc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013fc4:	2340      	movs	r3, #64	@ 0x40
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	2100      	movs	r1, #0
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f002 f89b 	bl	8016106 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	2201      	movs	r2, #1
 8013fd4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	2240      	movs	r2, #64	@ 0x40
 8013fdc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013fe0:	2340      	movs	r3, #64	@ 0x40
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	2180      	movs	r1, #128	@ 0x80
 8013fe6:	6878      	ldr	r0, [r7, #4]
 8013fe8:	f002 f88d 	bl	8016106 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	2201      	movs	r2, #1
 8013ff0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	2240      	movs	r2, #64	@ 0x40
 8013ff6:	621a      	str	r2, [r3, #32]

  return ret;
 8013ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	3710      	adds	r7, #16
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}

08014002 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014002:	b480      	push	{r7}
 8014004:	b083      	sub	sp, #12
 8014006:	af00      	add	r7, sp, #0
 8014008:	6078      	str	r0, [r7, #4]
 801400a:	460b      	mov	r3, r1
 801400c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	78fa      	ldrb	r2, [r7, #3]
 8014012:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014014:	2300      	movs	r3, #0
}
 8014016:	4618      	mov	r0, r3
 8014018:	370c      	adds	r7, #12
 801401a:	46bd      	mov	sp, r7
 801401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014020:	4770      	bx	lr

08014022 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014022:	b480      	push	{r7}
 8014024:	b083      	sub	sp, #12
 8014026:	af00      	add	r7, sp, #0
 8014028:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014030:	b2db      	uxtb	r3, r3
 8014032:	2b04      	cmp	r3, #4
 8014034:	d006      	beq.n	8014044 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801403c:	b2da      	uxtb	r2, r3
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2204      	movs	r2, #4
 8014048:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801404c:	2300      	movs	r3, #0
}
 801404e:	4618      	mov	r0, r3
 8014050:	370c      	adds	r7, #12
 8014052:	46bd      	mov	sp, r7
 8014054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014058:	4770      	bx	lr

0801405a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801405a:	b480      	push	{r7}
 801405c:	b083      	sub	sp, #12
 801405e:	af00      	add	r7, sp, #0
 8014060:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014068:	b2db      	uxtb	r3, r3
 801406a:	2b04      	cmp	r3, #4
 801406c:	d106      	bne.n	801407c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8014074:	b2da      	uxtb	r2, r3
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801407c:	2300      	movs	r3, #0
}
 801407e:	4618      	mov	r0, r3
 8014080:	370c      	adds	r7, #12
 8014082:	46bd      	mov	sp, r7
 8014084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014088:	4770      	bx	lr

0801408a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801408a:	b580      	push	{r7, lr}
 801408c:	b082      	sub	sp, #8
 801408e:	af00      	add	r7, sp, #0
 8014090:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014098:	b2db      	uxtb	r3, r3
 801409a:	2b03      	cmp	r3, #3
 801409c:	d110      	bne.n	80140c0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d00b      	beq.n	80140c0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80140ae:	69db      	ldr	r3, [r3, #28]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d005      	beq.n	80140c0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80140ba:	69db      	ldr	r3, [r3, #28]
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80140c0:	2300      	movs	r3, #0
}
 80140c2:	4618      	mov	r0, r3
 80140c4:	3708      	adds	r7, #8
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}

080140ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80140ca:	b480      	push	{r7}
 80140cc:	b083      	sub	sp, #12
 80140ce:	af00      	add	r7, sp, #0
 80140d0:	6078      	str	r0, [r7, #4]
 80140d2:	460b      	mov	r3, r1
 80140d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80140d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80140d8:	4618      	mov	r0, r3
 80140da:	370c      	adds	r7, #12
 80140dc:	46bd      	mov	sp, r7
 80140de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e2:	4770      	bx	lr

080140e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80140e4:	b480      	push	{r7}
 80140e6:	b083      	sub	sp, #12
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
 80140ec:	460b      	mov	r3, r1
 80140ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80140f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	370c      	adds	r7, #12
 80140f6:	46bd      	mov	sp, r7
 80140f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fc:	4770      	bx	lr

080140fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80140fe:	b580      	push	{r7, lr}
 8014100:	b086      	sub	sp, #24
 8014102:	af00      	add	r7, sp, #0
 8014104:	6078      	str	r0, [r7, #4]
 8014106:	460b      	mov	r3, r1
 8014108:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8014112:	2300      	movs	r3, #0
 8014114:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	885b      	ldrh	r3, [r3, #2]
 801411a:	b29b      	uxth	r3, r3
 801411c:	68fa      	ldr	r2, [r7, #12]
 801411e:	7812      	ldrb	r2, [r2, #0]
 8014120:	4293      	cmp	r3, r2
 8014122:	d91f      	bls.n	8014164 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801412a:	e013      	b.n	8014154 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801412c:	f107 030a 	add.w	r3, r7, #10
 8014130:	4619      	mov	r1, r3
 8014132:	6978      	ldr	r0, [r7, #20]
 8014134:	f000 f81b 	bl	801416e <USBD_GetNextDesc>
 8014138:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801413a:	697b      	ldr	r3, [r7, #20]
 801413c:	785b      	ldrb	r3, [r3, #1]
 801413e:	2b05      	cmp	r3, #5
 8014140:	d108      	bne.n	8014154 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	789b      	ldrb	r3, [r3, #2]
 801414a:	78fa      	ldrb	r2, [r7, #3]
 801414c:	429a      	cmp	r2, r3
 801414e:	d008      	beq.n	8014162 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8014150:	2300      	movs	r3, #0
 8014152:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	885b      	ldrh	r3, [r3, #2]
 8014158:	b29a      	uxth	r2, r3
 801415a:	897b      	ldrh	r3, [r7, #10]
 801415c:	429a      	cmp	r2, r3
 801415e:	d8e5      	bhi.n	801412c <USBD_GetEpDesc+0x2e>
 8014160:	e000      	b.n	8014164 <USBD_GetEpDesc+0x66>
          break;
 8014162:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014164:	693b      	ldr	r3, [r7, #16]
}
 8014166:	4618      	mov	r0, r3
 8014168:	3718      	adds	r7, #24
 801416a:	46bd      	mov	sp, r7
 801416c:	bd80      	pop	{r7, pc}

0801416e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801416e:	b480      	push	{r7}
 8014170:	b085      	sub	sp, #20
 8014172:	af00      	add	r7, sp, #0
 8014174:	6078      	str	r0, [r7, #4]
 8014176:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801417c:	683b      	ldr	r3, [r7, #0]
 801417e:	881b      	ldrh	r3, [r3, #0]
 8014180:	68fa      	ldr	r2, [r7, #12]
 8014182:	7812      	ldrb	r2, [r2, #0]
 8014184:	4413      	add	r3, r2
 8014186:	b29a      	uxth	r2, r3
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	781b      	ldrb	r3, [r3, #0]
 8014190:	461a      	mov	r2, r3
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	4413      	add	r3, r2
 8014196:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014198:	68fb      	ldr	r3, [r7, #12]
}
 801419a:	4618      	mov	r0, r3
 801419c:	3714      	adds	r7, #20
 801419e:	46bd      	mov	sp, r7
 80141a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a4:	4770      	bx	lr

080141a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80141a6:	b480      	push	{r7}
 80141a8:	b087      	sub	sp, #28
 80141aa:	af00      	add	r7, sp, #0
 80141ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80141b2:	697b      	ldr	r3, [r7, #20]
 80141b4:	781b      	ldrb	r3, [r3, #0]
 80141b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80141b8:	697b      	ldr	r3, [r7, #20]
 80141ba:	3301      	adds	r3, #1
 80141bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80141be:	697b      	ldr	r3, [r7, #20]
 80141c0:	781b      	ldrb	r3, [r3, #0]
 80141c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80141c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80141c8:	021b      	lsls	r3, r3, #8
 80141ca:	b21a      	sxth	r2, r3
 80141cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80141d0:	4313      	orrs	r3, r2
 80141d2:	b21b      	sxth	r3, r3
 80141d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80141d6:	89fb      	ldrh	r3, [r7, #14]
}
 80141d8:	4618      	mov	r0, r3
 80141da:	371c      	adds	r7, #28
 80141dc:	46bd      	mov	sp, r7
 80141de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e2:	4770      	bx	lr

080141e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b084      	sub	sp, #16
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
 80141ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80141ee:	2300      	movs	r3, #0
 80141f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	781b      	ldrb	r3, [r3, #0]
 80141f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80141fa:	2b40      	cmp	r3, #64	@ 0x40
 80141fc:	d005      	beq.n	801420a <USBD_StdDevReq+0x26>
 80141fe:	2b40      	cmp	r3, #64	@ 0x40
 8014200:	d857      	bhi.n	80142b2 <USBD_StdDevReq+0xce>
 8014202:	2b00      	cmp	r3, #0
 8014204:	d00f      	beq.n	8014226 <USBD_StdDevReq+0x42>
 8014206:	2b20      	cmp	r3, #32
 8014208:	d153      	bne.n	80142b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	32ae      	adds	r2, #174	@ 0xae
 8014214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014218:	689b      	ldr	r3, [r3, #8]
 801421a:	6839      	ldr	r1, [r7, #0]
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	4798      	blx	r3
 8014220:	4603      	mov	r3, r0
 8014222:	73fb      	strb	r3, [r7, #15]
      break;
 8014224:	e04a      	b.n	80142bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	785b      	ldrb	r3, [r3, #1]
 801422a:	2b09      	cmp	r3, #9
 801422c:	d83b      	bhi.n	80142a6 <USBD_StdDevReq+0xc2>
 801422e:	a201      	add	r2, pc, #4	@ (adr r2, 8014234 <USBD_StdDevReq+0x50>)
 8014230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014234:	08014289 	.word	0x08014289
 8014238:	0801429d 	.word	0x0801429d
 801423c:	080142a7 	.word	0x080142a7
 8014240:	08014293 	.word	0x08014293
 8014244:	080142a7 	.word	0x080142a7
 8014248:	08014267 	.word	0x08014267
 801424c:	0801425d 	.word	0x0801425d
 8014250:	080142a7 	.word	0x080142a7
 8014254:	0801427f 	.word	0x0801427f
 8014258:	08014271 	.word	0x08014271
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801425c:	6839      	ldr	r1, [r7, #0]
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f000 fa3c 	bl	80146dc <USBD_GetDescriptor>
          break;
 8014264:	e024      	b.n	80142b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014266:	6839      	ldr	r1, [r7, #0]
 8014268:	6878      	ldr	r0, [r7, #4]
 801426a:	f000 fbcb 	bl	8014a04 <USBD_SetAddress>
          break;
 801426e:	e01f      	b.n	80142b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014270:	6839      	ldr	r1, [r7, #0]
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f000 fc0a 	bl	8014a8c <USBD_SetConfig>
 8014278:	4603      	mov	r3, r0
 801427a:	73fb      	strb	r3, [r7, #15]
          break;
 801427c:	e018      	b.n	80142b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801427e:	6839      	ldr	r1, [r7, #0]
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f000 fcad 	bl	8014be0 <USBD_GetConfig>
          break;
 8014286:	e013      	b.n	80142b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014288:	6839      	ldr	r1, [r7, #0]
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f000 fcde 	bl	8014c4c <USBD_GetStatus>
          break;
 8014290:	e00e      	b.n	80142b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014292:	6839      	ldr	r1, [r7, #0]
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f000 fd0d 	bl	8014cb4 <USBD_SetFeature>
          break;
 801429a:	e009      	b.n	80142b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801429c:	6839      	ldr	r1, [r7, #0]
 801429e:	6878      	ldr	r0, [r7, #4]
 80142a0:	f000 fd31 	bl	8014d06 <USBD_ClrFeature>
          break;
 80142a4:	e004      	b.n	80142b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80142a6:	6839      	ldr	r1, [r7, #0]
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f000 fd88 	bl	8014dbe <USBD_CtlError>
          break;
 80142ae:	bf00      	nop
      }
      break;
 80142b0:	e004      	b.n	80142bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80142b2:	6839      	ldr	r1, [r7, #0]
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f000 fd82 	bl	8014dbe <USBD_CtlError>
      break;
 80142ba:	bf00      	nop
  }

  return ret;
 80142bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80142be:	4618      	mov	r0, r3
 80142c0:	3710      	adds	r7, #16
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}
 80142c6:	bf00      	nop

080142c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b084      	sub	sp, #16
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80142d2:	2300      	movs	r3, #0
 80142d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80142d6:	683b      	ldr	r3, [r7, #0]
 80142d8:	781b      	ldrb	r3, [r3, #0]
 80142da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80142de:	2b40      	cmp	r3, #64	@ 0x40
 80142e0:	d005      	beq.n	80142ee <USBD_StdItfReq+0x26>
 80142e2:	2b40      	cmp	r3, #64	@ 0x40
 80142e4:	d852      	bhi.n	801438c <USBD_StdItfReq+0xc4>
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d001      	beq.n	80142ee <USBD_StdItfReq+0x26>
 80142ea:	2b20      	cmp	r3, #32
 80142ec:	d14e      	bne.n	801438c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142f4:	b2db      	uxtb	r3, r3
 80142f6:	3b01      	subs	r3, #1
 80142f8:	2b02      	cmp	r3, #2
 80142fa:	d840      	bhi.n	801437e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80142fc:	683b      	ldr	r3, [r7, #0]
 80142fe:	889b      	ldrh	r3, [r3, #4]
 8014300:	b2db      	uxtb	r3, r3
 8014302:	2b01      	cmp	r3, #1
 8014304:	d836      	bhi.n	8014374 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	889b      	ldrh	r3, [r3, #4]
 801430a:	b2db      	uxtb	r3, r3
 801430c:	4619      	mov	r1, r3
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f7ff fedb 	bl	80140ca <USBD_CoreFindIF>
 8014314:	4603      	mov	r3, r0
 8014316:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014318:	7bbb      	ldrb	r3, [r7, #14]
 801431a:	2bff      	cmp	r3, #255	@ 0xff
 801431c:	d01d      	beq.n	801435a <USBD_StdItfReq+0x92>
 801431e:	7bbb      	ldrb	r3, [r7, #14]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d11a      	bne.n	801435a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014324:	7bba      	ldrb	r2, [r7, #14]
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	32ae      	adds	r2, #174	@ 0xae
 801432a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801432e:	689b      	ldr	r3, [r3, #8]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d00f      	beq.n	8014354 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014334:	7bba      	ldrb	r2, [r7, #14]
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801433c:	7bba      	ldrb	r2, [r7, #14]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	32ae      	adds	r2, #174	@ 0xae
 8014342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014346:	689b      	ldr	r3, [r3, #8]
 8014348:	6839      	ldr	r1, [r7, #0]
 801434a:	6878      	ldr	r0, [r7, #4]
 801434c:	4798      	blx	r3
 801434e:	4603      	mov	r3, r0
 8014350:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014352:	e004      	b.n	801435e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014354:	2303      	movs	r3, #3
 8014356:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014358:	e001      	b.n	801435e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801435a:	2303      	movs	r3, #3
 801435c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801435e:	683b      	ldr	r3, [r7, #0]
 8014360:	88db      	ldrh	r3, [r3, #6]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d110      	bne.n	8014388 <USBD_StdItfReq+0xc0>
 8014366:	7bfb      	ldrb	r3, [r7, #15]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d10d      	bne.n	8014388 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f000 fdfd 	bl	8014f6c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014372:	e009      	b.n	8014388 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014374:	6839      	ldr	r1, [r7, #0]
 8014376:	6878      	ldr	r0, [r7, #4]
 8014378:	f000 fd21 	bl	8014dbe <USBD_CtlError>
          break;
 801437c:	e004      	b.n	8014388 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801437e:	6839      	ldr	r1, [r7, #0]
 8014380:	6878      	ldr	r0, [r7, #4]
 8014382:	f000 fd1c 	bl	8014dbe <USBD_CtlError>
          break;
 8014386:	e000      	b.n	801438a <USBD_StdItfReq+0xc2>
          break;
 8014388:	bf00      	nop
      }
      break;
 801438a:	e004      	b.n	8014396 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801438c:	6839      	ldr	r1, [r7, #0]
 801438e:	6878      	ldr	r0, [r7, #4]
 8014390:	f000 fd15 	bl	8014dbe <USBD_CtlError>
      break;
 8014394:	bf00      	nop
  }

  return ret;
 8014396:	7bfb      	ldrb	r3, [r7, #15]
}
 8014398:	4618      	mov	r0, r3
 801439a:	3710      	adds	r7, #16
 801439c:	46bd      	mov	sp, r7
 801439e:	bd80      	pop	{r7, pc}

080143a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b084      	sub	sp, #16
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80143aa:	2300      	movs	r3, #0
 80143ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	889b      	ldrh	r3, [r3, #4]
 80143b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	781b      	ldrb	r3, [r3, #0]
 80143b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80143bc:	2b40      	cmp	r3, #64	@ 0x40
 80143be:	d007      	beq.n	80143d0 <USBD_StdEPReq+0x30>
 80143c0:	2b40      	cmp	r3, #64	@ 0x40
 80143c2:	f200 817f 	bhi.w	80146c4 <USBD_StdEPReq+0x324>
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d02a      	beq.n	8014420 <USBD_StdEPReq+0x80>
 80143ca:	2b20      	cmp	r3, #32
 80143cc:	f040 817a 	bne.w	80146c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80143d0:	7bbb      	ldrb	r3, [r7, #14]
 80143d2:	4619      	mov	r1, r3
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f7ff fe85 	bl	80140e4 <USBD_CoreFindEP>
 80143da:	4603      	mov	r3, r0
 80143dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80143de:	7b7b      	ldrb	r3, [r7, #13]
 80143e0:	2bff      	cmp	r3, #255	@ 0xff
 80143e2:	f000 8174 	beq.w	80146ce <USBD_StdEPReq+0x32e>
 80143e6:	7b7b      	ldrb	r3, [r7, #13]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	f040 8170 	bne.w	80146ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80143ee:	7b7a      	ldrb	r2, [r7, #13]
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80143f6:	7b7a      	ldrb	r2, [r7, #13]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	32ae      	adds	r2, #174	@ 0xae
 80143fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014400:	689b      	ldr	r3, [r3, #8]
 8014402:	2b00      	cmp	r3, #0
 8014404:	f000 8163 	beq.w	80146ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014408:	7b7a      	ldrb	r2, [r7, #13]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	32ae      	adds	r2, #174	@ 0xae
 801440e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014412:	689b      	ldr	r3, [r3, #8]
 8014414:	6839      	ldr	r1, [r7, #0]
 8014416:	6878      	ldr	r0, [r7, #4]
 8014418:	4798      	blx	r3
 801441a:	4603      	mov	r3, r0
 801441c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801441e:	e156      	b.n	80146ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014420:	683b      	ldr	r3, [r7, #0]
 8014422:	785b      	ldrb	r3, [r3, #1]
 8014424:	2b03      	cmp	r3, #3
 8014426:	d008      	beq.n	801443a <USBD_StdEPReq+0x9a>
 8014428:	2b03      	cmp	r3, #3
 801442a:	f300 8145 	bgt.w	80146b8 <USBD_StdEPReq+0x318>
 801442e:	2b00      	cmp	r3, #0
 8014430:	f000 809b 	beq.w	801456a <USBD_StdEPReq+0x1ca>
 8014434:	2b01      	cmp	r3, #1
 8014436:	d03c      	beq.n	80144b2 <USBD_StdEPReq+0x112>
 8014438:	e13e      	b.n	80146b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014440:	b2db      	uxtb	r3, r3
 8014442:	2b02      	cmp	r3, #2
 8014444:	d002      	beq.n	801444c <USBD_StdEPReq+0xac>
 8014446:	2b03      	cmp	r3, #3
 8014448:	d016      	beq.n	8014478 <USBD_StdEPReq+0xd8>
 801444a:	e02c      	b.n	80144a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801444c:	7bbb      	ldrb	r3, [r7, #14]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d00d      	beq.n	801446e <USBD_StdEPReq+0xce>
 8014452:	7bbb      	ldrb	r3, [r7, #14]
 8014454:	2b80      	cmp	r3, #128	@ 0x80
 8014456:	d00a      	beq.n	801446e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014458:	7bbb      	ldrb	r3, [r7, #14]
 801445a:	4619      	mov	r1, r3
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f001 fe97 	bl	8016190 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014462:	2180      	movs	r1, #128	@ 0x80
 8014464:	6878      	ldr	r0, [r7, #4]
 8014466:	f001 fe93 	bl	8016190 <USBD_LL_StallEP>
 801446a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801446c:	e020      	b.n	80144b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801446e:	6839      	ldr	r1, [r7, #0]
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f000 fca4 	bl	8014dbe <USBD_CtlError>
              break;
 8014476:	e01b      	b.n	80144b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	885b      	ldrh	r3, [r3, #2]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d10e      	bne.n	801449e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014480:	7bbb      	ldrb	r3, [r7, #14]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d00b      	beq.n	801449e <USBD_StdEPReq+0xfe>
 8014486:	7bbb      	ldrb	r3, [r7, #14]
 8014488:	2b80      	cmp	r3, #128	@ 0x80
 801448a:	d008      	beq.n	801449e <USBD_StdEPReq+0xfe>
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	88db      	ldrh	r3, [r3, #6]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d104      	bne.n	801449e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014494:	7bbb      	ldrb	r3, [r7, #14]
 8014496:	4619      	mov	r1, r3
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f001 fe79 	bl	8016190 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801449e:	6878      	ldr	r0, [r7, #4]
 80144a0:	f000 fd64 	bl	8014f6c <USBD_CtlSendStatus>

              break;
 80144a4:	e004      	b.n	80144b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80144a6:	6839      	ldr	r1, [r7, #0]
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f000 fc88 	bl	8014dbe <USBD_CtlError>
              break;
 80144ae:	bf00      	nop
          }
          break;
 80144b0:	e107      	b.n	80146c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80144b8:	b2db      	uxtb	r3, r3
 80144ba:	2b02      	cmp	r3, #2
 80144bc:	d002      	beq.n	80144c4 <USBD_StdEPReq+0x124>
 80144be:	2b03      	cmp	r3, #3
 80144c0:	d016      	beq.n	80144f0 <USBD_StdEPReq+0x150>
 80144c2:	e04b      	b.n	801455c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80144c4:	7bbb      	ldrb	r3, [r7, #14]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d00d      	beq.n	80144e6 <USBD_StdEPReq+0x146>
 80144ca:	7bbb      	ldrb	r3, [r7, #14]
 80144cc:	2b80      	cmp	r3, #128	@ 0x80
 80144ce:	d00a      	beq.n	80144e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80144d0:	7bbb      	ldrb	r3, [r7, #14]
 80144d2:	4619      	mov	r1, r3
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f001 fe5b 	bl	8016190 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80144da:	2180      	movs	r1, #128	@ 0x80
 80144dc:	6878      	ldr	r0, [r7, #4]
 80144de:	f001 fe57 	bl	8016190 <USBD_LL_StallEP>
 80144e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80144e4:	e040      	b.n	8014568 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80144e6:	6839      	ldr	r1, [r7, #0]
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f000 fc68 	bl	8014dbe <USBD_CtlError>
              break;
 80144ee:	e03b      	b.n	8014568 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80144f0:	683b      	ldr	r3, [r7, #0]
 80144f2:	885b      	ldrh	r3, [r3, #2]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d136      	bne.n	8014566 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80144f8:	7bbb      	ldrb	r3, [r7, #14]
 80144fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d004      	beq.n	801450c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014502:	7bbb      	ldrb	r3, [r7, #14]
 8014504:	4619      	mov	r1, r3
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f001 fe61 	bl	80161ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f000 fd2d 	bl	8014f6c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014512:	7bbb      	ldrb	r3, [r7, #14]
 8014514:	4619      	mov	r1, r3
 8014516:	6878      	ldr	r0, [r7, #4]
 8014518:	f7ff fde4 	bl	80140e4 <USBD_CoreFindEP>
 801451c:	4603      	mov	r3, r0
 801451e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014520:	7b7b      	ldrb	r3, [r7, #13]
 8014522:	2bff      	cmp	r3, #255	@ 0xff
 8014524:	d01f      	beq.n	8014566 <USBD_StdEPReq+0x1c6>
 8014526:	7b7b      	ldrb	r3, [r7, #13]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d11c      	bne.n	8014566 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801452c:	7b7a      	ldrb	r2, [r7, #13]
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014534:	7b7a      	ldrb	r2, [r7, #13]
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	32ae      	adds	r2, #174	@ 0xae
 801453a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801453e:	689b      	ldr	r3, [r3, #8]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d010      	beq.n	8014566 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014544:	7b7a      	ldrb	r2, [r7, #13]
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	32ae      	adds	r2, #174	@ 0xae
 801454a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801454e:	689b      	ldr	r3, [r3, #8]
 8014550:	6839      	ldr	r1, [r7, #0]
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	4798      	blx	r3
 8014556:	4603      	mov	r3, r0
 8014558:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801455a:	e004      	b.n	8014566 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801455c:	6839      	ldr	r1, [r7, #0]
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	f000 fc2d 	bl	8014dbe <USBD_CtlError>
              break;
 8014564:	e000      	b.n	8014568 <USBD_StdEPReq+0x1c8>
              break;
 8014566:	bf00      	nop
          }
          break;
 8014568:	e0ab      	b.n	80146c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014570:	b2db      	uxtb	r3, r3
 8014572:	2b02      	cmp	r3, #2
 8014574:	d002      	beq.n	801457c <USBD_StdEPReq+0x1dc>
 8014576:	2b03      	cmp	r3, #3
 8014578:	d032      	beq.n	80145e0 <USBD_StdEPReq+0x240>
 801457a:	e097      	b.n	80146ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801457c:	7bbb      	ldrb	r3, [r7, #14]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d007      	beq.n	8014592 <USBD_StdEPReq+0x1f2>
 8014582:	7bbb      	ldrb	r3, [r7, #14]
 8014584:	2b80      	cmp	r3, #128	@ 0x80
 8014586:	d004      	beq.n	8014592 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014588:	6839      	ldr	r1, [r7, #0]
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f000 fc17 	bl	8014dbe <USBD_CtlError>
                break;
 8014590:	e091      	b.n	80146b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014592:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014596:	2b00      	cmp	r3, #0
 8014598:	da0b      	bge.n	80145b2 <USBD_StdEPReq+0x212>
 801459a:	7bbb      	ldrb	r3, [r7, #14]
 801459c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80145a0:	4613      	mov	r3, r2
 80145a2:	009b      	lsls	r3, r3, #2
 80145a4:	4413      	add	r3, r2
 80145a6:	009b      	lsls	r3, r3, #2
 80145a8:	3310      	adds	r3, #16
 80145aa:	687a      	ldr	r2, [r7, #4]
 80145ac:	4413      	add	r3, r2
 80145ae:	3304      	adds	r3, #4
 80145b0:	e00b      	b.n	80145ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80145b2:	7bbb      	ldrb	r3, [r7, #14]
 80145b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80145b8:	4613      	mov	r3, r2
 80145ba:	009b      	lsls	r3, r3, #2
 80145bc:	4413      	add	r3, r2
 80145be:	009b      	lsls	r3, r3, #2
 80145c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80145c4:	687a      	ldr	r2, [r7, #4]
 80145c6:	4413      	add	r3, r2
 80145c8:	3304      	adds	r3, #4
 80145ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80145cc:	68bb      	ldr	r3, [r7, #8]
 80145ce:	2200      	movs	r2, #0
 80145d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80145d2:	68bb      	ldr	r3, [r7, #8]
 80145d4:	2202      	movs	r2, #2
 80145d6:	4619      	mov	r1, r3
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f000 fc6d 	bl	8014eb8 <USBD_CtlSendData>
              break;
 80145de:	e06a      	b.n	80146b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80145e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	da11      	bge.n	801460c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80145e8:	7bbb      	ldrb	r3, [r7, #14]
 80145ea:	f003 020f 	and.w	r2, r3, #15
 80145ee:	6879      	ldr	r1, [r7, #4]
 80145f0:	4613      	mov	r3, r2
 80145f2:	009b      	lsls	r3, r3, #2
 80145f4:	4413      	add	r3, r2
 80145f6:	009b      	lsls	r3, r3, #2
 80145f8:	440b      	add	r3, r1
 80145fa:	3324      	adds	r3, #36	@ 0x24
 80145fc:	881b      	ldrh	r3, [r3, #0]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d117      	bne.n	8014632 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014602:	6839      	ldr	r1, [r7, #0]
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f000 fbda 	bl	8014dbe <USBD_CtlError>
                  break;
 801460a:	e054      	b.n	80146b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801460c:	7bbb      	ldrb	r3, [r7, #14]
 801460e:	f003 020f 	and.w	r2, r3, #15
 8014612:	6879      	ldr	r1, [r7, #4]
 8014614:	4613      	mov	r3, r2
 8014616:	009b      	lsls	r3, r3, #2
 8014618:	4413      	add	r3, r2
 801461a:	009b      	lsls	r3, r3, #2
 801461c:	440b      	add	r3, r1
 801461e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014622:	881b      	ldrh	r3, [r3, #0]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d104      	bne.n	8014632 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014628:	6839      	ldr	r1, [r7, #0]
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f000 fbc7 	bl	8014dbe <USBD_CtlError>
                  break;
 8014630:	e041      	b.n	80146b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014632:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014636:	2b00      	cmp	r3, #0
 8014638:	da0b      	bge.n	8014652 <USBD_StdEPReq+0x2b2>
 801463a:	7bbb      	ldrb	r3, [r7, #14]
 801463c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014640:	4613      	mov	r3, r2
 8014642:	009b      	lsls	r3, r3, #2
 8014644:	4413      	add	r3, r2
 8014646:	009b      	lsls	r3, r3, #2
 8014648:	3310      	adds	r3, #16
 801464a:	687a      	ldr	r2, [r7, #4]
 801464c:	4413      	add	r3, r2
 801464e:	3304      	adds	r3, #4
 8014650:	e00b      	b.n	801466a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014652:	7bbb      	ldrb	r3, [r7, #14]
 8014654:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014658:	4613      	mov	r3, r2
 801465a:	009b      	lsls	r3, r3, #2
 801465c:	4413      	add	r3, r2
 801465e:	009b      	lsls	r3, r3, #2
 8014660:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014664:	687a      	ldr	r2, [r7, #4]
 8014666:	4413      	add	r3, r2
 8014668:	3304      	adds	r3, #4
 801466a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801466c:	7bbb      	ldrb	r3, [r7, #14]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d002      	beq.n	8014678 <USBD_StdEPReq+0x2d8>
 8014672:	7bbb      	ldrb	r3, [r7, #14]
 8014674:	2b80      	cmp	r3, #128	@ 0x80
 8014676:	d103      	bne.n	8014680 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014678:	68bb      	ldr	r3, [r7, #8]
 801467a:	2200      	movs	r2, #0
 801467c:	601a      	str	r2, [r3, #0]
 801467e:	e00e      	b.n	801469e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014680:	7bbb      	ldrb	r3, [r7, #14]
 8014682:	4619      	mov	r1, r3
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	f001 fdc1 	bl	801620c <USBD_LL_IsStallEP>
 801468a:	4603      	mov	r3, r0
 801468c:	2b00      	cmp	r3, #0
 801468e:	d003      	beq.n	8014698 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	2201      	movs	r2, #1
 8014694:	601a      	str	r2, [r3, #0]
 8014696:	e002      	b.n	801469e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	2200      	movs	r2, #0
 801469c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801469e:	68bb      	ldr	r3, [r7, #8]
 80146a0:	2202      	movs	r2, #2
 80146a2:	4619      	mov	r1, r3
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f000 fc07 	bl	8014eb8 <USBD_CtlSendData>
              break;
 80146aa:	e004      	b.n	80146b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80146ac:	6839      	ldr	r1, [r7, #0]
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f000 fb85 	bl	8014dbe <USBD_CtlError>
              break;
 80146b4:	bf00      	nop
          }
          break;
 80146b6:	e004      	b.n	80146c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80146b8:	6839      	ldr	r1, [r7, #0]
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f000 fb7f 	bl	8014dbe <USBD_CtlError>
          break;
 80146c0:	bf00      	nop
      }
      break;
 80146c2:	e005      	b.n	80146d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80146c4:	6839      	ldr	r1, [r7, #0]
 80146c6:	6878      	ldr	r0, [r7, #4]
 80146c8:	f000 fb79 	bl	8014dbe <USBD_CtlError>
      break;
 80146cc:	e000      	b.n	80146d0 <USBD_StdEPReq+0x330>
      break;
 80146ce:	bf00      	nop
  }

  return ret;
 80146d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80146d2:	4618      	mov	r0, r3
 80146d4:	3710      	adds	r7, #16
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd80      	pop	{r7, pc}
	...

080146dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b084      	sub	sp, #16
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80146e6:	2300      	movs	r3, #0
 80146e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80146ea:	2300      	movs	r3, #0
 80146ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80146ee:	2300      	movs	r3, #0
 80146f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80146f2:	683b      	ldr	r3, [r7, #0]
 80146f4:	885b      	ldrh	r3, [r3, #2]
 80146f6:	0a1b      	lsrs	r3, r3, #8
 80146f8:	b29b      	uxth	r3, r3
 80146fa:	3b01      	subs	r3, #1
 80146fc:	2b0e      	cmp	r3, #14
 80146fe:	f200 8152 	bhi.w	80149a6 <USBD_GetDescriptor+0x2ca>
 8014702:	a201      	add	r2, pc, #4	@ (adr r2, 8014708 <USBD_GetDescriptor+0x2c>)
 8014704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014708:	08014779 	.word	0x08014779
 801470c:	08014791 	.word	0x08014791
 8014710:	080147d1 	.word	0x080147d1
 8014714:	080149a7 	.word	0x080149a7
 8014718:	080149a7 	.word	0x080149a7
 801471c:	08014947 	.word	0x08014947
 8014720:	08014973 	.word	0x08014973
 8014724:	080149a7 	.word	0x080149a7
 8014728:	080149a7 	.word	0x080149a7
 801472c:	080149a7 	.word	0x080149a7
 8014730:	080149a7 	.word	0x080149a7
 8014734:	080149a7 	.word	0x080149a7
 8014738:	080149a7 	.word	0x080149a7
 801473c:	080149a7 	.word	0x080149a7
 8014740:	08014745 	.word	0x08014745
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801474a:	69db      	ldr	r3, [r3, #28]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d00b      	beq.n	8014768 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014756:	69db      	ldr	r3, [r3, #28]
 8014758:	687a      	ldr	r2, [r7, #4]
 801475a:	7c12      	ldrb	r2, [r2, #16]
 801475c:	f107 0108 	add.w	r1, r7, #8
 8014760:	4610      	mov	r0, r2
 8014762:	4798      	blx	r3
 8014764:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014766:	e126      	b.n	80149b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014768:	6839      	ldr	r1, [r7, #0]
 801476a:	6878      	ldr	r0, [r7, #4]
 801476c:	f000 fb27 	bl	8014dbe <USBD_CtlError>
        err++;
 8014770:	7afb      	ldrb	r3, [r7, #11]
 8014772:	3301      	adds	r3, #1
 8014774:	72fb      	strb	r3, [r7, #11]
      break;
 8014776:	e11e      	b.n	80149b6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	687a      	ldr	r2, [r7, #4]
 8014782:	7c12      	ldrb	r2, [r2, #16]
 8014784:	f107 0108 	add.w	r1, r7, #8
 8014788:	4610      	mov	r0, r2
 801478a:	4798      	blx	r3
 801478c:	60f8      	str	r0, [r7, #12]
      break;
 801478e:	e112      	b.n	80149b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	7c1b      	ldrb	r3, [r3, #16]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d10d      	bne.n	80147b4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147a0:	f107 0208 	add.w	r2, r7, #8
 80147a4:	4610      	mov	r0, r2
 80147a6:	4798      	blx	r3
 80147a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	3301      	adds	r3, #1
 80147ae:	2202      	movs	r2, #2
 80147b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80147b2:	e100      	b.n	80149b6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80147ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147bc:	f107 0208 	add.w	r2, r7, #8
 80147c0:	4610      	mov	r0, r2
 80147c2:	4798      	blx	r3
 80147c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	3301      	adds	r3, #1
 80147ca:	2202      	movs	r2, #2
 80147cc:	701a      	strb	r2, [r3, #0]
      break;
 80147ce:	e0f2      	b.n	80149b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	885b      	ldrh	r3, [r3, #2]
 80147d4:	b2db      	uxtb	r3, r3
 80147d6:	2b05      	cmp	r3, #5
 80147d8:	f200 80ac 	bhi.w	8014934 <USBD_GetDescriptor+0x258>
 80147dc:	a201      	add	r2, pc, #4	@ (adr r2, 80147e4 <USBD_GetDescriptor+0x108>)
 80147de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147e2:	bf00      	nop
 80147e4:	080147fd 	.word	0x080147fd
 80147e8:	08014831 	.word	0x08014831
 80147ec:	08014865 	.word	0x08014865
 80147f0:	08014899 	.word	0x08014899
 80147f4:	080148cd 	.word	0x080148cd
 80147f8:	08014901 	.word	0x08014901
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014802:	685b      	ldr	r3, [r3, #4]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d00b      	beq.n	8014820 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801480e:	685b      	ldr	r3, [r3, #4]
 8014810:	687a      	ldr	r2, [r7, #4]
 8014812:	7c12      	ldrb	r2, [r2, #16]
 8014814:	f107 0108 	add.w	r1, r7, #8
 8014818:	4610      	mov	r0, r2
 801481a:	4798      	blx	r3
 801481c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801481e:	e091      	b.n	8014944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014820:	6839      	ldr	r1, [r7, #0]
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f000 facb 	bl	8014dbe <USBD_CtlError>
            err++;
 8014828:	7afb      	ldrb	r3, [r7, #11]
 801482a:	3301      	adds	r3, #1
 801482c:	72fb      	strb	r3, [r7, #11]
          break;
 801482e:	e089      	b.n	8014944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014836:	689b      	ldr	r3, [r3, #8]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d00b      	beq.n	8014854 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014842:	689b      	ldr	r3, [r3, #8]
 8014844:	687a      	ldr	r2, [r7, #4]
 8014846:	7c12      	ldrb	r2, [r2, #16]
 8014848:	f107 0108 	add.w	r1, r7, #8
 801484c:	4610      	mov	r0, r2
 801484e:	4798      	blx	r3
 8014850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014852:	e077      	b.n	8014944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014854:	6839      	ldr	r1, [r7, #0]
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f000 fab1 	bl	8014dbe <USBD_CtlError>
            err++;
 801485c:	7afb      	ldrb	r3, [r7, #11]
 801485e:	3301      	adds	r3, #1
 8014860:	72fb      	strb	r3, [r7, #11]
          break;
 8014862:	e06f      	b.n	8014944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801486a:	68db      	ldr	r3, [r3, #12]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d00b      	beq.n	8014888 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014876:	68db      	ldr	r3, [r3, #12]
 8014878:	687a      	ldr	r2, [r7, #4]
 801487a:	7c12      	ldrb	r2, [r2, #16]
 801487c:	f107 0108 	add.w	r1, r7, #8
 8014880:	4610      	mov	r0, r2
 8014882:	4798      	blx	r3
 8014884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014886:	e05d      	b.n	8014944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014888:	6839      	ldr	r1, [r7, #0]
 801488a:	6878      	ldr	r0, [r7, #4]
 801488c:	f000 fa97 	bl	8014dbe <USBD_CtlError>
            err++;
 8014890:	7afb      	ldrb	r3, [r7, #11]
 8014892:	3301      	adds	r3, #1
 8014894:	72fb      	strb	r3, [r7, #11]
          break;
 8014896:	e055      	b.n	8014944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801489e:	691b      	ldr	r3, [r3, #16]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d00b      	beq.n	80148bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80148aa:	691b      	ldr	r3, [r3, #16]
 80148ac:	687a      	ldr	r2, [r7, #4]
 80148ae:	7c12      	ldrb	r2, [r2, #16]
 80148b0:	f107 0108 	add.w	r1, r7, #8
 80148b4:	4610      	mov	r0, r2
 80148b6:	4798      	blx	r3
 80148b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80148ba:	e043      	b.n	8014944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80148bc:	6839      	ldr	r1, [r7, #0]
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f000 fa7d 	bl	8014dbe <USBD_CtlError>
            err++;
 80148c4:	7afb      	ldrb	r3, [r7, #11]
 80148c6:	3301      	adds	r3, #1
 80148c8:	72fb      	strb	r3, [r7, #11]
          break;
 80148ca:	e03b      	b.n	8014944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80148d2:	695b      	ldr	r3, [r3, #20]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d00b      	beq.n	80148f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80148de:	695b      	ldr	r3, [r3, #20]
 80148e0:	687a      	ldr	r2, [r7, #4]
 80148e2:	7c12      	ldrb	r2, [r2, #16]
 80148e4:	f107 0108 	add.w	r1, r7, #8
 80148e8:	4610      	mov	r0, r2
 80148ea:	4798      	blx	r3
 80148ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80148ee:	e029      	b.n	8014944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80148f0:	6839      	ldr	r1, [r7, #0]
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	f000 fa63 	bl	8014dbe <USBD_CtlError>
            err++;
 80148f8:	7afb      	ldrb	r3, [r7, #11]
 80148fa:	3301      	adds	r3, #1
 80148fc:	72fb      	strb	r3, [r7, #11]
          break;
 80148fe:	e021      	b.n	8014944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014906:	699b      	ldr	r3, [r3, #24]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d00b      	beq.n	8014924 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014912:	699b      	ldr	r3, [r3, #24]
 8014914:	687a      	ldr	r2, [r7, #4]
 8014916:	7c12      	ldrb	r2, [r2, #16]
 8014918:	f107 0108 	add.w	r1, r7, #8
 801491c:	4610      	mov	r0, r2
 801491e:	4798      	blx	r3
 8014920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014922:	e00f      	b.n	8014944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014924:	6839      	ldr	r1, [r7, #0]
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	f000 fa49 	bl	8014dbe <USBD_CtlError>
            err++;
 801492c:	7afb      	ldrb	r3, [r7, #11]
 801492e:	3301      	adds	r3, #1
 8014930:	72fb      	strb	r3, [r7, #11]
          break;
 8014932:	e007      	b.n	8014944 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014934:	6839      	ldr	r1, [r7, #0]
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f000 fa41 	bl	8014dbe <USBD_CtlError>
          err++;
 801493c:	7afb      	ldrb	r3, [r7, #11]
 801493e:	3301      	adds	r3, #1
 8014940:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014942:	bf00      	nop
      }
      break;
 8014944:	e037      	b.n	80149b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	7c1b      	ldrb	r3, [r3, #16]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d109      	bne.n	8014962 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014956:	f107 0208 	add.w	r2, r7, #8
 801495a:	4610      	mov	r0, r2
 801495c:	4798      	blx	r3
 801495e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014960:	e029      	b.n	80149b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014962:	6839      	ldr	r1, [r7, #0]
 8014964:	6878      	ldr	r0, [r7, #4]
 8014966:	f000 fa2a 	bl	8014dbe <USBD_CtlError>
        err++;
 801496a:	7afb      	ldrb	r3, [r7, #11]
 801496c:	3301      	adds	r3, #1
 801496e:	72fb      	strb	r3, [r7, #11]
      break;
 8014970:	e021      	b.n	80149b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	7c1b      	ldrb	r3, [r3, #16]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d10d      	bne.n	8014996 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014982:	f107 0208 	add.w	r2, r7, #8
 8014986:	4610      	mov	r0, r2
 8014988:	4798      	blx	r3
 801498a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	3301      	adds	r3, #1
 8014990:	2207      	movs	r2, #7
 8014992:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014994:	e00f      	b.n	80149b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014996:	6839      	ldr	r1, [r7, #0]
 8014998:	6878      	ldr	r0, [r7, #4]
 801499a:	f000 fa10 	bl	8014dbe <USBD_CtlError>
        err++;
 801499e:	7afb      	ldrb	r3, [r7, #11]
 80149a0:	3301      	adds	r3, #1
 80149a2:	72fb      	strb	r3, [r7, #11]
      break;
 80149a4:	e007      	b.n	80149b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80149a6:	6839      	ldr	r1, [r7, #0]
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f000 fa08 	bl	8014dbe <USBD_CtlError>
      err++;
 80149ae:	7afb      	ldrb	r3, [r7, #11]
 80149b0:	3301      	adds	r3, #1
 80149b2:	72fb      	strb	r3, [r7, #11]
      break;
 80149b4:	bf00      	nop
  }

  if (err != 0U)
 80149b6:	7afb      	ldrb	r3, [r7, #11]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d11e      	bne.n	80149fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	88db      	ldrh	r3, [r3, #6]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d016      	beq.n	80149f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80149c4:	893b      	ldrh	r3, [r7, #8]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d00e      	beq.n	80149e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	88da      	ldrh	r2, [r3, #6]
 80149ce:	893b      	ldrh	r3, [r7, #8]
 80149d0:	4293      	cmp	r3, r2
 80149d2:	bf28      	it	cs
 80149d4:	4613      	movcs	r3, r2
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80149da:	893b      	ldrh	r3, [r7, #8]
 80149dc:	461a      	mov	r2, r3
 80149de:	68f9      	ldr	r1, [r7, #12]
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f000 fa69 	bl	8014eb8 <USBD_CtlSendData>
 80149e6:	e009      	b.n	80149fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80149e8:	6839      	ldr	r1, [r7, #0]
 80149ea:	6878      	ldr	r0, [r7, #4]
 80149ec:	f000 f9e7 	bl	8014dbe <USBD_CtlError>
 80149f0:	e004      	b.n	80149fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f000 faba 	bl	8014f6c <USBD_CtlSendStatus>
 80149f8:	e000      	b.n	80149fc <USBD_GetDescriptor+0x320>
    return;
 80149fa:	bf00      	nop
  }
}
 80149fc:	3710      	adds	r7, #16
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop

08014a04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b084      	sub	sp, #16
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
 8014a0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	889b      	ldrh	r3, [r3, #4]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d131      	bne.n	8014a7a <USBD_SetAddress+0x76>
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	88db      	ldrh	r3, [r3, #6]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d12d      	bne.n	8014a7a <USBD_SetAddress+0x76>
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	885b      	ldrh	r3, [r3, #2]
 8014a22:	2b7f      	cmp	r3, #127	@ 0x7f
 8014a24:	d829      	bhi.n	8014a7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014a26:	683b      	ldr	r3, [r7, #0]
 8014a28:	885b      	ldrh	r3, [r3, #2]
 8014a2a:	b2db      	uxtb	r3, r3
 8014a2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014a30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014a38:	b2db      	uxtb	r3, r3
 8014a3a:	2b03      	cmp	r3, #3
 8014a3c:	d104      	bne.n	8014a48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014a3e:	6839      	ldr	r1, [r7, #0]
 8014a40:	6878      	ldr	r0, [r7, #4]
 8014a42:	f000 f9bc 	bl	8014dbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a46:	e01d      	b.n	8014a84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	7bfa      	ldrb	r2, [r7, #15]
 8014a4c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014a50:	7bfb      	ldrb	r3, [r7, #15]
 8014a52:	4619      	mov	r1, r3
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f001 fc05 	bl	8016264 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014a5a:	6878      	ldr	r0, [r7, #4]
 8014a5c:	f000 fa86 	bl	8014f6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014a60:	7bfb      	ldrb	r3, [r7, #15]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d004      	beq.n	8014a70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	2202      	movs	r2, #2
 8014a6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a6e:	e009      	b.n	8014a84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2201      	movs	r2, #1
 8014a74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a78:	e004      	b.n	8014a84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014a7a:	6839      	ldr	r1, [r7, #0]
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	f000 f99e 	bl	8014dbe <USBD_CtlError>
  }
}
 8014a82:	bf00      	nop
 8014a84:	bf00      	nop
 8014a86:	3710      	adds	r7, #16
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}

08014a8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b084      	sub	sp, #16
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a96:	2300      	movs	r3, #0
 8014a98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	885b      	ldrh	r3, [r3, #2]
 8014a9e:	b2da      	uxtb	r2, r3
 8014aa0:	4b4e      	ldr	r3, [pc, #312]	@ (8014bdc <USBD_SetConfig+0x150>)
 8014aa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014aa4:	4b4d      	ldr	r3, [pc, #308]	@ (8014bdc <USBD_SetConfig+0x150>)
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	2b01      	cmp	r3, #1
 8014aaa:	d905      	bls.n	8014ab8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014aac:	6839      	ldr	r1, [r7, #0]
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f000 f985 	bl	8014dbe <USBD_CtlError>
    return USBD_FAIL;
 8014ab4:	2303      	movs	r3, #3
 8014ab6:	e08c      	b.n	8014bd2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014abe:	b2db      	uxtb	r3, r3
 8014ac0:	2b02      	cmp	r3, #2
 8014ac2:	d002      	beq.n	8014aca <USBD_SetConfig+0x3e>
 8014ac4:	2b03      	cmp	r3, #3
 8014ac6:	d029      	beq.n	8014b1c <USBD_SetConfig+0x90>
 8014ac8:	e075      	b.n	8014bb6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014aca:	4b44      	ldr	r3, [pc, #272]	@ (8014bdc <USBD_SetConfig+0x150>)
 8014acc:	781b      	ldrb	r3, [r3, #0]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d020      	beq.n	8014b14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014ad2:	4b42      	ldr	r3, [pc, #264]	@ (8014bdc <USBD_SetConfig+0x150>)
 8014ad4:	781b      	ldrb	r3, [r3, #0]
 8014ad6:	461a      	mov	r2, r3
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014adc:	4b3f      	ldr	r3, [pc, #252]	@ (8014bdc <USBD_SetConfig+0x150>)
 8014ade:	781b      	ldrb	r3, [r3, #0]
 8014ae0:	4619      	mov	r1, r3
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	f7ff f84b 	bl	8013b7e <USBD_SetClassConfig>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014aec:	7bfb      	ldrb	r3, [r7, #15]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d008      	beq.n	8014b04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014af2:	6839      	ldr	r1, [r7, #0]
 8014af4:	6878      	ldr	r0, [r7, #4]
 8014af6:	f000 f962 	bl	8014dbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	2202      	movs	r2, #2
 8014afe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014b02:	e065      	b.n	8014bd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014b04:	6878      	ldr	r0, [r7, #4]
 8014b06:	f000 fa31 	bl	8014f6c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	2203      	movs	r2, #3
 8014b0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014b12:	e05d      	b.n	8014bd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014b14:	6878      	ldr	r0, [r7, #4]
 8014b16:	f000 fa29 	bl	8014f6c <USBD_CtlSendStatus>
      break;
 8014b1a:	e059      	b.n	8014bd0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8014bdc <USBD_SetConfig+0x150>)
 8014b1e:	781b      	ldrb	r3, [r3, #0]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d112      	bne.n	8014b4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2202      	movs	r2, #2
 8014b28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8014bdc <USBD_SetConfig+0x150>)
 8014b2e:	781b      	ldrb	r3, [r3, #0]
 8014b30:	461a      	mov	r2, r3
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014b36:	4b29      	ldr	r3, [pc, #164]	@ (8014bdc <USBD_SetConfig+0x150>)
 8014b38:	781b      	ldrb	r3, [r3, #0]
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	6878      	ldr	r0, [r7, #4]
 8014b3e:	f7ff f83a 	bl	8013bb6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f000 fa12 	bl	8014f6c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014b48:	e042      	b.n	8014bd0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014b4a:	4b24      	ldr	r3, [pc, #144]	@ (8014bdc <USBD_SetConfig+0x150>)
 8014b4c:	781b      	ldrb	r3, [r3, #0]
 8014b4e:	461a      	mov	r2, r3
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	685b      	ldr	r3, [r3, #4]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d02a      	beq.n	8014bae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	685b      	ldr	r3, [r3, #4]
 8014b5c:	b2db      	uxtb	r3, r3
 8014b5e:	4619      	mov	r1, r3
 8014b60:	6878      	ldr	r0, [r7, #4]
 8014b62:	f7ff f828 	bl	8013bb6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014b66:	4b1d      	ldr	r3, [pc, #116]	@ (8014bdc <USBD_SetConfig+0x150>)
 8014b68:	781b      	ldrb	r3, [r3, #0]
 8014b6a:	461a      	mov	r2, r3
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014b70:	4b1a      	ldr	r3, [pc, #104]	@ (8014bdc <USBD_SetConfig+0x150>)
 8014b72:	781b      	ldrb	r3, [r3, #0]
 8014b74:	4619      	mov	r1, r3
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f7ff f801 	bl	8013b7e <USBD_SetClassConfig>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014b80:	7bfb      	ldrb	r3, [r7, #15]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d00f      	beq.n	8014ba6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014b86:	6839      	ldr	r1, [r7, #0]
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f000 f918 	bl	8014dbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	b2db      	uxtb	r3, r3
 8014b94:	4619      	mov	r1, r3
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f7ff f80d 	bl	8013bb6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2202      	movs	r2, #2
 8014ba0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014ba4:	e014      	b.n	8014bd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014ba6:	6878      	ldr	r0, [r7, #4]
 8014ba8:	f000 f9e0 	bl	8014f6c <USBD_CtlSendStatus>
      break;
 8014bac:	e010      	b.n	8014bd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014bae:	6878      	ldr	r0, [r7, #4]
 8014bb0:	f000 f9dc 	bl	8014f6c <USBD_CtlSendStatus>
      break;
 8014bb4:	e00c      	b.n	8014bd0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014bb6:	6839      	ldr	r1, [r7, #0]
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	f000 f900 	bl	8014dbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014bbe:	4b07      	ldr	r3, [pc, #28]	@ (8014bdc <USBD_SetConfig+0x150>)
 8014bc0:	781b      	ldrb	r3, [r3, #0]
 8014bc2:	4619      	mov	r1, r3
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	f7fe fff6 	bl	8013bb6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014bca:	2303      	movs	r3, #3
 8014bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8014bce:	bf00      	nop
  }

  return ret;
 8014bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	3710      	adds	r7, #16
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}
 8014bda:	bf00      	nop
 8014bdc:	200012cc 	.word	0x200012cc

08014be0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b082      	sub	sp, #8
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014bea:	683b      	ldr	r3, [r7, #0]
 8014bec:	88db      	ldrh	r3, [r3, #6]
 8014bee:	2b01      	cmp	r3, #1
 8014bf0:	d004      	beq.n	8014bfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014bf2:	6839      	ldr	r1, [r7, #0]
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	f000 f8e2 	bl	8014dbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014bfa:	e023      	b.n	8014c44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014c02:	b2db      	uxtb	r3, r3
 8014c04:	2b02      	cmp	r3, #2
 8014c06:	dc02      	bgt.n	8014c0e <USBD_GetConfig+0x2e>
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	dc03      	bgt.n	8014c14 <USBD_GetConfig+0x34>
 8014c0c:	e015      	b.n	8014c3a <USBD_GetConfig+0x5a>
 8014c0e:	2b03      	cmp	r3, #3
 8014c10:	d00b      	beq.n	8014c2a <USBD_GetConfig+0x4a>
 8014c12:	e012      	b.n	8014c3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2200      	movs	r2, #0
 8014c18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	3308      	adds	r3, #8
 8014c1e:	2201      	movs	r2, #1
 8014c20:	4619      	mov	r1, r3
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f000 f948 	bl	8014eb8 <USBD_CtlSendData>
        break;
 8014c28:	e00c      	b.n	8014c44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	3304      	adds	r3, #4
 8014c2e:	2201      	movs	r2, #1
 8014c30:	4619      	mov	r1, r3
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f000 f940 	bl	8014eb8 <USBD_CtlSendData>
        break;
 8014c38:	e004      	b.n	8014c44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014c3a:	6839      	ldr	r1, [r7, #0]
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f000 f8be 	bl	8014dbe <USBD_CtlError>
        break;
 8014c42:	bf00      	nop
}
 8014c44:	bf00      	nop
 8014c46:	3708      	adds	r7, #8
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bd80      	pop	{r7, pc}

08014c4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b082      	sub	sp, #8
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
 8014c54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014c5c:	b2db      	uxtb	r3, r3
 8014c5e:	3b01      	subs	r3, #1
 8014c60:	2b02      	cmp	r3, #2
 8014c62:	d81e      	bhi.n	8014ca2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014c64:	683b      	ldr	r3, [r7, #0]
 8014c66:	88db      	ldrh	r3, [r3, #6]
 8014c68:	2b02      	cmp	r3, #2
 8014c6a:	d004      	beq.n	8014c76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014c6c:	6839      	ldr	r1, [r7, #0]
 8014c6e:	6878      	ldr	r0, [r7, #4]
 8014c70:	f000 f8a5 	bl	8014dbe <USBD_CtlError>
        break;
 8014c74:	e01a      	b.n	8014cac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	2201      	movs	r2, #1
 8014c7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d005      	beq.n	8014c92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	68db      	ldr	r3, [r3, #12]
 8014c8a:	f043 0202 	orr.w	r2, r3, #2
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	330c      	adds	r3, #12
 8014c96:	2202      	movs	r2, #2
 8014c98:	4619      	mov	r1, r3
 8014c9a:	6878      	ldr	r0, [r7, #4]
 8014c9c:	f000 f90c 	bl	8014eb8 <USBD_CtlSendData>
      break;
 8014ca0:	e004      	b.n	8014cac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014ca2:	6839      	ldr	r1, [r7, #0]
 8014ca4:	6878      	ldr	r0, [r7, #4]
 8014ca6:	f000 f88a 	bl	8014dbe <USBD_CtlError>
      break;
 8014caa:	bf00      	nop
  }
}
 8014cac:	bf00      	nop
 8014cae:	3708      	adds	r7, #8
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}

08014cb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b082      	sub	sp, #8
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	885b      	ldrh	r3, [r3, #2]
 8014cc2:	2b01      	cmp	r3, #1
 8014cc4:	d107      	bne.n	8014cd6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	2201      	movs	r2, #1
 8014cca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014cce:	6878      	ldr	r0, [r7, #4]
 8014cd0:	f000 f94c 	bl	8014f6c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014cd4:	e013      	b.n	8014cfe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	885b      	ldrh	r3, [r3, #2]
 8014cda:	2b02      	cmp	r3, #2
 8014cdc:	d10b      	bne.n	8014cf6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	889b      	ldrh	r3, [r3, #4]
 8014ce2:	0a1b      	lsrs	r3, r3, #8
 8014ce4:	b29b      	uxth	r3, r3
 8014ce6:	b2da      	uxtb	r2, r3
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014cee:	6878      	ldr	r0, [r7, #4]
 8014cf0:	f000 f93c 	bl	8014f6c <USBD_CtlSendStatus>
}
 8014cf4:	e003      	b.n	8014cfe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014cf6:	6839      	ldr	r1, [r7, #0]
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f000 f860 	bl	8014dbe <USBD_CtlError>
}
 8014cfe:	bf00      	nop
 8014d00:	3708      	adds	r7, #8
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}

08014d06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d06:	b580      	push	{r7, lr}
 8014d08:	b082      	sub	sp, #8
 8014d0a:	af00      	add	r7, sp, #0
 8014d0c:	6078      	str	r0, [r7, #4]
 8014d0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014d16:	b2db      	uxtb	r3, r3
 8014d18:	3b01      	subs	r3, #1
 8014d1a:	2b02      	cmp	r3, #2
 8014d1c:	d80b      	bhi.n	8014d36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	885b      	ldrh	r3, [r3, #2]
 8014d22:	2b01      	cmp	r3, #1
 8014d24:	d10c      	bne.n	8014d40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	2200      	movs	r2, #0
 8014d2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014d2e:	6878      	ldr	r0, [r7, #4]
 8014d30:	f000 f91c 	bl	8014f6c <USBD_CtlSendStatus>
      }
      break;
 8014d34:	e004      	b.n	8014d40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014d36:	6839      	ldr	r1, [r7, #0]
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f000 f840 	bl	8014dbe <USBD_CtlError>
      break;
 8014d3e:	e000      	b.n	8014d42 <USBD_ClrFeature+0x3c>
      break;
 8014d40:	bf00      	nop
  }
}
 8014d42:	bf00      	nop
 8014d44:	3708      	adds	r7, #8
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bd80      	pop	{r7, pc}

08014d4a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014d4a:	b580      	push	{r7, lr}
 8014d4c:	b084      	sub	sp, #16
 8014d4e:	af00      	add	r7, sp, #0
 8014d50:	6078      	str	r0, [r7, #4]
 8014d52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	781a      	ldrb	r2, [r3, #0]
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	3301      	adds	r3, #1
 8014d64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	781a      	ldrb	r2, [r3, #0]
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	3301      	adds	r3, #1
 8014d72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014d74:	68f8      	ldr	r0, [r7, #12]
 8014d76:	f7ff fa16 	bl	80141a6 <SWAPBYTE>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	461a      	mov	r2, r3
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	3301      	adds	r3, #1
 8014d86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	3301      	adds	r3, #1
 8014d8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014d8e:	68f8      	ldr	r0, [r7, #12]
 8014d90:	f7ff fa09 	bl	80141a6 <SWAPBYTE>
 8014d94:	4603      	mov	r3, r0
 8014d96:	461a      	mov	r2, r3
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	3301      	adds	r3, #1
 8014da0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	3301      	adds	r3, #1
 8014da6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014da8:	68f8      	ldr	r0, [r7, #12]
 8014daa:	f7ff f9fc 	bl	80141a6 <SWAPBYTE>
 8014dae:	4603      	mov	r3, r0
 8014db0:	461a      	mov	r2, r3
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	80da      	strh	r2, [r3, #6]
}
 8014db6:	bf00      	nop
 8014db8:	3710      	adds	r7, #16
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bd80      	pop	{r7, pc}

08014dbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014dbe:	b580      	push	{r7, lr}
 8014dc0:	b082      	sub	sp, #8
 8014dc2:	af00      	add	r7, sp, #0
 8014dc4:	6078      	str	r0, [r7, #4]
 8014dc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014dc8:	2180      	movs	r1, #128	@ 0x80
 8014dca:	6878      	ldr	r0, [r7, #4]
 8014dcc:	f001 f9e0 	bl	8016190 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014dd0:	2100      	movs	r1, #0
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f001 f9dc 	bl	8016190 <USBD_LL_StallEP>
}
 8014dd8:	bf00      	nop
 8014dda:	3708      	adds	r7, #8
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}

08014de0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b086      	sub	sp, #24
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	60f8      	str	r0, [r7, #12]
 8014de8:	60b9      	str	r1, [r7, #8]
 8014dea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014dec:	2300      	movs	r3, #0
 8014dee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d042      	beq.n	8014e7c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014dfa:	6938      	ldr	r0, [r7, #16]
 8014dfc:	f000 f842 	bl	8014e84 <USBD_GetLen>
 8014e00:	4603      	mov	r3, r0
 8014e02:	3301      	adds	r3, #1
 8014e04:	005b      	lsls	r3, r3, #1
 8014e06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e0a:	d808      	bhi.n	8014e1e <USBD_GetString+0x3e>
 8014e0c:	6938      	ldr	r0, [r7, #16]
 8014e0e:	f000 f839 	bl	8014e84 <USBD_GetLen>
 8014e12:	4603      	mov	r3, r0
 8014e14:	3301      	adds	r3, #1
 8014e16:	b29b      	uxth	r3, r3
 8014e18:	005b      	lsls	r3, r3, #1
 8014e1a:	b29a      	uxth	r2, r3
 8014e1c:	e001      	b.n	8014e22 <USBD_GetString+0x42>
 8014e1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014e26:	7dfb      	ldrb	r3, [r7, #23]
 8014e28:	68ba      	ldr	r2, [r7, #8]
 8014e2a:	4413      	add	r3, r2
 8014e2c:	687a      	ldr	r2, [r7, #4]
 8014e2e:	7812      	ldrb	r2, [r2, #0]
 8014e30:	701a      	strb	r2, [r3, #0]
  idx++;
 8014e32:	7dfb      	ldrb	r3, [r7, #23]
 8014e34:	3301      	adds	r3, #1
 8014e36:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014e38:	7dfb      	ldrb	r3, [r7, #23]
 8014e3a:	68ba      	ldr	r2, [r7, #8]
 8014e3c:	4413      	add	r3, r2
 8014e3e:	2203      	movs	r2, #3
 8014e40:	701a      	strb	r2, [r3, #0]
  idx++;
 8014e42:	7dfb      	ldrb	r3, [r7, #23]
 8014e44:	3301      	adds	r3, #1
 8014e46:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014e48:	e013      	b.n	8014e72 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014e4a:	7dfb      	ldrb	r3, [r7, #23]
 8014e4c:	68ba      	ldr	r2, [r7, #8]
 8014e4e:	4413      	add	r3, r2
 8014e50:	693a      	ldr	r2, [r7, #16]
 8014e52:	7812      	ldrb	r2, [r2, #0]
 8014e54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014e56:	693b      	ldr	r3, [r7, #16]
 8014e58:	3301      	adds	r3, #1
 8014e5a:	613b      	str	r3, [r7, #16]
    idx++;
 8014e5c:	7dfb      	ldrb	r3, [r7, #23]
 8014e5e:	3301      	adds	r3, #1
 8014e60:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014e62:	7dfb      	ldrb	r3, [r7, #23]
 8014e64:	68ba      	ldr	r2, [r7, #8]
 8014e66:	4413      	add	r3, r2
 8014e68:	2200      	movs	r2, #0
 8014e6a:	701a      	strb	r2, [r3, #0]
    idx++;
 8014e6c:	7dfb      	ldrb	r3, [r7, #23]
 8014e6e:	3301      	adds	r3, #1
 8014e70:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014e72:	693b      	ldr	r3, [r7, #16]
 8014e74:	781b      	ldrb	r3, [r3, #0]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d1e7      	bne.n	8014e4a <USBD_GetString+0x6a>
 8014e7a:	e000      	b.n	8014e7e <USBD_GetString+0x9e>
    return;
 8014e7c:	bf00      	nop
  }
}
 8014e7e:	3718      	adds	r7, #24
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}

08014e84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014e84:	b480      	push	{r7}
 8014e86:	b085      	sub	sp, #20
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014e94:	e005      	b.n	8014ea2 <USBD_GetLen+0x1e>
  {
    len++;
 8014e96:	7bfb      	ldrb	r3, [r7, #15]
 8014e98:	3301      	adds	r3, #1
 8014e9a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	3301      	adds	r3, #1
 8014ea0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014ea2:	68bb      	ldr	r3, [r7, #8]
 8014ea4:	781b      	ldrb	r3, [r3, #0]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d1f5      	bne.n	8014e96 <USBD_GetLen+0x12>
  }

  return len;
 8014eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	3714      	adds	r7, #20
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb6:	4770      	bx	lr

08014eb8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b084      	sub	sp, #16
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	60f8      	str	r0, [r7, #12]
 8014ec0:	60b9      	str	r1, [r7, #8]
 8014ec2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	2202      	movs	r2, #2
 8014ec8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	687a      	ldr	r2, [r7, #4]
 8014ed0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	687a      	ldr	r2, [r7, #4]
 8014ed6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	68ba      	ldr	r2, [r7, #8]
 8014edc:	2100      	movs	r1, #0
 8014ede:	68f8      	ldr	r0, [r7, #12]
 8014ee0:	f001 f9df 	bl	80162a2 <USBD_LL_Transmit>

  return USBD_OK;
 8014ee4:	2300      	movs	r3, #0
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3710      	adds	r7, #16
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}

08014eee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014eee:	b580      	push	{r7, lr}
 8014ef0:	b084      	sub	sp, #16
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	60f8      	str	r0, [r7, #12]
 8014ef6:	60b9      	str	r1, [r7, #8]
 8014ef8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	68ba      	ldr	r2, [r7, #8]
 8014efe:	2100      	movs	r1, #0
 8014f00:	68f8      	ldr	r0, [r7, #12]
 8014f02:	f001 f9ce 	bl	80162a2 <USBD_LL_Transmit>

  return USBD_OK;
 8014f06:	2300      	movs	r3, #0
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	3710      	adds	r7, #16
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}

08014f10 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b084      	sub	sp, #16
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	60f8      	str	r0, [r7, #12]
 8014f18:	60b9      	str	r1, [r7, #8]
 8014f1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	2203      	movs	r2, #3
 8014f20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	687a      	ldr	r2, [r7, #4]
 8014f28:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	687a      	ldr	r2, [r7, #4]
 8014f30:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	68ba      	ldr	r2, [r7, #8]
 8014f38:	2100      	movs	r1, #0
 8014f3a:	68f8      	ldr	r0, [r7, #12]
 8014f3c:	f001 f9d2 	bl	80162e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014f40:	2300      	movs	r3, #0
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	3710      	adds	r7, #16
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}

08014f4a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014f4a:	b580      	push	{r7, lr}
 8014f4c:	b084      	sub	sp, #16
 8014f4e:	af00      	add	r7, sp, #0
 8014f50:	60f8      	str	r0, [r7, #12]
 8014f52:	60b9      	str	r1, [r7, #8]
 8014f54:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	68ba      	ldr	r2, [r7, #8]
 8014f5a:	2100      	movs	r1, #0
 8014f5c:	68f8      	ldr	r0, [r7, #12]
 8014f5e:	f001 f9c1 	bl	80162e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014f62:	2300      	movs	r3, #0
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	3710      	adds	r7, #16
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}

08014f6c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b082      	sub	sp, #8
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	2204      	movs	r2, #4
 8014f78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	2200      	movs	r2, #0
 8014f80:	2100      	movs	r1, #0
 8014f82:	6878      	ldr	r0, [r7, #4]
 8014f84:	f001 f98d 	bl	80162a2 <USBD_LL_Transmit>

  return USBD_OK;
 8014f88:	2300      	movs	r3, #0
}
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	3708      	adds	r7, #8
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}

08014f92 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014f92:	b580      	push	{r7, lr}
 8014f94:	b082      	sub	sp, #8
 8014f96:	af00      	add	r7, sp, #0
 8014f98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	2205      	movs	r2, #5
 8014f9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	2100      	movs	r1, #0
 8014fa8:	6878      	ldr	r0, [r7, #4]
 8014faa:	f001 f99b 	bl	80162e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014fae:	2300      	movs	r3, #0
}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	3708      	adds	r7, #8
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	bd80      	pop	{r7, pc}

08014fb8 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f7f2 f917 	bl	80071f4 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8014fc6:	bf00      	nop
 8014fc8:	3708      	adds	r7, #8
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bd80      	pop	{r7, pc}

08014fce <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8014fce:	b580      	push	{r7, lr}
 8014fd0:	b082      	sub	sp, #8
 8014fd2:	af00      	add	r7, sp, #0
 8014fd4:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8014fd6:	e002      	b.n	8014fde <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8014fd8:	2001      	movs	r0, #1
 8014fda:	f7ff ffed 	bl	8014fb8 <SPIF_Delay>
  while (Handle->Lock)
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	7b1b      	ldrb	r3, [r3, #12]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d1f8      	bne.n	8014fd8 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	2201      	movs	r2, #1
 8014fea:	731a      	strb	r2, [r3, #12]
}
 8014fec:	bf00      	nop
 8014fee:	3708      	adds	r7, #8
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}

08014ff4 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8014ff4:	b480      	push	{r7}
 8014ff6:	b083      	sub	sp, #12
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	2200      	movs	r2, #0
 8015000:	731a      	strb	r2, [r3, #12]
}
 8015002:	bf00      	nop
 8015004:	370c      	adds	r7, #12
 8015006:	46bd      	mov	sp, r7
 8015008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500c:	4770      	bx	lr

0801500e <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 801500e:	b580      	push	{r7, lr}
 8015010:	b084      	sub	sp, #16
 8015012:	af00      	add	r7, sp, #0
 8015014:	6078      	str	r0, [r7, #4]
 8015016:	460b      	mov	r3, r1
 8015018:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	6858      	ldr	r0, [r3, #4]
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	691b      	ldr	r3, [r3, #16]
 8015022:	b29b      	uxth	r3, r3
 8015024:	78fa      	ldrb	r2, [r7, #3]
 8015026:	4619      	mov	r1, r3
 8015028:	f7f3 ff5e 	bl	8008ee8 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 801502c:	2300      	movs	r3, #0
 801502e:	60fb      	str	r3, [r7, #12]
 8015030:	e002      	b.n	8015038 <SPIF_CsPin+0x2a>
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	3301      	adds	r3, #1
 8015036:	60fb      	str	r3, [r7, #12]
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	2b09      	cmp	r3, #9
 801503c:	ddf9      	ble.n	8015032 <SPIF_CsPin+0x24>
}
 801503e:	bf00      	nop
 8015040:	bf00      	nop
 8015042:	3710      	adds	r7, #16
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}

08015048 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b088      	sub	sp, #32
 801504c:	af02      	add	r7, sp, #8
 801504e:	60f8      	str	r0, [r7, #12]
 8015050:	60b9      	str	r1, [r7, #8]
 8015052:	607a      	str	r2, [r7, #4]
 8015054:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8015056:	2300      	movs	r3, #0
 8015058:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	6818      	ldr	r0, [r3, #0]
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	b29a      	uxth	r2, r3
 8015062:	6a3b      	ldr	r3, [r7, #32]
 8015064:	9300      	str	r3, [sp, #0]
 8015066:	4613      	mov	r3, r2
 8015068:	687a      	ldr	r2, [r7, #4]
 801506a:	68b9      	ldr	r1, [r7, #8]
 801506c:	f7f9 fb47 	bl	800e6fe <HAL_SPI_TransmitReceive>
 8015070:	4603      	mov	r3, r0
 8015072:	2b00      	cmp	r3, #0
 8015074:	d101      	bne.n	801507a <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 8015076:	2301      	movs	r3, #1
 8015078:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 801507a:	7dfb      	ldrb	r3, [r7, #23]
}
 801507c:	4618      	mov	r0, r3
 801507e:	3718      	adds	r7, #24
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}

08015084 <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b086      	sub	sp, #24
 8015088:	af00      	add	r7, sp, #0
 801508a:	60f8      	str	r0, [r7, #12]
 801508c:	60b9      	str	r1, [r7, #8]
 801508e:	607a      	str	r2, [r7, #4]
 8015090:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8015092:	2300      	movs	r3, #0
 8015094:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	6818      	ldr	r0, [r3, #0]
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	b29a      	uxth	r2, r3
 801509e:	683b      	ldr	r3, [r7, #0]
 80150a0:	68b9      	ldr	r1, [r7, #8]
 80150a2:	f7f9 f87e 	bl	800e1a2 <HAL_SPI_Transmit>
 80150a6:	4603      	mov	r3, r0
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d101      	bne.n	80150b0 <SPIF_Transmit+0x2c>
  {
    retVal = true;
 80150ac:	2301      	movs	r3, #1
 80150ae:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80150b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80150b2:	4618      	mov	r0, r3
 80150b4:	3718      	adds	r7, #24
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}

080150ba <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 80150ba:	b580      	push	{r7, lr}
 80150bc:	b086      	sub	sp, #24
 80150be:	af00      	add	r7, sp, #0
 80150c0:	60f8      	str	r0, [r7, #12]
 80150c2:	60b9      	str	r1, [r7, #8]
 80150c4:	607a      	str	r2, [r7, #4]
 80150c6:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80150c8:	2300      	movs	r3, #0
 80150ca:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	6818      	ldr	r0, [r3, #0]
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	b29a      	uxth	r2, r3
 80150d4:	683b      	ldr	r3, [r7, #0]
 80150d6:	68b9      	ldr	r1, [r7, #8]
 80150d8:	f7f9 f9d9 	bl	800e48e <HAL_SPI_Receive>
 80150dc:	4603      	mov	r3, r0
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d101      	bne.n	80150e6 <SPIF_Receive+0x2c>
  {
    retVal = true;
 80150e2:	2301      	movs	r3, #1
 80150e4:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80150e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	3718      	adds	r7, #24
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b084      	sub	sp, #16
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80150f8:	2301      	movs	r3, #1
 80150fa:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 80150fc:	2306      	movs	r3, #6
 80150fe:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8015100:	2100      	movs	r1, #0
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	f7ff ff83 	bl	801500e <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8015108:	f107 010c 	add.w	r1, r7, #12
 801510c:	2364      	movs	r3, #100	@ 0x64
 801510e:	2201      	movs	r2, #1
 8015110:	6878      	ldr	r0, [r7, #4]
 8015112:	f7ff ffb7 	bl	8015084 <SPIF_Transmit>
 8015116:	4603      	mov	r3, r0
 8015118:	f083 0301 	eor.w	r3, r3, #1
 801511c:	b2db      	uxtb	r3, r3
 801511e:	2b00      	cmp	r3, #0
 8015120:	d001      	beq.n	8015126 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8015122:	2300      	movs	r3, #0
 8015124:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8015126:	2101      	movs	r1, #1
 8015128:	6878      	ldr	r0, [r7, #4]
 801512a:	f7ff ff70 	bl	801500e <SPIF_CsPin>
  return retVal;
 801512e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015130:	4618      	mov	r0, r3
 8015132:	3710      	adds	r7, #16
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}

08015138 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b084      	sub	sp, #16
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8015140:	2301      	movs	r3, #1
 8015142:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8015144:	2304      	movs	r3, #4
 8015146:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8015148:	2100      	movs	r1, #0
 801514a:	6878      	ldr	r0, [r7, #4]
 801514c:	f7ff ff5f 	bl	801500e <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8015150:	f107 010c 	add.w	r1, r7, #12
 8015154:	2364      	movs	r3, #100	@ 0x64
 8015156:	2201      	movs	r2, #1
 8015158:	6878      	ldr	r0, [r7, #4]
 801515a:	f7ff ff93 	bl	8015084 <SPIF_Transmit>
 801515e:	4603      	mov	r3, r0
 8015160:	f083 0301 	eor.w	r3, r3, #1
 8015164:	b2db      	uxtb	r3, r3
 8015166:	2b00      	cmp	r3, #0
 8015168:	d001      	beq.n	801516e <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 801516a:	2300      	movs	r3, #0
 801516c:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 801516e:	2101      	movs	r1, #1
 8015170:	6878      	ldr	r0, [r7, #4]
 8015172:	f7ff ff4c 	bl	801500e <SPIF_CsPin>
  return retVal;
 8015176:	7bfb      	ldrb	r3, [r7, #15]
}
 8015178:	4618      	mov	r0, r3
 801517a:	3710      	adds	r7, #16
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}

08015180 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b086      	sub	sp, #24
 8015184:	af02      	add	r7, sp, #8
 8015186:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8015188:	2300      	movs	r3, #0
 801518a:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 801518c:	f24a 5305 	movw	r3, #42245	@ 0xa505
 8015190:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8015192:	2100      	movs	r1, #0
 8015194:	6878      	ldr	r0, [r7, #4]
 8015196:	f7ff ff3a 	bl	801500e <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 801519a:	f107 0208 	add.w	r2, r7, #8
 801519e:	f107 010c 	add.w	r1, r7, #12
 80151a2:	2364      	movs	r3, #100	@ 0x64
 80151a4:	9300      	str	r3, [sp, #0]
 80151a6:	2302      	movs	r3, #2
 80151a8:	6878      	ldr	r0, [r7, #4]
 80151aa:	f7ff ff4d 	bl	8015048 <SPIF_TransmitReceive>
 80151ae:	4603      	mov	r3, r0
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d001      	beq.n	80151b8 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 80151b4:	7a7b      	ldrb	r3, [r7, #9]
 80151b6:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 80151b8:	2101      	movs	r1, #1
 80151ba:	6878      	ldr	r0, [r7, #4]
 80151bc:	f7ff ff27 	bl	801500e <SPIF_CsPin>
  return retVal;
 80151c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80151c2:	4618      	mov	r0, r3
 80151c4:	3710      	adds	r7, #16
 80151c6:	46bd      	mov	sp, r7
 80151c8:	bd80      	pop	{r7, pc}

080151ca <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 80151ca:	b580      	push	{r7, lr}
 80151cc:	b084      	sub	sp, #16
 80151ce:	af00      	add	r7, sp, #0
 80151d0:	6078      	str	r0, [r7, #4]
 80151d2:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 80151d4:	2300      	movs	r3, #0
 80151d6:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 80151d8:	f7f1 fff4 	bl	80071c4 <HAL_GetTick>
 80151dc:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 80151de:	2001      	movs	r0, #1
 80151e0:	f7ff feea 	bl	8014fb8 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 80151e4:	f7f1 ffee 	bl	80071c4 <HAL_GetTick>
 80151e8:	4602      	mov	r2, r0
 80151ea:	68bb      	ldr	r3, [r7, #8]
 80151ec:	1ad3      	subs	r3, r2, r3
 80151ee:	683a      	ldr	r2, [r7, #0]
 80151f0:	429a      	cmp	r2, r3
 80151f2:	d90a      	bls.n	801520a <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f7ff ffc3 	bl	8015180 <SPIF_ReadReg1>
 80151fa:	4603      	mov	r3, r0
 80151fc:	f003 0301 	and.w	r3, r3, #1
 8015200:	2b00      	cmp	r3, #0
 8015202:	d1ec      	bne.n	80151de <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 8015204:	2301      	movs	r3, #1
 8015206:	73fb      	strb	r3, [r7, #15]
      break;
 8015208:	e000      	b.n	801520c <SPIF_WaitForWriting+0x42>
      break;
 801520a:	bf00      	nop
    }
  }
  return retVal;
 801520c:	7bfb      	ldrb	r3, [r7, #15]
}
 801520e:	4618      	mov	r0, r3
 8015210:	3710      	adds	r7, #16
 8015212:	46bd      	mov	sp, r7
 8015214:	bd80      	pop	{r7, pc}
	...

08015218 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b088      	sub	sp, #32
 801521c:	af02      	add	r7, sp, #8
 801521e:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8015220:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 8015224:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 8015226:	2300      	movs	r3, #0
 8015228:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 801522a:	2100      	movs	r1, #0
 801522c:	6878      	ldr	r0, [r7, #4]
 801522e:	f7ff feee 	bl	801500e <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 8015232:	f107 020c 	add.w	r2, r7, #12
 8015236:	f107 0110 	add.w	r1, r7, #16
 801523a:	2364      	movs	r3, #100	@ 0x64
 801523c:	9300      	str	r3, [sp, #0]
 801523e:	2304      	movs	r3, #4
 8015240:	6878      	ldr	r0, [r7, #4]
 8015242:	f7ff ff01 	bl	8015048 <SPIF_TransmitReceive>
 8015246:	4603      	mov	r3, r0
 8015248:	f083 0301 	eor.w	r3, r3, #1
 801524c:	b2db      	uxtb	r3, r3
 801524e:	2b00      	cmp	r3, #0
 8015250:	d004      	beq.n	801525c <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8015252:	2101      	movs	r1, #1
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f7ff feda 	bl	801500e <SPIF_CsPin>
      break;
 801525a:	e16f      	b.n	801553c <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 801525c:	2101      	movs	r1, #1
 801525e:	6878      	ldr	r0, [r7, #4]
 8015260:	f7ff fed5 	bl	801500e <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8015264:	7b7a      	ldrb	r2, [r7, #13]
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 801526a:	7bba      	ldrb	r2, [r7, #14]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8015270:	7bfa      	ldrb	r2, [r7, #15]
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	7a1b      	ldrb	r3, [r3, #8]
 801527a:	2bef      	cmp	r3, #239	@ 0xef
 801527c:	f000 80f0 	beq.w	8015460 <SPIF_FindChip+0x248>
 8015280:	2bef      	cmp	r3, #239	@ 0xef
 8015282:	f300 80e9 	bgt.w	8015458 <SPIF_FindChip+0x240>
 8015286:	2bc8      	cmp	r3, #200	@ 0xc8
 8015288:	f300 80e6 	bgt.w	8015458 <SPIF_FindChip+0x240>
 801528c:	2b85      	cmp	r3, #133	@ 0x85
 801528e:	da0c      	bge.n	80152aa <SPIF_FindChip+0x92>
 8015290:	2b62      	cmp	r3, #98	@ 0x62
 8015292:	f000 80e7 	beq.w	8015464 <SPIF_FindChip+0x24c>
 8015296:	2b62      	cmp	r3, #98	@ 0x62
 8015298:	f300 80de 	bgt.w	8015458 <SPIF_FindChip+0x240>
 801529c:	2b20      	cmp	r3, #32
 801529e:	f300 80d9 	bgt.w	8015454 <SPIF_FindChip+0x23c>
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	f300 8090 	bgt.w	80153c8 <SPIF_FindChip+0x1b0>
 80152a8:	e0d6      	b.n	8015458 <SPIF_FindChip+0x240>
 80152aa:	3b85      	subs	r3, #133	@ 0x85
 80152ac:	2b43      	cmp	r3, #67	@ 0x43
 80152ae:	f200 80d3 	bhi.w	8015458 <SPIF_FindChip+0x240>
 80152b2:	a201      	add	r2, pc, #4	@ (adr r2, 80152b8 <SPIF_FindChip+0xa0>)
 80152b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152b8:	08015469 	.word	0x08015469
 80152bc:	08015459 	.word	0x08015459
 80152c0:	08015459 	.word	0x08015459
 80152c4:	08015459 	.word	0x08015459
 80152c8:	08015469 	.word	0x08015469
 80152cc:	08015459 	.word	0x08015459
 80152d0:	08015459 	.word	0x08015459
 80152d4:	08015469 	.word	0x08015469
 80152d8:	08015459 	.word	0x08015459
 80152dc:	08015459 	.word	0x08015459
 80152e0:	08015459 	.word	0x08015459
 80152e4:	08015459 	.word	0x08015459
 80152e8:	08015459 	.word	0x08015459
 80152ec:	08015459 	.word	0x08015459
 80152f0:	08015459 	.word	0x08015459
 80152f4:	08015459 	.word	0x08015459
 80152f8:	08015459 	.word	0x08015459
 80152fc:	08015459 	.word	0x08015459
 8015300:	08015459 	.word	0x08015459
 8015304:	08015459 	.word	0x08015459
 8015308:	08015459 	.word	0x08015459
 801530c:	08015459 	.word	0x08015459
 8015310:	08015459 	.word	0x08015459
 8015314:	08015459 	.word	0x08015459
 8015318:	08015469 	.word	0x08015469
 801531c:	08015459 	.word	0x08015459
 8015320:	08015459 	.word	0x08015459
 8015324:	08015459 	.word	0x08015459
 8015328:	08015469 	.word	0x08015469
 801532c:	08015459 	.word	0x08015459
 8015330:	08015459 	.word	0x08015459
 8015334:	08015459 	.word	0x08015459
 8015338:	08015459 	.word	0x08015459
 801533c:	08015459 	.word	0x08015459
 8015340:	08015459 	.word	0x08015459
 8015344:	08015459 	.word	0x08015459
 8015348:	08015459 	.word	0x08015459
 801534c:	08015459 	.word	0x08015459
 8015350:	08015459 	.word	0x08015459
 8015354:	08015459 	.word	0x08015459
 8015358:	08015469 	.word	0x08015469
 801535c:	08015459 	.word	0x08015459
 8015360:	08015459 	.word	0x08015459
 8015364:	08015459 	.word	0x08015459
 8015368:	08015459 	.word	0x08015459
 801536c:	08015459 	.word	0x08015459
 8015370:	08015459 	.word	0x08015459
 8015374:	08015459 	.word	0x08015459
 8015378:	08015459 	.word	0x08015459
 801537c:	08015459 	.word	0x08015459
 8015380:	08015459 	.word	0x08015459
 8015384:	08015459 	.word	0x08015459
 8015388:	08015459 	.word	0x08015459
 801538c:	08015459 	.word	0x08015459
 8015390:	08015459 	.word	0x08015459
 8015394:	08015459 	.word	0x08015459
 8015398:	08015459 	.word	0x08015459
 801539c:	08015459 	.word	0x08015459
 80153a0:	08015469 	.word	0x08015469
 80153a4:	08015459 	.word	0x08015459
 80153a8:	08015459 	.word	0x08015459
 80153ac:	08015469 	.word	0x08015469
 80153b0:	08015459 	.word	0x08015459
 80153b4:	08015459 	.word	0x08015459
 80153b8:	08015459 	.word	0x08015459
 80153bc:	08015459 	.word	0x08015459
 80153c0:	08015459 	.word	0x08015459
 80153c4:	08015469 	.word	0x08015469
 80153c8:	3b01      	subs	r3, #1
 80153ca:	2b1f      	cmp	r3, #31
 80153cc:	d844      	bhi.n	8015458 <SPIF_FindChip+0x240>
 80153ce:	a201      	add	r2, pc, #4	@ (adr r2, 80153d4 <SPIF_FindChip+0x1bc>)
 80153d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153d4:	0801546d 	.word	0x0801546d
 80153d8:	08015459 	.word	0x08015459
 80153dc:	08015459 	.word	0x08015459
 80153e0:	0801546d 	.word	0x0801546d
 80153e4:	08015459 	.word	0x08015459
 80153e8:	08015459 	.word	0x08015459
 80153ec:	08015459 	.word	0x08015459
 80153f0:	08015459 	.word	0x08015459
 80153f4:	08015459 	.word	0x08015459
 80153f8:	08015459 	.word	0x08015459
 80153fc:	08015459 	.word	0x08015459
 8015400:	08015459 	.word	0x08015459
 8015404:	08015459 	.word	0x08015459
 8015408:	08015459 	.word	0x08015459
 801540c:	08015459 	.word	0x08015459
 8015410:	08015459 	.word	0x08015459
 8015414:	08015459 	.word	0x08015459
 8015418:	08015459 	.word	0x08015459
 801541c:	08015459 	.word	0x08015459
 8015420:	08015459 	.word	0x08015459
 8015424:	08015459 	.word	0x08015459
 8015428:	08015459 	.word	0x08015459
 801542c:	08015459 	.word	0x08015459
 8015430:	08015459 	.word	0x08015459
 8015434:	08015459 	.word	0x08015459
 8015438:	08015459 	.word	0x08015459
 801543c:	08015459 	.word	0x08015459
 8015440:	0801546d 	.word	0x0801546d
 8015444:	08015459 	.word	0x08015459
 8015448:	08015459 	.word	0x08015459
 801544c:	08015459 	.word	0x08015459
 8015450:	0801546d 	.word	0x0801546d
 8015454:	2b37      	cmp	r3, #55	@ 0x37
 8015456:	d00b      	beq.n	8015470 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2200      	movs	r2, #0
 801545c:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 801545e:	e008      	b.n	8015472 <SPIF_FindChip+0x25a>
      break;
 8015460:	bf00      	nop
 8015462:	e006      	b.n	8015472 <SPIF_FindChip+0x25a>
      break;
 8015464:	bf00      	nop
 8015466:	e004      	b.n	8015472 <SPIF_FindChip+0x25a>
      break;
 8015468:	bf00      	nop
 801546a:	e002      	b.n	8015472 <SPIF_FindChip+0x25a>
      break;
 801546c:	bf00      	nop
 801546e:	e000      	b.n	8015472 <SPIF_FindChip+0x25a>
      break;
 8015470:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	7a5b      	ldrb	r3, [r3, #9]
 8015476:	3b11      	subs	r3, #17
 8015478:	2b0f      	cmp	r3, #15
 801547a:	d84e      	bhi.n	801551a <SPIF_FindChip+0x302>
 801547c:	a201      	add	r2, pc, #4	@ (adr r2, 8015484 <SPIF_FindChip+0x26c>)
 801547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015482:	bf00      	nop
 8015484:	080154c5 	.word	0x080154c5
 8015488:	080154cd 	.word	0x080154cd
 801548c:	080154d5 	.word	0x080154d5
 8015490:	080154dd 	.word	0x080154dd
 8015494:	080154e5 	.word	0x080154e5
 8015498:	080154ed 	.word	0x080154ed
 801549c:	080154f5 	.word	0x080154f5
 80154a0:	080154fd 	.word	0x080154fd
 80154a4:	08015507 	.word	0x08015507
 80154a8:	0801551b 	.word	0x0801551b
 80154ac:	0801551b 	.word	0x0801551b
 80154b0:	0801551b 	.word	0x0801551b
 80154b4:	0801551b 	.word	0x0801551b
 80154b8:	0801551b 	.word	0x0801551b
 80154bc:	0801551b 	.word	0x0801551b
 80154c0:	08015511 	.word	0x08015511
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	2202      	movs	r2, #2
 80154c8:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 80154ca:	e02a      	b.n	8015522 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	2204      	movs	r2, #4
 80154d0:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 80154d2:	e026      	b.n	8015522 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	2208      	movs	r2, #8
 80154d8:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 80154da:	e022      	b.n	8015522 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2210      	movs	r2, #16
 80154e0:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 80154e2:	e01e      	b.n	8015522 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	2220      	movs	r2, #32
 80154e8:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 80154ea:	e01a      	b.n	8015522 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	2240      	movs	r2, #64	@ 0x40
 80154f0:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 80154f2:	e016      	b.n	8015522 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	2280      	movs	r2, #128	@ 0x80
 80154f8:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 80154fa:	e012      	b.n	8015522 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015502:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 8015504:	e00d      	b.n	8015522 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801550c:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 801550e:	e008      	b.n	8015522 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015516:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8015518:	e003      	b.n	8015522 <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	2200      	movs	r2, #0
 801551e:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8015520:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	69db      	ldr	r3, [r3, #28]
 8015526:	011a      	lsls	r2, r3, #4
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	699b      	ldr	r3, [r3, #24]
 8015530:	031b      	lsls	r3, r3, #12
 8015532:	0a1a      	lsrs	r2, r3, #8
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8015538:	2301      	movs	r3, #1
 801553a:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 801553c:	7dfb      	ldrb	r3, [r7, #23]
}
 801553e:	4618      	mov	r0, r3
 8015540:	3718      	adds	r7, #24
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}
 8015546:	bf00      	nop

08015548 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b08a      	sub	sp, #40	@ 0x28
 801554c:	af00      	add	r7, sp, #0
 801554e:	60f8      	str	r0, [r7, #12]
 8015550:	60b9      	str	r1, [r7, #8]
 8015552:	607a      	str	r2, [r7, #4]
 8015554:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8015556:	2300      	movs	r3, #0
 8015558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 801555c:	2300      	movs	r3, #0
 801555e:	623b      	str	r3, [r7, #32]
 8015560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015562:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8015566:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	695b      	ldr	r3, [r3, #20]
 801556c:	68ba      	ldr	r2, [r7, #8]
 801556e:	429a      	cmp	r2, r3
 8015570:	f080 8084 	bcs.w	801567c <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8015574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015576:	2bff      	cmp	r3, #255	@ 0xff
 8015578:	f200 8082 	bhi.w	8015680 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 801557c:	683a      	ldr	r2, [r7, #0]
 801557e:	69fb      	ldr	r3, [r7, #28]
 8015580:	429a      	cmp	r2, r3
 8015582:	d901      	bls.n	8015588 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8015584:	69fb      	ldr	r3, [r7, #28]
 8015586:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8015588:	68bb      	ldr	r3, [r7, #8]
 801558a:	021b      	lsls	r3, r3, #8
 801558c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801558e:	4413      	add	r3, r2
 8015590:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 8015592:	68f8      	ldr	r0, [r7, #12]
 8015594:	f7ff fdac 	bl	80150f0 <SPIF_WriteEnable>
 8015598:	4603      	mov	r3, r0
 801559a:	f083 0301 	eor.w	r3, r3, #1
 801559e:	b2db      	uxtb	r3, r3
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d16f      	bne.n	8015684 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80155a4:	2100      	movs	r1, #0
 80155a6:	68f8      	ldr	r0, [r7, #12]
 80155a8:	f7ff fd31 	bl	801500e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	69db      	ldr	r3, [r3, #28]
 80155b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80155b4:	d322      	bcc.n	80155fc <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 80155b6:	2312      	movs	r3, #18
 80155b8:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 80155ba:	6a3b      	ldr	r3, [r7, #32]
 80155bc:	0e1b      	lsrs	r3, r3, #24
 80155be:	b2db      	uxtb	r3, r3
 80155c0:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 80155c2:	6a3b      	ldr	r3, [r7, #32]
 80155c4:	0c1b      	lsrs	r3, r3, #16
 80155c6:	b2db      	uxtb	r3, r3
 80155c8:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 80155ca:	6a3b      	ldr	r3, [r7, #32]
 80155cc:	0a1b      	lsrs	r3, r3, #8
 80155ce:	b2db      	uxtb	r3, r3
 80155d0:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 80155d2:	6a3b      	ldr	r3, [r7, #32]
 80155d4:	b2db      	uxtb	r3, r3
 80155d6:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80155d8:	f107 0114 	add.w	r1, r7, #20
 80155dc:	2364      	movs	r3, #100	@ 0x64
 80155de:	2205      	movs	r2, #5
 80155e0:	68f8      	ldr	r0, [r7, #12]
 80155e2:	f7ff fd4f 	bl	8015084 <SPIF_Transmit>
 80155e6:	4603      	mov	r3, r0
 80155e8:	f083 0301 	eor.w	r3, r3, #1
 80155ec:	b2db      	uxtb	r3, r3
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d023      	beq.n	801563a <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80155f2:	2101      	movs	r1, #1
 80155f4:	68f8      	ldr	r0, [r7, #12]
 80155f6:	f7ff fd0a 	bl	801500e <SPIF_CsPin>
        break;
 80155fa:	e044      	b.n	8015686 <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 80155fc:	2302      	movs	r3, #2
 80155fe:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8015600:	6a3b      	ldr	r3, [r7, #32]
 8015602:	0c1b      	lsrs	r3, r3, #16
 8015604:	b2db      	uxtb	r3, r3
 8015606:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8015608:	6a3b      	ldr	r3, [r7, #32]
 801560a:	0a1b      	lsrs	r3, r3, #8
 801560c:	b2db      	uxtb	r3, r3
 801560e:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8015610:	6a3b      	ldr	r3, [r7, #32]
 8015612:	b2db      	uxtb	r3, r3
 8015614:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8015616:	f107 0114 	add.w	r1, r7, #20
 801561a:	2364      	movs	r3, #100	@ 0x64
 801561c:	2204      	movs	r2, #4
 801561e:	68f8      	ldr	r0, [r7, #12]
 8015620:	f7ff fd30 	bl	8015084 <SPIF_Transmit>
 8015624:	4603      	mov	r3, r0
 8015626:	f083 0301 	eor.w	r3, r3, #1
 801562a:	b2db      	uxtb	r3, r3
 801562c:	2b00      	cmp	r3, #0
 801562e:	d004      	beq.n	801563a <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8015630:	2101      	movs	r1, #1
 8015632:	68f8      	ldr	r0, [r7, #12]
 8015634:	f7ff fceb 	bl	801500e <SPIF_CsPin>
        break;
 8015638:	e025      	b.n	8015686 <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 801563a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801563e:	683a      	ldr	r2, [r7, #0]
 8015640:	6879      	ldr	r1, [r7, #4]
 8015642:	68f8      	ldr	r0, [r7, #12]
 8015644:	f7ff fd1e 	bl	8015084 <SPIF_Transmit>
 8015648:	4603      	mov	r3, r0
 801564a:	f083 0301 	eor.w	r3, r3, #1
 801564e:	b2db      	uxtb	r3, r3
 8015650:	2b00      	cmp	r3, #0
 8015652:	d004      	beq.n	801565e <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8015654:	2101      	movs	r1, #1
 8015656:	68f8      	ldr	r0, [r7, #12]
 8015658:	f7ff fcd9 	bl	801500e <SPIF_CsPin>
      break;
 801565c:	e013      	b.n	8015686 <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 801565e:	2101      	movs	r1, #1
 8015660:	68f8      	ldr	r0, [r7, #12]
 8015662:	f7ff fcd4 	bl	801500e <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8015666:	2164      	movs	r1, #100	@ 0x64
 8015668:	68f8      	ldr	r0, [r7, #12]
 801566a:	f7ff fdae 	bl	80151ca <SPIF_WaitForWriting>
 801566e:	4603      	mov	r3, r0
 8015670:	2b00      	cmp	r3, #0
 8015672:	d008      	beq.n	8015686 <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8015674:	2301      	movs	r3, #1
 8015676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801567a:	e004      	b.n	8015686 <SPIF_WriteFn+0x13e>
      break;
 801567c:	bf00      	nop
 801567e:	e002      	b.n	8015686 <SPIF_WriteFn+0x13e>
      break;
 8015680:	bf00      	nop
 8015682:	e000      	b.n	8015686 <SPIF_WriteFn+0x13e>
      break;
 8015684:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8015686:	68f8      	ldr	r0, [r7, #12]
 8015688:	f7ff fd56 	bl	8015138 <SPIF_WriteDisable>
  return retVal;
 801568c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8015690:	4618      	mov	r0, r3
 8015692:	3728      	adds	r7, #40	@ 0x28
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}

08015698 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b086      	sub	sp, #24
 801569c:	af00      	add	r7, sp, #0
 801569e:	60f8      	str	r0, [r7, #12]
 80156a0:	60b9      	str	r1, [r7, #8]
 80156a2:	607a      	str	r2, [r7, #4]
 80156a4:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80156a6:	2300      	movs	r3, #0
 80156a8:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 80156aa:	2100      	movs	r1, #0
 80156ac:	68f8      	ldr	r0, [r7, #12]
 80156ae:	f7ff fcae 	bl	801500e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	69db      	ldr	r3, [r3, #28]
 80156b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80156ba:	d322      	bcc.n	8015702 <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 80156bc:	2313      	movs	r3, #19
 80156be:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	0e1b      	lsrs	r3, r3, #24
 80156c4:	b2db      	uxtb	r3, r3
 80156c6:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 80156c8:	68bb      	ldr	r3, [r7, #8]
 80156ca:	0c1b      	lsrs	r3, r3, #16
 80156cc:	b2db      	uxtb	r3, r3
 80156ce:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	0a1b      	lsrs	r3, r3, #8
 80156d4:	b2db      	uxtb	r3, r3
 80156d6:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	b2db      	uxtb	r3, r3
 80156dc:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80156de:	f107 0110 	add.w	r1, r7, #16
 80156e2:	2364      	movs	r3, #100	@ 0x64
 80156e4:	2205      	movs	r2, #5
 80156e6:	68f8      	ldr	r0, [r7, #12]
 80156e8:	f7ff fccc 	bl	8015084 <SPIF_Transmit>
 80156ec:	4603      	mov	r3, r0
 80156ee:	f083 0301 	eor.w	r3, r3, #1
 80156f2:	b2db      	uxtb	r3, r3
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d023      	beq.n	8015740 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 80156f8:	2101      	movs	r1, #1
 80156fa:	68f8      	ldr	r0, [r7, #12]
 80156fc:	f7ff fc87 	bl	801500e <SPIF_CsPin>
        break;
 8015700:	e036      	b.n	8015770 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 8015702:	2303      	movs	r3, #3
 8015704:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 8015706:	68bb      	ldr	r3, [r7, #8]
 8015708:	0c1b      	lsrs	r3, r3, #16
 801570a:	b2db      	uxtb	r3, r3
 801570c:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	0a1b      	lsrs	r3, r3, #8
 8015712:	b2db      	uxtb	r3, r3
 8015714:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 8015716:	68bb      	ldr	r3, [r7, #8]
 8015718:	b2db      	uxtb	r3, r3
 801571a:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 801571c:	f107 0110 	add.w	r1, r7, #16
 8015720:	2364      	movs	r3, #100	@ 0x64
 8015722:	2204      	movs	r2, #4
 8015724:	68f8      	ldr	r0, [r7, #12]
 8015726:	f7ff fcad 	bl	8015084 <SPIF_Transmit>
 801572a:	4603      	mov	r3, r0
 801572c:	f083 0301 	eor.w	r3, r3, #1
 8015730:	b2db      	uxtb	r3, r3
 8015732:	2b00      	cmp	r3, #0
 8015734:	d004      	beq.n	8015740 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8015736:	2101      	movs	r1, #1
 8015738:	68f8      	ldr	r0, [r7, #12]
 801573a:	f7ff fc68 	bl	801500e <SPIF_CsPin>
        break;
 801573e:	e017      	b.n	8015770 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8015740:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015744:	683a      	ldr	r2, [r7, #0]
 8015746:	6879      	ldr	r1, [r7, #4]
 8015748:	68f8      	ldr	r0, [r7, #12]
 801574a:	f7ff fcb6 	bl	80150ba <SPIF_Receive>
 801574e:	4603      	mov	r3, r0
 8015750:	f083 0301 	eor.w	r3, r3, #1
 8015754:	b2db      	uxtb	r3, r3
 8015756:	2b00      	cmp	r3, #0
 8015758:	d004      	beq.n	8015764 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 801575a:	2101      	movs	r1, #1
 801575c:	68f8      	ldr	r0, [r7, #12]
 801575e:	f7ff fc56 	bl	801500e <SPIF_CsPin>
      break;
 8015762:	e005      	b.n	8015770 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8015764:	2101      	movs	r1, #1
 8015766:	68f8      	ldr	r0, [r7, #12]
 8015768:	f7ff fc51 	bl	801500e <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 801576c:	2301      	movs	r3, #1
 801576e:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8015770:	7dfb      	ldrb	r3, [r7, #23]
}
 8015772:	4618      	mov	r0, r3
 8015774:	3718      	adds	r7, #24
 8015776:	46bd      	mov	sp, r7
 8015778:	bd80      	pop	{r7, pc}

0801577a <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 801577a:	b580      	push	{r7, lr}
 801577c:	b086      	sub	sp, #24
 801577e:	af00      	add	r7, sp, #0
 8015780:	60f8      	str	r0, [r7, #12]
 8015782:	60b9      	str	r1, [r7, #8]
 8015784:	607a      	str	r2, [r7, #4]
 8015786:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8015788:	2300      	movs	r3, #0
 801578a:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d03a      	beq.n	8015808 <SPIF_Init+0x8e>
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d037      	beq.n	8015808 <SPIF_Init+0x8e>
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d034      	beq.n	8015808 <SPIF_Init+0x8e>
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	7a9b      	ldrb	r3, [r3, #10]
 80157a2:	2b01      	cmp	r3, #1
 80157a4:	d030      	beq.n	8015808 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 80157a6:	2220      	movs	r2, #32
 80157a8:	2100      	movs	r1, #0
 80157aa:	68f8      	ldr	r0, [r7, #12]
 80157ac:	f002 fdc5 	bl	801833a <memset>
    Handle->HSpi = HSpi;
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	68ba      	ldr	r2, [r7, #8]
 80157b4:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	687a      	ldr	r2, [r7, #4]
 80157ba:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 80157bc:	887a      	ldrh	r2, [r7, #2]
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 80157c2:	2101      	movs	r1, #1
 80157c4:	68f8      	ldr	r0, [r7, #12]
 80157c6:	f7ff fc22 	bl	801500e <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 80157ca:	e002      	b.n	80157d2 <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 80157cc:	2001      	movs	r0, #1
 80157ce:	f7ff fbf3 	bl	8014fb8 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 80157d2:	f7f1 fcf7 	bl	80071c4 <HAL_GetTick>
 80157d6:	4603      	mov	r3, r0
 80157d8:	2b13      	cmp	r3, #19
 80157da:	d9f7      	bls.n	80157cc <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 80157dc:	68f8      	ldr	r0, [r7, #12]
 80157de:	f7ff fcab 	bl	8015138 <SPIF_WriteDisable>
 80157e2:	4603      	mov	r3, r0
 80157e4:	f083 0301 	eor.w	r3, r3, #1
 80157e8:	b2db      	uxtb	r3, r3
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d10b      	bne.n	8015806 <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 80157ee:	68f8      	ldr	r0, [r7, #12]
 80157f0:	f7ff fd12 	bl	8015218 <SPIF_FindChip>
 80157f4:	4603      	mov	r3, r0
 80157f6:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 80157f8:	7dfb      	ldrb	r3, [r7, #23]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d004      	beq.n	8015808 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	2201      	movs	r2, #1
 8015802:	729a      	strb	r2, [r3, #10]
 8015804:	e000      	b.n	8015808 <SPIF_Init+0x8e>
      break;
 8015806:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8015808:	7dfb      	ldrb	r3, [r7, #23]
}
 801580a:	4618      	mov	r0, r3
 801580c:	3718      	adds	r7, #24
 801580e:	46bd      	mov	sp, r7
 8015810:	bd80      	pop	{r7, pc}

08015812 <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 8015812:	b580      	push	{r7, lr}
 8015814:	b086      	sub	sp, #24
 8015816:	af00      	add	r7, sp, #0
 8015818:	6078      	str	r0, [r7, #4]
 801581a:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	f7ff fbd6 	bl	8014fce <SPIF_Lock>
  bool retVal = false;
 8015822:	2300      	movs	r3, #0
 8015824:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 8015826:	683b      	ldr	r3, [r7, #0]
 8015828:	031b      	lsls	r3, r3, #12
 801582a:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	699b      	ldr	r3, [r3, #24]
 8015830:	683a      	ldr	r2, [r7, #0]
 8015832:	429a      	cmp	r2, r3
 8015834:	d262      	bcs.n	80158fc <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 8015836:	6878      	ldr	r0, [r7, #4]
 8015838:	f7ff fc5a 	bl	80150f0 <SPIF_WriteEnable>
 801583c:	4603      	mov	r3, r0
 801583e:	f083 0301 	eor.w	r3, r3, #1
 8015842:	b2db      	uxtb	r3, r3
 8015844:	2b00      	cmp	r3, #0
 8015846:	d15b      	bne.n	8015900 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8015848:	2100      	movs	r1, #0
 801584a:	6878      	ldr	r0, [r7, #4]
 801584c:	f7ff fbdf 	bl	801500e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	69db      	ldr	r3, [r3, #28]
 8015854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015858:	d322      	bcc.n	80158a0 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 801585a:	2321      	movs	r3, #33	@ 0x21
 801585c:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 801585e:	693b      	ldr	r3, [r7, #16]
 8015860:	0e1b      	lsrs	r3, r3, #24
 8015862:	b2db      	uxtb	r3, r3
 8015864:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 8015866:	693b      	ldr	r3, [r7, #16]
 8015868:	0c1b      	lsrs	r3, r3, #16
 801586a:	b2db      	uxtb	r3, r3
 801586c:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 801586e:	693b      	ldr	r3, [r7, #16]
 8015870:	0a1b      	lsrs	r3, r3, #8
 8015872:	b2db      	uxtb	r3, r3
 8015874:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 8015876:	693b      	ldr	r3, [r7, #16]
 8015878:	b2db      	uxtb	r3, r3
 801587a:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 801587c:	f107 0108 	add.w	r1, r7, #8
 8015880:	2364      	movs	r3, #100	@ 0x64
 8015882:	2205      	movs	r2, #5
 8015884:	6878      	ldr	r0, [r7, #4]
 8015886:	f7ff fbfd 	bl	8015084 <SPIF_Transmit>
 801588a:	4603      	mov	r3, r0
 801588c:	f083 0301 	eor.w	r3, r3, #1
 8015890:	b2db      	uxtb	r3, r3
 8015892:	2b00      	cmp	r3, #0
 8015894:	d023      	beq.n	80158de <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8015896:	2101      	movs	r1, #1
 8015898:	6878      	ldr	r0, [r7, #4]
 801589a:	f7ff fbb8 	bl	801500e <SPIF_CsPin>
        break;
 801589e:	e030      	b.n	8015902 <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 80158a0:	2320      	movs	r3, #32
 80158a2:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 80158a4:	693b      	ldr	r3, [r7, #16]
 80158a6:	0c1b      	lsrs	r3, r3, #16
 80158a8:	b2db      	uxtb	r3, r3
 80158aa:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 80158ac:	693b      	ldr	r3, [r7, #16]
 80158ae:	0a1b      	lsrs	r3, r3, #8
 80158b0:	b2db      	uxtb	r3, r3
 80158b2:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 80158b4:	693b      	ldr	r3, [r7, #16]
 80158b6:	b2db      	uxtb	r3, r3
 80158b8:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80158ba:	f107 0108 	add.w	r1, r7, #8
 80158be:	2364      	movs	r3, #100	@ 0x64
 80158c0:	2204      	movs	r2, #4
 80158c2:	6878      	ldr	r0, [r7, #4]
 80158c4:	f7ff fbde 	bl	8015084 <SPIF_Transmit>
 80158c8:	4603      	mov	r3, r0
 80158ca:	f083 0301 	eor.w	r3, r3, #1
 80158ce:	b2db      	uxtb	r3, r3
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d004      	beq.n	80158de <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80158d4:	2101      	movs	r1, #1
 80158d6:	6878      	ldr	r0, [r7, #4]
 80158d8:	f7ff fb99 	bl	801500e <SPIF_CsPin>
        break;
 80158dc:	e011      	b.n	8015902 <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 80158de:	2101      	movs	r1, #1
 80158e0:	6878      	ldr	r0, [r7, #4]
 80158e2:	f7ff fb94 	bl	801500e <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 80158e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80158ea:	6878      	ldr	r0, [r7, #4]
 80158ec:	f7ff fc6d 	bl	80151ca <SPIF_WaitForWriting>
 80158f0:	4603      	mov	r3, r0
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d005      	beq.n	8015902 <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 80158f6:	2301      	movs	r3, #1
 80158f8:	75fb      	strb	r3, [r7, #23]
 80158fa:	e002      	b.n	8015902 <SPIF_EraseSector+0xf0>
      break;
 80158fc:	bf00      	nop
 80158fe:	e000      	b.n	8015902 <SPIF_EraseSector+0xf0>
      break;
 8015900:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8015902:	6878      	ldr	r0, [r7, #4]
 8015904:	f7ff fc18 	bl	8015138 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8015908:	6878      	ldr	r0, [r7, #4]
 801590a:	f7ff fb73 	bl	8014ff4 <SPIF_UnLock>
  return retVal;
 801590e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015910:	4618      	mov	r0, r3
 8015912:	3718      	adds	r7, #24
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}

08015918 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b088      	sub	sp, #32
 801591c:	af02      	add	r7, sp, #8
 801591e:	60f8      	str	r0, [r7, #12]
 8015920:	60b9      	str	r1, [r7, #8]
 8015922:	607a      	str	r2, [r7, #4]
 8015924:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8015926:	68f8      	ldr	r0, [r7, #12]
 8015928:	f7ff fb51 	bl	8014fce <SPIF_Lock>
  bool retVal = false;
 801592c:	2300      	movs	r3, #0
 801592e:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8015930:	6a3b      	ldr	r3, [r7, #32]
 8015932:	9300      	str	r3, [sp, #0]
 8015934:	683b      	ldr	r3, [r7, #0]
 8015936:	687a      	ldr	r2, [r7, #4]
 8015938:	68b9      	ldr	r1, [r7, #8]
 801593a:	68f8      	ldr	r0, [r7, #12]
 801593c:	f7ff fe04 	bl	8015548 <SPIF_WriteFn>
 8015940:	4603      	mov	r3, r0
 8015942:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 8015944:	68f8      	ldr	r0, [r7, #12]
 8015946:	f7ff fb55 	bl	8014ff4 <SPIF_UnLock>
  return retVal;
 801594a:	7dfb      	ldrb	r3, [r7, #23]
}
 801594c:	4618      	mov	r0, r3
 801594e:	3718      	adds	r7, #24
 8015950:	46bd      	mov	sp, r7
 8015952:	bd80      	pop	{r7, pc}

08015954 <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b088      	sub	sp, #32
 8015958:	af00      	add	r7, sp, #0
 801595a:	60f8      	str	r0, [r7, #12]
 801595c:	60b9      	str	r1, [r7, #8]
 801595e:	607a      	str	r2, [r7, #4]
 8015960:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8015962:	68f8      	ldr	r0, [r7, #12]
 8015964:	f7ff fb33 	bl	8014fce <SPIF_Lock>
  bool retVal = false;
 8015968:	2300      	movs	r3, #0
 801596a:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 801596c:	68bb      	ldr	r3, [r7, #8]
 801596e:	021b      	lsls	r3, r3, #8
 8015970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015972:	4413      	add	r3, r2
 8015974:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 8015976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015978:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801597c:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 801597e:	683a      	ldr	r2, [r7, #0]
 8015980:	697b      	ldr	r3, [r7, #20]
 8015982:	429a      	cmp	r2, r3
 8015984:	d901      	bls.n	801598a <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 801598a:	683b      	ldr	r3, [r7, #0]
 801598c:	687a      	ldr	r2, [r7, #4]
 801598e:	69b9      	ldr	r1, [r7, #24]
 8015990:	68f8      	ldr	r0, [r7, #12]
 8015992:	f7ff fe81 	bl	8015698 <SPIF_ReadFn>
 8015996:	4603      	mov	r3, r0
 8015998:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 801599a:	68f8      	ldr	r0, [r7, #12]
 801599c:	f7ff fb2a 	bl	8014ff4 <SPIF_UnLock>
  return retVal;
 80159a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80159a2:	4618      	mov	r0, r3
 80159a4:	3720      	adds	r7, #32
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bd80      	pop	{r7, pc}
	...

080159ac <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80159b0:	2200      	movs	r2, #0
 80159b2:	4912      	ldr	r1, [pc, #72]	@ (80159fc <MX_USB_Device_Init+0x50>)
 80159b4:	4812      	ldr	r0, [pc, #72]	@ (8015a00 <MX_USB_Device_Init+0x54>)
 80159b6:	f7fe f865 	bl	8013a84 <USBD_Init>
 80159ba:	4603      	mov	r3, r0
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d001      	beq.n	80159c4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80159c0:	f7ec fb87 	bl	80020d2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80159c4:	490f      	ldr	r1, [pc, #60]	@ (8015a04 <MX_USB_Device_Init+0x58>)
 80159c6:	480e      	ldr	r0, [pc, #56]	@ (8015a00 <MX_USB_Device_Init+0x54>)
 80159c8:	f7fe f88c 	bl	8013ae4 <USBD_RegisterClass>
 80159cc:	4603      	mov	r3, r0
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d001      	beq.n	80159d6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80159d2:	f7ec fb7e 	bl	80020d2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80159d6:	490c      	ldr	r1, [pc, #48]	@ (8015a08 <MX_USB_Device_Init+0x5c>)
 80159d8:	4809      	ldr	r0, [pc, #36]	@ (8015a00 <MX_USB_Device_Init+0x54>)
 80159da:	f7fd ff83 	bl	80138e4 <USBD_CDC_RegisterInterface>
 80159de:	4603      	mov	r3, r0
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d001      	beq.n	80159e8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80159e4:	f7ec fb75 	bl	80020d2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80159e8:	4805      	ldr	r0, [pc, #20]	@ (8015a00 <MX_USB_Device_Init+0x54>)
 80159ea:	f7fe f8b1 	bl	8013b50 <USBD_Start>
 80159ee:	4603      	mov	r3, r0
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d001      	beq.n	80159f8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80159f4:	f7ec fb6d 	bl	80020d2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80159f8:	bf00      	nop
 80159fa:	bd80      	pop	{r7, pc}
 80159fc:	200000dc 	.word	0x200000dc
 8015a00:	200012d0 	.word	0x200012d0
 8015a04:	20000048 	.word	0x20000048
 8015a08:	200000c8 	.word	0x200000c8

08015a0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015a10:	2200      	movs	r2, #0
 8015a12:	4905      	ldr	r1, [pc, #20]	@ (8015a28 <CDC_Init_FS+0x1c>)
 8015a14:	4805      	ldr	r0, [pc, #20]	@ (8015a2c <CDC_Init_FS+0x20>)
 8015a16:	f7fd ff7f 	bl	8013918 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015a1a:	4905      	ldr	r1, [pc, #20]	@ (8015a30 <CDC_Init_FS+0x24>)
 8015a1c:	4803      	ldr	r0, [pc, #12]	@ (8015a2c <CDC_Init_FS+0x20>)
 8015a1e:	f7fd ff9d 	bl	801395c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015a22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015a24:	4618      	mov	r0, r3
 8015a26:	bd80      	pop	{r7, pc}
 8015a28:	20001dac 	.word	0x20001dac
 8015a2c:	200012d0 	.word	0x200012d0
 8015a30:	200015ac 	.word	0x200015ac

08015a34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015a34:	b480      	push	{r7}
 8015a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015a38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a42:	4770      	bx	lr

08015a44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015a44:	b480      	push	{r7}
 8015a46:	b083      	sub	sp, #12
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	6039      	str	r1, [r7, #0]
 8015a4e:	71fb      	strb	r3, [r7, #7]
 8015a50:	4613      	mov	r3, r2
 8015a52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015a54:	79fb      	ldrb	r3, [r7, #7]
 8015a56:	2b23      	cmp	r3, #35	@ 0x23
 8015a58:	d84a      	bhi.n	8015af0 <CDC_Control_FS+0xac>
 8015a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8015a60 <CDC_Control_FS+0x1c>)
 8015a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a60:	08015af1 	.word	0x08015af1
 8015a64:	08015af1 	.word	0x08015af1
 8015a68:	08015af1 	.word	0x08015af1
 8015a6c:	08015af1 	.word	0x08015af1
 8015a70:	08015af1 	.word	0x08015af1
 8015a74:	08015af1 	.word	0x08015af1
 8015a78:	08015af1 	.word	0x08015af1
 8015a7c:	08015af1 	.word	0x08015af1
 8015a80:	08015af1 	.word	0x08015af1
 8015a84:	08015af1 	.word	0x08015af1
 8015a88:	08015af1 	.word	0x08015af1
 8015a8c:	08015af1 	.word	0x08015af1
 8015a90:	08015af1 	.word	0x08015af1
 8015a94:	08015af1 	.word	0x08015af1
 8015a98:	08015af1 	.word	0x08015af1
 8015a9c:	08015af1 	.word	0x08015af1
 8015aa0:	08015af1 	.word	0x08015af1
 8015aa4:	08015af1 	.word	0x08015af1
 8015aa8:	08015af1 	.word	0x08015af1
 8015aac:	08015af1 	.word	0x08015af1
 8015ab0:	08015af1 	.word	0x08015af1
 8015ab4:	08015af1 	.word	0x08015af1
 8015ab8:	08015af1 	.word	0x08015af1
 8015abc:	08015af1 	.word	0x08015af1
 8015ac0:	08015af1 	.word	0x08015af1
 8015ac4:	08015af1 	.word	0x08015af1
 8015ac8:	08015af1 	.word	0x08015af1
 8015acc:	08015af1 	.word	0x08015af1
 8015ad0:	08015af1 	.word	0x08015af1
 8015ad4:	08015af1 	.word	0x08015af1
 8015ad8:	08015af1 	.word	0x08015af1
 8015adc:	08015af1 	.word	0x08015af1
 8015ae0:	08015af1 	.word	0x08015af1
 8015ae4:	08015af1 	.word	0x08015af1
 8015ae8:	08015af1 	.word	0x08015af1
 8015aec:	08015af1 	.word	0x08015af1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015af0:	bf00      	nop
  }

  return (USBD_OK);
 8015af2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	370c      	adds	r7, #12
 8015af8:	46bd      	mov	sp, r7
 8015afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afe:	4770      	bx	lr

08015b00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b084      	sub	sp, #16
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
 8015b08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015b0a:	6879      	ldr	r1, [r7, #4]
 8015b0c:	480f      	ldr	r0, [pc, #60]	@ (8015b4c <CDC_Receive_FS+0x4c>)
 8015b0e:	f7fd ff25 	bl	801395c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015b12:	480e      	ldr	r0, [pc, #56]	@ (8015b4c <CDC_Receive_FS+0x4c>)
 8015b14:	f7fd ff80 	bl	8013a18 <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 8015b18:	2240      	movs	r2, #64	@ 0x40
 8015b1a:	2100      	movs	r1, #0
 8015b1c:	480c      	ldr	r0, [pc, #48]	@ (8015b50 <CDC_Receive_FS+0x50>)
 8015b1e:	f002 fc0c 	bl	801833a <memset>
  uint8_t len = (uint8_t)*Len;
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 8015b28:	7bfb      	ldrb	r3, [r7, #15]
 8015b2a:	461a      	mov	r2, r3
 8015b2c:	6879      	ldr	r1, [r7, #4]
 8015b2e:	4808      	ldr	r0, [pc, #32]	@ (8015b50 <CDC_Receive_FS+0x50>)
 8015b30:	f002 fd1f 	bl	8018572 <memcpy>
  memset(Buf, '\0', len);
 8015b34:	7bfb      	ldrb	r3, [r7, #15]
 8015b36:	461a      	mov	r2, r3
 8015b38:	2100      	movs	r1, #0
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	f002 fbfd 	bl	801833a <memset>
  return (USBD_OK);
 8015b40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015b42:	4618      	mov	r0, r3
 8015b44:	3710      	adds	r7, #16
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}
 8015b4a:	bf00      	nop
 8015b4c:	200012d0 	.word	0x200012d0
 8015b50:	200009fc 	.word	0x200009fc

08015b54 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b084      	sub	sp, #16
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
 8015b5c:	460b      	mov	r3, r1
 8015b5e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015b60:	2300      	movs	r3, #0
 8015b62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015b64:	4b0d      	ldr	r3, [pc, #52]	@ (8015b9c <CDC_Transmit_FS+0x48>)
 8015b66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8015b6a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d001      	beq.n	8015b7a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015b76:	2301      	movs	r3, #1
 8015b78:	e00b      	b.n	8015b92 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015b7a:	887b      	ldrh	r3, [r7, #2]
 8015b7c:	461a      	mov	r2, r3
 8015b7e:	6879      	ldr	r1, [r7, #4]
 8015b80:	4806      	ldr	r0, [pc, #24]	@ (8015b9c <CDC_Transmit_FS+0x48>)
 8015b82:	f7fd fec9 	bl	8013918 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015b86:	4805      	ldr	r0, [pc, #20]	@ (8015b9c <CDC_Transmit_FS+0x48>)
 8015b88:	f7fd ff06 	bl	8013998 <USBD_CDC_TransmitPacket>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b92:	4618      	mov	r0, r3
 8015b94:	3710      	adds	r7, #16
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}
 8015b9a:	bf00      	nop
 8015b9c:	200012d0 	.word	0x200012d0

08015ba0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015ba0:	b480      	push	{r7}
 8015ba2:	b087      	sub	sp, #28
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	60f8      	str	r0, [r7, #12]
 8015ba8:	60b9      	str	r1, [r7, #8]
 8015baa:	4613      	mov	r3, r2
 8015bac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015bae:	2300      	movs	r3, #0
 8015bb0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	371c      	adds	r7, #28
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc0:	4770      	bx	lr
	...

08015bc4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015bc4:	b480      	push	{r7}
 8015bc6:	b083      	sub	sp, #12
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	4603      	mov	r3, r0
 8015bcc:	6039      	str	r1, [r7, #0]
 8015bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	2212      	movs	r2, #18
 8015bd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8015bd6:	4b03      	ldr	r3, [pc, #12]	@ (8015be4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	370c      	adds	r7, #12
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be2:	4770      	bx	lr
 8015be4:	200000fc 	.word	0x200000fc

08015be8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015be8:	b480      	push	{r7}
 8015bea:	b083      	sub	sp, #12
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	4603      	mov	r3, r0
 8015bf0:	6039      	str	r1, [r7, #0]
 8015bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015bf4:	683b      	ldr	r3, [r7, #0]
 8015bf6:	2204      	movs	r2, #4
 8015bf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015bfa:	4b03      	ldr	r3, [pc, #12]	@ (8015c08 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	370c      	adds	r7, #12
 8015c00:	46bd      	mov	sp, r7
 8015c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c06:	4770      	bx	lr
 8015c08:	20000110 	.word	0x20000110

08015c0c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b082      	sub	sp, #8
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	4603      	mov	r3, r0
 8015c14:	6039      	str	r1, [r7, #0]
 8015c16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015c18:	79fb      	ldrb	r3, [r7, #7]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d105      	bne.n	8015c2a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015c1e:	683a      	ldr	r2, [r7, #0]
 8015c20:	4907      	ldr	r1, [pc, #28]	@ (8015c40 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015c22:	4808      	ldr	r0, [pc, #32]	@ (8015c44 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015c24:	f7ff f8dc 	bl	8014de0 <USBD_GetString>
 8015c28:	e004      	b.n	8015c34 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015c2a:	683a      	ldr	r2, [r7, #0]
 8015c2c:	4904      	ldr	r1, [pc, #16]	@ (8015c40 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015c2e:	4805      	ldr	r0, [pc, #20]	@ (8015c44 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015c30:	f7ff f8d6 	bl	8014de0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015c34:	4b02      	ldr	r3, [pc, #8]	@ (8015c40 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3708      	adds	r7, #8
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	200025ac 	.word	0x200025ac
 8015c44:	0801cfc0 	.word	0x0801cfc0

08015c48 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b082      	sub	sp, #8
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	4603      	mov	r3, r0
 8015c50:	6039      	str	r1, [r7, #0]
 8015c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015c54:	683a      	ldr	r2, [r7, #0]
 8015c56:	4904      	ldr	r1, [pc, #16]	@ (8015c68 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8015c58:	4804      	ldr	r0, [pc, #16]	@ (8015c6c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8015c5a:	f7ff f8c1 	bl	8014de0 <USBD_GetString>
  return USBD_StrDesc;
 8015c5e:	4b02      	ldr	r3, [pc, #8]	@ (8015c68 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	3708      	adds	r7, #8
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}
 8015c68:	200025ac 	.word	0x200025ac
 8015c6c:	0801cfd8 	.word	0x0801cfd8

08015c70 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b082      	sub	sp, #8
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	4603      	mov	r3, r0
 8015c78:	6039      	str	r1, [r7, #0]
 8015c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015c7c:	683b      	ldr	r3, [r7, #0]
 8015c7e:	221a      	movs	r2, #26
 8015c80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015c82:	f000 f843 	bl	8015d0c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8015c86:	4b02      	ldr	r3, [pc, #8]	@ (8015c90 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3708      	adds	r7, #8
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}
 8015c90:	20000114 	.word	0x20000114

08015c94 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b082      	sub	sp, #8
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	6039      	str	r1, [r7, #0]
 8015c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015ca0:	79fb      	ldrb	r3, [r7, #7]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d105      	bne.n	8015cb2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015ca6:	683a      	ldr	r2, [r7, #0]
 8015ca8:	4907      	ldr	r1, [pc, #28]	@ (8015cc8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8015caa:	4808      	ldr	r0, [pc, #32]	@ (8015ccc <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015cac:	f7ff f898 	bl	8014de0 <USBD_GetString>
 8015cb0:	e004      	b.n	8015cbc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015cb2:	683a      	ldr	r2, [r7, #0]
 8015cb4:	4904      	ldr	r1, [pc, #16]	@ (8015cc8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8015cb6:	4805      	ldr	r0, [pc, #20]	@ (8015ccc <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015cb8:	f7ff f892 	bl	8014de0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015cbc:	4b02      	ldr	r3, [pc, #8]	@ (8015cc8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3708      	adds	r7, #8
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}
 8015cc6:	bf00      	nop
 8015cc8:	200025ac 	.word	0x200025ac
 8015ccc:	0801cfec 	.word	0x0801cfec

08015cd0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b082      	sub	sp, #8
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	6039      	str	r1, [r7, #0]
 8015cda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015cdc:	79fb      	ldrb	r3, [r7, #7]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d105      	bne.n	8015cee <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015ce2:	683a      	ldr	r2, [r7, #0]
 8015ce4:	4907      	ldr	r1, [pc, #28]	@ (8015d04 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015ce6:	4808      	ldr	r0, [pc, #32]	@ (8015d08 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015ce8:	f7ff f87a 	bl	8014de0 <USBD_GetString>
 8015cec:	e004      	b.n	8015cf8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015cee:	683a      	ldr	r2, [r7, #0]
 8015cf0:	4904      	ldr	r1, [pc, #16]	@ (8015d04 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015cf2:	4805      	ldr	r0, [pc, #20]	@ (8015d08 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015cf4:	f7ff f874 	bl	8014de0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015cf8:	4b02      	ldr	r3, [pc, #8]	@ (8015d04 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	3708      	adds	r7, #8
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	bd80      	pop	{r7, pc}
 8015d02:	bf00      	nop
 8015d04:	200025ac 	.word	0x200025ac
 8015d08:	0801cff8 	.word	0x0801cff8

08015d0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b084      	sub	sp, #16
 8015d10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015d12:	4b0f      	ldr	r3, [pc, #60]	@ (8015d50 <Get_SerialNum+0x44>)
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015d18:	4b0e      	ldr	r3, [pc, #56]	@ (8015d54 <Get_SerialNum+0x48>)
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8015d58 <Get_SerialNum+0x4c>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015d24:	68fa      	ldr	r2, [r7, #12]
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	4413      	add	r3, r2
 8015d2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d009      	beq.n	8015d46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015d32:	2208      	movs	r2, #8
 8015d34:	4909      	ldr	r1, [pc, #36]	@ (8015d5c <Get_SerialNum+0x50>)
 8015d36:	68f8      	ldr	r0, [r7, #12]
 8015d38:	f000 f814 	bl	8015d64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015d3c:	2204      	movs	r2, #4
 8015d3e:	4908      	ldr	r1, [pc, #32]	@ (8015d60 <Get_SerialNum+0x54>)
 8015d40:	68b8      	ldr	r0, [r7, #8]
 8015d42:	f000 f80f 	bl	8015d64 <IntToUnicode>
  }
}
 8015d46:	bf00      	nop
 8015d48:	3710      	adds	r7, #16
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	bd80      	pop	{r7, pc}
 8015d4e:	bf00      	nop
 8015d50:	1fff7590 	.word	0x1fff7590
 8015d54:	1fff7594 	.word	0x1fff7594
 8015d58:	1fff7598 	.word	0x1fff7598
 8015d5c:	20000116 	.word	0x20000116
 8015d60:	20000126 	.word	0x20000126

08015d64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015d64:	b480      	push	{r7}
 8015d66:	b087      	sub	sp, #28
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	60f8      	str	r0, [r7, #12]
 8015d6c:	60b9      	str	r1, [r7, #8]
 8015d6e:	4613      	mov	r3, r2
 8015d70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015d72:	2300      	movs	r3, #0
 8015d74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015d76:	2300      	movs	r3, #0
 8015d78:	75fb      	strb	r3, [r7, #23]
 8015d7a:	e027      	b.n	8015dcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	0f1b      	lsrs	r3, r3, #28
 8015d80:	2b09      	cmp	r3, #9
 8015d82:	d80b      	bhi.n	8015d9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	0f1b      	lsrs	r3, r3, #28
 8015d88:	b2da      	uxtb	r2, r3
 8015d8a:	7dfb      	ldrb	r3, [r7, #23]
 8015d8c:	005b      	lsls	r3, r3, #1
 8015d8e:	4619      	mov	r1, r3
 8015d90:	68bb      	ldr	r3, [r7, #8]
 8015d92:	440b      	add	r3, r1
 8015d94:	3230      	adds	r2, #48	@ 0x30
 8015d96:	b2d2      	uxtb	r2, r2
 8015d98:	701a      	strb	r2, [r3, #0]
 8015d9a:	e00a      	b.n	8015db2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	0f1b      	lsrs	r3, r3, #28
 8015da0:	b2da      	uxtb	r2, r3
 8015da2:	7dfb      	ldrb	r3, [r7, #23]
 8015da4:	005b      	lsls	r3, r3, #1
 8015da6:	4619      	mov	r1, r3
 8015da8:	68bb      	ldr	r3, [r7, #8]
 8015daa:	440b      	add	r3, r1
 8015dac:	3237      	adds	r2, #55	@ 0x37
 8015dae:	b2d2      	uxtb	r2, r2
 8015db0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	011b      	lsls	r3, r3, #4
 8015db6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015db8:	7dfb      	ldrb	r3, [r7, #23]
 8015dba:	005b      	lsls	r3, r3, #1
 8015dbc:	3301      	adds	r3, #1
 8015dbe:	68ba      	ldr	r2, [r7, #8]
 8015dc0:	4413      	add	r3, r2
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015dc6:	7dfb      	ldrb	r3, [r7, #23]
 8015dc8:	3301      	adds	r3, #1
 8015dca:	75fb      	strb	r3, [r7, #23]
 8015dcc:	7dfa      	ldrb	r2, [r7, #23]
 8015dce:	79fb      	ldrb	r3, [r7, #7]
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	d3d3      	bcc.n	8015d7c <IntToUnicode+0x18>
  }
}
 8015dd4:	bf00      	nop
 8015dd6:	bf00      	nop
 8015dd8:	371c      	adds	r7, #28
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de0:	4770      	bx	lr

08015de2 <LL_AHB2_GRP1_EnableClock>:
{
 8015de2:	b480      	push	{r7}
 8015de4:	b085      	sub	sp, #20
 8015de6:	af00      	add	r7, sp, #0
 8015de8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8015dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015dee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015df0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	4313      	orrs	r3, r2
 8015df8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8015dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	4013      	ands	r3, r2
 8015e04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015e06:	68fb      	ldr	r3, [r7, #12]
}
 8015e08:	bf00      	nop
 8015e0a:	3714      	adds	r7, #20
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e12:	4770      	bx	lr

08015e14 <LL_APB1_GRP1_EnableClock>:
{
 8015e14:	b480      	push	{r7}
 8015e16:	b085      	sub	sp, #20
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8015e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015e20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015e22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	4313      	orrs	r3, r2
 8015e2a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8015e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015e30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	4013      	ands	r3, r2
 8015e36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015e38:	68fb      	ldr	r3, [r7, #12]
}
 8015e3a:	bf00      	nop
 8015e3c:	3714      	adds	r7, #20
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e44:	4770      	bx	lr
	...

08015e48 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b088      	sub	sp, #32
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015e50:	f107 030c 	add.w	r3, r7, #12
 8015e54:	2200      	movs	r2, #0
 8015e56:	601a      	str	r2, [r3, #0]
 8015e58:	605a      	str	r2, [r3, #4]
 8015e5a:	609a      	str	r2, [r3, #8]
 8015e5c:	60da      	str	r2, [r3, #12]
 8015e5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	4a13      	ldr	r2, [pc, #76]	@ (8015eb4 <HAL_PCD_MspInit+0x6c>)
 8015e66:	4293      	cmp	r3, r2
 8015e68:	d120      	bne.n	8015eac <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015e6a:	2001      	movs	r0, #1
 8015e6c:	f7ff ffb9 	bl	8015de2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015e70:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8015e74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e76:	2302      	movs	r3, #2
 8015e78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015e7e:	2300      	movs	r3, #0
 8015e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8015e82:	230a      	movs	r3, #10
 8015e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015e86:	f107 030c 	add.w	r3, r7, #12
 8015e8a:	4619      	mov	r1, r3
 8015e8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8015e90:	f7f2 fea2 	bl	8008bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015e94:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8015e98:	f7ff ffbc 	bl	8015e14 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	2105      	movs	r1, #5
 8015ea0:	2014      	movs	r0, #20
 8015ea2:	f7f2 fb26 	bl	80084f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015ea6:	2014      	movs	r0, #20
 8015ea8:	f7f2 fb3d 	bl	8008526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015eac:	bf00      	nop
 8015eae:	3720      	adds	r7, #32
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bd80      	pop	{r7, pc}
 8015eb4:	40006800 	.word	0x40006800

08015eb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b082      	sub	sp, #8
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8015ecc:	4619      	mov	r1, r3
 8015ece:	4610      	mov	r0, r2
 8015ed0:	f7fd fe8b 	bl	8013bea <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8015ed4:	bf00      	nop
 8015ed6:	3708      	adds	r7, #8
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bd80      	pop	{r7, pc}

08015edc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b082      	sub	sp, #8
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
 8015ee4:	460b      	mov	r3, r1
 8015ee6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8015eee:	78fa      	ldrb	r2, [r7, #3]
 8015ef0:	6879      	ldr	r1, [r7, #4]
 8015ef2:	4613      	mov	r3, r2
 8015ef4:	009b      	lsls	r3, r3, #2
 8015ef6:	4413      	add	r3, r2
 8015ef8:	00db      	lsls	r3, r3, #3
 8015efa:	440b      	add	r3, r1
 8015efc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015f00:	681a      	ldr	r2, [r3, #0]
 8015f02:	78fb      	ldrb	r3, [r7, #3]
 8015f04:	4619      	mov	r1, r3
 8015f06:	f7fd fec5 	bl	8013c94 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8015f0a:	bf00      	nop
 8015f0c:	3708      	adds	r7, #8
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd80      	pop	{r7, pc}

08015f12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f12:	b580      	push	{r7, lr}
 8015f14:	b082      	sub	sp, #8
 8015f16:	af00      	add	r7, sp, #0
 8015f18:	6078      	str	r0, [r7, #4]
 8015f1a:	460b      	mov	r3, r1
 8015f1c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8015f24:	78fa      	ldrb	r2, [r7, #3]
 8015f26:	6879      	ldr	r1, [r7, #4]
 8015f28:	4613      	mov	r3, r2
 8015f2a:	009b      	lsls	r3, r3, #2
 8015f2c:	4413      	add	r3, r2
 8015f2e:	00db      	lsls	r3, r3, #3
 8015f30:	440b      	add	r3, r1
 8015f32:	3324      	adds	r3, #36	@ 0x24
 8015f34:	681a      	ldr	r2, [r3, #0]
 8015f36:	78fb      	ldrb	r3, [r7, #3]
 8015f38:	4619      	mov	r1, r3
 8015f3a:	f7fd ff5e 	bl	8013dfa <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8015f3e:	bf00      	nop
 8015f40:	3708      	adds	r7, #8
 8015f42:	46bd      	mov	sp, r7
 8015f44:	bd80      	pop	{r7, pc}

08015f46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f46:	b580      	push	{r7, lr}
 8015f48:	b082      	sub	sp, #8
 8015f4a:	af00      	add	r7, sp, #0
 8015f4c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015f54:	4618      	mov	r0, r3
 8015f56:	f7fe f898 	bl	801408a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8015f5a:	bf00      	nop
 8015f5c:	3708      	adds	r7, #8
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}

08015f62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f62:	b580      	push	{r7, lr}
 8015f64:	b084      	sub	sp, #16
 8015f66:	af00      	add	r7, sp, #0
 8015f68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015f6a:	2301      	movs	r3, #1
 8015f6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	795b      	ldrb	r3, [r3, #5]
 8015f72:	2b02      	cmp	r3, #2
 8015f74:	d001      	beq.n	8015f7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015f76:	f7ec f8ac 	bl	80020d2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015f80:	7bfa      	ldrb	r2, [r7, #15]
 8015f82:	4611      	mov	r1, r2
 8015f84:	4618      	mov	r0, r3
 8015f86:	f7fe f83c 	bl	8014002 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015f90:	4618      	mov	r0, r3
 8015f92:	f7fd ffe4 	bl	8013f5e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8015f96:	bf00      	nop
 8015f98:	3710      	adds	r7, #16
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}
	...

08015fa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b082      	sub	sp, #8
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015fae:	4618      	mov	r0, r3
 8015fb0:	f7fe f837 	bl	8014022 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	7a5b      	ldrb	r3, [r3, #9]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d005      	beq.n	8015fc8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015fbc:	4b04      	ldr	r3, [pc, #16]	@ (8015fd0 <HAL_PCD_SuspendCallback+0x30>)
 8015fbe:	691b      	ldr	r3, [r3, #16]
 8015fc0:	4a03      	ldr	r2, [pc, #12]	@ (8015fd0 <HAL_PCD_SuspendCallback+0x30>)
 8015fc2:	f043 0306 	orr.w	r3, r3, #6
 8015fc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8015fc8:	bf00      	nop
 8015fca:	3708      	adds	r7, #8
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}
 8015fd0:	e000ed00 	.word	0xe000ed00

08015fd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b082      	sub	sp, #8
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	7a5b      	ldrb	r3, [r3, #9]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d007      	beq.n	8015ff4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015fe4:	4b08      	ldr	r3, [pc, #32]	@ (8016008 <HAL_PCD_ResumeCallback+0x34>)
 8015fe6:	691b      	ldr	r3, [r3, #16]
 8015fe8:	4a07      	ldr	r2, [pc, #28]	@ (8016008 <HAL_PCD_ResumeCallback+0x34>)
 8015fea:	f023 0306 	bic.w	r3, r3, #6
 8015fee:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8015ff0:	f000 f9fa 	bl	80163e8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f7fe f82d 	bl	801405a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8016000:	bf00      	nop
 8016002:	3708      	adds	r7, #8
 8016004:	46bd      	mov	sp, r7
 8016006:	bd80      	pop	{r7, pc}
 8016008:	e000ed00 	.word	0xe000ed00

0801600c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b082      	sub	sp, #8
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8016014:	4a2c      	ldr	r2, [pc, #176]	@ (80160c8 <USBD_LL_Init+0xbc>)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	4a2a      	ldr	r2, [pc, #168]	@ (80160c8 <USBD_LL_Init+0xbc>)
 8016020:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8016024:	f7f5 fede 	bl	800bde4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8016028:	4b27      	ldr	r3, [pc, #156]	@ (80160c8 <USBD_LL_Init+0xbc>)
 801602a:	4a28      	ldr	r2, [pc, #160]	@ (80160cc <USBD_LL_Init+0xc0>)
 801602c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801602e:	4b26      	ldr	r3, [pc, #152]	@ (80160c8 <USBD_LL_Init+0xbc>)
 8016030:	2208      	movs	r2, #8
 8016032:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016034:	4b24      	ldr	r3, [pc, #144]	@ (80160c8 <USBD_LL_Init+0xbc>)
 8016036:	2202      	movs	r2, #2
 8016038:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801603a:	4b23      	ldr	r3, [pc, #140]	@ (80160c8 <USBD_LL_Init+0xbc>)
 801603c:	2202      	movs	r2, #2
 801603e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8016040:	4b21      	ldr	r3, [pc, #132]	@ (80160c8 <USBD_LL_Init+0xbc>)
 8016042:	2200      	movs	r2, #0
 8016044:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8016046:	4b20      	ldr	r3, [pc, #128]	@ (80160c8 <USBD_LL_Init+0xbc>)
 8016048:	2200      	movs	r2, #0
 801604a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801604c:	4b1e      	ldr	r3, [pc, #120]	@ (80160c8 <USBD_LL_Init+0xbc>)
 801604e:	2200      	movs	r2, #0
 8016050:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8016052:	4b1d      	ldr	r3, [pc, #116]	@ (80160c8 <USBD_LL_Init+0xbc>)
 8016054:	2200      	movs	r2, #0
 8016056:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016058:	481b      	ldr	r0, [pc, #108]	@ (80160c8 <USBD_LL_Init+0xbc>)
 801605a:	f7f4 f9a3 	bl	800a3a4 <HAL_PCD_Init>
 801605e:	4603      	mov	r3, r0
 8016060:	2b00      	cmp	r3, #0
 8016062:	d001      	beq.n	8016068 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8016064:	f7ec f835 	bl	80020d2 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801606e:	2318      	movs	r3, #24
 8016070:	2200      	movs	r2, #0
 8016072:	2100      	movs	r1, #0
 8016074:	f7f5 fe2a 	bl	800bccc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801607e:	2358      	movs	r3, #88	@ 0x58
 8016080:	2200      	movs	r2, #0
 8016082:	2180      	movs	r1, #128	@ 0x80
 8016084:	f7f5 fe22 	bl	800bccc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801608e:	23c0      	movs	r3, #192	@ 0xc0
 8016090:	2200      	movs	r2, #0
 8016092:	2181      	movs	r1, #129	@ 0x81
 8016094:	f7f5 fe1a 	bl	800bccc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801609e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80160a2:	2200      	movs	r2, #0
 80160a4:	2101      	movs	r1, #1
 80160a6:	f7f5 fe11 	bl	800bccc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80160b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80160b4:	2200      	movs	r2, #0
 80160b6:	2182      	movs	r1, #130	@ 0x82
 80160b8:	f7f5 fe08 	bl	800bccc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80160bc:	2300      	movs	r3, #0
}
 80160be:	4618      	mov	r0, r3
 80160c0:	3708      	adds	r7, #8
 80160c2:	46bd      	mov	sp, r7
 80160c4:	bd80      	pop	{r7, pc}
 80160c6:	bf00      	nop
 80160c8:	200027ac 	.word	0x200027ac
 80160cc:	40006800 	.word	0x40006800

080160d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b084      	sub	sp, #16
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160d8:	2300      	movs	r3, #0
 80160da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160dc:	2300      	movs	r3, #0
 80160de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80160e6:	4618      	mov	r0, r3
 80160e8:	f7f4 fa2a 	bl	800a540 <HAL_PCD_Start>
 80160ec:	4603      	mov	r3, r0
 80160ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80160f0:	7bfb      	ldrb	r3, [r7, #15]
 80160f2:	4618      	mov	r0, r3
 80160f4:	f000 f97e 	bl	80163f4 <USBD_Get_USB_Status>
 80160f8:	4603      	mov	r3, r0
 80160fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80160fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80160fe:	4618      	mov	r0, r3
 8016100:	3710      	adds	r7, #16
 8016102:	46bd      	mov	sp, r7
 8016104:	bd80      	pop	{r7, pc}

08016106 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016106:	b580      	push	{r7, lr}
 8016108:	b084      	sub	sp, #16
 801610a:	af00      	add	r7, sp, #0
 801610c:	6078      	str	r0, [r7, #4]
 801610e:	4608      	mov	r0, r1
 8016110:	4611      	mov	r1, r2
 8016112:	461a      	mov	r2, r3
 8016114:	4603      	mov	r3, r0
 8016116:	70fb      	strb	r3, [r7, #3]
 8016118:	460b      	mov	r3, r1
 801611a:	70bb      	strb	r3, [r7, #2]
 801611c:	4613      	mov	r3, r2
 801611e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016120:	2300      	movs	r3, #0
 8016122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016124:	2300      	movs	r3, #0
 8016126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801612e:	78bb      	ldrb	r3, [r7, #2]
 8016130:	883a      	ldrh	r2, [r7, #0]
 8016132:	78f9      	ldrb	r1, [r7, #3]
 8016134:	f7f4 fb71 	bl	800a81a <HAL_PCD_EP_Open>
 8016138:	4603      	mov	r3, r0
 801613a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801613c:	7bfb      	ldrb	r3, [r7, #15]
 801613e:	4618      	mov	r0, r3
 8016140:	f000 f958 	bl	80163f4 <USBD_Get_USB_Status>
 8016144:	4603      	mov	r3, r0
 8016146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016148:	7bbb      	ldrb	r3, [r7, #14]
}
 801614a:	4618      	mov	r0, r3
 801614c:	3710      	adds	r7, #16
 801614e:	46bd      	mov	sp, r7
 8016150:	bd80      	pop	{r7, pc}

08016152 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016152:	b580      	push	{r7, lr}
 8016154:	b084      	sub	sp, #16
 8016156:	af00      	add	r7, sp, #0
 8016158:	6078      	str	r0, [r7, #4]
 801615a:	460b      	mov	r3, r1
 801615c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801615e:	2300      	movs	r3, #0
 8016160:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016162:	2300      	movs	r3, #0
 8016164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801616c:	78fa      	ldrb	r2, [r7, #3]
 801616e:	4611      	mov	r1, r2
 8016170:	4618      	mov	r0, r3
 8016172:	f7f4 fbb1 	bl	800a8d8 <HAL_PCD_EP_Close>
 8016176:	4603      	mov	r3, r0
 8016178:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801617a:	7bfb      	ldrb	r3, [r7, #15]
 801617c:	4618      	mov	r0, r3
 801617e:	f000 f939 	bl	80163f4 <USBD_Get_USB_Status>
 8016182:	4603      	mov	r3, r0
 8016184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016186:	7bbb      	ldrb	r3, [r7, #14]
}
 8016188:	4618      	mov	r0, r3
 801618a:	3710      	adds	r7, #16
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}

08016190 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b084      	sub	sp, #16
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
 8016198:	460b      	mov	r3, r1
 801619a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801619c:	2300      	movs	r3, #0
 801619e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80161a0:	2300      	movs	r3, #0
 80161a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80161aa:	78fa      	ldrb	r2, [r7, #3]
 80161ac:	4611      	mov	r1, r2
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7f4 fc5a 	bl	800aa68 <HAL_PCD_EP_SetStall>
 80161b4:	4603      	mov	r3, r0
 80161b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80161b8:	7bfb      	ldrb	r3, [r7, #15]
 80161ba:	4618      	mov	r0, r3
 80161bc:	f000 f91a 	bl	80163f4 <USBD_Get_USB_Status>
 80161c0:	4603      	mov	r3, r0
 80161c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80161c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80161c6:	4618      	mov	r0, r3
 80161c8:	3710      	adds	r7, #16
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd80      	pop	{r7, pc}

080161ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80161ce:	b580      	push	{r7, lr}
 80161d0:	b084      	sub	sp, #16
 80161d2:	af00      	add	r7, sp, #0
 80161d4:	6078      	str	r0, [r7, #4]
 80161d6:	460b      	mov	r3, r1
 80161d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80161da:	2300      	movs	r3, #0
 80161dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80161de:	2300      	movs	r3, #0
 80161e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80161e8:	78fa      	ldrb	r2, [r7, #3]
 80161ea:	4611      	mov	r1, r2
 80161ec:	4618      	mov	r0, r3
 80161ee:	f7f4 fc8d 	bl	800ab0c <HAL_PCD_EP_ClrStall>
 80161f2:	4603      	mov	r3, r0
 80161f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80161f6:	7bfb      	ldrb	r3, [r7, #15]
 80161f8:	4618      	mov	r0, r3
 80161fa:	f000 f8fb 	bl	80163f4 <USBD_Get_USB_Status>
 80161fe:	4603      	mov	r3, r0
 8016200:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016202:	7bbb      	ldrb	r3, [r7, #14]
}
 8016204:	4618      	mov	r0, r3
 8016206:	3710      	adds	r7, #16
 8016208:	46bd      	mov	sp, r7
 801620a:	bd80      	pop	{r7, pc}

0801620c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801620c:	b480      	push	{r7}
 801620e:	b085      	sub	sp, #20
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
 8016214:	460b      	mov	r3, r1
 8016216:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801621e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016224:	2b00      	cmp	r3, #0
 8016226:	da0b      	bge.n	8016240 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016228:	78fb      	ldrb	r3, [r7, #3]
 801622a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801622e:	68f9      	ldr	r1, [r7, #12]
 8016230:	4613      	mov	r3, r2
 8016232:	009b      	lsls	r3, r3, #2
 8016234:	4413      	add	r3, r2
 8016236:	00db      	lsls	r3, r3, #3
 8016238:	440b      	add	r3, r1
 801623a:	3312      	adds	r3, #18
 801623c:	781b      	ldrb	r3, [r3, #0]
 801623e:	e00b      	b.n	8016258 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016240:	78fb      	ldrb	r3, [r7, #3]
 8016242:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016246:	68f9      	ldr	r1, [r7, #12]
 8016248:	4613      	mov	r3, r2
 801624a:	009b      	lsls	r3, r3, #2
 801624c:	4413      	add	r3, r2
 801624e:	00db      	lsls	r3, r3, #3
 8016250:	440b      	add	r3, r1
 8016252:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8016256:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016258:	4618      	mov	r0, r3
 801625a:	3714      	adds	r7, #20
 801625c:	46bd      	mov	sp, r7
 801625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016262:	4770      	bx	lr

08016264 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b084      	sub	sp, #16
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	460b      	mov	r3, r1
 801626e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016270:	2300      	movs	r3, #0
 8016272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016274:	2300      	movs	r3, #0
 8016276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801627e:	78fa      	ldrb	r2, [r7, #3]
 8016280:	4611      	mov	r1, r2
 8016282:	4618      	mov	r0, r3
 8016284:	f7f4 faa5 	bl	800a7d2 <HAL_PCD_SetAddress>
 8016288:	4603      	mov	r3, r0
 801628a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801628c:	7bfb      	ldrb	r3, [r7, #15]
 801628e:	4618      	mov	r0, r3
 8016290:	f000 f8b0 	bl	80163f4 <USBD_Get_USB_Status>
 8016294:	4603      	mov	r3, r0
 8016296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016298:	7bbb      	ldrb	r3, [r7, #14]
}
 801629a:	4618      	mov	r0, r3
 801629c:	3710      	adds	r7, #16
 801629e:	46bd      	mov	sp, r7
 80162a0:	bd80      	pop	{r7, pc}

080162a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80162a2:	b580      	push	{r7, lr}
 80162a4:	b086      	sub	sp, #24
 80162a6:	af00      	add	r7, sp, #0
 80162a8:	60f8      	str	r0, [r7, #12]
 80162aa:	607a      	str	r2, [r7, #4]
 80162ac:	603b      	str	r3, [r7, #0]
 80162ae:	460b      	mov	r3, r1
 80162b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80162b2:	2300      	movs	r3, #0
 80162b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80162b6:	2300      	movs	r3, #0
 80162b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80162c0:	7af9      	ldrb	r1, [r7, #11]
 80162c2:	683b      	ldr	r3, [r7, #0]
 80162c4:	687a      	ldr	r2, [r7, #4]
 80162c6:	f7f4 fb98 	bl	800a9fa <HAL_PCD_EP_Transmit>
 80162ca:	4603      	mov	r3, r0
 80162cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80162ce:	7dfb      	ldrb	r3, [r7, #23]
 80162d0:	4618      	mov	r0, r3
 80162d2:	f000 f88f 	bl	80163f4 <USBD_Get_USB_Status>
 80162d6:	4603      	mov	r3, r0
 80162d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80162da:	7dbb      	ldrb	r3, [r7, #22]
}
 80162dc:	4618      	mov	r0, r3
 80162de:	3718      	adds	r7, #24
 80162e0:	46bd      	mov	sp, r7
 80162e2:	bd80      	pop	{r7, pc}

080162e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80162e4:	b580      	push	{r7, lr}
 80162e6:	b086      	sub	sp, #24
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	60f8      	str	r0, [r7, #12]
 80162ec:	607a      	str	r2, [r7, #4]
 80162ee:	603b      	str	r3, [r7, #0]
 80162f0:	460b      	mov	r3, r1
 80162f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80162f4:	2300      	movs	r3, #0
 80162f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80162f8:	2300      	movs	r3, #0
 80162fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016302:	7af9      	ldrb	r1, [r7, #11]
 8016304:	683b      	ldr	r3, [r7, #0]
 8016306:	687a      	ldr	r2, [r7, #4]
 8016308:	f7f4 fb2e 	bl	800a968 <HAL_PCD_EP_Receive>
 801630c:	4603      	mov	r3, r0
 801630e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016310:	7dfb      	ldrb	r3, [r7, #23]
 8016312:	4618      	mov	r0, r3
 8016314:	f000 f86e 	bl	80163f4 <USBD_Get_USB_Status>
 8016318:	4603      	mov	r3, r0
 801631a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801631c:	7dbb      	ldrb	r3, [r7, #22]
}
 801631e:	4618      	mov	r0, r3
 8016320:	3718      	adds	r7, #24
 8016322:	46bd      	mov	sp, r7
 8016324:	bd80      	pop	{r7, pc}

08016326 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016326:	b580      	push	{r7, lr}
 8016328:	b082      	sub	sp, #8
 801632a:	af00      	add	r7, sp, #0
 801632c:	6078      	str	r0, [r7, #4]
 801632e:	460b      	mov	r3, r1
 8016330:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016338:	78fa      	ldrb	r2, [r7, #3]
 801633a:	4611      	mov	r1, r2
 801633c:	4618      	mov	r0, r3
 801633e:	f7f4 fb44 	bl	800a9ca <HAL_PCD_EP_GetRxCount>
 8016342:	4603      	mov	r3, r0
}
 8016344:	4618      	mov	r0, r3
 8016346:	3708      	adds	r7, #8
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}

0801634c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b082      	sub	sp, #8
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
 8016354:	460b      	mov	r3, r1
 8016356:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8016358:	78fb      	ldrb	r3, [r7, #3]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d002      	beq.n	8016364 <HAL_PCDEx_LPM_Callback+0x18>
 801635e:	2b01      	cmp	r3, #1
 8016360:	d013      	beq.n	801638a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8016362:	e023      	b.n	80163ac <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	7a5b      	ldrb	r3, [r3, #9]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d007      	beq.n	801637c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801636c:	f000 f83c 	bl	80163e8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016370:	4b10      	ldr	r3, [pc, #64]	@ (80163b4 <HAL_PCDEx_LPM_Callback+0x68>)
 8016372:	691b      	ldr	r3, [r3, #16]
 8016374:	4a0f      	ldr	r2, [pc, #60]	@ (80163b4 <HAL_PCDEx_LPM_Callback+0x68>)
 8016376:	f023 0306 	bic.w	r3, r3, #6
 801637a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016382:	4618      	mov	r0, r3
 8016384:	f7fd fe69 	bl	801405a <USBD_LL_Resume>
    break;
 8016388:	e010      	b.n	80163ac <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016390:	4618      	mov	r0, r3
 8016392:	f7fd fe46 	bl	8014022 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	7a5b      	ldrb	r3, [r3, #9]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d005      	beq.n	80163aa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801639e:	4b05      	ldr	r3, [pc, #20]	@ (80163b4 <HAL_PCDEx_LPM_Callback+0x68>)
 80163a0:	691b      	ldr	r3, [r3, #16]
 80163a2:	4a04      	ldr	r2, [pc, #16]	@ (80163b4 <HAL_PCDEx_LPM_Callback+0x68>)
 80163a4:	f043 0306 	orr.w	r3, r3, #6
 80163a8:	6113      	str	r3, [r2, #16]
    break;
 80163aa:	bf00      	nop
}
 80163ac:	bf00      	nop
 80163ae:	3708      	adds	r7, #8
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd80      	pop	{r7, pc}
 80163b4:	e000ed00 	.word	0xe000ed00

080163b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80163b8:	b480      	push	{r7}
 80163ba:	b083      	sub	sp, #12
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80163c0:	4b03      	ldr	r3, [pc, #12]	@ (80163d0 <USBD_static_malloc+0x18>)
}
 80163c2:	4618      	mov	r0, r3
 80163c4:	370c      	adds	r7, #12
 80163c6:	46bd      	mov	sp, r7
 80163c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163cc:	4770      	bx	lr
 80163ce:	bf00      	nop
 80163d0:	20002a88 	.word	0x20002a88

080163d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80163d4:	b480      	push	{r7}
 80163d6:	b083      	sub	sp, #12
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80163dc:	bf00      	nop
 80163de:	370c      	adds	r7, #12
 80163e0:	46bd      	mov	sp, r7
 80163e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e6:	4770      	bx	lr

080163e8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80163ec:	f7eb fddc 	bl	8001fa8 <SystemClock_Config>
}
 80163f0:	bf00      	nop
 80163f2:	bd80      	pop	{r7, pc}

080163f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80163f4:	b480      	push	{r7}
 80163f6:	b085      	sub	sp, #20
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	4603      	mov	r3, r0
 80163fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80163fe:	2300      	movs	r3, #0
 8016400:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016402:	79fb      	ldrb	r3, [r7, #7]
 8016404:	2b03      	cmp	r3, #3
 8016406:	d817      	bhi.n	8016438 <USBD_Get_USB_Status+0x44>
 8016408:	a201      	add	r2, pc, #4	@ (adr r2, 8016410 <USBD_Get_USB_Status+0x1c>)
 801640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801640e:	bf00      	nop
 8016410:	08016421 	.word	0x08016421
 8016414:	08016427 	.word	0x08016427
 8016418:	0801642d 	.word	0x0801642d
 801641c:	08016433 	.word	0x08016433
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016420:	2300      	movs	r3, #0
 8016422:	73fb      	strb	r3, [r7, #15]
    break;
 8016424:	e00b      	b.n	801643e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016426:	2303      	movs	r3, #3
 8016428:	73fb      	strb	r3, [r7, #15]
    break;
 801642a:	e008      	b.n	801643e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801642c:	2301      	movs	r3, #1
 801642e:	73fb      	strb	r3, [r7, #15]
    break;
 8016430:	e005      	b.n	801643e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016432:	2303      	movs	r3, #3
 8016434:	73fb      	strb	r3, [r7, #15]
    break;
 8016436:	e002      	b.n	801643e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016438:	2303      	movs	r3, #3
 801643a:	73fb      	strb	r3, [r7, #15]
    break;
 801643c:	bf00      	nop
  }
  return usb_status;
 801643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016440:	4618      	mov	r0, r3
 8016442:	3714      	adds	r7, #20
 8016444:	46bd      	mov	sp, r7
 8016446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644a:	4770      	bx	lr

0801644c <atoi>:
 801644c:	220a      	movs	r2, #10
 801644e:	2100      	movs	r1, #0
 8016450:	f000 bfa8 	b.w	80173a4 <strtol>

08016454 <malloc>:
 8016454:	4b02      	ldr	r3, [pc, #8]	@ (8016460 <malloc+0xc>)
 8016456:	4601      	mov	r1, r0
 8016458:	6818      	ldr	r0, [r3, #0]
 801645a:	f000 b82d 	b.w	80164b8 <_malloc_r>
 801645e:	bf00      	nop
 8016460:	200002a8 	.word	0x200002a8

08016464 <free>:
 8016464:	4b02      	ldr	r3, [pc, #8]	@ (8016470 <free+0xc>)
 8016466:	4601      	mov	r1, r0
 8016468:	6818      	ldr	r0, [r3, #0]
 801646a:	f002 bf15 	b.w	8019298 <_free_r>
 801646e:	bf00      	nop
 8016470:	200002a8 	.word	0x200002a8

08016474 <sbrk_aligned>:
 8016474:	b570      	push	{r4, r5, r6, lr}
 8016476:	4e0f      	ldr	r6, [pc, #60]	@ (80164b4 <sbrk_aligned+0x40>)
 8016478:	460c      	mov	r4, r1
 801647a:	6831      	ldr	r1, [r6, #0]
 801647c:	4605      	mov	r5, r0
 801647e:	b911      	cbnz	r1, 8016486 <sbrk_aligned+0x12>
 8016480:	f002 f820 	bl	80184c4 <_sbrk_r>
 8016484:	6030      	str	r0, [r6, #0]
 8016486:	4621      	mov	r1, r4
 8016488:	4628      	mov	r0, r5
 801648a:	f002 f81b 	bl	80184c4 <_sbrk_r>
 801648e:	1c43      	adds	r3, r0, #1
 8016490:	d103      	bne.n	801649a <sbrk_aligned+0x26>
 8016492:	f04f 34ff 	mov.w	r4, #4294967295
 8016496:	4620      	mov	r0, r4
 8016498:	bd70      	pop	{r4, r5, r6, pc}
 801649a:	1cc4      	adds	r4, r0, #3
 801649c:	f024 0403 	bic.w	r4, r4, #3
 80164a0:	42a0      	cmp	r0, r4
 80164a2:	d0f8      	beq.n	8016496 <sbrk_aligned+0x22>
 80164a4:	1a21      	subs	r1, r4, r0
 80164a6:	4628      	mov	r0, r5
 80164a8:	f002 f80c 	bl	80184c4 <_sbrk_r>
 80164ac:	3001      	adds	r0, #1
 80164ae:	d1f2      	bne.n	8016496 <sbrk_aligned+0x22>
 80164b0:	e7ef      	b.n	8016492 <sbrk_aligned+0x1e>
 80164b2:	bf00      	nop
 80164b4:	20002ca8 	.word	0x20002ca8

080164b8 <_malloc_r>:
 80164b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164bc:	1ccd      	adds	r5, r1, #3
 80164be:	f025 0503 	bic.w	r5, r5, #3
 80164c2:	3508      	adds	r5, #8
 80164c4:	2d0c      	cmp	r5, #12
 80164c6:	bf38      	it	cc
 80164c8:	250c      	movcc	r5, #12
 80164ca:	2d00      	cmp	r5, #0
 80164cc:	4606      	mov	r6, r0
 80164ce:	db01      	blt.n	80164d4 <_malloc_r+0x1c>
 80164d0:	42a9      	cmp	r1, r5
 80164d2:	d904      	bls.n	80164de <_malloc_r+0x26>
 80164d4:	230c      	movs	r3, #12
 80164d6:	6033      	str	r3, [r6, #0]
 80164d8:	2000      	movs	r0, #0
 80164da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80165b4 <_malloc_r+0xfc>
 80164e2:	f000 f869 	bl	80165b8 <__malloc_lock>
 80164e6:	f8d8 3000 	ldr.w	r3, [r8]
 80164ea:	461c      	mov	r4, r3
 80164ec:	bb44      	cbnz	r4, 8016540 <_malloc_r+0x88>
 80164ee:	4629      	mov	r1, r5
 80164f0:	4630      	mov	r0, r6
 80164f2:	f7ff ffbf 	bl	8016474 <sbrk_aligned>
 80164f6:	1c43      	adds	r3, r0, #1
 80164f8:	4604      	mov	r4, r0
 80164fa:	d158      	bne.n	80165ae <_malloc_r+0xf6>
 80164fc:	f8d8 4000 	ldr.w	r4, [r8]
 8016500:	4627      	mov	r7, r4
 8016502:	2f00      	cmp	r7, #0
 8016504:	d143      	bne.n	801658e <_malloc_r+0xd6>
 8016506:	2c00      	cmp	r4, #0
 8016508:	d04b      	beq.n	80165a2 <_malloc_r+0xea>
 801650a:	6823      	ldr	r3, [r4, #0]
 801650c:	4639      	mov	r1, r7
 801650e:	4630      	mov	r0, r6
 8016510:	eb04 0903 	add.w	r9, r4, r3
 8016514:	f001 ffd6 	bl	80184c4 <_sbrk_r>
 8016518:	4581      	cmp	r9, r0
 801651a:	d142      	bne.n	80165a2 <_malloc_r+0xea>
 801651c:	6821      	ldr	r1, [r4, #0]
 801651e:	1a6d      	subs	r5, r5, r1
 8016520:	4629      	mov	r1, r5
 8016522:	4630      	mov	r0, r6
 8016524:	f7ff ffa6 	bl	8016474 <sbrk_aligned>
 8016528:	3001      	adds	r0, #1
 801652a:	d03a      	beq.n	80165a2 <_malloc_r+0xea>
 801652c:	6823      	ldr	r3, [r4, #0]
 801652e:	442b      	add	r3, r5
 8016530:	6023      	str	r3, [r4, #0]
 8016532:	f8d8 3000 	ldr.w	r3, [r8]
 8016536:	685a      	ldr	r2, [r3, #4]
 8016538:	bb62      	cbnz	r2, 8016594 <_malloc_r+0xdc>
 801653a:	f8c8 7000 	str.w	r7, [r8]
 801653e:	e00f      	b.n	8016560 <_malloc_r+0xa8>
 8016540:	6822      	ldr	r2, [r4, #0]
 8016542:	1b52      	subs	r2, r2, r5
 8016544:	d420      	bmi.n	8016588 <_malloc_r+0xd0>
 8016546:	2a0b      	cmp	r2, #11
 8016548:	d917      	bls.n	801657a <_malloc_r+0xc2>
 801654a:	1961      	adds	r1, r4, r5
 801654c:	42a3      	cmp	r3, r4
 801654e:	6025      	str	r5, [r4, #0]
 8016550:	bf18      	it	ne
 8016552:	6059      	strne	r1, [r3, #4]
 8016554:	6863      	ldr	r3, [r4, #4]
 8016556:	bf08      	it	eq
 8016558:	f8c8 1000 	streq.w	r1, [r8]
 801655c:	5162      	str	r2, [r4, r5]
 801655e:	604b      	str	r3, [r1, #4]
 8016560:	4630      	mov	r0, r6
 8016562:	f000 f82f 	bl	80165c4 <__malloc_unlock>
 8016566:	f104 000b 	add.w	r0, r4, #11
 801656a:	1d23      	adds	r3, r4, #4
 801656c:	f020 0007 	bic.w	r0, r0, #7
 8016570:	1ac2      	subs	r2, r0, r3
 8016572:	bf1c      	itt	ne
 8016574:	1a1b      	subne	r3, r3, r0
 8016576:	50a3      	strne	r3, [r4, r2]
 8016578:	e7af      	b.n	80164da <_malloc_r+0x22>
 801657a:	6862      	ldr	r2, [r4, #4]
 801657c:	42a3      	cmp	r3, r4
 801657e:	bf0c      	ite	eq
 8016580:	f8c8 2000 	streq.w	r2, [r8]
 8016584:	605a      	strne	r2, [r3, #4]
 8016586:	e7eb      	b.n	8016560 <_malloc_r+0xa8>
 8016588:	4623      	mov	r3, r4
 801658a:	6864      	ldr	r4, [r4, #4]
 801658c:	e7ae      	b.n	80164ec <_malloc_r+0x34>
 801658e:	463c      	mov	r4, r7
 8016590:	687f      	ldr	r7, [r7, #4]
 8016592:	e7b6      	b.n	8016502 <_malloc_r+0x4a>
 8016594:	461a      	mov	r2, r3
 8016596:	685b      	ldr	r3, [r3, #4]
 8016598:	42a3      	cmp	r3, r4
 801659a:	d1fb      	bne.n	8016594 <_malloc_r+0xdc>
 801659c:	2300      	movs	r3, #0
 801659e:	6053      	str	r3, [r2, #4]
 80165a0:	e7de      	b.n	8016560 <_malloc_r+0xa8>
 80165a2:	230c      	movs	r3, #12
 80165a4:	6033      	str	r3, [r6, #0]
 80165a6:	4630      	mov	r0, r6
 80165a8:	f000 f80c 	bl	80165c4 <__malloc_unlock>
 80165ac:	e794      	b.n	80164d8 <_malloc_r+0x20>
 80165ae:	6005      	str	r5, [r0, #0]
 80165b0:	e7d6      	b.n	8016560 <_malloc_r+0xa8>
 80165b2:	bf00      	nop
 80165b4:	20002cac 	.word	0x20002cac

080165b8 <__malloc_lock>:
 80165b8:	4801      	ldr	r0, [pc, #4]	@ (80165c0 <__malloc_lock+0x8>)
 80165ba:	f001 bfd0 	b.w	801855e <__retarget_lock_acquire_recursive>
 80165be:	bf00      	nop
 80165c0:	20002df0 	.word	0x20002df0

080165c4 <__malloc_unlock>:
 80165c4:	4801      	ldr	r0, [pc, #4]	@ (80165cc <__malloc_unlock+0x8>)
 80165c6:	f001 bfcb 	b.w	8018560 <__retarget_lock_release_recursive>
 80165ca:	bf00      	nop
 80165cc:	20002df0 	.word	0x20002df0

080165d0 <sulp>:
 80165d0:	b570      	push	{r4, r5, r6, lr}
 80165d2:	4604      	mov	r4, r0
 80165d4:	460d      	mov	r5, r1
 80165d6:	ec45 4b10 	vmov	d0, r4, r5
 80165da:	4616      	mov	r6, r2
 80165dc:	f003 fd5e 	bl	801a09c <__ulp>
 80165e0:	ec51 0b10 	vmov	r0, r1, d0
 80165e4:	b17e      	cbz	r6, 8016606 <sulp+0x36>
 80165e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80165ea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	dd09      	ble.n	8016606 <sulp+0x36>
 80165f2:	051b      	lsls	r3, r3, #20
 80165f4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80165f8:	2400      	movs	r4, #0
 80165fa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80165fe:	4622      	mov	r2, r4
 8016600:	462b      	mov	r3, r5
 8016602:	f7e9 ffd1 	bl	80005a8 <__aeabi_dmul>
 8016606:	ec41 0b10 	vmov	d0, r0, r1
 801660a:	bd70      	pop	{r4, r5, r6, pc}
 801660c:	0000      	movs	r0, r0
	...

08016610 <_strtod_l>:
 8016610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016614:	b09f      	sub	sp, #124	@ 0x7c
 8016616:	460c      	mov	r4, r1
 8016618:	9217      	str	r2, [sp, #92]	@ 0x5c
 801661a:	2200      	movs	r2, #0
 801661c:	921a      	str	r2, [sp, #104]	@ 0x68
 801661e:	9005      	str	r0, [sp, #20]
 8016620:	f04f 0a00 	mov.w	sl, #0
 8016624:	f04f 0b00 	mov.w	fp, #0
 8016628:	460a      	mov	r2, r1
 801662a:	9219      	str	r2, [sp, #100]	@ 0x64
 801662c:	7811      	ldrb	r1, [r2, #0]
 801662e:	292b      	cmp	r1, #43	@ 0x2b
 8016630:	d04a      	beq.n	80166c8 <_strtod_l+0xb8>
 8016632:	d838      	bhi.n	80166a6 <_strtod_l+0x96>
 8016634:	290d      	cmp	r1, #13
 8016636:	d832      	bhi.n	801669e <_strtod_l+0x8e>
 8016638:	2908      	cmp	r1, #8
 801663a:	d832      	bhi.n	80166a2 <_strtod_l+0x92>
 801663c:	2900      	cmp	r1, #0
 801663e:	d03b      	beq.n	80166b8 <_strtod_l+0xa8>
 8016640:	2200      	movs	r2, #0
 8016642:	920e      	str	r2, [sp, #56]	@ 0x38
 8016644:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8016646:	782a      	ldrb	r2, [r5, #0]
 8016648:	2a30      	cmp	r2, #48	@ 0x30
 801664a:	f040 80b2 	bne.w	80167b2 <_strtod_l+0x1a2>
 801664e:	786a      	ldrb	r2, [r5, #1]
 8016650:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016654:	2a58      	cmp	r2, #88	@ 0x58
 8016656:	d16e      	bne.n	8016736 <_strtod_l+0x126>
 8016658:	9302      	str	r3, [sp, #8]
 801665a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801665c:	9301      	str	r3, [sp, #4]
 801665e:	ab1a      	add	r3, sp, #104	@ 0x68
 8016660:	9300      	str	r3, [sp, #0]
 8016662:	4a8f      	ldr	r2, [pc, #572]	@ (80168a0 <_strtod_l+0x290>)
 8016664:	9805      	ldr	r0, [sp, #20]
 8016666:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016668:	a919      	add	r1, sp, #100	@ 0x64
 801666a:	f002 fec7 	bl	80193fc <__gethex>
 801666e:	f010 060f 	ands.w	r6, r0, #15
 8016672:	4604      	mov	r4, r0
 8016674:	d005      	beq.n	8016682 <_strtod_l+0x72>
 8016676:	2e06      	cmp	r6, #6
 8016678:	d128      	bne.n	80166cc <_strtod_l+0xbc>
 801667a:	3501      	adds	r5, #1
 801667c:	2300      	movs	r3, #0
 801667e:	9519      	str	r5, [sp, #100]	@ 0x64
 8016680:	930e      	str	r3, [sp, #56]	@ 0x38
 8016682:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016684:	2b00      	cmp	r3, #0
 8016686:	f040 858e 	bne.w	80171a6 <_strtod_l+0xb96>
 801668a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801668c:	b1cb      	cbz	r3, 80166c2 <_strtod_l+0xb2>
 801668e:	4652      	mov	r2, sl
 8016690:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016694:	ec43 2b10 	vmov	d0, r2, r3
 8016698:	b01f      	add	sp, #124	@ 0x7c
 801669a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801669e:	2920      	cmp	r1, #32
 80166a0:	d1ce      	bne.n	8016640 <_strtod_l+0x30>
 80166a2:	3201      	adds	r2, #1
 80166a4:	e7c1      	b.n	801662a <_strtod_l+0x1a>
 80166a6:	292d      	cmp	r1, #45	@ 0x2d
 80166a8:	d1ca      	bne.n	8016640 <_strtod_l+0x30>
 80166aa:	2101      	movs	r1, #1
 80166ac:	910e      	str	r1, [sp, #56]	@ 0x38
 80166ae:	1c51      	adds	r1, r2, #1
 80166b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80166b2:	7852      	ldrb	r2, [r2, #1]
 80166b4:	2a00      	cmp	r2, #0
 80166b6:	d1c5      	bne.n	8016644 <_strtod_l+0x34>
 80166b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80166ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80166bc:	2b00      	cmp	r3, #0
 80166be:	f040 8570 	bne.w	80171a2 <_strtod_l+0xb92>
 80166c2:	4652      	mov	r2, sl
 80166c4:	465b      	mov	r3, fp
 80166c6:	e7e5      	b.n	8016694 <_strtod_l+0x84>
 80166c8:	2100      	movs	r1, #0
 80166ca:	e7ef      	b.n	80166ac <_strtod_l+0x9c>
 80166cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80166ce:	b13a      	cbz	r2, 80166e0 <_strtod_l+0xd0>
 80166d0:	2135      	movs	r1, #53	@ 0x35
 80166d2:	a81c      	add	r0, sp, #112	@ 0x70
 80166d4:	f003 fddc 	bl	801a290 <__copybits>
 80166d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80166da:	9805      	ldr	r0, [sp, #20]
 80166dc:	f003 f9b2 	bl	8019a44 <_Bfree>
 80166e0:	3e01      	subs	r6, #1
 80166e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80166e4:	2e04      	cmp	r6, #4
 80166e6:	d806      	bhi.n	80166f6 <_strtod_l+0xe6>
 80166e8:	e8df f006 	tbb	[pc, r6]
 80166ec:	201d0314 	.word	0x201d0314
 80166f0:	14          	.byte	0x14
 80166f1:	00          	.byte	0x00
 80166f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80166f6:	05e1      	lsls	r1, r4, #23
 80166f8:	bf48      	it	mi
 80166fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80166fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016702:	0d1b      	lsrs	r3, r3, #20
 8016704:	051b      	lsls	r3, r3, #20
 8016706:	2b00      	cmp	r3, #0
 8016708:	d1bb      	bne.n	8016682 <_strtod_l+0x72>
 801670a:	f001 fefd 	bl	8018508 <__errno>
 801670e:	2322      	movs	r3, #34	@ 0x22
 8016710:	6003      	str	r3, [r0, #0]
 8016712:	e7b6      	b.n	8016682 <_strtod_l+0x72>
 8016714:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016718:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801671c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016720:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016724:	e7e7      	b.n	80166f6 <_strtod_l+0xe6>
 8016726:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80168a8 <_strtod_l+0x298>
 801672a:	e7e4      	b.n	80166f6 <_strtod_l+0xe6>
 801672c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016730:	f04f 3aff 	mov.w	sl, #4294967295
 8016734:	e7df      	b.n	80166f6 <_strtod_l+0xe6>
 8016736:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016738:	1c5a      	adds	r2, r3, #1
 801673a:	9219      	str	r2, [sp, #100]	@ 0x64
 801673c:	785b      	ldrb	r3, [r3, #1]
 801673e:	2b30      	cmp	r3, #48	@ 0x30
 8016740:	d0f9      	beq.n	8016736 <_strtod_l+0x126>
 8016742:	2b00      	cmp	r3, #0
 8016744:	d09d      	beq.n	8016682 <_strtod_l+0x72>
 8016746:	2301      	movs	r3, #1
 8016748:	2700      	movs	r7, #0
 801674a:	9308      	str	r3, [sp, #32]
 801674c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801674e:	930c      	str	r3, [sp, #48]	@ 0x30
 8016750:	970b      	str	r7, [sp, #44]	@ 0x2c
 8016752:	46b9      	mov	r9, r7
 8016754:	220a      	movs	r2, #10
 8016756:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016758:	7805      	ldrb	r5, [r0, #0]
 801675a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801675e:	b2d9      	uxtb	r1, r3
 8016760:	2909      	cmp	r1, #9
 8016762:	d928      	bls.n	80167b6 <_strtod_l+0x1a6>
 8016764:	494f      	ldr	r1, [pc, #316]	@ (80168a4 <_strtod_l+0x294>)
 8016766:	2201      	movs	r2, #1
 8016768:	f001 fdef 	bl	801834a <strncmp>
 801676c:	2800      	cmp	r0, #0
 801676e:	d032      	beq.n	80167d6 <_strtod_l+0x1c6>
 8016770:	2000      	movs	r0, #0
 8016772:	462a      	mov	r2, r5
 8016774:	900a      	str	r0, [sp, #40]	@ 0x28
 8016776:	464d      	mov	r5, r9
 8016778:	4603      	mov	r3, r0
 801677a:	2a65      	cmp	r2, #101	@ 0x65
 801677c:	d001      	beq.n	8016782 <_strtod_l+0x172>
 801677e:	2a45      	cmp	r2, #69	@ 0x45
 8016780:	d114      	bne.n	80167ac <_strtod_l+0x19c>
 8016782:	b91d      	cbnz	r5, 801678c <_strtod_l+0x17c>
 8016784:	9a08      	ldr	r2, [sp, #32]
 8016786:	4302      	orrs	r2, r0
 8016788:	d096      	beq.n	80166b8 <_strtod_l+0xa8>
 801678a:	2500      	movs	r5, #0
 801678c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801678e:	1c62      	adds	r2, r4, #1
 8016790:	9219      	str	r2, [sp, #100]	@ 0x64
 8016792:	7862      	ldrb	r2, [r4, #1]
 8016794:	2a2b      	cmp	r2, #43	@ 0x2b
 8016796:	d07a      	beq.n	801688e <_strtod_l+0x27e>
 8016798:	2a2d      	cmp	r2, #45	@ 0x2d
 801679a:	d07e      	beq.n	801689a <_strtod_l+0x28a>
 801679c:	f04f 0c00 	mov.w	ip, #0
 80167a0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80167a4:	2909      	cmp	r1, #9
 80167a6:	f240 8085 	bls.w	80168b4 <_strtod_l+0x2a4>
 80167aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80167ac:	f04f 0800 	mov.w	r8, #0
 80167b0:	e0a5      	b.n	80168fe <_strtod_l+0x2ee>
 80167b2:	2300      	movs	r3, #0
 80167b4:	e7c8      	b.n	8016748 <_strtod_l+0x138>
 80167b6:	f1b9 0f08 	cmp.w	r9, #8
 80167ba:	bfd8      	it	le
 80167bc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80167be:	f100 0001 	add.w	r0, r0, #1
 80167c2:	bfda      	itte	le
 80167c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80167c8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80167ca:	fb02 3707 	mlagt	r7, r2, r7, r3
 80167ce:	f109 0901 	add.w	r9, r9, #1
 80167d2:	9019      	str	r0, [sp, #100]	@ 0x64
 80167d4:	e7bf      	b.n	8016756 <_strtod_l+0x146>
 80167d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80167d8:	1c5a      	adds	r2, r3, #1
 80167da:	9219      	str	r2, [sp, #100]	@ 0x64
 80167dc:	785a      	ldrb	r2, [r3, #1]
 80167de:	f1b9 0f00 	cmp.w	r9, #0
 80167e2:	d03b      	beq.n	801685c <_strtod_l+0x24c>
 80167e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80167e6:	464d      	mov	r5, r9
 80167e8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80167ec:	2b09      	cmp	r3, #9
 80167ee:	d912      	bls.n	8016816 <_strtod_l+0x206>
 80167f0:	2301      	movs	r3, #1
 80167f2:	e7c2      	b.n	801677a <_strtod_l+0x16a>
 80167f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80167f6:	1c5a      	adds	r2, r3, #1
 80167f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80167fa:	785a      	ldrb	r2, [r3, #1]
 80167fc:	3001      	adds	r0, #1
 80167fe:	2a30      	cmp	r2, #48	@ 0x30
 8016800:	d0f8      	beq.n	80167f4 <_strtod_l+0x1e4>
 8016802:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016806:	2b08      	cmp	r3, #8
 8016808:	f200 84d2 	bhi.w	80171b0 <_strtod_l+0xba0>
 801680c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801680e:	900a      	str	r0, [sp, #40]	@ 0x28
 8016810:	2000      	movs	r0, #0
 8016812:	930c      	str	r3, [sp, #48]	@ 0x30
 8016814:	4605      	mov	r5, r0
 8016816:	3a30      	subs	r2, #48	@ 0x30
 8016818:	f100 0301 	add.w	r3, r0, #1
 801681c:	d018      	beq.n	8016850 <_strtod_l+0x240>
 801681e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016820:	4419      	add	r1, r3
 8016822:	910a      	str	r1, [sp, #40]	@ 0x28
 8016824:	462e      	mov	r6, r5
 8016826:	f04f 0e0a 	mov.w	lr, #10
 801682a:	1c71      	adds	r1, r6, #1
 801682c:	eba1 0c05 	sub.w	ip, r1, r5
 8016830:	4563      	cmp	r3, ip
 8016832:	dc15      	bgt.n	8016860 <_strtod_l+0x250>
 8016834:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8016838:	182b      	adds	r3, r5, r0
 801683a:	2b08      	cmp	r3, #8
 801683c:	f105 0501 	add.w	r5, r5, #1
 8016840:	4405      	add	r5, r0
 8016842:	dc1a      	bgt.n	801687a <_strtod_l+0x26a>
 8016844:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016846:	230a      	movs	r3, #10
 8016848:	fb03 2301 	mla	r3, r3, r1, r2
 801684c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801684e:	2300      	movs	r3, #0
 8016850:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016852:	1c51      	adds	r1, r2, #1
 8016854:	9119      	str	r1, [sp, #100]	@ 0x64
 8016856:	7852      	ldrb	r2, [r2, #1]
 8016858:	4618      	mov	r0, r3
 801685a:	e7c5      	b.n	80167e8 <_strtod_l+0x1d8>
 801685c:	4648      	mov	r0, r9
 801685e:	e7ce      	b.n	80167fe <_strtod_l+0x1ee>
 8016860:	2e08      	cmp	r6, #8
 8016862:	dc05      	bgt.n	8016870 <_strtod_l+0x260>
 8016864:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016866:	fb0e f606 	mul.w	r6, lr, r6
 801686a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801686c:	460e      	mov	r6, r1
 801686e:	e7dc      	b.n	801682a <_strtod_l+0x21a>
 8016870:	2910      	cmp	r1, #16
 8016872:	bfd8      	it	le
 8016874:	fb0e f707 	mulle.w	r7, lr, r7
 8016878:	e7f8      	b.n	801686c <_strtod_l+0x25c>
 801687a:	2b0f      	cmp	r3, #15
 801687c:	bfdc      	itt	le
 801687e:	230a      	movle	r3, #10
 8016880:	fb03 2707 	mlale	r7, r3, r7, r2
 8016884:	e7e3      	b.n	801684e <_strtod_l+0x23e>
 8016886:	2300      	movs	r3, #0
 8016888:	930a      	str	r3, [sp, #40]	@ 0x28
 801688a:	2301      	movs	r3, #1
 801688c:	e77a      	b.n	8016784 <_strtod_l+0x174>
 801688e:	f04f 0c00 	mov.w	ip, #0
 8016892:	1ca2      	adds	r2, r4, #2
 8016894:	9219      	str	r2, [sp, #100]	@ 0x64
 8016896:	78a2      	ldrb	r2, [r4, #2]
 8016898:	e782      	b.n	80167a0 <_strtod_l+0x190>
 801689a:	f04f 0c01 	mov.w	ip, #1
 801689e:	e7f8      	b.n	8016892 <_strtod_l+0x282>
 80168a0:	0801f340 	.word	0x0801f340
 80168a4:	0801f0fc 	.word	0x0801f0fc
 80168a8:	7ff00000 	.word	0x7ff00000
 80168ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80168ae:	1c51      	adds	r1, r2, #1
 80168b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80168b2:	7852      	ldrb	r2, [r2, #1]
 80168b4:	2a30      	cmp	r2, #48	@ 0x30
 80168b6:	d0f9      	beq.n	80168ac <_strtod_l+0x29c>
 80168b8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80168bc:	2908      	cmp	r1, #8
 80168be:	f63f af75 	bhi.w	80167ac <_strtod_l+0x19c>
 80168c2:	3a30      	subs	r2, #48	@ 0x30
 80168c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80168c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80168c8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80168ca:	f04f 080a 	mov.w	r8, #10
 80168ce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80168d0:	1c56      	adds	r6, r2, #1
 80168d2:	9619      	str	r6, [sp, #100]	@ 0x64
 80168d4:	7852      	ldrb	r2, [r2, #1]
 80168d6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80168da:	f1be 0f09 	cmp.w	lr, #9
 80168de:	d939      	bls.n	8016954 <_strtod_l+0x344>
 80168e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80168e2:	1a76      	subs	r6, r6, r1
 80168e4:	2e08      	cmp	r6, #8
 80168e6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80168ea:	dc03      	bgt.n	80168f4 <_strtod_l+0x2e4>
 80168ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80168ee:	4588      	cmp	r8, r1
 80168f0:	bfa8      	it	ge
 80168f2:	4688      	movge	r8, r1
 80168f4:	f1bc 0f00 	cmp.w	ip, #0
 80168f8:	d001      	beq.n	80168fe <_strtod_l+0x2ee>
 80168fa:	f1c8 0800 	rsb	r8, r8, #0
 80168fe:	2d00      	cmp	r5, #0
 8016900:	d14e      	bne.n	80169a0 <_strtod_l+0x390>
 8016902:	9908      	ldr	r1, [sp, #32]
 8016904:	4308      	orrs	r0, r1
 8016906:	f47f aebc 	bne.w	8016682 <_strtod_l+0x72>
 801690a:	2b00      	cmp	r3, #0
 801690c:	f47f aed4 	bne.w	80166b8 <_strtod_l+0xa8>
 8016910:	2a69      	cmp	r2, #105	@ 0x69
 8016912:	d028      	beq.n	8016966 <_strtod_l+0x356>
 8016914:	dc25      	bgt.n	8016962 <_strtod_l+0x352>
 8016916:	2a49      	cmp	r2, #73	@ 0x49
 8016918:	d025      	beq.n	8016966 <_strtod_l+0x356>
 801691a:	2a4e      	cmp	r2, #78	@ 0x4e
 801691c:	f47f aecc 	bne.w	80166b8 <_strtod_l+0xa8>
 8016920:	499a      	ldr	r1, [pc, #616]	@ (8016b8c <_strtod_l+0x57c>)
 8016922:	a819      	add	r0, sp, #100	@ 0x64
 8016924:	f002 ff8c 	bl	8019840 <__match>
 8016928:	2800      	cmp	r0, #0
 801692a:	f43f aec5 	beq.w	80166b8 <_strtod_l+0xa8>
 801692e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016930:	781b      	ldrb	r3, [r3, #0]
 8016932:	2b28      	cmp	r3, #40	@ 0x28
 8016934:	d12e      	bne.n	8016994 <_strtod_l+0x384>
 8016936:	4996      	ldr	r1, [pc, #600]	@ (8016b90 <_strtod_l+0x580>)
 8016938:	aa1c      	add	r2, sp, #112	@ 0x70
 801693a:	a819      	add	r0, sp, #100	@ 0x64
 801693c:	f002 ff94 	bl	8019868 <__hexnan>
 8016940:	2805      	cmp	r0, #5
 8016942:	d127      	bne.n	8016994 <_strtod_l+0x384>
 8016944:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016946:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801694a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801694e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016952:	e696      	b.n	8016682 <_strtod_l+0x72>
 8016954:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016956:	fb08 2101 	mla	r1, r8, r1, r2
 801695a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801695e:	9209      	str	r2, [sp, #36]	@ 0x24
 8016960:	e7b5      	b.n	80168ce <_strtod_l+0x2be>
 8016962:	2a6e      	cmp	r2, #110	@ 0x6e
 8016964:	e7da      	b.n	801691c <_strtod_l+0x30c>
 8016966:	498b      	ldr	r1, [pc, #556]	@ (8016b94 <_strtod_l+0x584>)
 8016968:	a819      	add	r0, sp, #100	@ 0x64
 801696a:	f002 ff69 	bl	8019840 <__match>
 801696e:	2800      	cmp	r0, #0
 8016970:	f43f aea2 	beq.w	80166b8 <_strtod_l+0xa8>
 8016974:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016976:	4988      	ldr	r1, [pc, #544]	@ (8016b98 <_strtod_l+0x588>)
 8016978:	3b01      	subs	r3, #1
 801697a:	a819      	add	r0, sp, #100	@ 0x64
 801697c:	9319      	str	r3, [sp, #100]	@ 0x64
 801697e:	f002 ff5f 	bl	8019840 <__match>
 8016982:	b910      	cbnz	r0, 801698a <_strtod_l+0x37a>
 8016984:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016986:	3301      	adds	r3, #1
 8016988:	9319      	str	r3, [sp, #100]	@ 0x64
 801698a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8016ba8 <_strtod_l+0x598>
 801698e:	f04f 0a00 	mov.w	sl, #0
 8016992:	e676      	b.n	8016682 <_strtod_l+0x72>
 8016994:	4881      	ldr	r0, [pc, #516]	@ (8016b9c <_strtod_l+0x58c>)
 8016996:	f001 fdfb 	bl	8018590 <nan>
 801699a:	ec5b ab10 	vmov	sl, fp, d0
 801699e:	e670      	b.n	8016682 <_strtod_l+0x72>
 80169a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80169a2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80169a4:	eba8 0303 	sub.w	r3, r8, r3
 80169a8:	f1b9 0f00 	cmp.w	r9, #0
 80169ac:	bf08      	it	eq
 80169ae:	46a9      	moveq	r9, r5
 80169b0:	2d10      	cmp	r5, #16
 80169b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80169b4:	462c      	mov	r4, r5
 80169b6:	bfa8      	it	ge
 80169b8:	2410      	movge	r4, #16
 80169ba:	f7e9 fd7b 	bl	80004b4 <__aeabi_ui2d>
 80169be:	2d09      	cmp	r5, #9
 80169c0:	4682      	mov	sl, r0
 80169c2:	468b      	mov	fp, r1
 80169c4:	dc13      	bgt.n	80169ee <_strtod_l+0x3de>
 80169c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	f43f ae5a 	beq.w	8016682 <_strtod_l+0x72>
 80169ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80169d0:	dd78      	ble.n	8016ac4 <_strtod_l+0x4b4>
 80169d2:	2b16      	cmp	r3, #22
 80169d4:	dc5f      	bgt.n	8016a96 <_strtod_l+0x486>
 80169d6:	4972      	ldr	r1, [pc, #456]	@ (8016ba0 <_strtod_l+0x590>)
 80169d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80169dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169e0:	4652      	mov	r2, sl
 80169e2:	465b      	mov	r3, fp
 80169e4:	f7e9 fde0 	bl	80005a8 <__aeabi_dmul>
 80169e8:	4682      	mov	sl, r0
 80169ea:	468b      	mov	fp, r1
 80169ec:	e649      	b.n	8016682 <_strtod_l+0x72>
 80169ee:	4b6c      	ldr	r3, [pc, #432]	@ (8016ba0 <_strtod_l+0x590>)
 80169f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80169f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80169f8:	f7e9 fdd6 	bl	80005a8 <__aeabi_dmul>
 80169fc:	4682      	mov	sl, r0
 80169fe:	4638      	mov	r0, r7
 8016a00:	468b      	mov	fp, r1
 8016a02:	f7e9 fd57 	bl	80004b4 <__aeabi_ui2d>
 8016a06:	4602      	mov	r2, r0
 8016a08:	460b      	mov	r3, r1
 8016a0a:	4650      	mov	r0, sl
 8016a0c:	4659      	mov	r1, fp
 8016a0e:	f7e9 fc15 	bl	800023c <__adddf3>
 8016a12:	2d0f      	cmp	r5, #15
 8016a14:	4682      	mov	sl, r0
 8016a16:	468b      	mov	fp, r1
 8016a18:	ddd5      	ble.n	80169c6 <_strtod_l+0x3b6>
 8016a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a1c:	1b2c      	subs	r4, r5, r4
 8016a1e:	441c      	add	r4, r3
 8016a20:	2c00      	cmp	r4, #0
 8016a22:	f340 8093 	ble.w	8016b4c <_strtod_l+0x53c>
 8016a26:	f014 030f 	ands.w	r3, r4, #15
 8016a2a:	d00a      	beq.n	8016a42 <_strtod_l+0x432>
 8016a2c:	495c      	ldr	r1, [pc, #368]	@ (8016ba0 <_strtod_l+0x590>)
 8016a2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016a32:	4652      	mov	r2, sl
 8016a34:	465b      	mov	r3, fp
 8016a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a3a:	f7e9 fdb5 	bl	80005a8 <__aeabi_dmul>
 8016a3e:	4682      	mov	sl, r0
 8016a40:	468b      	mov	fp, r1
 8016a42:	f034 040f 	bics.w	r4, r4, #15
 8016a46:	d073      	beq.n	8016b30 <_strtod_l+0x520>
 8016a48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8016a4c:	dd49      	ble.n	8016ae2 <_strtod_l+0x4d2>
 8016a4e:	2400      	movs	r4, #0
 8016a50:	46a0      	mov	r8, r4
 8016a52:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016a54:	46a1      	mov	r9, r4
 8016a56:	9a05      	ldr	r2, [sp, #20]
 8016a58:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8016ba8 <_strtod_l+0x598>
 8016a5c:	2322      	movs	r3, #34	@ 0x22
 8016a5e:	6013      	str	r3, [r2, #0]
 8016a60:	f04f 0a00 	mov.w	sl, #0
 8016a64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	f43f ae0b 	beq.w	8016682 <_strtod_l+0x72>
 8016a6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016a6e:	9805      	ldr	r0, [sp, #20]
 8016a70:	f002 ffe8 	bl	8019a44 <_Bfree>
 8016a74:	9805      	ldr	r0, [sp, #20]
 8016a76:	4649      	mov	r1, r9
 8016a78:	f002 ffe4 	bl	8019a44 <_Bfree>
 8016a7c:	9805      	ldr	r0, [sp, #20]
 8016a7e:	4641      	mov	r1, r8
 8016a80:	f002 ffe0 	bl	8019a44 <_Bfree>
 8016a84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016a86:	9805      	ldr	r0, [sp, #20]
 8016a88:	f002 ffdc 	bl	8019a44 <_Bfree>
 8016a8c:	9805      	ldr	r0, [sp, #20]
 8016a8e:	4621      	mov	r1, r4
 8016a90:	f002 ffd8 	bl	8019a44 <_Bfree>
 8016a94:	e5f5      	b.n	8016682 <_strtod_l+0x72>
 8016a96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016a98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8016a9c:	4293      	cmp	r3, r2
 8016a9e:	dbbc      	blt.n	8016a1a <_strtod_l+0x40a>
 8016aa0:	4c3f      	ldr	r4, [pc, #252]	@ (8016ba0 <_strtod_l+0x590>)
 8016aa2:	f1c5 050f 	rsb	r5, r5, #15
 8016aa6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016aaa:	4652      	mov	r2, sl
 8016aac:	465b      	mov	r3, fp
 8016aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ab2:	f7e9 fd79 	bl	80005a8 <__aeabi_dmul>
 8016ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ab8:	1b5d      	subs	r5, r3, r5
 8016aba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016abe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016ac2:	e78f      	b.n	80169e4 <_strtod_l+0x3d4>
 8016ac4:	3316      	adds	r3, #22
 8016ac6:	dba8      	blt.n	8016a1a <_strtod_l+0x40a>
 8016ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016aca:	eba3 0808 	sub.w	r8, r3, r8
 8016ace:	4b34      	ldr	r3, [pc, #208]	@ (8016ba0 <_strtod_l+0x590>)
 8016ad0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8016ad4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8016ad8:	4650      	mov	r0, sl
 8016ada:	4659      	mov	r1, fp
 8016adc:	f7e9 fe8e 	bl	80007fc <__aeabi_ddiv>
 8016ae0:	e782      	b.n	80169e8 <_strtod_l+0x3d8>
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	4f2f      	ldr	r7, [pc, #188]	@ (8016ba4 <_strtod_l+0x594>)
 8016ae6:	1124      	asrs	r4, r4, #4
 8016ae8:	4650      	mov	r0, sl
 8016aea:	4659      	mov	r1, fp
 8016aec:	461e      	mov	r6, r3
 8016aee:	2c01      	cmp	r4, #1
 8016af0:	dc21      	bgt.n	8016b36 <_strtod_l+0x526>
 8016af2:	b10b      	cbz	r3, 8016af8 <_strtod_l+0x4e8>
 8016af4:	4682      	mov	sl, r0
 8016af6:	468b      	mov	fp, r1
 8016af8:	492a      	ldr	r1, [pc, #168]	@ (8016ba4 <_strtod_l+0x594>)
 8016afa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016afe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8016b02:	4652      	mov	r2, sl
 8016b04:	465b      	mov	r3, fp
 8016b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b0a:	f7e9 fd4d 	bl	80005a8 <__aeabi_dmul>
 8016b0e:	4b26      	ldr	r3, [pc, #152]	@ (8016ba8 <_strtod_l+0x598>)
 8016b10:	460a      	mov	r2, r1
 8016b12:	400b      	ands	r3, r1
 8016b14:	4925      	ldr	r1, [pc, #148]	@ (8016bac <_strtod_l+0x59c>)
 8016b16:	428b      	cmp	r3, r1
 8016b18:	4682      	mov	sl, r0
 8016b1a:	d898      	bhi.n	8016a4e <_strtod_l+0x43e>
 8016b1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8016b20:	428b      	cmp	r3, r1
 8016b22:	bf86      	itte	hi
 8016b24:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8016bb0 <_strtod_l+0x5a0>
 8016b28:	f04f 3aff 	movhi.w	sl, #4294967295
 8016b2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8016b30:	2300      	movs	r3, #0
 8016b32:	9308      	str	r3, [sp, #32]
 8016b34:	e076      	b.n	8016c24 <_strtod_l+0x614>
 8016b36:	07e2      	lsls	r2, r4, #31
 8016b38:	d504      	bpl.n	8016b44 <_strtod_l+0x534>
 8016b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b3e:	f7e9 fd33 	bl	80005a8 <__aeabi_dmul>
 8016b42:	2301      	movs	r3, #1
 8016b44:	3601      	adds	r6, #1
 8016b46:	1064      	asrs	r4, r4, #1
 8016b48:	3708      	adds	r7, #8
 8016b4a:	e7d0      	b.n	8016aee <_strtod_l+0x4de>
 8016b4c:	d0f0      	beq.n	8016b30 <_strtod_l+0x520>
 8016b4e:	4264      	negs	r4, r4
 8016b50:	f014 020f 	ands.w	r2, r4, #15
 8016b54:	d00a      	beq.n	8016b6c <_strtod_l+0x55c>
 8016b56:	4b12      	ldr	r3, [pc, #72]	@ (8016ba0 <_strtod_l+0x590>)
 8016b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016b5c:	4650      	mov	r0, sl
 8016b5e:	4659      	mov	r1, fp
 8016b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b64:	f7e9 fe4a 	bl	80007fc <__aeabi_ddiv>
 8016b68:	4682      	mov	sl, r0
 8016b6a:	468b      	mov	fp, r1
 8016b6c:	1124      	asrs	r4, r4, #4
 8016b6e:	d0df      	beq.n	8016b30 <_strtod_l+0x520>
 8016b70:	2c1f      	cmp	r4, #31
 8016b72:	dd1f      	ble.n	8016bb4 <_strtod_l+0x5a4>
 8016b74:	2400      	movs	r4, #0
 8016b76:	46a0      	mov	r8, r4
 8016b78:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016b7a:	46a1      	mov	r9, r4
 8016b7c:	9a05      	ldr	r2, [sp, #20]
 8016b7e:	2322      	movs	r3, #34	@ 0x22
 8016b80:	f04f 0a00 	mov.w	sl, #0
 8016b84:	f04f 0b00 	mov.w	fp, #0
 8016b88:	6013      	str	r3, [r2, #0]
 8016b8a:	e76b      	b.n	8016a64 <_strtod_l+0x454>
 8016b8c:	0801f10b 	.word	0x0801f10b
 8016b90:	0801f32c 	.word	0x0801f32c
 8016b94:	0801f103 	.word	0x0801f103
 8016b98:	0801f1ef 	.word	0x0801f1ef
 8016b9c:	0801f1eb 	.word	0x0801f1eb
 8016ba0:	0801f4b8 	.word	0x0801f4b8
 8016ba4:	0801f490 	.word	0x0801f490
 8016ba8:	7ff00000 	.word	0x7ff00000
 8016bac:	7ca00000 	.word	0x7ca00000
 8016bb0:	7fefffff 	.word	0x7fefffff
 8016bb4:	f014 0310 	ands.w	r3, r4, #16
 8016bb8:	bf18      	it	ne
 8016bba:	236a      	movne	r3, #106	@ 0x6a
 8016bbc:	4ea9      	ldr	r6, [pc, #676]	@ (8016e64 <_strtod_l+0x854>)
 8016bbe:	9308      	str	r3, [sp, #32]
 8016bc0:	4650      	mov	r0, sl
 8016bc2:	4659      	mov	r1, fp
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	07e7      	lsls	r7, r4, #31
 8016bc8:	d504      	bpl.n	8016bd4 <_strtod_l+0x5c4>
 8016bca:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016bce:	f7e9 fceb 	bl	80005a8 <__aeabi_dmul>
 8016bd2:	2301      	movs	r3, #1
 8016bd4:	1064      	asrs	r4, r4, #1
 8016bd6:	f106 0608 	add.w	r6, r6, #8
 8016bda:	d1f4      	bne.n	8016bc6 <_strtod_l+0x5b6>
 8016bdc:	b10b      	cbz	r3, 8016be2 <_strtod_l+0x5d2>
 8016bde:	4682      	mov	sl, r0
 8016be0:	468b      	mov	fp, r1
 8016be2:	9b08      	ldr	r3, [sp, #32]
 8016be4:	b1b3      	cbz	r3, 8016c14 <_strtod_l+0x604>
 8016be6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8016bea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	4659      	mov	r1, fp
 8016bf2:	dd0f      	ble.n	8016c14 <_strtod_l+0x604>
 8016bf4:	2b1f      	cmp	r3, #31
 8016bf6:	dd56      	ble.n	8016ca6 <_strtod_l+0x696>
 8016bf8:	2b34      	cmp	r3, #52	@ 0x34
 8016bfa:	bfde      	ittt	le
 8016bfc:	f04f 33ff 	movle.w	r3, #4294967295
 8016c00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8016c04:	4093      	lslle	r3, r2
 8016c06:	f04f 0a00 	mov.w	sl, #0
 8016c0a:	bfcc      	ite	gt
 8016c0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016c10:	ea03 0b01 	andle.w	fp, r3, r1
 8016c14:	2200      	movs	r2, #0
 8016c16:	2300      	movs	r3, #0
 8016c18:	4650      	mov	r0, sl
 8016c1a:	4659      	mov	r1, fp
 8016c1c:	f7e9 ff2c 	bl	8000a78 <__aeabi_dcmpeq>
 8016c20:	2800      	cmp	r0, #0
 8016c22:	d1a7      	bne.n	8016b74 <_strtod_l+0x564>
 8016c24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016c26:	9300      	str	r3, [sp, #0]
 8016c28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016c2a:	9805      	ldr	r0, [sp, #20]
 8016c2c:	462b      	mov	r3, r5
 8016c2e:	464a      	mov	r2, r9
 8016c30:	f002 ff70 	bl	8019b14 <__s2b>
 8016c34:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016c36:	2800      	cmp	r0, #0
 8016c38:	f43f af09 	beq.w	8016a4e <_strtod_l+0x43e>
 8016c3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016c3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016c40:	2a00      	cmp	r2, #0
 8016c42:	eba3 0308 	sub.w	r3, r3, r8
 8016c46:	bfa8      	it	ge
 8016c48:	2300      	movge	r3, #0
 8016c4a:	9312      	str	r3, [sp, #72]	@ 0x48
 8016c4c:	2400      	movs	r4, #0
 8016c4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016c52:	9316      	str	r3, [sp, #88]	@ 0x58
 8016c54:	46a0      	mov	r8, r4
 8016c56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016c58:	9805      	ldr	r0, [sp, #20]
 8016c5a:	6859      	ldr	r1, [r3, #4]
 8016c5c:	f002 feb2 	bl	80199c4 <_Balloc>
 8016c60:	4681      	mov	r9, r0
 8016c62:	2800      	cmp	r0, #0
 8016c64:	f43f aef7 	beq.w	8016a56 <_strtod_l+0x446>
 8016c68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016c6a:	691a      	ldr	r2, [r3, #16]
 8016c6c:	3202      	adds	r2, #2
 8016c6e:	f103 010c 	add.w	r1, r3, #12
 8016c72:	0092      	lsls	r2, r2, #2
 8016c74:	300c      	adds	r0, #12
 8016c76:	f001 fc7c 	bl	8018572 <memcpy>
 8016c7a:	ec4b ab10 	vmov	d0, sl, fp
 8016c7e:	9805      	ldr	r0, [sp, #20]
 8016c80:	aa1c      	add	r2, sp, #112	@ 0x70
 8016c82:	a91b      	add	r1, sp, #108	@ 0x6c
 8016c84:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8016c88:	f003 fa78 	bl	801a17c <__d2b>
 8016c8c:	901a      	str	r0, [sp, #104]	@ 0x68
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	f43f aee1 	beq.w	8016a56 <_strtod_l+0x446>
 8016c94:	9805      	ldr	r0, [sp, #20]
 8016c96:	2101      	movs	r1, #1
 8016c98:	f002 ffd2 	bl	8019c40 <__i2b>
 8016c9c:	4680      	mov	r8, r0
 8016c9e:	b948      	cbnz	r0, 8016cb4 <_strtod_l+0x6a4>
 8016ca0:	f04f 0800 	mov.w	r8, #0
 8016ca4:	e6d7      	b.n	8016a56 <_strtod_l+0x446>
 8016ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8016caa:	fa02 f303 	lsl.w	r3, r2, r3
 8016cae:	ea03 0a0a 	and.w	sl, r3, sl
 8016cb2:	e7af      	b.n	8016c14 <_strtod_l+0x604>
 8016cb4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8016cb6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016cb8:	2d00      	cmp	r5, #0
 8016cba:	bfab      	itete	ge
 8016cbc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8016cbe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8016cc0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8016cc2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8016cc4:	bfac      	ite	ge
 8016cc6:	18ef      	addge	r7, r5, r3
 8016cc8:	1b5e      	sublt	r6, r3, r5
 8016cca:	9b08      	ldr	r3, [sp, #32]
 8016ccc:	1aed      	subs	r5, r5, r3
 8016cce:	4415      	add	r5, r2
 8016cd0:	4b65      	ldr	r3, [pc, #404]	@ (8016e68 <_strtod_l+0x858>)
 8016cd2:	3d01      	subs	r5, #1
 8016cd4:	429d      	cmp	r5, r3
 8016cd6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016cda:	da50      	bge.n	8016d7e <_strtod_l+0x76e>
 8016cdc:	1b5b      	subs	r3, r3, r5
 8016cde:	2b1f      	cmp	r3, #31
 8016ce0:	eba2 0203 	sub.w	r2, r2, r3
 8016ce4:	f04f 0101 	mov.w	r1, #1
 8016ce8:	dc3d      	bgt.n	8016d66 <_strtod_l+0x756>
 8016cea:	fa01 f303 	lsl.w	r3, r1, r3
 8016cee:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	9310      	str	r3, [sp, #64]	@ 0x40
 8016cf4:	18bd      	adds	r5, r7, r2
 8016cf6:	9b08      	ldr	r3, [sp, #32]
 8016cf8:	42af      	cmp	r7, r5
 8016cfa:	4416      	add	r6, r2
 8016cfc:	441e      	add	r6, r3
 8016cfe:	463b      	mov	r3, r7
 8016d00:	bfa8      	it	ge
 8016d02:	462b      	movge	r3, r5
 8016d04:	42b3      	cmp	r3, r6
 8016d06:	bfa8      	it	ge
 8016d08:	4633      	movge	r3, r6
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	bfc2      	ittt	gt
 8016d0e:	1aed      	subgt	r5, r5, r3
 8016d10:	1af6      	subgt	r6, r6, r3
 8016d12:	1aff      	subgt	r7, r7, r3
 8016d14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	dd16      	ble.n	8016d48 <_strtod_l+0x738>
 8016d1a:	4641      	mov	r1, r8
 8016d1c:	9805      	ldr	r0, [sp, #20]
 8016d1e:	461a      	mov	r2, r3
 8016d20:	f003 f846 	bl	8019db0 <__pow5mult>
 8016d24:	4680      	mov	r8, r0
 8016d26:	2800      	cmp	r0, #0
 8016d28:	d0ba      	beq.n	8016ca0 <_strtod_l+0x690>
 8016d2a:	4601      	mov	r1, r0
 8016d2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016d2e:	9805      	ldr	r0, [sp, #20]
 8016d30:	f002 ff9c 	bl	8019c6c <__multiply>
 8016d34:	900a      	str	r0, [sp, #40]	@ 0x28
 8016d36:	2800      	cmp	r0, #0
 8016d38:	f43f ae8d 	beq.w	8016a56 <_strtod_l+0x446>
 8016d3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016d3e:	9805      	ldr	r0, [sp, #20]
 8016d40:	f002 fe80 	bl	8019a44 <_Bfree>
 8016d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016d46:	931a      	str	r3, [sp, #104]	@ 0x68
 8016d48:	2d00      	cmp	r5, #0
 8016d4a:	dc1d      	bgt.n	8016d88 <_strtod_l+0x778>
 8016d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	dd23      	ble.n	8016d9a <_strtod_l+0x78a>
 8016d52:	4649      	mov	r1, r9
 8016d54:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8016d56:	9805      	ldr	r0, [sp, #20]
 8016d58:	f003 f82a 	bl	8019db0 <__pow5mult>
 8016d5c:	4681      	mov	r9, r0
 8016d5e:	b9e0      	cbnz	r0, 8016d9a <_strtod_l+0x78a>
 8016d60:	f04f 0900 	mov.w	r9, #0
 8016d64:	e677      	b.n	8016a56 <_strtod_l+0x446>
 8016d66:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8016d6a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8016d6e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8016d72:	35e2      	adds	r5, #226	@ 0xe2
 8016d74:	fa01 f305 	lsl.w	r3, r1, r5
 8016d78:	9310      	str	r3, [sp, #64]	@ 0x40
 8016d7a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016d7c:	e7ba      	b.n	8016cf4 <_strtod_l+0x6e4>
 8016d7e:	2300      	movs	r3, #0
 8016d80:	9310      	str	r3, [sp, #64]	@ 0x40
 8016d82:	2301      	movs	r3, #1
 8016d84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016d86:	e7b5      	b.n	8016cf4 <_strtod_l+0x6e4>
 8016d88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016d8a:	9805      	ldr	r0, [sp, #20]
 8016d8c:	462a      	mov	r2, r5
 8016d8e:	f003 f869 	bl	8019e64 <__lshift>
 8016d92:	901a      	str	r0, [sp, #104]	@ 0x68
 8016d94:	2800      	cmp	r0, #0
 8016d96:	d1d9      	bne.n	8016d4c <_strtod_l+0x73c>
 8016d98:	e65d      	b.n	8016a56 <_strtod_l+0x446>
 8016d9a:	2e00      	cmp	r6, #0
 8016d9c:	dd07      	ble.n	8016dae <_strtod_l+0x79e>
 8016d9e:	4649      	mov	r1, r9
 8016da0:	9805      	ldr	r0, [sp, #20]
 8016da2:	4632      	mov	r2, r6
 8016da4:	f003 f85e 	bl	8019e64 <__lshift>
 8016da8:	4681      	mov	r9, r0
 8016daa:	2800      	cmp	r0, #0
 8016dac:	d0d8      	beq.n	8016d60 <_strtod_l+0x750>
 8016dae:	2f00      	cmp	r7, #0
 8016db0:	dd08      	ble.n	8016dc4 <_strtod_l+0x7b4>
 8016db2:	4641      	mov	r1, r8
 8016db4:	9805      	ldr	r0, [sp, #20]
 8016db6:	463a      	mov	r2, r7
 8016db8:	f003 f854 	bl	8019e64 <__lshift>
 8016dbc:	4680      	mov	r8, r0
 8016dbe:	2800      	cmp	r0, #0
 8016dc0:	f43f ae49 	beq.w	8016a56 <_strtod_l+0x446>
 8016dc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016dc6:	9805      	ldr	r0, [sp, #20]
 8016dc8:	464a      	mov	r2, r9
 8016dca:	f003 f8d3 	bl	8019f74 <__mdiff>
 8016dce:	4604      	mov	r4, r0
 8016dd0:	2800      	cmp	r0, #0
 8016dd2:	f43f ae40 	beq.w	8016a56 <_strtod_l+0x446>
 8016dd6:	68c3      	ldr	r3, [r0, #12]
 8016dd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016dda:	2300      	movs	r3, #0
 8016ddc:	60c3      	str	r3, [r0, #12]
 8016dde:	4641      	mov	r1, r8
 8016de0:	f003 f8ac 	bl	8019f3c <__mcmp>
 8016de4:	2800      	cmp	r0, #0
 8016de6:	da45      	bge.n	8016e74 <_strtod_l+0x864>
 8016de8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016dea:	ea53 030a 	orrs.w	r3, r3, sl
 8016dee:	d16b      	bne.n	8016ec8 <_strtod_l+0x8b8>
 8016df0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d167      	bne.n	8016ec8 <_strtod_l+0x8b8>
 8016df8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016dfc:	0d1b      	lsrs	r3, r3, #20
 8016dfe:	051b      	lsls	r3, r3, #20
 8016e00:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016e04:	d960      	bls.n	8016ec8 <_strtod_l+0x8b8>
 8016e06:	6963      	ldr	r3, [r4, #20]
 8016e08:	b913      	cbnz	r3, 8016e10 <_strtod_l+0x800>
 8016e0a:	6923      	ldr	r3, [r4, #16]
 8016e0c:	2b01      	cmp	r3, #1
 8016e0e:	dd5b      	ble.n	8016ec8 <_strtod_l+0x8b8>
 8016e10:	4621      	mov	r1, r4
 8016e12:	2201      	movs	r2, #1
 8016e14:	9805      	ldr	r0, [sp, #20]
 8016e16:	f003 f825 	bl	8019e64 <__lshift>
 8016e1a:	4641      	mov	r1, r8
 8016e1c:	4604      	mov	r4, r0
 8016e1e:	f003 f88d 	bl	8019f3c <__mcmp>
 8016e22:	2800      	cmp	r0, #0
 8016e24:	dd50      	ble.n	8016ec8 <_strtod_l+0x8b8>
 8016e26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016e2a:	9a08      	ldr	r2, [sp, #32]
 8016e2c:	0d1b      	lsrs	r3, r3, #20
 8016e2e:	051b      	lsls	r3, r3, #20
 8016e30:	2a00      	cmp	r2, #0
 8016e32:	d06a      	beq.n	8016f0a <_strtod_l+0x8fa>
 8016e34:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016e38:	d867      	bhi.n	8016f0a <_strtod_l+0x8fa>
 8016e3a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016e3e:	f67f ae9d 	bls.w	8016b7c <_strtod_l+0x56c>
 8016e42:	4b0a      	ldr	r3, [pc, #40]	@ (8016e6c <_strtod_l+0x85c>)
 8016e44:	4650      	mov	r0, sl
 8016e46:	4659      	mov	r1, fp
 8016e48:	2200      	movs	r2, #0
 8016e4a:	f7e9 fbad 	bl	80005a8 <__aeabi_dmul>
 8016e4e:	4b08      	ldr	r3, [pc, #32]	@ (8016e70 <_strtod_l+0x860>)
 8016e50:	400b      	ands	r3, r1
 8016e52:	4682      	mov	sl, r0
 8016e54:	468b      	mov	fp, r1
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	f47f ae08 	bne.w	8016a6c <_strtod_l+0x45c>
 8016e5c:	9a05      	ldr	r2, [sp, #20]
 8016e5e:	2322      	movs	r3, #34	@ 0x22
 8016e60:	6013      	str	r3, [r2, #0]
 8016e62:	e603      	b.n	8016a6c <_strtod_l+0x45c>
 8016e64:	0801f358 	.word	0x0801f358
 8016e68:	fffffc02 	.word	0xfffffc02
 8016e6c:	39500000 	.word	0x39500000
 8016e70:	7ff00000 	.word	0x7ff00000
 8016e74:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8016e78:	d165      	bne.n	8016f46 <_strtod_l+0x936>
 8016e7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016e7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e80:	b35a      	cbz	r2, 8016eda <_strtod_l+0x8ca>
 8016e82:	4a9f      	ldr	r2, [pc, #636]	@ (8017100 <_strtod_l+0xaf0>)
 8016e84:	4293      	cmp	r3, r2
 8016e86:	d12b      	bne.n	8016ee0 <_strtod_l+0x8d0>
 8016e88:	9b08      	ldr	r3, [sp, #32]
 8016e8a:	4651      	mov	r1, sl
 8016e8c:	b303      	cbz	r3, 8016ed0 <_strtod_l+0x8c0>
 8016e8e:	4b9d      	ldr	r3, [pc, #628]	@ (8017104 <_strtod_l+0xaf4>)
 8016e90:	465a      	mov	r2, fp
 8016e92:	4013      	ands	r3, r2
 8016e94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016e98:	f04f 32ff 	mov.w	r2, #4294967295
 8016e9c:	d81b      	bhi.n	8016ed6 <_strtod_l+0x8c6>
 8016e9e:	0d1b      	lsrs	r3, r3, #20
 8016ea0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8016ea8:	4299      	cmp	r1, r3
 8016eaa:	d119      	bne.n	8016ee0 <_strtod_l+0x8d0>
 8016eac:	4b96      	ldr	r3, [pc, #600]	@ (8017108 <_strtod_l+0xaf8>)
 8016eae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016eb0:	429a      	cmp	r2, r3
 8016eb2:	d102      	bne.n	8016eba <_strtod_l+0x8aa>
 8016eb4:	3101      	adds	r1, #1
 8016eb6:	f43f adce 	beq.w	8016a56 <_strtod_l+0x446>
 8016eba:	4b92      	ldr	r3, [pc, #584]	@ (8017104 <_strtod_l+0xaf4>)
 8016ebc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016ebe:	401a      	ands	r2, r3
 8016ec0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8016ec4:	f04f 0a00 	mov.w	sl, #0
 8016ec8:	9b08      	ldr	r3, [sp, #32]
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d1b9      	bne.n	8016e42 <_strtod_l+0x832>
 8016ece:	e5cd      	b.n	8016a6c <_strtod_l+0x45c>
 8016ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8016ed4:	e7e8      	b.n	8016ea8 <_strtod_l+0x898>
 8016ed6:	4613      	mov	r3, r2
 8016ed8:	e7e6      	b.n	8016ea8 <_strtod_l+0x898>
 8016eda:	ea53 030a 	orrs.w	r3, r3, sl
 8016ede:	d0a2      	beq.n	8016e26 <_strtod_l+0x816>
 8016ee0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016ee2:	b1db      	cbz	r3, 8016f1c <_strtod_l+0x90c>
 8016ee4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016ee6:	4213      	tst	r3, r2
 8016ee8:	d0ee      	beq.n	8016ec8 <_strtod_l+0x8b8>
 8016eea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016eec:	9a08      	ldr	r2, [sp, #32]
 8016eee:	4650      	mov	r0, sl
 8016ef0:	4659      	mov	r1, fp
 8016ef2:	b1bb      	cbz	r3, 8016f24 <_strtod_l+0x914>
 8016ef4:	f7ff fb6c 	bl	80165d0 <sulp>
 8016ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016efc:	ec53 2b10 	vmov	r2, r3, d0
 8016f00:	f7e9 f99c 	bl	800023c <__adddf3>
 8016f04:	4682      	mov	sl, r0
 8016f06:	468b      	mov	fp, r1
 8016f08:	e7de      	b.n	8016ec8 <_strtod_l+0x8b8>
 8016f0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016f0e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016f12:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016f16:	f04f 3aff 	mov.w	sl, #4294967295
 8016f1a:	e7d5      	b.n	8016ec8 <_strtod_l+0x8b8>
 8016f1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016f1e:	ea13 0f0a 	tst.w	r3, sl
 8016f22:	e7e1      	b.n	8016ee8 <_strtod_l+0x8d8>
 8016f24:	f7ff fb54 	bl	80165d0 <sulp>
 8016f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016f2c:	ec53 2b10 	vmov	r2, r3, d0
 8016f30:	f7e9 f982 	bl	8000238 <__aeabi_dsub>
 8016f34:	2200      	movs	r2, #0
 8016f36:	2300      	movs	r3, #0
 8016f38:	4682      	mov	sl, r0
 8016f3a:	468b      	mov	fp, r1
 8016f3c:	f7e9 fd9c 	bl	8000a78 <__aeabi_dcmpeq>
 8016f40:	2800      	cmp	r0, #0
 8016f42:	d0c1      	beq.n	8016ec8 <_strtod_l+0x8b8>
 8016f44:	e61a      	b.n	8016b7c <_strtod_l+0x56c>
 8016f46:	4641      	mov	r1, r8
 8016f48:	4620      	mov	r0, r4
 8016f4a:	f003 f96f 	bl	801a22c <__ratio>
 8016f4e:	ec57 6b10 	vmov	r6, r7, d0
 8016f52:	2200      	movs	r2, #0
 8016f54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016f58:	4630      	mov	r0, r6
 8016f5a:	4639      	mov	r1, r7
 8016f5c:	f7e9 fda0 	bl	8000aa0 <__aeabi_dcmple>
 8016f60:	2800      	cmp	r0, #0
 8016f62:	d06f      	beq.n	8017044 <_strtod_l+0xa34>
 8016f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d17a      	bne.n	8017060 <_strtod_l+0xa50>
 8016f6a:	f1ba 0f00 	cmp.w	sl, #0
 8016f6e:	d158      	bne.n	8017022 <_strtod_l+0xa12>
 8016f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d15a      	bne.n	8017030 <_strtod_l+0xa20>
 8016f7a:	4b64      	ldr	r3, [pc, #400]	@ (801710c <_strtod_l+0xafc>)
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	4630      	mov	r0, r6
 8016f80:	4639      	mov	r1, r7
 8016f82:	f7e9 fd83 	bl	8000a8c <__aeabi_dcmplt>
 8016f86:	2800      	cmp	r0, #0
 8016f88:	d159      	bne.n	801703e <_strtod_l+0xa2e>
 8016f8a:	4630      	mov	r0, r6
 8016f8c:	4639      	mov	r1, r7
 8016f8e:	4b60      	ldr	r3, [pc, #384]	@ (8017110 <_strtod_l+0xb00>)
 8016f90:	2200      	movs	r2, #0
 8016f92:	f7e9 fb09 	bl	80005a8 <__aeabi_dmul>
 8016f96:	4606      	mov	r6, r0
 8016f98:	460f      	mov	r7, r1
 8016f9a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8016f9e:	9606      	str	r6, [sp, #24]
 8016fa0:	9307      	str	r3, [sp, #28]
 8016fa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016fa6:	4d57      	ldr	r5, [pc, #348]	@ (8017104 <_strtod_l+0xaf4>)
 8016fa8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fae:	401d      	ands	r5, r3
 8016fb0:	4b58      	ldr	r3, [pc, #352]	@ (8017114 <_strtod_l+0xb04>)
 8016fb2:	429d      	cmp	r5, r3
 8016fb4:	f040 80b2 	bne.w	801711c <_strtod_l+0xb0c>
 8016fb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8016fbe:	ec4b ab10 	vmov	d0, sl, fp
 8016fc2:	f003 f86b 	bl	801a09c <__ulp>
 8016fc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016fca:	ec51 0b10 	vmov	r0, r1, d0
 8016fce:	f7e9 faeb 	bl	80005a8 <__aeabi_dmul>
 8016fd2:	4652      	mov	r2, sl
 8016fd4:	465b      	mov	r3, fp
 8016fd6:	f7e9 f931 	bl	800023c <__adddf3>
 8016fda:	460b      	mov	r3, r1
 8016fdc:	4949      	ldr	r1, [pc, #292]	@ (8017104 <_strtod_l+0xaf4>)
 8016fde:	4a4e      	ldr	r2, [pc, #312]	@ (8017118 <_strtod_l+0xb08>)
 8016fe0:	4019      	ands	r1, r3
 8016fe2:	4291      	cmp	r1, r2
 8016fe4:	4682      	mov	sl, r0
 8016fe6:	d942      	bls.n	801706e <_strtod_l+0xa5e>
 8016fe8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016fea:	4b47      	ldr	r3, [pc, #284]	@ (8017108 <_strtod_l+0xaf8>)
 8016fec:	429a      	cmp	r2, r3
 8016fee:	d103      	bne.n	8016ff8 <_strtod_l+0x9e8>
 8016ff0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016ff2:	3301      	adds	r3, #1
 8016ff4:	f43f ad2f 	beq.w	8016a56 <_strtod_l+0x446>
 8016ff8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8017108 <_strtod_l+0xaf8>
 8016ffc:	f04f 3aff 	mov.w	sl, #4294967295
 8017000:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017002:	9805      	ldr	r0, [sp, #20]
 8017004:	f002 fd1e 	bl	8019a44 <_Bfree>
 8017008:	9805      	ldr	r0, [sp, #20]
 801700a:	4649      	mov	r1, r9
 801700c:	f002 fd1a 	bl	8019a44 <_Bfree>
 8017010:	9805      	ldr	r0, [sp, #20]
 8017012:	4641      	mov	r1, r8
 8017014:	f002 fd16 	bl	8019a44 <_Bfree>
 8017018:	9805      	ldr	r0, [sp, #20]
 801701a:	4621      	mov	r1, r4
 801701c:	f002 fd12 	bl	8019a44 <_Bfree>
 8017020:	e619      	b.n	8016c56 <_strtod_l+0x646>
 8017022:	f1ba 0f01 	cmp.w	sl, #1
 8017026:	d103      	bne.n	8017030 <_strtod_l+0xa20>
 8017028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801702a:	2b00      	cmp	r3, #0
 801702c:	f43f ada6 	beq.w	8016b7c <_strtod_l+0x56c>
 8017030:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80170e0 <_strtod_l+0xad0>
 8017034:	4f35      	ldr	r7, [pc, #212]	@ (801710c <_strtod_l+0xafc>)
 8017036:	ed8d 7b06 	vstr	d7, [sp, #24]
 801703a:	2600      	movs	r6, #0
 801703c:	e7b1      	b.n	8016fa2 <_strtod_l+0x992>
 801703e:	4f34      	ldr	r7, [pc, #208]	@ (8017110 <_strtod_l+0xb00>)
 8017040:	2600      	movs	r6, #0
 8017042:	e7aa      	b.n	8016f9a <_strtod_l+0x98a>
 8017044:	4b32      	ldr	r3, [pc, #200]	@ (8017110 <_strtod_l+0xb00>)
 8017046:	4630      	mov	r0, r6
 8017048:	4639      	mov	r1, r7
 801704a:	2200      	movs	r2, #0
 801704c:	f7e9 faac 	bl	80005a8 <__aeabi_dmul>
 8017050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017052:	4606      	mov	r6, r0
 8017054:	460f      	mov	r7, r1
 8017056:	2b00      	cmp	r3, #0
 8017058:	d09f      	beq.n	8016f9a <_strtod_l+0x98a>
 801705a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801705e:	e7a0      	b.n	8016fa2 <_strtod_l+0x992>
 8017060:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80170e8 <_strtod_l+0xad8>
 8017064:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017068:	ec57 6b17 	vmov	r6, r7, d7
 801706c:	e799      	b.n	8016fa2 <_strtod_l+0x992>
 801706e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8017072:	9b08      	ldr	r3, [sp, #32]
 8017074:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8017078:	2b00      	cmp	r3, #0
 801707a:	d1c1      	bne.n	8017000 <_strtod_l+0x9f0>
 801707c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017080:	0d1b      	lsrs	r3, r3, #20
 8017082:	051b      	lsls	r3, r3, #20
 8017084:	429d      	cmp	r5, r3
 8017086:	d1bb      	bne.n	8017000 <_strtod_l+0x9f0>
 8017088:	4630      	mov	r0, r6
 801708a:	4639      	mov	r1, r7
 801708c:	f7e9 fdec 	bl	8000c68 <__aeabi_d2lz>
 8017090:	f7e9 fa5c 	bl	800054c <__aeabi_l2d>
 8017094:	4602      	mov	r2, r0
 8017096:	460b      	mov	r3, r1
 8017098:	4630      	mov	r0, r6
 801709a:	4639      	mov	r1, r7
 801709c:	f7e9 f8cc 	bl	8000238 <__aeabi_dsub>
 80170a0:	460b      	mov	r3, r1
 80170a2:	4602      	mov	r2, r0
 80170a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80170a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80170ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80170ae:	ea46 060a 	orr.w	r6, r6, sl
 80170b2:	431e      	orrs	r6, r3
 80170b4:	d06f      	beq.n	8017196 <_strtod_l+0xb86>
 80170b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80170f0 <_strtod_l+0xae0>)
 80170b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170bc:	f7e9 fce6 	bl	8000a8c <__aeabi_dcmplt>
 80170c0:	2800      	cmp	r0, #0
 80170c2:	f47f acd3 	bne.w	8016a6c <_strtod_l+0x45c>
 80170c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80170f8 <_strtod_l+0xae8>)
 80170c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80170d0:	f7e9 fcfa 	bl	8000ac8 <__aeabi_dcmpgt>
 80170d4:	2800      	cmp	r0, #0
 80170d6:	d093      	beq.n	8017000 <_strtod_l+0x9f0>
 80170d8:	e4c8      	b.n	8016a6c <_strtod_l+0x45c>
 80170da:	bf00      	nop
 80170dc:	f3af 8000 	nop.w
 80170e0:	00000000 	.word	0x00000000
 80170e4:	bff00000 	.word	0xbff00000
 80170e8:	00000000 	.word	0x00000000
 80170ec:	3ff00000 	.word	0x3ff00000
 80170f0:	94a03595 	.word	0x94a03595
 80170f4:	3fdfffff 	.word	0x3fdfffff
 80170f8:	35afe535 	.word	0x35afe535
 80170fc:	3fe00000 	.word	0x3fe00000
 8017100:	000fffff 	.word	0x000fffff
 8017104:	7ff00000 	.word	0x7ff00000
 8017108:	7fefffff 	.word	0x7fefffff
 801710c:	3ff00000 	.word	0x3ff00000
 8017110:	3fe00000 	.word	0x3fe00000
 8017114:	7fe00000 	.word	0x7fe00000
 8017118:	7c9fffff 	.word	0x7c9fffff
 801711c:	9b08      	ldr	r3, [sp, #32]
 801711e:	b323      	cbz	r3, 801716a <_strtod_l+0xb5a>
 8017120:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8017124:	d821      	bhi.n	801716a <_strtod_l+0xb5a>
 8017126:	a328      	add	r3, pc, #160	@ (adr r3, 80171c8 <_strtod_l+0xbb8>)
 8017128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801712c:	4630      	mov	r0, r6
 801712e:	4639      	mov	r1, r7
 8017130:	f7e9 fcb6 	bl	8000aa0 <__aeabi_dcmple>
 8017134:	b1a0      	cbz	r0, 8017160 <_strtod_l+0xb50>
 8017136:	4639      	mov	r1, r7
 8017138:	4630      	mov	r0, r6
 801713a:	f7e9 fd0d 	bl	8000b58 <__aeabi_d2uiz>
 801713e:	2801      	cmp	r0, #1
 8017140:	bf38      	it	cc
 8017142:	2001      	movcc	r0, #1
 8017144:	f7e9 f9b6 	bl	80004b4 <__aeabi_ui2d>
 8017148:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801714a:	4606      	mov	r6, r0
 801714c:	460f      	mov	r7, r1
 801714e:	b9fb      	cbnz	r3, 8017190 <_strtod_l+0xb80>
 8017150:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017154:	9014      	str	r0, [sp, #80]	@ 0x50
 8017156:	9315      	str	r3, [sp, #84]	@ 0x54
 8017158:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801715c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017160:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017162:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8017166:	1b5b      	subs	r3, r3, r5
 8017168:	9311      	str	r3, [sp, #68]	@ 0x44
 801716a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801716e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8017172:	f002 ff93 	bl	801a09c <__ulp>
 8017176:	4650      	mov	r0, sl
 8017178:	ec53 2b10 	vmov	r2, r3, d0
 801717c:	4659      	mov	r1, fp
 801717e:	f7e9 fa13 	bl	80005a8 <__aeabi_dmul>
 8017182:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8017186:	f7e9 f859 	bl	800023c <__adddf3>
 801718a:	4682      	mov	sl, r0
 801718c:	468b      	mov	fp, r1
 801718e:	e770      	b.n	8017072 <_strtod_l+0xa62>
 8017190:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8017194:	e7e0      	b.n	8017158 <_strtod_l+0xb48>
 8017196:	a30e      	add	r3, pc, #56	@ (adr r3, 80171d0 <_strtod_l+0xbc0>)
 8017198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801719c:	f7e9 fc76 	bl	8000a8c <__aeabi_dcmplt>
 80171a0:	e798      	b.n	80170d4 <_strtod_l+0xac4>
 80171a2:	2300      	movs	r3, #0
 80171a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80171a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80171a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80171aa:	6013      	str	r3, [r2, #0]
 80171ac:	f7ff ba6d 	b.w	801668a <_strtod_l+0x7a>
 80171b0:	2a65      	cmp	r2, #101	@ 0x65
 80171b2:	f43f ab68 	beq.w	8016886 <_strtod_l+0x276>
 80171b6:	2a45      	cmp	r2, #69	@ 0x45
 80171b8:	f43f ab65 	beq.w	8016886 <_strtod_l+0x276>
 80171bc:	2301      	movs	r3, #1
 80171be:	f7ff bba0 	b.w	8016902 <_strtod_l+0x2f2>
 80171c2:	bf00      	nop
 80171c4:	f3af 8000 	nop.w
 80171c8:	ffc00000 	.word	0xffc00000
 80171cc:	41dfffff 	.word	0x41dfffff
 80171d0:	94a03595 	.word	0x94a03595
 80171d4:	3fcfffff 	.word	0x3fcfffff

080171d8 <_strtod_r>:
 80171d8:	4b01      	ldr	r3, [pc, #4]	@ (80171e0 <_strtod_r+0x8>)
 80171da:	f7ff ba19 	b.w	8016610 <_strtod_l>
 80171de:	bf00      	nop
 80171e0:	2000013c 	.word	0x2000013c

080171e4 <strtof>:
 80171e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171e8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 80172a8 <strtof+0xc4>
 80171ec:	4b29      	ldr	r3, [pc, #164]	@ (8017294 <strtof+0xb0>)
 80171ee:	460a      	mov	r2, r1
 80171f0:	ed2d 8b02 	vpush	{d8}
 80171f4:	4601      	mov	r1, r0
 80171f6:	f8d8 0000 	ldr.w	r0, [r8]
 80171fa:	f7ff fa09 	bl	8016610 <_strtod_l>
 80171fe:	ec55 4b10 	vmov	r4, r5, d0
 8017202:	4622      	mov	r2, r4
 8017204:	462b      	mov	r3, r5
 8017206:	4620      	mov	r0, r4
 8017208:	4629      	mov	r1, r5
 801720a:	f7e9 fc67 	bl	8000adc <__aeabi_dcmpun>
 801720e:	b190      	cbz	r0, 8017236 <strtof+0x52>
 8017210:	2d00      	cmp	r5, #0
 8017212:	4821      	ldr	r0, [pc, #132]	@ (8017298 <strtof+0xb4>)
 8017214:	da09      	bge.n	801722a <strtof+0x46>
 8017216:	f001 f9c3 	bl	80185a0 <nanf>
 801721a:	eeb1 8a40 	vneg.f32	s16, s0
 801721e:	eeb0 0a48 	vmov.f32	s0, s16
 8017222:	ecbd 8b02 	vpop	{d8}
 8017226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801722a:	ecbd 8b02 	vpop	{d8}
 801722e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017232:	f001 b9b5 	b.w	80185a0 <nanf>
 8017236:	4620      	mov	r0, r4
 8017238:	4629      	mov	r1, r5
 801723a:	f7e9 fcad 	bl	8000b98 <__aeabi_d2f>
 801723e:	ee08 0a10 	vmov	s16, r0
 8017242:	eddf 7a16 	vldr	s15, [pc, #88]	@ 801729c <strtof+0xb8>
 8017246:	eeb0 7ac8 	vabs.f32	s14, s16
 801724a:	eeb4 7a67 	vcmp.f32	s14, s15
 801724e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017252:	dd11      	ble.n	8017278 <strtof+0x94>
 8017254:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8017258:	4b11      	ldr	r3, [pc, #68]	@ (80172a0 <strtof+0xbc>)
 801725a:	f04f 32ff 	mov.w	r2, #4294967295
 801725e:	4620      	mov	r0, r4
 8017260:	4639      	mov	r1, r7
 8017262:	f7e9 fc3b 	bl	8000adc <__aeabi_dcmpun>
 8017266:	b980      	cbnz	r0, 801728a <strtof+0xa6>
 8017268:	4b0d      	ldr	r3, [pc, #52]	@ (80172a0 <strtof+0xbc>)
 801726a:	f04f 32ff 	mov.w	r2, #4294967295
 801726e:	4620      	mov	r0, r4
 8017270:	4639      	mov	r1, r7
 8017272:	f7e9 fc15 	bl	8000aa0 <__aeabi_dcmple>
 8017276:	b940      	cbnz	r0, 801728a <strtof+0xa6>
 8017278:	ee18 3a10 	vmov	r3, s16
 801727c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8017280:	d1cd      	bne.n	801721e <strtof+0x3a>
 8017282:	4b08      	ldr	r3, [pc, #32]	@ (80172a4 <strtof+0xc0>)
 8017284:	402b      	ands	r3, r5
 8017286:	2b00      	cmp	r3, #0
 8017288:	d0c9      	beq.n	801721e <strtof+0x3a>
 801728a:	f8d8 3000 	ldr.w	r3, [r8]
 801728e:	2222      	movs	r2, #34	@ 0x22
 8017290:	601a      	str	r2, [r3, #0]
 8017292:	e7c4      	b.n	801721e <strtof+0x3a>
 8017294:	2000013c 	.word	0x2000013c
 8017298:	0801f1eb 	.word	0x0801f1eb
 801729c:	7f7fffff 	.word	0x7f7fffff
 80172a0:	7fefffff 	.word	0x7fefffff
 80172a4:	7ff00000 	.word	0x7ff00000
 80172a8:	200002a8 	.word	0x200002a8

080172ac <_strtol_l.isra.0>:
 80172ac:	2b24      	cmp	r3, #36	@ 0x24
 80172ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172b2:	4686      	mov	lr, r0
 80172b4:	4690      	mov	r8, r2
 80172b6:	d801      	bhi.n	80172bc <_strtol_l.isra.0+0x10>
 80172b8:	2b01      	cmp	r3, #1
 80172ba:	d106      	bne.n	80172ca <_strtol_l.isra.0+0x1e>
 80172bc:	f001 f924 	bl	8018508 <__errno>
 80172c0:	2316      	movs	r3, #22
 80172c2:	6003      	str	r3, [r0, #0]
 80172c4:	2000      	movs	r0, #0
 80172c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172ca:	4834      	ldr	r0, [pc, #208]	@ (801739c <_strtol_l.isra.0+0xf0>)
 80172cc:	460d      	mov	r5, r1
 80172ce:	462a      	mov	r2, r5
 80172d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172d4:	5d06      	ldrb	r6, [r0, r4]
 80172d6:	f016 0608 	ands.w	r6, r6, #8
 80172da:	d1f8      	bne.n	80172ce <_strtol_l.isra.0+0x22>
 80172dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80172de:	d110      	bne.n	8017302 <_strtol_l.isra.0+0x56>
 80172e0:	782c      	ldrb	r4, [r5, #0]
 80172e2:	2601      	movs	r6, #1
 80172e4:	1c95      	adds	r5, r2, #2
 80172e6:	f033 0210 	bics.w	r2, r3, #16
 80172ea:	d115      	bne.n	8017318 <_strtol_l.isra.0+0x6c>
 80172ec:	2c30      	cmp	r4, #48	@ 0x30
 80172ee:	d10d      	bne.n	801730c <_strtol_l.isra.0+0x60>
 80172f0:	782a      	ldrb	r2, [r5, #0]
 80172f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80172f6:	2a58      	cmp	r2, #88	@ 0x58
 80172f8:	d108      	bne.n	801730c <_strtol_l.isra.0+0x60>
 80172fa:	786c      	ldrb	r4, [r5, #1]
 80172fc:	3502      	adds	r5, #2
 80172fe:	2310      	movs	r3, #16
 8017300:	e00a      	b.n	8017318 <_strtol_l.isra.0+0x6c>
 8017302:	2c2b      	cmp	r4, #43	@ 0x2b
 8017304:	bf04      	itt	eq
 8017306:	782c      	ldrbeq	r4, [r5, #0]
 8017308:	1c95      	addeq	r5, r2, #2
 801730a:	e7ec      	b.n	80172e6 <_strtol_l.isra.0+0x3a>
 801730c:	2b00      	cmp	r3, #0
 801730e:	d1f6      	bne.n	80172fe <_strtol_l.isra.0+0x52>
 8017310:	2c30      	cmp	r4, #48	@ 0x30
 8017312:	bf14      	ite	ne
 8017314:	230a      	movne	r3, #10
 8017316:	2308      	moveq	r3, #8
 8017318:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801731c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017320:	2200      	movs	r2, #0
 8017322:	fbbc f9f3 	udiv	r9, ip, r3
 8017326:	4610      	mov	r0, r2
 8017328:	fb03 ca19 	mls	sl, r3, r9, ip
 801732c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017330:	2f09      	cmp	r7, #9
 8017332:	d80f      	bhi.n	8017354 <_strtol_l.isra.0+0xa8>
 8017334:	463c      	mov	r4, r7
 8017336:	42a3      	cmp	r3, r4
 8017338:	dd1b      	ble.n	8017372 <_strtol_l.isra.0+0xc6>
 801733a:	1c57      	adds	r7, r2, #1
 801733c:	d007      	beq.n	801734e <_strtol_l.isra.0+0xa2>
 801733e:	4581      	cmp	r9, r0
 8017340:	d314      	bcc.n	801736c <_strtol_l.isra.0+0xc0>
 8017342:	d101      	bne.n	8017348 <_strtol_l.isra.0+0x9c>
 8017344:	45a2      	cmp	sl, r4
 8017346:	db11      	blt.n	801736c <_strtol_l.isra.0+0xc0>
 8017348:	fb00 4003 	mla	r0, r0, r3, r4
 801734c:	2201      	movs	r2, #1
 801734e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017352:	e7eb      	b.n	801732c <_strtol_l.isra.0+0x80>
 8017354:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017358:	2f19      	cmp	r7, #25
 801735a:	d801      	bhi.n	8017360 <_strtol_l.isra.0+0xb4>
 801735c:	3c37      	subs	r4, #55	@ 0x37
 801735e:	e7ea      	b.n	8017336 <_strtol_l.isra.0+0x8a>
 8017360:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8017364:	2f19      	cmp	r7, #25
 8017366:	d804      	bhi.n	8017372 <_strtol_l.isra.0+0xc6>
 8017368:	3c57      	subs	r4, #87	@ 0x57
 801736a:	e7e4      	b.n	8017336 <_strtol_l.isra.0+0x8a>
 801736c:	f04f 32ff 	mov.w	r2, #4294967295
 8017370:	e7ed      	b.n	801734e <_strtol_l.isra.0+0xa2>
 8017372:	1c53      	adds	r3, r2, #1
 8017374:	d108      	bne.n	8017388 <_strtol_l.isra.0+0xdc>
 8017376:	2322      	movs	r3, #34	@ 0x22
 8017378:	f8ce 3000 	str.w	r3, [lr]
 801737c:	4660      	mov	r0, ip
 801737e:	f1b8 0f00 	cmp.w	r8, #0
 8017382:	d0a0      	beq.n	80172c6 <_strtol_l.isra.0+0x1a>
 8017384:	1e69      	subs	r1, r5, #1
 8017386:	e006      	b.n	8017396 <_strtol_l.isra.0+0xea>
 8017388:	b106      	cbz	r6, 801738c <_strtol_l.isra.0+0xe0>
 801738a:	4240      	negs	r0, r0
 801738c:	f1b8 0f00 	cmp.w	r8, #0
 8017390:	d099      	beq.n	80172c6 <_strtol_l.isra.0+0x1a>
 8017392:	2a00      	cmp	r2, #0
 8017394:	d1f6      	bne.n	8017384 <_strtol_l.isra.0+0xd8>
 8017396:	f8c8 1000 	str.w	r1, [r8]
 801739a:	e794      	b.n	80172c6 <_strtol_l.isra.0+0x1a>
 801739c:	0801f381 	.word	0x0801f381

080173a0 <_strtol_r>:
 80173a0:	f7ff bf84 	b.w	80172ac <_strtol_l.isra.0>

080173a4 <strtol>:
 80173a4:	4613      	mov	r3, r2
 80173a6:	460a      	mov	r2, r1
 80173a8:	4601      	mov	r1, r0
 80173aa:	4802      	ldr	r0, [pc, #8]	@ (80173b4 <strtol+0x10>)
 80173ac:	6800      	ldr	r0, [r0, #0]
 80173ae:	f7ff bf7d 	b.w	80172ac <_strtol_l.isra.0>
 80173b2:	bf00      	nop
 80173b4:	200002a8 	.word	0x200002a8

080173b8 <__cvt>:
 80173b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80173bc:	ec57 6b10 	vmov	r6, r7, d0
 80173c0:	2f00      	cmp	r7, #0
 80173c2:	460c      	mov	r4, r1
 80173c4:	4619      	mov	r1, r3
 80173c6:	463b      	mov	r3, r7
 80173c8:	bfbb      	ittet	lt
 80173ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80173ce:	461f      	movlt	r7, r3
 80173d0:	2300      	movge	r3, #0
 80173d2:	232d      	movlt	r3, #45	@ 0x2d
 80173d4:	700b      	strb	r3, [r1, #0]
 80173d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80173d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80173dc:	4691      	mov	r9, r2
 80173de:	f023 0820 	bic.w	r8, r3, #32
 80173e2:	bfbc      	itt	lt
 80173e4:	4632      	movlt	r2, r6
 80173e6:	4616      	movlt	r6, r2
 80173e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80173ec:	d005      	beq.n	80173fa <__cvt+0x42>
 80173ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80173f2:	d100      	bne.n	80173f6 <__cvt+0x3e>
 80173f4:	3401      	adds	r4, #1
 80173f6:	2102      	movs	r1, #2
 80173f8:	e000      	b.n	80173fc <__cvt+0x44>
 80173fa:	2103      	movs	r1, #3
 80173fc:	ab03      	add	r3, sp, #12
 80173fe:	9301      	str	r3, [sp, #4]
 8017400:	ab02      	add	r3, sp, #8
 8017402:	9300      	str	r3, [sp, #0]
 8017404:	ec47 6b10 	vmov	d0, r6, r7
 8017408:	4653      	mov	r3, sl
 801740a:	4622      	mov	r2, r4
 801740c:	f001 f974 	bl	80186f8 <_dtoa_r>
 8017410:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8017414:	4605      	mov	r5, r0
 8017416:	d119      	bne.n	801744c <__cvt+0x94>
 8017418:	f019 0f01 	tst.w	r9, #1
 801741c:	d00e      	beq.n	801743c <__cvt+0x84>
 801741e:	eb00 0904 	add.w	r9, r0, r4
 8017422:	2200      	movs	r2, #0
 8017424:	2300      	movs	r3, #0
 8017426:	4630      	mov	r0, r6
 8017428:	4639      	mov	r1, r7
 801742a:	f7e9 fb25 	bl	8000a78 <__aeabi_dcmpeq>
 801742e:	b108      	cbz	r0, 8017434 <__cvt+0x7c>
 8017430:	f8cd 900c 	str.w	r9, [sp, #12]
 8017434:	2230      	movs	r2, #48	@ 0x30
 8017436:	9b03      	ldr	r3, [sp, #12]
 8017438:	454b      	cmp	r3, r9
 801743a:	d31e      	bcc.n	801747a <__cvt+0xc2>
 801743c:	9b03      	ldr	r3, [sp, #12]
 801743e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017440:	1b5b      	subs	r3, r3, r5
 8017442:	4628      	mov	r0, r5
 8017444:	6013      	str	r3, [r2, #0]
 8017446:	b004      	add	sp, #16
 8017448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801744c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8017450:	eb00 0904 	add.w	r9, r0, r4
 8017454:	d1e5      	bne.n	8017422 <__cvt+0x6a>
 8017456:	7803      	ldrb	r3, [r0, #0]
 8017458:	2b30      	cmp	r3, #48	@ 0x30
 801745a:	d10a      	bne.n	8017472 <__cvt+0xba>
 801745c:	2200      	movs	r2, #0
 801745e:	2300      	movs	r3, #0
 8017460:	4630      	mov	r0, r6
 8017462:	4639      	mov	r1, r7
 8017464:	f7e9 fb08 	bl	8000a78 <__aeabi_dcmpeq>
 8017468:	b918      	cbnz	r0, 8017472 <__cvt+0xba>
 801746a:	f1c4 0401 	rsb	r4, r4, #1
 801746e:	f8ca 4000 	str.w	r4, [sl]
 8017472:	f8da 3000 	ldr.w	r3, [sl]
 8017476:	4499      	add	r9, r3
 8017478:	e7d3      	b.n	8017422 <__cvt+0x6a>
 801747a:	1c59      	adds	r1, r3, #1
 801747c:	9103      	str	r1, [sp, #12]
 801747e:	701a      	strb	r2, [r3, #0]
 8017480:	e7d9      	b.n	8017436 <__cvt+0x7e>

08017482 <__exponent>:
 8017482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017484:	2900      	cmp	r1, #0
 8017486:	bfba      	itte	lt
 8017488:	4249      	neglt	r1, r1
 801748a:	232d      	movlt	r3, #45	@ 0x2d
 801748c:	232b      	movge	r3, #43	@ 0x2b
 801748e:	2909      	cmp	r1, #9
 8017490:	7002      	strb	r2, [r0, #0]
 8017492:	7043      	strb	r3, [r0, #1]
 8017494:	dd29      	ble.n	80174ea <__exponent+0x68>
 8017496:	f10d 0307 	add.w	r3, sp, #7
 801749a:	461d      	mov	r5, r3
 801749c:	270a      	movs	r7, #10
 801749e:	461a      	mov	r2, r3
 80174a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80174a4:	fb07 1416 	mls	r4, r7, r6, r1
 80174a8:	3430      	adds	r4, #48	@ 0x30
 80174aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80174ae:	460c      	mov	r4, r1
 80174b0:	2c63      	cmp	r4, #99	@ 0x63
 80174b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80174b6:	4631      	mov	r1, r6
 80174b8:	dcf1      	bgt.n	801749e <__exponent+0x1c>
 80174ba:	3130      	adds	r1, #48	@ 0x30
 80174bc:	1e94      	subs	r4, r2, #2
 80174be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80174c2:	1c41      	adds	r1, r0, #1
 80174c4:	4623      	mov	r3, r4
 80174c6:	42ab      	cmp	r3, r5
 80174c8:	d30a      	bcc.n	80174e0 <__exponent+0x5e>
 80174ca:	f10d 0309 	add.w	r3, sp, #9
 80174ce:	1a9b      	subs	r3, r3, r2
 80174d0:	42ac      	cmp	r4, r5
 80174d2:	bf88      	it	hi
 80174d4:	2300      	movhi	r3, #0
 80174d6:	3302      	adds	r3, #2
 80174d8:	4403      	add	r3, r0
 80174da:	1a18      	subs	r0, r3, r0
 80174dc:	b003      	add	sp, #12
 80174de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80174e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80174e8:	e7ed      	b.n	80174c6 <__exponent+0x44>
 80174ea:	2330      	movs	r3, #48	@ 0x30
 80174ec:	3130      	adds	r1, #48	@ 0x30
 80174ee:	7083      	strb	r3, [r0, #2]
 80174f0:	70c1      	strb	r1, [r0, #3]
 80174f2:	1d03      	adds	r3, r0, #4
 80174f4:	e7f1      	b.n	80174da <__exponent+0x58>
	...

080174f8 <_printf_float>:
 80174f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174fc:	b08d      	sub	sp, #52	@ 0x34
 80174fe:	460c      	mov	r4, r1
 8017500:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8017504:	4616      	mov	r6, r2
 8017506:	461f      	mov	r7, r3
 8017508:	4605      	mov	r5, r0
 801750a:	f000 ffa3 	bl	8018454 <_localeconv_r>
 801750e:	6803      	ldr	r3, [r0, #0]
 8017510:	9304      	str	r3, [sp, #16]
 8017512:	4618      	mov	r0, r3
 8017514:	f7e8 fe84 	bl	8000220 <strlen>
 8017518:	2300      	movs	r3, #0
 801751a:	930a      	str	r3, [sp, #40]	@ 0x28
 801751c:	f8d8 3000 	ldr.w	r3, [r8]
 8017520:	9005      	str	r0, [sp, #20]
 8017522:	3307      	adds	r3, #7
 8017524:	f023 0307 	bic.w	r3, r3, #7
 8017528:	f103 0208 	add.w	r2, r3, #8
 801752c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8017530:	f8d4 b000 	ldr.w	fp, [r4]
 8017534:	f8c8 2000 	str.w	r2, [r8]
 8017538:	e9d3 8900 	ldrd	r8, r9, [r3]
 801753c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8017540:	9307      	str	r3, [sp, #28]
 8017542:	f8cd 8018 	str.w	r8, [sp, #24]
 8017546:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801754a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801754e:	4b9c      	ldr	r3, [pc, #624]	@ (80177c0 <_printf_float+0x2c8>)
 8017550:	f04f 32ff 	mov.w	r2, #4294967295
 8017554:	f7e9 fac2 	bl	8000adc <__aeabi_dcmpun>
 8017558:	bb70      	cbnz	r0, 80175b8 <_printf_float+0xc0>
 801755a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801755e:	4b98      	ldr	r3, [pc, #608]	@ (80177c0 <_printf_float+0x2c8>)
 8017560:	f04f 32ff 	mov.w	r2, #4294967295
 8017564:	f7e9 fa9c 	bl	8000aa0 <__aeabi_dcmple>
 8017568:	bb30      	cbnz	r0, 80175b8 <_printf_float+0xc0>
 801756a:	2200      	movs	r2, #0
 801756c:	2300      	movs	r3, #0
 801756e:	4640      	mov	r0, r8
 8017570:	4649      	mov	r1, r9
 8017572:	f7e9 fa8b 	bl	8000a8c <__aeabi_dcmplt>
 8017576:	b110      	cbz	r0, 801757e <_printf_float+0x86>
 8017578:	232d      	movs	r3, #45	@ 0x2d
 801757a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801757e:	4a91      	ldr	r2, [pc, #580]	@ (80177c4 <_printf_float+0x2cc>)
 8017580:	4b91      	ldr	r3, [pc, #580]	@ (80177c8 <_printf_float+0x2d0>)
 8017582:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8017586:	bf8c      	ite	hi
 8017588:	4690      	movhi	r8, r2
 801758a:	4698      	movls	r8, r3
 801758c:	2303      	movs	r3, #3
 801758e:	6123      	str	r3, [r4, #16]
 8017590:	f02b 0304 	bic.w	r3, fp, #4
 8017594:	6023      	str	r3, [r4, #0]
 8017596:	f04f 0900 	mov.w	r9, #0
 801759a:	9700      	str	r7, [sp, #0]
 801759c:	4633      	mov	r3, r6
 801759e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80175a0:	4621      	mov	r1, r4
 80175a2:	4628      	mov	r0, r5
 80175a4:	f000 f9d2 	bl	801794c <_printf_common>
 80175a8:	3001      	adds	r0, #1
 80175aa:	f040 808d 	bne.w	80176c8 <_printf_float+0x1d0>
 80175ae:	f04f 30ff 	mov.w	r0, #4294967295
 80175b2:	b00d      	add	sp, #52	@ 0x34
 80175b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175b8:	4642      	mov	r2, r8
 80175ba:	464b      	mov	r3, r9
 80175bc:	4640      	mov	r0, r8
 80175be:	4649      	mov	r1, r9
 80175c0:	f7e9 fa8c 	bl	8000adc <__aeabi_dcmpun>
 80175c4:	b140      	cbz	r0, 80175d8 <_printf_float+0xe0>
 80175c6:	464b      	mov	r3, r9
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	bfbc      	itt	lt
 80175cc:	232d      	movlt	r3, #45	@ 0x2d
 80175ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80175d2:	4a7e      	ldr	r2, [pc, #504]	@ (80177cc <_printf_float+0x2d4>)
 80175d4:	4b7e      	ldr	r3, [pc, #504]	@ (80177d0 <_printf_float+0x2d8>)
 80175d6:	e7d4      	b.n	8017582 <_printf_float+0x8a>
 80175d8:	6863      	ldr	r3, [r4, #4]
 80175da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80175de:	9206      	str	r2, [sp, #24]
 80175e0:	1c5a      	adds	r2, r3, #1
 80175e2:	d13b      	bne.n	801765c <_printf_float+0x164>
 80175e4:	2306      	movs	r3, #6
 80175e6:	6063      	str	r3, [r4, #4]
 80175e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80175ec:	2300      	movs	r3, #0
 80175ee:	6022      	str	r2, [r4, #0]
 80175f0:	9303      	str	r3, [sp, #12]
 80175f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80175f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80175f8:	ab09      	add	r3, sp, #36	@ 0x24
 80175fa:	9300      	str	r3, [sp, #0]
 80175fc:	6861      	ldr	r1, [r4, #4]
 80175fe:	ec49 8b10 	vmov	d0, r8, r9
 8017602:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8017606:	4628      	mov	r0, r5
 8017608:	f7ff fed6 	bl	80173b8 <__cvt>
 801760c:	9b06      	ldr	r3, [sp, #24]
 801760e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017610:	2b47      	cmp	r3, #71	@ 0x47
 8017612:	4680      	mov	r8, r0
 8017614:	d129      	bne.n	801766a <_printf_float+0x172>
 8017616:	1cc8      	adds	r0, r1, #3
 8017618:	db02      	blt.n	8017620 <_printf_float+0x128>
 801761a:	6863      	ldr	r3, [r4, #4]
 801761c:	4299      	cmp	r1, r3
 801761e:	dd41      	ble.n	80176a4 <_printf_float+0x1ac>
 8017620:	f1aa 0a02 	sub.w	sl, sl, #2
 8017624:	fa5f fa8a 	uxtb.w	sl, sl
 8017628:	3901      	subs	r1, #1
 801762a:	4652      	mov	r2, sl
 801762c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017630:	9109      	str	r1, [sp, #36]	@ 0x24
 8017632:	f7ff ff26 	bl	8017482 <__exponent>
 8017636:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017638:	1813      	adds	r3, r2, r0
 801763a:	2a01      	cmp	r2, #1
 801763c:	4681      	mov	r9, r0
 801763e:	6123      	str	r3, [r4, #16]
 8017640:	dc02      	bgt.n	8017648 <_printf_float+0x150>
 8017642:	6822      	ldr	r2, [r4, #0]
 8017644:	07d2      	lsls	r2, r2, #31
 8017646:	d501      	bpl.n	801764c <_printf_float+0x154>
 8017648:	3301      	adds	r3, #1
 801764a:	6123      	str	r3, [r4, #16]
 801764c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8017650:	2b00      	cmp	r3, #0
 8017652:	d0a2      	beq.n	801759a <_printf_float+0xa2>
 8017654:	232d      	movs	r3, #45	@ 0x2d
 8017656:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801765a:	e79e      	b.n	801759a <_printf_float+0xa2>
 801765c:	9a06      	ldr	r2, [sp, #24]
 801765e:	2a47      	cmp	r2, #71	@ 0x47
 8017660:	d1c2      	bne.n	80175e8 <_printf_float+0xf0>
 8017662:	2b00      	cmp	r3, #0
 8017664:	d1c0      	bne.n	80175e8 <_printf_float+0xf0>
 8017666:	2301      	movs	r3, #1
 8017668:	e7bd      	b.n	80175e6 <_printf_float+0xee>
 801766a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801766e:	d9db      	bls.n	8017628 <_printf_float+0x130>
 8017670:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8017674:	d118      	bne.n	80176a8 <_printf_float+0x1b0>
 8017676:	2900      	cmp	r1, #0
 8017678:	6863      	ldr	r3, [r4, #4]
 801767a:	dd0b      	ble.n	8017694 <_printf_float+0x19c>
 801767c:	6121      	str	r1, [r4, #16]
 801767e:	b913      	cbnz	r3, 8017686 <_printf_float+0x18e>
 8017680:	6822      	ldr	r2, [r4, #0]
 8017682:	07d0      	lsls	r0, r2, #31
 8017684:	d502      	bpl.n	801768c <_printf_float+0x194>
 8017686:	3301      	adds	r3, #1
 8017688:	440b      	add	r3, r1
 801768a:	6123      	str	r3, [r4, #16]
 801768c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801768e:	f04f 0900 	mov.w	r9, #0
 8017692:	e7db      	b.n	801764c <_printf_float+0x154>
 8017694:	b913      	cbnz	r3, 801769c <_printf_float+0x1a4>
 8017696:	6822      	ldr	r2, [r4, #0]
 8017698:	07d2      	lsls	r2, r2, #31
 801769a:	d501      	bpl.n	80176a0 <_printf_float+0x1a8>
 801769c:	3302      	adds	r3, #2
 801769e:	e7f4      	b.n	801768a <_printf_float+0x192>
 80176a0:	2301      	movs	r3, #1
 80176a2:	e7f2      	b.n	801768a <_printf_float+0x192>
 80176a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80176a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80176aa:	4299      	cmp	r1, r3
 80176ac:	db05      	blt.n	80176ba <_printf_float+0x1c2>
 80176ae:	6823      	ldr	r3, [r4, #0]
 80176b0:	6121      	str	r1, [r4, #16]
 80176b2:	07d8      	lsls	r0, r3, #31
 80176b4:	d5ea      	bpl.n	801768c <_printf_float+0x194>
 80176b6:	1c4b      	adds	r3, r1, #1
 80176b8:	e7e7      	b.n	801768a <_printf_float+0x192>
 80176ba:	2900      	cmp	r1, #0
 80176bc:	bfd4      	ite	le
 80176be:	f1c1 0202 	rsble	r2, r1, #2
 80176c2:	2201      	movgt	r2, #1
 80176c4:	4413      	add	r3, r2
 80176c6:	e7e0      	b.n	801768a <_printf_float+0x192>
 80176c8:	6823      	ldr	r3, [r4, #0]
 80176ca:	055a      	lsls	r2, r3, #21
 80176cc:	d407      	bmi.n	80176de <_printf_float+0x1e6>
 80176ce:	6923      	ldr	r3, [r4, #16]
 80176d0:	4642      	mov	r2, r8
 80176d2:	4631      	mov	r1, r6
 80176d4:	4628      	mov	r0, r5
 80176d6:	47b8      	blx	r7
 80176d8:	3001      	adds	r0, #1
 80176da:	d12b      	bne.n	8017734 <_printf_float+0x23c>
 80176dc:	e767      	b.n	80175ae <_printf_float+0xb6>
 80176de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80176e2:	f240 80dd 	bls.w	80178a0 <_printf_float+0x3a8>
 80176e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80176ea:	2200      	movs	r2, #0
 80176ec:	2300      	movs	r3, #0
 80176ee:	f7e9 f9c3 	bl	8000a78 <__aeabi_dcmpeq>
 80176f2:	2800      	cmp	r0, #0
 80176f4:	d033      	beq.n	801775e <_printf_float+0x266>
 80176f6:	4a37      	ldr	r2, [pc, #220]	@ (80177d4 <_printf_float+0x2dc>)
 80176f8:	2301      	movs	r3, #1
 80176fa:	4631      	mov	r1, r6
 80176fc:	4628      	mov	r0, r5
 80176fe:	47b8      	blx	r7
 8017700:	3001      	adds	r0, #1
 8017702:	f43f af54 	beq.w	80175ae <_printf_float+0xb6>
 8017706:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801770a:	4543      	cmp	r3, r8
 801770c:	db02      	blt.n	8017714 <_printf_float+0x21c>
 801770e:	6823      	ldr	r3, [r4, #0]
 8017710:	07d8      	lsls	r0, r3, #31
 8017712:	d50f      	bpl.n	8017734 <_printf_float+0x23c>
 8017714:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017718:	4631      	mov	r1, r6
 801771a:	4628      	mov	r0, r5
 801771c:	47b8      	blx	r7
 801771e:	3001      	adds	r0, #1
 8017720:	f43f af45 	beq.w	80175ae <_printf_float+0xb6>
 8017724:	f04f 0900 	mov.w	r9, #0
 8017728:	f108 38ff 	add.w	r8, r8, #4294967295
 801772c:	f104 0a1a 	add.w	sl, r4, #26
 8017730:	45c8      	cmp	r8, r9
 8017732:	dc09      	bgt.n	8017748 <_printf_float+0x250>
 8017734:	6823      	ldr	r3, [r4, #0]
 8017736:	079b      	lsls	r3, r3, #30
 8017738:	f100 8103 	bmi.w	8017942 <_printf_float+0x44a>
 801773c:	68e0      	ldr	r0, [r4, #12]
 801773e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017740:	4298      	cmp	r0, r3
 8017742:	bfb8      	it	lt
 8017744:	4618      	movlt	r0, r3
 8017746:	e734      	b.n	80175b2 <_printf_float+0xba>
 8017748:	2301      	movs	r3, #1
 801774a:	4652      	mov	r2, sl
 801774c:	4631      	mov	r1, r6
 801774e:	4628      	mov	r0, r5
 8017750:	47b8      	blx	r7
 8017752:	3001      	adds	r0, #1
 8017754:	f43f af2b 	beq.w	80175ae <_printf_float+0xb6>
 8017758:	f109 0901 	add.w	r9, r9, #1
 801775c:	e7e8      	b.n	8017730 <_printf_float+0x238>
 801775e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017760:	2b00      	cmp	r3, #0
 8017762:	dc39      	bgt.n	80177d8 <_printf_float+0x2e0>
 8017764:	4a1b      	ldr	r2, [pc, #108]	@ (80177d4 <_printf_float+0x2dc>)
 8017766:	2301      	movs	r3, #1
 8017768:	4631      	mov	r1, r6
 801776a:	4628      	mov	r0, r5
 801776c:	47b8      	blx	r7
 801776e:	3001      	adds	r0, #1
 8017770:	f43f af1d 	beq.w	80175ae <_printf_float+0xb6>
 8017774:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8017778:	ea59 0303 	orrs.w	r3, r9, r3
 801777c:	d102      	bne.n	8017784 <_printf_float+0x28c>
 801777e:	6823      	ldr	r3, [r4, #0]
 8017780:	07d9      	lsls	r1, r3, #31
 8017782:	d5d7      	bpl.n	8017734 <_printf_float+0x23c>
 8017784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017788:	4631      	mov	r1, r6
 801778a:	4628      	mov	r0, r5
 801778c:	47b8      	blx	r7
 801778e:	3001      	adds	r0, #1
 8017790:	f43f af0d 	beq.w	80175ae <_printf_float+0xb6>
 8017794:	f04f 0a00 	mov.w	sl, #0
 8017798:	f104 0b1a 	add.w	fp, r4, #26
 801779c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801779e:	425b      	negs	r3, r3
 80177a0:	4553      	cmp	r3, sl
 80177a2:	dc01      	bgt.n	80177a8 <_printf_float+0x2b0>
 80177a4:	464b      	mov	r3, r9
 80177a6:	e793      	b.n	80176d0 <_printf_float+0x1d8>
 80177a8:	2301      	movs	r3, #1
 80177aa:	465a      	mov	r2, fp
 80177ac:	4631      	mov	r1, r6
 80177ae:	4628      	mov	r0, r5
 80177b0:	47b8      	blx	r7
 80177b2:	3001      	adds	r0, #1
 80177b4:	f43f aefb 	beq.w	80175ae <_printf_float+0xb6>
 80177b8:	f10a 0a01 	add.w	sl, sl, #1
 80177bc:	e7ee      	b.n	801779c <_printf_float+0x2a4>
 80177be:	bf00      	nop
 80177c0:	7fefffff 	.word	0x7fefffff
 80177c4:	0801f102 	.word	0x0801f102
 80177c8:	0801f0fe 	.word	0x0801f0fe
 80177cc:	0801f10a 	.word	0x0801f10a
 80177d0:	0801f106 	.word	0x0801f106
 80177d4:	0801f10e 	.word	0x0801f10e
 80177d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80177da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80177de:	4553      	cmp	r3, sl
 80177e0:	bfa8      	it	ge
 80177e2:	4653      	movge	r3, sl
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	4699      	mov	r9, r3
 80177e8:	dc36      	bgt.n	8017858 <_printf_float+0x360>
 80177ea:	f04f 0b00 	mov.w	fp, #0
 80177ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80177f2:	f104 021a 	add.w	r2, r4, #26
 80177f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80177f8:	9306      	str	r3, [sp, #24]
 80177fa:	eba3 0309 	sub.w	r3, r3, r9
 80177fe:	455b      	cmp	r3, fp
 8017800:	dc31      	bgt.n	8017866 <_printf_float+0x36e>
 8017802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017804:	459a      	cmp	sl, r3
 8017806:	dc3a      	bgt.n	801787e <_printf_float+0x386>
 8017808:	6823      	ldr	r3, [r4, #0]
 801780a:	07da      	lsls	r2, r3, #31
 801780c:	d437      	bmi.n	801787e <_printf_float+0x386>
 801780e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017810:	ebaa 0903 	sub.w	r9, sl, r3
 8017814:	9b06      	ldr	r3, [sp, #24]
 8017816:	ebaa 0303 	sub.w	r3, sl, r3
 801781a:	4599      	cmp	r9, r3
 801781c:	bfa8      	it	ge
 801781e:	4699      	movge	r9, r3
 8017820:	f1b9 0f00 	cmp.w	r9, #0
 8017824:	dc33      	bgt.n	801788e <_printf_float+0x396>
 8017826:	f04f 0800 	mov.w	r8, #0
 801782a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801782e:	f104 0b1a 	add.w	fp, r4, #26
 8017832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017834:	ebaa 0303 	sub.w	r3, sl, r3
 8017838:	eba3 0309 	sub.w	r3, r3, r9
 801783c:	4543      	cmp	r3, r8
 801783e:	f77f af79 	ble.w	8017734 <_printf_float+0x23c>
 8017842:	2301      	movs	r3, #1
 8017844:	465a      	mov	r2, fp
 8017846:	4631      	mov	r1, r6
 8017848:	4628      	mov	r0, r5
 801784a:	47b8      	blx	r7
 801784c:	3001      	adds	r0, #1
 801784e:	f43f aeae 	beq.w	80175ae <_printf_float+0xb6>
 8017852:	f108 0801 	add.w	r8, r8, #1
 8017856:	e7ec      	b.n	8017832 <_printf_float+0x33a>
 8017858:	4642      	mov	r2, r8
 801785a:	4631      	mov	r1, r6
 801785c:	4628      	mov	r0, r5
 801785e:	47b8      	blx	r7
 8017860:	3001      	adds	r0, #1
 8017862:	d1c2      	bne.n	80177ea <_printf_float+0x2f2>
 8017864:	e6a3      	b.n	80175ae <_printf_float+0xb6>
 8017866:	2301      	movs	r3, #1
 8017868:	4631      	mov	r1, r6
 801786a:	4628      	mov	r0, r5
 801786c:	9206      	str	r2, [sp, #24]
 801786e:	47b8      	blx	r7
 8017870:	3001      	adds	r0, #1
 8017872:	f43f ae9c 	beq.w	80175ae <_printf_float+0xb6>
 8017876:	9a06      	ldr	r2, [sp, #24]
 8017878:	f10b 0b01 	add.w	fp, fp, #1
 801787c:	e7bb      	b.n	80177f6 <_printf_float+0x2fe>
 801787e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017882:	4631      	mov	r1, r6
 8017884:	4628      	mov	r0, r5
 8017886:	47b8      	blx	r7
 8017888:	3001      	adds	r0, #1
 801788a:	d1c0      	bne.n	801780e <_printf_float+0x316>
 801788c:	e68f      	b.n	80175ae <_printf_float+0xb6>
 801788e:	9a06      	ldr	r2, [sp, #24]
 8017890:	464b      	mov	r3, r9
 8017892:	4442      	add	r2, r8
 8017894:	4631      	mov	r1, r6
 8017896:	4628      	mov	r0, r5
 8017898:	47b8      	blx	r7
 801789a:	3001      	adds	r0, #1
 801789c:	d1c3      	bne.n	8017826 <_printf_float+0x32e>
 801789e:	e686      	b.n	80175ae <_printf_float+0xb6>
 80178a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80178a4:	f1ba 0f01 	cmp.w	sl, #1
 80178a8:	dc01      	bgt.n	80178ae <_printf_float+0x3b6>
 80178aa:	07db      	lsls	r3, r3, #31
 80178ac:	d536      	bpl.n	801791c <_printf_float+0x424>
 80178ae:	2301      	movs	r3, #1
 80178b0:	4642      	mov	r2, r8
 80178b2:	4631      	mov	r1, r6
 80178b4:	4628      	mov	r0, r5
 80178b6:	47b8      	blx	r7
 80178b8:	3001      	adds	r0, #1
 80178ba:	f43f ae78 	beq.w	80175ae <_printf_float+0xb6>
 80178be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80178c2:	4631      	mov	r1, r6
 80178c4:	4628      	mov	r0, r5
 80178c6:	47b8      	blx	r7
 80178c8:	3001      	adds	r0, #1
 80178ca:	f43f ae70 	beq.w	80175ae <_printf_float+0xb6>
 80178ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80178d2:	2200      	movs	r2, #0
 80178d4:	2300      	movs	r3, #0
 80178d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80178da:	f7e9 f8cd 	bl	8000a78 <__aeabi_dcmpeq>
 80178de:	b9c0      	cbnz	r0, 8017912 <_printf_float+0x41a>
 80178e0:	4653      	mov	r3, sl
 80178e2:	f108 0201 	add.w	r2, r8, #1
 80178e6:	4631      	mov	r1, r6
 80178e8:	4628      	mov	r0, r5
 80178ea:	47b8      	blx	r7
 80178ec:	3001      	adds	r0, #1
 80178ee:	d10c      	bne.n	801790a <_printf_float+0x412>
 80178f0:	e65d      	b.n	80175ae <_printf_float+0xb6>
 80178f2:	2301      	movs	r3, #1
 80178f4:	465a      	mov	r2, fp
 80178f6:	4631      	mov	r1, r6
 80178f8:	4628      	mov	r0, r5
 80178fa:	47b8      	blx	r7
 80178fc:	3001      	adds	r0, #1
 80178fe:	f43f ae56 	beq.w	80175ae <_printf_float+0xb6>
 8017902:	f108 0801 	add.w	r8, r8, #1
 8017906:	45d0      	cmp	r8, sl
 8017908:	dbf3      	blt.n	80178f2 <_printf_float+0x3fa>
 801790a:	464b      	mov	r3, r9
 801790c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017910:	e6df      	b.n	80176d2 <_printf_float+0x1da>
 8017912:	f04f 0800 	mov.w	r8, #0
 8017916:	f104 0b1a 	add.w	fp, r4, #26
 801791a:	e7f4      	b.n	8017906 <_printf_float+0x40e>
 801791c:	2301      	movs	r3, #1
 801791e:	4642      	mov	r2, r8
 8017920:	e7e1      	b.n	80178e6 <_printf_float+0x3ee>
 8017922:	2301      	movs	r3, #1
 8017924:	464a      	mov	r2, r9
 8017926:	4631      	mov	r1, r6
 8017928:	4628      	mov	r0, r5
 801792a:	47b8      	blx	r7
 801792c:	3001      	adds	r0, #1
 801792e:	f43f ae3e 	beq.w	80175ae <_printf_float+0xb6>
 8017932:	f108 0801 	add.w	r8, r8, #1
 8017936:	68e3      	ldr	r3, [r4, #12]
 8017938:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801793a:	1a5b      	subs	r3, r3, r1
 801793c:	4543      	cmp	r3, r8
 801793e:	dcf0      	bgt.n	8017922 <_printf_float+0x42a>
 8017940:	e6fc      	b.n	801773c <_printf_float+0x244>
 8017942:	f04f 0800 	mov.w	r8, #0
 8017946:	f104 0919 	add.w	r9, r4, #25
 801794a:	e7f4      	b.n	8017936 <_printf_float+0x43e>

0801794c <_printf_common>:
 801794c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017950:	4616      	mov	r6, r2
 8017952:	4698      	mov	r8, r3
 8017954:	688a      	ldr	r2, [r1, #8]
 8017956:	690b      	ldr	r3, [r1, #16]
 8017958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801795c:	4293      	cmp	r3, r2
 801795e:	bfb8      	it	lt
 8017960:	4613      	movlt	r3, r2
 8017962:	6033      	str	r3, [r6, #0]
 8017964:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017968:	4607      	mov	r7, r0
 801796a:	460c      	mov	r4, r1
 801796c:	b10a      	cbz	r2, 8017972 <_printf_common+0x26>
 801796e:	3301      	adds	r3, #1
 8017970:	6033      	str	r3, [r6, #0]
 8017972:	6823      	ldr	r3, [r4, #0]
 8017974:	0699      	lsls	r1, r3, #26
 8017976:	bf42      	ittt	mi
 8017978:	6833      	ldrmi	r3, [r6, #0]
 801797a:	3302      	addmi	r3, #2
 801797c:	6033      	strmi	r3, [r6, #0]
 801797e:	6825      	ldr	r5, [r4, #0]
 8017980:	f015 0506 	ands.w	r5, r5, #6
 8017984:	d106      	bne.n	8017994 <_printf_common+0x48>
 8017986:	f104 0a19 	add.w	sl, r4, #25
 801798a:	68e3      	ldr	r3, [r4, #12]
 801798c:	6832      	ldr	r2, [r6, #0]
 801798e:	1a9b      	subs	r3, r3, r2
 8017990:	42ab      	cmp	r3, r5
 8017992:	dc26      	bgt.n	80179e2 <_printf_common+0x96>
 8017994:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017998:	6822      	ldr	r2, [r4, #0]
 801799a:	3b00      	subs	r3, #0
 801799c:	bf18      	it	ne
 801799e:	2301      	movne	r3, #1
 80179a0:	0692      	lsls	r2, r2, #26
 80179a2:	d42b      	bmi.n	80179fc <_printf_common+0xb0>
 80179a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80179a8:	4641      	mov	r1, r8
 80179aa:	4638      	mov	r0, r7
 80179ac:	47c8      	blx	r9
 80179ae:	3001      	adds	r0, #1
 80179b0:	d01e      	beq.n	80179f0 <_printf_common+0xa4>
 80179b2:	6823      	ldr	r3, [r4, #0]
 80179b4:	6922      	ldr	r2, [r4, #16]
 80179b6:	f003 0306 	and.w	r3, r3, #6
 80179ba:	2b04      	cmp	r3, #4
 80179bc:	bf02      	ittt	eq
 80179be:	68e5      	ldreq	r5, [r4, #12]
 80179c0:	6833      	ldreq	r3, [r6, #0]
 80179c2:	1aed      	subeq	r5, r5, r3
 80179c4:	68a3      	ldr	r3, [r4, #8]
 80179c6:	bf0c      	ite	eq
 80179c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80179cc:	2500      	movne	r5, #0
 80179ce:	4293      	cmp	r3, r2
 80179d0:	bfc4      	itt	gt
 80179d2:	1a9b      	subgt	r3, r3, r2
 80179d4:	18ed      	addgt	r5, r5, r3
 80179d6:	2600      	movs	r6, #0
 80179d8:	341a      	adds	r4, #26
 80179da:	42b5      	cmp	r5, r6
 80179dc:	d11a      	bne.n	8017a14 <_printf_common+0xc8>
 80179de:	2000      	movs	r0, #0
 80179e0:	e008      	b.n	80179f4 <_printf_common+0xa8>
 80179e2:	2301      	movs	r3, #1
 80179e4:	4652      	mov	r2, sl
 80179e6:	4641      	mov	r1, r8
 80179e8:	4638      	mov	r0, r7
 80179ea:	47c8      	blx	r9
 80179ec:	3001      	adds	r0, #1
 80179ee:	d103      	bne.n	80179f8 <_printf_common+0xac>
 80179f0:	f04f 30ff 	mov.w	r0, #4294967295
 80179f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179f8:	3501      	adds	r5, #1
 80179fa:	e7c6      	b.n	801798a <_printf_common+0x3e>
 80179fc:	18e1      	adds	r1, r4, r3
 80179fe:	1c5a      	adds	r2, r3, #1
 8017a00:	2030      	movs	r0, #48	@ 0x30
 8017a02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017a06:	4422      	add	r2, r4
 8017a08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017a0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017a10:	3302      	adds	r3, #2
 8017a12:	e7c7      	b.n	80179a4 <_printf_common+0x58>
 8017a14:	2301      	movs	r3, #1
 8017a16:	4622      	mov	r2, r4
 8017a18:	4641      	mov	r1, r8
 8017a1a:	4638      	mov	r0, r7
 8017a1c:	47c8      	blx	r9
 8017a1e:	3001      	adds	r0, #1
 8017a20:	d0e6      	beq.n	80179f0 <_printf_common+0xa4>
 8017a22:	3601      	adds	r6, #1
 8017a24:	e7d9      	b.n	80179da <_printf_common+0x8e>
	...

08017a28 <_printf_i>:
 8017a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017a2c:	7e0f      	ldrb	r7, [r1, #24]
 8017a2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017a30:	2f78      	cmp	r7, #120	@ 0x78
 8017a32:	4691      	mov	r9, r2
 8017a34:	4680      	mov	r8, r0
 8017a36:	460c      	mov	r4, r1
 8017a38:	469a      	mov	sl, r3
 8017a3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017a3e:	d807      	bhi.n	8017a50 <_printf_i+0x28>
 8017a40:	2f62      	cmp	r7, #98	@ 0x62
 8017a42:	d80a      	bhi.n	8017a5a <_printf_i+0x32>
 8017a44:	2f00      	cmp	r7, #0
 8017a46:	f000 80d1 	beq.w	8017bec <_printf_i+0x1c4>
 8017a4a:	2f58      	cmp	r7, #88	@ 0x58
 8017a4c:	f000 80b8 	beq.w	8017bc0 <_printf_i+0x198>
 8017a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017a54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017a58:	e03a      	b.n	8017ad0 <_printf_i+0xa8>
 8017a5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017a5e:	2b15      	cmp	r3, #21
 8017a60:	d8f6      	bhi.n	8017a50 <_printf_i+0x28>
 8017a62:	a101      	add	r1, pc, #4	@ (adr r1, 8017a68 <_printf_i+0x40>)
 8017a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017a68:	08017ac1 	.word	0x08017ac1
 8017a6c:	08017ad5 	.word	0x08017ad5
 8017a70:	08017a51 	.word	0x08017a51
 8017a74:	08017a51 	.word	0x08017a51
 8017a78:	08017a51 	.word	0x08017a51
 8017a7c:	08017a51 	.word	0x08017a51
 8017a80:	08017ad5 	.word	0x08017ad5
 8017a84:	08017a51 	.word	0x08017a51
 8017a88:	08017a51 	.word	0x08017a51
 8017a8c:	08017a51 	.word	0x08017a51
 8017a90:	08017a51 	.word	0x08017a51
 8017a94:	08017bd3 	.word	0x08017bd3
 8017a98:	08017aff 	.word	0x08017aff
 8017a9c:	08017b8d 	.word	0x08017b8d
 8017aa0:	08017a51 	.word	0x08017a51
 8017aa4:	08017a51 	.word	0x08017a51
 8017aa8:	08017bf5 	.word	0x08017bf5
 8017aac:	08017a51 	.word	0x08017a51
 8017ab0:	08017aff 	.word	0x08017aff
 8017ab4:	08017a51 	.word	0x08017a51
 8017ab8:	08017a51 	.word	0x08017a51
 8017abc:	08017b95 	.word	0x08017b95
 8017ac0:	6833      	ldr	r3, [r6, #0]
 8017ac2:	1d1a      	adds	r2, r3, #4
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	6032      	str	r2, [r6, #0]
 8017ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017acc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	e09c      	b.n	8017c0e <_printf_i+0x1e6>
 8017ad4:	6833      	ldr	r3, [r6, #0]
 8017ad6:	6820      	ldr	r0, [r4, #0]
 8017ad8:	1d19      	adds	r1, r3, #4
 8017ada:	6031      	str	r1, [r6, #0]
 8017adc:	0606      	lsls	r6, r0, #24
 8017ade:	d501      	bpl.n	8017ae4 <_printf_i+0xbc>
 8017ae0:	681d      	ldr	r5, [r3, #0]
 8017ae2:	e003      	b.n	8017aec <_printf_i+0xc4>
 8017ae4:	0645      	lsls	r5, r0, #25
 8017ae6:	d5fb      	bpl.n	8017ae0 <_printf_i+0xb8>
 8017ae8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017aec:	2d00      	cmp	r5, #0
 8017aee:	da03      	bge.n	8017af8 <_printf_i+0xd0>
 8017af0:	232d      	movs	r3, #45	@ 0x2d
 8017af2:	426d      	negs	r5, r5
 8017af4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017af8:	4858      	ldr	r0, [pc, #352]	@ (8017c5c <_printf_i+0x234>)
 8017afa:	230a      	movs	r3, #10
 8017afc:	e011      	b.n	8017b22 <_printf_i+0xfa>
 8017afe:	6821      	ldr	r1, [r4, #0]
 8017b00:	6833      	ldr	r3, [r6, #0]
 8017b02:	0608      	lsls	r0, r1, #24
 8017b04:	f853 5b04 	ldr.w	r5, [r3], #4
 8017b08:	d402      	bmi.n	8017b10 <_printf_i+0xe8>
 8017b0a:	0649      	lsls	r1, r1, #25
 8017b0c:	bf48      	it	mi
 8017b0e:	b2ad      	uxthmi	r5, r5
 8017b10:	2f6f      	cmp	r7, #111	@ 0x6f
 8017b12:	4852      	ldr	r0, [pc, #328]	@ (8017c5c <_printf_i+0x234>)
 8017b14:	6033      	str	r3, [r6, #0]
 8017b16:	bf14      	ite	ne
 8017b18:	230a      	movne	r3, #10
 8017b1a:	2308      	moveq	r3, #8
 8017b1c:	2100      	movs	r1, #0
 8017b1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017b22:	6866      	ldr	r6, [r4, #4]
 8017b24:	60a6      	str	r6, [r4, #8]
 8017b26:	2e00      	cmp	r6, #0
 8017b28:	db05      	blt.n	8017b36 <_printf_i+0x10e>
 8017b2a:	6821      	ldr	r1, [r4, #0]
 8017b2c:	432e      	orrs	r6, r5
 8017b2e:	f021 0104 	bic.w	r1, r1, #4
 8017b32:	6021      	str	r1, [r4, #0]
 8017b34:	d04b      	beq.n	8017bce <_printf_i+0x1a6>
 8017b36:	4616      	mov	r6, r2
 8017b38:	fbb5 f1f3 	udiv	r1, r5, r3
 8017b3c:	fb03 5711 	mls	r7, r3, r1, r5
 8017b40:	5dc7      	ldrb	r7, [r0, r7]
 8017b42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017b46:	462f      	mov	r7, r5
 8017b48:	42bb      	cmp	r3, r7
 8017b4a:	460d      	mov	r5, r1
 8017b4c:	d9f4      	bls.n	8017b38 <_printf_i+0x110>
 8017b4e:	2b08      	cmp	r3, #8
 8017b50:	d10b      	bne.n	8017b6a <_printf_i+0x142>
 8017b52:	6823      	ldr	r3, [r4, #0]
 8017b54:	07df      	lsls	r7, r3, #31
 8017b56:	d508      	bpl.n	8017b6a <_printf_i+0x142>
 8017b58:	6923      	ldr	r3, [r4, #16]
 8017b5a:	6861      	ldr	r1, [r4, #4]
 8017b5c:	4299      	cmp	r1, r3
 8017b5e:	bfde      	ittt	le
 8017b60:	2330      	movle	r3, #48	@ 0x30
 8017b62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017b66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017b6a:	1b92      	subs	r2, r2, r6
 8017b6c:	6122      	str	r2, [r4, #16]
 8017b6e:	f8cd a000 	str.w	sl, [sp]
 8017b72:	464b      	mov	r3, r9
 8017b74:	aa03      	add	r2, sp, #12
 8017b76:	4621      	mov	r1, r4
 8017b78:	4640      	mov	r0, r8
 8017b7a:	f7ff fee7 	bl	801794c <_printf_common>
 8017b7e:	3001      	adds	r0, #1
 8017b80:	d14a      	bne.n	8017c18 <_printf_i+0x1f0>
 8017b82:	f04f 30ff 	mov.w	r0, #4294967295
 8017b86:	b004      	add	sp, #16
 8017b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b8c:	6823      	ldr	r3, [r4, #0]
 8017b8e:	f043 0320 	orr.w	r3, r3, #32
 8017b92:	6023      	str	r3, [r4, #0]
 8017b94:	4832      	ldr	r0, [pc, #200]	@ (8017c60 <_printf_i+0x238>)
 8017b96:	2778      	movs	r7, #120	@ 0x78
 8017b98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017b9c:	6823      	ldr	r3, [r4, #0]
 8017b9e:	6831      	ldr	r1, [r6, #0]
 8017ba0:	061f      	lsls	r7, r3, #24
 8017ba2:	f851 5b04 	ldr.w	r5, [r1], #4
 8017ba6:	d402      	bmi.n	8017bae <_printf_i+0x186>
 8017ba8:	065f      	lsls	r7, r3, #25
 8017baa:	bf48      	it	mi
 8017bac:	b2ad      	uxthmi	r5, r5
 8017bae:	6031      	str	r1, [r6, #0]
 8017bb0:	07d9      	lsls	r1, r3, #31
 8017bb2:	bf44      	itt	mi
 8017bb4:	f043 0320 	orrmi.w	r3, r3, #32
 8017bb8:	6023      	strmi	r3, [r4, #0]
 8017bba:	b11d      	cbz	r5, 8017bc4 <_printf_i+0x19c>
 8017bbc:	2310      	movs	r3, #16
 8017bbe:	e7ad      	b.n	8017b1c <_printf_i+0xf4>
 8017bc0:	4826      	ldr	r0, [pc, #152]	@ (8017c5c <_printf_i+0x234>)
 8017bc2:	e7e9      	b.n	8017b98 <_printf_i+0x170>
 8017bc4:	6823      	ldr	r3, [r4, #0]
 8017bc6:	f023 0320 	bic.w	r3, r3, #32
 8017bca:	6023      	str	r3, [r4, #0]
 8017bcc:	e7f6      	b.n	8017bbc <_printf_i+0x194>
 8017bce:	4616      	mov	r6, r2
 8017bd0:	e7bd      	b.n	8017b4e <_printf_i+0x126>
 8017bd2:	6833      	ldr	r3, [r6, #0]
 8017bd4:	6825      	ldr	r5, [r4, #0]
 8017bd6:	6961      	ldr	r1, [r4, #20]
 8017bd8:	1d18      	adds	r0, r3, #4
 8017bda:	6030      	str	r0, [r6, #0]
 8017bdc:	062e      	lsls	r6, r5, #24
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	d501      	bpl.n	8017be6 <_printf_i+0x1be>
 8017be2:	6019      	str	r1, [r3, #0]
 8017be4:	e002      	b.n	8017bec <_printf_i+0x1c4>
 8017be6:	0668      	lsls	r0, r5, #25
 8017be8:	d5fb      	bpl.n	8017be2 <_printf_i+0x1ba>
 8017bea:	8019      	strh	r1, [r3, #0]
 8017bec:	2300      	movs	r3, #0
 8017bee:	6123      	str	r3, [r4, #16]
 8017bf0:	4616      	mov	r6, r2
 8017bf2:	e7bc      	b.n	8017b6e <_printf_i+0x146>
 8017bf4:	6833      	ldr	r3, [r6, #0]
 8017bf6:	1d1a      	adds	r2, r3, #4
 8017bf8:	6032      	str	r2, [r6, #0]
 8017bfa:	681e      	ldr	r6, [r3, #0]
 8017bfc:	6862      	ldr	r2, [r4, #4]
 8017bfe:	2100      	movs	r1, #0
 8017c00:	4630      	mov	r0, r6
 8017c02:	f7e8 fabd 	bl	8000180 <memchr>
 8017c06:	b108      	cbz	r0, 8017c0c <_printf_i+0x1e4>
 8017c08:	1b80      	subs	r0, r0, r6
 8017c0a:	6060      	str	r0, [r4, #4]
 8017c0c:	6863      	ldr	r3, [r4, #4]
 8017c0e:	6123      	str	r3, [r4, #16]
 8017c10:	2300      	movs	r3, #0
 8017c12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017c16:	e7aa      	b.n	8017b6e <_printf_i+0x146>
 8017c18:	6923      	ldr	r3, [r4, #16]
 8017c1a:	4632      	mov	r2, r6
 8017c1c:	4649      	mov	r1, r9
 8017c1e:	4640      	mov	r0, r8
 8017c20:	47d0      	blx	sl
 8017c22:	3001      	adds	r0, #1
 8017c24:	d0ad      	beq.n	8017b82 <_printf_i+0x15a>
 8017c26:	6823      	ldr	r3, [r4, #0]
 8017c28:	079b      	lsls	r3, r3, #30
 8017c2a:	d413      	bmi.n	8017c54 <_printf_i+0x22c>
 8017c2c:	68e0      	ldr	r0, [r4, #12]
 8017c2e:	9b03      	ldr	r3, [sp, #12]
 8017c30:	4298      	cmp	r0, r3
 8017c32:	bfb8      	it	lt
 8017c34:	4618      	movlt	r0, r3
 8017c36:	e7a6      	b.n	8017b86 <_printf_i+0x15e>
 8017c38:	2301      	movs	r3, #1
 8017c3a:	4632      	mov	r2, r6
 8017c3c:	4649      	mov	r1, r9
 8017c3e:	4640      	mov	r0, r8
 8017c40:	47d0      	blx	sl
 8017c42:	3001      	adds	r0, #1
 8017c44:	d09d      	beq.n	8017b82 <_printf_i+0x15a>
 8017c46:	3501      	adds	r5, #1
 8017c48:	68e3      	ldr	r3, [r4, #12]
 8017c4a:	9903      	ldr	r1, [sp, #12]
 8017c4c:	1a5b      	subs	r3, r3, r1
 8017c4e:	42ab      	cmp	r3, r5
 8017c50:	dcf2      	bgt.n	8017c38 <_printf_i+0x210>
 8017c52:	e7eb      	b.n	8017c2c <_printf_i+0x204>
 8017c54:	2500      	movs	r5, #0
 8017c56:	f104 0619 	add.w	r6, r4, #25
 8017c5a:	e7f5      	b.n	8017c48 <_printf_i+0x220>
 8017c5c:	0801f110 	.word	0x0801f110
 8017c60:	0801f121 	.word	0x0801f121

08017c64 <_scanf_float>:
 8017c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c68:	b087      	sub	sp, #28
 8017c6a:	4691      	mov	r9, r2
 8017c6c:	9303      	str	r3, [sp, #12]
 8017c6e:	688b      	ldr	r3, [r1, #8]
 8017c70:	1e5a      	subs	r2, r3, #1
 8017c72:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017c76:	bf81      	itttt	hi
 8017c78:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8017c7c:	eb03 0b05 	addhi.w	fp, r3, r5
 8017c80:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017c84:	608b      	strhi	r3, [r1, #8]
 8017c86:	680b      	ldr	r3, [r1, #0]
 8017c88:	460a      	mov	r2, r1
 8017c8a:	f04f 0500 	mov.w	r5, #0
 8017c8e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8017c92:	f842 3b1c 	str.w	r3, [r2], #28
 8017c96:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017c9a:	4680      	mov	r8, r0
 8017c9c:	460c      	mov	r4, r1
 8017c9e:	bf98      	it	ls
 8017ca0:	f04f 0b00 	movls.w	fp, #0
 8017ca4:	9201      	str	r2, [sp, #4]
 8017ca6:	4616      	mov	r6, r2
 8017ca8:	46aa      	mov	sl, r5
 8017caa:	462f      	mov	r7, r5
 8017cac:	9502      	str	r5, [sp, #8]
 8017cae:	68a2      	ldr	r2, [r4, #8]
 8017cb0:	b15a      	cbz	r2, 8017cca <_scanf_float+0x66>
 8017cb2:	f8d9 3000 	ldr.w	r3, [r9]
 8017cb6:	781b      	ldrb	r3, [r3, #0]
 8017cb8:	2b4e      	cmp	r3, #78	@ 0x4e
 8017cba:	d863      	bhi.n	8017d84 <_scanf_float+0x120>
 8017cbc:	2b40      	cmp	r3, #64	@ 0x40
 8017cbe:	d83b      	bhi.n	8017d38 <_scanf_float+0xd4>
 8017cc0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8017cc4:	b2c8      	uxtb	r0, r1
 8017cc6:	280e      	cmp	r0, #14
 8017cc8:	d939      	bls.n	8017d3e <_scanf_float+0xda>
 8017cca:	b11f      	cbz	r7, 8017cd4 <_scanf_float+0x70>
 8017ccc:	6823      	ldr	r3, [r4, #0]
 8017cce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017cd2:	6023      	str	r3, [r4, #0]
 8017cd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017cd8:	f1ba 0f01 	cmp.w	sl, #1
 8017cdc:	f200 8114 	bhi.w	8017f08 <_scanf_float+0x2a4>
 8017ce0:	9b01      	ldr	r3, [sp, #4]
 8017ce2:	429e      	cmp	r6, r3
 8017ce4:	f200 8105 	bhi.w	8017ef2 <_scanf_float+0x28e>
 8017ce8:	2001      	movs	r0, #1
 8017cea:	b007      	add	sp, #28
 8017cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cf0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8017cf4:	2a0d      	cmp	r2, #13
 8017cf6:	d8e8      	bhi.n	8017cca <_scanf_float+0x66>
 8017cf8:	a101      	add	r1, pc, #4	@ (adr r1, 8017d00 <_scanf_float+0x9c>)
 8017cfa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017cfe:	bf00      	nop
 8017d00:	08017e49 	.word	0x08017e49
 8017d04:	08017ccb 	.word	0x08017ccb
 8017d08:	08017ccb 	.word	0x08017ccb
 8017d0c:	08017ccb 	.word	0x08017ccb
 8017d10:	08017ea5 	.word	0x08017ea5
 8017d14:	08017e7f 	.word	0x08017e7f
 8017d18:	08017ccb 	.word	0x08017ccb
 8017d1c:	08017ccb 	.word	0x08017ccb
 8017d20:	08017e57 	.word	0x08017e57
 8017d24:	08017ccb 	.word	0x08017ccb
 8017d28:	08017ccb 	.word	0x08017ccb
 8017d2c:	08017ccb 	.word	0x08017ccb
 8017d30:	08017ccb 	.word	0x08017ccb
 8017d34:	08017e13 	.word	0x08017e13
 8017d38:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8017d3c:	e7da      	b.n	8017cf4 <_scanf_float+0x90>
 8017d3e:	290e      	cmp	r1, #14
 8017d40:	d8c3      	bhi.n	8017cca <_scanf_float+0x66>
 8017d42:	a001      	add	r0, pc, #4	@ (adr r0, 8017d48 <_scanf_float+0xe4>)
 8017d44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017d48:	08017e03 	.word	0x08017e03
 8017d4c:	08017ccb 	.word	0x08017ccb
 8017d50:	08017e03 	.word	0x08017e03
 8017d54:	08017e93 	.word	0x08017e93
 8017d58:	08017ccb 	.word	0x08017ccb
 8017d5c:	08017da5 	.word	0x08017da5
 8017d60:	08017de9 	.word	0x08017de9
 8017d64:	08017de9 	.word	0x08017de9
 8017d68:	08017de9 	.word	0x08017de9
 8017d6c:	08017de9 	.word	0x08017de9
 8017d70:	08017de9 	.word	0x08017de9
 8017d74:	08017de9 	.word	0x08017de9
 8017d78:	08017de9 	.word	0x08017de9
 8017d7c:	08017de9 	.word	0x08017de9
 8017d80:	08017de9 	.word	0x08017de9
 8017d84:	2b6e      	cmp	r3, #110	@ 0x6e
 8017d86:	d809      	bhi.n	8017d9c <_scanf_float+0x138>
 8017d88:	2b60      	cmp	r3, #96	@ 0x60
 8017d8a:	d8b1      	bhi.n	8017cf0 <_scanf_float+0x8c>
 8017d8c:	2b54      	cmp	r3, #84	@ 0x54
 8017d8e:	d07b      	beq.n	8017e88 <_scanf_float+0x224>
 8017d90:	2b59      	cmp	r3, #89	@ 0x59
 8017d92:	d19a      	bne.n	8017cca <_scanf_float+0x66>
 8017d94:	2d07      	cmp	r5, #7
 8017d96:	d198      	bne.n	8017cca <_scanf_float+0x66>
 8017d98:	2508      	movs	r5, #8
 8017d9a:	e02f      	b.n	8017dfc <_scanf_float+0x198>
 8017d9c:	2b74      	cmp	r3, #116	@ 0x74
 8017d9e:	d073      	beq.n	8017e88 <_scanf_float+0x224>
 8017da0:	2b79      	cmp	r3, #121	@ 0x79
 8017da2:	e7f6      	b.n	8017d92 <_scanf_float+0x12e>
 8017da4:	6821      	ldr	r1, [r4, #0]
 8017da6:	05c8      	lsls	r0, r1, #23
 8017da8:	d51e      	bpl.n	8017de8 <_scanf_float+0x184>
 8017daa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8017dae:	6021      	str	r1, [r4, #0]
 8017db0:	3701      	adds	r7, #1
 8017db2:	f1bb 0f00 	cmp.w	fp, #0
 8017db6:	d003      	beq.n	8017dc0 <_scanf_float+0x15c>
 8017db8:	3201      	adds	r2, #1
 8017dba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017dbe:	60a2      	str	r2, [r4, #8]
 8017dc0:	68a3      	ldr	r3, [r4, #8]
 8017dc2:	3b01      	subs	r3, #1
 8017dc4:	60a3      	str	r3, [r4, #8]
 8017dc6:	6923      	ldr	r3, [r4, #16]
 8017dc8:	3301      	adds	r3, #1
 8017dca:	6123      	str	r3, [r4, #16]
 8017dcc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017dd0:	3b01      	subs	r3, #1
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	f8c9 3004 	str.w	r3, [r9, #4]
 8017dd8:	f340 8082 	ble.w	8017ee0 <_scanf_float+0x27c>
 8017ddc:	f8d9 3000 	ldr.w	r3, [r9]
 8017de0:	3301      	adds	r3, #1
 8017de2:	f8c9 3000 	str.w	r3, [r9]
 8017de6:	e762      	b.n	8017cae <_scanf_float+0x4a>
 8017de8:	eb1a 0105 	adds.w	r1, sl, r5
 8017dec:	f47f af6d 	bne.w	8017cca <_scanf_float+0x66>
 8017df0:	6822      	ldr	r2, [r4, #0]
 8017df2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8017df6:	6022      	str	r2, [r4, #0]
 8017df8:	460d      	mov	r5, r1
 8017dfa:	468a      	mov	sl, r1
 8017dfc:	f806 3b01 	strb.w	r3, [r6], #1
 8017e00:	e7de      	b.n	8017dc0 <_scanf_float+0x15c>
 8017e02:	6822      	ldr	r2, [r4, #0]
 8017e04:	0610      	lsls	r0, r2, #24
 8017e06:	f57f af60 	bpl.w	8017cca <_scanf_float+0x66>
 8017e0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8017e0e:	6022      	str	r2, [r4, #0]
 8017e10:	e7f4      	b.n	8017dfc <_scanf_float+0x198>
 8017e12:	f1ba 0f00 	cmp.w	sl, #0
 8017e16:	d10c      	bne.n	8017e32 <_scanf_float+0x1ce>
 8017e18:	b977      	cbnz	r7, 8017e38 <_scanf_float+0x1d4>
 8017e1a:	6822      	ldr	r2, [r4, #0]
 8017e1c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8017e20:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8017e24:	d108      	bne.n	8017e38 <_scanf_float+0x1d4>
 8017e26:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8017e2a:	6022      	str	r2, [r4, #0]
 8017e2c:	f04f 0a01 	mov.w	sl, #1
 8017e30:	e7e4      	b.n	8017dfc <_scanf_float+0x198>
 8017e32:	f1ba 0f02 	cmp.w	sl, #2
 8017e36:	d050      	beq.n	8017eda <_scanf_float+0x276>
 8017e38:	2d01      	cmp	r5, #1
 8017e3a:	d002      	beq.n	8017e42 <_scanf_float+0x1de>
 8017e3c:	2d04      	cmp	r5, #4
 8017e3e:	f47f af44 	bne.w	8017cca <_scanf_float+0x66>
 8017e42:	3501      	adds	r5, #1
 8017e44:	b2ed      	uxtb	r5, r5
 8017e46:	e7d9      	b.n	8017dfc <_scanf_float+0x198>
 8017e48:	f1ba 0f01 	cmp.w	sl, #1
 8017e4c:	f47f af3d 	bne.w	8017cca <_scanf_float+0x66>
 8017e50:	f04f 0a02 	mov.w	sl, #2
 8017e54:	e7d2      	b.n	8017dfc <_scanf_float+0x198>
 8017e56:	b975      	cbnz	r5, 8017e76 <_scanf_float+0x212>
 8017e58:	2f00      	cmp	r7, #0
 8017e5a:	f47f af37 	bne.w	8017ccc <_scanf_float+0x68>
 8017e5e:	6822      	ldr	r2, [r4, #0]
 8017e60:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8017e64:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8017e68:	f040 8103 	bne.w	8018072 <_scanf_float+0x40e>
 8017e6c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8017e70:	6022      	str	r2, [r4, #0]
 8017e72:	2501      	movs	r5, #1
 8017e74:	e7c2      	b.n	8017dfc <_scanf_float+0x198>
 8017e76:	2d03      	cmp	r5, #3
 8017e78:	d0e3      	beq.n	8017e42 <_scanf_float+0x1de>
 8017e7a:	2d05      	cmp	r5, #5
 8017e7c:	e7df      	b.n	8017e3e <_scanf_float+0x1da>
 8017e7e:	2d02      	cmp	r5, #2
 8017e80:	f47f af23 	bne.w	8017cca <_scanf_float+0x66>
 8017e84:	2503      	movs	r5, #3
 8017e86:	e7b9      	b.n	8017dfc <_scanf_float+0x198>
 8017e88:	2d06      	cmp	r5, #6
 8017e8a:	f47f af1e 	bne.w	8017cca <_scanf_float+0x66>
 8017e8e:	2507      	movs	r5, #7
 8017e90:	e7b4      	b.n	8017dfc <_scanf_float+0x198>
 8017e92:	6822      	ldr	r2, [r4, #0]
 8017e94:	0591      	lsls	r1, r2, #22
 8017e96:	f57f af18 	bpl.w	8017cca <_scanf_float+0x66>
 8017e9a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8017e9e:	6022      	str	r2, [r4, #0]
 8017ea0:	9702      	str	r7, [sp, #8]
 8017ea2:	e7ab      	b.n	8017dfc <_scanf_float+0x198>
 8017ea4:	6822      	ldr	r2, [r4, #0]
 8017ea6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8017eaa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017eae:	d005      	beq.n	8017ebc <_scanf_float+0x258>
 8017eb0:	0550      	lsls	r0, r2, #21
 8017eb2:	f57f af0a 	bpl.w	8017cca <_scanf_float+0x66>
 8017eb6:	2f00      	cmp	r7, #0
 8017eb8:	f000 80db 	beq.w	8018072 <_scanf_float+0x40e>
 8017ebc:	0591      	lsls	r1, r2, #22
 8017ebe:	bf58      	it	pl
 8017ec0:	9902      	ldrpl	r1, [sp, #8]
 8017ec2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8017ec6:	bf58      	it	pl
 8017ec8:	1a79      	subpl	r1, r7, r1
 8017eca:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8017ece:	bf58      	it	pl
 8017ed0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017ed4:	6022      	str	r2, [r4, #0]
 8017ed6:	2700      	movs	r7, #0
 8017ed8:	e790      	b.n	8017dfc <_scanf_float+0x198>
 8017eda:	f04f 0a03 	mov.w	sl, #3
 8017ede:	e78d      	b.n	8017dfc <_scanf_float+0x198>
 8017ee0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017ee4:	4649      	mov	r1, r9
 8017ee6:	4640      	mov	r0, r8
 8017ee8:	4798      	blx	r3
 8017eea:	2800      	cmp	r0, #0
 8017eec:	f43f aedf 	beq.w	8017cae <_scanf_float+0x4a>
 8017ef0:	e6eb      	b.n	8017cca <_scanf_float+0x66>
 8017ef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017ef6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017efa:	464a      	mov	r2, r9
 8017efc:	4640      	mov	r0, r8
 8017efe:	4798      	blx	r3
 8017f00:	6923      	ldr	r3, [r4, #16]
 8017f02:	3b01      	subs	r3, #1
 8017f04:	6123      	str	r3, [r4, #16]
 8017f06:	e6eb      	b.n	8017ce0 <_scanf_float+0x7c>
 8017f08:	1e6b      	subs	r3, r5, #1
 8017f0a:	2b06      	cmp	r3, #6
 8017f0c:	d824      	bhi.n	8017f58 <_scanf_float+0x2f4>
 8017f0e:	2d02      	cmp	r5, #2
 8017f10:	d836      	bhi.n	8017f80 <_scanf_float+0x31c>
 8017f12:	9b01      	ldr	r3, [sp, #4]
 8017f14:	429e      	cmp	r6, r3
 8017f16:	f67f aee7 	bls.w	8017ce8 <_scanf_float+0x84>
 8017f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017f1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017f22:	464a      	mov	r2, r9
 8017f24:	4640      	mov	r0, r8
 8017f26:	4798      	blx	r3
 8017f28:	6923      	ldr	r3, [r4, #16]
 8017f2a:	3b01      	subs	r3, #1
 8017f2c:	6123      	str	r3, [r4, #16]
 8017f2e:	e7f0      	b.n	8017f12 <_scanf_float+0x2ae>
 8017f30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017f34:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8017f38:	464a      	mov	r2, r9
 8017f3a:	4640      	mov	r0, r8
 8017f3c:	4798      	blx	r3
 8017f3e:	6923      	ldr	r3, [r4, #16]
 8017f40:	3b01      	subs	r3, #1
 8017f42:	6123      	str	r3, [r4, #16]
 8017f44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017f48:	fa5f fa8a 	uxtb.w	sl, sl
 8017f4c:	f1ba 0f02 	cmp.w	sl, #2
 8017f50:	d1ee      	bne.n	8017f30 <_scanf_float+0x2cc>
 8017f52:	3d03      	subs	r5, #3
 8017f54:	b2ed      	uxtb	r5, r5
 8017f56:	1b76      	subs	r6, r6, r5
 8017f58:	6823      	ldr	r3, [r4, #0]
 8017f5a:	05da      	lsls	r2, r3, #23
 8017f5c:	d530      	bpl.n	8017fc0 <_scanf_float+0x35c>
 8017f5e:	055b      	lsls	r3, r3, #21
 8017f60:	d511      	bpl.n	8017f86 <_scanf_float+0x322>
 8017f62:	9b01      	ldr	r3, [sp, #4]
 8017f64:	429e      	cmp	r6, r3
 8017f66:	f67f aebf 	bls.w	8017ce8 <_scanf_float+0x84>
 8017f6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017f6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017f72:	464a      	mov	r2, r9
 8017f74:	4640      	mov	r0, r8
 8017f76:	4798      	blx	r3
 8017f78:	6923      	ldr	r3, [r4, #16]
 8017f7a:	3b01      	subs	r3, #1
 8017f7c:	6123      	str	r3, [r4, #16]
 8017f7e:	e7f0      	b.n	8017f62 <_scanf_float+0x2fe>
 8017f80:	46aa      	mov	sl, r5
 8017f82:	46b3      	mov	fp, r6
 8017f84:	e7de      	b.n	8017f44 <_scanf_float+0x2e0>
 8017f86:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017f8a:	6923      	ldr	r3, [r4, #16]
 8017f8c:	2965      	cmp	r1, #101	@ 0x65
 8017f8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8017f92:	f106 35ff 	add.w	r5, r6, #4294967295
 8017f96:	6123      	str	r3, [r4, #16]
 8017f98:	d00c      	beq.n	8017fb4 <_scanf_float+0x350>
 8017f9a:	2945      	cmp	r1, #69	@ 0x45
 8017f9c:	d00a      	beq.n	8017fb4 <_scanf_float+0x350>
 8017f9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017fa2:	464a      	mov	r2, r9
 8017fa4:	4640      	mov	r0, r8
 8017fa6:	4798      	blx	r3
 8017fa8:	6923      	ldr	r3, [r4, #16]
 8017faa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017fae:	3b01      	subs	r3, #1
 8017fb0:	1eb5      	subs	r5, r6, #2
 8017fb2:	6123      	str	r3, [r4, #16]
 8017fb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017fb8:	464a      	mov	r2, r9
 8017fba:	4640      	mov	r0, r8
 8017fbc:	4798      	blx	r3
 8017fbe:	462e      	mov	r6, r5
 8017fc0:	6822      	ldr	r2, [r4, #0]
 8017fc2:	f012 0210 	ands.w	r2, r2, #16
 8017fc6:	d001      	beq.n	8017fcc <_scanf_float+0x368>
 8017fc8:	2000      	movs	r0, #0
 8017fca:	e68e      	b.n	8017cea <_scanf_float+0x86>
 8017fcc:	7032      	strb	r2, [r6, #0]
 8017fce:	6823      	ldr	r3, [r4, #0]
 8017fd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8017fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017fd8:	d125      	bne.n	8018026 <_scanf_float+0x3c2>
 8017fda:	9b02      	ldr	r3, [sp, #8]
 8017fdc:	429f      	cmp	r7, r3
 8017fde:	d00a      	beq.n	8017ff6 <_scanf_float+0x392>
 8017fe0:	1bda      	subs	r2, r3, r7
 8017fe2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8017fe6:	429e      	cmp	r6, r3
 8017fe8:	bf28      	it	cs
 8017fea:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8017fee:	4922      	ldr	r1, [pc, #136]	@ (8018078 <_scanf_float+0x414>)
 8017ff0:	4630      	mov	r0, r6
 8017ff2:	f000 f93d 	bl	8018270 <siprintf>
 8017ff6:	9901      	ldr	r1, [sp, #4]
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	4640      	mov	r0, r8
 8017ffc:	f7ff f8ec 	bl	80171d8 <_strtod_r>
 8018000:	9b03      	ldr	r3, [sp, #12]
 8018002:	6821      	ldr	r1, [r4, #0]
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	f011 0f02 	tst.w	r1, #2
 801800a:	ec57 6b10 	vmov	r6, r7, d0
 801800e:	f103 0204 	add.w	r2, r3, #4
 8018012:	d015      	beq.n	8018040 <_scanf_float+0x3dc>
 8018014:	9903      	ldr	r1, [sp, #12]
 8018016:	600a      	str	r2, [r1, #0]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	e9c3 6700 	strd	r6, r7, [r3]
 801801e:	68e3      	ldr	r3, [r4, #12]
 8018020:	3301      	adds	r3, #1
 8018022:	60e3      	str	r3, [r4, #12]
 8018024:	e7d0      	b.n	8017fc8 <_scanf_float+0x364>
 8018026:	9b04      	ldr	r3, [sp, #16]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d0e4      	beq.n	8017ff6 <_scanf_float+0x392>
 801802c:	9905      	ldr	r1, [sp, #20]
 801802e:	230a      	movs	r3, #10
 8018030:	3101      	adds	r1, #1
 8018032:	4640      	mov	r0, r8
 8018034:	f7ff f9b4 	bl	80173a0 <_strtol_r>
 8018038:	9b04      	ldr	r3, [sp, #16]
 801803a:	9e05      	ldr	r6, [sp, #20]
 801803c:	1ac2      	subs	r2, r0, r3
 801803e:	e7d0      	b.n	8017fe2 <_scanf_float+0x37e>
 8018040:	f011 0f04 	tst.w	r1, #4
 8018044:	9903      	ldr	r1, [sp, #12]
 8018046:	600a      	str	r2, [r1, #0]
 8018048:	d1e6      	bne.n	8018018 <_scanf_float+0x3b4>
 801804a:	681d      	ldr	r5, [r3, #0]
 801804c:	4632      	mov	r2, r6
 801804e:	463b      	mov	r3, r7
 8018050:	4630      	mov	r0, r6
 8018052:	4639      	mov	r1, r7
 8018054:	f7e8 fd42 	bl	8000adc <__aeabi_dcmpun>
 8018058:	b128      	cbz	r0, 8018066 <_scanf_float+0x402>
 801805a:	4808      	ldr	r0, [pc, #32]	@ (801807c <_scanf_float+0x418>)
 801805c:	f000 faa0 	bl	80185a0 <nanf>
 8018060:	ed85 0a00 	vstr	s0, [r5]
 8018064:	e7db      	b.n	801801e <_scanf_float+0x3ba>
 8018066:	4630      	mov	r0, r6
 8018068:	4639      	mov	r1, r7
 801806a:	f7e8 fd95 	bl	8000b98 <__aeabi_d2f>
 801806e:	6028      	str	r0, [r5, #0]
 8018070:	e7d5      	b.n	801801e <_scanf_float+0x3ba>
 8018072:	2700      	movs	r7, #0
 8018074:	e62e      	b.n	8017cd4 <_scanf_float+0x70>
 8018076:	bf00      	nop
 8018078:	0801f132 	.word	0x0801f132
 801807c:	0801f1eb 	.word	0x0801f1eb

08018080 <std>:
 8018080:	2300      	movs	r3, #0
 8018082:	b510      	push	{r4, lr}
 8018084:	4604      	mov	r4, r0
 8018086:	e9c0 3300 	strd	r3, r3, [r0]
 801808a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801808e:	6083      	str	r3, [r0, #8]
 8018090:	8181      	strh	r1, [r0, #12]
 8018092:	6643      	str	r3, [r0, #100]	@ 0x64
 8018094:	81c2      	strh	r2, [r0, #14]
 8018096:	6183      	str	r3, [r0, #24]
 8018098:	4619      	mov	r1, r3
 801809a:	2208      	movs	r2, #8
 801809c:	305c      	adds	r0, #92	@ 0x5c
 801809e:	f000 f94c 	bl	801833a <memset>
 80180a2:	4b0d      	ldr	r3, [pc, #52]	@ (80180d8 <std+0x58>)
 80180a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80180a6:	4b0d      	ldr	r3, [pc, #52]	@ (80180dc <std+0x5c>)
 80180a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80180aa:	4b0d      	ldr	r3, [pc, #52]	@ (80180e0 <std+0x60>)
 80180ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80180ae:	4b0d      	ldr	r3, [pc, #52]	@ (80180e4 <std+0x64>)
 80180b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80180b2:	4b0d      	ldr	r3, [pc, #52]	@ (80180e8 <std+0x68>)
 80180b4:	6224      	str	r4, [r4, #32]
 80180b6:	429c      	cmp	r4, r3
 80180b8:	d006      	beq.n	80180c8 <std+0x48>
 80180ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80180be:	4294      	cmp	r4, r2
 80180c0:	d002      	beq.n	80180c8 <std+0x48>
 80180c2:	33d0      	adds	r3, #208	@ 0xd0
 80180c4:	429c      	cmp	r4, r3
 80180c6:	d105      	bne.n	80180d4 <std+0x54>
 80180c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80180cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180d0:	f000 ba44 	b.w	801855c <__retarget_lock_init_recursive>
 80180d4:	bd10      	pop	{r4, pc}
 80180d6:	bf00      	nop
 80180d8:	080182b5 	.word	0x080182b5
 80180dc:	080182d7 	.word	0x080182d7
 80180e0:	0801830f 	.word	0x0801830f
 80180e4:	08018333 	.word	0x08018333
 80180e8:	20002cb0 	.word	0x20002cb0

080180ec <stdio_exit_handler>:
 80180ec:	4a02      	ldr	r2, [pc, #8]	@ (80180f8 <stdio_exit_handler+0xc>)
 80180ee:	4903      	ldr	r1, [pc, #12]	@ (80180fc <stdio_exit_handler+0x10>)
 80180f0:	4803      	ldr	r0, [pc, #12]	@ (8018100 <stdio_exit_handler+0x14>)
 80180f2:	f000 b869 	b.w	80181c8 <_fwalk_sglue>
 80180f6:	bf00      	nop
 80180f8:	20000130 	.word	0x20000130
 80180fc:	0801a6e9 	.word	0x0801a6e9
 8018100:	200002ac 	.word	0x200002ac

08018104 <cleanup_stdio>:
 8018104:	6841      	ldr	r1, [r0, #4]
 8018106:	4b0c      	ldr	r3, [pc, #48]	@ (8018138 <cleanup_stdio+0x34>)
 8018108:	4299      	cmp	r1, r3
 801810a:	b510      	push	{r4, lr}
 801810c:	4604      	mov	r4, r0
 801810e:	d001      	beq.n	8018114 <cleanup_stdio+0x10>
 8018110:	f002 faea 	bl	801a6e8 <_fflush_r>
 8018114:	68a1      	ldr	r1, [r4, #8]
 8018116:	4b09      	ldr	r3, [pc, #36]	@ (801813c <cleanup_stdio+0x38>)
 8018118:	4299      	cmp	r1, r3
 801811a:	d002      	beq.n	8018122 <cleanup_stdio+0x1e>
 801811c:	4620      	mov	r0, r4
 801811e:	f002 fae3 	bl	801a6e8 <_fflush_r>
 8018122:	68e1      	ldr	r1, [r4, #12]
 8018124:	4b06      	ldr	r3, [pc, #24]	@ (8018140 <cleanup_stdio+0x3c>)
 8018126:	4299      	cmp	r1, r3
 8018128:	d004      	beq.n	8018134 <cleanup_stdio+0x30>
 801812a:	4620      	mov	r0, r4
 801812c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018130:	f002 bada 	b.w	801a6e8 <_fflush_r>
 8018134:	bd10      	pop	{r4, pc}
 8018136:	bf00      	nop
 8018138:	20002cb0 	.word	0x20002cb0
 801813c:	20002d18 	.word	0x20002d18
 8018140:	20002d80 	.word	0x20002d80

08018144 <global_stdio_init.part.0>:
 8018144:	b510      	push	{r4, lr}
 8018146:	4b0b      	ldr	r3, [pc, #44]	@ (8018174 <global_stdio_init.part.0+0x30>)
 8018148:	4c0b      	ldr	r4, [pc, #44]	@ (8018178 <global_stdio_init.part.0+0x34>)
 801814a:	4a0c      	ldr	r2, [pc, #48]	@ (801817c <global_stdio_init.part.0+0x38>)
 801814c:	601a      	str	r2, [r3, #0]
 801814e:	4620      	mov	r0, r4
 8018150:	2200      	movs	r2, #0
 8018152:	2104      	movs	r1, #4
 8018154:	f7ff ff94 	bl	8018080 <std>
 8018158:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801815c:	2201      	movs	r2, #1
 801815e:	2109      	movs	r1, #9
 8018160:	f7ff ff8e 	bl	8018080 <std>
 8018164:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018168:	2202      	movs	r2, #2
 801816a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801816e:	2112      	movs	r1, #18
 8018170:	f7ff bf86 	b.w	8018080 <std>
 8018174:	20002de8 	.word	0x20002de8
 8018178:	20002cb0 	.word	0x20002cb0
 801817c:	080180ed 	.word	0x080180ed

08018180 <__sfp_lock_acquire>:
 8018180:	4801      	ldr	r0, [pc, #4]	@ (8018188 <__sfp_lock_acquire+0x8>)
 8018182:	f000 b9ec 	b.w	801855e <__retarget_lock_acquire_recursive>
 8018186:	bf00      	nop
 8018188:	20002df1 	.word	0x20002df1

0801818c <__sfp_lock_release>:
 801818c:	4801      	ldr	r0, [pc, #4]	@ (8018194 <__sfp_lock_release+0x8>)
 801818e:	f000 b9e7 	b.w	8018560 <__retarget_lock_release_recursive>
 8018192:	bf00      	nop
 8018194:	20002df1 	.word	0x20002df1

08018198 <__sinit>:
 8018198:	b510      	push	{r4, lr}
 801819a:	4604      	mov	r4, r0
 801819c:	f7ff fff0 	bl	8018180 <__sfp_lock_acquire>
 80181a0:	6a23      	ldr	r3, [r4, #32]
 80181a2:	b11b      	cbz	r3, 80181ac <__sinit+0x14>
 80181a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181a8:	f7ff bff0 	b.w	801818c <__sfp_lock_release>
 80181ac:	4b04      	ldr	r3, [pc, #16]	@ (80181c0 <__sinit+0x28>)
 80181ae:	6223      	str	r3, [r4, #32]
 80181b0:	4b04      	ldr	r3, [pc, #16]	@ (80181c4 <__sinit+0x2c>)
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d1f5      	bne.n	80181a4 <__sinit+0xc>
 80181b8:	f7ff ffc4 	bl	8018144 <global_stdio_init.part.0>
 80181bc:	e7f2      	b.n	80181a4 <__sinit+0xc>
 80181be:	bf00      	nop
 80181c0:	08018105 	.word	0x08018105
 80181c4:	20002de8 	.word	0x20002de8

080181c8 <_fwalk_sglue>:
 80181c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181cc:	4607      	mov	r7, r0
 80181ce:	4688      	mov	r8, r1
 80181d0:	4614      	mov	r4, r2
 80181d2:	2600      	movs	r6, #0
 80181d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80181d8:	f1b9 0901 	subs.w	r9, r9, #1
 80181dc:	d505      	bpl.n	80181ea <_fwalk_sglue+0x22>
 80181de:	6824      	ldr	r4, [r4, #0]
 80181e0:	2c00      	cmp	r4, #0
 80181e2:	d1f7      	bne.n	80181d4 <_fwalk_sglue+0xc>
 80181e4:	4630      	mov	r0, r6
 80181e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181ea:	89ab      	ldrh	r3, [r5, #12]
 80181ec:	2b01      	cmp	r3, #1
 80181ee:	d907      	bls.n	8018200 <_fwalk_sglue+0x38>
 80181f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80181f4:	3301      	adds	r3, #1
 80181f6:	d003      	beq.n	8018200 <_fwalk_sglue+0x38>
 80181f8:	4629      	mov	r1, r5
 80181fa:	4638      	mov	r0, r7
 80181fc:	47c0      	blx	r8
 80181fe:	4306      	orrs	r6, r0
 8018200:	3568      	adds	r5, #104	@ 0x68
 8018202:	e7e9      	b.n	80181d8 <_fwalk_sglue+0x10>

08018204 <sniprintf>:
 8018204:	b40c      	push	{r2, r3}
 8018206:	b530      	push	{r4, r5, lr}
 8018208:	4b18      	ldr	r3, [pc, #96]	@ (801826c <sniprintf+0x68>)
 801820a:	1e0c      	subs	r4, r1, #0
 801820c:	681d      	ldr	r5, [r3, #0]
 801820e:	b09d      	sub	sp, #116	@ 0x74
 8018210:	da08      	bge.n	8018224 <sniprintf+0x20>
 8018212:	238b      	movs	r3, #139	@ 0x8b
 8018214:	602b      	str	r3, [r5, #0]
 8018216:	f04f 30ff 	mov.w	r0, #4294967295
 801821a:	b01d      	add	sp, #116	@ 0x74
 801821c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018220:	b002      	add	sp, #8
 8018222:	4770      	bx	lr
 8018224:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018228:	f8ad 3014 	strh.w	r3, [sp, #20]
 801822c:	f04f 0300 	mov.w	r3, #0
 8018230:	931b      	str	r3, [sp, #108]	@ 0x6c
 8018232:	bf14      	ite	ne
 8018234:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018238:	4623      	moveq	r3, r4
 801823a:	9304      	str	r3, [sp, #16]
 801823c:	9307      	str	r3, [sp, #28]
 801823e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018242:	9002      	str	r0, [sp, #8]
 8018244:	9006      	str	r0, [sp, #24]
 8018246:	f8ad 3016 	strh.w	r3, [sp, #22]
 801824a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801824c:	ab21      	add	r3, sp, #132	@ 0x84
 801824e:	a902      	add	r1, sp, #8
 8018250:	4628      	mov	r0, r5
 8018252:	9301      	str	r3, [sp, #4]
 8018254:	f002 f8c8 	bl	801a3e8 <_svfiprintf_r>
 8018258:	1c43      	adds	r3, r0, #1
 801825a:	bfbc      	itt	lt
 801825c:	238b      	movlt	r3, #139	@ 0x8b
 801825e:	602b      	strlt	r3, [r5, #0]
 8018260:	2c00      	cmp	r4, #0
 8018262:	d0da      	beq.n	801821a <sniprintf+0x16>
 8018264:	9b02      	ldr	r3, [sp, #8]
 8018266:	2200      	movs	r2, #0
 8018268:	701a      	strb	r2, [r3, #0]
 801826a:	e7d6      	b.n	801821a <sniprintf+0x16>
 801826c:	200002a8 	.word	0x200002a8

08018270 <siprintf>:
 8018270:	b40e      	push	{r1, r2, r3}
 8018272:	b510      	push	{r4, lr}
 8018274:	b09d      	sub	sp, #116	@ 0x74
 8018276:	ab1f      	add	r3, sp, #124	@ 0x7c
 8018278:	9002      	str	r0, [sp, #8]
 801827a:	9006      	str	r0, [sp, #24]
 801827c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018280:	480a      	ldr	r0, [pc, #40]	@ (80182ac <siprintf+0x3c>)
 8018282:	9107      	str	r1, [sp, #28]
 8018284:	9104      	str	r1, [sp, #16]
 8018286:	490a      	ldr	r1, [pc, #40]	@ (80182b0 <siprintf+0x40>)
 8018288:	f853 2b04 	ldr.w	r2, [r3], #4
 801828c:	9105      	str	r1, [sp, #20]
 801828e:	2400      	movs	r4, #0
 8018290:	a902      	add	r1, sp, #8
 8018292:	6800      	ldr	r0, [r0, #0]
 8018294:	9301      	str	r3, [sp, #4]
 8018296:	941b      	str	r4, [sp, #108]	@ 0x6c
 8018298:	f002 f8a6 	bl	801a3e8 <_svfiprintf_r>
 801829c:	9b02      	ldr	r3, [sp, #8]
 801829e:	701c      	strb	r4, [r3, #0]
 80182a0:	b01d      	add	sp, #116	@ 0x74
 80182a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182a6:	b003      	add	sp, #12
 80182a8:	4770      	bx	lr
 80182aa:	bf00      	nop
 80182ac:	200002a8 	.word	0x200002a8
 80182b0:	ffff0208 	.word	0xffff0208

080182b4 <__sread>:
 80182b4:	b510      	push	{r4, lr}
 80182b6:	460c      	mov	r4, r1
 80182b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182bc:	f000 f8f0 	bl	80184a0 <_read_r>
 80182c0:	2800      	cmp	r0, #0
 80182c2:	bfab      	itete	ge
 80182c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80182c6:	89a3      	ldrhlt	r3, [r4, #12]
 80182c8:	181b      	addge	r3, r3, r0
 80182ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80182ce:	bfac      	ite	ge
 80182d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80182d2:	81a3      	strhlt	r3, [r4, #12]
 80182d4:	bd10      	pop	{r4, pc}

080182d6 <__swrite>:
 80182d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182da:	461f      	mov	r7, r3
 80182dc:	898b      	ldrh	r3, [r1, #12]
 80182de:	05db      	lsls	r3, r3, #23
 80182e0:	4605      	mov	r5, r0
 80182e2:	460c      	mov	r4, r1
 80182e4:	4616      	mov	r6, r2
 80182e6:	d505      	bpl.n	80182f4 <__swrite+0x1e>
 80182e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182ec:	2302      	movs	r3, #2
 80182ee:	2200      	movs	r2, #0
 80182f0:	f000 f8c4 	bl	801847c <_lseek_r>
 80182f4:	89a3      	ldrh	r3, [r4, #12]
 80182f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80182fe:	81a3      	strh	r3, [r4, #12]
 8018300:	4632      	mov	r2, r6
 8018302:	463b      	mov	r3, r7
 8018304:	4628      	mov	r0, r5
 8018306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801830a:	f000 b8eb 	b.w	80184e4 <_write_r>

0801830e <__sseek>:
 801830e:	b510      	push	{r4, lr}
 8018310:	460c      	mov	r4, r1
 8018312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018316:	f000 f8b1 	bl	801847c <_lseek_r>
 801831a:	1c43      	adds	r3, r0, #1
 801831c:	89a3      	ldrh	r3, [r4, #12]
 801831e:	bf15      	itete	ne
 8018320:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018322:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018326:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801832a:	81a3      	strheq	r3, [r4, #12]
 801832c:	bf18      	it	ne
 801832e:	81a3      	strhne	r3, [r4, #12]
 8018330:	bd10      	pop	{r4, pc}

08018332 <__sclose>:
 8018332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018336:	f000 b891 	b.w	801845c <_close_r>

0801833a <memset>:
 801833a:	4402      	add	r2, r0
 801833c:	4603      	mov	r3, r0
 801833e:	4293      	cmp	r3, r2
 8018340:	d100      	bne.n	8018344 <memset+0xa>
 8018342:	4770      	bx	lr
 8018344:	f803 1b01 	strb.w	r1, [r3], #1
 8018348:	e7f9      	b.n	801833e <memset+0x4>

0801834a <strncmp>:
 801834a:	b510      	push	{r4, lr}
 801834c:	b16a      	cbz	r2, 801836a <strncmp+0x20>
 801834e:	3901      	subs	r1, #1
 8018350:	1884      	adds	r4, r0, r2
 8018352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018356:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801835a:	429a      	cmp	r2, r3
 801835c:	d103      	bne.n	8018366 <strncmp+0x1c>
 801835e:	42a0      	cmp	r0, r4
 8018360:	d001      	beq.n	8018366 <strncmp+0x1c>
 8018362:	2a00      	cmp	r2, #0
 8018364:	d1f5      	bne.n	8018352 <strncmp+0x8>
 8018366:	1ad0      	subs	r0, r2, r3
 8018368:	bd10      	pop	{r4, pc}
 801836a:	4610      	mov	r0, r2
 801836c:	e7fc      	b.n	8018368 <strncmp+0x1e>
	...

08018370 <strtok>:
 8018370:	4b16      	ldr	r3, [pc, #88]	@ (80183cc <strtok+0x5c>)
 8018372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018376:	681f      	ldr	r7, [r3, #0]
 8018378:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801837a:	4605      	mov	r5, r0
 801837c:	460e      	mov	r6, r1
 801837e:	b9ec      	cbnz	r4, 80183bc <strtok+0x4c>
 8018380:	2050      	movs	r0, #80	@ 0x50
 8018382:	f7fe f867 	bl	8016454 <malloc>
 8018386:	4602      	mov	r2, r0
 8018388:	6478      	str	r0, [r7, #68]	@ 0x44
 801838a:	b920      	cbnz	r0, 8018396 <strtok+0x26>
 801838c:	4b10      	ldr	r3, [pc, #64]	@ (80183d0 <strtok+0x60>)
 801838e:	4811      	ldr	r0, [pc, #68]	@ (80183d4 <strtok+0x64>)
 8018390:	215b      	movs	r1, #91	@ 0x5b
 8018392:	f000 f90b 	bl	80185ac <__assert_func>
 8018396:	e9c0 4400 	strd	r4, r4, [r0]
 801839a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801839e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80183a2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80183a6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80183aa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80183ae:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80183b2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80183b6:	6184      	str	r4, [r0, #24]
 80183b8:	7704      	strb	r4, [r0, #28]
 80183ba:	6244      	str	r4, [r0, #36]	@ 0x24
 80183bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80183be:	4631      	mov	r1, r6
 80183c0:	4628      	mov	r0, r5
 80183c2:	2301      	movs	r3, #1
 80183c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183c8:	f000 b806 	b.w	80183d8 <__strtok_r>
 80183cc:	200002a8 	.word	0x200002a8
 80183d0:	0801f137 	.word	0x0801f137
 80183d4:	0801f14e 	.word	0x0801f14e

080183d8 <__strtok_r>:
 80183d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183da:	4604      	mov	r4, r0
 80183dc:	b908      	cbnz	r0, 80183e2 <__strtok_r+0xa>
 80183de:	6814      	ldr	r4, [r2, #0]
 80183e0:	b144      	cbz	r4, 80183f4 <__strtok_r+0x1c>
 80183e2:	4620      	mov	r0, r4
 80183e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80183e8:	460f      	mov	r7, r1
 80183ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 80183ee:	b91e      	cbnz	r6, 80183f8 <__strtok_r+0x20>
 80183f0:	b965      	cbnz	r5, 801840c <__strtok_r+0x34>
 80183f2:	6015      	str	r5, [r2, #0]
 80183f4:	2000      	movs	r0, #0
 80183f6:	e005      	b.n	8018404 <__strtok_r+0x2c>
 80183f8:	42b5      	cmp	r5, r6
 80183fa:	d1f6      	bne.n	80183ea <__strtok_r+0x12>
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d1f0      	bne.n	80183e2 <__strtok_r+0xa>
 8018400:	6014      	str	r4, [r2, #0]
 8018402:	7003      	strb	r3, [r0, #0]
 8018404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018406:	461c      	mov	r4, r3
 8018408:	e00c      	b.n	8018424 <__strtok_r+0x4c>
 801840a:	b91d      	cbnz	r5, 8018414 <__strtok_r+0x3c>
 801840c:	4627      	mov	r7, r4
 801840e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018412:	460e      	mov	r6, r1
 8018414:	f816 5b01 	ldrb.w	r5, [r6], #1
 8018418:	42ab      	cmp	r3, r5
 801841a:	d1f6      	bne.n	801840a <__strtok_r+0x32>
 801841c:	2b00      	cmp	r3, #0
 801841e:	d0f2      	beq.n	8018406 <__strtok_r+0x2e>
 8018420:	2300      	movs	r3, #0
 8018422:	703b      	strb	r3, [r7, #0]
 8018424:	6014      	str	r4, [r2, #0]
 8018426:	e7ed      	b.n	8018404 <__strtok_r+0x2c>

08018428 <strstr>:
 8018428:	780a      	ldrb	r2, [r1, #0]
 801842a:	b570      	push	{r4, r5, r6, lr}
 801842c:	b96a      	cbnz	r2, 801844a <strstr+0x22>
 801842e:	bd70      	pop	{r4, r5, r6, pc}
 8018430:	429a      	cmp	r2, r3
 8018432:	d109      	bne.n	8018448 <strstr+0x20>
 8018434:	460c      	mov	r4, r1
 8018436:	4605      	mov	r5, r0
 8018438:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801843c:	2b00      	cmp	r3, #0
 801843e:	d0f6      	beq.n	801842e <strstr+0x6>
 8018440:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8018444:	429e      	cmp	r6, r3
 8018446:	d0f7      	beq.n	8018438 <strstr+0x10>
 8018448:	3001      	adds	r0, #1
 801844a:	7803      	ldrb	r3, [r0, #0]
 801844c:	2b00      	cmp	r3, #0
 801844e:	d1ef      	bne.n	8018430 <strstr+0x8>
 8018450:	4618      	mov	r0, r3
 8018452:	e7ec      	b.n	801842e <strstr+0x6>

08018454 <_localeconv_r>:
 8018454:	4800      	ldr	r0, [pc, #0]	@ (8018458 <_localeconv_r+0x4>)
 8018456:	4770      	bx	lr
 8018458:	2000022c 	.word	0x2000022c

0801845c <_close_r>:
 801845c:	b538      	push	{r3, r4, r5, lr}
 801845e:	4d06      	ldr	r5, [pc, #24]	@ (8018478 <_close_r+0x1c>)
 8018460:	2300      	movs	r3, #0
 8018462:	4604      	mov	r4, r0
 8018464:	4608      	mov	r0, r1
 8018466:	602b      	str	r3, [r5, #0]
 8018468:	f7ee f802 	bl	8006470 <_close>
 801846c:	1c43      	adds	r3, r0, #1
 801846e:	d102      	bne.n	8018476 <_close_r+0x1a>
 8018470:	682b      	ldr	r3, [r5, #0]
 8018472:	b103      	cbz	r3, 8018476 <_close_r+0x1a>
 8018474:	6023      	str	r3, [r4, #0]
 8018476:	bd38      	pop	{r3, r4, r5, pc}
 8018478:	20002dec 	.word	0x20002dec

0801847c <_lseek_r>:
 801847c:	b538      	push	{r3, r4, r5, lr}
 801847e:	4d07      	ldr	r5, [pc, #28]	@ (801849c <_lseek_r+0x20>)
 8018480:	4604      	mov	r4, r0
 8018482:	4608      	mov	r0, r1
 8018484:	4611      	mov	r1, r2
 8018486:	2200      	movs	r2, #0
 8018488:	602a      	str	r2, [r5, #0]
 801848a:	461a      	mov	r2, r3
 801848c:	f7ee f817 	bl	80064be <_lseek>
 8018490:	1c43      	adds	r3, r0, #1
 8018492:	d102      	bne.n	801849a <_lseek_r+0x1e>
 8018494:	682b      	ldr	r3, [r5, #0]
 8018496:	b103      	cbz	r3, 801849a <_lseek_r+0x1e>
 8018498:	6023      	str	r3, [r4, #0]
 801849a:	bd38      	pop	{r3, r4, r5, pc}
 801849c:	20002dec 	.word	0x20002dec

080184a0 <_read_r>:
 80184a0:	b538      	push	{r3, r4, r5, lr}
 80184a2:	4d07      	ldr	r5, [pc, #28]	@ (80184c0 <_read_r+0x20>)
 80184a4:	4604      	mov	r4, r0
 80184a6:	4608      	mov	r0, r1
 80184a8:	4611      	mov	r1, r2
 80184aa:	2200      	movs	r2, #0
 80184ac:	602a      	str	r2, [r5, #0]
 80184ae:	461a      	mov	r2, r3
 80184b0:	f7ed ffa5 	bl	80063fe <_read>
 80184b4:	1c43      	adds	r3, r0, #1
 80184b6:	d102      	bne.n	80184be <_read_r+0x1e>
 80184b8:	682b      	ldr	r3, [r5, #0]
 80184ba:	b103      	cbz	r3, 80184be <_read_r+0x1e>
 80184bc:	6023      	str	r3, [r4, #0]
 80184be:	bd38      	pop	{r3, r4, r5, pc}
 80184c0:	20002dec 	.word	0x20002dec

080184c4 <_sbrk_r>:
 80184c4:	b538      	push	{r3, r4, r5, lr}
 80184c6:	4d06      	ldr	r5, [pc, #24]	@ (80184e0 <_sbrk_r+0x1c>)
 80184c8:	2300      	movs	r3, #0
 80184ca:	4604      	mov	r4, r0
 80184cc:	4608      	mov	r0, r1
 80184ce:	602b      	str	r3, [r5, #0]
 80184d0:	f7ee f802 	bl	80064d8 <_sbrk>
 80184d4:	1c43      	adds	r3, r0, #1
 80184d6:	d102      	bne.n	80184de <_sbrk_r+0x1a>
 80184d8:	682b      	ldr	r3, [r5, #0]
 80184da:	b103      	cbz	r3, 80184de <_sbrk_r+0x1a>
 80184dc:	6023      	str	r3, [r4, #0]
 80184de:	bd38      	pop	{r3, r4, r5, pc}
 80184e0:	20002dec 	.word	0x20002dec

080184e4 <_write_r>:
 80184e4:	b538      	push	{r3, r4, r5, lr}
 80184e6:	4d07      	ldr	r5, [pc, #28]	@ (8018504 <_write_r+0x20>)
 80184e8:	4604      	mov	r4, r0
 80184ea:	4608      	mov	r0, r1
 80184ec:	4611      	mov	r1, r2
 80184ee:	2200      	movs	r2, #0
 80184f0:	602a      	str	r2, [r5, #0]
 80184f2:	461a      	mov	r2, r3
 80184f4:	f7ed ffa0 	bl	8006438 <_write>
 80184f8:	1c43      	adds	r3, r0, #1
 80184fa:	d102      	bne.n	8018502 <_write_r+0x1e>
 80184fc:	682b      	ldr	r3, [r5, #0]
 80184fe:	b103      	cbz	r3, 8018502 <_write_r+0x1e>
 8018500:	6023      	str	r3, [r4, #0]
 8018502:	bd38      	pop	{r3, r4, r5, pc}
 8018504:	20002dec 	.word	0x20002dec

08018508 <__errno>:
 8018508:	4b01      	ldr	r3, [pc, #4]	@ (8018510 <__errno+0x8>)
 801850a:	6818      	ldr	r0, [r3, #0]
 801850c:	4770      	bx	lr
 801850e:	bf00      	nop
 8018510:	200002a8 	.word	0x200002a8

08018514 <__libc_init_array>:
 8018514:	b570      	push	{r4, r5, r6, lr}
 8018516:	4d0d      	ldr	r5, [pc, #52]	@ (801854c <__libc_init_array+0x38>)
 8018518:	4c0d      	ldr	r4, [pc, #52]	@ (8018550 <__libc_init_array+0x3c>)
 801851a:	1b64      	subs	r4, r4, r5
 801851c:	10a4      	asrs	r4, r4, #2
 801851e:	2600      	movs	r6, #0
 8018520:	42a6      	cmp	r6, r4
 8018522:	d109      	bne.n	8018538 <__libc_init_array+0x24>
 8018524:	4d0b      	ldr	r5, [pc, #44]	@ (8018554 <__libc_init_array+0x40>)
 8018526:	4c0c      	ldr	r4, [pc, #48]	@ (8018558 <__libc_init_array+0x44>)
 8018528:	f004 fbac 	bl	801cc84 <_init>
 801852c:	1b64      	subs	r4, r4, r5
 801852e:	10a4      	asrs	r4, r4, #2
 8018530:	2600      	movs	r6, #0
 8018532:	42a6      	cmp	r6, r4
 8018534:	d105      	bne.n	8018542 <__libc_init_array+0x2e>
 8018536:	bd70      	pop	{r4, r5, r6, pc}
 8018538:	f855 3b04 	ldr.w	r3, [r5], #4
 801853c:	4798      	blx	r3
 801853e:	3601      	adds	r6, #1
 8018540:	e7ee      	b.n	8018520 <__libc_init_array+0xc>
 8018542:	f855 3b04 	ldr.w	r3, [r5], #4
 8018546:	4798      	blx	r3
 8018548:	3601      	adds	r6, #1
 801854a:	e7f2      	b.n	8018532 <__libc_init_array+0x1e>
 801854c:	0801f788 	.word	0x0801f788
 8018550:	0801f788 	.word	0x0801f788
 8018554:	0801f788 	.word	0x0801f788
 8018558:	0801f78c 	.word	0x0801f78c

0801855c <__retarget_lock_init_recursive>:
 801855c:	4770      	bx	lr

0801855e <__retarget_lock_acquire_recursive>:
 801855e:	4770      	bx	lr

08018560 <__retarget_lock_release_recursive>:
 8018560:	4770      	bx	lr

08018562 <strcpy>:
 8018562:	4603      	mov	r3, r0
 8018564:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018568:	f803 2b01 	strb.w	r2, [r3], #1
 801856c:	2a00      	cmp	r2, #0
 801856e:	d1f9      	bne.n	8018564 <strcpy+0x2>
 8018570:	4770      	bx	lr

08018572 <memcpy>:
 8018572:	440a      	add	r2, r1
 8018574:	4291      	cmp	r1, r2
 8018576:	f100 33ff 	add.w	r3, r0, #4294967295
 801857a:	d100      	bne.n	801857e <memcpy+0xc>
 801857c:	4770      	bx	lr
 801857e:	b510      	push	{r4, lr}
 8018580:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018584:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018588:	4291      	cmp	r1, r2
 801858a:	d1f9      	bne.n	8018580 <memcpy+0xe>
 801858c:	bd10      	pop	{r4, pc}
	...

08018590 <nan>:
 8018590:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018598 <nan+0x8>
 8018594:	4770      	bx	lr
 8018596:	bf00      	nop
 8018598:	00000000 	.word	0x00000000
 801859c:	7ff80000 	.word	0x7ff80000

080185a0 <nanf>:
 80185a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80185a8 <nanf+0x8>
 80185a4:	4770      	bx	lr
 80185a6:	bf00      	nop
 80185a8:	7fc00000 	.word	0x7fc00000

080185ac <__assert_func>:
 80185ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80185ae:	4614      	mov	r4, r2
 80185b0:	461a      	mov	r2, r3
 80185b2:	4b09      	ldr	r3, [pc, #36]	@ (80185d8 <__assert_func+0x2c>)
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	4605      	mov	r5, r0
 80185b8:	68d8      	ldr	r0, [r3, #12]
 80185ba:	b14c      	cbz	r4, 80185d0 <__assert_func+0x24>
 80185bc:	4b07      	ldr	r3, [pc, #28]	@ (80185dc <__assert_func+0x30>)
 80185be:	9100      	str	r1, [sp, #0]
 80185c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80185c4:	4906      	ldr	r1, [pc, #24]	@ (80185e0 <__assert_func+0x34>)
 80185c6:	462b      	mov	r3, r5
 80185c8:	f002 f8b6 	bl	801a738 <fiprintf>
 80185cc:	f002 f8e0 	bl	801a790 <abort>
 80185d0:	4b04      	ldr	r3, [pc, #16]	@ (80185e4 <__assert_func+0x38>)
 80185d2:	461c      	mov	r4, r3
 80185d4:	e7f3      	b.n	80185be <__assert_func+0x12>
 80185d6:	bf00      	nop
 80185d8:	200002a8 	.word	0x200002a8
 80185dc:	0801f1b0 	.word	0x0801f1b0
 80185e0:	0801f1bd 	.word	0x0801f1bd
 80185e4:	0801f1eb 	.word	0x0801f1eb

080185e8 <quorem>:
 80185e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185ec:	6903      	ldr	r3, [r0, #16]
 80185ee:	690c      	ldr	r4, [r1, #16]
 80185f0:	42a3      	cmp	r3, r4
 80185f2:	4607      	mov	r7, r0
 80185f4:	db7e      	blt.n	80186f4 <quorem+0x10c>
 80185f6:	3c01      	subs	r4, #1
 80185f8:	f101 0814 	add.w	r8, r1, #20
 80185fc:	00a3      	lsls	r3, r4, #2
 80185fe:	f100 0514 	add.w	r5, r0, #20
 8018602:	9300      	str	r3, [sp, #0]
 8018604:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018608:	9301      	str	r3, [sp, #4]
 801860a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801860e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018612:	3301      	adds	r3, #1
 8018614:	429a      	cmp	r2, r3
 8018616:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801861a:	fbb2 f6f3 	udiv	r6, r2, r3
 801861e:	d32e      	bcc.n	801867e <quorem+0x96>
 8018620:	f04f 0a00 	mov.w	sl, #0
 8018624:	46c4      	mov	ip, r8
 8018626:	46ae      	mov	lr, r5
 8018628:	46d3      	mov	fp, sl
 801862a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801862e:	b298      	uxth	r0, r3
 8018630:	fb06 a000 	mla	r0, r6, r0, sl
 8018634:	0c02      	lsrs	r2, r0, #16
 8018636:	0c1b      	lsrs	r3, r3, #16
 8018638:	fb06 2303 	mla	r3, r6, r3, r2
 801863c:	f8de 2000 	ldr.w	r2, [lr]
 8018640:	b280      	uxth	r0, r0
 8018642:	b292      	uxth	r2, r2
 8018644:	1a12      	subs	r2, r2, r0
 8018646:	445a      	add	r2, fp
 8018648:	f8de 0000 	ldr.w	r0, [lr]
 801864c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018650:	b29b      	uxth	r3, r3
 8018652:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8018656:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801865a:	b292      	uxth	r2, r2
 801865c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8018660:	45e1      	cmp	r9, ip
 8018662:	f84e 2b04 	str.w	r2, [lr], #4
 8018666:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801866a:	d2de      	bcs.n	801862a <quorem+0x42>
 801866c:	9b00      	ldr	r3, [sp, #0]
 801866e:	58eb      	ldr	r3, [r5, r3]
 8018670:	b92b      	cbnz	r3, 801867e <quorem+0x96>
 8018672:	9b01      	ldr	r3, [sp, #4]
 8018674:	3b04      	subs	r3, #4
 8018676:	429d      	cmp	r5, r3
 8018678:	461a      	mov	r2, r3
 801867a:	d32f      	bcc.n	80186dc <quorem+0xf4>
 801867c:	613c      	str	r4, [r7, #16]
 801867e:	4638      	mov	r0, r7
 8018680:	f001 fc5c 	bl	8019f3c <__mcmp>
 8018684:	2800      	cmp	r0, #0
 8018686:	db25      	blt.n	80186d4 <quorem+0xec>
 8018688:	4629      	mov	r1, r5
 801868a:	2000      	movs	r0, #0
 801868c:	f858 2b04 	ldr.w	r2, [r8], #4
 8018690:	f8d1 c000 	ldr.w	ip, [r1]
 8018694:	fa1f fe82 	uxth.w	lr, r2
 8018698:	fa1f f38c 	uxth.w	r3, ip
 801869c:	eba3 030e 	sub.w	r3, r3, lr
 80186a0:	4403      	add	r3, r0
 80186a2:	0c12      	lsrs	r2, r2, #16
 80186a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80186a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80186ac:	b29b      	uxth	r3, r3
 80186ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80186b2:	45c1      	cmp	r9, r8
 80186b4:	f841 3b04 	str.w	r3, [r1], #4
 80186b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80186bc:	d2e6      	bcs.n	801868c <quorem+0xa4>
 80186be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80186c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80186c6:	b922      	cbnz	r2, 80186d2 <quorem+0xea>
 80186c8:	3b04      	subs	r3, #4
 80186ca:	429d      	cmp	r5, r3
 80186cc:	461a      	mov	r2, r3
 80186ce:	d30b      	bcc.n	80186e8 <quorem+0x100>
 80186d0:	613c      	str	r4, [r7, #16]
 80186d2:	3601      	adds	r6, #1
 80186d4:	4630      	mov	r0, r6
 80186d6:	b003      	add	sp, #12
 80186d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186dc:	6812      	ldr	r2, [r2, #0]
 80186de:	3b04      	subs	r3, #4
 80186e0:	2a00      	cmp	r2, #0
 80186e2:	d1cb      	bne.n	801867c <quorem+0x94>
 80186e4:	3c01      	subs	r4, #1
 80186e6:	e7c6      	b.n	8018676 <quorem+0x8e>
 80186e8:	6812      	ldr	r2, [r2, #0]
 80186ea:	3b04      	subs	r3, #4
 80186ec:	2a00      	cmp	r2, #0
 80186ee:	d1ef      	bne.n	80186d0 <quorem+0xe8>
 80186f0:	3c01      	subs	r4, #1
 80186f2:	e7ea      	b.n	80186ca <quorem+0xe2>
 80186f4:	2000      	movs	r0, #0
 80186f6:	e7ee      	b.n	80186d6 <quorem+0xee>

080186f8 <_dtoa_r>:
 80186f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186fc:	69c7      	ldr	r7, [r0, #28]
 80186fe:	b097      	sub	sp, #92	@ 0x5c
 8018700:	ed8d 0b04 	vstr	d0, [sp, #16]
 8018704:	ec55 4b10 	vmov	r4, r5, d0
 8018708:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801870a:	9107      	str	r1, [sp, #28]
 801870c:	4681      	mov	r9, r0
 801870e:	920c      	str	r2, [sp, #48]	@ 0x30
 8018710:	9311      	str	r3, [sp, #68]	@ 0x44
 8018712:	b97f      	cbnz	r7, 8018734 <_dtoa_r+0x3c>
 8018714:	2010      	movs	r0, #16
 8018716:	f7fd fe9d 	bl	8016454 <malloc>
 801871a:	4602      	mov	r2, r0
 801871c:	f8c9 001c 	str.w	r0, [r9, #28]
 8018720:	b920      	cbnz	r0, 801872c <_dtoa_r+0x34>
 8018722:	4ba9      	ldr	r3, [pc, #676]	@ (80189c8 <_dtoa_r+0x2d0>)
 8018724:	21ef      	movs	r1, #239	@ 0xef
 8018726:	48a9      	ldr	r0, [pc, #676]	@ (80189cc <_dtoa_r+0x2d4>)
 8018728:	f7ff ff40 	bl	80185ac <__assert_func>
 801872c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8018730:	6007      	str	r7, [r0, #0]
 8018732:	60c7      	str	r7, [r0, #12]
 8018734:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018738:	6819      	ldr	r1, [r3, #0]
 801873a:	b159      	cbz	r1, 8018754 <_dtoa_r+0x5c>
 801873c:	685a      	ldr	r2, [r3, #4]
 801873e:	604a      	str	r2, [r1, #4]
 8018740:	2301      	movs	r3, #1
 8018742:	4093      	lsls	r3, r2
 8018744:	608b      	str	r3, [r1, #8]
 8018746:	4648      	mov	r0, r9
 8018748:	f001 f97c 	bl	8019a44 <_Bfree>
 801874c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018750:	2200      	movs	r2, #0
 8018752:	601a      	str	r2, [r3, #0]
 8018754:	1e2b      	subs	r3, r5, #0
 8018756:	bfb9      	ittee	lt
 8018758:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801875c:	9305      	strlt	r3, [sp, #20]
 801875e:	2300      	movge	r3, #0
 8018760:	6033      	strge	r3, [r6, #0]
 8018762:	9f05      	ldr	r7, [sp, #20]
 8018764:	4b9a      	ldr	r3, [pc, #616]	@ (80189d0 <_dtoa_r+0x2d8>)
 8018766:	bfbc      	itt	lt
 8018768:	2201      	movlt	r2, #1
 801876a:	6032      	strlt	r2, [r6, #0]
 801876c:	43bb      	bics	r3, r7
 801876e:	d112      	bne.n	8018796 <_dtoa_r+0x9e>
 8018770:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018772:	f242 730f 	movw	r3, #9999	@ 0x270f
 8018776:	6013      	str	r3, [r2, #0]
 8018778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801877c:	4323      	orrs	r3, r4
 801877e:	f000 855a 	beq.w	8019236 <_dtoa_r+0xb3e>
 8018782:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018784:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80189e4 <_dtoa_r+0x2ec>
 8018788:	2b00      	cmp	r3, #0
 801878a:	f000 855c 	beq.w	8019246 <_dtoa_r+0xb4e>
 801878e:	f10a 0303 	add.w	r3, sl, #3
 8018792:	f000 bd56 	b.w	8019242 <_dtoa_r+0xb4a>
 8018796:	ed9d 7b04 	vldr	d7, [sp, #16]
 801879a:	2200      	movs	r2, #0
 801879c:	ec51 0b17 	vmov	r0, r1, d7
 80187a0:	2300      	movs	r3, #0
 80187a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80187a6:	f7e8 f967 	bl	8000a78 <__aeabi_dcmpeq>
 80187aa:	4680      	mov	r8, r0
 80187ac:	b158      	cbz	r0, 80187c6 <_dtoa_r+0xce>
 80187ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80187b0:	2301      	movs	r3, #1
 80187b2:	6013      	str	r3, [r2, #0]
 80187b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80187b6:	b113      	cbz	r3, 80187be <_dtoa_r+0xc6>
 80187b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80187ba:	4b86      	ldr	r3, [pc, #536]	@ (80189d4 <_dtoa_r+0x2dc>)
 80187bc:	6013      	str	r3, [r2, #0]
 80187be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80189e8 <_dtoa_r+0x2f0>
 80187c2:	f000 bd40 	b.w	8019246 <_dtoa_r+0xb4e>
 80187c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80187ca:	aa14      	add	r2, sp, #80	@ 0x50
 80187cc:	a915      	add	r1, sp, #84	@ 0x54
 80187ce:	4648      	mov	r0, r9
 80187d0:	f001 fcd4 	bl	801a17c <__d2b>
 80187d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80187d8:	9002      	str	r0, [sp, #8]
 80187da:	2e00      	cmp	r6, #0
 80187dc:	d078      	beq.n	80188d0 <_dtoa_r+0x1d8>
 80187de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80187e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80187e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80187e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80187ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80187f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80187f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80187f8:	4619      	mov	r1, r3
 80187fa:	2200      	movs	r2, #0
 80187fc:	4b76      	ldr	r3, [pc, #472]	@ (80189d8 <_dtoa_r+0x2e0>)
 80187fe:	f7e7 fd1b 	bl	8000238 <__aeabi_dsub>
 8018802:	a36b      	add	r3, pc, #428	@ (adr r3, 80189b0 <_dtoa_r+0x2b8>)
 8018804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018808:	f7e7 fece 	bl	80005a8 <__aeabi_dmul>
 801880c:	a36a      	add	r3, pc, #424	@ (adr r3, 80189b8 <_dtoa_r+0x2c0>)
 801880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018812:	f7e7 fd13 	bl	800023c <__adddf3>
 8018816:	4604      	mov	r4, r0
 8018818:	4630      	mov	r0, r6
 801881a:	460d      	mov	r5, r1
 801881c:	f7e7 fe5a 	bl	80004d4 <__aeabi_i2d>
 8018820:	a367      	add	r3, pc, #412	@ (adr r3, 80189c0 <_dtoa_r+0x2c8>)
 8018822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018826:	f7e7 febf 	bl	80005a8 <__aeabi_dmul>
 801882a:	4602      	mov	r2, r0
 801882c:	460b      	mov	r3, r1
 801882e:	4620      	mov	r0, r4
 8018830:	4629      	mov	r1, r5
 8018832:	f7e7 fd03 	bl	800023c <__adddf3>
 8018836:	4604      	mov	r4, r0
 8018838:	460d      	mov	r5, r1
 801883a:	f7e8 f965 	bl	8000b08 <__aeabi_d2iz>
 801883e:	2200      	movs	r2, #0
 8018840:	4607      	mov	r7, r0
 8018842:	2300      	movs	r3, #0
 8018844:	4620      	mov	r0, r4
 8018846:	4629      	mov	r1, r5
 8018848:	f7e8 f920 	bl	8000a8c <__aeabi_dcmplt>
 801884c:	b140      	cbz	r0, 8018860 <_dtoa_r+0x168>
 801884e:	4638      	mov	r0, r7
 8018850:	f7e7 fe40 	bl	80004d4 <__aeabi_i2d>
 8018854:	4622      	mov	r2, r4
 8018856:	462b      	mov	r3, r5
 8018858:	f7e8 f90e 	bl	8000a78 <__aeabi_dcmpeq>
 801885c:	b900      	cbnz	r0, 8018860 <_dtoa_r+0x168>
 801885e:	3f01      	subs	r7, #1
 8018860:	2f16      	cmp	r7, #22
 8018862:	d852      	bhi.n	801890a <_dtoa_r+0x212>
 8018864:	4b5d      	ldr	r3, [pc, #372]	@ (80189dc <_dtoa_r+0x2e4>)
 8018866:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801886e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8018872:	f7e8 f90b 	bl	8000a8c <__aeabi_dcmplt>
 8018876:	2800      	cmp	r0, #0
 8018878:	d049      	beq.n	801890e <_dtoa_r+0x216>
 801887a:	3f01      	subs	r7, #1
 801887c:	2300      	movs	r3, #0
 801887e:	9310      	str	r3, [sp, #64]	@ 0x40
 8018880:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018882:	1b9b      	subs	r3, r3, r6
 8018884:	1e5a      	subs	r2, r3, #1
 8018886:	bf45      	ittet	mi
 8018888:	f1c3 0301 	rsbmi	r3, r3, #1
 801888c:	9300      	strmi	r3, [sp, #0]
 801888e:	2300      	movpl	r3, #0
 8018890:	2300      	movmi	r3, #0
 8018892:	9206      	str	r2, [sp, #24]
 8018894:	bf54      	ite	pl
 8018896:	9300      	strpl	r3, [sp, #0]
 8018898:	9306      	strmi	r3, [sp, #24]
 801889a:	2f00      	cmp	r7, #0
 801889c:	db39      	blt.n	8018912 <_dtoa_r+0x21a>
 801889e:	9b06      	ldr	r3, [sp, #24]
 80188a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80188a2:	443b      	add	r3, r7
 80188a4:	9306      	str	r3, [sp, #24]
 80188a6:	2300      	movs	r3, #0
 80188a8:	9308      	str	r3, [sp, #32]
 80188aa:	9b07      	ldr	r3, [sp, #28]
 80188ac:	2b09      	cmp	r3, #9
 80188ae:	d863      	bhi.n	8018978 <_dtoa_r+0x280>
 80188b0:	2b05      	cmp	r3, #5
 80188b2:	bfc4      	itt	gt
 80188b4:	3b04      	subgt	r3, #4
 80188b6:	9307      	strgt	r3, [sp, #28]
 80188b8:	9b07      	ldr	r3, [sp, #28]
 80188ba:	f1a3 0302 	sub.w	r3, r3, #2
 80188be:	bfcc      	ite	gt
 80188c0:	2400      	movgt	r4, #0
 80188c2:	2401      	movle	r4, #1
 80188c4:	2b03      	cmp	r3, #3
 80188c6:	d863      	bhi.n	8018990 <_dtoa_r+0x298>
 80188c8:	e8df f003 	tbb	[pc, r3]
 80188cc:	2b375452 	.word	0x2b375452
 80188d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80188d4:	441e      	add	r6, r3
 80188d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80188da:	2b20      	cmp	r3, #32
 80188dc:	bfc1      	itttt	gt
 80188de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80188e2:	409f      	lslgt	r7, r3
 80188e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80188e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80188ec:	bfd6      	itet	le
 80188ee:	f1c3 0320 	rsble	r3, r3, #32
 80188f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80188f6:	fa04 f003 	lslle.w	r0, r4, r3
 80188fa:	f7e7 fddb 	bl	80004b4 <__aeabi_ui2d>
 80188fe:	2201      	movs	r2, #1
 8018900:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8018904:	3e01      	subs	r6, #1
 8018906:	9212      	str	r2, [sp, #72]	@ 0x48
 8018908:	e776      	b.n	80187f8 <_dtoa_r+0x100>
 801890a:	2301      	movs	r3, #1
 801890c:	e7b7      	b.n	801887e <_dtoa_r+0x186>
 801890e:	9010      	str	r0, [sp, #64]	@ 0x40
 8018910:	e7b6      	b.n	8018880 <_dtoa_r+0x188>
 8018912:	9b00      	ldr	r3, [sp, #0]
 8018914:	1bdb      	subs	r3, r3, r7
 8018916:	9300      	str	r3, [sp, #0]
 8018918:	427b      	negs	r3, r7
 801891a:	9308      	str	r3, [sp, #32]
 801891c:	2300      	movs	r3, #0
 801891e:	930d      	str	r3, [sp, #52]	@ 0x34
 8018920:	e7c3      	b.n	80188aa <_dtoa_r+0x1b2>
 8018922:	2301      	movs	r3, #1
 8018924:	9309      	str	r3, [sp, #36]	@ 0x24
 8018926:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018928:	eb07 0b03 	add.w	fp, r7, r3
 801892c:	f10b 0301 	add.w	r3, fp, #1
 8018930:	2b01      	cmp	r3, #1
 8018932:	9303      	str	r3, [sp, #12]
 8018934:	bfb8      	it	lt
 8018936:	2301      	movlt	r3, #1
 8018938:	e006      	b.n	8018948 <_dtoa_r+0x250>
 801893a:	2301      	movs	r3, #1
 801893c:	9309      	str	r3, [sp, #36]	@ 0x24
 801893e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018940:	2b00      	cmp	r3, #0
 8018942:	dd28      	ble.n	8018996 <_dtoa_r+0x29e>
 8018944:	469b      	mov	fp, r3
 8018946:	9303      	str	r3, [sp, #12]
 8018948:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801894c:	2100      	movs	r1, #0
 801894e:	2204      	movs	r2, #4
 8018950:	f102 0514 	add.w	r5, r2, #20
 8018954:	429d      	cmp	r5, r3
 8018956:	d926      	bls.n	80189a6 <_dtoa_r+0x2ae>
 8018958:	6041      	str	r1, [r0, #4]
 801895a:	4648      	mov	r0, r9
 801895c:	f001 f832 	bl	80199c4 <_Balloc>
 8018960:	4682      	mov	sl, r0
 8018962:	2800      	cmp	r0, #0
 8018964:	d142      	bne.n	80189ec <_dtoa_r+0x2f4>
 8018966:	4b1e      	ldr	r3, [pc, #120]	@ (80189e0 <_dtoa_r+0x2e8>)
 8018968:	4602      	mov	r2, r0
 801896a:	f240 11af 	movw	r1, #431	@ 0x1af
 801896e:	e6da      	b.n	8018726 <_dtoa_r+0x2e>
 8018970:	2300      	movs	r3, #0
 8018972:	e7e3      	b.n	801893c <_dtoa_r+0x244>
 8018974:	2300      	movs	r3, #0
 8018976:	e7d5      	b.n	8018924 <_dtoa_r+0x22c>
 8018978:	2401      	movs	r4, #1
 801897a:	2300      	movs	r3, #0
 801897c:	9307      	str	r3, [sp, #28]
 801897e:	9409      	str	r4, [sp, #36]	@ 0x24
 8018980:	f04f 3bff 	mov.w	fp, #4294967295
 8018984:	2200      	movs	r2, #0
 8018986:	f8cd b00c 	str.w	fp, [sp, #12]
 801898a:	2312      	movs	r3, #18
 801898c:	920c      	str	r2, [sp, #48]	@ 0x30
 801898e:	e7db      	b.n	8018948 <_dtoa_r+0x250>
 8018990:	2301      	movs	r3, #1
 8018992:	9309      	str	r3, [sp, #36]	@ 0x24
 8018994:	e7f4      	b.n	8018980 <_dtoa_r+0x288>
 8018996:	f04f 0b01 	mov.w	fp, #1
 801899a:	f8cd b00c 	str.w	fp, [sp, #12]
 801899e:	465b      	mov	r3, fp
 80189a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80189a4:	e7d0      	b.n	8018948 <_dtoa_r+0x250>
 80189a6:	3101      	adds	r1, #1
 80189a8:	0052      	lsls	r2, r2, #1
 80189aa:	e7d1      	b.n	8018950 <_dtoa_r+0x258>
 80189ac:	f3af 8000 	nop.w
 80189b0:	636f4361 	.word	0x636f4361
 80189b4:	3fd287a7 	.word	0x3fd287a7
 80189b8:	8b60c8b3 	.word	0x8b60c8b3
 80189bc:	3fc68a28 	.word	0x3fc68a28
 80189c0:	509f79fb 	.word	0x509f79fb
 80189c4:	3fd34413 	.word	0x3fd34413
 80189c8:	0801f137 	.word	0x0801f137
 80189cc:	0801f1f9 	.word	0x0801f1f9
 80189d0:	7ff00000 	.word	0x7ff00000
 80189d4:	0801f10f 	.word	0x0801f10f
 80189d8:	3ff80000 	.word	0x3ff80000
 80189dc:	0801f4b8 	.word	0x0801f4b8
 80189e0:	0801f251 	.word	0x0801f251
 80189e4:	0801f1f5 	.word	0x0801f1f5
 80189e8:	0801f10e 	.word	0x0801f10e
 80189ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80189f0:	6018      	str	r0, [r3, #0]
 80189f2:	9b03      	ldr	r3, [sp, #12]
 80189f4:	2b0e      	cmp	r3, #14
 80189f6:	f200 80a1 	bhi.w	8018b3c <_dtoa_r+0x444>
 80189fa:	2c00      	cmp	r4, #0
 80189fc:	f000 809e 	beq.w	8018b3c <_dtoa_r+0x444>
 8018a00:	2f00      	cmp	r7, #0
 8018a02:	dd33      	ble.n	8018a6c <_dtoa_r+0x374>
 8018a04:	4b9c      	ldr	r3, [pc, #624]	@ (8018c78 <_dtoa_r+0x580>)
 8018a06:	f007 020f 	and.w	r2, r7, #15
 8018a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018a0e:	ed93 7b00 	vldr	d7, [r3]
 8018a12:	05f8      	lsls	r0, r7, #23
 8018a14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8018a18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8018a1c:	d516      	bpl.n	8018a4c <_dtoa_r+0x354>
 8018a1e:	4b97      	ldr	r3, [pc, #604]	@ (8018c7c <_dtoa_r+0x584>)
 8018a20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8018a24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018a28:	f7e7 fee8 	bl	80007fc <__aeabi_ddiv>
 8018a2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018a30:	f004 040f 	and.w	r4, r4, #15
 8018a34:	2603      	movs	r6, #3
 8018a36:	4d91      	ldr	r5, [pc, #580]	@ (8018c7c <_dtoa_r+0x584>)
 8018a38:	b954      	cbnz	r4, 8018a50 <_dtoa_r+0x358>
 8018a3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018a42:	f7e7 fedb 	bl	80007fc <__aeabi_ddiv>
 8018a46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018a4a:	e028      	b.n	8018a9e <_dtoa_r+0x3a6>
 8018a4c:	2602      	movs	r6, #2
 8018a4e:	e7f2      	b.n	8018a36 <_dtoa_r+0x33e>
 8018a50:	07e1      	lsls	r1, r4, #31
 8018a52:	d508      	bpl.n	8018a66 <_dtoa_r+0x36e>
 8018a54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8018a58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018a5c:	f7e7 fda4 	bl	80005a8 <__aeabi_dmul>
 8018a60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018a64:	3601      	adds	r6, #1
 8018a66:	1064      	asrs	r4, r4, #1
 8018a68:	3508      	adds	r5, #8
 8018a6a:	e7e5      	b.n	8018a38 <_dtoa_r+0x340>
 8018a6c:	f000 80af 	beq.w	8018bce <_dtoa_r+0x4d6>
 8018a70:	427c      	negs	r4, r7
 8018a72:	4b81      	ldr	r3, [pc, #516]	@ (8018c78 <_dtoa_r+0x580>)
 8018a74:	4d81      	ldr	r5, [pc, #516]	@ (8018c7c <_dtoa_r+0x584>)
 8018a76:	f004 020f 	and.w	r2, r4, #15
 8018a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8018a86:	f7e7 fd8f 	bl	80005a8 <__aeabi_dmul>
 8018a8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018a8e:	1124      	asrs	r4, r4, #4
 8018a90:	2300      	movs	r3, #0
 8018a92:	2602      	movs	r6, #2
 8018a94:	2c00      	cmp	r4, #0
 8018a96:	f040 808f 	bne.w	8018bb8 <_dtoa_r+0x4c0>
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d1d3      	bne.n	8018a46 <_dtoa_r+0x34e>
 8018a9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018aa0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	f000 8094 	beq.w	8018bd2 <_dtoa_r+0x4da>
 8018aaa:	4b75      	ldr	r3, [pc, #468]	@ (8018c80 <_dtoa_r+0x588>)
 8018aac:	2200      	movs	r2, #0
 8018aae:	4620      	mov	r0, r4
 8018ab0:	4629      	mov	r1, r5
 8018ab2:	f7e7 ffeb 	bl	8000a8c <__aeabi_dcmplt>
 8018ab6:	2800      	cmp	r0, #0
 8018ab8:	f000 808b 	beq.w	8018bd2 <_dtoa_r+0x4da>
 8018abc:	9b03      	ldr	r3, [sp, #12]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	f000 8087 	beq.w	8018bd2 <_dtoa_r+0x4da>
 8018ac4:	f1bb 0f00 	cmp.w	fp, #0
 8018ac8:	dd34      	ble.n	8018b34 <_dtoa_r+0x43c>
 8018aca:	4620      	mov	r0, r4
 8018acc:	4b6d      	ldr	r3, [pc, #436]	@ (8018c84 <_dtoa_r+0x58c>)
 8018ace:	2200      	movs	r2, #0
 8018ad0:	4629      	mov	r1, r5
 8018ad2:	f7e7 fd69 	bl	80005a8 <__aeabi_dmul>
 8018ad6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018ada:	f107 38ff 	add.w	r8, r7, #4294967295
 8018ade:	3601      	adds	r6, #1
 8018ae0:	465c      	mov	r4, fp
 8018ae2:	4630      	mov	r0, r6
 8018ae4:	f7e7 fcf6 	bl	80004d4 <__aeabi_i2d>
 8018ae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018aec:	f7e7 fd5c 	bl	80005a8 <__aeabi_dmul>
 8018af0:	4b65      	ldr	r3, [pc, #404]	@ (8018c88 <_dtoa_r+0x590>)
 8018af2:	2200      	movs	r2, #0
 8018af4:	f7e7 fba2 	bl	800023c <__adddf3>
 8018af8:	4605      	mov	r5, r0
 8018afa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8018afe:	2c00      	cmp	r4, #0
 8018b00:	d16a      	bne.n	8018bd8 <_dtoa_r+0x4e0>
 8018b02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018b06:	4b61      	ldr	r3, [pc, #388]	@ (8018c8c <_dtoa_r+0x594>)
 8018b08:	2200      	movs	r2, #0
 8018b0a:	f7e7 fb95 	bl	8000238 <__aeabi_dsub>
 8018b0e:	4602      	mov	r2, r0
 8018b10:	460b      	mov	r3, r1
 8018b12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018b16:	462a      	mov	r2, r5
 8018b18:	4633      	mov	r3, r6
 8018b1a:	f7e7 ffd5 	bl	8000ac8 <__aeabi_dcmpgt>
 8018b1e:	2800      	cmp	r0, #0
 8018b20:	f040 8298 	bne.w	8019054 <_dtoa_r+0x95c>
 8018b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018b28:	462a      	mov	r2, r5
 8018b2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8018b2e:	f7e7 ffad 	bl	8000a8c <__aeabi_dcmplt>
 8018b32:	bb38      	cbnz	r0, 8018b84 <_dtoa_r+0x48c>
 8018b34:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8018b38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8018b3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	f2c0 8157 	blt.w	8018df2 <_dtoa_r+0x6fa>
 8018b44:	2f0e      	cmp	r7, #14
 8018b46:	f300 8154 	bgt.w	8018df2 <_dtoa_r+0x6fa>
 8018b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8018c78 <_dtoa_r+0x580>)
 8018b4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8018b50:	ed93 7b00 	vldr	d7, [r3]
 8018b54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	ed8d 7b00 	vstr	d7, [sp]
 8018b5c:	f280 80e5 	bge.w	8018d2a <_dtoa_r+0x632>
 8018b60:	9b03      	ldr	r3, [sp, #12]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	f300 80e1 	bgt.w	8018d2a <_dtoa_r+0x632>
 8018b68:	d10c      	bne.n	8018b84 <_dtoa_r+0x48c>
 8018b6a:	4b48      	ldr	r3, [pc, #288]	@ (8018c8c <_dtoa_r+0x594>)
 8018b6c:	2200      	movs	r2, #0
 8018b6e:	ec51 0b17 	vmov	r0, r1, d7
 8018b72:	f7e7 fd19 	bl	80005a8 <__aeabi_dmul>
 8018b76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018b7a:	f7e7 ff9b 	bl	8000ab4 <__aeabi_dcmpge>
 8018b7e:	2800      	cmp	r0, #0
 8018b80:	f000 8266 	beq.w	8019050 <_dtoa_r+0x958>
 8018b84:	2400      	movs	r4, #0
 8018b86:	4625      	mov	r5, r4
 8018b88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b8a:	4656      	mov	r6, sl
 8018b8c:	ea6f 0803 	mvn.w	r8, r3
 8018b90:	2700      	movs	r7, #0
 8018b92:	4621      	mov	r1, r4
 8018b94:	4648      	mov	r0, r9
 8018b96:	f000 ff55 	bl	8019a44 <_Bfree>
 8018b9a:	2d00      	cmp	r5, #0
 8018b9c:	f000 80bd 	beq.w	8018d1a <_dtoa_r+0x622>
 8018ba0:	b12f      	cbz	r7, 8018bae <_dtoa_r+0x4b6>
 8018ba2:	42af      	cmp	r7, r5
 8018ba4:	d003      	beq.n	8018bae <_dtoa_r+0x4b6>
 8018ba6:	4639      	mov	r1, r7
 8018ba8:	4648      	mov	r0, r9
 8018baa:	f000 ff4b 	bl	8019a44 <_Bfree>
 8018bae:	4629      	mov	r1, r5
 8018bb0:	4648      	mov	r0, r9
 8018bb2:	f000 ff47 	bl	8019a44 <_Bfree>
 8018bb6:	e0b0      	b.n	8018d1a <_dtoa_r+0x622>
 8018bb8:	07e2      	lsls	r2, r4, #31
 8018bba:	d505      	bpl.n	8018bc8 <_dtoa_r+0x4d0>
 8018bbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018bc0:	f7e7 fcf2 	bl	80005a8 <__aeabi_dmul>
 8018bc4:	3601      	adds	r6, #1
 8018bc6:	2301      	movs	r3, #1
 8018bc8:	1064      	asrs	r4, r4, #1
 8018bca:	3508      	adds	r5, #8
 8018bcc:	e762      	b.n	8018a94 <_dtoa_r+0x39c>
 8018bce:	2602      	movs	r6, #2
 8018bd0:	e765      	b.n	8018a9e <_dtoa_r+0x3a6>
 8018bd2:	9c03      	ldr	r4, [sp, #12]
 8018bd4:	46b8      	mov	r8, r7
 8018bd6:	e784      	b.n	8018ae2 <_dtoa_r+0x3ea>
 8018bd8:	4b27      	ldr	r3, [pc, #156]	@ (8018c78 <_dtoa_r+0x580>)
 8018bda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018bdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018be0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018be4:	4454      	add	r4, sl
 8018be6:	2900      	cmp	r1, #0
 8018be8:	d054      	beq.n	8018c94 <_dtoa_r+0x59c>
 8018bea:	4929      	ldr	r1, [pc, #164]	@ (8018c90 <_dtoa_r+0x598>)
 8018bec:	2000      	movs	r0, #0
 8018bee:	f7e7 fe05 	bl	80007fc <__aeabi_ddiv>
 8018bf2:	4633      	mov	r3, r6
 8018bf4:	462a      	mov	r2, r5
 8018bf6:	f7e7 fb1f 	bl	8000238 <__aeabi_dsub>
 8018bfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018bfe:	4656      	mov	r6, sl
 8018c00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018c04:	f7e7 ff80 	bl	8000b08 <__aeabi_d2iz>
 8018c08:	4605      	mov	r5, r0
 8018c0a:	f7e7 fc63 	bl	80004d4 <__aeabi_i2d>
 8018c0e:	4602      	mov	r2, r0
 8018c10:	460b      	mov	r3, r1
 8018c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018c16:	f7e7 fb0f 	bl	8000238 <__aeabi_dsub>
 8018c1a:	3530      	adds	r5, #48	@ 0x30
 8018c1c:	4602      	mov	r2, r0
 8018c1e:	460b      	mov	r3, r1
 8018c20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018c24:	f806 5b01 	strb.w	r5, [r6], #1
 8018c28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018c2c:	f7e7 ff2e 	bl	8000a8c <__aeabi_dcmplt>
 8018c30:	2800      	cmp	r0, #0
 8018c32:	d172      	bne.n	8018d1a <_dtoa_r+0x622>
 8018c34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018c38:	4911      	ldr	r1, [pc, #68]	@ (8018c80 <_dtoa_r+0x588>)
 8018c3a:	2000      	movs	r0, #0
 8018c3c:	f7e7 fafc 	bl	8000238 <__aeabi_dsub>
 8018c40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018c44:	f7e7 ff22 	bl	8000a8c <__aeabi_dcmplt>
 8018c48:	2800      	cmp	r0, #0
 8018c4a:	f040 80b4 	bne.w	8018db6 <_dtoa_r+0x6be>
 8018c4e:	42a6      	cmp	r6, r4
 8018c50:	f43f af70 	beq.w	8018b34 <_dtoa_r+0x43c>
 8018c54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8018c58:	4b0a      	ldr	r3, [pc, #40]	@ (8018c84 <_dtoa_r+0x58c>)
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	f7e7 fca4 	bl	80005a8 <__aeabi_dmul>
 8018c60:	4b08      	ldr	r3, [pc, #32]	@ (8018c84 <_dtoa_r+0x58c>)
 8018c62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018c66:	2200      	movs	r2, #0
 8018c68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018c6c:	f7e7 fc9c 	bl	80005a8 <__aeabi_dmul>
 8018c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018c74:	e7c4      	b.n	8018c00 <_dtoa_r+0x508>
 8018c76:	bf00      	nop
 8018c78:	0801f4b8 	.word	0x0801f4b8
 8018c7c:	0801f490 	.word	0x0801f490
 8018c80:	3ff00000 	.word	0x3ff00000
 8018c84:	40240000 	.word	0x40240000
 8018c88:	401c0000 	.word	0x401c0000
 8018c8c:	40140000 	.word	0x40140000
 8018c90:	3fe00000 	.word	0x3fe00000
 8018c94:	4631      	mov	r1, r6
 8018c96:	4628      	mov	r0, r5
 8018c98:	f7e7 fc86 	bl	80005a8 <__aeabi_dmul>
 8018c9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018ca0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8018ca2:	4656      	mov	r6, sl
 8018ca4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018ca8:	f7e7 ff2e 	bl	8000b08 <__aeabi_d2iz>
 8018cac:	4605      	mov	r5, r0
 8018cae:	f7e7 fc11 	bl	80004d4 <__aeabi_i2d>
 8018cb2:	4602      	mov	r2, r0
 8018cb4:	460b      	mov	r3, r1
 8018cb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018cba:	f7e7 fabd 	bl	8000238 <__aeabi_dsub>
 8018cbe:	3530      	adds	r5, #48	@ 0x30
 8018cc0:	f806 5b01 	strb.w	r5, [r6], #1
 8018cc4:	4602      	mov	r2, r0
 8018cc6:	460b      	mov	r3, r1
 8018cc8:	42a6      	cmp	r6, r4
 8018cca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018cce:	f04f 0200 	mov.w	r2, #0
 8018cd2:	d124      	bne.n	8018d1e <_dtoa_r+0x626>
 8018cd4:	4baf      	ldr	r3, [pc, #700]	@ (8018f94 <_dtoa_r+0x89c>)
 8018cd6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8018cda:	f7e7 faaf 	bl	800023c <__adddf3>
 8018cde:	4602      	mov	r2, r0
 8018ce0:	460b      	mov	r3, r1
 8018ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018ce6:	f7e7 feef 	bl	8000ac8 <__aeabi_dcmpgt>
 8018cea:	2800      	cmp	r0, #0
 8018cec:	d163      	bne.n	8018db6 <_dtoa_r+0x6be>
 8018cee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018cf2:	49a8      	ldr	r1, [pc, #672]	@ (8018f94 <_dtoa_r+0x89c>)
 8018cf4:	2000      	movs	r0, #0
 8018cf6:	f7e7 fa9f 	bl	8000238 <__aeabi_dsub>
 8018cfa:	4602      	mov	r2, r0
 8018cfc:	460b      	mov	r3, r1
 8018cfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018d02:	f7e7 fec3 	bl	8000a8c <__aeabi_dcmplt>
 8018d06:	2800      	cmp	r0, #0
 8018d08:	f43f af14 	beq.w	8018b34 <_dtoa_r+0x43c>
 8018d0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8018d0e:	1e73      	subs	r3, r6, #1
 8018d10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018d12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018d16:	2b30      	cmp	r3, #48	@ 0x30
 8018d18:	d0f8      	beq.n	8018d0c <_dtoa_r+0x614>
 8018d1a:	4647      	mov	r7, r8
 8018d1c:	e03b      	b.n	8018d96 <_dtoa_r+0x69e>
 8018d1e:	4b9e      	ldr	r3, [pc, #632]	@ (8018f98 <_dtoa_r+0x8a0>)
 8018d20:	f7e7 fc42 	bl	80005a8 <__aeabi_dmul>
 8018d24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018d28:	e7bc      	b.n	8018ca4 <_dtoa_r+0x5ac>
 8018d2a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8018d2e:	4656      	mov	r6, sl
 8018d30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018d34:	4620      	mov	r0, r4
 8018d36:	4629      	mov	r1, r5
 8018d38:	f7e7 fd60 	bl	80007fc <__aeabi_ddiv>
 8018d3c:	f7e7 fee4 	bl	8000b08 <__aeabi_d2iz>
 8018d40:	4680      	mov	r8, r0
 8018d42:	f7e7 fbc7 	bl	80004d4 <__aeabi_i2d>
 8018d46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018d4a:	f7e7 fc2d 	bl	80005a8 <__aeabi_dmul>
 8018d4e:	4602      	mov	r2, r0
 8018d50:	460b      	mov	r3, r1
 8018d52:	4620      	mov	r0, r4
 8018d54:	4629      	mov	r1, r5
 8018d56:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8018d5a:	f7e7 fa6d 	bl	8000238 <__aeabi_dsub>
 8018d5e:	f806 4b01 	strb.w	r4, [r6], #1
 8018d62:	9d03      	ldr	r5, [sp, #12]
 8018d64:	eba6 040a 	sub.w	r4, r6, sl
 8018d68:	42a5      	cmp	r5, r4
 8018d6a:	4602      	mov	r2, r0
 8018d6c:	460b      	mov	r3, r1
 8018d6e:	d133      	bne.n	8018dd8 <_dtoa_r+0x6e0>
 8018d70:	f7e7 fa64 	bl	800023c <__adddf3>
 8018d74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018d78:	4604      	mov	r4, r0
 8018d7a:	460d      	mov	r5, r1
 8018d7c:	f7e7 fea4 	bl	8000ac8 <__aeabi_dcmpgt>
 8018d80:	b9c0      	cbnz	r0, 8018db4 <_dtoa_r+0x6bc>
 8018d82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018d86:	4620      	mov	r0, r4
 8018d88:	4629      	mov	r1, r5
 8018d8a:	f7e7 fe75 	bl	8000a78 <__aeabi_dcmpeq>
 8018d8e:	b110      	cbz	r0, 8018d96 <_dtoa_r+0x69e>
 8018d90:	f018 0f01 	tst.w	r8, #1
 8018d94:	d10e      	bne.n	8018db4 <_dtoa_r+0x6bc>
 8018d96:	9902      	ldr	r1, [sp, #8]
 8018d98:	4648      	mov	r0, r9
 8018d9a:	f000 fe53 	bl	8019a44 <_Bfree>
 8018d9e:	2300      	movs	r3, #0
 8018da0:	7033      	strb	r3, [r6, #0]
 8018da2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018da4:	3701      	adds	r7, #1
 8018da6:	601f      	str	r7, [r3, #0]
 8018da8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	f000 824b 	beq.w	8019246 <_dtoa_r+0xb4e>
 8018db0:	601e      	str	r6, [r3, #0]
 8018db2:	e248      	b.n	8019246 <_dtoa_r+0xb4e>
 8018db4:	46b8      	mov	r8, r7
 8018db6:	4633      	mov	r3, r6
 8018db8:	461e      	mov	r6, r3
 8018dba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018dbe:	2a39      	cmp	r2, #57	@ 0x39
 8018dc0:	d106      	bne.n	8018dd0 <_dtoa_r+0x6d8>
 8018dc2:	459a      	cmp	sl, r3
 8018dc4:	d1f8      	bne.n	8018db8 <_dtoa_r+0x6c0>
 8018dc6:	2230      	movs	r2, #48	@ 0x30
 8018dc8:	f108 0801 	add.w	r8, r8, #1
 8018dcc:	f88a 2000 	strb.w	r2, [sl]
 8018dd0:	781a      	ldrb	r2, [r3, #0]
 8018dd2:	3201      	adds	r2, #1
 8018dd4:	701a      	strb	r2, [r3, #0]
 8018dd6:	e7a0      	b.n	8018d1a <_dtoa_r+0x622>
 8018dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8018f98 <_dtoa_r+0x8a0>)
 8018dda:	2200      	movs	r2, #0
 8018ddc:	f7e7 fbe4 	bl	80005a8 <__aeabi_dmul>
 8018de0:	2200      	movs	r2, #0
 8018de2:	2300      	movs	r3, #0
 8018de4:	4604      	mov	r4, r0
 8018de6:	460d      	mov	r5, r1
 8018de8:	f7e7 fe46 	bl	8000a78 <__aeabi_dcmpeq>
 8018dec:	2800      	cmp	r0, #0
 8018dee:	d09f      	beq.n	8018d30 <_dtoa_r+0x638>
 8018df0:	e7d1      	b.n	8018d96 <_dtoa_r+0x69e>
 8018df2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018df4:	2a00      	cmp	r2, #0
 8018df6:	f000 80ea 	beq.w	8018fce <_dtoa_r+0x8d6>
 8018dfa:	9a07      	ldr	r2, [sp, #28]
 8018dfc:	2a01      	cmp	r2, #1
 8018dfe:	f300 80cd 	bgt.w	8018f9c <_dtoa_r+0x8a4>
 8018e02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018e04:	2a00      	cmp	r2, #0
 8018e06:	f000 80c1 	beq.w	8018f8c <_dtoa_r+0x894>
 8018e0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8018e0e:	9c08      	ldr	r4, [sp, #32]
 8018e10:	9e00      	ldr	r6, [sp, #0]
 8018e12:	9a00      	ldr	r2, [sp, #0]
 8018e14:	441a      	add	r2, r3
 8018e16:	9200      	str	r2, [sp, #0]
 8018e18:	9a06      	ldr	r2, [sp, #24]
 8018e1a:	2101      	movs	r1, #1
 8018e1c:	441a      	add	r2, r3
 8018e1e:	4648      	mov	r0, r9
 8018e20:	9206      	str	r2, [sp, #24]
 8018e22:	f000 ff0d 	bl	8019c40 <__i2b>
 8018e26:	4605      	mov	r5, r0
 8018e28:	b166      	cbz	r6, 8018e44 <_dtoa_r+0x74c>
 8018e2a:	9b06      	ldr	r3, [sp, #24]
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	dd09      	ble.n	8018e44 <_dtoa_r+0x74c>
 8018e30:	42b3      	cmp	r3, r6
 8018e32:	9a00      	ldr	r2, [sp, #0]
 8018e34:	bfa8      	it	ge
 8018e36:	4633      	movge	r3, r6
 8018e38:	1ad2      	subs	r2, r2, r3
 8018e3a:	9200      	str	r2, [sp, #0]
 8018e3c:	9a06      	ldr	r2, [sp, #24]
 8018e3e:	1af6      	subs	r6, r6, r3
 8018e40:	1ad3      	subs	r3, r2, r3
 8018e42:	9306      	str	r3, [sp, #24]
 8018e44:	9b08      	ldr	r3, [sp, #32]
 8018e46:	b30b      	cbz	r3, 8018e8c <_dtoa_r+0x794>
 8018e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	f000 80c6 	beq.w	8018fdc <_dtoa_r+0x8e4>
 8018e50:	2c00      	cmp	r4, #0
 8018e52:	f000 80c0 	beq.w	8018fd6 <_dtoa_r+0x8de>
 8018e56:	4629      	mov	r1, r5
 8018e58:	4622      	mov	r2, r4
 8018e5a:	4648      	mov	r0, r9
 8018e5c:	f000 ffa8 	bl	8019db0 <__pow5mult>
 8018e60:	9a02      	ldr	r2, [sp, #8]
 8018e62:	4601      	mov	r1, r0
 8018e64:	4605      	mov	r5, r0
 8018e66:	4648      	mov	r0, r9
 8018e68:	f000 ff00 	bl	8019c6c <__multiply>
 8018e6c:	9902      	ldr	r1, [sp, #8]
 8018e6e:	4680      	mov	r8, r0
 8018e70:	4648      	mov	r0, r9
 8018e72:	f000 fde7 	bl	8019a44 <_Bfree>
 8018e76:	9b08      	ldr	r3, [sp, #32]
 8018e78:	1b1b      	subs	r3, r3, r4
 8018e7a:	9308      	str	r3, [sp, #32]
 8018e7c:	f000 80b1 	beq.w	8018fe2 <_dtoa_r+0x8ea>
 8018e80:	9a08      	ldr	r2, [sp, #32]
 8018e82:	4641      	mov	r1, r8
 8018e84:	4648      	mov	r0, r9
 8018e86:	f000 ff93 	bl	8019db0 <__pow5mult>
 8018e8a:	9002      	str	r0, [sp, #8]
 8018e8c:	2101      	movs	r1, #1
 8018e8e:	4648      	mov	r0, r9
 8018e90:	f000 fed6 	bl	8019c40 <__i2b>
 8018e94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018e96:	4604      	mov	r4, r0
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	f000 81d8 	beq.w	801924e <_dtoa_r+0xb56>
 8018e9e:	461a      	mov	r2, r3
 8018ea0:	4601      	mov	r1, r0
 8018ea2:	4648      	mov	r0, r9
 8018ea4:	f000 ff84 	bl	8019db0 <__pow5mult>
 8018ea8:	9b07      	ldr	r3, [sp, #28]
 8018eaa:	2b01      	cmp	r3, #1
 8018eac:	4604      	mov	r4, r0
 8018eae:	f300 809f 	bgt.w	8018ff0 <_dtoa_r+0x8f8>
 8018eb2:	9b04      	ldr	r3, [sp, #16]
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	f040 8097 	bne.w	8018fe8 <_dtoa_r+0x8f0>
 8018eba:	9b05      	ldr	r3, [sp, #20]
 8018ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	f040 8093 	bne.w	8018fec <_dtoa_r+0x8f4>
 8018ec6:	9b05      	ldr	r3, [sp, #20]
 8018ec8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018ecc:	0d1b      	lsrs	r3, r3, #20
 8018ece:	051b      	lsls	r3, r3, #20
 8018ed0:	b133      	cbz	r3, 8018ee0 <_dtoa_r+0x7e8>
 8018ed2:	9b00      	ldr	r3, [sp, #0]
 8018ed4:	3301      	adds	r3, #1
 8018ed6:	9300      	str	r3, [sp, #0]
 8018ed8:	9b06      	ldr	r3, [sp, #24]
 8018eda:	3301      	adds	r3, #1
 8018edc:	9306      	str	r3, [sp, #24]
 8018ede:	2301      	movs	r3, #1
 8018ee0:	9308      	str	r3, [sp, #32]
 8018ee2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	f000 81b8 	beq.w	801925a <_dtoa_r+0xb62>
 8018eea:	6923      	ldr	r3, [r4, #16]
 8018eec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018ef0:	6918      	ldr	r0, [r3, #16]
 8018ef2:	f000 fe59 	bl	8019ba8 <__hi0bits>
 8018ef6:	f1c0 0020 	rsb	r0, r0, #32
 8018efa:	9b06      	ldr	r3, [sp, #24]
 8018efc:	4418      	add	r0, r3
 8018efe:	f010 001f 	ands.w	r0, r0, #31
 8018f02:	f000 8082 	beq.w	801900a <_dtoa_r+0x912>
 8018f06:	f1c0 0320 	rsb	r3, r0, #32
 8018f0a:	2b04      	cmp	r3, #4
 8018f0c:	dd73      	ble.n	8018ff6 <_dtoa_r+0x8fe>
 8018f0e:	9b00      	ldr	r3, [sp, #0]
 8018f10:	f1c0 001c 	rsb	r0, r0, #28
 8018f14:	4403      	add	r3, r0
 8018f16:	9300      	str	r3, [sp, #0]
 8018f18:	9b06      	ldr	r3, [sp, #24]
 8018f1a:	4403      	add	r3, r0
 8018f1c:	4406      	add	r6, r0
 8018f1e:	9306      	str	r3, [sp, #24]
 8018f20:	9b00      	ldr	r3, [sp, #0]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	dd05      	ble.n	8018f32 <_dtoa_r+0x83a>
 8018f26:	9902      	ldr	r1, [sp, #8]
 8018f28:	461a      	mov	r2, r3
 8018f2a:	4648      	mov	r0, r9
 8018f2c:	f000 ff9a 	bl	8019e64 <__lshift>
 8018f30:	9002      	str	r0, [sp, #8]
 8018f32:	9b06      	ldr	r3, [sp, #24]
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	dd05      	ble.n	8018f44 <_dtoa_r+0x84c>
 8018f38:	4621      	mov	r1, r4
 8018f3a:	461a      	mov	r2, r3
 8018f3c:	4648      	mov	r0, r9
 8018f3e:	f000 ff91 	bl	8019e64 <__lshift>
 8018f42:	4604      	mov	r4, r0
 8018f44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d061      	beq.n	801900e <_dtoa_r+0x916>
 8018f4a:	9802      	ldr	r0, [sp, #8]
 8018f4c:	4621      	mov	r1, r4
 8018f4e:	f000 fff5 	bl	8019f3c <__mcmp>
 8018f52:	2800      	cmp	r0, #0
 8018f54:	da5b      	bge.n	801900e <_dtoa_r+0x916>
 8018f56:	2300      	movs	r3, #0
 8018f58:	9902      	ldr	r1, [sp, #8]
 8018f5a:	220a      	movs	r2, #10
 8018f5c:	4648      	mov	r0, r9
 8018f5e:	f000 fd93 	bl	8019a88 <__multadd>
 8018f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f64:	9002      	str	r0, [sp, #8]
 8018f66:	f107 38ff 	add.w	r8, r7, #4294967295
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	f000 8177 	beq.w	801925e <_dtoa_r+0xb66>
 8018f70:	4629      	mov	r1, r5
 8018f72:	2300      	movs	r3, #0
 8018f74:	220a      	movs	r2, #10
 8018f76:	4648      	mov	r0, r9
 8018f78:	f000 fd86 	bl	8019a88 <__multadd>
 8018f7c:	f1bb 0f00 	cmp.w	fp, #0
 8018f80:	4605      	mov	r5, r0
 8018f82:	dc6f      	bgt.n	8019064 <_dtoa_r+0x96c>
 8018f84:	9b07      	ldr	r3, [sp, #28]
 8018f86:	2b02      	cmp	r3, #2
 8018f88:	dc49      	bgt.n	801901e <_dtoa_r+0x926>
 8018f8a:	e06b      	b.n	8019064 <_dtoa_r+0x96c>
 8018f8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018f8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8018f92:	e73c      	b.n	8018e0e <_dtoa_r+0x716>
 8018f94:	3fe00000 	.word	0x3fe00000
 8018f98:	40240000 	.word	0x40240000
 8018f9c:	9b03      	ldr	r3, [sp, #12]
 8018f9e:	1e5c      	subs	r4, r3, #1
 8018fa0:	9b08      	ldr	r3, [sp, #32]
 8018fa2:	42a3      	cmp	r3, r4
 8018fa4:	db09      	blt.n	8018fba <_dtoa_r+0x8c2>
 8018fa6:	1b1c      	subs	r4, r3, r4
 8018fa8:	9b03      	ldr	r3, [sp, #12]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	f6bf af30 	bge.w	8018e10 <_dtoa_r+0x718>
 8018fb0:	9b00      	ldr	r3, [sp, #0]
 8018fb2:	9a03      	ldr	r2, [sp, #12]
 8018fb4:	1a9e      	subs	r6, r3, r2
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	e72b      	b.n	8018e12 <_dtoa_r+0x71a>
 8018fba:	9b08      	ldr	r3, [sp, #32]
 8018fbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018fbe:	9408      	str	r4, [sp, #32]
 8018fc0:	1ae3      	subs	r3, r4, r3
 8018fc2:	441a      	add	r2, r3
 8018fc4:	9e00      	ldr	r6, [sp, #0]
 8018fc6:	9b03      	ldr	r3, [sp, #12]
 8018fc8:	920d      	str	r2, [sp, #52]	@ 0x34
 8018fca:	2400      	movs	r4, #0
 8018fcc:	e721      	b.n	8018e12 <_dtoa_r+0x71a>
 8018fce:	9c08      	ldr	r4, [sp, #32]
 8018fd0:	9e00      	ldr	r6, [sp, #0]
 8018fd2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8018fd4:	e728      	b.n	8018e28 <_dtoa_r+0x730>
 8018fd6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8018fda:	e751      	b.n	8018e80 <_dtoa_r+0x788>
 8018fdc:	9a08      	ldr	r2, [sp, #32]
 8018fde:	9902      	ldr	r1, [sp, #8]
 8018fe0:	e750      	b.n	8018e84 <_dtoa_r+0x78c>
 8018fe2:	f8cd 8008 	str.w	r8, [sp, #8]
 8018fe6:	e751      	b.n	8018e8c <_dtoa_r+0x794>
 8018fe8:	2300      	movs	r3, #0
 8018fea:	e779      	b.n	8018ee0 <_dtoa_r+0x7e8>
 8018fec:	9b04      	ldr	r3, [sp, #16]
 8018fee:	e777      	b.n	8018ee0 <_dtoa_r+0x7e8>
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	9308      	str	r3, [sp, #32]
 8018ff4:	e779      	b.n	8018eea <_dtoa_r+0x7f2>
 8018ff6:	d093      	beq.n	8018f20 <_dtoa_r+0x828>
 8018ff8:	9a00      	ldr	r2, [sp, #0]
 8018ffa:	331c      	adds	r3, #28
 8018ffc:	441a      	add	r2, r3
 8018ffe:	9200      	str	r2, [sp, #0]
 8019000:	9a06      	ldr	r2, [sp, #24]
 8019002:	441a      	add	r2, r3
 8019004:	441e      	add	r6, r3
 8019006:	9206      	str	r2, [sp, #24]
 8019008:	e78a      	b.n	8018f20 <_dtoa_r+0x828>
 801900a:	4603      	mov	r3, r0
 801900c:	e7f4      	b.n	8018ff8 <_dtoa_r+0x900>
 801900e:	9b03      	ldr	r3, [sp, #12]
 8019010:	2b00      	cmp	r3, #0
 8019012:	46b8      	mov	r8, r7
 8019014:	dc20      	bgt.n	8019058 <_dtoa_r+0x960>
 8019016:	469b      	mov	fp, r3
 8019018:	9b07      	ldr	r3, [sp, #28]
 801901a:	2b02      	cmp	r3, #2
 801901c:	dd1e      	ble.n	801905c <_dtoa_r+0x964>
 801901e:	f1bb 0f00 	cmp.w	fp, #0
 8019022:	f47f adb1 	bne.w	8018b88 <_dtoa_r+0x490>
 8019026:	4621      	mov	r1, r4
 8019028:	465b      	mov	r3, fp
 801902a:	2205      	movs	r2, #5
 801902c:	4648      	mov	r0, r9
 801902e:	f000 fd2b 	bl	8019a88 <__multadd>
 8019032:	4601      	mov	r1, r0
 8019034:	4604      	mov	r4, r0
 8019036:	9802      	ldr	r0, [sp, #8]
 8019038:	f000 ff80 	bl	8019f3c <__mcmp>
 801903c:	2800      	cmp	r0, #0
 801903e:	f77f ada3 	ble.w	8018b88 <_dtoa_r+0x490>
 8019042:	4656      	mov	r6, sl
 8019044:	2331      	movs	r3, #49	@ 0x31
 8019046:	f806 3b01 	strb.w	r3, [r6], #1
 801904a:	f108 0801 	add.w	r8, r8, #1
 801904e:	e59f      	b.n	8018b90 <_dtoa_r+0x498>
 8019050:	9c03      	ldr	r4, [sp, #12]
 8019052:	46b8      	mov	r8, r7
 8019054:	4625      	mov	r5, r4
 8019056:	e7f4      	b.n	8019042 <_dtoa_r+0x94a>
 8019058:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801905c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801905e:	2b00      	cmp	r3, #0
 8019060:	f000 8101 	beq.w	8019266 <_dtoa_r+0xb6e>
 8019064:	2e00      	cmp	r6, #0
 8019066:	dd05      	ble.n	8019074 <_dtoa_r+0x97c>
 8019068:	4629      	mov	r1, r5
 801906a:	4632      	mov	r2, r6
 801906c:	4648      	mov	r0, r9
 801906e:	f000 fef9 	bl	8019e64 <__lshift>
 8019072:	4605      	mov	r5, r0
 8019074:	9b08      	ldr	r3, [sp, #32]
 8019076:	2b00      	cmp	r3, #0
 8019078:	d05c      	beq.n	8019134 <_dtoa_r+0xa3c>
 801907a:	6869      	ldr	r1, [r5, #4]
 801907c:	4648      	mov	r0, r9
 801907e:	f000 fca1 	bl	80199c4 <_Balloc>
 8019082:	4606      	mov	r6, r0
 8019084:	b928      	cbnz	r0, 8019092 <_dtoa_r+0x99a>
 8019086:	4b82      	ldr	r3, [pc, #520]	@ (8019290 <_dtoa_r+0xb98>)
 8019088:	4602      	mov	r2, r0
 801908a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801908e:	f7ff bb4a 	b.w	8018726 <_dtoa_r+0x2e>
 8019092:	692a      	ldr	r2, [r5, #16]
 8019094:	3202      	adds	r2, #2
 8019096:	0092      	lsls	r2, r2, #2
 8019098:	f105 010c 	add.w	r1, r5, #12
 801909c:	300c      	adds	r0, #12
 801909e:	f7ff fa68 	bl	8018572 <memcpy>
 80190a2:	2201      	movs	r2, #1
 80190a4:	4631      	mov	r1, r6
 80190a6:	4648      	mov	r0, r9
 80190a8:	f000 fedc 	bl	8019e64 <__lshift>
 80190ac:	f10a 0301 	add.w	r3, sl, #1
 80190b0:	9300      	str	r3, [sp, #0]
 80190b2:	eb0a 030b 	add.w	r3, sl, fp
 80190b6:	9308      	str	r3, [sp, #32]
 80190b8:	9b04      	ldr	r3, [sp, #16]
 80190ba:	f003 0301 	and.w	r3, r3, #1
 80190be:	462f      	mov	r7, r5
 80190c0:	9306      	str	r3, [sp, #24]
 80190c2:	4605      	mov	r5, r0
 80190c4:	9b00      	ldr	r3, [sp, #0]
 80190c6:	9802      	ldr	r0, [sp, #8]
 80190c8:	4621      	mov	r1, r4
 80190ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80190ce:	f7ff fa8b 	bl	80185e8 <quorem>
 80190d2:	4603      	mov	r3, r0
 80190d4:	3330      	adds	r3, #48	@ 0x30
 80190d6:	9003      	str	r0, [sp, #12]
 80190d8:	4639      	mov	r1, r7
 80190da:	9802      	ldr	r0, [sp, #8]
 80190dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80190de:	f000 ff2d 	bl	8019f3c <__mcmp>
 80190e2:	462a      	mov	r2, r5
 80190e4:	9004      	str	r0, [sp, #16]
 80190e6:	4621      	mov	r1, r4
 80190e8:	4648      	mov	r0, r9
 80190ea:	f000 ff43 	bl	8019f74 <__mdiff>
 80190ee:	68c2      	ldr	r2, [r0, #12]
 80190f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80190f2:	4606      	mov	r6, r0
 80190f4:	bb02      	cbnz	r2, 8019138 <_dtoa_r+0xa40>
 80190f6:	4601      	mov	r1, r0
 80190f8:	9802      	ldr	r0, [sp, #8]
 80190fa:	f000 ff1f 	bl	8019f3c <__mcmp>
 80190fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019100:	4602      	mov	r2, r0
 8019102:	4631      	mov	r1, r6
 8019104:	4648      	mov	r0, r9
 8019106:	920c      	str	r2, [sp, #48]	@ 0x30
 8019108:	9309      	str	r3, [sp, #36]	@ 0x24
 801910a:	f000 fc9b 	bl	8019a44 <_Bfree>
 801910e:	9b07      	ldr	r3, [sp, #28]
 8019110:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019112:	9e00      	ldr	r6, [sp, #0]
 8019114:	ea42 0103 	orr.w	r1, r2, r3
 8019118:	9b06      	ldr	r3, [sp, #24]
 801911a:	4319      	orrs	r1, r3
 801911c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801911e:	d10d      	bne.n	801913c <_dtoa_r+0xa44>
 8019120:	2b39      	cmp	r3, #57	@ 0x39
 8019122:	d027      	beq.n	8019174 <_dtoa_r+0xa7c>
 8019124:	9a04      	ldr	r2, [sp, #16]
 8019126:	2a00      	cmp	r2, #0
 8019128:	dd01      	ble.n	801912e <_dtoa_r+0xa36>
 801912a:	9b03      	ldr	r3, [sp, #12]
 801912c:	3331      	adds	r3, #49	@ 0x31
 801912e:	f88b 3000 	strb.w	r3, [fp]
 8019132:	e52e      	b.n	8018b92 <_dtoa_r+0x49a>
 8019134:	4628      	mov	r0, r5
 8019136:	e7b9      	b.n	80190ac <_dtoa_r+0x9b4>
 8019138:	2201      	movs	r2, #1
 801913a:	e7e2      	b.n	8019102 <_dtoa_r+0xa0a>
 801913c:	9904      	ldr	r1, [sp, #16]
 801913e:	2900      	cmp	r1, #0
 8019140:	db04      	blt.n	801914c <_dtoa_r+0xa54>
 8019142:	9807      	ldr	r0, [sp, #28]
 8019144:	4301      	orrs	r1, r0
 8019146:	9806      	ldr	r0, [sp, #24]
 8019148:	4301      	orrs	r1, r0
 801914a:	d120      	bne.n	801918e <_dtoa_r+0xa96>
 801914c:	2a00      	cmp	r2, #0
 801914e:	ddee      	ble.n	801912e <_dtoa_r+0xa36>
 8019150:	9902      	ldr	r1, [sp, #8]
 8019152:	9300      	str	r3, [sp, #0]
 8019154:	2201      	movs	r2, #1
 8019156:	4648      	mov	r0, r9
 8019158:	f000 fe84 	bl	8019e64 <__lshift>
 801915c:	4621      	mov	r1, r4
 801915e:	9002      	str	r0, [sp, #8]
 8019160:	f000 feec 	bl	8019f3c <__mcmp>
 8019164:	2800      	cmp	r0, #0
 8019166:	9b00      	ldr	r3, [sp, #0]
 8019168:	dc02      	bgt.n	8019170 <_dtoa_r+0xa78>
 801916a:	d1e0      	bne.n	801912e <_dtoa_r+0xa36>
 801916c:	07da      	lsls	r2, r3, #31
 801916e:	d5de      	bpl.n	801912e <_dtoa_r+0xa36>
 8019170:	2b39      	cmp	r3, #57	@ 0x39
 8019172:	d1da      	bne.n	801912a <_dtoa_r+0xa32>
 8019174:	2339      	movs	r3, #57	@ 0x39
 8019176:	f88b 3000 	strb.w	r3, [fp]
 801917a:	4633      	mov	r3, r6
 801917c:	461e      	mov	r6, r3
 801917e:	3b01      	subs	r3, #1
 8019180:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8019184:	2a39      	cmp	r2, #57	@ 0x39
 8019186:	d04e      	beq.n	8019226 <_dtoa_r+0xb2e>
 8019188:	3201      	adds	r2, #1
 801918a:	701a      	strb	r2, [r3, #0]
 801918c:	e501      	b.n	8018b92 <_dtoa_r+0x49a>
 801918e:	2a00      	cmp	r2, #0
 8019190:	dd03      	ble.n	801919a <_dtoa_r+0xaa2>
 8019192:	2b39      	cmp	r3, #57	@ 0x39
 8019194:	d0ee      	beq.n	8019174 <_dtoa_r+0xa7c>
 8019196:	3301      	adds	r3, #1
 8019198:	e7c9      	b.n	801912e <_dtoa_r+0xa36>
 801919a:	9a00      	ldr	r2, [sp, #0]
 801919c:	9908      	ldr	r1, [sp, #32]
 801919e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80191a2:	428a      	cmp	r2, r1
 80191a4:	d028      	beq.n	80191f8 <_dtoa_r+0xb00>
 80191a6:	9902      	ldr	r1, [sp, #8]
 80191a8:	2300      	movs	r3, #0
 80191aa:	220a      	movs	r2, #10
 80191ac:	4648      	mov	r0, r9
 80191ae:	f000 fc6b 	bl	8019a88 <__multadd>
 80191b2:	42af      	cmp	r7, r5
 80191b4:	9002      	str	r0, [sp, #8]
 80191b6:	f04f 0300 	mov.w	r3, #0
 80191ba:	f04f 020a 	mov.w	r2, #10
 80191be:	4639      	mov	r1, r7
 80191c0:	4648      	mov	r0, r9
 80191c2:	d107      	bne.n	80191d4 <_dtoa_r+0xadc>
 80191c4:	f000 fc60 	bl	8019a88 <__multadd>
 80191c8:	4607      	mov	r7, r0
 80191ca:	4605      	mov	r5, r0
 80191cc:	9b00      	ldr	r3, [sp, #0]
 80191ce:	3301      	adds	r3, #1
 80191d0:	9300      	str	r3, [sp, #0]
 80191d2:	e777      	b.n	80190c4 <_dtoa_r+0x9cc>
 80191d4:	f000 fc58 	bl	8019a88 <__multadd>
 80191d8:	4629      	mov	r1, r5
 80191da:	4607      	mov	r7, r0
 80191dc:	2300      	movs	r3, #0
 80191de:	220a      	movs	r2, #10
 80191e0:	4648      	mov	r0, r9
 80191e2:	f000 fc51 	bl	8019a88 <__multadd>
 80191e6:	4605      	mov	r5, r0
 80191e8:	e7f0      	b.n	80191cc <_dtoa_r+0xad4>
 80191ea:	f1bb 0f00 	cmp.w	fp, #0
 80191ee:	bfcc      	ite	gt
 80191f0:	465e      	movgt	r6, fp
 80191f2:	2601      	movle	r6, #1
 80191f4:	4456      	add	r6, sl
 80191f6:	2700      	movs	r7, #0
 80191f8:	9902      	ldr	r1, [sp, #8]
 80191fa:	9300      	str	r3, [sp, #0]
 80191fc:	2201      	movs	r2, #1
 80191fe:	4648      	mov	r0, r9
 8019200:	f000 fe30 	bl	8019e64 <__lshift>
 8019204:	4621      	mov	r1, r4
 8019206:	9002      	str	r0, [sp, #8]
 8019208:	f000 fe98 	bl	8019f3c <__mcmp>
 801920c:	2800      	cmp	r0, #0
 801920e:	dcb4      	bgt.n	801917a <_dtoa_r+0xa82>
 8019210:	d102      	bne.n	8019218 <_dtoa_r+0xb20>
 8019212:	9b00      	ldr	r3, [sp, #0]
 8019214:	07db      	lsls	r3, r3, #31
 8019216:	d4b0      	bmi.n	801917a <_dtoa_r+0xa82>
 8019218:	4633      	mov	r3, r6
 801921a:	461e      	mov	r6, r3
 801921c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019220:	2a30      	cmp	r2, #48	@ 0x30
 8019222:	d0fa      	beq.n	801921a <_dtoa_r+0xb22>
 8019224:	e4b5      	b.n	8018b92 <_dtoa_r+0x49a>
 8019226:	459a      	cmp	sl, r3
 8019228:	d1a8      	bne.n	801917c <_dtoa_r+0xa84>
 801922a:	2331      	movs	r3, #49	@ 0x31
 801922c:	f108 0801 	add.w	r8, r8, #1
 8019230:	f88a 3000 	strb.w	r3, [sl]
 8019234:	e4ad      	b.n	8018b92 <_dtoa_r+0x49a>
 8019236:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019238:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8019294 <_dtoa_r+0xb9c>
 801923c:	b11b      	cbz	r3, 8019246 <_dtoa_r+0xb4e>
 801923e:	f10a 0308 	add.w	r3, sl, #8
 8019242:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019244:	6013      	str	r3, [r2, #0]
 8019246:	4650      	mov	r0, sl
 8019248:	b017      	add	sp, #92	@ 0x5c
 801924a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801924e:	9b07      	ldr	r3, [sp, #28]
 8019250:	2b01      	cmp	r3, #1
 8019252:	f77f ae2e 	ble.w	8018eb2 <_dtoa_r+0x7ba>
 8019256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019258:	9308      	str	r3, [sp, #32]
 801925a:	2001      	movs	r0, #1
 801925c:	e64d      	b.n	8018efa <_dtoa_r+0x802>
 801925e:	f1bb 0f00 	cmp.w	fp, #0
 8019262:	f77f aed9 	ble.w	8019018 <_dtoa_r+0x920>
 8019266:	4656      	mov	r6, sl
 8019268:	9802      	ldr	r0, [sp, #8]
 801926a:	4621      	mov	r1, r4
 801926c:	f7ff f9bc 	bl	80185e8 <quorem>
 8019270:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8019274:	f806 3b01 	strb.w	r3, [r6], #1
 8019278:	eba6 020a 	sub.w	r2, r6, sl
 801927c:	4593      	cmp	fp, r2
 801927e:	ddb4      	ble.n	80191ea <_dtoa_r+0xaf2>
 8019280:	9902      	ldr	r1, [sp, #8]
 8019282:	2300      	movs	r3, #0
 8019284:	220a      	movs	r2, #10
 8019286:	4648      	mov	r0, r9
 8019288:	f000 fbfe 	bl	8019a88 <__multadd>
 801928c:	9002      	str	r0, [sp, #8]
 801928e:	e7eb      	b.n	8019268 <_dtoa_r+0xb70>
 8019290:	0801f251 	.word	0x0801f251
 8019294:	0801f1ec 	.word	0x0801f1ec

08019298 <_free_r>:
 8019298:	b538      	push	{r3, r4, r5, lr}
 801929a:	4605      	mov	r5, r0
 801929c:	2900      	cmp	r1, #0
 801929e:	d041      	beq.n	8019324 <_free_r+0x8c>
 80192a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80192a4:	1f0c      	subs	r4, r1, #4
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	bfb8      	it	lt
 80192aa:	18e4      	addlt	r4, r4, r3
 80192ac:	f7fd f984 	bl	80165b8 <__malloc_lock>
 80192b0:	4a1d      	ldr	r2, [pc, #116]	@ (8019328 <_free_r+0x90>)
 80192b2:	6813      	ldr	r3, [r2, #0]
 80192b4:	b933      	cbnz	r3, 80192c4 <_free_r+0x2c>
 80192b6:	6063      	str	r3, [r4, #4]
 80192b8:	6014      	str	r4, [r2, #0]
 80192ba:	4628      	mov	r0, r5
 80192bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80192c0:	f7fd b980 	b.w	80165c4 <__malloc_unlock>
 80192c4:	42a3      	cmp	r3, r4
 80192c6:	d908      	bls.n	80192da <_free_r+0x42>
 80192c8:	6820      	ldr	r0, [r4, #0]
 80192ca:	1821      	adds	r1, r4, r0
 80192cc:	428b      	cmp	r3, r1
 80192ce:	bf01      	itttt	eq
 80192d0:	6819      	ldreq	r1, [r3, #0]
 80192d2:	685b      	ldreq	r3, [r3, #4]
 80192d4:	1809      	addeq	r1, r1, r0
 80192d6:	6021      	streq	r1, [r4, #0]
 80192d8:	e7ed      	b.n	80192b6 <_free_r+0x1e>
 80192da:	461a      	mov	r2, r3
 80192dc:	685b      	ldr	r3, [r3, #4]
 80192de:	b10b      	cbz	r3, 80192e4 <_free_r+0x4c>
 80192e0:	42a3      	cmp	r3, r4
 80192e2:	d9fa      	bls.n	80192da <_free_r+0x42>
 80192e4:	6811      	ldr	r1, [r2, #0]
 80192e6:	1850      	adds	r0, r2, r1
 80192e8:	42a0      	cmp	r0, r4
 80192ea:	d10b      	bne.n	8019304 <_free_r+0x6c>
 80192ec:	6820      	ldr	r0, [r4, #0]
 80192ee:	4401      	add	r1, r0
 80192f0:	1850      	adds	r0, r2, r1
 80192f2:	4283      	cmp	r3, r0
 80192f4:	6011      	str	r1, [r2, #0]
 80192f6:	d1e0      	bne.n	80192ba <_free_r+0x22>
 80192f8:	6818      	ldr	r0, [r3, #0]
 80192fa:	685b      	ldr	r3, [r3, #4]
 80192fc:	6053      	str	r3, [r2, #4]
 80192fe:	4408      	add	r0, r1
 8019300:	6010      	str	r0, [r2, #0]
 8019302:	e7da      	b.n	80192ba <_free_r+0x22>
 8019304:	d902      	bls.n	801930c <_free_r+0x74>
 8019306:	230c      	movs	r3, #12
 8019308:	602b      	str	r3, [r5, #0]
 801930a:	e7d6      	b.n	80192ba <_free_r+0x22>
 801930c:	6820      	ldr	r0, [r4, #0]
 801930e:	1821      	adds	r1, r4, r0
 8019310:	428b      	cmp	r3, r1
 8019312:	bf04      	itt	eq
 8019314:	6819      	ldreq	r1, [r3, #0]
 8019316:	685b      	ldreq	r3, [r3, #4]
 8019318:	6063      	str	r3, [r4, #4]
 801931a:	bf04      	itt	eq
 801931c:	1809      	addeq	r1, r1, r0
 801931e:	6021      	streq	r1, [r4, #0]
 8019320:	6054      	str	r4, [r2, #4]
 8019322:	e7ca      	b.n	80192ba <_free_r+0x22>
 8019324:	bd38      	pop	{r3, r4, r5, pc}
 8019326:	bf00      	nop
 8019328:	20002cac 	.word	0x20002cac

0801932c <rshift>:
 801932c:	6903      	ldr	r3, [r0, #16]
 801932e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019332:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019336:	ea4f 1261 	mov.w	r2, r1, asr #5
 801933a:	f100 0414 	add.w	r4, r0, #20
 801933e:	dd45      	ble.n	80193cc <rshift+0xa0>
 8019340:	f011 011f 	ands.w	r1, r1, #31
 8019344:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019348:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801934c:	d10c      	bne.n	8019368 <rshift+0x3c>
 801934e:	f100 0710 	add.w	r7, r0, #16
 8019352:	4629      	mov	r1, r5
 8019354:	42b1      	cmp	r1, r6
 8019356:	d334      	bcc.n	80193c2 <rshift+0x96>
 8019358:	1a9b      	subs	r3, r3, r2
 801935a:	009b      	lsls	r3, r3, #2
 801935c:	1eea      	subs	r2, r5, #3
 801935e:	4296      	cmp	r6, r2
 8019360:	bf38      	it	cc
 8019362:	2300      	movcc	r3, #0
 8019364:	4423      	add	r3, r4
 8019366:	e015      	b.n	8019394 <rshift+0x68>
 8019368:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801936c:	f1c1 0820 	rsb	r8, r1, #32
 8019370:	40cf      	lsrs	r7, r1
 8019372:	f105 0e04 	add.w	lr, r5, #4
 8019376:	46a1      	mov	r9, r4
 8019378:	4576      	cmp	r6, lr
 801937a:	46f4      	mov	ip, lr
 801937c:	d815      	bhi.n	80193aa <rshift+0x7e>
 801937e:	1a9a      	subs	r2, r3, r2
 8019380:	0092      	lsls	r2, r2, #2
 8019382:	3a04      	subs	r2, #4
 8019384:	3501      	adds	r5, #1
 8019386:	42ae      	cmp	r6, r5
 8019388:	bf38      	it	cc
 801938a:	2200      	movcc	r2, #0
 801938c:	18a3      	adds	r3, r4, r2
 801938e:	50a7      	str	r7, [r4, r2]
 8019390:	b107      	cbz	r7, 8019394 <rshift+0x68>
 8019392:	3304      	adds	r3, #4
 8019394:	1b1a      	subs	r2, r3, r4
 8019396:	42a3      	cmp	r3, r4
 8019398:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801939c:	bf08      	it	eq
 801939e:	2300      	moveq	r3, #0
 80193a0:	6102      	str	r2, [r0, #16]
 80193a2:	bf08      	it	eq
 80193a4:	6143      	streq	r3, [r0, #20]
 80193a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193aa:	f8dc c000 	ldr.w	ip, [ip]
 80193ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80193b2:	ea4c 0707 	orr.w	r7, ip, r7
 80193b6:	f849 7b04 	str.w	r7, [r9], #4
 80193ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80193be:	40cf      	lsrs	r7, r1
 80193c0:	e7da      	b.n	8019378 <rshift+0x4c>
 80193c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80193c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80193ca:	e7c3      	b.n	8019354 <rshift+0x28>
 80193cc:	4623      	mov	r3, r4
 80193ce:	e7e1      	b.n	8019394 <rshift+0x68>

080193d0 <__hexdig_fun>:
 80193d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80193d4:	2b09      	cmp	r3, #9
 80193d6:	d802      	bhi.n	80193de <__hexdig_fun+0xe>
 80193d8:	3820      	subs	r0, #32
 80193da:	b2c0      	uxtb	r0, r0
 80193dc:	4770      	bx	lr
 80193de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80193e2:	2b05      	cmp	r3, #5
 80193e4:	d801      	bhi.n	80193ea <__hexdig_fun+0x1a>
 80193e6:	3847      	subs	r0, #71	@ 0x47
 80193e8:	e7f7      	b.n	80193da <__hexdig_fun+0xa>
 80193ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80193ee:	2b05      	cmp	r3, #5
 80193f0:	d801      	bhi.n	80193f6 <__hexdig_fun+0x26>
 80193f2:	3827      	subs	r0, #39	@ 0x27
 80193f4:	e7f1      	b.n	80193da <__hexdig_fun+0xa>
 80193f6:	2000      	movs	r0, #0
 80193f8:	4770      	bx	lr
	...

080193fc <__gethex>:
 80193fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019400:	b085      	sub	sp, #20
 8019402:	468a      	mov	sl, r1
 8019404:	9302      	str	r3, [sp, #8]
 8019406:	680b      	ldr	r3, [r1, #0]
 8019408:	9001      	str	r0, [sp, #4]
 801940a:	4690      	mov	r8, r2
 801940c:	1c9c      	adds	r4, r3, #2
 801940e:	46a1      	mov	r9, r4
 8019410:	f814 0b01 	ldrb.w	r0, [r4], #1
 8019414:	2830      	cmp	r0, #48	@ 0x30
 8019416:	d0fa      	beq.n	801940e <__gethex+0x12>
 8019418:	eba9 0303 	sub.w	r3, r9, r3
 801941c:	f1a3 0b02 	sub.w	fp, r3, #2
 8019420:	f7ff ffd6 	bl	80193d0 <__hexdig_fun>
 8019424:	4605      	mov	r5, r0
 8019426:	2800      	cmp	r0, #0
 8019428:	d168      	bne.n	80194fc <__gethex+0x100>
 801942a:	49a0      	ldr	r1, [pc, #640]	@ (80196ac <__gethex+0x2b0>)
 801942c:	2201      	movs	r2, #1
 801942e:	4648      	mov	r0, r9
 8019430:	f7fe ff8b 	bl	801834a <strncmp>
 8019434:	4607      	mov	r7, r0
 8019436:	2800      	cmp	r0, #0
 8019438:	d167      	bne.n	801950a <__gethex+0x10e>
 801943a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801943e:	4626      	mov	r6, r4
 8019440:	f7ff ffc6 	bl	80193d0 <__hexdig_fun>
 8019444:	2800      	cmp	r0, #0
 8019446:	d062      	beq.n	801950e <__gethex+0x112>
 8019448:	4623      	mov	r3, r4
 801944a:	7818      	ldrb	r0, [r3, #0]
 801944c:	2830      	cmp	r0, #48	@ 0x30
 801944e:	4699      	mov	r9, r3
 8019450:	f103 0301 	add.w	r3, r3, #1
 8019454:	d0f9      	beq.n	801944a <__gethex+0x4e>
 8019456:	f7ff ffbb 	bl	80193d0 <__hexdig_fun>
 801945a:	fab0 f580 	clz	r5, r0
 801945e:	096d      	lsrs	r5, r5, #5
 8019460:	f04f 0b01 	mov.w	fp, #1
 8019464:	464a      	mov	r2, r9
 8019466:	4616      	mov	r6, r2
 8019468:	3201      	adds	r2, #1
 801946a:	7830      	ldrb	r0, [r6, #0]
 801946c:	f7ff ffb0 	bl	80193d0 <__hexdig_fun>
 8019470:	2800      	cmp	r0, #0
 8019472:	d1f8      	bne.n	8019466 <__gethex+0x6a>
 8019474:	498d      	ldr	r1, [pc, #564]	@ (80196ac <__gethex+0x2b0>)
 8019476:	2201      	movs	r2, #1
 8019478:	4630      	mov	r0, r6
 801947a:	f7fe ff66 	bl	801834a <strncmp>
 801947e:	2800      	cmp	r0, #0
 8019480:	d13f      	bne.n	8019502 <__gethex+0x106>
 8019482:	b944      	cbnz	r4, 8019496 <__gethex+0x9a>
 8019484:	1c74      	adds	r4, r6, #1
 8019486:	4622      	mov	r2, r4
 8019488:	4616      	mov	r6, r2
 801948a:	3201      	adds	r2, #1
 801948c:	7830      	ldrb	r0, [r6, #0]
 801948e:	f7ff ff9f 	bl	80193d0 <__hexdig_fun>
 8019492:	2800      	cmp	r0, #0
 8019494:	d1f8      	bne.n	8019488 <__gethex+0x8c>
 8019496:	1ba4      	subs	r4, r4, r6
 8019498:	00a7      	lsls	r7, r4, #2
 801949a:	7833      	ldrb	r3, [r6, #0]
 801949c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80194a0:	2b50      	cmp	r3, #80	@ 0x50
 80194a2:	d13e      	bne.n	8019522 <__gethex+0x126>
 80194a4:	7873      	ldrb	r3, [r6, #1]
 80194a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80194a8:	d033      	beq.n	8019512 <__gethex+0x116>
 80194aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80194ac:	d034      	beq.n	8019518 <__gethex+0x11c>
 80194ae:	1c71      	adds	r1, r6, #1
 80194b0:	2400      	movs	r4, #0
 80194b2:	7808      	ldrb	r0, [r1, #0]
 80194b4:	f7ff ff8c 	bl	80193d0 <__hexdig_fun>
 80194b8:	1e43      	subs	r3, r0, #1
 80194ba:	b2db      	uxtb	r3, r3
 80194bc:	2b18      	cmp	r3, #24
 80194be:	d830      	bhi.n	8019522 <__gethex+0x126>
 80194c0:	f1a0 0210 	sub.w	r2, r0, #16
 80194c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80194c8:	f7ff ff82 	bl	80193d0 <__hexdig_fun>
 80194cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80194d0:	fa5f fc8c 	uxtb.w	ip, ip
 80194d4:	f1bc 0f18 	cmp.w	ip, #24
 80194d8:	f04f 030a 	mov.w	r3, #10
 80194dc:	d91e      	bls.n	801951c <__gethex+0x120>
 80194de:	b104      	cbz	r4, 80194e2 <__gethex+0xe6>
 80194e0:	4252      	negs	r2, r2
 80194e2:	4417      	add	r7, r2
 80194e4:	f8ca 1000 	str.w	r1, [sl]
 80194e8:	b1ed      	cbz	r5, 8019526 <__gethex+0x12a>
 80194ea:	f1bb 0f00 	cmp.w	fp, #0
 80194ee:	bf0c      	ite	eq
 80194f0:	2506      	moveq	r5, #6
 80194f2:	2500      	movne	r5, #0
 80194f4:	4628      	mov	r0, r5
 80194f6:	b005      	add	sp, #20
 80194f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194fc:	2500      	movs	r5, #0
 80194fe:	462c      	mov	r4, r5
 8019500:	e7b0      	b.n	8019464 <__gethex+0x68>
 8019502:	2c00      	cmp	r4, #0
 8019504:	d1c7      	bne.n	8019496 <__gethex+0x9a>
 8019506:	4627      	mov	r7, r4
 8019508:	e7c7      	b.n	801949a <__gethex+0x9e>
 801950a:	464e      	mov	r6, r9
 801950c:	462f      	mov	r7, r5
 801950e:	2501      	movs	r5, #1
 8019510:	e7c3      	b.n	801949a <__gethex+0x9e>
 8019512:	2400      	movs	r4, #0
 8019514:	1cb1      	adds	r1, r6, #2
 8019516:	e7cc      	b.n	80194b2 <__gethex+0xb6>
 8019518:	2401      	movs	r4, #1
 801951a:	e7fb      	b.n	8019514 <__gethex+0x118>
 801951c:	fb03 0002 	mla	r0, r3, r2, r0
 8019520:	e7ce      	b.n	80194c0 <__gethex+0xc4>
 8019522:	4631      	mov	r1, r6
 8019524:	e7de      	b.n	80194e4 <__gethex+0xe8>
 8019526:	eba6 0309 	sub.w	r3, r6, r9
 801952a:	3b01      	subs	r3, #1
 801952c:	4629      	mov	r1, r5
 801952e:	2b07      	cmp	r3, #7
 8019530:	dc0a      	bgt.n	8019548 <__gethex+0x14c>
 8019532:	9801      	ldr	r0, [sp, #4]
 8019534:	f000 fa46 	bl	80199c4 <_Balloc>
 8019538:	4604      	mov	r4, r0
 801953a:	b940      	cbnz	r0, 801954e <__gethex+0x152>
 801953c:	4b5c      	ldr	r3, [pc, #368]	@ (80196b0 <__gethex+0x2b4>)
 801953e:	4602      	mov	r2, r0
 8019540:	21e4      	movs	r1, #228	@ 0xe4
 8019542:	485c      	ldr	r0, [pc, #368]	@ (80196b4 <__gethex+0x2b8>)
 8019544:	f7ff f832 	bl	80185ac <__assert_func>
 8019548:	3101      	adds	r1, #1
 801954a:	105b      	asrs	r3, r3, #1
 801954c:	e7ef      	b.n	801952e <__gethex+0x132>
 801954e:	f100 0a14 	add.w	sl, r0, #20
 8019552:	2300      	movs	r3, #0
 8019554:	4655      	mov	r5, sl
 8019556:	469b      	mov	fp, r3
 8019558:	45b1      	cmp	r9, r6
 801955a:	d337      	bcc.n	80195cc <__gethex+0x1d0>
 801955c:	f845 bb04 	str.w	fp, [r5], #4
 8019560:	eba5 050a 	sub.w	r5, r5, sl
 8019564:	10ad      	asrs	r5, r5, #2
 8019566:	6125      	str	r5, [r4, #16]
 8019568:	4658      	mov	r0, fp
 801956a:	f000 fb1d 	bl	8019ba8 <__hi0bits>
 801956e:	016d      	lsls	r5, r5, #5
 8019570:	f8d8 6000 	ldr.w	r6, [r8]
 8019574:	1a2d      	subs	r5, r5, r0
 8019576:	42b5      	cmp	r5, r6
 8019578:	dd54      	ble.n	8019624 <__gethex+0x228>
 801957a:	1bad      	subs	r5, r5, r6
 801957c:	4629      	mov	r1, r5
 801957e:	4620      	mov	r0, r4
 8019580:	f000 fea9 	bl	801a2d6 <__any_on>
 8019584:	4681      	mov	r9, r0
 8019586:	b178      	cbz	r0, 80195a8 <__gethex+0x1ac>
 8019588:	1e6b      	subs	r3, r5, #1
 801958a:	1159      	asrs	r1, r3, #5
 801958c:	f003 021f 	and.w	r2, r3, #31
 8019590:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019594:	f04f 0901 	mov.w	r9, #1
 8019598:	fa09 f202 	lsl.w	r2, r9, r2
 801959c:	420a      	tst	r2, r1
 801959e:	d003      	beq.n	80195a8 <__gethex+0x1ac>
 80195a0:	454b      	cmp	r3, r9
 80195a2:	dc36      	bgt.n	8019612 <__gethex+0x216>
 80195a4:	f04f 0902 	mov.w	r9, #2
 80195a8:	4629      	mov	r1, r5
 80195aa:	4620      	mov	r0, r4
 80195ac:	f7ff febe 	bl	801932c <rshift>
 80195b0:	442f      	add	r7, r5
 80195b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80195b6:	42bb      	cmp	r3, r7
 80195b8:	da42      	bge.n	8019640 <__gethex+0x244>
 80195ba:	9801      	ldr	r0, [sp, #4]
 80195bc:	4621      	mov	r1, r4
 80195be:	f000 fa41 	bl	8019a44 <_Bfree>
 80195c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80195c4:	2300      	movs	r3, #0
 80195c6:	6013      	str	r3, [r2, #0]
 80195c8:	25a3      	movs	r5, #163	@ 0xa3
 80195ca:	e793      	b.n	80194f4 <__gethex+0xf8>
 80195cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80195d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80195d2:	d012      	beq.n	80195fa <__gethex+0x1fe>
 80195d4:	2b20      	cmp	r3, #32
 80195d6:	d104      	bne.n	80195e2 <__gethex+0x1e6>
 80195d8:	f845 bb04 	str.w	fp, [r5], #4
 80195dc:	f04f 0b00 	mov.w	fp, #0
 80195e0:	465b      	mov	r3, fp
 80195e2:	7830      	ldrb	r0, [r6, #0]
 80195e4:	9303      	str	r3, [sp, #12]
 80195e6:	f7ff fef3 	bl	80193d0 <__hexdig_fun>
 80195ea:	9b03      	ldr	r3, [sp, #12]
 80195ec:	f000 000f 	and.w	r0, r0, #15
 80195f0:	4098      	lsls	r0, r3
 80195f2:	ea4b 0b00 	orr.w	fp, fp, r0
 80195f6:	3304      	adds	r3, #4
 80195f8:	e7ae      	b.n	8019558 <__gethex+0x15c>
 80195fa:	45b1      	cmp	r9, r6
 80195fc:	d8ea      	bhi.n	80195d4 <__gethex+0x1d8>
 80195fe:	492b      	ldr	r1, [pc, #172]	@ (80196ac <__gethex+0x2b0>)
 8019600:	9303      	str	r3, [sp, #12]
 8019602:	2201      	movs	r2, #1
 8019604:	4630      	mov	r0, r6
 8019606:	f7fe fea0 	bl	801834a <strncmp>
 801960a:	9b03      	ldr	r3, [sp, #12]
 801960c:	2800      	cmp	r0, #0
 801960e:	d1e1      	bne.n	80195d4 <__gethex+0x1d8>
 8019610:	e7a2      	b.n	8019558 <__gethex+0x15c>
 8019612:	1ea9      	subs	r1, r5, #2
 8019614:	4620      	mov	r0, r4
 8019616:	f000 fe5e 	bl	801a2d6 <__any_on>
 801961a:	2800      	cmp	r0, #0
 801961c:	d0c2      	beq.n	80195a4 <__gethex+0x1a8>
 801961e:	f04f 0903 	mov.w	r9, #3
 8019622:	e7c1      	b.n	80195a8 <__gethex+0x1ac>
 8019624:	da09      	bge.n	801963a <__gethex+0x23e>
 8019626:	1b75      	subs	r5, r6, r5
 8019628:	4621      	mov	r1, r4
 801962a:	9801      	ldr	r0, [sp, #4]
 801962c:	462a      	mov	r2, r5
 801962e:	f000 fc19 	bl	8019e64 <__lshift>
 8019632:	1b7f      	subs	r7, r7, r5
 8019634:	4604      	mov	r4, r0
 8019636:	f100 0a14 	add.w	sl, r0, #20
 801963a:	f04f 0900 	mov.w	r9, #0
 801963e:	e7b8      	b.n	80195b2 <__gethex+0x1b6>
 8019640:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019644:	42bd      	cmp	r5, r7
 8019646:	dd6f      	ble.n	8019728 <__gethex+0x32c>
 8019648:	1bed      	subs	r5, r5, r7
 801964a:	42ae      	cmp	r6, r5
 801964c:	dc34      	bgt.n	80196b8 <__gethex+0x2bc>
 801964e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019652:	2b02      	cmp	r3, #2
 8019654:	d022      	beq.n	801969c <__gethex+0x2a0>
 8019656:	2b03      	cmp	r3, #3
 8019658:	d024      	beq.n	80196a4 <__gethex+0x2a8>
 801965a:	2b01      	cmp	r3, #1
 801965c:	d115      	bne.n	801968a <__gethex+0x28e>
 801965e:	42ae      	cmp	r6, r5
 8019660:	d113      	bne.n	801968a <__gethex+0x28e>
 8019662:	2e01      	cmp	r6, #1
 8019664:	d10b      	bne.n	801967e <__gethex+0x282>
 8019666:	9a02      	ldr	r2, [sp, #8]
 8019668:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801966c:	6013      	str	r3, [r2, #0]
 801966e:	2301      	movs	r3, #1
 8019670:	6123      	str	r3, [r4, #16]
 8019672:	f8ca 3000 	str.w	r3, [sl]
 8019676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019678:	2562      	movs	r5, #98	@ 0x62
 801967a:	601c      	str	r4, [r3, #0]
 801967c:	e73a      	b.n	80194f4 <__gethex+0xf8>
 801967e:	1e71      	subs	r1, r6, #1
 8019680:	4620      	mov	r0, r4
 8019682:	f000 fe28 	bl	801a2d6 <__any_on>
 8019686:	2800      	cmp	r0, #0
 8019688:	d1ed      	bne.n	8019666 <__gethex+0x26a>
 801968a:	9801      	ldr	r0, [sp, #4]
 801968c:	4621      	mov	r1, r4
 801968e:	f000 f9d9 	bl	8019a44 <_Bfree>
 8019692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019694:	2300      	movs	r3, #0
 8019696:	6013      	str	r3, [r2, #0]
 8019698:	2550      	movs	r5, #80	@ 0x50
 801969a:	e72b      	b.n	80194f4 <__gethex+0xf8>
 801969c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d1f3      	bne.n	801968a <__gethex+0x28e>
 80196a2:	e7e0      	b.n	8019666 <__gethex+0x26a>
 80196a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d1dd      	bne.n	8019666 <__gethex+0x26a>
 80196aa:	e7ee      	b.n	801968a <__gethex+0x28e>
 80196ac:	0801f0fc 	.word	0x0801f0fc
 80196b0:	0801f251 	.word	0x0801f251
 80196b4:	0801f262 	.word	0x0801f262
 80196b8:	1e6f      	subs	r7, r5, #1
 80196ba:	f1b9 0f00 	cmp.w	r9, #0
 80196be:	d130      	bne.n	8019722 <__gethex+0x326>
 80196c0:	b127      	cbz	r7, 80196cc <__gethex+0x2d0>
 80196c2:	4639      	mov	r1, r7
 80196c4:	4620      	mov	r0, r4
 80196c6:	f000 fe06 	bl	801a2d6 <__any_on>
 80196ca:	4681      	mov	r9, r0
 80196cc:	117a      	asrs	r2, r7, #5
 80196ce:	2301      	movs	r3, #1
 80196d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80196d4:	f007 071f 	and.w	r7, r7, #31
 80196d8:	40bb      	lsls	r3, r7
 80196da:	4213      	tst	r3, r2
 80196dc:	4629      	mov	r1, r5
 80196de:	4620      	mov	r0, r4
 80196e0:	bf18      	it	ne
 80196e2:	f049 0902 	orrne.w	r9, r9, #2
 80196e6:	f7ff fe21 	bl	801932c <rshift>
 80196ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80196ee:	1b76      	subs	r6, r6, r5
 80196f0:	2502      	movs	r5, #2
 80196f2:	f1b9 0f00 	cmp.w	r9, #0
 80196f6:	d047      	beq.n	8019788 <__gethex+0x38c>
 80196f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80196fc:	2b02      	cmp	r3, #2
 80196fe:	d015      	beq.n	801972c <__gethex+0x330>
 8019700:	2b03      	cmp	r3, #3
 8019702:	d017      	beq.n	8019734 <__gethex+0x338>
 8019704:	2b01      	cmp	r3, #1
 8019706:	d109      	bne.n	801971c <__gethex+0x320>
 8019708:	f019 0f02 	tst.w	r9, #2
 801970c:	d006      	beq.n	801971c <__gethex+0x320>
 801970e:	f8da 3000 	ldr.w	r3, [sl]
 8019712:	ea49 0903 	orr.w	r9, r9, r3
 8019716:	f019 0f01 	tst.w	r9, #1
 801971a:	d10e      	bne.n	801973a <__gethex+0x33e>
 801971c:	f045 0510 	orr.w	r5, r5, #16
 8019720:	e032      	b.n	8019788 <__gethex+0x38c>
 8019722:	f04f 0901 	mov.w	r9, #1
 8019726:	e7d1      	b.n	80196cc <__gethex+0x2d0>
 8019728:	2501      	movs	r5, #1
 801972a:	e7e2      	b.n	80196f2 <__gethex+0x2f6>
 801972c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801972e:	f1c3 0301 	rsb	r3, r3, #1
 8019732:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019736:	2b00      	cmp	r3, #0
 8019738:	d0f0      	beq.n	801971c <__gethex+0x320>
 801973a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801973e:	f104 0314 	add.w	r3, r4, #20
 8019742:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019746:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801974a:	f04f 0c00 	mov.w	ip, #0
 801974e:	4618      	mov	r0, r3
 8019750:	f853 2b04 	ldr.w	r2, [r3], #4
 8019754:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019758:	d01b      	beq.n	8019792 <__gethex+0x396>
 801975a:	3201      	adds	r2, #1
 801975c:	6002      	str	r2, [r0, #0]
 801975e:	2d02      	cmp	r5, #2
 8019760:	f104 0314 	add.w	r3, r4, #20
 8019764:	d13c      	bne.n	80197e0 <__gethex+0x3e4>
 8019766:	f8d8 2000 	ldr.w	r2, [r8]
 801976a:	3a01      	subs	r2, #1
 801976c:	42b2      	cmp	r2, r6
 801976e:	d109      	bne.n	8019784 <__gethex+0x388>
 8019770:	1171      	asrs	r1, r6, #5
 8019772:	2201      	movs	r2, #1
 8019774:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019778:	f006 061f 	and.w	r6, r6, #31
 801977c:	fa02 f606 	lsl.w	r6, r2, r6
 8019780:	421e      	tst	r6, r3
 8019782:	d13a      	bne.n	80197fa <__gethex+0x3fe>
 8019784:	f045 0520 	orr.w	r5, r5, #32
 8019788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801978a:	601c      	str	r4, [r3, #0]
 801978c:	9b02      	ldr	r3, [sp, #8]
 801978e:	601f      	str	r7, [r3, #0]
 8019790:	e6b0      	b.n	80194f4 <__gethex+0xf8>
 8019792:	4299      	cmp	r1, r3
 8019794:	f843 cc04 	str.w	ip, [r3, #-4]
 8019798:	d8d9      	bhi.n	801974e <__gethex+0x352>
 801979a:	68a3      	ldr	r3, [r4, #8]
 801979c:	459b      	cmp	fp, r3
 801979e:	db17      	blt.n	80197d0 <__gethex+0x3d4>
 80197a0:	6861      	ldr	r1, [r4, #4]
 80197a2:	9801      	ldr	r0, [sp, #4]
 80197a4:	3101      	adds	r1, #1
 80197a6:	f000 f90d 	bl	80199c4 <_Balloc>
 80197aa:	4681      	mov	r9, r0
 80197ac:	b918      	cbnz	r0, 80197b6 <__gethex+0x3ba>
 80197ae:	4b1a      	ldr	r3, [pc, #104]	@ (8019818 <__gethex+0x41c>)
 80197b0:	4602      	mov	r2, r0
 80197b2:	2184      	movs	r1, #132	@ 0x84
 80197b4:	e6c5      	b.n	8019542 <__gethex+0x146>
 80197b6:	6922      	ldr	r2, [r4, #16]
 80197b8:	3202      	adds	r2, #2
 80197ba:	f104 010c 	add.w	r1, r4, #12
 80197be:	0092      	lsls	r2, r2, #2
 80197c0:	300c      	adds	r0, #12
 80197c2:	f7fe fed6 	bl	8018572 <memcpy>
 80197c6:	4621      	mov	r1, r4
 80197c8:	9801      	ldr	r0, [sp, #4]
 80197ca:	f000 f93b 	bl	8019a44 <_Bfree>
 80197ce:	464c      	mov	r4, r9
 80197d0:	6923      	ldr	r3, [r4, #16]
 80197d2:	1c5a      	adds	r2, r3, #1
 80197d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80197d8:	6122      	str	r2, [r4, #16]
 80197da:	2201      	movs	r2, #1
 80197dc:	615a      	str	r2, [r3, #20]
 80197de:	e7be      	b.n	801975e <__gethex+0x362>
 80197e0:	6922      	ldr	r2, [r4, #16]
 80197e2:	455a      	cmp	r2, fp
 80197e4:	dd0b      	ble.n	80197fe <__gethex+0x402>
 80197e6:	2101      	movs	r1, #1
 80197e8:	4620      	mov	r0, r4
 80197ea:	f7ff fd9f 	bl	801932c <rshift>
 80197ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80197f2:	3701      	adds	r7, #1
 80197f4:	42bb      	cmp	r3, r7
 80197f6:	f6ff aee0 	blt.w	80195ba <__gethex+0x1be>
 80197fa:	2501      	movs	r5, #1
 80197fc:	e7c2      	b.n	8019784 <__gethex+0x388>
 80197fe:	f016 061f 	ands.w	r6, r6, #31
 8019802:	d0fa      	beq.n	80197fa <__gethex+0x3fe>
 8019804:	4453      	add	r3, sl
 8019806:	f1c6 0620 	rsb	r6, r6, #32
 801980a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801980e:	f000 f9cb 	bl	8019ba8 <__hi0bits>
 8019812:	42b0      	cmp	r0, r6
 8019814:	dbe7      	blt.n	80197e6 <__gethex+0x3ea>
 8019816:	e7f0      	b.n	80197fa <__gethex+0x3fe>
 8019818:	0801f251 	.word	0x0801f251

0801981c <L_shift>:
 801981c:	f1c2 0208 	rsb	r2, r2, #8
 8019820:	0092      	lsls	r2, r2, #2
 8019822:	b570      	push	{r4, r5, r6, lr}
 8019824:	f1c2 0620 	rsb	r6, r2, #32
 8019828:	6843      	ldr	r3, [r0, #4]
 801982a:	6804      	ldr	r4, [r0, #0]
 801982c:	fa03 f506 	lsl.w	r5, r3, r6
 8019830:	432c      	orrs	r4, r5
 8019832:	40d3      	lsrs	r3, r2
 8019834:	6004      	str	r4, [r0, #0]
 8019836:	f840 3f04 	str.w	r3, [r0, #4]!
 801983a:	4288      	cmp	r0, r1
 801983c:	d3f4      	bcc.n	8019828 <L_shift+0xc>
 801983e:	bd70      	pop	{r4, r5, r6, pc}

08019840 <__match>:
 8019840:	b530      	push	{r4, r5, lr}
 8019842:	6803      	ldr	r3, [r0, #0]
 8019844:	3301      	adds	r3, #1
 8019846:	f811 4b01 	ldrb.w	r4, [r1], #1
 801984a:	b914      	cbnz	r4, 8019852 <__match+0x12>
 801984c:	6003      	str	r3, [r0, #0]
 801984e:	2001      	movs	r0, #1
 8019850:	bd30      	pop	{r4, r5, pc}
 8019852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019856:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801985a:	2d19      	cmp	r5, #25
 801985c:	bf98      	it	ls
 801985e:	3220      	addls	r2, #32
 8019860:	42a2      	cmp	r2, r4
 8019862:	d0f0      	beq.n	8019846 <__match+0x6>
 8019864:	2000      	movs	r0, #0
 8019866:	e7f3      	b.n	8019850 <__match+0x10>

08019868 <__hexnan>:
 8019868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801986c:	680b      	ldr	r3, [r1, #0]
 801986e:	6801      	ldr	r1, [r0, #0]
 8019870:	115e      	asrs	r6, r3, #5
 8019872:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019876:	f013 031f 	ands.w	r3, r3, #31
 801987a:	b087      	sub	sp, #28
 801987c:	bf18      	it	ne
 801987e:	3604      	addne	r6, #4
 8019880:	2500      	movs	r5, #0
 8019882:	1f37      	subs	r7, r6, #4
 8019884:	4682      	mov	sl, r0
 8019886:	4690      	mov	r8, r2
 8019888:	9301      	str	r3, [sp, #4]
 801988a:	f846 5c04 	str.w	r5, [r6, #-4]
 801988e:	46b9      	mov	r9, r7
 8019890:	463c      	mov	r4, r7
 8019892:	9502      	str	r5, [sp, #8]
 8019894:	46ab      	mov	fp, r5
 8019896:	784a      	ldrb	r2, [r1, #1]
 8019898:	1c4b      	adds	r3, r1, #1
 801989a:	9303      	str	r3, [sp, #12]
 801989c:	b342      	cbz	r2, 80198f0 <__hexnan+0x88>
 801989e:	4610      	mov	r0, r2
 80198a0:	9105      	str	r1, [sp, #20]
 80198a2:	9204      	str	r2, [sp, #16]
 80198a4:	f7ff fd94 	bl	80193d0 <__hexdig_fun>
 80198a8:	2800      	cmp	r0, #0
 80198aa:	d151      	bne.n	8019950 <__hexnan+0xe8>
 80198ac:	9a04      	ldr	r2, [sp, #16]
 80198ae:	9905      	ldr	r1, [sp, #20]
 80198b0:	2a20      	cmp	r2, #32
 80198b2:	d818      	bhi.n	80198e6 <__hexnan+0x7e>
 80198b4:	9b02      	ldr	r3, [sp, #8]
 80198b6:	459b      	cmp	fp, r3
 80198b8:	dd13      	ble.n	80198e2 <__hexnan+0x7a>
 80198ba:	454c      	cmp	r4, r9
 80198bc:	d206      	bcs.n	80198cc <__hexnan+0x64>
 80198be:	2d07      	cmp	r5, #7
 80198c0:	dc04      	bgt.n	80198cc <__hexnan+0x64>
 80198c2:	462a      	mov	r2, r5
 80198c4:	4649      	mov	r1, r9
 80198c6:	4620      	mov	r0, r4
 80198c8:	f7ff ffa8 	bl	801981c <L_shift>
 80198cc:	4544      	cmp	r4, r8
 80198ce:	d952      	bls.n	8019976 <__hexnan+0x10e>
 80198d0:	2300      	movs	r3, #0
 80198d2:	f1a4 0904 	sub.w	r9, r4, #4
 80198d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80198da:	f8cd b008 	str.w	fp, [sp, #8]
 80198de:	464c      	mov	r4, r9
 80198e0:	461d      	mov	r5, r3
 80198e2:	9903      	ldr	r1, [sp, #12]
 80198e4:	e7d7      	b.n	8019896 <__hexnan+0x2e>
 80198e6:	2a29      	cmp	r2, #41	@ 0x29
 80198e8:	d157      	bne.n	801999a <__hexnan+0x132>
 80198ea:	3102      	adds	r1, #2
 80198ec:	f8ca 1000 	str.w	r1, [sl]
 80198f0:	f1bb 0f00 	cmp.w	fp, #0
 80198f4:	d051      	beq.n	801999a <__hexnan+0x132>
 80198f6:	454c      	cmp	r4, r9
 80198f8:	d206      	bcs.n	8019908 <__hexnan+0xa0>
 80198fa:	2d07      	cmp	r5, #7
 80198fc:	dc04      	bgt.n	8019908 <__hexnan+0xa0>
 80198fe:	462a      	mov	r2, r5
 8019900:	4649      	mov	r1, r9
 8019902:	4620      	mov	r0, r4
 8019904:	f7ff ff8a 	bl	801981c <L_shift>
 8019908:	4544      	cmp	r4, r8
 801990a:	d936      	bls.n	801997a <__hexnan+0x112>
 801990c:	f1a8 0204 	sub.w	r2, r8, #4
 8019910:	4623      	mov	r3, r4
 8019912:	f853 1b04 	ldr.w	r1, [r3], #4
 8019916:	f842 1f04 	str.w	r1, [r2, #4]!
 801991a:	429f      	cmp	r7, r3
 801991c:	d2f9      	bcs.n	8019912 <__hexnan+0xaa>
 801991e:	1b3b      	subs	r3, r7, r4
 8019920:	f023 0303 	bic.w	r3, r3, #3
 8019924:	3304      	adds	r3, #4
 8019926:	3401      	adds	r4, #1
 8019928:	3e03      	subs	r6, #3
 801992a:	42b4      	cmp	r4, r6
 801992c:	bf88      	it	hi
 801992e:	2304      	movhi	r3, #4
 8019930:	4443      	add	r3, r8
 8019932:	2200      	movs	r2, #0
 8019934:	f843 2b04 	str.w	r2, [r3], #4
 8019938:	429f      	cmp	r7, r3
 801993a:	d2fb      	bcs.n	8019934 <__hexnan+0xcc>
 801993c:	683b      	ldr	r3, [r7, #0]
 801993e:	b91b      	cbnz	r3, 8019948 <__hexnan+0xe0>
 8019940:	4547      	cmp	r7, r8
 8019942:	d128      	bne.n	8019996 <__hexnan+0x12e>
 8019944:	2301      	movs	r3, #1
 8019946:	603b      	str	r3, [r7, #0]
 8019948:	2005      	movs	r0, #5
 801994a:	b007      	add	sp, #28
 801994c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019950:	3501      	adds	r5, #1
 8019952:	2d08      	cmp	r5, #8
 8019954:	f10b 0b01 	add.w	fp, fp, #1
 8019958:	dd06      	ble.n	8019968 <__hexnan+0x100>
 801995a:	4544      	cmp	r4, r8
 801995c:	d9c1      	bls.n	80198e2 <__hexnan+0x7a>
 801995e:	2300      	movs	r3, #0
 8019960:	f844 3c04 	str.w	r3, [r4, #-4]
 8019964:	2501      	movs	r5, #1
 8019966:	3c04      	subs	r4, #4
 8019968:	6822      	ldr	r2, [r4, #0]
 801996a:	f000 000f 	and.w	r0, r0, #15
 801996e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019972:	6020      	str	r0, [r4, #0]
 8019974:	e7b5      	b.n	80198e2 <__hexnan+0x7a>
 8019976:	2508      	movs	r5, #8
 8019978:	e7b3      	b.n	80198e2 <__hexnan+0x7a>
 801997a:	9b01      	ldr	r3, [sp, #4]
 801997c:	2b00      	cmp	r3, #0
 801997e:	d0dd      	beq.n	801993c <__hexnan+0xd4>
 8019980:	f1c3 0320 	rsb	r3, r3, #32
 8019984:	f04f 32ff 	mov.w	r2, #4294967295
 8019988:	40da      	lsrs	r2, r3
 801998a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801998e:	4013      	ands	r3, r2
 8019990:	f846 3c04 	str.w	r3, [r6, #-4]
 8019994:	e7d2      	b.n	801993c <__hexnan+0xd4>
 8019996:	3f04      	subs	r7, #4
 8019998:	e7d0      	b.n	801993c <__hexnan+0xd4>
 801999a:	2004      	movs	r0, #4
 801999c:	e7d5      	b.n	801994a <__hexnan+0xe2>

0801999e <__ascii_mbtowc>:
 801999e:	b082      	sub	sp, #8
 80199a0:	b901      	cbnz	r1, 80199a4 <__ascii_mbtowc+0x6>
 80199a2:	a901      	add	r1, sp, #4
 80199a4:	b142      	cbz	r2, 80199b8 <__ascii_mbtowc+0x1a>
 80199a6:	b14b      	cbz	r3, 80199bc <__ascii_mbtowc+0x1e>
 80199a8:	7813      	ldrb	r3, [r2, #0]
 80199aa:	600b      	str	r3, [r1, #0]
 80199ac:	7812      	ldrb	r2, [r2, #0]
 80199ae:	1e10      	subs	r0, r2, #0
 80199b0:	bf18      	it	ne
 80199b2:	2001      	movne	r0, #1
 80199b4:	b002      	add	sp, #8
 80199b6:	4770      	bx	lr
 80199b8:	4610      	mov	r0, r2
 80199ba:	e7fb      	b.n	80199b4 <__ascii_mbtowc+0x16>
 80199bc:	f06f 0001 	mvn.w	r0, #1
 80199c0:	e7f8      	b.n	80199b4 <__ascii_mbtowc+0x16>
	...

080199c4 <_Balloc>:
 80199c4:	b570      	push	{r4, r5, r6, lr}
 80199c6:	69c6      	ldr	r6, [r0, #28]
 80199c8:	4604      	mov	r4, r0
 80199ca:	460d      	mov	r5, r1
 80199cc:	b976      	cbnz	r6, 80199ec <_Balloc+0x28>
 80199ce:	2010      	movs	r0, #16
 80199d0:	f7fc fd40 	bl	8016454 <malloc>
 80199d4:	4602      	mov	r2, r0
 80199d6:	61e0      	str	r0, [r4, #28]
 80199d8:	b920      	cbnz	r0, 80199e4 <_Balloc+0x20>
 80199da:	4b18      	ldr	r3, [pc, #96]	@ (8019a3c <_Balloc+0x78>)
 80199dc:	4818      	ldr	r0, [pc, #96]	@ (8019a40 <_Balloc+0x7c>)
 80199de:	216b      	movs	r1, #107	@ 0x6b
 80199e0:	f7fe fde4 	bl	80185ac <__assert_func>
 80199e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80199e8:	6006      	str	r6, [r0, #0]
 80199ea:	60c6      	str	r6, [r0, #12]
 80199ec:	69e6      	ldr	r6, [r4, #28]
 80199ee:	68f3      	ldr	r3, [r6, #12]
 80199f0:	b183      	cbz	r3, 8019a14 <_Balloc+0x50>
 80199f2:	69e3      	ldr	r3, [r4, #28]
 80199f4:	68db      	ldr	r3, [r3, #12]
 80199f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80199fa:	b9b8      	cbnz	r0, 8019a2c <_Balloc+0x68>
 80199fc:	2101      	movs	r1, #1
 80199fe:	fa01 f605 	lsl.w	r6, r1, r5
 8019a02:	1d72      	adds	r2, r6, #5
 8019a04:	0092      	lsls	r2, r2, #2
 8019a06:	4620      	mov	r0, r4
 8019a08:	f000 fec9 	bl	801a79e <_calloc_r>
 8019a0c:	b160      	cbz	r0, 8019a28 <_Balloc+0x64>
 8019a0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019a12:	e00e      	b.n	8019a32 <_Balloc+0x6e>
 8019a14:	2221      	movs	r2, #33	@ 0x21
 8019a16:	2104      	movs	r1, #4
 8019a18:	4620      	mov	r0, r4
 8019a1a:	f000 fec0 	bl	801a79e <_calloc_r>
 8019a1e:	69e3      	ldr	r3, [r4, #28]
 8019a20:	60f0      	str	r0, [r6, #12]
 8019a22:	68db      	ldr	r3, [r3, #12]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d1e4      	bne.n	80199f2 <_Balloc+0x2e>
 8019a28:	2000      	movs	r0, #0
 8019a2a:	bd70      	pop	{r4, r5, r6, pc}
 8019a2c:	6802      	ldr	r2, [r0, #0]
 8019a2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019a32:	2300      	movs	r3, #0
 8019a34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019a38:	e7f7      	b.n	8019a2a <_Balloc+0x66>
 8019a3a:	bf00      	nop
 8019a3c:	0801f137 	.word	0x0801f137
 8019a40:	0801f2c2 	.word	0x0801f2c2

08019a44 <_Bfree>:
 8019a44:	b570      	push	{r4, r5, r6, lr}
 8019a46:	69c6      	ldr	r6, [r0, #28]
 8019a48:	4605      	mov	r5, r0
 8019a4a:	460c      	mov	r4, r1
 8019a4c:	b976      	cbnz	r6, 8019a6c <_Bfree+0x28>
 8019a4e:	2010      	movs	r0, #16
 8019a50:	f7fc fd00 	bl	8016454 <malloc>
 8019a54:	4602      	mov	r2, r0
 8019a56:	61e8      	str	r0, [r5, #28]
 8019a58:	b920      	cbnz	r0, 8019a64 <_Bfree+0x20>
 8019a5a:	4b09      	ldr	r3, [pc, #36]	@ (8019a80 <_Bfree+0x3c>)
 8019a5c:	4809      	ldr	r0, [pc, #36]	@ (8019a84 <_Bfree+0x40>)
 8019a5e:	218f      	movs	r1, #143	@ 0x8f
 8019a60:	f7fe fda4 	bl	80185ac <__assert_func>
 8019a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019a68:	6006      	str	r6, [r0, #0]
 8019a6a:	60c6      	str	r6, [r0, #12]
 8019a6c:	b13c      	cbz	r4, 8019a7e <_Bfree+0x3a>
 8019a6e:	69eb      	ldr	r3, [r5, #28]
 8019a70:	6862      	ldr	r2, [r4, #4]
 8019a72:	68db      	ldr	r3, [r3, #12]
 8019a74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019a78:	6021      	str	r1, [r4, #0]
 8019a7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019a7e:	bd70      	pop	{r4, r5, r6, pc}
 8019a80:	0801f137 	.word	0x0801f137
 8019a84:	0801f2c2 	.word	0x0801f2c2

08019a88 <__multadd>:
 8019a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a8c:	690d      	ldr	r5, [r1, #16]
 8019a8e:	4607      	mov	r7, r0
 8019a90:	460c      	mov	r4, r1
 8019a92:	461e      	mov	r6, r3
 8019a94:	f101 0c14 	add.w	ip, r1, #20
 8019a98:	2000      	movs	r0, #0
 8019a9a:	f8dc 3000 	ldr.w	r3, [ip]
 8019a9e:	b299      	uxth	r1, r3
 8019aa0:	fb02 6101 	mla	r1, r2, r1, r6
 8019aa4:	0c1e      	lsrs	r6, r3, #16
 8019aa6:	0c0b      	lsrs	r3, r1, #16
 8019aa8:	fb02 3306 	mla	r3, r2, r6, r3
 8019aac:	b289      	uxth	r1, r1
 8019aae:	3001      	adds	r0, #1
 8019ab0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019ab4:	4285      	cmp	r5, r0
 8019ab6:	f84c 1b04 	str.w	r1, [ip], #4
 8019aba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019abe:	dcec      	bgt.n	8019a9a <__multadd+0x12>
 8019ac0:	b30e      	cbz	r6, 8019b06 <__multadd+0x7e>
 8019ac2:	68a3      	ldr	r3, [r4, #8]
 8019ac4:	42ab      	cmp	r3, r5
 8019ac6:	dc19      	bgt.n	8019afc <__multadd+0x74>
 8019ac8:	6861      	ldr	r1, [r4, #4]
 8019aca:	4638      	mov	r0, r7
 8019acc:	3101      	adds	r1, #1
 8019ace:	f7ff ff79 	bl	80199c4 <_Balloc>
 8019ad2:	4680      	mov	r8, r0
 8019ad4:	b928      	cbnz	r0, 8019ae2 <__multadd+0x5a>
 8019ad6:	4602      	mov	r2, r0
 8019ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8019b0c <__multadd+0x84>)
 8019ada:	480d      	ldr	r0, [pc, #52]	@ (8019b10 <__multadd+0x88>)
 8019adc:	21ba      	movs	r1, #186	@ 0xba
 8019ade:	f7fe fd65 	bl	80185ac <__assert_func>
 8019ae2:	6922      	ldr	r2, [r4, #16]
 8019ae4:	3202      	adds	r2, #2
 8019ae6:	f104 010c 	add.w	r1, r4, #12
 8019aea:	0092      	lsls	r2, r2, #2
 8019aec:	300c      	adds	r0, #12
 8019aee:	f7fe fd40 	bl	8018572 <memcpy>
 8019af2:	4621      	mov	r1, r4
 8019af4:	4638      	mov	r0, r7
 8019af6:	f7ff ffa5 	bl	8019a44 <_Bfree>
 8019afa:	4644      	mov	r4, r8
 8019afc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019b00:	3501      	adds	r5, #1
 8019b02:	615e      	str	r6, [r3, #20]
 8019b04:	6125      	str	r5, [r4, #16]
 8019b06:	4620      	mov	r0, r4
 8019b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b0c:	0801f251 	.word	0x0801f251
 8019b10:	0801f2c2 	.word	0x0801f2c2

08019b14 <__s2b>:
 8019b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b18:	460c      	mov	r4, r1
 8019b1a:	4615      	mov	r5, r2
 8019b1c:	461f      	mov	r7, r3
 8019b1e:	2209      	movs	r2, #9
 8019b20:	3308      	adds	r3, #8
 8019b22:	4606      	mov	r6, r0
 8019b24:	fb93 f3f2 	sdiv	r3, r3, r2
 8019b28:	2100      	movs	r1, #0
 8019b2a:	2201      	movs	r2, #1
 8019b2c:	429a      	cmp	r2, r3
 8019b2e:	db09      	blt.n	8019b44 <__s2b+0x30>
 8019b30:	4630      	mov	r0, r6
 8019b32:	f7ff ff47 	bl	80199c4 <_Balloc>
 8019b36:	b940      	cbnz	r0, 8019b4a <__s2b+0x36>
 8019b38:	4602      	mov	r2, r0
 8019b3a:	4b19      	ldr	r3, [pc, #100]	@ (8019ba0 <__s2b+0x8c>)
 8019b3c:	4819      	ldr	r0, [pc, #100]	@ (8019ba4 <__s2b+0x90>)
 8019b3e:	21d3      	movs	r1, #211	@ 0xd3
 8019b40:	f7fe fd34 	bl	80185ac <__assert_func>
 8019b44:	0052      	lsls	r2, r2, #1
 8019b46:	3101      	adds	r1, #1
 8019b48:	e7f0      	b.n	8019b2c <__s2b+0x18>
 8019b4a:	9b08      	ldr	r3, [sp, #32]
 8019b4c:	6143      	str	r3, [r0, #20]
 8019b4e:	2d09      	cmp	r5, #9
 8019b50:	f04f 0301 	mov.w	r3, #1
 8019b54:	6103      	str	r3, [r0, #16]
 8019b56:	dd16      	ble.n	8019b86 <__s2b+0x72>
 8019b58:	f104 0909 	add.w	r9, r4, #9
 8019b5c:	46c8      	mov	r8, r9
 8019b5e:	442c      	add	r4, r5
 8019b60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019b64:	4601      	mov	r1, r0
 8019b66:	3b30      	subs	r3, #48	@ 0x30
 8019b68:	220a      	movs	r2, #10
 8019b6a:	4630      	mov	r0, r6
 8019b6c:	f7ff ff8c 	bl	8019a88 <__multadd>
 8019b70:	45a0      	cmp	r8, r4
 8019b72:	d1f5      	bne.n	8019b60 <__s2b+0x4c>
 8019b74:	f1a5 0408 	sub.w	r4, r5, #8
 8019b78:	444c      	add	r4, r9
 8019b7a:	1b2d      	subs	r5, r5, r4
 8019b7c:	1963      	adds	r3, r4, r5
 8019b7e:	42bb      	cmp	r3, r7
 8019b80:	db04      	blt.n	8019b8c <__s2b+0x78>
 8019b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b86:	340a      	adds	r4, #10
 8019b88:	2509      	movs	r5, #9
 8019b8a:	e7f6      	b.n	8019b7a <__s2b+0x66>
 8019b8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019b90:	4601      	mov	r1, r0
 8019b92:	3b30      	subs	r3, #48	@ 0x30
 8019b94:	220a      	movs	r2, #10
 8019b96:	4630      	mov	r0, r6
 8019b98:	f7ff ff76 	bl	8019a88 <__multadd>
 8019b9c:	e7ee      	b.n	8019b7c <__s2b+0x68>
 8019b9e:	bf00      	nop
 8019ba0:	0801f251 	.word	0x0801f251
 8019ba4:	0801f2c2 	.word	0x0801f2c2

08019ba8 <__hi0bits>:
 8019ba8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8019bac:	4603      	mov	r3, r0
 8019bae:	bf36      	itet	cc
 8019bb0:	0403      	lslcc	r3, r0, #16
 8019bb2:	2000      	movcs	r0, #0
 8019bb4:	2010      	movcc	r0, #16
 8019bb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8019bba:	bf3c      	itt	cc
 8019bbc:	021b      	lslcc	r3, r3, #8
 8019bbe:	3008      	addcc	r0, #8
 8019bc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019bc4:	bf3c      	itt	cc
 8019bc6:	011b      	lslcc	r3, r3, #4
 8019bc8:	3004      	addcc	r0, #4
 8019bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019bce:	bf3c      	itt	cc
 8019bd0:	009b      	lslcc	r3, r3, #2
 8019bd2:	3002      	addcc	r0, #2
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	db05      	blt.n	8019be4 <__hi0bits+0x3c>
 8019bd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8019bdc:	f100 0001 	add.w	r0, r0, #1
 8019be0:	bf08      	it	eq
 8019be2:	2020      	moveq	r0, #32
 8019be4:	4770      	bx	lr

08019be6 <__lo0bits>:
 8019be6:	6803      	ldr	r3, [r0, #0]
 8019be8:	4602      	mov	r2, r0
 8019bea:	f013 0007 	ands.w	r0, r3, #7
 8019bee:	d00b      	beq.n	8019c08 <__lo0bits+0x22>
 8019bf0:	07d9      	lsls	r1, r3, #31
 8019bf2:	d421      	bmi.n	8019c38 <__lo0bits+0x52>
 8019bf4:	0798      	lsls	r0, r3, #30
 8019bf6:	bf49      	itett	mi
 8019bf8:	085b      	lsrmi	r3, r3, #1
 8019bfa:	089b      	lsrpl	r3, r3, #2
 8019bfc:	2001      	movmi	r0, #1
 8019bfe:	6013      	strmi	r3, [r2, #0]
 8019c00:	bf5c      	itt	pl
 8019c02:	6013      	strpl	r3, [r2, #0]
 8019c04:	2002      	movpl	r0, #2
 8019c06:	4770      	bx	lr
 8019c08:	b299      	uxth	r1, r3
 8019c0a:	b909      	cbnz	r1, 8019c10 <__lo0bits+0x2a>
 8019c0c:	0c1b      	lsrs	r3, r3, #16
 8019c0e:	2010      	movs	r0, #16
 8019c10:	b2d9      	uxtb	r1, r3
 8019c12:	b909      	cbnz	r1, 8019c18 <__lo0bits+0x32>
 8019c14:	3008      	adds	r0, #8
 8019c16:	0a1b      	lsrs	r3, r3, #8
 8019c18:	0719      	lsls	r1, r3, #28
 8019c1a:	bf04      	itt	eq
 8019c1c:	091b      	lsreq	r3, r3, #4
 8019c1e:	3004      	addeq	r0, #4
 8019c20:	0799      	lsls	r1, r3, #30
 8019c22:	bf04      	itt	eq
 8019c24:	089b      	lsreq	r3, r3, #2
 8019c26:	3002      	addeq	r0, #2
 8019c28:	07d9      	lsls	r1, r3, #31
 8019c2a:	d403      	bmi.n	8019c34 <__lo0bits+0x4e>
 8019c2c:	085b      	lsrs	r3, r3, #1
 8019c2e:	f100 0001 	add.w	r0, r0, #1
 8019c32:	d003      	beq.n	8019c3c <__lo0bits+0x56>
 8019c34:	6013      	str	r3, [r2, #0]
 8019c36:	4770      	bx	lr
 8019c38:	2000      	movs	r0, #0
 8019c3a:	4770      	bx	lr
 8019c3c:	2020      	movs	r0, #32
 8019c3e:	4770      	bx	lr

08019c40 <__i2b>:
 8019c40:	b510      	push	{r4, lr}
 8019c42:	460c      	mov	r4, r1
 8019c44:	2101      	movs	r1, #1
 8019c46:	f7ff febd 	bl	80199c4 <_Balloc>
 8019c4a:	4602      	mov	r2, r0
 8019c4c:	b928      	cbnz	r0, 8019c5a <__i2b+0x1a>
 8019c4e:	4b05      	ldr	r3, [pc, #20]	@ (8019c64 <__i2b+0x24>)
 8019c50:	4805      	ldr	r0, [pc, #20]	@ (8019c68 <__i2b+0x28>)
 8019c52:	f240 1145 	movw	r1, #325	@ 0x145
 8019c56:	f7fe fca9 	bl	80185ac <__assert_func>
 8019c5a:	2301      	movs	r3, #1
 8019c5c:	6144      	str	r4, [r0, #20]
 8019c5e:	6103      	str	r3, [r0, #16]
 8019c60:	bd10      	pop	{r4, pc}
 8019c62:	bf00      	nop
 8019c64:	0801f251 	.word	0x0801f251
 8019c68:	0801f2c2 	.word	0x0801f2c2

08019c6c <__multiply>:
 8019c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c70:	4617      	mov	r7, r2
 8019c72:	690a      	ldr	r2, [r1, #16]
 8019c74:	693b      	ldr	r3, [r7, #16]
 8019c76:	429a      	cmp	r2, r3
 8019c78:	bfa8      	it	ge
 8019c7a:	463b      	movge	r3, r7
 8019c7c:	4689      	mov	r9, r1
 8019c7e:	bfa4      	itt	ge
 8019c80:	460f      	movge	r7, r1
 8019c82:	4699      	movge	r9, r3
 8019c84:	693d      	ldr	r5, [r7, #16]
 8019c86:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019c8a:	68bb      	ldr	r3, [r7, #8]
 8019c8c:	6879      	ldr	r1, [r7, #4]
 8019c8e:	eb05 060a 	add.w	r6, r5, sl
 8019c92:	42b3      	cmp	r3, r6
 8019c94:	b085      	sub	sp, #20
 8019c96:	bfb8      	it	lt
 8019c98:	3101      	addlt	r1, #1
 8019c9a:	f7ff fe93 	bl	80199c4 <_Balloc>
 8019c9e:	b930      	cbnz	r0, 8019cae <__multiply+0x42>
 8019ca0:	4602      	mov	r2, r0
 8019ca2:	4b41      	ldr	r3, [pc, #260]	@ (8019da8 <__multiply+0x13c>)
 8019ca4:	4841      	ldr	r0, [pc, #260]	@ (8019dac <__multiply+0x140>)
 8019ca6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8019caa:	f7fe fc7f 	bl	80185ac <__assert_func>
 8019cae:	f100 0414 	add.w	r4, r0, #20
 8019cb2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8019cb6:	4623      	mov	r3, r4
 8019cb8:	2200      	movs	r2, #0
 8019cba:	4573      	cmp	r3, lr
 8019cbc:	d320      	bcc.n	8019d00 <__multiply+0x94>
 8019cbe:	f107 0814 	add.w	r8, r7, #20
 8019cc2:	f109 0114 	add.w	r1, r9, #20
 8019cc6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8019cca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8019cce:	9302      	str	r3, [sp, #8]
 8019cd0:	1beb      	subs	r3, r5, r7
 8019cd2:	3b15      	subs	r3, #21
 8019cd4:	f023 0303 	bic.w	r3, r3, #3
 8019cd8:	3304      	adds	r3, #4
 8019cda:	3715      	adds	r7, #21
 8019cdc:	42bd      	cmp	r5, r7
 8019cde:	bf38      	it	cc
 8019ce0:	2304      	movcc	r3, #4
 8019ce2:	9301      	str	r3, [sp, #4]
 8019ce4:	9b02      	ldr	r3, [sp, #8]
 8019ce6:	9103      	str	r1, [sp, #12]
 8019ce8:	428b      	cmp	r3, r1
 8019cea:	d80c      	bhi.n	8019d06 <__multiply+0x9a>
 8019cec:	2e00      	cmp	r6, #0
 8019cee:	dd03      	ble.n	8019cf8 <__multiply+0x8c>
 8019cf0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d055      	beq.n	8019da4 <__multiply+0x138>
 8019cf8:	6106      	str	r6, [r0, #16]
 8019cfa:	b005      	add	sp, #20
 8019cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d00:	f843 2b04 	str.w	r2, [r3], #4
 8019d04:	e7d9      	b.n	8019cba <__multiply+0x4e>
 8019d06:	f8b1 a000 	ldrh.w	sl, [r1]
 8019d0a:	f1ba 0f00 	cmp.w	sl, #0
 8019d0e:	d01f      	beq.n	8019d50 <__multiply+0xe4>
 8019d10:	46c4      	mov	ip, r8
 8019d12:	46a1      	mov	r9, r4
 8019d14:	2700      	movs	r7, #0
 8019d16:	f85c 2b04 	ldr.w	r2, [ip], #4
 8019d1a:	f8d9 3000 	ldr.w	r3, [r9]
 8019d1e:	fa1f fb82 	uxth.w	fp, r2
 8019d22:	b29b      	uxth	r3, r3
 8019d24:	fb0a 330b 	mla	r3, sl, fp, r3
 8019d28:	443b      	add	r3, r7
 8019d2a:	f8d9 7000 	ldr.w	r7, [r9]
 8019d2e:	0c12      	lsrs	r2, r2, #16
 8019d30:	0c3f      	lsrs	r7, r7, #16
 8019d32:	fb0a 7202 	mla	r2, sl, r2, r7
 8019d36:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8019d3a:	b29b      	uxth	r3, r3
 8019d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019d40:	4565      	cmp	r5, ip
 8019d42:	f849 3b04 	str.w	r3, [r9], #4
 8019d46:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8019d4a:	d8e4      	bhi.n	8019d16 <__multiply+0xaa>
 8019d4c:	9b01      	ldr	r3, [sp, #4]
 8019d4e:	50e7      	str	r7, [r4, r3]
 8019d50:	9b03      	ldr	r3, [sp, #12]
 8019d52:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8019d56:	3104      	adds	r1, #4
 8019d58:	f1b9 0f00 	cmp.w	r9, #0
 8019d5c:	d020      	beq.n	8019da0 <__multiply+0x134>
 8019d5e:	6823      	ldr	r3, [r4, #0]
 8019d60:	4647      	mov	r7, r8
 8019d62:	46a4      	mov	ip, r4
 8019d64:	f04f 0a00 	mov.w	sl, #0
 8019d68:	f8b7 b000 	ldrh.w	fp, [r7]
 8019d6c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8019d70:	fb09 220b 	mla	r2, r9, fp, r2
 8019d74:	4452      	add	r2, sl
 8019d76:	b29b      	uxth	r3, r3
 8019d78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019d7c:	f84c 3b04 	str.w	r3, [ip], #4
 8019d80:	f857 3b04 	ldr.w	r3, [r7], #4
 8019d84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019d88:	f8bc 3000 	ldrh.w	r3, [ip]
 8019d8c:	fb09 330a 	mla	r3, r9, sl, r3
 8019d90:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8019d94:	42bd      	cmp	r5, r7
 8019d96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019d9a:	d8e5      	bhi.n	8019d68 <__multiply+0xfc>
 8019d9c:	9a01      	ldr	r2, [sp, #4]
 8019d9e:	50a3      	str	r3, [r4, r2]
 8019da0:	3404      	adds	r4, #4
 8019da2:	e79f      	b.n	8019ce4 <__multiply+0x78>
 8019da4:	3e01      	subs	r6, #1
 8019da6:	e7a1      	b.n	8019cec <__multiply+0x80>
 8019da8:	0801f251 	.word	0x0801f251
 8019dac:	0801f2c2 	.word	0x0801f2c2

08019db0 <__pow5mult>:
 8019db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019db4:	4615      	mov	r5, r2
 8019db6:	f012 0203 	ands.w	r2, r2, #3
 8019dba:	4607      	mov	r7, r0
 8019dbc:	460e      	mov	r6, r1
 8019dbe:	d007      	beq.n	8019dd0 <__pow5mult+0x20>
 8019dc0:	4c25      	ldr	r4, [pc, #148]	@ (8019e58 <__pow5mult+0xa8>)
 8019dc2:	3a01      	subs	r2, #1
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019dca:	f7ff fe5d 	bl	8019a88 <__multadd>
 8019dce:	4606      	mov	r6, r0
 8019dd0:	10ad      	asrs	r5, r5, #2
 8019dd2:	d03d      	beq.n	8019e50 <__pow5mult+0xa0>
 8019dd4:	69fc      	ldr	r4, [r7, #28]
 8019dd6:	b97c      	cbnz	r4, 8019df8 <__pow5mult+0x48>
 8019dd8:	2010      	movs	r0, #16
 8019dda:	f7fc fb3b 	bl	8016454 <malloc>
 8019dde:	4602      	mov	r2, r0
 8019de0:	61f8      	str	r0, [r7, #28]
 8019de2:	b928      	cbnz	r0, 8019df0 <__pow5mult+0x40>
 8019de4:	4b1d      	ldr	r3, [pc, #116]	@ (8019e5c <__pow5mult+0xac>)
 8019de6:	481e      	ldr	r0, [pc, #120]	@ (8019e60 <__pow5mult+0xb0>)
 8019de8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8019dec:	f7fe fbde 	bl	80185ac <__assert_func>
 8019df0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019df4:	6004      	str	r4, [r0, #0]
 8019df6:	60c4      	str	r4, [r0, #12]
 8019df8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8019dfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019e00:	b94c      	cbnz	r4, 8019e16 <__pow5mult+0x66>
 8019e02:	f240 2171 	movw	r1, #625	@ 0x271
 8019e06:	4638      	mov	r0, r7
 8019e08:	f7ff ff1a 	bl	8019c40 <__i2b>
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019e12:	4604      	mov	r4, r0
 8019e14:	6003      	str	r3, [r0, #0]
 8019e16:	f04f 0900 	mov.w	r9, #0
 8019e1a:	07eb      	lsls	r3, r5, #31
 8019e1c:	d50a      	bpl.n	8019e34 <__pow5mult+0x84>
 8019e1e:	4631      	mov	r1, r6
 8019e20:	4622      	mov	r2, r4
 8019e22:	4638      	mov	r0, r7
 8019e24:	f7ff ff22 	bl	8019c6c <__multiply>
 8019e28:	4631      	mov	r1, r6
 8019e2a:	4680      	mov	r8, r0
 8019e2c:	4638      	mov	r0, r7
 8019e2e:	f7ff fe09 	bl	8019a44 <_Bfree>
 8019e32:	4646      	mov	r6, r8
 8019e34:	106d      	asrs	r5, r5, #1
 8019e36:	d00b      	beq.n	8019e50 <__pow5mult+0xa0>
 8019e38:	6820      	ldr	r0, [r4, #0]
 8019e3a:	b938      	cbnz	r0, 8019e4c <__pow5mult+0x9c>
 8019e3c:	4622      	mov	r2, r4
 8019e3e:	4621      	mov	r1, r4
 8019e40:	4638      	mov	r0, r7
 8019e42:	f7ff ff13 	bl	8019c6c <__multiply>
 8019e46:	6020      	str	r0, [r4, #0]
 8019e48:	f8c0 9000 	str.w	r9, [r0]
 8019e4c:	4604      	mov	r4, r0
 8019e4e:	e7e4      	b.n	8019e1a <__pow5mult+0x6a>
 8019e50:	4630      	mov	r0, r6
 8019e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e56:	bf00      	nop
 8019e58:	0801f484 	.word	0x0801f484
 8019e5c:	0801f137 	.word	0x0801f137
 8019e60:	0801f2c2 	.word	0x0801f2c2

08019e64 <__lshift>:
 8019e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e68:	460c      	mov	r4, r1
 8019e6a:	6849      	ldr	r1, [r1, #4]
 8019e6c:	6923      	ldr	r3, [r4, #16]
 8019e6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019e72:	68a3      	ldr	r3, [r4, #8]
 8019e74:	4607      	mov	r7, r0
 8019e76:	4691      	mov	r9, r2
 8019e78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019e7c:	f108 0601 	add.w	r6, r8, #1
 8019e80:	42b3      	cmp	r3, r6
 8019e82:	db0b      	blt.n	8019e9c <__lshift+0x38>
 8019e84:	4638      	mov	r0, r7
 8019e86:	f7ff fd9d 	bl	80199c4 <_Balloc>
 8019e8a:	4605      	mov	r5, r0
 8019e8c:	b948      	cbnz	r0, 8019ea2 <__lshift+0x3e>
 8019e8e:	4602      	mov	r2, r0
 8019e90:	4b28      	ldr	r3, [pc, #160]	@ (8019f34 <__lshift+0xd0>)
 8019e92:	4829      	ldr	r0, [pc, #164]	@ (8019f38 <__lshift+0xd4>)
 8019e94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8019e98:	f7fe fb88 	bl	80185ac <__assert_func>
 8019e9c:	3101      	adds	r1, #1
 8019e9e:	005b      	lsls	r3, r3, #1
 8019ea0:	e7ee      	b.n	8019e80 <__lshift+0x1c>
 8019ea2:	2300      	movs	r3, #0
 8019ea4:	f100 0114 	add.w	r1, r0, #20
 8019ea8:	f100 0210 	add.w	r2, r0, #16
 8019eac:	4618      	mov	r0, r3
 8019eae:	4553      	cmp	r3, sl
 8019eb0:	db33      	blt.n	8019f1a <__lshift+0xb6>
 8019eb2:	6920      	ldr	r0, [r4, #16]
 8019eb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019eb8:	f104 0314 	add.w	r3, r4, #20
 8019ebc:	f019 091f 	ands.w	r9, r9, #31
 8019ec0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019ec4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019ec8:	d02b      	beq.n	8019f22 <__lshift+0xbe>
 8019eca:	f1c9 0e20 	rsb	lr, r9, #32
 8019ece:	468a      	mov	sl, r1
 8019ed0:	2200      	movs	r2, #0
 8019ed2:	6818      	ldr	r0, [r3, #0]
 8019ed4:	fa00 f009 	lsl.w	r0, r0, r9
 8019ed8:	4310      	orrs	r0, r2
 8019eda:	f84a 0b04 	str.w	r0, [sl], #4
 8019ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ee2:	459c      	cmp	ip, r3
 8019ee4:	fa22 f20e 	lsr.w	r2, r2, lr
 8019ee8:	d8f3      	bhi.n	8019ed2 <__lshift+0x6e>
 8019eea:	ebac 0304 	sub.w	r3, ip, r4
 8019eee:	3b15      	subs	r3, #21
 8019ef0:	f023 0303 	bic.w	r3, r3, #3
 8019ef4:	3304      	adds	r3, #4
 8019ef6:	f104 0015 	add.w	r0, r4, #21
 8019efa:	4560      	cmp	r0, ip
 8019efc:	bf88      	it	hi
 8019efe:	2304      	movhi	r3, #4
 8019f00:	50ca      	str	r2, [r1, r3]
 8019f02:	b10a      	cbz	r2, 8019f08 <__lshift+0xa4>
 8019f04:	f108 0602 	add.w	r6, r8, #2
 8019f08:	3e01      	subs	r6, #1
 8019f0a:	4638      	mov	r0, r7
 8019f0c:	612e      	str	r6, [r5, #16]
 8019f0e:	4621      	mov	r1, r4
 8019f10:	f7ff fd98 	bl	8019a44 <_Bfree>
 8019f14:	4628      	mov	r0, r5
 8019f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8019f1e:	3301      	adds	r3, #1
 8019f20:	e7c5      	b.n	8019eae <__lshift+0x4a>
 8019f22:	3904      	subs	r1, #4
 8019f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f28:	f841 2f04 	str.w	r2, [r1, #4]!
 8019f2c:	459c      	cmp	ip, r3
 8019f2e:	d8f9      	bhi.n	8019f24 <__lshift+0xc0>
 8019f30:	e7ea      	b.n	8019f08 <__lshift+0xa4>
 8019f32:	bf00      	nop
 8019f34:	0801f251 	.word	0x0801f251
 8019f38:	0801f2c2 	.word	0x0801f2c2

08019f3c <__mcmp>:
 8019f3c:	690a      	ldr	r2, [r1, #16]
 8019f3e:	4603      	mov	r3, r0
 8019f40:	6900      	ldr	r0, [r0, #16]
 8019f42:	1a80      	subs	r0, r0, r2
 8019f44:	b530      	push	{r4, r5, lr}
 8019f46:	d10e      	bne.n	8019f66 <__mcmp+0x2a>
 8019f48:	3314      	adds	r3, #20
 8019f4a:	3114      	adds	r1, #20
 8019f4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8019f50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019f54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019f58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019f5c:	4295      	cmp	r5, r2
 8019f5e:	d003      	beq.n	8019f68 <__mcmp+0x2c>
 8019f60:	d205      	bcs.n	8019f6e <__mcmp+0x32>
 8019f62:	f04f 30ff 	mov.w	r0, #4294967295
 8019f66:	bd30      	pop	{r4, r5, pc}
 8019f68:	42a3      	cmp	r3, r4
 8019f6a:	d3f3      	bcc.n	8019f54 <__mcmp+0x18>
 8019f6c:	e7fb      	b.n	8019f66 <__mcmp+0x2a>
 8019f6e:	2001      	movs	r0, #1
 8019f70:	e7f9      	b.n	8019f66 <__mcmp+0x2a>
	...

08019f74 <__mdiff>:
 8019f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f78:	4689      	mov	r9, r1
 8019f7a:	4606      	mov	r6, r0
 8019f7c:	4611      	mov	r1, r2
 8019f7e:	4648      	mov	r0, r9
 8019f80:	4614      	mov	r4, r2
 8019f82:	f7ff ffdb 	bl	8019f3c <__mcmp>
 8019f86:	1e05      	subs	r5, r0, #0
 8019f88:	d112      	bne.n	8019fb0 <__mdiff+0x3c>
 8019f8a:	4629      	mov	r1, r5
 8019f8c:	4630      	mov	r0, r6
 8019f8e:	f7ff fd19 	bl	80199c4 <_Balloc>
 8019f92:	4602      	mov	r2, r0
 8019f94:	b928      	cbnz	r0, 8019fa2 <__mdiff+0x2e>
 8019f96:	4b3f      	ldr	r3, [pc, #252]	@ (801a094 <__mdiff+0x120>)
 8019f98:	f240 2137 	movw	r1, #567	@ 0x237
 8019f9c:	483e      	ldr	r0, [pc, #248]	@ (801a098 <__mdiff+0x124>)
 8019f9e:	f7fe fb05 	bl	80185ac <__assert_func>
 8019fa2:	2301      	movs	r3, #1
 8019fa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019fa8:	4610      	mov	r0, r2
 8019faa:	b003      	add	sp, #12
 8019fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fb0:	bfbc      	itt	lt
 8019fb2:	464b      	movlt	r3, r9
 8019fb4:	46a1      	movlt	r9, r4
 8019fb6:	4630      	mov	r0, r6
 8019fb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019fbc:	bfba      	itte	lt
 8019fbe:	461c      	movlt	r4, r3
 8019fc0:	2501      	movlt	r5, #1
 8019fc2:	2500      	movge	r5, #0
 8019fc4:	f7ff fcfe 	bl	80199c4 <_Balloc>
 8019fc8:	4602      	mov	r2, r0
 8019fca:	b918      	cbnz	r0, 8019fd4 <__mdiff+0x60>
 8019fcc:	4b31      	ldr	r3, [pc, #196]	@ (801a094 <__mdiff+0x120>)
 8019fce:	f240 2145 	movw	r1, #581	@ 0x245
 8019fd2:	e7e3      	b.n	8019f9c <__mdiff+0x28>
 8019fd4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8019fd8:	6926      	ldr	r6, [r4, #16]
 8019fda:	60c5      	str	r5, [r0, #12]
 8019fdc:	f109 0310 	add.w	r3, r9, #16
 8019fe0:	f109 0514 	add.w	r5, r9, #20
 8019fe4:	f104 0e14 	add.w	lr, r4, #20
 8019fe8:	f100 0b14 	add.w	fp, r0, #20
 8019fec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8019ff0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8019ff4:	9301      	str	r3, [sp, #4]
 8019ff6:	46d9      	mov	r9, fp
 8019ff8:	f04f 0c00 	mov.w	ip, #0
 8019ffc:	9b01      	ldr	r3, [sp, #4]
 8019ffe:	f85e 0b04 	ldr.w	r0, [lr], #4
 801a002:	f853 af04 	ldr.w	sl, [r3, #4]!
 801a006:	9301      	str	r3, [sp, #4]
 801a008:	fa1f f38a 	uxth.w	r3, sl
 801a00c:	4619      	mov	r1, r3
 801a00e:	b283      	uxth	r3, r0
 801a010:	1acb      	subs	r3, r1, r3
 801a012:	0c00      	lsrs	r0, r0, #16
 801a014:	4463      	add	r3, ip
 801a016:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801a01a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801a01e:	b29b      	uxth	r3, r3
 801a020:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a024:	4576      	cmp	r6, lr
 801a026:	f849 3b04 	str.w	r3, [r9], #4
 801a02a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a02e:	d8e5      	bhi.n	8019ffc <__mdiff+0x88>
 801a030:	1b33      	subs	r3, r6, r4
 801a032:	3b15      	subs	r3, #21
 801a034:	f023 0303 	bic.w	r3, r3, #3
 801a038:	3415      	adds	r4, #21
 801a03a:	3304      	adds	r3, #4
 801a03c:	42a6      	cmp	r6, r4
 801a03e:	bf38      	it	cc
 801a040:	2304      	movcc	r3, #4
 801a042:	441d      	add	r5, r3
 801a044:	445b      	add	r3, fp
 801a046:	461e      	mov	r6, r3
 801a048:	462c      	mov	r4, r5
 801a04a:	4544      	cmp	r4, r8
 801a04c:	d30e      	bcc.n	801a06c <__mdiff+0xf8>
 801a04e:	f108 0103 	add.w	r1, r8, #3
 801a052:	1b49      	subs	r1, r1, r5
 801a054:	f021 0103 	bic.w	r1, r1, #3
 801a058:	3d03      	subs	r5, #3
 801a05a:	45a8      	cmp	r8, r5
 801a05c:	bf38      	it	cc
 801a05e:	2100      	movcc	r1, #0
 801a060:	440b      	add	r3, r1
 801a062:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a066:	b191      	cbz	r1, 801a08e <__mdiff+0x11a>
 801a068:	6117      	str	r7, [r2, #16]
 801a06a:	e79d      	b.n	8019fa8 <__mdiff+0x34>
 801a06c:	f854 1b04 	ldr.w	r1, [r4], #4
 801a070:	46e6      	mov	lr, ip
 801a072:	0c08      	lsrs	r0, r1, #16
 801a074:	fa1c fc81 	uxtah	ip, ip, r1
 801a078:	4471      	add	r1, lr
 801a07a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801a07e:	b289      	uxth	r1, r1
 801a080:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801a084:	f846 1b04 	str.w	r1, [r6], #4
 801a088:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a08c:	e7dd      	b.n	801a04a <__mdiff+0xd6>
 801a08e:	3f01      	subs	r7, #1
 801a090:	e7e7      	b.n	801a062 <__mdiff+0xee>
 801a092:	bf00      	nop
 801a094:	0801f251 	.word	0x0801f251
 801a098:	0801f2c2 	.word	0x0801f2c2

0801a09c <__ulp>:
 801a09c:	b082      	sub	sp, #8
 801a09e:	ed8d 0b00 	vstr	d0, [sp]
 801a0a2:	9a01      	ldr	r2, [sp, #4]
 801a0a4:	4b0f      	ldr	r3, [pc, #60]	@ (801a0e4 <__ulp+0x48>)
 801a0a6:	4013      	ands	r3, r2
 801a0a8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	dc08      	bgt.n	801a0c2 <__ulp+0x26>
 801a0b0:	425b      	negs	r3, r3
 801a0b2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801a0b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a0ba:	da04      	bge.n	801a0c6 <__ulp+0x2a>
 801a0bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801a0c0:	4113      	asrs	r3, r2
 801a0c2:	2200      	movs	r2, #0
 801a0c4:	e008      	b.n	801a0d8 <__ulp+0x3c>
 801a0c6:	f1a2 0314 	sub.w	r3, r2, #20
 801a0ca:	2b1e      	cmp	r3, #30
 801a0cc:	bfda      	itte	le
 801a0ce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801a0d2:	40da      	lsrle	r2, r3
 801a0d4:	2201      	movgt	r2, #1
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	4619      	mov	r1, r3
 801a0da:	4610      	mov	r0, r2
 801a0dc:	ec41 0b10 	vmov	d0, r0, r1
 801a0e0:	b002      	add	sp, #8
 801a0e2:	4770      	bx	lr
 801a0e4:	7ff00000 	.word	0x7ff00000

0801a0e8 <__b2d>:
 801a0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0ec:	6906      	ldr	r6, [r0, #16]
 801a0ee:	f100 0814 	add.w	r8, r0, #20
 801a0f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801a0f6:	1f37      	subs	r7, r6, #4
 801a0f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a0fc:	4610      	mov	r0, r2
 801a0fe:	f7ff fd53 	bl	8019ba8 <__hi0bits>
 801a102:	f1c0 0320 	rsb	r3, r0, #32
 801a106:	280a      	cmp	r0, #10
 801a108:	600b      	str	r3, [r1, #0]
 801a10a:	491b      	ldr	r1, [pc, #108]	@ (801a178 <__b2d+0x90>)
 801a10c:	dc15      	bgt.n	801a13a <__b2d+0x52>
 801a10e:	f1c0 0c0b 	rsb	ip, r0, #11
 801a112:	fa22 f30c 	lsr.w	r3, r2, ip
 801a116:	45b8      	cmp	r8, r7
 801a118:	ea43 0501 	orr.w	r5, r3, r1
 801a11c:	bf34      	ite	cc
 801a11e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a122:	2300      	movcs	r3, #0
 801a124:	3015      	adds	r0, #21
 801a126:	fa02 f000 	lsl.w	r0, r2, r0
 801a12a:	fa23 f30c 	lsr.w	r3, r3, ip
 801a12e:	4303      	orrs	r3, r0
 801a130:	461c      	mov	r4, r3
 801a132:	ec45 4b10 	vmov	d0, r4, r5
 801a136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a13a:	45b8      	cmp	r8, r7
 801a13c:	bf3a      	itte	cc
 801a13e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a142:	f1a6 0708 	subcc.w	r7, r6, #8
 801a146:	2300      	movcs	r3, #0
 801a148:	380b      	subs	r0, #11
 801a14a:	d012      	beq.n	801a172 <__b2d+0x8a>
 801a14c:	f1c0 0120 	rsb	r1, r0, #32
 801a150:	fa23 f401 	lsr.w	r4, r3, r1
 801a154:	4082      	lsls	r2, r0
 801a156:	4322      	orrs	r2, r4
 801a158:	4547      	cmp	r7, r8
 801a15a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801a15e:	bf8c      	ite	hi
 801a160:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801a164:	2200      	movls	r2, #0
 801a166:	4083      	lsls	r3, r0
 801a168:	40ca      	lsrs	r2, r1
 801a16a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801a16e:	4313      	orrs	r3, r2
 801a170:	e7de      	b.n	801a130 <__b2d+0x48>
 801a172:	ea42 0501 	orr.w	r5, r2, r1
 801a176:	e7db      	b.n	801a130 <__b2d+0x48>
 801a178:	3ff00000 	.word	0x3ff00000

0801a17c <__d2b>:
 801a17c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a180:	460f      	mov	r7, r1
 801a182:	2101      	movs	r1, #1
 801a184:	ec59 8b10 	vmov	r8, r9, d0
 801a188:	4616      	mov	r6, r2
 801a18a:	f7ff fc1b 	bl	80199c4 <_Balloc>
 801a18e:	4604      	mov	r4, r0
 801a190:	b930      	cbnz	r0, 801a1a0 <__d2b+0x24>
 801a192:	4602      	mov	r2, r0
 801a194:	4b23      	ldr	r3, [pc, #140]	@ (801a224 <__d2b+0xa8>)
 801a196:	4824      	ldr	r0, [pc, #144]	@ (801a228 <__d2b+0xac>)
 801a198:	f240 310f 	movw	r1, #783	@ 0x30f
 801a19c:	f7fe fa06 	bl	80185ac <__assert_func>
 801a1a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a1a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a1a8:	b10d      	cbz	r5, 801a1ae <__d2b+0x32>
 801a1aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a1ae:	9301      	str	r3, [sp, #4]
 801a1b0:	f1b8 0300 	subs.w	r3, r8, #0
 801a1b4:	d023      	beq.n	801a1fe <__d2b+0x82>
 801a1b6:	4668      	mov	r0, sp
 801a1b8:	9300      	str	r3, [sp, #0]
 801a1ba:	f7ff fd14 	bl	8019be6 <__lo0bits>
 801a1be:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a1c2:	b1d0      	cbz	r0, 801a1fa <__d2b+0x7e>
 801a1c4:	f1c0 0320 	rsb	r3, r0, #32
 801a1c8:	fa02 f303 	lsl.w	r3, r2, r3
 801a1cc:	430b      	orrs	r3, r1
 801a1ce:	40c2      	lsrs	r2, r0
 801a1d0:	6163      	str	r3, [r4, #20]
 801a1d2:	9201      	str	r2, [sp, #4]
 801a1d4:	9b01      	ldr	r3, [sp, #4]
 801a1d6:	61a3      	str	r3, [r4, #24]
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	bf0c      	ite	eq
 801a1dc:	2201      	moveq	r2, #1
 801a1de:	2202      	movne	r2, #2
 801a1e0:	6122      	str	r2, [r4, #16]
 801a1e2:	b1a5      	cbz	r5, 801a20e <__d2b+0x92>
 801a1e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801a1e8:	4405      	add	r5, r0
 801a1ea:	603d      	str	r5, [r7, #0]
 801a1ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801a1f0:	6030      	str	r0, [r6, #0]
 801a1f2:	4620      	mov	r0, r4
 801a1f4:	b003      	add	sp, #12
 801a1f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a1fa:	6161      	str	r1, [r4, #20]
 801a1fc:	e7ea      	b.n	801a1d4 <__d2b+0x58>
 801a1fe:	a801      	add	r0, sp, #4
 801a200:	f7ff fcf1 	bl	8019be6 <__lo0bits>
 801a204:	9b01      	ldr	r3, [sp, #4]
 801a206:	6163      	str	r3, [r4, #20]
 801a208:	3020      	adds	r0, #32
 801a20a:	2201      	movs	r2, #1
 801a20c:	e7e8      	b.n	801a1e0 <__d2b+0x64>
 801a20e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a212:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801a216:	6038      	str	r0, [r7, #0]
 801a218:	6918      	ldr	r0, [r3, #16]
 801a21a:	f7ff fcc5 	bl	8019ba8 <__hi0bits>
 801a21e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a222:	e7e5      	b.n	801a1f0 <__d2b+0x74>
 801a224:	0801f251 	.word	0x0801f251
 801a228:	0801f2c2 	.word	0x0801f2c2

0801a22c <__ratio>:
 801a22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a230:	b085      	sub	sp, #20
 801a232:	e9cd 1000 	strd	r1, r0, [sp]
 801a236:	a902      	add	r1, sp, #8
 801a238:	f7ff ff56 	bl	801a0e8 <__b2d>
 801a23c:	9800      	ldr	r0, [sp, #0]
 801a23e:	a903      	add	r1, sp, #12
 801a240:	ec55 4b10 	vmov	r4, r5, d0
 801a244:	f7ff ff50 	bl	801a0e8 <__b2d>
 801a248:	9b01      	ldr	r3, [sp, #4]
 801a24a:	6919      	ldr	r1, [r3, #16]
 801a24c:	9b00      	ldr	r3, [sp, #0]
 801a24e:	691b      	ldr	r3, [r3, #16]
 801a250:	1ac9      	subs	r1, r1, r3
 801a252:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801a256:	1a9b      	subs	r3, r3, r2
 801a258:	ec5b ab10 	vmov	sl, fp, d0
 801a25c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801a260:	2b00      	cmp	r3, #0
 801a262:	bfce      	itee	gt
 801a264:	462a      	movgt	r2, r5
 801a266:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a26a:	465a      	movle	r2, fp
 801a26c:	462f      	mov	r7, r5
 801a26e:	46d9      	mov	r9, fp
 801a270:	bfcc      	ite	gt
 801a272:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a276:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801a27a:	464b      	mov	r3, r9
 801a27c:	4652      	mov	r2, sl
 801a27e:	4620      	mov	r0, r4
 801a280:	4639      	mov	r1, r7
 801a282:	f7e6 fabb 	bl	80007fc <__aeabi_ddiv>
 801a286:	ec41 0b10 	vmov	d0, r0, r1
 801a28a:	b005      	add	sp, #20
 801a28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a290 <__copybits>:
 801a290:	3901      	subs	r1, #1
 801a292:	b570      	push	{r4, r5, r6, lr}
 801a294:	1149      	asrs	r1, r1, #5
 801a296:	6914      	ldr	r4, [r2, #16]
 801a298:	3101      	adds	r1, #1
 801a29a:	f102 0314 	add.w	r3, r2, #20
 801a29e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a2a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a2a6:	1f05      	subs	r5, r0, #4
 801a2a8:	42a3      	cmp	r3, r4
 801a2aa:	d30c      	bcc.n	801a2c6 <__copybits+0x36>
 801a2ac:	1aa3      	subs	r3, r4, r2
 801a2ae:	3b11      	subs	r3, #17
 801a2b0:	f023 0303 	bic.w	r3, r3, #3
 801a2b4:	3211      	adds	r2, #17
 801a2b6:	42a2      	cmp	r2, r4
 801a2b8:	bf88      	it	hi
 801a2ba:	2300      	movhi	r3, #0
 801a2bc:	4418      	add	r0, r3
 801a2be:	2300      	movs	r3, #0
 801a2c0:	4288      	cmp	r0, r1
 801a2c2:	d305      	bcc.n	801a2d0 <__copybits+0x40>
 801a2c4:	bd70      	pop	{r4, r5, r6, pc}
 801a2c6:	f853 6b04 	ldr.w	r6, [r3], #4
 801a2ca:	f845 6f04 	str.w	r6, [r5, #4]!
 801a2ce:	e7eb      	b.n	801a2a8 <__copybits+0x18>
 801a2d0:	f840 3b04 	str.w	r3, [r0], #4
 801a2d4:	e7f4      	b.n	801a2c0 <__copybits+0x30>

0801a2d6 <__any_on>:
 801a2d6:	f100 0214 	add.w	r2, r0, #20
 801a2da:	6900      	ldr	r0, [r0, #16]
 801a2dc:	114b      	asrs	r3, r1, #5
 801a2de:	4298      	cmp	r0, r3
 801a2e0:	b510      	push	{r4, lr}
 801a2e2:	db11      	blt.n	801a308 <__any_on+0x32>
 801a2e4:	dd0a      	ble.n	801a2fc <__any_on+0x26>
 801a2e6:	f011 011f 	ands.w	r1, r1, #31
 801a2ea:	d007      	beq.n	801a2fc <__any_on+0x26>
 801a2ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a2f0:	fa24 f001 	lsr.w	r0, r4, r1
 801a2f4:	fa00 f101 	lsl.w	r1, r0, r1
 801a2f8:	428c      	cmp	r4, r1
 801a2fa:	d10b      	bne.n	801a314 <__any_on+0x3e>
 801a2fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a300:	4293      	cmp	r3, r2
 801a302:	d803      	bhi.n	801a30c <__any_on+0x36>
 801a304:	2000      	movs	r0, #0
 801a306:	bd10      	pop	{r4, pc}
 801a308:	4603      	mov	r3, r0
 801a30a:	e7f7      	b.n	801a2fc <__any_on+0x26>
 801a30c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a310:	2900      	cmp	r1, #0
 801a312:	d0f5      	beq.n	801a300 <__any_on+0x2a>
 801a314:	2001      	movs	r0, #1
 801a316:	e7f6      	b.n	801a306 <__any_on+0x30>

0801a318 <__ascii_wctomb>:
 801a318:	4603      	mov	r3, r0
 801a31a:	4608      	mov	r0, r1
 801a31c:	b141      	cbz	r1, 801a330 <__ascii_wctomb+0x18>
 801a31e:	2aff      	cmp	r2, #255	@ 0xff
 801a320:	d904      	bls.n	801a32c <__ascii_wctomb+0x14>
 801a322:	228a      	movs	r2, #138	@ 0x8a
 801a324:	601a      	str	r2, [r3, #0]
 801a326:	f04f 30ff 	mov.w	r0, #4294967295
 801a32a:	4770      	bx	lr
 801a32c:	700a      	strb	r2, [r1, #0]
 801a32e:	2001      	movs	r0, #1
 801a330:	4770      	bx	lr

0801a332 <__ssputs_r>:
 801a332:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a336:	688e      	ldr	r6, [r1, #8]
 801a338:	461f      	mov	r7, r3
 801a33a:	42be      	cmp	r6, r7
 801a33c:	680b      	ldr	r3, [r1, #0]
 801a33e:	4682      	mov	sl, r0
 801a340:	460c      	mov	r4, r1
 801a342:	4690      	mov	r8, r2
 801a344:	d82d      	bhi.n	801a3a2 <__ssputs_r+0x70>
 801a346:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a34a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a34e:	d026      	beq.n	801a39e <__ssputs_r+0x6c>
 801a350:	6965      	ldr	r5, [r4, #20]
 801a352:	6909      	ldr	r1, [r1, #16]
 801a354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a358:	eba3 0901 	sub.w	r9, r3, r1
 801a35c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a360:	1c7b      	adds	r3, r7, #1
 801a362:	444b      	add	r3, r9
 801a364:	106d      	asrs	r5, r5, #1
 801a366:	429d      	cmp	r5, r3
 801a368:	bf38      	it	cc
 801a36a:	461d      	movcc	r5, r3
 801a36c:	0553      	lsls	r3, r2, #21
 801a36e:	d527      	bpl.n	801a3c0 <__ssputs_r+0x8e>
 801a370:	4629      	mov	r1, r5
 801a372:	f7fc f8a1 	bl	80164b8 <_malloc_r>
 801a376:	4606      	mov	r6, r0
 801a378:	b360      	cbz	r0, 801a3d4 <__ssputs_r+0xa2>
 801a37a:	6921      	ldr	r1, [r4, #16]
 801a37c:	464a      	mov	r2, r9
 801a37e:	f7fe f8f8 	bl	8018572 <memcpy>
 801a382:	89a3      	ldrh	r3, [r4, #12]
 801a384:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a38c:	81a3      	strh	r3, [r4, #12]
 801a38e:	6126      	str	r6, [r4, #16]
 801a390:	6165      	str	r5, [r4, #20]
 801a392:	444e      	add	r6, r9
 801a394:	eba5 0509 	sub.w	r5, r5, r9
 801a398:	6026      	str	r6, [r4, #0]
 801a39a:	60a5      	str	r5, [r4, #8]
 801a39c:	463e      	mov	r6, r7
 801a39e:	42be      	cmp	r6, r7
 801a3a0:	d900      	bls.n	801a3a4 <__ssputs_r+0x72>
 801a3a2:	463e      	mov	r6, r7
 801a3a4:	6820      	ldr	r0, [r4, #0]
 801a3a6:	4632      	mov	r2, r6
 801a3a8:	4641      	mov	r1, r8
 801a3aa:	f000 f9d7 	bl	801a75c <memmove>
 801a3ae:	68a3      	ldr	r3, [r4, #8]
 801a3b0:	1b9b      	subs	r3, r3, r6
 801a3b2:	60a3      	str	r3, [r4, #8]
 801a3b4:	6823      	ldr	r3, [r4, #0]
 801a3b6:	4433      	add	r3, r6
 801a3b8:	6023      	str	r3, [r4, #0]
 801a3ba:	2000      	movs	r0, #0
 801a3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3c0:	462a      	mov	r2, r5
 801a3c2:	f000 fa00 	bl	801a7c6 <_realloc_r>
 801a3c6:	4606      	mov	r6, r0
 801a3c8:	2800      	cmp	r0, #0
 801a3ca:	d1e0      	bne.n	801a38e <__ssputs_r+0x5c>
 801a3cc:	6921      	ldr	r1, [r4, #16]
 801a3ce:	4650      	mov	r0, sl
 801a3d0:	f7fe ff62 	bl	8019298 <_free_r>
 801a3d4:	230c      	movs	r3, #12
 801a3d6:	f8ca 3000 	str.w	r3, [sl]
 801a3da:	89a3      	ldrh	r3, [r4, #12]
 801a3dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a3e0:	81a3      	strh	r3, [r4, #12]
 801a3e2:	f04f 30ff 	mov.w	r0, #4294967295
 801a3e6:	e7e9      	b.n	801a3bc <__ssputs_r+0x8a>

0801a3e8 <_svfiprintf_r>:
 801a3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3ec:	4698      	mov	r8, r3
 801a3ee:	898b      	ldrh	r3, [r1, #12]
 801a3f0:	061b      	lsls	r3, r3, #24
 801a3f2:	b09d      	sub	sp, #116	@ 0x74
 801a3f4:	4607      	mov	r7, r0
 801a3f6:	460d      	mov	r5, r1
 801a3f8:	4614      	mov	r4, r2
 801a3fa:	d510      	bpl.n	801a41e <_svfiprintf_r+0x36>
 801a3fc:	690b      	ldr	r3, [r1, #16]
 801a3fe:	b973      	cbnz	r3, 801a41e <_svfiprintf_r+0x36>
 801a400:	2140      	movs	r1, #64	@ 0x40
 801a402:	f7fc f859 	bl	80164b8 <_malloc_r>
 801a406:	6028      	str	r0, [r5, #0]
 801a408:	6128      	str	r0, [r5, #16]
 801a40a:	b930      	cbnz	r0, 801a41a <_svfiprintf_r+0x32>
 801a40c:	230c      	movs	r3, #12
 801a40e:	603b      	str	r3, [r7, #0]
 801a410:	f04f 30ff 	mov.w	r0, #4294967295
 801a414:	b01d      	add	sp, #116	@ 0x74
 801a416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a41a:	2340      	movs	r3, #64	@ 0x40
 801a41c:	616b      	str	r3, [r5, #20]
 801a41e:	2300      	movs	r3, #0
 801a420:	9309      	str	r3, [sp, #36]	@ 0x24
 801a422:	2320      	movs	r3, #32
 801a424:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a428:	f8cd 800c 	str.w	r8, [sp, #12]
 801a42c:	2330      	movs	r3, #48	@ 0x30
 801a42e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a5cc <_svfiprintf_r+0x1e4>
 801a432:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a436:	f04f 0901 	mov.w	r9, #1
 801a43a:	4623      	mov	r3, r4
 801a43c:	469a      	mov	sl, r3
 801a43e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a442:	b10a      	cbz	r2, 801a448 <_svfiprintf_r+0x60>
 801a444:	2a25      	cmp	r2, #37	@ 0x25
 801a446:	d1f9      	bne.n	801a43c <_svfiprintf_r+0x54>
 801a448:	ebba 0b04 	subs.w	fp, sl, r4
 801a44c:	d00b      	beq.n	801a466 <_svfiprintf_r+0x7e>
 801a44e:	465b      	mov	r3, fp
 801a450:	4622      	mov	r2, r4
 801a452:	4629      	mov	r1, r5
 801a454:	4638      	mov	r0, r7
 801a456:	f7ff ff6c 	bl	801a332 <__ssputs_r>
 801a45a:	3001      	adds	r0, #1
 801a45c:	f000 80a7 	beq.w	801a5ae <_svfiprintf_r+0x1c6>
 801a460:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a462:	445a      	add	r2, fp
 801a464:	9209      	str	r2, [sp, #36]	@ 0x24
 801a466:	f89a 3000 	ldrb.w	r3, [sl]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	f000 809f 	beq.w	801a5ae <_svfiprintf_r+0x1c6>
 801a470:	2300      	movs	r3, #0
 801a472:	f04f 32ff 	mov.w	r2, #4294967295
 801a476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a47a:	f10a 0a01 	add.w	sl, sl, #1
 801a47e:	9304      	str	r3, [sp, #16]
 801a480:	9307      	str	r3, [sp, #28]
 801a482:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a486:	931a      	str	r3, [sp, #104]	@ 0x68
 801a488:	4654      	mov	r4, sl
 801a48a:	2205      	movs	r2, #5
 801a48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a490:	484e      	ldr	r0, [pc, #312]	@ (801a5cc <_svfiprintf_r+0x1e4>)
 801a492:	f7e5 fe75 	bl	8000180 <memchr>
 801a496:	9a04      	ldr	r2, [sp, #16]
 801a498:	b9d8      	cbnz	r0, 801a4d2 <_svfiprintf_r+0xea>
 801a49a:	06d0      	lsls	r0, r2, #27
 801a49c:	bf44      	itt	mi
 801a49e:	2320      	movmi	r3, #32
 801a4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a4a4:	0711      	lsls	r1, r2, #28
 801a4a6:	bf44      	itt	mi
 801a4a8:	232b      	movmi	r3, #43	@ 0x2b
 801a4aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a4ae:	f89a 3000 	ldrb.w	r3, [sl]
 801a4b2:	2b2a      	cmp	r3, #42	@ 0x2a
 801a4b4:	d015      	beq.n	801a4e2 <_svfiprintf_r+0xfa>
 801a4b6:	9a07      	ldr	r2, [sp, #28]
 801a4b8:	4654      	mov	r4, sl
 801a4ba:	2000      	movs	r0, #0
 801a4bc:	f04f 0c0a 	mov.w	ip, #10
 801a4c0:	4621      	mov	r1, r4
 801a4c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a4c6:	3b30      	subs	r3, #48	@ 0x30
 801a4c8:	2b09      	cmp	r3, #9
 801a4ca:	d94b      	bls.n	801a564 <_svfiprintf_r+0x17c>
 801a4cc:	b1b0      	cbz	r0, 801a4fc <_svfiprintf_r+0x114>
 801a4ce:	9207      	str	r2, [sp, #28]
 801a4d0:	e014      	b.n	801a4fc <_svfiprintf_r+0x114>
 801a4d2:	eba0 0308 	sub.w	r3, r0, r8
 801a4d6:	fa09 f303 	lsl.w	r3, r9, r3
 801a4da:	4313      	orrs	r3, r2
 801a4dc:	9304      	str	r3, [sp, #16]
 801a4de:	46a2      	mov	sl, r4
 801a4e0:	e7d2      	b.n	801a488 <_svfiprintf_r+0xa0>
 801a4e2:	9b03      	ldr	r3, [sp, #12]
 801a4e4:	1d19      	adds	r1, r3, #4
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	9103      	str	r1, [sp, #12]
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	bfbb      	ittet	lt
 801a4ee:	425b      	neglt	r3, r3
 801a4f0:	f042 0202 	orrlt.w	r2, r2, #2
 801a4f4:	9307      	strge	r3, [sp, #28]
 801a4f6:	9307      	strlt	r3, [sp, #28]
 801a4f8:	bfb8      	it	lt
 801a4fa:	9204      	strlt	r2, [sp, #16]
 801a4fc:	7823      	ldrb	r3, [r4, #0]
 801a4fe:	2b2e      	cmp	r3, #46	@ 0x2e
 801a500:	d10a      	bne.n	801a518 <_svfiprintf_r+0x130>
 801a502:	7863      	ldrb	r3, [r4, #1]
 801a504:	2b2a      	cmp	r3, #42	@ 0x2a
 801a506:	d132      	bne.n	801a56e <_svfiprintf_r+0x186>
 801a508:	9b03      	ldr	r3, [sp, #12]
 801a50a:	1d1a      	adds	r2, r3, #4
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	9203      	str	r2, [sp, #12]
 801a510:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a514:	3402      	adds	r4, #2
 801a516:	9305      	str	r3, [sp, #20]
 801a518:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a5dc <_svfiprintf_r+0x1f4>
 801a51c:	7821      	ldrb	r1, [r4, #0]
 801a51e:	2203      	movs	r2, #3
 801a520:	4650      	mov	r0, sl
 801a522:	f7e5 fe2d 	bl	8000180 <memchr>
 801a526:	b138      	cbz	r0, 801a538 <_svfiprintf_r+0x150>
 801a528:	9b04      	ldr	r3, [sp, #16]
 801a52a:	eba0 000a 	sub.w	r0, r0, sl
 801a52e:	2240      	movs	r2, #64	@ 0x40
 801a530:	4082      	lsls	r2, r0
 801a532:	4313      	orrs	r3, r2
 801a534:	3401      	adds	r4, #1
 801a536:	9304      	str	r3, [sp, #16]
 801a538:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a53c:	4824      	ldr	r0, [pc, #144]	@ (801a5d0 <_svfiprintf_r+0x1e8>)
 801a53e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a542:	2206      	movs	r2, #6
 801a544:	f7e5 fe1c 	bl	8000180 <memchr>
 801a548:	2800      	cmp	r0, #0
 801a54a:	d036      	beq.n	801a5ba <_svfiprintf_r+0x1d2>
 801a54c:	4b21      	ldr	r3, [pc, #132]	@ (801a5d4 <_svfiprintf_r+0x1ec>)
 801a54e:	bb1b      	cbnz	r3, 801a598 <_svfiprintf_r+0x1b0>
 801a550:	9b03      	ldr	r3, [sp, #12]
 801a552:	3307      	adds	r3, #7
 801a554:	f023 0307 	bic.w	r3, r3, #7
 801a558:	3308      	adds	r3, #8
 801a55a:	9303      	str	r3, [sp, #12]
 801a55c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a55e:	4433      	add	r3, r6
 801a560:	9309      	str	r3, [sp, #36]	@ 0x24
 801a562:	e76a      	b.n	801a43a <_svfiprintf_r+0x52>
 801a564:	fb0c 3202 	mla	r2, ip, r2, r3
 801a568:	460c      	mov	r4, r1
 801a56a:	2001      	movs	r0, #1
 801a56c:	e7a8      	b.n	801a4c0 <_svfiprintf_r+0xd8>
 801a56e:	2300      	movs	r3, #0
 801a570:	3401      	adds	r4, #1
 801a572:	9305      	str	r3, [sp, #20]
 801a574:	4619      	mov	r1, r3
 801a576:	f04f 0c0a 	mov.w	ip, #10
 801a57a:	4620      	mov	r0, r4
 801a57c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a580:	3a30      	subs	r2, #48	@ 0x30
 801a582:	2a09      	cmp	r2, #9
 801a584:	d903      	bls.n	801a58e <_svfiprintf_r+0x1a6>
 801a586:	2b00      	cmp	r3, #0
 801a588:	d0c6      	beq.n	801a518 <_svfiprintf_r+0x130>
 801a58a:	9105      	str	r1, [sp, #20]
 801a58c:	e7c4      	b.n	801a518 <_svfiprintf_r+0x130>
 801a58e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a592:	4604      	mov	r4, r0
 801a594:	2301      	movs	r3, #1
 801a596:	e7f0      	b.n	801a57a <_svfiprintf_r+0x192>
 801a598:	ab03      	add	r3, sp, #12
 801a59a:	9300      	str	r3, [sp, #0]
 801a59c:	462a      	mov	r2, r5
 801a59e:	4b0e      	ldr	r3, [pc, #56]	@ (801a5d8 <_svfiprintf_r+0x1f0>)
 801a5a0:	a904      	add	r1, sp, #16
 801a5a2:	4638      	mov	r0, r7
 801a5a4:	f7fc ffa8 	bl	80174f8 <_printf_float>
 801a5a8:	1c42      	adds	r2, r0, #1
 801a5aa:	4606      	mov	r6, r0
 801a5ac:	d1d6      	bne.n	801a55c <_svfiprintf_r+0x174>
 801a5ae:	89ab      	ldrh	r3, [r5, #12]
 801a5b0:	065b      	lsls	r3, r3, #25
 801a5b2:	f53f af2d 	bmi.w	801a410 <_svfiprintf_r+0x28>
 801a5b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a5b8:	e72c      	b.n	801a414 <_svfiprintf_r+0x2c>
 801a5ba:	ab03      	add	r3, sp, #12
 801a5bc:	9300      	str	r3, [sp, #0]
 801a5be:	462a      	mov	r2, r5
 801a5c0:	4b05      	ldr	r3, [pc, #20]	@ (801a5d8 <_svfiprintf_r+0x1f0>)
 801a5c2:	a904      	add	r1, sp, #16
 801a5c4:	4638      	mov	r0, r7
 801a5c6:	f7fd fa2f 	bl	8017a28 <_printf_i>
 801a5ca:	e7ed      	b.n	801a5a8 <_svfiprintf_r+0x1c0>
 801a5cc:	0801f31b 	.word	0x0801f31b
 801a5d0:	0801f325 	.word	0x0801f325
 801a5d4:	080174f9 	.word	0x080174f9
 801a5d8:	0801a333 	.word	0x0801a333
 801a5dc:	0801f321 	.word	0x0801f321

0801a5e0 <__sflush_r>:
 801a5e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5e8:	0716      	lsls	r6, r2, #28
 801a5ea:	4605      	mov	r5, r0
 801a5ec:	460c      	mov	r4, r1
 801a5ee:	d454      	bmi.n	801a69a <__sflush_r+0xba>
 801a5f0:	684b      	ldr	r3, [r1, #4]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	dc02      	bgt.n	801a5fc <__sflush_r+0x1c>
 801a5f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	dd48      	ble.n	801a68e <__sflush_r+0xae>
 801a5fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a5fe:	2e00      	cmp	r6, #0
 801a600:	d045      	beq.n	801a68e <__sflush_r+0xae>
 801a602:	2300      	movs	r3, #0
 801a604:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a608:	682f      	ldr	r7, [r5, #0]
 801a60a:	6a21      	ldr	r1, [r4, #32]
 801a60c:	602b      	str	r3, [r5, #0]
 801a60e:	d030      	beq.n	801a672 <__sflush_r+0x92>
 801a610:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a612:	89a3      	ldrh	r3, [r4, #12]
 801a614:	0759      	lsls	r1, r3, #29
 801a616:	d505      	bpl.n	801a624 <__sflush_r+0x44>
 801a618:	6863      	ldr	r3, [r4, #4]
 801a61a:	1ad2      	subs	r2, r2, r3
 801a61c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a61e:	b10b      	cbz	r3, 801a624 <__sflush_r+0x44>
 801a620:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a622:	1ad2      	subs	r2, r2, r3
 801a624:	2300      	movs	r3, #0
 801a626:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a628:	6a21      	ldr	r1, [r4, #32]
 801a62a:	4628      	mov	r0, r5
 801a62c:	47b0      	blx	r6
 801a62e:	1c43      	adds	r3, r0, #1
 801a630:	89a3      	ldrh	r3, [r4, #12]
 801a632:	d106      	bne.n	801a642 <__sflush_r+0x62>
 801a634:	6829      	ldr	r1, [r5, #0]
 801a636:	291d      	cmp	r1, #29
 801a638:	d82b      	bhi.n	801a692 <__sflush_r+0xb2>
 801a63a:	4a2a      	ldr	r2, [pc, #168]	@ (801a6e4 <__sflush_r+0x104>)
 801a63c:	40ca      	lsrs	r2, r1
 801a63e:	07d6      	lsls	r6, r2, #31
 801a640:	d527      	bpl.n	801a692 <__sflush_r+0xb2>
 801a642:	2200      	movs	r2, #0
 801a644:	6062      	str	r2, [r4, #4]
 801a646:	04d9      	lsls	r1, r3, #19
 801a648:	6922      	ldr	r2, [r4, #16]
 801a64a:	6022      	str	r2, [r4, #0]
 801a64c:	d504      	bpl.n	801a658 <__sflush_r+0x78>
 801a64e:	1c42      	adds	r2, r0, #1
 801a650:	d101      	bne.n	801a656 <__sflush_r+0x76>
 801a652:	682b      	ldr	r3, [r5, #0]
 801a654:	b903      	cbnz	r3, 801a658 <__sflush_r+0x78>
 801a656:	6560      	str	r0, [r4, #84]	@ 0x54
 801a658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a65a:	602f      	str	r7, [r5, #0]
 801a65c:	b1b9      	cbz	r1, 801a68e <__sflush_r+0xae>
 801a65e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a662:	4299      	cmp	r1, r3
 801a664:	d002      	beq.n	801a66c <__sflush_r+0x8c>
 801a666:	4628      	mov	r0, r5
 801a668:	f7fe fe16 	bl	8019298 <_free_r>
 801a66c:	2300      	movs	r3, #0
 801a66e:	6363      	str	r3, [r4, #52]	@ 0x34
 801a670:	e00d      	b.n	801a68e <__sflush_r+0xae>
 801a672:	2301      	movs	r3, #1
 801a674:	4628      	mov	r0, r5
 801a676:	47b0      	blx	r6
 801a678:	4602      	mov	r2, r0
 801a67a:	1c50      	adds	r0, r2, #1
 801a67c:	d1c9      	bne.n	801a612 <__sflush_r+0x32>
 801a67e:	682b      	ldr	r3, [r5, #0]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d0c6      	beq.n	801a612 <__sflush_r+0x32>
 801a684:	2b1d      	cmp	r3, #29
 801a686:	d001      	beq.n	801a68c <__sflush_r+0xac>
 801a688:	2b16      	cmp	r3, #22
 801a68a:	d11e      	bne.n	801a6ca <__sflush_r+0xea>
 801a68c:	602f      	str	r7, [r5, #0]
 801a68e:	2000      	movs	r0, #0
 801a690:	e022      	b.n	801a6d8 <__sflush_r+0xf8>
 801a692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a696:	b21b      	sxth	r3, r3
 801a698:	e01b      	b.n	801a6d2 <__sflush_r+0xf2>
 801a69a:	690f      	ldr	r7, [r1, #16]
 801a69c:	2f00      	cmp	r7, #0
 801a69e:	d0f6      	beq.n	801a68e <__sflush_r+0xae>
 801a6a0:	0793      	lsls	r3, r2, #30
 801a6a2:	680e      	ldr	r6, [r1, #0]
 801a6a4:	bf08      	it	eq
 801a6a6:	694b      	ldreq	r3, [r1, #20]
 801a6a8:	600f      	str	r7, [r1, #0]
 801a6aa:	bf18      	it	ne
 801a6ac:	2300      	movne	r3, #0
 801a6ae:	eba6 0807 	sub.w	r8, r6, r7
 801a6b2:	608b      	str	r3, [r1, #8]
 801a6b4:	f1b8 0f00 	cmp.w	r8, #0
 801a6b8:	dde9      	ble.n	801a68e <__sflush_r+0xae>
 801a6ba:	6a21      	ldr	r1, [r4, #32]
 801a6bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a6be:	4643      	mov	r3, r8
 801a6c0:	463a      	mov	r2, r7
 801a6c2:	4628      	mov	r0, r5
 801a6c4:	47b0      	blx	r6
 801a6c6:	2800      	cmp	r0, #0
 801a6c8:	dc08      	bgt.n	801a6dc <__sflush_r+0xfc>
 801a6ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a6ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a6d2:	81a3      	strh	r3, [r4, #12]
 801a6d4:	f04f 30ff 	mov.w	r0, #4294967295
 801a6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6dc:	4407      	add	r7, r0
 801a6de:	eba8 0800 	sub.w	r8, r8, r0
 801a6e2:	e7e7      	b.n	801a6b4 <__sflush_r+0xd4>
 801a6e4:	20400001 	.word	0x20400001

0801a6e8 <_fflush_r>:
 801a6e8:	b538      	push	{r3, r4, r5, lr}
 801a6ea:	690b      	ldr	r3, [r1, #16]
 801a6ec:	4605      	mov	r5, r0
 801a6ee:	460c      	mov	r4, r1
 801a6f0:	b913      	cbnz	r3, 801a6f8 <_fflush_r+0x10>
 801a6f2:	2500      	movs	r5, #0
 801a6f4:	4628      	mov	r0, r5
 801a6f6:	bd38      	pop	{r3, r4, r5, pc}
 801a6f8:	b118      	cbz	r0, 801a702 <_fflush_r+0x1a>
 801a6fa:	6a03      	ldr	r3, [r0, #32]
 801a6fc:	b90b      	cbnz	r3, 801a702 <_fflush_r+0x1a>
 801a6fe:	f7fd fd4b 	bl	8018198 <__sinit>
 801a702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d0f3      	beq.n	801a6f2 <_fflush_r+0xa>
 801a70a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a70c:	07d0      	lsls	r0, r2, #31
 801a70e:	d404      	bmi.n	801a71a <_fflush_r+0x32>
 801a710:	0599      	lsls	r1, r3, #22
 801a712:	d402      	bmi.n	801a71a <_fflush_r+0x32>
 801a714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a716:	f7fd ff22 	bl	801855e <__retarget_lock_acquire_recursive>
 801a71a:	4628      	mov	r0, r5
 801a71c:	4621      	mov	r1, r4
 801a71e:	f7ff ff5f 	bl	801a5e0 <__sflush_r>
 801a722:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a724:	07da      	lsls	r2, r3, #31
 801a726:	4605      	mov	r5, r0
 801a728:	d4e4      	bmi.n	801a6f4 <_fflush_r+0xc>
 801a72a:	89a3      	ldrh	r3, [r4, #12]
 801a72c:	059b      	lsls	r3, r3, #22
 801a72e:	d4e1      	bmi.n	801a6f4 <_fflush_r+0xc>
 801a730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a732:	f7fd ff15 	bl	8018560 <__retarget_lock_release_recursive>
 801a736:	e7dd      	b.n	801a6f4 <_fflush_r+0xc>

0801a738 <fiprintf>:
 801a738:	b40e      	push	{r1, r2, r3}
 801a73a:	b503      	push	{r0, r1, lr}
 801a73c:	4601      	mov	r1, r0
 801a73e:	ab03      	add	r3, sp, #12
 801a740:	4805      	ldr	r0, [pc, #20]	@ (801a758 <fiprintf+0x20>)
 801a742:	f853 2b04 	ldr.w	r2, [r3], #4
 801a746:	6800      	ldr	r0, [r0, #0]
 801a748:	9301      	str	r3, [sp, #4]
 801a74a:	f000 f893 	bl	801a874 <_vfiprintf_r>
 801a74e:	b002      	add	sp, #8
 801a750:	f85d eb04 	ldr.w	lr, [sp], #4
 801a754:	b003      	add	sp, #12
 801a756:	4770      	bx	lr
 801a758:	200002a8 	.word	0x200002a8

0801a75c <memmove>:
 801a75c:	4288      	cmp	r0, r1
 801a75e:	b510      	push	{r4, lr}
 801a760:	eb01 0402 	add.w	r4, r1, r2
 801a764:	d902      	bls.n	801a76c <memmove+0x10>
 801a766:	4284      	cmp	r4, r0
 801a768:	4623      	mov	r3, r4
 801a76a:	d807      	bhi.n	801a77c <memmove+0x20>
 801a76c:	1e43      	subs	r3, r0, #1
 801a76e:	42a1      	cmp	r1, r4
 801a770:	d008      	beq.n	801a784 <memmove+0x28>
 801a772:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a776:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a77a:	e7f8      	b.n	801a76e <memmove+0x12>
 801a77c:	4402      	add	r2, r0
 801a77e:	4601      	mov	r1, r0
 801a780:	428a      	cmp	r2, r1
 801a782:	d100      	bne.n	801a786 <memmove+0x2a>
 801a784:	bd10      	pop	{r4, pc}
 801a786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a78a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a78e:	e7f7      	b.n	801a780 <memmove+0x24>

0801a790 <abort>:
 801a790:	b508      	push	{r3, lr}
 801a792:	2006      	movs	r0, #6
 801a794:	f000 fa42 	bl	801ac1c <raise>
 801a798:	2001      	movs	r0, #1
 801a79a:	f7eb fe25 	bl	80063e8 <_exit>

0801a79e <_calloc_r>:
 801a79e:	b570      	push	{r4, r5, r6, lr}
 801a7a0:	fba1 5402 	umull	r5, r4, r1, r2
 801a7a4:	b934      	cbnz	r4, 801a7b4 <_calloc_r+0x16>
 801a7a6:	4629      	mov	r1, r5
 801a7a8:	f7fb fe86 	bl	80164b8 <_malloc_r>
 801a7ac:	4606      	mov	r6, r0
 801a7ae:	b928      	cbnz	r0, 801a7bc <_calloc_r+0x1e>
 801a7b0:	4630      	mov	r0, r6
 801a7b2:	bd70      	pop	{r4, r5, r6, pc}
 801a7b4:	220c      	movs	r2, #12
 801a7b6:	6002      	str	r2, [r0, #0]
 801a7b8:	2600      	movs	r6, #0
 801a7ba:	e7f9      	b.n	801a7b0 <_calloc_r+0x12>
 801a7bc:	462a      	mov	r2, r5
 801a7be:	4621      	mov	r1, r4
 801a7c0:	f7fd fdbb 	bl	801833a <memset>
 801a7c4:	e7f4      	b.n	801a7b0 <_calloc_r+0x12>

0801a7c6 <_realloc_r>:
 801a7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7ca:	4607      	mov	r7, r0
 801a7cc:	4614      	mov	r4, r2
 801a7ce:	460d      	mov	r5, r1
 801a7d0:	b921      	cbnz	r1, 801a7dc <_realloc_r+0x16>
 801a7d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a7d6:	4611      	mov	r1, r2
 801a7d8:	f7fb be6e 	b.w	80164b8 <_malloc_r>
 801a7dc:	b92a      	cbnz	r2, 801a7ea <_realloc_r+0x24>
 801a7de:	f7fe fd5b 	bl	8019298 <_free_r>
 801a7e2:	4625      	mov	r5, r4
 801a7e4:	4628      	mov	r0, r5
 801a7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7ea:	f000 fa33 	bl	801ac54 <_malloc_usable_size_r>
 801a7ee:	4284      	cmp	r4, r0
 801a7f0:	4606      	mov	r6, r0
 801a7f2:	d802      	bhi.n	801a7fa <_realloc_r+0x34>
 801a7f4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a7f8:	d8f4      	bhi.n	801a7e4 <_realloc_r+0x1e>
 801a7fa:	4621      	mov	r1, r4
 801a7fc:	4638      	mov	r0, r7
 801a7fe:	f7fb fe5b 	bl	80164b8 <_malloc_r>
 801a802:	4680      	mov	r8, r0
 801a804:	b908      	cbnz	r0, 801a80a <_realloc_r+0x44>
 801a806:	4645      	mov	r5, r8
 801a808:	e7ec      	b.n	801a7e4 <_realloc_r+0x1e>
 801a80a:	42b4      	cmp	r4, r6
 801a80c:	4622      	mov	r2, r4
 801a80e:	4629      	mov	r1, r5
 801a810:	bf28      	it	cs
 801a812:	4632      	movcs	r2, r6
 801a814:	f7fd fead 	bl	8018572 <memcpy>
 801a818:	4629      	mov	r1, r5
 801a81a:	4638      	mov	r0, r7
 801a81c:	f7fe fd3c 	bl	8019298 <_free_r>
 801a820:	e7f1      	b.n	801a806 <_realloc_r+0x40>

0801a822 <__sfputc_r>:
 801a822:	6893      	ldr	r3, [r2, #8]
 801a824:	3b01      	subs	r3, #1
 801a826:	2b00      	cmp	r3, #0
 801a828:	b410      	push	{r4}
 801a82a:	6093      	str	r3, [r2, #8]
 801a82c:	da08      	bge.n	801a840 <__sfputc_r+0x1e>
 801a82e:	6994      	ldr	r4, [r2, #24]
 801a830:	42a3      	cmp	r3, r4
 801a832:	db01      	blt.n	801a838 <__sfputc_r+0x16>
 801a834:	290a      	cmp	r1, #10
 801a836:	d103      	bne.n	801a840 <__sfputc_r+0x1e>
 801a838:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a83c:	f000 b932 	b.w	801aaa4 <__swbuf_r>
 801a840:	6813      	ldr	r3, [r2, #0]
 801a842:	1c58      	adds	r0, r3, #1
 801a844:	6010      	str	r0, [r2, #0]
 801a846:	7019      	strb	r1, [r3, #0]
 801a848:	4608      	mov	r0, r1
 801a84a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a84e:	4770      	bx	lr

0801a850 <__sfputs_r>:
 801a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a852:	4606      	mov	r6, r0
 801a854:	460f      	mov	r7, r1
 801a856:	4614      	mov	r4, r2
 801a858:	18d5      	adds	r5, r2, r3
 801a85a:	42ac      	cmp	r4, r5
 801a85c:	d101      	bne.n	801a862 <__sfputs_r+0x12>
 801a85e:	2000      	movs	r0, #0
 801a860:	e007      	b.n	801a872 <__sfputs_r+0x22>
 801a862:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a866:	463a      	mov	r2, r7
 801a868:	4630      	mov	r0, r6
 801a86a:	f7ff ffda 	bl	801a822 <__sfputc_r>
 801a86e:	1c43      	adds	r3, r0, #1
 801a870:	d1f3      	bne.n	801a85a <__sfputs_r+0xa>
 801a872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a874 <_vfiprintf_r>:
 801a874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a878:	460d      	mov	r5, r1
 801a87a:	b09d      	sub	sp, #116	@ 0x74
 801a87c:	4614      	mov	r4, r2
 801a87e:	4698      	mov	r8, r3
 801a880:	4606      	mov	r6, r0
 801a882:	b118      	cbz	r0, 801a88c <_vfiprintf_r+0x18>
 801a884:	6a03      	ldr	r3, [r0, #32]
 801a886:	b90b      	cbnz	r3, 801a88c <_vfiprintf_r+0x18>
 801a888:	f7fd fc86 	bl	8018198 <__sinit>
 801a88c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a88e:	07d9      	lsls	r1, r3, #31
 801a890:	d405      	bmi.n	801a89e <_vfiprintf_r+0x2a>
 801a892:	89ab      	ldrh	r3, [r5, #12]
 801a894:	059a      	lsls	r2, r3, #22
 801a896:	d402      	bmi.n	801a89e <_vfiprintf_r+0x2a>
 801a898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a89a:	f7fd fe60 	bl	801855e <__retarget_lock_acquire_recursive>
 801a89e:	89ab      	ldrh	r3, [r5, #12]
 801a8a0:	071b      	lsls	r3, r3, #28
 801a8a2:	d501      	bpl.n	801a8a8 <_vfiprintf_r+0x34>
 801a8a4:	692b      	ldr	r3, [r5, #16]
 801a8a6:	b99b      	cbnz	r3, 801a8d0 <_vfiprintf_r+0x5c>
 801a8a8:	4629      	mov	r1, r5
 801a8aa:	4630      	mov	r0, r6
 801a8ac:	f000 f938 	bl	801ab20 <__swsetup_r>
 801a8b0:	b170      	cbz	r0, 801a8d0 <_vfiprintf_r+0x5c>
 801a8b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a8b4:	07dc      	lsls	r4, r3, #31
 801a8b6:	d504      	bpl.n	801a8c2 <_vfiprintf_r+0x4e>
 801a8b8:	f04f 30ff 	mov.w	r0, #4294967295
 801a8bc:	b01d      	add	sp, #116	@ 0x74
 801a8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8c2:	89ab      	ldrh	r3, [r5, #12]
 801a8c4:	0598      	lsls	r0, r3, #22
 801a8c6:	d4f7      	bmi.n	801a8b8 <_vfiprintf_r+0x44>
 801a8c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a8ca:	f7fd fe49 	bl	8018560 <__retarget_lock_release_recursive>
 801a8ce:	e7f3      	b.n	801a8b8 <_vfiprintf_r+0x44>
 801a8d0:	2300      	movs	r3, #0
 801a8d2:	9309      	str	r3, [sp, #36]	@ 0x24
 801a8d4:	2320      	movs	r3, #32
 801a8d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a8da:	f8cd 800c 	str.w	r8, [sp, #12]
 801a8de:	2330      	movs	r3, #48	@ 0x30
 801a8e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801aa90 <_vfiprintf_r+0x21c>
 801a8e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a8e8:	f04f 0901 	mov.w	r9, #1
 801a8ec:	4623      	mov	r3, r4
 801a8ee:	469a      	mov	sl, r3
 801a8f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a8f4:	b10a      	cbz	r2, 801a8fa <_vfiprintf_r+0x86>
 801a8f6:	2a25      	cmp	r2, #37	@ 0x25
 801a8f8:	d1f9      	bne.n	801a8ee <_vfiprintf_r+0x7a>
 801a8fa:	ebba 0b04 	subs.w	fp, sl, r4
 801a8fe:	d00b      	beq.n	801a918 <_vfiprintf_r+0xa4>
 801a900:	465b      	mov	r3, fp
 801a902:	4622      	mov	r2, r4
 801a904:	4629      	mov	r1, r5
 801a906:	4630      	mov	r0, r6
 801a908:	f7ff ffa2 	bl	801a850 <__sfputs_r>
 801a90c:	3001      	adds	r0, #1
 801a90e:	f000 80a7 	beq.w	801aa60 <_vfiprintf_r+0x1ec>
 801a912:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a914:	445a      	add	r2, fp
 801a916:	9209      	str	r2, [sp, #36]	@ 0x24
 801a918:	f89a 3000 	ldrb.w	r3, [sl]
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	f000 809f 	beq.w	801aa60 <_vfiprintf_r+0x1ec>
 801a922:	2300      	movs	r3, #0
 801a924:	f04f 32ff 	mov.w	r2, #4294967295
 801a928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a92c:	f10a 0a01 	add.w	sl, sl, #1
 801a930:	9304      	str	r3, [sp, #16]
 801a932:	9307      	str	r3, [sp, #28]
 801a934:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a938:	931a      	str	r3, [sp, #104]	@ 0x68
 801a93a:	4654      	mov	r4, sl
 801a93c:	2205      	movs	r2, #5
 801a93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a942:	4853      	ldr	r0, [pc, #332]	@ (801aa90 <_vfiprintf_r+0x21c>)
 801a944:	f7e5 fc1c 	bl	8000180 <memchr>
 801a948:	9a04      	ldr	r2, [sp, #16]
 801a94a:	b9d8      	cbnz	r0, 801a984 <_vfiprintf_r+0x110>
 801a94c:	06d1      	lsls	r1, r2, #27
 801a94e:	bf44      	itt	mi
 801a950:	2320      	movmi	r3, #32
 801a952:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a956:	0713      	lsls	r3, r2, #28
 801a958:	bf44      	itt	mi
 801a95a:	232b      	movmi	r3, #43	@ 0x2b
 801a95c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a960:	f89a 3000 	ldrb.w	r3, [sl]
 801a964:	2b2a      	cmp	r3, #42	@ 0x2a
 801a966:	d015      	beq.n	801a994 <_vfiprintf_r+0x120>
 801a968:	9a07      	ldr	r2, [sp, #28]
 801a96a:	4654      	mov	r4, sl
 801a96c:	2000      	movs	r0, #0
 801a96e:	f04f 0c0a 	mov.w	ip, #10
 801a972:	4621      	mov	r1, r4
 801a974:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a978:	3b30      	subs	r3, #48	@ 0x30
 801a97a:	2b09      	cmp	r3, #9
 801a97c:	d94b      	bls.n	801aa16 <_vfiprintf_r+0x1a2>
 801a97e:	b1b0      	cbz	r0, 801a9ae <_vfiprintf_r+0x13a>
 801a980:	9207      	str	r2, [sp, #28]
 801a982:	e014      	b.n	801a9ae <_vfiprintf_r+0x13a>
 801a984:	eba0 0308 	sub.w	r3, r0, r8
 801a988:	fa09 f303 	lsl.w	r3, r9, r3
 801a98c:	4313      	orrs	r3, r2
 801a98e:	9304      	str	r3, [sp, #16]
 801a990:	46a2      	mov	sl, r4
 801a992:	e7d2      	b.n	801a93a <_vfiprintf_r+0xc6>
 801a994:	9b03      	ldr	r3, [sp, #12]
 801a996:	1d19      	adds	r1, r3, #4
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	9103      	str	r1, [sp, #12]
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	bfbb      	ittet	lt
 801a9a0:	425b      	neglt	r3, r3
 801a9a2:	f042 0202 	orrlt.w	r2, r2, #2
 801a9a6:	9307      	strge	r3, [sp, #28]
 801a9a8:	9307      	strlt	r3, [sp, #28]
 801a9aa:	bfb8      	it	lt
 801a9ac:	9204      	strlt	r2, [sp, #16]
 801a9ae:	7823      	ldrb	r3, [r4, #0]
 801a9b0:	2b2e      	cmp	r3, #46	@ 0x2e
 801a9b2:	d10a      	bne.n	801a9ca <_vfiprintf_r+0x156>
 801a9b4:	7863      	ldrb	r3, [r4, #1]
 801a9b6:	2b2a      	cmp	r3, #42	@ 0x2a
 801a9b8:	d132      	bne.n	801aa20 <_vfiprintf_r+0x1ac>
 801a9ba:	9b03      	ldr	r3, [sp, #12]
 801a9bc:	1d1a      	adds	r2, r3, #4
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	9203      	str	r2, [sp, #12]
 801a9c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a9c6:	3402      	adds	r4, #2
 801a9c8:	9305      	str	r3, [sp, #20]
 801a9ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801aaa0 <_vfiprintf_r+0x22c>
 801a9ce:	7821      	ldrb	r1, [r4, #0]
 801a9d0:	2203      	movs	r2, #3
 801a9d2:	4650      	mov	r0, sl
 801a9d4:	f7e5 fbd4 	bl	8000180 <memchr>
 801a9d8:	b138      	cbz	r0, 801a9ea <_vfiprintf_r+0x176>
 801a9da:	9b04      	ldr	r3, [sp, #16]
 801a9dc:	eba0 000a 	sub.w	r0, r0, sl
 801a9e0:	2240      	movs	r2, #64	@ 0x40
 801a9e2:	4082      	lsls	r2, r0
 801a9e4:	4313      	orrs	r3, r2
 801a9e6:	3401      	adds	r4, #1
 801a9e8:	9304      	str	r3, [sp, #16]
 801a9ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9ee:	4829      	ldr	r0, [pc, #164]	@ (801aa94 <_vfiprintf_r+0x220>)
 801a9f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a9f4:	2206      	movs	r2, #6
 801a9f6:	f7e5 fbc3 	bl	8000180 <memchr>
 801a9fa:	2800      	cmp	r0, #0
 801a9fc:	d03f      	beq.n	801aa7e <_vfiprintf_r+0x20a>
 801a9fe:	4b26      	ldr	r3, [pc, #152]	@ (801aa98 <_vfiprintf_r+0x224>)
 801aa00:	bb1b      	cbnz	r3, 801aa4a <_vfiprintf_r+0x1d6>
 801aa02:	9b03      	ldr	r3, [sp, #12]
 801aa04:	3307      	adds	r3, #7
 801aa06:	f023 0307 	bic.w	r3, r3, #7
 801aa0a:	3308      	adds	r3, #8
 801aa0c:	9303      	str	r3, [sp, #12]
 801aa0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa10:	443b      	add	r3, r7
 801aa12:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa14:	e76a      	b.n	801a8ec <_vfiprintf_r+0x78>
 801aa16:	fb0c 3202 	mla	r2, ip, r2, r3
 801aa1a:	460c      	mov	r4, r1
 801aa1c:	2001      	movs	r0, #1
 801aa1e:	e7a8      	b.n	801a972 <_vfiprintf_r+0xfe>
 801aa20:	2300      	movs	r3, #0
 801aa22:	3401      	adds	r4, #1
 801aa24:	9305      	str	r3, [sp, #20]
 801aa26:	4619      	mov	r1, r3
 801aa28:	f04f 0c0a 	mov.w	ip, #10
 801aa2c:	4620      	mov	r0, r4
 801aa2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa32:	3a30      	subs	r2, #48	@ 0x30
 801aa34:	2a09      	cmp	r2, #9
 801aa36:	d903      	bls.n	801aa40 <_vfiprintf_r+0x1cc>
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	d0c6      	beq.n	801a9ca <_vfiprintf_r+0x156>
 801aa3c:	9105      	str	r1, [sp, #20]
 801aa3e:	e7c4      	b.n	801a9ca <_vfiprintf_r+0x156>
 801aa40:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa44:	4604      	mov	r4, r0
 801aa46:	2301      	movs	r3, #1
 801aa48:	e7f0      	b.n	801aa2c <_vfiprintf_r+0x1b8>
 801aa4a:	ab03      	add	r3, sp, #12
 801aa4c:	9300      	str	r3, [sp, #0]
 801aa4e:	462a      	mov	r2, r5
 801aa50:	4b12      	ldr	r3, [pc, #72]	@ (801aa9c <_vfiprintf_r+0x228>)
 801aa52:	a904      	add	r1, sp, #16
 801aa54:	4630      	mov	r0, r6
 801aa56:	f7fc fd4f 	bl	80174f8 <_printf_float>
 801aa5a:	4607      	mov	r7, r0
 801aa5c:	1c78      	adds	r0, r7, #1
 801aa5e:	d1d6      	bne.n	801aa0e <_vfiprintf_r+0x19a>
 801aa60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801aa62:	07d9      	lsls	r1, r3, #31
 801aa64:	d405      	bmi.n	801aa72 <_vfiprintf_r+0x1fe>
 801aa66:	89ab      	ldrh	r3, [r5, #12]
 801aa68:	059a      	lsls	r2, r3, #22
 801aa6a:	d402      	bmi.n	801aa72 <_vfiprintf_r+0x1fe>
 801aa6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801aa6e:	f7fd fd77 	bl	8018560 <__retarget_lock_release_recursive>
 801aa72:	89ab      	ldrh	r3, [r5, #12]
 801aa74:	065b      	lsls	r3, r3, #25
 801aa76:	f53f af1f 	bmi.w	801a8b8 <_vfiprintf_r+0x44>
 801aa7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aa7c:	e71e      	b.n	801a8bc <_vfiprintf_r+0x48>
 801aa7e:	ab03      	add	r3, sp, #12
 801aa80:	9300      	str	r3, [sp, #0]
 801aa82:	462a      	mov	r2, r5
 801aa84:	4b05      	ldr	r3, [pc, #20]	@ (801aa9c <_vfiprintf_r+0x228>)
 801aa86:	a904      	add	r1, sp, #16
 801aa88:	4630      	mov	r0, r6
 801aa8a:	f7fc ffcd 	bl	8017a28 <_printf_i>
 801aa8e:	e7e4      	b.n	801aa5a <_vfiprintf_r+0x1e6>
 801aa90:	0801f31b 	.word	0x0801f31b
 801aa94:	0801f325 	.word	0x0801f325
 801aa98:	080174f9 	.word	0x080174f9
 801aa9c:	0801a851 	.word	0x0801a851
 801aaa0:	0801f321 	.word	0x0801f321

0801aaa4 <__swbuf_r>:
 801aaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaa6:	460e      	mov	r6, r1
 801aaa8:	4614      	mov	r4, r2
 801aaaa:	4605      	mov	r5, r0
 801aaac:	b118      	cbz	r0, 801aab6 <__swbuf_r+0x12>
 801aaae:	6a03      	ldr	r3, [r0, #32]
 801aab0:	b90b      	cbnz	r3, 801aab6 <__swbuf_r+0x12>
 801aab2:	f7fd fb71 	bl	8018198 <__sinit>
 801aab6:	69a3      	ldr	r3, [r4, #24]
 801aab8:	60a3      	str	r3, [r4, #8]
 801aaba:	89a3      	ldrh	r3, [r4, #12]
 801aabc:	071a      	lsls	r2, r3, #28
 801aabe:	d501      	bpl.n	801aac4 <__swbuf_r+0x20>
 801aac0:	6923      	ldr	r3, [r4, #16]
 801aac2:	b943      	cbnz	r3, 801aad6 <__swbuf_r+0x32>
 801aac4:	4621      	mov	r1, r4
 801aac6:	4628      	mov	r0, r5
 801aac8:	f000 f82a 	bl	801ab20 <__swsetup_r>
 801aacc:	b118      	cbz	r0, 801aad6 <__swbuf_r+0x32>
 801aace:	f04f 37ff 	mov.w	r7, #4294967295
 801aad2:	4638      	mov	r0, r7
 801aad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aad6:	6823      	ldr	r3, [r4, #0]
 801aad8:	6922      	ldr	r2, [r4, #16]
 801aada:	1a98      	subs	r0, r3, r2
 801aadc:	6963      	ldr	r3, [r4, #20]
 801aade:	b2f6      	uxtb	r6, r6
 801aae0:	4283      	cmp	r3, r0
 801aae2:	4637      	mov	r7, r6
 801aae4:	dc05      	bgt.n	801aaf2 <__swbuf_r+0x4e>
 801aae6:	4621      	mov	r1, r4
 801aae8:	4628      	mov	r0, r5
 801aaea:	f7ff fdfd 	bl	801a6e8 <_fflush_r>
 801aaee:	2800      	cmp	r0, #0
 801aaf0:	d1ed      	bne.n	801aace <__swbuf_r+0x2a>
 801aaf2:	68a3      	ldr	r3, [r4, #8]
 801aaf4:	3b01      	subs	r3, #1
 801aaf6:	60a3      	str	r3, [r4, #8]
 801aaf8:	6823      	ldr	r3, [r4, #0]
 801aafa:	1c5a      	adds	r2, r3, #1
 801aafc:	6022      	str	r2, [r4, #0]
 801aafe:	701e      	strb	r6, [r3, #0]
 801ab00:	6962      	ldr	r2, [r4, #20]
 801ab02:	1c43      	adds	r3, r0, #1
 801ab04:	429a      	cmp	r2, r3
 801ab06:	d004      	beq.n	801ab12 <__swbuf_r+0x6e>
 801ab08:	89a3      	ldrh	r3, [r4, #12]
 801ab0a:	07db      	lsls	r3, r3, #31
 801ab0c:	d5e1      	bpl.n	801aad2 <__swbuf_r+0x2e>
 801ab0e:	2e0a      	cmp	r6, #10
 801ab10:	d1df      	bne.n	801aad2 <__swbuf_r+0x2e>
 801ab12:	4621      	mov	r1, r4
 801ab14:	4628      	mov	r0, r5
 801ab16:	f7ff fde7 	bl	801a6e8 <_fflush_r>
 801ab1a:	2800      	cmp	r0, #0
 801ab1c:	d0d9      	beq.n	801aad2 <__swbuf_r+0x2e>
 801ab1e:	e7d6      	b.n	801aace <__swbuf_r+0x2a>

0801ab20 <__swsetup_r>:
 801ab20:	b538      	push	{r3, r4, r5, lr}
 801ab22:	4b29      	ldr	r3, [pc, #164]	@ (801abc8 <__swsetup_r+0xa8>)
 801ab24:	4605      	mov	r5, r0
 801ab26:	6818      	ldr	r0, [r3, #0]
 801ab28:	460c      	mov	r4, r1
 801ab2a:	b118      	cbz	r0, 801ab34 <__swsetup_r+0x14>
 801ab2c:	6a03      	ldr	r3, [r0, #32]
 801ab2e:	b90b      	cbnz	r3, 801ab34 <__swsetup_r+0x14>
 801ab30:	f7fd fb32 	bl	8018198 <__sinit>
 801ab34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab38:	0719      	lsls	r1, r3, #28
 801ab3a:	d422      	bmi.n	801ab82 <__swsetup_r+0x62>
 801ab3c:	06da      	lsls	r2, r3, #27
 801ab3e:	d407      	bmi.n	801ab50 <__swsetup_r+0x30>
 801ab40:	2209      	movs	r2, #9
 801ab42:	602a      	str	r2, [r5, #0]
 801ab44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ab48:	81a3      	strh	r3, [r4, #12]
 801ab4a:	f04f 30ff 	mov.w	r0, #4294967295
 801ab4e:	e033      	b.n	801abb8 <__swsetup_r+0x98>
 801ab50:	0758      	lsls	r0, r3, #29
 801ab52:	d512      	bpl.n	801ab7a <__swsetup_r+0x5a>
 801ab54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ab56:	b141      	cbz	r1, 801ab6a <__swsetup_r+0x4a>
 801ab58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ab5c:	4299      	cmp	r1, r3
 801ab5e:	d002      	beq.n	801ab66 <__swsetup_r+0x46>
 801ab60:	4628      	mov	r0, r5
 801ab62:	f7fe fb99 	bl	8019298 <_free_r>
 801ab66:	2300      	movs	r3, #0
 801ab68:	6363      	str	r3, [r4, #52]	@ 0x34
 801ab6a:	89a3      	ldrh	r3, [r4, #12]
 801ab6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ab70:	81a3      	strh	r3, [r4, #12]
 801ab72:	2300      	movs	r3, #0
 801ab74:	6063      	str	r3, [r4, #4]
 801ab76:	6923      	ldr	r3, [r4, #16]
 801ab78:	6023      	str	r3, [r4, #0]
 801ab7a:	89a3      	ldrh	r3, [r4, #12]
 801ab7c:	f043 0308 	orr.w	r3, r3, #8
 801ab80:	81a3      	strh	r3, [r4, #12]
 801ab82:	6923      	ldr	r3, [r4, #16]
 801ab84:	b94b      	cbnz	r3, 801ab9a <__swsetup_r+0x7a>
 801ab86:	89a3      	ldrh	r3, [r4, #12]
 801ab88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ab8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ab90:	d003      	beq.n	801ab9a <__swsetup_r+0x7a>
 801ab92:	4621      	mov	r1, r4
 801ab94:	4628      	mov	r0, r5
 801ab96:	f000 f88b 	bl	801acb0 <__smakebuf_r>
 801ab9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab9e:	f013 0201 	ands.w	r2, r3, #1
 801aba2:	d00a      	beq.n	801abba <__swsetup_r+0x9a>
 801aba4:	2200      	movs	r2, #0
 801aba6:	60a2      	str	r2, [r4, #8]
 801aba8:	6962      	ldr	r2, [r4, #20]
 801abaa:	4252      	negs	r2, r2
 801abac:	61a2      	str	r2, [r4, #24]
 801abae:	6922      	ldr	r2, [r4, #16]
 801abb0:	b942      	cbnz	r2, 801abc4 <__swsetup_r+0xa4>
 801abb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801abb6:	d1c5      	bne.n	801ab44 <__swsetup_r+0x24>
 801abb8:	bd38      	pop	{r3, r4, r5, pc}
 801abba:	0799      	lsls	r1, r3, #30
 801abbc:	bf58      	it	pl
 801abbe:	6962      	ldrpl	r2, [r4, #20]
 801abc0:	60a2      	str	r2, [r4, #8]
 801abc2:	e7f4      	b.n	801abae <__swsetup_r+0x8e>
 801abc4:	2000      	movs	r0, #0
 801abc6:	e7f7      	b.n	801abb8 <__swsetup_r+0x98>
 801abc8:	200002a8 	.word	0x200002a8

0801abcc <_raise_r>:
 801abcc:	291f      	cmp	r1, #31
 801abce:	b538      	push	{r3, r4, r5, lr}
 801abd0:	4605      	mov	r5, r0
 801abd2:	460c      	mov	r4, r1
 801abd4:	d904      	bls.n	801abe0 <_raise_r+0x14>
 801abd6:	2316      	movs	r3, #22
 801abd8:	6003      	str	r3, [r0, #0]
 801abda:	f04f 30ff 	mov.w	r0, #4294967295
 801abde:	bd38      	pop	{r3, r4, r5, pc}
 801abe0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801abe2:	b112      	cbz	r2, 801abea <_raise_r+0x1e>
 801abe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801abe8:	b94b      	cbnz	r3, 801abfe <_raise_r+0x32>
 801abea:	4628      	mov	r0, r5
 801abec:	f000 f830 	bl	801ac50 <_getpid_r>
 801abf0:	4622      	mov	r2, r4
 801abf2:	4601      	mov	r1, r0
 801abf4:	4628      	mov	r0, r5
 801abf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801abfa:	f000 b817 	b.w	801ac2c <_kill_r>
 801abfe:	2b01      	cmp	r3, #1
 801ac00:	d00a      	beq.n	801ac18 <_raise_r+0x4c>
 801ac02:	1c59      	adds	r1, r3, #1
 801ac04:	d103      	bne.n	801ac0e <_raise_r+0x42>
 801ac06:	2316      	movs	r3, #22
 801ac08:	6003      	str	r3, [r0, #0]
 801ac0a:	2001      	movs	r0, #1
 801ac0c:	e7e7      	b.n	801abde <_raise_r+0x12>
 801ac0e:	2100      	movs	r1, #0
 801ac10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ac14:	4620      	mov	r0, r4
 801ac16:	4798      	blx	r3
 801ac18:	2000      	movs	r0, #0
 801ac1a:	e7e0      	b.n	801abde <_raise_r+0x12>

0801ac1c <raise>:
 801ac1c:	4b02      	ldr	r3, [pc, #8]	@ (801ac28 <raise+0xc>)
 801ac1e:	4601      	mov	r1, r0
 801ac20:	6818      	ldr	r0, [r3, #0]
 801ac22:	f7ff bfd3 	b.w	801abcc <_raise_r>
 801ac26:	bf00      	nop
 801ac28:	200002a8 	.word	0x200002a8

0801ac2c <_kill_r>:
 801ac2c:	b538      	push	{r3, r4, r5, lr}
 801ac2e:	4d07      	ldr	r5, [pc, #28]	@ (801ac4c <_kill_r+0x20>)
 801ac30:	2300      	movs	r3, #0
 801ac32:	4604      	mov	r4, r0
 801ac34:	4608      	mov	r0, r1
 801ac36:	4611      	mov	r1, r2
 801ac38:	602b      	str	r3, [r5, #0]
 801ac3a:	f7eb fbc5 	bl	80063c8 <_kill>
 801ac3e:	1c43      	adds	r3, r0, #1
 801ac40:	d102      	bne.n	801ac48 <_kill_r+0x1c>
 801ac42:	682b      	ldr	r3, [r5, #0]
 801ac44:	b103      	cbz	r3, 801ac48 <_kill_r+0x1c>
 801ac46:	6023      	str	r3, [r4, #0]
 801ac48:	bd38      	pop	{r3, r4, r5, pc}
 801ac4a:	bf00      	nop
 801ac4c:	20002dec 	.word	0x20002dec

0801ac50 <_getpid_r>:
 801ac50:	f7eb bbb2 	b.w	80063b8 <_getpid>

0801ac54 <_malloc_usable_size_r>:
 801ac54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ac58:	1f18      	subs	r0, r3, #4
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	bfbc      	itt	lt
 801ac5e:	580b      	ldrlt	r3, [r1, r0]
 801ac60:	18c0      	addlt	r0, r0, r3
 801ac62:	4770      	bx	lr

0801ac64 <__swhatbuf_r>:
 801ac64:	b570      	push	{r4, r5, r6, lr}
 801ac66:	460c      	mov	r4, r1
 801ac68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac6c:	2900      	cmp	r1, #0
 801ac6e:	b096      	sub	sp, #88	@ 0x58
 801ac70:	4615      	mov	r5, r2
 801ac72:	461e      	mov	r6, r3
 801ac74:	da0d      	bge.n	801ac92 <__swhatbuf_r+0x2e>
 801ac76:	89a3      	ldrh	r3, [r4, #12]
 801ac78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ac7c:	f04f 0100 	mov.w	r1, #0
 801ac80:	bf14      	ite	ne
 801ac82:	2340      	movne	r3, #64	@ 0x40
 801ac84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ac88:	2000      	movs	r0, #0
 801ac8a:	6031      	str	r1, [r6, #0]
 801ac8c:	602b      	str	r3, [r5, #0]
 801ac8e:	b016      	add	sp, #88	@ 0x58
 801ac90:	bd70      	pop	{r4, r5, r6, pc}
 801ac92:	466a      	mov	r2, sp
 801ac94:	f000 f848 	bl	801ad28 <_fstat_r>
 801ac98:	2800      	cmp	r0, #0
 801ac9a:	dbec      	blt.n	801ac76 <__swhatbuf_r+0x12>
 801ac9c:	9901      	ldr	r1, [sp, #4]
 801ac9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801aca2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801aca6:	4259      	negs	r1, r3
 801aca8:	4159      	adcs	r1, r3
 801acaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801acae:	e7eb      	b.n	801ac88 <__swhatbuf_r+0x24>

0801acb0 <__smakebuf_r>:
 801acb0:	898b      	ldrh	r3, [r1, #12]
 801acb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801acb4:	079d      	lsls	r5, r3, #30
 801acb6:	4606      	mov	r6, r0
 801acb8:	460c      	mov	r4, r1
 801acba:	d507      	bpl.n	801accc <__smakebuf_r+0x1c>
 801acbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801acc0:	6023      	str	r3, [r4, #0]
 801acc2:	6123      	str	r3, [r4, #16]
 801acc4:	2301      	movs	r3, #1
 801acc6:	6163      	str	r3, [r4, #20]
 801acc8:	b003      	add	sp, #12
 801acca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801accc:	ab01      	add	r3, sp, #4
 801acce:	466a      	mov	r2, sp
 801acd0:	f7ff ffc8 	bl	801ac64 <__swhatbuf_r>
 801acd4:	9f00      	ldr	r7, [sp, #0]
 801acd6:	4605      	mov	r5, r0
 801acd8:	4639      	mov	r1, r7
 801acda:	4630      	mov	r0, r6
 801acdc:	f7fb fbec 	bl	80164b8 <_malloc_r>
 801ace0:	b948      	cbnz	r0, 801acf6 <__smakebuf_r+0x46>
 801ace2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ace6:	059a      	lsls	r2, r3, #22
 801ace8:	d4ee      	bmi.n	801acc8 <__smakebuf_r+0x18>
 801acea:	f023 0303 	bic.w	r3, r3, #3
 801acee:	f043 0302 	orr.w	r3, r3, #2
 801acf2:	81a3      	strh	r3, [r4, #12]
 801acf4:	e7e2      	b.n	801acbc <__smakebuf_r+0xc>
 801acf6:	89a3      	ldrh	r3, [r4, #12]
 801acf8:	6020      	str	r0, [r4, #0]
 801acfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801acfe:	81a3      	strh	r3, [r4, #12]
 801ad00:	9b01      	ldr	r3, [sp, #4]
 801ad02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ad06:	b15b      	cbz	r3, 801ad20 <__smakebuf_r+0x70>
 801ad08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ad0c:	4630      	mov	r0, r6
 801ad0e:	f000 f81d 	bl	801ad4c <_isatty_r>
 801ad12:	b128      	cbz	r0, 801ad20 <__smakebuf_r+0x70>
 801ad14:	89a3      	ldrh	r3, [r4, #12]
 801ad16:	f023 0303 	bic.w	r3, r3, #3
 801ad1a:	f043 0301 	orr.w	r3, r3, #1
 801ad1e:	81a3      	strh	r3, [r4, #12]
 801ad20:	89a3      	ldrh	r3, [r4, #12]
 801ad22:	431d      	orrs	r5, r3
 801ad24:	81a5      	strh	r5, [r4, #12]
 801ad26:	e7cf      	b.n	801acc8 <__smakebuf_r+0x18>

0801ad28 <_fstat_r>:
 801ad28:	b538      	push	{r3, r4, r5, lr}
 801ad2a:	4d07      	ldr	r5, [pc, #28]	@ (801ad48 <_fstat_r+0x20>)
 801ad2c:	2300      	movs	r3, #0
 801ad2e:	4604      	mov	r4, r0
 801ad30:	4608      	mov	r0, r1
 801ad32:	4611      	mov	r1, r2
 801ad34:	602b      	str	r3, [r5, #0]
 801ad36:	f7eb fba7 	bl	8006488 <_fstat>
 801ad3a:	1c43      	adds	r3, r0, #1
 801ad3c:	d102      	bne.n	801ad44 <_fstat_r+0x1c>
 801ad3e:	682b      	ldr	r3, [r5, #0]
 801ad40:	b103      	cbz	r3, 801ad44 <_fstat_r+0x1c>
 801ad42:	6023      	str	r3, [r4, #0]
 801ad44:	bd38      	pop	{r3, r4, r5, pc}
 801ad46:	bf00      	nop
 801ad48:	20002dec 	.word	0x20002dec

0801ad4c <_isatty_r>:
 801ad4c:	b538      	push	{r3, r4, r5, lr}
 801ad4e:	4d06      	ldr	r5, [pc, #24]	@ (801ad68 <_isatty_r+0x1c>)
 801ad50:	2300      	movs	r3, #0
 801ad52:	4604      	mov	r4, r0
 801ad54:	4608      	mov	r0, r1
 801ad56:	602b      	str	r3, [r5, #0]
 801ad58:	f7eb fba6 	bl	80064a8 <_isatty>
 801ad5c:	1c43      	adds	r3, r0, #1
 801ad5e:	d102      	bne.n	801ad66 <_isatty_r+0x1a>
 801ad60:	682b      	ldr	r3, [r5, #0]
 801ad62:	b103      	cbz	r3, 801ad66 <_isatty_r+0x1a>
 801ad64:	6023      	str	r3, [r4, #0]
 801ad66:	bd38      	pop	{r3, r4, r5, pc}
 801ad68:	20002dec 	.word	0x20002dec
 801ad6c:	00000000 	.word	0x00000000

0801ad70 <log>:
 801ad70:	b538      	push	{r3, r4, r5, lr}
 801ad72:	ed2d 8b02 	vpush	{d8}
 801ad76:	ec55 4b10 	vmov	r4, r5, d0
 801ad7a:	f000 fc79 	bl	801b670 <__ieee754_log>
 801ad7e:	4622      	mov	r2, r4
 801ad80:	462b      	mov	r3, r5
 801ad82:	4620      	mov	r0, r4
 801ad84:	4629      	mov	r1, r5
 801ad86:	eeb0 8a40 	vmov.f32	s16, s0
 801ad8a:	eef0 8a60 	vmov.f32	s17, s1
 801ad8e:	f7e5 fea5 	bl	8000adc <__aeabi_dcmpun>
 801ad92:	b998      	cbnz	r0, 801adbc <log+0x4c>
 801ad94:	2200      	movs	r2, #0
 801ad96:	2300      	movs	r3, #0
 801ad98:	4620      	mov	r0, r4
 801ad9a:	4629      	mov	r1, r5
 801ad9c:	f7e5 fe94 	bl	8000ac8 <__aeabi_dcmpgt>
 801ada0:	b960      	cbnz	r0, 801adbc <log+0x4c>
 801ada2:	2200      	movs	r2, #0
 801ada4:	2300      	movs	r3, #0
 801ada6:	4620      	mov	r0, r4
 801ada8:	4629      	mov	r1, r5
 801adaa:	f7e5 fe65 	bl	8000a78 <__aeabi_dcmpeq>
 801adae:	b160      	cbz	r0, 801adca <log+0x5a>
 801adb0:	f7fd fbaa 	bl	8018508 <__errno>
 801adb4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 801ade0 <log+0x70>
 801adb8:	2322      	movs	r3, #34	@ 0x22
 801adba:	6003      	str	r3, [r0, #0]
 801adbc:	eeb0 0a48 	vmov.f32	s0, s16
 801adc0:	eef0 0a68 	vmov.f32	s1, s17
 801adc4:	ecbd 8b02 	vpop	{d8}
 801adc8:	bd38      	pop	{r3, r4, r5, pc}
 801adca:	f7fd fb9d 	bl	8018508 <__errno>
 801adce:	ecbd 8b02 	vpop	{d8}
 801add2:	2321      	movs	r3, #33	@ 0x21
 801add4:	6003      	str	r3, [r0, #0]
 801add6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801adda:	4803      	ldr	r0, [pc, #12]	@ (801ade8 <log+0x78>)
 801addc:	f7fd bbd8 	b.w	8018590 <nan>
 801ade0:	00000000 	.word	0x00000000
 801ade4:	fff00000 	.word	0xfff00000
 801ade8:	0801f1eb 	.word	0x0801f1eb

0801adec <sqrt>:
 801adec:	b538      	push	{r3, r4, r5, lr}
 801adee:	ed2d 8b02 	vpush	{d8}
 801adf2:	ec55 4b10 	vmov	r4, r5, d0
 801adf6:	f000 f963 	bl	801b0c0 <__ieee754_sqrt>
 801adfa:	4622      	mov	r2, r4
 801adfc:	462b      	mov	r3, r5
 801adfe:	4620      	mov	r0, r4
 801ae00:	4629      	mov	r1, r5
 801ae02:	eeb0 8a40 	vmov.f32	s16, s0
 801ae06:	eef0 8a60 	vmov.f32	s17, s1
 801ae0a:	f7e5 fe67 	bl	8000adc <__aeabi_dcmpun>
 801ae0e:	b990      	cbnz	r0, 801ae36 <sqrt+0x4a>
 801ae10:	2200      	movs	r2, #0
 801ae12:	2300      	movs	r3, #0
 801ae14:	4620      	mov	r0, r4
 801ae16:	4629      	mov	r1, r5
 801ae18:	f7e5 fe38 	bl	8000a8c <__aeabi_dcmplt>
 801ae1c:	b158      	cbz	r0, 801ae36 <sqrt+0x4a>
 801ae1e:	f7fd fb73 	bl	8018508 <__errno>
 801ae22:	2321      	movs	r3, #33	@ 0x21
 801ae24:	6003      	str	r3, [r0, #0]
 801ae26:	2200      	movs	r2, #0
 801ae28:	2300      	movs	r3, #0
 801ae2a:	4610      	mov	r0, r2
 801ae2c:	4619      	mov	r1, r3
 801ae2e:	f7e5 fce5 	bl	80007fc <__aeabi_ddiv>
 801ae32:	ec41 0b18 	vmov	d8, r0, r1
 801ae36:	eeb0 0a48 	vmov.f32	s0, s16
 801ae3a:	eef0 0a68 	vmov.f32	s1, s17
 801ae3e:	ecbd 8b02 	vpop	{d8}
 801ae42:	bd38      	pop	{r3, r4, r5, pc}
 801ae44:	0000      	movs	r0, r0
	...

0801ae48 <cos>:
 801ae48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ae4a:	ec53 2b10 	vmov	r2, r3, d0
 801ae4e:	4826      	ldr	r0, [pc, #152]	@ (801aee8 <cos+0xa0>)
 801ae50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801ae54:	4281      	cmp	r1, r0
 801ae56:	d806      	bhi.n	801ae66 <cos+0x1e>
 801ae58:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801aee0 <cos+0x98>
 801ae5c:	b005      	add	sp, #20
 801ae5e:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae62:	f000 ba81 	b.w	801b368 <__kernel_cos>
 801ae66:	4821      	ldr	r0, [pc, #132]	@ (801aeec <cos+0xa4>)
 801ae68:	4281      	cmp	r1, r0
 801ae6a:	d908      	bls.n	801ae7e <cos+0x36>
 801ae6c:	4610      	mov	r0, r2
 801ae6e:	4619      	mov	r1, r3
 801ae70:	f7e5 f9e2 	bl	8000238 <__aeabi_dsub>
 801ae74:	ec41 0b10 	vmov	d0, r0, r1
 801ae78:	b005      	add	sp, #20
 801ae7a:	f85d fb04 	ldr.w	pc, [sp], #4
 801ae7e:	4668      	mov	r0, sp
 801ae80:	f000 fdae 	bl	801b9e0 <__ieee754_rem_pio2>
 801ae84:	f000 0003 	and.w	r0, r0, #3
 801ae88:	2801      	cmp	r0, #1
 801ae8a:	d00b      	beq.n	801aea4 <cos+0x5c>
 801ae8c:	2802      	cmp	r0, #2
 801ae8e:	d015      	beq.n	801aebc <cos+0x74>
 801ae90:	b9d8      	cbnz	r0, 801aeca <cos+0x82>
 801ae92:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ae96:	ed9d 0b00 	vldr	d0, [sp]
 801ae9a:	f000 fa65 	bl	801b368 <__kernel_cos>
 801ae9e:	ec51 0b10 	vmov	r0, r1, d0
 801aea2:	e7e7      	b.n	801ae74 <cos+0x2c>
 801aea4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aea8:	ed9d 0b00 	vldr	d0, [sp]
 801aeac:	f000 fb24 	bl	801b4f8 <__kernel_sin>
 801aeb0:	ec53 2b10 	vmov	r2, r3, d0
 801aeb4:	4610      	mov	r0, r2
 801aeb6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801aeba:	e7db      	b.n	801ae74 <cos+0x2c>
 801aebc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aec0:	ed9d 0b00 	vldr	d0, [sp]
 801aec4:	f000 fa50 	bl	801b368 <__kernel_cos>
 801aec8:	e7f2      	b.n	801aeb0 <cos+0x68>
 801aeca:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aece:	ed9d 0b00 	vldr	d0, [sp]
 801aed2:	2001      	movs	r0, #1
 801aed4:	f000 fb10 	bl	801b4f8 <__kernel_sin>
 801aed8:	e7e1      	b.n	801ae9e <cos+0x56>
 801aeda:	bf00      	nop
 801aedc:	f3af 8000 	nop.w
	...
 801aee8:	3fe921fb 	.word	0x3fe921fb
 801aeec:	7fefffff 	.word	0x7fefffff

0801aef0 <sin>:
 801aef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801aef2:	ec53 2b10 	vmov	r2, r3, d0
 801aef6:	4826      	ldr	r0, [pc, #152]	@ (801af90 <sin+0xa0>)
 801aef8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801aefc:	4281      	cmp	r1, r0
 801aefe:	d807      	bhi.n	801af10 <sin+0x20>
 801af00:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801af88 <sin+0x98>
 801af04:	2000      	movs	r0, #0
 801af06:	b005      	add	sp, #20
 801af08:	f85d eb04 	ldr.w	lr, [sp], #4
 801af0c:	f000 baf4 	b.w	801b4f8 <__kernel_sin>
 801af10:	4820      	ldr	r0, [pc, #128]	@ (801af94 <sin+0xa4>)
 801af12:	4281      	cmp	r1, r0
 801af14:	d908      	bls.n	801af28 <sin+0x38>
 801af16:	4610      	mov	r0, r2
 801af18:	4619      	mov	r1, r3
 801af1a:	f7e5 f98d 	bl	8000238 <__aeabi_dsub>
 801af1e:	ec41 0b10 	vmov	d0, r0, r1
 801af22:	b005      	add	sp, #20
 801af24:	f85d fb04 	ldr.w	pc, [sp], #4
 801af28:	4668      	mov	r0, sp
 801af2a:	f000 fd59 	bl	801b9e0 <__ieee754_rem_pio2>
 801af2e:	f000 0003 	and.w	r0, r0, #3
 801af32:	2801      	cmp	r0, #1
 801af34:	d00c      	beq.n	801af50 <sin+0x60>
 801af36:	2802      	cmp	r0, #2
 801af38:	d011      	beq.n	801af5e <sin+0x6e>
 801af3a:	b9e8      	cbnz	r0, 801af78 <sin+0x88>
 801af3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af40:	ed9d 0b00 	vldr	d0, [sp]
 801af44:	2001      	movs	r0, #1
 801af46:	f000 fad7 	bl	801b4f8 <__kernel_sin>
 801af4a:	ec51 0b10 	vmov	r0, r1, d0
 801af4e:	e7e6      	b.n	801af1e <sin+0x2e>
 801af50:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af54:	ed9d 0b00 	vldr	d0, [sp]
 801af58:	f000 fa06 	bl	801b368 <__kernel_cos>
 801af5c:	e7f5      	b.n	801af4a <sin+0x5a>
 801af5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af62:	ed9d 0b00 	vldr	d0, [sp]
 801af66:	2001      	movs	r0, #1
 801af68:	f000 fac6 	bl	801b4f8 <__kernel_sin>
 801af6c:	ec53 2b10 	vmov	r2, r3, d0
 801af70:	4610      	mov	r0, r2
 801af72:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801af76:	e7d2      	b.n	801af1e <sin+0x2e>
 801af78:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af7c:	ed9d 0b00 	vldr	d0, [sp]
 801af80:	f000 f9f2 	bl	801b368 <__kernel_cos>
 801af84:	e7f2      	b.n	801af6c <sin+0x7c>
 801af86:	bf00      	nop
	...
 801af90:	3fe921fb 	.word	0x3fe921fb
 801af94:	7fefffff 	.word	0x7fefffff

0801af98 <expf>:
 801af98:	b508      	push	{r3, lr}
 801af9a:	ed2d 8b02 	vpush	{d8}
 801af9e:	eef0 8a40 	vmov.f32	s17, s0
 801afa2:	f000 ff55 	bl	801be50 <__ieee754_expf>
 801afa6:	eeb0 8a40 	vmov.f32	s16, s0
 801afaa:	eeb0 0a68 	vmov.f32	s0, s17
 801afae:	f000 f877 	bl	801b0a0 <finitef>
 801afb2:	b160      	cbz	r0, 801afce <expf+0x36>
 801afb4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801aff4 <expf+0x5c>
 801afb8:	eef4 8ae7 	vcmpe.f32	s17, s15
 801afbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afc0:	dd0a      	ble.n	801afd8 <expf+0x40>
 801afc2:	f7fd faa1 	bl	8018508 <__errno>
 801afc6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 801aff8 <expf+0x60>
 801afca:	2322      	movs	r3, #34	@ 0x22
 801afcc:	6003      	str	r3, [r0, #0]
 801afce:	eeb0 0a48 	vmov.f32	s0, s16
 801afd2:	ecbd 8b02 	vpop	{d8}
 801afd6:	bd08      	pop	{r3, pc}
 801afd8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801affc <expf+0x64>
 801afdc:	eef4 8ae7 	vcmpe.f32	s17, s15
 801afe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afe4:	d5f3      	bpl.n	801afce <expf+0x36>
 801afe6:	f7fd fa8f 	bl	8018508 <__errno>
 801afea:	2322      	movs	r3, #34	@ 0x22
 801afec:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 801b000 <expf+0x68>
 801aff0:	6003      	str	r3, [r0, #0]
 801aff2:	e7ec      	b.n	801afce <expf+0x36>
 801aff4:	42b17217 	.word	0x42b17217
 801aff8:	7f800000 	.word	0x7f800000
 801affc:	c2cff1b5 	.word	0xc2cff1b5
 801b000:	00000000 	.word	0x00000000

0801b004 <fmin>:
 801b004:	b508      	push	{r3, lr}
 801b006:	ed2d 8b04 	vpush	{d8-d9}
 801b00a:	eeb0 8a40 	vmov.f32	s16, s0
 801b00e:	eef0 8a60 	vmov.f32	s17, s1
 801b012:	eeb0 9a41 	vmov.f32	s18, s2
 801b016:	eef0 9a61 	vmov.f32	s19, s3
 801b01a:	f000 f81d 	bl	801b058 <__fpclassifyd>
 801b01e:	b950      	cbnz	r0, 801b036 <fmin+0x32>
 801b020:	eeb0 8a49 	vmov.f32	s16, s18
 801b024:	eef0 8a69 	vmov.f32	s17, s19
 801b028:	eeb0 0a48 	vmov.f32	s0, s16
 801b02c:	eef0 0a68 	vmov.f32	s1, s17
 801b030:	ecbd 8b04 	vpop	{d8-d9}
 801b034:	bd08      	pop	{r3, pc}
 801b036:	eeb0 0a49 	vmov.f32	s0, s18
 801b03a:	eef0 0a69 	vmov.f32	s1, s19
 801b03e:	f000 f80b 	bl	801b058 <__fpclassifyd>
 801b042:	2800      	cmp	r0, #0
 801b044:	d0f0      	beq.n	801b028 <fmin+0x24>
 801b046:	ec53 2b19 	vmov	r2, r3, d9
 801b04a:	ec51 0b18 	vmov	r0, r1, d8
 801b04e:	f7e5 fd1d 	bl	8000a8c <__aeabi_dcmplt>
 801b052:	2800      	cmp	r0, #0
 801b054:	d0e4      	beq.n	801b020 <fmin+0x1c>
 801b056:	e7e7      	b.n	801b028 <fmin+0x24>

0801b058 <__fpclassifyd>:
 801b058:	ec51 0b10 	vmov	r0, r1, d0
 801b05c:	460b      	mov	r3, r1
 801b05e:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 801b062:	b510      	push	{r4, lr}
 801b064:	d104      	bne.n	801b070 <__fpclassifyd+0x18>
 801b066:	2800      	cmp	r0, #0
 801b068:	bf0c      	ite	eq
 801b06a:	2002      	moveq	r0, #2
 801b06c:	2003      	movne	r0, #3
 801b06e:	bd10      	pop	{r4, pc}
 801b070:	4a09      	ldr	r2, [pc, #36]	@ (801b098 <__fpclassifyd+0x40>)
 801b072:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 801b076:	4294      	cmp	r4, r2
 801b078:	d908      	bls.n	801b08c <__fpclassifyd+0x34>
 801b07a:	4a08      	ldr	r2, [pc, #32]	@ (801b09c <__fpclassifyd+0x44>)
 801b07c:	4213      	tst	r3, r2
 801b07e:	d007      	beq.n	801b090 <__fpclassifyd+0x38>
 801b080:	4291      	cmp	r1, r2
 801b082:	d107      	bne.n	801b094 <__fpclassifyd+0x3c>
 801b084:	fab0 f080 	clz	r0, r0
 801b088:	0940      	lsrs	r0, r0, #5
 801b08a:	e7f0      	b.n	801b06e <__fpclassifyd+0x16>
 801b08c:	2004      	movs	r0, #4
 801b08e:	e7ee      	b.n	801b06e <__fpclassifyd+0x16>
 801b090:	2003      	movs	r0, #3
 801b092:	e7ec      	b.n	801b06e <__fpclassifyd+0x16>
 801b094:	2000      	movs	r0, #0
 801b096:	e7ea      	b.n	801b06e <__fpclassifyd+0x16>
 801b098:	7fdfffff 	.word	0x7fdfffff
 801b09c:	7ff00000 	.word	0x7ff00000

0801b0a0 <finitef>:
 801b0a0:	ee10 3a10 	vmov	r3, s0
 801b0a4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801b0a8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801b0ac:	bfac      	ite	ge
 801b0ae:	2000      	movge	r0, #0
 801b0b0:	2001      	movlt	r0, #1
 801b0b2:	4770      	bx	lr

0801b0b4 <cosl>:
 801b0b4:	f7ff bec8 	b.w	801ae48 <cos>

0801b0b8 <sinl>:
 801b0b8:	f7ff bf1a 	b.w	801aef0 <sin>

0801b0bc <acosl>:
 801b0bc:	f000 be8c 	b.w	801bdd8 <acos>

0801b0c0 <__ieee754_sqrt>:
 801b0c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0c4:	4a66      	ldr	r2, [pc, #408]	@ (801b260 <__ieee754_sqrt+0x1a0>)
 801b0c6:	ec55 4b10 	vmov	r4, r5, d0
 801b0ca:	43aa      	bics	r2, r5
 801b0cc:	462b      	mov	r3, r5
 801b0ce:	4621      	mov	r1, r4
 801b0d0:	d110      	bne.n	801b0f4 <__ieee754_sqrt+0x34>
 801b0d2:	4622      	mov	r2, r4
 801b0d4:	4620      	mov	r0, r4
 801b0d6:	4629      	mov	r1, r5
 801b0d8:	f7e5 fa66 	bl	80005a8 <__aeabi_dmul>
 801b0dc:	4602      	mov	r2, r0
 801b0de:	460b      	mov	r3, r1
 801b0e0:	4620      	mov	r0, r4
 801b0e2:	4629      	mov	r1, r5
 801b0e4:	f7e5 f8aa 	bl	800023c <__adddf3>
 801b0e8:	4604      	mov	r4, r0
 801b0ea:	460d      	mov	r5, r1
 801b0ec:	ec45 4b10 	vmov	d0, r4, r5
 801b0f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0f4:	2d00      	cmp	r5, #0
 801b0f6:	dc0e      	bgt.n	801b116 <__ieee754_sqrt+0x56>
 801b0f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801b0fc:	4322      	orrs	r2, r4
 801b0fe:	d0f5      	beq.n	801b0ec <__ieee754_sqrt+0x2c>
 801b100:	b19d      	cbz	r5, 801b12a <__ieee754_sqrt+0x6a>
 801b102:	4622      	mov	r2, r4
 801b104:	4620      	mov	r0, r4
 801b106:	4629      	mov	r1, r5
 801b108:	f7e5 f896 	bl	8000238 <__aeabi_dsub>
 801b10c:	4602      	mov	r2, r0
 801b10e:	460b      	mov	r3, r1
 801b110:	f7e5 fb74 	bl	80007fc <__aeabi_ddiv>
 801b114:	e7e8      	b.n	801b0e8 <__ieee754_sqrt+0x28>
 801b116:	152a      	asrs	r2, r5, #20
 801b118:	d115      	bne.n	801b146 <__ieee754_sqrt+0x86>
 801b11a:	2000      	movs	r0, #0
 801b11c:	e009      	b.n	801b132 <__ieee754_sqrt+0x72>
 801b11e:	0acb      	lsrs	r3, r1, #11
 801b120:	3a15      	subs	r2, #21
 801b122:	0549      	lsls	r1, r1, #21
 801b124:	2b00      	cmp	r3, #0
 801b126:	d0fa      	beq.n	801b11e <__ieee754_sqrt+0x5e>
 801b128:	e7f7      	b.n	801b11a <__ieee754_sqrt+0x5a>
 801b12a:	462a      	mov	r2, r5
 801b12c:	e7fa      	b.n	801b124 <__ieee754_sqrt+0x64>
 801b12e:	005b      	lsls	r3, r3, #1
 801b130:	3001      	adds	r0, #1
 801b132:	02dc      	lsls	r4, r3, #11
 801b134:	d5fb      	bpl.n	801b12e <__ieee754_sqrt+0x6e>
 801b136:	1e44      	subs	r4, r0, #1
 801b138:	1b12      	subs	r2, r2, r4
 801b13a:	f1c0 0420 	rsb	r4, r0, #32
 801b13e:	fa21 f404 	lsr.w	r4, r1, r4
 801b142:	4323      	orrs	r3, r4
 801b144:	4081      	lsls	r1, r0
 801b146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b14a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801b14e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b152:	07d2      	lsls	r2, r2, #31
 801b154:	bf5c      	itt	pl
 801b156:	005b      	lslpl	r3, r3, #1
 801b158:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801b15c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b160:	bf58      	it	pl
 801b162:	0049      	lslpl	r1, r1, #1
 801b164:	2600      	movs	r6, #0
 801b166:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801b16a:	107f      	asrs	r7, r7, #1
 801b16c:	0049      	lsls	r1, r1, #1
 801b16e:	2016      	movs	r0, #22
 801b170:	4632      	mov	r2, r6
 801b172:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801b176:	1915      	adds	r5, r2, r4
 801b178:	429d      	cmp	r5, r3
 801b17a:	bfde      	ittt	le
 801b17c:	192a      	addle	r2, r5, r4
 801b17e:	1b5b      	suble	r3, r3, r5
 801b180:	1936      	addle	r6, r6, r4
 801b182:	0fcd      	lsrs	r5, r1, #31
 801b184:	3801      	subs	r0, #1
 801b186:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801b18a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b18e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b192:	d1f0      	bne.n	801b176 <__ieee754_sqrt+0xb6>
 801b194:	4605      	mov	r5, r0
 801b196:	2420      	movs	r4, #32
 801b198:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801b19c:	4293      	cmp	r3, r2
 801b19e:	eb0c 0e00 	add.w	lr, ip, r0
 801b1a2:	dc02      	bgt.n	801b1aa <__ieee754_sqrt+0xea>
 801b1a4:	d113      	bne.n	801b1ce <__ieee754_sqrt+0x10e>
 801b1a6:	458e      	cmp	lr, r1
 801b1a8:	d811      	bhi.n	801b1ce <__ieee754_sqrt+0x10e>
 801b1aa:	f1be 0f00 	cmp.w	lr, #0
 801b1ae:	eb0e 000c 	add.w	r0, lr, ip
 801b1b2:	da3f      	bge.n	801b234 <__ieee754_sqrt+0x174>
 801b1b4:	2800      	cmp	r0, #0
 801b1b6:	db3d      	blt.n	801b234 <__ieee754_sqrt+0x174>
 801b1b8:	f102 0801 	add.w	r8, r2, #1
 801b1bc:	1a9b      	subs	r3, r3, r2
 801b1be:	458e      	cmp	lr, r1
 801b1c0:	bf88      	it	hi
 801b1c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801b1c6:	eba1 010e 	sub.w	r1, r1, lr
 801b1ca:	4465      	add	r5, ip
 801b1cc:	4642      	mov	r2, r8
 801b1ce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801b1d2:	3c01      	subs	r4, #1
 801b1d4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801b1d8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b1dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801b1e0:	d1dc      	bne.n	801b19c <__ieee754_sqrt+0xdc>
 801b1e2:	4319      	orrs	r1, r3
 801b1e4:	d01b      	beq.n	801b21e <__ieee754_sqrt+0x15e>
 801b1e6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 801b264 <__ieee754_sqrt+0x1a4>
 801b1ea:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 801b268 <__ieee754_sqrt+0x1a8>
 801b1ee:	e9da 0100 	ldrd	r0, r1, [sl]
 801b1f2:	e9db 2300 	ldrd	r2, r3, [fp]
 801b1f6:	f7e5 f81f 	bl	8000238 <__aeabi_dsub>
 801b1fa:	e9da 8900 	ldrd	r8, r9, [sl]
 801b1fe:	4602      	mov	r2, r0
 801b200:	460b      	mov	r3, r1
 801b202:	4640      	mov	r0, r8
 801b204:	4649      	mov	r1, r9
 801b206:	f7e5 fc4b 	bl	8000aa0 <__aeabi_dcmple>
 801b20a:	b140      	cbz	r0, 801b21e <__ieee754_sqrt+0x15e>
 801b20c:	f1b5 3fff 	cmp.w	r5, #4294967295
 801b210:	e9da 0100 	ldrd	r0, r1, [sl]
 801b214:	e9db 2300 	ldrd	r2, r3, [fp]
 801b218:	d10e      	bne.n	801b238 <__ieee754_sqrt+0x178>
 801b21a:	3601      	adds	r6, #1
 801b21c:	4625      	mov	r5, r4
 801b21e:	1073      	asrs	r3, r6, #1
 801b220:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801b224:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 801b228:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 801b22c:	086b      	lsrs	r3, r5, #1
 801b22e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801b232:	e759      	b.n	801b0e8 <__ieee754_sqrt+0x28>
 801b234:	4690      	mov	r8, r2
 801b236:	e7c1      	b.n	801b1bc <__ieee754_sqrt+0xfc>
 801b238:	f7e5 f800 	bl	800023c <__adddf3>
 801b23c:	e9da 8900 	ldrd	r8, r9, [sl]
 801b240:	4602      	mov	r2, r0
 801b242:	460b      	mov	r3, r1
 801b244:	4640      	mov	r0, r8
 801b246:	4649      	mov	r1, r9
 801b248:	f7e5 fc20 	bl	8000a8c <__aeabi_dcmplt>
 801b24c:	b120      	cbz	r0, 801b258 <__ieee754_sqrt+0x198>
 801b24e:	1cab      	adds	r3, r5, #2
 801b250:	bf08      	it	eq
 801b252:	3601      	addeq	r6, #1
 801b254:	3502      	adds	r5, #2
 801b256:	e7e2      	b.n	801b21e <__ieee754_sqrt+0x15e>
 801b258:	1c6b      	adds	r3, r5, #1
 801b25a:	f023 0501 	bic.w	r5, r3, #1
 801b25e:	e7de      	b.n	801b21e <__ieee754_sqrt+0x15e>
 801b260:	7ff00000 	.word	0x7ff00000
 801b264:	0801f588 	.word	0x0801f588
 801b268:	0801f580 	.word	0x0801f580
 801b26c:	00000000 	.word	0x00000000

0801b270 <floor>:
 801b270:	ec51 0b10 	vmov	r0, r1, d0
 801b274:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b27c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801b280:	2e13      	cmp	r6, #19
 801b282:	460c      	mov	r4, r1
 801b284:	4605      	mov	r5, r0
 801b286:	4680      	mov	r8, r0
 801b288:	dc34      	bgt.n	801b2f4 <floor+0x84>
 801b28a:	2e00      	cmp	r6, #0
 801b28c:	da17      	bge.n	801b2be <floor+0x4e>
 801b28e:	a332      	add	r3, pc, #200	@ (adr r3, 801b358 <floor+0xe8>)
 801b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b294:	f7e4 ffd2 	bl	800023c <__adddf3>
 801b298:	2200      	movs	r2, #0
 801b29a:	2300      	movs	r3, #0
 801b29c:	f7e5 fc14 	bl	8000ac8 <__aeabi_dcmpgt>
 801b2a0:	b150      	cbz	r0, 801b2b8 <floor+0x48>
 801b2a2:	2c00      	cmp	r4, #0
 801b2a4:	da55      	bge.n	801b352 <floor+0xe2>
 801b2a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801b2aa:	432c      	orrs	r4, r5
 801b2ac:	2500      	movs	r5, #0
 801b2ae:	42ac      	cmp	r4, r5
 801b2b0:	4c2b      	ldr	r4, [pc, #172]	@ (801b360 <floor+0xf0>)
 801b2b2:	bf08      	it	eq
 801b2b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801b2b8:	4621      	mov	r1, r4
 801b2ba:	4628      	mov	r0, r5
 801b2bc:	e023      	b.n	801b306 <floor+0x96>
 801b2be:	4f29      	ldr	r7, [pc, #164]	@ (801b364 <floor+0xf4>)
 801b2c0:	4137      	asrs	r7, r6
 801b2c2:	ea01 0307 	and.w	r3, r1, r7
 801b2c6:	4303      	orrs	r3, r0
 801b2c8:	d01d      	beq.n	801b306 <floor+0x96>
 801b2ca:	a323      	add	r3, pc, #140	@ (adr r3, 801b358 <floor+0xe8>)
 801b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2d0:	f7e4 ffb4 	bl	800023c <__adddf3>
 801b2d4:	2200      	movs	r2, #0
 801b2d6:	2300      	movs	r3, #0
 801b2d8:	f7e5 fbf6 	bl	8000ac8 <__aeabi_dcmpgt>
 801b2dc:	2800      	cmp	r0, #0
 801b2de:	d0eb      	beq.n	801b2b8 <floor+0x48>
 801b2e0:	2c00      	cmp	r4, #0
 801b2e2:	bfbe      	ittt	lt
 801b2e4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801b2e8:	4133      	asrlt	r3, r6
 801b2ea:	18e4      	addlt	r4, r4, r3
 801b2ec:	ea24 0407 	bic.w	r4, r4, r7
 801b2f0:	2500      	movs	r5, #0
 801b2f2:	e7e1      	b.n	801b2b8 <floor+0x48>
 801b2f4:	2e33      	cmp	r6, #51	@ 0x33
 801b2f6:	dd0a      	ble.n	801b30e <floor+0x9e>
 801b2f8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801b2fc:	d103      	bne.n	801b306 <floor+0x96>
 801b2fe:	4602      	mov	r2, r0
 801b300:	460b      	mov	r3, r1
 801b302:	f7e4 ff9b 	bl	800023c <__adddf3>
 801b306:	ec41 0b10 	vmov	d0, r0, r1
 801b30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b30e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801b312:	f04f 37ff 	mov.w	r7, #4294967295
 801b316:	40df      	lsrs	r7, r3
 801b318:	4207      	tst	r7, r0
 801b31a:	d0f4      	beq.n	801b306 <floor+0x96>
 801b31c:	a30e      	add	r3, pc, #56	@ (adr r3, 801b358 <floor+0xe8>)
 801b31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b322:	f7e4 ff8b 	bl	800023c <__adddf3>
 801b326:	2200      	movs	r2, #0
 801b328:	2300      	movs	r3, #0
 801b32a:	f7e5 fbcd 	bl	8000ac8 <__aeabi_dcmpgt>
 801b32e:	2800      	cmp	r0, #0
 801b330:	d0c2      	beq.n	801b2b8 <floor+0x48>
 801b332:	2c00      	cmp	r4, #0
 801b334:	da0a      	bge.n	801b34c <floor+0xdc>
 801b336:	2e14      	cmp	r6, #20
 801b338:	d101      	bne.n	801b33e <floor+0xce>
 801b33a:	3401      	adds	r4, #1
 801b33c:	e006      	b.n	801b34c <floor+0xdc>
 801b33e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801b342:	2301      	movs	r3, #1
 801b344:	40b3      	lsls	r3, r6
 801b346:	441d      	add	r5, r3
 801b348:	4545      	cmp	r5, r8
 801b34a:	d3f6      	bcc.n	801b33a <floor+0xca>
 801b34c:	ea25 0507 	bic.w	r5, r5, r7
 801b350:	e7b2      	b.n	801b2b8 <floor+0x48>
 801b352:	2500      	movs	r5, #0
 801b354:	462c      	mov	r4, r5
 801b356:	e7af      	b.n	801b2b8 <floor+0x48>
 801b358:	8800759c 	.word	0x8800759c
 801b35c:	7e37e43c 	.word	0x7e37e43c
 801b360:	bff00000 	.word	0xbff00000
 801b364:	000fffff 	.word	0x000fffff

0801b368 <__kernel_cos>:
 801b368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b36c:	ec57 6b10 	vmov	r6, r7, d0
 801b370:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801b374:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801b378:	ed8d 1b00 	vstr	d1, [sp]
 801b37c:	d206      	bcs.n	801b38c <__kernel_cos+0x24>
 801b37e:	4630      	mov	r0, r6
 801b380:	4639      	mov	r1, r7
 801b382:	f7e5 fbc1 	bl	8000b08 <__aeabi_d2iz>
 801b386:	2800      	cmp	r0, #0
 801b388:	f000 8088 	beq.w	801b49c <__kernel_cos+0x134>
 801b38c:	4632      	mov	r2, r6
 801b38e:	463b      	mov	r3, r7
 801b390:	4630      	mov	r0, r6
 801b392:	4639      	mov	r1, r7
 801b394:	f7e5 f908 	bl	80005a8 <__aeabi_dmul>
 801b398:	4b51      	ldr	r3, [pc, #324]	@ (801b4e0 <__kernel_cos+0x178>)
 801b39a:	2200      	movs	r2, #0
 801b39c:	4604      	mov	r4, r0
 801b39e:	460d      	mov	r5, r1
 801b3a0:	f7e5 f902 	bl	80005a8 <__aeabi_dmul>
 801b3a4:	a340      	add	r3, pc, #256	@ (adr r3, 801b4a8 <__kernel_cos+0x140>)
 801b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3aa:	4682      	mov	sl, r0
 801b3ac:	468b      	mov	fp, r1
 801b3ae:	4620      	mov	r0, r4
 801b3b0:	4629      	mov	r1, r5
 801b3b2:	f7e5 f8f9 	bl	80005a8 <__aeabi_dmul>
 801b3b6:	a33e      	add	r3, pc, #248	@ (adr r3, 801b4b0 <__kernel_cos+0x148>)
 801b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3bc:	f7e4 ff3e 	bl	800023c <__adddf3>
 801b3c0:	4622      	mov	r2, r4
 801b3c2:	462b      	mov	r3, r5
 801b3c4:	f7e5 f8f0 	bl	80005a8 <__aeabi_dmul>
 801b3c8:	a33b      	add	r3, pc, #236	@ (adr r3, 801b4b8 <__kernel_cos+0x150>)
 801b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3ce:	f7e4 ff33 	bl	8000238 <__aeabi_dsub>
 801b3d2:	4622      	mov	r2, r4
 801b3d4:	462b      	mov	r3, r5
 801b3d6:	f7e5 f8e7 	bl	80005a8 <__aeabi_dmul>
 801b3da:	a339      	add	r3, pc, #228	@ (adr r3, 801b4c0 <__kernel_cos+0x158>)
 801b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3e0:	f7e4 ff2c 	bl	800023c <__adddf3>
 801b3e4:	4622      	mov	r2, r4
 801b3e6:	462b      	mov	r3, r5
 801b3e8:	f7e5 f8de 	bl	80005a8 <__aeabi_dmul>
 801b3ec:	a336      	add	r3, pc, #216	@ (adr r3, 801b4c8 <__kernel_cos+0x160>)
 801b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3f2:	f7e4 ff21 	bl	8000238 <__aeabi_dsub>
 801b3f6:	4622      	mov	r2, r4
 801b3f8:	462b      	mov	r3, r5
 801b3fa:	f7e5 f8d5 	bl	80005a8 <__aeabi_dmul>
 801b3fe:	a334      	add	r3, pc, #208	@ (adr r3, 801b4d0 <__kernel_cos+0x168>)
 801b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b404:	f7e4 ff1a 	bl	800023c <__adddf3>
 801b408:	4622      	mov	r2, r4
 801b40a:	462b      	mov	r3, r5
 801b40c:	f7e5 f8cc 	bl	80005a8 <__aeabi_dmul>
 801b410:	4622      	mov	r2, r4
 801b412:	462b      	mov	r3, r5
 801b414:	f7e5 f8c8 	bl	80005a8 <__aeabi_dmul>
 801b418:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b41c:	4604      	mov	r4, r0
 801b41e:	460d      	mov	r5, r1
 801b420:	4630      	mov	r0, r6
 801b422:	4639      	mov	r1, r7
 801b424:	f7e5 f8c0 	bl	80005a8 <__aeabi_dmul>
 801b428:	460b      	mov	r3, r1
 801b42a:	4602      	mov	r2, r0
 801b42c:	4629      	mov	r1, r5
 801b42e:	4620      	mov	r0, r4
 801b430:	f7e4 ff02 	bl	8000238 <__aeabi_dsub>
 801b434:	4b2b      	ldr	r3, [pc, #172]	@ (801b4e4 <__kernel_cos+0x17c>)
 801b436:	4598      	cmp	r8, r3
 801b438:	4606      	mov	r6, r0
 801b43a:	460f      	mov	r7, r1
 801b43c:	d810      	bhi.n	801b460 <__kernel_cos+0xf8>
 801b43e:	4602      	mov	r2, r0
 801b440:	460b      	mov	r3, r1
 801b442:	4650      	mov	r0, sl
 801b444:	4659      	mov	r1, fp
 801b446:	f7e4 fef7 	bl	8000238 <__aeabi_dsub>
 801b44a:	460b      	mov	r3, r1
 801b44c:	4926      	ldr	r1, [pc, #152]	@ (801b4e8 <__kernel_cos+0x180>)
 801b44e:	4602      	mov	r2, r0
 801b450:	2000      	movs	r0, #0
 801b452:	f7e4 fef1 	bl	8000238 <__aeabi_dsub>
 801b456:	ec41 0b10 	vmov	d0, r0, r1
 801b45a:	b003      	add	sp, #12
 801b45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b460:	4b22      	ldr	r3, [pc, #136]	@ (801b4ec <__kernel_cos+0x184>)
 801b462:	4921      	ldr	r1, [pc, #132]	@ (801b4e8 <__kernel_cos+0x180>)
 801b464:	4598      	cmp	r8, r3
 801b466:	bf8c      	ite	hi
 801b468:	4d21      	ldrhi	r5, [pc, #132]	@ (801b4f0 <__kernel_cos+0x188>)
 801b46a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801b46e:	2400      	movs	r4, #0
 801b470:	4622      	mov	r2, r4
 801b472:	462b      	mov	r3, r5
 801b474:	2000      	movs	r0, #0
 801b476:	f7e4 fedf 	bl	8000238 <__aeabi_dsub>
 801b47a:	4622      	mov	r2, r4
 801b47c:	4680      	mov	r8, r0
 801b47e:	4689      	mov	r9, r1
 801b480:	462b      	mov	r3, r5
 801b482:	4650      	mov	r0, sl
 801b484:	4659      	mov	r1, fp
 801b486:	f7e4 fed7 	bl	8000238 <__aeabi_dsub>
 801b48a:	4632      	mov	r2, r6
 801b48c:	463b      	mov	r3, r7
 801b48e:	f7e4 fed3 	bl	8000238 <__aeabi_dsub>
 801b492:	4602      	mov	r2, r0
 801b494:	460b      	mov	r3, r1
 801b496:	4640      	mov	r0, r8
 801b498:	4649      	mov	r1, r9
 801b49a:	e7da      	b.n	801b452 <__kernel_cos+0xea>
 801b49c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801b4d8 <__kernel_cos+0x170>
 801b4a0:	e7db      	b.n	801b45a <__kernel_cos+0xf2>
 801b4a2:	bf00      	nop
 801b4a4:	f3af 8000 	nop.w
 801b4a8:	be8838d4 	.word	0xbe8838d4
 801b4ac:	bda8fae9 	.word	0xbda8fae9
 801b4b0:	bdb4b1c4 	.word	0xbdb4b1c4
 801b4b4:	3e21ee9e 	.word	0x3e21ee9e
 801b4b8:	809c52ad 	.word	0x809c52ad
 801b4bc:	3e927e4f 	.word	0x3e927e4f
 801b4c0:	19cb1590 	.word	0x19cb1590
 801b4c4:	3efa01a0 	.word	0x3efa01a0
 801b4c8:	16c15177 	.word	0x16c15177
 801b4cc:	3f56c16c 	.word	0x3f56c16c
 801b4d0:	5555554c 	.word	0x5555554c
 801b4d4:	3fa55555 	.word	0x3fa55555
 801b4d8:	00000000 	.word	0x00000000
 801b4dc:	3ff00000 	.word	0x3ff00000
 801b4e0:	3fe00000 	.word	0x3fe00000
 801b4e4:	3fd33332 	.word	0x3fd33332
 801b4e8:	3ff00000 	.word	0x3ff00000
 801b4ec:	3fe90000 	.word	0x3fe90000
 801b4f0:	3fd20000 	.word	0x3fd20000
 801b4f4:	00000000 	.word	0x00000000

0801b4f8 <__kernel_sin>:
 801b4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4fc:	ec55 4b10 	vmov	r4, r5, d0
 801b500:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801b504:	b085      	sub	sp, #20
 801b506:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801b50a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801b50e:	4680      	mov	r8, r0
 801b510:	d205      	bcs.n	801b51e <__kernel_sin+0x26>
 801b512:	4620      	mov	r0, r4
 801b514:	4629      	mov	r1, r5
 801b516:	f7e5 faf7 	bl	8000b08 <__aeabi_d2iz>
 801b51a:	2800      	cmp	r0, #0
 801b51c:	d052      	beq.n	801b5c4 <__kernel_sin+0xcc>
 801b51e:	4622      	mov	r2, r4
 801b520:	462b      	mov	r3, r5
 801b522:	4620      	mov	r0, r4
 801b524:	4629      	mov	r1, r5
 801b526:	f7e5 f83f 	bl	80005a8 <__aeabi_dmul>
 801b52a:	4682      	mov	sl, r0
 801b52c:	468b      	mov	fp, r1
 801b52e:	4602      	mov	r2, r0
 801b530:	460b      	mov	r3, r1
 801b532:	4620      	mov	r0, r4
 801b534:	4629      	mov	r1, r5
 801b536:	f7e5 f837 	bl	80005a8 <__aeabi_dmul>
 801b53a:	a342      	add	r3, pc, #264	@ (adr r3, 801b644 <__kernel_sin+0x14c>)
 801b53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b540:	e9cd 0100 	strd	r0, r1, [sp]
 801b544:	4650      	mov	r0, sl
 801b546:	4659      	mov	r1, fp
 801b548:	f7e5 f82e 	bl	80005a8 <__aeabi_dmul>
 801b54c:	a33f      	add	r3, pc, #252	@ (adr r3, 801b64c <__kernel_sin+0x154>)
 801b54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b552:	f7e4 fe71 	bl	8000238 <__aeabi_dsub>
 801b556:	4652      	mov	r2, sl
 801b558:	465b      	mov	r3, fp
 801b55a:	f7e5 f825 	bl	80005a8 <__aeabi_dmul>
 801b55e:	a33d      	add	r3, pc, #244	@ (adr r3, 801b654 <__kernel_sin+0x15c>)
 801b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b564:	f7e4 fe6a 	bl	800023c <__adddf3>
 801b568:	4652      	mov	r2, sl
 801b56a:	465b      	mov	r3, fp
 801b56c:	f7e5 f81c 	bl	80005a8 <__aeabi_dmul>
 801b570:	a33a      	add	r3, pc, #232	@ (adr r3, 801b65c <__kernel_sin+0x164>)
 801b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b576:	f7e4 fe5f 	bl	8000238 <__aeabi_dsub>
 801b57a:	4652      	mov	r2, sl
 801b57c:	465b      	mov	r3, fp
 801b57e:	f7e5 f813 	bl	80005a8 <__aeabi_dmul>
 801b582:	a338      	add	r3, pc, #224	@ (adr r3, 801b664 <__kernel_sin+0x16c>)
 801b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b588:	f7e4 fe58 	bl	800023c <__adddf3>
 801b58c:	4606      	mov	r6, r0
 801b58e:	460f      	mov	r7, r1
 801b590:	f1b8 0f00 	cmp.w	r8, #0
 801b594:	d11b      	bne.n	801b5ce <__kernel_sin+0xd6>
 801b596:	4602      	mov	r2, r0
 801b598:	460b      	mov	r3, r1
 801b59a:	4650      	mov	r0, sl
 801b59c:	4659      	mov	r1, fp
 801b59e:	f7e5 f803 	bl	80005a8 <__aeabi_dmul>
 801b5a2:	a325      	add	r3, pc, #148	@ (adr r3, 801b638 <__kernel_sin+0x140>)
 801b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5a8:	f7e4 fe46 	bl	8000238 <__aeabi_dsub>
 801b5ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b5b0:	f7e4 fffa 	bl	80005a8 <__aeabi_dmul>
 801b5b4:	4602      	mov	r2, r0
 801b5b6:	460b      	mov	r3, r1
 801b5b8:	4620      	mov	r0, r4
 801b5ba:	4629      	mov	r1, r5
 801b5bc:	f7e4 fe3e 	bl	800023c <__adddf3>
 801b5c0:	4604      	mov	r4, r0
 801b5c2:	460d      	mov	r5, r1
 801b5c4:	ec45 4b10 	vmov	d0, r4, r5
 801b5c8:	b005      	add	sp, #20
 801b5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b5d2:	4b1b      	ldr	r3, [pc, #108]	@ (801b640 <__kernel_sin+0x148>)
 801b5d4:	2200      	movs	r2, #0
 801b5d6:	f7e4 ffe7 	bl	80005a8 <__aeabi_dmul>
 801b5da:	4632      	mov	r2, r6
 801b5dc:	4680      	mov	r8, r0
 801b5de:	4689      	mov	r9, r1
 801b5e0:	463b      	mov	r3, r7
 801b5e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b5e6:	f7e4 ffdf 	bl	80005a8 <__aeabi_dmul>
 801b5ea:	4602      	mov	r2, r0
 801b5ec:	460b      	mov	r3, r1
 801b5ee:	4640      	mov	r0, r8
 801b5f0:	4649      	mov	r1, r9
 801b5f2:	f7e4 fe21 	bl	8000238 <__aeabi_dsub>
 801b5f6:	4652      	mov	r2, sl
 801b5f8:	465b      	mov	r3, fp
 801b5fa:	f7e4 ffd5 	bl	80005a8 <__aeabi_dmul>
 801b5fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b602:	f7e4 fe19 	bl	8000238 <__aeabi_dsub>
 801b606:	a30c      	add	r3, pc, #48	@ (adr r3, 801b638 <__kernel_sin+0x140>)
 801b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b60c:	4606      	mov	r6, r0
 801b60e:	460f      	mov	r7, r1
 801b610:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b614:	f7e4 ffc8 	bl	80005a8 <__aeabi_dmul>
 801b618:	4602      	mov	r2, r0
 801b61a:	460b      	mov	r3, r1
 801b61c:	4630      	mov	r0, r6
 801b61e:	4639      	mov	r1, r7
 801b620:	f7e4 fe0c 	bl	800023c <__adddf3>
 801b624:	4602      	mov	r2, r0
 801b626:	460b      	mov	r3, r1
 801b628:	4620      	mov	r0, r4
 801b62a:	4629      	mov	r1, r5
 801b62c:	f7e4 fe04 	bl	8000238 <__aeabi_dsub>
 801b630:	e7c6      	b.n	801b5c0 <__kernel_sin+0xc8>
 801b632:	bf00      	nop
 801b634:	f3af 8000 	nop.w
 801b638:	55555549 	.word	0x55555549
 801b63c:	3fc55555 	.word	0x3fc55555
 801b640:	3fe00000 	.word	0x3fe00000
 801b644:	5acfd57c 	.word	0x5acfd57c
 801b648:	3de5d93a 	.word	0x3de5d93a
 801b64c:	8a2b9ceb 	.word	0x8a2b9ceb
 801b650:	3e5ae5e6 	.word	0x3e5ae5e6
 801b654:	57b1fe7d 	.word	0x57b1fe7d
 801b658:	3ec71de3 	.word	0x3ec71de3
 801b65c:	19c161d5 	.word	0x19c161d5
 801b660:	3f2a01a0 	.word	0x3f2a01a0
 801b664:	1110f8a6 	.word	0x1110f8a6
 801b668:	3f811111 	.word	0x3f811111
 801b66c:	00000000 	.word	0x00000000

0801b670 <__ieee754_log>:
 801b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b674:	ec51 0b10 	vmov	r0, r1, d0
 801b678:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 801b67c:	b087      	sub	sp, #28
 801b67e:	460d      	mov	r5, r1
 801b680:	da26      	bge.n	801b6d0 <__ieee754_log+0x60>
 801b682:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801b686:	4303      	orrs	r3, r0
 801b688:	4602      	mov	r2, r0
 801b68a:	d10a      	bne.n	801b6a2 <__ieee754_log+0x32>
 801b68c:	49ce      	ldr	r1, [pc, #824]	@ (801b9c8 <__ieee754_log+0x358>)
 801b68e:	2200      	movs	r2, #0
 801b690:	2300      	movs	r3, #0
 801b692:	2000      	movs	r0, #0
 801b694:	f7e5 f8b2 	bl	80007fc <__aeabi_ddiv>
 801b698:	ec41 0b10 	vmov	d0, r0, r1
 801b69c:	b007      	add	sp, #28
 801b69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6a2:	2900      	cmp	r1, #0
 801b6a4:	da05      	bge.n	801b6b2 <__ieee754_log+0x42>
 801b6a6:	460b      	mov	r3, r1
 801b6a8:	f7e4 fdc6 	bl	8000238 <__aeabi_dsub>
 801b6ac:	2200      	movs	r2, #0
 801b6ae:	2300      	movs	r3, #0
 801b6b0:	e7f0      	b.n	801b694 <__ieee754_log+0x24>
 801b6b2:	4bc6      	ldr	r3, [pc, #792]	@ (801b9cc <__ieee754_log+0x35c>)
 801b6b4:	2200      	movs	r2, #0
 801b6b6:	f7e4 ff77 	bl	80005a8 <__aeabi_dmul>
 801b6ba:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 801b6be:	460d      	mov	r5, r1
 801b6c0:	4ac3      	ldr	r2, [pc, #780]	@ (801b9d0 <__ieee754_log+0x360>)
 801b6c2:	4295      	cmp	r5, r2
 801b6c4:	dd06      	ble.n	801b6d4 <__ieee754_log+0x64>
 801b6c6:	4602      	mov	r2, r0
 801b6c8:	460b      	mov	r3, r1
 801b6ca:	f7e4 fdb7 	bl	800023c <__adddf3>
 801b6ce:	e7e3      	b.n	801b698 <__ieee754_log+0x28>
 801b6d0:	2300      	movs	r3, #0
 801b6d2:	e7f5      	b.n	801b6c0 <__ieee754_log+0x50>
 801b6d4:	152c      	asrs	r4, r5, #20
 801b6d6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 801b6da:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801b6de:	441c      	add	r4, r3
 801b6e0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 801b6e4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 801b6e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801b6ec:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 801b6f0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 801b6f4:	ea42 0105 	orr.w	r1, r2, r5
 801b6f8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801b6fc:	2200      	movs	r2, #0
 801b6fe:	4bb5      	ldr	r3, [pc, #724]	@ (801b9d4 <__ieee754_log+0x364>)
 801b700:	f7e4 fd9a 	bl	8000238 <__aeabi_dsub>
 801b704:	1cab      	adds	r3, r5, #2
 801b706:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b70a:	2b02      	cmp	r3, #2
 801b70c:	4682      	mov	sl, r0
 801b70e:	468b      	mov	fp, r1
 801b710:	f04f 0200 	mov.w	r2, #0
 801b714:	dc53      	bgt.n	801b7be <__ieee754_log+0x14e>
 801b716:	2300      	movs	r3, #0
 801b718:	f7e5 f9ae 	bl	8000a78 <__aeabi_dcmpeq>
 801b71c:	b1d0      	cbz	r0, 801b754 <__ieee754_log+0xe4>
 801b71e:	2c00      	cmp	r4, #0
 801b720:	f000 8120 	beq.w	801b964 <__ieee754_log+0x2f4>
 801b724:	4620      	mov	r0, r4
 801b726:	f7e4 fed5 	bl	80004d4 <__aeabi_i2d>
 801b72a:	a391      	add	r3, pc, #580	@ (adr r3, 801b970 <__ieee754_log+0x300>)
 801b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b730:	4606      	mov	r6, r0
 801b732:	460f      	mov	r7, r1
 801b734:	f7e4 ff38 	bl	80005a8 <__aeabi_dmul>
 801b738:	a38f      	add	r3, pc, #572	@ (adr r3, 801b978 <__ieee754_log+0x308>)
 801b73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b73e:	4604      	mov	r4, r0
 801b740:	460d      	mov	r5, r1
 801b742:	4630      	mov	r0, r6
 801b744:	4639      	mov	r1, r7
 801b746:	f7e4 ff2f 	bl	80005a8 <__aeabi_dmul>
 801b74a:	4602      	mov	r2, r0
 801b74c:	460b      	mov	r3, r1
 801b74e:	4620      	mov	r0, r4
 801b750:	4629      	mov	r1, r5
 801b752:	e7ba      	b.n	801b6ca <__ieee754_log+0x5a>
 801b754:	a38a      	add	r3, pc, #552	@ (adr r3, 801b980 <__ieee754_log+0x310>)
 801b756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b75a:	4650      	mov	r0, sl
 801b75c:	4659      	mov	r1, fp
 801b75e:	f7e4 ff23 	bl	80005a8 <__aeabi_dmul>
 801b762:	4602      	mov	r2, r0
 801b764:	460b      	mov	r3, r1
 801b766:	2000      	movs	r0, #0
 801b768:	499b      	ldr	r1, [pc, #620]	@ (801b9d8 <__ieee754_log+0x368>)
 801b76a:	f7e4 fd65 	bl	8000238 <__aeabi_dsub>
 801b76e:	4652      	mov	r2, sl
 801b770:	4606      	mov	r6, r0
 801b772:	460f      	mov	r7, r1
 801b774:	465b      	mov	r3, fp
 801b776:	4650      	mov	r0, sl
 801b778:	4659      	mov	r1, fp
 801b77a:	f7e4 ff15 	bl	80005a8 <__aeabi_dmul>
 801b77e:	4602      	mov	r2, r0
 801b780:	460b      	mov	r3, r1
 801b782:	4630      	mov	r0, r6
 801b784:	4639      	mov	r1, r7
 801b786:	f7e4 ff0f 	bl	80005a8 <__aeabi_dmul>
 801b78a:	4606      	mov	r6, r0
 801b78c:	460f      	mov	r7, r1
 801b78e:	b914      	cbnz	r4, 801b796 <__ieee754_log+0x126>
 801b790:	4632      	mov	r2, r6
 801b792:	463b      	mov	r3, r7
 801b794:	e0a0      	b.n	801b8d8 <__ieee754_log+0x268>
 801b796:	4620      	mov	r0, r4
 801b798:	f7e4 fe9c 	bl	80004d4 <__aeabi_i2d>
 801b79c:	a374      	add	r3, pc, #464	@ (adr r3, 801b970 <__ieee754_log+0x300>)
 801b79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7a2:	4680      	mov	r8, r0
 801b7a4:	4689      	mov	r9, r1
 801b7a6:	f7e4 feff 	bl	80005a8 <__aeabi_dmul>
 801b7aa:	a373      	add	r3, pc, #460	@ (adr r3, 801b978 <__ieee754_log+0x308>)
 801b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7b0:	4604      	mov	r4, r0
 801b7b2:	460d      	mov	r5, r1
 801b7b4:	4640      	mov	r0, r8
 801b7b6:	4649      	mov	r1, r9
 801b7b8:	f7e4 fef6 	bl	80005a8 <__aeabi_dmul>
 801b7bc:	e0a5      	b.n	801b90a <__ieee754_log+0x29a>
 801b7be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801b7c2:	f7e4 fd3b 	bl	800023c <__adddf3>
 801b7c6:	4602      	mov	r2, r0
 801b7c8:	460b      	mov	r3, r1
 801b7ca:	4650      	mov	r0, sl
 801b7cc:	4659      	mov	r1, fp
 801b7ce:	f7e5 f815 	bl	80007fc <__aeabi_ddiv>
 801b7d2:	e9cd 0100 	strd	r0, r1, [sp]
 801b7d6:	4620      	mov	r0, r4
 801b7d8:	f7e4 fe7c 	bl	80004d4 <__aeabi_i2d>
 801b7dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b7e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b7e4:	4610      	mov	r0, r2
 801b7e6:	4619      	mov	r1, r3
 801b7e8:	f7e4 fede 	bl	80005a8 <__aeabi_dmul>
 801b7ec:	4602      	mov	r2, r0
 801b7ee:	460b      	mov	r3, r1
 801b7f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b7f4:	f7e4 fed8 	bl	80005a8 <__aeabi_dmul>
 801b7f8:	a363      	add	r3, pc, #396	@ (adr r3, 801b988 <__ieee754_log+0x318>)
 801b7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7fe:	4680      	mov	r8, r0
 801b800:	4689      	mov	r9, r1
 801b802:	f7e4 fed1 	bl	80005a8 <__aeabi_dmul>
 801b806:	a362      	add	r3, pc, #392	@ (adr r3, 801b990 <__ieee754_log+0x320>)
 801b808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b80c:	f7e4 fd16 	bl	800023c <__adddf3>
 801b810:	4642      	mov	r2, r8
 801b812:	464b      	mov	r3, r9
 801b814:	f7e4 fec8 	bl	80005a8 <__aeabi_dmul>
 801b818:	a35f      	add	r3, pc, #380	@ (adr r3, 801b998 <__ieee754_log+0x328>)
 801b81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b81e:	f7e4 fd0d 	bl	800023c <__adddf3>
 801b822:	4642      	mov	r2, r8
 801b824:	464b      	mov	r3, r9
 801b826:	f7e4 febf 	bl	80005a8 <__aeabi_dmul>
 801b82a:	a35d      	add	r3, pc, #372	@ (adr r3, 801b9a0 <__ieee754_log+0x330>)
 801b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b830:	f7e4 fd04 	bl	800023c <__adddf3>
 801b834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b838:	f7e4 feb6 	bl	80005a8 <__aeabi_dmul>
 801b83c:	a35a      	add	r3, pc, #360	@ (adr r3, 801b9a8 <__ieee754_log+0x338>)
 801b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b842:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b846:	4640      	mov	r0, r8
 801b848:	4649      	mov	r1, r9
 801b84a:	f7e4 fead 	bl	80005a8 <__aeabi_dmul>
 801b84e:	a358      	add	r3, pc, #352	@ (adr r3, 801b9b0 <__ieee754_log+0x340>)
 801b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b854:	f7e4 fcf2 	bl	800023c <__adddf3>
 801b858:	4642      	mov	r2, r8
 801b85a:	464b      	mov	r3, r9
 801b85c:	f7e4 fea4 	bl	80005a8 <__aeabi_dmul>
 801b860:	a355      	add	r3, pc, #340	@ (adr r3, 801b9b8 <__ieee754_log+0x348>)
 801b862:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b866:	f7e4 fce9 	bl	800023c <__adddf3>
 801b86a:	4642      	mov	r2, r8
 801b86c:	464b      	mov	r3, r9
 801b86e:	f7e4 fe9b 	bl	80005a8 <__aeabi_dmul>
 801b872:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 801b876:	4602      	mov	r2, r0
 801b878:	460b      	mov	r3, r1
 801b87a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 801b87e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b882:	f7e4 fcdb 	bl	800023c <__adddf3>
 801b886:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 801b88a:	3551      	adds	r5, #81	@ 0x51
 801b88c:	4335      	orrs	r5, r6
 801b88e:	2d00      	cmp	r5, #0
 801b890:	4680      	mov	r8, r0
 801b892:	4689      	mov	r9, r1
 801b894:	dd48      	ble.n	801b928 <__ieee754_log+0x2b8>
 801b896:	4b50      	ldr	r3, [pc, #320]	@ (801b9d8 <__ieee754_log+0x368>)
 801b898:	2200      	movs	r2, #0
 801b89a:	4650      	mov	r0, sl
 801b89c:	4659      	mov	r1, fp
 801b89e:	f7e4 fe83 	bl	80005a8 <__aeabi_dmul>
 801b8a2:	4652      	mov	r2, sl
 801b8a4:	465b      	mov	r3, fp
 801b8a6:	f7e4 fe7f 	bl	80005a8 <__aeabi_dmul>
 801b8aa:	4602      	mov	r2, r0
 801b8ac:	460b      	mov	r3, r1
 801b8ae:	4606      	mov	r6, r0
 801b8b0:	460f      	mov	r7, r1
 801b8b2:	4640      	mov	r0, r8
 801b8b4:	4649      	mov	r1, r9
 801b8b6:	f7e4 fcc1 	bl	800023c <__adddf3>
 801b8ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b8be:	f7e4 fe73 	bl	80005a8 <__aeabi_dmul>
 801b8c2:	4680      	mov	r8, r0
 801b8c4:	4689      	mov	r9, r1
 801b8c6:	b964      	cbnz	r4, 801b8e2 <__ieee754_log+0x272>
 801b8c8:	4602      	mov	r2, r0
 801b8ca:	460b      	mov	r3, r1
 801b8cc:	4630      	mov	r0, r6
 801b8ce:	4639      	mov	r1, r7
 801b8d0:	f7e4 fcb2 	bl	8000238 <__aeabi_dsub>
 801b8d4:	4602      	mov	r2, r0
 801b8d6:	460b      	mov	r3, r1
 801b8d8:	4650      	mov	r0, sl
 801b8da:	4659      	mov	r1, fp
 801b8dc:	f7e4 fcac 	bl	8000238 <__aeabi_dsub>
 801b8e0:	e6da      	b.n	801b698 <__ieee754_log+0x28>
 801b8e2:	a323      	add	r3, pc, #140	@ (adr r3, 801b970 <__ieee754_log+0x300>)
 801b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b8ec:	f7e4 fe5c 	bl	80005a8 <__aeabi_dmul>
 801b8f0:	a321      	add	r3, pc, #132	@ (adr r3, 801b978 <__ieee754_log+0x308>)
 801b8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8f6:	4604      	mov	r4, r0
 801b8f8:	460d      	mov	r5, r1
 801b8fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b8fe:	f7e4 fe53 	bl	80005a8 <__aeabi_dmul>
 801b902:	4642      	mov	r2, r8
 801b904:	464b      	mov	r3, r9
 801b906:	f7e4 fc99 	bl	800023c <__adddf3>
 801b90a:	4602      	mov	r2, r0
 801b90c:	460b      	mov	r3, r1
 801b90e:	4630      	mov	r0, r6
 801b910:	4639      	mov	r1, r7
 801b912:	f7e4 fc91 	bl	8000238 <__aeabi_dsub>
 801b916:	4652      	mov	r2, sl
 801b918:	465b      	mov	r3, fp
 801b91a:	f7e4 fc8d 	bl	8000238 <__aeabi_dsub>
 801b91e:	4602      	mov	r2, r0
 801b920:	460b      	mov	r3, r1
 801b922:	4620      	mov	r0, r4
 801b924:	4629      	mov	r1, r5
 801b926:	e7d9      	b.n	801b8dc <__ieee754_log+0x26c>
 801b928:	4602      	mov	r2, r0
 801b92a:	460b      	mov	r3, r1
 801b92c:	4650      	mov	r0, sl
 801b92e:	4659      	mov	r1, fp
 801b930:	f7e4 fc82 	bl	8000238 <__aeabi_dsub>
 801b934:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b938:	f7e4 fe36 	bl	80005a8 <__aeabi_dmul>
 801b93c:	4606      	mov	r6, r0
 801b93e:	460f      	mov	r7, r1
 801b940:	2c00      	cmp	r4, #0
 801b942:	f43f af25 	beq.w	801b790 <__ieee754_log+0x120>
 801b946:	a30a      	add	r3, pc, #40	@ (adr r3, 801b970 <__ieee754_log+0x300>)
 801b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b94c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b950:	f7e4 fe2a 	bl	80005a8 <__aeabi_dmul>
 801b954:	a308      	add	r3, pc, #32	@ (adr r3, 801b978 <__ieee754_log+0x308>)
 801b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b95a:	4604      	mov	r4, r0
 801b95c:	460d      	mov	r5, r1
 801b95e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b962:	e729      	b.n	801b7b8 <__ieee754_log+0x148>
 801b964:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801b9c0 <__ieee754_log+0x350>
 801b968:	e698      	b.n	801b69c <__ieee754_log+0x2c>
 801b96a:	bf00      	nop
 801b96c:	f3af 8000 	nop.w
 801b970:	fee00000 	.word	0xfee00000
 801b974:	3fe62e42 	.word	0x3fe62e42
 801b978:	35793c76 	.word	0x35793c76
 801b97c:	3dea39ef 	.word	0x3dea39ef
 801b980:	55555555 	.word	0x55555555
 801b984:	3fd55555 	.word	0x3fd55555
 801b988:	df3e5244 	.word	0xdf3e5244
 801b98c:	3fc2f112 	.word	0x3fc2f112
 801b990:	96cb03de 	.word	0x96cb03de
 801b994:	3fc74664 	.word	0x3fc74664
 801b998:	94229359 	.word	0x94229359
 801b99c:	3fd24924 	.word	0x3fd24924
 801b9a0:	55555593 	.word	0x55555593
 801b9a4:	3fe55555 	.word	0x3fe55555
 801b9a8:	d078c69f 	.word	0xd078c69f
 801b9ac:	3fc39a09 	.word	0x3fc39a09
 801b9b0:	1d8e78af 	.word	0x1d8e78af
 801b9b4:	3fcc71c5 	.word	0x3fcc71c5
 801b9b8:	9997fa04 	.word	0x9997fa04
 801b9bc:	3fd99999 	.word	0x3fd99999
	...
 801b9c8:	c3500000 	.word	0xc3500000
 801b9cc:	43500000 	.word	0x43500000
 801b9d0:	7fefffff 	.word	0x7fefffff
 801b9d4:	3ff00000 	.word	0x3ff00000
 801b9d8:	3fe00000 	.word	0x3fe00000
 801b9dc:	00000000 	.word	0x00000000

0801b9e0 <__ieee754_rem_pio2>:
 801b9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9e4:	ec57 6b10 	vmov	r6, r7, d0
 801b9e8:	4bc5      	ldr	r3, [pc, #788]	@ (801bd00 <__ieee754_rem_pio2+0x320>)
 801b9ea:	b08d      	sub	sp, #52	@ 0x34
 801b9ec:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801b9f0:	4598      	cmp	r8, r3
 801b9f2:	4604      	mov	r4, r0
 801b9f4:	9704      	str	r7, [sp, #16]
 801b9f6:	d807      	bhi.n	801ba08 <__ieee754_rem_pio2+0x28>
 801b9f8:	2200      	movs	r2, #0
 801b9fa:	2300      	movs	r3, #0
 801b9fc:	ed80 0b00 	vstr	d0, [r0]
 801ba00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ba04:	2500      	movs	r5, #0
 801ba06:	e028      	b.n	801ba5a <__ieee754_rem_pio2+0x7a>
 801ba08:	4bbe      	ldr	r3, [pc, #760]	@ (801bd04 <__ieee754_rem_pio2+0x324>)
 801ba0a:	4598      	cmp	r8, r3
 801ba0c:	d878      	bhi.n	801bb00 <__ieee754_rem_pio2+0x120>
 801ba0e:	9b04      	ldr	r3, [sp, #16]
 801ba10:	4dbd      	ldr	r5, [pc, #756]	@ (801bd08 <__ieee754_rem_pio2+0x328>)
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	4630      	mov	r0, r6
 801ba16:	a3ac      	add	r3, pc, #688	@ (adr r3, 801bcc8 <__ieee754_rem_pio2+0x2e8>)
 801ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba1c:	4639      	mov	r1, r7
 801ba1e:	dd38      	ble.n	801ba92 <__ieee754_rem_pio2+0xb2>
 801ba20:	f7e4 fc0a 	bl	8000238 <__aeabi_dsub>
 801ba24:	45a8      	cmp	r8, r5
 801ba26:	4606      	mov	r6, r0
 801ba28:	460f      	mov	r7, r1
 801ba2a:	d01a      	beq.n	801ba62 <__ieee754_rem_pio2+0x82>
 801ba2c:	a3a8      	add	r3, pc, #672	@ (adr r3, 801bcd0 <__ieee754_rem_pio2+0x2f0>)
 801ba2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba32:	f7e4 fc01 	bl	8000238 <__aeabi_dsub>
 801ba36:	4602      	mov	r2, r0
 801ba38:	460b      	mov	r3, r1
 801ba3a:	4680      	mov	r8, r0
 801ba3c:	4689      	mov	r9, r1
 801ba3e:	4630      	mov	r0, r6
 801ba40:	4639      	mov	r1, r7
 801ba42:	f7e4 fbf9 	bl	8000238 <__aeabi_dsub>
 801ba46:	a3a2      	add	r3, pc, #648	@ (adr r3, 801bcd0 <__ieee754_rem_pio2+0x2f0>)
 801ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba4c:	f7e4 fbf4 	bl	8000238 <__aeabi_dsub>
 801ba50:	e9c4 8900 	strd	r8, r9, [r4]
 801ba54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ba58:	2501      	movs	r5, #1
 801ba5a:	4628      	mov	r0, r5
 801ba5c:	b00d      	add	sp, #52	@ 0x34
 801ba5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba62:	a39d      	add	r3, pc, #628	@ (adr r3, 801bcd8 <__ieee754_rem_pio2+0x2f8>)
 801ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba68:	f7e4 fbe6 	bl	8000238 <__aeabi_dsub>
 801ba6c:	a39c      	add	r3, pc, #624	@ (adr r3, 801bce0 <__ieee754_rem_pio2+0x300>)
 801ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba72:	4606      	mov	r6, r0
 801ba74:	460f      	mov	r7, r1
 801ba76:	f7e4 fbdf 	bl	8000238 <__aeabi_dsub>
 801ba7a:	4602      	mov	r2, r0
 801ba7c:	460b      	mov	r3, r1
 801ba7e:	4680      	mov	r8, r0
 801ba80:	4689      	mov	r9, r1
 801ba82:	4630      	mov	r0, r6
 801ba84:	4639      	mov	r1, r7
 801ba86:	f7e4 fbd7 	bl	8000238 <__aeabi_dsub>
 801ba8a:	a395      	add	r3, pc, #596	@ (adr r3, 801bce0 <__ieee754_rem_pio2+0x300>)
 801ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba90:	e7dc      	b.n	801ba4c <__ieee754_rem_pio2+0x6c>
 801ba92:	f7e4 fbd3 	bl	800023c <__adddf3>
 801ba96:	45a8      	cmp	r8, r5
 801ba98:	4606      	mov	r6, r0
 801ba9a:	460f      	mov	r7, r1
 801ba9c:	d018      	beq.n	801bad0 <__ieee754_rem_pio2+0xf0>
 801ba9e:	a38c      	add	r3, pc, #560	@ (adr r3, 801bcd0 <__ieee754_rem_pio2+0x2f0>)
 801baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baa4:	f7e4 fbca 	bl	800023c <__adddf3>
 801baa8:	4602      	mov	r2, r0
 801baaa:	460b      	mov	r3, r1
 801baac:	4680      	mov	r8, r0
 801baae:	4689      	mov	r9, r1
 801bab0:	4630      	mov	r0, r6
 801bab2:	4639      	mov	r1, r7
 801bab4:	f7e4 fbc0 	bl	8000238 <__aeabi_dsub>
 801bab8:	a385      	add	r3, pc, #532	@ (adr r3, 801bcd0 <__ieee754_rem_pio2+0x2f0>)
 801baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801babe:	f7e4 fbbd 	bl	800023c <__adddf3>
 801bac2:	f04f 35ff 	mov.w	r5, #4294967295
 801bac6:	e9c4 8900 	strd	r8, r9, [r4]
 801baca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801bace:	e7c4      	b.n	801ba5a <__ieee754_rem_pio2+0x7a>
 801bad0:	a381      	add	r3, pc, #516	@ (adr r3, 801bcd8 <__ieee754_rem_pio2+0x2f8>)
 801bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bad6:	f7e4 fbb1 	bl	800023c <__adddf3>
 801bada:	a381      	add	r3, pc, #516	@ (adr r3, 801bce0 <__ieee754_rem_pio2+0x300>)
 801badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bae0:	4606      	mov	r6, r0
 801bae2:	460f      	mov	r7, r1
 801bae4:	f7e4 fbaa 	bl	800023c <__adddf3>
 801bae8:	4602      	mov	r2, r0
 801baea:	460b      	mov	r3, r1
 801baec:	4680      	mov	r8, r0
 801baee:	4689      	mov	r9, r1
 801baf0:	4630      	mov	r0, r6
 801baf2:	4639      	mov	r1, r7
 801baf4:	f7e4 fba0 	bl	8000238 <__aeabi_dsub>
 801baf8:	a379      	add	r3, pc, #484	@ (adr r3, 801bce0 <__ieee754_rem_pio2+0x300>)
 801bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bafe:	e7de      	b.n	801babe <__ieee754_rem_pio2+0xde>
 801bb00:	4b82      	ldr	r3, [pc, #520]	@ (801bd0c <__ieee754_rem_pio2+0x32c>)
 801bb02:	4598      	cmp	r8, r3
 801bb04:	f200 80d1 	bhi.w	801bcaa <__ieee754_rem_pio2+0x2ca>
 801bb08:	f000 f99a 	bl	801be40 <fabs>
 801bb0c:	ec57 6b10 	vmov	r6, r7, d0
 801bb10:	a375      	add	r3, pc, #468	@ (adr r3, 801bce8 <__ieee754_rem_pio2+0x308>)
 801bb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb16:	4630      	mov	r0, r6
 801bb18:	4639      	mov	r1, r7
 801bb1a:	f7e4 fd45 	bl	80005a8 <__aeabi_dmul>
 801bb1e:	4b7c      	ldr	r3, [pc, #496]	@ (801bd10 <__ieee754_rem_pio2+0x330>)
 801bb20:	2200      	movs	r2, #0
 801bb22:	f7e4 fb8b 	bl	800023c <__adddf3>
 801bb26:	f7e4 ffef 	bl	8000b08 <__aeabi_d2iz>
 801bb2a:	4605      	mov	r5, r0
 801bb2c:	f7e4 fcd2 	bl	80004d4 <__aeabi_i2d>
 801bb30:	4602      	mov	r2, r0
 801bb32:	460b      	mov	r3, r1
 801bb34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bb38:	a363      	add	r3, pc, #396	@ (adr r3, 801bcc8 <__ieee754_rem_pio2+0x2e8>)
 801bb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb3e:	f7e4 fd33 	bl	80005a8 <__aeabi_dmul>
 801bb42:	4602      	mov	r2, r0
 801bb44:	460b      	mov	r3, r1
 801bb46:	4630      	mov	r0, r6
 801bb48:	4639      	mov	r1, r7
 801bb4a:	f7e4 fb75 	bl	8000238 <__aeabi_dsub>
 801bb4e:	a360      	add	r3, pc, #384	@ (adr r3, 801bcd0 <__ieee754_rem_pio2+0x2f0>)
 801bb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb54:	4682      	mov	sl, r0
 801bb56:	468b      	mov	fp, r1
 801bb58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb5c:	f7e4 fd24 	bl	80005a8 <__aeabi_dmul>
 801bb60:	2d1f      	cmp	r5, #31
 801bb62:	4606      	mov	r6, r0
 801bb64:	460f      	mov	r7, r1
 801bb66:	dc0c      	bgt.n	801bb82 <__ieee754_rem_pio2+0x1a2>
 801bb68:	4b6a      	ldr	r3, [pc, #424]	@ (801bd14 <__ieee754_rem_pio2+0x334>)
 801bb6a:	1e6a      	subs	r2, r5, #1
 801bb6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bb70:	4543      	cmp	r3, r8
 801bb72:	d006      	beq.n	801bb82 <__ieee754_rem_pio2+0x1a2>
 801bb74:	4632      	mov	r2, r6
 801bb76:	463b      	mov	r3, r7
 801bb78:	4650      	mov	r0, sl
 801bb7a:	4659      	mov	r1, fp
 801bb7c:	f7e4 fb5c 	bl	8000238 <__aeabi_dsub>
 801bb80:	e00e      	b.n	801bba0 <__ieee754_rem_pio2+0x1c0>
 801bb82:	463b      	mov	r3, r7
 801bb84:	4632      	mov	r2, r6
 801bb86:	4650      	mov	r0, sl
 801bb88:	4659      	mov	r1, fp
 801bb8a:	f7e4 fb55 	bl	8000238 <__aeabi_dsub>
 801bb8e:	ea4f 5328 	mov.w	r3, r8, asr #20
 801bb92:	9305      	str	r3, [sp, #20]
 801bb94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801bb98:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801bb9c:	2b10      	cmp	r3, #16
 801bb9e:	dc02      	bgt.n	801bba6 <__ieee754_rem_pio2+0x1c6>
 801bba0:	e9c4 0100 	strd	r0, r1, [r4]
 801bba4:	e039      	b.n	801bc1a <__ieee754_rem_pio2+0x23a>
 801bba6:	a34c      	add	r3, pc, #304	@ (adr r3, 801bcd8 <__ieee754_rem_pio2+0x2f8>)
 801bba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bbb0:	f7e4 fcfa 	bl	80005a8 <__aeabi_dmul>
 801bbb4:	4606      	mov	r6, r0
 801bbb6:	460f      	mov	r7, r1
 801bbb8:	4602      	mov	r2, r0
 801bbba:	460b      	mov	r3, r1
 801bbbc:	4650      	mov	r0, sl
 801bbbe:	4659      	mov	r1, fp
 801bbc0:	f7e4 fb3a 	bl	8000238 <__aeabi_dsub>
 801bbc4:	4602      	mov	r2, r0
 801bbc6:	460b      	mov	r3, r1
 801bbc8:	4680      	mov	r8, r0
 801bbca:	4689      	mov	r9, r1
 801bbcc:	4650      	mov	r0, sl
 801bbce:	4659      	mov	r1, fp
 801bbd0:	f7e4 fb32 	bl	8000238 <__aeabi_dsub>
 801bbd4:	4632      	mov	r2, r6
 801bbd6:	463b      	mov	r3, r7
 801bbd8:	f7e4 fb2e 	bl	8000238 <__aeabi_dsub>
 801bbdc:	a340      	add	r3, pc, #256	@ (adr r3, 801bce0 <__ieee754_rem_pio2+0x300>)
 801bbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbe2:	4606      	mov	r6, r0
 801bbe4:	460f      	mov	r7, r1
 801bbe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bbea:	f7e4 fcdd 	bl	80005a8 <__aeabi_dmul>
 801bbee:	4632      	mov	r2, r6
 801bbf0:	463b      	mov	r3, r7
 801bbf2:	f7e4 fb21 	bl	8000238 <__aeabi_dsub>
 801bbf6:	4602      	mov	r2, r0
 801bbf8:	460b      	mov	r3, r1
 801bbfa:	4606      	mov	r6, r0
 801bbfc:	460f      	mov	r7, r1
 801bbfe:	4640      	mov	r0, r8
 801bc00:	4649      	mov	r1, r9
 801bc02:	f7e4 fb19 	bl	8000238 <__aeabi_dsub>
 801bc06:	9a05      	ldr	r2, [sp, #20]
 801bc08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801bc0c:	1ad3      	subs	r3, r2, r3
 801bc0e:	2b31      	cmp	r3, #49	@ 0x31
 801bc10:	dc20      	bgt.n	801bc54 <__ieee754_rem_pio2+0x274>
 801bc12:	e9c4 0100 	strd	r0, r1, [r4]
 801bc16:	46c2      	mov	sl, r8
 801bc18:	46cb      	mov	fp, r9
 801bc1a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801bc1e:	4650      	mov	r0, sl
 801bc20:	4642      	mov	r2, r8
 801bc22:	464b      	mov	r3, r9
 801bc24:	4659      	mov	r1, fp
 801bc26:	f7e4 fb07 	bl	8000238 <__aeabi_dsub>
 801bc2a:	463b      	mov	r3, r7
 801bc2c:	4632      	mov	r2, r6
 801bc2e:	f7e4 fb03 	bl	8000238 <__aeabi_dsub>
 801bc32:	9b04      	ldr	r3, [sp, #16]
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801bc3a:	f6bf af0e 	bge.w	801ba5a <__ieee754_rem_pio2+0x7a>
 801bc3e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801bc42:	6063      	str	r3, [r4, #4]
 801bc44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801bc48:	f8c4 8000 	str.w	r8, [r4]
 801bc4c:	60a0      	str	r0, [r4, #8]
 801bc4e:	60e3      	str	r3, [r4, #12]
 801bc50:	426d      	negs	r5, r5
 801bc52:	e702      	b.n	801ba5a <__ieee754_rem_pio2+0x7a>
 801bc54:	a326      	add	r3, pc, #152	@ (adr r3, 801bcf0 <__ieee754_rem_pio2+0x310>)
 801bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc5e:	f7e4 fca3 	bl	80005a8 <__aeabi_dmul>
 801bc62:	4606      	mov	r6, r0
 801bc64:	460f      	mov	r7, r1
 801bc66:	4602      	mov	r2, r0
 801bc68:	460b      	mov	r3, r1
 801bc6a:	4640      	mov	r0, r8
 801bc6c:	4649      	mov	r1, r9
 801bc6e:	f7e4 fae3 	bl	8000238 <__aeabi_dsub>
 801bc72:	4602      	mov	r2, r0
 801bc74:	460b      	mov	r3, r1
 801bc76:	4682      	mov	sl, r0
 801bc78:	468b      	mov	fp, r1
 801bc7a:	4640      	mov	r0, r8
 801bc7c:	4649      	mov	r1, r9
 801bc7e:	f7e4 fadb 	bl	8000238 <__aeabi_dsub>
 801bc82:	4632      	mov	r2, r6
 801bc84:	463b      	mov	r3, r7
 801bc86:	f7e4 fad7 	bl	8000238 <__aeabi_dsub>
 801bc8a:	a31b      	add	r3, pc, #108	@ (adr r3, 801bcf8 <__ieee754_rem_pio2+0x318>)
 801bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc90:	4606      	mov	r6, r0
 801bc92:	460f      	mov	r7, r1
 801bc94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc98:	f7e4 fc86 	bl	80005a8 <__aeabi_dmul>
 801bc9c:	4632      	mov	r2, r6
 801bc9e:	463b      	mov	r3, r7
 801bca0:	f7e4 faca 	bl	8000238 <__aeabi_dsub>
 801bca4:	4606      	mov	r6, r0
 801bca6:	460f      	mov	r7, r1
 801bca8:	e764      	b.n	801bb74 <__ieee754_rem_pio2+0x194>
 801bcaa:	4b1b      	ldr	r3, [pc, #108]	@ (801bd18 <__ieee754_rem_pio2+0x338>)
 801bcac:	4598      	cmp	r8, r3
 801bcae:	d935      	bls.n	801bd1c <__ieee754_rem_pio2+0x33c>
 801bcb0:	4632      	mov	r2, r6
 801bcb2:	463b      	mov	r3, r7
 801bcb4:	4630      	mov	r0, r6
 801bcb6:	4639      	mov	r1, r7
 801bcb8:	f7e4 fabe 	bl	8000238 <__aeabi_dsub>
 801bcbc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801bcc0:	e9c4 0100 	strd	r0, r1, [r4]
 801bcc4:	e69e      	b.n	801ba04 <__ieee754_rem_pio2+0x24>
 801bcc6:	bf00      	nop
 801bcc8:	54400000 	.word	0x54400000
 801bccc:	3ff921fb 	.word	0x3ff921fb
 801bcd0:	1a626331 	.word	0x1a626331
 801bcd4:	3dd0b461 	.word	0x3dd0b461
 801bcd8:	1a600000 	.word	0x1a600000
 801bcdc:	3dd0b461 	.word	0x3dd0b461
 801bce0:	2e037073 	.word	0x2e037073
 801bce4:	3ba3198a 	.word	0x3ba3198a
 801bce8:	6dc9c883 	.word	0x6dc9c883
 801bcec:	3fe45f30 	.word	0x3fe45f30
 801bcf0:	2e000000 	.word	0x2e000000
 801bcf4:	3ba3198a 	.word	0x3ba3198a
 801bcf8:	252049c1 	.word	0x252049c1
 801bcfc:	397b839a 	.word	0x397b839a
 801bd00:	3fe921fb 	.word	0x3fe921fb
 801bd04:	4002d97b 	.word	0x4002d97b
 801bd08:	3ff921fb 	.word	0x3ff921fb
 801bd0c:	413921fb 	.word	0x413921fb
 801bd10:	3fe00000 	.word	0x3fe00000
 801bd14:	0801f590 	.word	0x0801f590
 801bd18:	7fefffff 	.word	0x7fefffff
 801bd1c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801bd20:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801bd24:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801bd28:	4630      	mov	r0, r6
 801bd2a:	460f      	mov	r7, r1
 801bd2c:	f7e4 feec 	bl	8000b08 <__aeabi_d2iz>
 801bd30:	f7e4 fbd0 	bl	80004d4 <__aeabi_i2d>
 801bd34:	4602      	mov	r2, r0
 801bd36:	460b      	mov	r3, r1
 801bd38:	4630      	mov	r0, r6
 801bd3a:	4639      	mov	r1, r7
 801bd3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801bd40:	f7e4 fa7a 	bl	8000238 <__aeabi_dsub>
 801bd44:	4b22      	ldr	r3, [pc, #136]	@ (801bdd0 <__ieee754_rem_pio2+0x3f0>)
 801bd46:	2200      	movs	r2, #0
 801bd48:	f7e4 fc2e 	bl	80005a8 <__aeabi_dmul>
 801bd4c:	460f      	mov	r7, r1
 801bd4e:	4606      	mov	r6, r0
 801bd50:	f7e4 feda 	bl	8000b08 <__aeabi_d2iz>
 801bd54:	f7e4 fbbe 	bl	80004d4 <__aeabi_i2d>
 801bd58:	4602      	mov	r2, r0
 801bd5a:	460b      	mov	r3, r1
 801bd5c:	4630      	mov	r0, r6
 801bd5e:	4639      	mov	r1, r7
 801bd60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801bd64:	f7e4 fa68 	bl	8000238 <__aeabi_dsub>
 801bd68:	4b19      	ldr	r3, [pc, #100]	@ (801bdd0 <__ieee754_rem_pio2+0x3f0>)
 801bd6a:	2200      	movs	r2, #0
 801bd6c:	f7e4 fc1c 	bl	80005a8 <__aeabi_dmul>
 801bd70:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801bd74:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801bd78:	f04f 0803 	mov.w	r8, #3
 801bd7c:	2600      	movs	r6, #0
 801bd7e:	2700      	movs	r7, #0
 801bd80:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801bd84:	4632      	mov	r2, r6
 801bd86:	463b      	mov	r3, r7
 801bd88:	46c2      	mov	sl, r8
 801bd8a:	f108 38ff 	add.w	r8, r8, #4294967295
 801bd8e:	f7e4 fe73 	bl	8000a78 <__aeabi_dcmpeq>
 801bd92:	2800      	cmp	r0, #0
 801bd94:	d1f4      	bne.n	801bd80 <__ieee754_rem_pio2+0x3a0>
 801bd96:	4b0f      	ldr	r3, [pc, #60]	@ (801bdd4 <__ieee754_rem_pio2+0x3f4>)
 801bd98:	9301      	str	r3, [sp, #4]
 801bd9a:	2302      	movs	r3, #2
 801bd9c:	9300      	str	r3, [sp, #0]
 801bd9e:	462a      	mov	r2, r5
 801bda0:	4653      	mov	r3, sl
 801bda2:	4621      	mov	r1, r4
 801bda4:	a806      	add	r0, sp, #24
 801bda6:	f000 f947 	bl	801c038 <__kernel_rem_pio2>
 801bdaa:	9b04      	ldr	r3, [sp, #16]
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	4605      	mov	r5, r0
 801bdb0:	f6bf ae53 	bge.w	801ba5a <__ieee754_rem_pio2+0x7a>
 801bdb4:	e9d4 2100 	ldrd	r2, r1, [r4]
 801bdb8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801bdbc:	e9c4 2300 	strd	r2, r3, [r4]
 801bdc0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801bdc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801bdc8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801bdcc:	e740      	b.n	801bc50 <__ieee754_rem_pio2+0x270>
 801bdce:	bf00      	nop
 801bdd0:	41700000 	.word	0x41700000
 801bdd4:	0801f610 	.word	0x0801f610

0801bdd8 <acos>:
 801bdd8:	b538      	push	{r3, r4, r5, lr}
 801bdda:	ed2d 8b02 	vpush	{d8}
 801bdde:	ec55 4b10 	vmov	r4, r5, d0
 801bde2:	f000 fc79 	bl	801c6d8 <__ieee754_acos>
 801bde6:	4622      	mov	r2, r4
 801bde8:	462b      	mov	r3, r5
 801bdea:	4620      	mov	r0, r4
 801bdec:	4629      	mov	r1, r5
 801bdee:	eeb0 8a40 	vmov.f32	s16, s0
 801bdf2:	eef0 8a60 	vmov.f32	s17, s1
 801bdf6:	f7e4 fe71 	bl	8000adc <__aeabi_dcmpun>
 801bdfa:	b9a8      	cbnz	r0, 801be28 <acos+0x50>
 801bdfc:	ec45 4b10 	vmov	d0, r4, r5
 801be00:	f000 f81e 	bl	801be40 <fabs>
 801be04:	4b0c      	ldr	r3, [pc, #48]	@ (801be38 <acos+0x60>)
 801be06:	ec51 0b10 	vmov	r0, r1, d0
 801be0a:	2200      	movs	r2, #0
 801be0c:	f7e4 fe5c 	bl	8000ac8 <__aeabi_dcmpgt>
 801be10:	b150      	cbz	r0, 801be28 <acos+0x50>
 801be12:	f7fc fb79 	bl	8018508 <__errno>
 801be16:	ecbd 8b02 	vpop	{d8}
 801be1a:	2321      	movs	r3, #33	@ 0x21
 801be1c:	6003      	str	r3, [r0, #0]
 801be1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801be22:	4806      	ldr	r0, [pc, #24]	@ (801be3c <acos+0x64>)
 801be24:	f7fc bbb4 	b.w	8018590 <nan>
 801be28:	eeb0 0a48 	vmov.f32	s0, s16
 801be2c:	eef0 0a68 	vmov.f32	s1, s17
 801be30:	ecbd 8b02 	vpop	{d8}
 801be34:	bd38      	pop	{r3, r4, r5, pc}
 801be36:	bf00      	nop
 801be38:	3ff00000 	.word	0x3ff00000
 801be3c:	0801f1eb 	.word	0x0801f1eb

0801be40 <fabs>:
 801be40:	ec51 0b10 	vmov	r0, r1, d0
 801be44:	4602      	mov	r2, r0
 801be46:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801be4a:	ec43 2b10 	vmov	d0, r2, r3
 801be4e:	4770      	bx	lr

0801be50 <__ieee754_expf>:
 801be50:	ee10 2a10 	vmov	r2, s0
 801be54:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801be58:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801be5c:	d902      	bls.n	801be64 <__ieee754_expf+0x14>
 801be5e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801be62:	4770      	bx	lr
 801be64:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801be68:	d106      	bne.n	801be78 <__ieee754_expf+0x28>
 801be6a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801bfa4 <__ieee754_expf+0x154>
 801be6e:	2900      	cmp	r1, #0
 801be70:	bf18      	it	ne
 801be72:	eeb0 0a67 	vmovne.f32	s0, s15
 801be76:	4770      	bx	lr
 801be78:	484b      	ldr	r0, [pc, #300]	@ (801bfa8 <__ieee754_expf+0x158>)
 801be7a:	4282      	cmp	r2, r0
 801be7c:	dd02      	ble.n	801be84 <__ieee754_expf+0x34>
 801be7e:	2000      	movs	r0, #0
 801be80:	f000 b8d4 	b.w	801c02c <__math_oflowf>
 801be84:	2a00      	cmp	r2, #0
 801be86:	da05      	bge.n	801be94 <__ieee754_expf+0x44>
 801be88:	4a48      	ldr	r2, [pc, #288]	@ (801bfac <__ieee754_expf+0x15c>)
 801be8a:	4293      	cmp	r3, r2
 801be8c:	d902      	bls.n	801be94 <__ieee754_expf+0x44>
 801be8e:	2000      	movs	r0, #0
 801be90:	f000 b8c6 	b.w	801c020 <__math_uflowf>
 801be94:	4a46      	ldr	r2, [pc, #280]	@ (801bfb0 <__ieee754_expf+0x160>)
 801be96:	4293      	cmp	r3, r2
 801be98:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801be9c:	d952      	bls.n	801bf44 <__ieee754_expf+0xf4>
 801be9e:	4a45      	ldr	r2, [pc, #276]	@ (801bfb4 <__ieee754_expf+0x164>)
 801bea0:	4293      	cmp	r3, r2
 801bea2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801bea6:	d834      	bhi.n	801bf12 <__ieee754_expf+0xc2>
 801bea8:	4b43      	ldr	r3, [pc, #268]	@ (801bfb8 <__ieee754_expf+0x168>)
 801beaa:	4413      	add	r3, r2
 801beac:	ed93 7a00 	vldr	s14, [r3]
 801beb0:	4b42      	ldr	r3, [pc, #264]	@ (801bfbc <__ieee754_expf+0x16c>)
 801beb2:	4413      	add	r3, r2
 801beb4:	ee30 7a47 	vsub.f32	s14, s0, s14
 801beb8:	f081 0201 	eor.w	r2, r1, #1
 801bebc:	edd3 7a00 	vldr	s15, [r3]
 801bec0:	1a52      	subs	r2, r2, r1
 801bec2:	ee37 0a67 	vsub.f32	s0, s14, s15
 801bec6:	ee20 6a00 	vmul.f32	s12, s0, s0
 801beca:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801bfc0 <__ieee754_expf+0x170>
 801bece:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801bfc4 <__ieee754_expf+0x174>
 801bed2:	eee6 6a05 	vfma.f32	s13, s12, s10
 801bed6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801bfc8 <__ieee754_expf+0x178>
 801beda:	eea6 5a86 	vfma.f32	s10, s13, s12
 801bede:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801bfcc <__ieee754_expf+0x17c>
 801bee2:	eee5 6a06 	vfma.f32	s13, s10, s12
 801bee6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801bfd0 <__ieee754_expf+0x180>
 801beea:	eea6 5a86 	vfma.f32	s10, s13, s12
 801beee:	eef0 6a40 	vmov.f32	s13, s0
 801bef2:	eee5 6a46 	vfms.f32	s13, s10, s12
 801bef6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801befa:	ee20 5a26 	vmul.f32	s10, s0, s13
 801befe:	bb92      	cbnz	r2, 801bf66 <__ieee754_expf+0x116>
 801bf00:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801bf04:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801bf08:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801bf0c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801bf10:	4770      	bx	lr
 801bf12:	4b30      	ldr	r3, [pc, #192]	@ (801bfd4 <__ieee754_expf+0x184>)
 801bf14:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801bfd8 <__ieee754_expf+0x188>
 801bf18:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801bfdc <__ieee754_expf+0x18c>
 801bf1c:	4413      	add	r3, r2
 801bf1e:	edd3 7a00 	vldr	s15, [r3]
 801bf22:	eee0 7a07 	vfma.f32	s15, s0, s14
 801bf26:	eeb0 7a40 	vmov.f32	s14, s0
 801bf2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bf2e:	ee17 2a90 	vmov	r2, s15
 801bf32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf36:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801bf3a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801bfe0 <__ieee754_expf+0x190>
 801bf3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bf42:	e7be      	b.n	801bec2 <__ieee754_expf+0x72>
 801bf44:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801bf48:	d20b      	bcs.n	801bf62 <__ieee754_expf+0x112>
 801bf4a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801bfe4 <__ieee754_expf+0x194>
 801bf4e:	ee70 6a26 	vadd.f32	s13, s0, s13
 801bf52:	eef4 6ae5 	vcmpe.f32	s13, s11
 801bf56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf5a:	dd02      	ble.n	801bf62 <__ieee754_expf+0x112>
 801bf5c:	ee30 0a25 	vadd.f32	s0, s0, s11
 801bf60:	4770      	bx	lr
 801bf62:	2200      	movs	r2, #0
 801bf64:	e7af      	b.n	801bec6 <__ieee754_expf+0x76>
 801bf66:	ee36 6a66 	vsub.f32	s12, s12, s13
 801bf6a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801bf6e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801bf72:	bfb8      	it	lt
 801bf74:	3264      	addlt	r2, #100	@ 0x64
 801bf76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bf7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bf7e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801bf82:	ee17 3a90 	vmov	r3, s15
 801bf86:	bfab      	itete	ge
 801bf88:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801bf8c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801bf90:	ee00 3a10 	vmovge	s0, r3
 801bf94:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801bfe8 <__ieee754_expf+0x198>
 801bf98:	bfbc      	itt	lt
 801bf9a:	ee00 3a10 	vmovlt	s0, r3
 801bf9e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801bfa2:	4770      	bx	lr
 801bfa4:	00000000 	.word	0x00000000
 801bfa8:	42b17217 	.word	0x42b17217
 801bfac:	42cff1b5 	.word	0x42cff1b5
 801bfb0:	3eb17218 	.word	0x3eb17218
 801bfb4:	3f851591 	.word	0x3f851591
 801bfb8:	0801f720 	.word	0x0801f720
 801bfbc:	0801f718 	.word	0x0801f718
 801bfc0:	3331bb4c 	.word	0x3331bb4c
 801bfc4:	b5ddea0e 	.word	0xb5ddea0e
 801bfc8:	388ab355 	.word	0x388ab355
 801bfcc:	bb360b61 	.word	0xbb360b61
 801bfd0:	3e2aaaab 	.word	0x3e2aaaab
 801bfd4:	0801f728 	.word	0x0801f728
 801bfd8:	3fb8aa3b 	.word	0x3fb8aa3b
 801bfdc:	3f317180 	.word	0x3f317180
 801bfe0:	3717f7d1 	.word	0x3717f7d1
 801bfe4:	7149f2ca 	.word	0x7149f2ca
 801bfe8:	0d800000 	.word	0x0d800000

0801bfec <with_errnof>:
 801bfec:	b510      	push	{r4, lr}
 801bfee:	ed2d 8b02 	vpush	{d8}
 801bff2:	eeb0 8a40 	vmov.f32	s16, s0
 801bff6:	4604      	mov	r4, r0
 801bff8:	f7fc fa86 	bl	8018508 <__errno>
 801bffc:	eeb0 0a48 	vmov.f32	s0, s16
 801c000:	ecbd 8b02 	vpop	{d8}
 801c004:	6004      	str	r4, [r0, #0]
 801c006:	bd10      	pop	{r4, pc}

0801c008 <xflowf>:
 801c008:	b130      	cbz	r0, 801c018 <xflowf+0x10>
 801c00a:	eef1 7a40 	vneg.f32	s15, s0
 801c00e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c012:	2022      	movs	r0, #34	@ 0x22
 801c014:	f7ff bfea 	b.w	801bfec <with_errnof>
 801c018:	eef0 7a40 	vmov.f32	s15, s0
 801c01c:	e7f7      	b.n	801c00e <xflowf+0x6>
	...

0801c020 <__math_uflowf>:
 801c020:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801c028 <__math_uflowf+0x8>
 801c024:	f7ff bff0 	b.w	801c008 <xflowf>
 801c028:	10000000 	.word	0x10000000

0801c02c <__math_oflowf>:
 801c02c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801c034 <__math_oflowf+0x8>
 801c030:	f7ff bfea 	b.w	801c008 <xflowf>
 801c034:	70000000 	.word	0x70000000

0801c038 <__kernel_rem_pio2>:
 801c038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c03c:	ed2d 8b02 	vpush	{d8}
 801c040:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801c044:	f112 0f14 	cmn.w	r2, #20
 801c048:	9306      	str	r3, [sp, #24]
 801c04a:	9104      	str	r1, [sp, #16]
 801c04c:	4bc2      	ldr	r3, [pc, #776]	@ (801c358 <__kernel_rem_pio2+0x320>)
 801c04e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801c050:	9008      	str	r0, [sp, #32]
 801c052:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c056:	9300      	str	r3, [sp, #0]
 801c058:	9b06      	ldr	r3, [sp, #24]
 801c05a:	f103 33ff 	add.w	r3, r3, #4294967295
 801c05e:	bfa8      	it	ge
 801c060:	1ed4      	subge	r4, r2, #3
 801c062:	9305      	str	r3, [sp, #20]
 801c064:	bfb2      	itee	lt
 801c066:	2400      	movlt	r4, #0
 801c068:	2318      	movge	r3, #24
 801c06a:	fb94 f4f3 	sdivge	r4, r4, r3
 801c06e:	f06f 0317 	mvn.w	r3, #23
 801c072:	fb04 3303 	mla	r3, r4, r3, r3
 801c076:	eb03 0b02 	add.w	fp, r3, r2
 801c07a:	9b00      	ldr	r3, [sp, #0]
 801c07c:	9a05      	ldr	r2, [sp, #20]
 801c07e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 801c348 <__kernel_rem_pio2+0x310>
 801c082:	eb03 0802 	add.w	r8, r3, r2
 801c086:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801c088:	1aa7      	subs	r7, r4, r2
 801c08a:	ae20      	add	r6, sp, #128	@ 0x80
 801c08c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801c090:	2500      	movs	r5, #0
 801c092:	4545      	cmp	r5, r8
 801c094:	dd12      	ble.n	801c0bc <__kernel_rem_pio2+0x84>
 801c096:	9b06      	ldr	r3, [sp, #24]
 801c098:	aa20      	add	r2, sp, #128	@ 0x80
 801c09a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801c09e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801c0a2:	2700      	movs	r7, #0
 801c0a4:	9b00      	ldr	r3, [sp, #0]
 801c0a6:	429f      	cmp	r7, r3
 801c0a8:	dc2e      	bgt.n	801c108 <__kernel_rem_pio2+0xd0>
 801c0aa:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 801c348 <__kernel_rem_pio2+0x310>
 801c0ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c0b2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c0b6:	46a8      	mov	r8, r5
 801c0b8:	2600      	movs	r6, #0
 801c0ba:	e01b      	b.n	801c0f4 <__kernel_rem_pio2+0xbc>
 801c0bc:	42ef      	cmn	r7, r5
 801c0be:	d407      	bmi.n	801c0d0 <__kernel_rem_pio2+0x98>
 801c0c0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801c0c4:	f7e4 fa06 	bl	80004d4 <__aeabi_i2d>
 801c0c8:	e8e6 0102 	strd	r0, r1, [r6], #8
 801c0cc:	3501      	adds	r5, #1
 801c0ce:	e7e0      	b.n	801c092 <__kernel_rem_pio2+0x5a>
 801c0d0:	ec51 0b18 	vmov	r0, r1, d8
 801c0d4:	e7f8      	b.n	801c0c8 <__kernel_rem_pio2+0x90>
 801c0d6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 801c0da:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801c0de:	f7e4 fa63 	bl	80005a8 <__aeabi_dmul>
 801c0e2:	4602      	mov	r2, r0
 801c0e4:	460b      	mov	r3, r1
 801c0e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c0ea:	f7e4 f8a7 	bl	800023c <__adddf3>
 801c0ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c0f2:	3601      	adds	r6, #1
 801c0f4:	9b05      	ldr	r3, [sp, #20]
 801c0f6:	429e      	cmp	r6, r3
 801c0f8:	dded      	ble.n	801c0d6 <__kernel_rem_pio2+0x9e>
 801c0fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c0fe:	3701      	adds	r7, #1
 801c100:	ecaa 7b02 	vstmia	sl!, {d7}
 801c104:	3508      	adds	r5, #8
 801c106:	e7cd      	b.n	801c0a4 <__kernel_rem_pio2+0x6c>
 801c108:	9b00      	ldr	r3, [sp, #0]
 801c10a:	f8dd 8000 	ldr.w	r8, [sp]
 801c10e:	aa0c      	add	r2, sp, #48	@ 0x30
 801c110:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c114:	930a      	str	r3, [sp, #40]	@ 0x28
 801c116:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801c118:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801c11c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c11e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801c122:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c124:	ab98      	add	r3, sp, #608	@ 0x260
 801c126:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c12a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801c12e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c132:	ac0c      	add	r4, sp, #48	@ 0x30
 801c134:	ab70      	add	r3, sp, #448	@ 0x1c0
 801c136:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801c13a:	46a1      	mov	r9, r4
 801c13c:	46c2      	mov	sl, r8
 801c13e:	f1ba 0f00 	cmp.w	sl, #0
 801c142:	dc77      	bgt.n	801c234 <__kernel_rem_pio2+0x1fc>
 801c144:	4658      	mov	r0, fp
 801c146:	ed9d 0b02 	vldr	d0, [sp, #8]
 801c14a:	f000 fd21 	bl	801cb90 <scalbn>
 801c14e:	ec57 6b10 	vmov	r6, r7, d0
 801c152:	2200      	movs	r2, #0
 801c154:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801c158:	4630      	mov	r0, r6
 801c15a:	4639      	mov	r1, r7
 801c15c:	f7e4 fa24 	bl	80005a8 <__aeabi_dmul>
 801c160:	ec41 0b10 	vmov	d0, r0, r1
 801c164:	f7ff f884 	bl	801b270 <floor>
 801c168:	4b7c      	ldr	r3, [pc, #496]	@ (801c35c <__kernel_rem_pio2+0x324>)
 801c16a:	ec51 0b10 	vmov	r0, r1, d0
 801c16e:	2200      	movs	r2, #0
 801c170:	f7e4 fa1a 	bl	80005a8 <__aeabi_dmul>
 801c174:	4602      	mov	r2, r0
 801c176:	460b      	mov	r3, r1
 801c178:	4630      	mov	r0, r6
 801c17a:	4639      	mov	r1, r7
 801c17c:	f7e4 f85c 	bl	8000238 <__aeabi_dsub>
 801c180:	460f      	mov	r7, r1
 801c182:	4606      	mov	r6, r0
 801c184:	f7e4 fcc0 	bl	8000b08 <__aeabi_d2iz>
 801c188:	9002      	str	r0, [sp, #8]
 801c18a:	f7e4 f9a3 	bl	80004d4 <__aeabi_i2d>
 801c18e:	4602      	mov	r2, r0
 801c190:	460b      	mov	r3, r1
 801c192:	4630      	mov	r0, r6
 801c194:	4639      	mov	r1, r7
 801c196:	f7e4 f84f 	bl	8000238 <__aeabi_dsub>
 801c19a:	f1bb 0f00 	cmp.w	fp, #0
 801c19e:	4606      	mov	r6, r0
 801c1a0:	460f      	mov	r7, r1
 801c1a2:	dd6c      	ble.n	801c27e <__kernel_rem_pio2+0x246>
 801c1a4:	f108 31ff 	add.w	r1, r8, #4294967295
 801c1a8:	ab0c      	add	r3, sp, #48	@ 0x30
 801c1aa:	9d02      	ldr	r5, [sp, #8]
 801c1ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c1b0:	f1cb 0018 	rsb	r0, fp, #24
 801c1b4:	fa43 f200 	asr.w	r2, r3, r0
 801c1b8:	4415      	add	r5, r2
 801c1ba:	4082      	lsls	r2, r0
 801c1bc:	1a9b      	subs	r3, r3, r2
 801c1be:	aa0c      	add	r2, sp, #48	@ 0x30
 801c1c0:	9502      	str	r5, [sp, #8]
 801c1c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c1c6:	f1cb 0217 	rsb	r2, fp, #23
 801c1ca:	fa43 f902 	asr.w	r9, r3, r2
 801c1ce:	f1b9 0f00 	cmp.w	r9, #0
 801c1d2:	dd64      	ble.n	801c29e <__kernel_rem_pio2+0x266>
 801c1d4:	9b02      	ldr	r3, [sp, #8]
 801c1d6:	2200      	movs	r2, #0
 801c1d8:	3301      	adds	r3, #1
 801c1da:	9302      	str	r3, [sp, #8]
 801c1dc:	4615      	mov	r5, r2
 801c1de:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801c1e2:	4590      	cmp	r8, r2
 801c1e4:	f300 80a1 	bgt.w	801c32a <__kernel_rem_pio2+0x2f2>
 801c1e8:	f1bb 0f00 	cmp.w	fp, #0
 801c1ec:	dd07      	ble.n	801c1fe <__kernel_rem_pio2+0x1c6>
 801c1ee:	f1bb 0f01 	cmp.w	fp, #1
 801c1f2:	f000 80c1 	beq.w	801c378 <__kernel_rem_pio2+0x340>
 801c1f6:	f1bb 0f02 	cmp.w	fp, #2
 801c1fa:	f000 80c8 	beq.w	801c38e <__kernel_rem_pio2+0x356>
 801c1fe:	f1b9 0f02 	cmp.w	r9, #2
 801c202:	d14c      	bne.n	801c29e <__kernel_rem_pio2+0x266>
 801c204:	4632      	mov	r2, r6
 801c206:	463b      	mov	r3, r7
 801c208:	4955      	ldr	r1, [pc, #340]	@ (801c360 <__kernel_rem_pio2+0x328>)
 801c20a:	2000      	movs	r0, #0
 801c20c:	f7e4 f814 	bl	8000238 <__aeabi_dsub>
 801c210:	4606      	mov	r6, r0
 801c212:	460f      	mov	r7, r1
 801c214:	2d00      	cmp	r5, #0
 801c216:	d042      	beq.n	801c29e <__kernel_rem_pio2+0x266>
 801c218:	4658      	mov	r0, fp
 801c21a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 801c350 <__kernel_rem_pio2+0x318>
 801c21e:	f000 fcb7 	bl	801cb90 <scalbn>
 801c222:	4630      	mov	r0, r6
 801c224:	4639      	mov	r1, r7
 801c226:	ec53 2b10 	vmov	r2, r3, d0
 801c22a:	f7e4 f805 	bl	8000238 <__aeabi_dsub>
 801c22e:	4606      	mov	r6, r0
 801c230:	460f      	mov	r7, r1
 801c232:	e034      	b.n	801c29e <__kernel_rem_pio2+0x266>
 801c234:	4b4b      	ldr	r3, [pc, #300]	@ (801c364 <__kernel_rem_pio2+0x32c>)
 801c236:	2200      	movs	r2, #0
 801c238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c23c:	f7e4 f9b4 	bl	80005a8 <__aeabi_dmul>
 801c240:	f7e4 fc62 	bl	8000b08 <__aeabi_d2iz>
 801c244:	f7e4 f946 	bl	80004d4 <__aeabi_i2d>
 801c248:	4b47      	ldr	r3, [pc, #284]	@ (801c368 <__kernel_rem_pio2+0x330>)
 801c24a:	2200      	movs	r2, #0
 801c24c:	4606      	mov	r6, r0
 801c24e:	460f      	mov	r7, r1
 801c250:	f7e4 f9aa 	bl	80005a8 <__aeabi_dmul>
 801c254:	4602      	mov	r2, r0
 801c256:	460b      	mov	r3, r1
 801c258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c25c:	f7e3 ffec 	bl	8000238 <__aeabi_dsub>
 801c260:	f7e4 fc52 	bl	8000b08 <__aeabi_d2iz>
 801c264:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801c268:	f849 0b04 	str.w	r0, [r9], #4
 801c26c:	4639      	mov	r1, r7
 801c26e:	4630      	mov	r0, r6
 801c270:	f7e3 ffe4 	bl	800023c <__adddf3>
 801c274:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c27c:	e75f      	b.n	801c13e <__kernel_rem_pio2+0x106>
 801c27e:	d107      	bne.n	801c290 <__kernel_rem_pio2+0x258>
 801c280:	f108 33ff 	add.w	r3, r8, #4294967295
 801c284:	aa0c      	add	r2, sp, #48	@ 0x30
 801c286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c28a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801c28e:	e79e      	b.n	801c1ce <__kernel_rem_pio2+0x196>
 801c290:	4b36      	ldr	r3, [pc, #216]	@ (801c36c <__kernel_rem_pio2+0x334>)
 801c292:	2200      	movs	r2, #0
 801c294:	f7e4 fc0e 	bl	8000ab4 <__aeabi_dcmpge>
 801c298:	2800      	cmp	r0, #0
 801c29a:	d143      	bne.n	801c324 <__kernel_rem_pio2+0x2ec>
 801c29c:	4681      	mov	r9, r0
 801c29e:	2200      	movs	r2, #0
 801c2a0:	2300      	movs	r3, #0
 801c2a2:	4630      	mov	r0, r6
 801c2a4:	4639      	mov	r1, r7
 801c2a6:	f7e4 fbe7 	bl	8000a78 <__aeabi_dcmpeq>
 801c2aa:	2800      	cmp	r0, #0
 801c2ac:	f000 80c1 	beq.w	801c432 <__kernel_rem_pio2+0x3fa>
 801c2b0:	f108 33ff 	add.w	r3, r8, #4294967295
 801c2b4:	2200      	movs	r2, #0
 801c2b6:	9900      	ldr	r1, [sp, #0]
 801c2b8:	428b      	cmp	r3, r1
 801c2ba:	da70      	bge.n	801c39e <__kernel_rem_pio2+0x366>
 801c2bc:	2a00      	cmp	r2, #0
 801c2be:	f000 808b 	beq.w	801c3d8 <__kernel_rem_pio2+0x3a0>
 801c2c2:	f108 38ff 	add.w	r8, r8, #4294967295
 801c2c6:	ab0c      	add	r3, sp, #48	@ 0x30
 801c2c8:	f1ab 0b18 	sub.w	fp, fp, #24
 801c2cc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	d0f6      	beq.n	801c2c2 <__kernel_rem_pio2+0x28a>
 801c2d4:	4658      	mov	r0, fp
 801c2d6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 801c350 <__kernel_rem_pio2+0x318>
 801c2da:	f000 fc59 	bl	801cb90 <scalbn>
 801c2de:	f108 0301 	add.w	r3, r8, #1
 801c2e2:	00da      	lsls	r2, r3, #3
 801c2e4:	9205      	str	r2, [sp, #20]
 801c2e6:	ec55 4b10 	vmov	r4, r5, d0
 801c2ea:	aa70      	add	r2, sp, #448	@ 0x1c0
 801c2ec:	f8df b074 	ldr.w	fp, [pc, #116]	@ 801c364 <__kernel_rem_pio2+0x32c>
 801c2f0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801c2f4:	4646      	mov	r6, r8
 801c2f6:	f04f 0a00 	mov.w	sl, #0
 801c2fa:	2e00      	cmp	r6, #0
 801c2fc:	f280 80d1 	bge.w	801c4a2 <__kernel_rem_pio2+0x46a>
 801c300:	4644      	mov	r4, r8
 801c302:	2c00      	cmp	r4, #0
 801c304:	f2c0 80ff 	blt.w	801c506 <__kernel_rem_pio2+0x4ce>
 801c308:	4b19      	ldr	r3, [pc, #100]	@ (801c370 <__kernel_rem_pio2+0x338>)
 801c30a:	461f      	mov	r7, r3
 801c30c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801c30e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c312:	9306      	str	r3, [sp, #24]
 801c314:	f04f 0a00 	mov.w	sl, #0
 801c318:	f04f 0b00 	mov.w	fp, #0
 801c31c:	2600      	movs	r6, #0
 801c31e:	eba8 0504 	sub.w	r5, r8, r4
 801c322:	e0e4      	b.n	801c4ee <__kernel_rem_pio2+0x4b6>
 801c324:	f04f 0902 	mov.w	r9, #2
 801c328:	e754      	b.n	801c1d4 <__kernel_rem_pio2+0x19c>
 801c32a:	f854 3b04 	ldr.w	r3, [r4], #4
 801c32e:	bb0d      	cbnz	r5, 801c374 <__kernel_rem_pio2+0x33c>
 801c330:	b123      	cbz	r3, 801c33c <__kernel_rem_pio2+0x304>
 801c332:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801c336:	f844 3c04 	str.w	r3, [r4, #-4]
 801c33a:	2301      	movs	r3, #1
 801c33c:	3201      	adds	r2, #1
 801c33e:	461d      	mov	r5, r3
 801c340:	e74f      	b.n	801c1e2 <__kernel_rem_pio2+0x1aa>
 801c342:	bf00      	nop
 801c344:	f3af 8000 	nop.w
	...
 801c354:	3ff00000 	.word	0x3ff00000
 801c358:	0801f770 	.word	0x0801f770
 801c35c:	40200000 	.word	0x40200000
 801c360:	3ff00000 	.word	0x3ff00000
 801c364:	3e700000 	.word	0x3e700000
 801c368:	41700000 	.word	0x41700000
 801c36c:	3fe00000 	.word	0x3fe00000
 801c370:	0801f730 	.word	0x0801f730
 801c374:	1acb      	subs	r3, r1, r3
 801c376:	e7de      	b.n	801c336 <__kernel_rem_pio2+0x2fe>
 801c378:	f108 32ff 	add.w	r2, r8, #4294967295
 801c37c:	ab0c      	add	r3, sp, #48	@ 0x30
 801c37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c382:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801c386:	a90c      	add	r1, sp, #48	@ 0x30
 801c388:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801c38c:	e737      	b.n	801c1fe <__kernel_rem_pio2+0x1c6>
 801c38e:	f108 32ff 	add.w	r2, r8, #4294967295
 801c392:	ab0c      	add	r3, sp, #48	@ 0x30
 801c394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c398:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c39c:	e7f3      	b.n	801c386 <__kernel_rem_pio2+0x34e>
 801c39e:	a90c      	add	r1, sp, #48	@ 0x30
 801c3a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801c3a4:	3b01      	subs	r3, #1
 801c3a6:	430a      	orrs	r2, r1
 801c3a8:	e785      	b.n	801c2b6 <__kernel_rem_pio2+0x27e>
 801c3aa:	3401      	adds	r4, #1
 801c3ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801c3b0:	2a00      	cmp	r2, #0
 801c3b2:	d0fa      	beq.n	801c3aa <__kernel_rem_pio2+0x372>
 801c3b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c3b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801c3ba:	eb0d 0503 	add.w	r5, sp, r3
 801c3be:	9b06      	ldr	r3, [sp, #24]
 801c3c0:	aa20      	add	r2, sp, #128	@ 0x80
 801c3c2:	4443      	add	r3, r8
 801c3c4:	f108 0701 	add.w	r7, r8, #1
 801c3c8:	3d98      	subs	r5, #152	@ 0x98
 801c3ca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801c3ce:	4444      	add	r4, r8
 801c3d0:	42bc      	cmp	r4, r7
 801c3d2:	da04      	bge.n	801c3de <__kernel_rem_pio2+0x3a6>
 801c3d4:	46a0      	mov	r8, r4
 801c3d6:	e6a2      	b.n	801c11e <__kernel_rem_pio2+0xe6>
 801c3d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c3da:	2401      	movs	r4, #1
 801c3dc:	e7e6      	b.n	801c3ac <__kernel_rem_pio2+0x374>
 801c3de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3e0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801c3e4:	f7e4 f876 	bl	80004d4 <__aeabi_i2d>
 801c3e8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 801c6a8 <__kernel_rem_pio2+0x670>
 801c3ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 801c3f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c3f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c3f8:	46b2      	mov	sl, r6
 801c3fa:	f04f 0800 	mov.w	r8, #0
 801c3fe:	9b05      	ldr	r3, [sp, #20]
 801c400:	4598      	cmp	r8, r3
 801c402:	dd05      	ble.n	801c410 <__kernel_rem_pio2+0x3d8>
 801c404:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c408:	3701      	adds	r7, #1
 801c40a:	eca5 7b02 	vstmia	r5!, {d7}
 801c40e:	e7df      	b.n	801c3d0 <__kernel_rem_pio2+0x398>
 801c410:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801c414:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801c418:	f7e4 f8c6 	bl	80005a8 <__aeabi_dmul>
 801c41c:	4602      	mov	r2, r0
 801c41e:	460b      	mov	r3, r1
 801c420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c424:	f7e3 ff0a 	bl	800023c <__adddf3>
 801c428:	f108 0801 	add.w	r8, r8, #1
 801c42c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c430:	e7e5      	b.n	801c3fe <__kernel_rem_pio2+0x3c6>
 801c432:	f1cb 0000 	rsb	r0, fp, #0
 801c436:	ec47 6b10 	vmov	d0, r6, r7
 801c43a:	f000 fba9 	bl	801cb90 <scalbn>
 801c43e:	ec55 4b10 	vmov	r4, r5, d0
 801c442:	4b9b      	ldr	r3, [pc, #620]	@ (801c6b0 <__kernel_rem_pio2+0x678>)
 801c444:	2200      	movs	r2, #0
 801c446:	4620      	mov	r0, r4
 801c448:	4629      	mov	r1, r5
 801c44a:	f7e4 fb33 	bl	8000ab4 <__aeabi_dcmpge>
 801c44e:	b300      	cbz	r0, 801c492 <__kernel_rem_pio2+0x45a>
 801c450:	4b98      	ldr	r3, [pc, #608]	@ (801c6b4 <__kernel_rem_pio2+0x67c>)
 801c452:	2200      	movs	r2, #0
 801c454:	4620      	mov	r0, r4
 801c456:	4629      	mov	r1, r5
 801c458:	f7e4 f8a6 	bl	80005a8 <__aeabi_dmul>
 801c45c:	f7e4 fb54 	bl	8000b08 <__aeabi_d2iz>
 801c460:	4606      	mov	r6, r0
 801c462:	f7e4 f837 	bl	80004d4 <__aeabi_i2d>
 801c466:	4b92      	ldr	r3, [pc, #584]	@ (801c6b0 <__kernel_rem_pio2+0x678>)
 801c468:	2200      	movs	r2, #0
 801c46a:	f7e4 f89d 	bl	80005a8 <__aeabi_dmul>
 801c46e:	460b      	mov	r3, r1
 801c470:	4602      	mov	r2, r0
 801c472:	4629      	mov	r1, r5
 801c474:	4620      	mov	r0, r4
 801c476:	f7e3 fedf 	bl	8000238 <__aeabi_dsub>
 801c47a:	f7e4 fb45 	bl	8000b08 <__aeabi_d2iz>
 801c47e:	ab0c      	add	r3, sp, #48	@ 0x30
 801c480:	f10b 0b18 	add.w	fp, fp, #24
 801c484:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801c488:	f108 0801 	add.w	r8, r8, #1
 801c48c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801c490:	e720      	b.n	801c2d4 <__kernel_rem_pio2+0x29c>
 801c492:	4620      	mov	r0, r4
 801c494:	4629      	mov	r1, r5
 801c496:	f7e4 fb37 	bl	8000b08 <__aeabi_d2iz>
 801c49a:	ab0c      	add	r3, sp, #48	@ 0x30
 801c49c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801c4a0:	e718      	b.n	801c2d4 <__kernel_rem_pio2+0x29c>
 801c4a2:	ab0c      	add	r3, sp, #48	@ 0x30
 801c4a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801c4a8:	f7e4 f814 	bl	80004d4 <__aeabi_i2d>
 801c4ac:	4622      	mov	r2, r4
 801c4ae:	462b      	mov	r3, r5
 801c4b0:	f7e4 f87a 	bl	80005a8 <__aeabi_dmul>
 801c4b4:	4652      	mov	r2, sl
 801c4b6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801c4ba:	465b      	mov	r3, fp
 801c4bc:	4620      	mov	r0, r4
 801c4be:	4629      	mov	r1, r5
 801c4c0:	f7e4 f872 	bl	80005a8 <__aeabi_dmul>
 801c4c4:	3e01      	subs	r6, #1
 801c4c6:	4604      	mov	r4, r0
 801c4c8:	460d      	mov	r5, r1
 801c4ca:	e716      	b.n	801c2fa <__kernel_rem_pio2+0x2c2>
 801c4cc:	9906      	ldr	r1, [sp, #24]
 801c4ce:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801c4d2:	9106      	str	r1, [sp, #24]
 801c4d4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801c4d8:	f7e4 f866 	bl	80005a8 <__aeabi_dmul>
 801c4dc:	4602      	mov	r2, r0
 801c4de:	460b      	mov	r3, r1
 801c4e0:	4650      	mov	r0, sl
 801c4e2:	4659      	mov	r1, fp
 801c4e4:	f7e3 feaa 	bl	800023c <__adddf3>
 801c4e8:	3601      	adds	r6, #1
 801c4ea:	4682      	mov	sl, r0
 801c4ec:	468b      	mov	fp, r1
 801c4ee:	9b00      	ldr	r3, [sp, #0]
 801c4f0:	429e      	cmp	r6, r3
 801c4f2:	dc01      	bgt.n	801c4f8 <__kernel_rem_pio2+0x4c0>
 801c4f4:	42ae      	cmp	r6, r5
 801c4f6:	dde9      	ble.n	801c4cc <__kernel_rem_pio2+0x494>
 801c4f8:	ab48      	add	r3, sp, #288	@ 0x120
 801c4fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801c4fe:	e9c5 ab00 	strd	sl, fp, [r5]
 801c502:	3c01      	subs	r4, #1
 801c504:	e6fd      	b.n	801c302 <__kernel_rem_pio2+0x2ca>
 801c506:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801c508:	2b02      	cmp	r3, #2
 801c50a:	dc0b      	bgt.n	801c524 <__kernel_rem_pio2+0x4ec>
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	dc35      	bgt.n	801c57c <__kernel_rem_pio2+0x544>
 801c510:	d059      	beq.n	801c5c6 <__kernel_rem_pio2+0x58e>
 801c512:	9b02      	ldr	r3, [sp, #8]
 801c514:	f003 0007 	and.w	r0, r3, #7
 801c518:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801c51c:	ecbd 8b02 	vpop	{d8}
 801c520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c524:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801c526:	2b03      	cmp	r3, #3
 801c528:	d1f3      	bne.n	801c512 <__kernel_rem_pio2+0x4da>
 801c52a:	9b05      	ldr	r3, [sp, #20]
 801c52c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801c530:	eb0d 0403 	add.w	r4, sp, r3
 801c534:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801c538:	4625      	mov	r5, r4
 801c53a:	46c2      	mov	sl, r8
 801c53c:	f1ba 0f00 	cmp.w	sl, #0
 801c540:	dc69      	bgt.n	801c616 <__kernel_rem_pio2+0x5de>
 801c542:	4645      	mov	r5, r8
 801c544:	2d01      	cmp	r5, #1
 801c546:	f300 8087 	bgt.w	801c658 <__kernel_rem_pio2+0x620>
 801c54a:	9c05      	ldr	r4, [sp, #20]
 801c54c:	ab48      	add	r3, sp, #288	@ 0x120
 801c54e:	441c      	add	r4, r3
 801c550:	2000      	movs	r0, #0
 801c552:	2100      	movs	r1, #0
 801c554:	f1b8 0f01 	cmp.w	r8, #1
 801c558:	f300 809c 	bgt.w	801c694 <__kernel_rem_pio2+0x65c>
 801c55c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 801c560:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 801c564:	f1b9 0f00 	cmp.w	r9, #0
 801c568:	f040 80a6 	bne.w	801c6b8 <__kernel_rem_pio2+0x680>
 801c56c:	9b04      	ldr	r3, [sp, #16]
 801c56e:	e9c3 5600 	strd	r5, r6, [r3]
 801c572:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801c576:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801c57a:	e7ca      	b.n	801c512 <__kernel_rem_pio2+0x4da>
 801c57c:	9d05      	ldr	r5, [sp, #20]
 801c57e:	ab48      	add	r3, sp, #288	@ 0x120
 801c580:	441d      	add	r5, r3
 801c582:	4644      	mov	r4, r8
 801c584:	2000      	movs	r0, #0
 801c586:	2100      	movs	r1, #0
 801c588:	2c00      	cmp	r4, #0
 801c58a:	da35      	bge.n	801c5f8 <__kernel_rem_pio2+0x5c0>
 801c58c:	f1b9 0f00 	cmp.w	r9, #0
 801c590:	d038      	beq.n	801c604 <__kernel_rem_pio2+0x5cc>
 801c592:	4602      	mov	r2, r0
 801c594:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c598:	9c04      	ldr	r4, [sp, #16]
 801c59a:	e9c4 2300 	strd	r2, r3, [r4]
 801c59e:	4602      	mov	r2, r0
 801c5a0:	460b      	mov	r3, r1
 801c5a2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801c5a6:	f7e3 fe47 	bl	8000238 <__aeabi_dsub>
 801c5aa:	ad4a      	add	r5, sp, #296	@ 0x128
 801c5ac:	2401      	movs	r4, #1
 801c5ae:	45a0      	cmp	r8, r4
 801c5b0:	da2b      	bge.n	801c60a <__kernel_rem_pio2+0x5d2>
 801c5b2:	f1b9 0f00 	cmp.w	r9, #0
 801c5b6:	d002      	beq.n	801c5be <__kernel_rem_pio2+0x586>
 801c5b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c5bc:	4619      	mov	r1, r3
 801c5be:	9b04      	ldr	r3, [sp, #16]
 801c5c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801c5c4:	e7a5      	b.n	801c512 <__kernel_rem_pio2+0x4da>
 801c5c6:	9c05      	ldr	r4, [sp, #20]
 801c5c8:	ab48      	add	r3, sp, #288	@ 0x120
 801c5ca:	441c      	add	r4, r3
 801c5cc:	2000      	movs	r0, #0
 801c5ce:	2100      	movs	r1, #0
 801c5d0:	f1b8 0f00 	cmp.w	r8, #0
 801c5d4:	da09      	bge.n	801c5ea <__kernel_rem_pio2+0x5b2>
 801c5d6:	f1b9 0f00 	cmp.w	r9, #0
 801c5da:	d002      	beq.n	801c5e2 <__kernel_rem_pio2+0x5aa>
 801c5dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c5e0:	4619      	mov	r1, r3
 801c5e2:	9b04      	ldr	r3, [sp, #16]
 801c5e4:	e9c3 0100 	strd	r0, r1, [r3]
 801c5e8:	e793      	b.n	801c512 <__kernel_rem_pio2+0x4da>
 801c5ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801c5ee:	f7e3 fe25 	bl	800023c <__adddf3>
 801c5f2:	f108 38ff 	add.w	r8, r8, #4294967295
 801c5f6:	e7eb      	b.n	801c5d0 <__kernel_rem_pio2+0x598>
 801c5f8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801c5fc:	f7e3 fe1e 	bl	800023c <__adddf3>
 801c600:	3c01      	subs	r4, #1
 801c602:	e7c1      	b.n	801c588 <__kernel_rem_pio2+0x550>
 801c604:	4602      	mov	r2, r0
 801c606:	460b      	mov	r3, r1
 801c608:	e7c6      	b.n	801c598 <__kernel_rem_pio2+0x560>
 801c60a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801c60e:	f7e3 fe15 	bl	800023c <__adddf3>
 801c612:	3401      	adds	r4, #1
 801c614:	e7cb      	b.n	801c5ae <__kernel_rem_pio2+0x576>
 801c616:	ed35 7b02 	vldmdb	r5!, {d7}
 801c61a:	ed8d 7b00 	vstr	d7, [sp]
 801c61e:	ed95 7b02 	vldr	d7, [r5, #8]
 801c622:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c626:	ec53 2b17 	vmov	r2, r3, d7
 801c62a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c62e:	f7e3 fe05 	bl	800023c <__adddf3>
 801c632:	4602      	mov	r2, r0
 801c634:	460b      	mov	r3, r1
 801c636:	4606      	mov	r6, r0
 801c638:	460f      	mov	r7, r1
 801c63a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c63e:	f7e3 fdfb 	bl	8000238 <__aeabi_dsub>
 801c642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c646:	f7e3 fdf9 	bl	800023c <__adddf3>
 801c64a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c64e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801c652:	e9c5 6700 	strd	r6, r7, [r5]
 801c656:	e771      	b.n	801c53c <__kernel_rem_pio2+0x504>
 801c658:	ed34 7b02 	vldmdb	r4!, {d7}
 801c65c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801c660:	ec51 0b17 	vmov	r0, r1, d7
 801c664:	4652      	mov	r2, sl
 801c666:	465b      	mov	r3, fp
 801c668:	ed8d 7b00 	vstr	d7, [sp]
 801c66c:	f7e3 fde6 	bl	800023c <__adddf3>
 801c670:	4602      	mov	r2, r0
 801c672:	460b      	mov	r3, r1
 801c674:	4606      	mov	r6, r0
 801c676:	460f      	mov	r7, r1
 801c678:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c67c:	f7e3 fddc 	bl	8000238 <__aeabi_dsub>
 801c680:	4652      	mov	r2, sl
 801c682:	465b      	mov	r3, fp
 801c684:	f7e3 fdda 	bl	800023c <__adddf3>
 801c688:	3d01      	subs	r5, #1
 801c68a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c68e:	e9c4 6700 	strd	r6, r7, [r4]
 801c692:	e757      	b.n	801c544 <__kernel_rem_pio2+0x50c>
 801c694:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801c698:	f7e3 fdd0 	bl	800023c <__adddf3>
 801c69c:	f108 38ff 	add.w	r8, r8, #4294967295
 801c6a0:	e758      	b.n	801c554 <__kernel_rem_pio2+0x51c>
 801c6a2:	bf00      	nop
 801c6a4:	f3af 8000 	nop.w
	...
 801c6b0:	41700000 	.word	0x41700000
 801c6b4:	3e700000 	.word	0x3e700000
 801c6b8:	9b04      	ldr	r3, [sp, #16]
 801c6ba:	9a04      	ldr	r2, [sp, #16]
 801c6bc:	601d      	str	r5, [r3, #0]
 801c6be:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 801c6c2:	605c      	str	r4, [r3, #4]
 801c6c4:	609f      	str	r7, [r3, #8]
 801c6c6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 801c6ca:	60d3      	str	r3, [r2, #12]
 801c6cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c6d0:	6110      	str	r0, [r2, #16]
 801c6d2:	6153      	str	r3, [r2, #20]
 801c6d4:	e71d      	b.n	801c512 <__kernel_rem_pio2+0x4da>
 801c6d6:	bf00      	nop

0801c6d8 <__ieee754_acos>:
 801c6d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6dc:	ec55 4b10 	vmov	r4, r5, d0
 801c6e0:	49b7      	ldr	r1, [pc, #732]	@ (801c9c0 <__ieee754_acos+0x2e8>)
 801c6e2:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801c6e6:	428b      	cmp	r3, r1
 801c6e8:	d919      	bls.n	801c71e <__ieee754_acos+0x46>
 801c6ea:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801c6ee:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801c6f2:	4323      	orrs	r3, r4
 801c6f4:	d106      	bne.n	801c704 <__ieee754_acos+0x2c>
 801c6f6:	2d00      	cmp	r5, #0
 801c6f8:	f340 8210 	ble.w	801cb1c <__ieee754_acos+0x444>
 801c6fc:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 801c950 <__ieee754_acos+0x278>
 801c700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c704:	4622      	mov	r2, r4
 801c706:	462b      	mov	r3, r5
 801c708:	4620      	mov	r0, r4
 801c70a:	4629      	mov	r1, r5
 801c70c:	f7e3 fd94 	bl	8000238 <__aeabi_dsub>
 801c710:	4602      	mov	r2, r0
 801c712:	460b      	mov	r3, r1
 801c714:	f7e4 f872 	bl	80007fc <__aeabi_ddiv>
 801c718:	ec41 0b10 	vmov	d0, r0, r1
 801c71c:	e7f0      	b.n	801c700 <__ieee754_acos+0x28>
 801c71e:	49a9      	ldr	r1, [pc, #676]	@ (801c9c4 <__ieee754_acos+0x2ec>)
 801c720:	428b      	cmp	r3, r1
 801c722:	f200 8085 	bhi.w	801c830 <__ieee754_acos+0x158>
 801c726:	4aa8      	ldr	r2, [pc, #672]	@ (801c9c8 <__ieee754_acos+0x2f0>)
 801c728:	4293      	cmp	r3, r2
 801c72a:	f240 81fa 	bls.w	801cb22 <__ieee754_acos+0x44a>
 801c72e:	4622      	mov	r2, r4
 801c730:	462b      	mov	r3, r5
 801c732:	4620      	mov	r0, r4
 801c734:	4629      	mov	r1, r5
 801c736:	f7e3 ff37 	bl	80005a8 <__aeabi_dmul>
 801c73a:	a387      	add	r3, pc, #540	@ (adr r3, 801c958 <__ieee754_acos+0x280>)
 801c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c740:	4606      	mov	r6, r0
 801c742:	460f      	mov	r7, r1
 801c744:	f7e3 ff30 	bl	80005a8 <__aeabi_dmul>
 801c748:	a385      	add	r3, pc, #532	@ (adr r3, 801c960 <__ieee754_acos+0x288>)
 801c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c74e:	f7e3 fd75 	bl	800023c <__adddf3>
 801c752:	4632      	mov	r2, r6
 801c754:	463b      	mov	r3, r7
 801c756:	f7e3 ff27 	bl	80005a8 <__aeabi_dmul>
 801c75a:	a383      	add	r3, pc, #524	@ (adr r3, 801c968 <__ieee754_acos+0x290>)
 801c75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c760:	f7e3 fd6a 	bl	8000238 <__aeabi_dsub>
 801c764:	4632      	mov	r2, r6
 801c766:	463b      	mov	r3, r7
 801c768:	f7e3 ff1e 	bl	80005a8 <__aeabi_dmul>
 801c76c:	a380      	add	r3, pc, #512	@ (adr r3, 801c970 <__ieee754_acos+0x298>)
 801c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c772:	f7e3 fd63 	bl	800023c <__adddf3>
 801c776:	4632      	mov	r2, r6
 801c778:	463b      	mov	r3, r7
 801c77a:	f7e3 ff15 	bl	80005a8 <__aeabi_dmul>
 801c77e:	a37e      	add	r3, pc, #504	@ (adr r3, 801c978 <__ieee754_acos+0x2a0>)
 801c780:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c784:	f7e3 fd58 	bl	8000238 <__aeabi_dsub>
 801c788:	4632      	mov	r2, r6
 801c78a:	463b      	mov	r3, r7
 801c78c:	f7e3 ff0c 	bl	80005a8 <__aeabi_dmul>
 801c790:	a37b      	add	r3, pc, #492	@ (adr r3, 801c980 <__ieee754_acos+0x2a8>)
 801c792:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c796:	f7e3 fd51 	bl	800023c <__adddf3>
 801c79a:	4632      	mov	r2, r6
 801c79c:	463b      	mov	r3, r7
 801c79e:	f7e3 ff03 	bl	80005a8 <__aeabi_dmul>
 801c7a2:	a379      	add	r3, pc, #484	@ (adr r3, 801c988 <__ieee754_acos+0x2b0>)
 801c7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7a8:	4680      	mov	r8, r0
 801c7aa:	4689      	mov	r9, r1
 801c7ac:	4630      	mov	r0, r6
 801c7ae:	4639      	mov	r1, r7
 801c7b0:	f7e3 fefa 	bl	80005a8 <__aeabi_dmul>
 801c7b4:	a376      	add	r3, pc, #472	@ (adr r3, 801c990 <__ieee754_acos+0x2b8>)
 801c7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7ba:	f7e3 fd3d 	bl	8000238 <__aeabi_dsub>
 801c7be:	4632      	mov	r2, r6
 801c7c0:	463b      	mov	r3, r7
 801c7c2:	f7e3 fef1 	bl	80005a8 <__aeabi_dmul>
 801c7c6:	a374      	add	r3, pc, #464	@ (adr r3, 801c998 <__ieee754_acos+0x2c0>)
 801c7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7cc:	f7e3 fd36 	bl	800023c <__adddf3>
 801c7d0:	4632      	mov	r2, r6
 801c7d2:	463b      	mov	r3, r7
 801c7d4:	f7e3 fee8 	bl	80005a8 <__aeabi_dmul>
 801c7d8:	a371      	add	r3, pc, #452	@ (adr r3, 801c9a0 <__ieee754_acos+0x2c8>)
 801c7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7de:	f7e3 fd2b 	bl	8000238 <__aeabi_dsub>
 801c7e2:	4632      	mov	r2, r6
 801c7e4:	463b      	mov	r3, r7
 801c7e6:	f7e3 fedf 	bl	80005a8 <__aeabi_dmul>
 801c7ea:	4b78      	ldr	r3, [pc, #480]	@ (801c9cc <__ieee754_acos+0x2f4>)
 801c7ec:	2200      	movs	r2, #0
 801c7ee:	f7e3 fd25 	bl	800023c <__adddf3>
 801c7f2:	4602      	mov	r2, r0
 801c7f4:	460b      	mov	r3, r1
 801c7f6:	4640      	mov	r0, r8
 801c7f8:	4649      	mov	r1, r9
 801c7fa:	f7e3 ffff 	bl	80007fc <__aeabi_ddiv>
 801c7fe:	4622      	mov	r2, r4
 801c800:	462b      	mov	r3, r5
 801c802:	f7e3 fed1 	bl	80005a8 <__aeabi_dmul>
 801c806:	4602      	mov	r2, r0
 801c808:	460b      	mov	r3, r1
 801c80a:	a167      	add	r1, pc, #412	@ (adr r1, 801c9a8 <__ieee754_acos+0x2d0>)
 801c80c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c810:	f7e3 fd12 	bl	8000238 <__aeabi_dsub>
 801c814:	4602      	mov	r2, r0
 801c816:	460b      	mov	r3, r1
 801c818:	4620      	mov	r0, r4
 801c81a:	4629      	mov	r1, r5
 801c81c:	f7e3 fd0c 	bl	8000238 <__aeabi_dsub>
 801c820:	4602      	mov	r2, r0
 801c822:	460b      	mov	r3, r1
 801c824:	a162      	add	r1, pc, #392	@ (adr r1, 801c9b0 <__ieee754_acos+0x2d8>)
 801c826:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c82a:	f7e3 fd05 	bl	8000238 <__aeabi_dsub>
 801c82e:	e773      	b.n	801c718 <__ieee754_acos+0x40>
 801c830:	2d00      	cmp	r5, #0
 801c832:	f280 80cf 	bge.w	801c9d4 <__ieee754_acos+0x2fc>
 801c836:	4b65      	ldr	r3, [pc, #404]	@ (801c9cc <__ieee754_acos+0x2f4>)
 801c838:	2200      	movs	r2, #0
 801c83a:	4620      	mov	r0, r4
 801c83c:	4629      	mov	r1, r5
 801c83e:	f7e3 fcfd 	bl	800023c <__adddf3>
 801c842:	4b63      	ldr	r3, [pc, #396]	@ (801c9d0 <__ieee754_acos+0x2f8>)
 801c844:	2200      	movs	r2, #0
 801c846:	f7e3 feaf 	bl	80005a8 <__aeabi_dmul>
 801c84a:	a343      	add	r3, pc, #268	@ (adr r3, 801c958 <__ieee754_acos+0x280>)
 801c84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c850:	4604      	mov	r4, r0
 801c852:	460d      	mov	r5, r1
 801c854:	f7e3 fea8 	bl	80005a8 <__aeabi_dmul>
 801c858:	a341      	add	r3, pc, #260	@ (adr r3, 801c960 <__ieee754_acos+0x288>)
 801c85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c85e:	f7e3 fced 	bl	800023c <__adddf3>
 801c862:	4622      	mov	r2, r4
 801c864:	462b      	mov	r3, r5
 801c866:	f7e3 fe9f 	bl	80005a8 <__aeabi_dmul>
 801c86a:	a33f      	add	r3, pc, #252	@ (adr r3, 801c968 <__ieee754_acos+0x290>)
 801c86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c870:	f7e3 fce2 	bl	8000238 <__aeabi_dsub>
 801c874:	4622      	mov	r2, r4
 801c876:	462b      	mov	r3, r5
 801c878:	f7e3 fe96 	bl	80005a8 <__aeabi_dmul>
 801c87c:	a33c      	add	r3, pc, #240	@ (adr r3, 801c970 <__ieee754_acos+0x298>)
 801c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c882:	f7e3 fcdb 	bl	800023c <__adddf3>
 801c886:	4622      	mov	r2, r4
 801c888:	462b      	mov	r3, r5
 801c88a:	f7e3 fe8d 	bl	80005a8 <__aeabi_dmul>
 801c88e:	a33a      	add	r3, pc, #232	@ (adr r3, 801c978 <__ieee754_acos+0x2a0>)
 801c890:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c894:	f7e3 fcd0 	bl	8000238 <__aeabi_dsub>
 801c898:	4622      	mov	r2, r4
 801c89a:	462b      	mov	r3, r5
 801c89c:	f7e3 fe84 	bl	80005a8 <__aeabi_dmul>
 801c8a0:	a337      	add	r3, pc, #220	@ (adr r3, 801c980 <__ieee754_acos+0x2a8>)
 801c8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8a6:	f7e3 fcc9 	bl	800023c <__adddf3>
 801c8aa:	4622      	mov	r2, r4
 801c8ac:	462b      	mov	r3, r5
 801c8ae:	f7e3 fe7b 	bl	80005a8 <__aeabi_dmul>
 801c8b2:	a335      	add	r3, pc, #212	@ (adr r3, 801c988 <__ieee754_acos+0x2b0>)
 801c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8b8:	4606      	mov	r6, r0
 801c8ba:	460f      	mov	r7, r1
 801c8bc:	4620      	mov	r0, r4
 801c8be:	4629      	mov	r1, r5
 801c8c0:	f7e3 fe72 	bl	80005a8 <__aeabi_dmul>
 801c8c4:	a332      	add	r3, pc, #200	@ (adr r3, 801c990 <__ieee754_acos+0x2b8>)
 801c8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8ca:	f7e3 fcb5 	bl	8000238 <__aeabi_dsub>
 801c8ce:	4622      	mov	r2, r4
 801c8d0:	462b      	mov	r3, r5
 801c8d2:	f7e3 fe69 	bl	80005a8 <__aeabi_dmul>
 801c8d6:	a330      	add	r3, pc, #192	@ (adr r3, 801c998 <__ieee754_acos+0x2c0>)
 801c8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8dc:	f7e3 fcae 	bl	800023c <__adddf3>
 801c8e0:	4622      	mov	r2, r4
 801c8e2:	462b      	mov	r3, r5
 801c8e4:	f7e3 fe60 	bl	80005a8 <__aeabi_dmul>
 801c8e8:	a32d      	add	r3, pc, #180	@ (adr r3, 801c9a0 <__ieee754_acos+0x2c8>)
 801c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8ee:	f7e3 fca3 	bl	8000238 <__aeabi_dsub>
 801c8f2:	4622      	mov	r2, r4
 801c8f4:	462b      	mov	r3, r5
 801c8f6:	f7e3 fe57 	bl	80005a8 <__aeabi_dmul>
 801c8fa:	4b34      	ldr	r3, [pc, #208]	@ (801c9cc <__ieee754_acos+0x2f4>)
 801c8fc:	2200      	movs	r2, #0
 801c8fe:	f7e3 fc9d 	bl	800023c <__adddf3>
 801c902:	ec45 4b10 	vmov	d0, r4, r5
 801c906:	4680      	mov	r8, r0
 801c908:	4689      	mov	r9, r1
 801c90a:	f7fe fbd9 	bl	801b0c0 <__ieee754_sqrt>
 801c90e:	ec55 4b10 	vmov	r4, r5, d0
 801c912:	4642      	mov	r2, r8
 801c914:	464b      	mov	r3, r9
 801c916:	4630      	mov	r0, r6
 801c918:	4639      	mov	r1, r7
 801c91a:	f7e3 ff6f 	bl	80007fc <__aeabi_ddiv>
 801c91e:	4622      	mov	r2, r4
 801c920:	462b      	mov	r3, r5
 801c922:	f7e3 fe41 	bl	80005a8 <__aeabi_dmul>
 801c926:	a320      	add	r3, pc, #128	@ (adr r3, 801c9a8 <__ieee754_acos+0x2d0>)
 801c928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c92c:	f7e3 fc84 	bl	8000238 <__aeabi_dsub>
 801c930:	4622      	mov	r2, r4
 801c932:	462b      	mov	r3, r5
 801c934:	f7e3 fc82 	bl	800023c <__adddf3>
 801c938:	4602      	mov	r2, r0
 801c93a:	460b      	mov	r3, r1
 801c93c:	f7e3 fc7e 	bl	800023c <__adddf3>
 801c940:	4602      	mov	r2, r0
 801c942:	460b      	mov	r3, r1
 801c944:	a11c      	add	r1, pc, #112	@ (adr r1, 801c9b8 <__ieee754_acos+0x2e0>)
 801c946:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c94a:	e76e      	b.n	801c82a <__ieee754_acos+0x152>
 801c94c:	f3af 8000 	nop.w
	...
 801c958:	0dfdf709 	.word	0x0dfdf709
 801c95c:	3f023de1 	.word	0x3f023de1
 801c960:	7501b288 	.word	0x7501b288
 801c964:	3f49efe0 	.word	0x3f49efe0
 801c968:	b5688f3b 	.word	0xb5688f3b
 801c96c:	3fa48228 	.word	0x3fa48228
 801c970:	0e884455 	.word	0x0e884455
 801c974:	3fc9c155 	.word	0x3fc9c155
 801c978:	03eb6f7d 	.word	0x03eb6f7d
 801c97c:	3fd4d612 	.word	0x3fd4d612
 801c980:	55555555 	.word	0x55555555
 801c984:	3fc55555 	.word	0x3fc55555
 801c988:	b12e9282 	.word	0xb12e9282
 801c98c:	3fb3b8c5 	.word	0x3fb3b8c5
 801c990:	1b8d0159 	.word	0x1b8d0159
 801c994:	3fe6066c 	.word	0x3fe6066c
 801c998:	9c598ac8 	.word	0x9c598ac8
 801c99c:	40002ae5 	.word	0x40002ae5
 801c9a0:	1c8a2d4b 	.word	0x1c8a2d4b
 801c9a4:	40033a27 	.word	0x40033a27
 801c9a8:	33145c07 	.word	0x33145c07
 801c9ac:	3c91a626 	.word	0x3c91a626
 801c9b0:	54442d18 	.word	0x54442d18
 801c9b4:	3ff921fb 	.word	0x3ff921fb
 801c9b8:	54442d18 	.word	0x54442d18
 801c9bc:	400921fb 	.word	0x400921fb
 801c9c0:	3fefffff 	.word	0x3fefffff
 801c9c4:	3fdfffff 	.word	0x3fdfffff
 801c9c8:	3c600000 	.word	0x3c600000
 801c9cc:	3ff00000 	.word	0x3ff00000
 801c9d0:	3fe00000 	.word	0x3fe00000
 801c9d4:	4622      	mov	r2, r4
 801c9d6:	462b      	mov	r3, r5
 801c9d8:	496b      	ldr	r1, [pc, #428]	@ (801cb88 <__ieee754_acos+0x4b0>)
 801c9da:	2000      	movs	r0, #0
 801c9dc:	f7e3 fc2c 	bl	8000238 <__aeabi_dsub>
 801c9e0:	4b6a      	ldr	r3, [pc, #424]	@ (801cb8c <__ieee754_acos+0x4b4>)
 801c9e2:	2200      	movs	r2, #0
 801c9e4:	f7e3 fde0 	bl	80005a8 <__aeabi_dmul>
 801c9e8:	4604      	mov	r4, r0
 801c9ea:	460d      	mov	r5, r1
 801c9ec:	ec45 4b10 	vmov	d0, r4, r5
 801c9f0:	f7fe fb66 	bl	801b0c0 <__ieee754_sqrt>
 801c9f4:	a34c      	add	r3, pc, #304	@ (adr r3, 801cb28 <__ieee754_acos+0x450>)
 801c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9fa:	4620      	mov	r0, r4
 801c9fc:	4629      	mov	r1, r5
 801c9fe:	ec59 8b10 	vmov	r8, r9, d0
 801ca02:	f7e3 fdd1 	bl	80005a8 <__aeabi_dmul>
 801ca06:	a34a      	add	r3, pc, #296	@ (adr r3, 801cb30 <__ieee754_acos+0x458>)
 801ca08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca0c:	f7e3 fc16 	bl	800023c <__adddf3>
 801ca10:	4622      	mov	r2, r4
 801ca12:	462b      	mov	r3, r5
 801ca14:	f7e3 fdc8 	bl	80005a8 <__aeabi_dmul>
 801ca18:	a347      	add	r3, pc, #284	@ (adr r3, 801cb38 <__ieee754_acos+0x460>)
 801ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca1e:	f7e3 fc0b 	bl	8000238 <__aeabi_dsub>
 801ca22:	4622      	mov	r2, r4
 801ca24:	462b      	mov	r3, r5
 801ca26:	f7e3 fdbf 	bl	80005a8 <__aeabi_dmul>
 801ca2a:	a345      	add	r3, pc, #276	@ (adr r3, 801cb40 <__ieee754_acos+0x468>)
 801ca2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca30:	f7e3 fc04 	bl	800023c <__adddf3>
 801ca34:	4622      	mov	r2, r4
 801ca36:	462b      	mov	r3, r5
 801ca38:	f7e3 fdb6 	bl	80005a8 <__aeabi_dmul>
 801ca3c:	a342      	add	r3, pc, #264	@ (adr r3, 801cb48 <__ieee754_acos+0x470>)
 801ca3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca42:	f7e3 fbf9 	bl	8000238 <__aeabi_dsub>
 801ca46:	4622      	mov	r2, r4
 801ca48:	462b      	mov	r3, r5
 801ca4a:	f7e3 fdad 	bl	80005a8 <__aeabi_dmul>
 801ca4e:	a340      	add	r3, pc, #256	@ (adr r3, 801cb50 <__ieee754_acos+0x478>)
 801ca50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca54:	f7e3 fbf2 	bl	800023c <__adddf3>
 801ca58:	4622      	mov	r2, r4
 801ca5a:	462b      	mov	r3, r5
 801ca5c:	f7e3 fda4 	bl	80005a8 <__aeabi_dmul>
 801ca60:	a33d      	add	r3, pc, #244	@ (adr r3, 801cb58 <__ieee754_acos+0x480>)
 801ca62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca66:	4682      	mov	sl, r0
 801ca68:	468b      	mov	fp, r1
 801ca6a:	4620      	mov	r0, r4
 801ca6c:	4629      	mov	r1, r5
 801ca6e:	f7e3 fd9b 	bl	80005a8 <__aeabi_dmul>
 801ca72:	a33b      	add	r3, pc, #236	@ (adr r3, 801cb60 <__ieee754_acos+0x488>)
 801ca74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca78:	f7e3 fbde 	bl	8000238 <__aeabi_dsub>
 801ca7c:	4622      	mov	r2, r4
 801ca7e:	462b      	mov	r3, r5
 801ca80:	f7e3 fd92 	bl	80005a8 <__aeabi_dmul>
 801ca84:	a338      	add	r3, pc, #224	@ (adr r3, 801cb68 <__ieee754_acos+0x490>)
 801ca86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca8a:	f7e3 fbd7 	bl	800023c <__adddf3>
 801ca8e:	4622      	mov	r2, r4
 801ca90:	462b      	mov	r3, r5
 801ca92:	f7e3 fd89 	bl	80005a8 <__aeabi_dmul>
 801ca96:	a336      	add	r3, pc, #216	@ (adr r3, 801cb70 <__ieee754_acos+0x498>)
 801ca98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca9c:	f7e3 fbcc 	bl	8000238 <__aeabi_dsub>
 801caa0:	4622      	mov	r2, r4
 801caa2:	462b      	mov	r3, r5
 801caa4:	f7e3 fd80 	bl	80005a8 <__aeabi_dmul>
 801caa8:	4b37      	ldr	r3, [pc, #220]	@ (801cb88 <__ieee754_acos+0x4b0>)
 801caaa:	2200      	movs	r2, #0
 801caac:	f7e3 fbc6 	bl	800023c <__adddf3>
 801cab0:	4602      	mov	r2, r0
 801cab2:	460b      	mov	r3, r1
 801cab4:	4650      	mov	r0, sl
 801cab6:	4659      	mov	r1, fp
 801cab8:	f7e3 fea0 	bl	80007fc <__aeabi_ddiv>
 801cabc:	4642      	mov	r2, r8
 801cabe:	464b      	mov	r3, r9
 801cac0:	f7e3 fd72 	bl	80005a8 <__aeabi_dmul>
 801cac4:	2600      	movs	r6, #0
 801cac6:	4682      	mov	sl, r0
 801cac8:	468b      	mov	fp, r1
 801caca:	4632      	mov	r2, r6
 801cacc:	464b      	mov	r3, r9
 801cace:	4630      	mov	r0, r6
 801cad0:	4649      	mov	r1, r9
 801cad2:	f7e3 fd69 	bl	80005a8 <__aeabi_dmul>
 801cad6:	4602      	mov	r2, r0
 801cad8:	460b      	mov	r3, r1
 801cada:	4620      	mov	r0, r4
 801cadc:	4629      	mov	r1, r5
 801cade:	f7e3 fbab 	bl	8000238 <__aeabi_dsub>
 801cae2:	4632      	mov	r2, r6
 801cae4:	4604      	mov	r4, r0
 801cae6:	460d      	mov	r5, r1
 801cae8:	464b      	mov	r3, r9
 801caea:	4640      	mov	r0, r8
 801caec:	4649      	mov	r1, r9
 801caee:	f7e3 fba5 	bl	800023c <__adddf3>
 801caf2:	4602      	mov	r2, r0
 801caf4:	460b      	mov	r3, r1
 801caf6:	4620      	mov	r0, r4
 801caf8:	4629      	mov	r1, r5
 801cafa:	f7e3 fe7f 	bl	80007fc <__aeabi_ddiv>
 801cafe:	4602      	mov	r2, r0
 801cb00:	460b      	mov	r3, r1
 801cb02:	4650      	mov	r0, sl
 801cb04:	4659      	mov	r1, fp
 801cb06:	f7e3 fb99 	bl	800023c <__adddf3>
 801cb0a:	4632      	mov	r2, r6
 801cb0c:	464b      	mov	r3, r9
 801cb0e:	f7e3 fb95 	bl	800023c <__adddf3>
 801cb12:	4602      	mov	r2, r0
 801cb14:	460b      	mov	r3, r1
 801cb16:	f7e3 fb91 	bl	800023c <__adddf3>
 801cb1a:	e5fd      	b.n	801c718 <__ieee754_acos+0x40>
 801cb1c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801cb78 <__ieee754_acos+0x4a0>
 801cb20:	e5ee      	b.n	801c700 <__ieee754_acos+0x28>
 801cb22:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801cb80 <__ieee754_acos+0x4a8>
 801cb26:	e5eb      	b.n	801c700 <__ieee754_acos+0x28>
 801cb28:	0dfdf709 	.word	0x0dfdf709
 801cb2c:	3f023de1 	.word	0x3f023de1
 801cb30:	7501b288 	.word	0x7501b288
 801cb34:	3f49efe0 	.word	0x3f49efe0
 801cb38:	b5688f3b 	.word	0xb5688f3b
 801cb3c:	3fa48228 	.word	0x3fa48228
 801cb40:	0e884455 	.word	0x0e884455
 801cb44:	3fc9c155 	.word	0x3fc9c155
 801cb48:	03eb6f7d 	.word	0x03eb6f7d
 801cb4c:	3fd4d612 	.word	0x3fd4d612
 801cb50:	55555555 	.word	0x55555555
 801cb54:	3fc55555 	.word	0x3fc55555
 801cb58:	b12e9282 	.word	0xb12e9282
 801cb5c:	3fb3b8c5 	.word	0x3fb3b8c5
 801cb60:	1b8d0159 	.word	0x1b8d0159
 801cb64:	3fe6066c 	.word	0x3fe6066c
 801cb68:	9c598ac8 	.word	0x9c598ac8
 801cb6c:	40002ae5 	.word	0x40002ae5
 801cb70:	1c8a2d4b 	.word	0x1c8a2d4b
 801cb74:	40033a27 	.word	0x40033a27
 801cb78:	54442d18 	.word	0x54442d18
 801cb7c:	400921fb 	.word	0x400921fb
 801cb80:	54442d18 	.word	0x54442d18
 801cb84:	3ff921fb 	.word	0x3ff921fb
 801cb88:	3ff00000 	.word	0x3ff00000
 801cb8c:	3fe00000 	.word	0x3fe00000

0801cb90 <scalbn>:
 801cb90:	b570      	push	{r4, r5, r6, lr}
 801cb92:	ec55 4b10 	vmov	r4, r5, d0
 801cb96:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801cb9a:	4606      	mov	r6, r0
 801cb9c:	462b      	mov	r3, r5
 801cb9e:	b991      	cbnz	r1, 801cbc6 <scalbn+0x36>
 801cba0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801cba4:	4323      	orrs	r3, r4
 801cba6:	d03b      	beq.n	801cc20 <scalbn+0x90>
 801cba8:	4b33      	ldr	r3, [pc, #204]	@ (801cc78 <scalbn+0xe8>)
 801cbaa:	4620      	mov	r0, r4
 801cbac:	4629      	mov	r1, r5
 801cbae:	2200      	movs	r2, #0
 801cbb0:	f7e3 fcfa 	bl	80005a8 <__aeabi_dmul>
 801cbb4:	4b31      	ldr	r3, [pc, #196]	@ (801cc7c <scalbn+0xec>)
 801cbb6:	429e      	cmp	r6, r3
 801cbb8:	4604      	mov	r4, r0
 801cbba:	460d      	mov	r5, r1
 801cbbc:	da0f      	bge.n	801cbde <scalbn+0x4e>
 801cbbe:	a326      	add	r3, pc, #152	@ (adr r3, 801cc58 <scalbn+0xc8>)
 801cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbc4:	e01e      	b.n	801cc04 <scalbn+0x74>
 801cbc6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801cbca:	4291      	cmp	r1, r2
 801cbcc:	d10b      	bne.n	801cbe6 <scalbn+0x56>
 801cbce:	4622      	mov	r2, r4
 801cbd0:	4620      	mov	r0, r4
 801cbd2:	4629      	mov	r1, r5
 801cbd4:	f7e3 fb32 	bl	800023c <__adddf3>
 801cbd8:	4604      	mov	r4, r0
 801cbda:	460d      	mov	r5, r1
 801cbdc:	e020      	b.n	801cc20 <scalbn+0x90>
 801cbde:	460b      	mov	r3, r1
 801cbe0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801cbe4:	3936      	subs	r1, #54	@ 0x36
 801cbe6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801cbea:	4296      	cmp	r6, r2
 801cbec:	dd0d      	ble.n	801cc0a <scalbn+0x7a>
 801cbee:	2d00      	cmp	r5, #0
 801cbf0:	a11b      	add	r1, pc, #108	@ (adr r1, 801cc60 <scalbn+0xd0>)
 801cbf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbf6:	da02      	bge.n	801cbfe <scalbn+0x6e>
 801cbf8:	a11b      	add	r1, pc, #108	@ (adr r1, 801cc68 <scalbn+0xd8>)
 801cbfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbfe:	a318      	add	r3, pc, #96	@ (adr r3, 801cc60 <scalbn+0xd0>)
 801cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc04:	f7e3 fcd0 	bl	80005a8 <__aeabi_dmul>
 801cc08:	e7e6      	b.n	801cbd8 <scalbn+0x48>
 801cc0a:	1872      	adds	r2, r6, r1
 801cc0c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801cc10:	428a      	cmp	r2, r1
 801cc12:	dcec      	bgt.n	801cbee <scalbn+0x5e>
 801cc14:	2a00      	cmp	r2, #0
 801cc16:	dd06      	ble.n	801cc26 <scalbn+0x96>
 801cc18:	f36f 531e 	bfc	r3, #20, #11
 801cc1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cc20:	ec45 4b10 	vmov	d0, r4, r5
 801cc24:	bd70      	pop	{r4, r5, r6, pc}
 801cc26:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801cc2a:	da08      	bge.n	801cc3e <scalbn+0xae>
 801cc2c:	2d00      	cmp	r5, #0
 801cc2e:	a10a      	add	r1, pc, #40	@ (adr r1, 801cc58 <scalbn+0xc8>)
 801cc30:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc34:	dac3      	bge.n	801cbbe <scalbn+0x2e>
 801cc36:	a10e      	add	r1, pc, #56	@ (adr r1, 801cc70 <scalbn+0xe0>)
 801cc38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc3c:	e7bf      	b.n	801cbbe <scalbn+0x2e>
 801cc3e:	3236      	adds	r2, #54	@ 0x36
 801cc40:	f36f 531e 	bfc	r3, #20, #11
 801cc44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cc48:	4620      	mov	r0, r4
 801cc4a:	4b0d      	ldr	r3, [pc, #52]	@ (801cc80 <scalbn+0xf0>)
 801cc4c:	4629      	mov	r1, r5
 801cc4e:	2200      	movs	r2, #0
 801cc50:	e7d8      	b.n	801cc04 <scalbn+0x74>
 801cc52:	bf00      	nop
 801cc54:	f3af 8000 	nop.w
 801cc58:	c2f8f359 	.word	0xc2f8f359
 801cc5c:	01a56e1f 	.word	0x01a56e1f
 801cc60:	8800759c 	.word	0x8800759c
 801cc64:	7e37e43c 	.word	0x7e37e43c
 801cc68:	8800759c 	.word	0x8800759c
 801cc6c:	fe37e43c 	.word	0xfe37e43c
 801cc70:	c2f8f359 	.word	0xc2f8f359
 801cc74:	81a56e1f 	.word	0x81a56e1f
 801cc78:	43500000 	.word	0x43500000
 801cc7c:	ffff3cb0 	.word	0xffff3cb0
 801cc80:	3c900000 	.word	0x3c900000

0801cc84 <_init>:
 801cc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc86:	bf00      	nop
 801cc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc8a:	bc08      	pop	{r3}
 801cc8c:	469e      	mov	lr, r3
 801cc8e:	4770      	bx	lr

0801cc90 <_fini>:
 801cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc92:	bf00      	nop
 801cc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc96:	bc08      	pop	{r3}
 801cc98:	469e      	mov	lr, r3
 801cc9a:	4770      	bx	lr
