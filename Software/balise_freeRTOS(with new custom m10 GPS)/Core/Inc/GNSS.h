#ifndef INC_GNSS_H_
#define INC_GNSS_H_

#include "main.h"

union u_Short
{
	uint8_t bytes[2];
	unsigned short uShort;
};

union i_Short
{
	uint8_t bytes[2];
	signed short iShort;
};

union u_Long
{
	uint8_t bytes[4];
	unsigned long uLong;
};

union i_Long
{
	uint8_t bytes[4];
	signed long iLong;
};

typedef struct
{
	UART_HandleTypeDef *huart;

	uint8_t uniqueID[4];
	uint8_t uartWorkingBuffer[101];

	unsigned short year;
	uint8_t yearBytes[2];
	uint8_t month;
	uint8_t day;
	uint8_t hour;
	uint8_t min;
	uint8_t sec;
	uint8_t fixType;//2==2d fix and 3==3dfix 0==no fix and 1==deadreckoning
	uint8_t numSV;//sat number used in nav solution
	uint8_t satCount;

	signed long lon;
	uint8_t lonBytes[4];
	signed long lat;
	uint8_t latBytes[4];
	float fLon;
	float fLat;

	signed long height;
	float fheight;


	signed long hMSL;
	uint8_t hMSLBytes[4];
	float fhMSL;

	unsigned long hAcc;
	float fhACC;
	unsigned long vAcc;
	float fvACC;

	signed long gSpeed;
	uint8_t gSpeedBytes[4];
	float fgSpeed;

	signed long headMot;

}GNSS_StateHandle;


enum GNSSMode{Portable=0, Stationary=1, Pedestrian=2, Automotiv=3, Airbone1G=5, Airbone2G=6,Airbone4G=7,Wirst=8,Bike=9};

static const uint8_t setPortableMode[]={0xB5,0x62,0x06,0x24,0x24,0x00,0xFF,0xFF,0x00,0x03,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x05,0x00,0xFA,0x00,0xFA,0x00,0x64,0x00,0x5E,0x01,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x3C};

static const uint8_t setStationaryMode[]={0xB5,0x62,0x06,0x24,0x24,0x00,0xFF,0xFF,0x02,0x03,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x05,0x00,0xFA,0x00,0xFA,0x00,0x64,0x00,0x5E,0x01,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80};

static const uint8_t setPedestrianMode[]={0xB5,0x62,0x06,0x24,0x24,0x00,0xFF,0xFF,0x03,0x03,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x05,0x00,0xFA,0x00,0xFA,0x00,0x64,0x00,0x5E,0x01,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0xA2};

static const uint8_t setAutomotiveMode[]={0xB5,0x62,0x06,0x24,0x24,0x00,0xFF,0xFF,0x04,0x03,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x05,0x00,0xFA,0x00,0xFA,0x00,0x64,0x00,0x5E,0x01,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x82,0xC4};

//static const uint8_t setSeaMode[]={0xB5,0x62,0x06,0x24,0x24,0x00,0xFF,0xFF,0x05,0x03,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x05,0x00,0xFA,0x00,0xFA,0x00,0x64,0x00,0x5E,0x01,0x00,0x3C,0x00,0x00,0x,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x83,0xE6};

static const uint8_t setAirbone1GMode[]={0xB5,0x62,0x06,0x24,0x24,0x00,0xFF,0xFF,0x06,0x03,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x05,0x00,0xFA,0x00,0xFA,0x00,0x64,0x00,0x5E,0x01,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x84,0x08};

static const uint8_t setAirbone2GMode[]={0xB5,0x62,0x06,0x24,0x24,0x00,0xFF,0xFF,0x07,0x03,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x05,0x00,0xFA,0x00,0xFA,0x00,0x64,0x00,0x5E,0x01,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x85,0x2A};

static const uint8_t setAirbone4GMode[]={0xB5,0x62,0x06,0x24,0x24,0x00,0xFF,0xFF,0x08,0x03,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x05,0x00,0xFA,0x00,0xFA,0x00,0x64,0x00,0x5E,0x01,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x86,0x4C};

static const uint8_t setWirstMode[]={0xB5,0x62,0x06,0x24,0x24,0x00,0xFF,0xFF,0x09,0x03,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x05,0x00,0xFA,0x00,0xFA,0x00,0x64,0x00,0x5E,0x01,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x87,0x6E};

static const uint8_t setBikeMode[]={0xB5,0x62,0x06,0x24,0x24,0x00,0xFF,0xFF,0x0A,0x03,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x05,0x00,0xFA,0x00,0xFA,0x00,0x64,0x00,0x5E,0x01,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x88,0x90};










static const uint8_t configUBX115200Baud[]={0xB5 ,0x62 ,0x06 ,0x8A ,0x0C ,0x00 ,0x00 ,0x01 ,0x00 ,0x00 ,0x01 ,0x00 ,0x52 ,0x40 ,0x00 ,0xC2 ,0x01 ,0x00 ,0xF3 ,0xA5};

static const uint8_t uart1outprotubxenable[]={0xB5 ,0x62 ,0x06 ,0x8A ,0x09 ,0x00 ,0x00 ,0x01 ,0x00 ,0x00 ,0x01 ,0x00 ,0x74 ,0x10 ,0x01 ,0x20 ,0xB3};

static const uint8_t uart1outprotnmeadisable[]={0xB5, 0x62, 0x06, 0x8A ,0x09, 0x00, 0x00 ,0x01, 0x00, 0x00, 0x02, 0x00, 0x74, 0x10, 0x00, 0x20, 0xB7};

static const uint8_t meas_rate_1hz[]={0xB5, 0x62, 0x06, 0x8A, 0x0A, 0x00 ,0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x21, 0x30, 0xE8, 0x03, 0xD8, 0xC4};

static const uint8_t meas_rate_5hz[]={0xB5 ,0x62 ,0x06 ,0x8A ,0x0A ,0x00 ,0x00 ,0x01 ,0x00 ,0x00 ,0x01 ,0x00 ,0x21 ,0x30 ,0xC8 ,0x00 ,0xB5 ,0x81};

static const uint8_t meas_rate_8hz[]={0xB5 ,0x62 ,0x06 ,0x8A ,0x0A ,0x00 ,0x00 ,0x01 ,0x00 ,0x00 ,0x01 ,0x00 ,0x21 ,0x30 ,0x7D ,0x00 ,0x6A ,0xEB};

static const uint8_t meas_rate_10hz[]={0xB5 ,0x62 ,0x06 ,0x8A ,0x0A ,0x00 ,0x00 ,0x01 ,0x00 ,0x00 ,0x01 ,0x00 ,0x21 ,0x30 ,0x64 ,0x00 ,0x51 ,0xB9};
//not 16Hz but every 63ms too 15.87hz
static const uint8_t meas_rate_16hz[]={0xB5 ,0x62 ,0x06 ,0x8A ,0x0A ,0x00 ,0x00 ,0x01 ,0x00 ,0x00 ,0x01 ,0x00 ,0x21 ,0x30 ,0x3F ,0x00 ,0x2C ,0x6F};

static const uint8_t meas_rate_20hz[]={0xB5 ,0x62 ,0x06 ,0x8A ,0x0A ,0x00 ,0x00 ,0x01 ,0x00 ,0x00 ,0x01 ,0x00 ,0x21 ,0x30 ,0x32 ,0x00 ,0x1F ,0x55};

static const uint8_t ubx_pvt_every_1meas[]={0xB5 ,0x62 ,0x06 ,0x8A ,0x09 ,0x00 ,0x00 ,0x01 ,0x00 ,0x00 ,0x07 ,0x00 ,0x91 ,0x20 ,0x01, 0x53 ,0x48 };

static const uint8_t ubx_pvt_every_5meas[]={0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x00, 0x01, 0x00, 0x00, 0x07, 0x00, 0x91, 0x20, 0x05, 0x57, 0x4C };

static const uint8_t ubx_pvt_every_10meas[]={ 0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00, 0x00, 0x01, 0x00, 0x00, 0x07, 0x00, 0x91, 0x20, 0x0A, 0x5C, 0x51};









//10hz in performance mode and 4hz in normal mode for gps galileo glonass and beidou b1c
static const uint8_t setGPS_GAL_BEIDOU_GLONASS[]={0xB5 ,0x62 ,0x06 ,0x8A ,0x2C ,0x00 ,0x00 ,0x01 ,0x00 ,0x00 ,0x1F ,0x00 ,0x31 ,0x10 ,0x01 ,0x21 ,0x00 ,0x31 ,0x10 ,0x01 ,0x22 ,0x00 ,0x31 ,0x10 ,0x01 ,0x25 ,0x00 ,0x31 ,0x10 ,0x01 ,0x24 ,0x00 ,0x31 ,0x10 ,0x00 ,0x20 ,0x00 ,0x31 ,0x10, 0x00 ,0x0D ,0x00 ,0x31 ,0x10 ,0x00 ,0x0F ,0x00 ,0x31 ,0x10 ,0x01 ,0xB1 ,0x91};

//16hz in performance mode and 6hz in normal mode for gps galileo glonass
static const uint8_t setGPS_GAL_GLONASS[]={   0xB5, 0x62, 0x06, 0x8A, 0x22, 0x00, 0x00, 0x01,0x00, 0x00, 0x1F, 0x00, 0x31, 0x10, 0x01, 0x21,0x00, 0x31, 0x10, 0x01, 0x22, 0x00, 0x31, 0x10,0x00, 0x25, 0x00, 0x31, 0x10, 0x01, 0x24, 0x00,0x31, 0x10, 0x00, 0x20, 0x00, 0x31, 0x10, 0x00,0x07, 0xEC};
//25hz in performance mode and 18hz in normal mode for gps only
static const uint8_t setGPS_ONYL[]={    0xB5, 0x62, 0x06, 0x8A, 0x2C, 0x00, 0x00, 0x01,0x00, 0x00, 0x1F, 0x00, 0x31, 0x10, 0x01, 0x21,0x00, 0x31, 0x10, 0x00, 0x22, 0x00, 0x31, 0x10,0x00, 0x25, 0x00, 0x31, 0x10, 0x00, 0x24, 0x00,0x31, 0x10, 0x00, 0x20, 0x00, 0x31, 0x10, 0x00,0x0D, 0x00, 0x31, 0x10, 0x00, 0x0F, 0x00, 0x31,0x10, 0x00, 0xAD, 0x42};
//25hz in performance mode and 18hz in normal mode for galileo only
static const uint8_t setGALILEO_ONYL[]={    0xB5, 0x62, 0x06, 0x8A, 0x2C, 0x00, 0x00, 0x01,0x00, 0x00, 0x1F, 0x00, 0x31, 0x10, 0x00, 0x21,0x00, 0x31, 0x10, 0x01, 0x22, 0x00, 0x31, 0x10,0x00, 0x25, 0x00, 0x31, 0x10, 0x00, 0x24, 0x00,0x31, 0x10, 0x00, 0x20, 0x00, 0x31, 0x10, 0x00,0x0D, 0x00, 0x31, 0x10, 0x00, 0x0F, 0x00, 0x31,0x10, 0x00, 0xAD, 0x3D};




static const uint8_t highperfclock_OTP[]={0xB5, 0x62, 0x06, 0x41, 0x10, 0x00, 0x03, 0x00,0x04, 0x1F, 0x54, 0x5E, 0x79, 0xBF, 0x28, 0xEF,0x12, 0x05, 0xFD, 0xFF, 0xFF, 0xFF, 0x8F, 0x0D,0xB5, 0x62, 0x06, 0x41, 0x1C, 0x00, 0x04, 0x01,0xA4, 0x10, 0xBD, 0x34, 0xF9, 0x12, 0x28, 0xEF,0x12, 0x05, 0x05, 0x00, 0xA4, 0x40, 0x00, 0xB0,0x71, 0x0B, 0x0A, 0x00, 0xA4, 0x40, 0x00, 0xD8,0xB8, 0x05, 0xDE, 0xAE};


static const uint8_t test_for_highperf[]={0xB5 ,0x62, 0x06, 0x8B, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0xA4, 0x40, 0x03,0x00, 0xA4, 0x40, 0x05, 0x00, 0xA4, 0x40, 0x0A, 0x00, 0xA4, 0x40, 0x4C, 0x15};

static const uint8_t getDeviceID[] =      {0xB5,0x62,0x27,0x03,0x00,0x00,0x2A,0xA5};

static const uint8_t getNavigatorData[] = {0xB5,0x62,0x01,0x21,0x00,0x00,0x22,0x67};

static const uint8_t getPOSLLHData[] =    {0xB5,0x62,0x01,0x02,0x00,0x00,0x03,0x0A};

static const uint8_t getPVTData[] =       {0xB5,0x62,0x01,0x07,0x00,0x00,0x08,0x19};

static const uint8_t getNAVSATData[] =   {0xB5,0x62,0x01,0x35,0x00,0x00,0x08,0x19};




static const uint8_t setPortableType[]={};
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart);
void GNSS_LoadConfig(GNSS_StateHandle *GNSS);
void GNSS_ParseBuffer(GNSS_StateHandle *GNSS);

void GNSS_GetUniqID(GNSS_StateHandle *GNSS);
void GNSS_ParseUniqID(GNSS_StateHandle *GNSS);

void GNSS_GetNavigatorData(GNSS_StateHandle *GNSS);
void GNSS_ParseNavigatorData(GNSS_StateHandle *GNSS);

void GNSS_GetPOSLLHData(GNSS_StateHandle *GNSS);
void GNSS_ParsePOSLLHData(GNSS_StateHandle *GNSS);

void GNSS_GetPVTData(GNSS_StateHandle *GNSS);
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS);

void GNSS_GetNAVSATData(GNSS_StateHandle *GNSS);
void GNSS_ParseNAVSATData(GNSS_StateHandle *GNSS);

void GNSS_SetMode(GNSS_StateHandle *GNSS, short gnssMode);

double distancecalc(double lat1, double lat2, double long1, double long2);
#endif /* INC_GNSS_H_ */



