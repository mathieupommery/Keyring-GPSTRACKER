
Flapy Bird.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004990  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08004b20  08004b20  00014b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc8  08004cc8  000226ec  2**0
                  CONTENTS
  4 .ARM          00000008  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd0  08004cd0  000226ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000026ec  20000000  08004cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000226ec  2**0
                  CONTENTS
 10 .bss          000000c0  200026ec  200026ec  000226ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200027ac  200027ac  000226ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000226ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007ab2  00000000  00000000  0002271c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001902  00000000  00000000  0002a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d0  00000000  00000000  0002bad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006f8  00000000  00000000  0002c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211e7  00000000  00000000  0002c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008acc  00000000  00000000  0004db7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3d9f  00000000  00000000  0005664b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011a3ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028ec  00000000  00000000  0011a43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200026ec 	.word	0x200026ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b08 	.word	0x08004b08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200026f0 	.word	0x200026f0
 80001cc:	08004b08 	.word	0x08004b08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b974 	b.w	8000b7c <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468e      	mov	lr, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d14d      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008ba:	428a      	cmp	r2, r1
 80008bc:	4694      	mov	ip, r2
 80008be:	d969      	bls.n	8000994 <__udivmoddi4+0xe8>
 80008c0:	fab2 f282 	clz	r2, r2
 80008c4:	b152      	cbz	r2, 80008dc <__udivmoddi4+0x30>
 80008c6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ca:	f1c2 0120 	rsb	r1, r2, #32
 80008ce:	fa20 f101 	lsr.w	r1, r0, r1
 80008d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d6:	ea41 0e03 	orr.w	lr, r1, r3
 80008da:	4094      	lsls	r4, r2
 80008dc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e0:	0c21      	lsrs	r1, r4, #16
 80008e2:	fbbe f6f8 	udiv	r6, lr, r8
 80008e6:	fa1f f78c 	uxth.w	r7, ip
 80008ea:	fb08 e316 	mls	r3, r8, r6, lr
 80008ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008f2:	fb06 f107 	mul.w	r1, r6, r7
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000902:	f080 811f 	bcs.w	8000b44 <__udivmoddi4+0x298>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 811c 	bls.w	8000b44 <__udivmoddi4+0x298>
 800090c:	3e02      	subs	r6, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a5b      	subs	r3, r3, r1
 8000912:	b2a4      	uxth	r4, r4
 8000914:	fbb3 f0f8 	udiv	r0, r3, r8
 8000918:	fb08 3310 	mls	r3, r8, r0, r3
 800091c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000920:	fb00 f707 	mul.w	r7, r0, r7
 8000924:	42a7      	cmp	r7, r4
 8000926:	d90a      	bls.n	800093e <__udivmoddi4+0x92>
 8000928:	eb1c 0404 	adds.w	r4, ip, r4
 800092c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000930:	f080 810a 	bcs.w	8000b48 <__udivmoddi4+0x29c>
 8000934:	42a7      	cmp	r7, r4
 8000936:	f240 8107 	bls.w	8000b48 <__udivmoddi4+0x29c>
 800093a:	4464      	add	r4, ip
 800093c:	3802      	subs	r0, #2
 800093e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000942:	1be4      	subs	r4, r4, r7
 8000944:	2600      	movs	r6, #0
 8000946:	b11d      	cbz	r5, 8000950 <__udivmoddi4+0xa4>
 8000948:	40d4      	lsrs	r4, r2
 800094a:	2300      	movs	r3, #0
 800094c:	e9c5 4300 	strd	r4, r3, [r5]
 8000950:	4631      	mov	r1, r6
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d909      	bls.n	800096e <__udivmoddi4+0xc2>
 800095a:	2d00      	cmp	r5, #0
 800095c:	f000 80ef 	beq.w	8000b3e <__udivmoddi4+0x292>
 8000960:	2600      	movs	r6, #0
 8000962:	e9c5 0100 	strd	r0, r1, [r5]
 8000966:	4630      	mov	r0, r6
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	fab3 f683 	clz	r6, r3
 8000972:	2e00      	cmp	r6, #0
 8000974:	d14a      	bne.n	8000a0c <__udivmoddi4+0x160>
 8000976:	428b      	cmp	r3, r1
 8000978:	d302      	bcc.n	8000980 <__udivmoddi4+0xd4>
 800097a:	4282      	cmp	r2, r0
 800097c:	f200 80f9 	bhi.w	8000b72 <__udivmoddi4+0x2c6>
 8000980:	1a84      	subs	r4, r0, r2
 8000982:	eb61 0303 	sbc.w	r3, r1, r3
 8000986:	2001      	movs	r0, #1
 8000988:	469e      	mov	lr, r3
 800098a:	2d00      	cmp	r5, #0
 800098c:	d0e0      	beq.n	8000950 <__udivmoddi4+0xa4>
 800098e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000992:	e7dd      	b.n	8000950 <__udivmoddi4+0xa4>
 8000994:	b902      	cbnz	r2, 8000998 <__udivmoddi4+0xec>
 8000996:	deff      	udf	#255	; 0xff
 8000998:	fab2 f282 	clz	r2, r2
 800099c:	2a00      	cmp	r2, #0
 800099e:	f040 8092 	bne.w	8000ac6 <__udivmoddi4+0x21a>
 80009a2:	eba1 010c 	sub.w	r1, r1, ip
 80009a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009aa:	fa1f fe8c 	uxth.w	lr, ip
 80009ae:	2601      	movs	r6, #1
 80009b0:	0c20      	lsrs	r0, r4, #16
 80009b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009b6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009be:	fb0e f003 	mul.w	r0, lr, r3
 80009c2:	4288      	cmp	r0, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x12c>
 80009c6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x12a>
 80009d0:	4288      	cmp	r0, r1
 80009d2:	f200 80cb 	bhi.w	8000b6c <__udivmoddi4+0x2c0>
 80009d6:	4643      	mov	r3, r8
 80009d8:	1a09      	subs	r1, r1, r0
 80009da:	b2a4      	uxth	r4, r4
 80009dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e0:	fb07 1110 	mls	r1, r7, r0, r1
 80009e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009e8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ec:	45a6      	cmp	lr, r4
 80009ee:	d908      	bls.n	8000a02 <__udivmoddi4+0x156>
 80009f0:	eb1c 0404 	adds.w	r4, ip, r4
 80009f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009f8:	d202      	bcs.n	8000a00 <__udivmoddi4+0x154>
 80009fa:	45a6      	cmp	lr, r4
 80009fc:	f200 80bb 	bhi.w	8000b76 <__udivmoddi4+0x2ca>
 8000a00:	4608      	mov	r0, r1
 8000a02:	eba4 040e 	sub.w	r4, r4, lr
 8000a06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a0a:	e79c      	b.n	8000946 <__udivmoddi4+0x9a>
 8000a0c:	f1c6 0720 	rsb	r7, r6, #32
 8000a10:	40b3      	lsls	r3, r6
 8000a12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a22:	431c      	orrs	r4, r3
 8000a24:	40f9      	lsrs	r1, r7
 8000a26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a32:	0c20      	lsrs	r0, r4, #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fb09 1118 	mls	r1, r9, r8, r1
 8000a3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a40:	fb08 f00e 	mul.w	r0, r8, lr
 8000a44:	4288      	cmp	r0, r1
 8000a46:	fa02 f206 	lsl.w	r2, r2, r6
 8000a4a:	d90b      	bls.n	8000a64 <__udivmoddi4+0x1b8>
 8000a4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a54:	f080 8088 	bcs.w	8000b68 <__udivmoddi4+0x2bc>
 8000a58:	4288      	cmp	r0, r1
 8000a5a:	f240 8085 	bls.w	8000b68 <__udivmoddi4+0x2bc>
 8000a5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a62:	4461      	add	r1, ip
 8000a64:	1a09      	subs	r1, r1, r0
 8000a66:	b2a4      	uxth	r4, r4
 8000a68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a78:	458e      	cmp	lr, r1
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x1e2>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a84:	d26c      	bcs.n	8000b60 <__udivmoddi4+0x2b4>
 8000a86:	458e      	cmp	lr, r1
 8000a88:	d96a      	bls.n	8000b60 <__udivmoddi4+0x2b4>
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	4461      	add	r1, ip
 8000a8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a92:	fba0 9402 	umull	r9, r4, r0, r2
 8000a96:	eba1 010e 	sub.w	r1, r1, lr
 8000a9a:	42a1      	cmp	r1, r4
 8000a9c:	46c8      	mov	r8, r9
 8000a9e:	46a6      	mov	lr, r4
 8000aa0:	d356      	bcc.n	8000b50 <__udivmoddi4+0x2a4>
 8000aa2:	d053      	beq.n	8000b4c <__udivmoddi4+0x2a0>
 8000aa4:	b15d      	cbz	r5, 8000abe <__udivmoddi4+0x212>
 8000aa6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000aae:	fa01 f707 	lsl.w	r7, r1, r7
 8000ab2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ab6:	40f1      	lsrs	r1, r6
 8000ab8:	431f      	orrs	r7, r3
 8000aba:	e9c5 7100 	strd	r7, r1, [r5]
 8000abe:	2600      	movs	r6, #0
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	40d8      	lsrs	r0, r3
 8000acc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	4301      	orrs	r1, r0
 8000ad8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000adc:	fa1f fe8c 	uxth.w	lr, ip
 8000ae0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ae4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ae8:	0c0b      	lsrs	r3, r1, #16
 8000aea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aee:	fb00 f60e 	mul.w	r6, r0, lr
 8000af2:	429e      	cmp	r6, r3
 8000af4:	fa04 f402 	lsl.w	r4, r4, r2
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x260>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b02:	d22f      	bcs.n	8000b64 <__udivmoddi4+0x2b8>
 8000b04:	429e      	cmp	r6, r3
 8000b06:	d92d      	bls.n	8000b64 <__udivmoddi4+0x2b8>
 8000b08:	3802      	subs	r0, #2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	1b9b      	subs	r3, r3, r6
 8000b0e:	b289      	uxth	r1, r1
 8000b10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b14:	fb07 3316 	mls	r3, r7, r6, r3
 8000b18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b20:	428b      	cmp	r3, r1
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x28a>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b2c:	d216      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d914      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b32:	3e02      	subs	r6, #2
 8000b34:	4461      	add	r1, ip
 8000b36:	1ac9      	subs	r1, r1, r3
 8000b38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b3c:	e738      	b.n	80009b0 <__udivmoddi4+0x104>
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e705      	b.n	8000950 <__udivmoddi4+0xa4>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e3      	b.n	8000910 <__udivmoddi4+0x64>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6f8      	b.n	800093e <__udivmoddi4+0x92>
 8000b4c:	454b      	cmp	r3, r9
 8000b4e:	d2a9      	bcs.n	8000aa4 <__udivmoddi4+0x1f8>
 8000b50:	ebb9 0802 	subs.w	r8, r9, r2
 8000b54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7a3      	b.n	8000aa4 <__udivmoddi4+0x1f8>
 8000b5c:	4646      	mov	r6, r8
 8000b5e:	e7ea      	b.n	8000b36 <__udivmoddi4+0x28a>
 8000b60:	4620      	mov	r0, r4
 8000b62:	e794      	b.n	8000a8e <__udivmoddi4+0x1e2>
 8000b64:	4640      	mov	r0, r8
 8000b66:	e7d1      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b68:	46d0      	mov	r8, sl
 8000b6a:	e77b      	b.n	8000a64 <__udivmoddi4+0x1b8>
 8000b6c:	3b02      	subs	r3, #2
 8000b6e:	4461      	add	r1, ip
 8000b70:	e732      	b.n	80009d8 <__udivmoddi4+0x12c>
 8000b72:	4630      	mov	r0, r6
 8000b74:	e709      	b.n	800098a <__udivmoddi4+0xde>
 8000b76:	4464      	add	r4, ip
 8000b78:	3802      	subs	r0, #2
 8000b7a:	e742      	b.n	8000a02 <__udivmoddi4+0x156>

08000b7c <__aeabi_idiv0>:
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b86:	f001 fb75 	bl	8002274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8a:	f000 fbf1 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f000 fc8f 	bl	80014b0 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000b92:	f000 fc57 	bl	8001444 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  SSD1289_Init();
 8000b96:	f000 ffbb 	bl	8001b10 <SSD1289_Init>
  SSD1289_Clear_Screen();
 8000b9a:	f000 ffb1 	bl	8001b00 <SSD1289_Clear_Screen>

//  Init_Game(); /*Khoi tao game*/

  Welcome();
 8000b9e:	f000 f979 	bl	8000e94 <Welcome>

  int c = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  int score_old = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
  int game_over=NO;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]

  while (1)
  {
	  if(!Read_IRQ()){
 8000bae:	f001 fa83 	bl	80020b8 <Read_IRQ>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1fa      	bne.n	8000bae <main+0x2e>
		  if((game_over==NO)||Button_Press(X_BUT, Y_BUT, BUT_WIDTH, BUT_HEIGH)){
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d008      	beq.n	8000bd0 <main+0x50>
 8000bbe:	2330      	movs	r3, #48	; 0x30
 8000bc0:	2231      	movs	r2, #49	; 0x31
 8000bc2:	2164      	movs	r1, #100	; 0x64
 8000bc4:	208c      	movs	r0, #140	; 0x8c
 8000bc6:	f000 fae9 	bl	800119c <Button_Press>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0ee      	beq.n	8000bae <main+0x2e>
		  	  score_old = score;
 8000bd0:	4b92      	ldr	r3, [pc, #584]	; (8000e1c <main+0x29c>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	607b      	str	r3, [r7, #4]
		  	  c = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
			  Init_Game();
 8000bda:	f000 fb29 	bl	8001230 <Init_Game>

			  if(score_old > high_score){
 8000bde:	4b90      	ldr	r3, [pc, #576]	; (8000e20 <main+0x2a0>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	dd0c      	ble.n	8000c04 <main+0x84>
			  		high_score = score_old;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	4b8c      	ldr	r3, [pc, #560]	; (8000e20 <main+0x2a0>)
 8000bf0:	801a      	strh	r2, [r3, #0]
			  		Print_Score(high_score, 300, Hscolor);
 8000bf2:	4b8b      	ldr	r3, [pc, #556]	; (8000e20 <main+0x2a0>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	f24f 021f 	movw	r2, #61471	; 0xf01f
 8000bfa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f9ce 	bl	8000fa0 <Print_Score>
			  }
			  while(1){
					  if(x1 == 70){	/*Neu ong khoi 1 di qua toa to 110 thi tao ong khoi 2*/
 8000c04:	4b87      	ldr	r3, [pc, #540]	; (8000e24 <main+0x2a4>)
 8000c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c0a:	2b46      	cmp	r3, #70	; 0x46
 8000c0c:	d116      	bne.n	8000c3c <main+0xbc>
						  x2 = 320;
 8000c0e:	4b86      	ldr	r3, [pc, #536]	; (8000e28 <main+0x2a8>)
 8000c10:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c14:	801a      	strh	r2, [r3, #0]
						  heigh_pill2 = list_heigh[rand()%15];
 8000c16:	f002 ff3f 	bl	8003a98 <rand>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	4b83      	ldr	r3, [pc, #524]	; (8000e2c <main+0x2ac>)
 8000c1e:	fb83 1302 	smull	r1, r3, r3, r2
 8000c22:	4413      	add	r3, r2
 8000c24:	10d9      	asrs	r1, r3, #3
 8000c26:	17d3      	asrs	r3, r2, #31
 8000c28:	1ac9      	subs	r1, r1, r3
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	1a5b      	subs	r3, r3, r1
 8000c30:	1ad1      	subs	r1, r2, r3
 8000c32:	4b7f      	ldr	r3, [pc, #508]	; (8000e30 <main+0x2b0>)
 8000c34:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8000c38:	4b7e      	ldr	r3, [pc, #504]	; (8000e34 <main+0x2b4>)
 8000c3a:	801a      	strh	r2, [r3, #0]
					  }
					  if(x2 == 70){   /*Neu ong khoi di qua toa do 110 thi tao them ong khoi*/
 8000c3c:	4b7a      	ldr	r3, [pc, #488]	; (8000e28 <main+0x2a8>)
 8000c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c42:	2b46      	cmp	r3, #70	; 0x46
 8000c44:	d116      	bne.n	8000c74 <main+0xf4>
						  x1 = 320;
 8000c46:	4b77      	ldr	r3, [pc, #476]	; (8000e24 <main+0x2a4>)
 8000c48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c4c:	801a      	strh	r2, [r3, #0]
						  heigh_pill1 = list_heigh[rand()%15];
 8000c4e:	f002 ff23 	bl	8003a98 <rand>
 8000c52:	4602      	mov	r2, r0
 8000c54:	4b75      	ldr	r3, [pc, #468]	; (8000e2c <main+0x2ac>)
 8000c56:	fb83 1302 	smull	r1, r3, r3, r2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	10d9      	asrs	r1, r3, #3
 8000c5e:	17d3      	asrs	r3, r2, #31
 8000c60:	1ac9      	subs	r1, r1, r3
 8000c62:	460b      	mov	r3, r1
 8000c64:	011b      	lsls	r3, r3, #4
 8000c66:	1a5b      	subs	r3, r3, r1
 8000c68:	1ad1      	subs	r1, r2, r3
 8000c6a:	4b71      	ldr	r3, [pc, #452]	; (8000e30 <main+0x2b0>)
 8000c6c:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8000c70:	4b71      	ldr	r3, [pc, #452]	; (8000e38 <main+0x2b8>)
 8000c72:	801a      	strh	r2, [r3, #0]
					  }

					  /*Ve ong khoi*/
					  Draw_Pillar(x1, heigh_pill1);
 8000c74:	4b6b      	ldr	r3, [pc, #428]	; (8000e24 <main+0x2a4>)
 8000c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c7a:	4a6f      	ldr	r2, [pc, #444]	; (8000e38 <main+0x2b8>)
 8000c7c:	8812      	ldrh	r2, [r2, #0]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f933 	bl	8000eec <Draw_Pillar>
					  Draw_Pillar(x2, heigh_pill2);
 8000c86:	4b68      	ldr	r3, [pc, #416]	; (8000e28 <main+0x2a8>)
 8000c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c8c:	4a69      	ldr	r2, [pc, #420]	; (8000e34 <main+0x2b4>)
 8000c8e:	8812      	ldrh	r2, [r2, #0]
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f92a 	bl	8000eec <Draw_Pillar>


					  if(!Read_IRQ()){	/*Neu co tin hieu cam ung*/
 8000c98:	f001 fa0e 	bl	80020b8 <Read_IRQ>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10b      	bne.n	8000cba <main+0x13a>
						  y_bird -= 5;
 8000ca2:	4b66      	ldr	r3, [pc, #408]	; (8000e3c <main+0x2bc>)
 8000ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	3b05      	subs	r3, #5
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	4b62      	ldr	r3, [pc, #392]	; (8000e3c <main+0x2bc>)
 8000cb2:	801a      	strh	r2, [r3, #0]
						  c = 1;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e00b      	b.n	8000cd2 <main+0x152>
					  }
					  else if(c){	// Neu chua cham lan nao thi chim van dung yen
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d008      	beq.n	8000cd2 <main+0x152>
						  y_bird += 2;
 8000cc0:	4b5e      	ldr	r3, [pc, #376]	; (8000e3c <main+0x2bc>)
 8000cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	3302      	adds	r3, #2
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	b21a      	sxth	r2, r3
 8000cce:	4b5b      	ldr	r3, [pc, #364]	; (8000e3c <main+0x2bc>)
 8000cd0:	801a      	strh	r2, [r3, #0]
					  }

					  if(x1 > 70){
 8000cd2:	4b54      	ldr	r3, [pc, #336]	; (8000e24 <main+0x2a4>)
 8000cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd8:	2b46      	cmp	r3, #70	; 0x46
 8000cda:	dd0c      	ble.n	8000cf6 <main+0x176>
						  x_com = x1;
 8000cdc:	4b51      	ldr	r3, [pc, #324]	; (8000e24 <main+0x2a4>)
 8000cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	4b56      	ldr	r3, [pc, #344]	; (8000e40 <main+0x2c0>)
 8000ce6:	801a      	strh	r2, [r3, #0]
						  h_com = heigh_pill1-1;
 8000ce8:	4b53      	ldr	r3, [pc, #332]	; (8000e38 <main+0x2b8>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b54      	ldr	r3, [pc, #336]	; (8000e44 <main+0x2c4>)
 8000cf2:	801a      	strh	r2, [r3, #0]
 8000cf4:	e00b      	b.n	8000d0e <main+0x18e>
					  }
					  else{
						  x_com = x2;
 8000cf6:	4b4c      	ldr	r3, [pc, #304]	; (8000e28 <main+0x2a8>)
 8000cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b50      	ldr	r3, [pc, #320]	; (8000e40 <main+0x2c0>)
 8000d00:	801a      	strh	r2, [r3, #0]
						  h_com = heigh_pill2-1;
 8000d02:	4b4c      	ldr	r3, [pc, #304]	; (8000e34 <main+0x2b4>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b4e      	ldr	r3, [pc, #312]	; (8000e44 <main+0x2c4>)
 8000d0c:	801a      	strh	r2, [r3, #0]
					  }
					  if(((x_com==X_COM)&&((y_bird<=h_com)||(y_bird+HEIGH_BIRD>=(h_com+DISTANCE))))||
 8000d0e:	4b4c      	ldr	r3, [pc, #304]	; (8000e40 <main+0x2c0>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	2b88      	cmp	r3, #136	; 0x88
 8000d14:	d10f      	bne.n	8000d36 <main+0x1b6>
 8000d16:	4b49      	ldr	r3, [pc, #292]	; (8000e3c <main+0x2bc>)
 8000d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b49      	ldr	r3, [pc, #292]	; (8000e44 <main+0x2c4>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	dd3d      	ble.n	8000da2 <main+0x222>
 8000d26:	4b47      	ldr	r3, [pc, #284]	; (8000e44 <main+0x2c4>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	3328      	adds	r3, #40	; 0x28
 8000d2c:	4a43      	ldr	r2, [pc, #268]	; (8000e3c <main+0x2bc>)
 8000d2e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d32:	4293      	cmp	r3, r2
 8000d34:	db35      	blt.n	8000da2 <main+0x222>
						((y_bird<=h_com+1)&&( ((X_COM>=x_com)&&
 8000d36:	4b41      	ldr	r3, [pc, #260]	; (8000e3c <main+0x2bc>)
 8000d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b41      	ldr	r3, [pc, #260]	; (8000e44 <main+0x2c4>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
					  if(((x_com==X_COM)&&((y_bird<=h_com)||(y_bird+HEIGH_BIRD>=(h_com+DISTANCE))))||
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dc0f      	bgt.n	8000d68 <main+0x1e8>
						((y_bird<=h_com+1)&&( ((X_COM>=x_com)&&
 8000d48:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <main+0x2c0>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	2b88      	cmp	r3, #136	; 0x88
 8000d4e:	d803      	bhi.n	8000d58 <main+0x1d8>
						(X_COM <= (x_com+WIDTH_PILL)))||((BIRD_X>=x_com)&&(BIRD_X<=(x_com+WIDTH_PILL)))))||
 8000d50:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <main+0x2c0>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
						((y_bird<=h_com+1)&&( ((X_COM>=x_com)&&
 8000d54:	2b5f      	cmp	r3, #95	; 0x5f
 8000d56:	d824      	bhi.n	8000da2 <main+0x222>
						(X_COM <= (x_com+WIDTH_PILL)))||((BIRD_X>=x_com)&&(BIRD_X<=(x_com+WIDTH_PILL)))))||
 8000d58:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <main+0x2c0>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	2b6e      	cmp	r3, #110	; 0x6e
 8000d5e:	d803      	bhi.n	8000d68 <main+0x1e8>
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <main+0x2c0>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	2b45      	cmp	r3, #69	; 0x45
 8000d66:	d81c      	bhi.n	8000da2 <main+0x222>
						(((y_bird+HEIGH_BIRD)>=(h_com+DISTANCE))&&
 8000d68:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <main+0x2c4>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	3328      	adds	r3, #40	; 0x28
 8000d6e:	4a33      	ldr	r2, [pc, #204]	; (8000e3c <main+0x2bc>)
 8000d70:	f9b2 2000 	ldrsh.w	r2, [r2]
						(X_COM <= (x_com+WIDTH_PILL)))||((BIRD_X>=x_com)&&(BIRD_X<=(x_com+WIDTH_PILL)))))||
 8000d74:	4293      	cmp	r3, r2
 8000d76:	da0f      	bge.n	8000d98 <main+0x218>
						(((X_COM>=x_com)&&(X_COM <= (x_com+WIDTH_PILL)))||((BIRD_X>=x_com)&&
 8000d78:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <main+0x2c0>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
						(((y_bird+HEIGH_BIRD)>=(h_com+DISTANCE))&&
 8000d7c:	2b88      	cmp	r3, #136	; 0x88
 8000d7e:	d803      	bhi.n	8000d88 <main+0x208>
						(((X_COM>=x_com)&&(X_COM <= (x_com+WIDTH_PILL)))||((BIRD_X>=x_com)&&
 8000d80:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <main+0x2c0>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	2b5f      	cmp	r3, #95	; 0x5f
 8000d86:	d80c      	bhi.n	8000da2 <main+0x222>
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <main+0x2c0>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	2b6e      	cmp	r3, #110	; 0x6e
 8000d8e:	d803      	bhi.n	8000d98 <main+0x218>
						(BIRD_X<=(x_com+WIDTH_PILL)))))||
 8000d90:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <main+0x2c0>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
						(((X_COM>=x_com)&&(X_COM <= (x_com+WIDTH_PILL)))||((BIRD_X>=x_com)&&
 8000d94:	2b45      	cmp	r3, #69	; 0x45
 8000d96:	d804      	bhi.n	8000da2 <main+0x222>
						  ((y_bird+HEIGH_BIRD)>=HEIGH_SCREEN)){
 8000d98:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <main+0x2bc>)
 8000d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
						(BIRD_X<=(x_com+WIDTH_PILL)))))||
 8000d9e:	2bc3      	cmp	r3, #195	; 0xc3
 8000da0:	dd04      	ble.n	8000dac <main+0x22c>

						  game_over = YES;
 8000da2:	2301      	movs	r3, #1
 8000da4:	60bb      	str	r3, [r7, #8]
						  Game_Over();
 8000da6:	f000 f963 	bl	8001070 <Game_Over>
						  break;
 8000daa:	e036      	b.n	8000e1a <main+0x29a>
					  }

					  if(x1 == SCORED || x2 == SCORED){
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <main+0x2a4>)
 8000dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db2:	2b45      	cmp	r3, #69	; 0x45
 8000db4:	d004      	beq.n	8000dc0 <main+0x240>
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <main+0x2a8>)
 8000db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dbc:	2b45      	cmp	r3, #69	; 0x45
 8000dbe:	d10c      	bne.n	8000dda <main+0x25a>
						  score += 1;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <main+0x29c>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <main+0x29c>)
 8000dca:	801a      	strh	r2, [r3, #0]
						  Print_Score(score, X_SCORE, Blue);
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <main+0x29c>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	221f      	movs	r2, #31
 8000dd2:	214b      	movs	r1, #75	; 0x4b
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f8e3 	bl	8000fa0 <Print_Score>
					  }

					  if(c){
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d018      	beq.n	8000e12 <main+0x292>
						  Bird_Fly(y_bird);
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <main+0x2bc>)
 8000de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f8b5 	bl	8000f58 <Bird_Fly>
						  x1--;
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <main+0x2a4>)
 8000df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	3b01      	subs	r3, #1
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <main+0x2a4>)
 8000dfe:	801a      	strh	r2, [r3, #0]
						  x2--;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <main+0x2a8>)
 8000e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	b21a      	sxth	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <main+0x2a8>)
 8000e10:	801a      	strh	r2, [r3, #0]
					  }
					  HAL_Delay(10);
 8000e12:	200a      	movs	r0, #10
 8000e14:	f001 faa0 	bl	8002358 <HAL_Delay>
					  if(x1 == 70){	/*Neu ong khoi 1 di qua toa to 110 thi tao ong khoi 2*/
 8000e18:	e6f4      	b.n	8000c04 <main+0x84>
	  if(!Read_IRQ()){
 8000e1a:	e6c8      	b.n	8000bae <main+0x2e>
 8000e1c:	2000277e 	.word	0x2000277e
 8000e20:	20002780 	.word	0x20002780
 8000e24:	20002782 	.word	0x20002782
 8000e28:	20002784 	.word	0x20002784
 8000e2c:	88888889 	.word	0x88888889
 8000e30:	20002760 	.word	0x20002760
 8000e34:	20002788 	.word	0x20002788
 8000e38:	20002786 	.word	0x20002786
 8000e3c:	2000278a 	.word	0x2000278a
 8000e40:	2000278c 	.word	0x2000278c
 8000e44:	2000278e 	.word	0x2000278e

08000e48 <Init_Heigh_Pill>:
		}
  	  }

}

void Init_Heigh_Pill(){
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
	int i =0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
	int value = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
	for(i=0; i<15; i++){
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	e00e      	b.n	8000e7a <Init_Heigh_Pill+0x32>
		list_heigh[i] = 150-value;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8000e64:	b299      	uxth	r1, r3
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <Init_Heigh_Pill+0x48>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		value += 10;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	330a      	adds	r3, #10
 8000e72:	603b      	str	r3, [r7, #0]
	for(i=0; i<15; i++){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3301      	adds	r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0e      	cmp	r3, #14
 8000e7e:	dded      	ble.n	8000e5c <Init_Heigh_Pill+0x14>
	}

}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20002760 	.word	0x20002760

08000e94 <Welcome>:

void Welcome(){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af04      	add	r7, sp, #16
	SSD1289_Write_Back_Ground(Black);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 fe09 	bl	8001ab2 <SSD1289_Write_Back_Ground>
	SSD1289_Print_String(50, 40, 2, 1, 4, White, Black, "Flapy Bird");
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <Welcome+0x50>)
 8000ea2:	9303      	str	r3, [sp, #12]
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	9302      	str	r3, [sp, #8]
 8000ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	2304      	movs	r3, #4
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	2128      	movs	r1, #40	; 0x28
 8000eb8:	2032      	movs	r0, #50	; 0x32
 8000eba:	f000 fd83 	bl	80019c4 <SSD1289_Print_String>
	SSD1289_Print_String(40, 185, 1, 1, 2, White, Black, "Click to enter the game!");
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <Welcome+0x54>)
 8000ec0:	9303      	str	r3, [sp, #12]
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	9302      	str	r3, [sp, #8]
 8000ec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	2302      	movs	r3, #2
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	21b9      	movs	r1, #185	; 0xb9
 8000ed6:	2028      	movs	r0, #40	; 0x28
 8000ed8:	f000 fd74 	bl	80019c4 <SSD1289_Print_String>
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	08004b20 	.word	0x08004b20
 8000ee8:	08004b2c 	.word	0x08004b2c

08000eec <Draw_Pillar>:
void Draw_Pillar(int16_t x, uint16_t heigh){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	460a      	mov	r2, r1
 8000ef6:	80fb      	strh	r3, [r7, #6]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	80bb      	strh	r3, [r7, #4]
	if(x < 321){
 8000efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f00:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f04:	dc23      	bgt.n	8000f4e <Draw_Pillar+0x62>
	/*Xoa ong khoi cu*/
		int16_t x1 = x+WIDTH_PILL+1;
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	3329      	adds	r3, #41	; 0x29
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	81fb      	strh	r3, [r7, #14]

		SSD1289_Draw_V_Line(x1, 1, heigh, Background);				/*Xoa ong khoi top*/
 8000f0e:	89f8      	ldrh	r0, [r7, #14]
 8000f10:	88ba      	ldrh	r2, [r7, #4]
 8000f12:	f24c 73ff 	movw	r3, #51199	; 0xc7ff
 8000f16:	2101      	movs	r1, #1
 8000f18:	f000 fd9e 	bl	8001a58 <SSD1289_Draw_V_Line>
		SSD1289_Draw_V_Line(x1, 1+heigh+DISTANCE, HEIGH_SCREEN, Background);   /*Xoa ong khoi bot*/
 8000f1c:	89f8      	ldrh	r0, [r7, #14]
 8000f1e:	88bb      	ldrh	r3, [r7, #4]
 8000f20:	333d      	adds	r3, #61	; 0x3d
 8000f22:	b299      	uxth	r1, r3
 8000f24:	f24c 73ff 	movw	r3, #51199	; 0xc7ff
 8000f28:	22d7      	movs	r2, #215	; 0xd7
 8000f2a:	f000 fd95 	bl	8001a58 <SSD1289_Draw_V_Line>

	/*Ve ong khoi moi*/
		SSD1289_Draw_V_Line(x, 1, heigh, Green);
 8000f2e:	88f8      	ldrh	r0, [r7, #6]
 8000f30:	88ba      	ldrh	r2, [r7, #4]
 8000f32:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f36:	2101      	movs	r1, #1
 8000f38:	f000 fd8e 	bl	8001a58 <SSD1289_Draw_V_Line>
		SSD1289_Draw_V_Line(x, 1+heigh+DISTANCE, HEIGH_SCREEN, Green);
 8000f3c:	88f8      	ldrh	r0, [r7, #6]
 8000f3e:	88bb      	ldrh	r3, [r7, #4]
 8000f40:	333d      	adds	r3, #61	; 0x3d
 8000f42:	b299      	uxth	r1, r3
 8000f44:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f48:	22d7      	movs	r2, #215	; 0xd7
 8000f4a:	f000 fd85 	bl	8001a58 <SSD1289_Draw_V_Line>
	}
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <Bird_Fly>:


void Bird_Fly(uint16_t y){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
	SSD1289_Fill_Color(BIRD_X, y-3, (BIRD_X+WIDTH_BIRD+5), (y+HEIGH_BIRD+5), Background);
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	b299      	uxth	r1, r3
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	3318      	adds	r3, #24
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	f24c 72ff 	movw	r2, #51199	; 0xc7ff
 8000f72:	9200      	str	r2, [sp, #0]
 8000f74:	228d      	movs	r2, #141	; 0x8d
 8000f76:	206e      	movs	r0, #110	; 0x6e
 8000f78:	f000 fc2e 	bl	80017d8 <SSD1289_Fill_Color>
	HAL_Delay(5);
 8000f7c:	2005      	movs	r0, #5
 8000f7e:	f001 f9eb 	bl	8002358 <HAL_Delay>
	SSD1289_Write_Pic_Coor(BIRD_X, y, WIDTH_BIRD, HEIGH_BIRD, bird_image);
 8000f82:	88f9      	ldrh	r1, [r7, #6]
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <Bird_Fly+0x44>)
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2313      	movs	r3, #19
 8000f8a:	221a      	movs	r2, #26
 8000f8c:	206e      	movs	r0, #110	; 0x6e
 8000f8e:	f000 fc55 	bl	800183c <SSD1289_Write_Pic_Coor>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000000 	.word	0x20000000

08000fa0 <Print_Score>:

void Print_Score(uint16_t val, uint16_t x_score, uint16_t color){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
 8000faa:	460b      	mov	r3, r1
 8000fac:	80bb      	strh	r3, [r7, #4]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	807b      	strh	r3, [r7, #2]
	uint16_t a = 0, b = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	81fb      	strh	r3, [r7, #14]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	81bb      	strh	r3, [r7, #12]
	char string[3] = {0, 0, '\0'};
 8000fba:	4a2b      	ldr	r2, [pc, #172]	; (8001068 <Print_Score+0xc8>)
 8000fbc:	f107 0308 	add.w	r3, r7, #8
 8000fc0:	6812      	ldr	r2, [r2, #0]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	8019      	strh	r1, [r3, #0]
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	0c12      	lsrs	r2, r2, #16
 8000fca:	701a      	strb	r2, [r3, #0]
	/*Xoa diem cu*/
	SSD1289_Fill_Color(x_score, Y_SCORE, x_score+20, 239, Yellow);
 8000fcc:	88bb      	ldrh	r3, [r7, #4]
 8000fce:	3314      	adds	r3, #20
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	88b8      	ldrh	r0, [r7, #4]
 8000fd4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	23ef      	movs	r3, #239	; 0xef
 8000fdc:	21df      	movs	r1, #223	; 0xdf
 8000fde:	f000 fbfb 	bl	80017d8 <SSD1289_Fill_Color>
	if(val < 10){
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	2b09      	cmp	r3, #9
 8000fe6:	d80f      	bhi.n	8001008 <Print_Score+0x68>
		SSD1289_Print_Char(x_score, Y_SCORE, 2, color, Yellow, (val+48));
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	3330      	adds	r3, #48	; 0x30
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	887a      	ldrh	r2, [r7, #2]
 8000ff2:	88b8      	ldrh	r0, [r7, #4]
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	2202      	movs	r2, #2
 8001000:	21df      	movs	r1, #223	; 0xdf
 8001002:	f000 fc5d 	bl	80018c0 <SSD1289_Print_Char>
		string[0] = b;
		string[1] = a;
		SSD1289_Print_String(x_score, Y_SCORE, 1, 1, 2, color, Yellow, string);
	}

}
 8001006:	e02a      	b.n	800105e <Print_Score+0xbe>
		a = val%10 + 48;	/*Hang don vi*/
 8001008:	88fa      	ldrh	r2, [r7, #6]
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <Print_Score+0xcc>)
 800100c:	fba3 1302 	umull	r1, r3, r3, r2
 8001010:	08d9      	lsrs	r1, r3, #3
 8001012:	460b      	mov	r3, r1
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	b29b      	uxth	r3, r3
 800101e:	3330      	adds	r3, #48	; 0x30
 8001020:	81fb      	strh	r3, [r7, #14]
		b = val/10	+ 48;	/*Hang chuc*/
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	4a11      	ldr	r2, [pc, #68]	; (800106c <Print_Score+0xcc>)
 8001026:	fba2 2303 	umull	r2, r3, r2, r3
 800102a:	08db      	lsrs	r3, r3, #3
 800102c:	b29b      	uxth	r3, r3
 800102e:	3330      	adds	r3, #48	; 0x30
 8001030:	81bb      	strh	r3, [r7, #12]
		string[0] = b;
 8001032:	89bb      	ldrh	r3, [r7, #12]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	723b      	strb	r3, [r7, #8]
		string[1] = a;
 8001038:	89fb      	ldrh	r3, [r7, #14]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	727b      	strb	r3, [r7, #9]
		SSD1289_Print_String(x_score, Y_SCORE, 1, 1, 2, color, Yellow, string);
 800103e:	88b8      	ldrh	r0, [r7, #4]
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	9303      	str	r3, [sp, #12]
 8001046:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	2302      	movs	r3, #2
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	2201      	movs	r2, #1
 8001058:	21df      	movs	r1, #223	; 0xdf
 800105a:	f000 fcb3 	bl	80019c4 <SSD1289_Print_String>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	08004b48 	.word	0x08004b48
 800106c:	cccccccd 	.word	0xcccccccd

08001070 <Game_Over>:

void Game_Over(){
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af04      	add	r7, sp, #16

	SSD1289_Fill_Color(X_GAME_OVER-40, Y_GAME_OVER-10, X_GAME_OVER+120, Y_GAME_OVER+70, Background);
 8001076:	f24c 73ff 	movw	r3, #51199	; 0xc7ff
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	236e      	movs	r3, #110	; 0x6e
 800107e:	22d2      	movs	r2, #210	; 0xd2
 8001080:	211e      	movs	r1, #30
 8001082:	2032      	movs	r0, #50	; 0x32
 8001084:	f000 fba8 	bl	80017d8 <SSD1289_Fill_Color>
	SSD1289_Print_String(X_GAME_OVER, Y_GAME_OVER, 2, 2, 3, Red, Background, "Game Over");
 8001088:	4b3e      	ldr	r3, [pc, #248]	; (8001184 <Game_Over+0x114>)
 800108a:	9303      	str	r3, [sp, #12]
 800108c:	f24c 73ff 	movw	r3, #51199	; 0xc7ff
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	2303      	movs	r3, #3
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2302      	movs	r3, #2
 800109e:	2202      	movs	r2, #2
 80010a0:	2128      	movs	r1, #40	; 0x28
 80010a2:	205a      	movs	r0, #90	; 0x5a
 80010a4:	f000 fc8e 	bl	80019c4 <SSD1289_Print_String>
	SSD1289_Print_String(X_GAME_SCORE, Y_GAME_SCORE, 2, 2, 2, Red, Background, "Score: ");
 80010a8:	4b37      	ldr	r3, [pc, #220]	; (8001188 <Game_Over+0x118>)
 80010aa:	9303      	str	r3, [sp, #12]
 80010ac:	f24c 73ff 	movw	r3, #51199	; 0xc7ff
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2302      	movs	r3, #2
 80010be:	2202      	movs	r2, #2
 80010c0:	2146      	movs	r1, #70	; 0x46
 80010c2:	205f      	movs	r0, #95	; 0x5f
 80010c4:	f000 fc7e 	bl	80019c4 <SSD1289_Print_String>
	uint16_t a = 0, b = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	80fb      	strh	r3, [r7, #6]
 80010cc:	2300      	movs	r3, #0
 80010ce:	80bb      	strh	r3, [r7, #4]
	char string[3] = {0, 0, '\0'};
 80010d0:	4a2e      	ldr	r2, [pc, #184]	; (800118c <Game_Over+0x11c>)
 80010d2:	463b      	mov	r3, r7
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	4611      	mov	r1, r2
 80010d8:	8019      	strh	r1, [r3, #0]
 80010da:	3302      	adds	r3, #2
 80010dc:	0c12      	lsrs	r2, r2, #16
 80010de:	701a      	strb	r2, [r3, #0]
	if(score < 10){
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <Game_Over+0x120>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	2b09      	cmp	r3, #9
 80010e6:	d810      	bhi.n	800110a <Game_Over+0x9a>
		SSD1289_Print_Char(X_SOCRE_END, Y_GAME_SCORE, 2, Red, Background, (score+48));
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <Game_Over+0x120>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	3330      	adds	r3, #48	; 0x30
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	f24c 73ff 	movw	r3, #51199	; 0xc7ff
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010fe:	2202      	movs	r2, #2
 8001100:	2146      	movs	r1, #70	; 0x46
 8001102:	20a5      	movs	r0, #165	; 0xa5
 8001104:	f000 fbdc 	bl	80018c0 <SSD1289_Print_Char>
 8001108:	e02c      	b.n	8001164 <Game_Over+0xf4>
	}
	else{
		a = score%10 + 48;	/*Hang don vi*/
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <Game_Over+0x120>)
 800110c:	881a      	ldrh	r2, [r3, #0]
 800110e:	4b21      	ldr	r3, [pc, #132]	; (8001194 <Game_Over+0x124>)
 8001110:	fba3 1302 	umull	r1, r3, r3, r2
 8001114:	08d9      	lsrs	r1, r3, #3
 8001116:	460b      	mov	r3, r1
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	b29b      	uxth	r3, r3
 8001122:	3330      	adds	r3, #48	; 0x30
 8001124:	80fb      	strh	r3, [r7, #6]
		b = score/10	+ 48;	/*Hang chuc*/
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <Game_Over+0x120>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <Game_Over+0x124>)
 800112c:	fba2 2303 	umull	r2, r3, r2, r3
 8001130:	08db      	lsrs	r3, r3, #3
 8001132:	b29b      	uxth	r3, r3
 8001134:	3330      	adds	r3, #48	; 0x30
 8001136:	80bb      	strh	r3, [r7, #4]
		string[0] = b;
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	703b      	strb	r3, [r7, #0]
		string[1] = a;
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	707b      	strb	r3, [r7, #1]
		SSD1289_Print_String(X_SOCRE_END, Y_GAME_SCORE, 2, 2, 2, Red, Background, string);
 8001144:	463b      	mov	r3, r7
 8001146:	9303      	str	r3, [sp, #12]
 8001148:	f24c 73ff 	movw	r3, #51199	; 0xc7ff
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	2302      	movs	r3, #2
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2302      	movs	r3, #2
 800115a:	2202      	movs	r2, #2
 800115c:	2146      	movs	r1, #70	; 0x46
 800115e:	20a5      	movs	r0, #165	; 0xa5
 8001160:	f000 fc30 	bl	80019c4 <SSD1289_Print_String>
	}

	HAL_Delay(1500);
 8001164:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001168:	f001 f8f6 	bl	8002358 <HAL_Delay>
	SSD1289_Write_Pic_Coor(X_BUT, Y_BUT, BUT_WIDTH, BUT_HEIGH, button);
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <Game_Over+0x128>)
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2330      	movs	r3, #48	; 0x30
 8001172:	2231      	movs	r2, #49	; 0x31
 8001174:	2164      	movs	r1, #100	; 0x64
 8001176:	208c      	movs	r0, #140	; 0x8c
 8001178:	f000 fb60 	bl	800183c <SSD1289_Write_Pic_Coor>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	08004b4c 	.word	0x08004b4c
 8001188:	08004b58 	.word	0x08004b58
 800118c:	08004b48 	.word	0x08004b48
 8001190:	2000277e 	.word	0x2000277e
 8001194:	cccccccd 	.word	0xcccccccd
 8001198:	2000105c 	.word	0x2000105c

0800119c <Button_Press>:

int Button_Press(uint16_t x, uint16_t y, uint16_t width, uint16_t heigh){
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4604      	mov	r4, r0
 80011a4:	4608      	mov	r0, r1
 80011a6:	4611      	mov	r1, r2
 80011a8:	461a      	mov	r2, r3
 80011aa:	4623      	mov	r3, r4
 80011ac:	80fb      	strh	r3, [r7, #6]
 80011ae:	4603      	mov	r3, r0
 80011b0:	80bb      	strh	r3, [r7, #4]
 80011b2:	460b      	mov	r3, r1
 80011b4:	807b      	strh	r3, [r7, #2]
 80011b6:	4613      	mov	r3, r2
 80011b8:	803b      	strh	r3, [r7, #0]
	uint16_t lcd_x = 0, lcd_y = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	81fb      	strh	r3, [r7, #14]
 80011be:	2300      	movs	r3, #0
 80011c0:	81bb      	strh	r3, [r7, #12]
	if(!Read_IRQ()){
 80011c2:	f000 ff79 	bl	80020b8 <Read_IRQ>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d12b      	bne.n	8001224 <Button_Press+0x88>
		lcd_x = XPT2046_Calibrate(XPT2046_Read(cmd_X), 1);
 80011cc:	2090      	movs	r0, #144	; 0x90
 80011ce:	f000 ff7f 	bl	80020d0 <XPT2046_Read>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 ffca 	bl	8002170 <XPT2046_Calibrate>
 80011dc:	4603      	mov	r3, r0
 80011de:	81fb      	strh	r3, [r7, #14]
		lcd_y = XPT2046_Calibrate(XPT2046_Read(cmd_Y), 0);
 80011e0:	20d0      	movs	r0, #208	; 0xd0
 80011e2:	f000 ff75 	bl	80020d0 <XPT2046_Read>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 ffc0 	bl	8002170 <XPT2046_Calibrate>
 80011f0:	4603      	mov	r3, r0
 80011f2:	81bb      	strh	r3, [r7, #12]

		if(((lcd_x>x)&&(lcd_x<(x+width)))&&((lcd_y>y)&&(lcd_y<(y+heigh))))
 80011f4:	89fa      	ldrh	r2, [r7, #14]
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d911      	bls.n	8001220 <Button_Press+0x84>
 80011fc:	89fa      	ldrh	r2, [r7, #14]
 80011fe:	88f9      	ldrh	r1, [r7, #6]
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	440b      	add	r3, r1
 8001204:	429a      	cmp	r2, r3
 8001206:	da0b      	bge.n	8001220 <Button_Press+0x84>
 8001208:	89ba      	ldrh	r2, [r7, #12]
 800120a:	88bb      	ldrh	r3, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	d907      	bls.n	8001220 <Button_Press+0x84>
 8001210:	89ba      	ldrh	r2, [r7, #12]
 8001212:	88b9      	ldrh	r1, [r7, #4]
 8001214:	883b      	ldrh	r3, [r7, #0]
 8001216:	440b      	add	r3, r1
 8001218:	429a      	cmp	r2, r3
 800121a:	da01      	bge.n	8001220 <Button_Press+0x84>
			return YES;
 800121c:	2301      	movs	r3, #1
 800121e:	e002      	b.n	8001226 <Button_Press+0x8a>
		else
			return NO;
 8001220:	2300      	movs	r3, #0
 8001222:	e000      	b.n	8001226 <Button_Press+0x8a>
	}
	return NO;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}
	...

08001230 <Init_Game>:

void Init_Game(){
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af04      	add	r7, sp, #16
	  Init_Heigh_Pill();
 8001236:	f7ff fe07 	bl	8000e48 <Init_Heigh_Pill>
	  score = 0;
 800123a:	4b3e      	ldr	r3, [pc, #248]	; (8001334 <Init_Game+0x104>)
 800123c:	2200      	movs	r2, #0
 800123e:	801a      	strh	r2, [r3, #0]
	  x1 = 320;
 8001240:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <Init_Game+0x108>)
 8001242:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001246:	801a      	strh	r2, [r3, #0]
	  x2 = 600;	/*Toa do x cua 2 ong khoi xuat hien tren man hinh*/
 8001248:	4b3c      	ldr	r3, [pc, #240]	; (800133c <Init_Game+0x10c>)
 800124a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800124e:	801a      	strh	r2, [r3, #0]
	  heigh_pill1 = list_heigh[rand()%15];	/*Chieu cao ong khoi khi bat day game*/
 8001250:	f002 fc22 	bl	8003a98 <rand>
 8001254:	4602      	mov	r2, r0
 8001256:	4b3a      	ldr	r3, [pc, #232]	; (8001340 <Init_Game+0x110>)
 8001258:	fb83 1302 	smull	r1, r3, r3, r2
 800125c:	4413      	add	r3, r2
 800125e:	10d9      	asrs	r1, r3, #3
 8001260:	17d3      	asrs	r3, r2, #31
 8001262:	1ac9      	subs	r1, r1, r3
 8001264:	460b      	mov	r3, r1
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	1a5b      	subs	r3, r3, r1
 800126a:	1ad1      	subs	r1, r2, r3
 800126c:	4b35      	ldr	r3, [pc, #212]	; (8001344 <Init_Game+0x114>)
 800126e:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <Init_Game+0x118>)
 8001274:	801a      	strh	r2, [r3, #0]
	  heigh_pill2 = 100;
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <Init_Game+0x11c>)
 8001278:	2264      	movs	r2, #100	; 0x64
 800127a:	801a      	strh	r2, [r3, #0]
	  y_bird = BIRD_Y;
 800127c:	4b34      	ldr	r3, [pc, #208]	; (8001350 <Init_Game+0x120>)
 800127e:	2264      	movs	r2, #100	; 0x64
 8001280:	801a      	strh	r2, [r3, #0]
	  x_com = 320;
 8001282:	4b34      	ldr	r3, [pc, #208]	; (8001354 <Init_Game+0x124>)
 8001284:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001288:	801a      	strh	r2, [r3, #0]
	  h_com = heigh_pill1;
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <Init_Game+0x118>)
 800128c:	881a      	ldrh	r2, [r3, #0]
 800128e:	4b32      	ldr	r3, [pc, #200]	; (8001358 <Init_Game+0x128>)
 8001290:	801a      	strh	r2, [r3, #0]
	  SSD1289_Write_Back_Ground(Background);
 8001292:	f24c 70ff 	movw	r0, #51199	; 0xc7ff
 8001296:	f000 fc0c 	bl	8001ab2 <SSD1289_Write_Back_Ground>
	  SSD1289_Write_Pic_Coor(BIRD_X, BIRD_Y, WIDTH_BIRD, HEIGH_BIRD, bird_image);
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <Init_Game+0x12c>)
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2313      	movs	r3, #19
 80012a0:	221a      	movs	r2, #26
 80012a2:	2164      	movs	r1, #100	; 0x64
 80012a4:	206e      	movs	r0, #110	; 0x6e
 80012a6:	f000 fac9 	bl	800183c <SSD1289_Write_Pic_Coor>
	  SSD1289_Write_Pic_Coor(0, HEIGH_SCREEN, WIDTH_LINE, HEIGH_LINE, line);
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <Init_Game+0x130>)
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2305      	movs	r3, #5
 80012b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012b4:	21d7      	movs	r1, #215	; 0xd7
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 fac0 	bl	800183c <SSD1289_Write_Pic_Coor>
	  SSD1289_Fill_Color(0, HEIGH_SCREEN+5, 319, 239, Yellow);
 80012bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	23ef      	movs	r3, #239	; 0xef
 80012c4:	f240 123f 	movw	r2, #319	; 0x13f
 80012c8:	21dc      	movs	r1, #220	; 0xdc
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 fa84 	bl	80017d8 <SSD1289_Fill_Color>
	  SSD1289_Print_String(10, HEIGH_SCREEN+8, 1, 1, 2, Blue, Yellow, "Score: ");
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <Init_Game+0x134>)
 80012d2:	9303      	str	r3, [sp, #12]
 80012d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012d8:	9302      	str	r3, [sp, #8]
 80012da:	231f      	movs	r3, #31
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	2302      	movs	r3, #2
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2301      	movs	r3, #1
 80012e4:	2201      	movs	r2, #1
 80012e6:	21df      	movs	r1, #223	; 0xdf
 80012e8:	200a      	movs	r0, #10
 80012ea:	f000 fb6b 	bl	80019c4 <SSD1289_Print_String>
	  Print_Score(score, X_SCORE, Blue);
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <Init_Game+0x104>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	221f      	movs	r2, #31
 80012f4:	214b      	movs	r1, #75	; 0x4b
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fe52 	bl	8000fa0 <Print_Score>
	  SSD1289_Print_String(X_H_SCORE, HEIGH_SCREEN+8, 1, 1, 2, Hscolor, Yellow, "High Score: ");
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <Init_Game+0x138>)
 80012fe:	9303      	str	r3, [sp, #12]
 8001300:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	f24f 031f 	movw	r3, #61471	; 0xf01f
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	2302      	movs	r3, #2
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2301      	movs	r3, #1
 8001312:	2201      	movs	r2, #1
 8001314:	21df      	movs	r1, #223	; 0xdf
 8001316:	20b4      	movs	r0, #180	; 0xb4
 8001318:	f000 fb54 	bl	80019c4 <SSD1289_Print_String>
	  Print_Score(high_score, 300, Hscolor);
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <Init_Game+0x13c>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	f24f 021f 	movw	r2, #61471	; 0xf01f
 8001324:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fe39 	bl	8000fa0 <Print_Score>
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2000277e 	.word	0x2000277e
 8001338:	20002782 	.word	0x20002782
 800133c:	20002784 	.word	0x20002784
 8001340:	88888889 	.word	0x88888889
 8001344:	20002760 	.word	0x20002760
 8001348:	20002786 	.word	0x20002786
 800134c:	20002788 	.word	0x20002788
 8001350:	2000278a 	.word	0x2000278a
 8001354:	2000278c 	.word	0x2000278c
 8001358:	2000278e 	.word	0x2000278e
 800135c:	20000000 	.word	0x20000000
 8001360:	200003dc 	.word	0x200003dc
 8001364:	08004b58 	.word	0x08004b58
 8001368:	08004b60 	.word	0x08004b60
 800136c:	20002780 	.word	0x20002780

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b094      	sub	sp, #80	; 0x50
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	2230      	movs	r2, #48	; 0x30
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fb82 	bl	8003a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <SystemClock_Config+0xcc>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	4a27      	ldr	r2, [pc, #156]	; (800143c <SystemClock_Config+0xcc>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a2:	6413      	str	r3, [r2, #64]	; 0x40
 80013a4:	4b25      	ldr	r3, [pc, #148]	; (800143c <SystemClock_Config+0xcc>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <SystemClock_Config+0xd0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a21      	ldr	r2, [pc, #132]	; (8001440 <SystemClock_Config+0xd0>)
 80013ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <SystemClock_Config+0xd0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013cc:	2301      	movs	r3, #1
 80013ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d6:	2302      	movs	r3, #2
 80013d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013e0:	2308      	movs	r3, #8
 80013e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ee:	2307      	movs	r3, #7
 80013f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fa86 	bl	8002908 <HAL_RCC_OscConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001402:	f000 f8ed 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001406:	230f      	movs	r3, #15
 8001408:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140a:	2302      	movs	r3, #2
 800140c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001412:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001416:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	2105      	movs	r1, #5
 8001424:	4618      	mov	r0, r3
 8001426:	f001 fce7 	bl	8002df8 <HAL_RCC_ClockConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001430:	f000 f8d6 	bl	80015e0 <Error_Handler>
  }
}
 8001434:	bf00      	nop
 8001436:	3750      	adds	r7, #80	; 0x50
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	40007000 	.word	0x40007000

08001444 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_SPI3_Init+0x64>)
 800144a:	4a18      	ldr	r2, [pc, #96]	; (80014ac <MX_SPI3_Init+0x68>)
 800144c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_SPI3_Init+0x64>)
 8001450:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001454:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_SPI3_Init+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_SPI3_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_SPI3_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_SPI3_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_SPI3_Init+0x64>)
 8001470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001474:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_SPI3_Init+0x64>)
 8001478:	2218      	movs	r2, #24
 800147a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <MX_SPI3_Init+0x64>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_SPI3_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MX_SPI3_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_SPI3_Init+0x64>)
 8001490:	220a      	movs	r2, #10
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_SPI3_Init+0x64>)
 8001496:	f001 fe9b 	bl	80031d0 <HAL_SPI_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80014a0:	f000 f89e 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20002708 	.word	0x20002708
 80014ac:	40003c00 	.word	0x40003c00

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <MX_GPIO_Init+0x120>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a40      	ldr	r2, [pc, #256]	; (80015d0 <MX_GPIO_Init+0x120>)
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b3e      	ldr	r3, [pc, #248]	; (80015d0 <MX_GPIO_Init+0x120>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <MX_GPIO_Init+0x120>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a39      	ldr	r2, [pc, #228]	; (80015d0 <MX_GPIO_Init+0x120>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <MX_GPIO_Init+0x120>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <MX_GPIO_Init+0x120>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a32      	ldr	r2, [pc, #200]	; (80015d0 <MX_GPIO_Init+0x120>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <MX_GPIO_Init+0x120>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <MX_GPIO_Init+0x120>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a2b      	ldr	r2, [pc, #172]	; (80015d0 <MX_GPIO_Init+0x120>)
 8001524:	f043 0308 	orr.w	r3, r3, #8
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_GPIO_Init+0x120>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, D2_Pin|D3_Pin|D4_Pin|D5_Pin
 8001536:	2201      	movs	r2, #1
 8001538:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800153c:	4825      	ldr	r0, [pc, #148]	; (80015d4 <MX_GPIO_Init+0x124>)
 800153e:	f001 f9c9 	bl	80028d4 <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin|D8_Pin|D9_Pin
                          |D10_Pin|D11_Pin|D12_Pin|D13_Pin
                          |D14_Pin|D15_Pin|D0_Pin|D1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001548:	4823      	ldr	r0, [pc, #140]	; (80015d8 <MX_GPIO_Init+0x128>)
 800154a:	f001 f9c3 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RESET_Pin|RD_Pin|WR_Pin|RS_Pin
 800154e:	2201      	movs	r2, #1
 8001550:	21f8      	movs	r1, #248	; 0xf8
 8001552:	4822      	ldr	r0, [pc, #136]	; (80015dc <MX_GPIO_Init+0x12c>)
 8001554:	f001 f9be 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D2_Pin D3_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin D8_Pin D9_Pin
                           D10_Pin D11_Pin D12_Pin D13_Pin
                           D14_Pin D15_Pin D0_Pin D1_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D4_Pin|D5_Pin
 8001558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155c:	617b      	str	r3, [r7, #20]
                          |D6_Pin|D7_Pin|D8_Pin|D9_Pin
                          |D10_Pin|D11_Pin|D12_Pin|D13_Pin
                          |D14_Pin|D15_Pin|D0_Pin|D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4818      	ldr	r0, [pc, #96]	; (80015d4 <MX_GPIO_Init+0x124>)
 8001572:	f000 fffb 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4812      	ldr	r0, [pc, #72]	; (80015d8 <MX_GPIO_Init+0x128>)
 8001590:	f000 ffec 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001594:	2302      	movs	r3, #2
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <MX_GPIO_Init+0x12c>)
 80015a8:	f000 ffe0 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin RD_Pin WR_Pin RS_Pin
                           T_CS_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|RD_Pin|WR_Pin|RS_Pin
 80015ac:	23f8      	movs	r3, #248	; 0xf8
 80015ae:	617b      	str	r3, [r7, #20]
                          |T_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_GPIO_Init+0x12c>)
 80015c4:	f000 ffd2 	bl	800256c <HAL_GPIO_Init>

}
 80015c8:	bf00      	nop
 80015ca:	3728      	adds	r7, #40	; 0x28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40020400 	.word	0x40020400
 80015dc:	40020c00 	.word	0x40020c00

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <Error_Handler+0x8>

080015ea <swap>:
#include "ssd1289.h"
#include "font.h"


void swap(uint16_t *a, uint16_t *b)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
    uint16_t temp = 0x0000;
 80015f4:	2300      	movs	r3, #0
 80015f6:	81fb      	strh	r3, [r7, #14]

    temp = *b;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	81fb      	strh	r3, [r7, #14]
    *b = *a;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	881a      	ldrh	r2, [r3, #0]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	801a      	strh	r2, [r3, #0]
    *a = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	89fa      	ldrh	r2, [r7, #14]
 800160a:	801a      	strh	r2, [r3, #0]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <SSD1289_Write_Com>:

/*Ghui dia chi thanh ghi*/
void SSD1289_Write_Com(uint16_t  DH)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
  RSN;
 8001622:	2200      	movs	r2, #0
 8001624:	2140      	movs	r1, #64	; 0x40
 8001626:	4810      	ldr	r0, [pc, #64]	; (8001668 <SSD1289_Write_Com+0x50>)
 8001628:	f001 f954 	bl	80028d4 <HAL_GPIO_WritePin>
	CSN;
 800162c:	2200      	movs	r2, #0
 800162e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001632:	480e      	ldr	r0, [pc, #56]	; (800166c <SSD1289_Write_Com+0x54>)
 8001634:	f001 f94e 	bl	80028d4 <HAL_GPIO_WritePin>
	GPIOE -> ODR = DH;
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <SSD1289_Write_Com+0x58>)
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	6153      	str	r3, [r2, #20]
	WRN;
 800163e:	2200      	movs	r2, #0
 8001640:	2120      	movs	r1, #32
 8001642:	4809      	ldr	r0, [pc, #36]	; (8001668 <SSD1289_Write_Com+0x50>)
 8001644:	f001 f946 	bl	80028d4 <HAL_GPIO_WritePin>
	WR;
 8001648:	2201      	movs	r2, #1
 800164a:	2120      	movs	r1, #32
 800164c:	4806      	ldr	r0, [pc, #24]	; (8001668 <SSD1289_Write_Com+0x50>)
 800164e:	f001 f941 	bl	80028d4 <HAL_GPIO_WritePin>
	CS;
 8001652:	2201      	movs	r2, #1
 8001654:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <SSD1289_Write_Com+0x54>)
 800165a:	f001 f93b 	bl	80028d4 <HAL_GPIO_WritePin>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40020400 	.word	0x40020400
 8001670:	40021000 	.word	0x40021000

08001674 <SSD1289_Write_Data>:

/*Gui du lieu ghi vao thanh ghi*/
void SSD1289_Write_Data(uint16_t DH)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
  RS;
 800167e:	2201      	movs	r2, #1
 8001680:	2140      	movs	r1, #64	; 0x40
 8001682:	4810      	ldr	r0, [pc, #64]	; (80016c4 <SSD1289_Write_Data+0x50>)
 8001684:	f001 f926 	bl	80028d4 <HAL_GPIO_WritePin>
	CSN;
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800168e:	480e      	ldr	r0, [pc, #56]	; (80016c8 <SSD1289_Write_Data+0x54>)
 8001690:	f001 f920 	bl	80028d4 <HAL_GPIO_WritePin>
	GPIOE -> ODR = DH;
 8001694:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <SSD1289_Write_Data+0x58>)
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	6153      	str	r3, [r2, #20]
	WRN;
 800169a:	2200      	movs	r2, #0
 800169c:	2120      	movs	r1, #32
 800169e:	4809      	ldr	r0, [pc, #36]	; (80016c4 <SSD1289_Write_Data+0x50>)
 80016a0:	f001 f918 	bl	80028d4 <HAL_GPIO_WritePin>
	WR;
 80016a4:	2201      	movs	r2, #1
 80016a6:	2120      	movs	r1, #32
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <SSD1289_Write_Data+0x50>)
 80016aa:	f001 f913 	bl	80028d4 <HAL_GPIO_WritePin>
	CS;
 80016ae:	2201      	movs	r2, #1
 80016b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b4:	4804      	ldr	r0, [pc, #16]	; (80016c8 <SSD1289_Write_Data+0x54>)
 80016b6:	f001 f90d 	bl	80028d4 <HAL_GPIO_WritePin>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40020c00 	.word	0x40020c00
 80016c8:	40020400 	.word	0x40020400
 80016cc:	40021000 	.word	0x40021000

080016d0 <SSD1289_Write_Com_Data>:

/*Gui dong thoi dia chi thanh ghi va du lieu thanh ghi*/
void SSD1289_Write_Com_Data(uint16_t com1,uint16_t dat1)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	80fb      	strh	r3, [r7, #6]
 80016dc:	4613      	mov	r3, r2
 80016de:	80bb      	strh	r3, [r7, #4]
   SSD1289_Write_Com(com1);
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff98 	bl	8001618 <SSD1289_Write_Com>
   SSD1289_Write_Data(dat1);
 80016e8:	88bb      	ldrh	r3, [r7, #4]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ffc2 	bl	8001674 <SSD1289_Write_Data>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <SSD1289_Address_Set>:
	RST;
}

/*Set dia chi cua so*/
void SSD1289_Address_Set(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)	/*Thiet lap vung lam viec cua man hinh*/
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4604      	mov	r4, r0
 8001700:	4608      	mov	r0, r1
 8001702:	4611      	mov	r1, r2
 8001704:	461a      	mov	r2, r3
 8001706:	4623      	mov	r3, r4
 8001708:	80fb      	strh	r3, [r7, #6]
 800170a:	4603      	mov	r3, r0
 800170c:	80bb      	strh	r3, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	807b      	strh	r3, [r7, #2]
 8001712:	4613      	mov	r3, r2
 8001714:	803b      	strh	r3, [r7, #0]
	/*Doi toa do ve toa do mong muon*/
	swap(&x1, &y1);
 8001716:	1d3a      	adds	r2, r7, #4
 8001718:	1dbb      	adds	r3, r7, #6
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff64 	bl	80015ea <swap>
	swap(&x2, &y2);
 8001722:	463a      	mov	r2, r7
 8001724:	1cbb      	adds	r3, r7, #2
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5e 	bl	80015ea <swap>

	SSD1289_Write_Com_Data(0x0044,(x2<<8)+x1);
 800172e:	887b      	ldrh	r3, [r7, #2]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b29a      	uxth	r2, r3
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	4413      	add	r3, r2
 8001738:	b29b      	uxth	r3, r3
 800173a:	4619      	mov	r1, r3
 800173c:	2044      	movs	r0, #68	; 0x44
 800173e:	f7ff ffc7 	bl	80016d0 <SSD1289_Write_Com_Data>
	SSD1289_Write_Com_Data(0x0045, y1);
 8001742:	88bb      	ldrh	r3, [r7, #4]
 8001744:	4619      	mov	r1, r3
 8001746:	2045      	movs	r0, #69	; 0x45
 8001748:	f7ff ffc2 	bl	80016d0 <SSD1289_Write_Com_Data>
	SSD1289_Write_Com_Data(0x0046, y2);
 800174c:	883b      	ldrh	r3, [r7, #0]
 800174e:	4619      	mov	r1, r3
 8001750:	2046      	movs	r0, #70	; 0x46
 8001752:	f7ff ffbd 	bl	80016d0 <SSD1289_Write_Com_Data>
	SSD1289_Write_Com_Data(0x004E, x1);
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	4619      	mov	r1, r3
 800175a:	204e      	movs	r0, #78	; 0x4e
 800175c:	f7ff ffb8 	bl	80016d0 <SSD1289_Write_Com_Data>
	SSD1289_Write_Com_Data(0x004F, y1);
 8001760:	88bb      	ldrh	r3, [r7, #4]
 8001762:	4619      	mov	r1, r3
 8001764:	204f      	movs	r0, #79	; 0x4f
 8001766:	f7ff ffb3 	bl	80016d0 <SSD1289_Write_Com_Data>
	SSD1289_Write_Com(0x0022);
 800176a:	2022      	movs	r0, #34	; 0x22
 800176c:	f7ff ff54 	bl	8001618 <SSD1289_Write_Com>
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bd90      	pop	{r4, r7, pc}

08001778 <SSD1289_Write_Pixel>:

/*Ghi pixel*/
void SSD1289_Write_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
 8001782:	460b      	mov	r3, r1
 8001784:	80bb      	strh	r3, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	807b      	strh	r3, [r7, #2]
  CSN;
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001790:	4810      	ldr	r0, [pc, #64]	; (80017d4 <SSD1289_Write_Pixel+0x5c>)
 8001792:	f001 f89f 	bl	80028d4 <HAL_GPIO_WritePin>

	swap(&x, &y);
 8001796:	1d3a      	adds	r2, r7, #4
 8001798:	1dbb      	adds	r3, r7, #6
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff24 	bl	80015ea <swap>
  SSD1289_Write_Com_Data(0x004E, x);
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	4619      	mov	r1, r3
 80017a6:	204e      	movs	r0, #78	; 0x4e
 80017a8:	f7ff ff92 	bl	80016d0 <SSD1289_Write_Com_Data>
  SSD1289_Write_Com_Data(0x004F, y);
 80017ac:	88bb      	ldrh	r3, [r7, #4]
 80017ae:	4619      	mov	r1, r3
 80017b0:	204f      	movs	r0, #79	; 0x4f
 80017b2:	f7ff ff8d 	bl	80016d0 <SSD1289_Write_Com_Data>
  SSD1289_Write_Com_Data(0x0022, color);
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	4619      	mov	r1, r3
 80017ba:	2022      	movs	r0, #34	; 0x22
 80017bc:	f7ff ff88 	bl	80016d0 <SSD1289_Write_Com_Data>

  CS;
 80017c0:	2201      	movs	r2, #1
 80017c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017c6:	4803      	ldr	r0, [pc, #12]	; (80017d4 <SSD1289_Write_Pixel+0x5c>)
 80017c8:	f001 f884 	bl	80028d4 <HAL_GPIO_WritePin>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40020400 	.word	0x40020400

080017d8 <SSD1289_Fill_Color>:
    SSD1289_Write_Com_Data(0x004F, y_pos);
    SSD1289_Write_Com(0x0022);
}

/*Ve mau*/
void SSD1289_Fill_Color(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){	/*To mau trong khoang da duoc quy dinh*/
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4604      	mov	r4, r0
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4623      	mov	r3, r4
 80017e8:	80fb      	strh	r3, [r7, #6]
 80017ea:	4603      	mov	r3, r0
 80017ec:	80bb      	strh	r3, [r7, #4]
 80017ee:	460b      	mov	r3, r1
 80017f0:	807b      	strh	r3, [r7, #2]
 80017f2:	4613      	mov	r3, r2
 80017f4:	803b      	strh	r3, [r7, #0]
	uint16_t max_index = (x2 - x1 + 1)*(y2 - y1 + 1);
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	3301      	adds	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	8839      	ldrh	r1, [r7, #0]
 8001802:	88bb      	ldrh	r3, [r7, #4]
 8001804:	1acb      	subs	r3, r1, r3
 8001806:	3301      	adds	r3, #1
 8001808:	b29b      	uxth	r3, r3
 800180a:	fb12 f303 	smulbb	r3, r2, r3
 800180e:	81fb      	strh	r3, [r7, #14]
	SSD1289_Address_Set(x1, y1, x2, y2);
 8001810:	883b      	ldrh	r3, [r7, #0]
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	88b9      	ldrh	r1, [r7, #4]
 8001816:	88f8      	ldrh	r0, [r7, #6]
 8001818:	f7ff ff6e 	bl	80016f8 <SSD1289_Address_Set>

	while(max_index){
 800181c:	e006      	b.n	800182c <SSD1289_Fill_Color+0x54>
			SSD1289_Write_Data(color);
 800181e:	8c3b      	ldrh	r3, [r7, #32]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff27 	bl	8001674 <SSD1289_Write_Data>
			max_index--;
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	3b01      	subs	r3, #1
 800182a:	81fb      	strh	r3, [r7, #14]
	while(max_index){
 800182c:	89fb      	ldrh	r3, [r7, #14]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f5      	bne.n	800181e <SSD1289_Fill_Color+0x46>
	}
}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}

0800183c <SSD1289_Write_Pic_Coor>:


void SSD1289_Write_Pic_Coor(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t *pic){
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	4604      	mov	r4, r0
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	461a      	mov	r2, r3
 800184a:	4623      	mov	r3, r4
 800184c:	80fb      	strh	r3, [r7, #6]
 800184e:	4603      	mov	r3, r0
 8001850:	80bb      	strh	r3, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	807b      	strh	r3, [r7, #2]
 8001856:	4613      	mov	r3, r2
 8001858:	803b      	strh	r3, [r7, #0]
	uint16_t index_x = 0, index_y = 0, i = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	81fb      	strh	r3, [r7, #14]
 800185e:	2300      	movs	r3, #0
 8001860:	81bb      	strh	r3, [r7, #12]
 8001862:	2300      	movs	r3, #0
 8001864:	817b      	strh	r3, [r7, #10]
	for(index_y = 0; index_y < width; index_y++){
 8001866:	2300      	movs	r3, #0
 8001868:	81bb      	strh	r3, [r7, #12]
 800186a:	e01f      	b.n	80018ac <SSD1289_Write_Pic_Coor+0x70>
		for(index_x = 0; index_x < length; index_x++){
 800186c:	2300      	movs	r3, #0
 800186e:	81fb      	strh	r3, [r7, #14]
 8001870:	e015      	b.n	800189e <SSD1289_Write_Pic_Coor+0x62>
			SSD1289_Write_Pixel(x + index_x, y + index_y, pic[i]);
 8001872:	88fa      	ldrh	r2, [r7, #6]
 8001874:	89fb      	ldrh	r3, [r7, #14]
 8001876:	4413      	add	r3, r2
 8001878:	b298      	uxth	r0, r3
 800187a:	88ba      	ldrh	r2, [r7, #4]
 800187c:	89bb      	ldrh	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	b299      	uxth	r1, r3
 8001882:	897b      	ldrh	r3, [r7, #10]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	6a3a      	ldr	r2, [r7, #32]
 8001888:	4413      	add	r3, r2
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	f7ff ff73 	bl	8001778 <SSD1289_Write_Pixel>
			i++;
 8001892:	897b      	ldrh	r3, [r7, #10]
 8001894:	3301      	adds	r3, #1
 8001896:	817b      	strh	r3, [r7, #10]
		for(index_x = 0; index_x < length; index_x++){
 8001898:	89fb      	ldrh	r3, [r7, #14]
 800189a:	3301      	adds	r3, #1
 800189c:	81fb      	strh	r3, [r7, #14]
 800189e:	89fa      	ldrh	r2, [r7, #14]
 80018a0:	887b      	ldrh	r3, [r7, #2]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d3e5      	bcc.n	8001872 <SSD1289_Write_Pic_Coor+0x36>
	for(index_y = 0; index_y < width; index_y++){
 80018a6:	89bb      	ldrh	r3, [r7, #12]
 80018a8:	3301      	adds	r3, #1
 80018aa:	81bb      	strh	r3, [r7, #12]
 80018ac:	89ba      	ldrh	r2, [r7, #12]
 80018ae:	883b      	ldrh	r3, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3db      	bcc.n	800186c <SSD1289_Write_Pic_Coor+0x30>
		}
	}
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd90      	pop	{r4, r7, pc}
	...

080018c0 <SSD1289_Print_Char>:
void SSD1289_Print_Char(uint16_t x_pos, uint16_t y_pos, uint16_t font_size, uint16_t color, uint16_t back_color, char ch){
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	4604      	mov	r4, r0
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	4623      	mov	r3, r4
 80018d0:	80fb      	strh	r3, [r7, #6]
 80018d2:	4603      	mov	r3, r0
 80018d4:	80bb      	strh	r3, [r7, #4]
 80018d6:	460b      	mov	r3, r1
 80018d8:	807b      	strh	r3, [r7, #2]
 80018da:	4613      	mov	r3, r2
 80018dc:	803b      	strh	r3, [r7, #0]
	int i = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
	int j = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
	uint16_t y = y_pos;
 80018e6:	88bb      	ldrh	r3, [r7, #4]
 80018e8:	81fb      	strh	r3, [r7, #14]
	uint16_t column = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	81bb      	strh	r3, [r7, #12]
	if(font_size == 0)
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <SSD1289_Print_Char+0x38>
		font_size = 1;
 80018f4:	2301      	movs	r3, #1
 80018f6:	807b      	strh	r3, [r7, #2]
	uint16_t *value = font[(uint16_t)ch-32];
 80018f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018fc:	f1a3 0220 	sub.w	r2, r3, #32
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4a2d      	ldr	r2, [pc, #180]	; (80019c0 <SSD1289_Print_Char+0x100>)
 800190a:	4413      	add	r3, r2
 800190c:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < 5; i++){
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e04c      	b.n	80019ae <SSD1289_Print_Char+0xee>
		column = value[i];
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	4413      	add	r3, r2
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	81bb      	strh	r3, [r7, #12]
		y_pos = y;
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	80bb      	strh	r3, [r7, #4]
		for(j = 0; j < 7; j++){
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	e037      	b.n	800199a <SSD1289_Print_Char+0xda>
			if((column >> j) & 0x0001)
 800192a:	89ba      	ldrh	r2, [r7, #12]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	fa42 f303 	asr.w	r3, r2, r3
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d014      	beq.n	8001964 <SSD1289_Print_Char+0xa4>
				SSD1289_Fill_Color(x_pos, y_pos, (x_pos + font_size - 1), (y_pos +font_size - 1), color);
 800193a:	88fa      	ldrh	r2, [r7, #6]
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	4413      	add	r3, r2
 8001940:	b29b      	uxth	r3, r3
 8001942:	3b01      	subs	r3, #1
 8001944:	b29c      	uxth	r4, r3
 8001946:	88ba      	ldrh	r2, [r7, #4]
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	4413      	add	r3, r2
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	88b9      	ldrh	r1, [r7, #4]
 8001954:	88f8      	ldrh	r0, [r7, #6]
 8001956:	883b      	ldrh	r3, [r7, #0]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	4613      	mov	r3, r2
 800195c:	4622      	mov	r2, r4
 800195e:	f7ff ff3b 	bl	80017d8 <SSD1289_Fill_Color>
 8001962:	e013      	b.n	800198c <SSD1289_Print_Char+0xcc>
			else{
				SSD1289_Fill_Color(x_pos, y_pos, (x_pos + font_size - 1), (y_pos +font_size - 1), back_color);
 8001964:	88fa      	ldrh	r2, [r7, #6]
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	4413      	add	r3, r2
 800196a:	b29b      	uxth	r3, r3
 800196c:	3b01      	subs	r3, #1
 800196e:	b29c      	uxth	r4, r3
 8001970:	88ba      	ldrh	r2, [r7, #4]
 8001972:	887b      	ldrh	r3, [r7, #2]
 8001974:	4413      	add	r3, r2
 8001976:	b29b      	uxth	r3, r3
 8001978:	3b01      	subs	r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	88b9      	ldrh	r1, [r7, #4]
 800197e:	88f8      	ldrh	r0, [r7, #6]
 8001980:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	4613      	mov	r3, r2
 8001986:	4622      	mov	r2, r4
 8001988:	f7ff ff26 	bl	80017d8 <SSD1289_Fill_Color>
			}
			y_pos += font_size;
 800198c:	88ba      	ldrh	r2, [r7, #4]
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	4413      	add	r3, r2
 8001992:	80bb      	strh	r3, [r7, #4]
		for(j = 0; j < 7; j++){
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	3301      	adds	r3, #1
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	2b06      	cmp	r3, #6
 800199e:	ddc4      	ble.n	800192a <SSD1289_Print_Char+0x6a>
		}
		x_pos+= font_size;
 80019a0:	88fa      	ldrh	r2, [r7, #6]
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	4413      	add	r3, r2
 80019a6:	80fb      	strh	r3, [r7, #6]
	for(i = 0; i < 5; i++){
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	ddaf      	ble.n	8001914 <SSD1289_Print_Char+0x54>
	}
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	371c      	adds	r7, #28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd90      	pop	{r4, r7, pc}
 80019be:	bf00      	nop
 80019c0:	200022bc 	.word	0x200022bc

080019c4 <SSD1289_Print_String>:

void SSD1289_Print_String(uint16_t x_pos, uint16_t y_pos, uint16_t dis_char, uint16_t dis_line, uint16_t font_size, uint16_t color, uint16_t back_color, char *str){
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af02      	add	r7, sp, #8
 80019ca:	4604      	mov	r4, r0
 80019cc:	4608      	mov	r0, r1
 80019ce:	4611      	mov	r1, r2
 80019d0:	461a      	mov	r2, r3
 80019d2:	4623      	mov	r3, r4
 80019d4:	80fb      	strh	r3, [r7, #6]
 80019d6:	4603      	mov	r3, r0
 80019d8:	80bb      	strh	r3, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	807b      	strh	r3, [r7, #2]
 80019de:	4613      	mov	r3, r2
 80019e0:	803b      	strh	r3, [r7, #0]
	uint16_t x = x_pos;
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	81fb      	strh	r3, [r7, #14]
	if(str == NULL)
 80019e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d031      	beq.n	8001a50 <SSD1289_Print_String+0x8c>
		return;
	do{
		if(*str == '\n'){
 80019ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b0a      	cmp	r3, #10
 80019f2:	d10f      	bne.n	8001a14 <SSD1289_Print_String+0x50>
			str++;
 80019f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f6:	3301      	adds	r3, #1
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
			y_pos = y_pos +  font_size * 7 + dis_line;
 80019fa:	8c3b      	ldrh	r3, [r7, #32]
 80019fc:	461a      	mov	r2, r3
 80019fe:	00d2      	lsls	r2, r2, #3
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	883b      	ldrh	r3, [r7, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	80bb      	strh	r3, [r7, #4]
			x_pos = x;
 8001a10:	89fb      	ldrh	r3, [r7, #14]
 8001a12:	80fb      	strh	r3, [r7, #6]
		}
		SSD1289_Print_Char(x_pos, y_pos, font_size, color, back_color, *str++);
 8001a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8001a1e:	8c3a      	ldrh	r2, [r7, #32]
 8001a20:	88b9      	ldrh	r1, [r7, #4]
 8001a22:	88f8      	ldrh	r0, [r7, #6]
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	f7ff ff48 	bl	80018c0 <SSD1289_Print_Char>
		x_pos += (font_size *5 + dis_char);
 8001a30:	8c3b      	ldrh	r3, [r7, #32]
 8001a32:	461a      	mov	r2, r3
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	4413      	add	r3, r2
 8001a44:	80fb      	strh	r3, [r7, #6]
	}
	while(*str != '\0');
 8001a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ce      	bne.n	80019ec <SSD1289_Print_String+0x28>
 8001a4e:	e000      	b.n	8001a52 <SSD1289_Print_String+0x8e>
		return;
 8001a50:	bf00      	nop
}
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd90      	pop	{r4, r7, pc}

08001a58 <SSD1289_Draw_V_Line>:
void SSD1289_Print(uint16_t x, uint16_t y, char *string){
	SSD1289_Write_Back_Ground(Black);
	SSD1289_Print_String(x, y, 1, 1, 1, White, Black, string);
}
void SSD1289_Draw_V_Line(uint16_t x1, uint16_t y1, uint16_t y2, uint16_t color)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4604      	mov	r4, r0
 8001a60:	4608      	mov	r0, r1
 8001a62:	4611      	mov	r1, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	4623      	mov	r3, r4
 8001a68:	80fb      	strh	r3, [r7, #6]
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80bb      	strh	r3, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	807b      	strh	r3, [r7, #2]
 8001a72:	4613      	mov	r3, r2
 8001a74:	803b      	strh	r3, [r7, #0]

    if(y1 > y2)
 8001a76:	88ba      	ldrh	r2, [r7, #4]
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d910      	bls.n	8001aa0 <SSD1289_Draw_V_Line+0x48>
    {
       swap(&y1, &y2);
 8001a7e:	1cba      	adds	r2, r7, #2
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fdb0 	bl	80015ea <swap>
    }

    while(y2 > (y1-1))
 8001a8a:	e009      	b.n	8001aa0 <SSD1289_Draw_V_Line+0x48>
    {
        SSD1289_Write_Pixel(x1, y2, color);
 8001a8c:	8879      	ldrh	r1, [r7, #2]
 8001a8e:	883a      	ldrh	r2, [r7, #0]
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fe70 	bl	8001778 <SSD1289_Write_Pixel>
        y2--;
 8001a98:	887b      	ldrh	r3, [r7, #2]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	807b      	strh	r3, [r7, #2]
    while(y2 > (y1-1))
 8001aa0:	88ba      	ldrh	r2, [r7, #4]
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d9f1      	bls.n	8001a8c <SSD1289_Draw_V_Line+0x34>
    }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}

08001ab2 <SSD1289_Write_Back_Ground>:
    }
  }
}

void SSD1289_Write_Back_Ground(uint16_t color)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	80fb      	strh	r3, [r7, #6]
	uint16_t x = 0, y = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	81fb      	strh	r3, [r7, #14]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	81bb      	strh	r3, [r7, #12]
	for(y = 0; y < 240; y++){
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	81bb      	strh	r3, [r7, #12]
 8001ac8:	e012      	b.n	8001af0 <SSD1289_Write_Back_Ground+0x3e>
		for(x = 0; x < 320;  x++){
 8001aca:	2300      	movs	r3, #0
 8001acc:	81fb      	strh	r3, [r7, #14]
 8001ace:	e008      	b.n	8001ae2 <SSD1289_Write_Back_Ground+0x30>
			SSD1289_Write_Pixel(x, y, color);
 8001ad0:	88fa      	ldrh	r2, [r7, #6]
 8001ad2:	89b9      	ldrh	r1, [r7, #12]
 8001ad4:	89fb      	ldrh	r3, [r7, #14]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fe4e 	bl	8001778 <SSD1289_Write_Pixel>
		for(x = 0; x < 320;  x++){
 8001adc:	89fb      	ldrh	r3, [r7, #14]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	81fb      	strh	r3, [r7, #14]
 8001ae2:	89fb      	ldrh	r3, [r7, #14]
 8001ae4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ae8:	d3f2      	bcc.n	8001ad0 <SSD1289_Write_Back_Ground+0x1e>
	for(y = 0; y < 240; y++){
 8001aea:	89bb      	ldrh	r3, [r7, #12]
 8001aec:	3301      	adds	r3, #1
 8001aee:	81bb      	strh	r3, [r7, #12]
 8001af0:	89bb      	ldrh	r3, [r7, #12]
 8001af2:	2bef      	cmp	r3, #239	; 0xef
 8001af4:	d9e9      	bls.n	8001aca <SSD1289_Write_Back_Ground+0x18>
		}
	}
}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <SSD1289_Clear_Screen>:
void SSD1289_Clear_Screen(){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	SSD1289_Write_Back_Ground(White);
 8001b04:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b08:	f7ff ffd3 	bl	8001ab2 <SSD1289_Write_Back_Ground>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <SSD1289_Init>:
void SSD1289_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0

	RST;
 8001b14:	2201      	movs	r2, #1
 8001b16:	2108      	movs	r1, #8
 8001b18:	48ac      	ldr	r0, [pc, #688]	; (8001dcc <SSD1289_Init+0x2bc>)
 8001b1a:	f000 fedb 	bl	80028d4 <HAL_GPIO_WritePin>
  	HAL_Delay(100);
 8001b1e:	2064      	movs	r0, #100	; 0x64
 8001b20:	f000 fc1a 	bl	8002358 <HAL_Delay>
	RSTN;;
 8001b24:	2200      	movs	r2, #0
 8001b26:	2108      	movs	r1, #8
 8001b28:	48a8      	ldr	r0, [pc, #672]	; (8001dcc <SSD1289_Init+0x2bc>)
 8001b2a:	f000 fed3 	bl	80028d4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b2e:	2064      	movs	r0, #100	; 0x64
 8001b30:	f000 fc12 	bl	8002358 <HAL_Delay>
	RST;
 8001b34:	2201      	movs	r2, #1
 8001b36:	2108      	movs	r1, #8
 8001b38:	48a4      	ldr	r0, [pc, #656]	; (8001dcc <SSD1289_Init+0x2bc>)
 8001b3a:	f000 fecb 	bl	80028d4 <HAL_GPIO_WritePin>
	CS;
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b44:	48a2      	ldr	r0, [pc, #648]	; (8001dd0 <SSD1289_Init+0x2c0>)
 8001b46:	f000 fec5 	bl	80028d4 <HAL_GPIO_WritePin>
	RD;
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2110      	movs	r1, #16
 8001b4e:	489f      	ldr	r0, [pc, #636]	; (8001dcc <SSD1289_Init+0x2bc>)
 8001b50:	f000 fec0 	bl	80028d4 <HAL_GPIO_WritePin>
	WR;
 8001b54:	2201      	movs	r2, #1
 8001b56:	2120      	movs	r1, #32
 8001b58:	489c      	ldr	r0, [pc, #624]	; (8001dcc <SSD1289_Init+0x2bc>)
 8001b5a:	f000 febb 	bl	80028d4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b5e:	2064      	movs	r0, #100	; 0x64
 8001b60:	f000 fbfa 	bl	8002358 <HAL_Delay>

    SSD1289_Write_Com_Data(0x0000,0x0001);    HAL_Delay(1);
 8001b64:	2101      	movs	r1, #1
 8001b66:	2000      	movs	r0, #0
 8001b68:	f7ff fdb2 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f000 fbf3 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0003,0xA8A4);    HAL_Delay(1);
 8001b72:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8001b76:	2003      	movs	r0, #3
 8001b78:	f7ff fdaa 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f000 fbeb 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x000C,0x0000);    HAL_Delay(1);
 8001b82:	2100      	movs	r1, #0
 8001b84:	200c      	movs	r0, #12
 8001b86:	f7ff fda3 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f000 fbe4 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x000D,0x080C);    HAL_Delay(1);
 8001b90:	f640 010c 	movw	r1, #2060	; 0x80c
 8001b94:	200d      	movs	r0, #13
 8001b96:	f7ff fd9b 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f000 fbdc 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x000E,0x2B00);    HAL_Delay(1);
 8001ba0:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8001ba4:	200e      	movs	r0, #14
 8001ba6:	f7ff fd93 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001baa:	2001      	movs	r0, #1
 8001bac:	f000 fbd4 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x001E,0x00B0);    HAL_Delay(1);
 8001bb0:	21b0      	movs	r1, #176	; 0xb0
 8001bb2:	201e      	movs	r0, #30
 8001bb4:	f7ff fd8c 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f000 fbcd 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0001,0x293F);    HAL_Delay(1);
 8001bbe:	f642 113f 	movw	r1, #10559	; 0x293f
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f7ff fd84 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f000 fbc5 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0002,0x0600);    HAL_Delay(1);
 8001bce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	f7ff fd7c 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f000 fbbd 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0010,0x0000);    HAL_Delay(1);
 8001bde:	2100      	movs	r1, #0
 8001be0:	2010      	movs	r0, #16
 8001be2:	f7ff fd75 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001be6:	2001      	movs	r0, #1
 8001be8:	f000 fbb6 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0011,0x6070);    HAL_Delay(1);
 8001bec:	f246 0170 	movw	r1, #24688	; 0x6070
 8001bf0:	2011      	movs	r0, #17
 8001bf2:	f7ff fd6d 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f000 fbae 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0005,0x0000);    HAL_Delay(1);
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2005      	movs	r0, #5
 8001c00:	f7ff fd66 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001c04:	2001      	movs	r0, #1
 8001c06:	f000 fba7 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0006,0x0000);    HAL_Delay(1);
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2006      	movs	r0, #6
 8001c0e:	f7ff fd5f 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001c12:	2001      	movs	r0, #1
 8001c14:	f000 fba0 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0016,0xEF1C);    HAL_Delay(1);
 8001c18:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8001c1c:	2016      	movs	r0, #22
 8001c1e:	f7ff fd57 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001c22:	2001      	movs	r0, #1
 8001c24:	f000 fb98 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0017,0x0003);    HAL_Delay(1);
 8001c28:	2103      	movs	r1, #3
 8001c2a:	2017      	movs	r0, #23
 8001c2c:	f7ff fd50 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001c30:	2001      	movs	r0, #1
 8001c32:	f000 fb91 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0007,0x0233);    HAL_Delay(1);
 8001c36:	f240 2133 	movw	r1, #563	; 0x233
 8001c3a:	2007      	movs	r0, #7
 8001c3c:	f7ff fd48 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001c40:	2001      	movs	r0, #1
 8001c42:	f000 fb89 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x000B,0x0000);    HAL_Delay(1);
 8001c46:	2100      	movs	r1, #0
 8001c48:	200b      	movs	r0, #11
 8001c4a:	f7ff fd41 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f000 fb82 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x000F,0x0000);    HAL_Delay(1);
 8001c54:	2100      	movs	r1, #0
 8001c56:	200f      	movs	r0, #15
 8001c58:	f7ff fd3a 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f000 fb7b 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0041,0x0000);    HAL_Delay(1);
 8001c62:	2100      	movs	r1, #0
 8001c64:	2041      	movs	r0, #65	; 0x41
 8001c66:	f7ff fd33 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f000 fb74 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0042,0x0000);    HAL_Delay(1);
 8001c70:	2100      	movs	r1, #0
 8001c72:	2042      	movs	r0, #66	; 0x42
 8001c74:	f7ff fd2c 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f000 fb6d 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0048,0x0000);    HAL_Delay(1);
 8001c7e:	2100      	movs	r1, #0
 8001c80:	2048      	movs	r0, #72	; 0x48
 8001c82:	f7ff fd25 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001c86:	2001      	movs	r0, #1
 8001c88:	f000 fb66 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0049,0x013F);    HAL_Delay(1);
 8001c8c:	f240 113f 	movw	r1, #319	; 0x13f
 8001c90:	2049      	movs	r0, #73	; 0x49
 8001c92:	f7ff fd1d 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001c96:	2001      	movs	r0, #1
 8001c98:	f000 fb5e 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x004A,0x0000);    HAL_Delay(1);
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	204a      	movs	r0, #74	; 0x4a
 8001ca0:	f7ff fd16 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f000 fb57 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x004B,0x0000);    HAL_Delay(1);
 8001caa:	2100      	movs	r1, #0
 8001cac:	204b      	movs	r0, #75	; 0x4b
 8001cae:	f7ff fd0f 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f000 fb50 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0044,0xEF00);    HAL_Delay(1);
 8001cb8:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8001cbc:	2044      	movs	r0, #68	; 0x44
 8001cbe:	f7ff fd07 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f000 fb48 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0045,0x0000);    HAL_Delay(1);
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2045      	movs	r0, #69	; 0x45
 8001ccc:	f7ff fd00 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f000 fb41 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0046,0x013F);    HAL_Delay(1);
 8001cd6:	f240 113f 	movw	r1, #319	; 0x13f
 8001cda:	2046      	movs	r0, #70	; 0x46
 8001cdc:	f7ff fcf8 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f000 fb39 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0030,0x0707);    HAL_Delay(1);
 8001ce6:	f240 7107 	movw	r1, #1799	; 0x707
 8001cea:	2030      	movs	r0, #48	; 0x30
 8001cec:	f7ff fcf0 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f000 fb31 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0031,0x0204);    HAL_Delay(1);
 8001cf6:	f44f 7101 	mov.w	r1, #516	; 0x204
 8001cfa:	2031      	movs	r0, #49	; 0x31
 8001cfc:	f7ff fce8 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001d00:	2001      	movs	r0, #1
 8001d02:	f000 fb29 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0032,0x0204);    HAL_Delay(1);
 8001d06:	f44f 7101 	mov.w	r1, #516	; 0x204
 8001d0a:	2032      	movs	r0, #50	; 0x32
 8001d0c:	f7ff fce0 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001d10:	2001      	movs	r0, #1
 8001d12:	f000 fb21 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0033,0x0502);    HAL_Delay(1);
 8001d16:	f240 5102 	movw	r1, #1282	; 0x502
 8001d1a:	2033      	movs	r0, #51	; 0x33
 8001d1c:	f7ff fcd8 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001d20:	2001      	movs	r0, #1
 8001d22:	f000 fb19 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0034,0x0507);    HAL_Delay(1);
 8001d26:	f240 5107 	movw	r1, #1287	; 0x507
 8001d2a:	2034      	movs	r0, #52	; 0x34
 8001d2c:	f7ff fcd0 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001d30:	2001      	movs	r0, #1
 8001d32:	f000 fb11 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0035,0x0204);    HAL_Delay(1);
 8001d36:	f44f 7101 	mov.w	r1, #516	; 0x204
 8001d3a:	2035      	movs	r0, #53	; 0x35
 8001d3c:	f7ff fcc8 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001d40:	2001      	movs	r0, #1
 8001d42:	f000 fb09 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0036,0x0204);    HAL_Delay(1);
 8001d46:	f44f 7101 	mov.w	r1, #516	; 0x204
 8001d4a:	2036      	movs	r0, #54	; 0x36
 8001d4c:	f7ff fcc0 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001d50:	2001      	movs	r0, #1
 8001d52:	f000 fb01 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0037,0x0502);    HAL_Delay(1);
 8001d56:	f240 5102 	movw	r1, #1282	; 0x502
 8001d5a:	2037      	movs	r0, #55	; 0x37
 8001d5c:	f7ff fcb8 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001d60:	2001      	movs	r0, #1
 8001d62:	f000 faf9 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x003A,0x0302);    HAL_Delay(1);
 8001d66:	f240 3102 	movw	r1, #770	; 0x302
 8001d6a:	203a      	movs	r0, #58	; 0x3a
 8001d6c:	f7ff fcb0 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001d70:	2001      	movs	r0, #1
 8001d72:	f000 faf1 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x003B,0x0302);    HAL_Delay(1);
 8001d76:	f240 3102 	movw	r1, #770	; 0x302
 8001d7a:	203b      	movs	r0, #59	; 0x3b
 8001d7c:	f7ff fca8 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001d80:	2001      	movs	r0, #1
 8001d82:	f000 fae9 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0023,0x0000);    HAL_Delay(1);
 8001d86:	2100      	movs	r1, #0
 8001d88:	2023      	movs	r0, #35	; 0x23
 8001d8a:	f7ff fca1 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f000 fae2 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0024,0x0000);    HAL_Delay(1);
 8001d94:	2100      	movs	r1, #0
 8001d96:	2024      	movs	r0, #36	; 0x24
 8001d98:	f7ff fc9a 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f000 fadb 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x0025,0x8000);    HAL_Delay(1);
 8001da2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001da6:	2025      	movs	r0, #37	; 0x25
 8001da8:	f7ff fc92 	bl	80016d0 <SSD1289_Write_Com_Data>
 8001dac:	2001      	movs	r0, #1
 8001dae:	f000 fad3 	bl	8002358 <HAL_Delay>
    SSD1289_Write_Com_Data(0x004f,0);
 8001db2:	2100      	movs	r1, #0
 8001db4:	204f      	movs	r0, #79	; 0x4f
 8001db6:	f7ff fc8b 	bl	80016d0 <SSD1289_Write_Com_Data>
    SSD1289_Write_Com_Data(0x004e,0);
 8001dba:	2100      	movs	r1, #0
 8001dbc:	204e      	movs	r0, #78	; 0x4e
 8001dbe:	f7ff fc87 	bl	80016d0 <SSD1289_Write_Com_Data>
	SSD1289_Write_Com(0x0022);
 8001dc2:	2022      	movs	r0, #34	; 0x22
 8001dc4:	f7ff fc28 	bl	8001618 <SSD1289_Write_Com>
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	40020400 	.word	0x40020400

08001dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_MspInit+0x4c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <HAL_MspInit+0x4c>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_MspInit+0x4c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_MspInit+0x4c>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_MspInit+0x4c>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_MspInit+0x4c>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e12:	2007      	movs	r0, #7
 8001e14:	f000 fb76 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_SPI_MspInit+0x84>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d12b      	bne.n	8001e9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e7e:	2338      	movs	r3, #56	; 0x38
 8001e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e8e:	2306      	movs	r3, #6
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <HAL_SPI_MspInit+0x8c>)
 8001e9a:	f000 fb67 	bl	800256c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	; 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40003c00 	.word	0x40003c00
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020400 	.word	0x40020400

08001eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <NMI_Handler+0x4>

08001eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <HardFault_Handler+0x4>

08001ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <MemManage_Handler+0x4>

08001ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eca:	e7fe      	b.n	8001eca <BusFault_Handler+0x4>

08001ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <UsageFault_Handler+0x4>

08001ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f00:	f000 fa0a 	bl	8002318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
	return 1;
 8001f0c:	2301      	movs	r3, #1
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <_kill>:

int _kill(int pid, int sig)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f22:	f001 fd87 	bl	8003a34 <__errno>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2216      	movs	r2, #22
 8001f2a:	601a      	str	r2, [r3, #0]
	return -1;
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_exit>:

void _exit (int status)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ffe7 	bl	8001f18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f4a:	e7fe      	b.n	8001f4a <_exit+0x12>

08001f4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	e00a      	b.n	8001f74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f5e:	f3af 8000 	nop.w
 8001f62:	4601      	mov	r1, r0
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	60ba      	str	r2, [r7, #8]
 8001f6a:	b2ca      	uxtb	r2, r1
 8001f6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3301      	adds	r3, #1
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	dbf0      	blt.n	8001f5e <_read+0x12>
	}

return len;
 8001f7c:	687b      	ldr	r3, [r7, #4]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	e009      	b.n	8001fac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	60ba      	str	r2, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dbf1      	blt.n	8001f98 <_write+0x12>
	}
	return len;
 8001fb4:	687b      	ldr	r3, [r7, #4]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_close>:

int _close(int file)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
	return -1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe6:	605a      	str	r2, [r3, #4]
	return 0;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <_isatty>:

int _isatty(int file)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
	return 1;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
	return 0;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002030:	4a14      	ldr	r2, [pc, #80]	; (8002084 <_sbrk+0x5c>)
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <_sbrk+0x60>)
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <_sbrk+0x64>)
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <_sbrk+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	429a      	cmp	r2, r3
 8002056:	d207      	bcs.n	8002068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002058:	f001 fcec 	bl	8003a34 <__errno>
 800205c:	4603      	mov	r3, r0
 800205e:	220c      	movs	r2, #12
 8002060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	e009      	b.n	800207c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <_sbrk+0x64>)
 8002078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207a:	68fb      	ldr	r3, [r7, #12]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20020000 	.word	0x20020000
 8002088:	00000400 	.word	0x00000400
 800208c:	20002790 	.word	0x20002790
 8002090:	200027b0 	.word	0x200027b0

08002094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <SystemInit+0x20>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <SystemInit+0x20>)
 80020a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <Read_IRQ>:

extern SPI_HandleTypeDef hspi3;
volatile uint8_t receive_data = 0;
volatile uint8_t send_cmd;

uint8_t Read_IRQ(){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 80020bc:	2102      	movs	r1, #2
 80020be:	4803      	ldr	r0, [pc, #12]	; (80020cc <Read_IRQ+0x14>)
 80020c0:	f000 fbf0 	bl	80028a4 <HAL_GPIO_ReadPin>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40020c00 	.word	0x40020c00

080020d0 <XPT2046_Read>:

uint16_t XPT2046_Read(uint8_t cmd){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
	uint16_t coor;

	T_CSN;
 80020da:	2200      	movs	r2, #0
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	4820      	ldr	r0, [pc, #128]	; (8002160 <XPT2046_Read+0x90>)
 80020e0:	f000 fbf8 	bl	80028d4 <HAL_GPIO_WritePin>
	send_cmd = cmd;
 80020e4:	4a1f      	ldr	r2, [pc, #124]	; (8002164 <XPT2046_Read+0x94>)
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	7013      	strb	r3, [r2, #0]
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &send_cmd, 1, 1000);
 80020ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ee:	2201      	movs	r2, #1
 80020f0:	491c      	ldr	r1, [pc, #112]	; (8002164 <XPT2046_Read+0x94>)
 80020f2:	481d      	ldr	r0, [pc, #116]	; (8002168 <XPT2046_Read+0x98>)
 80020f4:	f001 f8f5 	bl	80032e2 <HAL_SPI_Transmit>
	send_cmd = 0x00;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <XPT2046_Read+0x94>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) &send_cmd, (uint8_t*) &receive_data, 1, 1000);
 80020fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2301      	movs	r3, #1
 8002106:	4a19      	ldr	r2, [pc, #100]	; (800216c <XPT2046_Read+0x9c>)
 8002108:	4916      	ldr	r1, [pc, #88]	; (8002164 <XPT2046_Read+0x94>)
 800210a:	4817      	ldr	r0, [pc, #92]	; (8002168 <XPT2046_Read+0x98>)
 800210c:	f001 fa25 	bl	800355a <HAL_SPI_TransmitReceive>
	coor = (uint16_t) receive_data;
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <XPT2046_Read+0x9c>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	81fb      	strh	r3, [r7, #14]
	coor = coor << 8;
 8002118:	89fb      	ldrh	r3, [r7, #14]
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	81fb      	strh	r3, [r7, #14]
	send_cmd = 0x00;
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <XPT2046_Read+0x94>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) &send_cmd, (uint8_t*) &receive_data, 1, 1000);
 8002124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2301      	movs	r3, #1
 800212c:	4a0f      	ldr	r2, [pc, #60]	; (800216c <XPT2046_Read+0x9c>)
 800212e:	490d      	ldr	r1, [pc, #52]	; (8002164 <XPT2046_Read+0x94>)
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <XPT2046_Read+0x98>)
 8002132:	f001 fa12 	bl	800355a <HAL_SPI_TransmitReceive>
	coor = coor | (uint16_t) receive_data;
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <XPT2046_Read+0x9c>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	b29a      	uxth	r2, r3
 800213e:	89fb      	ldrh	r3, [r7, #14]
 8002140:	4313      	orrs	r3, r2
 8002142:	81fb      	strh	r3, [r7, #14]
	coor = coor >> 3;
 8002144:	89fb      	ldrh	r3, [r7, #14]
 8002146:	08db      	lsrs	r3, r3, #3
 8002148:	81fb      	strh	r3, [r7, #14]
	T_CS;
 800214a:	2201      	movs	r2, #1
 800214c:	2180      	movs	r1, #128	; 0x80
 800214e:	4804      	ldr	r0, [pc, #16]	; (8002160 <XPT2046_Read+0x90>)
 8002150:	f000 fbc0 	bl	80028d4 <HAL_GPIO_WritePin>

	return coor;
 8002154:	89fb      	ldrh	r3, [r7, #14]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40020c00 	.word	0x40020c00
 8002164:	20002795 	.word	0x20002795
 8002168:	20002708 	.word	0x20002708
 800216c:	20002794 	.word	0x20002794

08002170 <XPT2046_Calibrate>:

/*sel = 0: Tinh toa do x
  sel != 0: Tinh toa do y
	coor: toa do nhan duoc*/
uint16_t  XPT2046_Calibrate(uint16_t coor, uint16_t r){
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	460a      	mov	r2, r1
 800217a:	80fb      	strh	r3, [r7, #6]
 800217c:	4613      	mov	r3, r2
 800217e:	80bb      	strh	r3, [r7, #4]
	uint16_t temp = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	81fb      	strh	r3, [r7, #14]

	if(r == 1){
 8002184:	88bb      	ldrh	r3, [r7, #4]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d11c      	bne.n	80021c4 <XPT2046_Calibrate+0x54>
		temp = (uint16_t) (LCD_WID * ((float)(coor - X_T_MIN)/T_WIDTH));
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	f5a3 73eb 	sub.w	r3, r3, #470	; 0x1d6
 8002190:	ee07 3a90 	vmov	s15, r3
 8002194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002198:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002218 <XPT2046_Calibrate+0xa8>
 800219c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021a0:	ee16 0a90 	vmov	r0, s13
 80021a4:	f7fe faf2 	bl	800078c <__aeabi_f2d>
 80021a8:	a317      	add	r3, pc, #92	; (adr r3, 8002208 <XPT2046_Calibrate+0x98>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe f85f 	bl	8000270 <__aeabi_dmul>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7fe fb3f 	bl	800083c <__aeabi_d2uiz>
 80021be:	4603      	mov	r3, r0
 80021c0:	81fb      	strh	r3, [r7, #14]
 80021c2:	e01b      	b.n	80021fc <XPT2046_Calibrate+0x8c>
	}
	else{
		temp = (uint16_t) (LCD_HEI * ((float)(coor - Y_T_MIN)/T_HEIGH));
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	f5a3 73eb 	sub.w	r3, r3, #470	; 0x1d6
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800221c <XPT2046_Calibrate+0xac>
 80021d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021da:	ee16 0a90 	vmov	r0, s13
 80021de:	f7fe fad5 	bl	800078c <__aeabi_f2d>
 80021e2:	a30b      	add	r3, pc, #44	; (adr r3, 8002210 <XPT2046_Calibrate+0xa0>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe f842 	bl	8000270 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	f7fe fb22 	bl	800083c <__aeabi_d2uiz>
 80021f8:	4603      	mov	r3, r0
 80021fa:	81fb      	strh	r3, [r7, #14]
	}

	return temp;
 80021fc:	89fb      	ldrh	r3, [r7, #14]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	00000000 	.word	0x00000000
 800220c:	4073f000 	.word	0x4073f000
 8002210:	00000000 	.word	0x00000000
 8002214:	406de000 	.word	0x406de000
 8002218:	4549e000 	.word	0x4549e000
 800221c:	453ea000 	.word	0x453ea000

08002220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002258 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002226:	490e      	ldr	r1, [pc, #56]	; (8002260 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800223c:	4c0b      	ldr	r4, [pc, #44]	; (800226c <LoopFillZerobss+0x26>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800224a:	f7ff ff23 	bl	8002094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800224e:	f001 fbf7 	bl	8003a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002252:	f7fe fc95 	bl	8000b80 <main>
  bx  lr    
 8002256:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	200026ec 	.word	0x200026ec
  ldr r2, =_sidata
 8002264:	08004cd8 	.word	0x08004cd8
  ldr r2, =_sbss
 8002268:	200026ec 	.word	0x200026ec
  ldr r4, =_ebss
 800226c:	200027ac 	.word	0x200027ac

08002270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC_IRQHandler>
	...

08002274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <HAL_Init+0x40>)
 800227e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_Init+0x40>)
 800228a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800228e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_Init+0x40>)
 8002296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229c:	2003      	movs	r0, #3
 800229e:	f000 f931 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f000 f808 	bl	80022b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a8:	f7ff fd94 	bl	8001dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023c00 	.word	0x40023c00

080022b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_InitTick+0x54>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_InitTick+0x58>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f93b 	bl	8002552 <HAL_SYSTICK_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00e      	b.n	8002304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0f      	cmp	r3, #15
 80022ea:	d80a      	bhi.n	8002302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ec:	2200      	movs	r2, #0
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f000 f911 	bl	800251a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f8:	4a06      	ldr	r2, [pc, #24]	; (8002314 <HAL_InitTick+0x5c>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	2000267c 	.word	0x2000267c
 8002310:	20002684 	.word	0x20002684
 8002314:	20002680 	.word	0x20002680

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_IncTick+0x20>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x24>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <HAL_IncTick+0x24>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20002684 	.word	0x20002684
 800233c:	20002798 	.word	0x20002798

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_GetTick+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20002798 	.word	0x20002798

08002358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff ffee 	bl	8002340 <HAL_GetTick>
 8002364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d005      	beq.n	800237e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_Delay+0x44>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800237e:	bf00      	nop
 8002380:	f7ff ffde 	bl	8002340 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d8f7      	bhi.n	8002380 <HAL_Delay+0x28>
  {
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20002684 	.word	0x20002684

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f7ff ff8e 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff47 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800252c:	f7ff ff5c 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 8002530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff8e 	bl	8002458 <NVIC_EncodePriority>
 800253c:	4602      	mov	r2, r0
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff5d 	bl	8002404 <__NVIC_SetPriority>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffb0 	bl	80024c0 <SysTick_Config>
 8002560:	4603      	mov	r3, r0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	e16b      	b.n	8002860 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002588:	2201      	movs	r2, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	f040 815a 	bne.w	800285a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d005      	beq.n	80025be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d130      	bne.n	8002620 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f4:	2201      	movs	r2, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 0201 	and.w	r2, r3, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b03      	cmp	r3, #3
 800262a:	d017      	beq.n	800265c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d123      	bne.n	80026b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	08da      	lsrs	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3208      	adds	r2, #8
 8002670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	220f      	movs	r2, #15
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	08da      	lsrs	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3208      	adds	r2, #8
 80026aa:	69b9      	ldr	r1, [r7, #24]
 80026ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0203 	and.w	r2, r3, #3
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80b4 	beq.w	800285a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	4b60      	ldr	r3, [pc, #384]	; (8002878 <HAL_GPIO_Init+0x30c>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	4a5f      	ldr	r2, [pc, #380]	; (8002878 <HAL_GPIO_Init+0x30c>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	4b5d      	ldr	r3, [pc, #372]	; (8002878 <HAL_GPIO_Init+0x30c>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800270e:	4a5b      	ldr	r2, [pc, #364]	; (800287c <HAL_GPIO_Init+0x310>)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3302      	adds	r3, #2
 8002716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	220f      	movs	r2, #15
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a52      	ldr	r2, [pc, #328]	; (8002880 <HAL_GPIO_Init+0x314>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d02b      	beq.n	8002792 <HAL_GPIO_Init+0x226>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a51      	ldr	r2, [pc, #324]	; (8002884 <HAL_GPIO_Init+0x318>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d025      	beq.n	800278e <HAL_GPIO_Init+0x222>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a50      	ldr	r2, [pc, #320]	; (8002888 <HAL_GPIO_Init+0x31c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01f      	beq.n	800278a <HAL_GPIO_Init+0x21e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4f      	ldr	r2, [pc, #316]	; (800288c <HAL_GPIO_Init+0x320>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d019      	beq.n	8002786 <HAL_GPIO_Init+0x21a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4e      	ldr	r2, [pc, #312]	; (8002890 <HAL_GPIO_Init+0x324>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d013      	beq.n	8002782 <HAL_GPIO_Init+0x216>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4d      	ldr	r2, [pc, #308]	; (8002894 <HAL_GPIO_Init+0x328>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00d      	beq.n	800277e <HAL_GPIO_Init+0x212>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4c      	ldr	r2, [pc, #304]	; (8002898 <HAL_GPIO_Init+0x32c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <HAL_GPIO_Init+0x20e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4b      	ldr	r2, [pc, #300]	; (800289c <HAL_GPIO_Init+0x330>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d101      	bne.n	8002776 <HAL_GPIO_Init+0x20a>
 8002772:	2307      	movs	r3, #7
 8002774:	e00e      	b.n	8002794 <HAL_GPIO_Init+0x228>
 8002776:	2308      	movs	r3, #8
 8002778:	e00c      	b.n	8002794 <HAL_GPIO_Init+0x228>
 800277a:	2306      	movs	r3, #6
 800277c:	e00a      	b.n	8002794 <HAL_GPIO_Init+0x228>
 800277e:	2305      	movs	r3, #5
 8002780:	e008      	b.n	8002794 <HAL_GPIO_Init+0x228>
 8002782:	2304      	movs	r3, #4
 8002784:	e006      	b.n	8002794 <HAL_GPIO_Init+0x228>
 8002786:	2303      	movs	r3, #3
 8002788:	e004      	b.n	8002794 <HAL_GPIO_Init+0x228>
 800278a:	2302      	movs	r3, #2
 800278c:	e002      	b.n	8002794 <HAL_GPIO_Init+0x228>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_GPIO_Init+0x228>
 8002792:	2300      	movs	r3, #0
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	f002 0203 	and.w	r2, r2, #3
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	4093      	lsls	r3, r2
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a4:	4935      	ldr	r1, [pc, #212]	; (800287c <HAL_GPIO_Init+0x310>)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b2:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_GPIO_Init+0x334>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d6:	4a32      	ldr	r2, [pc, #200]	; (80028a0 <HAL_GPIO_Init+0x334>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <HAL_GPIO_Init+0x334>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002800:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <HAL_GPIO_Init+0x334>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <HAL_GPIO_Init+0x334>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800282a:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <HAL_GPIO_Init+0x334>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_GPIO_Init+0x334>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002854:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <HAL_GPIO_Init+0x334>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3301      	adds	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b0f      	cmp	r3, #15
 8002864:	f67f ae90 	bls.w	8002588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3724      	adds	r7, #36	; 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40013800 	.word	0x40013800
 8002880:	40020000 	.word	0x40020000
 8002884:	40020400 	.word	0x40020400
 8002888:	40020800 	.word	0x40020800
 800288c:	40020c00 	.word	0x40020c00
 8002890:	40021000 	.word	0x40021000
 8002894:	40021400 	.word	0x40021400
 8002898:	40021800 	.word	0x40021800
 800289c:	40021c00 	.word	0x40021c00
 80028a0:	40013c00 	.word	0x40013c00

080028a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	e001      	b.n	80028c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
 80028e0:	4613      	mov	r3, r2
 80028e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e4:	787b      	ldrb	r3, [r7, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028f0:	e003      	b.n	80028fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028f2:	887b      	ldrh	r3, [r7, #2]
 80028f4:	041a      	lsls	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	619a      	str	r2, [r3, #24]
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e267      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d075      	beq.n	8002a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002926:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d00c      	beq.n	800294c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4b85      	ldr	r3, [pc, #532]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800293a:	2b08      	cmp	r3, #8
 800293c:	d112      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b82      	ldr	r3, [pc, #520]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b7e      	ldr	r3, [pc, #504]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x108>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d157      	bne.n	8002a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e242      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x74>
 800296e:	4b76      	ldr	r3, [pc, #472]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a75      	ldr	r2, [pc, #468]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x98>
 8002986:	4b70      	ldr	r3, [pc, #448]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6f      	ldr	r2, [pc, #444]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6c      	ldr	r2, [pc, #432]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 80029a0:	4b69      	ldr	r3, [pc, #420]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a68      	ldr	r2, [pc, #416]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b66      	ldr	r3, [pc, #408]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a65      	ldr	r2, [pc, #404]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7ff fcbe 	bl	8002340 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff fcba 	bl	8002340 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e207      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b5b      	ldr	r3, [pc, #364]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xc0>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7ff fcaa 	bl	8002340 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7ff fca6 	bl	8002340 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1f3      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0xe8>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d11c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b44      	ldr	r3, [pc, #272]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1c7      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4937      	ldr	r1, [pc, #220]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a78:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7ff fc5f 	bl	8002340 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a86:	f7ff fc5b 	bl	8002340 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1a8      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4925      	ldr	r1, [pc, #148]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7ff fc3e 	bl	8002340 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7ff fc3a 	bl	8002340 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e187      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d036      	beq.n	8002b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d016      	beq.n	8002b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7ff fc1e 	bl	8002340 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b08:	f7ff fc1a 	bl	8002340 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e167      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x200>
 8002b26:	e01b      	b.n	8002b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2e:	f7ff fc07 	bl	8002340 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	e00e      	b.n	8002b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b36:	f7ff fc03 	bl	8002340 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d907      	bls.n	8002b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e150      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	42470000 	.word	0x42470000
 8002b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	4b88      	ldr	r3, [pc, #544]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ea      	bne.n	8002b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8097 	beq.w	8002c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4b81      	ldr	r3, [pc, #516]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b7d      	ldr	r3, [pc, #500]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a7c      	ldr	r2, [pc, #496]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b77      	ldr	r3, [pc, #476]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d118      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002baa:	4b74      	ldr	r3, [pc, #464]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a73      	ldr	r2, [pc, #460]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb6:	f7ff fbc3 	bl	8002340 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbe:	f7ff fbbf 	bl	8002340 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e10c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x2ea>
 8002be4:	4b64      	ldr	r3, [pc, #400]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4a63      	ldr	r2, [pc, #396]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x30c>
 8002bfa:	4b5f      	ldr	r3, [pc, #380]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a5e      	ldr	r2, [pc, #376]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
 8002c06:	4b5c      	ldr	r3, [pc, #368]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a5b      	ldr	r2, [pc, #364]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002c14:	4b58      	ldr	r3, [pc, #352]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	4a57      	ldr	r2, [pc, #348]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c20:	4b55      	ldr	r3, [pc, #340]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a54      	ldr	r2, [pc, #336]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 0304 	bic.w	r3, r3, #4
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7ff fb84 	bl	8002340 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7ff fb80 	bl	8002340 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0cb      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	4b49      	ldr	r3, [pc, #292]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ee      	beq.n	8002c3c <HAL_RCC_OscConfig+0x334>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7ff fb6e 	bl	8002340 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7ff fb6a 	bl	8002340 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0b5      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ee      	bne.n	8002c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	4a38      	ldr	r2, [pc, #224]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a1 	beq.w	8002de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ca6:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d05c      	beq.n	8002d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d141      	bne.n	8002d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	4b31      	ldr	r3, [pc, #196]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7ff fb3e 	bl	8002340 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7ff fb3a 	bl	8002340 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e087      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	019b      	lsls	r3, r3, #6
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	491b      	ldr	r1, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7ff fb13 	bl	8002340 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7ff fb0f 	bl	8002340 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e05c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x416>
 8002d3c:	e054      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7ff fafc 	bl	8002340 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7ff faf8 	bl	8002340 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e045      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x444>
 8002d6a:	e03d      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e038      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x4ec>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d028      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d121      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11a      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d111      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800

08002df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0cc      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b68      	ldr	r3, [pc, #416]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d90c      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b65      	ldr	r3, [pc, #404]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b63      	ldr	r3, [pc, #396]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0b8      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e64:	4b53      	ldr	r3, [pc, #332]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a52      	ldr	r2, [pc, #328]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	494d      	ldr	r1, [pc, #308]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d044      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d119      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e07f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb6:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e06f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e067      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ed6:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f023 0203 	bic.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4934      	ldr	r1, [pc, #208]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee8:	f7ff fa2a 	bl	8002340 <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef0:	f7ff fa26 	bl	8002340 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e04f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 020c 	and.w	r2, r3, #12
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d1eb      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d20c      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e032      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4916      	ldr	r1, [pc, #88]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f7e:	f000 f821 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	490a      	ldr	r1, [pc, #40]	; (8002fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff f98a 	bl	80022b8 <HAL_InitTick>

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023c00 	.word	0x40023c00
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	08004b70 	.word	0x08004b70
 8002fbc:	2000267c 	.word	0x2000267c
 8002fc0:	20002680 	.word	0x20002680

08002fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc8:	b094      	sub	sp, #80	; 0x50
 8002fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fdc:	4b79      	ldr	r3, [pc, #484]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d00d      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x40>
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	f200 80e1 	bhi.w	80031b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ff6:	e0db      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b73      	ldr	r3, [pc, #460]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ffa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ffc:	e0db      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ffe:	4b73      	ldr	r3, [pc, #460]	; (80031cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003000:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003002:	e0d8      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003004:	4b6f      	ldr	r3, [pc, #444]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800300c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800300e:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d063      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301a:	4b6a      	ldr	r3, [pc, #424]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	2200      	movs	r2, #0
 8003022:	63bb      	str	r3, [r7, #56]	; 0x38
 8003024:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
 800302e:	2300      	movs	r3, #0
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
 8003032:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003036:	4622      	mov	r2, r4
 8003038:	462b      	mov	r3, r5
 800303a:	f04f 0000 	mov.w	r0, #0
 800303e:	f04f 0100 	mov.w	r1, #0
 8003042:	0159      	lsls	r1, r3, #5
 8003044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003048:	0150      	lsls	r0, r2, #5
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4621      	mov	r1, r4
 8003050:	1a51      	subs	r1, r2, r1
 8003052:	6139      	str	r1, [r7, #16]
 8003054:	4629      	mov	r1, r5
 8003056:	eb63 0301 	sbc.w	r3, r3, r1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003068:	4659      	mov	r1, fp
 800306a:	018b      	lsls	r3, r1, #6
 800306c:	4651      	mov	r1, sl
 800306e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003072:	4651      	mov	r1, sl
 8003074:	018a      	lsls	r2, r1, #6
 8003076:	4651      	mov	r1, sl
 8003078:	ebb2 0801 	subs.w	r8, r2, r1
 800307c:	4659      	mov	r1, fp
 800307e:	eb63 0901 	sbc.w	r9, r3, r1
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800308e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003096:	4690      	mov	r8, r2
 8003098:	4699      	mov	r9, r3
 800309a:	4623      	mov	r3, r4
 800309c:	eb18 0303 	adds.w	r3, r8, r3
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	462b      	mov	r3, r5
 80030a4:	eb49 0303 	adc.w	r3, r9, r3
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030b6:	4629      	mov	r1, r5
 80030b8:	024b      	lsls	r3, r1, #9
 80030ba:	4621      	mov	r1, r4
 80030bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030c0:	4621      	mov	r1, r4
 80030c2:	024a      	lsls	r2, r1, #9
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ca:	2200      	movs	r2, #0
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030d4:	f7fd fbd2 	bl	800087c <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4613      	mov	r3, r2
 80030de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e0:	e058      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e2:	4b38      	ldr	r3, [pc, #224]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	2200      	movs	r2, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	4611      	mov	r1, r2
 80030ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030f2:	623b      	str	r3, [r7, #32]
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
 80030f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030fc:	4642      	mov	r2, r8
 80030fe:	464b      	mov	r3, r9
 8003100:	f04f 0000 	mov.w	r0, #0
 8003104:	f04f 0100 	mov.w	r1, #0
 8003108:	0159      	lsls	r1, r3, #5
 800310a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310e:	0150      	lsls	r0, r2, #5
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4641      	mov	r1, r8
 8003116:	ebb2 0a01 	subs.w	sl, r2, r1
 800311a:	4649      	mov	r1, r9
 800311c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800312c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003134:	ebb2 040a 	subs.w	r4, r2, sl
 8003138:	eb63 050b 	sbc.w	r5, r3, fp
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	00eb      	lsls	r3, r5, #3
 8003146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800314a:	00e2      	lsls	r2, r4, #3
 800314c:	4614      	mov	r4, r2
 800314e:	461d      	mov	r5, r3
 8003150:	4643      	mov	r3, r8
 8003152:	18e3      	adds	r3, r4, r3
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	464b      	mov	r3, r9
 8003158:	eb45 0303 	adc.w	r3, r5, r3
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800316a:	4629      	mov	r1, r5
 800316c:	028b      	lsls	r3, r1, #10
 800316e:	4621      	mov	r1, r4
 8003170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003174:	4621      	mov	r1, r4
 8003176:	028a      	lsls	r2, r1, #10
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317e:	2200      	movs	r2, #0
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	61fa      	str	r2, [r7, #28]
 8003184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003188:	f7fd fb78 	bl	800087c <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4613      	mov	r3, r2
 8003192:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	3301      	adds	r3, #1
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80031a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ae:	e002      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3750      	adds	r7, #80	; 0x50
 80031bc:	46bd      	mov	sp, r7
 80031be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	00f42400 	.word	0x00f42400
 80031cc:	007a1200 	.word	0x007a1200

080031d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e07b      	b.n	80032da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d108      	bne.n	80031fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031f2:	d009      	beq.n	8003208 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	61da      	str	r2, [r3, #28]
 80031fa:	e005      	b.n	8003208 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fe fdfe 	bl	8001e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800323e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328c:	ea42 0103 	orr.w	r1, r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	f003 0104 	and.w	r1, r3, #4
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	f003 0210 	and.w	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b088      	sub	sp, #32
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_SPI_Transmit+0x22>
 8003300:	2302      	movs	r3, #2
 8003302:	e126      	b.n	8003552 <HAL_SPI_Transmit+0x270>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800330c:	f7ff f818 	bl	8002340 <HAL_GetTick>
 8003310:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d002      	beq.n	8003328 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003322:	2302      	movs	r3, #2
 8003324:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003326:	e10b      	b.n	8003540 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_SPI_Transmit+0x52>
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003338:	e102      	b.n	8003540 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2203      	movs	r2, #3
 800333e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	88fa      	ldrh	r2, [r7, #6]
 8003352:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003380:	d10f      	bne.n	80033a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003390:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d007      	beq.n	80033c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c8:	d14b      	bne.n	8003462 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_SPI_Transmit+0xf6>
 80033d2:	8afb      	ldrh	r3, [r7, #22]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d13e      	bne.n	8003456 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	881a      	ldrh	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	1c9a      	adds	r2, r3, #2
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033fc:	e02b      	b.n	8003456 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b02      	cmp	r3, #2
 800340a:	d112      	bne.n	8003432 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	881a      	ldrh	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	1c9a      	adds	r2, r3, #2
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003430:	e011      	b.n	8003456 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003432:	f7fe ff85 	bl	8002340 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d803      	bhi.n	800344a <HAL_SPI_Transmit+0x168>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d102      	bne.n	8003450 <HAL_SPI_Transmit+0x16e>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d102      	bne.n	8003456 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003454:	e074      	b.n	8003540 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1ce      	bne.n	80033fe <HAL_SPI_Transmit+0x11c>
 8003460:	e04c      	b.n	80034fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_SPI_Transmit+0x18e>
 800346a:	8afb      	ldrh	r3, [r7, #22]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d140      	bne.n	80034f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	7812      	ldrb	r2, [r2, #0]
 800347c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003496:	e02c      	b.n	80034f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d113      	bne.n	80034ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	330c      	adds	r3, #12
 80034b0:	7812      	ldrb	r2, [r2, #0]
 80034b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80034cc:	e011      	b.n	80034f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ce:	f7fe ff37 	bl	8002340 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d803      	bhi.n	80034e6 <HAL_SPI_Transmit+0x204>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d102      	bne.n	80034ec <HAL_SPI_Transmit+0x20a>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034f0:	e026      	b.n	8003540 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1cd      	bne.n	8003498 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	6839      	ldr	r1, [r7, #0]
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fa55 	bl	80039b0 <SPI_EndRxTxTransaction>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	e000      	b.n	8003540 <HAL_SPI_Transmit+0x25e>
  }

error:
 800353e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003550:	7ffb      	ldrb	r3, [r7, #31]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b08c      	sub	sp, #48	; 0x30
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003568:	2301      	movs	r3, #1
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x26>
 800357c:	2302      	movs	r3, #2
 800357e:	e18a      	b.n	8003896 <HAL_SPI_TransmitReceive+0x33c>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003588:	f7fe feda 	bl	8002340 <HAL_GetTick>
 800358c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d00f      	beq.n	80035ca <HAL_SPI_TransmitReceive+0x70>
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b0:	d107      	bne.n	80035c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <HAL_SPI_TransmitReceive+0x68>
 80035ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d003      	beq.n	80035ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80035c2:	2302      	movs	r3, #2
 80035c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80035c8:	e15b      	b.n	8003882 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_SPI_TransmitReceive+0x82>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_SPI_TransmitReceive+0x82>
 80035d6:	887b      	ldrh	r3, [r7, #2]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80035e2:	e14e      	b.n	8003882 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d003      	beq.n	80035f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2205      	movs	r2, #5
 80035f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	887a      	ldrh	r2, [r7, #2]
 800360e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	887a      	ldrh	r2, [r7, #2]
 800361a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d007      	beq.n	800364c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800364a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003654:	d178      	bne.n	8003748 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_SPI_TransmitReceive+0x10a>
 800365e:	8b7b      	ldrh	r3, [r7, #26]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d166      	bne.n	8003732 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	1c9a      	adds	r2, r3, #2
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003688:	e053      	b.n	8003732 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b02      	cmp	r3, #2
 8003696:	d11b      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x176>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d016      	beq.n	80036d0 <HAL_SPI_TransmitReceive+0x176>
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d113      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	881a      	ldrh	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	1c9a      	adds	r2, r3, #2
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d119      	bne.n	8003712 <HAL_SPI_TransmitReceive+0x1b8>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d014      	beq.n	8003712 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	b292      	uxth	r2, r2
 80036f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	1c9a      	adds	r2, r3, #2
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800370e:	2301      	movs	r3, #1
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003712:	f7fe fe15 	bl	8002340 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800371e:	429a      	cmp	r2, r3
 8003720:	d807      	bhi.n	8003732 <HAL_SPI_TransmitReceive+0x1d8>
 8003722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d003      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003730:	e0a7      	b.n	8003882 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1a6      	bne.n	800368a <HAL_SPI_TransmitReceive+0x130>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1a1      	bne.n	800368a <HAL_SPI_TransmitReceive+0x130>
 8003746:	e07c      	b.n	8003842 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_SPI_TransmitReceive+0x1fc>
 8003750:	8b7b      	ldrh	r3, [r7, #26]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d16b      	bne.n	800382e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	330c      	adds	r3, #12
 8003760:	7812      	ldrb	r2, [r2, #0]
 8003762:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800377c:	e057      	b.n	800382e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d11c      	bne.n	80037c6 <HAL_SPI_TransmitReceive+0x26c>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d017      	beq.n	80037c6 <HAL_SPI_TransmitReceive+0x26c>
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	2b01      	cmp	r3, #1
 800379a:	d114      	bne.n	80037c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	7812      	ldrb	r2, [r2, #0]
 80037a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d119      	bne.n	8003808 <HAL_SPI_TransmitReceive+0x2ae>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d014      	beq.n	8003808 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003804:	2301      	movs	r3, #1
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003808:	f7fe fd9a 	bl	8002340 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003814:	429a      	cmp	r2, r3
 8003816:	d803      	bhi.n	8003820 <HAL_SPI_TransmitReceive+0x2c6>
 8003818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d102      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x2cc>
 8003820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003822:	2b00      	cmp	r3, #0
 8003824:	d103      	bne.n	800382e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800382c:	e029      	b.n	8003882 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1a2      	bne.n	800377e <HAL_SPI_TransmitReceive+0x224>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d19d      	bne.n	800377e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003844:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f8b2 	bl	80039b0 <SPI_EndRxTxTransaction>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d006      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800385e:	e010      	b.n	8003882 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10b      	bne.n	8003880 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	e000      	b.n	8003882 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003880:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003896:	4618      	mov	r0, r3
 8003898:	3730      	adds	r7, #48	; 0x30
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038b0:	f7fe fd46 	bl	8002340 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	4413      	add	r3, r2
 80038be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038c0:	f7fe fd3e 	bl	8002340 <HAL_GetTick>
 80038c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038c6:	4b39      	ldr	r3, [pc, #228]	; (80039ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	015b      	lsls	r3, r3, #5
 80038cc:	0d1b      	lsrs	r3, r3, #20
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	fb02 f303 	mul.w	r3, r2, r3
 80038d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038d6:	e054      	b.n	8003982 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d050      	beq.n	8003982 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038e0:	f7fe fd2e 	bl	8002340 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d902      	bls.n	80038f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d13d      	bne.n	8003972 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003904:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800390e:	d111      	bne.n	8003934 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003918:	d004      	beq.n	8003924 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003922:	d107      	bne.n	8003934 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003932:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393c:	d10f      	bne.n	800395e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800395c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e017      	b.n	80039a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	3b01      	subs	r3, #1
 8003980:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4013      	ands	r3, r2
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	bf0c      	ite	eq
 8003992:	2301      	moveq	r3, #1
 8003994:	2300      	movne	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	429a      	cmp	r2, r3
 800399e:	d19b      	bne.n	80038d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	2000267c 	.word	0x2000267c

080039b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039bc:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <SPI_EndRxTxTransaction+0x7c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <SPI_EndRxTxTransaction+0x80>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	0d5b      	lsrs	r3, r3, #21
 80039c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039cc:	fb02 f303 	mul.w	r3, r2, r3
 80039d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039da:	d112      	bne.n	8003a02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2200      	movs	r2, #0
 80039e4:	2180      	movs	r1, #128	; 0x80
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f7ff ff5a 	bl	80038a0 <SPI_WaitFlagStateUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d016      	beq.n	8003a20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f6:	f043 0220 	orr.w	r2, r3, #32
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e00f      	b.n	8003a22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a18:	2b80      	cmp	r3, #128	; 0x80
 8003a1a:	d0f2      	beq.n	8003a02 <SPI_EndRxTxTransaction+0x52>
 8003a1c:	e000      	b.n	8003a20 <SPI_EndRxTxTransaction+0x70>
        break;
 8003a1e:	bf00      	nop
  }

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	2000267c 	.word	0x2000267c
 8003a30:	165e9f81 	.word	0x165e9f81

08003a34 <__errno>:
 8003a34:	4b01      	ldr	r3, [pc, #4]	; (8003a3c <__errno+0x8>)
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20002688 	.word	0x20002688

08003a40 <__libc_init_array>:
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	4d0d      	ldr	r5, [pc, #52]	; (8003a78 <__libc_init_array+0x38>)
 8003a44:	4c0d      	ldr	r4, [pc, #52]	; (8003a7c <__libc_init_array+0x3c>)
 8003a46:	1b64      	subs	r4, r4, r5
 8003a48:	10a4      	asrs	r4, r4, #2
 8003a4a:	2600      	movs	r6, #0
 8003a4c:	42a6      	cmp	r6, r4
 8003a4e:	d109      	bne.n	8003a64 <__libc_init_array+0x24>
 8003a50:	4d0b      	ldr	r5, [pc, #44]	; (8003a80 <__libc_init_array+0x40>)
 8003a52:	4c0c      	ldr	r4, [pc, #48]	; (8003a84 <__libc_init_array+0x44>)
 8003a54:	f001 f858 	bl	8004b08 <_init>
 8003a58:	1b64      	subs	r4, r4, r5
 8003a5a:	10a4      	asrs	r4, r4, #2
 8003a5c:	2600      	movs	r6, #0
 8003a5e:	42a6      	cmp	r6, r4
 8003a60:	d105      	bne.n	8003a6e <__libc_init_array+0x2e>
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a68:	4798      	blx	r3
 8003a6a:	3601      	adds	r6, #1
 8003a6c:	e7ee      	b.n	8003a4c <__libc_init_array+0xc>
 8003a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a72:	4798      	blx	r3
 8003a74:	3601      	adds	r6, #1
 8003a76:	e7f2      	b.n	8003a5e <__libc_init_array+0x1e>
 8003a78:	08004cd0 	.word	0x08004cd0
 8003a7c:	08004cd0 	.word	0x08004cd0
 8003a80:	08004cd0 	.word	0x08004cd0
 8003a84:	08004cd4 	.word	0x08004cd4

08003a88 <memset>:
 8003a88:	4402      	add	r2, r0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d100      	bne.n	8003a92 <memset+0xa>
 8003a90:	4770      	bx	lr
 8003a92:	f803 1b01 	strb.w	r1, [r3], #1
 8003a96:	e7f9      	b.n	8003a8c <memset+0x4>

08003a98 <rand>:
 8003a98:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <rand+0x5c>)
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	681c      	ldr	r4, [r3, #0]
 8003a9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003aa0:	b9b3      	cbnz	r3, 8003ad0 <rand+0x38>
 8003aa2:	2018      	movs	r0, #24
 8003aa4:	f000 f866 	bl	8003b74 <malloc>
 8003aa8:	63a0      	str	r0, [r4, #56]	; 0x38
 8003aaa:	b928      	cbnz	r0, 8003ab8 <rand+0x20>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <rand+0x60>)
 8003ab0:	4812      	ldr	r0, [pc, #72]	; (8003afc <rand+0x64>)
 8003ab2:	214e      	movs	r1, #78	; 0x4e
 8003ab4:	f000 f82e 	bl	8003b14 <__assert_func>
 8003ab8:	4a11      	ldr	r2, [pc, #68]	; (8003b00 <rand+0x68>)
 8003aba:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <rand+0x6c>)
 8003abc:	e9c0 2300 	strd	r2, r3, [r0]
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <rand+0x70>)
 8003ac2:	6083      	str	r3, [r0, #8]
 8003ac4:	230b      	movs	r3, #11
 8003ac6:	8183      	strh	r3, [r0, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	2300      	movs	r3, #0
 8003acc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003ad0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <rand+0x74>)
 8003ad4:	6920      	ldr	r0, [r4, #16]
 8003ad6:	6963      	ldr	r3, [r4, #20]
 8003ad8:	490d      	ldr	r1, [pc, #52]	; (8003b10 <rand+0x78>)
 8003ada:	4342      	muls	r2, r0
 8003adc:	fb01 2203 	mla	r2, r1, r3, r2
 8003ae0:	fba0 0101 	umull	r0, r1, r0, r1
 8003ae4:	1c43      	adds	r3, r0, #1
 8003ae6:	eb42 0001 	adc.w	r0, r2, r1
 8003aea:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8003aee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003af2:	bd10      	pop	{r4, pc}
 8003af4:	20002688 	.word	0x20002688
 8003af8:	08004b84 	.word	0x08004b84
 8003afc:	08004b9b 	.word	0x08004b9b
 8003b00:	abcd330e 	.word	0xabcd330e
 8003b04:	e66d1234 	.word	0xe66d1234
 8003b08:	0005deec 	.word	0x0005deec
 8003b0c:	5851f42d 	.word	0x5851f42d
 8003b10:	4c957f2d 	.word	0x4c957f2d

08003b14 <__assert_func>:
 8003b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b16:	4614      	mov	r4, r2
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <__assert_func+0x2c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4605      	mov	r5, r0
 8003b20:	68d8      	ldr	r0, [r3, #12]
 8003b22:	b14c      	cbz	r4, 8003b38 <__assert_func+0x24>
 8003b24:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <__assert_func+0x30>)
 8003b26:	9100      	str	r1, [sp, #0]
 8003b28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003b2c:	4906      	ldr	r1, [pc, #24]	; (8003b48 <__assert_func+0x34>)
 8003b2e:	462b      	mov	r3, r5
 8003b30:	f000 f80e 	bl	8003b50 <fiprintf>
 8003b34:	f000 fcc4 	bl	80044c0 <abort>
 8003b38:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <__assert_func+0x38>)
 8003b3a:	461c      	mov	r4, r3
 8003b3c:	e7f3      	b.n	8003b26 <__assert_func+0x12>
 8003b3e:	bf00      	nop
 8003b40:	20002688 	.word	0x20002688
 8003b44:	08004bf6 	.word	0x08004bf6
 8003b48:	08004c03 	.word	0x08004c03
 8003b4c:	08004c31 	.word	0x08004c31

08003b50 <fiprintf>:
 8003b50:	b40e      	push	{r1, r2, r3}
 8003b52:	b503      	push	{r0, r1, lr}
 8003b54:	4601      	mov	r1, r0
 8003b56:	ab03      	add	r3, sp, #12
 8003b58:	4805      	ldr	r0, [pc, #20]	; (8003b70 <fiprintf+0x20>)
 8003b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b5e:	6800      	ldr	r0, [r0, #0]
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	f000 f919 	bl	8003d98 <_vfiprintf_r>
 8003b66:	b002      	add	sp, #8
 8003b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b6c:	b003      	add	sp, #12
 8003b6e:	4770      	bx	lr
 8003b70:	20002688 	.word	0x20002688

08003b74 <malloc>:
 8003b74:	4b02      	ldr	r3, [pc, #8]	; (8003b80 <malloc+0xc>)
 8003b76:	4601      	mov	r1, r0
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	f000 b86f 	b.w	8003c5c <_malloc_r>
 8003b7e:	bf00      	nop
 8003b80:	20002688 	.word	0x20002688

08003b84 <_free_r>:
 8003b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b86:	2900      	cmp	r1, #0
 8003b88:	d044      	beq.n	8003c14 <_free_r+0x90>
 8003b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b8e:	9001      	str	r0, [sp, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f1a1 0404 	sub.w	r4, r1, #4
 8003b96:	bfb8      	it	lt
 8003b98:	18e4      	addlt	r4, r4, r3
 8003b9a:	f000 feb9 	bl	8004910 <__malloc_lock>
 8003b9e:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <_free_r+0x94>)
 8003ba0:	9801      	ldr	r0, [sp, #4]
 8003ba2:	6813      	ldr	r3, [r2, #0]
 8003ba4:	b933      	cbnz	r3, 8003bb4 <_free_r+0x30>
 8003ba6:	6063      	str	r3, [r4, #4]
 8003ba8:	6014      	str	r4, [r2, #0]
 8003baa:	b003      	add	sp, #12
 8003bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bb0:	f000 beb4 	b.w	800491c <__malloc_unlock>
 8003bb4:	42a3      	cmp	r3, r4
 8003bb6:	d908      	bls.n	8003bca <_free_r+0x46>
 8003bb8:	6825      	ldr	r5, [r4, #0]
 8003bba:	1961      	adds	r1, r4, r5
 8003bbc:	428b      	cmp	r3, r1
 8003bbe:	bf01      	itttt	eq
 8003bc0:	6819      	ldreq	r1, [r3, #0]
 8003bc2:	685b      	ldreq	r3, [r3, #4]
 8003bc4:	1949      	addeq	r1, r1, r5
 8003bc6:	6021      	streq	r1, [r4, #0]
 8003bc8:	e7ed      	b.n	8003ba6 <_free_r+0x22>
 8003bca:	461a      	mov	r2, r3
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	b10b      	cbz	r3, 8003bd4 <_free_r+0x50>
 8003bd0:	42a3      	cmp	r3, r4
 8003bd2:	d9fa      	bls.n	8003bca <_free_r+0x46>
 8003bd4:	6811      	ldr	r1, [r2, #0]
 8003bd6:	1855      	adds	r5, r2, r1
 8003bd8:	42a5      	cmp	r5, r4
 8003bda:	d10b      	bne.n	8003bf4 <_free_r+0x70>
 8003bdc:	6824      	ldr	r4, [r4, #0]
 8003bde:	4421      	add	r1, r4
 8003be0:	1854      	adds	r4, r2, r1
 8003be2:	42a3      	cmp	r3, r4
 8003be4:	6011      	str	r1, [r2, #0]
 8003be6:	d1e0      	bne.n	8003baa <_free_r+0x26>
 8003be8:	681c      	ldr	r4, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	6053      	str	r3, [r2, #4]
 8003bee:	4421      	add	r1, r4
 8003bf0:	6011      	str	r1, [r2, #0]
 8003bf2:	e7da      	b.n	8003baa <_free_r+0x26>
 8003bf4:	d902      	bls.n	8003bfc <_free_r+0x78>
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	6003      	str	r3, [r0, #0]
 8003bfa:	e7d6      	b.n	8003baa <_free_r+0x26>
 8003bfc:	6825      	ldr	r5, [r4, #0]
 8003bfe:	1961      	adds	r1, r4, r5
 8003c00:	428b      	cmp	r3, r1
 8003c02:	bf04      	itt	eq
 8003c04:	6819      	ldreq	r1, [r3, #0]
 8003c06:	685b      	ldreq	r3, [r3, #4]
 8003c08:	6063      	str	r3, [r4, #4]
 8003c0a:	bf04      	itt	eq
 8003c0c:	1949      	addeq	r1, r1, r5
 8003c0e:	6021      	streq	r1, [r4, #0]
 8003c10:	6054      	str	r4, [r2, #4]
 8003c12:	e7ca      	b.n	8003baa <_free_r+0x26>
 8003c14:	b003      	add	sp, #12
 8003c16:	bd30      	pop	{r4, r5, pc}
 8003c18:	2000279c 	.word	0x2000279c

08003c1c <sbrk_aligned>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	4e0e      	ldr	r6, [pc, #56]	; (8003c58 <sbrk_aligned+0x3c>)
 8003c20:	460c      	mov	r4, r1
 8003c22:	6831      	ldr	r1, [r6, #0]
 8003c24:	4605      	mov	r5, r0
 8003c26:	b911      	cbnz	r1, 8003c2e <sbrk_aligned+0x12>
 8003c28:	f000 fb7a 	bl	8004320 <_sbrk_r>
 8003c2c:	6030      	str	r0, [r6, #0]
 8003c2e:	4621      	mov	r1, r4
 8003c30:	4628      	mov	r0, r5
 8003c32:	f000 fb75 	bl	8004320 <_sbrk_r>
 8003c36:	1c43      	adds	r3, r0, #1
 8003c38:	d00a      	beq.n	8003c50 <sbrk_aligned+0x34>
 8003c3a:	1cc4      	adds	r4, r0, #3
 8003c3c:	f024 0403 	bic.w	r4, r4, #3
 8003c40:	42a0      	cmp	r0, r4
 8003c42:	d007      	beq.n	8003c54 <sbrk_aligned+0x38>
 8003c44:	1a21      	subs	r1, r4, r0
 8003c46:	4628      	mov	r0, r5
 8003c48:	f000 fb6a 	bl	8004320 <_sbrk_r>
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d101      	bne.n	8003c54 <sbrk_aligned+0x38>
 8003c50:	f04f 34ff 	mov.w	r4, #4294967295
 8003c54:	4620      	mov	r0, r4
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	200027a0 	.word	0x200027a0

08003c5c <_malloc_r>:
 8003c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c60:	1ccd      	adds	r5, r1, #3
 8003c62:	f025 0503 	bic.w	r5, r5, #3
 8003c66:	3508      	adds	r5, #8
 8003c68:	2d0c      	cmp	r5, #12
 8003c6a:	bf38      	it	cc
 8003c6c:	250c      	movcc	r5, #12
 8003c6e:	2d00      	cmp	r5, #0
 8003c70:	4607      	mov	r7, r0
 8003c72:	db01      	blt.n	8003c78 <_malloc_r+0x1c>
 8003c74:	42a9      	cmp	r1, r5
 8003c76:	d905      	bls.n	8003c84 <_malloc_r+0x28>
 8003c78:	230c      	movs	r3, #12
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	2600      	movs	r6, #0
 8003c7e:	4630      	mov	r0, r6
 8003c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c84:	4e2e      	ldr	r6, [pc, #184]	; (8003d40 <_malloc_r+0xe4>)
 8003c86:	f000 fe43 	bl	8004910 <__malloc_lock>
 8003c8a:	6833      	ldr	r3, [r6, #0]
 8003c8c:	461c      	mov	r4, r3
 8003c8e:	bb34      	cbnz	r4, 8003cde <_malloc_r+0x82>
 8003c90:	4629      	mov	r1, r5
 8003c92:	4638      	mov	r0, r7
 8003c94:	f7ff ffc2 	bl	8003c1c <sbrk_aligned>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	d14d      	bne.n	8003d3a <_malloc_r+0xde>
 8003c9e:	6834      	ldr	r4, [r6, #0]
 8003ca0:	4626      	mov	r6, r4
 8003ca2:	2e00      	cmp	r6, #0
 8003ca4:	d140      	bne.n	8003d28 <_malloc_r+0xcc>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	4631      	mov	r1, r6
 8003caa:	4638      	mov	r0, r7
 8003cac:	eb04 0803 	add.w	r8, r4, r3
 8003cb0:	f000 fb36 	bl	8004320 <_sbrk_r>
 8003cb4:	4580      	cmp	r8, r0
 8003cb6:	d13a      	bne.n	8003d2e <_malloc_r+0xd2>
 8003cb8:	6821      	ldr	r1, [r4, #0]
 8003cba:	3503      	adds	r5, #3
 8003cbc:	1a6d      	subs	r5, r5, r1
 8003cbe:	f025 0503 	bic.w	r5, r5, #3
 8003cc2:	3508      	adds	r5, #8
 8003cc4:	2d0c      	cmp	r5, #12
 8003cc6:	bf38      	it	cc
 8003cc8:	250c      	movcc	r5, #12
 8003cca:	4629      	mov	r1, r5
 8003ccc:	4638      	mov	r0, r7
 8003cce:	f7ff ffa5 	bl	8003c1c <sbrk_aligned>
 8003cd2:	3001      	adds	r0, #1
 8003cd4:	d02b      	beq.n	8003d2e <_malloc_r+0xd2>
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	442b      	add	r3, r5
 8003cda:	6023      	str	r3, [r4, #0]
 8003cdc:	e00e      	b.n	8003cfc <_malloc_r+0xa0>
 8003cde:	6822      	ldr	r2, [r4, #0]
 8003ce0:	1b52      	subs	r2, r2, r5
 8003ce2:	d41e      	bmi.n	8003d22 <_malloc_r+0xc6>
 8003ce4:	2a0b      	cmp	r2, #11
 8003ce6:	d916      	bls.n	8003d16 <_malloc_r+0xba>
 8003ce8:	1961      	adds	r1, r4, r5
 8003cea:	42a3      	cmp	r3, r4
 8003cec:	6025      	str	r5, [r4, #0]
 8003cee:	bf18      	it	ne
 8003cf0:	6059      	strne	r1, [r3, #4]
 8003cf2:	6863      	ldr	r3, [r4, #4]
 8003cf4:	bf08      	it	eq
 8003cf6:	6031      	streq	r1, [r6, #0]
 8003cf8:	5162      	str	r2, [r4, r5]
 8003cfa:	604b      	str	r3, [r1, #4]
 8003cfc:	4638      	mov	r0, r7
 8003cfe:	f104 060b 	add.w	r6, r4, #11
 8003d02:	f000 fe0b 	bl	800491c <__malloc_unlock>
 8003d06:	f026 0607 	bic.w	r6, r6, #7
 8003d0a:	1d23      	adds	r3, r4, #4
 8003d0c:	1af2      	subs	r2, r6, r3
 8003d0e:	d0b6      	beq.n	8003c7e <_malloc_r+0x22>
 8003d10:	1b9b      	subs	r3, r3, r6
 8003d12:	50a3      	str	r3, [r4, r2]
 8003d14:	e7b3      	b.n	8003c7e <_malloc_r+0x22>
 8003d16:	6862      	ldr	r2, [r4, #4]
 8003d18:	42a3      	cmp	r3, r4
 8003d1a:	bf0c      	ite	eq
 8003d1c:	6032      	streq	r2, [r6, #0]
 8003d1e:	605a      	strne	r2, [r3, #4]
 8003d20:	e7ec      	b.n	8003cfc <_malloc_r+0xa0>
 8003d22:	4623      	mov	r3, r4
 8003d24:	6864      	ldr	r4, [r4, #4]
 8003d26:	e7b2      	b.n	8003c8e <_malloc_r+0x32>
 8003d28:	4634      	mov	r4, r6
 8003d2a:	6876      	ldr	r6, [r6, #4]
 8003d2c:	e7b9      	b.n	8003ca2 <_malloc_r+0x46>
 8003d2e:	230c      	movs	r3, #12
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	4638      	mov	r0, r7
 8003d34:	f000 fdf2 	bl	800491c <__malloc_unlock>
 8003d38:	e7a1      	b.n	8003c7e <_malloc_r+0x22>
 8003d3a:	6025      	str	r5, [r4, #0]
 8003d3c:	e7de      	b.n	8003cfc <_malloc_r+0xa0>
 8003d3e:	bf00      	nop
 8003d40:	2000279c 	.word	0x2000279c

08003d44 <__sfputc_r>:
 8003d44:	6893      	ldr	r3, [r2, #8]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	b410      	push	{r4}
 8003d4c:	6093      	str	r3, [r2, #8]
 8003d4e:	da08      	bge.n	8003d62 <__sfputc_r+0x1e>
 8003d50:	6994      	ldr	r4, [r2, #24]
 8003d52:	42a3      	cmp	r3, r4
 8003d54:	db01      	blt.n	8003d5a <__sfputc_r+0x16>
 8003d56:	290a      	cmp	r1, #10
 8003d58:	d103      	bne.n	8003d62 <__sfputc_r+0x1e>
 8003d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d5e:	f000 baef 	b.w	8004340 <__swbuf_r>
 8003d62:	6813      	ldr	r3, [r2, #0]
 8003d64:	1c58      	adds	r0, r3, #1
 8003d66:	6010      	str	r0, [r2, #0]
 8003d68:	7019      	strb	r1, [r3, #0]
 8003d6a:	4608      	mov	r0, r1
 8003d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <__sfputs_r>:
 8003d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d74:	4606      	mov	r6, r0
 8003d76:	460f      	mov	r7, r1
 8003d78:	4614      	mov	r4, r2
 8003d7a:	18d5      	adds	r5, r2, r3
 8003d7c:	42ac      	cmp	r4, r5
 8003d7e:	d101      	bne.n	8003d84 <__sfputs_r+0x12>
 8003d80:	2000      	movs	r0, #0
 8003d82:	e007      	b.n	8003d94 <__sfputs_r+0x22>
 8003d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d88:	463a      	mov	r2, r7
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	f7ff ffda 	bl	8003d44 <__sfputc_r>
 8003d90:	1c43      	adds	r3, r0, #1
 8003d92:	d1f3      	bne.n	8003d7c <__sfputs_r+0xa>
 8003d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d98 <_vfiprintf_r>:
 8003d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9c:	460d      	mov	r5, r1
 8003d9e:	b09d      	sub	sp, #116	; 0x74
 8003da0:	4614      	mov	r4, r2
 8003da2:	4698      	mov	r8, r3
 8003da4:	4606      	mov	r6, r0
 8003da6:	b118      	cbz	r0, 8003db0 <_vfiprintf_r+0x18>
 8003da8:	6983      	ldr	r3, [r0, #24]
 8003daa:	b90b      	cbnz	r3, 8003db0 <_vfiprintf_r+0x18>
 8003dac:	f000 fcaa 	bl	8004704 <__sinit>
 8003db0:	4b89      	ldr	r3, [pc, #548]	; (8003fd8 <_vfiprintf_r+0x240>)
 8003db2:	429d      	cmp	r5, r3
 8003db4:	d11b      	bne.n	8003dee <_vfiprintf_r+0x56>
 8003db6:	6875      	ldr	r5, [r6, #4]
 8003db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dba:	07d9      	lsls	r1, r3, #31
 8003dbc:	d405      	bmi.n	8003dca <_vfiprintf_r+0x32>
 8003dbe:	89ab      	ldrh	r3, [r5, #12]
 8003dc0:	059a      	lsls	r2, r3, #22
 8003dc2:	d402      	bmi.n	8003dca <_vfiprintf_r+0x32>
 8003dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dc6:	f000 fd3b 	bl	8004840 <__retarget_lock_acquire_recursive>
 8003dca:	89ab      	ldrh	r3, [r5, #12]
 8003dcc:	071b      	lsls	r3, r3, #28
 8003dce:	d501      	bpl.n	8003dd4 <_vfiprintf_r+0x3c>
 8003dd0:	692b      	ldr	r3, [r5, #16]
 8003dd2:	b9eb      	cbnz	r3, 8003e10 <_vfiprintf_r+0x78>
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f000 fb04 	bl	80043e4 <__swsetup_r>
 8003ddc:	b1c0      	cbz	r0, 8003e10 <_vfiprintf_r+0x78>
 8003dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003de0:	07dc      	lsls	r4, r3, #31
 8003de2:	d50e      	bpl.n	8003e02 <_vfiprintf_r+0x6a>
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295
 8003de8:	b01d      	add	sp, #116	; 0x74
 8003dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dee:	4b7b      	ldr	r3, [pc, #492]	; (8003fdc <_vfiprintf_r+0x244>)
 8003df0:	429d      	cmp	r5, r3
 8003df2:	d101      	bne.n	8003df8 <_vfiprintf_r+0x60>
 8003df4:	68b5      	ldr	r5, [r6, #8]
 8003df6:	e7df      	b.n	8003db8 <_vfiprintf_r+0x20>
 8003df8:	4b79      	ldr	r3, [pc, #484]	; (8003fe0 <_vfiprintf_r+0x248>)
 8003dfa:	429d      	cmp	r5, r3
 8003dfc:	bf08      	it	eq
 8003dfe:	68f5      	ldreq	r5, [r6, #12]
 8003e00:	e7da      	b.n	8003db8 <_vfiprintf_r+0x20>
 8003e02:	89ab      	ldrh	r3, [r5, #12]
 8003e04:	0598      	lsls	r0, r3, #22
 8003e06:	d4ed      	bmi.n	8003de4 <_vfiprintf_r+0x4c>
 8003e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e0a:	f000 fd1a 	bl	8004842 <__retarget_lock_release_recursive>
 8003e0e:	e7e9      	b.n	8003de4 <_vfiprintf_r+0x4c>
 8003e10:	2300      	movs	r3, #0
 8003e12:	9309      	str	r3, [sp, #36]	; 0x24
 8003e14:	2320      	movs	r3, #32
 8003e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e1e:	2330      	movs	r3, #48	; 0x30
 8003e20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003fe4 <_vfiprintf_r+0x24c>
 8003e24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e28:	f04f 0901 	mov.w	r9, #1
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	469a      	mov	sl, r3
 8003e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e34:	b10a      	cbz	r2, 8003e3a <_vfiprintf_r+0xa2>
 8003e36:	2a25      	cmp	r2, #37	; 0x25
 8003e38:	d1f9      	bne.n	8003e2e <_vfiprintf_r+0x96>
 8003e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8003e3e:	d00b      	beq.n	8003e58 <_vfiprintf_r+0xc0>
 8003e40:	465b      	mov	r3, fp
 8003e42:	4622      	mov	r2, r4
 8003e44:	4629      	mov	r1, r5
 8003e46:	4630      	mov	r0, r6
 8003e48:	f7ff ff93 	bl	8003d72 <__sfputs_r>
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	f000 80aa 	beq.w	8003fa6 <_vfiprintf_r+0x20e>
 8003e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e54:	445a      	add	r2, fp
 8003e56:	9209      	str	r2, [sp, #36]	; 0x24
 8003e58:	f89a 3000 	ldrb.w	r3, [sl]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80a2 	beq.w	8003fa6 <_vfiprintf_r+0x20e>
 8003e62:	2300      	movs	r3, #0
 8003e64:	f04f 32ff 	mov.w	r2, #4294967295
 8003e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e6c:	f10a 0a01 	add.w	sl, sl, #1
 8003e70:	9304      	str	r3, [sp, #16]
 8003e72:	9307      	str	r3, [sp, #28]
 8003e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e78:	931a      	str	r3, [sp, #104]	; 0x68
 8003e7a:	4654      	mov	r4, sl
 8003e7c:	2205      	movs	r2, #5
 8003e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e82:	4858      	ldr	r0, [pc, #352]	; (8003fe4 <_vfiprintf_r+0x24c>)
 8003e84:	f7fc f9a4 	bl	80001d0 <memchr>
 8003e88:	9a04      	ldr	r2, [sp, #16]
 8003e8a:	b9d8      	cbnz	r0, 8003ec4 <_vfiprintf_r+0x12c>
 8003e8c:	06d1      	lsls	r1, r2, #27
 8003e8e:	bf44      	itt	mi
 8003e90:	2320      	movmi	r3, #32
 8003e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e96:	0713      	lsls	r3, r2, #28
 8003e98:	bf44      	itt	mi
 8003e9a:	232b      	movmi	r3, #43	; 0x2b
 8003e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ea6:	d015      	beq.n	8003ed4 <_vfiprintf_r+0x13c>
 8003ea8:	9a07      	ldr	r2, [sp, #28]
 8003eaa:	4654      	mov	r4, sl
 8003eac:	2000      	movs	r0, #0
 8003eae:	f04f 0c0a 	mov.w	ip, #10
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eb8:	3b30      	subs	r3, #48	; 0x30
 8003eba:	2b09      	cmp	r3, #9
 8003ebc:	d94e      	bls.n	8003f5c <_vfiprintf_r+0x1c4>
 8003ebe:	b1b0      	cbz	r0, 8003eee <_vfiprintf_r+0x156>
 8003ec0:	9207      	str	r2, [sp, #28]
 8003ec2:	e014      	b.n	8003eee <_vfiprintf_r+0x156>
 8003ec4:	eba0 0308 	sub.w	r3, r0, r8
 8003ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	9304      	str	r3, [sp, #16]
 8003ed0:	46a2      	mov	sl, r4
 8003ed2:	e7d2      	b.n	8003e7a <_vfiprintf_r+0xe2>
 8003ed4:	9b03      	ldr	r3, [sp, #12]
 8003ed6:	1d19      	adds	r1, r3, #4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	9103      	str	r1, [sp, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bfbb      	ittet	lt
 8003ee0:	425b      	neglt	r3, r3
 8003ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8003ee6:	9307      	strge	r3, [sp, #28]
 8003ee8:	9307      	strlt	r3, [sp, #28]
 8003eea:	bfb8      	it	lt
 8003eec:	9204      	strlt	r2, [sp, #16]
 8003eee:	7823      	ldrb	r3, [r4, #0]
 8003ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8003ef2:	d10c      	bne.n	8003f0e <_vfiprintf_r+0x176>
 8003ef4:	7863      	ldrb	r3, [r4, #1]
 8003ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef8:	d135      	bne.n	8003f66 <_vfiprintf_r+0x1ce>
 8003efa:	9b03      	ldr	r3, [sp, #12]
 8003efc:	1d1a      	adds	r2, r3, #4
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	9203      	str	r2, [sp, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bfb8      	it	lt
 8003f06:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f0a:	3402      	adds	r4, #2
 8003f0c:	9305      	str	r3, [sp, #20]
 8003f0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ff4 <_vfiprintf_r+0x25c>
 8003f12:	7821      	ldrb	r1, [r4, #0]
 8003f14:	2203      	movs	r2, #3
 8003f16:	4650      	mov	r0, sl
 8003f18:	f7fc f95a 	bl	80001d0 <memchr>
 8003f1c:	b140      	cbz	r0, 8003f30 <_vfiprintf_r+0x198>
 8003f1e:	2340      	movs	r3, #64	; 0x40
 8003f20:	eba0 000a 	sub.w	r0, r0, sl
 8003f24:	fa03 f000 	lsl.w	r0, r3, r0
 8003f28:	9b04      	ldr	r3, [sp, #16]
 8003f2a:	4303      	orrs	r3, r0
 8003f2c:	3401      	adds	r4, #1
 8003f2e:	9304      	str	r3, [sp, #16]
 8003f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f34:	482c      	ldr	r0, [pc, #176]	; (8003fe8 <_vfiprintf_r+0x250>)
 8003f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f3a:	2206      	movs	r2, #6
 8003f3c:	f7fc f948 	bl	80001d0 <memchr>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d03f      	beq.n	8003fc4 <_vfiprintf_r+0x22c>
 8003f44:	4b29      	ldr	r3, [pc, #164]	; (8003fec <_vfiprintf_r+0x254>)
 8003f46:	bb1b      	cbnz	r3, 8003f90 <_vfiprintf_r+0x1f8>
 8003f48:	9b03      	ldr	r3, [sp, #12]
 8003f4a:	3307      	adds	r3, #7
 8003f4c:	f023 0307 	bic.w	r3, r3, #7
 8003f50:	3308      	adds	r3, #8
 8003f52:	9303      	str	r3, [sp, #12]
 8003f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f56:	443b      	add	r3, r7
 8003f58:	9309      	str	r3, [sp, #36]	; 0x24
 8003f5a:	e767      	b.n	8003e2c <_vfiprintf_r+0x94>
 8003f5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f60:	460c      	mov	r4, r1
 8003f62:	2001      	movs	r0, #1
 8003f64:	e7a5      	b.n	8003eb2 <_vfiprintf_r+0x11a>
 8003f66:	2300      	movs	r3, #0
 8003f68:	3401      	adds	r4, #1
 8003f6a:	9305      	str	r3, [sp, #20]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f04f 0c0a 	mov.w	ip, #10
 8003f72:	4620      	mov	r0, r4
 8003f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f78:	3a30      	subs	r2, #48	; 0x30
 8003f7a:	2a09      	cmp	r2, #9
 8003f7c:	d903      	bls.n	8003f86 <_vfiprintf_r+0x1ee>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0c5      	beq.n	8003f0e <_vfiprintf_r+0x176>
 8003f82:	9105      	str	r1, [sp, #20]
 8003f84:	e7c3      	b.n	8003f0e <_vfiprintf_r+0x176>
 8003f86:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e7f0      	b.n	8003f72 <_vfiprintf_r+0x1da>
 8003f90:	ab03      	add	r3, sp, #12
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	462a      	mov	r2, r5
 8003f96:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <_vfiprintf_r+0x258>)
 8003f98:	a904      	add	r1, sp, #16
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	f3af 8000 	nop.w
 8003fa0:	4607      	mov	r7, r0
 8003fa2:	1c78      	adds	r0, r7, #1
 8003fa4:	d1d6      	bne.n	8003f54 <_vfiprintf_r+0x1bc>
 8003fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fa8:	07d9      	lsls	r1, r3, #31
 8003faa:	d405      	bmi.n	8003fb8 <_vfiprintf_r+0x220>
 8003fac:	89ab      	ldrh	r3, [r5, #12]
 8003fae:	059a      	lsls	r2, r3, #22
 8003fb0:	d402      	bmi.n	8003fb8 <_vfiprintf_r+0x220>
 8003fb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fb4:	f000 fc45 	bl	8004842 <__retarget_lock_release_recursive>
 8003fb8:	89ab      	ldrh	r3, [r5, #12]
 8003fba:	065b      	lsls	r3, r3, #25
 8003fbc:	f53f af12 	bmi.w	8003de4 <_vfiprintf_r+0x4c>
 8003fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc2:	e711      	b.n	8003de8 <_vfiprintf_r+0x50>
 8003fc4:	ab03      	add	r3, sp, #12
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	462a      	mov	r2, r5
 8003fca:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <_vfiprintf_r+0x258>)
 8003fcc:	a904      	add	r1, sp, #16
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f000 f880 	bl	80040d4 <_printf_i>
 8003fd4:	e7e4      	b.n	8003fa0 <_vfiprintf_r+0x208>
 8003fd6:	bf00      	nop
 8003fd8:	08004c88 	.word	0x08004c88
 8003fdc:	08004ca8 	.word	0x08004ca8
 8003fe0:	08004c68 	.word	0x08004c68
 8003fe4:	08004c32 	.word	0x08004c32
 8003fe8:	08004c3c 	.word	0x08004c3c
 8003fec:	00000000 	.word	0x00000000
 8003ff0:	08003d73 	.word	0x08003d73
 8003ff4:	08004c38 	.word	0x08004c38

08003ff8 <_printf_common>:
 8003ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ffc:	4616      	mov	r6, r2
 8003ffe:	4699      	mov	r9, r3
 8004000:	688a      	ldr	r2, [r1, #8]
 8004002:	690b      	ldr	r3, [r1, #16]
 8004004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004008:	4293      	cmp	r3, r2
 800400a:	bfb8      	it	lt
 800400c:	4613      	movlt	r3, r2
 800400e:	6033      	str	r3, [r6, #0]
 8004010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004014:	4607      	mov	r7, r0
 8004016:	460c      	mov	r4, r1
 8004018:	b10a      	cbz	r2, 800401e <_printf_common+0x26>
 800401a:	3301      	adds	r3, #1
 800401c:	6033      	str	r3, [r6, #0]
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	0699      	lsls	r1, r3, #26
 8004022:	bf42      	ittt	mi
 8004024:	6833      	ldrmi	r3, [r6, #0]
 8004026:	3302      	addmi	r3, #2
 8004028:	6033      	strmi	r3, [r6, #0]
 800402a:	6825      	ldr	r5, [r4, #0]
 800402c:	f015 0506 	ands.w	r5, r5, #6
 8004030:	d106      	bne.n	8004040 <_printf_common+0x48>
 8004032:	f104 0a19 	add.w	sl, r4, #25
 8004036:	68e3      	ldr	r3, [r4, #12]
 8004038:	6832      	ldr	r2, [r6, #0]
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	42ab      	cmp	r3, r5
 800403e:	dc26      	bgt.n	800408e <_printf_common+0x96>
 8004040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004044:	1e13      	subs	r3, r2, #0
 8004046:	6822      	ldr	r2, [r4, #0]
 8004048:	bf18      	it	ne
 800404a:	2301      	movne	r3, #1
 800404c:	0692      	lsls	r2, r2, #26
 800404e:	d42b      	bmi.n	80040a8 <_printf_common+0xb0>
 8004050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004054:	4649      	mov	r1, r9
 8004056:	4638      	mov	r0, r7
 8004058:	47c0      	blx	r8
 800405a:	3001      	adds	r0, #1
 800405c:	d01e      	beq.n	800409c <_printf_common+0xa4>
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	68e5      	ldr	r5, [r4, #12]
 8004062:	6832      	ldr	r2, [r6, #0]
 8004064:	f003 0306 	and.w	r3, r3, #6
 8004068:	2b04      	cmp	r3, #4
 800406a:	bf08      	it	eq
 800406c:	1aad      	subeq	r5, r5, r2
 800406e:	68a3      	ldr	r3, [r4, #8]
 8004070:	6922      	ldr	r2, [r4, #16]
 8004072:	bf0c      	ite	eq
 8004074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004078:	2500      	movne	r5, #0
 800407a:	4293      	cmp	r3, r2
 800407c:	bfc4      	itt	gt
 800407e:	1a9b      	subgt	r3, r3, r2
 8004080:	18ed      	addgt	r5, r5, r3
 8004082:	2600      	movs	r6, #0
 8004084:	341a      	adds	r4, #26
 8004086:	42b5      	cmp	r5, r6
 8004088:	d11a      	bne.n	80040c0 <_printf_common+0xc8>
 800408a:	2000      	movs	r0, #0
 800408c:	e008      	b.n	80040a0 <_printf_common+0xa8>
 800408e:	2301      	movs	r3, #1
 8004090:	4652      	mov	r2, sl
 8004092:	4649      	mov	r1, r9
 8004094:	4638      	mov	r0, r7
 8004096:	47c0      	blx	r8
 8004098:	3001      	adds	r0, #1
 800409a:	d103      	bne.n	80040a4 <_printf_common+0xac>
 800409c:	f04f 30ff 	mov.w	r0, #4294967295
 80040a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a4:	3501      	adds	r5, #1
 80040a6:	e7c6      	b.n	8004036 <_printf_common+0x3e>
 80040a8:	18e1      	adds	r1, r4, r3
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	2030      	movs	r0, #48	; 0x30
 80040ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040b2:	4422      	add	r2, r4
 80040b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040bc:	3302      	adds	r3, #2
 80040be:	e7c7      	b.n	8004050 <_printf_common+0x58>
 80040c0:	2301      	movs	r3, #1
 80040c2:	4622      	mov	r2, r4
 80040c4:	4649      	mov	r1, r9
 80040c6:	4638      	mov	r0, r7
 80040c8:	47c0      	blx	r8
 80040ca:	3001      	adds	r0, #1
 80040cc:	d0e6      	beq.n	800409c <_printf_common+0xa4>
 80040ce:	3601      	adds	r6, #1
 80040d0:	e7d9      	b.n	8004086 <_printf_common+0x8e>
	...

080040d4 <_printf_i>:
 80040d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040d8:	7e0f      	ldrb	r7, [r1, #24]
 80040da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040dc:	2f78      	cmp	r7, #120	; 0x78
 80040de:	4691      	mov	r9, r2
 80040e0:	4680      	mov	r8, r0
 80040e2:	460c      	mov	r4, r1
 80040e4:	469a      	mov	sl, r3
 80040e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040ea:	d807      	bhi.n	80040fc <_printf_i+0x28>
 80040ec:	2f62      	cmp	r7, #98	; 0x62
 80040ee:	d80a      	bhi.n	8004106 <_printf_i+0x32>
 80040f0:	2f00      	cmp	r7, #0
 80040f2:	f000 80d8 	beq.w	80042a6 <_printf_i+0x1d2>
 80040f6:	2f58      	cmp	r7, #88	; 0x58
 80040f8:	f000 80a3 	beq.w	8004242 <_printf_i+0x16e>
 80040fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004104:	e03a      	b.n	800417c <_printf_i+0xa8>
 8004106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800410a:	2b15      	cmp	r3, #21
 800410c:	d8f6      	bhi.n	80040fc <_printf_i+0x28>
 800410e:	a101      	add	r1, pc, #4	; (adr r1, 8004114 <_printf_i+0x40>)
 8004110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004114:	0800416d 	.word	0x0800416d
 8004118:	08004181 	.word	0x08004181
 800411c:	080040fd 	.word	0x080040fd
 8004120:	080040fd 	.word	0x080040fd
 8004124:	080040fd 	.word	0x080040fd
 8004128:	080040fd 	.word	0x080040fd
 800412c:	08004181 	.word	0x08004181
 8004130:	080040fd 	.word	0x080040fd
 8004134:	080040fd 	.word	0x080040fd
 8004138:	080040fd 	.word	0x080040fd
 800413c:	080040fd 	.word	0x080040fd
 8004140:	0800428d 	.word	0x0800428d
 8004144:	080041b1 	.word	0x080041b1
 8004148:	0800426f 	.word	0x0800426f
 800414c:	080040fd 	.word	0x080040fd
 8004150:	080040fd 	.word	0x080040fd
 8004154:	080042af 	.word	0x080042af
 8004158:	080040fd 	.word	0x080040fd
 800415c:	080041b1 	.word	0x080041b1
 8004160:	080040fd 	.word	0x080040fd
 8004164:	080040fd 	.word	0x080040fd
 8004168:	08004277 	.word	0x08004277
 800416c:	682b      	ldr	r3, [r5, #0]
 800416e:	1d1a      	adds	r2, r3, #4
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	602a      	str	r2, [r5, #0]
 8004174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800417c:	2301      	movs	r3, #1
 800417e:	e0a3      	b.n	80042c8 <_printf_i+0x1f4>
 8004180:	6820      	ldr	r0, [r4, #0]
 8004182:	6829      	ldr	r1, [r5, #0]
 8004184:	0606      	lsls	r6, r0, #24
 8004186:	f101 0304 	add.w	r3, r1, #4
 800418a:	d50a      	bpl.n	80041a2 <_printf_i+0xce>
 800418c:	680e      	ldr	r6, [r1, #0]
 800418e:	602b      	str	r3, [r5, #0]
 8004190:	2e00      	cmp	r6, #0
 8004192:	da03      	bge.n	800419c <_printf_i+0xc8>
 8004194:	232d      	movs	r3, #45	; 0x2d
 8004196:	4276      	negs	r6, r6
 8004198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800419c:	485e      	ldr	r0, [pc, #376]	; (8004318 <_printf_i+0x244>)
 800419e:	230a      	movs	r3, #10
 80041a0:	e019      	b.n	80041d6 <_printf_i+0x102>
 80041a2:	680e      	ldr	r6, [r1, #0]
 80041a4:	602b      	str	r3, [r5, #0]
 80041a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041aa:	bf18      	it	ne
 80041ac:	b236      	sxthne	r6, r6
 80041ae:	e7ef      	b.n	8004190 <_printf_i+0xbc>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	6820      	ldr	r0, [r4, #0]
 80041b4:	1d19      	adds	r1, r3, #4
 80041b6:	6029      	str	r1, [r5, #0]
 80041b8:	0601      	lsls	r1, r0, #24
 80041ba:	d501      	bpl.n	80041c0 <_printf_i+0xec>
 80041bc:	681e      	ldr	r6, [r3, #0]
 80041be:	e002      	b.n	80041c6 <_printf_i+0xf2>
 80041c0:	0646      	lsls	r6, r0, #25
 80041c2:	d5fb      	bpl.n	80041bc <_printf_i+0xe8>
 80041c4:	881e      	ldrh	r6, [r3, #0]
 80041c6:	4854      	ldr	r0, [pc, #336]	; (8004318 <_printf_i+0x244>)
 80041c8:	2f6f      	cmp	r7, #111	; 0x6f
 80041ca:	bf0c      	ite	eq
 80041cc:	2308      	moveq	r3, #8
 80041ce:	230a      	movne	r3, #10
 80041d0:	2100      	movs	r1, #0
 80041d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041d6:	6865      	ldr	r5, [r4, #4]
 80041d8:	60a5      	str	r5, [r4, #8]
 80041da:	2d00      	cmp	r5, #0
 80041dc:	bfa2      	ittt	ge
 80041de:	6821      	ldrge	r1, [r4, #0]
 80041e0:	f021 0104 	bicge.w	r1, r1, #4
 80041e4:	6021      	strge	r1, [r4, #0]
 80041e6:	b90e      	cbnz	r6, 80041ec <_printf_i+0x118>
 80041e8:	2d00      	cmp	r5, #0
 80041ea:	d04d      	beq.n	8004288 <_printf_i+0x1b4>
 80041ec:	4615      	mov	r5, r2
 80041ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80041f2:	fb03 6711 	mls	r7, r3, r1, r6
 80041f6:	5dc7      	ldrb	r7, [r0, r7]
 80041f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041fc:	4637      	mov	r7, r6
 80041fe:	42bb      	cmp	r3, r7
 8004200:	460e      	mov	r6, r1
 8004202:	d9f4      	bls.n	80041ee <_printf_i+0x11a>
 8004204:	2b08      	cmp	r3, #8
 8004206:	d10b      	bne.n	8004220 <_printf_i+0x14c>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	07de      	lsls	r6, r3, #31
 800420c:	d508      	bpl.n	8004220 <_printf_i+0x14c>
 800420e:	6923      	ldr	r3, [r4, #16]
 8004210:	6861      	ldr	r1, [r4, #4]
 8004212:	4299      	cmp	r1, r3
 8004214:	bfde      	ittt	le
 8004216:	2330      	movle	r3, #48	; 0x30
 8004218:	f805 3c01 	strble.w	r3, [r5, #-1]
 800421c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004220:	1b52      	subs	r2, r2, r5
 8004222:	6122      	str	r2, [r4, #16]
 8004224:	f8cd a000 	str.w	sl, [sp]
 8004228:	464b      	mov	r3, r9
 800422a:	aa03      	add	r2, sp, #12
 800422c:	4621      	mov	r1, r4
 800422e:	4640      	mov	r0, r8
 8004230:	f7ff fee2 	bl	8003ff8 <_printf_common>
 8004234:	3001      	adds	r0, #1
 8004236:	d14c      	bne.n	80042d2 <_printf_i+0x1fe>
 8004238:	f04f 30ff 	mov.w	r0, #4294967295
 800423c:	b004      	add	sp, #16
 800423e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004242:	4835      	ldr	r0, [pc, #212]	; (8004318 <_printf_i+0x244>)
 8004244:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004248:	6829      	ldr	r1, [r5, #0]
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004250:	6029      	str	r1, [r5, #0]
 8004252:	061d      	lsls	r5, r3, #24
 8004254:	d514      	bpl.n	8004280 <_printf_i+0x1ac>
 8004256:	07df      	lsls	r7, r3, #31
 8004258:	bf44      	itt	mi
 800425a:	f043 0320 	orrmi.w	r3, r3, #32
 800425e:	6023      	strmi	r3, [r4, #0]
 8004260:	b91e      	cbnz	r6, 800426a <_printf_i+0x196>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	f023 0320 	bic.w	r3, r3, #32
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	2310      	movs	r3, #16
 800426c:	e7b0      	b.n	80041d0 <_printf_i+0xfc>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	f043 0320 	orr.w	r3, r3, #32
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	2378      	movs	r3, #120	; 0x78
 8004278:	4828      	ldr	r0, [pc, #160]	; (800431c <_printf_i+0x248>)
 800427a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800427e:	e7e3      	b.n	8004248 <_printf_i+0x174>
 8004280:	0659      	lsls	r1, r3, #25
 8004282:	bf48      	it	mi
 8004284:	b2b6      	uxthmi	r6, r6
 8004286:	e7e6      	b.n	8004256 <_printf_i+0x182>
 8004288:	4615      	mov	r5, r2
 800428a:	e7bb      	b.n	8004204 <_printf_i+0x130>
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	6826      	ldr	r6, [r4, #0]
 8004290:	6961      	ldr	r1, [r4, #20]
 8004292:	1d18      	adds	r0, r3, #4
 8004294:	6028      	str	r0, [r5, #0]
 8004296:	0635      	lsls	r5, r6, #24
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	d501      	bpl.n	80042a0 <_printf_i+0x1cc>
 800429c:	6019      	str	r1, [r3, #0]
 800429e:	e002      	b.n	80042a6 <_printf_i+0x1d2>
 80042a0:	0670      	lsls	r0, r6, #25
 80042a2:	d5fb      	bpl.n	800429c <_printf_i+0x1c8>
 80042a4:	8019      	strh	r1, [r3, #0]
 80042a6:	2300      	movs	r3, #0
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	4615      	mov	r5, r2
 80042ac:	e7ba      	b.n	8004224 <_printf_i+0x150>
 80042ae:	682b      	ldr	r3, [r5, #0]
 80042b0:	1d1a      	adds	r2, r3, #4
 80042b2:	602a      	str	r2, [r5, #0]
 80042b4:	681d      	ldr	r5, [r3, #0]
 80042b6:	6862      	ldr	r2, [r4, #4]
 80042b8:	2100      	movs	r1, #0
 80042ba:	4628      	mov	r0, r5
 80042bc:	f7fb ff88 	bl	80001d0 <memchr>
 80042c0:	b108      	cbz	r0, 80042c6 <_printf_i+0x1f2>
 80042c2:	1b40      	subs	r0, r0, r5
 80042c4:	6060      	str	r0, [r4, #4]
 80042c6:	6863      	ldr	r3, [r4, #4]
 80042c8:	6123      	str	r3, [r4, #16]
 80042ca:	2300      	movs	r3, #0
 80042cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042d0:	e7a8      	b.n	8004224 <_printf_i+0x150>
 80042d2:	6923      	ldr	r3, [r4, #16]
 80042d4:	462a      	mov	r2, r5
 80042d6:	4649      	mov	r1, r9
 80042d8:	4640      	mov	r0, r8
 80042da:	47d0      	blx	sl
 80042dc:	3001      	adds	r0, #1
 80042de:	d0ab      	beq.n	8004238 <_printf_i+0x164>
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	079b      	lsls	r3, r3, #30
 80042e4:	d413      	bmi.n	800430e <_printf_i+0x23a>
 80042e6:	68e0      	ldr	r0, [r4, #12]
 80042e8:	9b03      	ldr	r3, [sp, #12]
 80042ea:	4298      	cmp	r0, r3
 80042ec:	bfb8      	it	lt
 80042ee:	4618      	movlt	r0, r3
 80042f0:	e7a4      	b.n	800423c <_printf_i+0x168>
 80042f2:	2301      	movs	r3, #1
 80042f4:	4632      	mov	r2, r6
 80042f6:	4649      	mov	r1, r9
 80042f8:	4640      	mov	r0, r8
 80042fa:	47d0      	blx	sl
 80042fc:	3001      	adds	r0, #1
 80042fe:	d09b      	beq.n	8004238 <_printf_i+0x164>
 8004300:	3501      	adds	r5, #1
 8004302:	68e3      	ldr	r3, [r4, #12]
 8004304:	9903      	ldr	r1, [sp, #12]
 8004306:	1a5b      	subs	r3, r3, r1
 8004308:	42ab      	cmp	r3, r5
 800430a:	dcf2      	bgt.n	80042f2 <_printf_i+0x21e>
 800430c:	e7eb      	b.n	80042e6 <_printf_i+0x212>
 800430e:	2500      	movs	r5, #0
 8004310:	f104 0619 	add.w	r6, r4, #25
 8004314:	e7f5      	b.n	8004302 <_printf_i+0x22e>
 8004316:	bf00      	nop
 8004318:	08004c43 	.word	0x08004c43
 800431c:	08004c54 	.word	0x08004c54

08004320 <_sbrk_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	4d06      	ldr	r5, [pc, #24]	; (800433c <_sbrk_r+0x1c>)
 8004324:	2300      	movs	r3, #0
 8004326:	4604      	mov	r4, r0
 8004328:	4608      	mov	r0, r1
 800432a:	602b      	str	r3, [r5, #0]
 800432c:	f7fd fe7c 	bl	8002028 <_sbrk>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d102      	bne.n	800433a <_sbrk_r+0x1a>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	b103      	cbz	r3, 800433a <_sbrk_r+0x1a>
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	200027a8 	.word	0x200027a8

08004340 <__swbuf_r>:
 8004340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004342:	460e      	mov	r6, r1
 8004344:	4614      	mov	r4, r2
 8004346:	4605      	mov	r5, r0
 8004348:	b118      	cbz	r0, 8004352 <__swbuf_r+0x12>
 800434a:	6983      	ldr	r3, [r0, #24]
 800434c:	b90b      	cbnz	r3, 8004352 <__swbuf_r+0x12>
 800434e:	f000 f9d9 	bl	8004704 <__sinit>
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <__swbuf_r+0x98>)
 8004354:	429c      	cmp	r4, r3
 8004356:	d12b      	bne.n	80043b0 <__swbuf_r+0x70>
 8004358:	686c      	ldr	r4, [r5, #4]
 800435a:	69a3      	ldr	r3, [r4, #24]
 800435c:	60a3      	str	r3, [r4, #8]
 800435e:	89a3      	ldrh	r3, [r4, #12]
 8004360:	071a      	lsls	r2, r3, #28
 8004362:	d52f      	bpl.n	80043c4 <__swbuf_r+0x84>
 8004364:	6923      	ldr	r3, [r4, #16]
 8004366:	b36b      	cbz	r3, 80043c4 <__swbuf_r+0x84>
 8004368:	6923      	ldr	r3, [r4, #16]
 800436a:	6820      	ldr	r0, [r4, #0]
 800436c:	1ac0      	subs	r0, r0, r3
 800436e:	6963      	ldr	r3, [r4, #20]
 8004370:	b2f6      	uxtb	r6, r6
 8004372:	4283      	cmp	r3, r0
 8004374:	4637      	mov	r7, r6
 8004376:	dc04      	bgt.n	8004382 <__swbuf_r+0x42>
 8004378:	4621      	mov	r1, r4
 800437a:	4628      	mov	r0, r5
 800437c:	f000 f92e 	bl	80045dc <_fflush_r>
 8004380:	bb30      	cbnz	r0, 80043d0 <__swbuf_r+0x90>
 8004382:	68a3      	ldr	r3, [r4, #8]
 8004384:	3b01      	subs	r3, #1
 8004386:	60a3      	str	r3, [r4, #8]
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	6022      	str	r2, [r4, #0]
 800438e:	701e      	strb	r6, [r3, #0]
 8004390:	6963      	ldr	r3, [r4, #20]
 8004392:	3001      	adds	r0, #1
 8004394:	4283      	cmp	r3, r0
 8004396:	d004      	beq.n	80043a2 <__swbuf_r+0x62>
 8004398:	89a3      	ldrh	r3, [r4, #12]
 800439a:	07db      	lsls	r3, r3, #31
 800439c:	d506      	bpl.n	80043ac <__swbuf_r+0x6c>
 800439e:	2e0a      	cmp	r6, #10
 80043a0:	d104      	bne.n	80043ac <__swbuf_r+0x6c>
 80043a2:	4621      	mov	r1, r4
 80043a4:	4628      	mov	r0, r5
 80043a6:	f000 f919 	bl	80045dc <_fflush_r>
 80043aa:	b988      	cbnz	r0, 80043d0 <__swbuf_r+0x90>
 80043ac:	4638      	mov	r0, r7
 80043ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <__swbuf_r+0x9c>)
 80043b2:	429c      	cmp	r4, r3
 80043b4:	d101      	bne.n	80043ba <__swbuf_r+0x7a>
 80043b6:	68ac      	ldr	r4, [r5, #8]
 80043b8:	e7cf      	b.n	800435a <__swbuf_r+0x1a>
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <__swbuf_r+0xa0>)
 80043bc:	429c      	cmp	r4, r3
 80043be:	bf08      	it	eq
 80043c0:	68ec      	ldreq	r4, [r5, #12]
 80043c2:	e7ca      	b.n	800435a <__swbuf_r+0x1a>
 80043c4:	4621      	mov	r1, r4
 80043c6:	4628      	mov	r0, r5
 80043c8:	f000 f80c 	bl	80043e4 <__swsetup_r>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d0cb      	beq.n	8004368 <__swbuf_r+0x28>
 80043d0:	f04f 37ff 	mov.w	r7, #4294967295
 80043d4:	e7ea      	b.n	80043ac <__swbuf_r+0x6c>
 80043d6:	bf00      	nop
 80043d8:	08004c88 	.word	0x08004c88
 80043dc:	08004ca8 	.word	0x08004ca8
 80043e0:	08004c68 	.word	0x08004c68

080043e4 <__swsetup_r>:
 80043e4:	4b32      	ldr	r3, [pc, #200]	; (80044b0 <__swsetup_r+0xcc>)
 80043e6:	b570      	push	{r4, r5, r6, lr}
 80043e8:	681d      	ldr	r5, [r3, #0]
 80043ea:	4606      	mov	r6, r0
 80043ec:	460c      	mov	r4, r1
 80043ee:	b125      	cbz	r5, 80043fa <__swsetup_r+0x16>
 80043f0:	69ab      	ldr	r3, [r5, #24]
 80043f2:	b913      	cbnz	r3, 80043fa <__swsetup_r+0x16>
 80043f4:	4628      	mov	r0, r5
 80043f6:	f000 f985 	bl	8004704 <__sinit>
 80043fa:	4b2e      	ldr	r3, [pc, #184]	; (80044b4 <__swsetup_r+0xd0>)
 80043fc:	429c      	cmp	r4, r3
 80043fe:	d10f      	bne.n	8004420 <__swsetup_r+0x3c>
 8004400:	686c      	ldr	r4, [r5, #4]
 8004402:	89a3      	ldrh	r3, [r4, #12]
 8004404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004408:	0719      	lsls	r1, r3, #28
 800440a:	d42c      	bmi.n	8004466 <__swsetup_r+0x82>
 800440c:	06dd      	lsls	r5, r3, #27
 800440e:	d411      	bmi.n	8004434 <__swsetup_r+0x50>
 8004410:	2309      	movs	r3, #9
 8004412:	6033      	str	r3, [r6, #0]
 8004414:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004418:	81a3      	strh	r3, [r4, #12]
 800441a:	f04f 30ff 	mov.w	r0, #4294967295
 800441e:	e03e      	b.n	800449e <__swsetup_r+0xba>
 8004420:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <__swsetup_r+0xd4>)
 8004422:	429c      	cmp	r4, r3
 8004424:	d101      	bne.n	800442a <__swsetup_r+0x46>
 8004426:	68ac      	ldr	r4, [r5, #8]
 8004428:	e7eb      	b.n	8004402 <__swsetup_r+0x1e>
 800442a:	4b24      	ldr	r3, [pc, #144]	; (80044bc <__swsetup_r+0xd8>)
 800442c:	429c      	cmp	r4, r3
 800442e:	bf08      	it	eq
 8004430:	68ec      	ldreq	r4, [r5, #12]
 8004432:	e7e6      	b.n	8004402 <__swsetup_r+0x1e>
 8004434:	0758      	lsls	r0, r3, #29
 8004436:	d512      	bpl.n	800445e <__swsetup_r+0x7a>
 8004438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800443a:	b141      	cbz	r1, 800444e <__swsetup_r+0x6a>
 800443c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004440:	4299      	cmp	r1, r3
 8004442:	d002      	beq.n	800444a <__swsetup_r+0x66>
 8004444:	4630      	mov	r0, r6
 8004446:	f7ff fb9d 	bl	8003b84 <_free_r>
 800444a:	2300      	movs	r3, #0
 800444c:	6363      	str	r3, [r4, #52]	; 0x34
 800444e:	89a3      	ldrh	r3, [r4, #12]
 8004450:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004454:	81a3      	strh	r3, [r4, #12]
 8004456:	2300      	movs	r3, #0
 8004458:	6063      	str	r3, [r4, #4]
 800445a:	6923      	ldr	r3, [r4, #16]
 800445c:	6023      	str	r3, [r4, #0]
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	f043 0308 	orr.w	r3, r3, #8
 8004464:	81a3      	strh	r3, [r4, #12]
 8004466:	6923      	ldr	r3, [r4, #16]
 8004468:	b94b      	cbnz	r3, 800447e <__swsetup_r+0x9a>
 800446a:	89a3      	ldrh	r3, [r4, #12]
 800446c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004474:	d003      	beq.n	800447e <__swsetup_r+0x9a>
 8004476:	4621      	mov	r1, r4
 8004478:	4630      	mov	r0, r6
 800447a:	f000 fa09 	bl	8004890 <__smakebuf_r>
 800447e:	89a0      	ldrh	r0, [r4, #12]
 8004480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004484:	f010 0301 	ands.w	r3, r0, #1
 8004488:	d00a      	beq.n	80044a0 <__swsetup_r+0xbc>
 800448a:	2300      	movs	r3, #0
 800448c:	60a3      	str	r3, [r4, #8]
 800448e:	6963      	ldr	r3, [r4, #20]
 8004490:	425b      	negs	r3, r3
 8004492:	61a3      	str	r3, [r4, #24]
 8004494:	6923      	ldr	r3, [r4, #16]
 8004496:	b943      	cbnz	r3, 80044aa <__swsetup_r+0xc6>
 8004498:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800449c:	d1ba      	bne.n	8004414 <__swsetup_r+0x30>
 800449e:	bd70      	pop	{r4, r5, r6, pc}
 80044a0:	0781      	lsls	r1, r0, #30
 80044a2:	bf58      	it	pl
 80044a4:	6963      	ldrpl	r3, [r4, #20]
 80044a6:	60a3      	str	r3, [r4, #8]
 80044a8:	e7f4      	b.n	8004494 <__swsetup_r+0xb0>
 80044aa:	2000      	movs	r0, #0
 80044ac:	e7f7      	b.n	800449e <__swsetup_r+0xba>
 80044ae:	bf00      	nop
 80044b0:	20002688 	.word	0x20002688
 80044b4:	08004c88 	.word	0x08004c88
 80044b8:	08004ca8 	.word	0x08004ca8
 80044bc:	08004c68 	.word	0x08004c68

080044c0 <abort>:
 80044c0:	b508      	push	{r3, lr}
 80044c2:	2006      	movs	r0, #6
 80044c4:	f000 fa58 	bl	8004978 <raise>
 80044c8:	2001      	movs	r0, #1
 80044ca:	f7fd fd35 	bl	8001f38 <_exit>
	...

080044d0 <__sflush_r>:
 80044d0:	898a      	ldrh	r2, [r1, #12]
 80044d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d6:	4605      	mov	r5, r0
 80044d8:	0710      	lsls	r0, r2, #28
 80044da:	460c      	mov	r4, r1
 80044dc:	d458      	bmi.n	8004590 <__sflush_r+0xc0>
 80044de:	684b      	ldr	r3, [r1, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	dc05      	bgt.n	80044f0 <__sflush_r+0x20>
 80044e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	dc02      	bgt.n	80044f0 <__sflush_r+0x20>
 80044ea:	2000      	movs	r0, #0
 80044ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044f2:	2e00      	cmp	r6, #0
 80044f4:	d0f9      	beq.n	80044ea <__sflush_r+0x1a>
 80044f6:	2300      	movs	r3, #0
 80044f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044fc:	682f      	ldr	r7, [r5, #0]
 80044fe:	602b      	str	r3, [r5, #0]
 8004500:	d032      	beq.n	8004568 <__sflush_r+0x98>
 8004502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004504:	89a3      	ldrh	r3, [r4, #12]
 8004506:	075a      	lsls	r2, r3, #29
 8004508:	d505      	bpl.n	8004516 <__sflush_r+0x46>
 800450a:	6863      	ldr	r3, [r4, #4]
 800450c:	1ac0      	subs	r0, r0, r3
 800450e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004510:	b10b      	cbz	r3, 8004516 <__sflush_r+0x46>
 8004512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004514:	1ac0      	subs	r0, r0, r3
 8004516:	2300      	movs	r3, #0
 8004518:	4602      	mov	r2, r0
 800451a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800451c:	6a21      	ldr	r1, [r4, #32]
 800451e:	4628      	mov	r0, r5
 8004520:	47b0      	blx	r6
 8004522:	1c43      	adds	r3, r0, #1
 8004524:	89a3      	ldrh	r3, [r4, #12]
 8004526:	d106      	bne.n	8004536 <__sflush_r+0x66>
 8004528:	6829      	ldr	r1, [r5, #0]
 800452a:	291d      	cmp	r1, #29
 800452c:	d82c      	bhi.n	8004588 <__sflush_r+0xb8>
 800452e:	4a2a      	ldr	r2, [pc, #168]	; (80045d8 <__sflush_r+0x108>)
 8004530:	40ca      	lsrs	r2, r1
 8004532:	07d6      	lsls	r6, r2, #31
 8004534:	d528      	bpl.n	8004588 <__sflush_r+0xb8>
 8004536:	2200      	movs	r2, #0
 8004538:	6062      	str	r2, [r4, #4]
 800453a:	04d9      	lsls	r1, r3, #19
 800453c:	6922      	ldr	r2, [r4, #16]
 800453e:	6022      	str	r2, [r4, #0]
 8004540:	d504      	bpl.n	800454c <__sflush_r+0x7c>
 8004542:	1c42      	adds	r2, r0, #1
 8004544:	d101      	bne.n	800454a <__sflush_r+0x7a>
 8004546:	682b      	ldr	r3, [r5, #0]
 8004548:	b903      	cbnz	r3, 800454c <__sflush_r+0x7c>
 800454a:	6560      	str	r0, [r4, #84]	; 0x54
 800454c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800454e:	602f      	str	r7, [r5, #0]
 8004550:	2900      	cmp	r1, #0
 8004552:	d0ca      	beq.n	80044ea <__sflush_r+0x1a>
 8004554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004558:	4299      	cmp	r1, r3
 800455a:	d002      	beq.n	8004562 <__sflush_r+0x92>
 800455c:	4628      	mov	r0, r5
 800455e:	f7ff fb11 	bl	8003b84 <_free_r>
 8004562:	2000      	movs	r0, #0
 8004564:	6360      	str	r0, [r4, #52]	; 0x34
 8004566:	e7c1      	b.n	80044ec <__sflush_r+0x1c>
 8004568:	6a21      	ldr	r1, [r4, #32]
 800456a:	2301      	movs	r3, #1
 800456c:	4628      	mov	r0, r5
 800456e:	47b0      	blx	r6
 8004570:	1c41      	adds	r1, r0, #1
 8004572:	d1c7      	bne.n	8004504 <__sflush_r+0x34>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0c4      	beq.n	8004504 <__sflush_r+0x34>
 800457a:	2b1d      	cmp	r3, #29
 800457c:	d001      	beq.n	8004582 <__sflush_r+0xb2>
 800457e:	2b16      	cmp	r3, #22
 8004580:	d101      	bne.n	8004586 <__sflush_r+0xb6>
 8004582:	602f      	str	r7, [r5, #0]
 8004584:	e7b1      	b.n	80044ea <__sflush_r+0x1a>
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800458c:	81a3      	strh	r3, [r4, #12]
 800458e:	e7ad      	b.n	80044ec <__sflush_r+0x1c>
 8004590:	690f      	ldr	r7, [r1, #16]
 8004592:	2f00      	cmp	r7, #0
 8004594:	d0a9      	beq.n	80044ea <__sflush_r+0x1a>
 8004596:	0793      	lsls	r3, r2, #30
 8004598:	680e      	ldr	r6, [r1, #0]
 800459a:	bf08      	it	eq
 800459c:	694b      	ldreq	r3, [r1, #20]
 800459e:	600f      	str	r7, [r1, #0]
 80045a0:	bf18      	it	ne
 80045a2:	2300      	movne	r3, #0
 80045a4:	eba6 0807 	sub.w	r8, r6, r7
 80045a8:	608b      	str	r3, [r1, #8]
 80045aa:	f1b8 0f00 	cmp.w	r8, #0
 80045ae:	dd9c      	ble.n	80044ea <__sflush_r+0x1a>
 80045b0:	6a21      	ldr	r1, [r4, #32]
 80045b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045b4:	4643      	mov	r3, r8
 80045b6:	463a      	mov	r2, r7
 80045b8:	4628      	mov	r0, r5
 80045ba:	47b0      	blx	r6
 80045bc:	2800      	cmp	r0, #0
 80045be:	dc06      	bgt.n	80045ce <__sflush_r+0xfe>
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c6:	81a3      	strh	r3, [r4, #12]
 80045c8:	f04f 30ff 	mov.w	r0, #4294967295
 80045cc:	e78e      	b.n	80044ec <__sflush_r+0x1c>
 80045ce:	4407      	add	r7, r0
 80045d0:	eba8 0800 	sub.w	r8, r8, r0
 80045d4:	e7e9      	b.n	80045aa <__sflush_r+0xda>
 80045d6:	bf00      	nop
 80045d8:	20400001 	.word	0x20400001

080045dc <_fflush_r>:
 80045dc:	b538      	push	{r3, r4, r5, lr}
 80045de:	690b      	ldr	r3, [r1, #16]
 80045e0:	4605      	mov	r5, r0
 80045e2:	460c      	mov	r4, r1
 80045e4:	b913      	cbnz	r3, 80045ec <_fflush_r+0x10>
 80045e6:	2500      	movs	r5, #0
 80045e8:	4628      	mov	r0, r5
 80045ea:	bd38      	pop	{r3, r4, r5, pc}
 80045ec:	b118      	cbz	r0, 80045f6 <_fflush_r+0x1a>
 80045ee:	6983      	ldr	r3, [r0, #24]
 80045f0:	b90b      	cbnz	r3, 80045f6 <_fflush_r+0x1a>
 80045f2:	f000 f887 	bl	8004704 <__sinit>
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <_fflush_r+0x6c>)
 80045f8:	429c      	cmp	r4, r3
 80045fa:	d11b      	bne.n	8004634 <_fflush_r+0x58>
 80045fc:	686c      	ldr	r4, [r5, #4]
 80045fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0ef      	beq.n	80045e6 <_fflush_r+0xa>
 8004606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004608:	07d0      	lsls	r0, r2, #31
 800460a:	d404      	bmi.n	8004616 <_fflush_r+0x3a>
 800460c:	0599      	lsls	r1, r3, #22
 800460e:	d402      	bmi.n	8004616 <_fflush_r+0x3a>
 8004610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004612:	f000 f915 	bl	8004840 <__retarget_lock_acquire_recursive>
 8004616:	4628      	mov	r0, r5
 8004618:	4621      	mov	r1, r4
 800461a:	f7ff ff59 	bl	80044d0 <__sflush_r>
 800461e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004620:	07da      	lsls	r2, r3, #31
 8004622:	4605      	mov	r5, r0
 8004624:	d4e0      	bmi.n	80045e8 <_fflush_r+0xc>
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	059b      	lsls	r3, r3, #22
 800462a:	d4dd      	bmi.n	80045e8 <_fflush_r+0xc>
 800462c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800462e:	f000 f908 	bl	8004842 <__retarget_lock_release_recursive>
 8004632:	e7d9      	b.n	80045e8 <_fflush_r+0xc>
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <_fflush_r+0x70>)
 8004636:	429c      	cmp	r4, r3
 8004638:	d101      	bne.n	800463e <_fflush_r+0x62>
 800463a:	68ac      	ldr	r4, [r5, #8]
 800463c:	e7df      	b.n	80045fe <_fflush_r+0x22>
 800463e:	4b04      	ldr	r3, [pc, #16]	; (8004650 <_fflush_r+0x74>)
 8004640:	429c      	cmp	r4, r3
 8004642:	bf08      	it	eq
 8004644:	68ec      	ldreq	r4, [r5, #12]
 8004646:	e7da      	b.n	80045fe <_fflush_r+0x22>
 8004648:	08004c88 	.word	0x08004c88
 800464c:	08004ca8 	.word	0x08004ca8
 8004650:	08004c68 	.word	0x08004c68

08004654 <std>:
 8004654:	2300      	movs	r3, #0
 8004656:	b510      	push	{r4, lr}
 8004658:	4604      	mov	r4, r0
 800465a:	e9c0 3300 	strd	r3, r3, [r0]
 800465e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004662:	6083      	str	r3, [r0, #8]
 8004664:	8181      	strh	r1, [r0, #12]
 8004666:	6643      	str	r3, [r0, #100]	; 0x64
 8004668:	81c2      	strh	r2, [r0, #14]
 800466a:	6183      	str	r3, [r0, #24]
 800466c:	4619      	mov	r1, r3
 800466e:	2208      	movs	r2, #8
 8004670:	305c      	adds	r0, #92	; 0x5c
 8004672:	f7ff fa09 	bl	8003a88 <memset>
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <std+0x38>)
 8004678:	6263      	str	r3, [r4, #36]	; 0x24
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <std+0x3c>)
 800467c:	62a3      	str	r3, [r4, #40]	; 0x28
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <std+0x40>)
 8004680:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <std+0x44>)
 8004684:	6224      	str	r4, [r4, #32]
 8004686:	6323      	str	r3, [r4, #48]	; 0x30
 8004688:	bd10      	pop	{r4, pc}
 800468a:	bf00      	nop
 800468c:	080049b1 	.word	0x080049b1
 8004690:	080049d3 	.word	0x080049d3
 8004694:	08004a0b 	.word	0x08004a0b
 8004698:	08004a2f 	.word	0x08004a2f

0800469c <_cleanup_r>:
 800469c:	4901      	ldr	r1, [pc, #4]	; (80046a4 <_cleanup_r+0x8>)
 800469e:	f000 b8af 	b.w	8004800 <_fwalk_reent>
 80046a2:	bf00      	nop
 80046a4:	080045dd 	.word	0x080045dd

080046a8 <__sfmoreglue>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	2268      	movs	r2, #104	; 0x68
 80046ac:	1e4d      	subs	r5, r1, #1
 80046ae:	4355      	muls	r5, r2
 80046b0:	460e      	mov	r6, r1
 80046b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046b6:	f7ff fad1 	bl	8003c5c <_malloc_r>
 80046ba:	4604      	mov	r4, r0
 80046bc:	b140      	cbz	r0, 80046d0 <__sfmoreglue+0x28>
 80046be:	2100      	movs	r1, #0
 80046c0:	e9c0 1600 	strd	r1, r6, [r0]
 80046c4:	300c      	adds	r0, #12
 80046c6:	60a0      	str	r0, [r4, #8]
 80046c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046cc:	f7ff f9dc 	bl	8003a88 <memset>
 80046d0:	4620      	mov	r0, r4
 80046d2:	bd70      	pop	{r4, r5, r6, pc}

080046d4 <__sfp_lock_acquire>:
 80046d4:	4801      	ldr	r0, [pc, #4]	; (80046dc <__sfp_lock_acquire+0x8>)
 80046d6:	f000 b8b3 	b.w	8004840 <__retarget_lock_acquire_recursive>
 80046da:	bf00      	nop
 80046dc:	200027a5 	.word	0x200027a5

080046e0 <__sfp_lock_release>:
 80046e0:	4801      	ldr	r0, [pc, #4]	; (80046e8 <__sfp_lock_release+0x8>)
 80046e2:	f000 b8ae 	b.w	8004842 <__retarget_lock_release_recursive>
 80046e6:	bf00      	nop
 80046e8:	200027a5 	.word	0x200027a5

080046ec <__sinit_lock_acquire>:
 80046ec:	4801      	ldr	r0, [pc, #4]	; (80046f4 <__sinit_lock_acquire+0x8>)
 80046ee:	f000 b8a7 	b.w	8004840 <__retarget_lock_acquire_recursive>
 80046f2:	bf00      	nop
 80046f4:	200027a6 	.word	0x200027a6

080046f8 <__sinit_lock_release>:
 80046f8:	4801      	ldr	r0, [pc, #4]	; (8004700 <__sinit_lock_release+0x8>)
 80046fa:	f000 b8a2 	b.w	8004842 <__retarget_lock_release_recursive>
 80046fe:	bf00      	nop
 8004700:	200027a6 	.word	0x200027a6

08004704 <__sinit>:
 8004704:	b510      	push	{r4, lr}
 8004706:	4604      	mov	r4, r0
 8004708:	f7ff fff0 	bl	80046ec <__sinit_lock_acquire>
 800470c:	69a3      	ldr	r3, [r4, #24]
 800470e:	b11b      	cbz	r3, 8004718 <__sinit+0x14>
 8004710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004714:	f7ff bff0 	b.w	80046f8 <__sinit_lock_release>
 8004718:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800471c:	6523      	str	r3, [r4, #80]	; 0x50
 800471e:	4b13      	ldr	r3, [pc, #76]	; (800476c <__sinit+0x68>)
 8004720:	4a13      	ldr	r2, [pc, #76]	; (8004770 <__sinit+0x6c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	62a2      	str	r2, [r4, #40]	; 0x28
 8004726:	42a3      	cmp	r3, r4
 8004728:	bf04      	itt	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	61a3      	streq	r3, [r4, #24]
 800472e:	4620      	mov	r0, r4
 8004730:	f000 f820 	bl	8004774 <__sfp>
 8004734:	6060      	str	r0, [r4, #4]
 8004736:	4620      	mov	r0, r4
 8004738:	f000 f81c 	bl	8004774 <__sfp>
 800473c:	60a0      	str	r0, [r4, #8]
 800473e:	4620      	mov	r0, r4
 8004740:	f000 f818 	bl	8004774 <__sfp>
 8004744:	2200      	movs	r2, #0
 8004746:	60e0      	str	r0, [r4, #12]
 8004748:	2104      	movs	r1, #4
 800474a:	6860      	ldr	r0, [r4, #4]
 800474c:	f7ff ff82 	bl	8004654 <std>
 8004750:	68a0      	ldr	r0, [r4, #8]
 8004752:	2201      	movs	r2, #1
 8004754:	2109      	movs	r1, #9
 8004756:	f7ff ff7d 	bl	8004654 <std>
 800475a:	68e0      	ldr	r0, [r4, #12]
 800475c:	2202      	movs	r2, #2
 800475e:	2112      	movs	r1, #18
 8004760:	f7ff ff78 	bl	8004654 <std>
 8004764:	2301      	movs	r3, #1
 8004766:	61a3      	str	r3, [r4, #24]
 8004768:	e7d2      	b.n	8004710 <__sinit+0xc>
 800476a:	bf00      	nop
 800476c:	08004b80 	.word	0x08004b80
 8004770:	0800469d 	.word	0x0800469d

08004774 <__sfp>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	4607      	mov	r7, r0
 8004778:	f7ff ffac 	bl	80046d4 <__sfp_lock_acquire>
 800477c:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <__sfp+0x84>)
 800477e:	681e      	ldr	r6, [r3, #0]
 8004780:	69b3      	ldr	r3, [r6, #24]
 8004782:	b913      	cbnz	r3, 800478a <__sfp+0x16>
 8004784:	4630      	mov	r0, r6
 8004786:	f7ff ffbd 	bl	8004704 <__sinit>
 800478a:	3648      	adds	r6, #72	; 0x48
 800478c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004790:	3b01      	subs	r3, #1
 8004792:	d503      	bpl.n	800479c <__sfp+0x28>
 8004794:	6833      	ldr	r3, [r6, #0]
 8004796:	b30b      	cbz	r3, 80047dc <__sfp+0x68>
 8004798:	6836      	ldr	r6, [r6, #0]
 800479a:	e7f7      	b.n	800478c <__sfp+0x18>
 800479c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80047a0:	b9d5      	cbnz	r5, 80047d8 <__sfp+0x64>
 80047a2:	4b16      	ldr	r3, [pc, #88]	; (80047fc <__sfp+0x88>)
 80047a4:	60e3      	str	r3, [r4, #12]
 80047a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80047aa:	6665      	str	r5, [r4, #100]	; 0x64
 80047ac:	f000 f847 	bl	800483e <__retarget_lock_init_recursive>
 80047b0:	f7ff ff96 	bl	80046e0 <__sfp_lock_release>
 80047b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80047b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80047bc:	6025      	str	r5, [r4, #0]
 80047be:	61a5      	str	r5, [r4, #24]
 80047c0:	2208      	movs	r2, #8
 80047c2:	4629      	mov	r1, r5
 80047c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047c8:	f7ff f95e 	bl	8003a88 <memset>
 80047cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047d4:	4620      	mov	r0, r4
 80047d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d8:	3468      	adds	r4, #104	; 0x68
 80047da:	e7d9      	b.n	8004790 <__sfp+0x1c>
 80047dc:	2104      	movs	r1, #4
 80047de:	4638      	mov	r0, r7
 80047e0:	f7ff ff62 	bl	80046a8 <__sfmoreglue>
 80047e4:	4604      	mov	r4, r0
 80047e6:	6030      	str	r0, [r6, #0]
 80047e8:	2800      	cmp	r0, #0
 80047ea:	d1d5      	bne.n	8004798 <__sfp+0x24>
 80047ec:	f7ff ff78 	bl	80046e0 <__sfp_lock_release>
 80047f0:	230c      	movs	r3, #12
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	e7ee      	b.n	80047d4 <__sfp+0x60>
 80047f6:	bf00      	nop
 80047f8:	08004b80 	.word	0x08004b80
 80047fc:	ffff0001 	.word	0xffff0001

08004800 <_fwalk_reent>:
 8004800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004804:	4606      	mov	r6, r0
 8004806:	4688      	mov	r8, r1
 8004808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800480c:	2700      	movs	r7, #0
 800480e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004812:	f1b9 0901 	subs.w	r9, r9, #1
 8004816:	d505      	bpl.n	8004824 <_fwalk_reent+0x24>
 8004818:	6824      	ldr	r4, [r4, #0]
 800481a:	2c00      	cmp	r4, #0
 800481c:	d1f7      	bne.n	800480e <_fwalk_reent+0xe>
 800481e:	4638      	mov	r0, r7
 8004820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004824:	89ab      	ldrh	r3, [r5, #12]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d907      	bls.n	800483a <_fwalk_reent+0x3a>
 800482a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800482e:	3301      	adds	r3, #1
 8004830:	d003      	beq.n	800483a <_fwalk_reent+0x3a>
 8004832:	4629      	mov	r1, r5
 8004834:	4630      	mov	r0, r6
 8004836:	47c0      	blx	r8
 8004838:	4307      	orrs	r7, r0
 800483a:	3568      	adds	r5, #104	; 0x68
 800483c:	e7e9      	b.n	8004812 <_fwalk_reent+0x12>

0800483e <__retarget_lock_init_recursive>:
 800483e:	4770      	bx	lr

08004840 <__retarget_lock_acquire_recursive>:
 8004840:	4770      	bx	lr

08004842 <__retarget_lock_release_recursive>:
 8004842:	4770      	bx	lr

08004844 <__swhatbuf_r>:
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	460e      	mov	r6, r1
 8004848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484c:	2900      	cmp	r1, #0
 800484e:	b096      	sub	sp, #88	; 0x58
 8004850:	4614      	mov	r4, r2
 8004852:	461d      	mov	r5, r3
 8004854:	da08      	bge.n	8004868 <__swhatbuf_r+0x24>
 8004856:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	602a      	str	r2, [r5, #0]
 800485e:	061a      	lsls	r2, r3, #24
 8004860:	d410      	bmi.n	8004884 <__swhatbuf_r+0x40>
 8004862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004866:	e00e      	b.n	8004886 <__swhatbuf_r+0x42>
 8004868:	466a      	mov	r2, sp
 800486a:	f000 f907 	bl	8004a7c <_fstat_r>
 800486e:	2800      	cmp	r0, #0
 8004870:	dbf1      	blt.n	8004856 <__swhatbuf_r+0x12>
 8004872:	9a01      	ldr	r2, [sp, #4]
 8004874:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004878:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800487c:	425a      	negs	r2, r3
 800487e:	415a      	adcs	r2, r3
 8004880:	602a      	str	r2, [r5, #0]
 8004882:	e7ee      	b.n	8004862 <__swhatbuf_r+0x1e>
 8004884:	2340      	movs	r3, #64	; 0x40
 8004886:	2000      	movs	r0, #0
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	b016      	add	sp, #88	; 0x58
 800488c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004890 <__smakebuf_r>:
 8004890:	898b      	ldrh	r3, [r1, #12]
 8004892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004894:	079d      	lsls	r5, r3, #30
 8004896:	4606      	mov	r6, r0
 8004898:	460c      	mov	r4, r1
 800489a:	d507      	bpl.n	80048ac <__smakebuf_r+0x1c>
 800489c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	6123      	str	r3, [r4, #16]
 80048a4:	2301      	movs	r3, #1
 80048a6:	6163      	str	r3, [r4, #20]
 80048a8:	b002      	add	sp, #8
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	ab01      	add	r3, sp, #4
 80048ae:	466a      	mov	r2, sp
 80048b0:	f7ff ffc8 	bl	8004844 <__swhatbuf_r>
 80048b4:	9900      	ldr	r1, [sp, #0]
 80048b6:	4605      	mov	r5, r0
 80048b8:	4630      	mov	r0, r6
 80048ba:	f7ff f9cf 	bl	8003c5c <_malloc_r>
 80048be:	b948      	cbnz	r0, 80048d4 <__smakebuf_r+0x44>
 80048c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048c4:	059a      	lsls	r2, r3, #22
 80048c6:	d4ef      	bmi.n	80048a8 <__smakebuf_r+0x18>
 80048c8:	f023 0303 	bic.w	r3, r3, #3
 80048cc:	f043 0302 	orr.w	r3, r3, #2
 80048d0:	81a3      	strh	r3, [r4, #12]
 80048d2:	e7e3      	b.n	800489c <__smakebuf_r+0xc>
 80048d4:	4b0d      	ldr	r3, [pc, #52]	; (800490c <__smakebuf_r+0x7c>)
 80048d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	6020      	str	r0, [r4, #0]
 80048dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e0:	81a3      	strh	r3, [r4, #12]
 80048e2:	9b00      	ldr	r3, [sp, #0]
 80048e4:	6163      	str	r3, [r4, #20]
 80048e6:	9b01      	ldr	r3, [sp, #4]
 80048e8:	6120      	str	r0, [r4, #16]
 80048ea:	b15b      	cbz	r3, 8004904 <__smakebuf_r+0x74>
 80048ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048f0:	4630      	mov	r0, r6
 80048f2:	f000 f8d5 	bl	8004aa0 <_isatty_r>
 80048f6:	b128      	cbz	r0, 8004904 <__smakebuf_r+0x74>
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	f023 0303 	bic.w	r3, r3, #3
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	81a3      	strh	r3, [r4, #12]
 8004904:	89a0      	ldrh	r0, [r4, #12]
 8004906:	4305      	orrs	r5, r0
 8004908:	81a5      	strh	r5, [r4, #12]
 800490a:	e7cd      	b.n	80048a8 <__smakebuf_r+0x18>
 800490c:	0800469d 	.word	0x0800469d

08004910 <__malloc_lock>:
 8004910:	4801      	ldr	r0, [pc, #4]	; (8004918 <__malloc_lock+0x8>)
 8004912:	f7ff bf95 	b.w	8004840 <__retarget_lock_acquire_recursive>
 8004916:	bf00      	nop
 8004918:	200027a4 	.word	0x200027a4

0800491c <__malloc_unlock>:
 800491c:	4801      	ldr	r0, [pc, #4]	; (8004924 <__malloc_unlock+0x8>)
 800491e:	f7ff bf90 	b.w	8004842 <__retarget_lock_release_recursive>
 8004922:	bf00      	nop
 8004924:	200027a4 	.word	0x200027a4

08004928 <_raise_r>:
 8004928:	291f      	cmp	r1, #31
 800492a:	b538      	push	{r3, r4, r5, lr}
 800492c:	4604      	mov	r4, r0
 800492e:	460d      	mov	r5, r1
 8004930:	d904      	bls.n	800493c <_raise_r+0x14>
 8004932:	2316      	movs	r3, #22
 8004934:	6003      	str	r3, [r0, #0]
 8004936:	f04f 30ff 	mov.w	r0, #4294967295
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800493e:	b112      	cbz	r2, 8004946 <_raise_r+0x1e>
 8004940:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004944:	b94b      	cbnz	r3, 800495a <_raise_r+0x32>
 8004946:	4620      	mov	r0, r4
 8004948:	f000 f830 	bl	80049ac <_getpid_r>
 800494c:	462a      	mov	r2, r5
 800494e:	4601      	mov	r1, r0
 8004950:	4620      	mov	r0, r4
 8004952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004956:	f000 b817 	b.w	8004988 <_kill_r>
 800495a:	2b01      	cmp	r3, #1
 800495c:	d00a      	beq.n	8004974 <_raise_r+0x4c>
 800495e:	1c59      	adds	r1, r3, #1
 8004960:	d103      	bne.n	800496a <_raise_r+0x42>
 8004962:	2316      	movs	r3, #22
 8004964:	6003      	str	r3, [r0, #0]
 8004966:	2001      	movs	r0, #1
 8004968:	e7e7      	b.n	800493a <_raise_r+0x12>
 800496a:	2400      	movs	r4, #0
 800496c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004970:	4628      	mov	r0, r5
 8004972:	4798      	blx	r3
 8004974:	2000      	movs	r0, #0
 8004976:	e7e0      	b.n	800493a <_raise_r+0x12>

08004978 <raise>:
 8004978:	4b02      	ldr	r3, [pc, #8]	; (8004984 <raise+0xc>)
 800497a:	4601      	mov	r1, r0
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	f7ff bfd3 	b.w	8004928 <_raise_r>
 8004982:	bf00      	nop
 8004984:	20002688 	.word	0x20002688

08004988 <_kill_r>:
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	4d07      	ldr	r5, [pc, #28]	; (80049a8 <_kill_r+0x20>)
 800498c:	2300      	movs	r3, #0
 800498e:	4604      	mov	r4, r0
 8004990:	4608      	mov	r0, r1
 8004992:	4611      	mov	r1, r2
 8004994:	602b      	str	r3, [r5, #0]
 8004996:	f7fd fabf 	bl	8001f18 <_kill>
 800499a:	1c43      	adds	r3, r0, #1
 800499c:	d102      	bne.n	80049a4 <_kill_r+0x1c>
 800499e:	682b      	ldr	r3, [r5, #0]
 80049a0:	b103      	cbz	r3, 80049a4 <_kill_r+0x1c>
 80049a2:	6023      	str	r3, [r4, #0]
 80049a4:	bd38      	pop	{r3, r4, r5, pc}
 80049a6:	bf00      	nop
 80049a8:	200027a8 	.word	0x200027a8

080049ac <_getpid_r>:
 80049ac:	f7fd baac 	b.w	8001f08 <_getpid>

080049b0 <__sread>:
 80049b0:	b510      	push	{r4, lr}
 80049b2:	460c      	mov	r4, r1
 80049b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b8:	f000 f894 	bl	8004ae4 <_read_r>
 80049bc:	2800      	cmp	r0, #0
 80049be:	bfab      	itete	ge
 80049c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049c2:	89a3      	ldrhlt	r3, [r4, #12]
 80049c4:	181b      	addge	r3, r3, r0
 80049c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049ca:	bfac      	ite	ge
 80049cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80049ce:	81a3      	strhlt	r3, [r4, #12]
 80049d0:	bd10      	pop	{r4, pc}

080049d2 <__swrite>:
 80049d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d6:	461f      	mov	r7, r3
 80049d8:	898b      	ldrh	r3, [r1, #12]
 80049da:	05db      	lsls	r3, r3, #23
 80049dc:	4605      	mov	r5, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	4616      	mov	r6, r2
 80049e2:	d505      	bpl.n	80049f0 <__swrite+0x1e>
 80049e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049e8:	2302      	movs	r3, #2
 80049ea:	2200      	movs	r2, #0
 80049ec:	f000 f868 	bl	8004ac0 <_lseek_r>
 80049f0:	89a3      	ldrh	r3, [r4, #12]
 80049f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049fa:	81a3      	strh	r3, [r4, #12]
 80049fc:	4632      	mov	r2, r6
 80049fe:	463b      	mov	r3, r7
 8004a00:	4628      	mov	r0, r5
 8004a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a06:	f000 b817 	b.w	8004a38 <_write_r>

08004a0a <__sseek>:
 8004a0a:	b510      	push	{r4, lr}
 8004a0c:	460c      	mov	r4, r1
 8004a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a12:	f000 f855 	bl	8004ac0 <_lseek_r>
 8004a16:	1c43      	adds	r3, r0, #1
 8004a18:	89a3      	ldrh	r3, [r4, #12]
 8004a1a:	bf15      	itete	ne
 8004a1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a26:	81a3      	strheq	r3, [r4, #12]
 8004a28:	bf18      	it	ne
 8004a2a:	81a3      	strhne	r3, [r4, #12]
 8004a2c:	bd10      	pop	{r4, pc}

08004a2e <__sclose>:
 8004a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a32:	f000 b813 	b.w	8004a5c <_close_r>
	...

08004a38 <_write_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	4d07      	ldr	r5, [pc, #28]	; (8004a58 <_write_r+0x20>)
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	4608      	mov	r0, r1
 8004a40:	4611      	mov	r1, r2
 8004a42:	2200      	movs	r2, #0
 8004a44:	602a      	str	r2, [r5, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f7fd fa9d 	bl	8001f86 <_write>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d102      	bne.n	8004a56 <_write_r+0x1e>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	b103      	cbz	r3, 8004a56 <_write_r+0x1e>
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	bd38      	pop	{r3, r4, r5, pc}
 8004a58:	200027a8 	.word	0x200027a8

08004a5c <_close_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	4d06      	ldr	r5, [pc, #24]	; (8004a78 <_close_r+0x1c>)
 8004a60:	2300      	movs	r3, #0
 8004a62:	4604      	mov	r4, r0
 8004a64:	4608      	mov	r0, r1
 8004a66:	602b      	str	r3, [r5, #0]
 8004a68:	f7fd faa9 	bl	8001fbe <_close>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d102      	bne.n	8004a76 <_close_r+0x1a>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	b103      	cbz	r3, 8004a76 <_close_r+0x1a>
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	200027a8 	.word	0x200027a8

08004a7c <_fstat_r>:
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	4d07      	ldr	r5, [pc, #28]	; (8004a9c <_fstat_r+0x20>)
 8004a80:	2300      	movs	r3, #0
 8004a82:	4604      	mov	r4, r0
 8004a84:	4608      	mov	r0, r1
 8004a86:	4611      	mov	r1, r2
 8004a88:	602b      	str	r3, [r5, #0]
 8004a8a:	f7fd faa4 	bl	8001fd6 <_fstat>
 8004a8e:	1c43      	adds	r3, r0, #1
 8004a90:	d102      	bne.n	8004a98 <_fstat_r+0x1c>
 8004a92:	682b      	ldr	r3, [r5, #0]
 8004a94:	b103      	cbz	r3, 8004a98 <_fstat_r+0x1c>
 8004a96:	6023      	str	r3, [r4, #0]
 8004a98:	bd38      	pop	{r3, r4, r5, pc}
 8004a9a:	bf00      	nop
 8004a9c:	200027a8 	.word	0x200027a8

08004aa0 <_isatty_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4d06      	ldr	r5, [pc, #24]	; (8004abc <_isatty_r+0x1c>)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	602b      	str	r3, [r5, #0]
 8004aac:	f7fd faa3 	bl	8001ff6 <_isatty>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d102      	bne.n	8004aba <_isatty_r+0x1a>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	b103      	cbz	r3, 8004aba <_isatty_r+0x1a>
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	200027a8 	.word	0x200027a8

08004ac0 <_lseek_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4d07      	ldr	r5, [pc, #28]	; (8004ae0 <_lseek_r+0x20>)
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	4608      	mov	r0, r1
 8004ac8:	4611      	mov	r1, r2
 8004aca:	2200      	movs	r2, #0
 8004acc:	602a      	str	r2, [r5, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f7fd fa9c 	bl	800200c <_lseek>
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	d102      	bne.n	8004ade <_lseek_r+0x1e>
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	b103      	cbz	r3, 8004ade <_lseek_r+0x1e>
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	200027a8 	.word	0x200027a8

08004ae4 <_read_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4d07      	ldr	r5, [pc, #28]	; (8004b04 <_read_r+0x20>)
 8004ae8:	4604      	mov	r4, r0
 8004aea:	4608      	mov	r0, r1
 8004aec:	4611      	mov	r1, r2
 8004aee:	2200      	movs	r2, #0
 8004af0:	602a      	str	r2, [r5, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f7fd fa2a 	bl	8001f4c <_read>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d102      	bne.n	8004b02 <_read_r+0x1e>
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	b103      	cbz	r3, 8004b02 <_read_r+0x1e>
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	bd38      	pop	{r3, r4, r5, pc}
 8004b04:	200027a8 	.word	0x200027a8

08004b08 <_init>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	bf00      	nop
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr

08004b14 <_fini>:
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	bf00      	nop
 8004b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1a:	bc08      	pop	{r3}
 8004b1c:	469e      	mov	lr, r3
 8004b1e:	4770      	bx	lr
