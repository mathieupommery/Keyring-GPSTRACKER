
balise_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fc50  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a18  0801fd90  0801fd90  00020d90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080237a8  080237a8  000247a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080237b0  080237b0  000247b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080237b4  080237b4  000247b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000320  20000008  080237b8  00025008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000328  08023ad8  00025328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000360  08023b0d  00025360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cd4  20000378  08023b1e  00025378  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000304c  08023b1e  0002604c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00026a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00027000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00027000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08023b1e  000261e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0004d32d  00000000  00000000  00026a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a73b  00000000  00000000  00073dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003f58  00000000  00000000  0007e500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000307f  00000000  00000000  00082458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000391e9  00000000  00000000  000854d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000557ff  00000000  00000000  000be6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011e785  00000000  00000000  00113ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00232644  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000124a8  00000000  00000000  00232688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  00244b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000378 	.word	0x20000378
 800015c:	00000000 	.word	0x00000000
 8000160:	0801fd78 	.word	0x0801fd78

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000037c 	.word	0x2000037c
 800017c:	0801fd78 	.word	0x0801fd78

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <PADS_continuous_init>:

	return check;
}


HAL_StatusTypeDef PADS_continuous_init(I2C_HandleTypeDef *i2c){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af04      	add	r7, sp, #16
 8000f9a:	6078      	str	r0, [r7, #4]

	uint8_t ctrl_2=0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73bb      	strb	r3, [r7, #14]
	uint8_t ctrl_1=0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef check=HAL_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]

	check=HAL_I2C_Mem_Read(i2c, 0xB9, 0x11, 1, &ctrl_2, 1, 100);
 8000fa8:	2364      	movs	r3, #100	@ 0x64
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	f107 030e 	add.w	r3, r7, #14
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	2211      	movs	r2, #17
 8000fba:	21b9      	movs	r1, #185	@ 0xb9
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f008 fc53 	bl	8009868 <HAL_I2C_Mem_Read>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]

	ctrl_2|=0b00000010;
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	73bb      	strb	r3, [r7, #14]

	check=HAL_I2C_Mem_Write(i2c, 0xB8, 0x11, 1, &ctrl_2, 1, 100);
 8000fd0:	2364      	movs	r3, #100	@ 0x64
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	f107 030e 	add.w	r3, r7, #14
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	2211      	movs	r2, #17
 8000fe2:	21b8      	movs	r1, #184	@ 0xb8
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f008 fb2b 	bl	8009640 <HAL_I2C_Mem_Write>
 8000fea:	4603      	mov	r3, r0
 8000fec:	73fb      	strb	r3, [r7, #15]


	check=HAL_I2C_Mem_Read(i2c, 0xB9, 0x10, 1, &ctrl_1, 1, 100);
 8000fee:	2364      	movs	r3, #100	@ 0x64
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	f107 030d 	add.w	r3, r7, #13
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2210      	movs	r2, #16
 8001000:	21b9      	movs	r1, #185	@ 0xb9
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f008 fc30 	bl	8009868 <HAL_I2C_Mem_Read>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]


	ctrl_1|=0b01001110;
 800100c:	7b7b      	ldrb	r3, [r7, #13]
 800100e:	f043 034e 	orr.w	r3, r3, #78	@ 0x4e
 8001012:	b2db      	uxtb	r3, r3
 8001014:	737b      	strb	r3, [r7, #13]

	ctrl_1&=0b11001111;
 8001016:	7b7b      	ldrb	r3, [r7, #13]
 8001018:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800101c:	b2db      	uxtb	r3, r3
 800101e:	737b      	strb	r3, [r7, #13]

	check=HAL_I2C_Mem_Write(i2c, 0xB8, 0x10, 1, &ctrl_1, 1, 100);
 8001020:	2364      	movs	r3, #100	@ 0x64
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2301      	movs	r3, #1
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	f107 030d 	add.w	r3, r7, #13
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2301      	movs	r3, #1
 8001030:	2210      	movs	r2, #16
 8001032:	21b8      	movs	r1, #184	@ 0xb8
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f008 fb03 	bl	8009640 <HAL_I2C_Mem_Write>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]



	return check;
 800103e:	7bfb      	ldrb	r3, [r7, #15]

}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <PADS_continuous_read>:

HAL_StatusTypeDef PADS_continuous_read(I2C_HandleTypeDef *i2c){
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	ed2d 8b02 	vpush	{d8}
 800104e:	b08c      	sub	sp, #48	@ 0x30
 8001050:	af04      	add	r7, sp, #16
 8001052:	6078      	str	r0, [r7, #4]
		HAL_StatusTypeDef check=HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	77fb      	strb	r3, [r7, #31]
		uint8_t recarray[5];
		int16_t intbuffertemp=0;
 8001058:	2300      	movs	r3, #0
 800105a:	83bb      	strh	r3, [r7, #28]
		int32_t intbufferpres=0;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
		double tmoy=0;
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	e9c7 2304 	strd	r2, r3, [r7, #16]
		check=HAL_I2C_Mem_Read(i2c, 0xBB, 0x28, 1, &recarray[0], 1, 100);
 800106c:	2364      	movs	r3, #100	@ 0x64
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	2301      	movs	r3, #1
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2301      	movs	r3, #1
 800107c:	2228      	movs	r2, #40	@ 0x28
 800107e:	21bb      	movs	r1, #187	@ 0xbb
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f008 fbf1 	bl	8009868 <HAL_I2C_Mem_Read>
 8001086:	4603      	mov	r3, r0
 8001088:	77fb      	strb	r3, [r7, #31]
		check=HAL_I2C_Mem_Read(i2c, 0xBB, 0x29, 1, &recarray[1], 1, 100);
 800108a:	2364      	movs	r3, #100	@ 0x64
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	3301      	adds	r3, #1
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	2229      	movs	r2, #41	@ 0x29
 800109e:	21bb      	movs	r1, #187	@ 0xbb
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f008 fbe1 	bl	8009868 <HAL_I2C_Mem_Read>
 80010a6:	4603      	mov	r3, r0
 80010a8:	77fb      	strb	r3, [r7, #31]
		check=HAL_I2C_Mem_Read(i2c, 0xBB, 0x2A, 1, &recarray[2], 1, 100);
 80010aa:	2364      	movs	r3, #100	@ 0x64
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	2301      	movs	r3, #1
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	3302      	adds	r3, #2
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	222a      	movs	r2, #42	@ 0x2a
 80010be:	21bb      	movs	r1, #187	@ 0xbb
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f008 fbd1 	bl	8009868 <HAL_I2C_Mem_Read>
 80010c6:	4603      	mov	r3, r0
 80010c8:	77fb      	strb	r3, [r7, #31]
		check=HAL_I2C_Mem_Read(i2c, 0xBB, 0x2B, 1, &recarray[3], 1, 100);
 80010ca:	2364      	movs	r3, #100	@ 0x64
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	2301      	movs	r3, #1
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	3303      	adds	r3, #3
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2301      	movs	r3, #1
 80010dc:	222b      	movs	r2, #43	@ 0x2b
 80010de:	21bb      	movs	r1, #187	@ 0xbb
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f008 fbc1 	bl	8009868 <HAL_I2C_Mem_Read>
 80010e6:	4603      	mov	r3, r0
 80010e8:	77fb      	strb	r3, [r7, #31]
		check=HAL_I2C_Mem_Read(i2c, 0xBB, 0x2C, 1, &recarray[4], 1, 100);
 80010ea:	2364      	movs	r3, #100	@ 0x64
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	2301      	movs	r3, #1
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	3304      	adds	r3, #4
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2301      	movs	r3, #1
 80010fc:	222c      	movs	r2, #44	@ 0x2c
 80010fe:	21bb      	movs	r1, #187	@ 0xbb
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f008 fbb1 	bl	8009868 <HAL_I2C_Mem_Read>
 8001106:	4603      	mov	r3, r0
 8001108:	77fb      	strb	r3, [r7, #31]

		if(check==HAL_OK){
 800110a:	7ffb      	ldrb	r3, [r7, #31]
 800110c:	2b00      	cmp	r3, #0
 800110e:	f040 80d0 	bne.w	80012b2 <PADS_continuous_read+0x26a>

		intbufferpres=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 8001112:	7abb      	ldrb	r3, [r7, #10]
 8001114:	041a      	lsls	r2, r3, #16
 8001116:	7a7b      	ldrb	r3, [r7, #9]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	4313      	orrs	r3, r2
 800111c:	7a3a      	ldrb	r2, [r7, #8]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
		intbuffertemp=(recarray[4]<<8)|(recarray[3]);
 8001122:	7b3b      	ldrb	r3, [r7, #12]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b21a      	sxth	r2, r3
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	83bb      	strh	r3, [r7, #28]
		inttemp=intbuffertemp;
 8001130:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001134:	4a6e      	ldr	r2, [pc, #440]	@ (80012f0 <PADS_continuous_read+0x2a8>)
 8001136:	6013      	str	r3, [r2, #0]
		intpress=intbufferpres;
 8001138:	4a6e      	ldr	r2, [pc, #440]	@ (80012f4 <PADS_continuous_read+0x2ac>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	6013      	str	r3, [r2, #0]
		finaltemp=(float)intbuffertemp*0.01;
 800113e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114a:	ee17 0a90 	vmov	r0, s15
 800114e:	f7ff f9d3 	bl	80004f8 <__aeabi_f2d>
 8001152:	a35b      	add	r3, pc, #364	@ (adr r3, 80012c0 <PADS_continuous_read+0x278>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff fa26 	bl	80005a8 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fd18 	bl	8000b98 <__aeabi_d2f>
 8001168:	4603      	mov	r3, r0
 800116a:	4a63      	ldr	r2, [pc, #396]	@ (80012f8 <PADS_continuous_read+0x2b0>)
 800116c:	6013      	str	r3, [r2, #0]
		finalpress=(float) intbufferpres*(0.00002441406);
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001178:	ee17 0a90 	vmov	r0, s15
 800117c:	f7ff f9bc 	bl	80004f8 <__aeabi_f2d>
 8001180:	a351      	add	r3, pc, #324	@ (adr r3, 80012c8 <PADS_continuous_read+0x280>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fa0f 	bl	80005a8 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fd01 	bl	8000b98 <__aeabi_d2f>
 8001196:	4603      	mov	r3, r0
 8001198:	4a58      	ldr	r2, [pc, #352]	@ (80012fc <PADS_continuous_read+0x2b4>)
 800119a:	6013      	str	r3, [r2, #0]

		alt=(float) ((8.314*293.15)/(9.80665*0.028964))*logf((float)101325.0/(finalpress*1000.0));
 800119c:	4b57      	ldr	r3, [pc, #348]	@ (80012fc <PADS_continuous_read+0x2b4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f9a9 	bl	80004f8 <__aeabi_f2d>
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4b55      	ldr	r3, [pc, #340]	@ (8001300 <PADS_continuous_read+0x2b8>)
 80011ac:	f7ff f9fc 	bl	80005a8 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	a146      	add	r1, pc, #280	@ (adr r1, 80012d0 <PADS_continuous_read+0x288>)
 80011b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011ba:	f7ff fb1f 	bl	80007fc <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fce7 	bl	8000b98 <__aeabi_d2f>
 80011ca:	4603      	mov	r3, r0
 80011cc:	ee00 3a10 	vmov	s0, r3
 80011d0:	f01d f814 	bl	801e1fc <logf>
 80011d4:	eef0 7a40 	vmov.f32	s15, s0
 80011d8:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001304 <PADS_continuous_read+0x2bc>
 80011dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e0:	4b49      	ldr	r3, [pc, #292]	@ (8001308 <PADS_continuous_read+0x2c0>)
 80011e2:	edc3 7a00 	vstr	s15, [r3]
		tmoy=(float) 273.15+finaltemp+(0.0065*alt)/2;
 80011e6:	4b44      	ldr	r3, [pc, #272]	@ (80012f8 <PADS_continuous_read+0x2b0>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800130c <PADS_continuous_read+0x2c4>
 80011f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011f4:	ee17 0a90 	vmov	r0, s15
 80011f8:	f7ff f97e 	bl	80004f8 <__aeabi_f2d>
 80011fc:	4604      	mov	r4, r0
 80011fe:	460d      	mov	r5, r1
 8001200:	4b41      	ldr	r3, [pc, #260]	@ (8001308 <PADS_continuous_read+0x2c0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f977 	bl	80004f8 <__aeabi_f2d>
 800120a:	a333      	add	r3, pc, #204	@ (adr r3, 80012d8 <PADS_continuous_read+0x290>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	f7ff f9ca 	bl	80005a8 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001224:	f7ff faea 	bl	80007fc <__aeabi_ddiv>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4620      	mov	r0, r4
 800122e:	4629      	mov	r1, r5
 8001230:	f7ff f804 	bl	800023c <__adddf3>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	e9c7 2304 	strd	r2, r3, [r7, #16]
		alt=(float) ((8.314*tmoy)/(9.80665*0.028964))*logf((float)101325.0/(finalpress*1000.0));
 800123c:	a328      	add	r3, pc, #160	@ (adr r3, 80012e0 <PADS_continuous_read+0x298>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001246:	f7ff f9af 	bl	80005a8 <__aeabi_dmul>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	a325      	add	r3, pc, #148	@ (adr r3, 80012e8 <PADS_continuous_read+0x2a0>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff fad0 	bl	80007fc <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fc98 	bl	8000b98 <__aeabi_d2f>
 8001268:	ee08 0a10 	vmov	s16, r0
 800126c:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <PADS_continuous_read+0x2b4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f941 	bl	80004f8 <__aeabi_f2d>
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <PADS_continuous_read+0x2b8>)
 800127c:	f7ff f994 	bl	80005a8 <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	a112      	add	r1, pc, #72	@ (adr r1, 80012d0 <PADS_continuous_read+0x288>)
 8001286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800128a:	f7ff fab7 	bl	80007fc <__aeabi_ddiv>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fc7f 	bl	8000b98 <__aeabi_d2f>
 800129a:	4603      	mov	r3, r0
 800129c:	ee00 3a10 	vmov	s0, r3
 80012a0:	f01c ffac 	bl	801e1fc <logf>
 80012a4:	eef0 7a40 	vmov.f32	s15, s0
 80012a8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80012ac:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <PADS_continuous_read+0x2c0>)
 80012ae:	edc3 7a00 	vstr	s15, [r3]

		}

		return check;
 80012b2:	7ffb      	ldrb	r3, [r7, #31]

}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	ecbd 8b02 	vpop	{d8}
 80012be:	bdb0      	pop	{r4, r5, r7, pc}
 80012c0:	47ae147b 	.word	0x47ae147b
 80012c4:	3f847ae1 	.word	0x3f847ae1
 80012c8:	6d9e99d7 	.word	0x6d9e99d7
 80012cc:	3ef99999 	.word	0x3ef99999
 80012d0:	00000000 	.word	0x00000000
 80012d4:	40f8bcd0 	.word	0x40f8bcd0
 80012d8:	76c8b439 	.word	0x76c8b439
 80012dc:	3f7a9fbe 	.word	0x3f7a9fbe
 80012e0:	9ba5e354 	.word	0x9ba5e354
 80012e4:	4020a0c4 	.word	0x4020a0c4
 80012e8:	50527f89 	.word	0x50527f89
 80012ec:	3fd22db5 	.word	0x3fd22db5
 80012f0:	200003a0 	.word	0x200003a0
 80012f4:	200003a4 	.word	0x200003a4
 80012f8:	20000394 	.word	0x20000394
 80012fc:	20000398 	.word	0x20000398
 8001300:	408f4000 	.word	0x408f4000
 8001304:	460612a4 	.word	0x460612a4
 8001308:	2000039c 	.word	0x2000039c
 800130c:	43889333 	.word	0x43889333

08001310 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800131c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800131e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4313      	orrs	r3, r2
 8001326:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4013      	ands	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001334:	68fb      	ldr	r3, [r7, #12]
}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800134a:	463b      	mov	r3, r7
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800135a:	4b38      	ldr	r3, [pc, #224]	@ (800143c <MX_ADC1_Init+0xf8>)
 800135c:	4a38      	ldr	r2, [pc, #224]	@ (8001440 <MX_ADC1_Init+0xfc>)
 800135e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001360:	4b36      	ldr	r3, [pc, #216]	@ (800143c <MX_ADC1_Init+0xf8>)
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001366:	4b35      	ldr	r3, [pc, #212]	@ (800143c <MX_ADC1_Init+0xf8>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800136c:	4b33      	ldr	r3, [pc, #204]	@ (800143c <MX_ADC1_Init+0xf8>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001372:	4b32      	ldr	r3, [pc, #200]	@ (800143c <MX_ADC1_Init+0xf8>)
 8001374:	2201      	movs	r2, #1
 8001376:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001378:	4b30      	ldr	r3, [pc, #192]	@ (800143c <MX_ADC1_Init+0xf8>)
 800137a:	2204      	movs	r2, #4
 800137c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800137e:	4b2f      	ldr	r3, [pc, #188]	@ (800143c <MX_ADC1_Init+0xf8>)
 8001380:	2200      	movs	r2, #0
 8001382:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001384:	4b2d      	ldr	r3, [pc, #180]	@ (800143c <MX_ADC1_Init+0xf8>)
 8001386:	2201      	movs	r2, #1
 8001388:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800138a:	4b2c      	ldr	r3, [pc, #176]	@ (800143c <MX_ADC1_Init+0xf8>)
 800138c:	2203      	movs	r2, #3
 800138e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001390:	4b2a      	ldr	r3, [pc, #168]	@ (800143c <MX_ADC1_Init+0xf8>)
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001398:	4b28      	ldr	r3, [pc, #160]	@ (800143c <MX_ADC1_Init+0xf8>)
 800139a:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 800139e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013a0:	4b26      	ldr	r3, [pc, #152]	@ (800143c <MX_ADC1_Init+0xf8>)
 80013a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013a8:	4b24      	ldr	r3, [pc, #144]	@ (800143c <MX_ADC1_Init+0xf8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013b0:	4b22      	ldr	r3, [pc, #136]	@ (800143c <MX_ADC1_Init+0xf8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013b6:	4b21      	ldr	r3, [pc, #132]	@ (800143c <MX_ADC1_Init+0xf8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013be:	481f      	ldr	r0, [pc, #124]	@ (800143c <MX_ADC1_Init+0xf8>)
 80013c0:	f006 fb1c 	bl	80079fc <HAL_ADC_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80013ca:	f001 fe19 	bl	8003000 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <MX_ADC1_Init+0x100>)
 80013d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d2:	2306      	movs	r3, #6
 80013d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80013d6:	2307      	movs	r3, #7
 80013d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013da:	237f      	movs	r3, #127	@ 0x7f
 80013dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013de:	2304      	movs	r3, #4
 80013e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4814      	ldr	r0, [pc, #80]	@ (800143c <MX_ADC1_Init+0xf8>)
 80013ec:	f006 fcea 	bl	8007dc4 <HAL_ADC_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80013f6:	f001 fe03 	bl	8003000 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013fa:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <MX_ADC1_Init+0x104>)
 80013fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013fe:	230c      	movs	r3, #12
 8001400:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	480d      	ldr	r0, [pc, #52]	@ (800143c <MX_ADC1_Init+0xf8>)
 8001408:	f006 fcdc 	bl	8007dc4 <HAL_ADC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001412:	f001 fdf5 	bl	8003000 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001416:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <MX_ADC1_Init+0x108>)
 8001418:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800141a:	2312      	movs	r3, #18
 800141c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	4806      	ldr	r0, [pc, #24]	@ (800143c <MX_ADC1_Init+0xf8>)
 8001424:	f006 fcce 	bl	8007dc4 <HAL_ADC_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800142e:	f001 fde7 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200003a8 	.word	0x200003a8
 8001440:	50040000 	.word	0x50040000
 8001444:	80000001 	.word	0x80000001
 8001448:	c7520000 	.word	0xc7520000
 800144c:	25b00200 	.word	0x25b00200

08001450 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a22      	ldr	r2, [pc, #136]	@ (80014f8 <HAL_ADC_MspInit+0xa8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d13e      	bne.n	80014f0 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001472:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001476:	f7ff ff4b 	bl	8001310 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff ff48 	bl	8001310 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001480:	2310      	movs	r3, #16
 8001482:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001484:	2303      	movs	r3, #3
 8001486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4619      	mov	r1, r3
 8001492:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001496:	f007 fe41 	bl	800911c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800149a:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <HAL_ADC_MspInit+0xac>)
 800149c:	4a18      	ldr	r2, [pc, #96]	@ (8001500 <HAL_ADC_MspInit+0xb0>)
 800149e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <HAL_ADC_MspInit+0xac>)
 80014a2:	2205      	movs	r2, #5
 80014a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <HAL_ADC_MspInit+0xac>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <HAL_ADC_MspInit+0xac>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_ADC_MspInit+0xac>)
 80014b4:	2280      	movs	r2, #128	@ 0x80
 80014b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <HAL_ADC_MspInit+0xac>)
 80014ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <HAL_ADC_MspInit+0xac>)
 80014c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <HAL_ADC_MspInit+0xac>)
 80014ca:	2220      	movs	r2, #32
 80014cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_ADC_MspInit+0xac>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014d4:	4809      	ldr	r0, [pc, #36]	@ (80014fc <HAL_ADC_MspInit+0xac>)
 80014d6:	f007 fae3 	bl	8008aa0 <HAL_DMA_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 80014e0:	f001 fd8e 	bl	8003000 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <HAL_ADC_MspInit+0xac>)
 80014e8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014ea:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <HAL_ADC_MspInit+0xac>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	50040000 	.word	0x50040000
 80014fc:	2000040c 	.word	0x2000040c
 8001500:	40020008 	.word	0x40020008
 8001504:	00000000 	.word	0x00000000

08001508 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a54      	ldr	r2, [pc, #336]	@ (8001668 <HAL_ADC_ConvCpltCallback+0x160>)
 8001518:	4293      	cmp	r3, r2
 800151a:	f040 8091 	bne.w	8001640 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800151e:	4b53      	ldr	r3, [pc, #332]	@ (800166c <HAL_ADC_ConvCpltCallback+0x164>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe ffd6 	bl	80004d4 <__aeabi_i2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	a14a      	add	r1, pc, #296	@ (adr r1, 8001658 <HAL_ADC_ConvCpltCallback+0x150>)
 800152e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001532:	f7ff f963 	bl	80007fc <__aeabi_ddiv>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fb2b 	bl	8000b98 <__aeabi_d2f>
 8001542:	4603      	mov	r3, r0
 8001544:	4a4a      	ldr	r2, [pc, #296]	@ (8001670 <HAL_ADC_ConvCpltCallback+0x168>)
 8001546:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001548:	4b4a      	ldr	r3, [pc, #296]	@ (8001674 <HAL_ADC_ConvCpltCallback+0x16c>)
 800154a:	ed93 7a00 	vldr	s14, [r3]
 800154e:	4b4a      	ldr	r3, [pc, #296]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x170>)
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001558:	ee17 0a90 	vmov	r0, s15
 800155c:	f7fe ffcc 	bl	80004f8 <__aeabi_f2d>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	f04f 0000 	mov.w	r0, #0
 8001568:	4944      	ldr	r1, [pc, #272]	@ (800167c <HAL_ADC_ConvCpltCallback+0x174>)
 800156a:	f7ff f947 	bl	80007fc <__aeabi_ddiv>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4690      	mov	r8, r2
 8001574:	4699      	mov	r9, r3
 8001576:	4b3d      	ldr	r3, [pc, #244]	@ (800166c <HAL_ADC_ConvCpltCallback+0x164>)
 8001578:	885b      	ldrh	r3, [r3, #2]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ffaa 	bl	80004d4 <__aeabi_i2d>
 8001580:	4604      	mov	r4, r0
 8001582:	460d      	mov	r5, r1
 8001584:	4b3a      	ldr	r3, [pc, #232]	@ (8001670 <HAL_ADC_ConvCpltCallback+0x168>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffb5 	bl	80004f8 <__aeabi_f2d>
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <HAL_ADC_ConvCpltCallback+0x178>)
 8001594:	f7ff f932 	bl	80007fc <__aeabi_ddiv>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4620      	mov	r0, r4
 800159e:	4629      	mov	r1, r5
 80015a0:	f7ff f802 	bl	80005a8 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4614      	mov	r4, r2
 80015aa:	461d      	mov	r5, r3
 80015ac:	4b32      	ldr	r3, [pc, #200]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x170>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffa1 	bl	80004f8 <__aeabi_f2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4620      	mov	r0, r4
 80015bc:	4629      	mov	r1, r5
 80015be:	f7fe fe3b 	bl	8000238 <__aeabi_dsub>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4640      	mov	r0, r8
 80015c8:	4649      	mov	r1, r9
 80015ca:	f7fe ffed 	bl	80005a8 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fadf 	bl	8000b98 <__aeabi_d2f>
 80015da:	ee07 0a10 	vmov	s14, r0
 80015de:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 80015e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e6:	4b27      	ldr	r3, [pc, #156]	@ (8001684 <HAL_ADC_ConvCpltCallback+0x17c>)
 80015e8:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 80015ec:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <HAL_ADC_ConvCpltCallback+0x164>)
 80015ee:	889b      	ldrh	r3, [r3, #4]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff6f 	bl	80004d4 <__aeabi_i2d>
 80015f6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001660 <HAL_ADC_ConvCpltCallback+0x158>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7ff f8fe 	bl	80007fc <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	f7fe fe16 	bl	800023c <__adddf3>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4614      	mov	r4, r2
 8001616:	461d      	mov	r5, r3
 8001618:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <HAL_ADC_ConvCpltCallback+0x168>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff6b 	bl	80004f8 <__aeabi_f2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4620      	mov	r0, r4
 8001628:	4629      	mov	r1, r5
 800162a:	f7fe ffbd 	bl	80005a8 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff faaf 	bl	8000b98 <__aeabi_d2f>
 800163a:	4603      	mov	r3, r0
 800163c:	4a12      	ldr	r2, [pc, #72]	@ (8001688 <HAL_ADC_ConvCpltCallback+0x180>)
 800163e:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001640:	2203      	movs	r2, #3
 8001642:	490a      	ldr	r1, [pc, #40]	@ (800166c <HAL_ADC_ConvCpltCallback+0x164>)
 8001644:	4811      	ldr	r0, [pc, #68]	@ (800168c <HAL_ADC_ConvCpltCallback+0x184>)
 8001646:	f006 fb25 	bl	8007c94 <HAL_ADC_Start_DMA>



}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001654:	f3af 8000 	nop.w
 8001658:	d70a3d70 	.word	0xd70a3d70
 800165c:	40b36323 	.word	0x40b36323
 8001660:	00000000 	.word	0x00000000
 8001664:	40affe00 	.word	0x40affe00
 8001668:	50040000 	.word	0x50040000
 800166c:	200007a8 	.word	0x200007a8
 8001670:	200007b4 	.word	0x200007b4
 8001674:	20000008 	.word	0x20000008
 8001678:	2000000c 	.word	0x2000000c
 800167c:	40590000 	.word	0x40590000
 8001680:	40080000 	.word	0x40080000
 8001684:	200007b0 	.word	0x200007b0
 8001688:	200007b8 	.word	0x200007b8
 800168c:	200003a8 	.word	0x200003a8

08001690 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001696:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <APPD_EnableCPU2+0x34>)
 8001698:	1d3c      	adds	r4, r7, #4
 800169a:	461d      	mov	r5, r3
 800169c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a4:	c403      	stmia	r4!, {r0, r1}
 80016a6:	8022      	strh	r2, [r4, #0]
 80016a8:	3402      	adds	r4, #2
 80016aa:	0c13      	lsrs	r3, r2, #16
 80016ac:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80016ae:	f015 fb9d 	bl	8016dec <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4618      	mov	r0, r3
 80016b6:	f014 fe2e 	bl	8016316 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80016ba:	bf00      	nop
}
 80016bc:	3720      	adds	r7, #32
 80016be:	46bd      	mov	sp, r7
 80016c0:	bdb0      	pop	{r4, r5, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	0801fd90 	.word	0x0801fd90

080016c8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80016d0:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80016d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016d6:	f023 0207 	bic.w	r2, r3, #7
 80016da:	4905      	ldr	r1, [pc, #20]	@ (80016f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4313      	orrs	r3, r2
 80016e0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	58000400 	.word	0x58000400

080016f4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <LL_EXTI_EnableIT_32_63+0x24>)
 80016fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001702:	4905      	ldr	r1, [pc, #20]	@ (8001718 <LL_EXTI_EnableIT_32_63+0x24>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4313      	orrs	r3, r2
 8001708:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	58000800 	.word	0x58000800

0800171c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001728:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800172a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800172e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001732:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001736:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001742:	4313      	orrs	r3, r2
 8001744:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	cafecafe 	.word	0xcafecafe

08001758 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800176a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001784:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <LL_DBGMCU_GetDeviceID+0x18>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e0042000 	.word	0xe0042000

0800179c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80017a0:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <LL_DBGMCU_GetRevisionID+0x18>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	b29b      	uxth	r3, r3
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e0042000 	.word	0xe0042000

080017b8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80017bc:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <LL_LPM_EnableSleep+0x1c>)
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <LL_LPM_EnableSleep+0x1c>)
 80017c2:	f023 0304 	bic.w	r3, r3, #4
 80017c6:	6113      	str	r3, [r2, #16]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	22ff      	movs	r2, #255	@ 0xff
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	22ca      	movs	r2, #202	@ 0xca
 80017fe:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2253      	movs	r2, #83	@ 0x53
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f023 0207 	bic.w	r2, r3, #7
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	609a      	str	r2, [r3, #8]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800183c:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <MX_APPE_Config+0x18>)
 800183e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001842:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001844:	f000 f824 	bl	8001890 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001848:	f000 f829 	bl	800189e <Config_HSE>

  return;
 800184c:	bf00      	nop
}
 800184e:	bd80      	pop	{r7, pc}
 8001850:	58004000 	.word	0x58004000

08001854 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001858:	f000 f835 	bl	80018c6 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800185c:	f000 f84e 	bl	80018fc <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001860:	4903      	ldr	r1, [pc, #12]	@ (8001870 <MX_APPE_Init+0x1c>)
 8001862:	2000      	movs	r0, #0
 8001864:	f000 fe56 	bl	8002514 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001868:	f000 f856 	bl	8001918 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 800186c:	bf00      	nop
}
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000c40 	.word	0x20000c40

08001874 <Init_Smps>:

void Init_Smps(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001878:	bf00      	nop
}
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <Init_Exti>:

void Init_Exti(void)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001886:	2050      	movs	r0, #80	@ 0x50
 8001888:	f7ff ff34 	bl	80016f4 <LL_EXTI_EnableIT_32_63>

  return;
 800188c:	bf00      	nop
}
 800188e:	bd80      	pop	{r7, pc}

08001890 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001894:	bf00      	nop
}
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f015 fb2d 	bl	8016f04 <OTP_Read>
 80018aa:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	799b      	ldrb	r3, [r3, #6]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff30 	bl	800171c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
}
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <System_Init>:

static void System_Init(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
  Init_Smps();
 80018ca:	f7ff ffd3 	bl	8001874 <Init_Smps>

  Init_Exti();
 80018ce:	f7ff ffd8 	bl	8001882 <Init_Exti>

  Init_Rtc();
 80018d2:	f000 f803 	bl	80018dc <Init_Rtc>

  return;
 80018d6:	bf00      	nop
}
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <Init_Rtc>:

static void Init_Rtc(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80018e0:	4805      	ldr	r0, [pc, #20]	@ (80018f8 <Init_Rtc+0x1c>)
 80018e2:	f7ff ff86 	bl	80017f2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80018e6:	2100      	movs	r1, #0
 80018e8:	4803      	ldr	r0, [pc, #12]	@ (80018f8 <Init_Rtc+0x1c>)
 80018ea:	f7ff ff92 	bl	8001812 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80018ee:	4802      	ldr	r0, [pc, #8]	@ (80018f8 <Init_Rtc+0x1c>)
 80018f0:	f7ff ff72 	bl	80017d8 <LL_RTC_EnableWriteProtection>

  return;
 80018f4:	bf00      	nop
}
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40002800 	.word	0x40002800

080018fc <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001900:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001904:	f7ff ff28 	bl	8001758 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001908:	f017 fcac 	bl	8019264 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800190c:	2004      	movs	r0, #4
 800190e:	f7ff fedb 	bl	80016c8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001912:	bf00      	nop
}
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800191e:	f015 f8af 	bl	8016a80 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001922:	4a11      	ldr	r2, [pc, #68]	@ (8001968 <appe_Tl_Init+0x50>)
 8001924:	2100      	movs	r1, #0
 8001926:	2008      	movs	r0, #8
 8001928:	f017 fdda 	bl	80194e0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800192c:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <appe_Tl_Init+0x54>)
 800192e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001930:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <appe_Tl_Init+0x58>)
 8001932:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001934:	463b      	mov	r3, r7
 8001936:	4619      	mov	r1, r3
 8001938:	480e      	ldr	r0, [pc, #56]	@ (8001974 <appe_Tl_Init+0x5c>)
 800193a:	f014 ff63 	bl	8016804 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <appe_Tl_Init+0x60>)
 8001940:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <appe_Tl_Init+0x64>)
 8001944:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001946:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <appe_Tl_Init+0x68>)
 8001948:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800194a:	f240 533c 	movw	r3, #1340	@ 0x53c
 800194e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	4618      	mov	r0, r3
 8001956:	f015 f9d5 	bl	8016d04 <TL_MM_Init>

  TL_Enable();
 800195a:	f015 f88b 	bl	8016a74 <TL_Enable>

  return;
 800195e:	bf00      	nop
}
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	0801683d 	.word	0x0801683d
 800196c:	20030734 	.word	0x20030734
 8001970:	08001985 	.word	0x08001985
 8001974:	0800199d 	.word	0x0800199d
 8001978:	2003094c 	.word	0x2003094c
 800197c:	20030840 	.word	0x20030840
 8001980:	200301f8 	.word	0x200301f8

08001984 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800198e:	bf00      	nop
}
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	330b      	adds	r3, #11
 80019aa:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80019b6:	2b07      	cmp	r3, #7
 80019b8:	d81f      	bhi.n	80019fa <APPE_SysUserEvtRx+0x5e>
 80019ba:	a201      	add	r2, pc, #4	@ (adr r2, 80019c0 <APPE_SysUserEvtRx+0x24>)
 80019bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c0:	080019e1 	.word	0x080019e1
 80019c4:	080019f3 	.word	0x080019f3
 80019c8:	080019fb 	.word	0x080019fb
 80019cc:	080019fb 	.word	0x080019fb
 80019d0:	080019fb 	.word	0x080019fb
 80019d4:	080019fb 	.word	0x080019fb
 80019d8:	080019fb 	.word	0x080019fb
 80019dc:	080019fb 	.word	0x080019fb
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	4618      	mov	r0, r3
 80019e6:	f014 fcc3 	bl	8016370 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f81b 	bl	8001a26 <APPE_SysEvtReadyProcessing>
    break;
 80019f0:	e004      	b.n	80019fc <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f806 	bl	8001a04 <APPE_SysEvtError>
    break;
 80019f8:	e000      	b.n	80019fc <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80019fa:	bf00      	nop
  }

  return;
 80019fc:	bf00      	nop
}
 80019fe:	3720      	adds	r7, #32
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	330b      	adds	r3, #11
 8001a12:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3302      	adds	r3, #2
 8001a18:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001a1a:	bf00      	nop
}
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b08a      	sub	sp, #40	@ 0x28
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	330b      	adds	r3, #11
 8001a4a:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	3302      	adds	r3, #2
 8001a50:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d11d      	bne.n	8001a96 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001a5a:	f7ff fe19 	bl	8001690 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001a5e:	230f      	movs	r3, #15
 8001a60:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001a62:	237f      	movs	r3, #127	@ 0x7f
 8001a64:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001a66:	f7ff fe99 	bl	800179c <LL_DBGMCU_GetRevisionID>
 8001a6a:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001a72:	f7ff fe85 	bl	8001780 <LL_DBGMCU_GetDeviceID>
 8001a76:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001a7e:	f107 0308 	add.w	r3, r7, #8
 8001a82:	4618      	mov	r0, r3
 8001a84:	f014 fc5e 	bl	8016344 <SHCI_C2_Config>

    APP_BLE_Init();
 8001a88:	f016 f840 	bl	8017b0c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f017 fbfa 	bl	8019288 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001a94:	e007      	b.n	8001aa6 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d103      	bne.n	8001aa6 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
  return;
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
}
 8001aa8:	3728      	adds	r7, #40	@ 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab6:	f005 fdb5 	bl	8007624 <HAL_GetTick>
 8001aba:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac6:	d00a      	beq.n	8001ade <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001ac8:	f005 fdc4 	bl	8007654 <HAL_GetTickFreq>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad6:	e002      	b.n	8001ade <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001ad8:	f7ff fe6e 	bl	80017b8 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001adc:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001ade:	f005 fda1 	bl	8007624 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d8f4      	bhi.n	8001ad8 <HAL_Delay+0x2a>
  }
}
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f017 fbf2 	bl	80192e8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001b0c:	bf00      	nop
}
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f017 fbe0 	bl	80192e8 <UTIL_SEQ_Run>
  return;
 8001b28:	bf00      	nop
}
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2008      	movs	r0, #8
 8001b3c:	f017 fcf2 	bl	8019524 <UTIL_SEQ_SetTask>
  return;
 8001b40:	bf00      	nop
}
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001b50:	2002      	movs	r0, #2
 8001b52:	f017 fd53 	bl	80195fc <UTIL_SEQ_SetEvt>
  return;
 8001b56:	bf00      	nop
}
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001b66:	2002      	movs	r0, #2
 8001b68:	f017 fd68 	bl	801963c <UTIL_SEQ_WaitEvt>
  return;
 8001b6c:	bf00      	nop
}
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <LL_AHB1_GRP1_EnableClock>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001b82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b98:	68fb      	ldr	r3, [r7, #12]
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001baa:	2004      	movs	r0, #4
 8001bac:	f7ff ffe2 	bl	8001b74 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7ff ffdf 	bl	8001b74 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 4, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2104      	movs	r1, #4
 8001bba:	200b      	movs	r0, #11
 8001bbc:	f006 ff11 	bl	80089e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bc0:	200b      	movs	r0, #11
 8001bc2:	f006 ff28 	bl	8008a16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2102      	movs	r1, #2
 8001bca:	200c      	movs	r0, #12
 8001bcc:	f006 ff09 	bl	80089e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bd0:	200c      	movs	r0, #12
 8001bd2:	f006 ff20 	bl	8008a16 <HAL_NVIC_EnableIRQ>

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <LL_AHB2_GRP1_EnableClock>:
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001be8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c20:	2004      	movs	r0, #4
 8001c22:	f7ff ffda 	bl	8001bda <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	2002      	movs	r0, #2
 8001c28:	f7ff ffd7 	bl	8001bda <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f7ff ffd4 	bl	8001bda <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2101      	movs	r1, #1
 8001c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c3a:	f007 fbf7 	bl	800942c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2183      	movs	r1, #131	@ 0x83
 8001c42:	4828      	ldr	r0, [pc, #160]	@ (8001ce4 <MX_GPIO_Init+0xd8>)
 8001c44:	f007 fbf2 	bl	800942c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c48:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c4e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4822      	ldr	r0, [pc, #136]	@ (8001ce8 <MX_GPIO_Init+0xdc>)
 8001c5e:	f007 fa5d 	bl	800911c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c62:	2301      	movs	r3, #1
 8001c64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c7a:	f007 fa4f 	bl	800911c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c94:	f007 fa42 	bl	800911c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|SPI_CS_Pin;
 8001c98:	2383      	movs	r3, #131	@ 0x83
 8001c9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	480d      	ldr	r0, [pc, #52]	@ (8001ce4 <MX_GPIO_Init+0xd8>)
 8001cae:	f007 fa35 	bl	800911c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cb6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4807      	ldr	r0, [pc, #28]	@ (8001ce4 <MX_GPIO_Init+0xd8>)
 8001cc6:	f007 fa29 	bl	800911c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2101      	movs	r1, #1
 8001cce:	2028      	movs	r0, #40	@ 0x28
 8001cd0:	f006 fe87 	bl	80089e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cd4:	2028      	movs	r0, #40	@ 0x28
 8001cd6:	f006 fe9e 	bl	8008a16 <HAL_NVIC_EnableIRQ>

}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	48000400 	.word	0x48000400
 8001ce8:	48000800 	.word	0x48000800

08001cec <LL_EXTI_EnableIT_0_31>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <LL_EXTI_EnableIT_0_31+0x24>)
 8001cf6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001cfa:	4905      	ldr	r1, [pc, #20]	@ (8001d10 <LL_EXTI_EnableIT_0_31+0x24>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	58000800 	.word	0x58000800

08001d14 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4904      	ldr	r1, [pc, #16]	@ (8001d34 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]

}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	58000800 	.word	0x58000800

08001d38 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d74 <ReadRtcSsrValue+0x3c>)
 8001d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d46:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <ReadRtcSsrValue+0x3c>)
 8001d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001d4e:	e005      	b.n	8001d5c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d54:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <ReadRtcSsrValue+0x3c>)
 8001d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d1f5      	bne.n	8001d50 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001d64:	683b      	ldr	r3, [r7, #0]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40002800 	.word	0x40002800

08001d78 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	460a      	mov	r2, r1
 8001d82:	71fb      	strb	r3, [r7, #7]
 8001d84:	4613      	mov	r3, r2
 8001d86:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001d88:	79ba      	ldrb	r2, [r7, #6]
 8001d8a:	491d      	ldr	r1, [pc, #116]	@ (8001e00 <LinkTimerAfter+0x88>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	3315      	adds	r3, #21
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d009      	beq.n	8001db6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	4916      	ldr	r1, [pc, #88]	@ (8001e00 <LinkTimerAfter+0x88>)
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	440b      	add	r3, r1
 8001db0:	3314      	adds	r3, #20
 8001db2:	79fa      	ldrb	r2, [r7, #7]
 8001db4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001db6:	79fa      	ldrb	r2, [r7, #7]
 8001db8:	4911      	ldr	r1, [pc, #68]	@ (8001e00 <LinkTimerAfter+0x88>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3315      	adds	r3, #21
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001dca:	79fa      	ldrb	r2, [r7, #7]
 8001dcc:	490c      	ldr	r1, [pc, #48]	@ (8001e00 <LinkTimerAfter+0x88>)
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	3314      	adds	r3, #20
 8001dda:	79ba      	ldrb	r2, [r7, #6]
 8001ddc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001dde:	79ba      	ldrb	r2, [r7, #6]
 8001de0:	4907      	ldr	r1, [pc, #28]	@ (8001e00 <LinkTimerAfter+0x88>)
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	3315      	adds	r3, #21
 8001dee:	79fa      	ldrb	r2, [r7, #7]
 8001df0:	701a      	strb	r2, [r3, #0]

  return;
 8001df2:	bf00      	nop
}
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	2000046c 	.word	0x2000046c

08001e04 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	71fb      	strb	r3, [r7, #7]
 8001e10:	4613      	mov	r3, r2
 8001e12:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001e14:	4b29      	ldr	r3, [pc, #164]	@ (8001ebc <LinkTimerBefore+0xb8>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	79ba      	ldrb	r2, [r7, #6]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d032      	beq.n	8001e86 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001e20:	79ba      	ldrb	r2, [r7, #6]
 8001e22:	4927      	ldr	r1, [pc, #156]	@ (8001ec0 <LinkTimerBefore+0xbc>)
 8001e24:	4613      	mov	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3314      	adds	r3, #20
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	4922      	ldr	r1, [pc, #136]	@ (8001ec0 <LinkTimerBefore+0xbc>)
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	440b      	add	r3, r1
 8001e42:	3315      	adds	r3, #21
 8001e44:	79fa      	ldrb	r2, [r7, #7]
 8001e46:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e48:	79fa      	ldrb	r2, [r7, #7]
 8001e4a:	491d      	ldr	r1, [pc, #116]	@ (8001ec0 <LinkTimerBefore+0xbc>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	3315      	adds	r3, #21
 8001e58:	79ba      	ldrb	r2, [r7, #6]
 8001e5a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001e5c:	79fa      	ldrb	r2, [r7, #7]
 8001e5e:	4918      	ldr	r1, [pc, #96]	@ (8001ec0 <LinkTimerBefore+0xbc>)
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	3314      	adds	r3, #20
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e70:	79ba      	ldrb	r2, [r7, #6]
 8001e72:	4913      	ldr	r1, [pc, #76]	@ (8001ec0 <LinkTimerBefore+0xbc>)
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3314      	adds	r3, #20
 8001e80:	79fa      	ldrb	r2, [r7, #7]
 8001e82:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001e84:	e014      	b.n	8001eb0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e86:	79fa      	ldrb	r2, [r7, #7]
 8001e88:	490d      	ldr	r1, [pc, #52]	@ (8001ec0 <LinkTimerBefore+0xbc>)
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	3315      	adds	r3, #21
 8001e96:	79ba      	ldrb	r2, [r7, #6]
 8001e98:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e9a:	79ba      	ldrb	r2, [r7, #6]
 8001e9c:	4908      	ldr	r1, [pc, #32]	@ (8001ec0 <LinkTimerBefore+0xbc>)
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3314      	adds	r3, #20
 8001eaa:	79fa      	ldrb	r2, [r7, #7]
 8001eac:	701a      	strb	r2, [r3, #0]
  return;
 8001eae:	bf00      	nop
}
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	200004fc 	.word	0x200004fc
 8001ec0:	2000046c 	.word	0x2000046c

08001ec4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ece:	4b4e      	ldr	r3, [pc, #312]	@ (8002008 <linkTimer+0x144>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b06      	cmp	r3, #6
 8001ed6:	d118      	bne.n	8001f0a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ed8:	4b4b      	ldr	r3, [pc, #300]	@ (8002008 <linkTimer+0x144>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b4b      	ldr	r3, [pc, #300]	@ (800200c <linkTimer+0x148>)
 8001ee0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001ee2:	4a49      	ldr	r2, [pc, #292]	@ (8002008 <linkTimer+0x144>)
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001ee8:	79fa      	ldrb	r2, [r7, #7]
 8001eea:	4949      	ldr	r1, [pc, #292]	@ (8002010 <linkTimer+0x14c>)
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3315      	adds	r3, #21
 8001ef8:	2206      	movs	r2, #6
 8001efa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001efc:	4b45      	ldr	r3, [pc, #276]	@ (8002014 <linkTimer+0x150>)
 8001efe:	f04f 32ff 	mov.w	r2, #4294967295
 8001f02:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	81fb      	strh	r3, [r7, #14]
 8001f08:	e078      	b.n	8001ffc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001f0a:	f000 f909 	bl	8002120 <ReturnTimeElapsed>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001f12:	79fa      	ldrb	r2, [r7, #7]
 8001f14:	493e      	ldr	r1, [pc, #248]	@ (8002010 <linkTimer+0x14c>)
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	3308      	adds	r3, #8
 8001f22:	6819      	ldr	r1, [r3, #0]
 8001f24:	89fb      	ldrh	r3, [r7, #14]
 8001f26:	79fa      	ldrb	r2, [r7, #7]
 8001f28:	4419      	add	r1, r3
 8001f2a:	4839      	ldr	r0, [pc, #228]	@ (8002010 <linkTimer+0x14c>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4403      	add	r3, r0
 8001f36:	3308      	adds	r3, #8
 8001f38:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001f3a:	79fa      	ldrb	r2, [r7, #7]
 8001f3c:	4934      	ldr	r1, [pc, #208]	@ (8002010 <linkTimer+0x14c>)
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	3308      	adds	r3, #8
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002008 <linkTimer+0x144>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	4619      	mov	r1, r3
 8001f56:	4a2e      	ldr	r2, [pc, #184]	@ (8002010 <linkTimer+0x14c>)
 8001f58:	460b      	mov	r3, r1
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	440b      	add	r3, r1
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	3308      	adds	r3, #8
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d337      	bcc.n	8001fdc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001f6c:	4b26      	ldr	r3, [pc, #152]	@ (8002008 <linkTimer+0x144>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001f72:	7b7a      	ldrb	r2, [r7, #13]
 8001f74:	4926      	ldr	r1, [pc, #152]	@ (8002010 <linkTimer+0x14c>)
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	3315      	adds	r3, #21
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f86:	e013      	b.n	8001fb0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001f88:	7b7a      	ldrb	r2, [r7, #13]
 8001f8a:	4921      	ldr	r1, [pc, #132]	@ (8002010 <linkTimer+0x14c>)
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	3315      	adds	r3, #21
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001f9c:	7b7a      	ldrb	r2, [r7, #13]
 8001f9e:	491c      	ldr	r1, [pc, #112]	@ (8002010 <linkTimer+0x14c>)
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	3315      	adds	r3, #21
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001fb0:	7b3b      	ldrb	r3, [r7, #12]
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d00b      	beq.n	8001fce <linkTimer+0x10a>
 8001fb6:	7b3a      	ldrb	r2, [r7, #12]
 8001fb8:	4915      	ldr	r1, [pc, #84]	@ (8002010 <linkTimer+0x14c>)
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d2dc      	bcs.n	8001f88 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001fce:	7b7a      	ldrb	r2, [r7, #13]
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fecf 	bl	8001d78 <LinkTimerAfter>
 8001fda:	e00f      	b.n	8001ffc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <linkTimer+0x144>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff0c 	bl	8001e04 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <linkTimer+0x144>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <linkTimer+0x148>)
 8001ff4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	@ (8002008 <linkTimer+0x144>)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001ffc:	89fb      	ldrh	r3, [r7, #14]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200004fc 	.word	0x200004fc
 800200c:	200004fd 	.word	0x200004fd
 8002010:	2000046c 	.word	0x2000046c
 8002014:	20000500 	.word	0x20000500

08002018 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	460a      	mov	r2, r1
 8002022:	71fb      	strb	r3, [r7, #7]
 8002024:	4613      	mov	r3, r2
 8002026:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002028:	4b39      	ldr	r3, [pc, #228]	@ (8002110 <UnlinkTimer+0xf8>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	79fa      	ldrb	r2, [r7, #7]
 8002030:	429a      	cmp	r2, r3
 8002032:	d111      	bne.n	8002058 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002034:	4b36      	ldr	r3, [pc, #216]	@ (8002110 <UnlinkTimer+0xf8>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b36      	ldr	r3, [pc, #216]	@ (8002114 <UnlinkTimer+0xfc>)
 800203c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800203e:	79fa      	ldrb	r2, [r7, #7]
 8002040:	4935      	ldr	r1, [pc, #212]	@ (8002118 <UnlinkTimer+0x100>)
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	3315      	adds	r3, #21
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4b2f      	ldr	r3, [pc, #188]	@ (8002110 <UnlinkTimer+0xf8>)
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e03e      	b.n	80020d6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002058:	79fa      	ldrb	r2, [r7, #7]
 800205a:	492f      	ldr	r1, [pc, #188]	@ (8002118 <UnlinkTimer+0x100>)
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	3314      	adds	r3, #20
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800206c:	79fa      	ldrb	r2, [r7, #7]
 800206e:	492a      	ldr	r1, [pc, #168]	@ (8002118 <UnlinkTimer+0x100>)
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	440b      	add	r3, r1
 800207a:	3315      	adds	r3, #21
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002080:	79f9      	ldrb	r1, [r7, #7]
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	4824      	ldr	r0, [pc, #144]	@ (8002118 <UnlinkTimer+0x100>)
 8002086:	460b      	mov	r3, r1
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	440b      	add	r3, r1
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4403      	add	r3, r0
 8002090:	3315      	adds	r3, #21
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b2d8      	uxtb	r0, r3
 8002096:	4920      	ldr	r1, [pc, #128]	@ (8002118 <UnlinkTimer+0x100>)
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	440b      	add	r3, r1
 80020a2:	3315      	adds	r3, #21
 80020a4:	4602      	mov	r2, r0
 80020a6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020a8:	7bbb      	ldrb	r3, [r7, #14]
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d013      	beq.n	80020d6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80020ae:	79f9      	ldrb	r1, [r7, #7]
 80020b0:	7bba      	ldrb	r2, [r7, #14]
 80020b2:	4819      	ldr	r0, [pc, #100]	@ (8002118 <UnlinkTimer+0x100>)
 80020b4:	460b      	mov	r3, r1
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	440b      	add	r3, r1
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4403      	add	r3, r0
 80020be:	3314      	adds	r3, #20
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b2d8      	uxtb	r0, r3
 80020c4:	4914      	ldr	r1, [pc, #80]	@ (8002118 <UnlinkTimer+0x100>)
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	3314      	adds	r3, #20
 80020d2:	4602      	mov	r2, r0
 80020d4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80020d6:	79fa      	ldrb	r2, [r7, #7]
 80020d8:	490f      	ldr	r1, [pc, #60]	@ (8002118 <UnlinkTimer+0x100>)
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	330c      	adds	r3, #12
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80020ea:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <UnlinkTimer+0xf8>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b06      	cmp	r3, #6
 80020f2:	d107      	bne.n	8002104 <UnlinkTimer+0xec>
 80020f4:	79bb      	ldrb	r3, [r7, #6]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d104      	bne.n	8002104 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80020fa:	4b08      	ldr	r3, [pc, #32]	@ (800211c <UnlinkTimer+0x104>)
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	601a      	str	r2, [r3, #0]
  }

  return;
 8002102:	bf00      	nop
 8002104:	bf00      	nop
}
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	200004fc 	.word	0x200004fc
 8002114:	200004fd 	.word	0x200004fd
 8002118:	2000046c 	.word	0x2000046c
 800211c:	20000500 	.word	0x20000500

08002120 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002126:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <ReturnTimeElapsed+0x70>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d026      	beq.n	800217e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002130:	f7ff fe02 	bl	8001d38 <ReadRtcSsrValue>
 8002134:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002136:	4b16      	ldr	r3, [pc, #88]	@ (8002190 <ReturnTimeElapsed+0x70>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	d805      	bhi.n	800214c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002140:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <ReturnTimeElapsed+0x70>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	e00a      	b.n	8002162 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800214c:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <ReturnTimeElapsed+0x74>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002158:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <ReturnTimeElapsed+0x70>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	4413      	add	r3, r2
 8002160:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002162:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <ReturnTimeElapsed+0x78>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002170:	4b0a      	ldr	r3, [pc, #40]	@ (800219c <ReturnTimeElapsed+0x7c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	40d3      	lsrs	r3, r2
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	e001      	b.n	8002182 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	b29b      	uxth	r3, r3
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000500 	.word	0x20000500
 8002194:	20000508 	.word	0x20000508
 8002198:	20000506 	.word	0x20000506
 800219c:	20000505 	.word	0x20000505

080021a0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d108      	bne.n	80021c2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80021b0:	f7ff fdc2 	bl	8001d38 <ReadRtcSsrValue>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a21      	ldr	r2, [pc, #132]	@ (800223c <RestartWakeupCounter+0x9c>)
 80021b8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80021ba:	2003      	movs	r0, #3
 80021bc:	f006 fc53 	bl	8008a66 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80021c0:	e039      	b.n	8002236 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d803      	bhi.n	80021d0 <RestartWakeupCounter+0x30>
 80021c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <RestartWakeupCounter+0xa0>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d002      	beq.n	80021d6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80021d6:	bf00      	nop
 80021d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <RestartWakeupCounter+0xa4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f8      	beq.n	80021d8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80021e6:	4b17      	ldr	r3, [pc, #92]	@ (8002244 <RestartWakeupCounter+0xa4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <RestartWakeupCounter+0xa4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80021f6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80021f8:	4b13      	ldr	r3, [pc, #76]	@ (8002248 <RestartWakeupCounter+0xa8>)
 80021fa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80021fe:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002200:	2003      	movs	r0, #3
 8002202:	f006 fc3e 	bl	8008a82 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002206:	4b11      	ldr	r3, [pc, #68]	@ (800224c <RestartWakeupCounter+0xac>)
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	0c1b      	lsrs	r3, r3, #16
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	88fa      	ldrh	r2, [r7, #6]
 8002210:	490e      	ldr	r1, [pc, #56]	@ (800224c <RestartWakeupCounter+0xac>)
 8002212:	4313      	orrs	r3, r2
 8002214:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002216:	f7ff fd8f 	bl	8001d38 <ReadRtcSsrValue>
 800221a:	4603      	mov	r3, r0
 800221c:	4a07      	ldr	r2, [pc, #28]	@ (800223c <RestartWakeupCounter+0x9c>)
 800221e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002220:	4b08      	ldr	r3, [pc, #32]	@ (8002244 <RestartWakeupCounter+0xa4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	4b07      	ldr	r3, [pc, #28]	@ (8002244 <RestartWakeupCounter+0xa4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800222e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002230:	f3af 8000 	nop.w
  return ;
 8002234:	bf00      	nop
}
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000500 	.word	0x20000500
 8002240:	20000505 	.word	0x20000505
 8002244:	20000c40 	.word	0x20000c40
 8002248:	58000800 	.word	0x58000800
 800224c:	40002800 	.word	0x40002800

08002250 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002256:	4b45      	ldr	r3, [pc, #276]	@ (800236c <RescheduleTimerList+0x11c>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002262:	d107      	bne.n	8002274 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002264:	bf00      	nop
 8002266:	4b42      	ldr	r3, [pc, #264]	@ (8002370 <RescheduleTimerList+0x120>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f8      	bne.n	8002266 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002274:	4b3e      	ldr	r3, [pc, #248]	@ (8002370 <RescheduleTimerList+0x120>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	4b3d      	ldr	r3, [pc, #244]	@ (8002370 <RescheduleTimerList+0x120>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002282:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002284:	4b3b      	ldr	r3, [pc, #236]	@ (8002374 <RescheduleTimerList+0x124>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	493a      	ldr	r1, [pc, #232]	@ (8002378 <RescheduleTimerList+0x128>)
 800228e:	4613      	mov	r3, r2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	3308      	adds	r3, #8
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800229e:	f7ff ff3f 	bl	8002120 <ReturnTimeElapsed>
 80022a2:	4603      	mov	r3, r0
 80022a4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d205      	bcs.n	80022ba <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80022b2:	4b32      	ldr	r3, [pc, #200]	@ (800237c <RescheduleTimerList+0x12c>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	e04d      	b.n	8002356 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	4a30      	ldr	r2, [pc, #192]	@ (8002380 <RescheduleTimerList+0x130>)
 80022be:	8812      	ldrh	r2, [r2, #0]
 80022c0:	b292      	uxth	r2, r2
 80022c2:	4413      	add	r3, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d906      	bls.n	80022da <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80022cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002380 <RescheduleTimerList+0x130>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80022d2:	4b2a      	ldr	r3, [pc, #168]	@ (800237c <RescheduleTimerList+0x12c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
 80022d8:	e03d      	b.n	8002356 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80022e4:	4b25      	ldr	r3, [pc, #148]	@ (800237c <RescheduleTimerList+0x12c>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80022ea:	e034      	b.n	8002356 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	4922      	ldr	r1, [pc, #136]	@ (8002378 <RescheduleTimerList+0x128>)
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	440b      	add	r3, r1
 80022fa:	3308      	adds	r3, #8
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	429a      	cmp	r2, r3
 8002302:	d20a      	bcs.n	800231a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	491c      	ldr	r1, [pc, #112]	@ (8002378 <RescheduleTimerList+0x128>)
 8002308:	4613      	mov	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	3308      	adds	r3, #8
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	e013      	b.n	8002342 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	4916      	ldr	r1, [pc, #88]	@ (8002378 <RescheduleTimerList+0x128>)
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	3308      	adds	r3, #8
 800232a:	6819      	ldr	r1, [r3, #0]
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	1ac9      	subs	r1, r1, r3
 8002332:	4811      	ldr	r0, [pc, #68]	@ (8002378 <RescheduleTimerList+0x128>)
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4403      	add	r3, r0
 800233e:	3308      	adds	r3, #8
 8002340:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	490c      	ldr	r1, [pc, #48]	@ (8002378 <RescheduleTimerList+0x128>)
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	3315      	adds	r3, #21
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2b06      	cmp	r3, #6
 800235a:	d1c7      	bne.n	80022ec <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800235c:	89bb      	ldrh	r3, [r7, #12]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff1e 	bl	80021a0 <RestartWakeupCounter>

  return ;
 8002364:	bf00      	nop
}
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40002800 	.word	0x40002800
 8002370:	20000c40 	.word	0x20000c40
 8002374:	200004fc 	.word	0x200004fc
 8002378:	2000046c 	.word	0x2000046c
 800237c:	20000504 	.word	0x20000504
 8002380:	2000050a 	.word	0x2000050a

08002384 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	@ 0x28
 8002388:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800238a:	f3ef 8310 	mrs	r3, PRIMASK
 800238e:	617b      	str	r3, [r7, #20]
  return(result);
 8002390:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002394:	b672      	cpsid	i
}
 8002396:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002398:	4b59      	ldr	r3, [pc, #356]	@ (8002500 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	22ca      	movs	r2, #202	@ 0xca
 800239e:	625a      	str	r2, [r3, #36]	@ 0x24
 80023a0:	4b57      	ldr	r3, [pc, #348]	@ (8002500 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2253      	movs	r2, #83	@ 0x53
 80023a6:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80023a8:	4b55      	ldr	r3, [pc, #340]	@ (8002500 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	4b54      	ldr	r3, [pc, #336]	@ (8002500 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023b6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80023b8:	4b52      	ldr	r3, [pc, #328]	@ (8002504 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80023c0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023c4:	4950      	ldr	r1, [pc, #320]	@ (8002508 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	440b      	add	r3, r1
 80023d0:	330c      	adds	r3, #12
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d16e      	bne.n	80024b8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80023da:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023de:	494a      	ldr	r1, [pc, #296]	@ (8002508 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80023ee:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023f2:	4945      	ldr	r1, [pc, #276]	@ (8002508 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	3310      	adds	r3, #16
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002404:	4b41      	ldr	r3, [pc, #260]	@ (800250c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d04c      	beq.n	80024a8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800240e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002412:	493d      	ldr	r1, [pc, #244]	@ (8002508 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002414:	4613      	mov	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	330d      	adds	r3, #13
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d124      	bne.n	8002472 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002428:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800242c:	2101      	movs	r1, #1
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fdf2 	bl	8002018 <UnlinkTimer>
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f383 8810 	msr	PRIMASK, r3
}
 800243e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002440:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002444:	4930      	ldr	r1, [pc, #192]	@ (8002508 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	3304      	adds	r3, #4
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f9b8 	bl	80027d0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002460:	4b27      	ldr	r3, [pc, #156]	@ (8002500 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	22ca      	movs	r2, #202	@ 0xca
 8002466:	625a      	str	r2, [r3, #36]	@ 0x24
 8002468:	4b25      	ldr	r3, [pc, #148]	@ (8002500 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2253      	movs	r2, #83	@ 0x53
 800246e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002470:	e012      	b.n	8002498 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f383 8810 	msr	PRIMASK, r3
}
 800247c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800247e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f920 	bl	80026c8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002488:	4b1d      	ldr	r3, [pc, #116]	@ (8002500 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	22ca      	movs	r2, #202	@ 0xca
 800248e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002490:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2253      	movs	r2, #83	@ 0x53
 8002496:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002498:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	4619      	mov	r1, r3
 80024a0:	69b8      	ldr	r0, [r7, #24]
 80024a2:	f000 fa1b 	bl	80028dc <HW_TS_RTC_Int_AppNot>
 80024a6:	e022      	b.n	80024ee <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80024a8:	f7ff fed2 	bl	8002250 <RescheduleTimerList>
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f383 8810 	msr	PRIMASK, r3
}
 80024b6:	e01a      	b.n	80024ee <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80024b8:	bf00      	nop
 80024ba:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f8      	beq.n	80024ba <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80024c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80024d8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80024da:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80024dc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f383 8810 	msr	PRIMASK, r3
}
 80024ec:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024ee:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	22ff      	movs	r2, #255	@ 0xff
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80024f6:	bf00      	nop
}
 80024f8:	3728      	adds	r7, #40	@ 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000c40 	.word	0x20000c40
 8002504:	200004fc 	.word	0x200004fc
 8002508:	2000046c 	.word	0x2000046c
 800250c:	20000504 	.word	0x20000504
 8002510:	58000800 	.word	0x58000800

08002514 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002520:	4b5e      	ldr	r3, [pc, #376]	@ (800269c <HW_TS_Init+0x188>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	22ca      	movs	r2, #202	@ 0xca
 8002526:	625a      	str	r2, [r3, #36]	@ 0x24
 8002528:	4b5c      	ldr	r3, [pc, #368]	@ (800269c <HW_TS_Init+0x188>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2253      	movs	r2, #83	@ 0x53
 800252e:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002530:	4b5b      	ldr	r3, [pc, #364]	@ (80026a0 <HW_TS_Init+0x18c>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a5a      	ldr	r2, [pc, #360]	@ (80026a0 <HW_TS_Init+0x18c>)
 8002536:	f043 0320 	orr.w	r3, r3, #32
 800253a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800253c:	4b58      	ldr	r3, [pc, #352]	@ (80026a0 <HW_TS_Init+0x18c>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f1c3 0304 	rsb	r3, r3, #4
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b55      	ldr	r3, [pc, #340]	@ (80026a4 <HW_TS_Init+0x190>)
 8002550:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002552:	4b53      	ldr	r3, [pc, #332]	@ (80026a0 <HW_TS_Init+0x18c>)
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800255a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800255e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	fa92 f2a2 	rbit	r2, r2
 8002566:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	2a00      	cmp	r2, #0
 8002570:	d101      	bne.n	8002576 <HW_TS_Init+0x62>
  {
    return 32U;
 8002572:	2220      	movs	r2, #32
 8002574:	e003      	b.n	800257e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	fab2 f282 	clz	r2, r2
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	40d3      	lsrs	r3, r2
 8002580:	b2db      	uxtb	r3, r3
 8002582:	3301      	adds	r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b48      	ldr	r3, [pc, #288]	@ (80026a8 <HW_TS_Init+0x194>)
 8002588:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800258a:	4b45      	ldr	r3, [pc, #276]	@ (80026a0 <HW_TS_Init+0x18c>)
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	b29b      	uxth	r3, r3
 8002590:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002594:	b29b      	uxth	r3, r3
 8002596:	3301      	adds	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	4b44      	ldr	r3, [pc, #272]	@ (80026ac <HW_TS_Init+0x198>)
 800259c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800259e:	4b43      	ldr	r3, [pc, #268]	@ (80026ac <HW_TS_Init+0x198>)
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	4a40      	ldr	r2, [pc, #256]	@ (80026a8 <HW_TS_Init+0x194>)
 80025a6:	7812      	ldrb	r2, [r2, #0]
 80025a8:	fb02 f303 	mul.w	r3, r2, r3
 80025ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025b0:	4a3c      	ldr	r2, [pc, #240]	@ (80026a4 <HW_TS_Init+0x190>)
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	40d3      	lsrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80025be:	4293      	cmp	r3, r2
 80025c0:	d904      	bls.n	80025cc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80025c2:	4b3b      	ldr	r3, [pc, #236]	@ (80026b0 <HW_TS_Init+0x19c>)
 80025c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	e003      	b.n	80025d4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b37      	ldr	r3, [pc, #220]	@ (80026b0 <HW_TS_Init+0x19c>)
 80025d2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80025d4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80025d8:	f7ff fb9c 	bl	8001d14 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80025dc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80025e0:	f7ff fb84 	bl	8001cec <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d13d      	bne.n	8002666 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80025ea:	4b32      	ldr	r3, [pc, #200]	@ (80026b4 <HW_TS_Init+0x1a0>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80025f0:	4b31      	ldr	r3, [pc, #196]	@ (80026b8 <HW_TS_Init+0x1a4>)
 80025f2:	f04f 32ff 	mov.w	r2, #4294967295
 80025f6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80025f8:	2300      	movs	r3, #0
 80025fa:	77fb      	strb	r3, [r7, #31]
 80025fc:	e00c      	b.n	8002618 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80025fe:	7ffa      	ldrb	r2, [r7, #31]
 8002600:	492e      	ldr	r1, [pc, #184]	@ (80026bc <HW_TS_Init+0x1a8>)
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	440b      	add	r3, r1
 800260c:	330c      	adds	r3, #12
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002612:	7ffb      	ldrb	r3, [r7, #31]
 8002614:	3301      	adds	r3, #1
 8002616:	77fb      	strb	r3, [r7, #31]
 8002618:	7ffb      	ldrb	r3, [r7, #31]
 800261a:	2b05      	cmp	r3, #5
 800261c:	d9ef      	bls.n	80025fe <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800261e:	4b28      	ldr	r3, [pc, #160]	@ (80026c0 <HW_TS_Init+0x1ac>)
 8002620:	2206      	movs	r2, #6
 8002622:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002624:	4b1d      	ldr	r3, [pc, #116]	@ (800269c <HW_TS_Init+0x188>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	4b1c      	ldr	r3, [pc, #112]	@ (800269c <HW_TS_Init+0x188>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002632:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002634:	4b19      	ldr	r3, [pc, #100]	@ (800269c <HW_TS_Init+0x188>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4b17      	ldr	r3, [pc, #92]	@ (800269c <HW_TS_Init+0x188>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002644:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002646:	4b1f      	ldr	r3, [pc, #124]	@ (80026c4 <HW_TS_Init+0x1b0>)
 8002648:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800264c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800264e:	2003      	movs	r0, #3
 8002650:	f006 fa17 	bl	8008a82 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <HW_TS_Init+0x188>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <HW_TS_Init+0x188>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	e009      	b.n	800267a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002666:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <HW_TS_Init+0x188>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002674:	2003      	movs	r0, #3
 8002676:	f006 f9f6 	bl	8008a66 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <HW_TS_Init+0x188>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	22ff      	movs	r2, #255	@ 0xff
 8002680:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002682:	2200      	movs	r2, #0
 8002684:	2103      	movs	r1, #3
 8002686:	2003      	movs	r0, #3
 8002688:	f006 f9ab 	bl	80089e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800268c:	2003      	movs	r0, #3
 800268e:	f006 f9c2 	bl	8008a16 <HAL_NVIC_EnableIRQ>

  return;
 8002692:	bf00      	nop
}
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000c40 	.word	0x20000c40
 80026a0:	40002800 	.word	0x40002800
 80026a4:	20000505 	.word	0x20000505
 80026a8:	20000506 	.word	0x20000506
 80026ac:	20000508 	.word	0x20000508
 80026b0:	2000050a 	.word	0x2000050a
 80026b4:	20000504 	.word	0x20000504
 80026b8:	20000500 	.word	0x20000500
 80026bc:	2000046c 	.word	0x2000046c
 80026c0:	200004fc 	.word	0x200004fc
 80026c4:	58000800 	.word	0x58000800

080026c8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d2:	f3ef 8310 	mrs	r3, PRIMASK
 80026d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80026d8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80026da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80026dc:	b672      	cpsid	i
}
 80026de:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80026e0:	2003      	movs	r0, #3
 80026e2:	f006 f9a6 	bl	8008a32 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80026e6:	4b34      	ldr	r3, [pc, #208]	@ (80027b8 <HW_TS_Stop+0xf0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	22ca      	movs	r2, #202	@ 0xca
 80026ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80026ee:	4b32      	ldr	r3, [pc, #200]	@ (80027b8 <HW_TS_Stop+0xf0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2253      	movs	r2, #83	@ 0x53
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80026f6:	79fa      	ldrb	r2, [r7, #7]
 80026f8:	4930      	ldr	r1, [pc, #192]	@ (80027bc <HW_TS_Stop+0xf4>)
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	330c      	adds	r3, #12
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d142      	bne.n	8002794 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fc80 	bl	8002018 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002718:	4b29      	ldr	r3, [pc, #164]	@ (80027c0 <HW_TS_Stop+0xf8>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	2b06      	cmp	r3, #6
 8002722:	d12f      	bne.n	8002784 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002724:	4b27      	ldr	r3, [pc, #156]	@ (80027c4 <HW_TS_Stop+0xfc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002730:	d107      	bne.n	8002742 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002732:	bf00      	nop
 8002734:	4b20      	ldr	r3, [pc, #128]	@ (80027b8 <HW_TS_Stop+0xf0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f8      	bne.n	8002734 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002742:	4b1d      	ldr	r3, [pc, #116]	@ (80027b8 <HW_TS_Stop+0xf0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	4b1b      	ldr	r3, [pc, #108]	@ (80027b8 <HW_TS_Stop+0xf0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002750:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002752:	bf00      	nop
 8002754:	4b18      	ldr	r3, [pc, #96]	@ (80027b8 <HW_TS_Stop+0xf0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f8      	beq.n	8002754 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <HW_TS_Stop+0xf0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4b13      	ldr	r3, [pc, #76]	@ (80027b8 <HW_TS_Stop+0xf0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002772:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002774:	4b14      	ldr	r3, [pc, #80]	@ (80027c8 <HW_TS_Stop+0x100>)
 8002776:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800277a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800277c:	2003      	movs	r0, #3
 800277e:	f006 f980 	bl	8008a82 <HAL_NVIC_ClearPendingIRQ>
 8002782:	e007      	b.n	8002794 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <HW_TS_Stop+0x104>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	7cfa      	ldrb	r2, [r7, #19]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002790:	f7ff fd5e 	bl	8002250 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002794:	4b08      	ldr	r3, [pc, #32]	@ (80027b8 <HW_TS_Stop+0xf0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	22ff      	movs	r2, #255	@ 0xff
 800279a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800279c:	2003      	movs	r0, #3
 800279e:	f006 f93a 	bl	8008a16 <HAL_NVIC_EnableIRQ>
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f383 8810 	msr	PRIMASK, r3
}
 80027ac:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80027ae:	bf00      	nop
}
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000c40 	.word	0x20000c40
 80027bc:	2000046c 	.word	0x2000046c
 80027c0:	200004fc 	.word	0x200004fc
 80027c4:	40002800 	.word	0x40002800
 80027c8:	58000800 	.word	0x58000800
 80027cc:	200004fd 	.word	0x200004fd

080027d0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	6039      	str	r1, [r7, #0]
 80027da:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80027dc:	79fa      	ldrb	r2, [r7, #7]
 80027de:	493b      	ldr	r1, [pc, #236]	@ (80028cc <HW_TS_Start+0xfc>)
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	330c      	adds	r3, #12
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d103      	bne.n	80027fc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff66 	bl	80026c8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002800:	60fb      	str	r3, [r7, #12]
  return(result);
 8002802:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002806:	b672      	cpsid	i
}
 8002808:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800280a:	2003      	movs	r0, #3
 800280c:	f006 f911 	bl	8008a32 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002810:	4b2f      	ldr	r3, [pc, #188]	@ (80028d0 <HW_TS_Start+0x100>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	22ca      	movs	r2, #202	@ 0xca
 8002816:	625a      	str	r2, [r3, #36]	@ 0x24
 8002818:	4b2d      	ldr	r3, [pc, #180]	@ (80028d0 <HW_TS_Start+0x100>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2253      	movs	r2, #83	@ 0x53
 800281e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002820:	79fa      	ldrb	r2, [r7, #7]
 8002822:	492a      	ldr	r1, [pc, #168]	@ (80028cc <HW_TS_Start+0xfc>)
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	330c      	adds	r3, #12
 8002830:	2202      	movs	r2, #2
 8002832:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002834:	79fa      	ldrb	r2, [r7, #7]
 8002836:	4925      	ldr	r1, [pc, #148]	@ (80028cc <HW_TS_Start+0xfc>)
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	3308      	adds	r3, #8
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002848:	79fa      	ldrb	r2, [r7, #7]
 800284a:	4920      	ldr	r1, [pc, #128]	@ (80028cc <HW_TS_Start+0xfc>)
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	440b      	add	r3, r1
 8002856:	3304      	adds	r3, #4
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fb30 	bl	8001ec4 <linkTimer>
 8002864:	4603      	mov	r3, r0
 8002866:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002868:	4b1a      	ldr	r3, [pc, #104]	@ (80028d4 <HW_TS_Start+0x104>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800286e:	4b1a      	ldr	r3, [pc, #104]	@ (80028d8 <HW_TS_Start+0x108>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	7c7a      	ldrb	r2, [r7, #17]
 8002876:	429a      	cmp	r2, r3
 8002878:	d002      	beq.n	8002880 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800287a:	f7ff fce9 	bl	8002250 <RescheduleTimerList>
 800287e:	e013      	b.n	80028a8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002880:	79fa      	ldrb	r2, [r7, #7]
 8002882:	4912      	ldr	r1, [pc, #72]	@ (80028cc <HW_TS_Start+0xfc>)
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	440b      	add	r3, r1
 800288e:	3308      	adds	r3, #8
 8002890:	6819      	ldr	r1, [r3, #0]
 8002892:	8a7b      	ldrh	r3, [r7, #18]
 8002894:	79fa      	ldrb	r2, [r7, #7]
 8002896:	1ac9      	subs	r1, r1, r3
 8002898:	480c      	ldr	r0, [pc, #48]	@ (80028cc <HW_TS_Start+0xfc>)
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4403      	add	r3, r0
 80028a4:	3308      	adds	r3, #8
 80028a6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80028a8:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <HW_TS_Start+0x100>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	22ff      	movs	r2, #255	@ 0xff
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80028b0:	2003      	movs	r0, #3
 80028b2:	f006 f8b0 	bl	8008a16 <HAL_NVIC_EnableIRQ>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f383 8810 	msr	PRIMASK, r3
}
 80028c0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80028c2:	bf00      	nop
}
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	2000046c 	.word	0x2000046c
 80028d0:	20000c40 	.word	0x20000c40
 80028d4:	200004fc 	.word	0x200004fc
 80028d8:	200004fd 	.word	0x200004fd

080028dc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	460b      	mov	r3, r1
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4798      	blx	r3

  return;
 80028ee:	bf00      	nop
}
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <LL_AHB2_GRP1_EnableClock>:
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002902:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002904:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4313      	orrs	r3, r2
 800290c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002912:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4013      	ands	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002934:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002936:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4313      	orrs	r3, r2
 800293e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002944:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4013      	ands	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800294c:	68fb      	ldr	r3, [r7, #12]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002960:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <MX_I2C1_Init+0x74>)
 8002962:	4a1c      	ldr	r2, [pc, #112]	@ (80029d4 <MX_I2C1_Init+0x78>)
 8002964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E12363;
 8002966:	4b1a      	ldr	r3, [pc, #104]	@ (80029d0 <MX_I2C1_Init+0x74>)
 8002968:	4a1b      	ldr	r2, [pc, #108]	@ (80029d8 <MX_I2C1_Init+0x7c>)
 800296a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800296c:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <MX_I2C1_Init+0x74>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002972:	4b17      	ldr	r3, [pc, #92]	@ (80029d0 <MX_I2C1_Init+0x74>)
 8002974:	2201      	movs	r2, #1
 8002976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002978:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <MX_I2C1_Init+0x74>)
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800297e:	4b14      	ldr	r3, [pc, #80]	@ (80029d0 <MX_I2C1_Init+0x74>)
 8002980:	2200      	movs	r2, #0
 8002982:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002984:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <MX_I2C1_Init+0x74>)
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800298a:	4b11      	ldr	r3, [pc, #68]	@ (80029d0 <MX_I2C1_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002990:	4b0f      	ldr	r3, [pc, #60]	@ (80029d0 <MX_I2C1_Init+0x74>)
 8002992:	2200      	movs	r2, #0
 8002994:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002996:	480e      	ldr	r0, [pc, #56]	@ (80029d0 <MX_I2C1_Init+0x74>)
 8002998:	f006 fdb6 	bl	8009508 <HAL_I2C_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029a2:	f000 fb2d 	bl	8003000 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029a6:	2100      	movs	r1, #0
 80029a8:	4809      	ldr	r0, [pc, #36]	@ (80029d0 <MX_I2C1_Init+0x74>)
 80029aa:	f007 fb39 	bl	800a020 <HAL_I2CEx_ConfigAnalogFilter>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029b4:	f000 fb24 	bl	8003000 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029b8:	2100      	movs	r1, #0
 80029ba:	4805      	ldr	r0, [pc, #20]	@ (80029d0 <MX_I2C1_Init+0x74>)
 80029bc:	f007 fb7b 	bl	800a0b6 <HAL_I2CEx_ConfigDigitalFilter>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029c6:	f000 fb1b 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	2000050c 	.word	0x2000050c
 80029d4:	40005400 	.word	0x40005400
 80029d8:	00e12363 	.word	0x00e12363

080029dc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80029e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a58 <MX_I2C3_Init+0x7c>)
 80029e2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a5c <MX_I2C3_Init+0x80>)
 80029e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300B29;
 80029e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a58 <MX_I2C3_Init+0x7c>)
 80029e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a60 <MX_I2C3_Init+0x84>)
 80029ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80029ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002a58 <MX_I2C3_Init+0x7c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029f2:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <MX_I2C3_Init+0x7c>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029f8:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <MX_I2C3_Init+0x7c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80029fe:	4b16      	ldr	r3, [pc, #88]	@ (8002a58 <MX_I2C3_Init+0x7c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a04:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <MX_I2C3_Init+0x7c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a0a:	4b13      	ldr	r3, [pc, #76]	@ (8002a58 <MX_I2C3_Init+0x7c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a10:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <MX_I2C3_Init+0x7c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002a16:	4810      	ldr	r0, [pc, #64]	@ (8002a58 <MX_I2C3_Init+0x7c>)
 8002a18:	f006 fd76 	bl	8009508 <HAL_I2C_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002a22:	f000 faed 	bl	8003000 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a26:	2100      	movs	r1, #0
 8002a28:	480b      	ldr	r0, [pc, #44]	@ (8002a58 <MX_I2C3_Init+0x7c>)
 8002a2a:	f007 faf9 	bl	800a020 <HAL_I2CEx_ConfigAnalogFilter>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002a34:	f000 fae4 	bl	8003000 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4807      	ldr	r0, [pc, #28]	@ (8002a58 <MX_I2C3_Init+0x7c>)
 8002a3c:	f007 fb3b 	bl	800a0b6 <HAL_I2CEx_ConfigDigitalFilter>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002a46:	f000 fadb 	bl	8003000 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8002a4a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8002a4e:	f007 fb7f 	bl	800a150 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000560 	.word	0x20000560
 8002a5c:	40005c00 	.word	0x40005c00
 8002a60:	00300b29 	.word	0x00300b29

08002a64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b09c      	sub	sp, #112	@ 0x70
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	2250      	movs	r2, #80	@ 0x50
 8002a82:	2100      	movs	r1, #0
 8002a84:	4618      	mov	r0, r3
 8002a86:	f018 fdc4 	bl	801b612 <memset>
  if(i2cHandle->Instance==I2C1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a37      	ldr	r2, [pc, #220]	@ (8002b6c <HAL_I2C_MspInit+0x108>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d127      	bne.n	8002ae4 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a94:	2304      	movs	r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a98:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a9e:	f107 030c 	add.w	r3, r7, #12
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f00a fc43 	bl	800d32e <HAL_RCCEx_PeriphCLKConfig>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002aae:	f000 faa7 	bl	8003000 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab2:	2002      	movs	r0, #2
 8002ab4:	f7ff ff1f 	bl	80028f6 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ab8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002abe:	2312      	movs	r3, #18
 8002ac0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aca:	2304      	movs	r3, #4
 8002acc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4826      	ldr	r0, [pc, #152]	@ (8002b70 <HAL_I2C_MspInit+0x10c>)
 8002ad6:	f006 fb21 	bl	800911c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ada:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002ade:	f7ff ff23 	bl	8002928 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002ae2:	e03e      	b.n	8002b62 <HAL_I2C_MspInit+0xfe>
  else if(i2cHandle->Instance==I2C3)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a22      	ldr	r2, [pc, #136]	@ (8002b74 <HAL_I2C_MspInit+0x110>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d139      	bne.n	8002b62 <HAL_I2C_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002aee:	2308      	movs	r3, #8
 8002af0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002af2:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002af6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002af8:	f107 030c 	add.w	r3, r7, #12
 8002afc:	4618      	mov	r0, r3
 8002afe:	f00a fc16 	bl	800d32e <HAL_RCCEx_PeriphCLKConfig>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8002b08:	f000 fa7a 	bl	8003000 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	f7ff fef2 	bl	80028f6 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b12:	2002      	movs	r0, #2
 8002b14:	f7ff feef 	bl	80028f6 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b18:	2380      	movs	r3, #128	@ 0x80
 8002b1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b1c:	2312      	movs	r3, #18
 8002b1e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	2300      	movs	r3, #0
 8002b26:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b28:	2304      	movs	r3, #4
 8002b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b30:	4619      	mov	r1, r3
 8002b32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b36:	f006 faf1 	bl	800911c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b3a:	2310      	movs	r3, #16
 8002b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b3e:	2312      	movs	r3, #18
 8002b40:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b52:	4619      	mov	r1, r3
 8002b54:	4806      	ldr	r0, [pc, #24]	@ (8002b70 <HAL_I2C_MspInit+0x10c>)
 8002b56:	f006 fae1 	bl	800911c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b5a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002b5e:	f7ff fee3 	bl	8002928 <LL_APB1_GRP1_EnableClock>
}
 8002b62:	bf00      	nop
 8002b64:	3770      	adds	r7, #112	@ 0x70
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40005400 	.word	0x40005400
 8002b70:	48000400 	.word	0x48000400
 8002b74:	40005c00 	.word	0x40005c00

08002b78 <LL_AHB3_GRP1_EnableClock>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <MX_IPCC_Init+0x20>)
 8002bb2:	4a07      	ldr	r2, [pc, #28]	@ (8002bd0 <MX_IPCC_Init+0x24>)
 8002bb4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002bb6:	4805      	ldr	r0, [pc, #20]	@ (8002bcc <MX_IPCC_Init+0x20>)
 8002bb8:	f007 fadc 	bl	800a174 <HAL_IPCC_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002bc2:	f000 fa1d 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200005b4 	.word	0x200005b4
 8002bd0:	58000c00 	.word	0x58000c00

08002bd4 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c18 <HAL_IPCC_MspInit+0x44>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d113      	bne.n	8002c0e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002be6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002bea:	f7ff ffc5 	bl	8002b78 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	202c      	movs	r0, #44	@ 0x2c
 8002bf4:	f005 fef5 	bl	80089e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002bf8:	202c      	movs	r0, #44	@ 0x2c
 8002bfa:	f005 ff0c 	bl	8008a16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	202d      	movs	r0, #45	@ 0x2d
 8002c04:	f005 feed 	bl	80089e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002c08:	202d      	movs	r0, #45	@ 0x2d
 8002c0a:	f005 ff04 	bl	8008a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	58000c00 	.word	0x58000c00

08002c1c <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	3220      	adds	r2, #32
 8002c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c30:	4a05      	ldr	r2, [pc, #20]	@ (8002c48 <LL_HSEM_1StepLock+0x2c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d001      	beq.n	8002c3a <LL_HSEM_1StepLock+0x1e>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <LL_HSEM_1StepLock+0x20>
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	80000400 	.word	0x80000400

08002c4c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c5c:	d12f      	bne.n	8002cbe <HAL_GPIO_EXTI_Callback+0x72>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)== GPIO_PIN_RESET){
 8002c5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c62:	4833      	ldr	r0, [pc, #204]	@ (8002d30 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002c64:	f006 fbca 	bl	80093fc <HAL_GPIO_ReadPin>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_GPIO_EXTI_Callback+0x36>

					boutonAtime=0;
 8002c6e:	4b31      	ldr	r3, [pc, #196]	@ (8002d34 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 8002c74:	f004 fcd6 	bl	8007624 <HAL_GetTick>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d38 <HAL_GPIO_EXTI_Callback+0xec>)
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e010      	b.n	8002ca4 <HAL_GPIO_EXTI_Callback+0x58>


				}
				else{
					BTN_A++;
 8002c82:	4b2e      	ldr	r3, [pc, #184]	@ (8002d3c <HAL_GPIO_EXTI_Callback+0xf0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	4a2c      	ldr	r2, [pc, #176]	@ (8002d3c <HAL_GPIO_EXTI_Callback+0xf0>)
 8002c8a:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8002c8c:	f004 fcca 	bl	8007624 <HAL_GetTick>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4a29      	ldr	r2, [pc, #164]	@ (8002d38 <HAL_GPIO_EXTI_Callback+0xec>)
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b26      	ldr	r3, [pc, #152]	@ (8002d34 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002c9c:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8002c9e:	4b26      	ldr	r3, [pc, #152]	@ (8002d38 <HAL_GPIO_EXTI_Callback+0xec>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 8002ca4:	4b23      	ldr	r3, [pc, #140]	@ (8002d34 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002cac:	db07      	blt.n	8002cbe <HAL_GPIO_EXTI_Callback+0x72>
					BTN_A_LONG++;
 8002cae:	4b24      	ldr	r3, [pc, #144]	@ (8002d40 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	4a22      	ldr	r2, [pc, #136]	@ (8002d40 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002cb6:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 8002cb8:	4b20      	ldr	r3, [pc, #128]	@ (8002d3c <HAL_GPIO_EXTI_Callback+0xf0>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_15){
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cc4:	d12f      	bne.n	8002d26 <HAL_GPIO_EXTI_Callback+0xda>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)== GPIO_PIN_RESET){
 8002cc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cca:	4819      	ldr	r0, [pc, #100]	@ (8002d30 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002ccc:	f006 fb96 	bl	80093fc <HAL_GPIO_ReadPin>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_GPIO_EXTI_Callback+0x9e>

			boutonBtime=0;
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d44 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 8002cdc:	f004 fca2 	bl	8007624 <HAL_GetTick>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b18      	ldr	r3, [pc, #96]	@ (8002d48 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e010      	b.n	8002d0c <HAL_GPIO_EXTI_Callback+0xc0>


		}
		else{
			BTN_B++;
 8002cea:	4b18      	ldr	r3, [pc, #96]	@ (8002d4c <HAL_GPIO_EXTI_Callback+0x100>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	4a16      	ldr	r2, [pc, #88]	@ (8002d4c <HAL_GPIO_EXTI_Callback+0x100>)
 8002cf2:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 8002cf4:	f004 fc96 	bl	8007624 <HAL_GetTick>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4a13      	ldr	r2, [pc, #76]	@ (8002d48 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b10      	ldr	r3, [pc, #64]	@ (8002d44 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002d04:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 8002d06:	4b10      	ldr	r3, [pc, #64]	@ (8002d48 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d44 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002d14:	db07      	blt.n	8002d26 <HAL_GPIO_EXTI_Callback+0xda>
			BTN_B_LONG++;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	@ (8002d50 <HAL_GPIO_EXTI_Callback+0x104>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d50 <HAL_GPIO_EXTI_Callback+0x104>)
 8002d1e:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8002d20:	4b0a      	ldr	r3, [pc, #40]	@ (8002d4c <HAL_GPIO_EXTI_Callback+0x100>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
		}



	}
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	48000800 	.word	0x48000800
 8002d34:	20000aa4 	.word	0x20000aa4
 8002d38:	20000aac 	.word	0x20000aac
 8002d3c:	20000780 	.word	0x20000780
 8002d40:	20000ab8 	.word	0x20000ab8
 8002d44:	20000aa8 	.word	0x20000aa8
 8002d48:	20000ab0 	.word	0x20000ab0
 8002d4c:	20000784 	.word	0x20000784
 8002d50:	20000ab4 	.word	0x20000ab4

08002d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d5a:	f004 fbf5 	bl	8007548 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002d5e:	f7fe fd6b 	bl	8001838 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d62:	f000 f8af 	bl	8002ec4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002d66:	f000 f911 	bl	8002f8c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002d6a:	f7ff ff1f 	bl	8002bac <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8002d6e:	f000 fd43 	bl	80037f8 <MX_RF_Init>
  MX_GPIO_Init();
 8002d72:	f7fe ff4b 	bl	8001c0c <MX_GPIO_Init>
  MX_DMA_Init();
 8002d76:	f7fe ff16 	bl	8001ba6 <MX_DMA_Init>
  MX_ADC1_Init();
 8002d7a:	f7fe fae3 	bl	8001344 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002d7e:	f7ff fded 	bl	800295c <MX_I2C1_Init>
  MX_I2C3_Init();
 8002d82:	f7ff fe2b 	bl	80029dc <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002d86:	f004 f9d3 	bl	8007130 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8002d8a:	f003 ff27 	bl	8006bdc <MX_TIM2_Init>
  MX_TIM16_Init();
 8002d8e:	f003 ff73 	bl	8006c78 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002d92:	f003 ff99 	bl	8006cc8 <MX_TIM17_Init>
  MX_SPI1_Init();
 8002d96:	f000 fe35 	bl	8003a04 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002d9a:	f004 fa15 	bl	80071c8 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8002d9e:	f015 fd11 	bl	80187c4 <MX_USB_Device_Init>
  MX_RTC_Init();
 8002da2:	f000 fd5b 	bl	800385c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */



  	ssd1306_Init();
 8002da6:	f001 f8b3 	bl	8003f10 <ssd1306_Init>

  	HAL_Delay(10);
 8002daa:	200a      	movs	r0, #10
 8002dac:	f7fe fe7f 	bl	8001aae <HAL_Delay>
  	ssd1306_Fill(Black);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f001 f917 	bl	8003fe4 <ssd1306_Fill>

  	ssd1306_DrawBitmap(31, 12, startimg, 72, 40, White);
 8002db6:	2301      	movs	r3, #1
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	2328      	movs	r3, #40	@ 0x28
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	2348      	movs	r3, #72	@ 0x48
 8002dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8002e7c <main+0x128>)
 8002dc2:	210c      	movs	r1, #12
 8002dc4:	201f      	movs	r0, #31
 8002dc6:	f001 fb58 	bl	800447a <ssd1306_DrawBitmap>
  	ssd1306_UpdateScreen();
 8002dca:	f001 f923 	bl	8004014 <ssd1306_UpdateScreen>


  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8002dce:	2203      	movs	r2, #3
 8002dd0:	492b      	ldr	r1, [pc, #172]	@ (8002e80 <main+0x12c>)
 8002dd2:	482c      	ldr	r0, [pc, #176]	@ (8002e84 <main+0x130>)
 8002dd4:	f004 ff5e 	bl	8007c94 <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start(&htim2);
 8002dd8:	482b      	ldr	r0, [pc, #172]	@ (8002e88 <main+0x134>)
 8002dda:	f00c f915 	bl	800f008 <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim16);
 8002dde:	482b      	ldr	r0, [pc, #172]	@ (8002e8c <main+0x138>)
 8002de0:	f00c f958 	bl	800f094 <HAL_TIM_Base_Start_IT>

  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8002de4:	2201      	movs	r2, #1
 8002de6:	2101      	movs	r1, #1
 8002de8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dec:	f006 fb1e 	bl	800942c <HAL_GPIO_WritePin>

  	HAL_Delay(100);
 8002df0:	2064      	movs	r0, #100	@ 0x64
 8002df2:	f7fe fe5c 	bl	8001aae <HAL_Delay>
  	HAL_UART_Abort(&hlpuart1);
 8002df6:	4826      	ldr	r0, [pc, #152]	@ (8002e90 <main+0x13c>)
 8002df8:	f00c fe12 	bl	800fa20 <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002dfc:	2240      	movs	r2, #64	@ 0x40
 8002dfe:	4925      	ldr	r1, [pc, #148]	@ (8002e94 <main+0x140>)
 8002e00:	4823      	ldr	r0, [pc, #140]	@ (8002e90 <main+0x13c>)
 8002e02:	f00c fdc1 	bl	800f988 <HAL_UART_Receive_DMA>


  	memset(flashread,'1',256);
 8002e06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e0a:	2131      	movs	r1, #49	@ 0x31
 8002e0c:	4822      	ldr	r0, [pc, #136]	@ (8002e98 <main+0x144>)
 8002e0e:	f018 fc00 	bl	801b612 <memset>
  	memset(flashwrite,'\0',256);
 8002e12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e16:	2100      	movs	r1, #0
 8002e18:	4820      	ldr	r0, [pc, #128]	@ (8002e9c <main+0x148>)
 8002e1a:	f018 fbfa 	bl	801b612 <memset>
  	memset((uint8_t *)bufferscreen ,'\0',50);
 8002e1e:	2232      	movs	r2, #50	@ 0x32
 8002e20:	2100      	movs	r1, #0
 8002e22:	481f      	ldr	r0, [pc, #124]	@ (8002ea0 <main+0x14c>)
 8002e24:	f018 fbf5 	bl	801b612 <memset>



  	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_7);
 8002e28:	2380      	movs	r3, #128	@ 0x80
 8002e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea4 <main+0x150>)
 8002e2c:	491e      	ldr	r1, [pc, #120]	@ (8002ea8 <main+0x154>)
 8002e2e:	481f      	ldr	r0, [pc, #124]	@ (8002eac <main+0x158>)
 8002e30:	f014 fd2f 	bl	8017892 <SPIF_Init>





  	getindex();
 8002e34:	f000 ff38 	bl	8003ca8 <getindex>


  	barocheck=PADS_continuous_init(&hi2c1);
 8002e38:	481d      	ldr	r0, [pc, #116]	@ (8002eb0 <main+0x15c>)
 8002e3a:	f7fe f8ab 	bl	8000f94 <PADS_continuous_init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb4 <main+0x160>)
 8002e44:	701a      	strb	r2, [r3, #0]

  	ssd1306_Fill(Black);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f001 f8cc 	bl	8003fe4 <ssd1306_Fill>

  	state=STATE_SPEED;
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <main+0x164>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
  	BTN_A=0;
 8002e52:	4b1a      	ldr	r3, [pc, #104]	@ (8002ebc <main+0x168>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
  	BTN_A_LONG=0;
 8002e58:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <main+0x16c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]

  	HAL_Delay(700);
 8002e5e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002e62:	f7fe fe24 	bl	8001aae <HAL_Delay>

  	//LL_HSEM_1StepLock( HSEM, 5 );
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002e66:	f7fe fcf5 	bl	8001854 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002e6a:	f7fe fe45 	bl	8001af8 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
	  statemachine();
 8002e6e:	f001 fd6f 	bl	8004950 <statemachine>
	  ssd1306_UpdateScreen();
 8002e72:	f001 f8cf 	bl	8004014 <ssd1306_UpdateScreen>
    MX_APPE_Process();
 8002e76:	bf00      	nop
 8002e78:	e7f7      	b.n	8002e6a <main+0x116>
 8002e7a:	bf00      	nop
 8002e7c:	08020248 	.word	0x08020248
 8002e80:	200007a8 	.word	0x200007a8
 8002e84:	200003a8 	.word	0x200003a8
 8002e88:	20001108 	.word	0x20001108
 8002e8c:	20001154 	.word	0x20001154
 8002e90:	200011ec 	.word	0x200011ec
 8002e94:	200005fc 	.word	0x200005fc
 8002e98:	200008bc 	.word	0x200008bc
 8002e9c:	200007bc 	.word	0x200007bc
 8002ea0:	200009e0 	.word	0x200009e0
 8002ea4:	48000400 	.word	0x48000400
 8002ea8:	20000c98 	.word	0x20000c98
 8002eac:	20000788 	.word	0x20000788
 8002eb0:	2000050c 	.word	0x2000050c
 8002eb4:	20000c01 	.word	0x20000c01
 8002eb8:	200005f0 	.word	0x200005f0
 8002ebc:	20000780 	.word	0x20000780
 8002ec0:	20000ab8 	.word	0x20000ab8

08002ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b09a      	sub	sp, #104	@ 0x68
 8002ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eca:	f107 0320 	add.w	r3, r7, #32
 8002ece:	2248      	movs	r2, #72	@ 0x48
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f018 fb9d 	bl	801b612 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ed8:	1d3b      	adds	r3, r7, #4
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	60da      	str	r2, [r3, #12]
 8002ee4:	611a      	str	r2, [r3, #16]
 8002ee6:	615a      	str	r2, [r3, #20]
 8002ee8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eea:	4b27      	ldr	r3, [pc, #156]	@ (8002f88 <SystemClock_Config+0xc4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ef2:	4a25      	ldr	r2, [pc, #148]	@ (8002f88 <SystemClock_Config+0xc4>)
 8002ef4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b23      	ldr	r3, [pc, #140]	@ (8002f88 <SystemClock_Config+0xc4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002f06:	2303      	movs	r3, #3
 8002f08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f16:	2340      	movs	r3, #64	@ 0x40
 8002f18:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002f22:	2310      	movs	r3, #16
 8002f24:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002f26:	2308      	movs	r3, #8
 8002f28:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f30:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002f34:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f3a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f3c:	f107 0320 	add.w	r3, r7, #32
 8002f40:	4618      	mov	r0, r3
 8002f42:	f009 fa43 	bl	800c3cc <HAL_RCC_OscConfig>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002f4c:	f000 f858 	bl	8003000 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002f50:	236f      	movs	r3, #111	@ 0x6f
 8002f52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f54:	2303      	movs	r3, #3
 8002f56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002f64:	2380      	movs	r3, #128	@ 0x80
 8002f66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	2103      	movs	r1, #3
 8002f70:	4618      	mov	r0, r3
 8002f72:	f009 fd9f 	bl	800cab4 <HAL_RCC_ClockConfig>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002f7c:	f000 f840 	bl	8003000 <Error_Handler>
  }
}
 8002f80:	bf00      	nop
 8002f82:	3768      	adds	r7, #104	@ 0x68
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	58000400 	.word	0x58000400

08002f8c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b094      	sub	sp, #80	@ 0x50
 8002f90:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f92:	463b      	mov	r3, r7
 8002f94:	2250      	movs	r2, #80	@ 0x50
 8002f96:	2100      	movs	r1, #0
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f018 fb3a 	bl	801b612 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002f9e:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8002fa2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002fa4:	2306      	movs	r3, #6
 8002fa6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002fa8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002fae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fb2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002fb4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002fb8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8002fba:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8002fbe:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002fc0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002fc4:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002fc6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002fcc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002fd0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002fd6:	2310      	movs	r3, #16
 8002fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fda:	463b      	mov	r3, r7
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f00a f9a6 	bl	800d32e <HAL_RCCEx_PeriphCLKConfig>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002fe8:	f000 f80a 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock( HSEM, 5 );
 8002fec:	2105      	movs	r1, #5
 8002fee:	4803      	ldr	r0, [pc, #12]	@ (8002ffc <PeriphCommonClock_Config+0x70>)
 8002ff0:	f7ff fe14 	bl	8002c1c <LL_HSEM_1StepLock>

  /* USER CODE END Smps */
}
 8002ff4:	bf00      	nop
 8002ff6:	3750      	adds	r7, #80	@ 0x50
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	58001400 	.word	0x58001400

08003000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003004:	b672      	cpsid	i
}
 8003006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <Error_Handler+0x8>

0800300c <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7fd f903 	bl	8000220 <strlen>
 800301a:	4603      	mov	r3, r0
 800301c:	2b04      	cmp	r3, #4
 800301e:	d801      	bhi.n	8003024 <gps_checksum+0x18>
 8003020:	2300      	movs	r3, #0
 8003022:	e038      	b.n	8003096 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7fd f8fb 	bl	8000220 <strlen>
 800302a:	4603      	mov	r3, r0
 800302c:	3b04      	subs	r3, #4
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd f8f2 	bl	8000220 <strlen>
 800303c:	4603      	mov	r3, r0
 800303e:	3b03      	subs	r3, #3
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	4413      	add	r3, r2
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	e00a      	b.n	8003068 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4413      	add	r3, r2
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	4053      	eors	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	3301      	adds	r3, #1
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7fd f8d9 	bl	8000220 <strlen>
 800306e:	4603      	mov	r3, r0
 8003070:	1f5a      	subs	r2, r3, #5
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	429a      	cmp	r2, r3
 8003076:	d8ec      	bhi.n	8003052 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8003078:	f107 0308 	add.w	r3, r7, #8
 800307c:	2210      	movs	r2, #16
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f017 faf7 	bl	801a674 <strtol>
 8003086:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	429a      	cmp	r2, r3
 800308e:	d101      	bne.n	8003094 <gps_checksum+0x88>
        return 1;
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8003094:	2300      	movs	r3, #0
    }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b0b7      	sub	sp, #220	@ 0xdc
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 80030b0:	f107 0320 	add.w	r3, r7, #32
 80030b4:	2264      	movs	r2, #100	@ 0x64
 80030b6:	2100      	movs	r1, #0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f018 faaa 	bl	801b612 <memset>
    char *marker = strtok(inputString, ",");
 80030be:	49c2      	ldr	r1, [pc, #776]	@ (80033c8 <nmea_GPGGA+0x328>)
 80030c0:	6838      	ldr	r0, [r7, #0]
 80030c2:	f018 fac1 	bl	801b648 <strtok>
 80030c6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 80030ca:	e027      	b.n	800311c <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80030cc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80030d0:	f7fd f8a6 	bl	8000220 <strlen>
 80030d4:	4603      	mov	r3, r0
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 80030dc:	1c63      	adds	r3, r4, #1
 80030de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80030e2:	4610      	mov	r0, r2
 80030e4:	f016 fb1e 	bl	8019724 <malloc>
 80030e8:	4603      	mov	r3, r0
 80030ea:	461a      	mov	r2, r3
 80030ec:	00a3      	lsls	r3, r4, #2
 80030ee:	33d8      	adds	r3, #216	@ 0xd8
 80030f0:	443b      	add	r3, r7
 80030f2:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 80030f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030fa:	3b01      	subs	r3, #1
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	33d8      	adds	r3, #216	@ 0xd8
 8003100:	443b      	add	r3, r7
 8003102:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003106:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800310a:	4618      	mov	r0, r3
 800310c:	f018 fb95 	bl	801b83a <strcpy>
        marker = strtok(NULL, ",");
 8003110:	49ad      	ldr	r1, [pc, #692]	@ (80033c8 <nmea_GPGGA+0x328>)
 8003112:	2000      	movs	r0, #0
 8003114:	f018 fa98 	bl	801b648 <strtok>
 8003118:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 800311c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1d3      	bne.n	80030cc <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8003124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 800312c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	332c      	adds	r3, #44	@ 0x2c
 8003138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f018 fb7c 	bl	801b83a <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8003142:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8003146:	2b53      	cmp	r3, #83	@ 0x53
 8003148:	d004      	beq.n	8003154 <nmea_GPGGA+0xb4>
 800314a:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 800314e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003150:	f040 8159 	bne.w	8003406 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800315a:	e010      	b.n	800317e <nmea_GPGGA+0xde>
 800315c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800315e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003162:	4413      	add	r3, r2
 8003164:	7819      	ldrb	r1, [r3, #0]
 8003166:	f107 021c 	add.w	r2, r7, #28
 800316a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800316e:	4413      	add	r3, r2
 8003170:	460a      	mov	r2, r1
 8003172:	701a      	strb	r2, [r3, #0]
 8003174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003178:	3301      	adds	r3, #1
 800317a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800317e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003182:	2b01      	cmp	r3, #1
 8003184:	ddea      	ble.n	800315c <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8003186:	2300      	movs	r3, #0
 8003188:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800318c:	e011      	b.n	80031b2 <nmea_GPGGA+0x112>
 800318e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003190:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003194:	3302      	adds	r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	7819      	ldrb	r1, [r3, #0]
 800319a:	f107 0214 	add.w	r2, r7, #20
 800319e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031a2:	4413      	add	r3, r2
 80031a4:	460a      	mov	r2, r1
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031ac:	3301      	adds	r3, #1
 80031ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	dde9      	ble.n	800318e <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80031ba:	f107 031c 	add.w	r3, r7, #28
 80031be:	220a      	movs	r2, #10
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f017 fa56 	bl	801a674 <strtol>
 80031c8:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 80031cc:	f107 0314 	add.w	r3, r7, #20
 80031d0:	2100      	movs	r1, #0
 80031d2:	4618      	mov	r0, r3
 80031d4:	f017 f96e 	bl	801a4b4 <strtof>
 80031d8:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80031dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031e0:	ee07 3a90 	vmov	s15, r3
 80031e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031e8:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 80031ec:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 80033cc <nmea_GPGGA+0x32c>
 80031f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f8:	ee17 0a90 	vmov	r0, s15
 80031fc:	f7fd f97c 	bl	80004f8 <__aeabi_f2d>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8003208:	2300      	movs	r3, #0
 800320a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800320e:	e010      	b.n	8003232 <nmea_GPGGA+0x192>
 8003210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003212:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003216:	4413      	add	r3, r2
 8003218:	7819      	ldrb	r1, [r3, #0]
 800321a:	f107 0210 	add.w	r2, r7, #16
 800321e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003222:	4413      	add	r3, r2
 8003224:	460a      	mov	r2, r1
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800322c:	3301      	adds	r3, #1
 800322e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003232:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003236:	2b02      	cmp	r3, #2
 8003238:	ddea      	ble.n	8003210 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 800323a:	2300      	movs	r3, #0
 800323c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003240:	e011      	b.n	8003266 <nmea_GPGGA+0x1c6>
 8003242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003244:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003248:	3303      	adds	r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	7819      	ldrb	r1, [r3, #0]
 800324e:	f107 0208 	add.w	r2, r7, #8
 8003252:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003256:	4413      	add	r3, r2
 8003258:	460a      	mov	r2, r1
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003260:	3301      	adds	r3, #1
 8003262:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003266:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800326a:	2b05      	cmp	r3, #5
 800326c:	dde9      	ble.n	8003242 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 800326e:	f107 0310 	add.w	r3, r7, #16
 8003272:	220a      	movs	r2, #10
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f017 f9fc 	bl	801a674 <strtol>
 800327c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8003280:	f107 0308 	add.w	r3, r7, #8
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f017 f914 	bl	801a4b4 <strtof>
 800328c:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003290:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003294:	ee07 3a90 	vmov	s15, r3
 8003298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800329c:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 80032a0:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 80033cc <nmea_GPGGA+0x32c>
 80032a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ac:	ee17 0a90 	vmov	r0, s15
 80032b0:	f7fd f922 	bl	80004f8 <__aeabi_f2d>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80032c8:	f7fd fbd6 	bl	8000a78 <__aeabi_dcmpeq>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d176      	bne.n	80033c0 <nmea_GPGGA+0x320>
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80032de:	f7fd fbcb 	bl	8000a78 <__aeabi_dcmpeq>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d16b      	bne.n	80033c0 <nmea_GPGGA+0x320>
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	4b38      	ldr	r3, [pc, #224]	@ (80033d0 <nmea_GPGGA+0x330>)
 80032ee:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80032f2:	f7fd fbcb 	bl	8000a8c <__aeabi_dcmplt>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d061      	beq.n	80033c0 <nmea_GPGGA+0x320>
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	4b34      	ldr	r3, [pc, #208]	@ (80033d4 <nmea_GPGGA+0x334>)
 8003302:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8003306:	f7fd fbc1 	bl	8000a8c <__aeabi_dcmplt>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d057      	beq.n	80033c0 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8003316:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 8003320:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003328:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8003332:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8003334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f017 f8bb 	bl	801a4b4 <strtof>
 800333e:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8003342:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003346:	eef5 7a40 	vcmp.f32	s15, #0.0
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	d102      	bne.n	8003356 <nmea_GPGGA+0x2b6>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	e001      	b.n	800335a <nmea_GPGGA+0x2ba>
 8003356:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 800335e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003360:	220a      	movs	r2, #10
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f017 f985 	bl	801a674 <strtol>
 800336a:	4602      	mov	r2, r0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8003370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003372:	220a      	movs	r2, #10
 8003374:	2100      	movs	r1, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f017 f97c 	bl	801a674 <strtol>
 800337c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003380:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003384:	2b00      	cmp	r3, #0
 8003386:	bfcc      	ite	gt
 8003388:	2301      	movgt	r3, #1
 800338a:	2300      	movle	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 8003394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f017 f88b 	bl	801a4b4 <strtof>
 800339e:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 80033a2:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80033a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ae:	d102      	bne.n	80033b6 <nmea_GPGGA+0x316>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	e001      	b.n	80033ba <nmea_GPGGA+0x31a>
 80033b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80033be:	e022      	b.n	8003406 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80033c6:	e016      	b.n	80033f6 <nmea_GPGGA+0x356>
 80033c8:	0801fdac 	.word	0x0801fdac
 80033cc:	42700000 	.word	0x42700000
 80033d0:	40568000 	.word	0x40568000
 80033d4:	40668000 	.word	0x40668000
 80033d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	33d8      	adds	r3, #216	@ 0xd8
 80033e0:	443b      	add	r3, r7
 80033e2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f016 f9a4 	bl	8019734 <free>
 80033ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80033f0:	3301      	adds	r3, #1
 80033f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80033f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80033fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033fe:	429a      	cmp	r2, r3
 8003400:	dbea      	blt.n	80033d8 <nmea_GPGGA+0x338>
            return 0;
 8003402:	2300      	movs	r3, #0
 8003404:	e019      	b.n	800343a <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8003406:	2300      	movs	r3, #0
 8003408:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800340c:	e00e      	b.n	800342c <nmea_GPGGA+0x38c>
 800340e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	33d8      	adds	r3, #216	@ 0xd8
 8003416:	443b      	add	r3, r7
 8003418:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800341c:	4618      	mov	r0, r3
 800341e:	f016 f989 	bl	8019734 <free>
 8003422:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003426:	3301      	adds	r3, #1
 8003428:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800342c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003430:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003434:	429a      	cmp	r2, r3
 8003436:	dbea      	blt.n	800340e <nmea_GPGGA+0x36e>
    return 1;
 8003438:	2301      	movs	r3, #1
}
 800343a:	4618      	mov	r0, r3
 800343c:	37dc      	adds	r7, #220	@ 0xdc
 800343e:	46bd      	mov	sp, r7
 8003440:	bd90      	pop	{r4, r7, pc}
 8003442:	bf00      	nop
 8003444:	0000      	movs	r0, r0
	...

08003448 <nmea_GNRMC>:
//    return 1;
//}



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b0a1      	sub	sp, #132	@ 0x84
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 8003456:	f107 030c 	add.w	r3, r7, #12
 800345a:	2264      	movs	r2, #100	@ 0x64
 800345c:	2100      	movs	r1, #0
 800345e:	4618      	mov	r0, r3
 8003460:	f018 f8d7 	bl	801b612 <memset>
    char *marker = strtok(inputString, ",");
 8003464:	4930      	ldr	r1, [pc, #192]	@ (8003528 <nmea_GNRMC+0xe0>)
 8003466:	6838      	ldr	r0, [r7, #0]
 8003468:	f018 f8ee 	bl	801b648 <strtok>
 800346c:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 800346e:	e021      	b.n	80034b4 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003470:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003472:	f7fc fed5 	bl	8000220 <strlen>
 8003476:	4603      	mov	r3, r0
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 800347c:	1c63      	adds	r3, r4, #1
 800347e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003480:	4610      	mov	r0, r2
 8003482:	f016 f94f 	bl	8019724 <malloc>
 8003486:	4603      	mov	r3, r0
 8003488:	461a      	mov	r2, r3
 800348a:	00a3      	lsls	r3, r4, #2
 800348c:	3380      	adds	r3, #128	@ 0x80
 800348e:	443b      	add	r3, r7
 8003490:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8003494:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003496:	3b01      	subs	r3, #1
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	3380      	adds	r3, #128	@ 0x80
 800349c:	443b      	add	r3, r7
 800349e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80034a2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80034a4:	4618      	mov	r0, r3
 80034a6:	f018 f9c8 	bl	801b83a <strcpy>
        marker = strtok(NULL, ",");
 80034aa:	491f      	ldr	r1, [pc, #124]	@ (8003528 <nmea_GNRMC+0xe0>)
 80034ac:	2000      	movs	r0, #0
 80034ae:	f018 f8cb 	bl	801b648 <strtok>
 80034b2:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 80034b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1da      	bne.n	8003470 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 80034ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034bc:	2100      	movs	r1, #0
 80034be:	4618      	mov	r0, r3
 80034c0:	f016 fff8 	bl	801a4b4 <strtof>
 80034c4:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 80034c8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80034ca:	f7fd f815 	bl	80004f8 <__aeabi_f2d>
 80034ce:	a314      	add	r3, pc, #80	@ (adr r3, 8003520 <nmea_GNRMC+0xd8>)
 80034d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d4:	f7fd f992 	bl	80007fc <__aeabi_ddiv>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f7fd fb5a 	bl	8000b98 <__aeabi_d2f>
 80034e4:	4602      	mov	r2, r0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 80034ea:	2300      	movs	r3, #0
 80034ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80034ee:	e00b      	b.n	8003508 <nmea_GNRMC+0xc0>
 80034f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	3380      	adds	r3, #128	@ 0x80
 80034f6:	443b      	add	r3, r7
 80034f8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f016 f919 	bl	8019734 <free>
 8003502:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003504:	3301      	adds	r3, #1
 8003506:	677b      	str	r3, [r7, #116]	@ 0x74
 8003508:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800350a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800350c:	429a      	cmp	r2, r3
 800350e:	dbef      	blt.n	80034f0 <nmea_GNRMC+0xa8>
    return 1;
 8003510:	2301      	movs	r3, #1
}
 8003512:	4618      	mov	r0, r3
 8003514:	3784      	adds	r7, #132	@ 0x84
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}
 800351a:	bf00      	nop
 800351c:	f3af 8000 	nop.w
 8003520:	be76c8b4 	.word	0xbe76c8b4
 8003524:	3fff1a9f 	.word	0x3fff1a9f
 8003528:	0801fdac 	.word	0x0801fdac

0800352c <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8003536:	223c      	movs	r2, #60	@ 0x3c
 8003538:	2100      	movs	r1, #0
 800353a:	4844      	ldr	r0, [pc, #272]	@ (800364c <nmea_parse+0x120>)
 800353c:	f018 f869 	bl	801b612 <memset>
    int cnt=0;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
    char * token = strtok(buffer, "$");
 8003544:	4942      	ldr	r1, [pc, #264]	@ (8003650 <nmea_parse+0x124>)
 8003546:	6838      	ldr	r0, [r7, #0]
 8003548:	f018 f87e 	bl	801b648 <strtok>
 800354c:	6138      	str	r0, [r7, #16]
    while(token !=NULL){
 800354e:	e01d      	b.n	800358c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003550:	6938      	ldr	r0, [r7, #16]
 8003552:	f7fc fe65 	bl	8000220 <strlen>
 8003556:	4603      	mov	r3, r0
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	697c      	ldr	r4, [r7, #20]
 800355c:	1c63      	adds	r3, r4, #1
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	4610      	mov	r0, r2
 8003562:	f016 f8df 	bl	8019724 <malloc>
 8003566:	4603      	mov	r3, r0
 8003568:	461a      	mov	r2, r3
 800356a:	4b38      	ldr	r3, [pc, #224]	@ (800364c <nmea_parse+0x120>)
 800356c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3b01      	subs	r3, #1
 8003574:	4a35      	ldr	r2, [pc, #212]	@ (800364c <nmea_parse+0x120>)
 8003576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357a:	6939      	ldr	r1, [r7, #16]
 800357c:	4618      	mov	r0, r3
 800357e:	f018 f95c 	bl	801b83a <strcpy>
        token = strtok(NULL, "$");
 8003582:	4933      	ldr	r1, [pc, #204]	@ (8003650 <nmea_parse+0x124>)
 8003584:	2000      	movs	r0, #0
 8003586:	f018 f85f 	bl	801b648 <strtok>
 800358a:	6138      	str	r0, [r7, #16]
    while(token !=NULL){
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1de      	bne.n	8003550 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	e03e      	b.n	8003616 <nmea_parse+0xea>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8003598:	4a2c      	ldr	r2, [pc, #176]	@ (800364c <nmea_parse+0x120>)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a0:	492c      	ldr	r1, [pc, #176]	@ (8003654 <nmea_parse+0x128>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f018 f8ac 	bl	801b700 <strstr>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d030      	beq.n	8003610 <nmea_parse+0xe4>
 80035ae:	4a27      	ldr	r2, [pc, #156]	@ (800364c <nmea_parse+0x120>)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fd28 	bl	800300c <gps_checksum>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d026      	beq.n	8003610 <nmea_parse+0xe4>
           if(strstr(data[i], "GNRMC")!=NULL){
 80035c2:	4a22      	ldr	r2, [pc, #136]	@ (800364c <nmea_parse+0x120>)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ca:	4923      	ldr	r1, [pc, #140]	@ (8003658 <nmea_parse+0x12c>)
 80035cc:	4618      	mov	r0, r3
 80035ce:	f018 f897 	bl	801b700 <strstr>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <nmea_parse+0xbe>
        	   nmea_GNRMC(gps_data, data[i]);
 80035d8:	4a1c      	ldr	r2, [pc, #112]	@ (800364c <nmea_parse+0x120>)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e0:	4619      	mov	r1, r3
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff ff30 	bl	8003448 <nmea_GNRMC>
 80035e8:	e012      	b.n	8003610 <nmea_parse+0xe4>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 80035ea:	4a18      	ldr	r2, [pc, #96]	@ (800364c <nmea_parse+0x120>)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f2:	491a      	ldr	r1, [pc, #104]	@ (800365c <nmea_parse+0x130>)
 80035f4:	4618      	mov	r0, r3
 80035f6:	f018 f883 	bl	801b700 <strstr>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d007      	beq.n	8003610 <nmea_parse+0xe4>
               nmea_GPGGA(gps_data, data[i]);
 8003600:	4a12      	ldr	r2, [pc, #72]	@ (800364c <nmea_parse+0x120>)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fd48 	bl	80030a0 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3301      	adds	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	429a      	cmp	r2, r3
 800361c:	dbbc      	blt.n	8003598 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	e009      	b.n	8003638 <nmea_parse+0x10c>
 8003624:	4a09      	ldr	r2, [pc, #36]	@ (800364c <nmea_parse+0x120>)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362c:	4618      	mov	r0, r3
 800362e:	f016 f881 	bl	8019734 <free>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	3301      	adds	r3, #1
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	429a      	cmp	r2, r3
 800363e:	dbf1      	blt.n	8003624 <nmea_parse+0xf8>


}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	bd90      	pop	{r4, r7, pc}
 800364a:	bf00      	nop
 800364c:	20000c04 	.word	0x20000c04
 8003650:	0801fdb0 	.word	0x0801fdb0
 8003654:	0801fdb4 	.word	0x0801fdb4
 8003658:	0801fdb8 	.word	0x0801fdb8
 800365c:	0801fdc0 	.word	0x0801fdc0

08003660 <distancecalc>:

double distancecalc(double lat1, double lat2, double long1, double long2){
 8003660:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003664:	b08a      	sub	sp, #40	@ 0x28
 8003666:	af00      	add	r7, sp, #0
 8003668:	ed87 0b06 	vstr	d0, [r7, #24]
 800366c:	ed87 1b04 	vstr	d1, [r7, #16]
 8003670:	ed87 2b02 	vstr	d2, [r7, #8]
 8003674:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 8003684:	a358      	add	r3, pc, #352	@ (adr r3, 80037e8 <distancecalc+0x188>)
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800368e:	f7fc ff8b 	bl	80005a8 <__aeabi_dmul>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	ec43 2b17 	vmov	d7, r2, r3
 800369a:	eeb0 0a47 	vmov.f32	s0, s14
 800369e:	eef0 0a67 	vmov.f32	s1, s15
 80036a2:	f01a fe39 	bl	801e318 <sinl>
 80036a6:	ec55 4b10 	vmov	r4, r5, d0
 80036aa:	a34f      	add	r3, pc, #316	@ (adr r3, 80037e8 <distancecalc+0x188>)
 80036ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036b4:	f7fc ff78 	bl	80005a8 <__aeabi_dmul>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	ec43 2b17 	vmov	d7, r2, r3
 80036c0:	eeb0 0a47 	vmov.f32	s0, s14
 80036c4:	eef0 0a67 	vmov.f32	s1, s15
 80036c8:	f01a fe26 	bl	801e318 <sinl>
 80036cc:	ec53 2b10 	vmov	r2, r3, d0
 80036d0:	4620      	mov	r0, r4
 80036d2:	4629      	mov	r1, r5
 80036d4:	f7fc ff68 	bl	80005a8 <__aeabi_dmul>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4614      	mov	r4, r2
 80036de:	461d      	mov	r5, r3
 80036e0:	a341      	add	r3, pc, #260	@ (adr r3, 80037e8 <distancecalc+0x188>)
 80036e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036ea:	f7fc ff5d 	bl	80005a8 <__aeabi_dmul>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	ec43 2b17 	vmov	d7, r2, r3
 80036f6:	eeb0 0a47 	vmov.f32	s0, s14
 80036fa:	eef0 0a67 	vmov.f32	s1, s15
 80036fe:	f01a fe09 	bl	801e314 <cosl>
 8003702:	ec59 8b10 	vmov	r8, r9, d0
 8003706:	a338      	add	r3, pc, #224	@ (adr r3, 80037e8 <distancecalc+0x188>)
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003710:	f7fc ff4a 	bl	80005a8 <__aeabi_dmul>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	ec43 2b17 	vmov	d7, r2, r3
 800371c:	eeb0 0a47 	vmov.f32	s0, s14
 8003720:	eef0 0a67 	vmov.f32	s1, s15
 8003724:	f01a fdf6 	bl	801e314 <cosl>
 8003728:	ec53 2b10 	vmov	r2, r3, d0
 800372c:	4640      	mov	r0, r8
 800372e:	4649      	mov	r1, r9
 8003730:	f7fc ff3a 	bl	80005a8 <__aeabi_dmul>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4690      	mov	r8, r2
 800373a:	4699      	mov	r9, r3
 800373c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003740:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003744:	f7fc fd78 	bl	8000238 <__aeabi_dsub>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	a325      	add	r3, pc, #148	@ (adr r3, 80037e8 <distancecalc+0x188>)
 8003752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003756:	f7fc ff27 	bl	80005a8 <__aeabi_dmul>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	ec43 2b17 	vmov	d7, r2, r3
 8003762:	eeb0 0a47 	vmov.f32	s0, s14
 8003766:	eef0 0a67 	vmov.f32	s1, s15
 800376a:	f01a fdd3 	bl	801e314 <cosl>
 800376e:	ec53 2b10 	vmov	r2, r3, d0
 8003772:	4640      	mov	r0, r8
 8003774:	4649      	mov	r1, r9
 8003776:	f7fc ff17 	bl	80005a8 <__aeabi_dmul>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4620      	mov	r0, r4
 8003780:	4629      	mov	r1, r5
 8003782:	f7fc fd5b 	bl	800023c <__adddf3>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	ec43 2b17 	vmov	d7, r2, r3
 800378e:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 80037e0 <distancecalc+0x180>
 8003792:	eeb0 0a47 	vmov.f32	s0, s14
 8003796:	eef0 0a67 	vmov.f32	s1, s15
 800379a:	f01a fd5d 	bl	801e258 <fmin>
 800379e:	eeb0 7a40 	vmov.f32	s14, s0
 80037a2:	eef0 7a60 	vmov.f32	s15, s1
 80037a6:	eeb0 0a47 	vmov.f32	s0, s14
 80037aa:	eef0 0a67 	vmov.f32	s1, s15
 80037ae:	f01a fdb5 	bl	801e31c <acosl>
 80037b2:	ec51 0b10 	vmov	r0, r1, d0
 80037b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80037f0 <distancecalc+0x190>)
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f7fc fef4 	bl	80005a8 <__aeabi_dmul>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 80037c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80037d0:	eeb0 0a47 	vmov.f32	s0, s14
 80037d4:	eef0 0a67 	vmov.f32	s1, s15
 80037d8:	3728      	adds	r7, #40	@ 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037e0:	00000000 	.word	0x00000000
 80037e4:	3ff00000 	.word	0x3ff00000
 80037e8:	a2529d39 	.word	0xa2529d39
 80037ec:	3f91df46 	.word	0x3f91df46
 80037f0:	00000000 	.word	0x00000000
 80037f4:	41584dae 	.word	0x41584dae

080037f8 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800380a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003812:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800381a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800381e:	bf00      	nop
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_APB1_GRP1_EnableClock>:
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003834:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003836:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4313      	orrs	r3, r2
 800383e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003844:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4013      	ands	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800384c:	68fb      	ldr	r3, [r7, #12]
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003862:	1d3b      	adds	r3, r7, #4
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003870:	2300      	movs	r3, #0
 8003872:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003874:	4b2c      	ldr	r3, [pc, #176]	@ (8003928 <MX_RTC_Init+0xcc>)
 8003876:	4a2d      	ldr	r2, [pc, #180]	@ (800392c <MX_RTC_Init+0xd0>)
 8003878:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800387a:	4b2b      	ldr	r3, [pc, #172]	@ (8003928 <MX_RTC_Init+0xcc>)
 800387c:	2200      	movs	r2, #0
 800387e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003880:	4b29      	ldr	r3, [pc, #164]	@ (8003928 <MX_RTC_Init+0xcc>)
 8003882:	227f      	movs	r2, #127	@ 0x7f
 8003884:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003886:	4b28      	ldr	r3, [pc, #160]	@ (8003928 <MX_RTC_Init+0xcc>)
 8003888:	f641 6284 	movw	r2, #7812	@ 0x1e84
 800388c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800388e:	4b26      	ldr	r3, [pc, #152]	@ (8003928 <MX_RTC_Init+0xcc>)
 8003890:	2200      	movs	r2, #0
 8003892:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003894:	4b24      	ldr	r3, [pc, #144]	@ (8003928 <MX_RTC_Init+0xcc>)
 8003896:	2200      	movs	r2, #0
 8003898:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800389a:	4b23      	ldr	r3, [pc, #140]	@ (8003928 <MX_RTC_Init+0xcc>)
 800389c:	2200      	movs	r2, #0
 800389e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80038a0:	4b21      	ldr	r3, [pc, #132]	@ (8003928 <MX_RTC_Init+0xcc>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80038a6:	4820      	ldr	r0, [pc, #128]	@ (8003928 <MX_RTC_Init+0xcc>)
 80038a8:	f009 ffc8 	bl	800d83c <HAL_RTC_Init>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80038b2:	f7ff fba5 	bl	8003000 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80038be:	2300      	movs	r3, #0
 80038c0:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	2201      	movs	r2, #1
 80038d2:	4619      	mov	r1, r3
 80038d4:	4814      	ldr	r0, [pc, #80]	@ (8003928 <MX_RTC_Init+0xcc>)
 80038d6:	f00a f861 	bl	800d99c <HAL_RTC_SetTime>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <MX_RTC_Init+0x88>
  {
    Error_Handler();
 80038e0:	f7ff fb8e 	bl	8003000 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80038e4:	2301      	movs	r3, #1
 80038e6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80038e8:	2301      	movs	r3, #1
 80038ea:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80038ec:	2301      	movs	r3, #1
 80038ee:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80038f4:	463b      	mov	r3, r7
 80038f6:	2201      	movs	r2, #1
 80038f8:	4619      	mov	r1, r3
 80038fa:	480b      	ldr	r0, [pc, #44]	@ (8003928 <MX_RTC_Init+0xcc>)
 80038fc:	f00a f912 	bl	800db24 <HAL_RTC_SetDate>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8003906:	f7ff fb7b 	bl	8003000 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800390a:	2204      	movs	r2, #4
 800390c:	2100      	movs	r1, #0
 800390e:	4806      	ldr	r0, [pc, #24]	@ (8003928 <MX_RTC_Init+0xcc>)
 8003910:	f00a fa26 	bl	800dd60 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800391a:	f7ff fb71 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800391e:	bf00      	nop
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000c40 	.word	0x20000c40
 800392c:	40002800 	.word	0x40002800

08003930 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b096      	sub	sp, #88	@ 0x58
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003938:	f107 0308 	add.w	r3, r7, #8
 800393c:	2250      	movs	r2, #80	@ 0x50
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f017 fe66 	bl	801b612 <memset>
  if(rtcHandle->Instance==RTC)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a14      	ldr	r2, [pc, #80]	@ (800399c <HAL_RTC_MspInit+0x6c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d121      	bne.n	8003994 <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

	  HAL_PWR_EnableBkUpAccess();
 8003950:	f008 f998 	bl	800bc84 <HAL_PWR_EnableBkUpAccess>




	  HAL_PWR_EnableBkUpAccess();
 8003954:	f008 f996 	bl	800bc84 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003958:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800395c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800395e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003962:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003964:	f107 0308 	add.w	r3, r7, #8
 8003968:	4618      	mov	r0, r3
 800396a:	f009 fce0 	bl	800d32e <HAL_RCCEx_PeriphCLKConfig>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003974:	f7ff fb44 	bl	8003000 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003978:	f7ff ff45 	bl	8003806 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800397c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003980:	f7ff ff52 	bl	8003828 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003984:	2200      	movs	r2, #0
 8003986:	2100      	movs	r1, #0
 8003988:	2003      	movs	r0, #3
 800398a:	f005 f82a 	bl	80089e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800398e:	2003      	movs	r0, #3
 8003990:	f005 f841 	bl	8008a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003994:	bf00      	nop
 8003996:	3758      	adds	r7, #88	@ 0x58
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40002800 	.word	0x40002800

080039a0 <LL_AHB2_GRP1_EnableClock>:
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80039a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80039b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4013      	ands	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039c4:	68fb      	ldr	r3, [r7, #12]
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80039da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80039ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4013      	ands	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039f6:	68fb      	ldr	r3, [r7, #12]
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003a08:	4b1b      	ldr	r3, [pc, #108]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a7c <MX_SPI1_Init+0x78>)
 8003a0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a16:	4b18      	ldr	r3, [pc, #96]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a1c:	4b16      	ldr	r3, [pc, #88]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a1e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a24:	4b14      	ldr	r3, [pc, #80]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a2a:	4b13      	ldr	r3, [pc, #76]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a30:	4b11      	ldr	r3, [pc, #68]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003a38:	4b0f      	ldr	r3, [pc, #60]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a3a:	2210      	movs	r2, #16
 8003a3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a44:	4b0c      	ldr	r3, [pc, #48]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003a50:	4b09      	ldr	r3, [pc, #36]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a52:	2207      	movs	r2, #7
 8003a54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a56:	4b08      	ldr	r3, [pc, #32]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a5c:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a5e:	2208      	movs	r2, #8
 8003a60:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a62:	4805      	ldr	r0, [pc, #20]	@ (8003a78 <MX_SPI1_Init+0x74>)
 8003a64:	f00a fa38 	bl	800ded8 <HAL_SPI_Init>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003a6e:	f7ff fac7 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000c98 	.word	0x20000c98
 8003a7c:	40013000 	.word	0x40013000

08003a80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a88:	f107 030c 	add.w	r3, r7, #12
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <HAL_SPI_MspInit+0x90>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d132      	bne.n	8003b08 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003aa2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003aa6:	f7ff ff94 	bl	80039d2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aaa:	2001      	movs	r0, #1
 8003aac:	f7ff ff78 	bl	80039a0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab0:	2002      	movs	r0, #2
 8003ab2:	f7ff ff75 	bl	80039a0 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8003ab6:	2342      	movs	r3, #66	@ 0x42
 8003ab8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aba:	2302      	movs	r3, #2
 8003abc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ac6:	2305      	movs	r3, #5
 8003ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aca:	f107 030c 	add.w	r3, r7, #12
 8003ace:	4619      	mov	r1, r3
 8003ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ad4:	f005 fb22 	bl	800911c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003ad8:	2320      	movs	r3, #32
 8003ada:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003adc:	2302      	movs	r3, #2
 8003ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ae8:	2305      	movs	r3, #5
 8003aea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aec:	f107 030c 	add.w	r3, r7, #12
 8003af0:	4619      	mov	r1, r3
 8003af2:	4808      	ldr	r0, [pc, #32]	@ (8003b14 <HAL_SPI_MspInit+0x94>)
 8003af4:	f005 fb12 	bl	800911c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8003af8:	2200      	movs	r2, #0
 8003afa:	2103      	movs	r1, #3
 8003afc:	2022      	movs	r0, #34	@ 0x22
 8003afe:	f004 ff70 	bl	80089e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003b02:	2022      	movs	r0, #34	@ 0x22
 8003b04:	f004 ff87 	bl	8008a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003b08:	bf00      	nop
 8003b0a:	3720      	adds	r7, #32
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40013000 	.word	0x40013000
 8003b14:	48000400 	.word	0x48000400

08003b18 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 8003b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1c:	ed2d 8b02 	vpush	{d8}
 8003b20:	b0a7      	sub	sp, #156	@ 0x9c
 8003b22:	af16      	add	r7, sp, #88	@ 0x58
 8003b24:	6378      	str	r0, [r7, #52]	@ 0x34
 8003b26:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8003b2a:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8003b2e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b30:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b32:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8003b3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b3c:	f7fc fcdc 	bl	80004f8 <__aeabi_f2d>
 8003b40:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003b44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b46:	f7fc fcd7 	bl	80004f8 <__aeabi_f2d>
 8003b4a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc fcd0 	bl	80004f8 <__aeabi_f2d>
 8003b58:	a332      	add	r3, pc, #200	@ (adr r3, 8003c24 <csvframe+0x10c>)
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	f7fc fd23 	bl	80005a8 <__aeabi_dmul>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	ec43 2b18 	vmov	d8, r2, r3
 8003b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b72:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8003b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fc fcbc 	bl	80004f8 <__aeabi_f2d>
 8003b80:	4682      	mov	sl, r0
 8003b82:	468b      	mov	fp, r1
 8003b84:	6a38      	ldr	r0, [r7, #32]
 8003b86:	f7fc fcb7 	bl	80004f8 <__aeabi_f2d>
 8003b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003c08 <csvframe+0xf0>)
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	4b1e      	ldr	r3, [pc, #120]	@ (8003c0c <csvframe+0xf4>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	4b1e      	ldr	r3, [pc, #120]	@ (8003c10 <csvframe+0xf8>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	607b      	str	r3, [r7, #4]
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <csvframe+0xfc>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	461e      	mov	r6, r3
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c18 <csvframe+0x100>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c1c <csvframe+0x104>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	9315      	str	r3, [sp, #84]	@ 0x54
 8003bae:	9214      	str	r2, [sp, #80]	@ 0x50
 8003bb0:	9613      	str	r6, [sp, #76]	@ 0x4c
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	9212      	str	r2, [sp, #72]	@ 0x48
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	9211      	str	r2, [sp, #68]	@ 0x44
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	9310      	str	r3, [sp, #64]	@ 0x40
 8003bbe:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8003bc6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8003bca:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003bce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003bd2:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003bd6:	ed97 7b04 	vldr	d7, [r7, #16]
 8003bda:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003bde:	ed97 7b06 	vldr	d7, [r7, #24]
 8003be2:	ed8d 7b00 	vstr	d7, [sp]
 8003be6:	4a0e      	ldr	r2, [pc, #56]	@ (8003c20 <csvframe+0x108>)
 8003be8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003bec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003bee:	f017 fc79 	bl	801b4e4 <sniprintf>
 8003bf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	return framesize;
 8003bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3744      	adds	r7, #68	@ 0x44
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	ecbd 8b02 	vpop	{d8}
 8003c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c04:	f3af 8000 	nop.w
 8003c08:	20000012 	.word	0x20000012
 8003c0c:	20000011 	.word	0x20000011
 8003c10:	20000010 	.word	0x20000010
 8003c14:	20000a9d 	.word	0x20000a9d
 8003c18:	20000a9e 	.word	0x20000a9e
 8003c1c:	20000a9c 	.word	0x20000a9c
 8003c20:	0801fdc8 	.word	0x0801fdc8
 8003c24:	cccccccd 	.word	0xcccccccd
 8003c28:	400ccccc 	.word	0x400ccccc

08003c2c <storeindex>:


void storeindex(void){
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b09c      	sub	sp, #112	@ 0x70
 8003c30:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8003c32:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003c36:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8003c38:	463b      	mov	r3, r7
 8003c3a:	2264      	movs	r2, #100	@ 0x64
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f017 fce7 	bl	801b612 <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8003c44:	4b14      	ldr	r3, [pc, #80]	@ (8003c98 <storeindex+0x6c>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b14      	ldr	r3, [pc, #80]	@ (8003c9c <storeindex+0x70>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4638      	mov	r0, r7
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	4a13      	ldr	r2, [pc, #76]	@ (8003ca0 <storeindex+0x74>)
 8003c54:	2164      	movs	r1, #100	@ 0x64
 8003c56:	f017 fc45 	bl	801b4e4 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8003c5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	da00      	bge.n	8003c62 <storeindex+0x36>
 8003c60:	330f      	adds	r3, #15
 8003c62:	111b      	asrs	r3, r3, #4
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fc fc35 	bl	80004d4 <__aeabi_i2d>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	f7fc ff49 	bl	8000b08 <__aeabi_d2iz>
 8003c76:	4603      	mov	r3, r0
 8003c78:	4619      	mov	r1, r3
 8003c7a:	480a      	ldr	r0, [pc, #40]	@ (8003ca4 <storeindex+0x78>)
 8003c7c:	f013 fe55 	bl	801792a <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8003c80:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003c82:	463a      	mov	r2, r7
 8003c84:	2300      	movs	r3, #0
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	2364      	movs	r3, #100	@ 0x64
 8003c8a:	4806      	ldr	r0, [pc, #24]	@ (8003ca4 <storeindex+0x78>)
 8003c8c:	f013 fed0 	bl	8017a30 <SPIF_WritePage>

}
 8003c90:	bf00      	nop
 8003c92:	3768      	adds	r7, #104	@ 0x68
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	200009bc 	.word	0x200009bc
 8003c9c:	200009c0 	.word	0x200009c0
 8003ca0:	0801fe1c 	.word	0x0801fe1c
 8003ca4:	20000788 	.word	0x20000788

08003ca8 <getindex>:

void getindex(void){
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8003cae:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003cb2:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	2332      	movs	r3, #50	@ 0x32
 8003cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8003d6c <getindex+0xc4>)
 8003cbe:	482c      	ldr	r0, [pc, #176]	@ (8003d70 <getindex+0xc8>)
 8003cc0:	f013 fed4 	bl	8017a6c <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8003cc4:	220a      	movs	r2, #10
 8003cc6:	2124      	movs	r1, #36	@ 0x24
 8003cc8:	482a      	ldr	r0, [pc, #168]	@ (8003d74 <getindex+0xcc>)
 8003cca:	f017 fca2 	bl	801b612 <memset>
	memset(numbuf2,'$',10);
 8003cce:	220a      	movs	r2, #10
 8003cd0:	2124      	movs	r1, #36	@ 0x24
 8003cd2:	4829      	ldr	r0, [pc, #164]	@ (8003d78 <getindex+0xd0>)
 8003cd4:	f017 fc9d 	bl	801b612 <memset>
	int cnt=0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8003cdc:	4b23      	ldr	r3, [pc, #140]	@ (8003d6c <getindex+0xc4>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	2b09      	cmp	r3, #9
 8003ce6:	dc3a      	bgt.n	8003d5e <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8003ce8:	e00b      	b.n	8003d02 <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8003cea:	4a20      	ldr	r2, [pc, #128]	@ (8003d6c <getindex+0xc4>)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	7819      	ldrb	r1, [r3, #0]
 8003cf2:	4a20      	ldr	r2, [pc, #128]	@ (8003d74 <getindex+0xcc>)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	460a      	mov	r2, r1
 8003cfa:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8003d02:	4a1a      	ldr	r2, [pc, #104]	@ (8003d6c <getindex+0xc4>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b24      	cmp	r3, #36	@ 0x24
 8003d0c:	d1ed      	bne.n	8003cea <getindex+0x42>
		  }
		  cnt++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3301      	adds	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8003d18:	e00e      	b.n	8003d38 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8003d1a:	4a14      	ldr	r2, [pc, #80]	@ (8003d6c <getindex+0xc4>)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	7819      	ldrb	r1, [r3, #0]
 8003d22:	4a15      	ldr	r2, [pc, #84]	@ (8003d78 <getindex+0xd0>)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4413      	add	r3, r2
 8003d28:	460a      	mov	r2, r1
 8003d2a:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3301      	adds	r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8003d38:	4a0c      	ldr	r2, [pc, #48]	@ (8003d6c <getindex+0xc4>)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b24      	cmp	r3, #36	@ 0x24
 8003d42:	d1ea      	bne.n	8003d1a <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 8003d44:	480b      	ldr	r0, [pc, #44]	@ (8003d74 <getindex+0xcc>)
 8003d46:	f015 fce9 	bl	801971c <atoi>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8003d7c <getindex+0xd4>)
 8003d4e:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8003d50:	4809      	ldr	r0, [pc, #36]	@ (8003d78 <getindex+0xd0>)
 8003d52:	f015 fce3 	bl	801971c <atoi>
 8003d56:	4603      	mov	r3, r0
 8003d58:	4a09      	ldr	r2, [pc, #36]	@ (8003d80 <getindex+0xd8>)
 8003d5a:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8003d5c:	e001      	b.n	8003d62 <getindex+0xba>
		storeindex();
 8003d5e:	f7ff ff65 	bl	8003c2c <storeindex>
}
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000c64 	.word	0x20000c64
 8003d70:	20000788 	.word	0x20000788
 8003d74:	200009c8 	.word	0x200009c8
 8003d78:	200009d4 	.word	0x200009d4
 8003d7c:	200009bc 	.word	0x200009bc
 8003d80:	200009c0 	.word	0x200009c0

08003d84 <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8003d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e8c <writebuffertoflash+0x108>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3301      	adds	r3, #1
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d11b      	bne.n	8003dd4 <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8003d9c:	4b3c      	ldr	r3, [pc, #240]	@ (8003e90 <writebuffertoflash+0x10c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d117      	bne.n	8003dd4 <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8003da4:	4b39      	ldr	r3, [pc, #228]	@ (8003e8c <writebuffertoflash+0x108>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3301      	adds	r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	da00      	bge.n	8003db0 <writebuffertoflash+0x2c>
 8003dae:	330f      	adds	r3, #15
 8003db0:	111b      	asrs	r3, r3, #4
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fc fb8e 	bl	80004d4 <__aeabi_i2d>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	f7fc fea2 	bl	8000b08 <__aeabi_d2iz>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4832      	ldr	r0, [pc, #200]	@ (8003e94 <writebuffertoflash+0x110>)
 8003dca:	f013 fdae 	bl	801792a <SPIF_EraseSector>
		sectoreraseen=1;
 8003dce:	4b30      	ldr	r3, [pc, #192]	@ (8003e90 <writebuffertoflash+0x10c>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8003dd4:	4b30      	ldr	r3, [pc, #192]	@ (8003e98 <writebuffertoflash+0x114>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	4413      	add	r3, r2
 8003ddc:	2bff      	cmp	r3, #255	@ 0xff
 8003dde:	dc11      	bgt.n	8003e04 <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8003de0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e8c <writebuffertoflash+0x108>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4619      	mov	r1, r3
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e98 <writebuffertoflash+0x114>)
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	9200      	str	r2, [sp, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	4828      	ldr	r0, [pc, #160]	@ (8003e94 <writebuffertoflash+0x110>)
 8003df2:	f013 fe1d 	bl	8017a30 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8003df6:	4b28      	ldr	r3, [pc, #160]	@ (8003e98 <writebuffertoflash+0x114>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	4a26      	ldr	r2, [pc, #152]	@ (8003e98 <writebuffertoflash+0x114>)
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	e03c      	b.n	8003e7e <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8003e04:	4b21      	ldr	r3, [pc, #132]	@ (8003e8c <writebuffertoflash+0x108>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4b23      	ldr	r3, [pc, #140]	@ (8003e98 <writebuffertoflash+0x114>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003e12:	461a      	mov	r2, r3
 8003e14:	4b20      	ldr	r3, [pc, #128]	@ (8003e98 <writebuffertoflash+0x114>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	481d      	ldr	r0, [pc, #116]	@ (8003e94 <writebuffertoflash+0x110>)
 8003e20:	f013 fe06 	bl	8017a30 <SPIF_WritePage>
		HAL_Delay(100);
 8003e24:	2064      	movs	r0, #100	@ 0x64
 8003e26:	f7fd fe42 	bl	8001aae <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8003e2a:	4b18      	ldr	r3, [pc, #96]	@ (8003e8c <writebuffertoflash+0x108>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	4618      	mov	r0, r3
 8003e32:	4b19      	ldr	r3, [pc, #100]	@ (8003e98 <writebuffertoflash+0x114>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	1899      	adds	r1, r3, r2
 8003e40:	4b15      	ldr	r3, [pc, #84]	@ (8003e98 <writebuffertoflash+0x114>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2300      	movs	r3, #0
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	460a      	mov	r2, r1
 8003e56:	4601      	mov	r1, r0
 8003e58:	480e      	ldr	r0, [pc, #56]	@ (8003e94 <writebuffertoflash+0x110>)
 8003e5a:	f013 fde9 	bl	8017a30 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <writebuffertoflash+0x108>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3301      	adds	r3, #1
 8003e64:	4a09      	ldr	r2, [pc, #36]	@ (8003e8c <writebuffertoflash+0x108>)
 8003e66:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8003e68:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <writebuffertoflash+0x10c>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e98 <writebuffertoflash+0x114>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	4a07      	ldr	r2, [pc, #28]	@ (8003e98 <writebuffertoflash+0x114>)
 8003e7c:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8003e7e:	f7ff fed5 	bl	8003c2c <storeindex>

}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200009c0 	.word	0x200009c0
 8003e90:	200009c4 	.word	0x200009c4
 8003e94:	20000788 	.word	0x20000788
 8003e98:	200009bc 	.word	0x200009bc

08003e9c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003ea0:	bf00      	nop
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af04      	add	r7, sp, #16
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eba:	9302      	str	r3, [sp, #8]
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	1dfb      	adds	r3, r7, #7
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2178      	movs	r1, #120	@ 0x78
 8003eca:	4803      	ldr	r0, [pc, #12]	@ (8003ed8 <ssd1306_WriteCommand+0x2c>)
 8003ecc:	f005 fbb8 	bl	8009640 <HAL_I2C_Mem_Write>
}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000560 	.word	0x20000560

08003edc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af04      	add	r7, sp, #16
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	f04f 32ff 	mov.w	r2, #4294967295
 8003eee:	9202      	str	r2, [sp, #8]
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	2240      	movs	r2, #64	@ 0x40
 8003efa:	2178      	movs	r1, #120	@ 0x78
 8003efc:	4803      	ldr	r0, [pc, #12]	@ (8003f0c <ssd1306_WriteData+0x30>)
 8003efe:	f005 fb9f 	bl	8009640 <HAL_I2C_Mem_Write>
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000560 	.word	0x20000560

08003f10 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003f14:	f7ff ffc2 	bl	8003e9c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003f18:	2064      	movs	r0, #100	@ 0x64
 8003f1a:	f7fd fdc8 	bl	8001aae <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003f1e:	2000      	movs	r0, #0
 8003f20:	f000 fb1a 	bl	8004558 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003f24:	2020      	movs	r0, #32
 8003f26:	f7ff ffc1 	bl	8003eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	f7ff ffbe 	bl	8003eac <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003f30:	20b0      	movs	r0, #176	@ 0xb0
 8003f32:	f7ff ffbb 	bl	8003eac <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003f36:	20c8      	movs	r0, #200	@ 0xc8
 8003f38:	f7ff ffb8 	bl	8003eac <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f7ff ffb5 	bl	8003eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003f42:	2010      	movs	r0, #16
 8003f44:	f7ff ffb2 	bl	8003eac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003f48:	2040      	movs	r0, #64	@ 0x40
 8003f4a:	f7ff ffaf 	bl	8003eac <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003f4e:	20ff      	movs	r0, #255	@ 0xff
 8003f50:	f000 faee 	bl	8004530 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003f54:	20a1      	movs	r0, #161	@ 0xa1
 8003f56:	f7ff ffa9 	bl	8003eac <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003f5a:	20a6      	movs	r0, #166	@ 0xa6
 8003f5c:	f7ff ffa6 	bl	8003eac <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003f60:	20a8      	movs	r0, #168	@ 0xa8
 8003f62:	f7ff ffa3 	bl	8003eac <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003f66:	203f      	movs	r0, #63	@ 0x3f
 8003f68:	f7ff ffa0 	bl	8003eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003f6c:	20a4      	movs	r0, #164	@ 0xa4
 8003f6e:	f7ff ff9d 	bl	8003eac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003f72:	20d3      	movs	r0, #211	@ 0xd3
 8003f74:	f7ff ff9a 	bl	8003eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003f78:	2000      	movs	r0, #0
 8003f7a:	f7ff ff97 	bl	8003eac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003f7e:	20d5      	movs	r0, #213	@ 0xd5
 8003f80:	f7ff ff94 	bl	8003eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003f84:	20f0      	movs	r0, #240	@ 0xf0
 8003f86:	f7ff ff91 	bl	8003eac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003f8a:	20d9      	movs	r0, #217	@ 0xd9
 8003f8c:	f7ff ff8e 	bl	8003eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003f90:	2022      	movs	r0, #34	@ 0x22
 8003f92:	f7ff ff8b 	bl	8003eac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003f96:	20da      	movs	r0, #218	@ 0xda
 8003f98:	f7ff ff88 	bl	8003eac <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003f9c:	2012      	movs	r0, #18
 8003f9e:	f7ff ff85 	bl	8003eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003fa2:	20db      	movs	r0, #219	@ 0xdb
 8003fa4:	f7ff ff82 	bl	8003eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003fa8:	2020      	movs	r0, #32
 8003faa:	f7ff ff7f 	bl	8003eac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003fae:	208d      	movs	r0, #141	@ 0x8d
 8003fb0:	f7ff ff7c 	bl	8003eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003fb4:	2014      	movs	r0, #20
 8003fb6:	f7ff ff79 	bl	8003eac <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003fba:	2001      	movs	r0, #1
 8003fbc:	f000 facc 	bl	8004558 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	f000 f80f 	bl	8003fe4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003fc6:	f000 f825 	bl	8004014 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003fca:	4b05      	ldr	r3, [pc, #20]	@ (8003fe0 <ssd1306_Init+0xd0>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003fd0:	4b03      	ldr	r3, [pc, #12]	@ (8003fe0 <ssd1306_Init+0xd0>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003fd6:	4b02      	ldr	r3, [pc, #8]	@ (8003fe0 <ssd1306_Init+0xd0>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	711a      	strb	r2, [r3, #4]
}
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	200010fc 	.word	0x200010fc

08003fe4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <ssd1306_Fill+0x14>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e000      	b.n	8003ffa <ssd1306_Fill+0x16>
 8003ff8:	23ff      	movs	r3, #255	@ 0xff
 8003ffa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ffe:	4619      	mov	r1, r3
 8004000:	4803      	ldr	r0, [pc, #12]	@ (8004010 <ssd1306_Fill+0x2c>)
 8004002:	f017 fb06 	bl	801b612 <memset>
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000cfc 	.word	0x20000cfc

08004014 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800401a:	2300      	movs	r3, #0
 800401c:	71fb      	strb	r3, [r7, #7]
 800401e:	e016      	b.n	800404e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	3b50      	subs	r3, #80	@ 0x50
 8004024:	b2db      	uxtb	r3, r3
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ff40 	bl	8003eac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800402c:	2000      	movs	r0, #0
 800402e:	f7ff ff3d 	bl	8003eac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004032:	2010      	movs	r0, #16
 8004034:	f7ff ff3a 	bl	8003eac <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	01db      	lsls	r3, r3, #7
 800403c:	4a08      	ldr	r2, [pc, #32]	@ (8004060 <ssd1306_UpdateScreen+0x4c>)
 800403e:	4413      	add	r3, r2
 8004040:	2180      	movs	r1, #128	@ 0x80
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ff4a 	bl	8003edc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	3301      	adds	r3, #1
 800404c:	71fb      	strb	r3, [r7, #7]
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	2b07      	cmp	r3, #7
 8004052:	d9e5      	bls.n	8004020 <ssd1306_UpdateScreen+0xc>
    }
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000cfc 	.word	0x20000cfc

08004064 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	71fb      	strb	r3, [r7, #7]
 800406e:	460b      	mov	r3, r1
 8004070:	71bb      	strb	r3, [r7, #6]
 8004072:	4613      	mov	r3, r2
 8004074:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	2b00      	cmp	r3, #0
 800407c:	db3d      	blt.n	80040fa <ssd1306_DrawPixel+0x96>
 800407e:	79bb      	ldrb	r3, [r7, #6]
 8004080:	2b3f      	cmp	r3, #63	@ 0x3f
 8004082:	d83a      	bhi.n	80040fa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004084:	797b      	ldrb	r3, [r7, #5]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d11a      	bne.n	80040c0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800408a:	79fa      	ldrb	r2, [r7, #7]
 800408c:	79bb      	ldrb	r3, [r7, #6]
 800408e:	08db      	lsrs	r3, r3, #3
 8004090:	b2d8      	uxtb	r0, r3
 8004092:	4603      	mov	r3, r0
 8004094:	01db      	lsls	r3, r3, #7
 8004096:	4413      	add	r3, r2
 8004098:	4a1b      	ldr	r2, [pc, #108]	@ (8004108 <ssd1306_DrawPixel+0xa4>)
 800409a:	5cd3      	ldrb	r3, [r2, r3]
 800409c:	b25a      	sxtb	r2, r3
 800409e:	79bb      	ldrb	r3, [r7, #6]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	2101      	movs	r1, #1
 80040a6:	fa01 f303 	lsl.w	r3, r1, r3
 80040aa:	b25b      	sxtb	r3, r3
 80040ac:	4313      	orrs	r3, r2
 80040ae:	b259      	sxtb	r1, r3
 80040b0:	79fa      	ldrb	r2, [r7, #7]
 80040b2:	4603      	mov	r3, r0
 80040b4:	01db      	lsls	r3, r3, #7
 80040b6:	4413      	add	r3, r2
 80040b8:	b2c9      	uxtb	r1, r1
 80040ba:	4a13      	ldr	r2, [pc, #76]	@ (8004108 <ssd1306_DrawPixel+0xa4>)
 80040bc:	54d1      	strb	r1, [r2, r3]
 80040be:	e01d      	b.n	80040fc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80040c0:	79fa      	ldrb	r2, [r7, #7]
 80040c2:	79bb      	ldrb	r3, [r7, #6]
 80040c4:	08db      	lsrs	r3, r3, #3
 80040c6:	b2d8      	uxtb	r0, r3
 80040c8:	4603      	mov	r3, r0
 80040ca:	01db      	lsls	r3, r3, #7
 80040cc:	4413      	add	r3, r2
 80040ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004108 <ssd1306_DrawPixel+0xa4>)
 80040d0:	5cd3      	ldrb	r3, [r2, r3]
 80040d2:	b25a      	sxtb	r2, r3
 80040d4:	79bb      	ldrb	r3, [r7, #6]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	2101      	movs	r1, #1
 80040dc:	fa01 f303 	lsl.w	r3, r1, r3
 80040e0:	b25b      	sxtb	r3, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	b25b      	sxtb	r3, r3
 80040e6:	4013      	ands	r3, r2
 80040e8:	b259      	sxtb	r1, r3
 80040ea:	79fa      	ldrb	r2, [r7, #7]
 80040ec:	4603      	mov	r3, r0
 80040ee:	01db      	lsls	r3, r3, #7
 80040f0:	4413      	add	r3, r2
 80040f2:	b2c9      	uxtb	r1, r1
 80040f4:	4a04      	ldr	r2, [pc, #16]	@ (8004108 <ssd1306_DrawPixel+0xa4>)
 80040f6:	54d1      	strb	r1, [r2, r3]
 80040f8:	e000      	b.n	80040fc <ssd1306_DrawPixel+0x98>
        return;
 80040fa:	bf00      	nop
    }
}
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	20000cfc 	.word	0x20000cfc

0800410c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b089      	sub	sp, #36	@ 0x24
 8004110:	af00      	add	r7, sp, #0
 8004112:	4604      	mov	r4, r0
 8004114:	1d38      	adds	r0, r7, #4
 8004116:	e880 0006 	stmia.w	r0, {r1, r2}
 800411a:	461a      	mov	r2, r3
 800411c:	4623      	mov	r3, r4
 800411e:	73fb      	strb	r3, [r7, #15]
 8004120:	4613      	mov	r3, r2
 8004122:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b1f      	cmp	r3, #31
 8004128:	d902      	bls.n	8004130 <ssd1306_WriteChar+0x24>
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	2b7e      	cmp	r3, #126	@ 0x7e
 800412e:	d901      	bls.n	8004134 <ssd1306_WriteChar+0x28>
        return 0;
 8004130:	2300      	movs	r3, #0
 8004132:	e06c      	b.n	800420e <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004134:	4b38      	ldr	r3, [pc, #224]	@ (8004218 <ssd1306_WriteChar+0x10c>)
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	793b      	ldrb	r3, [r7, #4]
 800413c:	4413      	add	r3, r2
 800413e:	2b80      	cmp	r3, #128	@ 0x80
 8004140:	dc06      	bgt.n	8004150 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004142:	4b35      	ldr	r3, [pc, #212]	@ (8004218 <ssd1306_WriteChar+0x10c>)
 8004144:	885b      	ldrh	r3, [r3, #2]
 8004146:	461a      	mov	r2, r3
 8004148:	797b      	ldrb	r3, [r7, #5]
 800414a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800414c:	2b40      	cmp	r3, #64	@ 0x40
 800414e:	dd01      	ble.n	8004154 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004150:	2300      	movs	r3, #0
 8004152:	e05c      	b.n	800420e <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	e04c      	b.n	80041f4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	3b20      	subs	r3, #32
 8004160:	7979      	ldrb	r1, [r7, #5]
 8004162:	fb01 f303 	mul.w	r3, r1, r3
 8004166:	4619      	mov	r1, r3
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	440b      	add	r3, r1
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4413      	add	r3, r2
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004174:	2300      	movs	r3, #0
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	e034      	b.n	80041e4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d012      	beq.n	80041b0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800418a:	4b23      	ldr	r3, [pc, #140]	@ (8004218 <ssd1306_WriteChar+0x10c>)
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b2da      	uxtb	r2, r3
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	4413      	add	r3, r2
 8004196:	b2d8      	uxtb	r0, r3
 8004198:	4b1f      	ldr	r3, [pc, #124]	@ (8004218 <ssd1306_WriteChar+0x10c>)
 800419a:	885b      	ldrh	r3, [r3, #2]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	7bba      	ldrb	r2, [r7, #14]
 80041a8:	4619      	mov	r1, r3
 80041aa:	f7ff ff5b 	bl	8004064 <ssd1306_DrawPixel>
 80041ae:	e016      	b.n	80041de <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80041b0:	4b19      	ldr	r3, [pc, #100]	@ (8004218 <ssd1306_WriteChar+0x10c>)
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	b2d8      	uxtb	r0, r3
 80041be:	4b16      	ldr	r3, [pc, #88]	@ (8004218 <ssd1306_WriteChar+0x10c>)
 80041c0:	885b      	ldrh	r3, [r3, #2]
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	4413      	add	r3, r2
 80041ca:	b2d9      	uxtb	r1, r3
 80041cc:	7bbb      	ldrb	r3, [r7, #14]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf0c      	ite	eq
 80041d2:	2301      	moveq	r3, #1
 80041d4:	2300      	movne	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	f7ff ff43 	bl	8004064 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	3301      	adds	r3, #1
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	793b      	ldrb	r3, [r7, #4]
 80041e6:	461a      	mov	r2, r3
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d3c5      	bcc.n	800417a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3301      	adds	r3, #1
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	797b      	ldrb	r3, [r7, #5]
 80041f6:	461a      	mov	r2, r3
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d3ad      	bcc.n	800415a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80041fe:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <ssd1306_WriteChar+0x10c>)
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	793a      	ldrb	r2, [r7, #4]
 8004204:	4413      	add	r3, r2
 8004206:	b29a      	uxth	r2, r3
 8004208:	4b03      	ldr	r3, [pc, #12]	@ (8004218 <ssd1306_WriteChar+0x10c>)
 800420a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3724      	adds	r7, #36	@ 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd90      	pop	{r4, r7, pc}
 8004216:	bf00      	nop
 8004218:	200010fc 	.word	0x200010fc

0800421c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	1d38      	adds	r0, r7, #4
 8004226:	e880 0006 	stmia.w	r0, {r1, r2}
 800422a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800422c:	e012      	b.n	8004254 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	7818      	ldrb	r0, [r3, #0]
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	1d3a      	adds	r2, r7, #4
 8004236:	ca06      	ldmia	r2, {r1, r2}
 8004238:	f7ff ff68 	bl	800410c <ssd1306_WriteChar>
 800423c:	4603      	mov	r3, r0
 800423e:	461a      	mov	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d002      	beq.n	800424e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	e008      	b.n	8004260 <ssd1306_WriteString+0x44>
        }
        str++;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3301      	adds	r3, #1
 8004252:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e8      	bne.n	800422e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	781b      	ldrb	r3, [r3, #0]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	460a      	mov	r2, r1
 8004272:	71fb      	strb	r3, [r7, #7]
 8004274:	4613      	mov	r3, r2
 8004276:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	b29a      	uxth	r2, r3
 800427c:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <ssd1306_SetCursor+0x2c>)
 800427e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004280:	79bb      	ldrb	r3, [r7, #6]
 8004282:	b29a      	uxth	r2, r3
 8004284:	4b03      	ldr	r3, [pc, #12]	@ (8004294 <ssd1306_SetCursor+0x2c>)
 8004286:	805a      	strh	r2, [r3, #2]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	200010fc 	.word	0x200010fc

08004298 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b089      	sub	sp, #36	@ 0x24
 800429c:	af00      	add	r7, sp, #0
 800429e:	4604      	mov	r4, r0
 80042a0:	4608      	mov	r0, r1
 80042a2:	4611      	mov	r1, r2
 80042a4:	461a      	mov	r2, r3
 80042a6:	4623      	mov	r3, r4
 80042a8:	71fb      	strb	r3, [r7, #7]
 80042aa:	4603      	mov	r3, r0
 80042ac:	71bb      	strb	r3, [r7, #6]
 80042ae:	460b      	mov	r3, r1
 80042b0:	717b      	strb	r3, [r7, #5]
 80042b2:	4613      	mov	r3, r2
 80042b4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80042b6:	797a      	ldrb	r2, [r7, #5]
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bfb8      	it	lt
 80042c0:	425b      	neglt	r3, r3
 80042c2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80042c4:	793a      	ldrb	r2, [r7, #4]
 80042c6:	79bb      	ldrb	r3, [r7, #6]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bfb8      	it	lt
 80042ce:	425b      	neglt	r3, r3
 80042d0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80042d2:	79fa      	ldrb	r2, [r7, #7]
 80042d4:	797b      	ldrb	r3, [r7, #5]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d201      	bcs.n	80042de <ssd1306_Line+0x46>
 80042da:	2301      	movs	r3, #1
 80042dc:	e001      	b.n	80042e2 <ssd1306_Line+0x4a>
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
 80042e2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80042e4:	79ba      	ldrb	r2, [r7, #6]
 80042e6:	793b      	ldrb	r3, [r7, #4]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d201      	bcs.n	80042f0 <ssd1306_Line+0x58>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e001      	b.n	80042f4 <ssd1306_Line+0x5c>
 80042f0:	f04f 33ff 	mov.w	r3, #4294967295
 80042f4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80042fe:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004302:	7939      	ldrb	r1, [r7, #4]
 8004304:	797b      	ldrb	r3, [r7, #5]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff feac 	bl	8004064 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800430c:	e024      	b.n	8004358 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800430e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004312:	79b9      	ldrb	r1, [r7, #6]
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fea4 	bl	8004064 <ssd1306_DrawPixel>
        error2 = error * 2;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	425b      	negs	r3, r3
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	429a      	cmp	r2, r3
 800432a:	dd08      	ble.n	800433e <ssd1306_Line+0xa6>
            error -= deltaY;
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	4413      	add	r3, r2
 800433c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	429a      	cmp	r2, r3
 8004344:	da08      	bge.n	8004358 <ssd1306_Line+0xc0>
            error += deltaX;
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	4413      	add	r3, r2
 800434c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	b2da      	uxtb	r2, r3
 8004352:	79bb      	ldrb	r3, [r7, #6]
 8004354:	4413      	add	r3, r2
 8004356:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8004358:	79fa      	ldrb	r2, [r7, #7]
 800435a:	797b      	ldrb	r3, [r7, #5]
 800435c:	429a      	cmp	r2, r3
 800435e:	d1d6      	bne.n	800430e <ssd1306_Line+0x76>
 8004360:	79ba      	ldrb	r2, [r7, #6]
 8004362:	793b      	ldrb	r3, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	d1d2      	bne.n	800430e <ssd1306_Line+0x76>
        }
    }
    return;
 8004368:	bf00      	nop
}
 800436a:	3724      	adds	r7, #36	@ 0x24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd90      	pop	{r4, r7, pc}

08004370 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b085      	sub	sp, #20
 8004374:	af02      	add	r7, sp, #8
 8004376:	4604      	mov	r4, r0
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	461a      	mov	r2, r3
 800437e:	4623      	mov	r3, r4
 8004380:	71fb      	strb	r3, [r7, #7]
 8004382:	4603      	mov	r3, r0
 8004384:	71bb      	strb	r3, [r7, #6]
 8004386:	460b      	mov	r3, r1
 8004388:	717b      	strb	r3, [r7, #5]
 800438a:	4613      	mov	r3, r2
 800438c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800438e:	79bc      	ldrb	r4, [r7, #6]
 8004390:	797a      	ldrb	r2, [r7, #5]
 8004392:	79b9      	ldrb	r1, [r7, #6]
 8004394:	79f8      	ldrb	r0, [r7, #7]
 8004396:	7e3b      	ldrb	r3, [r7, #24]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	4623      	mov	r3, r4
 800439c:	f7ff ff7c 	bl	8004298 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80043a0:	793c      	ldrb	r4, [r7, #4]
 80043a2:	797a      	ldrb	r2, [r7, #5]
 80043a4:	79b9      	ldrb	r1, [r7, #6]
 80043a6:	7978      	ldrb	r0, [r7, #5]
 80043a8:	7e3b      	ldrb	r3, [r7, #24]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	4623      	mov	r3, r4
 80043ae:	f7ff ff73 	bl	8004298 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80043b2:	793c      	ldrb	r4, [r7, #4]
 80043b4:	79fa      	ldrb	r2, [r7, #7]
 80043b6:	7939      	ldrb	r1, [r7, #4]
 80043b8:	7978      	ldrb	r0, [r7, #5]
 80043ba:	7e3b      	ldrb	r3, [r7, #24]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	4623      	mov	r3, r4
 80043c0:	f7ff ff6a 	bl	8004298 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80043c4:	79bc      	ldrb	r4, [r7, #6]
 80043c6:	79fa      	ldrb	r2, [r7, #7]
 80043c8:	7939      	ldrb	r1, [r7, #4]
 80043ca:	79f8      	ldrb	r0, [r7, #7]
 80043cc:	7e3b      	ldrb	r3, [r7, #24]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	4623      	mov	r3, r4
 80043d2:	f7ff ff61 	bl	8004298 <ssd1306_Line>

    return;
 80043d6:	bf00      	nop
}
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd90      	pop	{r4, r7, pc}

080043de <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80043de:	b590      	push	{r4, r7, lr}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	4604      	mov	r4, r0
 80043e6:	4608      	mov	r0, r1
 80043e8:	4611      	mov	r1, r2
 80043ea:	461a      	mov	r2, r3
 80043ec:	4623      	mov	r3, r4
 80043ee:	71fb      	strb	r3, [r7, #7]
 80043f0:	4603      	mov	r3, r0
 80043f2:	71bb      	strb	r3, [r7, #6]
 80043f4:	460b      	mov	r3, r1
 80043f6:	717b      	strb	r3, [r7, #5]
 80043f8:	4613      	mov	r3, r2
 80043fa:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80043fc:	79fa      	ldrb	r2, [r7, #7]
 80043fe:	797b      	ldrb	r3, [r7, #5]
 8004400:	4293      	cmp	r3, r2
 8004402:	bf28      	it	cs
 8004404:	4613      	movcs	r3, r2
 8004406:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8004408:	797a      	ldrb	r2, [r7, #5]
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	4293      	cmp	r3, r2
 800440e:	bf38      	it	cc
 8004410:	4613      	movcc	r3, r2
 8004412:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8004414:	79ba      	ldrb	r2, [r7, #6]
 8004416:	793b      	ldrb	r3, [r7, #4]
 8004418:	4293      	cmp	r3, r2
 800441a:	bf28      	it	cs
 800441c:	4613      	movcs	r3, r2
 800441e:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8004420:	793a      	ldrb	r2, [r7, #4]
 8004422:	79bb      	ldrb	r3, [r7, #6]
 8004424:	4293      	cmp	r3, r2
 8004426:	bf38      	it	cc
 8004428:	4613      	movcc	r3, r2
 800442a:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800442c:	7afb      	ldrb	r3, [r7, #11]
 800442e:	73fb      	strb	r3, [r7, #15]
 8004430:	e017      	b.n	8004462 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004432:	7b7b      	ldrb	r3, [r7, #13]
 8004434:	73bb      	strb	r3, [r7, #14]
 8004436:	e009      	b.n	800444c <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8004438:	f897 2020 	ldrb.w	r2, [r7, #32]
 800443c:	7bf9      	ldrb	r1, [r7, #15]
 800443e:	7bbb      	ldrb	r3, [r7, #14]
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff fe0f 	bl	8004064 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004446:	7bbb      	ldrb	r3, [r7, #14]
 8004448:	3301      	adds	r3, #1
 800444a:	73bb      	strb	r3, [r7, #14]
 800444c:	7bba      	ldrb	r2, [r7, #14]
 800444e:	7b3b      	ldrb	r3, [r7, #12]
 8004450:	429a      	cmp	r2, r3
 8004452:	d803      	bhi.n	800445c <ssd1306_FillRectangle+0x7e>
 8004454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004458:	2b00      	cmp	r3, #0
 800445a:	daed      	bge.n	8004438 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	3301      	adds	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
 8004462:	7bfa      	ldrb	r2, [r7, #15]
 8004464:	7abb      	ldrb	r3, [r7, #10]
 8004466:	429a      	cmp	r2, r3
 8004468:	d803      	bhi.n	8004472 <ssd1306_FillRectangle+0x94>
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	2b3f      	cmp	r3, #63	@ 0x3f
 800446e:	d9e0      	bls.n	8004432 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8004470:	bf00      	nop
 8004472:	bf00      	nop
}
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	bd90      	pop	{r4, r7, pc}

0800447a <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	603a      	str	r2, [r7, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	4603      	mov	r3, r0
 8004486:	71fb      	strb	r3, [r7, #7]
 8004488:	460b      	mov	r3, r1
 800448a:	71bb      	strb	r3, [r7, #6]
 800448c:	4613      	mov	r3, r2
 800448e:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004490:	797b      	ldrb	r3, [r7, #5]
 8004492:	3307      	adds	r3, #7
 8004494:	2b00      	cmp	r3, #0
 8004496:	da00      	bge.n	800449a <ssd1306_DrawBitmap+0x20>
 8004498:	3307      	adds	r3, #7
 800449a:	10db      	asrs	r3, r3, #3
 800449c:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80044a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	db3e      	blt.n	8004528 <ssd1306_DrawBitmap+0xae>
 80044aa:	79bb      	ldrb	r3, [r7, #6]
 80044ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80044ae:	d83b      	bhi.n	8004528 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80044b0:	2300      	movs	r3, #0
 80044b2:	73bb      	strb	r3, [r7, #14]
 80044b4:	e033      	b.n	800451e <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80044b6:	2300      	movs	r3, #0
 80044b8:	737b      	strb	r3, [r7, #13]
 80044ba:	e026      	b.n	800450a <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80044bc:	7b7b      	ldrb	r3, [r7, #13]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
 80044cc:	e00d      	b.n	80044ea <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80044ce:	7bbb      	ldrb	r3, [r7, #14]
 80044d0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80044d4:	fb02 f303 	mul.w	r3, r2, r3
 80044d8:	7b7a      	ldrb	r2, [r7, #13]
 80044da:	08d2      	lsrs	r2, r2, #3
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	4413      	add	r3, r2
 80044e0:	461a      	mov	r2, r3
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	4413      	add	r3, r2
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80044ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	da08      	bge.n	8004504 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80044f2:	79fa      	ldrb	r2, [r7, #7]
 80044f4:	7b7b      	ldrb	r3, [r7, #13]
 80044f6:	4413      	add	r3, r2
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	7f3a      	ldrb	r2, [r7, #28]
 80044fc:	79b9      	ldrb	r1, [r7, #6]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fdb0 	bl	8004064 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8004504:	7b7b      	ldrb	r3, [r7, #13]
 8004506:	3301      	adds	r3, #1
 8004508:	737b      	strb	r3, [r7, #13]
 800450a:	7b7a      	ldrb	r2, [r7, #13]
 800450c:	797b      	ldrb	r3, [r7, #5]
 800450e:	429a      	cmp	r2, r3
 8004510:	d3d4      	bcc.n	80044bc <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8004512:	7bbb      	ldrb	r3, [r7, #14]
 8004514:	3301      	adds	r3, #1
 8004516:	73bb      	strb	r3, [r7, #14]
 8004518:	79bb      	ldrb	r3, [r7, #6]
 800451a:	3301      	adds	r3, #1
 800451c:	71bb      	strb	r3, [r7, #6]
 800451e:	7bba      	ldrb	r2, [r7, #14]
 8004520:	7e3b      	ldrb	r3, [r7, #24]
 8004522:	429a      	cmp	r2, r3
 8004524:	d3c7      	bcc.n	80044b6 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8004526:	e000      	b.n	800452a <ssd1306_DrawBitmap+0xb0>
        return;
 8004528:	bf00      	nop
}
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800453a:	2381      	movs	r3, #129	@ 0x81
 800453c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fcb3 	bl	8003eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fcaf 	bl	8003eac <ssd1306_WriteCommand>
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004568:	23af      	movs	r3, #175	@ 0xaf
 800456a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800456c:	4b08      	ldr	r3, [pc, #32]	@ (8004590 <ssd1306_SetDisplayOn+0x38>)
 800456e:	2201      	movs	r2, #1
 8004570:	715a      	strb	r2, [r3, #5]
 8004572:	e004      	b.n	800457e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004574:	23ae      	movs	r3, #174	@ 0xae
 8004576:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004578:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <ssd1306_SetDisplayOn+0x38>)
 800457a:	2200      	movs	r2, #0
 800457c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fc93 	bl	8003eac <ssd1306_WriteCommand>
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	200010fc 	.word	0x200010fc
 8004594:	00000000 	.word	0x00000000

08004598 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8004598:	b590      	push	{r4, r7, lr}
 800459a:	b087      	sub	sp, #28
 800459c:	af02      	add	r7, sp, #8
 800459e:	ed87 0a03 	vstr	s0, [r7, #12]
 80045a2:	60b8      	str	r0, [r7, #8]
 80045a4:	6079      	str	r1, [r7, #4]
 80045a6:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	330f      	adds	r3, #15
 80045ae:	b2d8      	uxtb	r0, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	3301      	adds	r3, #1
 80045b6:	b2d9      	uxtb	r1, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	330f      	adds	r3, #15
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	3305      	adds	r3, #5
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2401      	movs	r4, #1
 80045ca:	9400      	str	r4, [sp, #0]
 80045cc:	f7ff fe64 	bl	8004298 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	3310      	adds	r3, #16
 80045d6:	b2d8      	uxtb	r0, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	3301      	adds	r3, #1
 80045de:	b2d9      	uxtb	r1, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	3310      	adds	r3, #16
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	3305      	adds	r3, #5
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2401      	movs	r4, #1
 80045f2:	9400      	str	r4, [sp, #0]
 80045f4:	f7ff fe50 	bl	8004298 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	b2d8      	uxtb	r0, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	b2d9      	uxtb	r1, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	330e      	adds	r3, #14
 8004606:	b2da      	uxtb	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	3306      	adds	r3, #6
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2401      	movs	r4, #1
 8004612:	9400      	str	r4, [sp, #0]
 8004614:	f7ff feac 	bl	8004370 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7fb ff6d 	bl	80004f8 <__aeabi_f2d>
 800461e:	a396      	add	r3, pc, #600	@ (adr r3, 8004878 <batterygauge+0x2e0>)
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	f7fc fa3c 	bl	8000aa0 <__aeabi_dcmple>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d02a      	beq.n	8004684 <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	3302      	adds	r3, #2
 8004634:	b2d8      	uxtb	r0, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	3302      	adds	r3, #2
 800463c:	b2d9      	uxtb	r1, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	3303      	adds	r3, #3
 8004644:	b2da      	uxtb	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	3304      	adds	r3, #4
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2401      	movs	r4, #1
 8004650:	9400      	str	r4, [sp, #0]
 8004652:	f7ff fe8d 	bl	8004370 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d113      	bne.n	8004684 <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	3302      	adds	r3, #2
 8004662:	b2d8      	uxtb	r0, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	3302      	adds	r3, #2
 800466a:	b2d9      	uxtb	r1, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	3303      	adds	r3, #3
 8004672:	b2da      	uxtb	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	3304      	adds	r3, #4
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2401      	movs	r4, #1
 800467e:	9400      	str	r4, [sp, #0]
 8004680:	f7ff fe76 	bl	8004370 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f7fb ff37 	bl	80004f8 <__aeabi_f2d>
 800468a:	a37b      	add	r3, pc, #492	@ (adr r3, 8004878 <batterygauge+0x2e0>)
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f7fc fa1a 	bl	8000ac8 <__aeabi_dcmpgt>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d035      	beq.n	8004706 <batterygauge+0x16e>
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7fb ff2c 	bl	80004f8 <__aeabi_f2d>
 80046a0:	a377      	add	r3, pc, #476	@ (adr r3, 8004880 <batterygauge+0x2e8>)
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f7fc f9fb 	bl	8000aa0 <__aeabi_dcmple>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d02a      	beq.n	8004706 <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	3302      	adds	r3, #2
 80046b6:	b2d8      	uxtb	r0, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	3302      	adds	r3, #2
 80046be:	b2d9      	uxtb	r1, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3303      	adds	r3, #3
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	3304      	adds	r3, #4
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2401      	movs	r4, #1
 80046d2:	9400      	str	r4, [sp, #0]
 80046d4:	f7ff fe4c 	bl	8004370 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d113      	bne.n	8004706 <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	3305      	adds	r3, #5
 80046e4:	b2d8      	uxtb	r0, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	3302      	adds	r3, #2
 80046ec:	b2d9      	uxtb	r1, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	3306      	adds	r3, #6
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	3304      	adds	r3, #4
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2401      	movs	r4, #1
 8004700:	9400      	str	r4, [sp, #0]
 8004702:	f7ff fe35 	bl	8004370 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7fb fef6 	bl	80004f8 <__aeabi_f2d>
 800470c:	a35c      	add	r3, pc, #368	@ (adr r3, 8004880 <batterygauge+0x2e8>)
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	f7fc f9d9 	bl	8000ac8 <__aeabi_dcmpgt>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d049      	beq.n	80047b0 <batterygauge+0x218>
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7fb feeb 	bl	80004f8 <__aeabi_f2d>
 8004722:	a359      	add	r3, pc, #356	@ (adr r3, 8004888 <batterygauge+0x2f0>)
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f7fc f9ba 	bl	8000aa0 <__aeabi_dcmple>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d03e      	beq.n	80047b0 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	3302      	adds	r3, #2
 8004738:	b2d8      	uxtb	r0, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	3302      	adds	r3, #2
 8004740:	b2d9      	uxtb	r1, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	3303      	adds	r3, #3
 8004748:	b2da      	uxtb	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	3304      	adds	r3, #4
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2401      	movs	r4, #1
 8004754:	9400      	str	r4, [sp, #0]
 8004756:	f7ff fe0b 	bl	8004370 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	3305      	adds	r3, #5
 8004760:	b2d8      	uxtb	r0, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	3302      	adds	r3, #2
 8004768:	b2d9      	uxtb	r1, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	3306      	adds	r3, #6
 8004770:	b2da      	uxtb	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	3304      	adds	r3, #4
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2401      	movs	r4, #1
 800477c:	9400      	str	r4, [sp, #0]
 800477e:	f7ff fdf7 	bl	8004370 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d113      	bne.n	80047b0 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	3308      	adds	r3, #8
 800478e:	b2d8      	uxtb	r0, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	3302      	adds	r3, #2
 8004796:	b2d9      	uxtb	r1, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	3309      	adds	r3, #9
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	3304      	adds	r3, #4
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2401      	movs	r4, #1
 80047aa:	9400      	str	r4, [sp, #0]
 80047ac:	f7ff fde0 	bl	8004370 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f7fb fea1 	bl	80004f8 <__aeabi_f2d>
 80047b6:	a334      	add	r3, pc, #208	@ (adr r3, 8004888 <batterygauge+0x2f0>)
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f7fc f984 	bl	8000ac8 <__aeabi_dcmpgt>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d100      	bne.n	80047c8 <batterygauge+0x230>
	}




}
 80047c6:	e052      	b.n	800486e <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	3302      	adds	r3, #2
 80047ce:	b2d8      	uxtb	r0, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	3302      	adds	r3, #2
 80047d6:	b2d9      	uxtb	r1, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	3303      	adds	r3, #3
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	3304      	adds	r3, #4
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2401      	movs	r4, #1
 80047ea:	9400      	str	r4, [sp, #0]
 80047ec:	f7ff fdc0 	bl	8004370 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	3305      	adds	r3, #5
 80047f6:	b2d8      	uxtb	r0, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	3302      	adds	r3, #2
 80047fe:	b2d9      	uxtb	r1, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	3306      	adds	r3, #6
 8004806:	b2da      	uxtb	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	3304      	adds	r3, #4
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2401      	movs	r4, #1
 8004812:	9400      	str	r4, [sp, #0]
 8004814:	f7ff fdac 	bl	8004370 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	3308      	adds	r3, #8
 800481e:	b2d8      	uxtb	r0, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	3302      	adds	r3, #2
 8004826:	b2d9      	uxtb	r1, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	3309      	adds	r3, #9
 800482e:	b2da      	uxtb	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	3304      	adds	r3, #4
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2401      	movs	r4, #1
 800483a:	9400      	str	r4, [sp, #0]
 800483c:	f7ff fd98 	bl	8004370 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d113      	bne.n	800486e <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	330b      	adds	r3, #11
 800484c:	b2d8      	uxtb	r0, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	3302      	adds	r3, #2
 8004854:	b2d9      	uxtb	r1, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	330c      	adds	r3, #12
 800485c:	b2da      	uxtb	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	3304      	adds	r3, #4
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2401      	movs	r4, #1
 8004868:	9400      	str	r4, [sp, #0]
 800486a:	f7ff fd81 	bl	8004370 <ssd1306_DrawRectangle>
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	bd90      	pop	{r4, r7, pc}
 8004876:	bf00      	nop
 8004878:	9999999a 	.word	0x9999999a
 800487c:	400d9999 	.word	0x400d9999
 8004880:	33333333 	.word	0x33333333
 8004884:	400f3333 	.word	0x400f3333
 8004888:	66666666 	.word	0x66666666
 800488c:	40106666 	.word	0x40106666

08004890 <percentage>:

void percentage(float percent){
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af02      	add	r7, sp, #8
 8004896:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 20, floor(0.70*percent+32), 36, White);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fb fe2c 	bl	80004f8 <__aeabi_f2d>
 80048a0:	a329      	add	r3, pc, #164	@ (adr r3, 8004948 <percentage+0xb8>)
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	f7fb fe7f 	bl	80005a8 <__aeabi_dmul>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4610      	mov	r0, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	4b20      	ldr	r3, [pc, #128]	@ (8004938 <percentage+0xa8>)
 80048b8:	f7fb fcc0 	bl	800023c <__adddf3>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	ec43 2b17 	vmov	d7, r2, r3
 80048c4:	eeb0 0a47 	vmov.f32	s0, s14
 80048c8:	eef0 0a67 	vmov.f32	s1, s15
 80048cc:	f019 fd28 	bl	801e320 <floor>
 80048d0:	ec53 2b10 	vmov	r2, r3, d0
 80048d4:	4610      	mov	r0, r2
 80048d6:	4619      	mov	r1, r3
 80048d8:	f7fc f93e 	bl	8000b58 <__aeabi_d2uiz>
 80048dc:	4603      	mov	r3, r0
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	2301      	movs	r3, #1
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	2324      	movs	r3, #36	@ 0x24
 80048e6:	2114      	movs	r1, #20
 80048e8:	2020      	movs	r0, #32
 80048ea:	f7ff fd78 	bl	80043de <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 20, 102, 36, White);
 80048ee:	2301      	movs	r3, #1
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	2324      	movs	r3, #36	@ 0x24
 80048f4:	2266      	movs	r2, #102	@ 0x66
 80048f6:	2114      	movs	r1, #20
 80048f8:	2020      	movs	r0, #32
 80048fa:	f7ff fd39 	bl	8004370 <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fb fdfa 	bl	80004f8 <__aeabi_f2d>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	e9cd 2300 	strd	r2, r3, [sp]
 800490c:	4a0b      	ldr	r2, [pc, #44]	@ (800493c <percentage+0xac>)
 800490e:	2114      	movs	r1, #20
 8004910:	480b      	ldr	r0, [pc, #44]	@ (8004940 <percentage+0xb0>)
 8004912:	f016 fde7 	bl	801b4e4 <sniprintf>
	ssd1306_SetCursor(45,24);
 8004916:	2118      	movs	r1, #24
 8004918:	202d      	movs	r0, #45	@ 0x2d
 800491a:	f7ff fca5 	bl	8004268 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 800491e:	4a09      	ldr	r2, [pc, #36]	@ (8004944 <percentage+0xb4>)
 8004920:	2301      	movs	r3, #1
 8004922:	ca06      	ldmia	r2, {r1, r2}
 8004924:	4806      	ldr	r0, [pc, #24]	@ (8004940 <percentage+0xb0>)
 8004926:	f7ff fc79 	bl	800421c <ssd1306_WriteString>


}
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	f3af 8000 	nop.w
 8004938:	40400000 	.word	0x40400000
 800493c:	0801fe24 	.word	0x0801fe24
 8004940:	200009e0 	.word	0x200009e0
 8004944:	20000014 	.word	0x20000014
 8004948:	66666666 	.word	0x66666666
 800494c:	3fe66666 	.word	0x3fe66666

08004950 <statemachine>:
extern float alt;

extern HAL_StatusTypeDef barocheck;


void statemachine(void){
 8004950:	b5b0      	push	{r4, r5, r7, lr}
 8004952:	ed2d 8b02 	vpush	{d8}
 8004956:	b08a      	sub	sp, #40	@ 0x28
 8004958:	af04      	add	r7, sp, #16
	switch(state){
 800495a:	4bbb      	ldr	r3, [pc, #748]	@ (8004c48 <statemachine+0x2f8>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b05      	cmp	r3, #5
 8004960:	f201 8691 	bhi.w	8006686 <statemachine+0x1d36>
 8004964:	a201      	add	r2, pc, #4	@ (adr r2, 800496c <statemachine+0x1c>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	08004985 	.word	0x08004985
 8004970:	08004d2b 	.word	0x08004d2b
 8004974:	080055ff 	.word	0x080055ff
 8004978:	08005dc1 	.word	0x08005dc1
 800497c:	0800603b 	.word	0x0800603b
 8004980:	08006547 	.word	0x08006547
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8004984:	2000      	movs	r0, #0
 8004986:	f7ff fb2d 	bl	8003fe4 <ssd1306_Fill>
				 nmea_parse(&myData, DataBuffer);
 800498a:	49b0      	ldr	r1, [pc, #704]	@ (8004c4c <statemachine+0x2fc>)
 800498c:	48b0      	ldr	r0, [pc, #704]	@ (8004c50 <statemachine+0x300>)
 800498e:	f7fe fdcd 	bl	800352c <nmea_parse>

				 if(myData.speed>=vitmax){
 8004992:	4baf      	ldr	r3, [pc, #700]	@ (8004c50 <statemachine+0x300>)
 8004994:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004998:	4bae      	ldr	r3, [pc, #696]	@ (8004c54 <statemachine+0x304>)
 800499a:	edd3 7a00 	vldr	s15, [r3]
 800499e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a6:	db03      	blt.n	80049b0 <statemachine+0x60>
									 vitmax=myData.speed;
 80049a8:	4ba9      	ldr	r3, [pc, #676]	@ (8004c50 <statemachine+0x300>)
 80049aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ac:	4aa9      	ldr	r2, [pc, #676]	@ (8004c54 <statemachine+0x304>)
 80049ae:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
								 float sec=0;
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]
								 if (myData.speed!=0){
 80049bc:	4ba4      	ldr	r3, [pc, #656]	@ (8004c50 <statemachine+0x300>)
 80049be:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80049c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ca:	d032      	beq.n	8004a32 <statemachine+0xe2>
									 pace=1000/(60*myData.speed);
 80049cc:	4ba0      	ldr	r3, [pc, #640]	@ (8004c50 <statemachine+0x300>)
 80049ce:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80049d2:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8004c58 <statemachine+0x308>
 80049d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049da:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 8004c5c <statemachine+0x30c>
 80049de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e2:	edc7 7a05 	vstr	s15, [r7, #20]
									 sec=(pace-floor(pace))*60;
 80049e6:	6978      	ldr	r0, [r7, #20]
 80049e8:	f7fb fd86 	bl	80004f8 <__aeabi_f2d>
 80049ec:	4604      	mov	r4, r0
 80049ee:	460d      	mov	r5, r1
 80049f0:	6978      	ldr	r0, [r7, #20]
 80049f2:	f7fb fd81 	bl	80004f8 <__aeabi_f2d>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	ec43 2b10 	vmov	d0, r2, r3
 80049fe:	f019 fc8f 	bl	801e320 <floor>
 8004a02:	ec53 2b10 	vmov	r2, r3, d0
 8004a06:	4620      	mov	r0, r4
 8004a08:	4629      	mov	r1, r5
 8004a0a:	f7fb fc15 	bl	8000238 <__aeabi_dsub>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4610      	mov	r0, r2
 8004a14:	4619      	mov	r1, r3
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	4b91      	ldr	r3, [pc, #580]	@ (8004c60 <statemachine+0x310>)
 8004a1c:	f7fb fdc4 	bl	80005a8 <__aeabi_dmul>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4610      	mov	r0, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	f7fc f8b6 	bl	8000b98 <__aeabi_d2f>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	e001      	b.n	8004a36 <statemachine+0xe6>
								 }
								 else {
									 pace=99;
 8004a32:	4b8c      	ldr	r3, [pc, #560]	@ (8004c64 <statemachine+0x314>)
 8004a34:	617b      	str	r3, [r7, #20]
								 }


				  switch(spdstate){
 8004a36:	4b8c      	ldr	r3, [pc, #560]	@ (8004c68 <statemachine+0x318>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	f000 8087 	beq.w	8004b4e <statemachine+0x1fe>
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	f300 812c 	bgt.w	8004c9e <statemachine+0x34e>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <statemachine+0x100>
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d040      	beq.n	8004ad0 <statemachine+0x180>
 8004a4e:	e126      	b.n	8004c9e <statemachine+0x34e>


				 case STATE_GROS:


						ssd1306_SetCursor(32, 12);
 8004a50:	210c      	movs	r1, #12
 8004a52:	2020      	movs	r0, #32
 8004a54:	f7ff fc08 	bl	8004268 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 8004a58:	4b7d      	ldr	r3, [pc, #500]	@ (8004c50 <statemachine+0x300>)
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fb fd4b 	bl	80004f8 <__aeabi_f2d>
 8004a62:	a377      	add	r3, pc, #476	@ (adr r3, 8004c40 <statemachine+0x2f0>)
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f7fb fd9e 	bl	80005a8 <__aeabi_dmul>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	e9cd 2300 	strd	r2, r3, [sp]
 8004a74:	4a7d      	ldr	r2, [pc, #500]	@ (8004c6c <statemachine+0x31c>)
 8004a76:	210f      	movs	r1, #15
 8004a78:	487d      	ldr	r0, [pc, #500]	@ (8004c70 <statemachine+0x320>)
 8004a7a:	f016 fd33 	bl	801b4e4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 8004a7e:	4a7d      	ldr	r2, [pc, #500]	@ (8004c74 <statemachine+0x324>)
 8004a80:	2301      	movs	r3, #1
 8004a82:	ca06      	ldmia	r2, {r1, r2}
 8004a84:	487a      	ldr	r0, [pc, #488]	@ (8004c70 <statemachine+0x320>)
 8004a86:	f7ff fbc9 	bl	800421c <ssd1306_WriteString>
						ssd1306_SetCursor(32, 36);
 8004a8a:	2124      	movs	r1, #36	@ 0x24
 8004a8c:	2020      	movs	r0, #32
 8004a8e:	f7ff fbeb 	bl	8004268 <ssd1306_SetCursor>
						ssd1306_WriteString("Vit(kmh)", Font_6x8, White);
 8004a92:	4a79      	ldr	r2, [pc, #484]	@ (8004c78 <statemachine+0x328>)
 8004a94:	2301      	movs	r3, #1
 8004a96:	ca06      	ldmia	r2, {r1, r2}
 8004a98:	4878      	ldr	r0, [pc, #480]	@ (8004c7c <statemachine+0x32c>)
 8004a9a:	f7ff fbbf 	bl	800421c <ssd1306_WriteString>
						batterygauge(vbat,79, 45,1);
 8004a9e:	4b78      	ldr	r3, [pc, #480]	@ (8004c80 <statemachine+0x330>)
 8004aa0:	edd3 7a00 	vldr	s15, [r3]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	212d      	movs	r1, #45	@ 0x2d
 8004aa8:	204f      	movs	r0, #79	@ 0x4f
 8004aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8004aae:	f7ff fd73 	bl	8004598 <batterygauge>

					 if(BTN_B>=1){
 8004ab2:	4b74      	ldr	r3, [pc, #464]	@ (8004c84 <statemachine+0x334>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f340 80bb 	ble.w	8004c32 <statemachine+0x2e2>
							spdstate++;
 8004abc:	4b6a      	ldr	r3, [pc, #424]	@ (8004c68 <statemachine+0x318>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	4b68      	ldr	r3, [pc, #416]	@ (8004c68 <statemachine+0x318>)
 8004ac6:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 8004ac8:	4b6e      	ldr	r3, [pc, #440]	@ (8004c84 <statemachine+0x334>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
					 					 				  	}




				  break;
 8004ace:	e0b0      	b.n	8004c32 <statemachine+0x2e2>
				 case STATE_GROS1:

					 ssd1306_SetCursor(32, 12);
 8004ad0:	210c      	movs	r1, #12
 8004ad2:	2020      	movs	r0, #32
 8004ad4:	f7ff fbc8 	bl	8004268 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "%0.1f",vitmax*3.6);
 8004ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8004c54 <statemachine+0x304>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fb fd0b 	bl	80004f8 <__aeabi_f2d>
 8004ae2:	a357      	add	r3, pc, #348	@ (adr r3, 8004c40 <statemachine+0x2f0>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f7fb fd5e 	bl	80005a8 <__aeabi_dmul>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	e9cd 2300 	strd	r2, r3, [sp]
 8004af4:	4a5d      	ldr	r2, [pc, #372]	@ (8004c6c <statemachine+0x31c>)
 8004af6:	210f      	movs	r1, #15
 8004af8:	485d      	ldr	r0, [pc, #372]	@ (8004c70 <statemachine+0x320>)
 8004afa:	f016 fcf3 	bl	801b4e4 <sniprintf>
					 ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 8004afe:	4a5d      	ldr	r2, [pc, #372]	@ (8004c74 <statemachine+0x324>)
 8004b00:	2301      	movs	r3, #1
 8004b02:	ca06      	ldmia	r2, {r1, r2}
 8004b04:	485a      	ldr	r0, [pc, #360]	@ (8004c70 <statemachine+0x320>)
 8004b06:	f7ff fb89 	bl	800421c <ssd1306_WriteString>
					 ssd1306_SetCursor(32, 36);
 8004b0a:	2124      	movs	r1, #36	@ 0x24
 8004b0c:	2020      	movs	r0, #32
 8004b0e:	f7ff fbab 	bl	8004268 <ssd1306_SetCursor>
					 ssd1306_WriteString("maxV", Font_6x8, White);
 8004b12:	4a59      	ldr	r2, [pc, #356]	@ (8004c78 <statemachine+0x328>)
 8004b14:	2301      	movs	r3, #1
 8004b16:	ca06      	ldmia	r2, {r1, r2}
 8004b18:	485b      	ldr	r0, [pc, #364]	@ (8004c88 <statemachine+0x338>)
 8004b1a:	f7ff fb7f 	bl	800421c <ssd1306_WriteString>
					 batterygauge(vbat,79, 45,1);
 8004b1e:	4b58      	ldr	r3, [pc, #352]	@ (8004c80 <statemachine+0x330>)
 8004b20:	edd3 7a00 	vldr	s15, [r3]
 8004b24:	2201      	movs	r2, #1
 8004b26:	212d      	movs	r1, #45	@ 0x2d
 8004b28:	204f      	movs	r0, #79	@ 0x4f
 8004b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b2e:	f7ff fd33 	bl	8004598 <batterygauge>





					 if(BTN_B>=1){
 8004b32:	4b54      	ldr	r3, [pc, #336]	@ (8004c84 <statemachine+0x334>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	dd7d      	ble.n	8004c36 <statemachine+0x2e6>
					 							spdstate++;
 8004b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c68 <statemachine+0x318>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	4b49      	ldr	r3, [pc, #292]	@ (8004c68 <statemachine+0x318>)
 8004b44:	701a      	strb	r2, [r3, #0]
					 							BTN_B=0;
 8004b46:	4b4f      	ldr	r3, [pc, #316]	@ (8004c84 <statemachine+0x334>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

					 					 					 				  	}



					 break;
 8004b4c:	e073      	b.n	8004c36 <statemachine+0x2e6>
				  case STATE_SUMMARY:
				  						ssd1306_SetCursor(32, 12);
 8004b4e:	210c      	movs	r1, #12
 8004b50:	2020      	movs	r0, #32
 8004b52:	f7ff fb89 	bl	8004268 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "%0.0fmin%0.0fs",floor(pace),floor(sec));
 8004b56:	6978      	ldr	r0, [r7, #20]
 8004b58:	f7fb fcce 	bl	80004f8 <__aeabi_f2d>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	ec43 2b10 	vmov	d0, r2, r3
 8004b64:	f019 fbdc 	bl	801e320 <floor>
 8004b68:	eeb0 8a40 	vmov.f32	s16, s0
 8004b6c:	eef0 8a60 	vmov.f32	s17, s1
 8004b70:	6938      	ldr	r0, [r7, #16]
 8004b72:	f7fb fcc1 	bl	80004f8 <__aeabi_f2d>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	ec43 2b10 	vmov	d0, r2, r3
 8004b7e:	f019 fbcf 	bl	801e320 <floor>
 8004b82:	eeb0 7a40 	vmov.f32	s14, s0
 8004b86:	eef0 7a60 	vmov.f32	s15, s1
 8004b8a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004b8e:	ed8d 8b00 	vstr	d8, [sp]
 8004b92:	4a3e      	ldr	r2, [pc, #248]	@ (8004c8c <statemachine+0x33c>)
 8004b94:	210f      	movs	r1, #15
 8004b96:	4836      	ldr	r0, [pc, #216]	@ (8004c70 <statemachine+0x320>)
 8004b98:	f016 fca4 	bl	801b4e4 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004b9c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c90 <statemachine+0x340>)
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	ca06      	ldmia	r2, {r1, r2}
 8004ba2:	4833      	ldr	r0, [pc, #204]	@ (8004c70 <statemachine+0x320>)
 8004ba4:	f7ff fb3a 	bl	800421c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 22);
 8004ba8:	2116      	movs	r1, #22
 8004baa:	2020      	movs	r0, #32
 8004bac:	f7ff fb5c 	bl	8004268 <ssd1306_SetCursor>
				  						ssd1306_WriteString("pace", Font_6x8, White);
 8004bb0:	4a31      	ldr	r2, [pc, #196]	@ (8004c78 <statemachine+0x328>)
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	ca06      	ldmia	r2, {r1, r2}
 8004bb6:	4837      	ldr	r0, [pc, #220]	@ (8004c94 <statemachine+0x344>)
 8004bb8:	f7ff fb30 	bl	800421c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 30);
 8004bbc:	211e      	movs	r1, #30
 8004bbe:	2020      	movs	r0, #32
 8004bc0:	f7ff fb52 	bl	8004268 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "V=%0.1fkmh",vitmax*3.6);
 8004bc4:	4b23      	ldr	r3, [pc, #140]	@ (8004c54 <statemachine+0x304>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fb fc95 	bl	80004f8 <__aeabi_f2d>
 8004bce:	a31c      	add	r3, pc, #112	@ (adr r3, 8004c40 <statemachine+0x2f0>)
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	f7fb fce8 	bl	80005a8 <__aeabi_dmul>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	e9cd 2300 	strd	r2, r3, [sp]
 8004be0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c98 <statemachine+0x348>)
 8004be2:	210f      	movs	r1, #15
 8004be4:	4822      	ldr	r0, [pc, #136]	@ (8004c70 <statemachine+0x320>)
 8004be6:	f016 fc7d 	bl	801b4e4 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004bea:	4a23      	ldr	r2, [pc, #140]	@ (8004c78 <statemachine+0x328>)
 8004bec:	2301      	movs	r3, #1
 8004bee:	ca06      	ldmia	r2, {r1, r2}
 8004bf0:	481f      	ldr	r0, [pc, #124]	@ (8004c70 <statemachine+0x320>)
 8004bf2:	f7ff fb13 	bl	800421c <ssd1306_WriteString>
				  						batterygauge(vbat,79, 45,1);
 8004bf6:	4b22      	ldr	r3, [pc, #136]	@ (8004c80 <statemachine+0x330>)
 8004bf8:	edd3 7a00 	vldr	s15, [r3]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	212d      	movs	r1, #45	@ 0x2d
 8004c00:	204f      	movs	r0, #79	@ 0x4f
 8004c02:	eeb0 0a67 	vmov.f32	s0, s15
 8004c06:	f7ff fcc7 	bl	8004598 <batterygauge>



				  					 if(BTN_B>=1){
 8004c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004c84 <statemachine+0x334>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	dd44      	ble.n	8004c9c <statemachine+0x34c>
				  								spdstate--;
 8004c12:	4b15      	ldr	r3, [pc, #84]	@ (8004c68 <statemachine+0x318>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	4b13      	ldr	r3, [pc, #76]	@ (8004c68 <statemachine+0x318>)
 8004c1c:	701a      	strb	r2, [r3, #0]
				  								spdstate--;
 8004c1e:	4b12      	ldr	r3, [pc, #72]	@ (8004c68 <statemachine+0x318>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4b10      	ldr	r3, [pc, #64]	@ (8004c68 <statemachine+0x318>)
 8004c28:	701a      	strb	r2, [r3, #0]
				  								BTN_B=0;
 8004c2a:	4b16      	ldr	r3, [pc, #88]	@ (8004c84 <statemachine+0x334>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
				  					 					 				  	}




				  					 break;
 8004c30:	e034      	b.n	8004c9c <statemachine+0x34c>
				  break;
 8004c32:	bf00      	nop
 8004c34:	e033      	b.n	8004c9e <statemachine+0x34e>
					 break;
 8004c36:	bf00      	nop
 8004c38:	e031      	b.n	8004c9e <statemachine+0x34e>
 8004c3a:	bf00      	nop
 8004c3c:	f3af 8000 	nop.w
 8004c40:	cccccccd 	.word	0xcccccccd
 8004c44:	400ccccc 	.word	0x400ccccc
 8004c48:	200005f0 	.word	0x200005f0
 8004c4c:	2000063c 	.word	0x2000063c
 8004c50:	20000740 	.word	0x20000740
 8004c54:	20000a54 	.word	0x20000a54
 8004c58:	42700000 	.word	0x42700000
 8004c5c:	447a0000 	.word	0x447a0000
 8004c60:	404e0000 	.word	0x404e0000
 8004c64:	42c60000 	.word	0x42c60000
 8004c68:	200005f1 	.word	0x200005f1
 8004c6c:	0801fe30 	.word	0x0801fe30
 8004c70:	200009e0 	.word	0x200009e0
 8004c74:	2000002c 	.word	0x2000002c
 8004c78:	20000014 	.word	0x20000014
 8004c7c:	0801fe38 	.word	0x0801fe38
 8004c80:	200007b8 	.word	0x200007b8
 8004c84:	20000784 	.word	0x20000784
 8004c88:	0801fe44 	.word	0x0801fe44
 8004c8c:	0801fe4c 	.word	0x0801fe4c
 8004c90:	2000001c 	.word	0x2000001c
 8004c94:	0801fe5c 	.word	0x0801fe5c
 8004c98:	0801fe64 	.word	0x0801fe64
				  					 break;
 8004c9c:	bf00      	nop
				  }
				  					if(BTN_A>=1){
 8004c9e:	4b84      	ldr	r3, [pc, #528]	@ (8004eb0 <statemachine+0x560>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	dd0b      	ble.n	8004cbe <statemachine+0x36e>
				  									 					state++;
 8004ca6:	4b83      	ldr	r3, [pc, #524]	@ (8004eb4 <statemachine+0x564>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	3301      	adds	r3, #1
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	4b81      	ldr	r3, [pc, #516]	@ (8004eb4 <statemachine+0x564>)
 8004cb0:	701a      	strb	r2, [r3, #0]
				  									 					BTN_A=0;
 8004cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8004eb0 <statemachine+0x560>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
				  									 					BTN_B=0;
 8004cb8:	4b7f      	ldr	r3, [pc, #508]	@ (8004eb8 <statemachine+0x568>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
				  									  	}
				  									 	 if(BTN_A_LONG>=1){
 8004cbe:	4b7f      	ldr	r3, [pc, #508]	@ (8004ebc <statemachine+0x56c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	dd23      	ble.n	8004d0e <statemachine+0x3be>
				  									 						 				 									state++;
 8004cc6:	4b7b      	ldr	r3, [pc, #492]	@ (8004eb4 <statemachine+0x564>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	4b79      	ldr	r3, [pc, #484]	@ (8004eb4 <statemachine+0x564>)
 8004cd0:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004cd2:	4b78      	ldr	r3, [pc, #480]	@ (8004eb4 <statemachine+0x564>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	4b76      	ldr	r3, [pc, #472]	@ (8004eb4 <statemachine+0x564>)
 8004cdc:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004cde:	4b75      	ldr	r3, [pc, #468]	@ (8004eb4 <statemachine+0x564>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	4b73      	ldr	r3, [pc, #460]	@ (8004eb4 <statemachine+0x564>)
 8004ce8:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004cea:	4b72      	ldr	r3, [pc, #456]	@ (8004eb4 <statemachine+0x564>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	4b70      	ldr	r3, [pc, #448]	@ (8004eb4 <statemachine+0x564>)
 8004cf4:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004cf6:	4b6f      	ldr	r3, [pc, #444]	@ (8004eb4 <statemachine+0x564>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8004eb4 <statemachine+0x564>)
 8004d00:	701a      	strb	r2, [r3, #0]

				  									 						 				 									  			 	BTN_A_LONG=0;
 8004d02:	4b6e      	ldr	r3, [pc, #440]	@ (8004ebc <statemachine+0x56c>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
				  									 						 				 									  			 	BTN_B=0;
 8004d08:	4b6b      	ldr	r3, [pc, #428]	@ (8004eb8 <statemachine+0x568>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
				  									 						 				 									  	}
				  									 	 if(BTN_B_LONG>=1){
 8004d0e:	4b6c      	ldr	r3, [pc, #432]	@ (8004ec0 <statemachine+0x570>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f341 84ab 	ble.w	800666e <statemachine+0x1d1e>
				  									 					  							  vitmax=0;
 8004d18:	4b6a      	ldr	r3, [pc, #424]	@ (8004ec4 <statemachine+0x574>)
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
				  									 					  							BTN_B_LONG=0;
 8004d20:	4b67      	ldr	r3, [pc, #412]	@ (8004ec0 <statemachine+0x570>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
				  									 					  						}
				  									 	 break;
 8004d26:	f001 bca2 	b.w	800666e <statemachine+0x1d1e>


				  case STATE_BALISE:
					  ssd1306_Fill(Black);
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	f7ff f95a 	bl	8003fe4 <ssd1306_Fill>

					  if(settimeen==0){
 8004d30:	4b65      	ldr	r3, [pc, #404]	@ (8004ec8 <statemachine+0x578>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d145      	bne.n	8004dc4 <statemachine+0x474>

						  if(myData.fix==1){
 8004d38:	4b64      	ldr	r3, [pc, #400]	@ (8004ecc <statemachine+0x57c>)
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d141      	bne.n	8004dc4 <statemachine+0x474>
							settimeen=1;
 8004d40:	4b61      	ldr	r3, [pc, #388]	@ (8004ec8 <statemachine+0x578>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004d46:	4b61      	ldr	r3, [pc, #388]	@ (8004ecc <statemachine+0x57c>)
 8004d48:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	0092      	lsls	r2, r2, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	4b5b      	ldr	r3, [pc, #364]	@ (8004ecc <statemachine+0x57c>)
 8004d5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	4413      	add	r3, r2
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	4b58      	ldr	r3, [pc, #352]	@ (8004ed0 <statemachine+0x580>)
 8004d6e:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004d70:	4b56      	ldr	r3, [pc, #344]	@ (8004ecc <statemachine+0x57c>)
 8004d72:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	0092      	lsls	r2, r2, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	4b51      	ldr	r3, [pc, #324]	@ (8004ecc <statemachine+0x57c>)
 8004d88:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	4b4f      	ldr	r3, [pc, #316]	@ (8004ed4 <statemachine+0x584>)
 8004d98:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004d9a:	4b4c      	ldr	r3, [pc, #304]	@ (8004ecc <statemachine+0x57c>)
 8004d9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	0092      	lsls	r2, r2, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	4b46      	ldr	r3, [pc, #280]	@ (8004ecc <statemachine+0x57c>)
 8004db2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	4b45      	ldr	r3, [pc, #276]	@ (8004ed8 <statemachine+0x588>)
 8004dc2:	701a      	strb	r2, [r3, #0]





					  switch(balisestate){
 8004dc4:	4b45      	ldr	r3, [pc, #276]	@ (8004edc <statemachine+0x58c>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	f000 83c0 	beq.w	800554e <statemachine+0xbfe>
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	f301 844f 	bgt.w	8006672 <statemachine+0x1d22>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d004      	beq.n	8004de2 <statemachine+0x492>
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	f000 8093 	beq.w	8004f04 <statemachine+0x5b4>
						  				 									 									  	}

					  }


					  break;
 8004dde:	f001 bc48 	b.w	8006672 <statemachine+0x1d22>
						  ssd1306_SetCursor(32,12);
 8004de2:	210c      	movs	r1, #12
 8004de4:	2020      	movs	r0, #32
 8004de6:	f7ff fa3f 	bl	8004268 <ssd1306_SetCursor>
						  ssd1306_WriteString("Tracker",Font_6x8,White);
 8004dea:	4a3d      	ldr	r2, [pc, #244]	@ (8004ee0 <statemachine+0x590>)
 8004dec:	2301      	movs	r3, #1
 8004dee:	ca06      	ldmia	r2, {r1, r2}
 8004df0:	483c      	ldr	r0, [pc, #240]	@ (8004ee4 <statemachine+0x594>)
 8004df2:	f7ff fa13 	bl	800421c <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "offset=%d",pageoffset);
 8004df6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ee8 <statemachine+0x598>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a3c      	ldr	r2, [pc, #240]	@ (8004eec <statemachine+0x59c>)
 8004dfc:	2132      	movs	r1, #50	@ 0x32
 8004dfe:	483c      	ldr	r0, [pc, #240]	@ (8004ef0 <statemachine+0x5a0>)
 8004e00:	f016 fb70 	bl	801b4e4 <sniprintf>
						  ssd1306_SetCursor(32,22);
 8004e04:	2116      	movs	r1, #22
 8004e06:	2020      	movs	r0, #32
 8004e08:	f7ff fa2e 	bl	8004268 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004e0c:	4a39      	ldr	r2, [pc, #228]	@ (8004ef4 <statemachine+0x5a4>)
 8004e0e:	2301      	movs	r3, #1
 8004e10:	ca06      	ldmia	r2, {r1, r2}
 8004e12:	4837      	ldr	r0, [pc, #220]	@ (8004ef0 <statemachine+0x5a0>)
 8004e14:	f7ff fa02 	bl	800421c <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8004e18:	4b37      	ldr	r3, [pc, #220]	@ (8004ef8 <statemachine+0x5a8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a37      	ldr	r2, [pc, #220]	@ (8004efc <statemachine+0x5ac>)
 8004e1e:	2132      	movs	r1, #50	@ 0x32
 8004e20:	4833      	ldr	r0, [pc, #204]	@ (8004ef0 <statemachine+0x5a0>)
 8004e22:	f016 fb5f 	bl	801b4e4 <sniprintf>
						  ssd1306_SetCursor(32,32);
 8004e26:	2120      	movs	r1, #32
 8004e28:	2020      	movs	r0, #32
 8004e2a:	f7ff fa1d 	bl	8004268 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004e2e:	4a31      	ldr	r2, [pc, #196]	@ (8004ef4 <statemachine+0x5a4>)
 8004e30:	2301      	movs	r3, #1
 8004e32:	ca06      	ldmia	r2, {r1, r2}
 8004e34:	482e      	ldr	r0, [pc, #184]	@ (8004ef0 <statemachine+0x5a0>)
 8004e36:	f7ff f9f1 	bl	800421c <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8004e3a:	4b21      	ldr	r3, [pc, #132]	@ (8004ec0 <statemachine+0x570>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	dd0e      	ble.n	8004e60 <statemachine+0x510>
							balisestate++;
 8004e42:	4b26      	ldr	r3, [pc, #152]	@ (8004edc <statemachine+0x58c>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	3301      	adds	r3, #1
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	4b24      	ldr	r3, [pc, #144]	@ (8004edc <statemachine+0x58c>)
 8004e4c:	701a      	strb	r2, [r3, #0]
							BTN_B_LONG=0;
 8004e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec0 <statemachine+0x570>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]
							BTN_A=0;
 8004e54:	4b16      	ldr	r3, [pc, #88]	@ (8004eb0 <statemachine+0x560>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim17);
 8004e5a:	4829      	ldr	r0, [pc, #164]	@ (8004f00 <statemachine+0x5b0>)
 8004e5c:	f00a f91a 	bl	800f094 <HAL_TIM_Base_Start_IT>
						  if(BTN_A>=1){
 8004e60:	4b13      	ldr	r3, [pc, #76]	@ (8004eb0 <statemachine+0x560>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dd0e      	ble.n	8004e86 <statemachine+0x536>
						  				  			 	state++;
 8004e68:	4b12      	ldr	r3, [pc, #72]	@ (8004eb4 <statemachine+0x564>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	4b10      	ldr	r3, [pc, #64]	@ (8004eb4 <statemachine+0x564>)
 8004e72:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8004e74:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb0 <statemachine+0x560>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb8 <statemachine+0x568>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
						  				  			 	settimeen=0;
 8004e80:	4b11      	ldr	r3, [pc, #68]	@ (8004ec8 <statemachine+0x578>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8004e86:	4b0d      	ldr	r3, [pc, #52]	@ (8004ebc <statemachine+0x56c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f340 83b1 	ble.w	80055f2 <statemachine+0xca2>
									  state--;
 8004e90:	4b08      	ldr	r3, [pc, #32]	@ (8004eb4 <statemachine+0x564>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <statemachine+0x564>)
 8004e9a:	701a      	strb	r2, [r3, #0]
									BTN_A_LONG=0;
 8004e9c:	4b07      	ldr	r3, [pc, #28]	@ (8004ebc <statemachine+0x56c>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
									BTN_B=0;
 8004ea2:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <statemachine+0x568>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
									settimeen=0;
 8004ea8:	4b07      	ldr	r3, [pc, #28]	@ (8004ec8 <statemachine+0x578>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
						  break;
 8004eae:	e3a0      	b.n	80055f2 <statemachine+0xca2>
 8004eb0:	20000780 	.word	0x20000780
 8004eb4:	200005f0 	.word	0x200005f0
 8004eb8:	20000784 	.word	0x20000784
 8004ebc:	20000ab8 	.word	0x20000ab8
 8004ec0:	20000ab4 	.word	0x20000ab4
 8004ec4:	20000a54 	.word	0x20000a54
 8004ec8:	20000aa0 	.word	0x20000aa0
 8004ecc:	20000740 	.word	0x20000740
 8004ed0:	20000a9d 	.word	0x20000a9d
 8004ed4:	20000a9e 	.word	0x20000a9e
 8004ed8:	20000a9c 	.word	0x20000a9c
 8004edc:	200005f5 	.word	0x200005f5
 8004ee0:	20000014 	.word	0x20000014
 8004ee4:	0801fe70 	.word	0x0801fe70
 8004ee8:	200009bc 	.word	0x200009bc
 8004eec:	0801fe78 	.word	0x0801fe78
 8004ef0:	200009e0 	.word	0x200009e0
 8004ef4:	2000001c 	.word	0x2000001c
 8004ef8:	200009c0 	.word	0x200009c0
 8004efc:	0801fe84 	.word	0x0801fe84
 8004f00:	200011a0 	.word	0x200011a0
						  if(myData.speed>=vitmax){
 8004f04:	4bac      	ldr	r3, [pc, #688]	@ (80051b8 <statemachine+0x868>)
 8004f06:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004f0a:	4bac      	ldr	r3, [pc, #688]	@ (80051bc <statemachine+0x86c>)
 8004f0c:	edd3 7a00 	vldr	s15, [r3]
 8004f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f18:	db03      	blt.n	8004f22 <statemachine+0x5d2>
						  									 vitmax=myData.speed;
 8004f1a:	4ba7      	ldr	r3, [pc, #668]	@ (80051b8 <statemachine+0x868>)
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1e:	4aa7      	ldr	r2, [pc, #668]	@ (80051bc <statemachine+0x86c>)
 8004f20:	6013      	str	r3, [r2, #0]
						  if(pagenumber+1>=MAX_WRITE_PAGE){
 8004f22:	4ba7      	ldr	r3, [pc, #668]	@ (80051c0 <statemachine+0x870>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f246 32fd 	movw	r2, #25597	@ 0x63fd
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	dd05      	ble.n	8004f3a <statemachine+0x5ea>
							  HAL_TIM_Base_Stop_IT(&htim17);
 8004f2e:	48a5      	ldr	r0, [pc, #660]	@ (80051c4 <statemachine+0x874>)
 8004f30:	f00a f8fe 	bl	800f130 <HAL_TIM_Base_Stop_IT>
							  balisestate=2;
 8004f34:	4ba4      	ldr	r3, [pc, #656]	@ (80051c8 <statemachine+0x878>)
 8004f36:	2202      	movs	r2, #2
 8004f38:	701a      	strb	r2, [r3, #0]
						  if(enablewrite==1){
 8004f3a:	4ba4      	ldr	r3, [pc, #656]	@ (80051cc <statemachine+0x87c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	f040 80f4 	bne.w	800512c <statemachine+0x7dc>
							  oldlat=myData.latitude;
 8004f44:	4b9c      	ldr	r3, [pc, #624]	@ (80051b8 <statemachine+0x868>)
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	49a1      	ldr	r1, [pc, #644]	@ (80051d0 <statemachine+0x880>)
 8004f4c:	e9c1 2300 	strd	r2, r3, [r1]
							  oldlong=myData.longitude;
 8004f50:	4b99      	ldr	r3, [pc, #612]	@ (80051b8 <statemachine+0x868>)
 8004f52:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004f56:	499f      	ldr	r1, [pc, #636]	@ (80051d4 <statemachine+0x884>)
 8004f58:	e9c1 2300 	strd	r2, r3, [r1]
							  nmea_parse(&myData, DataBuffer);
 8004f5c:	499e      	ldr	r1, [pc, #632]	@ (80051d8 <statemachine+0x888>)
 8004f5e:	4896      	ldr	r0, [pc, #600]	@ (80051b8 <statemachine+0x868>)
 8004f60:	f7fe fae4 	bl	800352c <nmea_parse>
							  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 8004f64:	4b9a      	ldr	r3, [pc, #616]	@ (80051d0 <statemachine+0x880>)
 8004f66:	ed93 7b00 	vldr	d7, [r3]
 8004f6a:	4b93      	ldr	r3, [pc, #588]	@ (80051b8 <statemachine+0x868>)
 8004f6c:	ed93 6b00 	vldr	d6, [r3]
 8004f70:	4b98      	ldr	r3, [pc, #608]	@ (80051d4 <statemachine+0x884>)
 8004f72:	ed93 5b00 	vldr	d5, [r3]
 8004f76:	4b90      	ldr	r3, [pc, #576]	@ (80051b8 <statemachine+0x868>)
 8004f78:	ed93 4b04 	vldr	d4, [r3, #16]
 8004f7c:	eeb0 3a44 	vmov.f32	s6, s8
 8004f80:	eef0 3a64 	vmov.f32	s7, s9
 8004f84:	eeb0 2a45 	vmov.f32	s4, s10
 8004f88:	eef0 2a65 	vmov.f32	s5, s11
 8004f8c:	eeb0 1a46 	vmov.f32	s2, s12
 8004f90:	eef0 1a66 	vmov.f32	s3, s13
 8004f94:	eeb0 0a47 	vmov.f32	s0, s14
 8004f98:	eef0 0a67 	vmov.f32	s1, s15
 8004f9c:	f7fe fb60 	bl	8003660 <distancecalc>
 8004fa0:	ec51 0b10 	vmov	r0, r1, d0
 8004fa4:	a382      	add	r3, pc, #520	@ (adr r3, 80051b0 <statemachine+0x860>)
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	f7fb fd8d 	bl	8000ac8 <__aeabi_dcmpgt>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d04d      	beq.n	8005050 <statemachine+0x700>
								  myData.latitude=oldlat;
 8004fb4:	4b86      	ldr	r3, [pc, #536]	@ (80051d0 <statemachine+0x880>)
 8004fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fba:	497f      	ldr	r1, [pc, #508]	@ (80051b8 <statemachine+0x868>)
 8004fbc:	e9c1 2300 	strd	r2, r3, [r1]
								  myData.longitude=oldlong;
 8004fc0:	4b84      	ldr	r3, [pc, #528]	@ (80051d4 <statemachine+0x884>)
 8004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc6:	497c      	ldr	r1, [pc, #496]	@ (80051b8 <statemachine+0x868>)
 8004fc8:	e9c1 2304 	strd	r2, r3, [r1, #16]
								  if(barocheck==HAL_OK){
 8004fcc:	4b83      	ldr	r3, [pc, #524]	@ (80051dc <statemachine+0x88c>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d120      	bne.n	8005016 <statemachine+0x6c6>
									  barocheck=PADS_continuous_read(&hi2c1);
 8004fd4:	4882      	ldr	r0, [pc, #520]	@ (80051e0 <statemachine+0x890>)
 8004fd6:	f7fc f837 	bl	8001048 <PADS_continuous_read>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4b7f      	ldr	r3, [pc, #508]	@ (80051dc <statemachine+0x88c>)
 8004fe0:	701a      	strb	r2, [r3, #0]
									  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,alt);
 8004fe2:	4b80      	ldr	r3, [pc, #512]	@ (80051e4 <statemachine+0x894>)
 8004fe4:	edd3 7a00 	vldr	s15, [r3]
 8004fe8:	4b7f      	ldr	r3, [pc, #508]	@ (80051e8 <statemachine+0x898>)
 8004fea:	ed93 7a00 	vldr	s14, [r3]
 8004fee:	4b72      	ldr	r3, [pc, #456]	@ (80051b8 <statemachine+0x868>)
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	4a7e      	ldr	r2, [pc, #504]	@ (80051ec <statemachine+0x89c>)
 8004ff4:	edd2 6a00 	vldr	s13, [r2]
 8004ff8:	eeb0 1a66 	vmov.f32	s2, s13
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	496e      	ldr	r1, [pc, #440]	@ (80051b8 <statemachine+0x868>)
 8005000:	eef0 0a47 	vmov.f32	s1, s14
 8005004:	eeb0 0a67 	vmov.f32	s0, s15
 8005008:	4879      	ldr	r0, [pc, #484]	@ (80051f0 <statemachine+0x8a0>)
 800500a:	f7fe fd85 	bl	8003b18 <csvframe>
 800500e:	4603      	mov	r3, r0
 8005010:	4a78      	ldr	r2, [pc, #480]	@ (80051f4 <statemachine+0x8a4>)
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	e015      	b.n	8005042 <statemachine+0x6f2>
									  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,0.0);
 8005016:	4b73      	ldr	r3, [pc, #460]	@ (80051e4 <statemachine+0x894>)
 8005018:	edd3 7a00 	vldr	s15, [r3]
 800501c:	4b72      	ldr	r3, [pc, #456]	@ (80051e8 <statemachine+0x898>)
 800501e:	ed93 7a00 	vldr	s14, [r3]
 8005022:	4b65      	ldr	r3, [pc, #404]	@ (80051b8 <statemachine+0x868>)
 8005024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005026:	ed9f 1a74 	vldr	s2, [pc, #464]	@ 80051f8 <statemachine+0x8a8>
 800502a:	461a      	mov	r2, r3
 800502c:	4962      	ldr	r1, [pc, #392]	@ (80051b8 <statemachine+0x868>)
 800502e:	eef0 0a47 	vmov.f32	s1, s14
 8005032:	eeb0 0a67 	vmov.f32	s0, s15
 8005036:	486e      	ldr	r0, [pc, #440]	@ (80051f0 <statemachine+0x8a0>)
 8005038:	f7fe fd6e 	bl	8003b18 <csvframe>
 800503c:	4603      	mov	r3, r0
 800503e:	4a6d      	ldr	r2, [pc, #436]	@ (80051f4 <statemachine+0x8a4>)
 8005040:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8005042:	4b6c      	ldr	r3, [pc, #432]	@ (80051f4 <statemachine+0x8a4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4619      	mov	r1, r3
 8005048:	4869      	ldr	r0, [pc, #420]	@ (80051f0 <statemachine+0x8a0>)
 800504a:	f7fe fe9b 	bl	8003d84 <writebuffertoflash>
 800504e:	e06a      	b.n	8005126 <statemachine+0x7d6>
								  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8005050:	4b5f      	ldr	r3, [pc, #380]	@ (80051d0 <statemachine+0x880>)
 8005052:	ed93 7b00 	vldr	d7, [r3]
 8005056:	4b58      	ldr	r3, [pc, #352]	@ (80051b8 <statemachine+0x868>)
 8005058:	ed93 6b00 	vldr	d6, [r3]
 800505c:	4b5d      	ldr	r3, [pc, #372]	@ (80051d4 <statemachine+0x884>)
 800505e:	ed93 5b00 	vldr	d5, [r3]
 8005062:	4b55      	ldr	r3, [pc, #340]	@ (80051b8 <statemachine+0x868>)
 8005064:	ed93 4b04 	vldr	d4, [r3, #16]
 8005068:	eeb0 3a44 	vmov.f32	s6, s8
 800506c:	eef0 3a64 	vmov.f32	s7, s9
 8005070:	eeb0 2a45 	vmov.f32	s4, s10
 8005074:	eef0 2a65 	vmov.f32	s5, s11
 8005078:	eeb0 1a46 	vmov.f32	s2, s12
 800507c:	eef0 1a66 	vmov.f32	s3, s13
 8005080:	eeb0 0a47 	vmov.f32	s0, s14
 8005084:	eef0 0a67 	vmov.f32	s1, s15
 8005088:	f7fe faea 	bl	8003660 <distancecalc>
 800508c:	ec51 0b10 	vmov	r0, r1, d0
 8005090:	4b5a      	ldr	r3, [pc, #360]	@ (80051fc <statemachine+0x8ac>)
 8005092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005096:	f7fb f8d1 	bl	800023c <__adddf3>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4957      	ldr	r1, [pc, #348]	@ (80051fc <statemachine+0x8ac>)
 80050a0:	e9c1 2300 	strd	r2, r3, [r1]
								  if(barocheck==HAL_OK){
 80050a4:	4b4d      	ldr	r3, [pc, #308]	@ (80051dc <statemachine+0x88c>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d120      	bne.n	80050ee <statemachine+0x79e>
								 									  barocheck=PADS_continuous_read(&hi2c1);
 80050ac:	484c      	ldr	r0, [pc, #304]	@ (80051e0 <statemachine+0x890>)
 80050ae:	f7fb ffcb 	bl	8001048 <PADS_continuous_read>
 80050b2:	4603      	mov	r3, r0
 80050b4:	461a      	mov	r2, r3
 80050b6:	4b49      	ldr	r3, [pc, #292]	@ (80051dc <statemachine+0x88c>)
 80050b8:	701a      	strb	r2, [r3, #0]
								 									  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,alt);
 80050ba:	4b4a      	ldr	r3, [pc, #296]	@ (80051e4 <statemachine+0x894>)
 80050bc:	edd3 7a00 	vldr	s15, [r3]
 80050c0:	4b49      	ldr	r3, [pc, #292]	@ (80051e8 <statemachine+0x898>)
 80050c2:	ed93 7a00 	vldr	s14, [r3]
 80050c6:	4b3c      	ldr	r3, [pc, #240]	@ (80051b8 <statemachine+0x868>)
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	4a48      	ldr	r2, [pc, #288]	@ (80051ec <statemachine+0x89c>)
 80050cc:	edd2 6a00 	vldr	s13, [r2]
 80050d0:	eeb0 1a66 	vmov.f32	s2, s13
 80050d4:	461a      	mov	r2, r3
 80050d6:	4938      	ldr	r1, [pc, #224]	@ (80051b8 <statemachine+0x868>)
 80050d8:	eef0 0a47 	vmov.f32	s1, s14
 80050dc:	eeb0 0a67 	vmov.f32	s0, s15
 80050e0:	4843      	ldr	r0, [pc, #268]	@ (80051f0 <statemachine+0x8a0>)
 80050e2:	f7fe fd19 	bl	8003b18 <csvframe>
 80050e6:	4603      	mov	r3, r0
 80050e8:	4a42      	ldr	r2, [pc, #264]	@ (80051f4 <statemachine+0x8a4>)
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	e015      	b.n	800511a <statemachine+0x7ca>
								 									  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,0.0);
 80050ee:	4b3d      	ldr	r3, [pc, #244]	@ (80051e4 <statemachine+0x894>)
 80050f0:	edd3 7a00 	vldr	s15, [r3]
 80050f4:	4b3c      	ldr	r3, [pc, #240]	@ (80051e8 <statemachine+0x898>)
 80050f6:	ed93 7a00 	vldr	s14, [r3]
 80050fa:	4b2f      	ldr	r3, [pc, #188]	@ (80051b8 <statemachine+0x868>)
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 80051f8 <statemachine+0x8a8>
 8005102:	461a      	mov	r2, r3
 8005104:	492c      	ldr	r1, [pc, #176]	@ (80051b8 <statemachine+0x868>)
 8005106:	eef0 0a47 	vmov.f32	s1, s14
 800510a:	eeb0 0a67 	vmov.f32	s0, s15
 800510e:	4838      	ldr	r0, [pc, #224]	@ (80051f0 <statemachine+0x8a0>)
 8005110:	f7fe fd02 	bl	8003b18 <csvframe>
 8005114:	4603      	mov	r3, r0
 8005116:	4a37      	ldr	r2, [pc, #220]	@ (80051f4 <statemachine+0x8a4>)
 8005118:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 800511a:	4b36      	ldr	r3, [pc, #216]	@ (80051f4 <statemachine+0x8a4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4619      	mov	r1, r3
 8005120:	4833      	ldr	r0, [pc, #204]	@ (80051f0 <statemachine+0x8a0>)
 8005122:	f7fe fe2f 	bl	8003d84 <writebuffertoflash>
							  enablewrite=0;
 8005126:	4b29      	ldr	r3, [pc, #164]	@ (80051cc <statemachine+0x87c>)
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
						  ssd1306_SetCursor(32,12);
 800512c:	210c      	movs	r1, #12
 800512e:	2020      	movs	r0, #32
 8005130:	f7ff f89a 	bl	8004268 <ssd1306_SetCursor>
						  switch(ecranstate){
 8005134:	4b32      	ldr	r3, [pc, #200]	@ (8005200 <statemachine+0x8b0>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b05      	cmp	r3, #5
 800513a:	f200 81bc 	bhi.w	80054b6 <statemachine+0xb66>
 800513e:	a201      	add	r2, pc, #4	@ (adr r2, 8005144 <statemachine+0x7f4>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	0800515d 	.word	0x0800515d
 8005148:	08005221 	.word	0x08005221
 800514c:	08005287 	.word	0x08005287
 8005150:	080052f1 	.word	0x080052f1
 8005154:	08005351 	.word	0x08005351
 8005158:	080053af 	.word	0x080053af
							  snprintf((char *)bufferscreen,50,"%d",pagenumber);
 800515c:	4b18      	ldr	r3, [pc, #96]	@ (80051c0 <statemachine+0x870>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a28      	ldr	r2, [pc, #160]	@ (8005204 <statemachine+0x8b4>)
 8005162:	2132      	movs	r1, #50	@ 0x32
 8005164:	4828      	ldr	r0, [pc, #160]	@ (8005208 <statemachine+0x8b8>)
 8005166:	f016 f9bd 	bl	801b4e4 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800516a:	4a28      	ldr	r2, [pc, #160]	@ (800520c <statemachine+0x8bc>)
 800516c:	2301      	movs	r3, #1
 800516e:	ca06      	ldmia	r2, {r1, r2}
 8005170:	4825      	ldr	r0, [pc, #148]	@ (8005208 <statemachine+0x8b8>)
 8005172:	f7ff f853 	bl	800421c <ssd1306_WriteString>
							  ssd1306_SetCursor(32,22);
 8005176:	2116      	movs	r1, #22
 8005178:	2020      	movs	r0, #32
 800517a:	f7ff f875 	bl	8004268 <ssd1306_SetCursor>
							  ssd1306_WriteString("PageNb",Font_6x8,White);
 800517e:	4a24      	ldr	r2, [pc, #144]	@ (8005210 <statemachine+0x8c0>)
 8005180:	2301      	movs	r3, #1
 8005182:	ca06      	ldmia	r2, {r1, r2}
 8005184:	4823      	ldr	r0, [pc, #140]	@ (8005214 <statemachine+0x8c4>)
 8005186:	f7ff f849 	bl	800421c <ssd1306_WriteString>
							  if(BTN_B>=1){
 800518a:	4b23      	ldr	r3, [pc, #140]	@ (8005218 <statemachine+0x8c8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	f340 8159 	ble.w	8005446 <statemachine+0xaf6>
														  ecranstate++;
 8005194:	4b1a      	ldr	r3, [pc, #104]	@ (8005200 <statemachine+0x8b0>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	3301      	adds	r3, #1
 800519a:	b2da      	uxtb	r2, r3
 800519c:	4b18      	ldr	r3, [pc, #96]	@ (8005200 <statemachine+0x8b0>)
 800519e:	701a      	strb	r2, [r3, #0]
													  	BTN_B=0;
 80051a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005218 <statemachine+0x8c8>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
													  	BTN_A=0;
 80051a6:	4b1d      	ldr	r3, [pc, #116]	@ (800521c <statemachine+0x8cc>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
							  break;
 80051ac:	e14b      	b.n	8005446 <statemachine+0xaf6>
 80051ae:	bf00      	nop
 80051b0:	00000000 	.word	0x00000000
 80051b4:	40616000 	.word	0x40616000
 80051b8:	20000740 	.word	0x20000740
 80051bc:	20000a54 	.word	0x20000a54
 80051c0:	200009c0 	.word	0x200009c0
 80051c4:	200011a0 	.word	0x200011a0
 80051c8:	200005f5 	.word	0x200005f5
 80051cc:	20000a98 	.word	0x20000a98
 80051d0:	20000a88 	.word	0x20000a88
 80051d4:	20000a90 	.word	0x20000a90
 80051d8:	2000063c 	.word	0x2000063c
 80051dc:	20000c01 	.word	0x20000c01
 80051e0:	2000050c 	.word	0x2000050c
 80051e4:	200007b0 	.word	0x200007b0
 80051e8:	200007b8 	.word	0x200007b8
 80051ec:	2000039c 	.word	0x2000039c
 80051f0:	200007bc 	.word	0x200007bc
 80051f4:	20000a6c 	.word	0x20000a6c
 80051f8:	00000000 	.word	0x00000000
 80051fc:	20000a80 	.word	0x20000a80
 8005200:	20000c00 	.word	0x20000c00
 8005204:	0801fe8c 	.word	0x0801fe8c
 8005208:	200009e0 	.word	0x200009e0
 800520c:	2000001c 	.word	0x2000001c
 8005210:	20000014 	.word	0x20000014
 8005214:	0801fe90 	.word	0x0801fe90
 8005218:	20000784 	.word	0x20000784
 800521c:	20000780 	.word	0x20000780
							  snprintf((char  *)bufferscreen,50,"%0.3lf",distanceparcouru/1000);
 8005220:	4b91      	ldr	r3, [pc, #580]	@ (8005468 <statemachine+0xb18>)
 8005222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	4b90      	ldr	r3, [pc, #576]	@ (800546c <statemachine+0xb1c>)
 800522c:	f7fb fae6 	bl	80007fc <__aeabi_ddiv>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	e9cd 2300 	strd	r2, r3, [sp]
 8005238:	4a8d      	ldr	r2, [pc, #564]	@ (8005470 <statemachine+0xb20>)
 800523a:	2132      	movs	r1, #50	@ 0x32
 800523c:	488d      	ldr	r0, [pc, #564]	@ (8005474 <statemachine+0xb24>)
 800523e:	f016 f951 	bl	801b4e4 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8005242:	4a8d      	ldr	r2, [pc, #564]	@ (8005478 <statemachine+0xb28>)
 8005244:	2301      	movs	r3, #1
 8005246:	ca06      	ldmia	r2, {r1, r2}
 8005248:	488a      	ldr	r0, [pc, #552]	@ (8005474 <statemachine+0xb24>)
 800524a:	f7fe ffe7 	bl	800421c <ssd1306_WriteString>
							  ssd1306_SetCursor(32,22);
 800524e:	2116      	movs	r1, #22
 8005250:	2020      	movs	r0, #32
 8005252:	f7ff f809 	bl	8004268 <ssd1306_SetCursor>
							  ssd1306_WriteString("Dist(km)",Font_6x8,White);
 8005256:	4a89      	ldr	r2, [pc, #548]	@ (800547c <statemachine+0xb2c>)
 8005258:	2301      	movs	r3, #1
 800525a:	ca06      	ldmia	r2, {r1, r2}
 800525c:	4888      	ldr	r0, [pc, #544]	@ (8005480 <statemachine+0xb30>)
 800525e:	f7fe ffdd 	bl	800421c <ssd1306_WriteString>
							  if(BTN_B>=1){
 8005262:	4b88      	ldr	r3, [pc, #544]	@ (8005484 <statemachine+0xb34>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	f340 80ef 	ble.w	800544a <statemachine+0xafa>
							  														  ecranstate++;
 800526c:	4b86      	ldr	r3, [pc, #536]	@ (8005488 <statemachine+0xb38>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	3301      	adds	r3, #1
 8005272:	b2da      	uxtb	r2, r3
 8005274:	4b84      	ldr	r3, [pc, #528]	@ (8005488 <statemachine+0xb38>)
 8005276:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8005278:	4b82      	ldr	r3, [pc, #520]	@ (8005484 <statemachine+0xb34>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 800527e:	4b83      	ldr	r3, [pc, #524]	@ (800548c <statemachine+0xb3c>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
							  break;
 8005284:	e0e1      	b.n	800544a <statemachine+0xafa>
							  snprintf((char  *)bufferscreen,50,"%0.1f",myData.speed*3.6);
 8005286:	4b82      	ldr	r3, [pc, #520]	@ (8005490 <statemachine+0xb40>)
 8005288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528a:	4618      	mov	r0, r3
 800528c:	f7fb f934 	bl	80004f8 <__aeabi_f2d>
 8005290:	a373      	add	r3, pc, #460	@ (adr r3, 8005460 <statemachine+0xb10>)
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f7fb f987 	bl	80005a8 <__aeabi_dmul>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	e9cd 2300 	strd	r2, r3, [sp]
 80052a2:	4a7c      	ldr	r2, [pc, #496]	@ (8005494 <statemachine+0xb44>)
 80052a4:	2132      	movs	r1, #50	@ 0x32
 80052a6:	4873      	ldr	r0, [pc, #460]	@ (8005474 <statemachine+0xb24>)
 80052a8:	f016 f91c 	bl	801b4e4 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 80052ac:	4a72      	ldr	r2, [pc, #456]	@ (8005478 <statemachine+0xb28>)
 80052ae:	2301      	movs	r3, #1
 80052b0:	ca06      	ldmia	r2, {r1, r2}
 80052b2:	4870      	ldr	r0, [pc, #448]	@ (8005474 <statemachine+0xb24>)
 80052b4:	f7fe ffb2 	bl	800421c <ssd1306_WriteString>
							  ssd1306_SetCursor(32,22);
 80052b8:	2116      	movs	r1, #22
 80052ba:	2020      	movs	r0, #32
 80052bc:	f7fe ffd4 	bl	8004268 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vit(kmh)",Font_6x8,White);
 80052c0:	4a6e      	ldr	r2, [pc, #440]	@ (800547c <statemachine+0xb2c>)
 80052c2:	2301      	movs	r3, #1
 80052c4:	ca06      	ldmia	r2, {r1, r2}
 80052c6:	4874      	ldr	r0, [pc, #464]	@ (8005498 <statemachine+0xb48>)
 80052c8:	f7fe ffa8 	bl	800421c <ssd1306_WriteString>
							  if(BTN_B>=1){
 80052cc:	4b6d      	ldr	r3, [pc, #436]	@ (8005484 <statemachine+0xb34>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f340 80bc 	ble.w	800544e <statemachine+0xafe>
							  														  ecranstate++;
 80052d6:	4b6c      	ldr	r3, [pc, #432]	@ (8005488 <statemachine+0xb38>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	3301      	adds	r3, #1
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	4b6a      	ldr	r3, [pc, #424]	@ (8005488 <statemachine+0xb38>)
 80052e0:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 80052e2:	4b68      	ldr	r3, [pc, #416]	@ (8005484 <statemachine+0xb34>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 80052e8:	4b68      	ldr	r3, [pc, #416]	@ (800548c <statemachine+0xb3c>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
							  break;
 80052ee:	e0ae      	b.n	800544e <statemachine+0xafe>
							  snprintf((char  *)bufferscreen,50,"%0.1f",alt);
 80052f0:	4b6a      	ldr	r3, [pc, #424]	@ (800549c <statemachine+0xb4c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fb f8ff 	bl	80004f8 <__aeabi_f2d>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	e9cd 2300 	strd	r2, r3, [sp]
 8005302:	4a64      	ldr	r2, [pc, #400]	@ (8005494 <statemachine+0xb44>)
 8005304:	2132      	movs	r1, #50	@ 0x32
 8005306:	485b      	ldr	r0, [pc, #364]	@ (8005474 <statemachine+0xb24>)
 8005308:	f016 f8ec 	bl	801b4e4 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800530c:	4a5a      	ldr	r2, [pc, #360]	@ (8005478 <statemachine+0xb28>)
 800530e:	2301      	movs	r3, #1
 8005310:	ca06      	ldmia	r2, {r1, r2}
 8005312:	4858      	ldr	r0, [pc, #352]	@ (8005474 <statemachine+0xb24>)
 8005314:	f7fe ff82 	bl	800421c <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,22);
 8005318:	2116      	movs	r1, #22
 800531a:	2020      	movs	r0, #32
 800531c:	f7fe ffa4 	bl	8004268 <ssd1306_SetCursor>
							  							ssd1306_WriteString("alt(m)",Font_6x8,White);
 8005320:	4a56      	ldr	r2, [pc, #344]	@ (800547c <statemachine+0xb2c>)
 8005322:	2301      	movs	r3, #1
 8005324:	ca06      	ldmia	r2, {r1, r2}
 8005326:	485e      	ldr	r0, [pc, #376]	@ (80054a0 <statemachine+0xb50>)
 8005328:	f7fe ff78 	bl	800421c <ssd1306_WriteString>
							  if(BTN_B>=1){
 800532c:	4b55      	ldr	r3, [pc, #340]	@ (8005484 <statemachine+0xb34>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	f340 808e 	ble.w	8005452 <statemachine+0xb02>
							  														  ecranstate++;
 8005336:	4b54      	ldr	r3, [pc, #336]	@ (8005488 <statemachine+0xb38>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	3301      	adds	r3, #1
 800533c:	b2da      	uxtb	r2, r3
 800533e:	4b52      	ldr	r3, [pc, #328]	@ (8005488 <statemachine+0xb38>)
 8005340:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8005342:	4b50      	ldr	r3, [pc, #320]	@ (8005484 <statemachine+0xb34>)
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8005348:	4b50      	ldr	r3, [pc, #320]	@ (800548c <statemachine+0xb3c>)
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
							  break;
 800534e:	e080      	b.n	8005452 <statemachine+0xb02>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vbat);
 8005350:	4b54      	ldr	r3, [pc, #336]	@ (80054a4 <statemachine+0xb54>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f7fb f8cf 	bl	80004f8 <__aeabi_f2d>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	e9cd 2300 	strd	r2, r3, [sp]
 8005362:	4a4c      	ldr	r2, [pc, #304]	@ (8005494 <statemachine+0xb44>)
 8005364:	2132      	movs	r1, #50	@ 0x32
 8005366:	4843      	ldr	r0, [pc, #268]	@ (8005474 <statemachine+0xb24>)
 8005368:	f016 f8bc 	bl	801b4e4 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800536c:	4a42      	ldr	r2, [pc, #264]	@ (8005478 <statemachine+0xb28>)
 800536e:	2301      	movs	r3, #1
 8005370:	ca06      	ldmia	r2, {r1, r2}
 8005372:	4840      	ldr	r0, [pc, #256]	@ (8005474 <statemachine+0xb24>)
 8005374:	f7fe ff52 	bl	800421c <ssd1306_WriteString>
							  ssd1306_SetCursor(32,22);
 8005378:	2116      	movs	r1, #22
 800537a:	2020      	movs	r0, #32
 800537c:	f7fe ff74 	bl	8004268 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vbat(V)",Font_6x8,White);
 8005380:	4a3e      	ldr	r2, [pc, #248]	@ (800547c <statemachine+0xb2c>)
 8005382:	2301      	movs	r3, #1
 8005384:	ca06      	ldmia	r2, {r1, r2}
 8005386:	4848      	ldr	r0, [pc, #288]	@ (80054a8 <statemachine+0xb58>)
 8005388:	f7fe ff48 	bl	800421c <ssd1306_WriteString>
							  if(BTN_B>=1){
 800538c:	4b3d      	ldr	r3, [pc, #244]	@ (8005484 <statemachine+0xb34>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	dd60      	ble.n	8005456 <statemachine+0xb06>
							  														  ecranstate++;
 8005394:	4b3c      	ldr	r3, [pc, #240]	@ (8005488 <statemachine+0xb38>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	b2da      	uxtb	r2, r3
 800539c:	4b3a      	ldr	r3, [pc, #232]	@ (8005488 <statemachine+0xb38>)
 800539e:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 80053a0:	4b38      	ldr	r3, [pc, #224]	@ (8005484 <statemachine+0xb34>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 80053a6:	4b39      	ldr	r3, [pc, #228]	@ (800548c <statemachine+0xb3c>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
							  break;
 80053ac:	e053      	b.n	8005456 <statemachine+0xb06>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vitmax*3.6);
 80053ae:	4b3f      	ldr	r3, [pc, #252]	@ (80054ac <statemachine+0xb5c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fb f8a0 	bl	80004f8 <__aeabi_f2d>
 80053b8:	a329      	add	r3, pc, #164	@ (adr r3, 8005460 <statemachine+0xb10>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f7fb f8f3 	bl	80005a8 <__aeabi_dmul>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	e9cd 2300 	strd	r2, r3, [sp]
 80053ca:	4a32      	ldr	r2, [pc, #200]	@ (8005494 <statemachine+0xb44>)
 80053cc:	2132      	movs	r1, #50	@ 0x32
 80053ce:	4829      	ldr	r0, [pc, #164]	@ (8005474 <statemachine+0xb24>)
 80053d0:	f016 f888 	bl	801b4e4 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 80053d4:	4a28      	ldr	r2, [pc, #160]	@ (8005478 <statemachine+0xb28>)
 80053d6:	2301      	movs	r3, #1
 80053d8:	ca06      	ldmia	r2, {r1, r2}
 80053da:	4826      	ldr	r0, [pc, #152]	@ (8005474 <statemachine+0xb24>)
 80053dc:	f7fe ff1e 	bl	800421c <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,22);
 80053e0:	2116      	movs	r1, #22
 80053e2:	2020      	movs	r0, #32
 80053e4:	f7fe ff40 	bl	8004268 <ssd1306_SetCursor>
							  							ssd1306_WriteString("MaxV",Font_6x8,White);
 80053e8:	4a24      	ldr	r2, [pc, #144]	@ (800547c <statemachine+0xb2c>)
 80053ea:	2301      	movs	r3, #1
 80053ec:	ca06      	ldmia	r2, {r1, r2}
 80053ee:	4830      	ldr	r0, [pc, #192]	@ (80054b0 <statemachine+0xb60>)
 80053f0:	f7fe ff14 	bl	800421c <ssd1306_WriteString>
							  if(BTN_B>=1){
 80053f4:	4b23      	ldr	r3, [pc, #140]	@ (8005484 <statemachine+0xb34>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	dd5b      	ble.n	80054b4 <statemachine+0xb64>
							  														ecranstate--;
 80053fc:	4b22      	ldr	r3, [pc, #136]	@ (8005488 <statemachine+0xb38>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	3b01      	subs	r3, #1
 8005402:	b2da      	uxtb	r2, r3
 8005404:	4b20      	ldr	r3, [pc, #128]	@ (8005488 <statemachine+0xb38>)
 8005406:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8005408:	4b1f      	ldr	r3, [pc, #124]	@ (8005488 <statemachine+0xb38>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	3b01      	subs	r3, #1
 800540e:	b2da      	uxtb	r2, r3
 8005410:	4b1d      	ldr	r3, [pc, #116]	@ (8005488 <statemachine+0xb38>)
 8005412:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8005414:	4b1c      	ldr	r3, [pc, #112]	@ (8005488 <statemachine+0xb38>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	3b01      	subs	r3, #1
 800541a:	b2da      	uxtb	r2, r3
 800541c:	4b1a      	ldr	r3, [pc, #104]	@ (8005488 <statemachine+0xb38>)
 800541e:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8005420:	4b19      	ldr	r3, [pc, #100]	@ (8005488 <statemachine+0xb38>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	3b01      	subs	r3, #1
 8005426:	b2da      	uxtb	r2, r3
 8005428:	4b17      	ldr	r3, [pc, #92]	@ (8005488 <statemachine+0xb38>)
 800542a:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 800542c:	4b16      	ldr	r3, [pc, #88]	@ (8005488 <statemachine+0xb38>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	3b01      	subs	r3, #1
 8005432:	b2da      	uxtb	r2, r3
 8005434:	4b14      	ldr	r3, [pc, #80]	@ (8005488 <statemachine+0xb38>)
 8005436:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8005438:	4b12      	ldr	r3, [pc, #72]	@ (8005484 <statemachine+0xb34>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 800543e:	4b13      	ldr	r3, [pc, #76]	@ (800548c <statemachine+0xb3c>)
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
							  break;
 8005444:	e036      	b.n	80054b4 <statemachine+0xb64>
							  break;
 8005446:	bf00      	nop
 8005448:	e035      	b.n	80054b6 <statemachine+0xb66>
							  break;
 800544a:	bf00      	nop
 800544c:	e033      	b.n	80054b6 <statemachine+0xb66>
							  break;
 800544e:	bf00      	nop
 8005450:	e031      	b.n	80054b6 <statemachine+0xb66>
							  break;
 8005452:	bf00      	nop
 8005454:	e02f      	b.n	80054b6 <statemachine+0xb66>
							  break;
 8005456:	bf00      	nop
 8005458:	e02d      	b.n	80054b6 <statemachine+0xb66>
 800545a:	bf00      	nop
 800545c:	f3af 8000 	nop.w
 8005460:	cccccccd 	.word	0xcccccccd
 8005464:	400ccccc 	.word	0x400ccccc
 8005468:	20000a80 	.word	0x20000a80
 800546c:	408f4000 	.word	0x408f4000
 8005470:	0801fe98 	.word	0x0801fe98
 8005474:	200009e0 	.word	0x200009e0
 8005478:	2000001c 	.word	0x2000001c
 800547c:	20000014 	.word	0x20000014
 8005480:	0801fea0 	.word	0x0801fea0
 8005484:	20000784 	.word	0x20000784
 8005488:	20000c00 	.word	0x20000c00
 800548c:	20000780 	.word	0x20000780
 8005490:	20000740 	.word	0x20000740
 8005494:	0801fe30 	.word	0x0801fe30
 8005498:	0801fe38 	.word	0x0801fe38
 800549c:	2000039c 	.word	0x2000039c
 80054a0:	0801feac 	.word	0x0801feac
 80054a4:	200007b8 	.word	0x200007b8
 80054a8:	0801feb4 	.word	0x0801feb4
 80054ac:	20000a54 	.word	0x20000a54
 80054b0:	0801febc 	.word	0x0801febc
							  break;
 80054b4:	bf00      	nop
						 	batterygauge(vbat,79, 42,1);
 80054b6:	4b8a      	ldr	r3, [pc, #552]	@ (80056e0 <statemachine+0xd90>)
 80054b8:	edd3 7a00 	vldr	s15, [r3]
 80054bc:	2201      	movs	r2, #1
 80054be:	212a      	movs	r1, #42	@ 0x2a
 80054c0:	204f      	movs	r0, #79	@ 0x4f
 80054c2:	eeb0 0a67 	vmov.f32	s0, s15
 80054c6:	f7ff f867 	bl	8004598 <batterygauge>
						 	ssd1306_SetCursor(32,32);
 80054ca:	2120      	movs	r1, #32
 80054cc:	2020      	movs	r0, #32
 80054ce:	f7fe fecb 	bl	8004268 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 80054d2:	4b83      	ldr	r3, [pc, #524]	@ (80056e0 <statemachine+0xd90>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fb f80e 	bl	80004f8 <__aeabi_f2d>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	e9cd 2300 	strd	r2, r3, [sp]
 80054e4:	4a7f      	ldr	r2, [pc, #508]	@ (80056e4 <statemachine+0xd94>)
 80054e6:	2132      	movs	r1, #50	@ 0x32
 80054e8:	487f      	ldr	r0, [pc, #508]	@ (80056e8 <statemachine+0xd98>)
 80054ea:	f015 fffb 	bl	801b4e4 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80054ee:	4a7f      	ldr	r2, [pc, #508]	@ (80056ec <statemachine+0xd9c>)
 80054f0:	2301      	movs	r3, #1
 80054f2:	ca06      	ldmia	r2, {r1, r2}
 80054f4:	487c      	ldr	r0, [pc, #496]	@ (80056e8 <statemachine+0xd98>)
 80054f6:	f7fe fe91 	bl	800421c <ssd1306_WriteString>
						 	ssd1306_SetCursor(65,32);
 80054fa:	2120      	movs	r1, #32
 80054fc:	2041      	movs	r0, #65	@ 0x41
 80054fe:	f7fe feb3 	bl	8004268 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 8005502:	4b7b      	ldr	r3, [pc, #492]	@ (80056f0 <statemachine+0xda0>)
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	4a7b      	ldr	r2, [pc, #492]	@ (80056f4 <statemachine+0xda4>)
 8005508:	2132      	movs	r1, #50	@ 0x32
 800550a:	4877      	ldr	r0, [pc, #476]	@ (80056e8 <statemachine+0xd98>)
 800550c:	f015 ffea 	bl	801b4e4 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005510:	4a76      	ldr	r2, [pc, #472]	@ (80056ec <statemachine+0xd9c>)
 8005512:	2301      	movs	r3, #1
 8005514:	ca06      	ldmia	r2, {r1, r2}
 8005516:	4874      	ldr	r0, [pc, #464]	@ (80056e8 <statemachine+0xd98>)
 8005518:	f7fe fe80 	bl	800421c <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 800551c:	4b76      	ldr	r3, [pc, #472]	@ (80056f8 <statemachine+0xda8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	dd69      	ble.n	80055f8 <statemachine+0xca8>
						  						  balisestate--;
 8005524:	4b75      	ldr	r3, [pc, #468]	@ (80056fc <statemachine+0xdac>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	3b01      	subs	r3, #1
 800552a:	b2da      	uxtb	r2, r3
 800552c:	4b73      	ldr	r3, [pc, #460]	@ (80056fc <statemachine+0xdac>)
 800552e:	701a      	strb	r2, [r3, #0]
						  						  BTN_B_LONG=0;
 8005530:	4b71      	ldr	r3, [pc, #452]	@ (80056f8 <statemachine+0xda8>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
						  						  BTN_A=0;
 8005536:	4b72      	ldr	r3, [pc, #456]	@ (8005700 <statemachine+0xdb0>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
						  						  HAL_TIM_Base_Stop_IT(&htim17);
 800553c:	4871      	ldr	r0, [pc, #452]	@ (8005704 <statemachine+0xdb4>)
 800553e:	f009 fdf7 	bl	800f130 <HAL_TIM_Base_Stop_IT>
						  						HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8005542:	2200      	movs	r2, #0
 8005544:	2102      	movs	r1, #2
 8005546:	4870      	ldr	r0, [pc, #448]	@ (8005708 <statemachine+0xdb8>)
 8005548:	f003 ff70 	bl	800942c <HAL_GPIO_WritePin>
						  break;
 800554c:	e054      	b.n	80055f8 <statemachine+0xca8>
						  ssd1306_SetCursor(32,12);
 800554e:	210c      	movs	r1, #12
 8005550:	2020      	movs	r0, #32
 8005552:	f7fe fe89 	bl	8004268 <ssd1306_SetCursor>
						  ssd1306_WriteString("fin de",Font_6x8,White);
 8005556:	4a65      	ldr	r2, [pc, #404]	@ (80056ec <statemachine+0xd9c>)
 8005558:	2301      	movs	r3, #1
 800555a:	ca06      	ldmia	r2, {r1, r2}
 800555c:	486b      	ldr	r0, [pc, #428]	@ (800570c <statemachine+0xdbc>)
 800555e:	f7fe fe5d 	bl	800421c <ssd1306_WriteString>
						  ssd1306_SetCursor(32,22);
 8005562:	2116      	movs	r1, #22
 8005564:	2020      	movs	r0, #32
 8005566:	f7fe fe7f 	bl	8004268 <ssd1306_SetCursor>
						  ssd1306_WriteString("memoire",Font_6x8,White);
 800556a:	4a60      	ldr	r2, [pc, #384]	@ (80056ec <statemachine+0xd9c>)
 800556c:	2301      	movs	r3, #1
 800556e:	ca06      	ldmia	r2, {r1, r2}
 8005570:	4867      	ldr	r0, [pc, #412]	@ (8005710 <statemachine+0xdc0>)
 8005572:	f7fe fe53 	bl	800421c <ssd1306_WriteString>
						  ssd1306_SetCursor(32,32);
 8005576:	2120      	movs	r1, #32
 8005578:	2020      	movs	r0, #32
 800557a:	f7fe fe75 	bl	8004268 <ssd1306_SetCursor>
						  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 800557e:	4b65      	ldr	r3, [pc, #404]	@ (8005714 <statemachine+0xdc4>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b65      	ldr	r3, [pc, #404]	@ (8005718 <statemachine+0xdc8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	4a64      	ldr	r2, [pc, #400]	@ (800571c <statemachine+0xdcc>)
 800558c:	2132      	movs	r1, #50	@ 0x32
 800558e:	4856      	ldr	r0, [pc, #344]	@ (80056e8 <statemachine+0xd98>)
 8005590:	f015 ffa8 	bl	801b4e4 <sniprintf>
						  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005594:	4a55      	ldr	r2, [pc, #340]	@ (80056ec <statemachine+0xd9c>)
 8005596:	2301      	movs	r3, #1
 8005598:	ca06      	ldmia	r2, {r1, r2}
 800559a:	4853      	ldr	r0, [pc, #332]	@ (80056e8 <statemachine+0xd98>)
 800559c:	f7fe fe3e 	bl	800421c <ssd1306_WriteString>
						  if(BTN_A>=1){
 80055a0:	4b57      	ldr	r3, [pc, #348]	@ (8005700 <statemachine+0xdb0>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	dd0e      	ble.n	80055c6 <statemachine+0xc76>
						  				  			 	state++;
 80055a8:	4b5d      	ldr	r3, [pc, #372]	@ (8005720 <statemachine+0xdd0>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	3301      	adds	r3, #1
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	4b5b      	ldr	r3, [pc, #364]	@ (8005720 <statemachine+0xdd0>)
 80055b2:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 80055b4:	4b52      	ldr	r3, [pc, #328]	@ (8005700 <statemachine+0xdb0>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 80055ba:	4b5a      	ldr	r3, [pc, #360]	@ (8005724 <statemachine+0xdd4>)
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
						  				  			settimeen=0;
 80055c0:	4b59      	ldr	r3, [pc, #356]	@ (8005728 <statemachine+0xdd8>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 80055c6:	4b59      	ldr	r3, [pc, #356]	@ (800572c <statemachine+0xddc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f341 8051 	ble.w	8006672 <statemachine+0x1d22>
						  				 									 									  			 	state--;
 80055d0:	4b53      	ldr	r3, [pc, #332]	@ (8005720 <statemachine+0xdd0>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	4b51      	ldr	r3, [pc, #324]	@ (8005720 <statemachine+0xdd0>)
 80055da:	701a      	strb	r2, [r3, #0]
						  				 									 									  			 	BTN_A=0;
 80055dc:	4b48      	ldr	r3, [pc, #288]	@ (8005700 <statemachine+0xdb0>)
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_B=0;
 80055e2:	4b50      	ldr	r3, [pc, #320]	@ (8005724 <statemachine+0xdd4>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_A_LONG=0;
 80055e8:	4b50      	ldr	r3, [pc, #320]	@ (800572c <statemachine+0xddc>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
					  break;
 80055ee:	f001 b840 	b.w	8006672 <statemachine+0x1d22>
						  break;
 80055f2:	bf00      	nop
 80055f4:	f001 b83d 	b.w	8006672 <statemachine+0x1d22>
						  break;
 80055f8:	bf00      	nop
					  break;
 80055fa:	f001 b83a 	b.w	8006672 <statemachine+0x1d22>

	case STATE_POS:
			  ssd1306_Fill(Black);
 80055fe:	2000      	movs	r0, #0
 8005600:	f7fe fcf0 	bl	8003fe4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8005604:	494a      	ldr	r1, [pc, #296]	@ (8005730 <statemachine+0xde0>)
 8005606:	483a      	ldr	r0, [pc, #232]	@ (80056f0 <statemachine+0xda0>)
 8005608:	f7fd ff90 	bl	800352c <nmea_parse>
			  switch(posstate){
 800560c:	4b49      	ldr	r3, [pc, #292]	@ (8005734 <statemachine+0xde4>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b05      	cmp	r3, #5
 8005612:	f200 83af 	bhi.w	8005d74 <statemachine+0x1424>
 8005616:	a201      	add	r2, pc, #4	@ (adr r2, 800561c <statemachine+0xccc>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	08005635 	.word	0x08005635
 8005620:	08005745 	.word	0x08005745
 8005624:	0800580d 	.word	0x0800580d
 8005628:	080058cb 	.word	0x080058cb
 800562c:	080059d5 	.word	0x080059d5
 8005630:	08005bfd 	.word	0x08005bfd

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 12);
 8005634:	210c      	movs	r1, #12
 8005636:	2020      	movs	r0, #32
 8005638:	f7fe fe16 	bl	8004268 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 800563c:	4a3e      	ldr	r2, [pc, #248]	@ (8005738 <statemachine+0xde8>)
 800563e:	210f      	movs	r1, #15
 8005640:	4829      	ldr	r0, [pc, #164]	@ (80056e8 <statemachine+0xd98>)
 8005642:	f015 ff4f 	bl	801b4e4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005646:	4a29      	ldr	r2, [pc, #164]	@ (80056ec <statemachine+0xd9c>)
 8005648:	2301      	movs	r3, #1
 800564a:	ca06      	ldmia	r2, {r1, r2}
 800564c:	4826      	ldr	r0, [pc, #152]	@ (80056e8 <statemachine+0xd98>)
 800564e:	f7fe fde5 	bl	800421c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005652:	4b27      	ldr	r3, [pc, #156]	@ (80056f0 <statemachine+0xda0>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	e9cd 2300 	strd	r2, r3, [sp]
 800565c:	4a37      	ldr	r2, [pc, #220]	@ (800573c <statemachine+0xdec>)
 800565e:	210f      	movs	r1, #15
 8005660:	4821      	ldr	r0, [pc, #132]	@ (80056e8 <statemachine+0xd98>)
 8005662:	f015 ff3f 	bl	801b4e4 <sniprintf>
						ssd1306_SetCursor(32, 20);
 8005666:	2114      	movs	r1, #20
 8005668:	2020      	movs	r0, #32
 800566a:	f7fe fdfd 	bl	8004268 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800566e:	4a1f      	ldr	r2, [pc, #124]	@ (80056ec <statemachine+0xd9c>)
 8005670:	2301      	movs	r3, #1
 8005672:	ca06      	ldmia	r2, {r1, r2}
 8005674:	481c      	ldr	r0, [pc, #112]	@ (80056e8 <statemachine+0xd98>)
 8005676:	f7fe fdd1 	bl	800421c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 800567a:	4a31      	ldr	r2, [pc, #196]	@ (8005740 <statemachine+0xdf0>)
 800567c:	210f      	movs	r1, #15
 800567e:	481a      	ldr	r0, [pc, #104]	@ (80056e8 <statemachine+0xd98>)
 8005680:	f015 ff30 	bl	801b4e4 <sniprintf>
						ssd1306_SetCursor(32, 28);
 8005684:	211c      	movs	r1, #28
 8005686:	2020      	movs	r0, #32
 8005688:	f7fe fdee 	bl	8004268 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800568c:	4a17      	ldr	r2, [pc, #92]	@ (80056ec <statemachine+0xd9c>)
 800568e:	2301      	movs	r3, #1
 8005690:	ca06      	ldmia	r2, {r1, r2}
 8005692:	4815      	ldr	r0, [pc, #84]	@ (80056e8 <statemachine+0xd98>)
 8005694:	f7fe fdc2 	bl	800421c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8005698:	4b15      	ldr	r3, [pc, #84]	@ (80056f0 <statemachine+0xda0>)
 800569a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800569e:	e9cd 2300 	strd	r2, r3, [sp]
 80056a2:	4a26      	ldr	r2, [pc, #152]	@ (800573c <statemachine+0xdec>)
 80056a4:	210f      	movs	r1, #15
 80056a6:	4810      	ldr	r0, [pc, #64]	@ (80056e8 <statemachine+0xd98>)
 80056a8:	f015 ff1c 	bl	801b4e4 <sniprintf>
						ssd1306_SetCursor(32, 36);
 80056ac:	2124      	movs	r1, #36	@ 0x24
 80056ae:	2020      	movs	r0, #32
 80056b0:	f7fe fdda 	bl	8004268 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80056b4:	4a0d      	ldr	r2, [pc, #52]	@ (80056ec <statemachine+0xd9c>)
 80056b6:	2301      	movs	r3, #1
 80056b8:	ca06      	ldmia	r2, {r1, r2}
 80056ba:	480b      	ldr	r0, [pc, #44]	@ (80056e8 <statemachine+0xd98>)
 80056bc:	f7fe fdae 	bl	800421c <ssd1306_WriteString>
				  if(BTN_B>=1){
 80056c0:	4b18      	ldr	r3, [pc, #96]	@ (8005724 <statemachine+0xdd4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f340 834a 	ble.w	8005d5e <statemachine+0x140e>
					  posstate++;
 80056ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005734 <statemachine+0xde4>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	3301      	adds	r3, #1
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	4b18      	ldr	r3, [pc, #96]	@ (8005734 <statemachine+0xde4>)
 80056d4:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 80056d6:	4b13      	ldr	r3, [pc, #76]	@ (8005724 <statemachine+0xdd4>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
				  }



				  break;
 80056dc:	e33f      	b.n	8005d5e <statemachine+0x140e>
 80056de:	bf00      	nop
 80056e0:	200007b8 	.word	0x200007b8
 80056e4:	0801fec4 	.word	0x0801fec4
 80056e8:	200009e0 	.word	0x200009e0
 80056ec:	20000014 	.word	0x20000014
 80056f0:	20000740 	.word	0x20000740
 80056f4:	0801fecc 	.word	0x0801fecc
 80056f8:	20000ab4 	.word	0x20000ab4
 80056fc:	200005f5 	.word	0x200005f5
 8005700:	20000780 	.word	0x20000780
 8005704:	200011a0 	.word	0x200011a0
 8005708:	48000400 	.word	0x48000400
 800570c:	0801fed4 	.word	0x0801fed4
 8005710:	0801fedc 	.word	0x0801fedc
 8005714:	200009bc 	.word	0x200009bc
 8005718:	200009c0 	.word	0x200009c0
 800571c:	0801fee4 	.word	0x0801fee4
 8005720:	200005f0 	.word	0x200005f0
 8005724:	20000784 	.word	0x20000784
 8005728:	20000aa0 	.word	0x20000aa0
 800572c:	20000ab8 	.word	0x20000ab8
 8005730:	2000063c 	.word	0x2000063c
 8005734:	200005f2 	.word	0x200005f2
 8005738:	0801feec 	.word	0x0801feec
 800573c:	0801fef8 	.word	0x0801fef8
 8005740:	0801ff00 	.word	0x0801ff00
			  case STATE_INFO:
				ssd1306_Fill(Black);
 8005744:	2000      	movs	r0, #0
 8005746:	f7fe fc4d 	bl	8003fe4 <ssd1306_Fill>
				nmea_parse(&myData, DataBuffer);
 800574a:	498f      	ldr	r1, [pc, #572]	@ (8005988 <statemachine+0x1038>)
 800574c:	488f      	ldr	r0, [pc, #572]	@ (800598c <statemachine+0x103c>)
 800574e:	f7fd feed 	bl	800352c <nmea_parse>
				snprintf((char *)bufferscreen,15, "sat=%d",myData.satelliteCount);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8005752:	4b8e      	ldr	r3, [pc, #568]	@ (800598c <statemachine+0x103c>)
 8005754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005756:	4a8e      	ldr	r2, [pc, #568]	@ (8005990 <statemachine+0x1040>)
 8005758:	210f      	movs	r1, #15
 800575a:	488e      	ldr	r0, [pc, #568]	@ (8005994 <statemachine+0x1044>)
 800575c:	f015 fec2 	bl	801b4e4 <sniprintf>
				ssd1306_SetCursor(32, 12);
 8005760:	210c      	movs	r1, #12
 8005762:	2020      	movs	r0, #32
 8005764:	f7fe fd80 	bl	8004268 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005768:	4a8b      	ldr	r2, [pc, #556]	@ (8005998 <statemachine+0x1048>)
 800576a:	2301      	movs	r3, #1
 800576c:	ca06      	ldmia	r2, {r1, r2}
 800576e:	4889      	ldr	r0, [pc, #548]	@ (8005994 <statemachine+0x1044>)
 8005770:	f7fe fd54 	bl	800421c <ssd1306_WriteString>
				snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 8005774:	4b89      	ldr	r3, [pc, #548]	@ (800599c <statemachine+0x104c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4618      	mov	r0, r3
 800577a:	f7fa febd 	bl	80004f8 <__aeabi_f2d>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	e9cd 2300 	strd	r2, r3, [sp]
 8005786:	4a86      	ldr	r2, [pc, #536]	@ (80059a0 <statemachine+0x1050>)
 8005788:	2114      	movs	r1, #20
 800578a:	4882      	ldr	r0, [pc, #520]	@ (8005994 <statemachine+0x1044>)
 800578c:	f015 feaa 	bl	801b4e4 <sniprintf>
				ssd1306_SetCursor(32, 22);
 8005790:	2116      	movs	r1, #22
 8005792:	2020      	movs	r0, #32
 8005794:	f7fe fd68 	bl	8004268 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005798:	4a7f      	ldr	r2, [pc, #508]	@ (8005998 <statemachine+0x1048>)
 800579a:	2301      	movs	r3, #1
 800579c:	ca06      	ldmia	r2, {r1, r2}
 800579e:	487d      	ldr	r0, [pc, #500]	@ (8005994 <statemachine+0x1044>)
 80057a0:	f7fe fd3c 	bl	800421c <ssd1306_WriteString>
				ssd1306_SetCursor(32, 32);
 80057a4:	2120      	movs	r1, #32
 80057a6:	2020      	movs	r0, #32
 80057a8:	f7fe fd5e 	bl	8004268 <ssd1306_SetCursor>
				snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 80057ac:	4b7d      	ldr	r3, [pc, #500]	@ (80059a4 <statemachine+0x1054>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fa fea1 	bl	80004f8 <__aeabi_f2d>
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	e9cd 2300 	strd	r2, r3, [sp]
 80057be:	4a7a      	ldr	r2, [pc, #488]	@ (80059a8 <statemachine+0x1058>)
 80057c0:	210f      	movs	r1, #15
 80057c2:	4874      	ldr	r0, [pc, #464]	@ (8005994 <statemachine+0x1044>)
 80057c4:	f015 fe8e 	bl	801b4e4 <sniprintf>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80057c8:	4a73      	ldr	r2, [pc, #460]	@ (8005998 <statemachine+0x1048>)
 80057ca:	2301      	movs	r3, #1
 80057cc:	ca06      	ldmia	r2, {r1, r2}
 80057ce:	4871      	ldr	r0, [pc, #452]	@ (8005994 <statemachine+0x1044>)
 80057d0:	f7fe fd24 	bl	800421c <ssd1306_WriteString>
				 if(BTN_B>=1){
 80057d4:	4b75      	ldr	r3, [pc, #468]	@ (80059ac <statemachine+0x105c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	dd08      	ble.n	80057ee <statemachine+0xe9e>
								  					  posstate++;
 80057dc:	4b74      	ldr	r3, [pc, #464]	@ (80059b0 <statemachine+0x1060>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	3301      	adds	r3, #1
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	4b72      	ldr	r3, [pc, #456]	@ (80059b0 <statemachine+0x1060>)
 80057e6:	701a      	strb	r2, [r3, #0]
								  					  BTN_B=0;
 80057e8:	4b70      	ldr	r3, [pc, #448]	@ (80059ac <statemachine+0x105c>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]
								  				  }
								  if(BTN_B_LONG>=1){
 80057ee:	4b71      	ldr	r3, [pc, #452]	@ (80059b4 <statemachine+0x1064>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f340 82b5 	ble.w	8005d62 <statemachine+0x1412>
													  posstate--;
 80057f8:	4b6d      	ldr	r3, [pc, #436]	@ (80059b0 <statemachine+0x1060>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	4b6b      	ldr	r3, [pc, #428]	@ (80059b0 <statemachine+0x1060>)
 8005802:	701a      	strb	r2, [r3, #0]
													BTN_B_LONG=0;
 8005804:	4b6b      	ldr	r3, [pc, #428]	@ (80059b4 <statemachine+0x1064>)
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
												}

				  break;
 800580a:	e2aa      	b.n	8005d62 <statemachine+0x1412>
			  case STATE_LAT:
						ssd1306_SetCursor(32, 12);
 800580c:	210c      	movs	r1, #12
 800580e:	2020      	movs	r0, #32
 8005810:	f7fe fd2a 	bl	8004268 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 8005814:	4a68      	ldr	r2, [pc, #416]	@ (80059b8 <statemachine+0x1068>)
 8005816:	210f      	movs	r1, #15
 8005818:	485e      	ldr	r0, [pc, #376]	@ (8005994 <statemachine+0x1044>)
 800581a:	f015 fe63 	bl	801b4e4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800581e:	4a67      	ldr	r2, [pc, #412]	@ (80059bc <statemachine+0x106c>)
 8005820:	2301      	movs	r3, #1
 8005822:	ca06      	ldmia	r2, {r1, r2}
 8005824:	485b      	ldr	r0, [pc, #364]	@ (8005994 <statemachine+0x1044>)
 8005826:	f7fe fcf9 	bl	800421c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 800582a:	4b58      	ldr	r3, [pc, #352]	@ (800598c <statemachine+0x103c>)
 800582c:	7a1b      	ldrb	r3, [r3, #8]
 800582e:	4a64      	ldr	r2, [pc, #400]	@ (80059c0 <statemachine+0x1070>)
 8005830:	210f      	movs	r1, #15
 8005832:	4858      	ldr	r0, [pc, #352]	@ (8005994 <statemachine+0x1044>)
 8005834:	f015 fe56 	bl	801b4e4 <sniprintf>
						ssd1306_SetCursor(32, 20);
 8005838:	2114      	movs	r1, #20
 800583a:	2020      	movs	r0, #32
 800583c:	f7fe fd14 	bl	8004268 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005840:	4a5e      	ldr	r2, [pc, #376]	@ (80059bc <statemachine+0x106c>)
 8005842:	2301      	movs	r3, #1
 8005844:	ca06      	ldmia	r2, {r1, r2}
 8005846:	4853      	ldr	r0, [pc, #332]	@ (8005994 <statemachine+0x1044>)
 8005848:	f7fe fce8 	bl	800421c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 800584c:	4a5d      	ldr	r2, [pc, #372]	@ (80059c4 <statemachine+0x1074>)
 800584e:	210f      	movs	r1, #15
 8005850:	4850      	ldr	r0, [pc, #320]	@ (8005994 <statemachine+0x1044>)
 8005852:	f015 fe47 	bl	801b4e4 <sniprintf>
						ssd1306_SetCursor(32, 28);
 8005856:	211c      	movs	r1, #28
 8005858:	2020      	movs	r0, #32
 800585a:	f7fe fd05 	bl	8004268 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800585e:	4a57      	ldr	r2, [pc, #348]	@ (80059bc <statemachine+0x106c>)
 8005860:	2301      	movs	r3, #1
 8005862:	ca06      	ldmia	r2, {r1, r2}
 8005864:	484b      	ldr	r0, [pc, #300]	@ (8005994 <statemachine+0x1044>)
 8005866:	f7fe fcd9 	bl	800421c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 800586a:	4b48      	ldr	r3, [pc, #288]	@ (800598c <statemachine+0x103c>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	e9cd 2300 	strd	r2, r3, [sp]
 8005874:	4a54      	ldr	r2, [pc, #336]	@ (80059c8 <statemachine+0x1078>)
 8005876:	210f      	movs	r1, #15
 8005878:	4846      	ldr	r0, [pc, #280]	@ (8005994 <statemachine+0x1044>)
 800587a:	f015 fe33 	bl	801b4e4 <sniprintf>
						ssd1306_SetCursor(32, 36);
 800587e:	2124      	movs	r1, #36	@ 0x24
 8005880:	2020      	movs	r0, #32
 8005882:	f7fe fcf1 	bl	8004268 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005886:	4a4d      	ldr	r2, [pc, #308]	@ (80059bc <statemachine+0x106c>)
 8005888:	2301      	movs	r3, #1
 800588a:	ca06      	ldmia	r2, {r1, r2}
 800588c:	4841      	ldr	r0, [pc, #260]	@ (8005994 <statemachine+0x1044>)
 800588e:	f7fe fcc5 	bl	800421c <ssd1306_WriteString>


				  if(BTN_B>=1){
 8005892:	4b46      	ldr	r3, [pc, #280]	@ (80059ac <statemachine+0x105c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	dd08      	ble.n	80058ac <statemachine+0xf5c>
				  					  posstate++;
 800589a:	4b45      	ldr	r3, [pc, #276]	@ (80059b0 <statemachine+0x1060>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	3301      	adds	r3, #1
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	4b43      	ldr	r3, [pc, #268]	@ (80059b0 <statemachine+0x1060>)
 80058a4:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80058a6:	4b41      	ldr	r3, [pc, #260]	@ (80059ac <statemachine+0x105c>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80058ac:	4b41      	ldr	r3, [pc, #260]	@ (80059b4 <statemachine+0x1064>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f340 8258 	ble.w	8005d66 <statemachine+0x1416>
									  posstate--;
 80058b6:	4b3e      	ldr	r3, [pc, #248]	@ (80059b0 <statemachine+0x1060>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	4b3c      	ldr	r3, [pc, #240]	@ (80059b0 <statemachine+0x1060>)
 80058c0:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 80058c2:	4b3c      	ldr	r3, [pc, #240]	@ (80059b4 <statemachine+0x1064>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
								}



				  break;
 80058c8:	e24d      	b.n	8005d66 <statemachine+0x1416>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 12);
 80058ca:	210c      	movs	r1, #12
 80058cc:	2020      	movs	r0, #32
 80058ce:	f7fe fccb 	bl	8004268 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 80058d2:	4a3e      	ldr	r2, [pc, #248]	@ (80059cc <statemachine+0x107c>)
 80058d4:	210f      	movs	r1, #15
 80058d6:	482f      	ldr	r0, [pc, #188]	@ (8005994 <statemachine+0x1044>)
 80058d8:	f015 fe04 	bl	801b4e4 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80058dc:	4a37      	ldr	r2, [pc, #220]	@ (80059bc <statemachine+0x106c>)
 80058de:	2301      	movs	r3, #1
 80058e0:	ca06      	ldmia	r2, {r1, r2}
 80058e2:	482c      	ldr	r0, [pc, #176]	@ (8005994 <statemachine+0x1044>)
 80058e4:	f7fe fc9a 	bl	800421c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80058e8:	4b28      	ldr	r3, [pc, #160]	@ (800598c <statemachine+0x103c>)
 80058ea:	7e1b      	ldrb	r3, [r3, #24]
 80058ec:	4a34      	ldr	r2, [pc, #208]	@ (80059c0 <statemachine+0x1070>)
 80058ee:	210f      	movs	r1, #15
 80058f0:	4828      	ldr	r0, [pc, #160]	@ (8005994 <statemachine+0x1044>)
 80058f2:	f015 fdf7 	bl	801b4e4 <sniprintf>
					ssd1306_SetCursor(32, 20);
 80058f6:	2114      	movs	r1, #20
 80058f8:	2020      	movs	r0, #32
 80058fa:	f7fe fcb5 	bl	8004268 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80058fe:	4a2f      	ldr	r2, [pc, #188]	@ (80059bc <statemachine+0x106c>)
 8005900:	2301      	movs	r3, #1
 8005902:	ca06      	ldmia	r2, {r1, r2}
 8005904:	4823      	ldr	r0, [pc, #140]	@ (8005994 <statemachine+0x1044>)
 8005906:	f7fe fc89 	bl	800421c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 800590a:	4a31      	ldr	r2, [pc, #196]	@ (80059d0 <statemachine+0x1080>)
 800590c:	210f      	movs	r1, #15
 800590e:	4821      	ldr	r0, [pc, #132]	@ (8005994 <statemachine+0x1044>)
 8005910:	f015 fde8 	bl	801b4e4 <sniprintf>
					ssd1306_SetCursor(32, 28);
 8005914:	211c      	movs	r1, #28
 8005916:	2020      	movs	r0, #32
 8005918:	f7fe fca6 	bl	8004268 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800591c:	4a27      	ldr	r2, [pc, #156]	@ (80059bc <statemachine+0x106c>)
 800591e:	2301      	movs	r3, #1
 8005920:	ca06      	ldmia	r2, {r1, r2}
 8005922:	481c      	ldr	r0, [pc, #112]	@ (8005994 <statemachine+0x1044>)
 8005924:	f7fe fc7a 	bl	800421c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8005928:	4b18      	ldr	r3, [pc, #96]	@ (800598c <statemachine+0x103c>)
 800592a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800592e:	e9cd 2300 	strd	r2, r3, [sp]
 8005932:	4a25      	ldr	r2, [pc, #148]	@ (80059c8 <statemachine+0x1078>)
 8005934:	210f      	movs	r1, #15
 8005936:	4817      	ldr	r0, [pc, #92]	@ (8005994 <statemachine+0x1044>)
 8005938:	f015 fdd4 	bl	801b4e4 <sniprintf>
					ssd1306_SetCursor(32, 36);
 800593c:	2124      	movs	r1, #36	@ 0x24
 800593e:	2020      	movs	r0, #32
 8005940:	f7fe fc92 	bl	8004268 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005944:	4a1d      	ldr	r2, [pc, #116]	@ (80059bc <statemachine+0x106c>)
 8005946:	2301      	movs	r3, #1
 8005948:	ca06      	ldmia	r2, {r1, r2}
 800594a:	4812      	ldr	r0, [pc, #72]	@ (8005994 <statemachine+0x1044>)
 800594c:	f7fe fc66 	bl	800421c <ssd1306_WriteString>

				  if(BTN_B>=1){
 8005950:	4b16      	ldr	r3, [pc, #88]	@ (80059ac <statemachine+0x105c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	dd08      	ble.n	800596a <statemachine+0x101a>
				  					  posstate++;
 8005958:	4b15      	ldr	r3, [pc, #84]	@ (80059b0 <statemachine+0x1060>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	3301      	adds	r3, #1
 800595e:	b2da      	uxtb	r2, r3
 8005960:	4b13      	ldr	r3, [pc, #76]	@ (80059b0 <statemachine+0x1060>)
 8005962:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8005964:	4b11      	ldr	r3, [pc, #68]	@ (80059ac <statemachine+0x105c>)
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 800596a:	4b12      	ldr	r3, [pc, #72]	@ (80059b4 <statemachine+0x1064>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	f340 81fb 	ble.w	8005d6a <statemachine+0x141a>
									  posstate--;
 8005974:	4b0e      	ldr	r3, [pc, #56]	@ (80059b0 <statemachine+0x1060>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	3b01      	subs	r3, #1
 800597a:	b2da      	uxtb	r2, r3
 800597c:	4b0c      	ldr	r3, [pc, #48]	@ (80059b0 <statemachine+0x1060>)
 800597e:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8005980:	4b0c      	ldr	r3, [pc, #48]	@ (80059b4 <statemachine+0x1064>)
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
								}

				  break;
 8005986:	e1f0      	b.n	8005d6a <statemachine+0x141a>
 8005988:	2000063c 	.word	0x2000063c
 800598c:	20000740 	.word	0x20000740
 8005990:	0801fecc 	.word	0x0801fecc
 8005994:	200009e0 	.word	0x200009e0
 8005998:	2000001c 	.word	0x2000001c
 800599c:	200007b8 	.word	0x200007b8
 80059a0:	0801ff0c 	.word	0x0801ff0c
 80059a4:	200007b0 	.word	0x200007b0
 80059a8:	0801ff18 	.word	0x0801ff18
 80059ac:	20000784 	.word	0x20000784
 80059b0:	200005f2 	.word	0x200005f2
 80059b4:	20000ab4 	.word	0x20000ab4
 80059b8:	0801ff24 	.word	0x0801ff24
 80059bc:	20000014 	.word	0x20000014
 80059c0:	0801ff30 	.word	0x0801ff30
 80059c4:	0801feec 	.word	0x0801feec
 80059c8:	0801fef8 	.word	0x0801fef8
 80059cc:	0801ff34 	.word	0x0801ff34
 80059d0:	0801ff00 	.word	0x0801ff00
			  case STATE_ALT:


				  if(barocheck==HAL_OK){
 80059d4:	4b76      	ldr	r3, [pc, #472]	@ (8005bb0 <statemachine+0x1260>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d15e      	bne.n	8005a9a <statemachine+0x114a>

					  barocheck=PADS_continuous_read(&hi2c1);
 80059dc:	4875      	ldr	r0, [pc, #468]	@ (8005bb4 <statemachine+0x1264>)
 80059de:	f7fb fb33 	bl	8001048 <PADS_continuous_read>
 80059e2:	4603      	mov	r3, r0
 80059e4:	461a      	mov	r2, r3
 80059e6:	4b72      	ldr	r3, [pc, #456]	@ (8005bb0 <statemachine+0x1260>)
 80059e8:	701a      	strb	r2, [r3, #0]
					  ssd1306_SetCursor(32, 12);
 80059ea:	210c      	movs	r1, #12
 80059ec:	2020      	movs	r0, #32
 80059ee:	f7fe fc3b 	bl	8004268 <ssd1306_SetCursor>
					  snprintf((char *)bufferscreen,15, "altbaro:");
 80059f2:	4a71      	ldr	r2, [pc, #452]	@ (8005bb8 <statemachine+0x1268>)
 80059f4:	210f      	movs	r1, #15
 80059f6:	4871      	ldr	r0, [pc, #452]	@ (8005bbc <statemachine+0x126c>)
 80059f8:	f015 fd74 	bl	801b4e4 <sniprintf>
					  				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80059fc:	4a70      	ldr	r2, [pc, #448]	@ (8005bc0 <statemachine+0x1270>)
 80059fe:	2301      	movs	r3, #1
 8005a00:	ca06      	ldmia	r2, {r1, r2}
 8005a02:	486e      	ldr	r0, [pc, #440]	@ (8005bbc <statemachine+0x126c>)
 8005a04:	f7fe fc0a 	bl	800421c <ssd1306_WriteString>
					  				  						snprintf((char *)bufferscreen,15, "%0.1f m",alt);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005a08:	4b6e      	ldr	r3, [pc, #440]	@ (8005bc4 <statemachine+0x1274>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fa fd73 	bl	80004f8 <__aeabi_f2d>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	e9cd 2300 	strd	r2, r3, [sp]
 8005a1a:	4a6b      	ldr	r2, [pc, #428]	@ (8005bc8 <statemachine+0x1278>)
 8005a1c:	210f      	movs	r1, #15
 8005a1e:	4867      	ldr	r0, [pc, #412]	@ (8005bbc <statemachine+0x126c>)
 8005a20:	f015 fd60 	bl	801b4e4 <sniprintf>
					  				  						ssd1306_SetCursor(32, 20);
 8005a24:	2114      	movs	r1, #20
 8005a26:	2020      	movs	r0, #32
 8005a28:	f7fe fc1e 	bl	8004268 <ssd1306_SetCursor>
					  				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005a2c:	4a64      	ldr	r2, [pc, #400]	@ (8005bc0 <statemachine+0x1270>)
 8005a2e:	2301      	movs	r3, #1
 8005a30:	ca06      	ldmia	r2, {r1, r2}
 8005a32:	4862      	ldr	r0, [pc, #392]	@ (8005bbc <statemachine+0x126c>)
 8005a34:	f7fe fbf2 	bl	800421c <ssd1306_WriteString>
					  				  						snprintf((char *)bufferscreen,15, "t=%0.1fC",finaltemp);
 8005a38:	4b64      	ldr	r3, [pc, #400]	@ (8005bcc <statemachine+0x127c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fa fd5b 	bl	80004f8 <__aeabi_f2d>
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	e9cd 2300 	strd	r2, r3, [sp]
 8005a4a:	4a61      	ldr	r2, [pc, #388]	@ (8005bd0 <statemachine+0x1280>)
 8005a4c:	210f      	movs	r1, #15
 8005a4e:	485b      	ldr	r0, [pc, #364]	@ (8005bbc <statemachine+0x126c>)
 8005a50:	f015 fd48 	bl	801b4e4 <sniprintf>
					  				  						ssd1306_SetCursor(32, 28);
 8005a54:	211c      	movs	r1, #28
 8005a56:	2020      	movs	r0, #32
 8005a58:	f7fe fc06 	bl	8004268 <ssd1306_SetCursor>
					  				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005a5c:	4a58      	ldr	r2, [pc, #352]	@ (8005bc0 <statemachine+0x1270>)
 8005a5e:	2301      	movs	r3, #1
 8005a60:	ca06      	ldmia	r2, {r1, r2}
 8005a62:	4856      	ldr	r0, [pc, #344]	@ (8005bbc <statemachine+0x126c>)
 8005a64:	f7fe fbda 	bl	800421c <ssd1306_WriteString>
					  				  						snprintf((char *)bufferscreen,15, "p=%0.1fhpa",finalpress);
 8005a68:	4b5a      	ldr	r3, [pc, #360]	@ (8005bd4 <statemachine+0x1284>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fa fd43 	bl	80004f8 <__aeabi_f2d>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	e9cd 2300 	strd	r2, r3, [sp]
 8005a7a:	4a57      	ldr	r2, [pc, #348]	@ (8005bd8 <statemachine+0x1288>)
 8005a7c:	210f      	movs	r1, #15
 8005a7e:	484f      	ldr	r0, [pc, #316]	@ (8005bbc <statemachine+0x126c>)
 8005a80:	f015 fd30 	bl	801b4e4 <sniprintf>
					  				  						ssd1306_SetCursor(32, 36);
 8005a84:	2124      	movs	r1, #36	@ 0x24
 8005a86:	2020      	movs	r0, #32
 8005a88:	f7fe fbee 	bl	8004268 <ssd1306_SetCursor>
					  				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005a8c:	4a4c      	ldr	r2, [pc, #304]	@ (8005bc0 <statemachine+0x1270>)
 8005a8e:	2301      	movs	r3, #1
 8005a90:	ca06      	ldmia	r2, {r1, r2}
 8005a92:	484a      	ldr	r0, [pc, #296]	@ (8005bbc <statemachine+0x126c>)
 8005a94:	f7fe fbc2 	bl	800421c <ssd1306_WriteString>
 8005a98:	e067      	b.n	8005b6a <statemachine+0x121a>

				  }
				  else{


				  						ssd1306_SetCursor(32, 12);
 8005a9a:	210c      	movs	r1, #12
 8005a9c:	2020      	movs	r0, #32
 8005a9e:	f7fe fbe3 	bl	8004268 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altgps:");
 8005aa2:	4a4e      	ldr	r2, [pc, #312]	@ (8005bdc <statemachine+0x128c>)
 8005aa4:	210f      	movs	r1, #15
 8005aa6:	4845      	ldr	r0, [pc, #276]	@ (8005bbc <statemachine+0x126c>)
 8005aa8:	f015 fd1c 	bl	801b4e4 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005aac:	4a44      	ldr	r2, [pc, #272]	@ (8005bc0 <statemachine+0x1270>)
 8005aae:	2301      	movs	r3, #1
 8005ab0:	ca06      	ldmia	r2, {r1, r2}
 8005ab2:	4842      	ldr	r0, [pc, #264]	@ (8005bbc <statemachine+0x126c>)
 8005ab4:	f7fe fbb2 	bl	800421c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005ab8:	4b49      	ldr	r3, [pc, #292]	@ (8005be0 <statemachine+0x1290>)
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fa fd1b 	bl	80004f8 <__aeabi_f2d>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	e9cd 2300 	strd	r2, r3, [sp]
 8005aca:	4a3f      	ldr	r2, [pc, #252]	@ (8005bc8 <statemachine+0x1278>)
 8005acc:	210f      	movs	r1, #15
 8005ace:	483b      	ldr	r0, [pc, #236]	@ (8005bbc <statemachine+0x126c>)
 8005ad0:	f015 fd08 	bl	801b4e4 <sniprintf>
				  						ssd1306_SetCursor(32, 20);
 8005ad4:	2114      	movs	r1, #20
 8005ad6:	2020      	movs	r0, #32
 8005ad8:	f7fe fbc6 	bl	8004268 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005adc:	4a38      	ldr	r2, [pc, #224]	@ (8005bc0 <statemachine+0x1270>)
 8005ade:	2301      	movs	r3, #1
 8005ae0:	ca06      	ldmia	r2, {r1, r2}
 8005ae2:	4836      	ldr	r0, [pc, #216]	@ (8005bbc <statemachine+0x126c>)
 8005ae4:	f7fe fb9a 	bl	800421c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 8005ae8:	4a3e      	ldr	r2, [pc, #248]	@ (8005be4 <statemachine+0x1294>)
 8005aea:	210f      	movs	r1, #15
 8005aec:	4833      	ldr	r0, [pc, #204]	@ (8005bbc <statemachine+0x126c>)
 8005aee:	f015 fcf9 	bl	801b4e4 <sniprintf>
				  						ssd1306_SetCursor(32, 28);
 8005af2:	211c      	movs	r1, #28
 8005af4:	2020      	movs	r0, #32
 8005af6:	f7fe fbb7 	bl	8004268 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005afa:	4a31      	ldr	r2, [pc, #196]	@ (8005bc0 <statemachine+0x1270>)
 8005afc:	2301      	movs	r3, #1
 8005afe:	ca06      	ldmia	r2, {r1, r2}
 8005b00:	482e      	ldr	r0, [pc, #184]	@ (8005bbc <statemachine+0x126c>)
 8005b02:	f7fe fb8b 	bl	800421c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8005b06:	4b36      	ldr	r3, [pc, #216]	@ (8005be0 <statemachine+0x1290>)
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fa fcf4 	bl	80004f8 <__aeabi_f2d>
 8005b10:	a325      	add	r3, pc, #148	@ (adr r3, 8005ba8 <statemachine+0x1258>)
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	f7fa fd47 	bl	80005a8 <__aeabi_dmul>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4610      	mov	r0, r2
 8005b20:	4619      	mov	r1, r3
 8005b22:	f7fb f839 	bl	8000b98 <__aeabi_d2f>
 8005b26:	4603      	mov	r3, r0
 8005b28:	ee00 3a10 	vmov	s0, r3
 8005b2c:	f018 fb30 	bl	801e190 <expf>
 8005b30:	eef0 7a40 	vmov.f32	s15, s0
 8005b34:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005be8 <statemachine+0x1298>
 8005b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b3c:	ee17 0a90 	vmov	r0, s15
 8005b40:	f7fa fcda 	bl	80004f8 <__aeabi_f2d>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	e9cd 2300 	strd	r2, r3, [sp]
 8005b4c:	4a27      	ldr	r2, [pc, #156]	@ (8005bec <statemachine+0x129c>)
 8005b4e:	210f      	movs	r1, #15
 8005b50:	481a      	ldr	r0, [pc, #104]	@ (8005bbc <statemachine+0x126c>)
 8005b52:	f015 fcc7 	bl	801b4e4 <sniprintf>
				  						ssd1306_SetCursor(32, 36);
 8005b56:	2124      	movs	r1, #36	@ 0x24
 8005b58:	2020      	movs	r0, #32
 8005b5a:	f7fe fb85 	bl	8004268 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005b5e:	4a18      	ldr	r2, [pc, #96]	@ (8005bc0 <statemachine+0x1270>)
 8005b60:	2301      	movs	r3, #1
 8005b62:	ca06      	ldmia	r2, {r1, r2}
 8005b64:	4815      	ldr	r0, [pc, #84]	@ (8005bbc <statemachine+0x126c>)
 8005b66:	f7fe fb59 	bl	800421c <ssd1306_WriteString>

				  }

				  if(BTN_B>=1){
 8005b6a:	4b21      	ldr	r3, [pc, #132]	@ (8005bf0 <statemachine+0x12a0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	dd08      	ble.n	8005b84 <statemachine+0x1234>
				  					posstate++;
 8005b72:	4b20      	ldr	r3, [pc, #128]	@ (8005bf4 <statemachine+0x12a4>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	3301      	adds	r3, #1
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf4 <statemachine+0x12a4>)
 8005b7c:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8005b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf0 <statemachine+0x12a0>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8005b84:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf8 <statemachine+0x12a8>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f340 80f0 	ble.w	8005d6e <statemachine+0x141e>
					  posstate--;
 8005b8e:	4b19      	ldr	r3, [pc, #100]	@ (8005bf4 <statemachine+0x12a4>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	4b17      	ldr	r3, [pc, #92]	@ (8005bf4 <statemachine+0x12a4>)
 8005b98:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 8005b9a:	4b17      	ldr	r3, [pc, #92]	@ (8005bf8 <statemachine+0x12a8>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
				}
				  break;
 8005ba0:	e0e5      	b.n	8005d6e <statemachine+0x141e>
 8005ba2:	bf00      	nop
 8005ba4:	f3af 8000 	nop.w
 8005ba8:	fb798882 	.word	0xfb798882
 8005bac:	bf1e1818 	.word	0xbf1e1818
 8005bb0:	20000c01 	.word	0x20000c01
 8005bb4:	2000050c 	.word	0x2000050c
 8005bb8:	0801ff40 	.word	0x0801ff40
 8005bbc:	200009e0 	.word	0x200009e0
 8005bc0:	20000014 	.word	0x20000014
 8005bc4:	2000039c 	.word	0x2000039c
 8005bc8:	0801ff4c 	.word	0x0801ff4c
 8005bcc:	20000394 	.word	0x20000394
 8005bd0:	0801ff54 	.word	0x0801ff54
 8005bd4:	20000398 	.word	0x20000398
 8005bd8:	0801ff60 	.word	0x0801ff60
 8005bdc:	0801ff6c 	.word	0x0801ff6c
 8005be0:	20000740 	.word	0x20000740
 8005be4:	0801ff74 	.word	0x0801ff74
 8005be8:	447a0000 	.word	0x447a0000
 8005bec:	0801ff80 	.word	0x0801ff80
 8005bf0:	20000784 	.word	0x20000784
 8005bf4:	200005f2 	.word	0x200005f2
 8005bf8:	20000ab4 	.word	0x20000ab4
			  case STATE_HEURE:
			  			  ssd1306_Fill(Black);
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	f7fe f9f1 	bl	8003fe4 <ssd1306_Fill>
			  			  nmea_parse(&myData, DataBuffer);
 8005c02:	4999      	ldr	r1, [pc, #612]	@ (8005e68 <statemachine+0x1518>)
 8005c04:	4899      	ldr	r0, [pc, #612]	@ (8005e6c <statemachine+0x151c>)
 8005c06:	f7fd fc91 	bl	800352c <nmea_parse>
			  			  if(settimeen==0){
 8005c0a:	4b99      	ldr	r3, [pc, #612]	@ (8005e70 <statemachine+0x1520>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d141      	bne.n	8005c96 <statemachine+0x1346>

			  							settimeen=1;
 8005c12:	4b97      	ldr	r3, [pc, #604]	@ (8005e70 <statemachine+0x1520>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
			  							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8005c18:	4b94      	ldr	r3, [pc, #592]	@ (8005e6c <statemachine+0x151c>)
 8005c1a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	0092      	lsls	r2, r2, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	4b8f      	ldr	r3, [pc, #572]	@ (8005e6c <statemachine+0x151c>)
 8005c30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	4413      	add	r3, r2
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8005e74 <statemachine+0x1524>)
 8005c40:	701a      	strb	r2, [r3, #0]
			  							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8005c42:	4b8a      	ldr	r3, [pc, #552]	@ (8005e6c <statemachine+0x151c>)
 8005c44:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005c48:	f003 030f 	and.w	r3, r3, #15
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	461a      	mov	r2, r3
 8005c50:	0092      	lsls	r2, r2, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	4b84      	ldr	r3, [pc, #528]	@ (8005e6c <statemachine+0x151c>)
 8005c5a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	4413      	add	r3, r2
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	4b83      	ldr	r3, [pc, #524]	@ (8005e78 <statemachine+0x1528>)
 8005c6a:	701a      	strb	r2, [r3, #0]
			  							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8005c6c:	4b7f      	ldr	r3, [pc, #508]	@ (8005e6c <statemachine+0x151c>)
 8005c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	0092      	lsls	r2, r2, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	4b7a      	ldr	r3, [pc, #488]	@ (8005e6c <statemachine+0x151c>)
 8005c84:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	4b7a      	ldr	r3, [pc, #488]	@ (8005e7c <statemachine+0x152c>)
 8005c94:	701a      	strb	r2, [r3, #0]


			  					  }


			  				  ssd1306_SetCursor(32, 12);
 8005c96:	210c      	movs	r1, #12
 8005c98:	2020      	movs	r0, #32
 8005c9a:	f7fe fae5 	bl	8004268 <ssd1306_SetCursor>
			  				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 8005c9e:	4a78      	ldr	r2, [pc, #480]	@ (8005e80 <statemachine+0x1530>)
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	ca06      	ldmia	r2, {r1, r2}
 8005ca4:	4877      	ldr	r0, [pc, #476]	@ (8005e84 <statemachine+0x1534>)
 8005ca6:	f7fe fab9 	bl	800421c <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 22);
 8005caa:	2116      	movs	r1, #22
 8005cac:	2020      	movs	r0, #32
 8005cae:	f7fe fadb 	bl	8004268 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 8005cb2:	4b70      	ldr	r3, [pc, #448]	@ (8005e74 <statemachine+0x1524>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8005e78 <statemachine+0x1528>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	4a71      	ldr	r2, [pc, #452]	@ (8005e88 <statemachine+0x1538>)
 8005cc2:	210f      	movs	r1, #15
 8005cc4:	4871      	ldr	r0, [pc, #452]	@ (8005e8c <statemachine+0x153c>)
 8005cc6:	f015 fc0d 	bl	801b4e4 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005cca:	4a71      	ldr	r2, [pc, #452]	@ (8005e90 <statemachine+0x1540>)
 8005ccc:	2301      	movs	r3, #1
 8005cce:	ca06      	ldmia	r2, {r1, r2}
 8005cd0:	486e      	ldr	r0, [pc, #440]	@ (8005e8c <statemachine+0x153c>)
 8005cd2:	f7fe faa3 	bl	800421c <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 32);
 8005cd6:	2120      	movs	r1, #32
 8005cd8:	2020      	movs	r0, #32
 8005cda:	f7fe fac5 	bl	8004268 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 8005cde:	4b67      	ldr	r3, [pc, #412]	@ (8005e7c <statemachine+0x152c>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	4a6c      	ldr	r2, [pc, #432]	@ (8005e94 <statemachine+0x1544>)
 8005ce4:	210f      	movs	r1, #15
 8005ce6:	4869      	ldr	r0, [pc, #420]	@ (8005e8c <statemachine+0x153c>)
 8005ce8:	f015 fbfc 	bl	801b4e4 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005cec:	4a68      	ldr	r2, [pc, #416]	@ (8005e90 <statemachine+0x1540>)
 8005cee:	2301      	movs	r3, #1
 8005cf0:	ca06      	ldmia	r2, {r1, r2}
 8005cf2:	4866      	ldr	r0, [pc, #408]	@ (8005e8c <statemachine+0x153c>)
 8005cf4:	f7fe fa92 	bl	800421c <ssd1306_WriteString>
			  				if(BTN_B>=1){
 8005cf8:	4b67      	ldr	r3, [pc, #412]	@ (8005e98 <statemachine+0x1548>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	dd20      	ble.n	8005d42 <statemachine+0x13f2>
			  					posstate--;
 8005d00:	4b66      	ldr	r3, [pc, #408]	@ (8005e9c <statemachine+0x154c>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	4b64      	ldr	r3, [pc, #400]	@ (8005e9c <statemachine+0x154c>)
 8005d0a:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005d0c:	4b63      	ldr	r3, [pc, #396]	@ (8005e9c <statemachine+0x154c>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	4b61      	ldr	r3, [pc, #388]	@ (8005e9c <statemachine+0x154c>)
 8005d16:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005d18:	4b60      	ldr	r3, [pc, #384]	@ (8005e9c <statemachine+0x154c>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	4b5e      	ldr	r3, [pc, #376]	@ (8005e9c <statemachine+0x154c>)
 8005d22:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005d24:	4b5d      	ldr	r3, [pc, #372]	@ (8005e9c <statemachine+0x154c>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	4b5b      	ldr	r3, [pc, #364]	@ (8005e9c <statemachine+0x154c>)
 8005d2e:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005d30:	4b5a      	ldr	r3, [pc, #360]	@ (8005e9c <statemachine+0x154c>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	4b58      	ldr	r3, [pc, #352]	@ (8005e9c <statemachine+0x154c>)
 8005d3a:	701a      	strb	r2, [r3, #0]
			  					BTN_B=0;
 8005d3c:	4b56      	ldr	r3, [pc, #344]	@ (8005e98 <statemachine+0x1548>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]
			  				}
			  				if(BTN_B_LONG>=1){
 8005d42:	4b57      	ldr	r3, [pc, #348]	@ (8005ea0 <statemachine+0x1550>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	dd13      	ble.n	8005d72 <statemachine+0x1422>
			  							  					posstate--;
 8005d4a:	4b54      	ldr	r3, [pc, #336]	@ (8005e9c <statemachine+0x154c>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	4b52      	ldr	r3, [pc, #328]	@ (8005e9c <statemachine+0x154c>)
 8005d54:	701a      	strb	r2, [r3, #0]
			  							  					BTN_B_LONG=0;
 8005d56:	4b52      	ldr	r3, [pc, #328]	@ (8005ea0 <statemachine+0x1550>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
			  							  				}
			  			break;
 8005d5c:	e009      	b.n	8005d72 <statemachine+0x1422>
				  break;
 8005d5e:	bf00      	nop
 8005d60:	e008      	b.n	8005d74 <statemachine+0x1424>
				  break;
 8005d62:	bf00      	nop
 8005d64:	e006      	b.n	8005d74 <statemachine+0x1424>
				  break;
 8005d66:	bf00      	nop
 8005d68:	e004      	b.n	8005d74 <statemachine+0x1424>
				  break;
 8005d6a:	bf00      	nop
 8005d6c:	e002      	b.n	8005d74 <statemachine+0x1424>
				  break;
 8005d6e:	bf00      	nop
 8005d70:	e000      	b.n	8005d74 <statemachine+0x1424>
			  			break;
 8005d72:	bf00      	nop
			  }

					if(BTN_A>=1){
 8005d74:	4b4b      	ldr	r3, [pc, #300]	@ (8005ea4 <statemachine+0x1554>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	dd0b      	ble.n	8005d94 <statemachine+0x1444>
							state++;
 8005d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8005ea8 <statemachine+0x1558>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	3301      	adds	r3, #1
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	4b48      	ldr	r3, [pc, #288]	@ (8005ea8 <statemachine+0x1558>)
 8005d86:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8005d88:	4b46      	ldr	r3, [pc, #280]	@ (8005ea4 <statemachine+0x1554>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8005d8e:	4b42      	ldr	r3, [pc, #264]	@ (8005e98 <statemachine+0x1548>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 8005d94:	4b45      	ldr	r3, [pc, #276]	@ (8005eac <statemachine+0x155c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f340 846c 	ble.w	8006676 <statemachine+0x1d26>
									 									 									  			 	state--;
 8005d9e:	4b42      	ldr	r3, [pc, #264]	@ (8005ea8 <statemachine+0x1558>)
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	4b40      	ldr	r3, [pc, #256]	@ (8005ea8 <statemachine+0x1558>)
 8005da8:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 8005daa:	4b3e      	ldr	r3, [pc, #248]	@ (8005ea4 <statemachine+0x1554>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 8005db0:	4b39      	ldr	r3, [pc, #228]	@ (8005e98 <statemachine+0x1548>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 8005db6:	4b3d      	ldr	r3, [pc, #244]	@ (8005eac <statemachine+0x155c>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 8005dbc:	f000 bc5b 	b.w	8006676 <statemachine+0x1d26>
		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	f7fe f90f 	bl	8003fe4 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 12);
 8005dc6:	210c      	movs	r1, #12
 8005dc8:	2020      	movs	r0, #32
 8005dca:	f7fe fa4d 	bl	8004268 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8005dce:	4a2c      	ldr	r2, [pc, #176]	@ (8005e80 <statemachine+0x1530>)
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	ca06      	ldmia	r2, {r1, r2}
 8005dd4:	4836      	ldr	r0, [pc, #216]	@ (8005eb0 <statemachine+0x1560>)
 8005dd6:	f7fe fa21 	bl	800421c <ssd1306_WriteString>
			  ssd1306_SetCursor(32,20);
 8005dda:	2114      	movs	r1, #20
 8005ddc:	2020      	movs	r0, #32
 8005dde:	f7fe fa43 	bl	8004268 <ssd1306_SetCursor>

			  switch(chronostate){
 8005de2:	4b34      	ldr	r3, [pc, #208]	@ (8005eb4 <statemachine+0x1564>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d072      	beq.n	8005ed0 <statemachine+0x1580>
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	f300 80a1 	bgt.w	8005f32 <statemachine+0x15e2>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <statemachine+0x14aa>
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d01e      	beq.n	8005e36 <statemachine+0x14e6>
 8005df8:	e09b      	b.n	8005f32 <statemachine+0x15e2>
			  case STATE_RESET:
				  min=0;
 8005dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8005eb8 <statemachine+0x1568>)
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8005e02:	4b2e      	ldr	r3, [pc, #184]	@ (8005ebc <statemachine+0x156c>)
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8005e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8005ec0 <statemachine+0x1570>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 8005e10:	4b21      	ldr	r3, [pc, #132]	@ (8005e98 <statemachine+0x1548>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f340 8087 	ble.w	8005f28 <statemachine+0x15d8>
				  		chronostate++;
 8005e1a:	4b26      	ldr	r3, [pc, #152]	@ (8005eb4 <statemachine+0x1564>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	4b24      	ldr	r3, [pc, #144]	@ (8005eb4 <statemachine+0x1564>)
 8005e24:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005e26:	4b1c      	ldr	r3, [pc, #112]	@ (8005e98 <statemachine+0x1548>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8005e2c:	4b25      	ldr	r3, [pc, #148]	@ (8005ec4 <statemachine+0x1574>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a25      	ldr	r2, [pc, #148]	@ (8005ec8 <statemachine+0x1578>)
 8005e32:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8005e34:	e078      	b.n	8005f28 <statemachine+0x15d8>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 8005e36:	4b23      	ldr	r3, [pc, #140]	@ (8005ec4 <statemachine+0x1574>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	4b23      	ldr	r3, [pc, #140]	@ (8005ec8 <statemachine+0x1578>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	1ad2      	subs	r2, r2, r3
 8005e40:	4b22      	ldr	r3, [pc, #136]	@ (8005ecc <statemachine+0x157c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4413      	add	r3, r2
 8005e46:	4a1e      	ldr	r2, [pc, #120]	@ (8005ec0 <statemachine+0x1570>)
 8005e48:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005e4a:	4b13      	ldr	r3, [pc, #76]	@ (8005e98 <statemachine+0x1548>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	dd6c      	ble.n	8005f2c <statemachine+0x15dc>
				  		chronostate++;
 8005e52:	4b18      	ldr	r3, [pc, #96]	@ (8005eb4 <statemachine+0x1564>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	3301      	adds	r3, #1
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	4b16      	ldr	r3, [pc, #88]	@ (8005eb4 <statemachine+0x1564>)
 8005e5c:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e98 <statemachine+0x1548>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8005e64:	e062      	b.n	8005f2c <statemachine+0x15dc>
 8005e66:	bf00      	nop
 8005e68:	2000063c 	.word	0x2000063c
 8005e6c:	20000740 	.word	0x20000740
 8005e70:	20000aa0 	.word	0x20000aa0
 8005e74:	20000a9d 	.word	0x20000a9d
 8005e78:	20000a9e 	.word	0x20000a9e
 8005e7c:	20000a9c 	.word	0x20000a9c
 8005e80:	20000014 	.word	0x20000014
 8005e84:	0801ff8c 	.word	0x0801ff8c
 8005e88:	0801ff94 	.word	0x0801ff94
 8005e8c:	200009e0 	.word	0x200009e0
 8005e90:	2000001c 	.word	0x2000001c
 8005e94:	0801ffa0 	.word	0x0801ffa0
 8005e98:	20000784 	.word	0x20000784
 8005e9c:	200005f2 	.word	0x200005f2
 8005ea0:	20000ab4 	.word	0x20000ab4
 8005ea4:	20000780 	.word	0x20000780
 8005ea8:	200005f0 	.word	0x200005f0
 8005eac:	20000ab8 	.word	0x20000ab8
 8005eb0:	0801ffac 	.word	0x0801ffac
 8005eb4:	200005f3 	.word	0x200005f3
 8005eb8:	20000a5c 	.word	0x20000a5c
 8005ebc:	20000a58 	.word	0x20000a58
 8005ec0:	20000a64 	.word	0x20000a64
 8005ec4:	20001374 	.word	0x20001374
 8005ec8:	20000a60 	.word	0x20000a60
 8005ecc:	20000a68 	.word	0x20000a68
			  case STATE_PAUSE:
				  timehandler=calctime;
 8005ed0:	4b88      	ldr	r3, [pc, #544]	@ (80060f4 <statemachine+0x17a4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a88      	ldr	r2, [pc, #544]	@ (80060f8 <statemachine+0x17a8>)
 8005ed6:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005ed8:	4b88      	ldr	r3, [pc, #544]	@ (80060fc <statemachine+0x17ac>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	dd0c      	ble.n	8005efa <statemachine+0x15aa>
				  			chronostate--;
 8005ee0:	4b87      	ldr	r3, [pc, #540]	@ (8006100 <statemachine+0x17b0>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	4b85      	ldr	r3, [pc, #532]	@ (8006100 <statemachine+0x17b0>)
 8005eea:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8005eec:	4b83      	ldr	r3, [pc, #524]	@ (80060fc <statemachine+0x17ac>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 8005ef2:	4b84      	ldr	r3, [pc, #528]	@ (8006104 <statemachine+0x17b4>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a84      	ldr	r2, [pc, #528]	@ (8006108 <statemachine+0x17b8>)
 8005ef8:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 8005efa:	4b84      	ldr	r3, [pc, #528]	@ (800610c <statemachine+0x17bc>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	dd16      	ble.n	8005f30 <statemachine+0x15e0>
				  				  	chronostate--;
 8005f02:	4b7f      	ldr	r3, [pc, #508]	@ (8006100 <statemachine+0x17b0>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	4b7d      	ldr	r3, [pc, #500]	@ (8006100 <statemachine+0x17b0>)
 8005f0c:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 8005f0e:	4b7c      	ldr	r3, [pc, #496]	@ (8006100 <statemachine+0x17b0>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	4b7a      	ldr	r3, [pc, #488]	@ (8006100 <statemachine+0x17b0>)
 8005f18:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 8005f1a:	4b7c      	ldr	r3, [pc, #496]	@ (800610c <statemachine+0x17bc>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 8005f20:	4b75      	ldr	r3, [pc, #468]	@ (80060f8 <statemachine+0x17a8>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 8005f26:	e003      	b.n	8005f30 <statemachine+0x15e0>
				  break;
 8005f28:	bf00      	nop
 8005f2a:	e002      	b.n	8005f32 <statemachine+0x15e2>
				  break;
 8005f2c:	bf00      	nop
 8005f2e:	e000      	b.n	8005f32 <statemachine+0x15e2>
				  break;
 8005f30:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8005f32:	4b70      	ldr	r3, [pc, #448]	@ (80060f4 <statemachine+0x17a4>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3e:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8006110 <statemachine+0x17c0>
 8005f42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f46:	ee16 0a90 	vmov	r0, s13
 8005f4a:	f7fa fad5 	bl	80004f8 <__aeabi_f2d>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	ec43 2b10 	vmov	d0, r2, r3
 8005f56:	f018 f9e3 	bl	801e320 <floor>
 8005f5a:	ec53 2b10 	vmov	r2, r3, d0
 8005f5e:	4610      	mov	r0, r2
 8005f60:	4619      	mov	r1, r3
 8005f62:	f7fa fe19 	bl	8000b98 <__aeabi_d2f>
 8005f66:	4603      	mov	r3, r0
 8005f68:	4a6a      	ldr	r2, [pc, #424]	@ (8006114 <statemachine+0x17c4>)
 8005f6a:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8005f6c:	4b61      	ldr	r3, [pc, #388]	@ (80060f4 <statemachine+0x17a4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f78:	4b66      	ldr	r3, [pc, #408]	@ (8006114 <statemachine+0x17c4>)
 8005f7a:	edd3 7a00 	vldr	s15, [r3]
 8005f7e:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8006110 <statemachine+0x17c0>
 8005f82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005f86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f8a:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8006118 <statemachine+0x17c8>
 8005f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f92:	4b62      	ldr	r3, [pc, #392]	@ (800611c <statemachine+0x17cc>)
 8005f94:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8005f98:	4b5e      	ldr	r3, [pc, #376]	@ (8006114 <statemachine+0x17c4>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fa faab 	bl	80004f8 <__aeabi_f2d>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	e9cd 2300 	strd	r2, r3, [sp]
 8005faa:	4a5d      	ldr	r2, [pc, #372]	@ (8006120 <statemachine+0x17d0>)
 8005fac:	210f      	movs	r1, #15
 8005fae:	485d      	ldr	r0, [pc, #372]	@ (8006124 <statemachine+0x17d4>)
 8005fb0:	f015 fa98 	bl	801b4e4 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005fb4:	4a5c      	ldr	r2, [pc, #368]	@ (8006128 <statemachine+0x17d8>)
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	ca06      	ldmia	r2, {r1, r2}
 8005fba:	485a      	ldr	r0, [pc, #360]	@ (8006124 <statemachine+0x17d4>)
 8005fbc:	f7fe f92e 	bl	800421c <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 30);
 8005fc0:	211e      	movs	r1, #30
 8005fc2:	2020      	movs	r0, #32
 8005fc4:	f7fe f950 	bl	8004268 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 8005fc8:	4b54      	ldr	r3, [pc, #336]	@ (800611c <statemachine+0x17cc>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fa fa93 	bl	80004f8 <__aeabi_f2d>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	e9cd 2300 	strd	r2, r3, [sp]
 8005fda:	4a54      	ldr	r2, [pc, #336]	@ (800612c <statemachine+0x17dc>)
 8005fdc:	210f      	movs	r1, #15
 8005fde:	4851      	ldr	r0, [pc, #324]	@ (8006124 <statemachine+0x17d4>)
 8005fe0:	f015 fa80 	bl	801b4e4 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005fe4:	4a50      	ldr	r2, [pc, #320]	@ (8006128 <statemachine+0x17d8>)
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	ca06      	ldmia	r2, {r1, r2}
 8005fea:	484e      	ldr	r0, [pc, #312]	@ (8006124 <statemachine+0x17d4>)
 8005fec:	f7fe f916 	bl	800421c <ssd1306_WriteString>


			  if(BTN_A>=1){
 8005ff0:	4b4f      	ldr	r3, [pc, #316]	@ (8006130 <statemachine+0x17e0>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	dd0b      	ble.n	8006010 <statemachine+0x16c0>
			 	state++;
 8005ff8:	4b4e      	ldr	r3, [pc, #312]	@ (8006134 <statemachine+0x17e4>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	4b4c      	ldr	r3, [pc, #304]	@ (8006134 <statemachine+0x17e4>)
 8006002:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8006004:	4b4a      	ldr	r3, [pc, #296]	@ (8006130 <statemachine+0x17e0>)
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 800600a:	4b3c      	ldr	r3, [pc, #240]	@ (80060fc <statemachine+0x17ac>)
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8006010:	4b49      	ldr	r3, [pc, #292]	@ (8006138 <statemachine+0x17e8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	f340 8330 	ble.w	800667a <statemachine+0x1d2a>
			  				 									 									  			 	state--;
 800601a:	4b46      	ldr	r3, [pc, #280]	@ (8006134 <statemachine+0x17e4>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	3b01      	subs	r3, #1
 8006020:	b2da      	uxtb	r2, r3
 8006022:	4b44      	ldr	r3, [pc, #272]	@ (8006134 <statemachine+0x17e4>)
 8006024:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8006026:	4b42      	ldr	r3, [pc, #264]	@ (8006130 <statemachine+0x17e0>)
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 800602c:	4b33      	ldr	r3, [pc, #204]	@ (80060fc <statemachine+0x17ac>)
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8006032:	4b41      	ldr	r3, [pc, #260]	@ (8006138 <statemachine+0x17e8>)
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8006038:	e31f      	b.n	800667a <statemachine+0x1d2a>




			  case STATE_USB:
				  ssd1306_Fill(Black);
 800603a:	2000      	movs	r0, #0
 800603c:	f7fd ffd2 	bl	8003fe4 <ssd1306_Fill>
				  ssd1306_SetCursor(32,12);
 8006040:	210c      	movs	r1, #12
 8006042:	2020      	movs	r0, #32
 8006044:	f7fe f910 	bl	8004268 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8006048:	4a3c      	ldr	r2, [pc, #240]	@ (800613c <statemachine+0x17ec>)
 800604a:	2301      	movs	r3, #1
 800604c:	ca06      	ldmia	r2, {r1, r2}
 800604e:	483c      	ldr	r0, [pc, #240]	@ (8006140 <statemachine+0x17f0>)
 8006050:	f7fe f8e4 	bl	800421c <ssd1306_WriteString>
				  switch(usbstate){
 8006054:	4b3b      	ldr	r3, [pc, #236]	@ (8006144 <statemachine+0x17f4>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b02      	cmp	r3, #2
 800605a:	f000 815a 	beq.w	8006312 <statemachine+0x19c2>
 800605e:	2b02      	cmp	r3, #2
 8006060:	f300 830d 	bgt.w	800667e <statemachine+0x1d2e>
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <statemachine+0x171e>
 8006068:	2b01      	cmp	r3, #1
 800606a:	d071      	beq.n	8006150 <statemachine+0x1800>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 800606c:	e307      	b.n	800667e <statemachine+0x1d2e>
				 					  ssd1306_SetCursor(32,20);
 800606e:	2114      	movs	r1, #20
 8006070:	2020      	movs	r0, #32
 8006072:	f7fe f8f9 	bl	8004268 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8006076:	4a31      	ldr	r2, [pc, #196]	@ (800613c <statemachine+0x17ec>)
 8006078:	2301      	movs	r3, #1
 800607a:	ca06      	ldmia	r2, {r1, r2}
 800607c:	4832      	ldr	r0, [pc, #200]	@ (8006148 <statemachine+0x17f8>)
 800607e:	f7fe f8cd 	bl	800421c <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8006082:	4b32      	ldr	r3, [pc, #200]	@ (800614c <statemachine+0x17fc>)
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8006088:	4b1c      	ldr	r3, [pc, #112]	@ (80060fc <statemachine+0x17ac>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	dd0b      	ble.n	80060a8 <statemachine+0x1758>
				 						  usbstate++;
 8006090:	4b2c      	ldr	r3, [pc, #176]	@ (8006144 <statemachine+0x17f4>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	3301      	adds	r3, #1
 8006096:	b2da      	uxtb	r2, r3
 8006098:	4b2a      	ldr	r3, [pc, #168]	@ (8006144 <statemachine+0x17f4>)
 800609a:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 800609c:	4b17      	ldr	r3, [pc, #92]	@ (80060fc <statemachine+0x17ac>)
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 80060a2:	4b23      	ldr	r3, [pc, #140]	@ (8006130 <statemachine+0x17e0>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 80060a8:	4b21      	ldr	r3, [pc, #132]	@ (8006130 <statemachine+0x17e0>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	dd0b      	ble.n	80060c8 <statemachine+0x1778>
				 						 state++;
 80060b0:	4b20      	ldr	r3, [pc, #128]	@ (8006134 <statemachine+0x17e4>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006134 <statemachine+0x17e4>)
 80060ba:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 80060bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006130 <statemachine+0x17e0>)
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 80060c2:	4b0e      	ldr	r3, [pc, #56]	@ (80060fc <statemachine+0x17ac>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 80060c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006138 <statemachine+0x17e8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f340 8234 	ble.w	800653a <statemachine+0x1bea>
				 									 									 									  			 	state--;
 80060d2:	4b18      	ldr	r3, [pc, #96]	@ (8006134 <statemachine+0x17e4>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	4b16      	ldr	r3, [pc, #88]	@ (8006134 <statemachine+0x17e4>)
 80060dc:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 80060de:	4b14      	ldr	r3, [pc, #80]	@ (8006130 <statemachine+0x17e0>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 80060e4:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <statemachine+0x17ac>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 80060ea:	4b13      	ldr	r3, [pc, #76]	@ (8006138 <statemachine+0x17e8>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
				 					  break;
 80060f0:	e223      	b.n	800653a <statemachine+0x1bea>
 80060f2:	bf00      	nop
 80060f4:	20000a64 	.word	0x20000a64
 80060f8:	20000a68 	.word	0x20000a68
 80060fc:	20000784 	.word	0x20000784
 8006100:	200005f3 	.word	0x200005f3
 8006104:	20001374 	.word	0x20001374
 8006108:	20000a60 	.word	0x20000a60
 800610c:	20000ab4 	.word	0x20000ab4
 8006110:	476a6000 	.word	0x476a6000
 8006114:	20000a5c 	.word	0x20000a5c
 8006118:	447a0000 	.word	0x447a0000
 800611c:	20000a58 	.word	0x20000a58
 8006120:	0801ffb4 	.word	0x0801ffb4
 8006124:	200009e0 	.word	0x200009e0
 8006128:	2000001c 	.word	0x2000001c
 800612c:	0801ffc0 	.word	0x0801ffc0
 8006130:	20000780 	.word	0x20000780
 8006134:	200005f0 	.word	0x200005f0
 8006138:	20000ab8 	.word	0x20000ab8
 800613c:	20000014 	.word	0x20000014
 8006140:	0801ffc8 	.word	0x0801ffc8
 8006144:	200005f4 	.word	0x200005f4
 8006148:	0801ffcc 	.word	0x0801ffcc
 800614c:	20000a78 	.word	0x20000a78
				 					 ssd1306_SetCursor(32,20);
 8006150:	2114      	movs	r1, #20
 8006152:	2020      	movs	r0, #32
 8006154:	f7fe f888 	bl	8004268 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8006158:	4ab6      	ldr	r2, [pc, #728]	@ (8006434 <statemachine+0x1ae4>)
 800615a:	2301      	movs	r3, #1
 800615c:	ca06      	ldmia	r2, {r1, r2}
 800615e:	48b6      	ldr	r0, [pc, #728]	@ (8006438 <statemachine+0x1ae8>)
 8006160:	f7fe f85c 	bl	800421c <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,28);
 8006164:	211c      	movs	r1, #28
 8006166:	2020      	movs	r0, #32
 8006168:	f7fe f87e 	bl	8004268 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 800616c:	4ab1      	ldr	r2, [pc, #708]	@ (8006434 <statemachine+0x1ae4>)
 800616e:	2301      	movs	r3, #1
 8006170:	ca06      	ldmia	r2, {r1, r2}
 8006172:	48b2      	ldr	r0, [pc, #712]	@ (800643c <statemachine+0x1aec>)
 8006174:	f7fe f852 	bl	800421c <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8006178:	4bb1      	ldr	r3, [pc, #708]	@ (8006440 <statemachine+0x1af0>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d137      	bne.n	80061f0 <statemachine+0x18a0>
					 					 ssd1306_Fill(Black);
 8006180:	2000      	movs	r0, #0
 8006182:	f7fd ff2f 	bl	8003fe4 <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,12);
 8006186:	210c      	movs	r1, #12
 8006188:	2020      	movs	r0, #32
 800618a:	f7fe f86d 	bl	8004268 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 800618e:	4aa9      	ldr	r2, [pc, #676]	@ (8006434 <statemachine+0x1ae4>)
 8006190:	2301      	movs	r3, #1
 8006192:	ca06      	ldmia	r2, {r1, r2}
 8006194:	48ab      	ldr	r0, [pc, #684]	@ (8006444 <statemachine+0x1af4>)
 8006196:	f7fe f841 	bl	800421c <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,22);
 800619a:	2116      	movs	r1, #22
 800619c:	2020      	movs	r0, #32
 800619e:	f7fe f863 	bl	8004268 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 80061a2:	4aa9      	ldr	r2, [pc, #676]	@ (8006448 <statemachine+0x1af8>)
 80061a4:	2301      	movs	r3, #1
 80061a6:	ca06      	ldmia	r2, {r1, r2}
 80061a8:	48a8      	ldr	r0, [pc, #672]	@ (800644c <statemachine+0x1afc>)
 80061aa:	f7fe f837 	bl	800421c <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,36);
 80061ae:	2124      	movs	r1, #36	@ 0x24
 80061b0:	2020      	movs	r0, #32
 80061b2:	f7fe f859 	bl	8004268 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 80061b6:	4ba6      	ldr	r3, [pc, #664]	@ (8006450 <statemachine+0x1b00>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061c2:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8006454 <statemachine+0x1b04>
 80061c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80061ca:	ee16 0a90 	vmov	r0, s13
 80061ce:	f7fa f993 	bl	80004f8 <__aeabi_f2d>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	e9cd 2300 	strd	r2, r3, [sp]
 80061da:	4a9f      	ldr	r2, [pc, #636]	@ (8006458 <statemachine+0x1b08>)
 80061dc:	2132      	movs	r1, #50	@ 0x32
 80061de:	489f      	ldr	r0, [pc, #636]	@ (800645c <statemachine+0x1b0c>)
 80061e0:	f015 f980 	bl	801b4e4 <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80061e4:	4a93      	ldr	r2, [pc, #588]	@ (8006434 <statemachine+0x1ae4>)
 80061e6:	2301      	movs	r3, #1
 80061e8:	ca06      	ldmia	r2, {r1, r2}
 80061ea:	489c      	ldr	r0, [pc, #624]	@ (800645c <statemachine+0x1b0c>)
 80061ec:	f7fe f816 	bl	800421c <ssd1306_WriteString>
				 					if(BTN_A>=1){
 80061f0:	4b9b      	ldr	r3, [pc, #620]	@ (8006460 <statemachine+0x1b10>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	dd7a      	ble.n	80062ee <statemachine+0x199e>
				 						erasetime=HAL_GetTick();
 80061f8:	f001 fa14 	bl	8007624 <HAL_GetTick>
 80061fc:	4603      	mov	r3, r0
 80061fe:	461a      	mov	r2, r3
 8006200:	4b93      	ldr	r3, [pc, #588]	@ (8006450 <statemachine+0x1b00>)
 8006202:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	e03f      	b.n	800628a <statemachine+0x193a>
				 							ssd1306_Fill(Black);
 800620a:	2000      	movs	r0, #0
 800620c:	f7fd feea 	bl	8003fe4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,12);
 8006210:	210c      	movs	r1, #12
 8006212:	2020      	movs	r0, #32
 8006214:	f7fe f828 	bl	8004268 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 8006218:	4a86      	ldr	r2, [pc, #536]	@ (8006434 <statemachine+0x1ae4>)
 800621a:	2301      	movs	r3, #1
 800621c:	ca06      	ldmia	r2, {r1, r2}
 800621e:	4889      	ldr	r0, [pc, #548]	@ (8006444 <statemachine+0x1af4>)
 8006220:	f7fd fffc 	bl	800421c <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4619      	mov	r1, r3
 8006228:	488e      	ldr	r0, [pc, #568]	@ (8006464 <statemachine+0x1b14>)
 800622a:	f011 fb7e 	bl	801792a <SPIF_EraseSector>
				 							if(i>=1){
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	dd21      	ble.n	8006278 <statemachine+0x1928>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2264      	movs	r2, #100	@ 0x64
 8006238:	fb02 f303 	mul.w	r3, r2, r3
 800623c:	ee07 3a90 	vmov	s15, r3
 8006240:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006244:	4b88      	ldr	r3, [pc, #544]	@ (8006468 <statemachine+0x1b18>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	da00      	bge.n	800624e <statemachine+0x18fe>
 800624c:	330f      	adds	r3, #15
 800624e:	111b      	asrs	r3, r3, #4
 8006250:	4618      	mov	r0, r3
 8006252:	f7fa f93f 	bl	80004d4 <__aeabi_i2d>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4610      	mov	r0, r2
 800625c:	4619      	mov	r1, r3
 800625e:	f7fa fc53 	bl	8000b08 <__aeabi_d2iz>
 8006262:	ee07 0a90 	vmov	s15, r0
 8006266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800626a:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800626e:	eeb0 0a47 	vmov.f32	s0, s14
 8006272:	f7fe fb0d 	bl	8004890 <percentage>
 8006276:	e003      	b.n	8006280 <statemachine+0x1930>
				 								percentage((float) 0);
 8006278:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 800646c <statemachine+0x1b1c>
 800627c:	f7fe fb08 	bl	8004890 <percentage>
				 							ssd1306_UpdateScreen();
 8006280:	f7fd fec8 	bl	8004014 <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3301      	adds	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	4b77      	ldr	r3, [pc, #476]	@ (8006468 <statemachine+0x1b18>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	da00      	bge.n	8006294 <statemachine+0x1944>
 8006292:	330f      	adds	r3, #15
 8006294:	111b      	asrs	r3, r3, #4
 8006296:	4618      	mov	r0, r3
 8006298:	f7fa f91c 	bl	80004d4 <__aeabi_i2d>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4610      	mov	r0, r2
 80062a2:	4619      	mov	r1, r3
 80062a4:	f7fa fc30 	bl	8000b08 <__aeabi_d2iz>
 80062a8:	4602      	mov	r2, r0
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4293      	cmp	r3, r2
 80062ae:	ddac      	ble.n	800620a <statemachine+0x18ba>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 80062b0:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80062b4:	486b      	ldr	r0, [pc, #428]	@ (8006464 <statemachine+0x1b14>)
 80062b6:	f011 fb38 	bl	801792a <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 80062ba:	f001 f9b3 	bl	8007624 <HAL_GetTick>
 80062be:	4603      	mov	r3, r0
 80062c0:	4a63      	ldr	r2, [pc, #396]	@ (8006450 <statemachine+0x1b00>)
 80062c2:	6812      	ldr	r2, [r2, #0]
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	461a      	mov	r2, r3
 80062c8:	4b61      	ldr	r3, [pc, #388]	@ (8006450 <statemachine+0x1b00>)
 80062ca:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 80062cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006440 <statemachine+0x1af0>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 80062d2:	4b67      	ldr	r3, [pc, #412]	@ (8006470 <statemachine+0x1b20>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 80062d8:	4b63      	ldr	r3, [pc, #396]	@ (8006468 <statemachine+0x1b18>)
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
				 						storeindex();
 80062de:	f7fd fca5 	bl	8003c2c <storeindex>
				 						BTN_A=0;
 80062e2:	4b5f      	ldr	r3, [pc, #380]	@ (8006460 <statemachine+0x1b10>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 80062e8:	4b62      	ldr	r3, [pc, #392]	@ (8006474 <statemachine+0x1b24>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 80062ee:	4b61      	ldr	r3, [pc, #388]	@ (8006474 <statemachine+0x1b24>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f340 8123 	ble.w	800653e <statemachine+0x1bee>
					 						usbstate++;
 80062f8:	4b5f      	ldr	r3, [pc, #380]	@ (8006478 <statemachine+0x1b28>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	4b5d      	ldr	r3, [pc, #372]	@ (8006478 <statemachine+0x1b28>)
 8006302:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 8006304:	4b5b      	ldr	r3, [pc, #364]	@ (8006474 <statemachine+0x1b24>)
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 800630a:	4b55      	ldr	r3, [pc, #340]	@ (8006460 <statemachine+0x1b10>)
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]
				 			  break;
 8006310:	e115      	b.n	800653e <statemachine+0x1bee>
				 					ssd1306_Fill(Black);
 8006312:	2000      	movs	r0, #0
 8006314:	f7fd fe66 	bl	8003fe4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,20);
 8006318:	2114      	movs	r1, #20
 800631a:	2020      	movs	r0, #32
 800631c:	f7fd ffa4 	bl	8004268 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8006320:	4a44      	ldr	r2, [pc, #272]	@ (8006434 <statemachine+0x1ae4>)
 8006322:	2301      	movs	r3, #1
 8006324:	ca06      	ldmia	r2, {r1, r2}
 8006326:	4855      	ldr	r0, [pc, #340]	@ (800647c <statemachine+0x1b2c>)
 8006328:	f7fd ff78 	bl	800421c <ssd1306_WriteString>
				 					if(pagenumber>0){
 800632c:	4b4e      	ldr	r3, [pc, #312]	@ (8006468 <statemachine+0x1b18>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	f340 80b1 	ble.w	8006498 <statemachine+0x1b48>
				 					int i=0;
 8006336:	2300      	movs	r3, #0
 8006338:	60bb      	str	r3, [r7, #8]
				 					if(usbtransmiten==0){
 800633a:	4b51      	ldr	r3, [pc, #324]	@ (8006480 <statemachine+0x1b30>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d165      	bne.n	800640e <statemachine+0x1abe>
				 						while(i<pagenumber){
 8006342:	e036      	b.n	80063b2 <statemachine+0x1a62>
				 							ssd1306_Fill(Black);
 8006344:	2000      	movs	r0, #0
 8006346:	f7fd fe4d 	bl	8003fe4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,12);
 800634a:	210c      	movs	r1, #12
 800634c:	2020      	movs	r0, #32
 800634e:	f7fd ff8b 	bl	8004268 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8006352:	4a38      	ldr	r2, [pc, #224]	@ (8006434 <statemachine+0x1ae4>)
 8006354:	2301      	movs	r3, #1
 8006356:	ca06      	ldmia	r2, {r1, r2}
 8006358:	4848      	ldr	r0, [pc, #288]	@ (800647c <statemachine+0x1b2c>)
 800635a:	f7fd ff5f 	bl	800421c <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	2300      	movs	r3, #0
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006368:	4a46      	ldr	r2, [pc, #280]	@ (8006484 <statemachine+0x1b34>)
 800636a:	483e      	ldr	r0, [pc, #248]	@ (8006464 <statemachine+0x1b14>)
 800636c:	f011 fb7e 	bl	8017a6c <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 8006370:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006374:	4843      	ldr	r0, [pc, #268]	@ (8006484 <statemachine+0x1b34>)
 8006376:	f012 faf9 	bl	801896c <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2264      	movs	r2, #100	@ 0x64
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800638a:	4b37      	ldr	r3, [pc, #220]	@ (8006468 <statemachine+0x1b18>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006396:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800639a:	eeb0 0a66 	vmov.f32	s0, s13
 800639e:	f7fe fa77 	bl	8004890 <percentage>
				 							ssd1306_UpdateScreen();
 80063a2:	f7fd fe37 	bl	8004014 <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 80063a6:	207d      	movs	r0, #125	@ 0x7d
 80063a8:	f7fb fb81 	bl	8001aae <HAL_Delay>
				 							i++;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60bb      	str	r3, [r7, #8]
				 						while(i<pagenumber){
 80063b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006468 <statemachine+0x1b18>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	dbc3      	blt.n	8006344 <statemachine+0x19f4>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 80063bc:	4b2a      	ldr	r3, [pc, #168]	@ (8006468 <statemachine+0x1b18>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4619      	mov	r1, r3
 80063c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006470 <statemachine+0x1b20>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	2300      	movs	r3, #0
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006484 <statemachine+0x1b34>)
 80063d0:	4824      	ldr	r0, [pc, #144]	@ (8006464 <statemachine+0x1b14>)
 80063d2:	f011 fb4b 	bl	8017a6c <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 80063d6:	4b26      	ldr	r3, [pc, #152]	@ (8006470 <statemachine+0x1b20>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	4619      	mov	r1, r3
 80063de:	4829      	ldr	r0, [pc, #164]	@ (8006484 <statemachine+0x1b34>)
 80063e0:	f012 fac4 	bl	801896c <CDC_Transmit_FS>
				 						HAL_Delay(125);
 80063e4:	207d      	movs	r0, #125	@ 0x7d
 80063e6:	f7fb fb62 	bl	8001aae <HAL_Delay>
				 						int taillefin=0;
 80063ea:	2300      	movs	r3, #0
 80063ec:	607b      	str	r3, [r7, #4]
										taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 80063ee:	4a26      	ldr	r2, [pc, #152]	@ (8006488 <statemachine+0x1b38>)
 80063f0:	2140      	movs	r1, #64	@ 0x40
 80063f2:	4826      	ldr	r0, [pc, #152]	@ (800648c <statemachine+0x1b3c>)
 80063f4:	f015 f876 	bl	801b4e4 <sniprintf>
 80063f8:	6078      	str	r0, [r7, #4]
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	4619      	mov	r1, r3
 8006400:	4822      	ldr	r0, [pc, #136]	@ (800648c <statemachine+0x1b3c>)
 8006402:	f012 fab3 	bl	801896c <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8006406:	4b1e      	ldr	r3, [pc, #120]	@ (8006480 <statemachine+0x1b30>)
 8006408:	2201      	movs	r2, #1
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	e003      	b.n	8006416 <statemachine+0x1ac6>
				 						usbpercent=1;
 800640e:	4b20      	ldr	r3, [pc, #128]	@ (8006490 <statemachine+0x1b40>)
 8006410:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006414:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 8006416:	2000      	movs	r0, #0
 8006418:	f7fd fde4 	bl	8003fe4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,28);
 800641c:	211c      	movs	r1, #28
 800641e:	2020      	movs	r0, #32
 8006420:	f7fd ff22 	bl	8004268 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8006424:	4a08      	ldr	r2, [pc, #32]	@ (8006448 <statemachine+0x1af8>)
 8006426:	2301      	movs	r3, #1
 8006428:	ca06      	ldmia	r2, {r1, r2}
 800642a:	481a      	ldr	r0, [pc, #104]	@ (8006494 <statemachine+0x1b44>)
 800642c:	f7fd fef6 	bl	800421c <ssd1306_WriteString>
 8006430:	e049      	b.n	80064c6 <statemachine+0x1b76>
 8006432:	bf00      	nop
 8006434:	20000014 	.word	0x20000014
 8006438:	0801ffd8 	.word	0x0801ffd8
 800643c:	0801ffe0 	.word	0x0801ffe0
 8006440:	20000a74 	.word	0x20000a74
 8006444:	0801ffc8 	.word	0x0801ffc8
 8006448:	2000001c 	.word	0x2000001c
 800644c:	0801ffec 	.word	0x0801ffec
 8006450:	20000a70 	.word	0x20000a70
 8006454:	447a0000 	.word	0x447a0000
 8006458:	0801fff0 	.word	0x0801fff0
 800645c:	200009e0 	.word	0x200009e0
 8006460:	20000780 	.word	0x20000780
 8006464:	20000788 	.word	0x20000788
 8006468:	200009c0 	.word	0x200009c0
 800646c:	00000000 	.word	0x00000000
 8006470:	200009bc 	.word	0x200009bc
 8006474:	20000784 	.word	0x20000784
 8006478:	200005f4 	.word	0x200005f4
 800647c:	0801fff8 	.word	0x0801fff8
 8006480:	20000a78 	.word	0x20000a78
 8006484:	200008bc 	.word	0x200008bc
 8006488:	08020000 	.word	0x08020000
 800648c:	20000a14 	.word	0x20000a14
 8006490:	20000a7c 	.word	0x20000a7c
 8006494:	08020010 	.word	0x08020010
				 							ssd1306_Fill(Black);
 8006498:	2000      	movs	r0, #0
 800649a:	f7fd fda3 	bl	8003fe4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,20);
 800649e:	2114      	movs	r1, #20
 80064a0:	2020      	movs	r0, #32
 80064a2:	f7fd fee1 	bl	8004268 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_7x10,White);
 80064a6:	4a7b      	ldr	r2, [pc, #492]	@ (8006694 <statemachine+0x1d44>)
 80064a8:	2301      	movs	r3, #1
 80064aa:	ca06      	ldmia	r2, {r1, r2}
 80064ac:	487a      	ldr	r0, [pc, #488]	@ (8006698 <statemachine+0x1d48>)
 80064ae:	f7fd feb5 	bl	800421c <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,30);
 80064b2:	211e      	movs	r1, #30
 80064b4:	2020      	movs	r0, #32
 80064b6:	f7fd fed7 	bl	8004268 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_7x10,White);
 80064ba:	4a76      	ldr	r2, [pc, #472]	@ (8006694 <statemachine+0x1d44>)
 80064bc:	2301      	movs	r3, #1
 80064be:	ca06      	ldmia	r2, {r1, r2}
 80064c0:	4876      	ldr	r0, [pc, #472]	@ (800669c <statemachine+0x1d4c>)
 80064c2:	f7fd feab 	bl	800421c <ssd1306_WriteString>
				 					if(BTN_B>=1){
 80064c6:	4b76      	ldr	r3, [pc, #472]	@ (80066a0 <statemachine+0x1d50>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	dd11      	ble.n	80064f2 <statemachine+0x1ba2>
				 									 						usbstate--;
 80064ce:	4b75      	ldr	r3, [pc, #468]	@ (80066a4 <statemachine+0x1d54>)
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	4b73      	ldr	r3, [pc, #460]	@ (80066a4 <statemachine+0x1d54>)
 80064d8:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 80064da:	4b72      	ldr	r3, [pc, #456]	@ (80066a4 <statemachine+0x1d54>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	3b01      	subs	r3, #1
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	4b70      	ldr	r3, [pc, #448]	@ (80066a4 <statemachine+0x1d54>)
 80064e4:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 80064e6:	4b6e      	ldr	r3, [pc, #440]	@ (80066a0 <statemachine+0x1d50>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 80064ec:	4b6e      	ldr	r3, [pc, #440]	@ (80066a8 <statemachine+0x1d58>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 80064f2:	4b6d      	ldr	r3, [pc, #436]	@ (80066a8 <statemachine+0x1d58>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	dd0b      	ble.n	8006512 <statemachine+0x1bc2>
				 									  			 	state++;
 80064fa:	4b6c      	ldr	r3, [pc, #432]	@ (80066ac <statemachine+0x1d5c>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	3301      	adds	r3, #1
 8006500:	b2da      	uxtb	r2, r3
 8006502:	4b6a      	ldr	r3, [pc, #424]	@ (80066ac <statemachine+0x1d5c>)
 8006504:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8006506:	4b68      	ldr	r3, [pc, #416]	@ (80066a8 <statemachine+0x1d58>)
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 800650c:	4b64      	ldr	r3, [pc, #400]	@ (80066a0 <statemachine+0x1d50>)
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8006512:	4b67      	ldr	r3, [pc, #412]	@ (80066b0 <statemachine+0x1d60>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	dd13      	ble.n	8006542 <statemachine+0x1bf2>
				 									 									  			 	state--;
 800651a:	4b64      	ldr	r3, [pc, #400]	@ (80066ac <statemachine+0x1d5c>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	3b01      	subs	r3, #1
 8006520:	b2da      	uxtb	r2, r3
 8006522:	4b62      	ldr	r3, [pc, #392]	@ (80066ac <statemachine+0x1d5c>)
 8006524:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 8006526:	4b60      	ldr	r3, [pc, #384]	@ (80066a8 <statemachine+0x1d58>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 800652c:	4b5c      	ldr	r3, [pc, #368]	@ (80066a0 <statemachine+0x1d50>)
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 8006532:	4b5f      	ldr	r3, [pc, #380]	@ (80066b0 <statemachine+0x1d60>)
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]
				 					 break;
 8006538:	e003      	b.n	8006542 <statemachine+0x1bf2>
				 					  break;
 800653a:	bf00      	nop
 800653c:	e09f      	b.n	800667e <statemachine+0x1d2e>
				 			  break;
 800653e:	bf00      	nop
 8006540:	e09d      	b.n	800667e <statemachine+0x1d2e>
				 					 break;
 8006542:	bf00      	nop
				  break;
 8006544:	e09b      	b.n	800667e <statemachine+0x1d2e>

				  case STATE_BLUETOOTH:
					  ssd1306_Fill(Black);
 8006546:	2000      	movs	r0, #0
 8006548:	f7fd fd4c 	bl	8003fe4 <ssd1306_Fill>
					  ssd1306_SetCursor(32,12);
 800654c:	210c      	movs	r1, #12
 800654e:	2020      	movs	r0, #32
 8006550:	f7fd fe8a 	bl	8004268 <ssd1306_SetCursor>
					  PADS_continuous_read(&hi2c1);
 8006554:	4857      	ldr	r0, [pc, #348]	@ (80066b4 <statemachine+0x1d64>)
 8006556:	f7fa fd77 	bl	8001048 <PADS_continuous_read>
					  HAL_Delay(10);
 800655a:	200a      	movs	r0, #10
 800655c:	f7fb faa7 	bl	8001aae <HAL_Delay>
					  ssd1306_WriteString("altitude",Font_6x8,White);
 8006560:	4a55      	ldr	r2, [pc, #340]	@ (80066b8 <statemachine+0x1d68>)
 8006562:	2301      	movs	r3, #1
 8006564:	ca06      	ldmia	r2, {r1, r2}
 8006566:	4855      	ldr	r0, [pc, #340]	@ (80066bc <statemachine+0x1d6c>)
 8006568:	f7fd fe58 	bl	800421c <ssd1306_WriteString>
					  ssd1306_SetCursor(32,20);
 800656c:	2114      	movs	r1, #20
 800656e:	2020      	movs	r0, #32
 8006570:	f7fd fe7a 	bl	8004268 <ssd1306_SetCursor>
					  if(alt<100.0){
 8006574:	4b52      	ldr	r3, [pc, #328]	@ (80066c0 <statemachine+0x1d70>)
 8006576:	edd3 7a00 	vldr	s15, [r3]
 800657a:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80066c4 <statemachine+0x1d74>
 800657e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006586:	d50e      	bpl.n	80065a6 <statemachine+0x1c56>
					  snprintf((char  *)bufferscreen,50,"%0.2f",alt);
 8006588:	4b4d      	ldr	r3, [pc, #308]	@ (80066c0 <statemachine+0x1d70>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4618      	mov	r0, r3
 800658e:	f7f9 ffb3 	bl	80004f8 <__aeabi_f2d>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	e9cd 2300 	strd	r2, r3, [sp]
 800659a:	4a4b      	ldr	r2, [pc, #300]	@ (80066c8 <statemachine+0x1d78>)
 800659c:	2132      	movs	r1, #50	@ 0x32
 800659e:	484b      	ldr	r0, [pc, #300]	@ (80066cc <statemachine+0x1d7c>)
 80065a0:	f014 ffa0 	bl	801b4e4 <sniprintf>
 80065a4:	e00d      	b.n	80065c2 <statemachine+0x1c72>

					  }
					  else{

						snprintf((char  *)bufferscreen,50,"%0.1f",alt);
 80065a6:	4b46      	ldr	r3, [pc, #280]	@ (80066c0 <statemachine+0x1d70>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7f9 ffa4 	bl	80004f8 <__aeabi_f2d>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	e9cd 2300 	strd	r2, r3, [sp]
 80065b8:	4a45      	ldr	r2, [pc, #276]	@ (80066d0 <statemachine+0x1d80>)
 80065ba:	2132      	movs	r1, #50	@ 0x32
 80065bc:	4843      	ldr	r0, [pc, #268]	@ (80066cc <statemachine+0x1d7c>)
 80065be:	f014 ff91 	bl	801b4e4 <sniprintf>

					  }
					  ssd1306_WriteString((char  *)bufferscreen, Font_11x18, White);
 80065c2:	4a44      	ldr	r2, [pc, #272]	@ (80066d4 <statemachine+0x1d84>)
 80065c4:	2301      	movs	r3, #1
 80065c6:	ca06      	ldmia	r2, {r1, r2}
 80065c8:	4840      	ldr	r0, [pc, #256]	@ (80066cc <statemachine+0x1d7c>)
 80065ca:	f7fd fe27 	bl	800421c <ssd1306_WriteString>

					  ssd1306_SetCursor(32,44);
 80065ce:	212c      	movs	r1, #44	@ 0x2c
 80065d0:	2020      	movs	r0, #32
 80065d2:	f7fd fe49 	bl	8004268 <ssd1306_SetCursor>
					ssd1306_WriteString("altitude(m)", Font_6x8, White);
 80065d6:	4a38      	ldr	r2, [pc, #224]	@ (80066b8 <statemachine+0x1d68>)
 80065d8:	2301      	movs	r3, #1
 80065da:	ca06      	ldmia	r2, {r1, r2}
 80065dc:	483e      	ldr	r0, [pc, #248]	@ (80066d8 <statemachine+0x1d88>)
 80065de:	f7fd fe1d 	bl	800421c <ssd1306_WriteString>




					  if(BTN_B>=1){
 80065e2:	4b2f      	ldr	r3, [pc, #188]	@ (80066a0 <statemachine+0x1d50>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	dd05      	ble.n	80065f6 <statemachine+0x1ca6>
						  BTN_B=0;
 80065ea:	4b2d      	ldr	r3, [pc, #180]	@ (80066a0 <statemachine+0x1d50>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
						  BTN_B_LONG=0;
 80065f0:	4b3a      	ldr	r3, [pc, #232]	@ (80066dc <statemachine+0x1d8c>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
					  }


				  if(BTN_A>=1){
 80065f6:	4b2c      	ldr	r3, [pc, #176]	@ (80066a8 <statemachine+0x1d58>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	dd23      	ble.n	8006646 <statemachine+0x1cf6>
						state--;
 80065fe:	4b2b      	ldr	r3, [pc, #172]	@ (80066ac <statemachine+0x1d5c>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	3b01      	subs	r3, #1
 8006604:	b2da      	uxtb	r2, r3
 8006606:	4b29      	ldr	r3, [pc, #164]	@ (80066ac <statemachine+0x1d5c>)
 8006608:	701a      	strb	r2, [r3, #0]
						state--;
 800660a:	4b28      	ldr	r3, [pc, #160]	@ (80066ac <statemachine+0x1d5c>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	3b01      	subs	r3, #1
 8006610:	b2da      	uxtb	r2, r3
 8006612:	4b26      	ldr	r3, [pc, #152]	@ (80066ac <statemachine+0x1d5c>)
 8006614:	701a      	strb	r2, [r3, #0]
						state--;
 8006616:	4b25      	ldr	r3, [pc, #148]	@ (80066ac <statemachine+0x1d5c>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	3b01      	subs	r3, #1
 800661c:	b2da      	uxtb	r2, r3
 800661e:	4b23      	ldr	r3, [pc, #140]	@ (80066ac <statemachine+0x1d5c>)
 8006620:	701a      	strb	r2, [r3, #0]
						state--;
 8006622:	4b22      	ldr	r3, [pc, #136]	@ (80066ac <statemachine+0x1d5c>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	3b01      	subs	r3, #1
 8006628:	b2da      	uxtb	r2, r3
 800662a:	4b20      	ldr	r3, [pc, #128]	@ (80066ac <statemachine+0x1d5c>)
 800662c:	701a      	strb	r2, [r3, #0]
						state--;
 800662e:	4b1f      	ldr	r3, [pc, #124]	@ (80066ac <statemachine+0x1d5c>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	3b01      	subs	r3, #1
 8006634:	b2da      	uxtb	r2, r3
 8006636:	4b1d      	ldr	r3, [pc, #116]	@ (80066ac <statemachine+0x1d5c>)
 8006638:	701a      	strb	r2, [r3, #0]
						BTN_A=0;
 800663a:	4b1b      	ldr	r3, [pc, #108]	@ (80066a8 <statemachine+0x1d58>)
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
						BTN_B=0;
 8006640:	4b17      	ldr	r3, [pc, #92]	@ (80066a0 <statemachine+0x1d50>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
							}
					if(BTN_A_LONG>=1){
 8006646:	4b1a      	ldr	r3, [pc, #104]	@ (80066b0 <statemachine+0x1d60>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	dd19      	ble.n	8006682 <statemachine+0x1d32>
							state--;
 800664e:	4b17      	ldr	r3, [pc, #92]	@ (80066ac <statemachine+0x1d5c>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	3b01      	subs	r3, #1
 8006654:	b2da      	uxtb	r2, r3
 8006656:	4b15      	ldr	r3, [pc, #84]	@ (80066ac <statemachine+0x1d5c>)
 8006658:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 800665a:	4b13      	ldr	r3, [pc, #76]	@ (80066a8 <statemachine+0x1d58>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8006660:	4b0f      	ldr	r3, [pc, #60]	@ (80066a0 <statemachine+0x1d50>)
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
							BTN_A_LONG=0;
 8006666:	4b12      	ldr	r3, [pc, #72]	@ (80066b0 <statemachine+0x1d60>)
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]
							}



					  break;
 800666c:	e009      	b.n	8006682 <statemachine+0x1d32>
				  									 	 break;
 800666e:	bf00      	nop
 8006670:	e008      	b.n	8006684 <statemachine+0x1d34>
					  break;
 8006672:	bf00      	nop
 8006674:	e006      	b.n	8006684 <statemachine+0x1d34>
			  break;
 8006676:	bf00      	nop
 8006678:	e004      	b.n	8006684 <statemachine+0x1d34>
			  break;
 800667a:	bf00      	nop
 800667c:	e002      	b.n	8006684 <statemachine+0x1d34>
				  break;
 800667e:	bf00      	nop
 8006680:	e000      	b.n	8006684 <statemachine+0x1d34>
					  break;
 8006682:	bf00      	nop




	}
return ;
 8006684:	bf00      	nop
 8006686:	bf00      	nop
}
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	ecbd 8b02 	vpop	{d8}
 8006690:	bdb0      	pop	{r4, r5, r7, pc}
 8006692:	bf00      	nop
 8006694:	2000001c 	.word	0x2000001c
 8006698:	0801fff8 	.word	0x0801fff8
 800669c:	08020018 	.word	0x08020018
 80066a0:	20000784 	.word	0x20000784
 80066a4:	200005f4 	.word	0x200005f4
 80066a8:	20000780 	.word	0x20000780
 80066ac:	200005f0 	.word	0x200005f0
 80066b0:	20000ab8 	.word	0x20000ab8
 80066b4:	2000050c 	.word	0x2000050c
 80066b8:	20000014 	.word	0x20000014
 80066bc:	08020020 	.word	0x08020020
 80066c0:	2000039c 	.word	0x2000039c
 80066c4:	42c80000 	.word	0x42c80000
 80066c8:	0802002c 	.word	0x0802002c
 80066cc:	200009e0 	.word	0x200009e0
 80066d0:	0801fe30 	.word	0x0801fe30
 80066d4:	20000024 	.word	0x20000024
 80066d8:	08020034 	.word	0x08020034
 80066dc:	20000ab4 	.word	0x20000ab4

080066e0 <LL_AHB3_GRP1_EnableClock>:
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80066e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80066f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4013      	ands	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006704:	68fb      	ldr	r3, [r7, #12]
}
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	af00      	add	r7, sp, #0



  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8006716:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800671a:	f7ff ffe1 	bl	80066e0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800671e:	2200      	movs	r2, #0
 8006720:	2100      	movs	r1, #0
 8006722:	202e      	movs	r0, #46	@ 0x2e
 8006724:	f002 f95d 	bl	80089e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006728:	202e      	movs	r0, #46	@ 0x2e
 800672a:	f002 f974 	bl	8008a16 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800672e:	bf00      	nop
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   ssd1306_SetCursor(32, 20);
 8006738:	2114      	movs	r1, #20
 800673a:	2020      	movs	r0, #32
 800673c:	f7fd fd94 	bl	8004268 <ssd1306_SetCursor>
	   	  ssd1306_WriteString("NMI", Font_7x10, White);
 8006740:	4a04      	ldr	r2, [pc, #16]	@ (8006754 <NMI_Handler+0x20>)
 8006742:	2301      	movs	r3, #1
 8006744:	ca06      	ldmia	r2, {r1, r2}
 8006746:	4804      	ldr	r0, [pc, #16]	@ (8006758 <NMI_Handler+0x24>)
 8006748:	f7fd fd68 	bl	800421c <ssd1306_WriteString>
	   	  ssd1306_UpdateScreen();
 800674c:	f7fd fc62 	bl	8004014 <ssd1306_UpdateScreen>
	   ssd1306_SetCursor(32, 20);
 8006750:	bf00      	nop
 8006752:	e7f1      	b.n	8006738 <NMI_Handler+0x4>
 8006754:	2000001c 	.word	0x2000001c
 8006758:	08020040 	.word	0x08020040

0800675c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006760:	2114      	movs	r1, #20
 8006762:	2020      	movs	r0, #32
 8006764:	f7fd fd80 	bl	8004268 <ssd1306_SetCursor>
	  ssd1306_WriteString("hardfault", Font_7x10, White);
 8006768:	4a04      	ldr	r2, [pc, #16]	@ (800677c <HardFault_Handler+0x20>)
 800676a:	2301      	movs	r3, #1
 800676c:	ca06      	ldmia	r2, {r1, r2}
 800676e:	4804      	ldr	r0, [pc, #16]	@ (8006780 <HardFault_Handler+0x24>)
 8006770:	f7fd fd54 	bl	800421c <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8006774:	f7fd fc4e 	bl	8004014 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006778:	bf00      	nop
 800677a:	e7f1      	b.n	8006760 <HardFault_Handler+0x4>
 800677c:	2000001c 	.word	0x2000001c
 8006780:	08020044 	.word	0x08020044

08006784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006788:	2114      	movs	r1, #20
 800678a:	2020      	movs	r0, #32
 800678c:	f7fd fd6c 	bl	8004268 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("mem", Font_7x10, White);
 8006790:	4a04      	ldr	r2, [pc, #16]	@ (80067a4 <MemManage_Handler+0x20>)
 8006792:	2301      	movs	r3, #1
 8006794:	ca06      	ldmia	r2, {r1, r2}
 8006796:	4804      	ldr	r0, [pc, #16]	@ (80067a8 <MemManage_Handler+0x24>)
 8006798:	f7fd fd40 	bl	800421c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 800679c:	f7fd fc3a 	bl	8004014 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80067a0:	bf00      	nop
 80067a2:	e7f1      	b.n	8006788 <MemManage_Handler+0x4>
 80067a4:	2000001c 	.word	0x2000001c
 80067a8:	08020050 	.word	0x08020050

080067ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80067b0:	2114      	movs	r1, #20
 80067b2:	2020      	movs	r0, #32
 80067b4:	f7fd fd58 	bl	8004268 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("bus", Font_7x10, White);
 80067b8:	4a04      	ldr	r2, [pc, #16]	@ (80067cc <BusFault_Handler+0x20>)
 80067ba:	2301      	movs	r3, #1
 80067bc:	ca06      	ldmia	r2, {r1, r2}
 80067be:	4804      	ldr	r0, [pc, #16]	@ (80067d0 <BusFault_Handler+0x24>)
 80067c0:	f7fd fd2c 	bl	800421c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 80067c4:	f7fd fc26 	bl	8004014 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80067c8:	bf00      	nop
 80067ca:	e7f1      	b.n	80067b0 <BusFault_Handler+0x4>
 80067cc:	2000001c 	.word	0x2000001c
 80067d0:	08020054 	.word	0x08020054

080067d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80067d8:	2114      	movs	r1, #20
 80067da:	2020      	movs	r0, #32
 80067dc:	f7fd fd44 	bl	8004268 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("usage", Font_7x10, White);
 80067e0:	4a04      	ldr	r2, [pc, #16]	@ (80067f4 <UsageFault_Handler+0x20>)
 80067e2:	2301      	movs	r3, #1
 80067e4:	ca06      	ldmia	r2, {r1, r2}
 80067e6:	4804      	ldr	r0, [pc, #16]	@ (80067f8 <UsageFault_Handler+0x24>)
 80067e8:	f7fd fd18 	bl	800421c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 80067ec:	f7fd fc12 	bl	8004014 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80067f0:	bf00      	nop
 80067f2:	e7f1      	b.n	80067d8 <UsageFault_Handler+0x4>
 80067f4:	2000001c 	.word	0x2000001c
 80067f8:	08020058 	.word	0x08020058

080067fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006800:	bf00      	nop
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800680a:	b480      	push	{r7}
 800680c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800680e:	bf00      	nop
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800681c:	bf00      	nop
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800682a:	f000 fee7 	bl	80075fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800682e:	bf00      	nop
 8006830:	bd80      	pop	{r7, pc}

08006832 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8006836:	f7fb fda5 	bl	8002384 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800683a:	bf00      	nop
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006844:	4802      	ldr	r0, [pc, #8]	@ (8006850 <DMA1_Channel1_IRQHandler+0x10>)
 8006846:	f002 fb0c 	bl	8008e62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800684a:	bf00      	nop
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	2000040c 	.word	0x2000040c

08006854 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8006858:	4802      	ldr	r0, [pc, #8]	@ (8006864 <DMA1_Channel2_IRQHandler+0x10>)
 800685a:	f002 fb02 	bl	8008e62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800685e:	bf00      	nop
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20001314 	.word	0x20001314

08006868 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800686c:	4802      	ldr	r0, [pc, #8]	@ (8006878 <USB_LP_IRQHandler+0x10>)
 800686e:	f003 fdf7 	bl	800a460 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8006872:	bf00      	nop
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20002964 	.word	0x20002964

0800687c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006880:	4806      	ldr	r0, [pc, #24]	@ (800689c <TIM1_UP_TIM16_IRQHandler+0x20>)
 8006882:	f008 fc84 	bl	800f18e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  updatedate();
 8006886:	f000 fa7f 	bl	8006d88 <updatedate>
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 800688a:	2101      	movs	r1, #1
 800688c:	4804      	ldr	r0, [pc, #16]	@ (80068a0 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800688e:	f002 fde5 	bl	800945c <HAL_GPIO_TogglePin>
  bluetoothsend=1;
 8006892:	4b04      	ldr	r3, [pc, #16]	@ (80068a4 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8006894:	2201      	movs	r2, #1
 8006896:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006898:	bf00      	nop
 800689a:	bd80      	pop	{r7, pc}
 800689c:	20001154 	.word	0x20001154
 80068a0:	48000400 	.word	0x48000400
 80068a4:	20000abc 	.word	0x20000abc

080068a8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80068ac:	4805      	ldr	r0, [pc, #20]	@ (80068c4 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 80068ae:	f008 fc6e 	bl	800f18e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 80068b2:	2102      	movs	r1, #2
 80068b4:	4804      	ldr	r0, [pc, #16]	@ (80068c8 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>)
 80068b6:	f002 fdd1 	bl	800945c <HAL_GPIO_TogglePin>
  enablewrite=1;
 80068ba:	4b04      	ldr	r3, [pc, #16]	@ (80068cc <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80068c0:	bf00      	nop
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	200011a0 	.word	0x200011a0
 80068c8:	48000400 	.word	0x48000400
 80068cc:	20000a98 	.word	0x20000a98

080068d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80068d4:	4802      	ldr	r0, [pc, #8]	@ (80068e0 <SPI1_IRQHandler+0x10>)
 80068d6:	f008 f86f 	bl	800e9b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80068da:	bf00      	nop
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000c98 	.word	0x20000c98

080068e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80068e8:	4802      	ldr	r0, [pc, #8]	@ (80068f4 <USART1_IRQHandler+0x10>)
 80068ea:	f009 f9a7 	bl	800fc3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80068ee:	bf00      	nop
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20001280 	.word	0x20001280

080068f8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80068fc:	4802      	ldr	r0, [pc, #8]	@ (8006908 <LPUART1_IRQHandler+0x10>)
 80068fe:	f009 f99d 	bl	800fc3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006902:	bf00      	nop
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	200011ec 	.word	0x200011ec

0800690c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8006910:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006914:	f002 fdbc 	bl	8009490 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006918:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800691c:	f002 fdb8 	bl	8009490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006920:	bf00      	nop
 8006922:	bd80      	pop	{r7, pc}

08006924 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8006928:	f011 fe0e 	bl	8018548 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800692c:	bf00      	nop
 800692e:	bd80      	pop	{r7, pc}

08006930 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8006934:	f011 fe3e 	bl	80185b4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8006938:	bf00      	nop
 800693a:	bd80      	pop	{r7, pc}

0800693c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8006940:	f002 fdbe 	bl	80094c0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8006944:	bf00      	nop
 8006946:	bd80      	pop	{r7, pc}

08006948 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  return 1;
 800694c:	2301      	movs	r3, #1
}
 800694e:	4618      	mov	r0, r3
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <_kill>:

int _kill(int pid, int sig)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006962:	f014 ff3d 	bl	801b7e0 <__errno>
 8006966:	4603      	mov	r3, r0
 8006968:	2216      	movs	r2, #22
 800696a:	601a      	str	r2, [r3, #0]
  return -1;
 800696c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <_exit>:

void _exit (int status)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006980:	f04f 31ff 	mov.w	r1, #4294967295
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff ffe7 	bl	8006958 <_kill>
  while (1) {}    /* Make sure we hang here */
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <_exit+0x12>

0800698e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b086      	sub	sp, #24
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800699a:	2300      	movs	r3, #0
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	e00a      	b.n	80069b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80069a0:	f3af 8000 	nop.w
 80069a4:	4601      	mov	r1, r0
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	60ba      	str	r2, [r7, #8]
 80069ac:	b2ca      	uxtb	r2, r1
 80069ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	3301      	adds	r3, #1
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	dbf0      	blt.n	80069a0 <_read+0x12>
  }

  return len;
 80069be:	687b      	ldr	r3, [r7, #4]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	e009      	b.n	80069ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	60ba      	str	r2, [r7, #8]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	3301      	adds	r3, #1
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	dbf1      	blt.n	80069da <_write+0x12>
  }
  return len;
 80069f6:	687b      	ldr	r3, [r7, #4]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <_close>:

int _close(int file)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006a08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006a28:	605a      	str	r2, [r3, #4]
  return 0;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <_isatty>:

int _isatty(int file)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006a40:	2301      	movs	r3, #1
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a70:	4a14      	ldr	r2, [pc, #80]	@ (8006ac4 <_sbrk+0x5c>)
 8006a72:	4b15      	ldr	r3, [pc, #84]	@ (8006ac8 <_sbrk+0x60>)
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a7c:	4b13      	ldr	r3, [pc, #76]	@ (8006acc <_sbrk+0x64>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d102      	bne.n	8006a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a84:	4b11      	ldr	r3, [pc, #68]	@ (8006acc <_sbrk+0x64>)
 8006a86:	4a12      	ldr	r2, [pc, #72]	@ (8006ad0 <_sbrk+0x68>)
 8006a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a8a:	4b10      	ldr	r3, [pc, #64]	@ (8006acc <_sbrk+0x64>)
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4413      	add	r3, r2
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d207      	bcs.n	8006aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a98:	f014 fea2 	bl	801b7e0 <__errno>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	220c      	movs	r2, #12
 8006aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa6:	e009      	b.n	8006abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006aa8:	4b08      	ldr	r3, [pc, #32]	@ (8006acc <_sbrk+0x64>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006aae:	4b07      	ldr	r3, [pc, #28]	@ (8006acc <_sbrk+0x64>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	4a05      	ldr	r2, [pc, #20]	@ (8006acc <_sbrk+0x64>)
 8006ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006aba:	68fb      	ldr	r3, [r7, #12]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	20030000 	.word	0x20030000
 8006ac8:	00000400 	.word	0x00000400
 8006acc:	20001104 	.word	0x20001104
 8006ad0:	20003050 	.word	0x20003050

08006ad4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8006ad8:	4b24      	ldr	r3, [pc, #144]	@ (8006b6c <SystemInit+0x98>)
 8006ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ade:	4a23      	ldr	r2, [pc, #140]	@ (8006b6c <SystemInit+0x98>)
 8006ae0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ae4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006af2:	f043 0301 	orr.w	r3, r3, #1
 8006af6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8006af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006afc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8006b00:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8006b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b0c:	4b18      	ldr	r3, [pc, #96]	@ (8006b70 <SystemInit+0x9c>)
 8006b0e:	4013      	ands	r3, r2
 8006b10:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8006b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b1e:	f023 0305 	bic.w	r3, r3, #5
 8006b22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b32:	f023 0301 	bic.w	r3, r3, #1
 8006b36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8006b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8006b74 <SystemInit+0xa0>)
 8006b40:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8006b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b46:	4a0b      	ldr	r2, [pc, #44]	@ (8006b74 <SystemInit+0xa0>)
 8006b48:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006b5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b5e:	2200      	movs	r2, #0
 8006b60:	619a      	str	r2, [r3, #24]
}
 8006b62:	bf00      	nop
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	e000ed00 	.word	0xe000ed00
 8006b70:	faf6fefb 	.word	0xfaf6fefb
 8006b74:	22041000 	.word	0x22041000

08006b78 <LL_APB1_GRP1_EnableClock>:
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006b86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006b90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
}
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <LL_APB2_GRP1_EnableClock>:
{
 8006baa:	b480      	push	{r7}
 8006bac:	b085      	sub	sp, #20
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bb6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006bb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bc6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006bce:	68fb      	ldr	r3, [r7, #12]
}
 8006bd0:	bf00      	nop
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006be2:	f107 0310 	add.w	r3, r7, #16
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	605a      	str	r2, [r3, #4]
 8006bec:	609a      	str	r2, [r3, #8]
 8006bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006bf0:	1d3b      	adds	r3, r7, #4
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	605a      	str	r2, [r3, #4]
 8006bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8006c74 <MX_TIM2_Init+0x98>)
 8006bfc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006c00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8006c02:	4b1c      	ldr	r3, [pc, #112]	@ (8006c74 <MX_TIM2_Init+0x98>)
 8006c04:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8006c08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8006c74 <MX_TIM2_Init+0x98>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8006c10:	4b18      	ldr	r3, [pc, #96]	@ (8006c74 <MX_TIM2_Init+0x98>)
 8006c12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006c16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c18:	4b16      	ldr	r3, [pc, #88]	@ (8006c74 <MX_TIM2_Init+0x98>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c1e:	4b15      	ldr	r3, [pc, #84]	@ (8006c74 <MX_TIM2_Init+0x98>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006c24:	4813      	ldr	r0, [pc, #76]	@ (8006c74 <MX_TIM2_Init+0x98>)
 8006c26:	f008 f997 	bl	800ef58 <HAL_TIM_Base_Init>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8006c30:	f7fc f9e6 	bl	8003000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006c34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006c3a:	f107 0310 	add.w	r3, r7, #16
 8006c3e:	4619      	mov	r1, r3
 8006c40:	480c      	ldr	r0, [pc, #48]	@ (8006c74 <MX_TIM2_Init+0x98>)
 8006c42:	f008 fbab 	bl	800f39c <HAL_TIM_ConfigClockSource>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8006c4c:	f7fc f9d8 	bl	8003000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006c50:	2320      	movs	r3, #32
 8006c52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006c58:	1d3b      	adds	r3, r7, #4
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4805      	ldr	r0, [pc, #20]	@ (8006c74 <MX_TIM2_Init+0x98>)
 8006c5e:	f008 fda5 	bl	800f7ac <HAL_TIMEx_MasterConfigSynchronization>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8006c68:	f7fc f9ca 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006c6c:	bf00      	nop
 8006c6e:	3720      	adds	r7, #32
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20001108 	.word	0x20001108

08006c78 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006c7c:	4b10      	ldr	r3, [pc, #64]	@ (8006cc0 <MX_TIM16_Init+0x48>)
 8006c7e:	4a11      	ldr	r2, [pc, #68]	@ (8006cc4 <MX_TIM16_Init+0x4c>)
 8006c80:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 8006c82:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc0 <MX_TIM16_Init+0x48>)
 8006c84:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006c88:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc0 <MX_TIM16_Init+0x48>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8006c90:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc0 <MX_TIM16_Init+0x48>)
 8006c92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006c96:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c98:	4b09      	ldr	r3, [pc, #36]	@ (8006cc0 <MX_TIM16_Init+0x48>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006c9e:	4b08      	ldr	r3, [pc, #32]	@ (8006cc0 <MX_TIM16_Init+0x48>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ca4:	4b06      	ldr	r3, [pc, #24]	@ (8006cc0 <MX_TIM16_Init+0x48>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006caa:	4805      	ldr	r0, [pc, #20]	@ (8006cc0 <MX_TIM16_Init+0x48>)
 8006cac:	f008 f954 	bl	800ef58 <HAL_TIM_Base_Init>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8006cb6:	f7fc f9a3 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006cba:	bf00      	nop
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20001154 	.word	0x20001154
 8006cc4:	40014400 	.word	0x40014400

08006cc8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8006ccc:	4b10      	ldr	r3, [pc, #64]	@ (8006d10 <MX_TIM17_Init+0x48>)
 8006cce:	4a11      	ldr	r2, [pc, #68]	@ (8006d14 <MX_TIM17_Init+0x4c>)
 8006cd0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006d10 <MX_TIM17_Init+0x48>)
 8006cd4:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006cd8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cda:	4b0d      	ldr	r3, [pc, #52]	@ (8006d10 <MX_TIM17_Init+0x48>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8006d10 <MX_TIM17_Init+0x48>)
 8006ce2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006ce6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ce8:	4b09      	ldr	r3, [pc, #36]	@ (8006d10 <MX_TIM17_Init+0x48>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006cee:	4b08      	ldr	r3, [pc, #32]	@ (8006d10 <MX_TIM17_Init+0x48>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006cf4:	4b06      	ldr	r3, [pc, #24]	@ (8006d10 <MX_TIM17_Init+0x48>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8006cfa:	4805      	ldr	r0, [pc, #20]	@ (8006d10 <MX_TIM17_Init+0x48>)
 8006cfc:	f008 f92c 	bl	800ef58 <HAL_TIM_Base_Init>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8006d06:	f7fc f97b 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8006d0a:	bf00      	nop
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	200011a0 	.word	0x200011a0
 8006d14:	40014800 	.word	0x40014800

08006d18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d28:	d103      	bne.n	8006d32 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	f7ff ff24 	bl	8006b78 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8006d30:	e022      	b.n	8006d78 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM16)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a12      	ldr	r2, [pc, #72]	@ (8006d80 <HAL_TIM_Base_MspInit+0x68>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d10c      	bne.n	8006d56 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006d3c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8006d40:	f7ff ff33 	bl	8006baa <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 8006d44:	2200      	movs	r2, #0
 8006d46:	2104      	movs	r1, #4
 8006d48:	2019      	movs	r0, #25
 8006d4a:	f001 fe4a 	bl	80089e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006d4e:	2019      	movs	r0, #25
 8006d50:	f001 fe61 	bl	8008a16 <HAL_NVIC_EnableIRQ>
}
 8006d54:	e010      	b.n	8006d78 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM17)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d84 <HAL_TIM_Base_MspInit+0x6c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d10b      	bne.n	8006d78 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006d60:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8006d64:	f7ff ff21 	bl	8006baa <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2102      	movs	r1, #2
 8006d6c:	201a      	movs	r0, #26
 8006d6e:	f001 fe38 	bl	80089e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8006d72:	201a      	movs	r0, #26
 8006d74:	f001 fe4f 	bl	8008a16 <HAL_NVIC_EnableIRQ>
}
 8006d78:	bf00      	nop
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40014400 	.word	0x40014400
 8006d84:	40014800 	.word	0x40014800

08006d88 <updatedate>:
  /* USER CODE END TIM17_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0

	SEC+=1;
 8006d8c:	4b98      	ldr	r3, [pc, #608]	@ (8006ff0 <updatedate+0x268>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	3301      	adds	r3, #1
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	4b96      	ldr	r3, [pc, #600]	@ (8006ff0 <updatedate+0x268>)
 8006d96:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8006d98:	4b95      	ldr	r3, [pc, #596]	@ (8006ff0 <updatedate+0x268>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b3b      	cmp	r3, #59	@ 0x3b
 8006d9e:	d908      	bls.n	8006db2 <updatedate+0x2a>
		SEC=0;
 8006da0:	4b93      	ldr	r3, [pc, #588]	@ (8006ff0 <updatedate+0x268>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 8006da6:	4b93      	ldr	r3, [pc, #588]	@ (8006ff4 <updatedate+0x26c>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	3301      	adds	r3, #1
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	4b91      	ldr	r3, [pc, #580]	@ (8006ff4 <updatedate+0x26c>)
 8006db0:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 8006db2:	4b90      	ldr	r3, [pc, #576]	@ (8006ff4 <updatedate+0x26c>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b3b      	cmp	r3, #59	@ 0x3b
 8006db8:	d908      	bls.n	8006dcc <updatedate+0x44>

		MINUTE=0;
 8006dba:	4b8e      	ldr	r3, [pc, #568]	@ (8006ff4 <updatedate+0x26c>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
		HR+=1;
 8006dc0:	4b8d      	ldr	r3, [pc, #564]	@ (8006ff8 <updatedate+0x270>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	4b8b      	ldr	r3, [pc, #556]	@ (8006ff8 <updatedate+0x270>)
 8006dca:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 8006dcc:	4b8a      	ldr	r3, [pc, #552]	@ (8006ff8 <updatedate+0x270>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	2b17      	cmp	r3, #23
 8006dd2:	d908      	bls.n	8006de6 <updatedate+0x5e>
		HR=0;
 8006dd4:	4b88      	ldr	r3, [pc, #544]	@ (8006ff8 <updatedate+0x270>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 8006dda:	4b88      	ldr	r3, [pc, #544]	@ (8006ffc <updatedate+0x274>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	3301      	adds	r3, #1
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	4b86      	ldr	r3, [pc, #536]	@ (8006ffc <updatedate+0x274>)
 8006de4:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 8006de6:	4b86      	ldr	r3, [pc, #536]	@ (8007000 <updatedate+0x278>)
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b0b      	cmp	r3, #11
 8006dec:	f200 8137 	bhi.w	800705e <updatedate+0x2d6>
 8006df0:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <updatedate+0x70>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e29 	.word	0x08006e29
 8006dfc:	08006e53 	.word	0x08006e53
 8006e00:	08006e7d 	.word	0x08006e7d
 8006e04:	08006ea7 	.word	0x08006ea7
 8006e08:	08006ed1 	.word	0x08006ed1
 8006e0c:	08006efb 	.word	0x08006efb
 8006e10:	08006f25 	.word	0x08006f25
 8006e14:	08006f4f 	.word	0x08006f4f
 8006e18:	08006f77 	.word	0x08006f77
 8006e1c:	08006f9f 	.word	0x08006f9f
 8006e20:	08006fc7 	.word	0x08006fc7
 8006e24:	08007009 	.word	0x08007009

	case JANVIER:
		if(JOURS>31){
 8006e28:	4b74      	ldr	r3, [pc, #464]	@ (8006ffc <updatedate+0x274>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b1f      	cmp	r3, #31
 8006e2e:	f240 80ff 	bls.w	8007030 <updatedate+0x2a8>
			JOURS=1;
 8006e32:	4b72      	ldr	r3, [pc, #456]	@ (8006ffc <updatedate+0x274>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	701a      	strb	r2, [r3, #0]
			mois++;
 8006e38:	4b71      	ldr	r3, [pc, #452]	@ (8007000 <updatedate+0x278>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	4b6f      	ldr	r3, [pc, #444]	@ (8007000 <updatedate+0x278>)
 8006e42:	701a      	strb	r2, [r3, #0]
			MOIS++;
 8006e44:	4b6f      	ldr	r3, [pc, #444]	@ (8007004 <updatedate+0x27c>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	4b6d      	ldr	r3, [pc, #436]	@ (8007004 <updatedate+0x27c>)
 8006e4e:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006e50:	e0ee      	b.n	8007030 <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 8006e52:	4b6a      	ldr	r3, [pc, #424]	@ (8006ffc <updatedate+0x274>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b1d      	cmp	r3, #29
 8006e58:	f240 80ec 	bls.w	8007034 <updatedate+0x2ac>
					JOURS=1;
 8006e5c:	4b67      	ldr	r3, [pc, #412]	@ (8006ffc <updatedate+0x274>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	701a      	strb	r2, [r3, #0]
					mois++;
 8006e62:	4b67      	ldr	r3, [pc, #412]	@ (8007000 <updatedate+0x278>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	3301      	adds	r3, #1
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	4b65      	ldr	r3, [pc, #404]	@ (8007000 <updatedate+0x278>)
 8006e6c:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006e6e:	4b65      	ldr	r3, [pc, #404]	@ (8007004 <updatedate+0x27c>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	3301      	adds	r3, #1
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	4b63      	ldr	r3, [pc, #396]	@ (8007004 <updatedate+0x27c>)
 8006e78:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006e7a:	e0db      	b.n	8007034 <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 8006e7c:	4b5f      	ldr	r3, [pc, #380]	@ (8006ffc <updatedate+0x274>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b1f      	cmp	r3, #31
 8006e82:	f240 80d9 	bls.w	8007038 <updatedate+0x2b0>
					JOURS=1;
 8006e86:	4b5d      	ldr	r3, [pc, #372]	@ (8006ffc <updatedate+0x274>)
 8006e88:	2201      	movs	r2, #1
 8006e8a:	701a      	strb	r2, [r3, #0]
					mois++;
 8006e8c:	4b5c      	ldr	r3, [pc, #368]	@ (8007000 <updatedate+0x278>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	3301      	adds	r3, #1
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	4b5a      	ldr	r3, [pc, #360]	@ (8007000 <updatedate+0x278>)
 8006e96:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006e98:	4b5a      	ldr	r3, [pc, #360]	@ (8007004 <updatedate+0x27c>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	4b58      	ldr	r3, [pc, #352]	@ (8007004 <updatedate+0x27c>)
 8006ea2:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006ea4:	e0c8      	b.n	8007038 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8006ea6:	4b55      	ldr	r3, [pc, #340]	@ (8006ffc <updatedate+0x274>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	2b1e      	cmp	r3, #30
 8006eac:	f240 80c6 	bls.w	800703c <updatedate+0x2b4>
					JOURS=1;
 8006eb0:	4b52      	ldr	r3, [pc, #328]	@ (8006ffc <updatedate+0x274>)
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	701a      	strb	r2, [r3, #0]
					mois++;
 8006eb6:	4b52      	ldr	r3, [pc, #328]	@ (8007000 <updatedate+0x278>)
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	4b50      	ldr	r3, [pc, #320]	@ (8007000 <updatedate+0x278>)
 8006ec0:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006ec2:	4b50      	ldr	r3, [pc, #320]	@ (8007004 <updatedate+0x27c>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	4b4e      	ldr	r3, [pc, #312]	@ (8007004 <updatedate+0x27c>)
 8006ecc:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006ece:	e0b5      	b.n	800703c <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 8006ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8006ffc <updatedate+0x274>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	2b1f      	cmp	r3, #31
 8006ed6:	f240 80b3 	bls.w	8007040 <updatedate+0x2b8>
					JOURS=1;
 8006eda:	4b48      	ldr	r3, [pc, #288]	@ (8006ffc <updatedate+0x274>)
 8006edc:	2201      	movs	r2, #1
 8006ede:	701a      	strb	r2, [r3, #0]
					mois++;
 8006ee0:	4b47      	ldr	r3, [pc, #284]	@ (8007000 <updatedate+0x278>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	4b45      	ldr	r3, [pc, #276]	@ (8007000 <updatedate+0x278>)
 8006eea:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006eec:	4b45      	ldr	r3, [pc, #276]	@ (8007004 <updatedate+0x27c>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	4b43      	ldr	r3, [pc, #268]	@ (8007004 <updatedate+0x27c>)
 8006ef6:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006ef8:	e0a2      	b.n	8007040 <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 8006efa:	4b40      	ldr	r3, [pc, #256]	@ (8006ffc <updatedate+0x274>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b1e      	cmp	r3, #30
 8006f00:	f240 80a0 	bls.w	8007044 <updatedate+0x2bc>
					JOURS=1;
 8006f04:	4b3d      	ldr	r3, [pc, #244]	@ (8006ffc <updatedate+0x274>)
 8006f06:	2201      	movs	r2, #1
 8006f08:	701a      	strb	r2, [r3, #0]
					mois++;
 8006f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8007000 <updatedate+0x278>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	4b3b      	ldr	r3, [pc, #236]	@ (8007000 <updatedate+0x278>)
 8006f14:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006f16:	4b3b      	ldr	r3, [pc, #236]	@ (8007004 <updatedate+0x27c>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	4b39      	ldr	r3, [pc, #228]	@ (8007004 <updatedate+0x27c>)
 8006f20:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006f22:	e08f      	b.n	8007044 <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8006f24:	4b35      	ldr	r3, [pc, #212]	@ (8006ffc <updatedate+0x274>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b1f      	cmp	r3, #31
 8006f2a:	f240 808d 	bls.w	8007048 <updatedate+0x2c0>
					JOURS=1;
 8006f2e:	4b33      	ldr	r3, [pc, #204]	@ (8006ffc <updatedate+0x274>)
 8006f30:	2201      	movs	r2, #1
 8006f32:	701a      	strb	r2, [r3, #0]
					mois++;
 8006f34:	4b32      	ldr	r3, [pc, #200]	@ (8007000 <updatedate+0x278>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	4b30      	ldr	r3, [pc, #192]	@ (8007000 <updatedate+0x278>)
 8006f3e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006f40:	4b30      	ldr	r3, [pc, #192]	@ (8007004 <updatedate+0x27c>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	3301      	adds	r3, #1
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	4b2e      	ldr	r3, [pc, #184]	@ (8007004 <updatedate+0x27c>)
 8006f4a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006f4c:	e07c      	b.n	8007048 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 8006f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8006ffc <updatedate+0x274>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b1f      	cmp	r3, #31
 8006f54:	d97a      	bls.n	800704c <updatedate+0x2c4>
					JOURS=1;
 8006f56:	4b29      	ldr	r3, [pc, #164]	@ (8006ffc <updatedate+0x274>)
 8006f58:	2201      	movs	r2, #1
 8006f5a:	701a      	strb	r2, [r3, #0]
					mois++;
 8006f5c:	4b28      	ldr	r3, [pc, #160]	@ (8007000 <updatedate+0x278>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	3301      	adds	r3, #1
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	4b26      	ldr	r3, [pc, #152]	@ (8007000 <updatedate+0x278>)
 8006f66:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006f68:	4b26      	ldr	r3, [pc, #152]	@ (8007004 <updatedate+0x27c>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	4b24      	ldr	r3, [pc, #144]	@ (8007004 <updatedate+0x27c>)
 8006f72:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006f74:	e06a      	b.n	800704c <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8006f76:	4b21      	ldr	r3, [pc, #132]	@ (8006ffc <updatedate+0x274>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	2b1e      	cmp	r3, #30
 8006f7c:	d968      	bls.n	8007050 <updatedate+0x2c8>
					JOURS=1;
 8006f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8006ffc <updatedate+0x274>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	701a      	strb	r2, [r3, #0]
					mois++;
 8006f84:	4b1e      	ldr	r3, [pc, #120]	@ (8007000 <updatedate+0x278>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8007000 <updatedate+0x278>)
 8006f8e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006f90:	4b1c      	ldr	r3, [pc, #112]	@ (8007004 <updatedate+0x27c>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	3301      	adds	r3, #1
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	4b1a      	ldr	r3, [pc, #104]	@ (8007004 <updatedate+0x27c>)
 8006f9a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006f9c:	e058      	b.n	8007050 <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8006f9e:	4b17      	ldr	r3, [pc, #92]	@ (8006ffc <updatedate+0x274>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	2b1f      	cmp	r3, #31
 8006fa4:	d956      	bls.n	8007054 <updatedate+0x2cc>
					JOURS=1;
 8006fa6:	4b15      	ldr	r3, [pc, #84]	@ (8006ffc <updatedate+0x274>)
 8006fa8:	2201      	movs	r2, #1
 8006faa:	701a      	strb	r2, [r3, #0]
					mois++;
 8006fac:	4b14      	ldr	r3, [pc, #80]	@ (8007000 <updatedate+0x278>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	4b12      	ldr	r3, [pc, #72]	@ (8007000 <updatedate+0x278>)
 8006fb6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006fb8:	4b12      	ldr	r3, [pc, #72]	@ (8007004 <updatedate+0x27c>)
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	4b10      	ldr	r3, [pc, #64]	@ (8007004 <updatedate+0x27c>)
 8006fc2:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006fc4:	e046      	b.n	8007054 <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8006fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006ffc <updatedate+0x274>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b1e      	cmp	r3, #30
 8006fcc:	d944      	bls.n	8007058 <updatedate+0x2d0>
					JOURS=1;
 8006fce:	4b0b      	ldr	r3, [pc, #44]	@ (8006ffc <updatedate+0x274>)
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	701a      	strb	r2, [r3, #0]
					mois++;
 8006fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8007000 <updatedate+0x278>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	4b08      	ldr	r3, [pc, #32]	@ (8007000 <updatedate+0x278>)
 8006fde:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006fe0:	4b08      	ldr	r3, [pc, #32]	@ (8007004 <updatedate+0x27c>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	4b06      	ldr	r3, [pc, #24]	@ (8007004 <updatedate+0x27c>)
 8006fea:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006fec:	e034      	b.n	8007058 <updatedate+0x2d0>
 8006fee:	bf00      	nop
 8006ff0:	20000a9c 	.word	0x20000a9c
 8006ff4:	20000a9e 	.word	0x20000a9e
 8006ff8:	20000a9d 	.word	0x20000a9d
 8006ffc:	20000010 	.word	0x20000010
 8007000:	20000a9f 	.word	0x20000a9f
 8007004:	20000011 	.word	0x20000011
	case DECEMBRE:
		if(JOURS>31){
 8007008:	4b1f      	ldr	r3, [pc, #124]	@ (8007088 <updatedate+0x300>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b1f      	cmp	r3, #31
 800700e:	d925      	bls.n	800705c <updatedate+0x2d4>
					JOURS=1;
 8007010:	4b1d      	ldr	r3, [pc, #116]	@ (8007088 <updatedate+0x300>)
 8007012:	2201      	movs	r2, #1
 8007014:	701a      	strb	r2, [r3, #0]
					mois++;
 8007016:	4b1d      	ldr	r3, [pc, #116]	@ (800708c <updatedate+0x304>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	3301      	adds	r3, #1
 800701c:	b2da      	uxtb	r2, r3
 800701e:	4b1b      	ldr	r3, [pc, #108]	@ (800708c <updatedate+0x304>)
 8007020:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007022:	4b1b      	ldr	r3, [pc, #108]	@ (8007090 <updatedate+0x308>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	3301      	adds	r3, #1
 8007028:	b2da      	uxtb	r2, r3
 800702a:	4b19      	ldr	r3, [pc, #100]	@ (8007090 <updatedate+0x308>)
 800702c:	701a      	strb	r2, [r3, #0]
				}
		break;
 800702e:	e015      	b.n	800705c <updatedate+0x2d4>
		break;
 8007030:	bf00      	nop
 8007032:	e014      	b.n	800705e <updatedate+0x2d6>
		break;
 8007034:	bf00      	nop
 8007036:	e012      	b.n	800705e <updatedate+0x2d6>
		break;
 8007038:	bf00      	nop
 800703a:	e010      	b.n	800705e <updatedate+0x2d6>
		break;
 800703c:	bf00      	nop
 800703e:	e00e      	b.n	800705e <updatedate+0x2d6>
		break;
 8007040:	bf00      	nop
 8007042:	e00c      	b.n	800705e <updatedate+0x2d6>
		break;
 8007044:	bf00      	nop
 8007046:	e00a      	b.n	800705e <updatedate+0x2d6>
		break;
 8007048:	bf00      	nop
 800704a:	e008      	b.n	800705e <updatedate+0x2d6>
		break;
 800704c:	bf00      	nop
 800704e:	e006      	b.n	800705e <updatedate+0x2d6>
		break;
 8007050:	bf00      	nop
 8007052:	e004      	b.n	800705e <updatedate+0x2d6>
		break;
 8007054:	bf00      	nop
 8007056:	e002      	b.n	800705e <updatedate+0x2d6>
		break;
 8007058:	bf00      	nop
 800705a:	e000      	b.n	800705e <updatedate+0x2d6>
		break;
 800705c:	bf00      	nop

	}

	if(MOIS>12){
 800705e:	4b0c      	ldr	r3, [pc, #48]	@ (8007090 <updatedate+0x308>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2b0c      	cmp	r3, #12
 8007064:	d90b      	bls.n	800707e <updatedate+0x2f6>
		mois=JANVIER;
 8007066:	4b09      	ldr	r3, [pc, #36]	@ (800708c <updatedate+0x304>)
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 800706c:	4b08      	ldr	r3, [pc, #32]	@ (8007090 <updatedate+0x308>)
 800706e:	2201      	movs	r2, #1
 8007070:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8007072:	4b08      	ldr	r3, [pc, #32]	@ (8007094 <updatedate+0x30c>)
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	3301      	adds	r3, #1
 8007078:	b29a      	uxth	r2, r3
 800707a:	4b06      	ldr	r3, [pc, #24]	@ (8007094 <updatedate+0x30c>)
 800707c:	801a      	strh	r2, [r3, #0]
	}
}
 800707e:	bf00      	nop
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	20000010 	.word	0x20000010
 800708c:	20000a9f 	.word	0x20000a9f
 8007090:	20000011 	.word	0x20000011
 8007094:	20000012 	.word	0x20000012

08007098 <LL_AHB2_GRP1_EnableClock>:
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80070a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80070b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4013      	ands	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80070bc:	68fb      	ldr	r3, [r7, #12]
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <LL_APB1_GRP2_EnableClock>:
{
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80070d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80070d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4313      	orrs	r3, r2
 80070e0:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80070e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4013      	ands	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80070ee:	68fb      	ldr	r3, [r7, #12]
}
 80070f0:	bf00      	nop
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <LL_APB2_GRP1_EnableClock>:
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007108:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800710a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4313      	orrs	r3, r2
 8007112:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007114:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007118:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4013      	ands	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007120:	68fb      	ldr	r3, [r7, #12]
}
 8007122:	bf00      	nop
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
	...

08007130 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8007134:	4b22      	ldr	r3, [pc, #136]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 8007136:	4a23      	ldr	r2, [pc, #140]	@ (80071c4 <MX_LPUART1_UART_Init+0x94>)
 8007138:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800713a:	4b21      	ldr	r3, [pc, #132]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 800713c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007140:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007142:	4b1f      	ldr	r3, [pc, #124]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 8007144:	2200      	movs	r2, #0
 8007146:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8007148:	4b1d      	ldr	r3, [pc, #116]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 800714a:	2200      	movs	r2, #0
 800714c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800714e:	4b1c      	ldr	r3, [pc, #112]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 8007150:	2200      	movs	r2, #0
 8007152:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8007154:	4b1a      	ldr	r3, [pc, #104]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 8007156:	220c      	movs	r2, #12
 8007158:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800715a:	4b19      	ldr	r3, [pc, #100]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 800715c:	2200      	movs	r2, #0
 800715e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007160:	4b17      	ldr	r3, [pc, #92]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 8007162:	2200      	movs	r2, #0
 8007164:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007166:	4b16      	ldr	r3, [pc, #88]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 8007168:	2200      	movs	r2, #0
 800716a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800716c:	4b14      	ldr	r3, [pc, #80]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 800716e:	2200      	movs	r2, #0
 8007170:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8007172:	4b13      	ldr	r3, [pc, #76]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 8007174:	2200      	movs	r2, #0
 8007176:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8007178:	4811      	ldr	r0, [pc, #68]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 800717a:	f008 fbb5 	bl	800f8e8 <HAL_UART_Init>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8007184:	f7fb ff3c 	bl	8003000 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007188:	2100      	movs	r1, #0
 800718a:	480d      	ldr	r0, [pc, #52]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 800718c:	f009 ff7a 	bl	8011084 <HAL_UARTEx_SetTxFifoThreshold>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007196:	f7fb ff33 	bl	8003000 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800719a:	2100      	movs	r1, #0
 800719c:	4808      	ldr	r0, [pc, #32]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 800719e:	f009 ffaf 	bl	8011100 <HAL_UARTEx_SetRxFifoThreshold>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80071a8:	f7fb ff2a 	bl	8003000 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80071ac:	4804      	ldr	r0, [pc, #16]	@ (80071c0 <MX_LPUART1_UART_Init+0x90>)
 80071ae:	f009 ff30 	bl	8011012 <HAL_UARTEx_DisableFifoMode>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80071b8:	f7fb ff22 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80071bc:	bf00      	nop
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	200011ec 	.word	0x200011ec
 80071c4:	40008000 	.word	0x40008000

080071c8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80071cc:	4b22      	ldr	r3, [pc, #136]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 80071ce:	4a23      	ldr	r2, [pc, #140]	@ (800725c <MX_USART1_UART_Init+0x94>)
 80071d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80071d2:	4b21      	ldr	r3, [pc, #132]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 80071d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80071d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80071da:	4b1f      	ldr	r3, [pc, #124]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 80071dc:	2200      	movs	r2, #0
 80071de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80071e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80071e6:	4b1c      	ldr	r3, [pc, #112]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80071ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 80071ee:	220c      	movs	r2, #12
 80071f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80071f2:	4b19      	ldr	r3, [pc, #100]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80071f8:	4b17      	ldr	r3, [pc, #92]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80071fe:	4b16      	ldr	r3, [pc, #88]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 8007200:	2200      	movs	r2, #0
 8007202:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007204:	4b14      	ldr	r3, [pc, #80]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 8007206:	2200      	movs	r2, #0
 8007208:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800720a:	4b13      	ldr	r3, [pc, #76]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 800720c:	2200      	movs	r2, #0
 800720e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007210:	4811      	ldr	r0, [pc, #68]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 8007212:	f008 fb69 	bl	800f8e8 <HAL_UART_Init>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800721c:	f7fb fef0 	bl	8003000 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007220:	2100      	movs	r1, #0
 8007222:	480d      	ldr	r0, [pc, #52]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 8007224:	f009 ff2e 	bl	8011084 <HAL_UARTEx_SetTxFifoThreshold>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800722e:	f7fb fee7 	bl	8003000 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007232:	2100      	movs	r1, #0
 8007234:	4808      	ldr	r0, [pc, #32]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 8007236:	f009 ff63 	bl	8011100 <HAL_UARTEx_SetRxFifoThreshold>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007240:	f7fb fede 	bl	8003000 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007244:	4804      	ldr	r0, [pc, #16]	@ (8007258 <MX_USART1_UART_Init+0x90>)
 8007246:	f009 fee4 	bl	8011012 <HAL_UARTEx_DisableFifoMode>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007250:	f7fb fed6 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007254:	bf00      	nop
 8007256:	bd80      	pop	{r7, pc}
 8007258:	20001280 	.word	0x20001280
 800725c:	40013800 	.word	0x40013800

08007260 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b09c      	sub	sp, #112	@ 0x70
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007268:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	605a      	str	r2, [r3, #4]
 8007272:	609a      	str	r2, [r3, #8]
 8007274:	60da      	str	r2, [r3, #12]
 8007276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007278:	f107 030c 	add.w	r3, r7, #12
 800727c:	2250      	movs	r2, #80	@ 0x50
 800727e:	2100      	movs	r1, #0
 8007280:	4618      	mov	r0, r3
 8007282:	f014 f9c6 	bl	801b612 <memset>
  if(uartHandle->Instance==LPUART1)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a4a      	ldr	r2, [pc, #296]	@ (80073b4 <HAL_UART_MspInit+0x154>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d158      	bne.n	8007342 <HAL_UART_MspInit+0xe2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8007290:	2302      	movs	r3, #2
 8007292:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8007294:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007298:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800729a:	f107 030c 	add.w	r3, r7, #12
 800729e:	4618      	mov	r0, r3
 80072a0:	f006 f845 	bl	800d32e <HAL_RCCEx_PeriphCLKConfig>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80072aa:	f7fb fea9 	bl	8003000 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80072ae:	2001      	movs	r0, #1
 80072b0:	f7ff ff0b 	bl	80070ca <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072b4:	2001      	movs	r0, #1
 80072b6:	f7ff feef 	bl	8007098 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80072ba:	230c      	movs	r3, #12
 80072bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072be:	2302      	movs	r3, #2
 80072c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072c6:	2300      	movs	r3, #0
 80072c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80072ca:	2308      	movs	r3, #8
 80072cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072ce:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80072d2:	4619      	mov	r1, r3
 80072d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80072d8:	f001 ff20 	bl	800911c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 80072dc:	4b36      	ldr	r3, [pc, #216]	@ (80073b8 <HAL_UART_MspInit+0x158>)
 80072de:	4a37      	ldr	r2, [pc, #220]	@ (80073bc <HAL_UART_MspInit+0x15c>)
 80072e0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80072e2:	4b35      	ldr	r3, [pc, #212]	@ (80073b8 <HAL_UART_MspInit+0x158>)
 80072e4:	2210      	movs	r2, #16
 80072e6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072e8:	4b33      	ldr	r3, [pc, #204]	@ (80073b8 <HAL_UART_MspInit+0x158>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072ee:	4b32      	ldr	r3, [pc, #200]	@ (80073b8 <HAL_UART_MspInit+0x158>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80072f4:	4b30      	ldr	r3, [pc, #192]	@ (80073b8 <HAL_UART_MspInit+0x158>)
 80072f6:	2280      	movs	r2, #128	@ 0x80
 80072f8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80072fa:	4b2f      	ldr	r3, [pc, #188]	@ (80073b8 <HAL_UART_MspInit+0x158>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007300:	4b2d      	ldr	r3, [pc, #180]	@ (80073b8 <HAL_UART_MspInit+0x158>)
 8007302:	2200      	movs	r2, #0
 8007304:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8007306:	4b2c      	ldr	r3, [pc, #176]	@ (80073b8 <HAL_UART_MspInit+0x158>)
 8007308:	2220      	movs	r2, #32
 800730a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800730c:	4b2a      	ldr	r3, [pc, #168]	@ (80073b8 <HAL_UART_MspInit+0x158>)
 800730e:	2200      	movs	r2, #0
 8007310:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8007312:	4829      	ldr	r0, [pc, #164]	@ (80073b8 <HAL_UART_MspInit+0x158>)
 8007314:	f001 fbc4 	bl	8008aa0 <HAL_DMA_Init>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800731e:	f7fb fe6f 	bl	8003000 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a24      	ldr	r2, [pc, #144]	@ (80073b8 <HAL_UART_MspInit+0x158>)
 8007326:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800732a:	4a23      	ldr	r2, [pc, #140]	@ (80073b8 <HAL_UART_MspInit+0x158>)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 8007330:	2200      	movs	r2, #0
 8007332:	2102      	movs	r1, #2
 8007334:	2025      	movs	r0, #37	@ 0x25
 8007336:	f001 fb54 	bl	80089e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800733a:	2025      	movs	r0, #37	@ 0x25
 800733c:	f001 fb6b 	bl	8008a16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007340:	e033      	b.n	80073aa <HAL_UART_MspInit+0x14a>
  else if(uartHandle->Instance==USART1)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a1e      	ldr	r2, [pc, #120]	@ (80073c0 <HAL_UART_MspInit+0x160>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d12e      	bne.n	80073aa <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800734c:	2301      	movs	r3, #1
 800734e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007350:	2300      	movs	r3, #0
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007354:	f107 030c 	add.w	r3, r7, #12
 8007358:	4618      	mov	r0, r3
 800735a:	f005 ffe8 	bl	800d32e <HAL_RCCEx_PeriphCLKConfig>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8007364:	f7fb fe4c 	bl	8003000 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007368:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800736c:	f7ff fec6 	bl	80070fc <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007370:	2001      	movs	r0, #1
 8007372:	f7ff fe91 	bl	8007098 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007376:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800737a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800737c:	2302      	movs	r3, #2
 800737e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007380:	2300      	movs	r3, #0
 8007382:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007384:	2300      	movs	r3, #0
 8007386:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007388:	2307      	movs	r3, #7
 800738a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800738c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007390:	4619      	mov	r1, r3
 8007392:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007396:	f001 fec1 	bl	800911c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800739a:	2200      	movs	r2, #0
 800739c:	2100      	movs	r1, #0
 800739e:	2024      	movs	r0, #36	@ 0x24
 80073a0:	f001 fb1f 	bl	80089e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80073a4:	2024      	movs	r0, #36	@ 0x24
 80073a6:	f001 fb36 	bl	8008a16 <HAL_NVIC_EnableIRQ>
}
 80073aa:	bf00      	nop
 80073ac:	3770      	adds	r7, #112	@ 0x70
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	40008000 	.word	0x40008000
 80073b8:	20001314 	.word	0x20001314
 80073bc:	4002001c 	.word	0x4002001c
 80073c0:	40013800 	.word	0x40013800

080073c4 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80073c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]

	oldPos = newPos; //keep track of the last position in the buffer
 80073cc:	4b3a      	ldr	r3, [pc, #232]	@ (80074b8 <HAL_UART_RxCpltCallback+0xf4>)
 80073ce:	881a      	ldrh	r2, [r3, #0]
 80073d0:	4b3a      	ldr	r3, [pc, #232]	@ (80074bc <HAL_UART_RxCpltCallback+0xf8>)
 80073d2:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 80073d4:	4b39      	ldr	r3, [pc, #228]	@ (80074bc <HAL_UART_RxCpltCallback+0xf8>)
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80073da:	d922      	bls.n	8007422 <HAL_UART_RxCpltCallback+0x5e>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80073dc:	4b37      	ldr	r3, [pc, #220]	@ (80074bc <HAL_UART_RxCpltCallback+0xf8>)
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80073e4:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 80073e6:	4b35      	ldr	r3, [pc, #212]	@ (80074bc <HAL_UART_RxCpltCallback+0xf8>)
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	4b34      	ldr	r3, [pc, #208]	@ (80074c0 <HAL_UART_RxCpltCallback+0xfc>)
 80073ee:	4413      	add	r3, r2
 80073f0:	89fa      	ldrh	r2, [r7, #14]
 80073f2:	4934      	ldr	r1, [pc, #208]	@ (80074c4 <HAL_UART_RxCpltCallback+0x100>)
 80073f4:	4618      	mov	r0, r3
 80073f6:	f014 fa28 	bl	801b84a <memcpy>

				oldPos = 0;  // point to the start of the buffer
 80073fa:	4b30      	ldr	r3, [pc, #192]	@ (80074bc <HAL_UART_RxCpltCallback+0xf8>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8007400:	89fb      	ldrh	r3, [r7, #14]
 8007402:	4a30      	ldr	r2, [pc, #192]	@ (80074c4 <HAL_UART_RxCpltCallback+0x100>)
 8007404:	1899      	adds	r1, r3, r2
 8007406:	89fb      	ldrh	r3, [r7, #14]
 8007408:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800740c:	461a      	mov	r2, r3
 800740e:	482c      	ldr	r0, [pc, #176]	@ (80074c0 <HAL_UART_RxCpltCallback+0xfc>)
 8007410:	f014 fa1b 	bl	801b84a <memcpy>
				newPos = (64-datatocopy);  // update the position
 8007414:	89fb      	ldrh	r3, [r7, #14]
 8007416:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800741a:	b29a      	uxth	r2, r3
 800741c:	4b26      	ldr	r3, [pc, #152]	@ (80074b8 <HAL_UART_RxCpltCallback+0xf4>)
 800741e:	801a      	strh	r2, [r3, #0]
 8007420:	e01e      	b.n	8007460 <HAL_UART_RxCpltCallback+0x9c>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8007422:	4b26      	ldr	r3, [pc, #152]	@ (80074bc <HAL_UART_RxCpltCallback+0xf8>)
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	4b25      	ldr	r3, [pc, #148]	@ (80074c0 <HAL_UART_RxCpltCallback+0xfc>)
 800742a:	441a      	add	r2, r3
 800742c:	4b25      	ldr	r3, [pc, #148]	@ (80074c4 <HAL_UART_RxCpltCallback+0x100>)
 800742e:	4610      	mov	r0, r2
 8007430:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8007434:	4602      	mov	r2, r0
 8007436:	4619      	mov	r1, r3
 8007438:	f8d1 c000 	ldr.w	ip, [r1]
 800743c:	684e      	ldr	r6, [r1, #4]
 800743e:	688d      	ldr	r5, [r1, #8]
 8007440:	68c9      	ldr	r1, [r1, #12]
 8007442:	f8c2 c000 	str.w	ip, [r2]
 8007446:	6056      	str	r6, [r2, #4]
 8007448:	6095      	str	r5, [r2, #8]
 800744a:	60d1      	str	r1, [r2, #12]
 800744c:	3310      	adds	r3, #16
 800744e:	3010      	adds	r0, #16
 8007450:	42a3      	cmp	r3, r4
 8007452:	d1ef      	bne.n	8007434 <HAL_UART_RxCpltCallback+0x70>
				newPos = 64+oldPos; //update buffer position
 8007454:	4b19      	ldr	r3, [pc, #100]	@ (80074bc <HAL_UART_RxCpltCallback+0xf8>)
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	3340      	adds	r3, #64	@ 0x40
 800745a:	b29a      	uxth	r2, r3
 800745c:	4b16      	ldr	r3, [pc, #88]	@ (80074b8 <HAL_UART_RxCpltCallback+0xf4>)
 800745e:	801a      	strh	r2, [r3, #0]

			}


			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 8007460:	2240      	movs	r2, #64	@ 0x40
 8007462:	4918      	ldr	r1, [pc, #96]	@ (80074c4 <HAL_UART_RxCpltCallback+0x100>)
 8007464:	4818      	ldr	r0, [pc, #96]	@ (80074c8 <HAL_UART_RxCpltCallback+0x104>)
 8007466:	f008 fa8f 	bl	800f988 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 800746a:	4b18      	ldr	r3, [pc, #96]	@ (80074cc <HAL_UART_RxCpltCallback+0x108>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	4b16      	ldr	r3, [pc, #88]	@ (80074cc <HAL_UART_RxCpltCallback+0x108>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 0204 	bic.w	r2, r2, #4
 8007478:	601a      	str	r2, [r3, #0]
			memcpy((uint8_t *) receivedtrame,(uint8_t *)RxBuffer,64);
 800747a:	4a15      	ldr	r2, [pc, #84]	@ (80074d0 <HAL_UART_RxCpltCallback+0x10c>)
 800747c:	4b11      	ldr	r3, [pc, #68]	@ (80074c4 <HAL_UART_RxCpltCallback+0x100>)
 800747e:	4610      	mov	r0, r2
 8007480:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8007484:	4602      	mov	r2, r0
 8007486:	4619      	mov	r1, r3
 8007488:	f8d1 c000 	ldr.w	ip, [r1]
 800748c:	684e      	ldr	r6, [r1, #4]
 800748e:	688d      	ldr	r5, [r1, #8]
 8007490:	68c9      	ldr	r1, [r1, #12]
 8007492:	f8c2 c000 	str.w	ip, [r2]
 8007496:	6056      	str	r6, [r2, #4]
 8007498:	6095      	str	r5, [r2, #8]
 800749a:	60d1      	str	r1, [r2, #12]
 800749c:	3310      	adds	r3, #16
 800749e:	3010      	adds	r0, #16
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	d1ef      	bne.n	8007484 <HAL_UART_RxCpltCallback+0xc0>


	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 80074a4:	2240      	movs	r2, #64	@ 0x40
 80074a6:	4907      	ldr	r1, [pc, #28]	@ (80074c4 <HAL_UART_RxCpltCallback+0x100>)
 80074a8:	4807      	ldr	r0, [pc, #28]	@ (80074c8 <HAL_UART_RxCpltCallback+0x104>)
 80074aa:	f008 fa6d 	bl	800f988 <HAL_UART_Receive_DMA>
}
 80074ae:	bf00      	nop
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074b6:	bf00      	nop
 80074b8:	200005f8 	.word	0x200005f8
 80074bc:	200005f6 	.word	0x200005f6
 80074c0:	2000063c 	.word	0x2000063c
 80074c4:	200005fc 	.word	0x200005fc
 80074c8:	200011ec 	.word	0x200011ec
 80074cc:	20001314 	.word	0x20001314
 80074d0:	20000bc0 	.word	0x20000bc0

080074d4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80074d4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80074d6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80074d8:	3304      	adds	r3, #4

080074da <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80074da:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80074dc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80074de:	d3f9      	bcc.n	80074d4 <CopyDataInit>
  bx lr
 80074e0:	4770      	bx	lr

080074e2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80074e2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80074e4:	3004      	adds	r0, #4

080074e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80074e6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80074e8:	d3fb      	bcc.n	80074e2 <FillZerobss>
  bx lr
 80074ea:	4770      	bx	lr

080074ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80074ec:	480c      	ldr	r0, [pc, #48]	@ (8007520 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80074ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80074f0:	f7ff faf0 	bl	8006ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80074f4:	480b      	ldr	r0, [pc, #44]	@ (8007524 <LoopForever+0x6>)
 80074f6:	490c      	ldr	r1, [pc, #48]	@ (8007528 <LoopForever+0xa>)
 80074f8:	4a0c      	ldr	r2, [pc, #48]	@ (800752c <LoopForever+0xe>)
 80074fa:	2300      	movs	r3, #0
 80074fc:	f7ff ffed 	bl	80074da <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007500:	480b      	ldr	r0, [pc, #44]	@ (8007530 <LoopForever+0x12>)
 8007502:	490c      	ldr	r1, [pc, #48]	@ (8007534 <LoopForever+0x16>)
 8007504:	4a0c      	ldr	r2, [pc, #48]	@ (8007538 <LoopForever+0x1a>)
 8007506:	2300      	movs	r3, #0
 8007508:	f7ff ffe7 	bl	80074da <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800750c:	480b      	ldr	r0, [pc, #44]	@ (800753c <LoopForever+0x1e>)
 800750e:	490c      	ldr	r1, [pc, #48]	@ (8007540 <LoopForever+0x22>)
 8007510:	2300      	movs	r3, #0
 8007512:	f7ff ffe8 	bl	80074e6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007516:	f014 f969 	bl	801b7ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800751a:	f7fb fc1b 	bl	8002d54 <main>

0800751e <LoopForever>:

LoopForever:
  b LoopForever
 800751e:	e7fe      	b.n	800751e <LoopForever>
  ldr   r0, =_estack
 8007520:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007524:	20000008 	.word	0x20000008
 8007528:	20000328 	.word	0x20000328
 800752c:	080237b8 	.word	0x080237b8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007530:	200301e4 	.word	0x200301e4
 8007534:	20030a67 	.word	0x20030a67
 8007538:	08023b1e 	.word	0x08023b1e
  INIT_BSS _sbss, _ebss
 800753c:	20000378 	.word	0x20000378
 8007540:	2000304c 	.word	0x2000304c

08007544 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007544:	e7fe      	b.n	8007544 <ADC1_IRQHandler>
	...

08007548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007552:	4b0c      	ldr	r3, [pc, #48]	@ (8007584 <HAL_Init+0x3c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a0b      	ldr	r2, [pc, #44]	@ (8007584 <HAL_Init+0x3c>)
 8007558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800755c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800755e:	2003      	movs	r0, #3
 8007560:	f001 fa34 	bl	80089cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007564:	200f      	movs	r0, #15
 8007566:	f000 f80f 	bl	8007588 <HAL_InitTick>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	71fb      	strb	r3, [r7, #7]
 8007574:	e001      	b.n	800757a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007576:	f7ff f8cc 	bl	8006712 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800757a:	79fb      	ldrb	r3, [r7, #7]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	58004000 	.word	0x58004000

08007588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007594:	4b17      	ldr	r3, [pc, #92]	@ (80075f4 <HAL_InitTick+0x6c>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d024      	beq.n	80075e6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800759c:	f005 fc36 	bl	800ce0c <HAL_RCC_GetHCLKFreq>
 80075a0:	4602      	mov	r2, r0
 80075a2:	4b14      	ldr	r3, [pc, #80]	@ (80075f4 <HAL_InitTick+0x6c>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	4619      	mov	r1, r3
 80075a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80075ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80075b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b4:	4618      	mov	r0, r3
 80075b6:	f001 fa4a 	bl	8008a4e <HAL_SYSTICK_Config>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10f      	bne.n	80075e0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b0f      	cmp	r3, #15
 80075c4:	d809      	bhi.n	80075da <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80075c6:	2200      	movs	r2, #0
 80075c8:	6879      	ldr	r1, [r7, #4]
 80075ca:	f04f 30ff 	mov.w	r0, #4294967295
 80075ce:	f001 fa08 	bl	80089e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80075d2:	4a09      	ldr	r2, [pc, #36]	@ (80075f8 <HAL_InitTick+0x70>)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	e007      	b.n	80075ea <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	73fb      	strb	r3, [r7, #15]
 80075de:	e004      	b.n	80075ea <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	73fb      	strb	r3, [r7, #15]
 80075e4:	e001      	b.n	80075ea <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	2000003c 	.word	0x2000003c
 80075f8:	20000038 	.word	0x20000038

080075fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007600:	4b06      	ldr	r3, [pc, #24]	@ (800761c <HAL_IncTick+0x20>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	4b06      	ldr	r3, [pc, #24]	@ (8007620 <HAL_IncTick+0x24>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4413      	add	r3, r2
 800760c:	4a04      	ldr	r2, [pc, #16]	@ (8007620 <HAL_IncTick+0x24>)
 800760e:	6013      	str	r3, [r2, #0]
}
 8007610:	bf00      	nop
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	2000003c 	.word	0x2000003c
 8007620:	20001374 	.word	0x20001374

08007624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
  return uwTick;
 8007628:	4b03      	ldr	r3, [pc, #12]	@ (8007638 <HAL_GetTick+0x14>)
 800762a:	681b      	ldr	r3, [r3, #0]
}
 800762c:	4618      	mov	r0, r3
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	20001374 	.word	0x20001374

0800763c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800763c:	b480      	push	{r7}
 800763e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007640:	4b03      	ldr	r3, [pc, #12]	@ (8007650 <HAL_GetTickPrio+0x14>)
 8007642:	681b      	ldr	r3, [r3, #0]
}
 8007644:	4618      	mov	r0, r3
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	20000038 	.word	0x20000038

08007654 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007654:	b480      	push	{r7}
 8007656:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007658:	4b03      	ldr	r3, [pc, #12]	@ (8007668 <HAL_GetTickFreq+0x14>)
 800765a:	781b      	ldrb	r3, [r3, #0]
}
 800765c:	4618      	mov	r0, r3
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	2000003c 	.word	0x2000003c

0800766c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	609a      	str	r2, [r3, #8]
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3360      	adds	r3, #96	@ 0x60
 80076e6:	461a      	mov	r2, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	4b08      	ldr	r3, [pc, #32]	@ (8007718 <LL_ADC_SetOffset+0x44>)
 80076f6:	4013      	ands	r3, r2
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	4313      	orrs	r3, r2
 8007704:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800770c:	bf00      	nop
 800770e:	371c      	adds	r7, #28
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	03fff000 	.word	0x03fff000

0800771c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3360      	adds	r3, #96	@ 0x60
 800772a:	461a      	mov	r2, r3
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3360      	adds	r3, #96	@ 0x60
 8007758:	461a      	mov	r2, r3
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	431a      	orrs	r2, r3
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007772:	bf00      	nop
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007796:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007798:	4618      	mov	r0, r3
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3330      	adds	r3, #48	@ 0x30
 80077b4:	461a      	mov	r2, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	0a1b      	lsrs	r3, r3, #8
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	f003 030c 	and.w	r3, r3, #12
 80077c0:	4413      	add	r3, r2
 80077c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f003 031f 	and.w	r3, r3, #31
 80077ce:	211f      	movs	r1, #31
 80077d0:	fa01 f303 	lsl.w	r3, r1, r3
 80077d4:	43db      	mvns	r3, r3
 80077d6:	401a      	ands	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	0e9b      	lsrs	r3, r3, #26
 80077dc:	f003 011f 	and.w	r1, r3, #31
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f003 031f 	and.w	r3, r3, #31
 80077e6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ea:	431a      	orrs	r2, r3
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80077f0:	bf00      	nop
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3314      	adds	r3, #20
 800780c:	461a      	mov	r2, r3
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	0e5b      	lsrs	r3, r3, #25
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	4413      	add	r3, r2
 800781a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	0d1b      	lsrs	r3, r3, #20
 8007824:	f003 031f 	and.w	r3, r3, #31
 8007828:	2107      	movs	r1, #7
 800782a:	fa01 f303 	lsl.w	r3, r1, r3
 800782e:	43db      	mvns	r3, r3
 8007830:	401a      	ands	r2, r3
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	0d1b      	lsrs	r3, r3, #20
 8007836:	f003 031f 	and.w	r3, r3, #31
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	fa01 f303 	lsl.w	r3, r1, r3
 8007840:	431a      	orrs	r2, r3
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007846:	bf00      	nop
 8007848:	371c      	adds	r7, #28
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
	...

08007854 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800786c:	43db      	mvns	r3, r3
 800786e:	401a      	ands	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f003 0318 	and.w	r3, r3, #24
 8007876:	4908      	ldr	r1, [pc, #32]	@ (8007898 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007878:	40d9      	lsrs	r1, r3
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	400b      	ands	r3, r1
 800787e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007882:	431a      	orrs	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800788a:	bf00      	nop
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	0007ffff 	.word	0x0007ffff

0800789c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80078ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	6093      	str	r3, [r2, #8]
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078d4:	d101      	bne.n	80078da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80078f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80078fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007924:	d101      	bne.n	800792a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007926:	2301      	movs	r3, #1
 8007928:	e000      	b.n	800792c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007948:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800794c:	f043 0201 	orr.w	r2, r3, #1
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <LL_ADC_IsEnabled+0x18>
 8007974:	2301      	movs	r3, #1
 8007976:	e000      	b.n	800797a <LL_ADC_IsEnabled+0x1a>
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007996:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800799a:	f043 0204 	orr.w	r2, r3, #4
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f003 0304 	and.w	r3, r3, #4
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d101      	bne.n	80079c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e000      	b.n	80079c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f003 0308 	and.w	r3, r3, #8
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d101      	bne.n	80079ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80079e8:	2301      	movs	r3, #1
 80079ea:	e000      	b.n	80079ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e12e      	b.n	8007c78 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d109      	bne.n	8007a3c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7f9 fd11 	bl	8001450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff ff3d 	bl	80078c0 <LL_ADC_IsDeepPowerDownEnabled>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff ff23 	bl	800789c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7ff ff58 	bl	8007910 <LL_ADC_IsInternalRegulatorEnabled>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d115      	bne.n	8007a92 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff ff3c 	bl	80078e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a70:	4b83      	ldr	r3, [pc, #524]	@ (8007c80 <HAL_ADC_Init+0x284>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	099b      	lsrs	r3, r3, #6
 8007a76:	4a83      	ldr	r2, [pc, #524]	@ (8007c84 <HAL_ADC_Init+0x288>)
 8007a78:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7c:	099b      	lsrs	r3, r3, #6
 8007a7e:	3301      	adds	r3, #1
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007a84:	e002      	b.n	8007a8c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1f9      	bne.n	8007a86 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff ff3a 	bl	8007910 <LL_ADC_IsInternalRegulatorEnabled>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10d      	bne.n	8007abe <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa6:	f043 0210 	orr.w	r2, r3, #16
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ab2:	f043 0201 	orr.w	r2, r3, #1
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7ff ff73 	bl	80079ae <LL_ADC_REG_IsConversionOngoing>
 8007ac8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ace:	f003 0310 	and.w	r3, r3, #16
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f040 80c7 	bne.w	8007c66 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f040 80c3 	bne.w	8007c66 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007ae8:	f043 0202 	orr.w	r2, r3, #2
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff ff33 	bl	8007960 <LL_ADC_IsEnabled>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10b      	bne.n	8007b18 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007b00:	4861      	ldr	r0, [pc, #388]	@ (8007c88 <HAL_ADC_Init+0x28c>)
 8007b02:	f7ff ff2d 	bl	8007960 <LL_ADC_IsEnabled>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d105      	bne.n	8007b18 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	4619      	mov	r1, r3
 8007b12:	485e      	ldr	r0, [pc, #376]	@ (8007c8c <HAL_ADC_Init+0x290>)
 8007b14:	f7ff fdaa 	bl	800766c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	7e5b      	ldrb	r3, [r3, #25]
 8007b1c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007b22:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007b28:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007b2e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b36:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8007b38:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d106      	bne.n	8007b58 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	045b      	lsls	r3, r3, #17
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d009      	beq.n	8007b74 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b64:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	4b45      	ldr	r3, [pc, #276]	@ (8007c90 <HAL_ADC_Init+0x294>)
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	6812      	ldr	r2, [r2, #0]
 8007b82:	69b9      	ldr	r1, [r7, #24]
 8007b84:	430b      	orrs	r3, r1
 8007b86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff ff0e 	bl	80079ae <LL_ADC_REG_IsConversionOngoing>
 8007b92:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff ff1b 	bl	80079d4 <LL_ADC_INJ_IsConversionOngoing>
 8007b9e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d13d      	bne.n	8007c22 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d13a      	bne.n	8007c22 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007bb0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007bb8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bc8:	f023 0302 	bic.w	r3, r3, #2
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6812      	ldr	r2, [r2, #0]
 8007bd0:	69b9      	ldr	r1, [r7, #24]
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d118      	bne.n	8007c12 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007bea:	f023 0304 	bic.w	r3, r3, #4
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007bf6:	4311      	orrs	r1, r2
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007bfc:	4311      	orrs	r1, r2
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007c02:	430a      	orrs	r2, r1
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0201 	orr.w	r2, r2, #1
 8007c0e:	611a      	str	r2, [r3, #16]
 8007c10:	e007      	b.n	8007c22 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	691a      	ldr	r2, [r3, #16]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 0201 	bic.w	r2, r2, #1
 8007c20:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d10c      	bne.n	8007c44 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c30:	f023 010f 	bic.w	r1, r3, #15
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	1e5a      	subs	r2, r3, #1
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c42:	e007      	b.n	8007c54 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 020f 	bic.w	r2, r2, #15
 8007c52:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c58:	f023 0303 	bic.w	r3, r3, #3
 8007c5c:	f043 0201 	orr.w	r2, r3, #1
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	655a      	str	r2, [r3, #84]	@ 0x54
 8007c64:	e007      	b.n	8007c76 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c6a:	f043 0210 	orr.w	r2, r3, #16
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007c76:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3720      	adds	r7, #32
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20000034 	.word	0x20000034
 8007c84:	053e2d63 	.word	0x053e2d63
 8007c88:	50040000 	.word	0x50040000
 8007c8c:	50040300 	.word	0x50040300
 8007c90:	fff0c007 	.word	0xfff0c007

08007c94 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7ff fe82 	bl	80079ae <LL_ADC_REG_IsConversionOngoing>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d167      	bne.n	8007d80 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d101      	bne.n	8007cbe <HAL_ADC_Start_DMA+0x2a>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e063      	b.n	8007d86 <HAL_ADC_Start_DMA+0xf2>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 fc42 	bl	8008550 <ADC_Enable>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d14f      	bne.n	8007d76 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cda:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007cde:	f023 0301 	bic.w	r3, r3, #1
 8007ce2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d006      	beq.n	8007d04 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cfa:	f023 0206 	bic.w	r2, r3, #6
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	659a      	str	r2, [r3, #88]	@ 0x58
 8007d02:	e002      	b.n	8007d0a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d0e:	4a20      	ldr	r2, [pc, #128]	@ (8007d90 <HAL_ADC_Start_DMA+0xfc>)
 8007d10:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d16:	4a1f      	ldr	r2, [pc, #124]	@ (8007d94 <HAL_ADC_Start_DMA+0x100>)
 8007d18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007d98 <HAL_ADC_Start_DMA+0x104>)
 8007d20:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	221c      	movs	r2, #28
 8007d28:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f042 0210 	orr.w	r2, r2, #16
 8007d40:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f042 0201 	orr.w	r2, r2, #1
 8007d50:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3340      	adds	r3, #64	@ 0x40
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f000 ff45 	bl	8008bf0 <HAL_DMA_Start_IT>
 8007d66:	4603      	mov	r3, r0
 8007d68:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7ff fe09 	bl	8007986 <LL_ADC_REG_StartConversion>
 8007d74:	e006      	b.n	8007d84 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007d7e:	e001      	b.n	8007d84 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007d80:	2302      	movs	r3, #2
 8007d82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	08008645 	.word	0x08008645
 8007d94:	0800871d 	.word	0x0800871d
 8007d98:	08008739 	.word	0x08008739

08007d9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b0b6      	sub	sp, #216	@ 0xd8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d101      	bne.n	8007de6 <HAL_ADC_ConfigChannel+0x22>
 8007de2:	2302      	movs	r3, #2
 8007de4:	e39f      	b.n	8008526 <HAL_ADC_ConfigChannel+0x762>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff fddb 	bl	80079ae <LL_ADC_REG_IsConversionOngoing>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f040 8384 	bne.w	8008508 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6818      	ldr	r0, [r3, #0]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	6859      	ldr	r1, [r3, #4]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	f7ff fcc9 	bl	80077a4 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff fdc9 	bl	80079ae <LL_ADC_REG_IsConversionOngoing>
 8007e1c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7ff fdd5 	bl	80079d4 <LL_ADC_INJ_IsConversionOngoing>
 8007e2a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007e2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f040 81a6 	bne.w	8008184 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007e38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f040 81a1 	bne.w	8008184 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	6819      	ldr	r1, [r3, #0]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f7ff fcd4 	bl	80077fc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	695a      	ldr	r2, [r3, #20]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	08db      	lsrs	r3, r3, #3
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d00a      	beq.n	8007e8c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6919      	ldr	r1, [r3, #16]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e86:	f7ff fc25 	bl	80076d4 <LL_ADC_SetOffset>
 8007e8a:	e17b      	b.n	8008184 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2100      	movs	r1, #0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7ff fc42 	bl	800771c <LL_ADC_GetOffsetChannel>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10a      	bne.n	8007eb8 <HAL_ADC_ConfigChannel+0xf4>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7ff fc37 	bl	800771c <LL_ADC_GetOffsetChannel>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	0e9b      	lsrs	r3, r3, #26
 8007eb2:	f003 021f 	and.w	r2, r3, #31
 8007eb6:	e01e      	b.n	8007ef6 <HAL_ADC_ConfigChannel+0x132>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff fc2c 	bl	800771c <LL_ADC_GetOffsetChannel>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007ece:	fa93 f3a3 	rbit	r3, r3
 8007ed2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007ed6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007eda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007ede:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8007ee6:	2320      	movs	r3, #32
 8007ee8:	e004      	b.n	8007ef4 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8007eea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007eee:	fab3 f383 	clz	r3, r3
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d105      	bne.n	8007f0e <HAL_ADC_ConfigChannel+0x14a>
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	0e9b      	lsrs	r3, r3, #26
 8007f08:	f003 031f 	and.w	r3, r3, #31
 8007f0c:	e018      	b.n	8007f40 <HAL_ADC_ConfigChannel+0x17c>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007f1a:	fa93 f3a3 	rbit	r3, r3
 8007f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007f2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8007f32:	2320      	movs	r3, #32
 8007f34:	e004      	b.n	8007f40 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8007f36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f3a:	fab3 f383 	clz	r3, r3
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d106      	bne.n	8007f52 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7ff fbfb 	bl	8007748 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2101      	movs	r1, #1
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff fbdf 	bl	800771c <LL_ADC_GetOffsetChannel>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10a      	bne.n	8007f7e <HAL_ADC_ConfigChannel+0x1ba>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7ff fbd4 	bl	800771c <LL_ADC_GetOffsetChannel>
 8007f74:	4603      	mov	r3, r0
 8007f76:	0e9b      	lsrs	r3, r3, #26
 8007f78:	f003 021f 	and.w	r2, r3, #31
 8007f7c:	e01e      	b.n	8007fbc <HAL_ADC_ConfigChannel+0x1f8>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2101      	movs	r1, #1
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff fbc9 	bl	800771c <LL_ADC_GetOffsetChannel>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007f94:	fa93 f3a3 	rbit	r3, r3
 8007f98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007f9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007fa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8007fac:	2320      	movs	r3, #32
 8007fae:	e004      	b.n	8007fba <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8007fb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007fb4:	fab3 f383 	clz	r3, r3
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	461a      	mov	r2, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d105      	bne.n	8007fd4 <HAL_ADC_ConfigChannel+0x210>
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	0e9b      	lsrs	r3, r3, #26
 8007fce:	f003 031f 	and.w	r3, r3, #31
 8007fd2:	e018      	b.n	8008006 <HAL_ADC_ConfigChannel+0x242>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fe0:	fa93 f3a3 	rbit	r3, r3
 8007fe4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007fe8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007fec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	e004      	b.n	8008006 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8007ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008000:	fab3 f383 	clz	r3, r3
 8008004:	b2db      	uxtb	r3, r3
 8008006:	429a      	cmp	r2, r3
 8008008:	d106      	bne.n	8008018 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2200      	movs	r2, #0
 8008010:	2101      	movs	r1, #1
 8008012:	4618      	mov	r0, r3
 8008014:	f7ff fb98 	bl	8007748 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2102      	movs	r1, #2
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff fb7c 	bl	800771c <LL_ADC_GetOffsetChannel>
 8008024:	4603      	mov	r3, r0
 8008026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10a      	bne.n	8008044 <HAL_ADC_ConfigChannel+0x280>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2102      	movs	r1, #2
 8008034:	4618      	mov	r0, r3
 8008036:	f7ff fb71 	bl	800771c <LL_ADC_GetOffsetChannel>
 800803a:	4603      	mov	r3, r0
 800803c:	0e9b      	lsrs	r3, r3, #26
 800803e:	f003 021f 	and.w	r2, r3, #31
 8008042:	e01e      	b.n	8008082 <HAL_ADC_ConfigChannel+0x2be>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2102      	movs	r1, #2
 800804a:	4618      	mov	r0, r3
 800804c:	f7ff fb66 	bl	800771c <LL_ADC_GetOffsetChannel>
 8008050:	4603      	mov	r3, r0
 8008052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008056:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800805a:	fa93 f3a3 	rbit	r3, r3
 800805e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8008062:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008066:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800806a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8008072:	2320      	movs	r3, #32
 8008074:	e004      	b.n	8008080 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8008076:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800807a:	fab3 f383 	clz	r3, r3
 800807e:	b2db      	uxtb	r3, r3
 8008080:	461a      	mov	r2, r3
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800808a:	2b00      	cmp	r3, #0
 800808c:	d105      	bne.n	800809a <HAL_ADC_ConfigChannel+0x2d6>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	0e9b      	lsrs	r3, r3, #26
 8008094:	f003 031f 	and.w	r3, r3, #31
 8008098:	e016      	b.n	80080c8 <HAL_ADC_ConfigChannel+0x304>
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80080a6:	fa93 f3a3 	rbit	r3, r3
 80080aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80080ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80080ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80080b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80080ba:	2320      	movs	r3, #32
 80080bc:	e004      	b.n	80080c8 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80080be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080c2:	fab3 f383 	clz	r3, r3
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d106      	bne.n	80080da <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2200      	movs	r2, #0
 80080d2:	2102      	movs	r1, #2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7ff fb37 	bl	8007748 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2103      	movs	r1, #3
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff fb1b 	bl	800771c <LL_ADC_GetOffsetChannel>
 80080e6:	4603      	mov	r3, r0
 80080e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10a      	bne.n	8008106 <HAL_ADC_ConfigChannel+0x342>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2103      	movs	r1, #3
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff fb10 	bl	800771c <LL_ADC_GetOffsetChannel>
 80080fc:	4603      	mov	r3, r0
 80080fe:	0e9b      	lsrs	r3, r3, #26
 8008100:	f003 021f 	and.w	r2, r3, #31
 8008104:	e017      	b.n	8008136 <HAL_ADC_ConfigChannel+0x372>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2103      	movs	r1, #3
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff fb05 	bl	800771c <LL_ADC_GetOffsetChannel>
 8008112:	4603      	mov	r3, r0
 8008114:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008118:	fa93 f3a3 	rbit	r3, r3
 800811c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800811e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008120:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8008122:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8008128:	2320      	movs	r3, #32
 800812a:	e003      	b.n	8008134 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800812c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800812e:	fab3 f383 	clz	r3, r3
 8008132:	b2db      	uxtb	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800813e:	2b00      	cmp	r3, #0
 8008140:	d105      	bne.n	800814e <HAL_ADC_ConfigChannel+0x38a>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	0e9b      	lsrs	r3, r3, #26
 8008148:	f003 031f 	and.w	r3, r3, #31
 800814c:	e011      	b.n	8008172 <HAL_ADC_ConfigChannel+0x3ae>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008154:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008156:	fa93 f3a3 	rbit	r3, r3
 800815a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800815c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800815e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8008160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8008166:	2320      	movs	r3, #32
 8008168:	e003      	b.n	8008172 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800816a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800816c:	fab3 f383 	clz	r3, r3
 8008170:	b2db      	uxtb	r3, r3
 8008172:	429a      	cmp	r2, r3
 8008174:	d106      	bne.n	8008184 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2200      	movs	r2, #0
 800817c:	2103      	movs	r1, #3
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff fae2 	bl	8007748 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4618      	mov	r0, r3
 800818a:	f7ff fbe9 	bl	8007960 <LL_ADC_IsEnabled>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	f040 81c2 	bne.w	800851a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6818      	ldr	r0, [r3, #0]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	6819      	ldr	r1, [r3, #0]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	461a      	mov	r2, r3
 80081a4:	f7ff fb56 	bl	8007854 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	4a8e      	ldr	r2, [pc, #568]	@ (80083e8 <HAL_ADC_ConfigChannel+0x624>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	f040 8130 	bne.w	8008414 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10b      	bne.n	80081dc <HAL_ADC_ConfigChannel+0x418>
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	0e9b      	lsrs	r3, r3, #26
 80081ca:	3301      	adds	r3, #1
 80081cc:	f003 031f 	and.w	r3, r3, #31
 80081d0:	2b09      	cmp	r3, #9
 80081d2:	bf94      	ite	ls
 80081d4:	2301      	movls	r3, #1
 80081d6:	2300      	movhi	r3, #0
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	e019      	b.n	8008210 <HAL_ADC_ConfigChannel+0x44c>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081e4:	fa93 f3a3 	rbit	r3, r3
 80081e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80081ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081ec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80081ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80081f4:	2320      	movs	r3, #32
 80081f6:	e003      	b.n	8008200 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80081f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081fa:	fab3 f383 	clz	r3, r3
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	3301      	adds	r3, #1
 8008202:	f003 031f 	and.w	r3, r3, #31
 8008206:	2b09      	cmp	r3, #9
 8008208:	bf94      	ite	ls
 800820a:	2301      	movls	r3, #1
 800820c:	2300      	movhi	r3, #0
 800820e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008210:	2b00      	cmp	r3, #0
 8008212:	d079      	beq.n	8008308 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800821c:	2b00      	cmp	r3, #0
 800821e:	d107      	bne.n	8008230 <HAL_ADC_ConfigChannel+0x46c>
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	0e9b      	lsrs	r3, r3, #26
 8008226:	3301      	adds	r3, #1
 8008228:	069b      	lsls	r3, r3, #26
 800822a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800822e:	e015      	b.n	800825c <HAL_ADC_ConfigChannel+0x498>
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008236:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008238:	fa93 f3a3 	rbit	r3, r3
 800823c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800823e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008240:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8008242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008248:	2320      	movs	r3, #32
 800824a:	e003      	b.n	8008254 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800824c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800824e:	fab3 f383 	clz	r3, r3
 8008252:	b2db      	uxtb	r3, r3
 8008254:	3301      	adds	r3, #1
 8008256:	069b      	lsls	r3, r3, #26
 8008258:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008264:	2b00      	cmp	r3, #0
 8008266:	d109      	bne.n	800827c <HAL_ADC_ConfigChannel+0x4b8>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	0e9b      	lsrs	r3, r3, #26
 800826e:	3301      	adds	r3, #1
 8008270:	f003 031f 	and.w	r3, r3, #31
 8008274:	2101      	movs	r1, #1
 8008276:	fa01 f303 	lsl.w	r3, r1, r3
 800827a:	e017      	b.n	80082ac <HAL_ADC_ConfigChannel+0x4e8>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008284:	fa93 f3a3 	rbit	r3, r3
 8008288:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800828a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800828c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800828e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8008294:	2320      	movs	r3, #32
 8008296:	e003      	b.n	80082a0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8008298:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800829a:	fab3 f383 	clz	r3, r3
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	3301      	adds	r3, #1
 80082a2:	f003 031f 	and.w	r3, r3, #31
 80082a6:	2101      	movs	r1, #1
 80082a8:	fa01 f303 	lsl.w	r3, r1, r3
 80082ac:	ea42 0103 	orr.w	r1, r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <HAL_ADC_ConfigChannel+0x50e>
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	0e9b      	lsrs	r3, r3, #26
 80082c2:	3301      	adds	r3, #1
 80082c4:	f003 021f 	and.w	r2, r3, #31
 80082c8:	4613      	mov	r3, r2
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	4413      	add	r3, r2
 80082ce:	051b      	lsls	r3, r3, #20
 80082d0:	e018      	b.n	8008304 <HAL_ADC_ConfigChannel+0x540>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082da:	fa93 f3a3 	rbit	r3, r3
 80082de:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80082e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80082e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80082ea:	2320      	movs	r3, #32
 80082ec:	e003      	b.n	80082f6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80082ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082f0:	fab3 f383 	clz	r3, r3
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	3301      	adds	r3, #1
 80082f8:	f003 021f 	and.w	r2, r3, #31
 80082fc:	4613      	mov	r3, r2
 80082fe:	005b      	lsls	r3, r3, #1
 8008300:	4413      	add	r3, r2
 8008302:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008304:	430b      	orrs	r3, r1
 8008306:	e080      	b.n	800840a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008310:	2b00      	cmp	r3, #0
 8008312:	d107      	bne.n	8008324 <HAL_ADC_ConfigChannel+0x560>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	0e9b      	lsrs	r3, r3, #26
 800831a:	3301      	adds	r3, #1
 800831c:	069b      	lsls	r3, r3, #26
 800831e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008322:	e015      	b.n	8008350 <HAL_ADC_ConfigChannel+0x58c>
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800832a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832c:	fa93 f3a3 	rbit	r3, r3
 8008330:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8008332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008334:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800833c:	2320      	movs	r3, #32
 800833e:	e003      	b.n	8008348 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8008340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008342:	fab3 f383 	clz	r3, r3
 8008346:	b2db      	uxtb	r3, r3
 8008348:	3301      	adds	r3, #1
 800834a:	069b      	lsls	r3, r3, #26
 800834c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008358:	2b00      	cmp	r3, #0
 800835a:	d109      	bne.n	8008370 <HAL_ADC_ConfigChannel+0x5ac>
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	0e9b      	lsrs	r3, r3, #26
 8008362:	3301      	adds	r3, #1
 8008364:	f003 031f 	and.w	r3, r3, #31
 8008368:	2101      	movs	r1, #1
 800836a:	fa01 f303 	lsl.w	r3, r1, r3
 800836e:	e017      	b.n	80083a0 <HAL_ADC_ConfigChannel+0x5dc>
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	fa93 f3a3 	rbit	r3, r3
 800837c:	61fb      	str	r3, [r7, #28]
  return result;
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8008388:	2320      	movs	r3, #32
 800838a:	e003      	b.n	8008394 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800838c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838e:	fab3 f383 	clz	r3, r3
 8008392:	b2db      	uxtb	r3, r3
 8008394:	3301      	adds	r3, #1
 8008396:	f003 031f 	and.w	r3, r3, #31
 800839a:	2101      	movs	r1, #1
 800839c:	fa01 f303 	lsl.w	r3, r1, r3
 80083a0:	ea42 0103 	orr.w	r1, r2, r3
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10d      	bne.n	80083cc <HAL_ADC_ConfigChannel+0x608>
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	0e9b      	lsrs	r3, r3, #26
 80083b6:	3301      	adds	r3, #1
 80083b8:	f003 021f 	and.w	r2, r3, #31
 80083bc:	4613      	mov	r3, r2
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	4413      	add	r3, r2
 80083c2:	3b1e      	subs	r3, #30
 80083c4:	051b      	lsls	r3, r3, #20
 80083c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80083ca:	e01d      	b.n	8008408 <HAL_ADC_ConfigChannel+0x644>
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	fa93 f3a3 	rbit	r3, r3
 80083d8:	613b      	str	r3, [r7, #16]
  return result;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80083e4:	2320      	movs	r3, #32
 80083e6:	e005      	b.n	80083f4 <HAL_ADC_ConfigChannel+0x630>
 80083e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	fab3 f383 	clz	r3, r3
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	3301      	adds	r3, #1
 80083f6:	f003 021f 	and.w	r2, r3, #31
 80083fa:	4613      	mov	r3, r2
 80083fc:	005b      	lsls	r3, r3, #1
 80083fe:	4413      	add	r3, r2
 8008400:	3b1e      	subs	r3, #30
 8008402:	051b      	lsls	r3, r3, #20
 8008404:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008408:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800840e:	4619      	mov	r1, r3
 8008410:	f7ff f9f4 	bl	80077fc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	4b45      	ldr	r3, [pc, #276]	@ (8008530 <HAL_ADC_ConfigChannel+0x76c>)
 800841a:	4013      	ands	r3, r2
 800841c:	2b00      	cmp	r3, #0
 800841e:	d07c      	beq.n	800851a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008420:	4844      	ldr	r0, [pc, #272]	@ (8008534 <HAL_ADC_ConfigChannel+0x770>)
 8008422:	f7ff f949 	bl	80076b8 <LL_ADC_GetCommonPathInternalCh>
 8008426:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800842a:	4843      	ldr	r0, [pc, #268]	@ (8008538 <HAL_ADC_ConfigChannel+0x774>)
 800842c:	f7ff fa98 	bl	8007960 <LL_ADC_IsEnabled>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d15e      	bne.n	80084f4 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a40      	ldr	r2, [pc, #256]	@ (800853c <HAL_ADC_ConfigChannel+0x778>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d127      	bne.n	8008490 <HAL_ADC_ConfigChannel+0x6cc>
 8008440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008444:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d121      	bne.n	8008490 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a39      	ldr	r2, [pc, #228]	@ (8008538 <HAL_ADC_ConfigChannel+0x774>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d161      	bne.n	800851a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800845a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800845e:	4619      	mov	r1, r3
 8008460:	4834      	ldr	r0, [pc, #208]	@ (8008534 <HAL_ADC_ConfigChannel+0x770>)
 8008462:	f7ff f916 	bl	8007692 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008466:	4b36      	ldr	r3, [pc, #216]	@ (8008540 <HAL_ADC_ConfigChannel+0x77c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	099b      	lsrs	r3, r3, #6
 800846c:	4a35      	ldr	r2, [pc, #212]	@ (8008544 <HAL_ADC_ConfigChannel+0x780>)
 800846e:	fba2 2303 	umull	r2, r3, r2, r3
 8008472:	099b      	lsrs	r3, r3, #6
 8008474:	1c5a      	adds	r2, r3, #1
 8008476:	4613      	mov	r3, r2
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8008480:	e002      	b.n	8008488 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	3b01      	subs	r3, #1
 8008486:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1f9      	bne.n	8008482 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800848e:	e044      	b.n	800851a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a2c      	ldr	r2, [pc, #176]	@ (8008548 <HAL_ADC_ConfigChannel+0x784>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d113      	bne.n	80084c2 <HAL_ADC_ConfigChannel+0x6fe>
 800849a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800849e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10d      	bne.n	80084c2 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a23      	ldr	r2, [pc, #140]	@ (8008538 <HAL_ADC_ConfigChannel+0x774>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d134      	bne.n	800851a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80084b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80084b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80084b8:	4619      	mov	r1, r3
 80084ba:	481e      	ldr	r0, [pc, #120]	@ (8008534 <HAL_ADC_ConfigChannel+0x770>)
 80084bc:	f7ff f8e9 	bl	8007692 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80084c0:	e02b      	b.n	800851a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a21      	ldr	r2, [pc, #132]	@ (800854c <HAL_ADC_ConfigChannel+0x788>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d126      	bne.n	800851a <HAL_ADC_ConfigChannel+0x756>
 80084cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80084d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d120      	bne.n	800851a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a16      	ldr	r2, [pc, #88]	@ (8008538 <HAL_ADC_ConfigChannel+0x774>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d11b      	bne.n	800851a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80084e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80084e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80084ea:	4619      	mov	r1, r3
 80084ec:	4811      	ldr	r0, [pc, #68]	@ (8008534 <HAL_ADC_ConfigChannel+0x770>)
 80084ee:	f7ff f8d0 	bl	8007692 <LL_ADC_SetCommonPathInternalCh>
 80084f2:	e012      	b.n	800851a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f8:	f043 0220 	orr.w	r2, r3, #32
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8008506:	e008      	b.n	800851a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850c:	f043 0220 	orr.w	r2, r3, #32
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8008522:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8008526:	4618      	mov	r0, r3
 8008528:	37d8      	adds	r7, #216	@ 0xd8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	80080000 	.word	0x80080000
 8008534:	50040300 	.word	0x50040300
 8008538:	50040000 	.word	0x50040000
 800853c:	c7520000 	.word	0xc7520000
 8008540:	20000034 	.word	0x20000034
 8008544:	053e2d63 	.word	0x053e2d63
 8008548:	cb840000 	.word	0xcb840000
 800854c:	80000001 	.word	0x80000001

08008550 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008558:	2300      	movs	r3, #0
 800855a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4618      	mov	r0, r3
 8008562:	f7ff f9fd 	bl	8007960 <LL_ADC_IsEnabled>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d15e      	bne.n	800862a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689a      	ldr	r2, [r3, #8]
 8008572:	4b30      	ldr	r3, [pc, #192]	@ (8008634 <ADC_Enable+0xe4>)
 8008574:	4013      	ands	r3, r2
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00d      	beq.n	8008596 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800857e:	f043 0210 	orr.w	r2, r3, #16
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800858a:	f043 0201 	orr.w	r2, r3, #1
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e04a      	b.n	800862c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff f9cc 	bl	8007938 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80085a0:	4825      	ldr	r0, [pc, #148]	@ (8008638 <ADC_Enable+0xe8>)
 80085a2:	f7ff f889 	bl	80076b8 <LL_ADC_GetCommonPathInternalCh>
 80085a6:	4603      	mov	r3, r0
 80085a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00f      	beq.n	80085d0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80085b0:	4b22      	ldr	r3, [pc, #136]	@ (800863c <ADC_Enable+0xec>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	099b      	lsrs	r3, r3, #6
 80085b6:	4a22      	ldr	r2, [pc, #136]	@ (8008640 <ADC_Enable+0xf0>)
 80085b8:	fba2 2303 	umull	r2, r3, r2, r3
 80085bc:	099b      	lsrs	r3, r3, #6
 80085be:	3301      	adds	r3, #1
 80085c0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80085c2:	e002      	b.n	80085ca <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1f9      	bne.n	80085c4 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80085d0:	f7ff f828 	bl	8007624 <HAL_GetTick>
 80085d4:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80085d6:	e021      	b.n	800861c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4618      	mov	r0, r3
 80085de:	f7ff f9bf 	bl	8007960 <LL_ADC_IsEnabled>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d104      	bne.n	80085f2 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7ff f9a3 	bl	8007938 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80085f2:	f7ff f817 	bl	8007624 <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d90d      	bls.n	800861c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008604:	f043 0210 	orr.w	r2, r3, #16
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008610:	f043 0201 	orr.w	r2, r3, #1
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e007      	b.n	800862c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b01      	cmp	r3, #1
 8008628:	d1d6      	bne.n	80085d8 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	8000003f 	.word	0x8000003f
 8008638:	50040300 	.word	0x50040300
 800863c:	20000034 	.word	0x20000034
 8008640:	053e2d63 	.word	0x053e2d63

08008644 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008650:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008656:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800865a:	2b00      	cmp	r3, #0
 800865c:	d14b      	bne.n	80086f6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008662:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0308 	and.w	r3, r3, #8
 8008674:	2b00      	cmp	r3, #0
 8008676:	d021      	beq.n	80086bc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4618      	mov	r0, r3
 800867e:	f7ff f87e 	bl	800777e <LL_ADC_REG_IsTriggerSourceSWStart>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d032      	beq.n	80086ee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d12b      	bne.n	80086ee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800869a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d11f      	bne.n	80086ee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086b2:	f043 0201 	orr.w	r2, r3, #1
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80086ba:	e018      	b.n	80086ee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d111      	bne.n	80086ee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d105      	bne.n	80086ee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086e6:	f043 0201 	orr.w	r2, r3, #1
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f7f8 ff0a 	bl	8001508 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80086f4:	e00e      	b.n	8008714 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086fa:	f003 0310 	and.w	r3, r3, #16
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d003      	beq.n	800870a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f7ff fb54 	bl	8007db0 <HAL_ADC_ErrorCallback>
}
 8008708:	e004      	b.n	8008714 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800870e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	4798      	blx	r3
}
 8008714:	bf00      	nop
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008728:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f7ff fb36 	bl	8007d9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008730:	bf00      	nop
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008744:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800874a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008756:	f043 0204 	orr.w	r2, r3, #4
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f7ff fb26 	bl	8007db0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008764:	bf00      	nop
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800877c:	4b0c      	ldr	r3, [pc, #48]	@ (80087b0 <__NVIC_SetPriorityGrouping+0x44>)
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008788:	4013      	ands	r3, r2
 800878a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800879c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800879e:	4a04      	ldr	r2, [pc, #16]	@ (80087b0 <__NVIC_SetPriorityGrouping+0x44>)
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	60d3      	str	r3, [r2, #12]
}
 80087a4:	bf00      	nop
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	e000ed00 	.word	0xe000ed00

080087b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80087b4:	b480      	push	{r7}
 80087b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087b8:	4b04      	ldr	r3, [pc, #16]	@ (80087cc <__NVIC_GetPriorityGrouping+0x18>)
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	0a1b      	lsrs	r3, r3, #8
 80087be:	f003 0307 	and.w	r3, r3, #7
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	e000ed00 	.word	0xe000ed00

080087d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	4603      	mov	r3, r0
 80087d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	db0b      	blt.n	80087fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	f003 021f 	and.w	r2, r3, #31
 80087e8:	4907      	ldr	r1, [pc, #28]	@ (8008808 <__NVIC_EnableIRQ+0x38>)
 80087ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087ee:	095b      	lsrs	r3, r3, #5
 80087f0:	2001      	movs	r0, #1
 80087f2:	fa00 f202 	lsl.w	r2, r0, r2
 80087f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	e000e100 	.word	0xe000e100

0800880c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	4603      	mov	r3, r0
 8008814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800881a:	2b00      	cmp	r3, #0
 800881c:	db12      	blt.n	8008844 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	f003 021f 	and.w	r2, r3, #31
 8008824:	490a      	ldr	r1, [pc, #40]	@ (8008850 <__NVIC_DisableIRQ+0x44>)
 8008826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800882a:	095b      	lsrs	r3, r3, #5
 800882c:	2001      	movs	r0, #1
 800882e:	fa00 f202 	lsl.w	r2, r0, r2
 8008832:	3320      	adds	r3, #32
 8008834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008838:	f3bf 8f4f 	dsb	sy
}
 800883c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800883e:	f3bf 8f6f 	isb	sy
}
 8008842:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	e000e100 	.word	0xe000e100

08008854 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800885e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008862:	2b00      	cmp	r3, #0
 8008864:	db0c      	blt.n	8008880 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008866:	79fb      	ldrb	r3, [r7, #7]
 8008868:	f003 021f 	and.w	r2, r3, #31
 800886c:	4907      	ldr	r1, [pc, #28]	@ (800888c <__NVIC_SetPendingIRQ+0x38>)
 800886e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008872:	095b      	lsrs	r3, r3, #5
 8008874:	2001      	movs	r0, #1
 8008876:	fa00 f202 	lsl.w	r2, r0, r2
 800887a:	3340      	adds	r3, #64	@ 0x40
 800887c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	e000e100 	.word	0xe000e100

08008890 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800889a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	db0c      	blt.n	80088bc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088a2:	79fb      	ldrb	r3, [r7, #7]
 80088a4:	f003 021f 	and.w	r2, r3, #31
 80088a8:	4907      	ldr	r1, [pc, #28]	@ (80088c8 <__NVIC_ClearPendingIRQ+0x38>)
 80088aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088ae:	095b      	lsrs	r3, r3, #5
 80088b0:	2001      	movs	r0, #1
 80088b2:	fa00 f202 	lsl.w	r2, r0, r2
 80088b6:	3360      	adds	r3, #96	@ 0x60
 80088b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	e000e100 	.word	0xe000e100

080088cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	4603      	mov	r3, r0
 80088d4:	6039      	str	r1, [r7, #0]
 80088d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	db0a      	blt.n	80088f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	490c      	ldr	r1, [pc, #48]	@ (8008918 <__NVIC_SetPriority+0x4c>)
 80088e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088ea:	0112      	lsls	r2, r2, #4
 80088ec:	b2d2      	uxtb	r2, r2
 80088ee:	440b      	add	r3, r1
 80088f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80088f4:	e00a      	b.n	800890c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	4908      	ldr	r1, [pc, #32]	@ (800891c <__NVIC_SetPriority+0x50>)
 80088fc:	79fb      	ldrb	r3, [r7, #7]
 80088fe:	f003 030f 	and.w	r3, r3, #15
 8008902:	3b04      	subs	r3, #4
 8008904:	0112      	lsls	r2, r2, #4
 8008906:	b2d2      	uxtb	r2, r2
 8008908:	440b      	add	r3, r1
 800890a:	761a      	strb	r2, [r3, #24]
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	e000e100 	.word	0xe000e100
 800891c:	e000ed00 	.word	0xe000ed00

08008920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008920:	b480      	push	{r7}
 8008922:	b089      	sub	sp, #36	@ 0x24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	f1c3 0307 	rsb	r3, r3, #7
 800893a:	2b04      	cmp	r3, #4
 800893c:	bf28      	it	cs
 800893e:	2304      	movcs	r3, #4
 8008940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	3304      	adds	r3, #4
 8008946:	2b06      	cmp	r3, #6
 8008948:	d902      	bls.n	8008950 <NVIC_EncodePriority+0x30>
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	3b03      	subs	r3, #3
 800894e:	e000      	b.n	8008952 <NVIC_EncodePriority+0x32>
 8008950:	2300      	movs	r3, #0
 8008952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008954:	f04f 32ff 	mov.w	r2, #4294967295
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	fa02 f303 	lsl.w	r3, r2, r3
 800895e:	43da      	mvns	r2, r3
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	401a      	ands	r2, r3
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008968:	f04f 31ff 	mov.w	r1, #4294967295
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	fa01 f303 	lsl.w	r3, r1, r3
 8008972:	43d9      	mvns	r1, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008978:	4313      	orrs	r3, r2
         );
}
 800897a:	4618      	mov	r0, r3
 800897c:	3724      	adds	r7, #36	@ 0x24
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
	...

08008988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3b01      	subs	r3, #1
 8008994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008998:	d301      	bcc.n	800899e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800899a:	2301      	movs	r3, #1
 800899c:	e00f      	b.n	80089be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800899e:	4a0a      	ldr	r2, [pc, #40]	@ (80089c8 <SysTick_Config+0x40>)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80089a6:	210f      	movs	r1, #15
 80089a8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ac:	f7ff ff8e 	bl	80088cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80089b0:	4b05      	ldr	r3, [pc, #20]	@ (80089c8 <SysTick_Config+0x40>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80089b6:	4b04      	ldr	r3, [pc, #16]	@ (80089c8 <SysTick_Config+0x40>)
 80089b8:	2207      	movs	r2, #7
 80089ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	e000e010 	.word	0xe000e010

080089cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f7ff fec9 	bl	800876c <__NVIC_SetPriorityGrouping>
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b086      	sub	sp, #24
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	4603      	mov	r3, r0
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
 80089ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80089f0:	f7ff fee0 	bl	80087b4 <__NVIC_GetPriorityGrouping>
 80089f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	68b9      	ldr	r1, [r7, #8]
 80089fa:	6978      	ldr	r0, [r7, #20]
 80089fc:	f7ff ff90 	bl	8008920 <NVIC_EncodePriority>
 8008a00:	4602      	mov	r2, r0
 8008a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a06:	4611      	mov	r1, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7ff ff5f 	bl	80088cc <__NVIC_SetPriority>
}
 8008a0e:	bf00      	nop
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7ff fed3 	bl	80087d0 <__NVIC_EnableIRQ>
}
 8008a2a:	bf00      	nop
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	4603      	mov	r3, r0
 8008a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7ff fee3 	bl	800880c <__NVIC_DisableIRQ>
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7ff ff96 	bl	8008988 <SysTick_Config>
 8008a5c:	4603      	mov	r3, r0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b082      	sub	sp, #8
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8008a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7ff feed 	bl	8008854 <__NVIC_SetPendingIRQ>
}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	4603      	mov	r3, r0
 8008a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8008a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7ff fefd 	bl	8008890 <__NVIC_ClearPendingIRQ>
}
 8008a96:	bf00      	nop
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e08e      	b.n	8008bd0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	4b47      	ldr	r3, [pc, #284]	@ (8008bd8 <HAL_DMA_Init+0x138>)
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d80f      	bhi.n	8008ade <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	4b45      	ldr	r3, [pc, #276]	@ (8008bdc <HAL_DMA_Init+0x13c>)
 8008ac6:	4413      	add	r3, r2
 8008ac8:	4a45      	ldr	r2, [pc, #276]	@ (8008be0 <HAL_DMA_Init+0x140>)
 8008aca:	fba2 2303 	umull	r2, r3, r2, r3
 8008ace:	091b      	lsrs	r3, r3, #4
 8008ad0:	009a      	lsls	r2, r3, #2
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a42      	ldr	r2, [pc, #264]	@ (8008be4 <HAL_DMA_Init+0x144>)
 8008ada:	641a      	str	r2, [r3, #64]	@ 0x40
 8008adc:	e00e      	b.n	8008afc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	4b40      	ldr	r3, [pc, #256]	@ (8008be8 <HAL_DMA_Init+0x148>)
 8008ae6:	4413      	add	r3, r2
 8008ae8:	4a3d      	ldr	r2, [pc, #244]	@ (8008be0 <HAL_DMA_Init+0x140>)
 8008aea:	fba2 2303 	umull	r2, r3, r2, r3
 8008aee:	091b      	lsrs	r3, r3, #4
 8008af0:	009a      	lsls	r2, r3, #2
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a3c      	ldr	r2, [pc, #240]	@ (8008bec <HAL_DMA_Init+0x14c>)
 8008afa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fa80 	bl	8009054 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b5c:	d102      	bne.n	8008b64 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b6c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008b70:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008b7a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d010      	beq.n	8008ba6 <HAL_DMA_Init+0x106>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d80c      	bhi.n	8008ba6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fa9f 	bl	80090d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b96:	2200      	movs	r2, #0
 8008b98:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008ba2:	605a      	str	r2, [r3, #4]
 8008ba4:	e008      	b.n	8008bb8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	40020407 	.word	0x40020407
 8008bdc:	bffdfff8 	.word	0xbffdfff8
 8008be0:	cccccccd 	.word	0xcccccccd
 8008be4:	40020000 	.word	0x40020000
 8008be8:	bffdfbf8 	.word	0xbffdfbf8
 8008bec:	40020400 	.word	0x40020400

08008bf0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d101      	bne.n	8008c10 <HAL_DMA_Start_IT+0x20>
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	e066      	b.n	8008cde <HAL_DMA_Start_IT+0xee>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d155      	bne.n	8008cd0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2202      	movs	r2, #2
 8008c28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f022 0201 	bic.w	r2, r2, #1
 8008c40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	68b9      	ldr	r1, [r7, #8]
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 f9c5 	bl	8008fd8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d008      	beq.n	8008c68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f042 020e 	orr.w	r2, r2, #14
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	e00f      	b.n	8008c88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 0204 	bic.w	r2, r2, #4
 8008c76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 020a 	orr.w	r2, r2, #10
 8008c86:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d007      	beq.n	8008ca6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ca4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d007      	beq.n	8008cbe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008cbc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f042 0201 	orr.w	r2, r2, #1
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	e005      	b.n	8008cdc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008cd8:	2302      	movs	r3, #2
 8008cda:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b083      	sub	sp, #12
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e04f      	b.n	8008d98 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d008      	beq.n	8008d16 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2204      	movs	r2, #4
 8008d08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e040      	b.n	8008d98 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f022 020e 	bic.w	r2, r2, #14
 8008d24:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f022 0201 	bic.w	r2, r2, #1
 8008d44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d4a:	f003 021c 	and.w	r2, r3, #28
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d52:	2101      	movs	r1, #1
 8008d54:	fa01 f202 	lsl.w	r2, r1, r2
 8008d58:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008d62:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00c      	beq.n	8008d86 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008d84:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d005      	beq.n	8008dc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2204      	movs	r2, #4
 8008dc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	73fb      	strb	r3, [r7, #15]
 8008dc6:	e047      	b.n	8008e58 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f022 020e 	bic.w	r2, r2, #14
 8008dd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0201 	bic.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008df2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008df6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dfc:	f003 021c 	and.w	r2, r3, #28
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e04:	2101      	movs	r1, #1
 8008e06:	fa01 f202 	lsl.w	r2, r1, r2
 8008e0a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008e14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00c      	beq.n	8008e38 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008e36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	4798      	blx	r3
    }
  }
  return status;
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e7e:	f003 031c 	and.w	r3, r3, #28
 8008e82:	2204      	movs	r2, #4
 8008e84:	409a      	lsls	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d026      	beq.n	8008edc <HAL_DMA_IRQHandler+0x7a>
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d021      	beq.n	8008edc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0320 	and.w	r3, r3, #32
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d107      	bne.n	8008eb6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f022 0204 	bic.w	r2, r2, #4
 8008eb4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eba:	f003 021c 	and.w	r2, r3, #28
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec2:	2104      	movs	r1, #4
 8008ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8008ec8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d071      	beq.n	8008fb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008eda:	e06c      	b.n	8008fb6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ee0:	f003 031c 	and.w	r3, r3, #28
 8008ee4:	2202      	movs	r2, #2
 8008ee6:	409a      	lsls	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4013      	ands	r3, r2
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d02e      	beq.n	8008f4e <HAL_DMA_IRQHandler+0xec>
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	f003 0302 	and.w	r3, r3, #2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d029      	beq.n	8008f4e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0320 	and.w	r3, r3, #32
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10b      	bne.n	8008f20 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 020a 	bic.w	r2, r2, #10
 8008f16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f24:	f003 021c 	and.w	r2, r3, #28
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f2c:	2102      	movs	r1, #2
 8008f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8008f32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d038      	beq.n	8008fb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008f4c:	e033      	b.n	8008fb6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f52:	f003 031c 	and.w	r3, r3, #28
 8008f56:	2208      	movs	r2, #8
 8008f58:	409a      	lsls	r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d02a      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x156>
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f003 0308 	and.w	r3, r3, #8
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d025      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 020e 	bic.w	r2, r2, #14
 8008f7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f80:	f003 021c 	and.w	r2, r3, #28
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f88:	2101      	movs	r1, #1
 8008f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8008f8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d004      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008fb6:	bf00      	nop
 8008fb8:	bf00      	nop
}
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008fee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d004      	beq.n	8009002 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009000:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009006:	f003 021c 	and.w	r2, r3, #28
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800900e:	2101      	movs	r1, #1
 8009010:	fa01 f202 	lsl.w	r2, r1, r2
 8009014:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	2b10      	cmp	r3, #16
 8009024:	d108      	bne.n	8009038 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009036:	e007      	b.n	8009048 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	60da      	str	r2, [r3, #12]
}
 8009048:	bf00      	nop
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	461a      	mov	r2, r3
 8009062:	4b17      	ldr	r3, [pc, #92]	@ (80090c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009064:	429a      	cmp	r2, r3
 8009066:	d80a      	bhi.n	800907e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800906c:	089b      	lsrs	r3, r3, #2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009074:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	6493      	str	r3, [r2, #72]	@ 0x48
 800907c:	e007      	b.n	800908e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009082:	089b      	lsrs	r3, r3, #2
 8009084:	009a      	lsls	r2, r3, #2
 8009086:	4b0f      	ldr	r3, [pc, #60]	@ (80090c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009088:	4413      	add	r3, r2
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	b2db      	uxtb	r3, r3
 8009094:	3b08      	subs	r3, #8
 8009096:	4a0c      	ldr	r2, [pc, #48]	@ (80090c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009098:	fba2 2303 	umull	r2, r3, r2, r3
 800909c:	091b      	lsrs	r3, r3, #4
 800909e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a0a      	ldr	r2, [pc, #40]	@ (80090cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80090a4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f003 031f 	and.w	r3, r3, #31
 80090ac:	2201      	movs	r2, #1
 80090ae:	409a      	lsls	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80090b4:	bf00      	nop
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	40020407 	.word	0x40020407
 80090c4:	4002081c 	.word	0x4002081c
 80090c8:	cccccccd 	.word	0xcccccccd
 80090cc:	40020880 	.word	0x40020880

080090d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090e0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80090e6:	4413      	add	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	461a      	mov	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a09      	ldr	r2, [pc, #36]	@ (8009118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80090f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	f003 0303 	and.w	r3, r3, #3
 80090fe:	2201      	movs	r2, #1
 8009100:	409a      	lsls	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8009106:	bf00      	nop
 8009108:	3714      	adds	r7, #20
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	1000823f 	.word	0x1000823f
 8009118:	40020940 	.word	0x40020940

0800911c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800911c:	b480      	push	{r7}
 800911e:	b087      	sub	sp, #28
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009126:	2300      	movs	r3, #0
 8009128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800912a:	e14c      	b.n	80093c6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	2101      	movs	r1, #1
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	fa01 f303 	lsl.w	r3, r1, r3
 8009138:	4013      	ands	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	f000 813e 	beq.w	80093c0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f003 0303 	and.w	r3, r3, #3
 800914c:	2b01      	cmp	r3, #1
 800914e:	d005      	beq.n	800915c <HAL_GPIO_Init+0x40>
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	f003 0303 	and.w	r3, r3, #3
 8009158:	2b02      	cmp	r3, #2
 800915a:	d130      	bne.n	80091be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	005b      	lsls	r3, r3, #1
 8009166:	2203      	movs	r2, #3
 8009168:	fa02 f303 	lsl.w	r3, r2, r3
 800916c:	43db      	mvns	r3, r3
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	4013      	ands	r3, r2
 8009172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	005b      	lsls	r3, r3, #1
 800917c:	fa02 f303 	lsl.w	r3, r2, r3
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	4313      	orrs	r3, r2
 8009184:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009192:	2201      	movs	r2, #1
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	fa02 f303 	lsl.w	r3, r2, r3
 800919a:	43db      	mvns	r3, r3
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	4013      	ands	r3, r2
 80091a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	091b      	lsrs	r3, r3, #4
 80091a8:	f003 0201 	and.w	r2, r3, #1
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	fa02 f303 	lsl.w	r3, r2, r3
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f003 0303 	and.w	r3, r3, #3
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d017      	beq.n	80091fa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	2203      	movs	r2, #3
 80091d6:	fa02 f303 	lsl.w	r3, r2, r3
 80091da:	43db      	mvns	r3, r3
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	4013      	ands	r3, r2
 80091e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	689a      	ldr	r2, [r3, #8]
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	fa02 f303 	lsl.w	r3, r2, r3
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f003 0303 	and.w	r3, r3, #3
 8009202:	2b02      	cmp	r3, #2
 8009204:	d123      	bne.n	800924e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	08da      	lsrs	r2, r3, #3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	3208      	adds	r2, #8
 800920e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009212:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	f003 0307 	and.w	r3, r3, #7
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	220f      	movs	r2, #15
 800921e:	fa02 f303 	lsl.w	r3, r2, r3
 8009222:	43db      	mvns	r3, r3
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	4013      	ands	r3, r2
 8009228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	691a      	ldr	r2, [r3, #16]
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f003 0307 	and.w	r3, r3, #7
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	fa02 f303 	lsl.w	r3, r2, r3
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	4313      	orrs	r3, r2
 800923e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	08da      	lsrs	r2, r3, #3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	3208      	adds	r2, #8
 8009248:	6939      	ldr	r1, [r7, #16]
 800924a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	005b      	lsls	r3, r3, #1
 8009258:	2203      	movs	r2, #3
 800925a:	fa02 f303 	lsl.w	r3, r2, r3
 800925e:	43db      	mvns	r3, r3
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	4013      	ands	r3, r2
 8009264:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f003 0203 	and.w	r2, r3, #3
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	005b      	lsls	r3, r3, #1
 8009272:	fa02 f303 	lsl.w	r3, r2, r3
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	4313      	orrs	r3, r2
 800927a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 8098 	beq.w	80093c0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8009290:	4a54      	ldr	r2, [pc, #336]	@ (80093e4 <HAL_GPIO_Init+0x2c8>)
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	089b      	lsrs	r3, r3, #2
 8009296:	3302      	adds	r3, #2
 8009298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800929c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f003 0303 	and.w	r3, r3, #3
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	220f      	movs	r2, #15
 80092a8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ac:	43db      	mvns	r3, r3
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	4013      	ands	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80092ba:	d019      	beq.n	80092f0 <HAL_GPIO_Init+0x1d4>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a4a      	ldr	r2, [pc, #296]	@ (80093e8 <HAL_GPIO_Init+0x2cc>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d013      	beq.n	80092ec <HAL_GPIO_Init+0x1d0>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a49      	ldr	r2, [pc, #292]	@ (80093ec <HAL_GPIO_Init+0x2d0>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d00d      	beq.n	80092e8 <HAL_GPIO_Init+0x1cc>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a48      	ldr	r2, [pc, #288]	@ (80093f0 <HAL_GPIO_Init+0x2d4>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d007      	beq.n	80092e4 <HAL_GPIO_Init+0x1c8>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a47      	ldr	r2, [pc, #284]	@ (80093f4 <HAL_GPIO_Init+0x2d8>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d101      	bne.n	80092e0 <HAL_GPIO_Init+0x1c4>
 80092dc:	2304      	movs	r3, #4
 80092de:	e008      	b.n	80092f2 <HAL_GPIO_Init+0x1d6>
 80092e0:	2307      	movs	r3, #7
 80092e2:	e006      	b.n	80092f2 <HAL_GPIO_Init+0x1d6>
 80092e4:	2303      	movs	r3, #3
 80092e6:	e004      	b.n	80092f2 <HAL_GPIO_Init+0x1d6>
 80092e8:	2302      	movs	r3, #2
 80092ea:	e002      	b.n	80092f2 <HAL_GPIO_Init+0x1d6>
 80092ec:	2301      	movs	r3, #1
 80092ee:	e000      	b.n	80092f2 <HAL_GPIO_Init+0x1d6>
 80092f0:	2300      	movs	r3, #0
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	f002 0203 	and.w	r2, r2, #3
 80092f8:	0092      	lsls	r2, r2, #2
 80092fa:	4093      	lsls	r3, r2
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	4313      	orrs	r3, r2
 8009300:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009302:	4938      	ldr	r1, [pc, #224]	@ (80093e4 <HAL_GPIO_Init+0x2c8>)
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	089b      	lsrs	r3, r3, #2
 8009308:	3302      	adds	r3, #2
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009310:	4b39      	ldr	r3, [pc, #228]	@ (80093f8 <HAL_GPIO_Init+0x2dc>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	43db      	mvns	r3, r3
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	4013      	ands	r3, r2
 800931e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d003      	beq.n	8009334 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	4313      	orrs	r3, r2
 8009332:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009334:	4a30      	ldr	r2, [pc, #192]	@ (80093f8 <HAL_GPIO_Init+0x2dc>)
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800933a:	4b2f      	ldr	r3, [pc, #188]	@ (80093f8 <HAL_GPIO_Init+0x2dc>)
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	43db      	mvns	r3, r3
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	4013      	ands	r3, r2
 8009348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4313      	orrs	r3, r2
 800935c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800935e:	4a26      	ldr	r2, [pc, #152]	@ (80093f8 <HAL_GPIO_Init+0x2dc>)
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009364:	4b24      	ldr	r3, [pc, #144]	@ (80093f8 <HAL_GPIO_Init+0x2dc>)
 8009366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800936a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	43db      	mvns	r3, r3
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	4013      	ands	r3, r2
 8009374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d003      	beq.n	800938a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4313      	orrs	r3, r2
 8009388:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800938a:	4a1b      	ldr	r2, [pc, #108]	@ (80093f8 <HAL_GPIO_Init+0x2dc>)
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8009392:	4b19      	ldr	r3, [pc, #100]	@ (80093f8 <HAL_GPIO_Init+0x2dc>)
 8009394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	43db      	mvns	r3, r3
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	4013      	ands	r3, r2
 80093a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80093b8:	4a0f      	ldr	r2, [pc, #60]	@ (80093f8 <HAL_GPIO_Init+0x2dc>)
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	3301      	adds	r3, #1
 80093c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	fa22 f303 	lsr.w	r3, r2, r3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f47f aeab 	bne.w	800912c <HAL_GPIO_Init+0x10>
  }
}
 80093d6:	bf00      	nop
 80093d8:	bf00      	nop
 80093da:	371c      	adds	r7, #28
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr
 80093e4:	40010000 	.word	0x40010000
 80093e8:	48000400 	.word	0x48000400
 80093ec:	48000800 	.word	0x48000800
 80093f0:	48000c00 	.word	0x48000c00
 80093f4:	48001000 	.word	0x48001000
 80093f8:	58000800 	.word	0x58000800

080093fc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	691a      	ldr	r2, [r3, #16]
 800940c:	887b      	ldrh	r3, [r7, #2]
 800940e:	4013      	ands	r3, r2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009414:	2301      	movs	r3, #1
 8009416:	73fb      	strb	r3, [r7, #15]
 8009418:	e001      	b.n	800941e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800941a:	2300      	movs	r3, #0
 800941c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800941e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	807b      	strh	r3, [r7, #2]
 8009438:	4613      	mov	r3, r2
 800943a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800943c:	787b      	ldrb	r3, [r7, #1]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d003      	beq.n	800944a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009442:	887a      	ldrh	r2, [r7, #2]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009448:	e002      	b.n	8009450 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800944a:	887a      	ldrh	r2, [r7, #2]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800946e:	887a      	ldrh	r2, [r7, #2]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4013      	ands	r3, r2
 8009474:	041a      	lsls	r2, r3, #16
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	43d9      	mvns	r1, r3
 800947a:	887b      	ldrh	r3, [r7, #2]
 800947c:	400b      	ands	r3, r1
 800947e:	431a      	orrs	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	619a      	str	r2, [r3, #24]
}
 8009484:	bf00      	nop
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800949a:	4b08      	ldr	r3, [pc, #32]	@ (80094bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	4013      	ands	r3, r2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d006      	beq.n	80094b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80094a6:	4a05      	ldr	r2, [pc, #20]	@ (80094bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80094a8:	88fb      	ldrh	r3, [r7, #6]
 80094aa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80094ac:	88fb      	ldrh	r3, [r7, #6]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7f9 fbcc 	bl	8002c4c <HAL_GPIO_EXTI_Callback>
  }
}
 80094b4:	bf00      	nop
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	58000800 	.word	0x58000800

080094c0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80094c6:	4b0a      	ldr	r3, [pc, #40]	@ (80094f0 <HAL_HSEM_IRQHandler+0x30>)
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80094cc:	4b08      	ldr	r3, [pc, #32]	@ (80094f0 <HAL_HSEM_IRQHandler+0x30>)
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	43db      	mvns	r3, r3
 80094d4:	4906      	ldr	r1, [pc, #24]	@ (80094f0 <HAL_HSEM_IRQHandler+0x30>)
 80094d6:	4013      	ands	r3, r2
 80094d8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80094da:	4a05      	ldr	r2, [pc, #20]	@ (80094f0 <HAL_HSEM_IRQHandler+0x30>)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f807 	bl	80094f4 <HAL_HSEM_FreeCallback>
}
 80094e6:	bf00      	nop
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	58001500 	.word	0x58001500

080094f4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e08d      	b.n	8009636 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b00      	cmp	r3, #0
 8009524:	d106      	bne.n	8009534 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7f9 fa98 	bl	8002a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2224      	movs	r2, #36	@ 0x24
 8009538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 0201 	bic.w	r2, r2, #1
 800954a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009558:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	689a      	ldr	r2, [r3, #8]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009568:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d107      	bne.n	8009582 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800957e:	609a      	str	r2, [r3, #8]
 8009580:	e006      	b.n	8009590 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800958e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	2b02      	cmp	r3, #2
 8009596:	d108      	bne.n	80095aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095a6:	605a      	str	r2, [r3, #4]
 80095a8:	e007      	b.n	80095ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80095b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	6812      	ldr	r2, [r2, #0]
 80095c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80095c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68da      	ldr	r2, [r3, #12]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80095dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	691a      	ldr	r2, [r3, #16]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	69d9      	ldr	r1, [r3, #28]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a1a      	ldr	r2, [r3, #32]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	430a      	orrs	r2, r1
 8009606:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0201 	orr.w	r2, r2, #1
 8009616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2220      	movs	r2, #32
 8009622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b088      	sub	sp, #32
 8009644:	af02      	add	r7, sp, #8
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	4608      	mov	r0, r1
 800964a:	4611      	mov	r1, r2
 800964c:	461a      	mov	r2, r3
 800964e:	4603      	mov	r3, r0
 8009650:	817b      	strh	r3, [r7, #10]
 8009652:	460b      	mov	r3, r1
 8009654:	813b      	strh	r3, [r7, #8]
 8009656:	4613      	mov	r3, r2
 8009658:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2b20      	cmp	r3, #32
 8009664:	f040 80f9 	bne.w	800985a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d002      	beq.n	8009674 <HAL_I2C_Mem_Write+0x34>
 800966e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009670:	2b00      	cmp	r3, #0
 8009672:	d105      	bne.n	8009680 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800967a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e0ed      	b.n	800985c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009686:	2b01      	cmp	r3, #1
 8009688:	d101      	bne.n	800968e <HAL_I2C_Mem_Write+0x4e>
 800968a:	2302      	movs	r3, #2
 800968c:	e0e6      	b.n	800985c <HAL_I2C_Mem_Write+0x21c>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009696:	f7fd ffc5 	bl	8007624 <HAL_GetTick>
 800969a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	2319      	movs	r3, #25
 80096a2:	2201      	movs	r2, #1
 80096a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 fac3 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e0d1      	b.n	800985c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2221      	movs	r2, #33	@ 0x21
 80096bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2240      	movs	r2, #64	@ 0x40
 80096c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6a3a      	ldr	r2, [r7, #32]
 80096d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80096d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80096e0:	88f8      	ldrh	r0, [r7, #6]
 80096e2:	893a      	ldrh	r2, [r7, #8]
 80096e4:	8979      	ldrh	r1, [r7, #10]
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	4603      	mov	r3, r0
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 f9d3 	bl	8009a9c <I2C_RequestMemoryWrite>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d005      	beq.n	8009708 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e0a9      	b.n	800985c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800970c:	b29b      	uxth	r3, r3
 800970e:	2bff      	cmp	r3, #255	@ 0xff
 8009710:	d90e      	bls.n	8009730 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	22ff      	movs	r2, #255	@ 0xff
 8009716:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800971c:	b2da      	uxtb	r2, r3
 800971e:	8979      	ldrh	r1, [r7, #10]
 8009720:	2300      	movs	r3, #0
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f000 fc47 	bl	8009fbc <I2C_TransferConfig>
 800972e:	e00f      	b.n	8009750 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009734:	b29a      	uxth	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800973e:	b2da      	uxtb	r2, r3
 8009740:	8979      	ldrh	r1, [r7, #10]
 8009742:	2300      	movs	r3, #0
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f000 fc36 	bl	8009fbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f000 fac6 	bl	8009ce6 <I2C_WaitOnTXISFlagUntilTimeout>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e07b      	b.n	800985c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009768:	781a      	ldrb	r2, [r3, #0]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800977e:	b29b      	uxth	r3, r3
 8009780:	3b01      	subs	r3, #1
 8009782:	b29a      	uxth	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800978c:	3b01      	subs	r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009798:	b29b      	uxth	r3, r3
 800979a:	2b00      	cmp	r3, #0
 800979c:	d034      	beq.n	8009808 <HAL_I2C_Mem_Write+0x1c8>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d130      	bne.n	8009808 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ac:	2200      	movs	r2, #0
 80097ae:	2180      	movs	r1, #128	@ 0x80
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 fa3f 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e04d      	b.n	800985c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	2bff      	cmp	r3, #255	@ 0xff
 80097c8:	d90e      	bls.n	80097e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	22ff      	movs	r2, #255	@ 0xff
 80097ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	8979      	ldrh	r1, [r7, #10]
 80097d8:	2300      	movs	r3, #0
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f000 fbeb 	bl	8009fbc <I2C_TransferConfig>
 80097e6:	e00f      	b.n	8009808 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	8979      	ldrh	r1, [r7, #10]
 80097fa:	2300      	movs	r3, #0
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 fbda 	bl	8009fbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800980c:	b29b      	uxth	r3, r3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d19e      	bne.n	8009750 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 faac 	bl	8009d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e01a      	b.n	800985c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2220      	movs	r2, #32
 800982c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6859      	ldr	r1, [r3, #4]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	4b0a      	ldr	r3, [pc, #40]	@ (8009864 <HAL_I2C_Mem_Write+0x224>)
 800983a:	400b      	ands	r3, r1
 800983c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2220      	movs	r2, #32
 8009842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	e000      	b.n	800985c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800985a:	2302      	movs	r3, #2
  }
}
 800985c:	4618      	mov	r0, r3
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	fe00e800 	.word	0xfe00e800

08009868 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af02      	add	r7, sp, #8
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	4608      	mov	r0, r1
 8009872:	4611      	mov	r1, r2
 8009874:	461a      	mov	r2, r3
 8009876:	4603      	mov	r3, r0
 8009878:	817b      	strh	r3, [r7, #10]
 800987a:	460b      	mov	r3, r1
 800987c:	813b      	strh	r3, [r7, #8]
 800987e:	4613      	mov	r3, r2
 8009880:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b20      	cmp	r3, #32
 800988c:	f040 80fd 	bne.w	8009a8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <HAL_I2C_Mem_Read+0x34>
 8009896:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009898:	2b00      	cmp	r3, #0
 800989a:	d105      	bne.n	80098a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e0f1      	b.n	8009a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d101      	bne.n	80098b6 <HAL_I2C_Mem_Read+0x4e>
 80098b2:	2302      	movs	r3, #2
 80098b4:	e0ea      	b.n	8009a8c <HAL_I2C_Mem_Read+0x224>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80098be:	f7fd feb1 	bl	8007624 <HAL_GetTick>
 80098c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	2319      	movs	r3, #25
 80098ca:	2201      	movs	r2, #1
 80098cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f000 f9af 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	e0d5      	b.n	8009a8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2222      	movs	r2, #34	@ 0x22
 80098e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2240      	movs	r2, #64	@ 0x40
 80098ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6a3a      	ldr	r2, [r7, #32]
 80098fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009900:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009908:	88f8      	ldrh	r0, [r7, #6]
 800990a:	893a      	ldrh	r2, [r7, #8]
 800990c:	8979      	ldrh	r1, [r7, #10]
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	9301      	str	r3, [sp, #4]
 8009912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	4603      	mov	r3, r0
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 f913 	bl	8009b44 <I2C_RequestMemoryRead>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d005      	beq.n	8009930 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e0ad      	b.n	8009a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009934:	b29b      	uxth	r3, r3
 8009936:	2bff      	cmp	r3, #255	@ 0xff
 8009938:	d90e      	bls.n	8009958 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	22ff      	movs	r2, #255	@ 0xff
 800993e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009944:	b2da      	uxtb	r2, r3
 8009946:	8979      	ldrh	r1, [r7, #10]
 8009948:	4b52      	ldr	r3, [pc, #328]	@ (8009a94 <HAL_I2C_Mem_Read+0x22c>)
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fb33 	bl	8009fbc <I2C_TransferConfig>
 8009956:	e00f      	b.n	8009978 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800995c:	b29a      	uxth	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009966:	b2da      	uxtb	r2, r3
 8009968:	8979      	ldrh	r1, [r7, #10]
 800996a:	4b4a      	ldr	r3, [pc, #296]	@ (8009a94 <HAL_I2C_Mem_Read+0x22c>)
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 fb22 	bl	8009fbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997e:	2200      	movs	r2, #0
 8009980:	2104      	movs	r1, #4
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f000 f956 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	e07c      	b.n	8009a8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999c:	b2d2      	uxtb	r2, r2
 800999e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a4:	1c5a      	adds	r2, r3, #1
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099ae:	3b01      	subs	r3, #1
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	3b01      	subs	r3, #1
 80099be:	b29a      	uxth	r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d034      	beq.n	8009a38 <HAL_I2C_Mem_Read+0x1d0>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d130      	bne.n	8009a38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099dc:	2200      	movs	r2, #0
 80099de:	2180      	movs	r1, #128	@ 0x80
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	f000 f927 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e04d      	b.n	8009a8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	2bff      	cmp	r3, #255	@ 0xff
 80099f8:	d90e      	bls.n	8009a18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	22ff      	movs	r2, #255	@ 0xff
 80099fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	8979      	ldrh	r1, [r7, #10]
 8009a08:	2300      	movs	r3, #0
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f000 fad3 	bl	8009fbc <I2C_TransferConfig>
 8009a16:	e00f      	b.n	8009a38 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	8979      	ldrh	r1, [r7, #10]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 fac2 	bl	8009fbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d19a      	bne.n	8009978 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f000 f994 	bl	8009d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e01a      	b.n	8009a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2220      	movs	r2, #32
 8009a5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6859      	ldr	r1, [r3, #4]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	4b0b      	ldr	r3, [pc, #44]	@ (8009a98 <HAL_I2C_Mem_Read+0x230>)
 8009a6a:	400b      	ands	r3, r1
 8009a6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2220      	movs	r2, #32
 8009a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	e000      	b.n	8009a8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009a8a:	2302      	movs	r3, #2
  }
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3718      	adds	r7, #24
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	80002400 	.word	0x80002400
 8009a98:	fe00e800 	.word	0xfe00e800

08009a9c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	4608      	mov	r0, r1
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4603      	mov	r3, r0
 8009aac:	817b      	strh	r3, [r7, #10]
 8009aae:	460b      	mov	r3, r1
 8009ab0:	813b      	strh	r3, [r7, #8]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009ab6:	88fb      	ldrh	r3, [r7, #6]
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	8979      	ldrh	r1, [r7, #10]
 8009abc:	4b20      	ldr	r3, [pc, #128]	@ (8009b40 <I2C_RequestMemoryWrite+0xa4>)
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f000 fa79 	bl	8009fbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aca:	69fa      	ldr	r2, [r7, #28]
 8009acc:	69b9      	ldr	r1, [r7, #24]
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 f909 	bl	8009ce6 <I2C_WaitOnTXISFlagUntilTimeout>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e02c      	b.n	8009b38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ade:	88fb      	ldrh	r3, [r7, #6]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d105      	bne.n	8009af0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009ae4:	893b      	ldrh	r3, [r7, #8]
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	629a      	str	r2, [r3, #40]	@ 0x28
 8009aee:	e015      	b.n	8009b1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009af0:	893b      	ldrh	r3, [r7, #8]
 8009af2:	0a1b      	lsrs	r3, r3, #8
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009afe:	69fa      	ldr	r2, [r7, #28]
 8009b00:	69b9      	ldr	r1, [r7, #24]
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 f8ef 	bl	8009ce6 <I2C_WaitOnTXISFlagUntilTimeout>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e012      	b.n	8009b38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b12:	893b      	ldrh	r3, [r7, #8]
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	2200      	movs	r2, #0
 8009b24:	2180      	movs	r1, #128	@ 0x80
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f000 f884 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e000      	b.n	8009b38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	80002000 	.word	0x80002000

08009b44 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af02      	add	r7, sp, #8
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	4608      	mov	r0, r1
 8009b4e:	4611      	mov	r1, r2
 8009b50:	461a      	mov	r2, r3
 8009b52:	4603      	mov	r3, r0
 8009b54:	817b      	strh	r3, [r7, #10]
 8009b56:	460b      	mov	r3, r1
 8009b58:	813b      	strh	r3, [r7, #8]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009b5e:	88fb      	ldrh	r3, [r7, #6]
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	8979      	ldrh	r1, [r7, #10]
 8009b64:	4b20      	ldr	r3, [pc, #128]	@ (8009be8 <I2C_RequestMemoryRead+0xa4>)
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	2300      	movs	r3, #0
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f000 fa26 	bl	8009fbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b70:	69fa      	ldr	r2, [r7, #28]
 8009b72:	69b9      	ldr	r1, [r7, #24]
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f000 f8b6 	bl	8009ce6 <I2C_WaitOnTXISFlagUntilTimeout>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e02c      	b.n	8009bde <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b84:	88fb      	ldrh	r3, [r7, #6]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d105      	bne.n	8009b96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b8a:	893b      	ldrh	r3, [r7, #8]
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	629a      	str	r2, [r3, #40]	@ 0x28
 8009b94:	e015      	b.n	8009bc2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009b96:	893b      	ldrh	r3, [r7, #8]
 8009b98:	0a1b      	lsrs	r3, r3, #8
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ba4:	69fa      	ldr	r2, [r7, #28]
 8009ba6:	69b9      	ldr	r1, [r7, #24]
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 f89c 	bl	8009ce6 <I2C_WaitOnTXISFlagUntilTimeout>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e012      	b.n	8009bde <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009bb8:	893b      	ldrh	r3, [r7, #8]
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2140      	movs	r1, #64	@ 0x40
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 f831 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e000      	b.n	8009bde <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	80002000 	.word	0x80002000

08009bec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	f003 0302 	and.w	r3, r3, #2
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d103      	bne.n	8009c0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2200      	movs	r2, #0
 8009c08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	f003 0301 	and.w	r3, r3, #1
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d007      	beq.n	8009c28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	699a      	ldr	r2, [r3, #24]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f042 0201 	orr.w	r2, r2, #1
 8009c26:	619a      	str	r2, [r3, #24]
  }
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	4613      	mov	r3, r2
 8009c42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c44:	e03b      	b.n	8009cbe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c46:	69ba      	ldr	r2, [r7, #24]
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 f8d6 	bl	8009dfc <I2C_IsErrorOccurred>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d001      	beq.n	8009c5a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e041      	b.n	8009cde <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c60:	d02d      	beq.n	8009cbe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c62:	f7fd fcdf 	bl	8007624 <HAL_GetTick>
 8009c66:	4602      	mov	r2, r0
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d302      	bcc.n	8009c78 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d122      	bne.n	8009cbe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	699a      	ldr	r2, [r3, #24]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	4013      	ands	r3, r2
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	bf0c      	ite	eq
 8009c88:	2301      	moveq	r3, #1
 8009c8a:	2300      	movne	r3, #0
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	461a      	mov	r2, r3
 8009c90:	79fb      	ldrb	r3, [r7, #7]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d113      	bne.n	8009cbe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c9a:	f043 0220 	orr.w	r2, r3, #32
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2220      	movs	r2, #32
 8009ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e00f      	b.n	8009cde <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	699a      	ldr	r2, [r3, #24]
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	bf0c      	ite	eq
 8009cce:	2301      	moveq	r3, #1
 8009cd0:	2300      	movne	r3, #0
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d0b4      	beq.n	8009c46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b084      	sub	sp, #16
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	60f8      	str	r0, [r7, #12]
 8009cee:	60b9      	str	r1, [r7, #8]
 8009cf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009cf2:	e033      	b.n	8009d5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	68b9      	ldr	r1, [r7, #8]
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 f87f 	bl	8009dfc <I2C_IsErrorOccurred>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e031      	b.n	8009d6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0e:	d025      	beq.n	8009d5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d10:	f7fd fc88 	bl	8007624 <HAL_GetTick>
 8009d14:	4602      	mov	r2, r0
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d302      	bcc.n	8009d26 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d11a      	bne.n	8009d5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	f003 0302 	and.w	r3, r3, #2
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d013      	beq.n	8009d5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d38:	f043 0220 	orr.w	r2, r3, #32
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e007      	b.n	8009d6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	699b      	ldr	r3, [r3, #24]
 8009d62:	f003 0302 	and.w	r3, r3, #2
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d1c4      	bne.n	8009cf4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d80:	e02f      	b.n	8009de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	68b9      	ldr	r1, [r7, #8]
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	f000 f838 	bl	8009dfc <I2C_IsErrorOccurred>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e02d      	b.n	8009df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d96:	f7fd fc45 	bl	8007624 <HAL_GetTick>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d302      	bcc.n	8009dac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d11a      	bne.n	8009de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	f003 0320 	and.w	r3, r3, #32
 8009db6:	2b20      	cmp	r3, #32
 8009db8:	d013      	beq.n	8009de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dbe:	f043 0220 	orr.w	r2, r3, #32
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e007      	b.n	8009df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	f003 0320 	and.w	r3, r3, #32
 8009dec:	2b20      	cmp	r3, #32
 8009dee:	d1c8      	bne.n	8009d82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
	...

08009dfc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08a      	sub	sp, #40	@ 0x28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d068      	beq.n	8009efa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2210      	movs	r2, #16
 8009e2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009e30:	e049      	b.n	8009ec6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e38:	d045      	beq.n	8009ec6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009e3a:	f7fd fbf3 	bl	8007624 <HAL_GetTick>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d302      	bcc.n	8009e50 <I2C_IsErrorOccurred+0x54>
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d13a      	bne.n	8009ec6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e72:	d121      	bne.n	8009eb8 <I2C_IsErrorOccurred+0xbc>
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e7a:	d01d      	beq.n	8009eb8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009e7c:	7cfb      	ldrb	r3, [r7, #19]
 8009e7e:	2b20      	cmp	r3, #32
 8009e80:	d01a      	beq.n	8009eb8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009e92:	f7fd fbc7 	bl	8007624 <HAL_GetTick>
 8009e96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e98:	e00e      	b.n	8009eb8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009e9a:	f7fd fbc3 	bl	8007624 <HAL_GetTick>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	2b19      	cmp	r3, #25
 8009ea6:	d907      	bls.n	8009eb8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	f043 0320 	orr.w	r3, r3, #32
 8009eae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009eb6:	e006      	b.n	8009ec6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	f003 0320 	and.w	r3, r3, #32
 8009ec2:	2b20      	cmp	r3, #32
 8009ec4:	d1e9      	bne.n	8009e9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	f003 0320 	and.w	r3, r3, #32
 8009ed0:	2b20      	cmp	r3, #32
 8009ed2:	d003      	beq.n	8009edc <I2C_IsErrorOccurred+0xe0>
 8009ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d0aa      	beq.n	8009e32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d103      	bne.n	8009eec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2220      	movs	r2, #32
 8009eea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	f043 0304 	orr.w	r3, r3, #4
 8009ef2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00b      	beq.n	8009f24 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	f043 0301 	orr.w	r3, r3, #1
 8009f12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00b      	beq.n	8009f46 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	f043 0308 	orr.w	r3, r3, #8
 8009f34:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009f3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00b      	beq.n	8009f68 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	f043 0302 	orr.w	r3, r3, #2
 8009f56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d01c      	beq.n	8009faa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f7ff fe3b 	bl	8009bec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6859      	ldr	r1, [r3, #4]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	4b0d      	ldr	r3, [pc, #52]	@ (8009fb8 <I2C_IsErrorOccurred+0x1bc>)
 8009f82:	400b      	ands	r3, r1
 8009f84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	431a      	orrs	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2220      	movs	r2, #32
 8009f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009faa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3728      	adds	r7, #40	@ 0x28
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	fe00e800 	.word	0xfe00e800

08009fbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b087      	sub	sp, #28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	607b      	str	r3, [r7, #4]
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	817b      	strh	r3, [r7, #10]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009fce:	897b      	ldrh	r3, [r7, #10]
 8009fd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009fd4:	7a7b      	ldrb	r3, [r7, #9]
 8009fd6:	041b      	lsls	r3, r3, #16
 8009fd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009fdc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009fea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	0d5b      	lsrs	r3, r3, #21
 8009ff6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009ffa:	4b08      	ldr	r3, [pc, #32]	@ (800a01c <I2C_TransferConfig+0x60>)
 8009ffc:	430b      	orrs	r3, r1
 8009ffe:	43db      	mvns	r3, r3
 800a000:	ea02 0103 	and.w	r1, r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	430a      	orrs	r2, r1
 800a00c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a00e:	bf00      	nop
 800a010:	371c      	adds	r7, #28
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	03ff63ff 	.word	0x03ff63ff

0800a020 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a030:	b2db      	uxtb	r3, r3
 800a032:	2b20      	cmp	r3, #32
 800a034:	d138      	bne.n	800a0a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d101      	bne.n	800a044 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a040:	2302      	movs	r3, #2
 800a042:	e032      	b.n	800a0aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2224      	movs	r2, #36	@ 0x24
 800a050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f022 0201 	bic.w	r2, r2, #1
 800a062:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a072:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6819      	ldr	r1, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	430a      	orrs	r2, r1
 800a082:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f042 0201 	orr.w	r2, r2, #1
 800a092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2220      	movs	r2, #32
 800a098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	e000      	b.n	800a0aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a0a8:	2302      	movs	r3, #2
  }
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b085      	sub	sp, #20
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b20      	cmp	r3, #32
 800a0ca:	d139      	bne.n	800a140 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d101      	bne.n	800a0da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	e033      	b.n	800a142 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2224      	movs	r2, #36	@ 0x24
 800a0e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f022 0201 	bic.w	r2, r2, #1
 800a0f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a108:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	021b      	lsls	r3, r3, #8
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	4313      	orrs	r3, r2
 800a112:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f042 0201 	orr.w	r2, r2, #1
 800a12a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2220      	movs	r2, #32
 800a130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	e000      	b.n	800a142 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a140:	2302      	movs	r3, #2
  }
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
	...

0800a150 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800a158:	4b05      	ldr	r3, [pc, #20]	@ (800a170 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	4904      	ldr	r1, [pc, #16]	@ (800a170 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4313      	orrs	r3, r2
 800a162:	604b      	str	r3, [r1, #4]
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr
 800a170:	40010000 	.word	0x40010000

0800a174 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d01e      	beq.n	800a1c4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800a186:	4b13      	ldr	r3, [pc, #76]	@ (800a1d4 <HAL_IPCC_Init+0x60>)
 800a188:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d102      	bne.n	800a19c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7f8 fd1c 	bl	8002bd4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800a19c:	68b8      	ldr	r0, [r7, #8]
 800a19e:	f000 f85b 	bl	800a258 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f82c 	bl	800a20c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800a1c2:	e001      	b.n	800a1c8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	58000c00 	.word	0x58000c00

0800a1d8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800a1e6:	bf00      	nop
 800a1e8:	3714      	adds	r7, #20
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b085      	sub	sp, #20
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	60f8      	str	r0, [r7, #12]
 800a1fa:	60b9      	str	r1, [r7, #8]
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800a200:	bf00      	nop
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a214:	2300      	movs	r3, #0
 800a216:	60fb      	str	r3, [r7, #12]
 800a218:	e00f      	b.n	800a23a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	4413      	add	r3, r2
 800a222:	4a0b      	ldr	r2, [pc, #44]	@ (800a250 <IPCC_SetDefaultCallbacks+0x44>)
 800a224:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	3306      	adds	r3, #6
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	4a08      	ldr	r2, [pc, #32]	@ (800a254 <IPCC_SetDefaultCallbacks+0x48>)
 800a232:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	3301      	adds	r3, #1
 800a238:	60fb      	str	r3, [r7, #12]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b05      	cmp	r3, #5
 800a23e:	d9ec      	bls.n	800a21a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800a240:	bf00      	nop
 800a242:	bf00      	nop
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	0800a1d9 	.word	0x0800a1d9
 800a254:	0800a1f3 	.word	0x0800a1f3

0800a258 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800a26c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	223f      	movs	r2, #63	@ 0x3f
 800a272:	609a      	str	r2, [r3, #8]
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e0c0      	b.n	800a414 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d106      	bne.n	800a2ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f00e fcda 	bl	8018c60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2203      	movs	r2, #3
 800a2b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f006 ffc4 	bl	8011246 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a2be:	2300      	movs	r3, #0
 800a2c0:	73fb      	strb	r3, [r7, #15]
 800a2c2:	e03e      	b.n	800a342 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a2c4:	7bfa      	ldrb	r2, [r7, #15]
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	00db      	lsls	r3, r3, #3
 800a2d0:	440b      	add	r3, r1
 800a2d2:	3311      	adds	r3, #17
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a2d8:	7bfa      	ldrb	r2, [r7, #15]
 800a2da:	6879      	ldr	r1, [r7, #4]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	4413      	add	r3, r2
 800a2e2:	00db      	lsls	r3, r3, #3
 800a2e4:	440b      	add	r3, r1
 800a2e6:	3310      	adds	r3, #16
 800a2e8:	7bfa      	ldrb	r2, [r7, #15]
 800a2ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a2ec:	7bfa      	ldrb	r2, [r7, #15]
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	00db      	lsls	r3, r3, #3
 800a2f8:	440b      	add	r3, r1
 800a2fa:	3313      	adds	r3, #19
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a300:	7bfa      	ldrb	r2, [r7, #15]
 800a302:	6879      	ldr	r1, [r7, #4]
 800a304:	4613      	mov	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	00db      	lsls	r3, r3, #3
 800a30c:	440b      	add	r3, r1
 800a30e:	3320      	adds	r3, #32
 800a310:	2200      	movs	r2, #0
 800a312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a314:	7bfa      	ldrb	r2, [r7, #15]
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	4613      	mov	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	4413      	add	r3, r2
 800a31e:	00db      	lsls	r3, r3, #3
 800a320:	440b      	add	r3, r1
 800a322:	3324      	adds	r3, #36	@ 0x24
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a328:	7bfb      	ldrb	r3, [r7, #15]
 800a32a:	6879      	ldr	r1, [r7, #4]
 800a32c:	1c5a      	adds	r2, r3, #1
 800a32e:	4613      	mov	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4413      	add	r3, r2
 800a334:	00db      	lsls	r3, r3, #3
 800a336:	440b      	add	r3, r1
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
 800a33e:	3301      	adds	r3, #1
 800a340:	73fb      	strb	r3, [r7, #15]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	791b      	ldrb	r3, [r3, #4]
 800a346:	7bfa      	ldrb	r2, [r7, #15]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d3bb      	bcc.n	800a2c4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a34c:	2300      	movs	r3, #0
 800a34e:	73fb      	strb	r3, [r7, #15]
 800a350:	e044      	b.n	800a3dc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a352:	7bfa      	ldrb	r2, [r7, #15]
 800a354:	6879      	ldr	r1, [r7, #4]
 800a356:	4613      	mov	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	00db      	lsls	r3, r3, #3
 800a35e:	440b      	add	r3, r1
 800a360:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800a364:	2200      	movs	r2, #0
 800a366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a368:	7bfa      	ldrb	r2, [r7, #15]
 800a36a:	6879      	ldr	r1, [r7, #4]
 800a36c:	4613      	mov	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	00db      	lsls	r3, r3, #3
 800a374:	440b      	add	r3, r1
 800a376:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a37a:	7bfa      	ldrb	r2, [r7, #15]
 800a37c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a37e:	7bfa      	ldrb	r2, [r7, #15]
 800a380:	6879      	ldr	r1, [r7, #4]
 800a382:	4613      	mov	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	00db      	lsls	r3, r3, #3
 800a38a:	440b      	add	r3, r1
 800a38c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800a390:	2200      	movs	r2, #0
 800a392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a394:	7bfa      	ldrb	r2, [r7, #15]
 800a396:	6879      	ldr	r1, [r7, #4]
 800a398:	4613      	mov	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	00db      	lsls	r3, r3, #3
 800a3a0:	440b      	add	r3, r1
 800a3a2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a3aa:	7bfa      	ldrb	r2, [r7, #15]
 800a3ac:	6879      	ldr	r1, [r7, #4]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4413      	add	r3, r2
 800a3b4:	00db      	lsls	r3, r3, #3
 800a3b6:	440b      	add	r3, r1
 800a3b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a3bc:	2200      	movs	r2, #0
 800a3be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a3c0:	7bfa      	ldrb	r2, [r7, #15]
 800a3c2:	6879      	ldr	r1, [r7, #4]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	00db      	lsls	r3, r3, #3
 800a3cc:	440b      	add	r3, r1
 800a3ce:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	73fb      	strb	r3, [r7, #15]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	791b      	ldrb	r3, [r3, #4]
 800a3e0:	7bfa      	ldrb	r2, [r7, #15]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d3b5      	bcc.n	800a352 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6818      	ldr	r0, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a3f2:	f006 ff43 	bl	801127c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	7a9b      	ldrb	r3, [r3, #10]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d102      	bne.n	800a412 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f001 fc0e 	bl	800bc2e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d101      	bne.n	800a432 <HAL_PCD_Start+0x16>
 800a42e:	2302      	movs	r3, #2
 800a430:	e012      	b.n	800a458 <HAL_PCD_Start+0x3c>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4618      	mov	r0, r3
 800a440:	f006 feea 	bl	8011218 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4618      	mov	r0, r3
 800a44a:	f008 fcc7 	bl	8012ddc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f008 fccc 	bl	8012e0a <USB_ReadInterrupts>
 800a472:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d003      	beq.n	800a486 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fb06 	bl	800aa90 <PCD_EP_ISR_Handler>

    return;
 800a484:	e110      	b.n	800a6a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d013      	beq.n	800a4b8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a498:	b29a      	uxth	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4a2:	b292      	uxth	r2, r2
 800a4a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f00e fc66 	bl	8018d7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f8fc 	bl	800a6ae <HAL_PCD_SetAddress>

    return;
 800a4b6:	e0f7      	b.n	800a6a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00c      	beq.n	800a4dc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a4d4:	b292      	uxth	r2, r2
 800a4d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a4da:	e0e5      	b.n	800a6a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00c      	beq.n	800a500 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a4f8:	b292      	uxth	r2, r2
 800a4fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a4fe:	e0d3      	b.n	800a6a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a506:	2b00      	cmp	r3, #0
 800a508:	d034      	beq.n	800a574 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a512:	b29a      	uxth	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f022 0204 	bic.w	r2, r2, #4
 800a51c:	b292      	uxth	r2, r2
 800a51e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f022 0208 	bic.w	r2, r2, #8
 800a534:	b292      	uxth	r2, r2
 800a536:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a540:	2b01      	cmp	r3, #1
 800a542:	d107      	bne.n	800a554 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a54c:	2100      	movs	r1, #0
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f00e fe08 	bl	8019164 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f00e fc49 	bl	8018dec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a562:	b29a      	uxth	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a56c:	b292      	uxth	r2, r2
 800a56e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a572:	e099      	b.n	800a6a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d027      	beq.n	800a5ce <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a586:	b29a      	uxth	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f042 0208 	orr.w	r2, r2, #8
 800a590:	b292      	uxth	r2, r2
 800a592:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a5a8:	b292      	uxth	r2, r2
 800a5aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f042 0204 	orr.w	r2, r2, #4
 800a5c0:	b292      	uxth	r2, r2
 800a5c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f00e fbf6 	bl	8018db8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a5cc:	e06c      	b.n	800a6a8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d040      	beq.n	800a65a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a5ea:	b292      	uxth	r2, r2
 800a5ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d12b      	bne.n	800a652 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a602:	b29a      	uxth	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f042 0204 	orr.w	r2, r2, #4
 800a60c:	b292      	uxth	r2, r2
 800a60e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f042 0208 	orr.w	r2, r2, #8
 800a624:	b292      	uxth	r2, r2
 800a626:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	089b      	lsrs	r3, r3, #2
 800a63e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a648:	2101      	movs	r1, #1
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f00e fd8a 	bl	8019164 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a650:	e02a      	b.n	800a6a8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f00e fbb0 	bl	8018db8 <HAL_PCD_SuspendCallback>
    return;
 800a658:	e026      	b.n	800a6a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00f      	beq.n	800a684 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a676:	b292      	uxth	r2, r2
 800a678:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f00e fb6e 	bl	8018d5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a682:	e011      	b.n	800a6a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00c      	beq.n	800a6a8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a696:	b29a      	uxth	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a6a0:	b292      	uxth	r2, r2
 800a6a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a6a6:	bf00      	nop
  }
}
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d101      	bne.n	800a6c8 <HAL_PCD_SetAddress+0x1a>
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	e012      	b.n	800a6ee <HAL_PCD_SetAddress+0x40>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	78fa      	ldrb	r2, [r7, #3]
 800a6d4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	78fa      	ldrb	r2, [r7, #3]
 800a6dc:	4611      	mov	r1, r2
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f008 fb68 	bl	8012db4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b084      	sub	sp, #16
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	4608      	mov	r0, r1
 800a700:	4611      	mov	r1, r2
 800a702:	461a      	mov	r2, r3
 800a704:	4603      	mov	r3, r0
 800a706:	70fb      	strb	r3, [r7, #3]
 800a708:	460b      	mov	r3, r1
 800a70a:	803b      	strh	r3, [r7, #0]
 800a70c:	4613      	mov	r3, r2
 800a70e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	da0e      	bge.n	800a73a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	f003 0207 	and.w	r2, r3, #7
 800a722:	4613      	mov	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4413      	add	r3, r2
 800a728:	00db      	lsls	r3, r3, #3
 800a72a:	3310      	adds	r3, #16
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	4413      	add	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2201      	movs	r2, #1
 800a736:	705a      	strb	r2, [r3, #1]
 800a738:	e00e      	b.n	800a758 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a73a:	78fb      	ldrb	r3, [r7, #3]
 800a73c:	f003 0207 	and.w	r2, r3, #7
 800a740:	4613      	mov	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4413      	add	r3, r2
 800a746:	00db      	lsls	r3, r3, #3
 800a748:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	4413      	add	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a758:	78fb      	ldrb	r3, [r7, #3]
 800a75a:	f003 0307 	and.w	r3, r3, #7
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800a764:	883b      	ldrh	r3, [r7, #0]
 800a766:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	78ba      	ldrb	r2, [r7, #2]
 800a772:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a774:	78bb      	ldrb	r3, [r7, #2]
 800a776:	2b02      	cmp	r3, #2
 800a778:	d102      	bne.n	800a780 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a786:	2b01      	cmp	r3, #1
 800a788:	d101      	bne.n	800a78e <HAL_PCD_EP_Open+0x98>
 800a78a:	2302      	movs	r3, #2
 800a78c:	e00e      	b.n	800a7ac <HAL_PCD_EP_Open+0xb6>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2201      	movs	r2, #1
 800a792:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68f9      	ldr	r1, [r7, #12]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f006 fd8b 	bl	80112b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800a7aa:	7afb      	ldrb	r3, [r7, #11]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a7c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	da0e      	bge.n	800a7e6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7c8:	78fb      	ldrb	r3, [r7, #3]
 800a7ca:	f003 0207 	and.w	r2, r3, #7
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	3310      	adds	r3, #16
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	4413      	add	r3, r2
 800a7dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	705a      	strb	r2, [r3, #1]
 800a7e4:	e00e      	b.n	800a804 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a7e6:	78fb      	ldrb	r3, [r7, #3]
 800a7e8:	f003 0207 	and.w	r2, r3, #7
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4413      	add	r3, r2
 800a7f2:	00db      	lsls	r3, r3, #3
 800a7f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a804:	78fb      	ldrb	r3, [r7, #3]
 800a806:	f003 0307 	and.w	r3, r3, #7
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a816:	2b01      	cmp	r3, #1
 800a818:	d101      	bne.n	800a81e <HAL_PCD_EP_Close+0x6a>
 800a81a:	2302      	movs	r3, #2
 800a81c:	e00e      	b.n	800a83c <HAL_PCD_EP_Close+0x88>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2201      	movs	r2, #1
 800a822:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68f9      	ldr	r1, [r7, #12]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f007 fa2b 	bl	8011c88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	607a      	str	r2, [r7, #4]
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	460b      	mov	r3, r1
 800a852:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a854:	7afb      	ldrb	r3, [r7, #11]
 800a856:	f003 0207 	and.w	r2, r3, #7
 800a85a:	4613      	mov	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	00db      	lsls	r3, r3, #3
 800a862:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	4413      	add	r3, r2
 800a86a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	683a      	ldr	r2, [r7, #0]
 800a876:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	2200      	movs	r2, #0
 800a87c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2200      	movs	r2, #0
 800a882:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a884:	7afb      	ldrb	r3, [r7, #11]
 800a886:	f003 0307 	and.w	r3, r3, #7
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	6979      	ldr	r1, [r7, #20]
 800a896:	4618      	mov	r0, r3
 800a898:	f007 fbe3 	bl	8012062 <USB_EPStartXfer>

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b083      	sub	sp, #12
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a8b2:	78fb      	ldrb	r3, [r7, #3]
 800a8b4:	f003 0207 	and.w	r2, r3, #7
 800a8b8:	6879      	ldr	r1, [r7, #4]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	00db      	lsls	r3, r3, #3
 800a8c2:	440b      	add	r3, r1
 800a8c4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a8c8:	681b      	ldr	r3, [r3, #0]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	370c      	adds	r7, #12
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b086      	sub	sp, #24
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	60f8      	str	r0, [r7, #12]
 800a8de:	607a      	str	r2, [r7, #4]
 800a8e0:	603b      	str	r3, [r7, #0]
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8e6:	7afb      	ldrb	r3, [r7, #11]
 800a8e8:	f003 0207 	and.w	r2, r3, #7
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	3310      	adds	r3, #16
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	2200      	movs	r2, #0
 800a91a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2201      	movs	r2, #1
 800a920:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a922:	7afb      	ldrb	r3, [r7, #11]
 800a924:	f003 0307 	and.w	r3, r3, #7
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6979      	ldr	r1, [r7, #20]
 800a934:	4618      	mov	r0, r3
 800a936:	f007 fb94 	bl	8012062 <USB_EPStartXfer>

  return HAL_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3718      	adds	r7, #24
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	460b      	mov	r3, r1
 800a94e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a950:	78fb      	ldrb	r3, [r7, #3]
 800a952:	f003 0307 	and.w	r3, r3, #7
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	7912      	ldrb	r2, [r2, #4]
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d901      	bls.n	800a962 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e03e      	b.n	800a9e0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a966:	2b00      	cmp	r3, #0
 800a968:	da0e      	bge.n	800a988 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a96a:	78fb      	ldrb	r3, [r7, #3]
 800a96c:	f003 0207 	and.w	r2, r3, #7
 800a970:	4613      	mov	r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	4413      	add	r3, r2
 800a976:	00db      	lsls	r3, r3, #3
 800a978:	3310      	adds	r3, #16
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	4413      	add	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2201      	movs	r2, #1
 800a984:	705a      	strb	r2, [r3, #1]
 800a986:	e00c      	b.n	800a9a2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a988:	78fa      	ldrb	r2, [r7, #3]
 800a98a:	4613      	mov	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4413      	add	r3, r2
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	4413      	add	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a9a8:	78fb      	ldrb	r3, [r7, #3]
 800a9aa:	f003 0307 	and.w	r3, r3, #7
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d101      	bne.n	800a9c2 <HAL_PCD_EP_SetStall+0x7e>
 800a9be:	2302      	movs	r3, #2
 800a9c0:	e00e      	b.n	800a9e0 <HAL_PCD_EP_SetStall+0x9c>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68f9      	ldr	r1, [r7, #12]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f008 f8f5 	bl	8012bc0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a9f4:	78fb      	ldrb	r3, [r7, #3]
 800a9f6:	f003 030f 	and.w	r3, r3, #15
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	7912      	ldrb	r2, [r2, #4]
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d901      	bls.n	800aa06 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	e040      	b.n	800aa88 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800aa06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	da0e      	bge.n	800aa2c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa0e:	78fb      	ldrb	r3, [r7, #3]
 800aa10:	f003 0207 	and.w	r2, r3, #7
 800aa14:	4613      	mov	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	00db      	lsls	r3, r3, #3
 800aa1c:	3310      	adds	r3, #16
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	4413      	add	r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2201      	movs	r2, #1
 800aa28:	705a      	strb	r2, [r3, #1]
 800aa2a:	e00e      	b.n	800aa4a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aa2c:	78fb      	ldrb	r3, [r7, #3]
 800aa2e:	f003 0207 	and.w	r2, r3, #7
 800aa32:	4613      	mov	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	00db      	lsls	r3, r3, #3
 800aa3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	4413      	add	r3, r2
 800aa42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aa50:	78fb      	ldrb	r3, [r7, #3]
 800aa52:	f003 0307 	and.w	r3, r3, #7
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d101      	bne.n	800aa6a <HAL_PCD_EP_ClrStall+0x82>
 800aa66:	2302      	movs	r3, #2
 800aa68:	e00e      	b.n	800aa88 <HAL_PCD_EP_ClrStall+0xa0>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68f9      	ldr	r1, [r7, #12]
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f008 f8f2 	bl	8012c62 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b092      	sub	sp, #72	@ 0x48
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800aa98:	e333      	b.n	800b102 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800aaa2:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800aaa4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	f003 030f 	and.w	r3, r3, #15
 800aaac:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800aab0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f040 8108 	bne.w	800acca <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800aaba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800aabc:	f003 0310 	and.w	r3, r3, #16
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d14c      	bne.n	800ab5e <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	881b      	ldrh	r3, [r3, #0]
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800aad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aad4:	813b      	strh	r3, [r7, #8]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	893b      	ldrh	r3, [r7, #8]
 800aadc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3310      	adds	r3, #16
 800aaec:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	461a      	mov	r2, r3
 800aafa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	00db      	lsls	r3, r3, #3
 800ab00:	4413      	add	r3, r2
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	6812      	ldr	r2, [r2, #0]
 800ab06:	4413      	add	r3, r2
 800ab08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ab12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab14:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800ab16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab18:	695a      	ldr	r2, [r3, #20]
 800ab1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab1c:	69db      	ldr	r3, [r3, #28]
 800ab1e:	441a      	add	r2, r3
 800ab20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab22:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800ab24:	2100      	movs	r1, #0
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f00e f8ff 	bl	8018d2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	7b1b      	ldrb	r3, [r3, #12]
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f000 82e5 	beq.w	800b102 <PCD_EP_ISR_Handler+0x672>
 800ab38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab3a:	699b      	ldr	r3, [r3, #24]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f040 82e0 	bne.w	800b102 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	7b1b      	ldrb	r3, [r3, #12]
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	731a      	strb	r2, [r3, #12]
 800ab5c:	e2d1      	b.n	800b102 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab64:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800ab6e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d032      	beq.n	800abde <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	461a      	mov	r2, r3
 800ab84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	00db      	lsls	r3, r3, #3
 800ab8a:	4413      	add	r3, r2
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	6812      	ldr	r2, [r2, #0]
 800ab90:	4413      	add	r3, r2
 800ab92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab96:	881b      	ldrh	r3, [r3, #0]
 800ab98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ab9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab9e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6818      	ldr	r0, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800abaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800abae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abb0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	f008 f97b 	bl	8012eae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800abc4:	4013      	ands	r3, r2
 800abc6:	817b      	strh	r3, [r7, #10]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	897a      	ldrh	r2, [r7, #10]
 800abce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800abd2:	b292      	uxth	r2, r2
 800abd4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f00e f87a 	bl	8018cd0 <HAL_PCD_SetupStageCallback>
 800abdc:	e291      	b.n	800b102 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800abde:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f280 828d 	bge.w	800b102 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	881b      	ldrh	r3, [r3, #0]
 800abee:	b29a      	uxth	r2, r3
 800abf0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800abf4:	4013      	ands	r3, r2
 800abf6:	81fb      	strh	r3, [r7, #14]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	89fa      	ldrh	r2, [r7, #14]
 800abfe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ac02:	b292      	uxth	r2, r2
 800ac04:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	461a      	mov	r2, r3
 800ac12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	00db      	lsls	r3, r3, #3
 800ac18:	4413      	add	r3, r2
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	6812      	ldr	r2, [r2, #0]
 800ac1e:	4413      	add	r3, r2
 800ac20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ac2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac2c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800ac2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac30:	69db      	ldr	r3, [r3, #28]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d019      	beq.n	800ac6a <PCD_EP_ISR_Handler+0x1da>
 800ac36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d015      	beq.n	800ac6a <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac44:	6959      	ldr	r1, [r3, #20]
 800ac46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac48:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800ac4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac4c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	f008 f92d 	bl	8012eae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800ac54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac56:	695a      	ldr	r2, [r3, #20]
 800ac58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac5a:	69db      	ldr	r3, [r3, #28]
 800ac5c:	441a      	add	r2, r3
 800ac5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac60:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800ac62:	2100      	movs	r1, #0
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f00e f845 	bl	8018cf4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800ac72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ac74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f040 8242 	bne.w	800b102 <PCD_EP_ISR_Handler+0x672>
 800ac7e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ac80:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ac84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac88:	f000 823b 	beq.w	800b102 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac9c:	81bb      	strh	r3, [r7, #12]
 800ac9e:	89bb      	ldrh	r3, [r7, #12]
 800aca0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aca4:	81bb      	strh	r3, [r7, #12]
 800aca6:	89bb      	ldrh	r3, [r7, #12]
 800aca8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800acac:	81bb      	strh	r3, [r7, #12]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	89bb      	ldrh	r3, [r7, #12]
 800acb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	8013      	strh	r3, [r2, #0]
 800acc8:	e21b      	b.n	800b102 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800acdc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f280 80f1 	bge.w	800aec8 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	461a      	mov	r2, r3
 800acec:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800acfc:	4013      	ands	r3, r2
 800acfe:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	461a      	mov	r2, r3
 800ad06:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4413      	add	r3, r2
 800ad0e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800ad10:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ad14:	b292      	uxth	r2, r2
 800ad16:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800ad18:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ad2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad30:	7b1b      	ldrb	r3, [r3, #12]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d123      	bne.n	800ad7e <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	461a      	mov	r2, r3
 800ad42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	00db      	lsls	r3, r3, #3
 800ad48:	4413      	add	r3, r2
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	6812      	ldr	r2, [r2, #0]
 800ad4e:	4413      	add	r3, r2
 800ad50:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ad54:	881b      	ldrh	r3, [r3, #0]
 800ad56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad5a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800ad5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f000 808b 	beq.w	800ae7e <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6818      	ldr	r0, [r3, #0]
 800ad6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad6e:	6959      	ldr	r1, [r3, #20]
 800ad70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad72:	88da      	ldrh	r2, [r3, #6]
 800ad74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad78:	f008 f899 	bl	8012eae <USB_ReadPMA>
 800ad7c:	e07f      	b.n	800ae7e <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ad7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad80:	78db      	ldrb	r3, [r3, #3]
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d109      	bne.n	800ad9a <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ad86:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ad88:	461a      	mov	r2, r3
 800ad8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f9c6 	bl	800b11e <HAL_PCD_EP_DB_Receive>
 800ad92:	4603      	mov	r3, r0
 800ad94:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ad98:	e071      	b.n	800ae7e <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	b29b      	uxth	r3, r3
 800adac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adb4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	441a      	add	r2, r3
 800adc4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800adc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800add2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800add6:	b29b      	uxth	r3, r3
 800add8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4413      	add	r3, r2
 800ade8:	881b      	ldrh	r3, [r3, #0]
 800adea:	b29b      	uxth	r3, r3
 800adec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d022      	beq.n	800ae3a <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	461a      	mov	r2, r3
 800ae00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	00db      	lsls	r3, r3, #3
 800ae06:	4413      	add	r3, r2
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	6812      	ldr	r2, [r2, #0]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae12:	881b      	ldrh	r3, [r3, #0]
 800ae14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae18:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800ae1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d02c      	beq.n	800ae7e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6818      	ldr	r0, [r3, #0]
 800ae28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae2a:	6959      	ldr	r1, [r3, #20]
 800ae2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae2e:	891a      	ldrh	r2, [r3, #8]
 800ae30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae34:	f008 f83b 	bl	8012eae <USB_ReadPMA>
 800ae38:	e021      	b.n	800ae7e <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	461a      	mov	r2, r3
 800ae46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	00db      	lsls	r3, r3, #3
 800ae4c:	4413      	add	r3, r2
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	6812      	ldr	r2, [r2, #0]
 800ae52:	4413      	add	r3, r2
 800ae54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800ae62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d009      	beq.n	800ae7e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6818      	ldr	r0, [r3, #0]
 800ae6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae70:	6959      	ldr	r1, [r3, #20]
 800ae72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae74:	895a      	ldrh	r2, [r3, #10]
 800ae76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae7a:	f008 f818 	bl	8012eae <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ae7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae80:	69da      	ldr	r2, [r3, #28]
 800ae82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae86:	441a      	add	r2, r3
 800ae88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae8a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ae8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae8e:	695a      	ldr	r2, [r3, #20]
 800ae90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae94:	441a      	add	r2, r3
 800ae96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae98:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ae9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d005      	beq.n	800aeae <PCD_EP_ISR_Handler+0x41e>
 800aea2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800aea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d206      	bcs.n	800aebc <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800aeae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f00d ff1d 	bl	8018cf4 <HAL_PCD_DataOutStageCallback>
 800aeba:	e005      	b.n	800aec8 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aec2:	4618      	mov	r0, r3
 800aec4:	f007 f8cd 	bl	8012062 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800aec8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aeca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f000 8117 	beq.w	800b102 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800aed4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800aed8:	4613      	mov	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	00db      	lsls	r3, r3, #3
 800aee0:	3310      	adds	r3, #16
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	4413      	add	r3, r2
 800aee6:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	461a      	mov	r2, r3
 800aeee:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800aefe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af02:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	461a      	mov	r2, r3
 800af0a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	441a      	add	r2, r3
 800af12:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800af14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800af20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af22:	78db      	ldrb	r3, [r3, #3]
 800af24:	2b01      	cmp	r3, #1
 800af26:	f040 80a1 	bne.w	800b06c <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800af2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af2c:	2200      	movs	r2, #0
 800af2e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800af30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af32:	7b1b      	ldrb	r3, [r3, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 8092 	beq.w	800b05e <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800af3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af40:	2b00      	cmp	r3, #0
 800af42:	d046      	beq.n	800afd2 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800af44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af46:	785b      	ldrb	r3, [r3, #1]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d126      	bne.n	800af9a <PCD_EP_ISR_Handler+0x50a>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	617b      	str	r3, [r7, #20]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	461a      	mov	r2, r3
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	4413      	add	r3, r2
 800af62:	617b      	str	r3, [r7, #20]
 800af64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	00da      	lsls	r2, r3, #3
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	4413      	add	r3, r2
 800af6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af72:	613b      	str	r3, [r7, #16]
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	881b      	ldrh	r3, [r3, #0]
 800af78:	b29b      	uxth	r3, r3
 800af7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af7e:	b29a      	uxth	r2, r3
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	801a      	strh	r2, [r3, #0]
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af92:	b29a      	uxth	r2, r3
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	801a      	strh	r2, [r3, #0]
 800af98:	e061      	b.n	800b05e <PCD_EP_ISR_Handler+0x5ce>
 800af9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af9c:	785b      	ldrb	r3, [r3, #1]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d15d      	bne.n	800b05e <PCD_EP_ISR_Handler+0x5ce>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	61fb      	str	r3, [r7, #28]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	461a      	mov	r2, r3
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	4413      	add	r3, r2
 800afb8:	61fb      	str	r3, [r7, #28]
 800afba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	00da      	lsls	r2, r3, #3
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	4413      	add	r3, r2
 800afc4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800afc8:	61bb      	str	r3, [r7, #24]
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	2200      	movs	r2, #0
 800afce:	801a      	strh	r2, [r3, #0]
 800afd0:	e045      	b.n	800b05e <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afda:	785b      	ldrb	r3, [r3, #1]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d126      	bne.n	800b02e <PCD_EP_ISR_Handler+0x59e>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	627b      	str	r3, [r7, #36]	@ 0x24
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afee:	b29b      	uxth	r3, r3
 800aff0:	461a      	mov	r2, r3
 800aff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff4:	4413      	add	r3, r2
 800aff6:	627b      	str	r3, [r7, #36]	@ 0x24
 800aff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	00da      	lsls	r2, r3, #3
 800affe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b000:	4413      	add	r3, r2
 800b002:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b006:	623b      	str	r3, [r7, #32]
 800b008:	6a3b      	ldr	r3, [r7, #32]
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b012:	b29a      	uxth	r2, r3
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	801a      	strh	r2, [r3, #0]
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	881b      	ldrh	r3, [r3, #0]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b026:	b29a      	uxth	r2, r3
 800b028:	6a3b      	ldr	r3, [r7, #32]
 800b02a:	801a      	strh	r2, [r3, #0]
 800b02c:	e017      	b.n	800b05e <PCD_EP_ISR_Handler+0x5ce>
 800b02e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b030:	785b      	ldrb	r3, [r3, #1]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d113      	bne.n	800b05e <PCD_EP_ISR_Handler+0x5ce>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b03e:	b29b      	uxth	r3, r3
 800b040:	461a      	mov	r2, r3
 800b042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b044:	4413      	add	r3, r2
 800b046:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	00da      	lsls	r2, r3, #3
 800b04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b050:	4413      	add	r3, r2
 800b052:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b056:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b05a:	2200      	movs	r2, #0
 800b05c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b05e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	4619      	mov	r1, r3
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f00d fe60 	bl	8018d2a <HAL_PCD_DataInStageCallback>
 800b06a:	e04a      	b.n	800b102 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800b06c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b06e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b072:	2b00      	cmp	r3, #0
 800b074:	d13f      	bne.n	800b0f6 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b07e:	b29b      	uxth	r3, r3
 800b080:	461a      	mov	r2, r3
 800b082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	00db      	lsls	r3, r3, #3
 800b088:	4413      	add	r3, r2
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	6812      	ldr	r2, [r2, #0]
 800b08e:	4413      	add	r3, r2
 800b090:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b094:	881b      	ldrh	r3, [r3, #0]
 800b096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b09a:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800b09c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b09e:	699a      	ldr	r2, [r3, #24]
 800b0a0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d906      	bls.n	800b0b4 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800b0a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0a8:	699a      	ldr	r2, [r3, #24]
 800b0aa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b0ac:	1ad2      	subs	r2, r2, r3
 800b0ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0b0:	619a      	str	r2, [r3, #24]
 800b0b2:	e002      	b.n	800b0ba <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800b0b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800b0ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0bc:	699b      	ldr	r3, [r3, #24]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d106      	bne.n	800b0d0 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b0c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f00d fe2e 	bl	8018d2a <HAL_PCD_DataInStageCallback>
 800b0ce:	e018      	b.n	800b102 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800b0d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0d2:	695a      	ldr	r2, [r3, #20]
 800b0d4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b0d6:	441a      	add	r2, r3
 800b0d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0da:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800b0dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0de:	69da      	ldr	r2, [r3, #28]
 800b0e0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b0e2:	441a      	add	r2, r3
 800b0e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0e6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f006 ffb7 	bl	8012062 <USB_EPStartXfer>
 800b0f4:	e005      	b.n	800b102 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800b0f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 f917 	bl	800b330 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	b21b      	sxth	r3, r3
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f6ff acc3 	blt.w	800aa9a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3748      	adds	r7, #72	@ 0x48
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b088      	sub	sp, #32
 800b122:	af00      	add	r7, sp, #0
 800b124:	60f8      	str	r0, [r7, #12]
 800b126:	60b9      	str	r1, [r7, #8]
 800b128:	4613      	mov	r3, r2
 800b12a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b12c:	88fb      	ldrh	r3, [r7, #6]
 800b12e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d07c      	beq.n	800b230 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b13e:	b29b      	uxth	r3, r3
 800b140:	461a      	mov	r2, r3
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	4413      	add	r3, r2
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	6812      	ldr	r2, [r2, #0]
 800b14e:	4413      	add	r3, r2
 800b150:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b154:	881b      	ldrh	r3, [r3, #0]
 800b156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b15a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	699a      	ldr	r2, [r3, #24]
 800b160:	8b7b      	ldrh	r3, [r7, #26]
 800b162:	429a      	cmp	r2, r3
 800b164:	d306      	bcc.n	800b174 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	699a      	ldr	r2, [r3, #24]
 800b16a:	8b7b      	ldrh	r3, [r7, #26]
 800b16c:	1ad2      	subs	r2, r2, r3
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	619a      	str	r2, [r3, #24]
 800b172:	e002      	b.n	800b17a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	2200      	movs	r2, #0
 800b178:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d123      	bne.n	800b1ca <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	461a      	mov	r2, r3
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4413      	add	r3, r2
 800b190:	881b      	ldrh	r3, [r3, #0]
 800b192:	b29b      	uxth	r3, r3
 800b194:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b198:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b19c:	833b      	strh	r3, [r7, #24]
 800b19e:	8b3b      	ldrh	r3, [r7, #24]
 800b1a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b1a4:	833b      	strh	r3, [r7, #24]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	441a      	add	r2, r3
 800b1b4:	8b3b      	ldrh	r3, [r7, #24]
 800b1b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b1ca:	88fb      	ldrh	r3, [r7, #6]
 800b1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d01f      	beq.n	800b214 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1ee:	82fb      	strh	r3, [r7, #22]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	441a      	add	r2, r3
 800b1fe:	8afb      	ldrh	r3, [r7, #22]
 800b200:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b204:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b20c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b210:	b29b      	uxth	r3, r3
 800b212:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b214:	8b7b      	ldrh	r3, [r7, #26]
 800b216:	2b00      	cmp	r3, #0
 800b218:	f000 8085 	beq.w	800b326 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6818      	ldr	r0, [r3, #0]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	6959      	ldr	r1, [r3, #20]
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	891a      	ldrh	r2, [r3, #8]
 800b228:	8b7b      	ldrh	r3, [r7, #26]
 800b22a:	f007 fe40 	bl	8012eae <USB_ReadPMA>
 800b22e:	e07a      	b.n	800b326 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b238:	b29b      	uxth	r3, r3
 800b23a:	461a      	mov	r2, r3
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	00db      	lsls	r3, r3, #3
 800b242:	4413      	add	r3, r2
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	6812      	ldr	r2, [r2, #0]
 800b248:	4413      	add	r3, r2
 800b24a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b24e:	881b      	ldrh	r3, [r3, #0]
 800b250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b254:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	699a      	ldr	r2, [r3, #24]
 800b25a:	8b7b      	ldrh	r3, [r7, #26]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d306      	bcc.n	800b26e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	699a      	ldr	r2, [r3, #24]
 800b264:	8b7b      	ldrh	r3, [r7, #26]
 800b266:	1ad2      	subs	r2, r2, r3
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	619a      	str	r2, [r3, #24]
 800b26c:	e002      	b.n	800b274 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	2200      	movs	r2, #0
 800b272:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	699b      	ldr	r3, [r3, #24]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d123      	bne.n	800b2c4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	461a      	mov	r2, r3
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4413      	add	r3, r2
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b296:	83fb      	strh	r3, [r7, #30]
 800b298:	8bfb      	ldrh	r3, [r7, #30]
 800b29a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b29e:	83fb      	strh	r3, [r7, #30]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	441a      	add	r2, r3
 800b2ae:	8bfb      	ldrh	r3, [r7, #30]
 800b2b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b2c4:	88fb      	ldrh	r3, [r7, #6]
 800b2c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d11f      	bne.n	800b30e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	881b      	ldrh	r3, [r3, #0]
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2e8:	83bb      	strh	r3, [r7, #28]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	441a      	add	r2, r3
 800b2f8:	8bbb      	ldrh	r3, [r7, #28]
 800b2fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b302:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b306:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b30e:	8b7b      	ldrh	r3, [r7, #26]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d008      	beq.n	800b326 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6818      	ldr	r0, [r3, #0]
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	6959      	ldr	r1, [r3, #20]
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	895a      	ldrh	r2, [r3, #10]
 800b320:	8b7b      	ldrh	r3, [r7, #26]
 800b322:	f007 fdc4 	bl	8012eae <USB_ReadPMA>
    }
  }

  return count;
 800b326:	8b7b      	ldrh	r3, [r7, #26]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3720      	adds	r7, #32
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b0a6      	sub	sp, #152	@ 0x98
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	4613      	mov	r3, r2
 800b33c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b33e:	88fb      	ldrh	r3, [r7, #6]
 800b340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b344:	2b00      	cmp	r3, #0
 800b346:	f000 81f7 	beq.w	800b738 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b352:	b29b      	uxth	r3, r3
 800b354:	461a      	mov	r2, r3
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	00db      	lsls	r3, r3, #3
 800b35c:	4413      	add	r3, r2
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	6812      	ldr	r2, [r2, #0]
 800b362:	4413      	add	r3, r2
 800b364:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b368:	881b      	ldrh	r3, [r3, #0]
 800b36a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b36e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	699a      	ldr	r2, [r3, #24]
 800b376:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d907      	bls.n	800b38e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	699a      	ldr	r2, [r3, #24]
 800b382:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b386:	1ad2      	subs	r2, r2, r3
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	619a      	str	r2, [r3, #24]
 800b38c:	e002      	b.n	800b394 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	2200      	movs	r2, #0
 800b392:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	699b      	ldr	r3, [r3, #24]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f040 80e1 	bne.w	800b560 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	785b      	ldrb	r3, [r3, #1]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d126      	bne.n	800b3f4 <HAL_PCD_EP_DB_Transmit+0xc4>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ba:	4413      	add	r3, r2
 800b3bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	00da      	lsls	r2, r3, #3
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b3cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3dc:	801a      	strh	r2, [r3, #0]
 800b3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f0:	801a      	strh	r2, [r3, #0]
 800b3f2:	e01a      	b.n	800b42a <HAL_PCD_EP_DB_Transmit+0xfa>
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	785b      	ldrb	r3, [r3, #1]
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d116      	bne.n	800b42a <HAL_PCD_EP_DB_Transmit+0xfa>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	461a      	mov	r2, r3
 800b40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b410:	4413      	add	r3, r2
 800b412:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	00da      	lsls	r2, r3, #3
 800b41a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41c:	4413      	add	r3, r2
 800b41e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b422:	637b      	str	r3, [r7, #52]	@ 0x34
 800b424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b426:	2200      	movs	r2, #0
 800b428:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	785b      	ldrb	r3, [r3, #1]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d126      	bne.n	800b486 <HAL_PCD_EP_DB_Transmit+0x156>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	623b      	str	r3, [r7, #32]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b446:	b29b      	uxth	r3, r3
 800b448:	461a      	mov	r2, r3
 800b44a:	6a3b      	ldr	r3, [r7, #32]
 800b44c:	4413      	add	r3, r2
 800b44e:	623b      	str	r3, [r7, #32]
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	00da      	lsls	r2, r3, #3
 800b456:	6a3b      	ldr	r3, [r7, #32]
 800b458:	4413      	add	r3, r2
 800b45a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b45e:	61fb      	str	r3, [r7, #28]
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	b29b      	uxth	r3, r3
 800b466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	801a      	strh	r2, [r3, #0]
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	881b      	ldrh	r3, [r3, #0]
 800b474:	b29b      	uxth	r3, r3
 800b476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b47a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b47e:	b29a      	uxth	r2, r3
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	801a      	strh	r2, [r3, #0]
 800b484:	e017      	b.n	800b4b6 <HAL_PCD_EP_DB_Transmit+0x186>
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	785b      	ldrb	r3, [r3, #1]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d113      	bne.n	800b4b6 <HAL_PCD_EP_DB_Transmit+0x186>
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b496:	b29b      	uxth	r3, r3
 800b498:	461a      	mov	r2, r3
 800b49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49c:	4413      	add	r3, r2
 800b49e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	00da      	lsls	r2, r3, #3
 800b4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a8:	4413      	add	r3, r2
 800b4aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b4ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	78db      	ldrb	r3, [r3, #3]
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d123      	bne.n	800b506 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4413      	add	r3, r2
 800b4cc:	881b      	ldrh	r3, [r3, #0]
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4d8:	837b      	strh	r3, [r7, #26]
 800b4da:	8b7b      	ldrh	r3, [r7, #26]
 800b4dc:	f083 0320 	eor.w	r3, r3, #32
 800b4e0:	837b      	strh	r3, [r7, #26]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	441a      	add	r2, r3
 800b4f0:	8b7b      	ldrh	r3, [r7, #26]
 800b4f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b502:	b29b      	uxth	r3, r3
 800b504:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	4619      	mov	r1, r3
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f00d fc0c 	bl	8018d2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b512:	88fb      	ldrh	r3, [r7, #6]
 800b514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d01f      	beq.n	800b55c <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	461a      	mov	r2, r3
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	4413      	add	r3, r2
 800b52a:	881b      	ldrh	r3, [r3, #0]
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b536:	833b      	strh	r3, [r7, #24]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	461a      	mov	r2, r3
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	441a      	add	r2, r3
 800b546:	8b3b      	ldrh	r3, [r7, #24]
 800b548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b54c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b550:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b558:	b29b      	uxth	r3, r3
 800b55a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	e31f      	b.n	800bba0 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b560:	88fb      	ldrh	r3, [r7, #6]
 800b562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b566:	2b00      	cmp	r3, #0
 800b568:	d021      	beq.n	800b5ae <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	461a      	mov	r2, r3
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4413      	add	r3, r2
 800b578:	881b      	ldrh	r3, [r3, #0]
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b584:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	461a      	mov	r2, r3
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	441a      	add	r2, r3
 800b596:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b59a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b59e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b5a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	f040 82ca 	bne.w	800bb4e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	695a      	ldr	r2, [r3, #20]
 800b5be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5c2:	441a      	add	r2, r3
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	69da      	ldr	r2, [r3, #28]
 800b5cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5d0:	441a      	add	r2, r3
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	6a1a      	ldr	r2, [r3, #32]
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d309      	bcc.n	800b5f6 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	6a1a      	ldr	r2, [r3, #32]
 800b5ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5ee:	1ad2      	subs	r2, r2, r3
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	621a      	str	r2, [r3, #32]
 800b5f4:	e015      	b.n	800b622 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d107      	bne.n	800b60e <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800b5fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b602:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	2200      	movs	r2, #0
 800b608:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b60c:	e009      	b.n	800b622 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	2200      	movs	r2, #0
 800b612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	6a1b      	ldr	r3, [r3, #32]
 800b61a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	2200      	movs	r2, #0
 800b620:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	785b      	ldrb	r3, [r3, #1]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d15f      	bne.n	800b6ea <HAL_PCD_EP_DB_Transmit+0x3ba>
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b638:	b29b      	uxth	r3, r3
 800b63a:	461a      	mov	r2, r3
 800b63c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b63e:	4413      	add	r3, r2
 800b640:	643b      	str	r3, [r7, #64]	@ 0x40
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	00da      	lsls	r2, r3, #3
 800b648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b64a:	4413      	add	r3, r2
 800b64c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b650:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b654:	881b      	ldrh	r3, [r3, #0]
 800b656:	b29b      	uxth	r3, r3
 800b658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b660:	801a      	strh	r2, [r3, #0]
 800b662:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10a      	bne.n	800b67e <HAL_PCD_EP_DB_Transmit+0x34e>
 800b668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b676:	b29a      	uxth	r2, r3
 800b678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b67a:	801a      	strh	r2, [r3, #0]
 800b67c:	e051      	b.n	800b722 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b67e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b680:	2b3e      	cmp	r3, #62	@ 0x3e
 800b682:	d816      	bhi.n	800b6b2 <HAL_PCD_EP_DB_Transmit+0x382>
 800b684:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b686:	085b      	lsrs	r3, r3, #1
 800b688:	653b      	str	r3, [r7, #80]	@ 0x50
 800b68a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b68c:	f003 0301 	and.w	r3, r3, #1
 800b690:	2b00      	cmp	r3, #0
 800b692:	d002      	beq.n	800b69a <HAL_PCD_EP_DB_Transmit+0x36a>
 800b694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b696:	3301      	adds	r3, #1
 800b698:	653b      	str	r3, [r7, #80]	@ 0x50
 800b69a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b69c:	881b      	ldrh	r3, [r3, #0]
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	029b      	lsls	r3, r3, #10
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ae:	801a      	strh	r2, [r3, #0]
 800b6b0:	e037      	b.n	800b722 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b6b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6b4:	095b      	lsrs	r3, r3, #5
 800b6b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6ba:	f003 031f 	and.w	r3, r3, #31
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d102      	bne.n	800b6c8 <HAL_PCD_EP_DB_Transmit+0x398>
 800b6c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ca:	881b      	ldrh	r3, [r3, #0]
 800b6cc:	b29a      	uxth	r2, r3
 800b6ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	029b      	lsls	r3, r3, #10
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6e6:	801a      	strh	r2, [r3, #0]
 800b6e8:	e01b      	b.n	800b722 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	785b      	ldrb	r3, [r3, #1]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d117      	bne.n	800b722 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b700:	b29b      	uxth	r3, r3
 800b702:	461a      	mov	r2, r3
 800b704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b706:	4413      	add	r3, r2
 800b708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	00da      	lsls	r2, r3, #3
 800b710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b712:	4413      	add	r3, r2
 800b714:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b718:	647b      	str	r3, [r7, #68]	@ 0x44
 800b71a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b720:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6818      	ldr	r0, [r3, #0]
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	6959      	ldr	r1, [r3, #20]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	891a      	ldrh	r2, [r3, #8]
 800b72e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b730:	b29b      	uxth	r3, r3
 800b732:	f007 fb7a 	bl	8012e2a <USB_WritePMA>
 800b736:	e20a      	b.n	800bb4e <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b740:	b29b      	uxth	r3, r3
 800b742:	461a      	mov	r2, r3
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	00db      	lsls	r3, r3, #3
 800b74a:	4413      	add	r3, r2
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	6812      	ldr	r2, [r2, #0]
 800b750:	4413      	add	r3, r2
 800b752:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b756:	881b      	ldrh	r3, [r3, #0]
 800b758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b75c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	699a      	ldr	r2, [r3, #24]
 800b764:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b768:	429a      	cmp	r2, r3
 800b76a:	d307      	bcc.n	800b77c <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	699a      	ldr	r2, [r3, #24]
 800b770:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b774:	1ad2      	subs	r2, r2, r3
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	619a      	str	r2, [r3, #24]
 800b77a:	e002      	b.n	800b782 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	2200      	movs	r2, #0
 800b780:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	699b      	ldr	r3, [r3, #24]
 800b786:	2b00      	cmp	r3, #0
 800b788:	f040 80f6 	bne.w	800b978 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	785b      	ldrb	r3, [r3, #1]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d126      	bne.n	800b7e2 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	677b      	str	r3, [r7, #116]	@ 0x74
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7a8:	4413      	add	r3, r2
 800b7aa:	677b      	str	r3, [r7, #116]	@ 0x74
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	00da      	lsls	r2, r3, #3
 800b7b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7b4:	4413      	add	r3, r2
 800b7b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b7ba:	673b      	str	r3, [r7, #112]	@ 0x70
 800b7bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7be:	881b      	ldrh	r3, [r3, #0]
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7ca:	801a      	strh	r2, [r3, #0]
 800b7cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7ce:	881b      	ldrh	r3, [r3, #0]
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7de:	801a      	strh	r2, [r3, #0]
 800b7e0:	e01a      	b.n	800b818 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	785b      	ldrb	r3, [r3, #1]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d116      	bne.n	800b818 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b7fe:	4413      	add	r3, r2
 800b800:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	00da      	lsls	r2, r3, #3
 800b808:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b80a:	4413      	add	r3, r2
 800b80c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b810:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b812:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b814:	2200      	movs	r2, #0
 800b816:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	785b      	ldrb	r3, [r3, #1]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d12f      	bne.n	800b888 <HAL_PCD_EP_DB_Transmit+0x558>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b838:	b29b      	uxth	r3, r3
 800b83a:	461a      	mov	r2, r3
 800b83c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b840:	4413      	add	r3, r2
 800b842:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	00da      	lsls	r2, r3, #3
 800b84c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b850:	4413      	add	r3, r2
 800b852:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b856:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b85a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	b29b      	uxth	r3, r3
 800b862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b866:	b29a      	uxth	r2, r3
 800b868:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b86c:	801a      	strh	r2, [r3, #0]
 800b86e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	b29b      	uxth	r3, r3
 800b876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b87a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b87e:	b29a      	uxth	r2, r3
 800b880:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b884:	801a      	strh	r2, [r3, #0]
 800b886:	e01c      	b.n	800b8c2 <HAL_PCD_EP_DB_Transmit+0x592>
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	785b      	ldrb	r3, [r3, #1]
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d118      	bne.n	800b8c2 <HAL_PCD_EP_DB_Transmit+0x592>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b898:	b29b      	uxth	r3, r3
 800b89a:	461a      	mov	r2, r3
 800b89c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b8a0:	4413      	add	r3, r2
 800b8a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	00da      	lsls	r2, r3, #3
 800b8ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b8b0:	4413      	add	r3, r2
 800b8b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b8b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b8ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b8be:	2200      	movs	r2, #0
 800b8c0:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	78db      	ldrb	r3, [r3, #3]
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	d127      	bne.n	800b91a <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	4413      	add	r3, r2
 800b8d8:	881b      	ldrh	r3, [r3, #0]
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8e4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b8e8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b8ec:	f083 0320 	eor.w	r3, r3, #32
 800b8f0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	441a      	add	r2, r3
 800b902:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b906:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b90a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b90e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b916:	b29b      	uxth	r3, r3
 800b918:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	4619      	mov	r1, r3
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f00d fa02 	bl	8018d2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b926:	88fb      	ldrh	r3, [r7, #6]
 800b928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d121      	bne.n	800b974 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	461a      	mov	r2, r3
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
 800b93e:	881b      	ldrh	r3, [r3, #0]
 800b940:	b29b      	uxth	r3, r3
 800b942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b94a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	461a      	mov	r2, r3
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	441a      	add	r2, r3
 800b95c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b960:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b964:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b968:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b96c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b970:	b29b      	uxth	r3, r3
 800b972:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b974:	2300      	movs	r3, #0
 800b976:	e113      	b.n	800bba0 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b978:	88fb      	ldrh	r3, [r7, #6]
 800b97a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d121      	bne.n	800b9c6 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	461a      	mov	r2, r3
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	881b      	ldrh	r3, [r3, #0]
 800b992:	b29b      	uxth	r3, r3
 800b994:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b99c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	441a      	add	r2, r3
 800b9ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b9b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b9be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	f040 80be 	bne.w	800bb4e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	695a      	ldr	r2, [r3, #20]
 800b9d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b9da:	441a      	add	r2, r3
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	69da      	ldr	r2, [r3, #28]
 800b9e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b9e8:	441a      	add	r2, r3
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	6a1a      	ldr	r2, [r3, #32]
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	691b      	ldr	r3, [r3, #16]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d309      	bcc.n	800ba0e <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	6a1a      	ldr	r2, [r3, #32]
 800ba04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba06:	1ad2      	subs	r2, r2, r3
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	621a      	str	r2, [r3, #32]
 800ba0c:	e015      	b.n	800ba3a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	6a1b      	ldr	r3, [r3, #32]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d107      	bne.n	800ba26 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800ba16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ba1a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800ba24:	e009      	b.n	800ba3a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	6a1b      	ldr	r3, [r3, #32]
 800ba2a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	785b      	ldrb	r3, [r3, #1]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d15f      	bne.n	800bb08 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	461a      	mov	r2, r3
 800ba5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba5c:	4413      	add	r3, r2
 800ba5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	00da      	lsls	r2, r3, #3
 800ba66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba68:	4413      	add	r3, r2
 800ba6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ba6e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba72:	881b      	ldrh	r3, [r3, #0]
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba7e:	801a      	strh	r2, [r3, #0]
 800ba80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10a      	bne.n	800ba9c <HAL_PCD_EP_DB_Transmit+0x76c>
 800ba86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba88:	881b      	ldrh	r3, [r3, #0]
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba98:	801a      	strh	r2, [r3, #0]
 800ba9a:	e04e      	b.n	800bb3a <HAL_PCD_EP_DB_Transmit+0x80a>
 800ba9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba9e:	2b3e      	cmp	r3, #62	@ 0x3e
 800baa0:	d816      	bhi.n	800bad0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800baa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baa4:	085b      	lsrs	r3, r3, #1
 800baa6:	663b      	str	r3, [r7, #96]	@ 0x60
 800baa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d002      	beq.n	800bab8 <HAL_PCD_EP_DB_Transmit+0x788>
 800bab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bab4:	3301      	adds	r3, #1
 800bab6:	663b      	str	r3, [r7, #96]	@ 0x60
 800bab8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800baba:	881b      	ldrh	r3, [r3, #0]
 800babc:	b29a      	uxth	r2, r3
 800babe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	029b      	lsls	r3, r3, #10
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	4313      	orrs	r3, r2
 800bac8:	b29a      	uxth	r2, r3
 800baca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bacc:	801a      	strh	r2, [r3, #0]
 800bace:	e034      	b.n	800bb3a <HAL_PCD_EP_DB_Transmit+0x80a>
 800bad0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bad2:	095b      	lsrs	r3, r3, #5
 800bad4:	663b      	str	r3, [r7, #96]	@ 0x60
 800bad6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bad8:	f003 031f 	and.w	r3, r3, #31
 800badc:	2b00      	cmp	r3, #0
 800bade:	d102      	bne.n	800bae6 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800bae0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bae2:	3b01      	subs	r3, #1
 800bae4:	663b      	str	r3, [r7, #96]	@ 0x60
 800bae6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bae8:	881b      	ldrh	r3, [r3, #0]
 800baea:	b29a      	uxth	r2, r3
 800baec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800baee:	b29b      	uxth	r3, r3
 800baf0:	029b      	lsls	r3, r3, #10
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	4313      	orrs	r3, r2
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bafc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb04:	801a      	strh	r2, [r3, #0]
 800bb06:	e018      	b.n	800bb3a <HAL_PCD_EP_DB_Transmit+0x80a>
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	785b      	ldrb	r3, [r3, #1]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d114      	bne.n	800bb3a <HAL_PCD_EP_DB_Transmit+0x80a>
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb1e:	4413      	add	r3, r2
 800bb20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	00da      	lsls	r2, r3, #3
 800bb28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb2a:	4413      	add	r3, r2
 800bb2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bb32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb38:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6818      	ldr	r0, [r3, #0]
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	6959      	ldr	r1, [r3, #20]
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	895a      	ldrh	r2, [r3, #10]
 800bb46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	f007 f96e 	bl	8012e2a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	461a      	mov	r2, r3
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb68:	82fb      	strh	r3, [r7, #22]
 800bb6a:	8afb      	ldrh	r3, [r7, #22]
 800bb6c:	f083 0310 	eor.w	r3, r3, #16
 800bb70:	82fb      	strh	r3, [r7, #22]
 800bb72:	8afb      	ldrh	r3, [r7, #22]
 800bb74:	f083 0320 	eor.w	r3, r3, #32
 800bb78:	82fb      	strh	r3, [r7, #22]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	441a      	add	r2, r3
 800bb88:	8afb      	ldrh	r3, [r7, #22]
 800bb8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3798      	adds	r7, #152	@ 0x98
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b087      	sub	sp, #28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	607b      	str	r3, [r7, #4]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	817b      	strh	r3, [r7, #10]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800bbba:	897b      	ldrh	r3, [r7, #10]
 800bbbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d00b      	beq.n	800bbde <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bbc6:	897b      	ldrh	r3, [r7, #10]
 800bbc8:	f003 0207 	and.w	r2, r3, #7
 800bbcc:	4613      	mov	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4413      	add	r3, r2
 800bbd2:	00db      	lsls	r3, r3, #3
 800bbd4:	3310      	adds	r3, #16
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	4413      	add	r3, r2
 800bbda:	617b      	str	r3, [r7, #20]
 800bbdc:	e009      	b.n	800bbf2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bbde:	897a      	ldrh	r2, [r7, #10]
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	00db      	lsls	r3, r3, #3
 800bbe8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	4413      	add	r3, r2
 800bbf0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800bbf2:	893b      	ldrh	r3, [r7, #8]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d107      	bne.n	800bc08 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	80da      	strh	r2, [r3, #6]
 800bc06:	e00b      	b.n	800bc20 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	0c1b      	lsrs	r3, r3, #16
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	371c      	adds	r7, #28
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b085      	sub	sp, #20
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	f043 0301 	orr.w	r3, r3, #1
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	f043 0302 	orr.w	r3, r3, #2
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3714      	adds	r7, #20
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
	...

0800bc84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bc84:	b480      	push	{r7}
 800bc86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc88:	4b05      	ldr	r3, [pc, #20]	@ (800bca0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a04      	ldr	r2, [pc, #16]	@ (800bca0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bc8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc92:	6013      	str	r3, [r2, #0]
}
 800bc94:	bf00      	nop
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	58000400 	.word	0x58000400

0800bca4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bca4:	b480      	push	{r7}
 800bca6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800bca8:	4b04      	ldr	r3, [pc, #16]	@ (800bcbc <HAL_PWREx_GetVoltageRange+0x18>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop
 800bcbc:	58000400 	.word	0x58000400

0800bcc0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800bcc4:	4b05      	ldr	r3, [pc, #20]	@ (800bcdc <HAL_PWREx_EnableVddUSB+0x1c>)
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	4a04      	ldr	r2, [pc, #16]	@ (800bcdc <HAL_PWREx_EnableVddUSB+0x1c>)
 800bcca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bcce:	6053      	str	r3, [r2, #4]
}
 800bcd0:	bf00      	nop
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	58000400 	.word	0x58000400

0800bce0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800bce0:	b480      	push	{r7}
 800bce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800bce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bcee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bcf2:	d101      	bne.n	800bcf8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e000      	b.n	800bcfa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800bd04:	b480      	push	{r7}
 800bd06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800bd08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd16:	6013      	str	r3, [r2, #0]
}
 800bd18:	bf00      	nop
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800bd22:	b480      	push	{r7}
 800bd24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800bd26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd34:	6013      	str	r3, [r2, #0]
}
 800bd36:	bf00      	nop
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800bd40:	b480      	push	{r7}
 800bd42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800bd44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd52:	d101      	bne.n	800bd58 <LL_RCC_HSE_IsReady+0x18>
 800bd54:	2301      	movs	r3, #1
 800bd56:	e000      	b.n	800bd5a <LL_RCC_HSE_IsReady+0x1a>
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800bd64:	b480      	push	{r7}
 800bd66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800bd68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd76:	6013      	str	r3, [r2, #0]
}
 800bd78:	bf00      	nop
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800bd82:	b480      	push	{r7}
 800bd84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800bd86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd94:	6013      	str	r3, [r2, #0]
}
 800bd96:	bf00      	nop
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800bda0:	b480      	push	{r7}
 800bda2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800bda4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bdae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bdb2:	d101      	bne.n	800bdb8 <LL_RCC_HSI_IsReady+0x18>
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e000      	b.n	800bdba <LL_RCC_HSI_IsReady+0x1a>
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800bdcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	061b      	lsls	r3, r3, #24
 800bdda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bdde:	4313      	orrs	r3, r2
 800bde0:	604b      	str	r3, [r1, #4]
}
 800bde2:	bf00      	nop
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800bdee:	b480      	push	{r7}
 800bdf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bdf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bdfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bdfe:	f043 0301 	orr.w	r3, r3, #1
 800be02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800be06:	bf00      	nop
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800be10:	b480      	push	{r7}
 800be12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800be14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800be1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be20:	f023 0301 	bic.w	r3, r3, #1
 800be24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800be28:	bf00      	nop
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr

0800be32 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800be32:	b480      	push	{r7}
 800be34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800be36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800be3e:	f003 0302 	and.w	r3, r3, #2
 800be42:	2b02      	cmp	r3, #2
 800be44:	d101      	bne.n	800be4a <LL_RCC_HSI48_IsReady+0x18>
 800be46:	2301      	movs	r3, #1
 800be48:	e000      	b.n	800be4c <LL_RCC_HSI48_IsReady+0x1a>
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800be56:	b480      	push	{r7}
 800be58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800be5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be66:	f043 0301 	orr.w	r3, r3, #1
 800be6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800be6e:	bf00      	nop
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800be78:	b480      	push	{r7}
 800be7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800be7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be88:	f023 0301 	bic.w	r3, r3, #1
 800be8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800be90:	bf00      	nop
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr

0800be9a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800be9a:	b480      	push	{r7}
 800be9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800be9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bea6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800beaa:	f043 0304 	orr.w	r3, r3, #4
 800beae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800beb2:	bf00      	nop
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800bebc:	b480      	push	{r7}
 800bebe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bec8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800becc:	f023 0304 	bic.w	r3, r3, #4
 800bed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bed4:	bf00      	nop
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr

0800bede <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800bede:	b480      	push	{r7}
 800bee0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beea:	f003 0302 	and.w	r3, r3, #2
 800beee:	2b02      	cmp	r3, #2
 800bef0:	d101      	bne.n	800bef6 <LL_RCC_LSE_IsReady+0x18>
 800bef2:	2301      	movs	r3, #1
 800bef4:	e000      	b.n	800bef8 <LL_RCC_LSE_IsReady+0x1a>
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800bf02:	b480      	push	{r7}
 800bf04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800bf06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf12:	f043 0301 	orr.w	r3, r3, #1
 800bf16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bf1a:	bf00      	nop
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800bf24:	b480      	push	{r7}
 800bf26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800bf28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf34:	f023 0301 	bic.w	r3, r3, #1
 800bf38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bf3c:	bf00      	nop
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr

0800bf46 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800bf46:	b480      	push	{r7}
 800bf48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800bf4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf52:	f003 0302 	and.w	r3, r3, #2
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	d101      	bne.n	800bf5e <LL_RCC_LSI1_IsReady+0x18>
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e000      	b.n	800bf60 <LL_RCC_LSI1_IsReady+0x1a>
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr

0800bf6a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800bf6a:	b480      	push	{r7}
 800bf6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800bf6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf7a:	f043 0304 	orr.w	r3, r3, #4
 800bf7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bf82:	bf00      	nop
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800bf90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf9c:	f023 0304 	bic.w	r3, r3, #4
 800bfa0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bfa4:	bf00      	nop
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr

0800bfae <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800bfae:	b480      	push	{r7}
 800bfb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800bfb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bfba:	f003 0308 	and.w	r3, r3, #8
 800bfbe:	2b08      	cmp	r3, #8
 800bfc0:	d101      	bne.n	800bfc6 <LL_RCC_LSI2_IsReady+0x18>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e000      	b.n	800bfc8 <LL_RCC_LSI2_IsReady+0x1a>
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b083      	sub	sp, #12
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800bfda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bfe2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	021b      	lsls	r3, r3, #8
 800bfea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bfee:	4313      	orrs	r3, r2
 800bff0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800bff4:	bf00      	nop
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800c000:	b480      	push	{r7}
 800c002:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800c004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c00e:	f043 0301 	orr.w	r3, r3, #1
 800c012:	6013      	str	r3, [r2, #0]
}
 800c014:	bf00      	nop
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr

0800c01e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800c01e:	b480      	push	{r7}
 800c020:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800c022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c02c:	f023 0301 	bic.w	r3, r3, #1
 800c030:	6013      	str	r3, [r2, #0]
}
 800c032:	bf00      	nop
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800c03c:	b480      	push	{r7}
 800c03e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800c040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 0302 	and.w	r3, r3, #2
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d101      	bne.n	800c052 <LL_RCC_MSI_IsReady+0x16>
 800c04e:	2301      	movs	r3, #1
 800c050:	e000      	b.n	800c054 <LL_RCC_MSI_IsReady+0x18>
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr

0800c05e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800c05e:	b480      	push	{r7}
 800c060:	b083      	sub	sp, #12
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800c066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c070:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4313      	orrs	r3, r2
 800c078:	600b      	str	r3, [r1, #0]
}
 800c07a:	bf00      	nop
 800c07c:	370c      	adds	r7, #12
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800c086:	b480      	push	{r7}
 800c088:	b083      	sub	sp, #12
 800c08a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c08c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c096:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2bb0      	cmp	r3, #176	@ 0xb0
 800c09c:	d901      	bls.n	800c0a2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800c09e:	23b0      	movs	r3, #176	@ 0xb0
 800c0a0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800c0a2:	687b      	ldr	r3, [r7, #4]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	370c      	adds	r7, #12
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c0b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	021b      	lsls	r3, r3, #8
 800c0c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	604b      	str	r3, [r1, #4]
}
 800c0ce:	bf00      	nop
 800c0d0:	370c      	adds	r7, #12
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b083      	sub	sp, #12
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c0e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	f023 0203 	bic.w	r2, r3, #3
 800c0ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	608b      	str	r3, [r1, #8]
}
 800c0f6:	bf00      	nop
 800c0f8:	370c      	adds	r7, #12
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr

0800c102 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800c102:	b480      	push	{r7}
 800c104:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	f003 030c 	and.w	r3, r3, #12
}
 800c110:	4618      	mov	r0, r3
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800c11a:	b480      	push	{r7}
 800c11c:	b083      	sub	sp, #12
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c12c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4313      	orrs	r3, r2
 800c134:	608b      	str	r3, [r1, #8]
}
 800c136:	bf00      	nop
 800c138:	370c      	adds	r7, #12
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr

0800c142 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800c142:	b480      	push	{r7}
 800c144:	b083      	sub	sp, #12
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c14a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c14e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c152:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c156:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800c162:	bf00      	nop
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800c16e:	b480      	push	{r7}
 800c170:	b083      	sub	sp, #12
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c17a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c17e:	f023 020f 	bic.w	r2, r3, #15
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	091b      	lsrs	r3, r3, #4
 800c186:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c18a:	4313      	orrs	r3, r2
 800c18c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800c190:	bf00      	nop
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c1a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c1ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	608b      	str	r3, [r1, #8]
}
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c1cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c1d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	608b      	str	r3, [r1, #8]
}
 800c1e0:	bf00      	nop
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c1f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800c204:	b480      	push	{r7}
 800c206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c20c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c210:	011b      	lsls	r3, r3, #4
 800c212:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c216:	4618      	mov	r0, r3
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800c220:	b480      	push	{r7}
 800c222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800c22e:	4618      	mov	r0, r3
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800c238:	b480      	push	{r7}
 800c23a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c23c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800c246:	4618      	mov	r0, r3
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c250:	b480      	push	{r7}
 800c252:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c25e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c262:	6013      	str	r3, [r2, #0]
}
 800c264:	bf00      	nop
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr

0800c26e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800c26e:	b480      	push	{r7}
 800c270:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c27c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c280:	6013      	str	r3, [r2, #0]
}
 800c282:	bf00      	nop
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c28c:	b480      	push	{r7}
 800c28e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c29a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c29e:	d101      	bne.n	800c2a4 <LL_RCC_PLL_IsReady+0x18>
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e000      	b.n	800c2a6 <LL_RCC_PLL_IsReady+0x1a>
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c2b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	0a1b      	lsrs	r3, r3, #8
 800c2bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr

0800c2ca <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c2ca:	b480      	push	{r7}
 800c2cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c2ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr

0800c2e2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c2e2:	b480      	push	{r7}
 800c2e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c2e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr

0800c2fa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c2fa:	b480      	push	{r7}
 800c2fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c2fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	f003 0303 	and.w	r3, r3, #3
}
 800c308:	4618      	mov	r0, r3
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr

0800c312 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800c312:	b480      	push	{r7}
 800c314:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c324:	d101      	bne.n	800c32a <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c326:	2301      	movs	r3, #1
 800c328:	e000      	b.n	800c32c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c32a:	2300      	movs	r3, #0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr

0800c336 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800c336:	b480      	push	{r7}
 800c338:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c33a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c33e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c34a:	d101      	bne.n	800c350 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800c34c:	2301      	movs	r3, #1
 800c34e:	e000      	b.n	800c352 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800c35c:	b480      	push	{r7}
 800c35e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c364:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c36c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c370:	d101      	bne.n	800c376 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c372:	2301      	movs	r3, #1
 800c374:	e000      	b.n	800c378 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr

0800c382 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800c382:	b480      	push	{r7}
 800c384:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c390:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c394:	d101      	bne.n	800c39a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c396:	2301      	movs	r3, #1
 800c398:	e000      	b.n	800c39c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr

0800c3a6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800c3a6:	b480      	push	{r7}
 800c3a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c3aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c3b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c3b8:	d101      	bne.n	800c3be <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e000      	b.n	800c3c0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
	...

0800c3cc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c3cc:	b590      	push	{r4, r7, lr}
 800c3ce:	b08d      	sub	sp, #52	@ 0x34
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d101      	bne.n	800c3de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e363      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 0320 	and.w	r3, r3, #32
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	f000 808d 	beq.w	800c506 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c3ec:	f7ff fe89 	bl	800c102 <LL_RCC_GetSysClkSource>
 800c3f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c3f2:	f7ff ff82 	bl	800c2fa <LL_RCC_PLL_GetMainSource>
 800c3f6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d005      	beq.n	800c40a <HAL_RCC_OscConfig+0x3e>
 800c3fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c400:	2b0c      	cmp	r3, #12
 800c402:	d147      	bne.n	800c494 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c406:	2b01      	cmp	r3, #1
 800c408:	d144      	bne.n	800c494 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	69db      	ldr	r3, [r3, #28]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d101      	bne.n	800c416 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800c412:	2301      	movs	r3, #1
 800c414:	e347      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c41a:	f7ff fe34 	bl	800c086 <LL_RCC_MSI_GetRange>
 800c41e:	4603      	mov	r3, r0
 800c420:	429c      	cmp	r4, r3
 800c422:	d914      	bls.n	800c44e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 fd2f 	bl	800ce8c <RCC_SetFlashLatencyFromMSIRange>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800c434:	2301      	movs	r3, #1
 800c436:	e336      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7ff fe0e 	bl	800c05e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff fe32 	bl	800c0b0 <LL_RCC_MSI_SetCalibTrimming>
 800c44c:	e013      	b.n	800c476 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c452:	4618      	mov	r0, r3
 800c454:	f7ff fe03 	bl	800c05e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6a1b      	ldr	r3, [r3, #32]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7ff fe27 	bl	800c0b0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c466:	4618      	mov	r0, r3
 800c468:	f000 fd10 	bl	800ce8c <RCC_SetFlashLatencyFromMSIRange>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d001      	beq.n	800c476 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	e317      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c476:	f000 fcc9 	bl	800ce0c <HAL_RCC_GetHCLKFreq>
 800c47a:	4603      	mov	r3, r0
 800c47c:	4aa4      	ldr	r2, [pc, #656]	@ (800c710 <HAL_RCC_OscConfig+0x344>)
 800c47e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c480:	4ba4      	ldr	r3, [pc, #656]	@ (800c714 <HAL_RCC_OscConfig+0x348>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4618      	mov	r0, r3
 800c486:	f7fb f87f 	bl	8007588 <HAL_InitTick>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d039      	beq.n	800c504 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	e308      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	69db      	ldr	r3, [r3, #28]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d01e      	beq.n	800c4da <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c49c:	f7ff fdb0 	bl	800c000 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c4a0:	f7fb f8c0 	bl	8007624 <HAL_GetTick>
 800c4a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c4a6:	e008      	b.n	800c4ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c4a8:	f7fb f8bc 	bl	8007624 <HAL_GetTick>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	2b02      	cmp	r3, #2
 800c4b4:	d901      	bls.n	800c4ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	e2f5      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c4ba:	f7ff fdbf 	bl	800c03c <LL_RCC_MSI_IsReady>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d0f1      	beq.n	800c4a8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7ff fdc8 	bl	800c05e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6a1b      	ldr	r3, [r3, #32]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7ff fdec 	bl	800c0b0 <LL_RCC_MSI_SetCalibTrimming>
 800c4d8:	e015      	b.n	800c506 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c4da:	f7ff fda0 	bl	800c01e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c4de:	f7fb f8a1 	bl	8007624 <HAL_GetTick>
 800c4e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c4e4:	e008      	b.n	800c4f8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c4e6:	f7fb f89d 	bl	8007624 <HAL_GetTick>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d901      	bls.n	800c4f8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800c4f4:	2303      	movs	r3, #3
 800c4f6:	e2d6      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c4f8:	f7ff fda0 	bl	800c03c <LL_RCC_MSI_IsReady>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d1f1      	bne.n	800c4e6 <HAL_RCC_OscConfig+0x11a>
 800c502:	e000      	b.n	800c506 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c504:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f003 0301 	and.w	r3, r3, #1
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d047      	beq.n	800c5a2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c512:	f7ff fdf6 	bl	800c102 <LL_RCC_GetSysClkSource>
 800c516:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c518:	f7ff feef 	bl	800c2fa <LL_RCC_PLL_GetMainSource>
 800c51c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c51e:	6a3b      	ldr	r3, [r7, #32]
 800c520:	2b08      	cmp	r3, #8
 800c522:	d005      	beq.n	800c530 <HAL_RCC_OscConfig+0x164>
 800c524:	6a3b      	ldr	r3, [r7, #32]
 800c526:	2b0c      	cmp	r3, #12
 800c528:	d108      	bne.n	800c53c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	2b03      	cmp	r3, #3
 800c52e:	d105      	bne.n	800c53c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d134      	bne.n	800c5a2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	e2b4      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c544:	d102      	bne.n	800c54c <HAL_RCC_OscConfig+0x180>
 800c546:	f7ff fbdd 	bl	800bd04 <LL_RCC_HSE_Enable>
 800c54a:	e001      	b.n	800c550 <HAL_RCC_OscConfig+0x184>
 800c54c:	f7ff fbe9 	bl	800bd22 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d012      	beq.n	800c57e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c558:	f7fb f864 	bl	8007624 <HAL_GetTick>
 800c55c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c55e:	e008      	b.n	800c572 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c560:	f7fb f860 	bl	8007624 <HAL_GetTick>
 800c564:	4602      	mov	r2, r0
 800c566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c568:	1ad3      	subs	r3, r2, r3
 800c56a:	2b64      	cmp	r3, #100	@ 0x64
 800c56c:	d901      	bls.n	800c572 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800c56e:	2303      	movs	r3, #3
 800c570:	e299      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c572:	f7ff fbe5 	bl	800bd40 <LL_RCC_HSE_IsReady>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d0f1      	beq.n	800c560 <HAL_RCC_OscConfig+0x194>
 800c57c:	e011      	b.n	800c5a2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c57e:	f7fb f851 	bl	8007624 <HAL_GetTick>
 800c582:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c584:	e008      	b.n	800c598 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c586:	f7fb f84d 	bl	8007624 <HAL_GetTick>
 800c58a:	4602      	mov	r2, r0
 800c58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58e:	1ad3      	subs	r3, r2, r3
 800c590:	2b64      	cmp	r3, #100	@ 0x64
 800c592:	d901      	bls.n	800c598 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c594:	2303      	movs	r3, #3
 800c596:	e286      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c598:	f7ff fbd2 	bl	800bd40 <LL_RCC_HSE_IsReady>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1f1      	bne.n	800c586 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f003 0302 	and.w	r3, r3, #2
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d04c      	beq.n	800c648 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c5ae:	f7ff fda8 	bl	800c102 <LL_RCC_GetSysClkSource>
 800c5b2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c5b4:	f7ff fea1 	bl	800c2fa <LL_RCC_PLL_GetMainSource>
 800c5b8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	d005      	beq.n	800c5cc <HAL_RCC_OscConfig+0x200>
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	2b0c      	cmp	r3, #12
 800c5c4:	d10e      	bne.n	800c5e4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d10b      	bne.n	800c5e4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d101      	bne.n	800c5d8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	e266      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	691b      	ldr	r3, [r3, #16]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff fbf1 	bl	800bdc4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c5e2:	e031      	b.n	800c648 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d019      	beq.n	800c620 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c5ec:	f7ff fbba 	bl	800bd64 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5f0:	f7fb f818 	bl	8007624 <HAL_GetTick>
 800c5f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c5f6:	e008      	b.n	800c60a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5f8:	f7fb f814 	bl	8007624 <HAL_GetTick>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	2b02      	cmp	r3, #2
 800c604:	d901      	bls.n	800c60a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c606:	2303      	movs	r3, #3
 800c608:	e24d      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c60a:	f7ff fbc9 	bl	800bda0 <LL_RCC_HSI_IsReady>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d0f1      	beq.n	800c5f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	4618      	mov	r0, r3
 800c61a:	f7ff fbd3 	bl	800bdc4 <LL_RCC_HSI_SetCalibTrimming>
 800c61e:	e013      	b.n	800c648 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c620:	f7ff fbaf 	bl	800bd82 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c624:	f7fa fffe 	bl	8007624 <HAL_GetTick>
 800c628:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c62a:	e008      	b.n	800c63e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c62c:	f7fa fffa 	bl	8007624 <HAL_GetTick>
 800c630:	4602      	mov	r2, r0
 800c632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c634:	1ad3      	subs	r3, r2, r3
 800c636:	2b02      	cmp	r3, #2
 800c638:	d901      	bls.n	800c63e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c63a:	2303      	movs	r3, #3
 800c63c:	e233      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c63e:	f7ff fbaf 	bl	800bda0 <LL_RCC_HSI_IsReady>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d1f1      	bne.n	800c62c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f003 0308 	and.w	r3, r3, #8
 800c650:	2b00      	cmp	r3, #0
 800c652:	d106      	bne.n	800c662 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f000 80a3 	beq.w	800c7a8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d076      	beq.n	800c758 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f003 0310 	and.w	r3, r3, #16
 800c672:	2b00      	cmp	r3, #0
 800c674:	d046      	beq.n	800c704 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c676:	f7ff fc66 	bl	800bf46 <LL_RCC_LSI1_IsReady>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d113      	bne.n	800c6a8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c680:	f7ff fc3f 	bl	800bf02 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c684:	f7fa ffce 	bl	8007624 <HAL_GetTick>
 800c688:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c68a:	e008      	b.n	800c69e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c68c:	f7fa ffca 	bl	8007624 <HAL_GetTick>
 800c690:	4602      	mov	r2, r0
 800c692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	2b02      	cmp	r3, #2
 800c698:	d901      	bls.n	800c69e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c69a:	2303      	movs	r3, #3
 800c69c:	e203      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c69e:	f7ff fc52 	bl	800bf46 <LL_RCC_LSI1_IsReady>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d0f1      	beq.n	800c68c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c6a8:	f7ff fc5f 	bl	800bf6a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6ac:	f7fa ffba 	bl	8007624 <HAL_GetTick>
 800c6b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c6b2:	e008      	b.n	800c6c6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c6b4:	f7fa ffb6 	bl	8007624 <HAL_GetTick>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	2b03      	cmp	r3, #3
 800c6c0:	d901      	bls.n	800c6c6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c6c2:	2303      	movs	r3, #3
 800c6c4:	e1ef      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c6c6:	f7ff fc72 	bl	800bfae <LL_RCC_LSI2_IsReady>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d0f1      	beq.n	800c6b4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	699b      	ldr	r3, [r3, #24]
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7ff fc7c 	bl	800bfd2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c6da:	f7ff fc23 	bl	800bf24 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6de:	f7fa ffa1 	bl	8007624 <HAL_GetTick>
 800c6e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c6e4:	e008      	b.n	800c6f8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c6e6:	f7fa ff9d 	bl	8007624 <HAL_GetTick>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d901      	bls.n	800c6f8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c6f4:	2303      	movs	r3, #3
 800c6f6:	e1d6      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c6f8:	f7ff fc25 	bl	800bf46 <LL_RCC_LSI1_IsReady>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1f1      	bne.n	800c6e6 <HAL_RCC_OscConfig+0x31a>
 800c702:	e051      	b.n	800c7a8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c704:	f7ff fbfd 	bl	800bf02 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c708:	f7fa ff8c 	bl	8007624 <HAL_GetTick>
 800c70c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c70e:	e00c      	b.n	800c72a <HAL_RCC_OscConfig+0x35e>
 800c710:	20000034 	.word	0x20000034
 800c714:	20000038 	.word	0x20000038
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c718:	f7fa ff84 	bl	8007624 <HAL_GetTick>
 800c71c:	4602      	mov	r2, r0
 800c71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c720:	1ad3      	subs	r3, r2, r3
 800c722:	2b02      	cmp	r3, #2
 800c724:	d901      	bls.n	800c72a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c726:	2303      	movs	r3, #3
 800c728:	e1bd      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c72a:	f7ff fc0c 	bl	800bf46 <LL_RCC_LSI1_IsReady>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d0f1      	beq.n	800c718 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c734:	f7ff fc2a 	bl	800bf8c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c738:	e008      	b.n	800c74c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c73a:	f7fa ff73 	bl	8007624 <HAL_GetTick>
 800c73e:	4602      	mov	r2, r0
 800c740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	2b03      	cmp	r3, #3
 800c746:	d901      	bls.n	800c74c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c748:	2303      	movs	r3, #3
 800c74a:	e1ac      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c74c:	f7ff fc2f 	bl	800bfae <LL_RCC_LSI2_IsReady>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1f1      	bne.n	800c73a <HAL_RCC_OscConfig+0x36e>
 800c756:	e027      	b.n	800c7a8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c758:	f7ff fc18 	bl	800bf8c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c75c:	f7fa ff62 	bl	8007624 <HAL_GetTick>
 800c760:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c762:	e008      	b.n	800c776 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c764:	f7fa ff5e 	bl	8007624 <HAL_GetTick>
 800c768:	4602      	mov	r2, r0
 800c76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	2b03      	cmp	r3, #3
 800c770:	d901      	bls.n	800c776 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c772:	2303      	movs	r3, #3
 800c774:	e197      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c776:	f7ff fc1a 	bl	800bfae <LL_RCC_LSI2_IsReady>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1f1      	bne.n	800c764 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c780:	f7ff fbd0 	bl	800bf24 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c784:	f7fa ff4e 	bl	8007624 <HAL_GetTick>
 800c788:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c78a:	e008      	b.n	800c79e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c78c:	f7fa ff4a 	bl	8007624 <HAL_GetTick>
 800c790:	4602      	mov	r2, r0
 800c792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	2b02      	cmp	r3, #2
 800c798:	d901      	bls.n	800c79e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800c79a:	2303      	movs	r3, #3
 800c79c:	e183      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c79e:	f7ff fbd2 	bl	800bf46 <LL_RCC_LSI1_IsReady>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1f1      	bne.n	800c78c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f003 0304 	and.w	r3, r3, #4
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d05b      	beq.n	800c86c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c7b4:	4ba7      	ldr	r3, [pc, #668]	@ (800ca54 <HAL_RCC_OscConfig+0x688>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d114      	bne.n	800c7ea <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c7c0:	f7ff fa60 	bl	800bc84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c7c4:	f7fa ff2e 	bl	8007624 <HAL_GetTick>
 800c7c8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c7ca:	e008      	b.n	800c7de <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c7cc:	f7fa ff2a 	bl	8007624 <HAL_GetTick>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d4:	1ad3      	subs	r3, r2, r3
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	d901      	bls.n	800c7de <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800c7da:	2303      	movs	r3, #3
 800c7dc:	e163      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c7de:	4b9d      	ldr	r3, [pc, #628]	@ (800ca54 <HAL_RCC_OscConfig+0x688>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d0f0      	beq.n	800c7cc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d102      	bne.n	800c7f8 <HAL_RCC_OscConfig+0x42c>
 800c7f2:	f7ff fb30 	bl	800be56 <LL_RCC_LSE_Enable>
 800c7f6:	e00c      	b.n	800c812 <HAL_RCC_OscConfig+0x446>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	2b05      	cmp	r3, #5
 800c7fe:	d104      	bne.n	800c80a <HAL_RCC_OscConfig+0x43e>
 800c800:	f7ff fb4b 	bl	800be9a <LL_RCC_LSE_EnableBypass>
 800c804:	f7ff fb27 	bl	800be56 <LL_RCC_LSE_Enable>
 800c808:	e003      	b.n	800c812 <HAL_RCC_OscConfig+0x446>
 800c80a:	f7ff fb35 	bl	800be78 <LL_RCC_LSE_Disable>
 800c80e:	f7ff fb55 	bl	800bebc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d014      	beq.n	800c844 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c81a:	f7fa ff03 	bl	8007624 <HAL_GetTick>
 800c81e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c820:	e00a      	b.n	800c838 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c822:	f7fa feff 	bl	8007624 <HAL_GetTick>
 800c826:	4602      	mov	r2, r0
 800c828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82a:	1ad3      	subs	r3, r2, r3
 800c82c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c830:	4293      	cmp	r3, r2
 800c832:	d901      	bls.n	800c838 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800c834:	2303      	movs	r3, #3
 800c836:	e136      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c838:	f7ff fb51 	bl	800bede <LL_RCC_LSE_IsReady>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d0ef      	beq.n	800c822 <HAL_RCC_OscConfig+0x456>
 800c842:	e013      	b.n	800c86c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c844:	f7fa feee 	bl	8007624 <HAL_GetTick>
 800c848:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c84a:	e00a      	b.n	800c862 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c84c:	f7fa feea 	bl	8007624 <HAL_GetTick>
 800c850:	4602      	mov	r2, r0
 800c852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c854:	1ad3      	subs	r3, r2, r3
 800c856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d901      	bls.n	800c862 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800c85e:	2303      	movs	r3, #3
 800c860:	e121      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c862:	f7ff fb3c 	bl	800bede <LL_RCC_LSE_IsReady>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1ef      	bne.n	800c84c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c874:	2b00      	cmp	r3, #0
 800c876:	d02c      	beq.n	800c8d2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d014      	beq.n	800c8aa <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c880:	f7ff fab5 	bl	800bdee <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c884:	f7fa fece 	bl	8007624 <HAL_GetTick>
 800c888:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c88a:	e008      	b.n	800c89e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c88c:	f7fa feca 	bl	8007624 <HAL_GetTick>
 800c890:	4602      	mov	r2, r0
 800c892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	2b02      	cmp	r3, #2
 800c898:	d901      	bls.n	800c89e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800c89a:	2303      	movs	r3, #3
 800c89c:	e103      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c89e:	f7ff fac8 	bl	800be32 <LL_RCC_HSI48_IsReady>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d0f1      	beq.n	800c88c <HAL_RCC_OscConfig+0x4c0>
 800c8a8:	e013      	b.n	800c8d2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c8aa:	f7ff fab1 	bl	800be10 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8ae:	f7fa feb9 	bl	8007624 <HAL_GetTick>
 800c8b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c8b4:	e008      	b.n	800c8c8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c8b6:	f7fa feb5 	bl	8007624 <HAL_GetTick>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	d901      	bls.n	800c8c8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800c8c4:	2303      	movs	r3, #3
 800c8c6:	e0ee      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c8c8:	f7ff fab3 	bl	800be32 <LL_RCC_HSI48_IsReady>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1f1      	bne.n	800c8b6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f000 80e4 	beq.w	800caa4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8dc:	f7ff fc11 	bl	800c102 <LL_RCC_GetSysClkSource>
 800c8e0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c8e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8e6:	68db      	ldr	r3, [r3, #12]
 800c8e8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	f040 80b4 	bne.w	800ca5c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f003 0203 	and.w	r2, r3, #3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d123      	bne.n	800c94a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d11c      	bne.n	800c94a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	0a1b      	lsrs	r3, r3, #8
 800c914:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d114      	bne.n	800c94a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d10d      	bne.n	800c94a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c938:	429a      	cmp	r2, r3
 800c93a:	d106      	bne.n	800c94a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c946:	429a      	cmp	r2, r3
 800c948:	d05d      	beq.n	800ca06 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	2b0c      	cmp	r3, #12
 800c94e:	d058      	beq.n	800ca02 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d001      	beq.n	800c962 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800c95e:	2301      	movs	r3, #1
 800c960:	e0a1      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c962:	f7ff fc84 	bl	800c26e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c966:	f7fa fe5d 	bl	8007624 <HAL_GetTick>
 800c96a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c96c:	e008      	b.n	800c980 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c96e:	f7fa fe59 	bl	8007624 <HAL_GetTick>
 800c972:	4602      	mov	r2, r0
 800c974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d901      	bls.n	800c980 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800c97c:	2303      	movs	r3, #3
 800c97e:	e092      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1ef      	bne.n	800c96e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c98e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c992:	68da      	ldr	r2, [r3, #12]
 800c994:	4b30      	ldr	r3, [pc, #192]	@ (800ca58 <HAL_RCC_OscConfig+0x68c>)
 800c996:	4013      	ands	r3, r2
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c9a0:	4311      	orrs	r1, r2
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c9a6:	0212      	lsls	r2, r2, #8
 800c9a8:	4311      	orrs	r1, r2
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c9ae:	4311      	orrs	r1, r2
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c9b4:	4311      	orrs	r1, r2
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c9ba:	430a      	orrs	r2, r1
 800c9bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c9c4:	f7ff fc44 	bl	800c250 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c9c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9cc:	68db      	ldr	r3, [r3, #12]
 800c9ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c9d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c9d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c9d8:	f7fa fe24 	bl	8007624 <HAL_GetTick>
 800c9dc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c9de:	e008      	b.n	800c9f2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9e0:	f7fa fe20 	bl	8007624 <HAL_GetTick>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d901      	bls.n	800c9f2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	e059      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c9f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d0ef      	beq.n	800c9e0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca00:	e050      	b.n	800caa4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ca02:	2301      	movs	r3, #1
 800ca04:	e04f      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ca06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d147      	bne.n	800caa4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ca14:	f7ff fc1c 	bl	800c250 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ca18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ca22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ca28:	f7fa fdfc 	bl	8007624 <HAL_GetTick>
 800ca2c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ca2e:	e008      	b.n	800ca42 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca30:	f7fa fdf8 	bl	8007624 <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d901      	bls.n	800ca42 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e031      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ca42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d0ef      	beq.n	800ca30 <HAL_RCC_OscConfig+0x664>
 800ca50:	e028      	b.n	800caa4 <HAL_RCC_OscConfig+0x6d8>
 800ca52:	bf00      	nop
 800ca54:	58000400 	.word	0x58000400
 800ca58:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	2b0c      	cmp	r3, #12
 800ca60:	d01e      	beq.n	800caa0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca62:	f7ff fc04 	bl	800c26e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca66:	f7fa fddd 	bl	8007624 <HAL_GetTick>
 800ca6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ca6c:	e008      	b.n	800ca80 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca6e:	f7fa fdd9 	bl	8007624 <HAL_GetTick>
 800ca72:	4602      	mov	r2, r0
 800ca74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca76:	1ad3      	subs	r3, r2, r3
 800ca78:	2b02      	cmp	r3, #2
 800ca7a:	d901      	bls.n	800ca80 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800ca7c:	2303      	movs	r3, #3
 800ca7e:	e012      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ca80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1ef      	bne.n	800ca6e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800ca8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca92:	68da      	ldr	r2, [r3, #12]
 800ca94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ca98:	4b05      	ldr	r3, [pc, #20]	@ (800cab0 <HAL_RCC_OscConfig+0x6e4>)
 800ca9a:	4013      	ands	r3, r2
 800ca9c:	60cb      	str	r3, [r1, #12]
 800ca9e:	e001      	b.n	800caa4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800caa0:	2301      	movs	r3, #1
 800caa2:	e000      	b.n	800caa6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3734      	adds	r7, #52	@ 0x34
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd90      	pop	{r4, r7, pc}
 800caae:	bf00      	nop
 800cab0:	eefefffc 	.word	0xeefefffc

0800cab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d101      	bne.n	800cac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cac4:	2301      	movs	r3, #1
 800cac6:	e12d      	b.n	800cd24 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cac8:	4b98      	ldr	r3, [pc, #608]	@ (800cd2c <HAL_RCC_ClockConfig+0x278>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f003 0307 	and.w	r3, r3, #7
 800cad0:	683a      	ldr	r2, [r7, #0]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d91b      	bls.n	800cb0e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cad6:	4b95      	ldr	r3, [pc, #596]	@ (800cd2c <HAL_RCC_ClockConfig+0x278>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f023 0207 	bic.w	r2, r3, #7
 800cade:	4993      	ldr	r1, [pc, #588]	@ (800cd2c <HAL_RCC_ClockConfig+0x278>)
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	4313      	orrs	r3, r2
 800cae4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cae6:	f7fa fd9d 	bl	8007624 <HAL_GetTick>
 800caea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800caec:	e008      	b.n	800cb00 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800caee:	f7fa fd99 	bl	8007624 <HAL_GetTick>
 800caf2:	4602      	mov	r2, r0
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	1ad3      	subs	r3, r2, r3
 800caf8:	2b02      	cmp	r3, #2
 800cafa:	d901      	bls.n	800cb00 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800cafc:	2303      	movs	r3, #3
 800cafe:	e111      	b.n	800cd24 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb00:	4b8a      	ldr	r3, [pc, #552]	@ (800cd2c <HAL_RCC_ClockConfig+0x278>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f003 0307 	and.w	r3, r3, #7
 800cb08:	683a      	ldr	r2, [r7, #0]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d1ef      	bne.n	800caee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f003 0302 	and.w	r3, r3, #2
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d016      	beq.n	800cb48 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7ff fafb 	bl	800c11a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cb24:	f7fa fd7e 	bl	8007624 <HAL_GetTick>
 800cb28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800cb2a:	e008      	b.n	800cb3e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cb2c:	f7fa fd7a 	bl	8007624 <HAL_GetTick>
 800cb30:	4602      	mov	r2, r0
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	1ad3      	subs	r3, r2, r3
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d901      	bls.n	800cb3e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	e0f2      	b.n	800cd24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800cb3e:	f7ff fbe8 	bl	800c312 <LL_RCC_IsActiveFlag_HPRE>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d0f1      	beq.n	800cb2c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f003 0320 	and.w	r3, r3, #32
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d016      	beq.n	800cb82 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	695b      	ldr	r3, [r3, #20]
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7ff faf2 	bl	800c142 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cb5e:	f7fa fd61 	bl	8007624 <HAL_GetTick>
 800cb62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800cb64:	e008      	b.n	800cb78 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cb66:	f7fa fd5d 	bl	8007624 <HAL_GetTick>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d901      	bls.n	800cb78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800cb74:	2303      	movs	r3, #3
 800cb76:	e0d5      	b.n	800cd24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800cb78:	f7ff fbdd 	bl	800c336 <LL_RCC_IsActiveFlag_C2HPRE>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d0f1      	beq.n	800cb66 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d016      	beq.n	800cbbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	699b      	ldr	r3, [r3, #24]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7ff faeb 	bl	800c16e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cb98:	f7fa fd44 	bl	8007624 <HAL_GetTick>
 800cb9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800cb9e:	e008      	b.n	800cbb2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cba0:	f7fa fd40 	bl	8007624 <HAL_GetTick>
 800cba4:	4602      	mov	r2, r0
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d901      	bls.n	800cbb2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	e0b8      	b.n	800cd24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800cbb2:	f7ff fbd3 	bl	800c35c <LL_RCC_IsActiveFlag_SHDHPRE>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d0f1      	beq.n	800cba0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f003 0304 	and.w	r3, r3, #4
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d016      	beq.n	800cbf6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7ff fae5 	bl	800c19c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cbd2:	f7fa fd27 	bl	8007624 <HAL_GetTick>
 800cbd6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cbd8:	e008      	b.n	800cbec <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cbda:	f7fa fd23 	bl	8007624 <HAL_GetTick>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	d901      	bls.n	800cbec <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	e09b      	b.n	800cd24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cbec:	f7ff fbc9 	bl	800c382 <LL_RCC_IsActiveFlag_PPRE1>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d0f1      	beq.n	800cbda <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f003 0308 	and.w	r3, r3, #8
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d017      	beq.n	800cc32 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	691b      	ldr	r3, [r3, #16]
 800cc06:	00db      	lsls	r3, r3, #3
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7ff fadb 	bl	800c1c4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cc0e:	f7fa fd09 	bl	8007624 <HAL_GetTick>
 800cc12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cc14:	e008      	b.n	800cc28 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cc16:	f7fa fd05 	bl	8007624 <HAL_GetTick>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	1ad3      	subs	r3, r2, r3
 800cc20:	2b02      	cmp	r3, #2
 800cc22:	d901      	bls.n	800cc28 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800cc24:	2303      	movs	r3, #3
 800cc26:	e07d      	b.n	800cd24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cc28:	f7ff fbbd 	bl	800c3a6 <LL_RCC_IsActiveFlag_PPRE2>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d0f1      	beq.n	800cc16 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 0301 	and.w	r3, r3, #1
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d043      	beq.n	800ccc6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d106      	bne.n	800cc54 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800cc46:	f7ff f87b 	bl	800bd40 <LL_RCC_HSE_IsReady>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d11e      	bne.n	800cc8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	e067      	b.n	800cd24 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	2b03      	cmp	r3, #3
 800cc5a:	d106      	bne.n	800cc6a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800cc5c:	f7ff fb16 	bl	800c28c <LL_RCC_PLL_IsReady>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d113      	bne.n	800cc8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cc66:	2301      	movs	r3, #1
 800cc68:	e05c      	b.n	800cd24 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d106      	bne.n	800cc80 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800cc72:	f7ff f9e3 	bl	800c03c <LL_RCC_MSI_IsReady>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d108      	bne.n	800cc8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	e051      	b.n	800cd24 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800cc80:	f7ff f88e 	bl	800bda0 <LL_RCC_HSI_IsReady>
 800cc84:	4603      	mov	r3, r0
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d101      	bne.n	800cc8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e04a      	b.n	800cd24 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7ff fa21 	bl	800c0da <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc98:	f7fa fcc4 	bl	8007624 <HAL_GetTick>
 800cc9c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc9e:	e00a      	b.n	800ccb6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cca0:	f7fa fcc0 	bl	8007624 <HAL_GetTick>
 800cca4:	4602      	mov	r2, r0
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d901      	bls.n	800ccb6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800ccb2:	2303      	movs	r3, #3
 800ccb4:	e036      	b.n	800cd24 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ccb6:	f7ff fa24 	bl	800c102 <LL_RCC_GetSysClkSource>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d1ec      	bne.n	800cca0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ccc6:	4b19      	ldr	r3, [pc, #100]	@ (800cd2c <HAL_RCC_ClockConfig+0x278>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f003 0307 	and.w	r3, r3, #7
 800ccce:	683a      	ldr	r2, [r7, #0]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d21b      	bcs.n	800cd0c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ccd4:	4b15      	ldr	r3, [pc, #84]	@ (800cd2c <HAL_RCC_ClockConfig+0x278>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f023 0207 	bic.w	r2, r3, #7
 800ccdc:	4913      	ldr	r1, [pc, #76]	@ (800cd2c <HAL_RCC_ClockConfig+0x278>)
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	4313      	orrs	r3, r2
 800cce2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cce4:	f7fa fc9e 	bl	8007624 <HAL_GetTick>
 800cce8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ccea:	e008      	b.n	800ccfe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ccec:	f7fa fc9a 	bl	8007624 <HAL_GetTick>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	2b02      	cmp	r3, #2
 800ccf8:	d901      	bls.n	800ccfe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800ccfa:	2303      	movs	r3, #3
 800ccfc:	e012      	b.n	800cd24 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ccfe:	4b0b      	ldr	r3, [pc, #44]	@ (800cd2c <HAL_RCC_ClockConfig+0x278>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f003 0307 	and.w	r3, r3, #7
 800cd06:	683a      	ldr	r2, [r7, #0]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d1ef      	bne.n	800ccec <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800cd0c:	f000 f87e 	bl	800ce0c <HAL_RCC_GetHCLKFreq>
 800cd10:	4603      	mov	r3, r0
 800cd12:	4a07      	ldr	r2, [pc, #28]	@ (800cd30 <HAL_RCC_ClockConfig+0x27c>)
 800cd14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800cd16:	f7fa fc91 	bl	800763c <HAL_GetTickPrio>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fa fc33 	bl	8007588 <HAL_InitTick>
 800cd22:	4603      	mov	r3, r0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	58004000 	.word	0x58004000
 800cd30:	20000034 	.word	0x20000034

0800cd34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cd34:	b590      	push	{r4, r7, lr}
 800cd36:	b085      	sub	sp, #20
 800cd38:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cd3a:	f7ff f9e2 	bl	800c102 <LL_RCC_GetSysClkSource>
 800cd3e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d10a      	bne.n	800cd5c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cd46:	f7ff f99e 	bl	800c086 <LL_RCC_MSI_GetRange>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	091b      	lsrs	r3, r3, #4
 800cd4e:	f003 030f 	and.w	r3, r3, #15
 800cd52:	4a2b      	ldr	r2, [pc, #172]	@ (800ce00 <HAL_RCC_GetSysClockFreq+0xcc>)
 800cd54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd58:	60fb      	str	r3, [r7, #12]
 800cd5a:	e04b      	b.n	800cdf4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b04      	cmp	r3, #4
 800cd60:	d102      	bne.n	800cd68 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cd62:	4b28      	ldr	r3, [pc, #160]	@ (800ce04 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cd64:	60fb      	str	r3, [r7, #12]
 800cd66:	e045      	b.n	800cdf4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2b08      	cmp	r3, #8
 800cd6c:	d10a      	bne.n	800cd84 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cd6e:	f7fe ffb7 	bl	800bce0 <LL_RCC_HSE_IsEnabledDiv2>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d102      	bne.n	800cd7e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800cd78:	4b22      	ldr	r3, [pc, #136]	@ (800ce04 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cd7a:	60fb      	str	r3, [r7, #12]
 800cd7c:	e03a      	b.n	800cdf4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800cd7e:	4b22      	ldr	r3, [pc, #136]	@ (800ce08 <HAL_RCC_GetSysClockFreq+0xd4>)
 800cd80:	60fb      	str	r3, [r7, #12]
 800cd82:	e037      	b.n	800cdf4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800cd84:	f7ff fab9 	bl	800c2fa <LL_RCC_PLL_GetMainSource>
 800cd88:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	2b02      	cmp	r3, #2
 800cd8e:	d003      	beq.n	800cd98 <HAL_RCC_GetSysClockFreq+0x64>
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	2b03      	cmp	r3, #3
 800cd94:	d003      	beq.n	800cd9e <HAL_RCC_GetSysClockFreq+0x6a>
 800cd96:	e00d      	b.n	800cdb4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800cd98:	4b1a      	ldr	r3, [pc, #104]	@ (800ce04 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cd9a:	60bb      	str	r3, [r7, #8]
        break;
 800cd9c:	e015      	b.n	800cdca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cd9e:	f7fe ff9f 	bl	800bce0 <LL_RCC_HSE_IsEnabledDiv2>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d102      	bne.n	800cdae <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800cda8:	4b16      	ldr	r3, [pc, #88]	@ (800ce04 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cdaa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800cdac:	e00d      	b.n	800cdca <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800cdae:	4b16      	ldr	r3, [pc, #88]	@ (800ce08 <HAL_RCC_GetSysClockFreq+0xd4>)
 800cdb0:	60bb      	str	r3, [r7, #8]
        break;
 800cdb2:	e00a      	b.n	800cdca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cdb4:	f7ff f967 	bl	800c086 <LL_RCC_MSI_GetRange>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	091b      	lsrs	r3, r3, #4
 800cdbc:	f003 030f 	and.w	r3, r3, #15
 800cdc0:	4a0f      	ldr	r2, [pc, #60]	@ (800ce00 <HAL_RCC_GetSysClockFreq+0xcc>)
 800cdc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdc6:	60bb      	str	r3, [r7, #8]
        break;
 800cdc8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800cdca:	f7ff fa71 	bl	800c2b0 <LL_RCC_PLL_GetN>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	fb03 f402 	mul.w	r4, r3, r2
 800cdd6:	f7ff fa84 	bl	800c2e2 <LL_RCC_PLL_GetDivider>
 800cdda:	4603      	mov	r3, r0
 800cddc:	091b      	lsrs	r3, r3, #4
 800cdde:	3301      	adds	r3, #1
 800cde0:	fbb4 f4f3 	udiv	r4, r4, r3
 800cde4:	f7ff fa71 	bl	800c2ca <LL_RCC_PLL_GetR>
 800cde8:	4603      	mov	r3, r0
 800cdea:	0f5b      	lsrs	r3, r3, #29
 800cdec:	3301      	adds	r3, #1
 800cdee:	fbb4 f3f3 	udiv	r3, r4, r3
 800cdf2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd90      	pop	{r4, r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	08023098 	.word	0x08023098
 800ce04:	00f42400 	.word	0x00f42400
 800ce08:	01e84800 	.word	0x01e84800

0800ce0c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ce0c:	b598      	push	{r3, r4, r7, lr}
 800ce0e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ce10:	f7ff ff90 	bl	800cd34 <HAL_RCC_GetSysClockFreq>
 800ce14:	4604      	mov	r4, r0
 800ce16:	f7ff f9e9 	bl	800c1ec <LL_RCC_GetAHBPrescaler>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	091b      	lsrs	r3, r3, #4
 800ce1e:	f003 030f 	and.w	r3, r3, #15
 800ce22:	4a03      	ldr	r2, [pc, #12]	@ (800ce30 <HAL_RCC_GetHCLKFreq+0x24>)
 800ce24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce28:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	bd98      	pop	{r3, r4, r7, pc}
 800ce30:	08023038 	.word	0x08023038

0800ce34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ce34:	b598      	push	{r3, r4, r7, lr}
 800ce36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800ce38:	f7ff ffe8 	bl	800ce0c <HAL_RCC_GetHCLKFreq>
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	f7ff f9ef 	bl	800c220 <LL_RCC_GetAPB1Prescaler>
 800ce42:	4603      	mov	r3, r0
 800ce44:	0a1b      	lsrs	r3, r3, #8
 800ce46:	f003 0307 	and.w	r3, r3, #7
 800ce4a:	4a04      	ldr	r2, [pc, #16]	@ (800ce5c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ce4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce50:	f003 031f 	and.w	r3, r3, #31
 800ce54:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	bd98      	pop	{r3, r4, r7, pc}
 800ce5c:	08023078 	.word	0x08023078

0800ce60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ce60:	b598      	push	{r3, r4, r7, lr}
 800ce62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800ce64:	f7ff ffd2 	bl	800ce0c <HAL_RCC_GetHCLKFreq>
 800ce68:	4604      	mov	r4, r0
 800ce6a:	f7ff f9e5 	bl	800c238 <LL_RCC_GetAPB2Prescaler>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	0adb      	lsrs	r3, r3, #11
 800ce72:	f003 0307 	and.w	r3, r3, #7
 800ce76:	4a04      	ldr	r2, [pc, #16]	@ (800ce88 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ce78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce7c:	f003 031f 	and.w	r3, r3, #31
 800ce80:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	bd98      	pop	{r3, r4, r7, pc}
 800ce88:	08023078 	.word	0x08023078

0800ce8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800ce8c:	b590      	push	{r4, r7, lr}
 800ce8e:	b085      	sub	sp, #20
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2bb0      	cmp	r3, #176	@ 0xb0
 800ce98:	d903      	bls.n	800cea2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ce9a:	4b15      	ldr	r3, [pc, #84]	@ (800cef0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ce9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce9e:	60fb      	str	r3, [r7, #12]
 800cea0:	e007      	b.n	800ceb2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	091b      	lsrs	r3, r3, #4
 800cea6:	f003 030f 	and.w	r3, r3, #15
 800ceaa:	4a11      	ldr	r2, [pc, #68]	@ (800cef0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ceac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceb0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800ceb2:	f7ff f9a7 	bl	800c204 <LL_RCC_GetAHB4Prescaler>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	091b      	lsrs	r3, r3, #4
 800ceba:	f003 030f 	and.w	r3, r3, #15
 800cebe:	4a0d      	ldr	r2, [pc, #52]	@ (800cef4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800cec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cec4:	68fa      	ldr	r2, [r7, #12]
 800cec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceca:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	4a0a      	ldr	r2, [pc, #40]	@ (800cef8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800ced0:	fba2 2303 	umull	r2, r3, r2, r3
 800ced4:	0c9c      	lsrs	r4, r3, #18
 800ced6:	f7fe fee5 	bl	800bca4 <HAL_PWREx_GetVoltageRange>
 800ceda:	4603      	mov	r3, r0
 800cedc:	4619      	mov	r1, r3
 800cede:	4620      	mov	r0, r4
 800cee0:	f000 f80c 	bl	800cefc <RCC_SetFlashLatency>
 800cee4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3714      	adds	r7, #20
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd90      	pop	{r4, r7, pc}
 800ceee:	bf00      	nop
 800cef0:	08023098 	.word	0x08023098
 800cef4:	08023038 	.word	0x08023038
 800cef8:	431bde83 	.word	0x431bde83

0800cefc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800cefc:	b590      	push	{r4, r7, lr}
 800cefe:	b093      	sub	sp, #76	@ 0x4c
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800cf06:	4b37      	ldr	r3, [pc, #220]	@ (800cfe4 <RCC_SetFlashLatency+0xe8>)
 800cf08:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800cf0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cf0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800cf12:	4a35      	ldr	r2, [pc, #212]	@ (800cfe8 <RCC_SetFlashLatency+0xec>)
 800cf14:	f107 031c 	add.w	r3, r7, #28
 800cf18:	ca07      	ldmia	r2, {r0, r1, r2}
 800cf1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800cf1e:	4b33      	ldr	r3, [pc, #204]	@ (800cfec <RCC_SetFlashLatency+0xf0>)
 800cf20:	f107 040c 	add.w	r4, r7, #12
 800cf24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cf26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf34:	d11a      	bne.n	800cf6c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800cf36:	2300      	movs	r3, #0
 800cf38:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf3a:	e013      	b.n	800cf64 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800cf3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	3348      	adds	r3, #72	@ 0x48
 800cf42:	443b      	add	r3, r7
 800cf44:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d807      	bhi.n	800cf5e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800cf4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	3348      	adds	r3, #72	@ 0x48
 800cf54:	443b      	add	r3, r7
 800cf56:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800cf5a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800cf5c:	e020      	b.n	800cfa0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800cf5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf60:	3301      	adds	r3, #1
 800cf62:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf66:	2b03      	cmp	r3, #3
 800cf68:	d9e8      	bls.n	800cf3c <RCC_SetFlashLatency+0x40>
 800cf6a:	e019      	b.n	800cfa0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf70:	e013      	b.n	800cf9a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800cf72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	3348      	adds	r3, #72	@ 0x48
 800cf78:	443b      	add	r3, r7
 800cf7a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d807      	bhi.n	800cf94 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800cf84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	3348      	adds	r3, #72	@ 0x48
 800cf8a:	443b      	add	r3, r7
 800cf8c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800cf90:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800cf92:	e005      	b.n	800cfa0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800cf94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf96:	3301      	adds	r3, #1
 800cf98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d9e8      	bls.n	800cf72 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800cfa0:	4b13      	ldr	r3, [pc, #76]	@ (800cff0 <RCC_SetFlashLatency+0xf4>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f023 0207 	bic.w	r2, r3, #7
 800cfa8:	4911      	ldr	r1, [pc, #68]	@ (800cff0 <RCC_SetFlashLatency+0xf4>)
 800cfaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfac:	4313      	orrs	r3, r2
 800cfae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cfb0:	f7fa fb38 	bl	8007624 <HAL_GetTick>
 800cfb4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800cfb6:	e008      	b.n	800cfca <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cfb8:	f7fa fb34 	bl	8007624 <HAL_GetTick>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc0:	1ad3      	subs	r3, r2, r3
 800cfc2:	2b02      	cmp	r3, #2
 800cfc4:	d901      	bls.n	800cfca <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	e007      	b.n	800cfda <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800cfca:	4b09      	ldr	r3, [pc, #36]	@ (800cff0 <RCC_SetFlashLatency+0xf4>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f003 0307 	and.w	r3, r3, #7
 800cfd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d1ef      	bne.n	800cfb8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	374c      	adds	r7, #76	@ 0x4c
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd90      	pop	{r4, r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	08020060 	.word	0x08020060
 800cfe8:	08020070 	.word	0x08020070
 800cfec:	0802007c 	.word	0x0802007c
 800cff0:	58004000 	.word	0x58004000

0800cff4 <LL_RCC_LSE_IsEnabled>:
{
 800cff4:	b480      	push	{r7}
 800cff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800cff8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d000:	f003 0301 	and.w	r3, r3, #1
 800d004:	2b01      	cmp	r3, #1
 800d006:	d101      	bne.n	800d00c <LL_RCC_LSE_IsEnabled+0x18>
 800d008:	2301      	movs	r3, #1
 800d00a:	e000      	b.n	800d00e <LL_RCC_LSE_IsEnabled+0x1a>
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <LL_RCC_LSE_IsReady>:
{
 800d018:	b480      	push	{r7}
 800d01a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d01c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d024:	f003 0302 	and.w	r3, r3, #2
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d101      	bne.n	800d030 <LL_RCC_LSE_IsReady+0x18>
 800d02c:	2301      	movs	r3, #1
 800d02e:	e000      	b.n	800d032 <LL_RCC_LSE_IsReady+0x1a>
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <LL_RCC_SetRFWKPClockSource>:
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800d044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d04c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d050:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	4313      	orrs	r3, r2
 800d058:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <LL_RCC_SetSMPSClockSource>:
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800d070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d076:	f023 0203 	bic.w	r2, r3, #3
 800d07a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4313      	orrs	r3, r2
 800d082:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <LL_RCC_SetSMPSPrescaler>:
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800d098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d09e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800d0a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800d0ac:	bf00      	nop
 800d0ae:	370c      	adds	r7, #12
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <LL_RCC_SetUSARTClockSource>:
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800d0c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0c8:	f023 0203 	bic.w	r2, r3, #3
 800d0cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d0d8:	bf00      	nop
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <LL_RCC_SetLPUARTClockSource>:
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800d0ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d0f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d104:	bf00      	nop
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <LL_RCC_SetI2CClockSource>:
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800d118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d11c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	091b      	lsrs	r3, r3, #4
 800d124:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800d128:	43db      	mvns	r3, r3
 800d12a:	401a      	ands	r2, r3
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	011b      	lsls	r3, r3, #4
 800d130:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800d134:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d138:	4313      	orrs	r3, r2
 800d13a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d13e:	bf00      	nop
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <LL_RCC_SetLPTIMClockSource>:
{
 800d14a:	b480      	push	{r7}
 800d14c:	b083      	sub	sp, #12
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800d152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d156:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	0c1b      	lsrs	r3, r3, #16
 800d15e:	041b      	lsls	r3, r3, #16
 800d160:	43db      	mvns	r3, r3
 800d162:	401a      	ands	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	041b      	lsls	r3, r3, #16
 800d168:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d16c:	4313      	orrs	r3, r2
 800d16e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d172:	bf00      	nop
 800d174:	370c      	adds	r7, #12
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr

0800d17e <LL_RCC_SetSAIClockSource>:
{
 800d17e:	b480      	push	{r7}
 800d180:	b083      	sub	sp, #12
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800d186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d18e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d192:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4313      	orrs	r3, r2
 800d19a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d19e:	bf00      	nop
 800d1a0:	370c      	adds	r7, #12
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr

0800d1aa <LL_RCC_SetRNGClockSource>:
{
 800d1aa:	b480      	push	{r7}
 800d1ac:	b083      	sub	sp, #12
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800d1b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1ba:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800d1be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d1ca:	bf00      	nop
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <LL_RCC_SetCLK48ClockSource>:
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b083      	sub	sp, #12
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d1de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d1ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d1f6:	bf00      	nop
 800d1f8:	370c      	adds	r7, #12
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr

0800d202 <LL_RCC_SetUSBClockSource>:
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b082      	sub	sp, #8
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7ff ffe3 	bl	800d1d6 <LL_RCC_SetCLK48ClockSource>
}
 800d210:	bf00      	nop
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <LL_RCC_SetADCClockSource>:
{
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800d220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d228:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d22c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	4313      	orrs	r3, r2
 800d234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d238:	bf00      	nop
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <LL_RCC_SetRTCClockSource>:
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d24c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d254:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d258:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	4313      	orrs	r3, r2
 800d260:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800d264:	bf00      	nop
 800d266:	370c      	adds	r7, #12
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <LL_RCC_GetRTCClockSource>:
{
 800d270:	b480      	push	{r7}
 800d272:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d27c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800d280:	4618      	mov	r0, r3
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <LL_RCC_ForceBackupDomainReset>:
{
 800d28a:	b480      	push	{r7}
 800d28c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d28e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d296:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d29a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d29e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d2a2:	bf00      	nop
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <LL_RCC_ReleaseBackupDomainReset>:
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d2b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d2b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d2bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d2c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d2c4:	bf00      	nop
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <LL_RCC_PLLSAI1_Enable>:
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d2d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d2dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d2e0:	6013      	str	r3, [r2, #0]
}
 800d2e2:	bf00      	nop
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <LL_RCC_PLLSAI1_Disable>:
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d2f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d2fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d2fe:	6013      	str	r3, [r2, #0]
}
 800d300:	bf00      	nop
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr

0800d30a <LL_RCC_PLLSAI1_IsReady>:
{
 800d30a:	b480      	push	{r7}
 800d30c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800d30e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d318:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d31c:	d101      	bne.n	800d322 <LL_RCC_PLLSAI1_IsReady+0x18>
 800d31e:	2301      	movs	r3, #1
 800d320:	e000      	b.n	800d324 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800d322:	2300      	movs	r3, #0
}
 800d324:	4618      	mov	r0, r3
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b088      	sub	sp, #32
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800d336:	2300      	movs	r3, #0
 800d338:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d33a:	2300      	movs	r3, #0
 800d33c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d346:	2b00      	cmp	r3, #0
 800d348:	d034      	beq.n	800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d34e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d352:	d021      	beq.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800d354:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d358:	d81b      	bhi.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d35a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d35e:	d01d      	beq.n	800d39c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800d360:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d364:	d815      	bhi.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d366:	2b00      	cmp	r3, #0
 800d368:	d00b      	beq.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800d36a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d36e:	d110      	bne.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800d370:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d37a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d37e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800d380:	e00d      	b.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	3304      	adds	r3, #4
 800d386:	4618      	mov	r0, r3
 800d388:	f000 f947 	bl	800d61a <RCCEx_PLLSAI1_ConfigNP>
 800d38c:	4603      	mov	r3, r0
 800d38e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d390:	e005      	b.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800d392:	2301      	movs	r3, #1
 800d394:	77fb      	strb	r3, [r7, #31]
        break;
 800d396:	e002      	b.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d398:	bf00      	nop
 800d39a:	e000      	b.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d39c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d39e:	7ffb      	ldrb	r3, [r7, #31]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d105      	bne.n	800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7ff fee8 	bl	800d17e <LL_RCC_SetSAIClockSource>
 800d3ae:	e001      	b.n	800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3b0:	7ffb      	ldrb	r3, [r7, #31]
 800d3b2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d046      	beq.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800d3c0:	f7ff ff56 	bl	800d270 <LL_RCC_GetRTCClockSource>
 800d3c4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3ca:	69ba      	ldr	r2, [r7, #24]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d03c      	beq.n	800d44a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d3d0:	f7fe fc58 	bl	800bc84 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d105      	bne.n	800d3e6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7ff ff30 	bl	800d244 <LL_RCC_SetRTCClockSource>
 800d3e4:	e02e      	b.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800d3e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3ee:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800d3f0:	f7ff ff4b 	bl	800d28a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800d3f4:	f7ff ff5a 	bl	800d2ac <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d402:	4313      	orrs	r3, r2
 800d404:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800d406:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800d410:	f7ff fdf0 	bl	800cff4 <LL_RCC_LSE_IsEnabled>
 800d414:	4603      	mov	r3, r0
 800d416:	2b01      	cmp	r3, #1
 800d418:	d114      	bne.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d41a:	f7fa f903 	bl	8007624 <HAL_GetTick>
 800d41e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800d420:	e00b      	b.n	800d43a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d422:	f7fa f8ff 	bl	8007624 <HAL_GetTick>
 800d426:	4602      	mov	r2, r0
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	1ad3      	subs	r3, r2, r3
 800d42c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d430:	4293      	cmp	r3, r2
 800d432:	d902      	bls.n	800d43a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800d434:	2303      	movs	r3, #3
 800d436:	77fb      	strb	r3, [r7, #31]
              break;
 800d438:	e004      	b.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800d43a:	f7ff fded 	bl	800d018 <LL_RCC_LSE_IsReady>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b01      	cmp	r3, #1
 800d442:	d1ee      	bne.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800d444:	7ffb      	ldrb	r3, [r7, #31]
 800d446:	77bb      	strb	r3, [r7, #30]
 800d448:	e001      	b.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d44a:	7ffb      	ldrb	r3, [r7, #31]
 800d44c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f003 0301 	and.w	r3, r3, #1
 800d456:	2b00      	cmp	r3, #0
 800d458:	d004      	beq.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	699b      	ldr	r3, [r3, #24]
 800d45e:	4618      	mov	r0, r3
 800d460:	f7ff fe2a 	bl	800d0b8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f003 0302 	and.w	r3, r3, #2
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d004      	beq.n	800d47a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	69db      	ldr	r3, [r3, #28]
 800d474:	4618      	mov	r0, r3
 800d476:	f7ff fe35 	bl	800d0e4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f003 0310 	and.w	r3, r3, #16
 800d482:	2b00      	cmp	r3, #0
 800d484:	d004      	beq.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7ff fe5d 	bl	800d14a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f003 0320 	and.w	r3, r3, #32
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d004      	beq.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7ff fe52 	bl	800d14a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f003 0304 	and.w	r3, r3, #4
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d004      	beq.n	800d4bc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6a1b      	ldr	r3, [r3, #32]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7ff fe2a 	bl	800d110 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f003 0308 	and.w	r3, r3, #8
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d004      	beq.n	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fe1f 	bl	800d110 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d022      	beq.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7ff fe8d 	bl	800d202 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d4f0:	d107      	bne.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800d4f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4f6:	68db      	ldr	r3, [r3, #12]
 800d4f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d4fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d500:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d506:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d50a:	d10b      	bne.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	3304      	adds	r3, #4
 800d510:	4618      	mov	r0, r3
 800d512:	f000 f8dd 	bl	800d6d0 <RCCEx_PLLSAI1_ConfigNQ>
 800d516:	4603      	mov	r3, r0
 800d518:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d51a:	7ffb      	ldrb	r3, [r7, #31]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d001      	beq.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800d520:	7ffb      	ldrb	r3, [r7, #31]
 800d522:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d02b      	beq.n	800d588 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d538:	d008      	beq.n	800d54c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d53e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d542:	d003      	beq.n	800d54c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d105      	bne.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d550:	4618      	mov	r0, r3
 800d552:	f7ff fe2a 	bl	800d1aa <LL_RCC_SetRNGClockSource>
 800d556:	e00a      	b.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x240>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d55c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	2000      	movs	r0, #0
 800d564:	f7ff fe21 	bl	800d1aa <LL_RCC_SetRNGClockSource>
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f7ff fe34 	bl	800d1d6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d572:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d576:	d107      	bne.n	800d588 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d582:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d586:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d590:	2b00      	cmp	r3, #0
 800d592:	d022      	beq.n	800d5da <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff fe3d 	bl	800d218 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d5a6:	d107      	bne.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d5a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d5b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d5b6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d5c0:	d10b      	bne.n	800d5da <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f000 f8dd 	bl	800d786 <RCCEx_PLLSAI1_ConfigNR>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d5d0:	7ffb      	ldrb	r3, [r7, #31]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d001      	beq.n	800d5da <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800d5d6:	7ffb      	ldrb	r3, [r7, #31]
 800d5d8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d004      	beq.n	800d5f0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7ff fd26 	bl	800d03c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d009      	beq.n	800d610 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d600:	4618      	mov	r0, r3
 800d602:	f7ff fd45 	bl	800d090 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7ff fd2c 	bl	800d068 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800d610:	7fbb      	ldrb	r3, [r7, #30]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3720      	adds	r7, #32
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b084      	sub	sp, #16
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d622:	2300      	movs	r3, #0
 800d624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d626:	f7ff fe61 	bl	800d2ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d62a:	f7f9 fffb 	bl	8007624 <HAL_GetTick>
 800d62e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d630:	e009      	b.n	800d646 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d632:	f7f9 fff7 	bl	8007624 <HAL_GetTick>
 800d636:	4602      	mov	r2, r0
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	1ad3      	subs	r3, r2, r3
 800d63c:	2b02      	cmp	r3, #2
 800d63e:	d902      	bls.n	800d646 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d640:	2303      	movs	r3, #3
 800d642:	73fb      	strb	r3, [r7, #15]
      break;
 800d644:	e004      	b.n	800d650 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d646:	f7ff fe60 	bl	800d30a <LL_RCC_PLLSAI1_IsReady>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d1f0      	bne.n	800d632 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d650:	7bfb      	ldrb	r3, [r7, #15]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d137      	bne.n	800d6c6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d65a:	691b      	ldr	r3, [r3, #16]
 800d65c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	021b      	lsls	r3, r3, #8
 800d666:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d66a:	4313      	orrs	r3, r2
 800d66c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d66e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d680:	4313      	orrs	r3, r2
 800d682:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d684:	f7ff fe23 	bl	800d2ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d688:	f7f9 ffcc 	bl	8007624 <HAL_GetTick>
 800d68c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d68e:	e009      	b.n	800d6a4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d690:	f7f9 ffc8 	bl	8007624 <HAL_GetTick>
 800d694:	4602      	mov	r2, r0
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	1ad3      	subs	r3, r2, r3
 800d69a:	2b02      	cmp	r3, #2
 800d69c:	d902      	bls.n	800d6a4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d69e:	2303      	movs	r3, #3
 800d6a0:	73fb      	strb	r3, [r7, #15]
        break;
 800d6a2:	e004      	b.n	800d6ae <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d6a4:	f7ff fe31 	bl	800d30a <LL_RCC_PLLSAI1_IsReady>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d1f0      	bne.n	800d690 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d6ae:	7bfb      	ldrb	r3, [r7, #15]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d108      	bne.n	800d6c6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d6b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6b8:	691a      	ldr	r2, [r3, #16]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	691b      	ldr	r3, [r3, #16]
 800d6be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3710      	adds	r7, #16
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d6dc:	f7ff fe06 	bl	800d2ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d6e0:	f7f9 ffa0 	bl	8007624 <HAL_GetTick>
 800d6e4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d6e6:	e009      	b.n	800d6fc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d6e8:	f7f9 ff9c 	bl	8007624 <HAL_GetTick>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	1ad3      	subs	r3, r2, r3
 800d6f2:	2b02      	cmp	r3, #2
 800d6f4:	d902      	bls.n	800d6fc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	73fb      	strb	r3, [r7, #15]
      break;
 800d6fa:	e004      	b.n	800d706 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d6fc:	f7ff fe05 	bl	800d30a <LL_RCC_PLLSAI1_IsReady>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1f0      	bne.n	800d6e8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d706:	7bfb      	ldrb	r3, [r7, #15]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d137      	bne.n	800d77c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d70c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d710:	691b      	ldr	r3, [r3, #16]
 800d712:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	021b      	lsls	r3, r3, #8
 800d71c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d720:	4313      	orrs	r3, r2
 800d722:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d736:	4313      	orrs	r3, r2
 800d738:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d73a:	f7ff fdc8 	bl	800d2ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d73e:	f7f9 ff71 	bl	8007624 <HAL_GetTick>
 800d742:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d744:	e009      	b.n	800d75a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d746:	f7f9 ff6d 	bl	8007624 <HAL_GetTick>
 800d74a:	4602      	mov	r2, r0
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	1ad3      	subs	r3, r2, r3
 800d750:	2b02      	cmp	r3, #2
 800d752:	d902      	bls.n	800d75a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d754:	2303      	movs	r3, #3
 800d756:	73fb      	strb	r3, [r7, #15]
        break;
 800d758:	e004      	b.n	800d764 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d75a:	f7ff fdd6 	bl	800d30a <LL_RCC_PLLSAI1_IsReady>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b01      	cmp	r3, #1
 800d762:	d1f0      	bne.n	800d746 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d764:	7bfb      	ldrb	r3, [r7, #15]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d108      	bne.n	800d77c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d76a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d76e:	691a      	ldr	r2, [r3, #16]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	691b      	ldr	r3, [r3, #16]
 800d774:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d778:	4313      	orrs	r3, r2
 800d77a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3710      	adds	r7, #16
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d786:	b580      	push	{r7, lr}
 800d788:	b084      	sub	sp, #16
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d78e:	2300      	movs	r3, #0
 800d790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d792:	f7ff fdab 	bl	800d2ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d796:	f7f9 ff45 	bl	8007624 <HAL_GetTick>
 800d79a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d79c:	e009      	b.n	800d7b2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d79e:	f7f9 ff41 	bl	8007624 <HAL_GetTick>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	1ad3      	subs	r3, r2, r3
 800d7a8:	2b02      	cmp	r3, #2
 800d7aa:	d902      	bls.n	800d7b2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d7ac:	2303      	movs	r3, #3
 800d7ae:	73fb      	strb	r3, [r7, #15]
      break;
 800d7b0:	e004      	b.n	800d7bc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d7b2:	f7ff fdaa 	bl	800d30a <LL_RCC_PLLSAI1_IsReady>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1f0      	bne.n	800d79e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d7bc:	7bfb      	ldrb	r3, [r7, #15]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d137      	bne.n	800d832 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d7c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	021b      	lsls	r3, r3, #8
 800d7d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d7da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7de:	691b      	ldr	r3, [r3, #16]
 800d7e0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d7f0:	f7ff fd6d 	bl	800d2ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7f4:	f7f9 ff16 	bl	8007624 <HAL_GetTick>
 800d7f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d7fa:	e009      	b.n	800d810 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d7fc:	f7f9 ff12 	bl	8007624 <HAL_GetTick>
 800d800:	4602      	mov	r2, r0
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	1ad3      	subs	r3, r2, r3
 800d806:	2b02      	cmp	r3, #2
 800d808:	d902      	bls.n	800d810 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d80a:	2303      	movs	r3, #3
 800d80c:	73fb      	strb	r3, [r7, #15]
        break;
 800d80e:	e004      	b.n	800d81a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d810:	f7ff fd7b 	bl	800d30a <LL_RCC_PLLSAI1_IsReady>
 800d814:	4603      	mov	r3, r0
 800d816:	2b01      	cmp	r3, #1
 800d818:	d1f0      	bne.n	800d7fc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d81a:	7bfb      	ldrb	r3, [r7, #15]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d108      	bne.n	800d832 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d824:	691a      	ldr	r2, [r3, #16]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d82e:	4313      	orrs	r3, r2
 800d830:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d832:	7bfb      	ldrb	r3, [r7, #15]
}
 800d834:	4618      	mov	r0, r3
 800d836:	3710      	adds	r7, #16
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800d84a:	2301      	movs	r3, #1
 800d84c:	e09f      	b.n	800d98e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d854:	b2db      	uxtb	r3, r3
 800d856:	2b00      	cmp	r3, #0
 800d858:	d106      	bne.n	800d868 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f7f6 f864 	bl	8003930 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2202      	movs	r2, #2
 800d86c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d870:	4b49      	ldr	r3, [pc, #292]	@ (800d998 <HAL_RTC_Init+0x15c>)
 800d872:	68db      	ldr	r3, [r3, #12]
 800d874:	f003 0310 	and.w	r3, r3, #16
 800d878:	2b10      	cmp	r3, #16
 800d87a:	d07e      	beq.n	800d97a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	22ca      	movs	r2, #202	@ 0xca
 800d882:	625a      	str	r2, [r3, #36]	@ 0x24
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2253      	movs	r2, #83	@ 0x53
 800d88a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 fa1d 	bl	800dccc <RTC_EnterInitMode>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d00a      	beq.n	800d8ae <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	22ff      	movs	r2, #255	@ 0xff
 800d89e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2204      	movs	r2, #4
 800d8a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	73fb      	strb	r3, [r7, #15]
 800d8ac:	e067      	b.n	800d97e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	6812      	ldr	r2, [r2, #0]
 800d8b8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d8bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8c0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6899      	ldr	r1, [r3, #8]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	685a      	ldr	r2, [r3, #4]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	691b      	ldr	r3, [r3, #16]
 800d8d0:	431a      	orrs	r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	431a      	orrs	r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	430a      	orrs	r2, r1
 800d8de:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	68d2      	ldr	r2, [r2, #12]
 800d8e8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	6919      	ldr	r1, [r3, #16]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	041a      	lsls	r2, r3, #16
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	430a      	orrs	r2, r1
 800d8fc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	68da      	ldr	r2, [r3, #12]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d90c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f022 0203 	bic.w	r2, r2, #3
 800d91c:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	69da      	ldr	r2, [r3, #28]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	695b      	ldr	r3, [r3, #20]
 800d92c:	431a      	orrs	r2, r3
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	430a      	orrs	r2, r1
 800d934:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	f003 0320 	and.w	r3, r3, #32
 800d940:	2b00      	cmp	r3, #0
 800d942:	d113      	bne.n	800d96c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 f99b 	bl	800dc80 <HAL_RTC_WaitForSynchro>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d00d      	beq.n	800d96c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	22ff      	movs	r2, #255	@ 0xff
 800d956:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2204      	movs	r2, #4
 800d95c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2200      	movs	r2, #0
 800d964:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800d968:	2301      	movs	r3, #1
 800d96a:	e010      	b.n	800d98e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	22ff      	movs	r2, #255	@ 0xff
 800d972:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800d974:	2300      	movs	r3, #0
 800d976:	73fb      	strb	r3, [r7, #15]
 800d978:	e001      	b.n	800d97e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800d97a:	2300      	movs	r3, #0
 800d97c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d103      	bne.n	800d98c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2201      	movs	r2, #1
 800d988:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800d98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	40002800 	.word	0x40002800

0800d99c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d99c:	b590      	push	{r4, r7, lr}
 800d99e:	b087      	sub	sp, #28
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d101      	bne.n	800d9b6 <HAL_RTC_SetTime+0x1a>
 800d9b2:	2302      	movs	r3, #2
 800d9b4:	e0b2      	b.n	800db1c <HAL_RTC_SetTime+0x180>
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2202      	movs	r2, #2
 800d9c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d126      	bne.n	800da1a <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	689b      	ldr	r3, [r3, #8]
 800d9d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d102      	bne.n	800d9e0 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f000 f99b 	bl	800dd20 <RTC_ByteToBcd2>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	785b      	ldrb	r3, [r3, #1]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f000 f994 	bl	800dd20 <RTC_ByteToBcd2>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d9fc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	789b      	ldrb	r3, [r3, #2]
 800da02:	4618      	mov	r0, r3
 800da04:	f000 f98c 	bl	800dd20 <RTC_ByteToBcd2>
 800da08:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800da0a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	78db      	ldrb	r3, [r3, #3]
 800da12:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800da14:	4313      	orrs	r3, r2
 800da16:	617b      	str	r3, [r7, #20]
 800da18:	e018      	b.n	800da4c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da24:	2b00      	cmp	r3, #0
 800da26:	d102      	bne.n	800da2e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	2200      	movs	r2, #0
 800da2c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	785b      	ldrb	r3, [r3, #1]
 800da38:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800da3a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800da3c:	68ba      	ldr	r2, [r7, #8]
 800da3e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800da40:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	78db      	ldrb	r3, [r3, #3]
 800da46:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800da48:	4313      	orrs	r3, r2
 800da4a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	22ca      	movs	r2, #202	@ 0xca
 800da52:	625a      	str	r2, [r3, #36]	@ 0x24
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2253      	movs	r2, #83	@ 0x53
 800da5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f000 f935 	bl	800dccc <RTC_EnterInitMode>
 800da62:	4603      	mov	r3, r0
 800da64:	2b00      	cmp	r3, #0
 800da66:	d00d      	beq.n	800da84 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	22ff      	movs	r2, #255	@ 0xff
 800da6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2204      	movs	r2, #4
 800da74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2200      	movs	r2, #0
 800da7c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800da80:	2301      	movs	r3, #1
 800da82:	e04b      	b.n	800db1c <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800da8e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800da92:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	689a      	ldr	r2, [r3, #8]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800daa2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	6899      	ldr	r1, [r3, #8]
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	68da      	ldr	r2, [r3, #12]
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	431a      	orrs	r2, r3
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	430a      	orrs	r2, r1
 800daba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	68da      	ldr	r2, [r3, #12]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800daca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	f003 0320 	and.w	r3, r3, #32
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d113      	bne.n	800db02 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dada:	68f8      	ldr	r0, [r7, #12]
 800dadc:	f000 f8d0 	bl	800dc80 <HAL_RTC_WaitForSynchro>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00d      	beq.n	800db02 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	22ff      	movs	r2, #255	@ 0xff
 800daec:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2204      	movs	r2, #4
 800daf2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2200      	movs	r2, #0
 800dafa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
 800db00:	e00c      	b.n	800db1c <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	22ff      	movs	r2, #255	@ 0xff
 800db08:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2201      	movs	r2, #1
 800db0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2200      	movs	r2, #0
 800db16:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800db1a:	2300      	movs	r3, #0
  }
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	371c      	adds	r7, #28
 800db20:	46bd      	mov	sp, r7
 800db22:	bd90      	pop	{r4, r7, pc}

0800db24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800db24:	b590      	push	{r4, r7, lr}
 800db26:	b087      	sub	sp, #28
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f893 3020 	ldrb.w	r3, [r3, #32]
 800db36:	2b01      	cmp	r3, #1
 800db38:	d101      	bne.n	800db3e <HAL_RTC_SetDate+0x1a>
 800db3a:	2302      	movs	r3, #2
 800db3c:	e09c      	b.n	800dc78 <HAL_RTC_SetDate+0x154>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2201      	movs	r2, #1
 800db42:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2202      	movs	r2, #2
 800db4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d10e      	bne.n	800db72 <HAL_RTC_SetDate+0x4e>
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	785b      	ldrb	r3, [r3, #1]
 800db58:	f003 0310 	and.w	r3, r3, #16
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d008      	beq.n	800db72 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	785b      	ldrb	r3, [r3, #1]
 800db64:	f023 0310 	bic.w	r3, r3, #16
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	330a      	adds	r3, #10
 800db6c:	b2da      	uxtb	r2, r3
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d11c      	bne.n	800dbb2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	78db      	ldrb	r3, [r3, #3]
 800db7c:	4618      	mov	r0, r3
 800db7e:	f000 f8cf 	bl	800dd20 <RTC_ByteToBcd2>
 800db82:	4603      	mov	r3, r0
 800db84:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	785b      	ldrb	r3, [r3, #1]
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 f8c8 	bl	800dd20 <RTC_ByteToBcd2>
 800db90:	4603      	mov	r3, r0
 800db92:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800db94:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	789b      	ldrb	r3, [r3, #2]
 800db9a:	4618      	mov	r0, r3
 800db9c:	f000 f8c0 	bl	800dd20 <RTC_ByteToBcd2>
 800dba0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800dba2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dbac:	4313      	orrs	r3, r2
 800dbae:	617b      	str	r3, [r7, #20]
 800dbb0:	e00e      	b.n	800dbd0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	78db      	ldrb	r3, [r3, #3]
 800dbb6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	785b      	ldrb	r3, [r3, #1]
 800dbbc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dbbe:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800dbc0:	68ba      	ldr	r2, [r7, #8]
 800dbc2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800dbc4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	22ca      	movs	r2, #202	@ 0xca
 800dbd6:	625a      	str	r2, [r3, #36]	@ 0x24
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2253      	movs	r2, #83	@ 0x53
 800dbde:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f000 f873 	bl	800dccc <RTC_EnterInitMode>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00d      	beq.n	800dc08 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	22ff      	movs	r2, #255	@ 0xff
 800dbf2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2204      	movs	r2, #4
 800dbf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800dc04:	2301      	movs	r3, #1
 800dc06:	e037      	b.n	800dc78 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dc12:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800dc16:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	68da      	ldr	r2, [r3, #12]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dc26:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	f003 0320 	and.w	r3, r3, #32
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d113      	bne.n	800dc5e <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f000 f822 	bl	800dc80 <HAL_RTC_WaitForSynchro>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00d      	beq.n	800dc5e <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	22ff      	movs	r2, #255	@ 0xff
 800dc48:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2204      	movs	r2, #4
 800dc4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2200      	movs	r2, #0
 800dc56:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	e00c      	b.n	800dc78 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	22ff      	movs	r2, #255	@ 0xff
 800dc64:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800dc76:	2300      	movs	r3, #0
  }
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	371c      	adds	r7, #28
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd90      	pop	{r4, r7, pc}

0800dc80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	68da      	ldr	r2, [r3, #12]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800dc96:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800dc98:	f7f9 fcc4 	bl	8007624 <HAL_GetTick>
 800dc9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dc9e:	e009      	b.n	800dcb4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dca0:	f7f9 fcc0 	bl	8007624 <HAL_GetTick>
 800dca4:	4602      	mov	r2, r0
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	1ad3      	subs	r3, r2, r3
 800dcaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dcae:	d901      	bls.n	800dcb4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	e007      	b.n	800dcc4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	68db      	ldr	r3, [r3, #12]
 800dcba:	f003 0320 	and.w	r3, r3, #32
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d0ee      	beq.n	800dca0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	68db      	ldr	r3, [r3, #12]
 800dcda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d119      	bne.n	800dd16 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f04f 32ff 	mov.w	r2, #4294967295
 800dcea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dcec:	f7f9 fc9a 	bl	8007624 <HAL_GetTick>
 800dcf0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dcf2:	e009      	b.n	800dd08 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dcf4:	f7f9 fc96 	bl	8007624 <HAL_GetTick>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	1ad3      	subs	r3, r2, r3
 800dcfe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dd02:	d901      	bls.n	800dd08 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800dd04:	2303      	movs	r3, #3
 800dd06:	e007      	b.n	800dd18 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d0ee      	beq.n	800dcf4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3710      	adds	r7, #16
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b085      	sub	sp, #20
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	4603      	mov	r3, r0
 800dd28:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800dd2e:	79fb      	ldrb	r3, [r7, #7]
 800dd30:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800dd32:	e005      	b.n	800dd40 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	3301      	adds	r3, #1
 800dd38:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800dd3a:	7afb      	ldrb	r3, [r7, #11]
 800dd3c:	3b0a      	subs	r3, #10
 800dd3e:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800dd40:	7afb      	ldrb	r3, [r7, #11]
 800dd42:	2b09      	cmp	r3, #9
 800dd44:	d8f6      	bhi.n	800dd34 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	011b      	lsls	r3, r3, #4
 800dd4c:	b2da      	uxtb	r2, r3
 800dd4e:	7afb      	ldrb	r3, [r7, #11]
 800dd50:	4313      	orrs	r3, r2
 800dd52:	b2db      	uxtb	r3, r3
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3714      	adds	r7, #20
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr

0800dd60 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d101      	bne.n	800dd7a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800dd76:	2302      	movs	r3, #2
 800dd78:	e0a8      	b.n	800decc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2202      	movs	r2, #2
 800dd86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	22ca      	movs	r2, #202	@ 0xca
 800dd90:	625a      	str	r2, [r3, #36]	@ 0x24
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	2253      	movs	r2, #83	@ 0x53
 800dd98:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d020      	beq.n	800ddea <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800dda8:	f7f9 fc3c 	bl	8007624 <HAL_GetTick>
 800ddac:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800ddae:	e015      	b.n	800dddc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ddb0:	f7f9 fc38 	bl	8007624 <HAL_GetTick>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	1ad3      	subs	r3, r2, r3
 800ddba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ddbe:	d90d      	bls.n	800dddc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	22ff      	movs	r2, #255	@ 0xff
 800ddc6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2203      	movs	r2, #3
 800ddcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800ddd8:	2303      	movs	r3, #3
 800ddda:	e077      	b.n	800decc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	f003 0304 	and.w	r3, r3, #4
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d1e2      	bne.n	800ddb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	689a      	ldr	r2, [r3, #8]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ddf8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	b2da      	uxtb	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800de0a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800de0c:	f7f9 fc0a 	bl	8007624 <HAL_GetTick>
 800de10:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800de12:	e015      	b.n	800de40 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800de14:	f7f9 fc06 	bl	8007624 <HAL_GetTick>
 800de18:	4602      	mov	r2, r0
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800de22:	d90d      	bls.n	800de40 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	22ff      	movs	r2, #255	@ 0xff
 800de2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2203      	movs	r2, #3
 800de30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2200      	movs	r2, #0
 800de38:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800de3c:	2303      	movs	r3, #3
 800de3e:	e045      	b.n	800decc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	f003 0304 	and.w	r3, r3, #4
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d0e2      	beq.n	800de14 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	68ba      	ldr	r2, [r7, #8]
 800de54:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	689a      	ldr	r2, [r3, #8]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f022 0207 	bic.w	r2, r2, #7
 800de64:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	6899      	ldr	r1, [r3, #8]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	430a      	orrs	r2, r1
 800de74:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800de76:	4b17      	ldr	r3, [pc, #92]	@ (800ded4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800de78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de7c:	4a15      	ldr	r2, [pc, #84]	@ (800ded4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800de7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800de82:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800de86:	4b13      	ldr	r3, [pc, #76]	@ (800ded4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a12      	ldr	r2, [pc, #72]	@ (800ded4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800de8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800de90:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	689a      	ldr	r2, [r3, #8]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dea0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	689a      	ldr	r2, [r3, #8]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800deb0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	22ff      	movs	r2, #255	@ 0xff
 800deb8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2201      	movs	r2, #1
 800debe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2200      	movs	r2, #0
 800dec6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800deca:	2300      	movs	r3, #0
}
 800decc:	4618      	mov	r0, r3
 800dece:	3718      	adds	r7, #24
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	58000800 	.word	0x58000800

0800ded8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d101      	bne.n	800deea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dee6:	2301      	movs	r3, #1
 800dee8:	e095      	b.n	800e016 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deee:	2b00      	cmp	r3, #0
 800def0:	d108      	bne.n	800df04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800defa:	d009      	beq.n	800df10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2200      	movs	r2, #0
 800df00:	61da      	str	r2, [r3, #28]
 800df02:	e005      	b.n	800df10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2200      	movs	r2, #0
 800df08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d106      	bne.n	800df30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2200      	movs	r2, #0
 800df26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f7f5 fda8 	bl	8003a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2202      	movs	r2, #2
 800df34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800df46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800df50:	d902      	bls.n	800df58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800df52:	2300      	movs	r3, #0
 800df54:	60fb      	str	r3, [r7, #12]
 800df56:	e002      	b.n	800df5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800df58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800df5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800df66:	d007      	beq.n	800df78 <HAL_SPI_Init+0xa0>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800df70:	d002      	beq.n	800df78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800df88:	431a      	orrs	r2, r3
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	691b      	ldr	r3, [r3, #16]
 800df8e:	f003 0302 	and.w	r3, r3, #2
 800df92:	431a      	orrs	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	695b      	ldr	r3, [r3, #20]
 800df98:	f003 0301 	and.w	r3, r3, #1
 800df9c:	431a      	orrs	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	699b      	ldr	r3, [r3, #24]
 800dfa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dfa6:	431a      	orrs	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	69db      	ldr	r3, [r3, #28]
 800dfac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dfb0:	431a      	orrs	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6a1b      	ldr	r3, [r3, #32]
 800dfb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfba:	ea42 0103 	orr.w	r1, r2, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfc2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	430a      	orrs	r2, r1
 800dfcc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	699b      	ldr	r3, [r3, #24]
 800dfd2:	0c1b      	lsrs	r3, r3, #16
 800dfd4:	f003 0204 	and.w	r2, r3, #4
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfdc:	f003 0310 	and.w	r3, r3, #16
 800dfe0:	431a      	orrs	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfe6:	f003 0308 	and.w	r3, r3, #8
 800dfea:	431a      	orrs	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800dff4:	ea42 0103 	orr.w	r1, r2, r3
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	430a      	orrs	r2, r1
 800e004:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2201      	movs	r2, #1
 800e010:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800e014:	2300      	movs	r3, #0
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b088      	sub	sp, #32
 800e022:	af00      	add	r7, sp, #0
 800e024:	60f8      	str	r0, [r7, #12]
 800e026:	60b9      	str	r1, [r7, #8]
 800e028:	603b      	str	r3, [r7, #0]
 800e02a:	4613      	mov	r3, r2
 800e02c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e02e:	f7f9 faf9 	bl	8007624 <HAL_GetTick>
 800e032:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800e034:	88fb      	ldrh	r3, [r7, #6]
 800e036:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	2b01      	cmp	r3, #1
 800e042:	d001      	beq.n	800e048 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800e044:	2302      	movs	r3, #2
 800e046:	e15c      	b.n	800e302 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d002      	beq.n	800e054 <HAL_SPI_Transmit+0x36>
 800e04e:	88fb      	ldrh	r3, [r7, #6]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d101      	bne.n	800e058 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800e054:	2301      	movs	r3, #1
 800e056:	e154      	b.n	800e302 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d101      	bne.n	800e066 <HAL_SPI_Transmit+0x48>
 800e062:	2302      	movs	r3, #2
 800e064:	e14d      	b.n	800e302 <HAL_SPI_Transmit+0x2e4>
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2201      	movs	r2, #1
 800e06a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2203      	movs	r2, #3
 800e072:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2200      	movs	r2, #0
 800e07a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	68ba      	ldr	r2, [r7, #8]
 800e080:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	88fa      	ldrh	r2, [r7, #6]
 800e086:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	88fa      	ldrh	r2, [r7, #6]
 800e08c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2200      	movs	r2, #0
 800e092:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e0b8:	d10f      	bne.n	800e0da <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e0c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e0d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0e4:	2b40      	cmp	r3, #64	@ 0x40
 800e0e6:	d007      	beq.n	800e0f8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e0f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e100:	d952      	bls.n	800e1a8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d002      	beq.n	800e110 <HAL_SPI_Transmit+0xf2>
 800e10a:	8b7b      	ldrh	r3, [r7, #26]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d145      	bne.n	800e19c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e114:	881a      	ldrh	r2, [r3, #0]
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e120:	1c9a      	adds	r2, r3, #2
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	3b01      	subs	r3, #1
 800e12e:	b29a      	uxth	r2, r3
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e134:	e032      	b.n	800e19c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	689b      	ldr	r3, [r3, #8]
 800e13c:	f003 0302 	and.w	r3, r3, #2
 800e140:	2b02      	cmp	r3, #2
 800e142:	d112      	bne.n	800e16a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e148:	881a      	ldrh	r2, [r3, #0]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e154:	1c9a      	adds	r2, r3, #2
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e15e:	b29b      	uxth	r3, r3
 800e160:	3b01      	subs	r3, #1
 800e162:	b29a      	uxth	r2, r3
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e168:	e018      	b.n	800e19c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e16a:	f7f9 fa5b 	bl	8007624 <HAL_GetTick>
 800e16e:	4602      	mov	r2, r0
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	1ad3      	subs	r3, r2, r3
 800e174:	683a      	ldr	r2, [r7, #0]
 800e176:	429a      	cmp	r2, r3
 800e178:	d803      	bhi.n	800e182 <HAL_SPI_Transmit+0x164>
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e180:	d102      	bne.n	800e188 <HAL_SPI_Transmit+0x16a>
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d109      	bne.n	800e19c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2201      	movs	r2, #1
 800e18c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2200      	movs	r2, #0
 800e194:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e198:	2303      	movs	r3, #3
 800e19a:	e0b2      	b.n	800e302 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1c7      	bne.n	800e136 <HAL_SPI_Transmit+0x118>
 800e1a6:	e083      	b.n	800e2b0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d002      	beq.n	800e1b6 <HAL_SPI_Transmit+0x198>
 800e1b0:	8b7b      	ldrh	r3, [r7, #26]
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d177      	bne.n	800e2a6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d912      	bls.n	800e1e6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1c4:	881a      	ldrh	r2, [r3, #0]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1d0:	1c9a      	adds	r2, r3, #2
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	3b02      	subs	r3, #2
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e1e4:	e05f      	b.n	800e2a6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	330c      	adds	r3, #12
 800e1f0:	7812      	ldrb	r2, [r2, #0]
 800e1f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1f8:	1c5a      	adds	r2, r3, #1
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e202:	b29b      	uxth	r3, r3
 800e204:	3b01      	subs	r3, #1
 800e206:	b29a      	uxth	r2, r3
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e20c:	e04b      	b.n	800e2a6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	689b      	ldr	r3, [r3, #8]
 800e214:	f003 0302 	and.w	r3, r3, #2
 800e218:	2b02      	cmp	r3, #2
 800e21a:	d12b      	bne.n	800e274 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e220:	b29b      	uxth	r3, r3
 800e222:	2b01      	cmp	r3, #1
 800e224:	d912      	bls.n	800e24c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e22a:	881a      	ldrh	r2, [r3, #0]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e236:	1c9a      	adds	r2, r3, #2
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e240:	b29b      	uxth	r3, r3
 800e242:	3b02      	subs	r3, #2
 800e244:	b29a      	uxth	r2, r3
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e24a:	e02c      	b.n	800e2a6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	330c      	adds	r3, #12
 800e256:	7812      	ldrb	r2, [r2, #0]
 800e258:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e25e:	1c5a      	adds	r2, r3, #1
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e268:	b29b      	uxth	r3, r3
 800e26a:	3b01      	subs	r3, #1
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e272:	e018      	b.n	800e2a6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e274:	f7f9 f9d6 	bl	8007624 <HAL_GetTick>
 800e278:	4602      	mov	r2, r0
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	1ad3      	subs	r3, r2, r3
 800e27e:	683a      	ldr	r2, [r7, #0]
 800e280:	429a      	cmp	r2, r3
 800e282:	d803      	bhi.n	800e28c <HAL_SPI_Transmit+0x26e>
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e28a:	d102      	bne.n	800e292 <HAL_SPI_Transmit+0x274>
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d109      	bne.n	800e2a6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2201      	movs	r2, #1
 800e296:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2200      	movs	r2, #0
 800e29e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e2a2:	2303      	movs	r3, #3
 800e2a4:	e02d      	b.n	800e302 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d1ae      	bne.n	800e20e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e2b0:	69fa      	ldr	r2, [r7, #28]
 800e2b2:	6839      	ldr	r1, [r7, #0]
 800e2b4:	68f8      	ldr	r0, [r7, #12]
 800e2b6:	f000 fe09 	bl	800eecc <SPI_EndRxTxTransaction>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d002      	beq.n	800e2c6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2220      	movs	r2, #32
 800e2c4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d10a      	bne.n	800e2e4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	617b      	str	r3, [r7, #20]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	68db      	ldr	r3, [r3, #12]
 800e2d8:	617b      	str	r3, [r7, #20]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	689b      	ldr	r3, [r3, #8]
 800e2e0:	617b      	str	r3, [r7, #20]
 800e2e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d001      	beq.n	800e300 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	e000      	b.n	800e302 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800e300:	2300      	movs	r3, #0
  }
}
 800e302:	4618      	mov	r0, r3
 800e304:	3720      	adds	r7, #32
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e30a:	b580      	push	{r7, lr}
 800e30c:	b088      	sub	sp, #32
 800e30e:	af02      	add	r7, sp, #8
 800e310:	60f8      	str	r0, [r7, #12]
 800e312:	60b9      	str	r1, [r7, #8]
 800e314:	603b      	str	r3, [r7, #0]
 800e316:	4613      	mov	r3, r2
 800e318:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e320:	b2db      	uxtb	r3, r3
 800e322:	2b01      	cmp	r3, #1
 800e324:	d001      	beq.n	800e32a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800e326:	2302      	movs	r3, #2
 800e328:	e123      	b.n	800e572 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <HAL_SPI_Receive+0x2c>
 800e330:	88fb      	ldrh	r3, [r7, #6]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d101      	bne.n	800e33a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800e336:	2301      	movs	r3, #1
 800e338:	e11b      	b.n	800e572 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e342:	d112      	bne.n	800e36a <HAL_SPI_Receive+0x60>
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d10e      	bne.n	800e36a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2204      	movs	r2, #4
 800e350:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e354:	88fa      	ldrh	r2, [r7, #6]
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	9300      	str	r3, [sp, #0]
 800e35a:	4613      	mov	r3, r2
 800e35c:	68ba      	ldr	r2, [r7, #8]
 800e35e:	68b9      	ldr	r1, [r7, #8]
 800e360:	68f8      	ldr	r0, [r7, #12]
 800e362:	f000 f90a 	bl	800e57a <HAL_SPI_TransmitReceive>
 800e366:	4603      	mov	r3, r0
 800e368:	e103      	b.n	800e572 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e36a:	f7f9 f95b 	bl	8007624 <HAL_GetTick>
 800e36e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e376:	2b01      	cmp	r3, #1
 800e378:	d101      	bne.n	800e37e <HAL_SPI_Receive+0x74>
 800e37a:	2302      	movs	r3, #2
 800e37c:	e0f9      	b.n	800e572 <HAL_SPI_Receive+0x268>
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2201      	movs	r2, #1
 800e382:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2204      	movs	r2, #4
 800e38a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2200      	movs	r2, #0
 800e392:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	68ba      	ldr	r2, [r7, #8]
 800e398:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	88fa      	ldrh	r2, [r7, #6]
 800e39e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	88fa      	ldrh	r2, [r7, #6]
 800e3a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	68db      	ldr	r3, [r3, #12]
 800e3cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e3d0:	d908      	bls.n	800e3e4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	685a      	ldr	r2, [r3, #4]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e3e0:	605a      	str	r2, [r3, #4]
 800e3e2:	e007      	b.n	800e3f4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	685a      	ldr	r2, [r3, #4]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e3f2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	689b      	ldr	r3, [r3, #8]
 800e3f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e3fc:	d10f      	bne.n	800e41e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	681a      	ldr	r2, [r3, #0]
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e40c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e41c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e428:	2b40      	cmp	r3, #64	@ 0x40
 800e42a:	d007      	beq.n	800e43c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e43a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	68db      	ldr	r3, [r3, #12]
 800e440:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e444:	d875      	bhi.n	800e532 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e446:	e037      	b.n	800e4b8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	f003 0301 	and.w	r3, r3, #1
 800e452:	2b01      	cmp	r3, #1
 800e454:	d117      	bne.n	800e486 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f103 020c 	add.w	r2, r3, #12
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e462:	7812      	ldrb	r2, [r2, #0]
 800e464:	b2d2      	uxtb	r2, r2
 800e466:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e46c:	1c5a      	adds	r2, r3, #1
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e478:	b29b      	uxth	r3, r3
 800e47a:	3b01      	subs	r3, #1
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e484:	e018      	b.n	800e4b8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e486:	f7f9 f8cd 	bl	8007624 <HAL_GetTick>
 800e48a:	4602      	mov	r2, r0
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	1ad3      	subs	r3, r2, r3
 800e490:	683a      	ldr	r2, [r7, #0]
 800e492:	429a      	cmp	r2, r3
 800e494:	d803      	bhi.n	800e49e <HAL_SPI_Receive+0x194>
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e49c:	d102      	bne.n	800e4a4 <HAL_SPI_Receive+0x19a>
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d109      	bne.n	800e4b8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e4b4:	2303      	movs	r3, #3
 800e4b6:	e05c      	b.n	800e572 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1c1      	bne.n	800e448 <HAL_SPI_Receive+0x13e>
 800e4c4:	e03b      	b.n	800e53e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	f003 0301 	and.w	r3, r3, #1
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d115      	bne.n	800e500 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	68da      	ldr	r2, [r3, #12]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4de:	b292      	uxth	r2, r2
 800e4e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4e6:	1c9a      	adds	r2, r3, #2
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	3b01      	subs	r3, #1
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e4fe:	e018      	b.n	800e532 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e500:	f7f9 f890 	bl	8007624 <HAL_GetTick>
 800e504:	4602      	mov	r2, r0
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	683a      	ldr	r2, [r7, #0]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d803      	bhi.n	800e518 <HAL_SPI_Receive+0x20e>
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e516:	d102      	bne.n	800e51e <HAL_SPI_Receive+0x214>
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d109      	bne.n	800e532 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2201      	movs	r2, #1
 800e522:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2200      	movs	r2, #0
 800e52a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e52e:	2303      	movs	r3, #3
 800e530:	e01f      	b.n	800e572 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e538:	b29b      	uxth	r3, r3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d1c3      	bne.n	800e4c6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e53e:	697a      	ldr	r2, [r7, #20]
 800e540:	6839      	ldr	r1, [r7, #0]
 800e542:	68f8      	ldr	r0, [r7, #12]
 800e544:	f000 fc6a 	bl	800ee1c <SPI_EndRxTransaction>
 800e548:	4603      	mov	r3, r0
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d002      	beq.n	800e554 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2220      	movs	r2, #32
 800e552:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2201      	movs	r2, #1
 800e558:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d001      	beq.n	800e570 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800e56c:	2301      	movs	r3, #1
 800e56e:	e000      	b.n	800e572 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800e570:	2300      	movs	r3, #0
  }
}
 800e572:	4618      	mov	r0, r3
 800e574:	3718      	adds	r7, #24
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b08a      	sub	sp, #40	@ 0x28
 800e57e:	af00      	add	r7, sp, #0
 800e580:	60f8      	str	r0, [r7, #12]
 800e582:	60b9      	str	r1, [r7, #8]
 800e584:	607a      	str	r2, [r7, #4]
 800e586:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e588:	2301      	movs	r3, #1
 800e58a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e58c:	f7f9 f84a 	bl	8007624 <HAL_GetTick>
 800e590:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e598:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800e5a0:	887b      	ldrh	r3, [r7, #2]
 800e5a2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800e5a4:	887b      	ldrh	r3, [r7, #2]
 800e5a6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e5a8:	7ffb      	ldrb	r3, [r7, #31]
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d00c      	beq.n	800e5c8 <HAL_SPI_TransmitReceive+0x4e>
 800e5ae:	69bb      	ldr	r3, [r7, #24]
 800e5b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e5b4:	d106      	bne.n	800e5c4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	689b      	ldr	r3, [r3, #8]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d102      	bne.n	800e5c4 <HAL_SPI_TransmitReceive+0x4a>
 800e5be:	7ffb      	ldrb	r3, [r7, #31]
 800e5c0:	2b04      	cmp	r3, #4
 800e5c2:	d001      	beq.n	800e5c8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800e5c4:	2302      	movs	r3, #2
 800e5c6:	e1f3      	b.n	800e9b0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d005      	beq.n	800e5da <HAL_SPI_TransmitReceive+0x60>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d002      	beq.n	800e5da <HAL_SPI_TransmitReceive+0x60>
 800e5d4:	887b      	ldrh	r3, [r7, #2]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d101      	bne.n	800e5de <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e1e8      	b.n	800e9b0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d101      	bne.n	800e5ec <HAL_SPI_TransmitReceive+0x72>
 800e5e8:	2302      	movs	r3, #2
 800e5ea:	e1e1      	b.n	800e9b0 <HAL_SPI_TransmitReceive+0x436>
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	2b04      	cmp	r3, #4
 800e5fe:	d003      	beq.n	800e608 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2205      	movs	r2, #5
 800e604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2200      	movs	r2, #0
 800e60c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	687a      	ldr	r2, [r7, #4]
 800e612:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	887a      	ldrh	r2, [r7, #2]
 800e618:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	887a      	ldrh	r2, [r7, #2]
 800e620:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	68ba      	ldr	r2, [r7, #8]
 800e628:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	887a      	ldrh	r2, [r7, #2]
 800e62e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	887a      	ldrh	r2, [r7, #2]
 800e634:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2200      	movs	r2, #0
 800e63a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2200      	movs	r2, #0
 800e640:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e64a:	d802      	bhi.n	800e652 <HAL_SPI_TransmitReceive+0xd8>
 800e64c:	8abb      	ldrh	r3, [r7, #20]
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d908      	bls.n	800e664 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	685a      	ldr	r2, [r3, #4]
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e660:	605a      	str	r2, [r3, #4]
 800e662:	e007      	b.n	800e674 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	685a      	ldr	r2, [r3, #4]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e672:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e67e:	2b40      	cmp	r3, #64	@ 0x40
 800e680:	d007      	beq.n	800e692 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e690:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	68db      	ldr	r3, [r3, #12]
 800e696:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e69a:	f240 8083 	bls.w	800e7a4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d002      	beq.n	800e6ac <HAL_SPI_TransmitReceive+0x132>
 800e6a6:	8afb      	ldrh	r3, [r7, #22]
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d16f      	bne.n	800e78c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6b0:	881a      	ldrh	r2, [r3, #0]
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6bc:	1c9a      	adds	r2, r3, #2
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	3b01      	subs	r3, #1
 800e6ca:	b29a      	uxth	r2, r3
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6d0:	e05c      	b.n	800e78c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	f003 0302 	and.w	r3, r3, #2
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	d11b      	bne.n	800e718 <HAL_SPI_TransmitReceive+0x19e>
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d016      	beq.n	800e718 <HAL_SPI_TransmitReceive+0x19e>
 800e6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	d113      	bne.n	800e718 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6f4:	881a      	ldrh	r2, [r3, #0]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e700:	1c9a      	adds	r2, r3, #2
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	3b01      	subs	r3, #1
 800e70e:	b29a      	uxth	r2, r3
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e714:	2300      	movs	r3, #0
 800e716:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	f003 0301 	and.w	r3, r3, #1
 800e722:	2b01      	cmp	r3, #1
 800e724:	d11c      	bne.n	800e760 <HAL_SPI_TransmitReceive+0x1e6>
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d016      	beq.n	800e760 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	68da      	ldr	r2, [r3, #12]
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e73c:	b292      	uxth	r2, r2
 800e73e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e744:	1c9a      	adds	r2, r3, #2
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e750:	b29b      	uxth	r3, r3
 800e752:	3b01      	subs	r3, #1
 800e754:	b29a      	uxth	r2, r3
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e75c:	2301      	movs	r3, #1
 800e75e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e760:	f7f8 ff60 	bl	8007624 <HAL_GetTick>
 800e764:	4602      	mov	r2, r0
 800e766:	6a3b      	ldr	r3, [r7, #32]
 800e768:	1ad3      	subs	r3, r2, r3
 800e76a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d80d      	bhi.n	800e78c <HAL_SPI_TransmitReceive+0x212>
 800e770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e776:	d009      	beq.n	800e78c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2201      	movs	r2, #1
 800e77c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2200      	movs	r2, #0
 800e784:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800e788:	2303      	movs	r3, #3
 800e78a:	e111      	b.n	800e9b0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e790:	b29b      	uxth	r3, r3
 800e792:	2b00      	cmp	r3, #0
 800e794:	d19d      	bne.n	800e6d2 <HAL_SPI_TransmitReceive+0x158>
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d197      	bne.n	800e6d2 <HAL_SPI_TransmitReceive+0x158>
 800e7a2:	e0e5      	b.n	800e970 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d003      	beq.n	800e7b4 <HAL_SPI_TransmitReceive+0x23a>
 800e7ac:	8afb      	ldrh	r3, [r7, #22]
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	f040 80d1 	bne.w	800e956 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	d912      	bls.n	800e7e4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7c2:	881a      	ldrh	r2, [r3, #0]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7ce:	1c9a      	adds	r2, r3, #2
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	3b02      	subs	r3, #2
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e7e2:	e0b8      	b.n	800e956 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	330c      	adds	r3, #12
 800e7ee:	7812      	ldrb	r2, [r2, #0]
 800e7f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7f6:	1c5a      	adds	r2, r3, #1
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e800:	b29b      	uxth	r3, r3
 800e802:	3b01      	subs	r3, #1
 800e804:	b29a      	uxth	r2, r3
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e80a:	e0a4      	b.n	800e956 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	f003 0302 	and.w	r3, r3, #2
 800e816:	2b02      	cmp	r3, #2
 800e818:	d134      	bne.n	800e884 <HAL_SPI_TransmitReceive+0x30a>
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e81e:	b29b      	uxth	r3, r3
 800e820:	2b00      	cmp	r3, #0
 800e822:	d02f      	beq.n	800e884 <HAL_SPI_TransmitReceive+0x30a>
 800e824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e826:	2b01      	cmp	r3, #1
 800e828:	d12c      	bne.n	800e884 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e82e:	b29b      	uxth	r3, r3
 800e830:	2b01      	cmp	r3, #1
 800e832:	d912      	bls.n	800e85a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e838:	881a      	ldrh	r2, [r3, #0]
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e844:	1c9a      	adds	r2, r3, #2
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e84e:	b29b      	uxth	r3, r3
 800e850:	3b02      	subs	r3, #2
 800e852:	b29a      	uxth	r2, r3
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e858:	e012      	b.n	800e880 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	330c      	adds	r3, #12
 800e864:	7812      	ldrb	r2, [r2, #0]
 800e866:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e86c:	1c5a      	adds	r2, r3, #1
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e876:	b29b      	uxth	r3, r3
 800e878:	3b01      	subs	r3, #1
 800e87a:	b29a      	uxth	r2, r3
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e880:	2300      	movs	r3, #0
 800e882:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	f003 0301 	and.w	r3, r3, #1
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d148      	bne.n	800e924 <HAL_SPI_TransmitReceive+0x3aa>
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e898:	b29b      	uxth	r3, r3
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d042      	beq.n	800e924 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d923      	bls.n	800e8f2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	68da      	ldr	r2, [r3, #12]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8b4:	b292      	uxth	r2, r2
 800e8b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8bc:	1c9a      	adds	r2, r3, #2
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	3b02      	subs	r3, #2
 800e8cc:	b29a      	uxth	r2, r3
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d81f      	bhi.n	800e920 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	685a      	ldr	r2, [r3, #4]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e8ee:	605a      	str	r2, [r3, #4]
 800e8f0:	e016      	b.n	800e920 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f103 020c 	add.w	r2, r3, #12
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8fe:	7812      	ldrb	r2, [r2, #0]
 800e900:	b2d2      	uxtb	r2, r2
 800e902:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e908:	1c5a      	adds	r2, r3, #1
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e914:	b29b      	uxth	r3, r3
 800e916:	3b01      	subs	r3, #1
 800e918:	b29a      	uxth	r2, r3
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e920:	2301      	movs	r3, #1
 800e922:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e924:	f7f8 fe7e 	bl	8007624 <HAL_GetTick>
 800e928:	4602      	mov	r2, r0
 800e92a:	6a3b      	ldr	r3, [r7, #32]
 800e92c:	1ad3      	subs	r3, r2, r3
 800e92e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e930:	429a      	cmp	r2, r3
 800e932:	d803      	bhi.n	800e93c <HAL_SPI_TransmitReceive+0x3c2>
 800e934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e93a:	d102      	bne.n	800e942 <HAL_SPI_TransmitReceive+0x3c8>
 800e93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d109      	bne.n	800e956 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2201      	movs	r2, #1
 800e946:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2200      	movs	r2, #0
 800e94e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800e952:	2303      	movs	r3, #3
 800e954:	e02c      	b.n	800e9b0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f47f af55 	bne.w	800e80c <HAL_SPI_TransmitReceive+0x292>
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e968:	b29b      	uxth	r3, r3
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	f47f af4e 	bne.w	800e80c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e970:	6a3a      	ldr	r2, [r7, #32]
 800e972:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f000 faa9 	bl	800eecc <SPI_EndRxTxTransaction>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d008      	beq.n	800e992 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2220      	movs	r2, #32
 800e984:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2200      	movs	r2, #0
 800e98a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e98e:	2301      	movs	r3, #1
 800e990:	e00e      	b.n	800e9b0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2201      	movs	r2, #1
 800e996:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d001      	beq.n	800e9ae <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	e000      	b.n	800e9b0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800e9ae:	2300      	movs	r3, #0
  }
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3728      	adds	r7, #40	@ 0x28
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b088      	sub	sp, #32
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	689b      	ldr	r3, [r3, #8]
 800e9ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d10e      	bne.n	800e9f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d009      	beq.n	800e9f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d004      	beq.n	800e9f8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	4798      	blx	r3
    return;
 800e9f6:	e0ce      	b.n	800eb96 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	f003 0302 	and.w	r3, r3, #2
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d009      	beq.n	800ea16 <HAL_SPI_IRQHandler+0x5e>
 800ea02:	69fb      	ldr	r3, [r7, #28]
 800ea04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d004      	beq.n	800ea16 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	4798      	blx	r3
    return;
 800ea14:	e0bf      	b.n	800eb96 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	f003 0320 	and.w	r3, r3, #32
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d10a      	bne.n	800ea36 <HAL_SPI_IRQHandler+0x7e>
 800ea20:	69bb      	ldr	r3, [r7, #24]
 800ea22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d105      	bne.n	800ea36 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	f000 80b0 	beq.w	800eb96 <HAL_SPI_IRQHandler+0x1de>
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	f003 0320 	and.w	r3, r3, #32
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	f000 80aa 	beq.w	800eb96 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ea42:	69bb      	ldr	r3, [r7, #24]
 800ea44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d023      	beq.n	800ea94 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	2b03      	cmp	r3, #3
 800ea56:	d011      	beq.n	800ea7c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea5c:	f043 0204 	orr.w	r2, r3, #4
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ea64:	2300      	movs	r3, #0
 800ea66:	617b      	str	r3, [r7, #20]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	617b      	str	r3, [r7, #20]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	689b      	ldr	r3, [r3, #8]
 800ea76:	617b      	str	r3, [r7, #20]
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	e00b      	b.n	800ea94 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	613b      	str	r3, [r7, #16]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	68db      	ldr	r3, [r3, #12]
 800ea86:	613b      	str	r3, [r7, #16]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	689b      	ldr	r3, [r3, #8]
 800ea8e:	613b      	str	r3, [r7, #16]
 800ea90:	693b      	ldr	r3, [r7, #16]
        return;
 800ea92:	e080      	b.n	800eb96 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	f003 0320 	and.w	r3, r3, #32
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d014      	beq.n	800eac8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eaa2:	f043 0201 	orr.w	r2, r3, #1
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eaaa:	2300      	movs	r3, #0
 800eaac:	60fb      	str	r3, [r7, #12]
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	689b      	ldr	r3, [r3, #8]
 800eab4:	60fb      	str	r3, [r7, #12]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	681a      	ldr	r2, [r3, #0]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eac4:	601a      	str	r2, [r3, #0]
 800eac6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d00c      	beq.n	800eaec <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ead6:	f043 0208 	orr.w	r2, r3, #8
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eade:	2300      	movs	r3, #0
 800eae0:	60bb      	str	r3, [r7, #8]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	689b      	ldr	r3, [r3, #8]
 800eae8:	60bb      	str	r3, [r7, #8]
 800eaea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d04f      	beq.n	800eb94 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	685a      	ldr	r2, [r3, #4]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800eb02:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2201      	movs	r2, #1
 800eb08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	f003 0302 	and.w	r3, r3, #2
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d104      	bne.n	800eb20 <HAL_SPI_IRQHandler+0x168>
 800eb16:	69fb      	ldr	r3, [r7, #28]
 800eb18:	f003 0301 	and.w	r3, r3, #1
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d034      	beq.n	800eb8a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	685a      	ldr	r2, [r3, #4]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f022 0203 	bic.w	r2, r2, #3
 800eb2e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d011      	beq.n	800eb5c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb3c:	4a17      	ldr	r2, [pc, #92]	@ (800eb9c <HAL_SPI_IRQHandler+0x1e4>)
 800eb3e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fa f92d 	bl	8008da4 <HAL_DMA_Abort_IT>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d005      	beq.n	800eb5c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d016      	beq.n	800eb92 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb68:	4a0c      	ldr	r2, [pc, #48]	@ (800eb9c <HAL_SPI_IRQHandler+0x1e4>)
 800eb6a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7fa f917 	bl	8008da4 <HAL_DMA_Abort_IT>
 800eb76:	4603      	mov	r3, r0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d00a      	beq.n	800eb92 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800eb88:	e003      	b.n	800eb92 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f000 f808 	bl	800eba0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800eb90:	e000      	b.n	800eb94 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800eb92:	bf00      	nop
    return;
 800eb94:	bf00      	nop
  }
}
 800eb96:	3720      	adds	r7, #32
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	0800ebb5 	.word	0x0800ebb5

0800eba0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b083      	sub	sp, #12
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800eba8:	bf00      	nop
 800ebaa:	370c      	adds	r7, #12
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b084      	sub	sp, #16
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebc0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	f7ff ffe5 	bl	800eba0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ebd6:	bf00      	nop
 800ebd8:	3710      	adds	r7, #16
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
	...

0800ebe0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b088      	sub	sp, #32
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	603b      	str	r3, [r7, #0]
 800ebec:	4613      	mov	r3, r2
 800ebee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ebf0:	f7f8 fd18 	bl	8007624 <HAL_GetTick>
 800ebf4:	4602      	mov	r2, r0
 800ebf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf8:	1a9b      	subs	r3, r3, r2
 800ebfa:	683a      	ldr	r2, [r7, #0]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ec00:	f7f8 fd10 	bl	8007624 <HAL_GetTick>
 800ec04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ec06:	4b39      	ldr	r3, [pc, #228]	@ (800ecec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	015b      	lsls	r3, r3, #5
 800ec0c:	0d1b      	lsrs	r3, r3, #20
 800ec0e:	69fa      	ldr	r2, [r7, #28]
 800ec10:	fb02 f303 	mul.w	r3, r2, r3
 800ec14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ec16:	e054      	b.n	800ecc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec1e:	d050      	beq.n	800ecc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ec20:	f7f8 fd00 	bl	8007624 <HAL_GetTick>
 800ec24:	4602      	mov	r2, r0
 800ec26:	69bb      	ldr	r3, [r7, #24]
 800ec28:	1ad3      	subs	r3, r2, r3
 800ec2a:	69fa      	ldr	r2, [r7, #28]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d902      	bls.n	800ec36 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d13d      	bne.n	800ecb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	685a      	ldr	r2, [r3, #4]
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ec44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ec4e:	d111      	bne.n	800ec74 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	689b      	ldr	r3, [r3, #8]
 800ec54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec58:	d004      	beq.n	800ec64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec62:	d107      	bne.n	800ec74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ec72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ec7c:	d10f      	bne.n	800ec9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ec8c:	601a      	str	r2, [r3, #0]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ec9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	2201      	movs	r2, #1
 800eca2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ecae:	2303      	movs	r3, #3
 800ecb0:	e017      	b.n	800ece2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d101      	bne.n	800ecbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	3b01      	subs	r3, #1
 800ecc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	689a      	ldr	r2, [r3, #8]
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	4013      	ands	r3, r2
 800eccc:	68ba      	ldr	r2, [r7, #8]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	bf0c      	ite	eq
 800ecd2:	2301      	moveq	r3, #1
 800ecd4:	2300      	movne	r3, #0
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	461a      	mov	r2, r3
 800ecda:	79fb      	ldrb	r3, [r7, #7]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d19b      	bne.n	800ec18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ece0:	2300      	movs	r3, #0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3720      	adds	r7, #32
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	20000034 	.word	0x20000034

0800ecf0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b08a      	sub	sp, #40	@ 0x28
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	607a      	str	r2, [r7, #4]
 800ecfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ed02:	f7f8 fc8f 	bl	8007624 <HAL_GetTick>
 800ed06:	4602      	mov	r2, r0
 800ed08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed0a:	1a9b      	subs	r3, r3, r2
 800ed0c:	683a      	ldr	r2, [r7, #0]
 800ed0e:	4413      	add	r3, r2
 800ed10:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ed12:	f7f8 fc87 	bl	8007624 <HAL_GetTick>
 800ed16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	330c      	adds	r3, #12
 800ed1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ed20:	4b3d      	ldr	r3, [pc, #244]	@ (800ee18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	4613      	mov	r3, r2
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	4413      	add	r3, r2
 800ed2a:	00da      	lsls	r2, r3, #3
 800ed2c:	1ad3      	subs	r3, r2, r3
 800ed2e:	0d1b      	lsrs	r3, r3, #20
 800ed30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed32:	fb02 f303 	mul.w	r3, r2, r3
 800ed36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ed38:	e060      	b.n	800edfc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ed40:	d107      	bne.n	800ed52 <SPI_WaitFifoStateUntilTimeout+0x62>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d104      	bne.n	800ed52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ed48:	69fb      	ldr	r3, [r7, #28]
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ed50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed58:	d050      	beq.n	800edfc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ed5a:	f7f8 fc63 	bl	8007624 <HAL_GetTick>
 800ed5e:	4602      	mov	r2, r0
 800ed60:	6a3b      	ldr	r3, [r7, #32]
 800ed62:	1ad3      	subs	r3, r2, r3
 800ed64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d902      	bls.n	800ed70 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ed6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d13d      	bne.n	800edec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	685a      	ldr	r2, [r3, #4]
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ed7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ed88:	d111      	bne.n	800edae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	689b      	ldr	r3, [r3, #8]
 800ed8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed92:	d004      	beq.n	800ed9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	689b      	ldr	r3, [r3, #8]
 800ed98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed9c:	d107      	bne.n	800edae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800edac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800edb6:	d10f      	bne.n	800edd8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800edc6:	601a      	str	r2, [r3, #0]
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	681a      	ldr	r2, [r3, #0]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800edd6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2201      	movs	r2, #1
 800eddc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2200      	movs	r2, #0
 800ede4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ede8:	2303      	movs	r3, #3
 800edea:	e010      	b.n	800ee0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800edec:	69bb      	ldr	r3, [r7, #24]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d101      	bne.n	800edf6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800edf2:	2300      	movs	r3, #0
 800edf4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800edf6:	69bb      	ldr	r3, [r7, #24]
 800edf8:	3b01      	subs	r3, #1
 800edfa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	689a      	ldr	r2, [r3, #8]
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	4013      	ands	r3, r2
 800ee06:	687a      	ldr	r2, [r7, #4]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d196      	bne.n	800ed3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ee0c:	2300      	movs	r3, #0
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3728      	adds	r7, #40	@ 0x28
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	20000034 	.word	0x20000034

0800ee1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b086      	sub	sp, #24
 800ee20:	af02      	add	r7, sp, #8
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ee30:	d111      	bne.n	800ee56 <SPI_EndRxTransaction+0x3a>
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	689b      	ldr	r3, [r3, #8]
 800ee36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee3a:	d004      	beq.n	800ee46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	689b      	ldr	r3, [r3, #8]
 800ee40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee44:	d107      	bne.n	800ee56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	681a      	ldr	r2, [r3, #0]
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ee54:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	9300      	str	r3, [sp, #0]
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	2180      	movs	r1, #128	@ 0x80
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f7ff febd 	bl	800ebe0 <SPI_WaitFlagStateUntilTimeout>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d007      	beq.n	800ee7c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee70:	f043 0220 	orr.w	r2, r3, #32
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ee78:	2303      	movs	r3, #3
 800ee7a:	e023      	b.n	800eec4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ee84:	d11d      	bne.n	800eec2 <SPI_EndRxTransaction+0xa6>
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee8e:	d004      	beq.n	800ee9a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	689b      	ldr	r3, [r3, #8]
 800ee94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee98:	d113      	bne.n	800eec2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	9300      	str	r3, [sp, #0]
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	2200      	movs	r2, #0
 800eea2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f7ff ff22 	bl	800ecf0 <SPI_WaitFifoStateUntilTimeout>
 800eeac:	4603      	mov	r3, r0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d007      	beq.n	800eec2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eeb6:	f043 0220 	orr.w	r2, r3, #32
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800eebe:	2303      	movs	r3, #3
 800eec0:	e000      	b.n	800eec4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800eec2:	2300      	movs	r3, #0
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b086      	sub	sp, #24
 800eed0:	af02      	add	r7, sp, #8
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	9300      	str	r3, [sp, #0]
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	2200      	movs	r2, #0
 800eee0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800eee4:	68f8      	ldr	r0, [r7, #12]
 800eee6:	f7ff ff03 	bl	800ecf0 <SPI_WaitFifoStateUntilTimeout>
 800eeea:	4603      	mov	r3, r0
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d007      	beq.n	800ef00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eef4:	f043 0220 	orr.w	r2, r3, #32
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800eefc:	2303      	movs	r3, #3
 800eefe:	e027      	b.n	800ef50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	9300      	str	r3, [sp, #0]
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	2200      	movs	r2, #0
 800ef08:	2180      	movs	r1, #128	@ 0x80
 800ef0a:	68f8      	ldr	r0, [r7, #12]
 800ef0c:	f7ff fe68 	bl	800ebe0 <SPI_WaitFlagStateUntilTimeout>
 800ef10:	4603      	mov	r3, r0
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d007      	beq.n	800ef26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef1a:	f043 0220 	orr.w	r2, r3, #32
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ef22:	2303      	movs	r3, #3
 800ef24:	e014      	b.n	800ef50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ef32:	68f8      	ldr	r0, [r7, #12]
 800ef34:	f7ff fedc 	bl	800ecf0 <SPI_WaitFifoStateUntilTimeout>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d007      	beq.n	800ef4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef42:	f043 0220 	orr.w	r2, r3, #32
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ef4a:	2303      	movs	r3, #3
 800ef4c:	e000      	b.n	800ef50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3710      	adds	r7, #16
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d101      	bne.n	800ef6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ef66:	2301      	movs	r3, #1
 800ef68:	e049      	b.n	800effe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d106      	bne.n	800ef84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f7f7 feca 	bl	8006d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2202      	movs	r2, #2
 800ef88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	3304      	adds	r3, #4
 800ef94:	4619      	mov	r1, r3
 800ef96:	4610      	mov	r0, r2
 800ef98:	f000 fafc 	bl	800f594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2201      	movs	r2, #1
 800efa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2201      	movs	r2, #1
 800efb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2201      	movs	r2, #1
 800efb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2201      	movs	r2, #1
 800efc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2201      	movs	r2, #1
 800efd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2201      	movs	r2, #1
 800efd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2201      	movs	r2, #1
 800efe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2201      	movs	r2, #1
 800efe8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2201      	movs	r2, #1
 800eff0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2201      	movs	r2, #1
 800eff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800effc:	2300      	movs	r3, #0
}
 800effe:	4618      	mov	r0, r3
 800f000:	3708      	adds	r7, #8
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
	...

0800f008 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f008:	b480      	push	{r7}
 800f00a:	b085      	sub	sp, #20
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f016:	b2db      	uxtb	r3, r3
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d001      	beq.n	800f020 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f01c:	2301      	movs	r3, #1
 800f01e:	e02e      	b.n	800f07e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2202      	movs	r2, #2
 800f024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4a17      	ldr	r2, [pc, #92]	@ (800f08c <HAL_TIM_Base_Start+0x84>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	d004      	beq.n	800f03c <HAL_TIM_Base_Start+0x34>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f03a:	d115      	bne.n	800f068 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	689a      	ldr	r2, [r3, #8]
 800f042:	4b13      	ldr	r3, [pc, #76]	@ (800f090 <HAL_TIM_Base_Start+0x88>)
 800f044:	4013      	ands	r3, r2
 800f046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2b06      	cmp	r3, #6
 800f04c:	d015      	beq.n	800f07a <HAL_TIM_Base_Start+0x72>
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f054:	d011      	beq.n	800f07a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f042 0201 	orr.w	r2, r2, #1
 800f064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f066:	e008      	b.n	800f07a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f042 0201 	orr.w	r2, r2, #1
 800f076:	601a      	str	r2, [r3, #0]
 800f078:	e000      	b.n	800f07c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f07a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3714      	adds	r7, #20
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr
 800f08a:	bf00      	nop
 800f08c:	40012c00 	.word	0x40012c00
 800f090:	00010007 	.word	0x00010007

0800f094 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f094:	b480      	push	{r7}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	2b01      	cmp	r3, #1
 800f0a6:	d001      	beq.n	800f0ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	e036      	b.n	800f11a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2202      	movs	r2, #2
 800f0b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	68da      	ldr	r2, [r3, #12]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f042 0201 	orr.w	r2, r2, #1
 800f0c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4a17      	ldr	r2, [pc, #92]	@ (800f128 <HAL_TIM_Base_Start_IT+0x94>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d004      	beq.n	800f0d8 <HAL_TIM_Base_Start_IT+0x44>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f0d6:	d115      	bne.n	800f104 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	689a      	ldr	r2, [r3, #8]
 800f0de:	4b13      	ldr	r3, [pc, #76]	@ (800f12c <HAL_TIM_Base_Start_IT+0x98>)
 800f0e0:	4013      	ands	r3, r2
 800f0e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2b06      	cmp	r3, #6
 800f0e8:	d015      	beq.n	800f116 <HAL_TIM_Base_Start_IT+0x82>
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0f0:	d011      	beq.n	800f116 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f042 0201 	orr.w	r2, r2, #1
 800f100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f102:	e008      	b.n	800f116 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	681a      	ldr	r2, [r3, #0]
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f042 0201 	orr.w	r2, r2, #1
 800f112:	601a      	str	r2, [r3, #0]
 800f114:	e000      	b.n	800f118 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f116:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f118:	2300      	movs	r3, #0
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3714      	adds	r7, #20
 800f11e:	46bd      	mov	sp, r7
 800f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f124:	4770      	bx	lr
 800f126:	bf00      	nop
 800f128:	40012c00 	.word	0x40012c00
 800f12c:	00010007 	.word	0x00010007

0800f130 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	68da      	ldr	r2, [r3, #12]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f022 0201 	bic.w	r2, r2, #1
 800f146:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	6a1a      	ldr	r2, [r3, #32]
 800f14e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f152:	4013      	ands	r3, r2
 800f154:	2b00      	cmp	r3, #0
 800f156:	d10f      	bne.n	800f178 <HAL_TIM_Base_Stop_IT+0x48>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	6a1a      	ldr	r2, [r3, #32]
 800f15e:	f240 4344 	movw	r3, #1092	@ 0x444
 800f162:	4013      	ands	r3, r2
 800f164:	2b00      	cmp	r3, #0
 800f166:	d107      	bne.n	800f178 <HAL_TIM_Base_Stop_IT+0x48>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f022 0201 	bic.w	r2, r2, #1
 800f176:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800f180:	2300      	movs	r3, #0
}
 800f182:	4618      	mov	r0, r3
 800f184:	370c      	adds	r7, #12
 800f186:	46bd      	mov	sp, r7
 800f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18c:	4770      	bx	lr

0800f18e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f18e:	b580      	push	{r7, lr}
 800f190:	b084      	sub	sp, #16
 800f192:	af00      	add	r7, sp, #0
 800f194:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	68db      	ldr	r3, [r3, #12]
 800f19c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	691b      	ldr	r3, [r3, #16]
 800f1a4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	f003 0302 	and.w	r3, r3, #2
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d020      	beq.n	800f1f2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f003 0302 	and.w	r3, r3, #2
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d01b      	beq.n	800f1f2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f06f 0202 	mvn.w	r2, #2
 800f1c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	699b      	ldr	r3, [r3, #24]
 800f1d0:	f003 0303 	and.w	r3, r3, #3
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d003      	beq.n	800f1e0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 f9bc 	bl	800f556 <HAL_TIM_IC_CaptureCallback>
 800f1de:	e005      	b.n	800f1ec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 f9ae 	bl	800f542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 f9bf 	bl	800f56a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	f003 0304 	and.w	r3, r3, #4
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d020      	beq.n	800f23e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f003 0304 	and.w	r3, r3, #4
 800f202:	2b00      	cmp	r3, #0
 800f204:	d01b      	beq.n	800f23e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f06f 0204 	mvn.w	r2, #4
 800f20e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2202      	movs	r2, #2
 800f214:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	699b      	ldr	r3, [r3, #24]
 800f21c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f220:	2b00      	cmp	r3, #0
 800f222:	d003      	beq.n	800f22c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f000 f996 	bl	800f556 <HAL_TIM_IC_CaptureCallback>
 800f22a:	e005      	b.n	800f238 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 f988 	bl	800f542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 f999 	bl	800f56a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2200      	movs	r2, #0
 800f23c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	f003 0308 	and.w	r3, r3, #8
 800f244:	2b00      	cmp	r3, #0
 800f246:	d020      	beq.n	800f28a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f003 0308 	and.w	r3, r3, #8
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d01b      	beq.n	800f28a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f06f 0208 	mvn.w	r2, #8
 800f25a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2204      	movs	r2, #4
 800f260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	69db      	ldr	r3, [r3, #28]
 800f268:	f003 0303 	and.w	r3, r3, #3
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d003      	beq.n	800f278 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 f970 	bl	800f556 <HAL_TIM_IC_CaptureCallback>
 800f276:	e005      	b.n	800f284 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 f962 	bl	800f542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 f973 	bl	800f56a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	f003 0310 	and.w	r3, r3, #16
 800f290:	2b00      	cmp	r3, #0
 800f292:	d020      	beq.n	800f2d6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f003 0310 	and.w	r3, r3, #16
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d01b      	beq.n	800f2d6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f06f 0210 	mvn.w	r2, #16
 800f2a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2208      	movs	r2, #8
 800f2ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	69db      	ldr	r3, [r3, #28]
 800f2b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d003      	beq.n	800f2c4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 f94a 	bl	800f556 <HAL_TIM_IC_CaptureCallback>
 800f2c2:	e005      	b.n	800f2d0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f000 f93c 	bl	800f542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f000 f94d 	bl	800f56a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	f003 0301 	and.w	r3, r3, #1
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d00c      	beq.n	800f2fa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f003 0301 	and.w	r3, r3, #1
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d007      	beq.n	800f2fa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f06f 0201 	mvn.w	r2, #1
 800f2f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f000 f91a 	bl	800f52e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f300:	2b00      	cmp	r3, #0
 800f302:	d104      	bne.n	800f30e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00c      	beq.n	800f328 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f314:	2b00      	cmp	r3, #0
 800f316:	d007      	beq.n	800f328 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 faac 	bl	800f880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00c      	beq.n	800f34c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d007      	beq.n	800f34c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f000 faa4 	bl	800f894 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00c      	beq.n	800f370 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d007      	beq.n	800f370 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 f907 	bl	800f57e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	f003 0320 	and.w	r3, r3, #32
 800f376:	2b00      	cmp	r3, #0
 800f378:	d00c      	beq.n	800f394 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	f003 0320 	and.w	r3, r3, #32
 800f380:	2b00      	cmp	r3, #0
 800f382:	d007      	beq.n	800f394 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f06f 0220 	mvn.w	r2, #32
 800f38c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 fa6c 	bl	800f86c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f394:	bf00      	nop
 800f396:	3710      	adds	r7, #16
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d101      	bne.n	800f3b8 <HAL_TIM_ConfigClockSource+0x1c>
 800f3b4:	2302      	movs	r3, #2
 800f3b6:	e0b6      	b.n	800f526 <HAL_TIM_ConfigClockSource+0x18a>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2202      	movs	r2, #2
 800f3c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	689b      	ldr	r3, [r3, #8]
 800f3ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f3d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f3da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f3e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	68ba      	ldr	r2, [r7, #8]
 800f3ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f3f4:	d03e      	beq.n	800f474 <HAL_TIM_ConfigClockSource+0xd8>
 800f3f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f3fa:	f200 8087 	bhi.w	800f50c <HAL_TIM_ConfigClockSource+0x170>
 800f3fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f402:	f000 8086 	beq.w	800f512 <HAL_TIM_ConfigClockSource+0x176>
 800f406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f40a:	d87f      	bhi.n	800f50c <HAL_TIM_ConfigClockSource+0x170>
 800f40c:	2b70      	cmp	r3, #112	@ 0x70
 800f40e:	d01a      	beq.n	800f446 <HAL_TIM_ConfigClockSource+0xaa>
 800f410:	2b70      	cmp	r3, #112	@ 0x70
 800f412:	d87b      	bhi.n	800f50c <HAL_TIM_ConfigClockSource+0x170>
 800f414:	2b60      	cmp	r3, #96	@ 0x60
 800f416:	d050      	beq.n	800f4ba <HAL_TIM_ConfigClockSource+0x11e>
 800f418:	2b60      	cmp	r3, #96	@ 0x60
 800f41a:	d877      	bhi.n	800f50c <HAL_TIM_ConfigClockSource+0x170>
 800f41c:	2b50      	cmp	r3, #80	@ 0x50
 800f41e:	d03c      	beq.n	800f49a <HAL_TIM_ConfigClockSource+0xfe>
 800f420:	2b50      	cmp	r3, #80	@ 0x50
 800f422:	d873      	bhi.n	800f50c <HAL_TIM_ConfigClockSource+0x170>
 800f424:	2b40      	cmp	r3, #64	@ 0x40
 800f426:	d058      	beq.n	800f4da <HAL_TIM_ConfigClockSource+0x13e>
 800f428:	2b40      	cmp	r3, #64	@ 0x40
 800f42a:	d86f      	bhi.n	800f50c <HAL_TIM_ConfigClockSource+0x170>
 800f42c:	2b30      	cmp	r3, #48	@ 0x30
 800f42e:	d064      	beq.n	800f4fa <HAL_TIM_ConfigClockSource+0x15e>
 800f430:	2b30      	cmp	r3, #48	@ 0x30
 800f432:	d86b      	bhi.n	800f50c <HAL_TIM_ConfigClockSource+0x170>
 800f434:	2b20      	cmp	r3, #32
 800f436:	d060      	beq.n	800f4fa <HAL_TIM_ConfigClockSource+0x15e>
 800f438:	2b20      	cmp	r3, #32
 800f43a:	d867      	bhi.n	800f50c <HAL_TIM_ConfigClockSource+0x170>
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d05c      	beq.n	800f4fa <HAL_TIM_ConfigClockSource+0x15e>
 800f440:	2b10      	cmp	r3, #16
 800f442:	d05a      	beq.n	800f4fa <HAL_TIM_ConfigClockSource+0x15e>
 800f444:	e062      	b.n	800f50c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f456:	f000 f989 	bl	800f76c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	689b      	ldr	r3, [r3, #8]
 800f460:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f468:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	68ba      	ldr	r2, [r7, #8]
 800f470:	609a      	str	r2, [r3, #8]
      break;
 800f472:	e04f      	b.n	800f514 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f484:	f000 f972 	bl	800f76c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	689a      	ldr	r2, [r3, #8]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f496:	609a      	str	r2, [r3, #8]
      break;
 800f498:	e03c      	b.n	800f514 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	f000 f8e4 	bl	800f674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2150      	movs	r1, #80	@ 0x50
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f000 f93d 	bl	800f732 <TIM_ITRx_SetConfig>
      break;
 800f4b8:	e02c      	b.n	800f514 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	f000 f903 	bl	800f6d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2160      	movs	r1, #96	@ 0x60
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f000 f92d 	bl	800f732 <TIM_ITRx_SetConfig>
      break;
 800f4d8:	e01c      	b.n	800f514 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	f000 f8c4 	bl	800f674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2140      	movs	r1, #64	@ 0x40
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f000 f91d 	bl	800f732 <TIM_ITRx_SetConfig>
      break;
 800f4f8:	e00c      	b.n	800f514 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	4619      	mov	r1, r3
 800f504:	4610      	mov	r0, r2
 800f506:	f000 f914 	bl	800f732 <TIM_ITRx_SetConfig>
      break;
 800f50a:	e003      	b.n	800f514 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800f50c:	2301      	movs	r3, #1
 800f50e:	73fb      	strb	r3, [r7, #15]
      break;
 800f510:	e000      	b.n	800f514 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800f512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2201      	movs	r2, #1
 800f518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f524:	7bfb      	ldrb	r3, [r7, #15]
}
 800f526:	4618      	mov	r0, r3
 800f528:	3710      	adds	r7, #16
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f52e:	b480      	push	{r7}
 800f530:	b083      	sub	sp, #12
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f536:	bf00      	nop
 800f538:	370c      	adds	r7, #12
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr

0800f542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f542:	b480      	push	{r7}
 800f544:	b083      	sub	sp, #12
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f54a:	bf00      	nop
 800f54c:	370c      	adds	r7, #12
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr

0800f556 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f556:	b480      	push	{r7}
 800f558:	b083      	sub	sp, #12
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f55e:	bf00      	nop
 800f560:	370c      	adds	r7, #12
 800f562:	46bd      	mov	sp, r7
 800f564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f568:	4770      	bx	lr

0800f56a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f56a:	b480      	push	{r7}
 800f56c:	b083      	sub	sp, #12
 800f56e:	af00      	add	r7, sp, #0
 800f570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f572:	bf00      	nop
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f586:	bf00      	nop
 800f588:	370c      	adds	r7, #12
 800f58a:	46bd      	mov	sp, r7
 800f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f590:	4770      	bx	lr
	...

0800f594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f594:	b480      	push	{r7}
 800f596:	b085      	sub	sp, #20
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	4a30      	ldr	r2, [pc, #192]	@ (800f668 <TIM_Base_SetConfig+0xd4>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d003      	beq.n	800f5b4 <TIM_Base_SetConfig+0x20>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5b2:	d108      	bne.n	800f5c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f5ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	68fa      	ldr	r2, [r7, #12]
 800f5c2:	4313      	orrs	r3, r2
 800f5c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4a27      	ldr	r2, [pc, #156]	@ (800f668 <TIM_Base_SetConfig+0xd4>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d00b      	beq.n	800f5e6 <TIM_Base_SetConfig+0x52>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5d4:	d007      	beq.n	800f5e6 <TIM_Base_SetConfig+0x52>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4a24      	ldr	r2, [pc, #144]	@ (800f66c <TIM_Base_SetConfig+0xd8>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d003      	beq.n	800f5e6 <TIM_Base_SetConfig+0x52>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	4a23      	ldr	r2, [pc, #140]	@ (800f670 <TIM_Base_SetConfig+0xdc>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d108      	bne.n	800f5f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f5ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	68db      	ldr	r3, [r3, #12]
 800f5f2:	68fa      	ldr	r2, [r7, #12]
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	695b      	ldr	r3, [r3, #20]
 800f602:	4313      	orrs	r3, r2
 800f604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	68fa      	ldr	r2, [r7, #12]
 800f60a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	689a      	ldr	r2, [r3, #8]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	681a      	ldr	r2, [r3, #0]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	4a12      	ldr	r2, [pc, #72]	@ (800f668 <TIM_Base_SetConfig+0xd4>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d007      	beq.n	800f634 <TIM_Base_SetConfig+0xa0>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	4a11      	ldr	r2, [pc, #68]	@ (800f66c <TIM_Base_SetConfig+0xd8>)
 800f628:	4293      	cmp	r3, r2
 800f62a:	d003      	beq.n	800f634 <TIM_Base_SetConfig+0xa0>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	4a10      	ldr	r2, [pc, #64]	@ (800f670 <TIM_Base_SetConfig+0xdc>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d103      	bne.n	800f63c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	691a      	ldr	r2, [r3, #16]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2201      	movs	r2, #1
 800f640:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	691b      	ldr	r3, [r3, #16]
 800f646:	f003 0301 	and.w	r3, r3, #1
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d105      	bne.n	800f65a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	691b      	ldr	r3, [r3, #16]
 800f652:	f023 0201 	bic.w	r2, r3, #1
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	611a      	str	r2, [r3, #16]
  }
}
 800f65a:	bf00      	nop
 800f65c:	3714      	adds	r7, #20
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr
 800f666:	bf00      	nop
 800f668:	40012c00 	.word	0x40012c00
 800f66c:	40014400 	.word	0x40014400
 800f670:	40014800 	.word	0x40014800

0800f674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f674:	b480      	push	{r7}
 800f676:	b087      	sub	sp, #28
 800f678:	af00      	add	r7, sp, #0
 800f67a:	60f8      	str	r0, [r7, #12]
 800f67c:	60b9      	str	r1, [r7, #8]
 800f67e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	6a1b      	ldr	r3, [r3, #32]
 800f684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	6a1b      	ldr	r3, [r3, #32]
 800f68a:	f023 0201 	bic.w	r2, r3, #1
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	699b      	ldr	r3, [r3, #24]
 800f696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f69e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	011b      	lsls	r3, r3, #4
 800f6a4:	693a      	ldr	r2, [r7, #16]
 800f6a6:	4313      	orrs	r3, r2
 800f6a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	f023 030a 	bic.w	r3, r3, #10
 800f6b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f6b2:	697a      	ldr	r2, [r7, #20]
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	4313      	orrs	r3, r2
 800f6b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	693a      	ldr	r2, [r7, #16]
 800f6be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	697a      	ldr	r2, [r7, #20]
 800f6c4:	621a      	str	r2, [r3, #32]
}
 800f6c6:	bf00      	nop
 800f6c8:	371c      	adds	r7, #28
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr

0800f6d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6d2:	b480      	push	{r7}
 800f6d4:	b087      	sub	sp, #28
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	60f8      	str	r0, [r7, #12]
 800f6da:	60b9      	str	r1, [r7, #8]
 800f6dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	6a1b      	ldr	r3, [r3, #32]
 800f6e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	6a1b      	ldr	r3, [r3, #32]
 800f6e8:	f023 0210 	bic.w	r2, r3, #16
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	699b      	ldr	r3, [r3, #24]
 800f6f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f6fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	031b      	lsls	r3, r3, #12
 800f702:	693a      	ldr	r2, [r7, #16]
 800f704:	4313      	orrs	r3, r2
 800f706:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f70e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	011b      	lsls	r3, r3, #4
 800f714:	697a      	ldr	r2, [r7, #20]
 800f716:	4313      	orrs	r3, r2
 800f718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	693a      	ldr	r2, [r7, #16]
 800f71e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	697a      	ldr	r2, [r7, #20]
 800f724:	621a      	str	r2, [r3, #32]
}
 800f726:	bf00      	nop
 800f728:	371c      	adds	r7, #28
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr

0800f732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f732:	b480      	push	{r7}
 800f734:	b085      	sub	sp, #20
 800f736:	af00      	add	r7, sp, #0
 800f738:	6078      	str	r0, [r7, #4]
 800f73a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	689b      	ldr	r3, [r3, #8]
 800f740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f74c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f74e:	683a      	ldr	r2, [r7, #0]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	4313      	orrs	r3, r2
 800f754:	f043 0307 	orr.w	r3, r3, #7
 800f758:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	68fa      	ldr	r2, [r7, #12]
 800f75e:	609a      	str	r2, [r3, #8]
}
 800f760:	bf00      	nop
 800f762:	3714      	adds	r7, #20
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b087      	sub	sp, #28
 800f770:	af00      	add	r7, sp, #0
 800f772:	60f8      	str	r0, [r7, #12]
 800f774:	60b9      	str	r1, [r7, #8]
 800f776:	607a      	str	r2, [r7, #4]
 800f778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	689b      	ldr	r3, [r3, #8]
 800f77e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	021a      	lsls	r2, r3, #8
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	431a      	orrs	r2, r3
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	4313      	orrs	r3, r2
 800f794:	697a      	ldr	r2, [r7, #20]
 800f796:	4313      	orrs	r3, r2
 800f798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	697a      	ldr	r2, [r7, #20]
 800f79e:	609a      	str	r2, [r3, #8]
}
 800f7a0:	bf00      	nop
 800f7a2:	371c      	adds	r7, #28
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b085      	sub	sp, #20
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d101      	bne.n	800f7c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f7c0:	2302      	movs	r3, #2
 800f7c2:	e04a      	b.n	800f85a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2202      	movs	r2, #2
 800f7d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	689b      	ldr	r3, [r3, #8]
 800f7e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4a1f      	ldr	r2, [pc, #124]	@ (800f868 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d108      	bne.n	800f800 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f7f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	68fa      	ldr	r2, [r7, #12]
 800f7fc:	4313      	orrs	r3, r2
 800f7fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	68fa      	ldr	r2, [r7, #12]
 800f80e:	4313      	orrs	r3, r2
 800f810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	4a12      	ldr	r2, [pc, #72]	@ (800f868 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d004      	beq.n	800f82e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f82c:	d10c      	bne.n	800f848 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	689b      	ldr	r3, [r3, #8]
 800f83a:	68ba      	ldr	r2, [r7, #8]
 800f83c:	4313      	orrs	r3, r2
 800f83e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	68ba      	ldr	r2, [r7, #8]
 800f846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2201      	movs	r2, #1
 800f84c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2200      	movs	r2, #0
 800f854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3714      	adds	r7, #20
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop
 800f868:	40012c00 	.word	0x40012c00

0800f86c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f874:	bf00      	nop
 800f876:	370c      	adds	r7, #12
 800f878:	46bd      	mov	sp, r7
 800f87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87e:	4770      	bx	lr

0800f880 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f880:	b480      	push	{r7}
 800f882:	b083      	sub	sp, #12
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f888:	bf00      	nop
 800f88a:	370c      	adds	r7, #12
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr

0800f894 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f89c:	bf00      	nop
 800f89e:	370c      	adds	r7, #12
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a6:	4770      	bx	lr

0800f8a8 <LL_RCC_GetUSARTClockSource>:
{
 800f8a8:	b480      	push	{r7}
 800f8aa:	b083      	sub	sp, #12
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800f8b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	4013      	ands	r3, r2
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	370c      	adds	r7, #12
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr

0800f8c8 <LL_RCC_GetLPUARTClockSource>:
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b083      	sub	sp, #12
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800f8d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	4013      	ands	r3, r2
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	370c      	adds	r7, #12
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d101      	bne.n	800f8fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	e042      	b.n	800f980 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f900:	2b00      	cmp	r3, #0
 800f902:	d106      	bne.n	800f912 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2200      	movs	r2, #0
 800f908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f7f7 fca7 	bl	8007260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2224      	movs	r2, #36	@ 0x24
 800f916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f022 0201 	bic.w	r2, r2, #1
 800f928:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d002      	beq.n	800f938 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f000 ff16 	bl	8010764 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 fceb 	bl	8010314 <UART_SetConfig>
 800f93e:	4603      	mov	r3, r0
 800f940:	2b01      	cmp	r3, #1
 800f942:	d101      	bne.n	800f948 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f944:	2301      	movs	r3, #1
 800f946:	e01b      	b.n	800f980 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	685a      	ldr	r2, [r3, #4]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	689a      	ldr	r2, [r3, #8]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f042 0201 	orr.w	r2, r2, #1
 800f976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f000 ff95 	bl	80108a8 <UART_CheckIdleState>
 800f97e:	4603      	mov	r3, r0
}
 800f980:	4618      	mov	r0, r3
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b08a      	sub	sp, #40	@ 0x28
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	4613      	mov	r3, r2
 800f994:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f99c:	2b20      	cmp	r3, #32
 800f99e:	d137      	bne.n	800fa10 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d002      	beq.n	800f9ac <HAL_UART_Receive_DMA+0x24>
 800f9a6:	88fb      	ldrh	r3, [r7, #6]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d101      	bne.n	800f9b0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	e030      	b.n	800fa12 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	4a18      	ldr	r2, [pc, #96]	@ (800fa1c <HAL_UART_Receive_DMA+0x94>)
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d01f      	beq.n	800fa00 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d018      	beq.n	800fa00 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	e853 3f00 	ldrex	r3, [r3]
 800f9da:	613b      	str	r3, [r7, #16]
   return(result);
 800f9dc:	693b      	ldr	r3, [r7, #16]
 800f9de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f9e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ec:	623b      	str	r3, [r7, #32]
 800f9ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9f0:	69f9      	ldr	r1, [r7, #28]
 800f9f2:	6a3a      	ldr	r2, [r7, #32]
 800f9f4:	e841 2300 	strex	r3, r2, [r1]
 800f9f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f9fa:	69bb      	ldr	r3, [r7, #24]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d1e6      	bne.n	800f9ce <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fa00:	88fb      	ldrh	r3, [r7, #6]
 800fa02:	461a      	mov	r2, r3
 800fa04:	68b9      	ldr	r1, [r7, #8]
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f001 f866 	bl	8010ad8 <UART_Start_Receive_DMA>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	e000      	b.n	800fa12 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fa10:	2302      	movs	r3, #2
  }
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3728      	adds	r7, #40	@ 0x28
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	40008000 	.word	0x40008000

0800fa20 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b0a0      	sub	sp, #128	@ 0x80
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa30:	e853 3f00 	ldrex	r3, [r3]
 800fa34:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800fa36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fa38:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800fa3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	461a      	mov	r2, r3
 800fa44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fa46:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fa48:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa4a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800fa4c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800fa4e:	e841 2300 	strex	r3, r2, [r1]
 800fa52:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800fa54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d1e6      	bne.n	800fa28 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	3308      	adds	r3, #8
 800fa60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa64:	e853 3f00 	ldrex	r3, [r3]
 800fa68:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fa6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa6c:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800fa70:	f023 0301 	bic.w	r3, r3, #1
 800fa74:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	3308      	adds	r3, #8
 800fa7c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800fa7e:	657a      	str	r2, [r7, #84]	@ 0x54
 800fa80:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fa84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fa86:	e841 2300 	strex	r3, r2, [r1]
 800fa8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800fa8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d1e3      	bne.n	800fa5a <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	d118      	bne.n	800facc <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faa2:	e853 3f00 	ldrex	r3, [r3]
 800faa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800faa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faaa:	f023 0310 	bic.w	r3, r3, #16
 800faae:	677b      	str	r3, [r7, #116]	@ 0x74
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	461a      	mov	r2, r3
 800fab6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fab8:	643b      	str	r3, [r7, #64]	@ 0x40
 800faba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fabc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fabe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fac0:	e841 2300 	strex	r3, r2, [r1]
 800fac4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d1e6      	bne.n	800fa9a <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	689b      	ldr	r3, [r3, #8]
 800fad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fad6:	2b80      	cmp	r3, #128	@ 0x80
 800fad8:	d137      	bne.n	800fb4a <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	3308      	adds	r3, #8
 800fae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fae2:	6a3b      	ldr	r3, [r7, #32]
 800fae4:	e853 3f00 	ldrex	r3, [r3]
 800fae8:	61fb      	str	r3, [r7, #28]
   return(result);
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800faf0:	673b      	str	r3, [r7, #112]	@ 0x70
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	3308      	adds	r3, #8
 800faf8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fafa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fafc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fafe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb02:	e841 2300 	strex	r3, r2, [r1]
 800fb06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d1e5      	bne.n	800fada <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d019      	beq.n	800fb4a <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7f9 f8df 	bl	8008ce6 <HAL_DMA_Abort>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d00d      	beq.n	800fb4a <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7f9 fa44 	bl	8008fc0 <HAL_DMA_GetError>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b20      	cmp	r3, #32
 800fb3c:	d105      	bne.n	800fb4a <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2210      	movs	r2, #16
 800fb42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fb46:	2303      	movs	r3, #3
 800fb48:	e073      	b.n	800fc32 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	689b      	ldr	r3, [r3, #8]
 800fb50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb54:	2b40      	cmp	r3, #64	@ 0x40
 800fb56:	d13b      	bne.n	800fbd0 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	3308      	adds	r3, #8
 800fb5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	e853 3f00 	ldrex	r3, [r3]
 800fb66:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	3308      	adds	r3, #8
 800fb76:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fb78:	61ba      	str	r2, [r7, #24]
 800fb7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb7c:	6979      	ldr	r1, [r7, #20]
 800fb7e:	69ba      	ldr	r2, [r7, #24]
 800fb80:	e841 2300 	strex	r3, r2, [r1]
 800fb84:	613b      	str	r3, [r7, #16]
   return(result);
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d1e5      	bne.n	800fb58 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d01c      	beq.n	800fbd0 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7f9 f89d 	bl	8008ce6 <HAL_DMA_Abort>
 800fbac:	4603      	mov	r3, r0
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d00e      	beq.n	800fbd0 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7f9 fa01 	bl	8008fc0 <HAL_DMA_GetError>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	2b20      	cmp	r3, #32
 800fbc2:	d105      	bne.n	800fbd0 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2210      	movs	r2, #16
 800fbc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fbcc:	2303      	movs	r3, #3
 800fbce:	e030      	b.n	800fc32 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	220f      	movs	r2, #15
 800fbe6:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fbf0:	d107      	bne.n	800fc02 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	699a      	ldr	r2, [r3, #24]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f042 0210 	orr.w	r2, r2, #16
 800fc00:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	699a      	ldr	r2, [r3, #24]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f042 0208 	orr.w	r2, r2, #8
 800fc10:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2220      	movs	r2, #32
 800fc16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2220      	movs	r2, #32
 800fc1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2200      	movs	r2, #0
 800fc26:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3780      	adds	r7, #128	@ 0x80
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
	...

0800fc3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b0ba      	sub	sp, #232	@ 0xe8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	69db      	ldr	r3, [r3, #28]
 800fc4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	689b      	ldr	r3, [r3, #8]
 800fc5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fc62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fc66:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fc6a:	4013      	ands	r3, r2
 800fc6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fc70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d11b      	bne.n	800fcb0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fc78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc7c:	f003 0320 	and.w	r3, r3, #32
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d015      	beq.n	800fcb0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fc84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc88:	f003 0320 	and.w	r3, r3, #32
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d105      	bne.n	800fc9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fc90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d009      	beq.n	800fcb0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	f000 8300 	beq.w	80102a6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	4798      	blx	r3
      }
      return;
 800fcae:	e2fa      	b.n	80102a6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fcb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	f000 8123 	beq.w	800ff00 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fcba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fcbe:	4b8d      	ldr	r3, [pc, #564]	@ (800fef4 <HAL_UART_IRQHandler+0x2b8>)
 800fcc0:	4013      	ands	r3, r2
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d106      	bne.n	800fcd4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fcc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fcca:	4b8b      	ldr	r3, [pc, #556]	@ (800fef8 <HAL_UART_IRQHandler+0x2bc>)
 800fccc:	4013      	ands	r3, r2
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	f000 8116 	beq.w	800ff00 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fcd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcd8:	f003 0301 	and.w	r3, r3, #1
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d011      	beq.n	800fd04 <HAL_UART_IRQHandler+0xc8>
 800fce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d00b      	beq.n	800fd04 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	2201      	movs	r2, #1
 800fcf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcfa:	f043 0201 	orr.w	r2, r3, #1
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd08:	f003 0302 	and.w	r3, r3, #2
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d011      	beq.n	800fd34 <HAL_UART_IRQHandler+0xf8>
 800fd10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd14:	f003 0301 	and.w	r3, r3, #1
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d00b      	beq.n	800fd34 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2202      	movs	r2, #2
 800fd22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd2a:	f043 0204 	orr.w	r2, r3, #4
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd38:	f003 0304 	and.w	r3, r3, #4
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d011      	beq.n	800fd64 <HAL_UART_IRQHandler+0x128>
 800fd40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd44:	f003 0301 	and.w	r3, r3, #1
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d00b      	beq.n	800fd64 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	2204      	movs	r2, #4
 800fd52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd5a:	f043 0202 	orr.w	r2, r3, #2
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fd64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd68:	f003 0308 	and.w	r3, r3, #8
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d017      	beq.n	800fda0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fd70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd74:	f003 0320 	and.w	r3, r3, #32
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d105      	bne.n	800fd88 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fd7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fd80:	4b5c      	ldr	r3, [pc, #368]	@ (800fef4 <HAL_UART_IRQHandler+0x2b8>)
 800fd82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d00b      	beq.n	800fda0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	2208      	movs	r2, #8
 800fd8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd96:	f043 0208 	orr.w	r2, r3, #8
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fda0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fda4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d012      	beq.n	800fdd2 <HAL_UART_IRQHandler+0x196>
 800fdac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fdb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d00c      	beq.n	800fdd2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fdc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdc8:	f043 0220 	orr.w	r2, r3, #32
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	f000 8266 	beq.w	80102aa <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fdde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fde2:	f003 0320 	and.w	r3, r3, #32
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d013      	beq.n	800fe12 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fdea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fdee:	f003 0320 	and.w	r3, r3, #32
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d105      	bne.n	800fe02 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fdf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fdfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d007      	beq.n	800fe12 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d003      	beq.n	800fe12 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	689b      	ldr	r3, [r3, #8]
 800fe22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe26:	2b40      	cmp	r3, #64	@ 0x40
 800fe28:	d005      	beq.n	800fe36 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fe2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fe2e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d054      	beq.n	800fee0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f000 ff35 	bl	8010ca6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	689b      	ldr	r3, [r3, #8]
 800fe42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe46:	2b40      	cmp	r3, #64	@ 0x40
 800fe48:	d146      	bne.n	800fed8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	3308      	adds	r3, #8
 800fe50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fe58:	e853 3f00 	ldrex	r3, [r3]
 800fe5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fe60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fe64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	3308      	adds	r3, #8
 800fe72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fe76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fe7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fe82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fe86:	e841 2300 	strex	r3, r2, [r1]
 800fe8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fe8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d1d9      	bne.n	800fe4a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d017      	beq.n	800fed0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fea6:	4a15      	ldr	r2, [pc, #84]	@ (800fefc <HAL_UART_IRQHandler+0x2c0>)
 800fea8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7f8 ff77 	bl	8008da4 <HAL_DMA_Abort_IT>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d019      	beq.n	800fef0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800feca:	4610      	mov	r0, r2
 800fecc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fece:	e00f      	b.n	800fef0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f000 fa09 	bl	80102e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fed6:	e00b      	b.n	800fef0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f000 fa05 	bl	80102e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fede:	e007      	b.n	800fef0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f000 fa01 	bl	80102e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2200      	movs	r2, #0
 800feea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800feee:	e1dc      	b.n	80102aa <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fef0:	bf00      	nop
    return;
 800fef2:	e1da      	b.n	80102aa <HAL_UART_IRQHandler+0x66e>
 800fef4:	10000001 	.word	0x10000001
 800fef8:	04000120 	.word	0x04000120
 800fefc:	08010f5d 	.word	0x08010f5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	f040 8170 	bne.w	80101ea <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ff0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff0e:	f003 0310 	and.w	r3, r3, #16
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	f000 8169 	beq.w	80101ea <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ff18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff1c:	f003 0310 	and.w	r3, r3, #16
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	f000 8162 	beq.w	80101ea <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	2210      	movs	r2, #16
 800ff2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	689b      	ldr	r3, [r3, #8]
 800ff34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff38:	2b40      	cmp	r3, #64	@ 0x40
 800ff3a:	f040 80d8 	bne.w	80100ee <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ff4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f000 80af 	beq.w	80100b4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ff5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ff60:	429a      	cmp	r2, r3
 800ff62:	f080 80a7 	bcs.w	80100b4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ff6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	f003 0320 	and.w	r3, r3, #32
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	f040 8087 	bne.w	8010092 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ff90:	e853 3f00 	ldrex	r3, [r3]
 800ff94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ff98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ff9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ffa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ffae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ffb2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ffba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ffbe:	e841 2300 	strex	r3, r2, [r1]
 800ffc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ffc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d1da      	bne.n	800ff84 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	3308      	adds	r3, #8
 800ffd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ffd8:	e853 3f00 	ldrex	r3, [r3]
 800ffdc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ffde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ffe0:	f023 0301 	bic.w	r3, r3, #1
 800ffe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	3308      	adds	r3, #8
 800ffee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fff2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fff6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fff8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fffa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fffe:	e841 2300 	strex	r3, r2, [r1]
 8010002:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010006:	2b00      	cmp	r3, #0
 8010008:	d1e1      	bne.n	800ffce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	3308      	adds	r3, #8
 8010010:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010012:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010014:	e853 3f00 	ldrex	r3, [r3]
 8010018:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801001a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801001c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	3308      	adds	r3, #8
 801002a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801002e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010030:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010032:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010034:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010036:	e841 2300 	strex	r3, r2, [r1]
 801003a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801003c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801003e:	2b00      	cmp	r3, #0
 8010040:	d1e3      	bne.n	801000a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2220      	movs	r2, #32
 8010046:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2200      	movs	r2, #0
 801004e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010058:	e853 3f00 	ldrex	r3, [r3]
 801005c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801005e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010060:	f023 0310 	bic.w	r3, r3, #16
 8010064:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	461a      	mov	r2, r3
 801006e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010072:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010074:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010076:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010078:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801007a:	e841 2300 	strex	r3, r2, [r1]
 801007e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010082:	2b00      	cmp	r3, #0
 8010084:	d1e4      	bne.n	8010050 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801008c:	4618      	mov	r0, r3
 801008e:	f7f8 fe2a 	bl	8008ce6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2202      	movs	r2, #2
 8010096:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	1ad3      	subs	r3, r2, r3
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	4619      	mov	r1, r3
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f000 f925 	bl	80102fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80100b2:	e0fc      	b.n	80102ae <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80100ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80100be:	429a      	cmp	r2, r3
 80100c0:	f040 80f5 	bne.w	80102ae <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	f003 0320 	and.w	r3, r3, #32
 80100d2:	2b20      	cmp	r3, #32
 80100d4:	f040 80eb 	bne.w	80102ae <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2202      	movs	r2, #2
 80100dc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80100e4:	4619      	mov	r1, r3
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f000 f908 	bl	80102fc <HAL_UARTEx_RxEventCallback>
      return;
 80100ec:	e0df      	b.n	80102ae <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	1ad3      	subs	r3, r2, r3
 80100fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010108:	b29b      	uxth	r3, r3
 801010a:	2b00      	cmp	r3, #0
 801010c:	f000 80d1 	beq.w	80102b2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8010110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010114:	2b00      	cmp	r3, #0
 8010116:	f000 80cc 	beq.w	80102b2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010122:	e853 3f00 	ldrex	r3, [r3]
 8010126:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801012a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801012e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	461a      	mov	r2, r3
 8010138:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801013c:	647b      	str	r3, [r7, #68]	@ 0x44
 801013e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010140:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010142:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010144:	e841 2300 	strex	r3, r2, [r1]
 8010148:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801014a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801014c:	2b00      	cmp	r3, #0
 801014e:	d1e4      	bne.n	801011a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	3308      	adds	r3, #8
 8010156:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801015a:	e853 3f00 	ldrex	r3, [r3]
 801015e:	623b      	str	r3, [r7, #32]
   return(result);
 8010160:	6a3b      	ldr	r3, [r7, #32]
 8010162:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010166:	f023 0301 	bic.w	r3, r3, #1
 801016a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	3308      	adds	r3, #8
 8010174:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010178:	633a      	str	r2, [r7, #48]	@ 0x30
 801017a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801017c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801017e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010180:	e841 2300 	strex	r3, r2, [r1]
 8010184:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010188:	2b00      	cmp	r3, #0
 801018a:	d1e1      	bne.n	8010150 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2220      	movs	r2, #32
 8010190:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2200      	movs	r2, #0
 8010198:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	e853 3f00 	ldrex	r3, [r3]
 80101ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	f023 0310 	bic.w	r3, r3, #16
 80101b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	461a      	mov	r2, r3
 80101be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80101c2:	61fb      	str	r3, [r7, #28]
 80101c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101c6:	69b9      	ldr	r1, [r7, #24]
 80101c8:	69fa      	ldr	r2, [r7, #28]
 80101ca:	e841 2300 	strex	r3, r2, [r1]
 80101ce:	617b      	str	r3, [r7, #20]
   return(result);
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d1e4      	bne.n	80101a0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2202      	movs	r2, #2
 80101da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80101dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80101e0:	4619      	mov	r1, r3
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f000 f88a 	bl	80102fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80101e8:	e063      	b.n	80102b2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80101ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d00e      	beq.n	8010214 <HAL_UART_IRQHandler+0x5d8>
 80101f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d008      	beq.n	8010214 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801020a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f000 fee2 	bl	8010fd6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010212:	e051      	b.n	80102b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801021c:	2b00      	cmp	r3, #0
 801021e:	d014      	beq.n	801024a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010228:	2b00      	cmp	r3, #0
 801022a:	d105      	bne.n	8010238 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801022c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010230:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010234:	2b00      	cmp	r3, #0
 8010236:	d008      	beq.n	801024a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801023c:	2b00      	cmp	r3, #0
 801023e:	d03a      	beq.n	80102b6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	4798      	blx	r3
    }
    return;
 8010248:	e035      	b.n	80102b6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801024a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801024e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010252:	2b00      	cmp	r3, #0
 8010254:	d009      	beq.n	801026a <HAL_UART_IRQHandler+0x62e>
 8010256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801025a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801025e:	2b00      	cmp	r3, #0
 8010260:	d003      	beq.n	801026a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f000 fe8c 	bl	8010f80 <UART_EndTransmit_IT>
    return;
 8010268:	e026      	b.n	80102b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801026a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801026e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010272:	2b00      	cmp	r3, #0
 8010274:	d009      	beq.n	801028a <HAL_UART_IRQHandler+0x64e>
 8010276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801027a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801027e:	2b00      	cmp	r3, #0
 8010280:	d003      	beq.n	801028a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f000 febb 	bl	8010ffe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010288:	e016      	b.n	80102b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801028a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801028e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010292:	2b00      	cmp	r3, #0
 8010294:	d010      	beq.n	80102b8 <HAL_UART_IRQHandler+0x67c>
 8010296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801029a:	2b00      	cmp	r3, #0
 801029c:	da0c      	bge.n	80102b8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f000 fea3 	bl	8010fea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80102a4:	e008      	b.n	80102b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80102a6:	bf00      	nop
 80102a8:	e006      	b.n	80102b8 <HAL_UART_IRQHandler+0x67c>
    return;
 80102aa:	bf00      	nop
 80102ac:	e004      	b.n	80102b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80102ae:	bf00      	nop
 80102b0:	e002      	b.n	80102b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80102b2:	bf00      	nop
 80102b4:	e000      	b.n	80102b8 <HAL_UART_IRQHandler+0x67c>
    return;
 80102b6:	bf00      	nop
  }
}
 80102b8:	37e8      	adds	r7, #232	@ 0xe8
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
 80102be:	bf00      	nop

080102c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80102c0:	b480      	push	{r7}
 80102c2:	b083      	sub	sp, #12
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80102c8:	bf00      	nop
 80102ca:	370c      	adds	r7, #12
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b083      	sub	sp, #12
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80102dc:	bf00      	nop
 80102de:	370c      	adds	r7, #12
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80102f0:	bf00      	nop
 80102f2:	370c      	adds	r7, #12
 80102f4:	46bd      	mov	sp, r7
 80102f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fa:	4770      	bx	lr

080102fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b083      	sub	sp, #12
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	460b      	mov	r3, r1
 8010306:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010308:	bf00      	nop
 801030a:	370c      	adds	r7, #12
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010318:	b08c      	sub	sp, #48	@ 0x30
 801031a:	af00      	add	r7, sp, #0
 801031c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801031e:	2300      	movs	r3, #0
 8010320:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	689a      	ldr	r2, [r3, #8]
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	691b      	ldr	r3, [r3, #16]
 801032c:	431a      	orrs	r2, r3
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	695b      	ldr	r3, [r3, #20]
 8010332:	431a      	orrs	r2, r3
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	69db      	ldr	r3, [r3, #28]
 8010338:	4313      	orrs	r3, r2
 801033a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	4baf      	ldr	r3, [pc, #700]	@ (8010600 <UART_SetConfig+0x2ec>)
 8010344:	4013      	ands	r3, r2
 8010346:	697a      	ldr	r2, [r7, #20]
 8010348:	6812      	ldr	r2, [r2, #0]
 801034a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801034c:	430b      	orrs	r3, r1
 801034e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	68da      	ldr	r2, [r3, #12]
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	430a      	orrs	r2, r1
 8010364:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	699b      	ldr	r3, [r3, #24]
 801036a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4aa4      	ldr	r2, [pc, #656]	@ (8010604 <UART_SetConfig+0x2f0>)
 8010372:	4293      	cmp	r3, r2
 8010374:	d004      	beq.n	8010380 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	6a1b      	ldr	r3, [r3, #32]
 801037a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801037c:	4313      	orrs	r3, r2
 801037e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	689b      	ldr	r3, [r3, #8]
 8010386:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801038a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 801038e:	697a      	ldr	r2, [r7, #20]
 8010390:	6812      	ldr	r2, [r2, #0]
 8010392:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010394:	430b      	orrs	r3, r1
 8010396:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801039e:	f023 010f 	bic.w	r1, r3, #15
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	430a      	orrs	r2, r1
 80103ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	4a95      	ldr	r2, [pc, #596]	@ (8010608 <UART_SetConfig+0x2f4>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d125      	bne.n	8010404 <UART_SetConfig+0xf0>
 80103b8:	2003      	movs	r0, #3
 80103ba:	f7ff fa75 	bl	800f8a8 <LL_RCC_GetUSARTClockSource>
 80103be:	4603      	mov	r3, r0
 80103c0:	2b03      	cmp	r3, #3
 80103c2:	d81b      	bhi.n	80103fc <UART_SetConfig+0xe8>
 80103c4:	a201      	add	r2, pc, #4	@ (adr r2, 80103cc <UART_SetConfig+0xb8>)
 80103c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ca:	bf00      	nop
 80103cc:	080103dd 	.word	0x080103dd
 80103d0:	080103ed 	.word	0x080103ed
 80103d4:	080103e5 	.word	0x080103e5
 80103d8:	080103f5 	.word	0x080103f5
 80103dc:	2301      	movs	r3, #1
 80103de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80103e2:	e042      	b.n	801046a <UART_SetConfig+0x156>
 80103e4:	2302      	movs	r3, #2
 80103e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80103ea:	e03e      	b.n	801046a <UART_SetConfig+0x156>
 80103ec:	2304      	movs	r3, #4
 80103ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80103f2:	e03a      	b.n	801046a <UART_SetConfig+0x156>
 80103f4:	2308      	movs	r3, #8
 80103f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80103fa:	e036      	b.n	801046a <UART_SetConfig+0x156>
 80103fc:	2310      	movs	r3, #16
 80103fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010402:	e032      	b.n	801046a <UART_SetConfig+0x156>
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	4a7e      	ldr	r2, [pc, #504]	@ (8010604 <UART_SetConfig+0x2f0>)
 801040a:	4293      	cmp	r3, r2
 801040c:	d12a      	bne.n	8010464 <UART_SetConfig+0x150>
 801040e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8010412:	f7ff fa59 	bl	800f8c8 <LL_RCC_GetLPUARTClockSource>
 8010416:	4603      	mov	r3, r0
 8010418:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801041c:	d01a      	beq.n	8010454 <UART_SetConfig+0x140>
 801041e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010422:	d81b      	bhi.n	801045c <UART_SetConfig+0x148>
 8010424:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010428:	d00c      	beq.n	8010444 <UART_SetConfig+0x130>
 801042a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801042e:	d815      	bhi.n	801045c <UART_SetConfig+0x148>
 8010430:	2b00      	cmp	r3, #0
 8010432:	d003      	beq.n	801043c <UART_SetConfig+0x128>
 8010434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010438:	d008      	beq.n	801044c <UART_SetConfig+0x138>
 801043a:	e00f      	b.n	801045c <UART_SetConfig+0x148>
 801043c:	2300      	movs	r3, #0
 801043e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010442:	e012      	b.n	801046a <UART_SetConfig+0x156>
 8010444:	2302      	movs	r3, #2
 8010446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801044a:	e00e      	b.n	801046a <UART_SetConfig+0x156>
 801044c:	2304      	movs	r3, #4
 801044e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010452:	e00a      	b.n	801046a <UART_SetConfig+0x156>
 8010454:	2308      	movs	r3, #8
 8010456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801045a:	e006      	b.n	801046a <UART_SetConfig+0x156>
 801045c:	2310      	movs	r3, #16
 801045e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010462:	e002      	b.n	801046a <UART_SetConfig+0x156>
 8010464:	2310      	movs	r3, #16
 8010466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	4a65      	ldr	r2, [pc, #404]	@ (8010604 <UART_SetConfig+0x2f0>)
 8010470:	4293      	cmp	r3, r2
 8010472:	f040 8097 	bne.w	80105a4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010476:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801047a:	2b08      	cmp	r3, #8
 801047c:	d823      	bhi.n	80104c6 <UART_SetConfig+0x1b2>
 801047e:	a201      	add	r2, pc, #4	@ (adr r2, 8010484 <UART_SetConfig+0x170>)
 8010480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010484:	080104a9 	.word	0x080104a9
 8010488:	080104c7 	.word	0x080104c7
 801048c:	080104b1 	.word	0x080104b1
 8010490:	080104c7 	.word	0x080104c7
 8010494:	080104b7 	.word	0x080104b7
 8010498:	080104c7 	.word	0x080104c7
 801049c:	080104c7 	.word	0x080104c7
 80104a0:	080104c7 	.word	0x080104c7
 80104a4:	080104bf 	.word	0x080104bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80104a8:	f7fc fcc4 	bl	800ce34 <HAL_RCC_GetPCLK1Freq>
 80104ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80104ae:	e010      	b.n	80104d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80104b0:	4b56      	ldr	r3, [pc, #344]	@ (801060c <UART_SetConfig+0x2f8>)
 80104b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80104b4:	e00d      	b.n	80104d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80104b6:	f7fc fc3d 	bl	800cd34 <HAL_RCC_GetSysClockFreq>
 80104ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80104bc:	e009      	b.n	80104d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80104be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80104c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80104c4:	e005      	b.n	80104d2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80104c6:	2300      	movs	r3, #0
 80104c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80104ca:	2301      	movs	r3, #1
 80104cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80104d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80104d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	f000 812b 	beq.w	8010730 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104de:	4a4c      	ldr	r2, [pc, #304]	@ (8010610 <UART_SetConfig+0x2fc>)
 80104e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104e4:	461a      	mov	r2, r3
 80104e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80104ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	685a      	ldr	r2, [r3, #4]
 80104f2:	4613      	mov	r3, r2
 80104f4:	005b      	lsls	r3, r3, #1
 80104f6:	4413      	add	r3, r2
 80104f8:	69ba      	ldr	r2, [r7, #24]
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d305      	bcc.n	801050a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010504:	69ba      	ldr	r2, [r7, #24]
 8010506:	429a      	cmp	r2, r3
 8010508:	d903      	bls.n	8010512 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801050a:	2301      	movs	r3, #1
 801050c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010510:	e10e      	b.n	8010730 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010514:	2200      	movs	r2, #0
 8010516:	60bb      	str	r3, [r7, #8]
 8010518:	60fa      	str	r2, [r7, #12]
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801051e:	4a3c      	ldr	r2, [pc, #240]	@ (8010610 <UART_SetConfig+0x2fc>)
 8010520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010524:	b29b      	uxth	r3, r3
 8010526:	2200      	movs	r2, #0
 8010528:	603b      	str	r3, [r7, #0]
 801052a:	607a      	str	r2, [r7, #4]
 801052c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010530:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010534:	f7f0 fb80 	bl	8000c38 <__aeabi_uldivmod>
 8010538:	4602      	mov	r2, r0
 801053a:	460b      	mov	r3, r1
 801053c:	4610      	mov	r0, r2
 801053e:	4619      	mov	r1, r3
 8010540:	f04f 0200 	mov.w	r2, #0
 8010544:	f04f 0300 	mov.w	r3, #0
 8010548:	020b      	lsls	r3, r1, #8
 801054a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801054e:	0202      	lsls	r2, r0, #8
 8010550:	6979      	ldr	r1, [r7, #20]
 8010552:	6849      	ldr	r1, [r1, #4]
 8010554:	0849      	lsrs	r1, r1, #1
 8010556:	2000      	movs	r0, #0
 8010558:	460c      	mov	r4, r1
 801055a:	4605      	mov	r5, r0
 801055c:	eb12 0804 	adds.w	r8, r2, r4
 8010560:	eb43 0905 	adc.w	r9, r3, r5
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	2200      	movs	r2, #0
 801056a:	469a      	mov	sl, r3
 801056c:	4693      	mov	fp, r2
 801056e:	4652      	mov	r2, sl
 8010570:	465b      	mov	r3, fp
 8010572:	4640      	mov	r0, r8
 8010574:	4649      	mov	r1, r9
 8010576:	f7f0 fb5f 	bl	8000c38 <__aeabi_uldivmod>
 801057a:	4602      	mov	r2, r0
 801057c:	460b      	mov	r3, r1
 801057e:	4613      	mov	r3, r2
 8010580:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010582:	6a3b      	ldr	r3, [r7, #32]
 8010584:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010588:	d308      	bcc.n	801059c <UART_SetConfig+0x288>
 801058a:	6a3b      	ldr	r3, [r7, #32]
 801058c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010590:	d204      	bcs.n	801059c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	6a3a      	ldr	r2, [r7, #32]
 8010598:	60da      	str	r2, [r3, #12]
 801059a:	e0c9      	b.n	8010730 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801059c:	2301      	movs	r3, #1
 801059e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80105a2:	e0c5      	b.n	8010730 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	69db      	ldr	r3, [r3, #28]
 80105a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80105ac:	d16d      	bne.n	801068a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80105ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80105b2:	3b01      	subs	r3, #1
 80105b4:	2b07      	cmp	r3, #7
 80105b6:	d82d      	bhi.n	8010614 <UART_SetConfig+0x300>
 80105b8:	a201      	add	r2, pc, #4	@ (adr r2, 80105c0 <UART_SetConfig+0x2ac>)
 80105ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105be:	bf00      	nop
 80105c0:	080105e1 	.word	0x080105e1
 80105c4:	080105e9 	.word	0x080105e9
 80105c8:	08010615 	.word	0x08010615
 80105cc:	080105ef 	.word	0x080105ef
 80105d0:	08010615 	.word	0x08010615
 80105d4:	08010615 	.word	0x08010615
 80105d8:	08010615 	.word	0x08010615
 80105dc:	080105f7 	.word	0x080105f7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80105e0:	f7fc fc3e 	bl	800ce60 <HAL_RCC_GetPCLK2Freq>
 80105e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80105e6:	e01b      	b.n	8010620 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80105e8:	4b08      	ldr	r3, [pc, #32]	@ (801060c <UART_SetConfig+0x2f8>)
 80105ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80105ec:	e018      	b.n	8010620 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80105ee:	f7fc fba1 	bl	800cd34 <HAL_RCC_GetSysClockFreq>
 80105f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80105f4:	e014      	b.n	8010620 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80105f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80105fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80105fc:	e010      	b.n	8010620 <UART_SetConfig+0x30c>
 80105fe:	bf00      	nop
 8010600:	cfff69f3 	.word	0xcfff69f3
 8010604:	40008000 	.word	0x40008000
 8010608:	40013800 	.word	0x40013800
 801060c:	00f42400 	.word	0x00f42400
 8010610:	080230d8 	.word	0x080230d8
      default:
        pclk = 0U;
 8010614:	2300      	movs	r3, #0
 8010616:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010618:	2301      	movs	r3, #1
 801061a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801061e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010622:	2b00      	cmp	r3, #0
 8010624:	f000 8084 	beq.w	8010730 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801062c:	4a4b      	ldr	r2, [pc, #300]	@ (801075c <UART_SetConfig+0x448>)
 801062e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010632:	461a      	mov	r2, r3
 8010634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010636:	fbb3 f3f2 	udiv	r3, r3, r2
 801063a:	005a      	lsls	r2, r3, #1
 801063c:	697b      	ldr	r3, [r7, #20]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	085b      	lsrs	r3, r3, #1
 8010642:	441a      	add	r2, r3
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	fbb2 f3f3 	udiv	r3, r2, r3
 801064c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801064e:	6a3b      	ldr	r3, [r7, #32]
 8010650:	2b0f      	cmp	r3, #15
 8010652:	d916      	bls.n	8010682 <UART_SetConfig+0x36e>
 8010654:	6a3b      	ldr	r3, [r7, #32]
 8010656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801065a:	d212      	bcs.n	8010682 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801065c:	6a3b      	ldr	r3, [r7, #32]
 801065e:	b29b      	uxth	r3, r3
 8010660:	f023 030f 	bic.w	r3, r3, #15
 8010664:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010666:	6a3b      	ldr	r3, [r7, #32]
 8010668:	085b      	lsrs	r3, r3, #1
 801066a:	b29b      	uxth	r3, r3
 801066c:	f003 0307 	and.w	r3, r3, #7
 8010670:	b29a      	uxth	r2, r3
 8010672:	8bfb      	ldrh	r3, [r7, #30]
 8010674:	4313      	orrs	r3, r2
 8010676:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	8bfa      	ldrh	r2, [r7, #30]
 801067e:	60da      	str	r2, [r3, #12]
 8010680:	e056      	b.n	8010730 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8010682:	2301      	movs	r3, #1
 8010684:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010688:	e052      	b.n	8010730 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801068a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801068e:	3b01      	subs	r3, #1
 8010690:	2b07      	cmp	r3, #7
 8010692:	d822      	bhi.n	80106da <UART_SetConfig+0x3c6>
 8010694:	a201      	add	r2, pc, #4	@ (adr r2, 801069c <UART_SetConfig+0x388>)
 8010696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801069a:	bf00      	nop
 801069c:	080106bd 	.word	0x080106bd
 80106a0:	080106c5 	.word	0x080106c5
 80106a4:	080106db 	.word	0x080106db
 80106a8:	080106cb 	.word	0x080106cb
 80106ac:	080106db 	.word	0x080106db
 80106b0:	080106db 	.word	0x080106db
 80106b4:	080106db 	.word	0x080106db
 80106b8:	080106d3 	.word	0x080106d3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80106bc:	f7fc fbd0 	bl	800ce60 <HAL_RCC_GetPCLK2Freq>
 80106c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80106c2:	e010      	b.n	80106e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80106c4:	4b26      	ldr	r3, [pc, #152]	@ (8010760 <UART_SetConfig+0x44c>)
 80106c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80106c8:	e00d      	b.n	80106e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80106ca:	f7fc fb33 	bl	800cd34 <HAL_RCC_GetSysClockFreq>
 80106ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80106d0:	e009      	b.n	80106e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80106d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80106d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80106d8:	e005      	b.n	80106e6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80106da:	2300      	movs	r3, #0
 80106dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80106de:	2301      	movs	r3, #1
 80106e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80106e4:	bf00      	nop
    }

    if (pclk != 0U)
 80106e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d021      	beq.n	8010730 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106f0:	4a1a      	ldr	r2, [pc, #104]	@ (801075c <UART_SetConfig+0x448>)
 80106f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106f6:	461a      	mov	r2, r3
 80106f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	685b      	ldr	r3, [r3, #4]
 8010702:	085b      	lsrs	r3, r3, #1
 8010704:	441a      	add	r2, r3
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	fbb2 f3f3 	udiv	r3, r2, r3
 801070e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010710:	6a3b      	ldr	r3, [r7, #32]
 8010712:	2b0f      	cmp	r3, #15
 8010714:	d909      	bls.n	801072a <UART_SetConfig+0x416>
 8010716:	6a3b      	ldr	r3, [r7, #32]
 8010718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801071c:	d205      	bcs.n	801072a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801071e:	6a3b      	ldr	r3, [r7, #32]
 8010720:	b29a      	uxth	r2, r3
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	60da      	str	r2, [r3, #12]
 8010728:	e002      	b.n	8010730 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801072a:	2301      	movs	r3, #1
 801072c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	2201      	movs	r2, #1
 8010734:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	2201      	movs	r2, #1
 801073c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	2200      	movs	r2, #0
 8010744:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	2200      	movs	r2, #0
 801074a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801074c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8010750:	4618      	mov	r0, r3
 8010752:	3730      	adds	r7, #48	@ 0x30
 8010754:	46bd      	mov	sp, r7
 8010756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801075a:	bf00      	nop
 801075c:	080230d8 	.word	0x080230d8
 8010760:	00f42400 	.word	0x00f42400

08010764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010770:	f003 0308 	and.w	r3, r3, #8
 8010774:	2b00      	cmp	r3, #0
 8010776:	d00a      	beq.n	801078e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	430a      	orrs	r2, r1
 801078c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010792:	f003 0301 	and.w	r3, r3, #1
 8010796:	2b00      	cmp	r3, #0
 8010798:	d00a      	beq.n	80107b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	685b      	ldr	r3, [r3, #4]
 80107a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	430a      	orrs	r2, r1
 80107ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107b4:	f003 0302 	and.w	r3, r3, #2
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d00a      	beq.n	80107d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	685b      	ldr	r3, [r3, #4]
 80107c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	430a      	orrs	r2, r1
 80107d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107d6:	f003 0304 	and.w	r3, r3, #4
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d00a      	beq.n	80107f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	430a      	orrs	r2, r1
 80107f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107f8:	f003 0310 	and.w	r3, r3, #16
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d00a      	beq.n	8010816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	689b      	ldr	r3, [r3, #8]
 8010806:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	430a      	orrs	r2, r1
 8010814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801081a:	f003 0320 	and.w	r3, r3, #32
 801081e:	2b00      	cmp	r3, #0
 8010820:	d00a      	beq.n	8010838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	689b      	ldr	r3, [r3, #8]
 8010828:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	430a      	orrs	r2, r1
 8010836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801083c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010840:	2b00      	cmp	r3, #0
 8010842:	d01a      	beq.n	801087a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	430a      	orrs	r2, r1
 8010858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801085e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010862:	d10a      	bne.n	801087a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	685b      	ldr	r3, [r3, #4]
 801086a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	430a      	orrs	r2, r1
 8010878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801087e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010882:	2b00      	cmp	r3, #0
 8010884:	d00a      	beq.n	801089c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	430a      	orrs	r2, r1
 801089a:	605a      	str	r2, [r3, #4]
  }
}
 801089c:	bf00      	nop
 801089e:	370c      	adds	r7, #12
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr

080108a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b098      	sub	sp, #96	@ 0x60
 80108ac:	af02      	add	r7, sp, #8
 80108ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2200      	movs	r2, #0
 80108b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80108b8:	f7f6 feb4 	bl	8007624 <HAL_GetTick>
 80108bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f003 0308 	and.w	r3, r3, #8
 80108c8:	2b08      	cmp	r3, #8
 80108ca:	d12f      	bne.n	801092c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80108cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80108d0:	9300      	str	r3, [sp, #0]
 80108d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108d4:	2200      	movs	r2, #0
 80108d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f000 f88e 	bl	80109fc <UART_WaitOnFlagUntilTimeout>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d022      	beq.n	801092c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108ee:	e853 3f00 	ldrex	r3, [r3]
 80108f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80108f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80108fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	461a      	mov	r2, r3
 8010902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010904:	647b      	str	r3, [r7, #68]	@ 0x44
 8010906:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010908:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801090a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801090c:	e841 2300 	strex	r3, r2, [r1]
 8010910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010914:	2b00      	cmp	r3, #0
 8010916:	d1e6      	bne.n	80108e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2220      	movs	r2, #32
 801091c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2200      	movs	r2, #0
 8010924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010928:	2303      	movs	r3, #3
 801092a:	e063      	b.n	80109f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f003 0304 	and.w	r3, r3, #4
 8010936:	2b04      	cmp	r3, #4
 8010938:	d149      	bne.n	80109ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801093a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801093e:	9300      	str	r3, [sp, #0]
 8010940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010942:	2200      	movs	r2, #0
 8010944:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	f000 f857 	bl	80109fc <UART_WaitOnFlagUntilTimeout>
 801094e:	4603      	mov	r3, r0
 8010950:	2b00      	cmp	r3, #0
 8010952:	d03c      	beq.n	80109ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801095a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801095c:	e853 3f00 	ldrex	r3, [r3]
 8010960:	623b      	str	r3, [r7, #32]
   return(result);
 8010962:	6a3b      	ldr	r3, [r7, #32]
 8010964:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010968:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	461a      	mov	r2, r3
 8010970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010972:	633b      	str	r3, [r7, #48]	@ 0x30
 8010974:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010976:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801097a:	e841 2300 	strex	r3, r2, [r1]
 801097e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010982:	2b00      	cmp	r3, #0
 8010984:	d1e6      	bne.n	8010954 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	3308      	adds	r3, #8
 801098c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801098e:	693b      	ldr	r3, [r7, #16]
 8010990:	e853 3f00 	ldrex	r3, [r3]
 8010994:	60fb      	str	r3, [r7, #12]
   return(result);
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	f023 0301 	bic.w	r3, r3, #1
 801099c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	3308      	adds	r3, #8
 80109a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80109a6:	61fa      	str	r2, [r7, #28]
 80109a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109aa:	69b9      	ldr	r1, [r7, #24]
 80109ac:	69fa      	ldr	r2, [r7, #28]
 80109ae:	e841 2300 	strex	r3, r2, [r1]
 80109b2:	617b      	str	r3, [r7, #20]
   return(result);
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d1e5      	bne.n	8010986 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2220      	movs	r2, #32
 80109be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2200      	movs	r2, #0
 80109c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80109ca:	2303      	movs	r3, #3
 80109cc:	e012      	b.n	80109f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2220      	movs	r2, #32
 80109d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2220      	movs	r2, #32
 80109da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2200      	movs	r2, #0
 80109e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2200      	movs	r2, #0
 80109e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2200      	movs	r2, #0
 80109ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80109f2:	2300      	movs	r3, #0
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	3758      	adds	r7, #88	@ 0x58
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}

080109fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b084      	sub	sp, #16
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	603b      	str	r3, [r7, #0]
 8010a08:	4613      	mov	r3, r2
 8010a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a0c:	e04f      	b.n	8010aae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a0e:	69bb      	ldr	r3, [r7, #24]
 8010a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a14:	d04b      	beq.n	8010aae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a16:	f7f6 fe05 	bl	8007624 <HAL_GetTick>
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	1ad3      	subs	r3, r2, r3
 8010a20:	69ba      	ldr	r2, [r7, #24]
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d302      	bcc.n	8010a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8010a26:	69bb      	ldr	r3, [r7, #24]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d101      	bne.n	8010a30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010a2c:	2303      	movs	r3, #3
 8010a2e:	e04e      	b.n	8010ace <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	f003 0304 	and.w	r3, r3, #4
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d037      	beq.n	8010aae <UART_WaitOnFlagUntilTimeout+0xb2>
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	2b80      	cmp	r3, #128	@ 0x80
 8010a42:	d034      	beq.n	8010aae <UART_WaitOnFlagUntilTimeout+0xb2>
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	2b40      	cmp	r3, #64	@ 0x40
 8010a48:	d031      	beq.n	8010aae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	69db      	ldr	r3, [r3, #28]
 8010a50:	f003 0308 	and.w	r3, r3, #8
 8010a54:	2b08      	cmp	r3, #8
 8010a56:	d110      	bne.n	8010a7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	2208      	movs	r2, #8
 8010a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010a60:	68f8      	ldr	r0, [r7, #12]
 8010a62:	f000 f920 	bl	8010ca6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	2208      	movs	r2, #8
 8010a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2200      	movs	r2, #0
 8010a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010a76:	2301      	movs	r3, #1
 8010a78:	e029      	b.n	8010ace <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	69db      	ldr	r3, [r3, #28]
 8010a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010a88:	d111      	bne.n	8010aae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010a94:	68f8      	ldr	r0, [r7, #12]
 8010a96:	f000 f906 	bl	8010ca6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	2220      	movs	r2, #32
 8010a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010aaa:	2303      	movs	r3, #3
 8010aac:	e00f      	b.n	8010ace <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	69da      	ldr	r2, [r3, #28]
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	4013      	ands	r3, r2
 8010ab8:	68ba      	ldr	r2, [r7, #8]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	bf0c      	ite	eq
 8010abe:	2301      	moveq	r3, #1
 8010ac0:	2300      	movne	r3, #0
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	461a      	mov	r2, r3
 8010ac6:	79fb      	ldrb	r3, [r7, #7]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d0a0      	beq.n	8010a0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010acc:	2300      	movs	r3, #0
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3710      	adds	r7, #16
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
	...

08010ad8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b096      	sub	sp, #88	@ 0x58
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	60f8      	str	r0, [r7, #12]
 8010ae0:	60b9      	str	r1, [r7, #8]
 8010ae2:	4613      	mov	r3, r2
 8010ae4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	68ba      	ldr	r2, [r7, #8]
 8010aea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	88fa      	ldrh	r2, [r7, #6]
 8010af0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2200      	movs	r2, #0
 8010af8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2222      	movs	r2, #34	@ 0x22
 8010b00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d02d      	beq.n	8010b6a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b14:	4a40      	ldr	r2, [pc, #256]	@ (8010c18 <UART_Start_Receive_DMA+0x140>)
 8010b16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8010c1c <UART_Start_Receive_DMA+0x144>)
 8010b20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b28:	4a3d      	ldr	r2, [pc, #244]	@ (8010c20 <UART_Start_Receive_DMA+0x148>)
 8010b2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b32:	2200      	movs	r2, #0
 8010b34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	3324      	adds	r3, #36	@ 0x24
 8010b42:	4619      	mov	r1, r3
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010b48:	461a      	mov	r2, r3
 8010b4a:	88fb      	ldrh	r3, [r7, #6]
 8010b4c:	f7f8 f850 	bl	8008bf0 <HAL_DMA_Start_IT>
 8010b50:	4603      	mov	r3, r0
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d009      	beq.n	8010b6a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2210      	movs	r2, #16
 8010b5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	2220      	movs	r2, #32
 8010b62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010b66:	2301      	movs	r3, #1
 8010b68:	e051      	b.n	8010c0e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	691b      	ldr	r3, [r3, #16]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d018      	beq.n	8010ba4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b7a:	e853 3f00 	ldrex	r3, [r3]
 8010b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010b86:	657b      	str	r3, [r7, #84]	@ 0x54
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010b92:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b94:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010b96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b98:	e841 2300 	strex	r3, r2, [r1]
 8010b9c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d1e6      	bne.n	8010b72 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	3308      	adds	r3, #8
 8010baa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bae:	e853 3f00 	ldrex	r3, [r3]
 8010bb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bb6:	f043 0301 	orr.w	r3, r3, #1
 8010bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	3308      	adds	r3, #8
 8010bc2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010bc4:	637a      	str	r2, [r7, #52]	@ 0x34
 8010bc6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010bca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010bcc:	e841 2300 	strex	r3, r2, [r1]
 8010bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d1e5      	bne.n	8010ba4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	3308      	adds	r3, #8
 8010bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	e853 3f00 	ldrex	r3, [r3]
 8010be6:	613b      	str	r3, [r7, #16]
   return(result);
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	3308      	adds	r3, #8
 8010bf6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010bf8:	623a      	str	r2, [r7, #32]
 8010bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bfc:	69f9      	ldr	r1, [r7, #28]
 8010bfe:	6a3a      	ldr	r2, [r7, #32]
 8010c00:	e841 2300 	strex	r3, r2, [r1]
 8010c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8010c06:	69bb      	ldr	r3, [r7, #24]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d1e5      	bne.n	8010bd8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010c0c:	2300      	movs	r3, #0
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3758      	adds	r7, #88	@ 0x58
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	08010d73 	.word	0x08010d73
 8010c1c:	08010e9f 	.word	0x08010e9f
 8010c20:	08010edd 	.word	0x08010edd

08010c24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b08f      	sub	sp, #60	@ 0x3c
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c32:	6a3b      	ldr	r3, [r7, #32]
 8010c34:	e853 3f00 	ldrex	r3, [r3]
 8010c38:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c3a:	69fb      	ldr	r3, [r7, #28]
 8010c3c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	461a      	mov	r2, r3
 8010c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010c4c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c52:	e841 2300 	strex	r3, r2, [r1]
 8010c56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d1e6      	bne.n	8010c2c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	3308      	adds	r3, #8
 8010c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	e853 3f00 	ldrex	r3, [r3]
 8010c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	3308      	adds	r3, #8
 8010c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c7e:	61ba      	str	r2, [r7, #24]
 8010c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c82:	6979      	ldr	r1, [r7, #20]
 8010c84:	69ba      	ldr	r2, [r7, #24]
 8010c86:	e841 2300 	strex	r3, r2, [r1]
 8010c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d1e5      	bne.n	8010c5e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	2220      	movs	r2, #32
 8010c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010c9a:	bf00      	nop
 8010c9c:	373c      	adds	r7, #60	@ 0x3c
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr

08010ca6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010ca6:	b480      	push	{r7}
 8010ca8:	b095      	sub	sp, #84	@ 0x54
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cb6:	e853 3f00 	ldrex	r3, [r3]
 8010cba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	461a      	mov	r2, r3
 8010cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ccc:	643b      	str	r3, [r7, #64]	@ 0x40
 8010cce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010cd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010cd4:	e841 2300 	strex	r3, r2, [r1]
 8010cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d1e6      	bne.n	8010cae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	3308      	adds	r3, #8
 8010ce6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ce8:	6a3b      	ldr	r3, [r7, #32]
 8010cea:	e853 3f00 	ldrex	r3, [r3]
 8010cee:	61fb      	str	r3, [r7, #28]
   return(result);
 8010cf0:	69fb      	ldr	r3, [r7, #28]
 8010cf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010cf6:	f023 0301 	bic.w	r3, r3, #1
 8010cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	3308      	adds	r3, #8
 8010d02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010d04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010d0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d0c:	e841 2300 	strex	r3, r2, [r1]
 8010d10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d1e3      	bne.n	8010ce0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	d118      	bne.n	8010d52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	e853 3f00 	ldrex	r3, [r3]
 8010d2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	f023 0310 	bic.w	r3, r3, #16
 8010d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d3e:	61bb      	str	r3, [r7, #24]
 8010d40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d42:	6979      	ldr	r1, [r7, #20]
 8010d44:	69ba      	ldr	r2, [r7, #24]
 8010d46:	e841 2300 	strex	r3, r2, [r1]
 8010d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d1e6      	bne.n	8010d20 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2220      	movs	r2, #32
 8010d56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2200      	movs	r2, #0
 8010d64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010d66:	bf00      	nop
 8010d68:	3754      	adds	r7, #84	@ 0x54
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d70:	4770      	bx	lr

08010d72 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010d72:	b580      	push	{r7, lr}
 8010d74:	b09c      	sub	sp, #112	@ 0x70
 8010d76:	af00      	add	r7, sp, #0
 8010d78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	f003 0320 	and.w	r3, r3, #32
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d171      	bne.n	8010e72 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d90:	2200      	movs	r2, #0
 8010d92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d9e:	e853 3f00 	ldrex	r3, [r3]
 8010da2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010da4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010da6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010daa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010dac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	461a      	mov	r2, r3
 8010db2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010db4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010db6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010db8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010dba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010dbc:	e841 2300 	strex	r3, r2, [r1]
 8010dc0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010dc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d1e6      	bne.n	8010d96 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	3308      	adds	r3, #8
 8010dce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dd2:	e853 3f00 	ldrex	r3, [r3]
 8010dd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dda:	f023 0301 	bic.w	r3, r3, #1
 8010dde:	667b      	str	r3, [r7, #100]	@ 0x64
 8010de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	3308      	adds	r3, #8
 8010de6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010de8:	647a      	str	r2, [r7, #68]	@ 0x44
 8010dea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010dee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010df0:	e841 2300 	strex	r3, r2, [r1]
 8010df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d1e5      	bne.n	8010dc8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010dfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	3308      	adds	r3, #8
 8010e02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e06:	e853 3f00 	ldrex	r3, [r3]
 8010e0a:	623b      	str	r3, [r7, #32]
   return(result);
 8010e0c:	6a3b      	ldr	r3, [r7, #32]
 8010e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e12:	663b      	str	r3, [r7, #96]	@ 0x60
 8010e14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	3308      	adds	r3, #8
 8010e1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010e1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8010e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e24:	e841 2300 	strex	r3, r2, [r1]
 8010e28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d1e5      	bne.n	8010dfc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e32:	2220      	movs	r2, #32
 8010e34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e3c:	2b01      	cmp	r3, #1
 8010e3e:	d118      	bne.n	8010e72 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	e853 3f00 	ldrex	r3, [r3]
 8010e4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	f023 0310 	bic.w	r3, r3, #16
 8010e54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010e5e:	61fb      	str	r3, [r7, #28]
 8010e60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e62:	69b9      	ldr	r1, [r7, #24]
 8010e64:	69fa      	ldr	r2, [r7, #28]
 8010e66:	e841 2300 	strex	r3, r2, [r1]
 8010e6a:	617b      	str	r3, [r7, #20]
   return(result);
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d1e6      	bne.n	8010e40 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010e72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e74:	2200      	movs	r2, #0
 8010e76:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	d107      	bne.n	8010e90 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010e86:	4619      	mov	r1, r3
 8010e88:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010e8a:	f7ff fa37 	bl	80102fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010e8e:	e002      	b.n	8010e96 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8010e90:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010e92:	f7f6 fa97 	bl	80073c4 <HAL_UART_RxCpltCallback>
}
 8010e96:	bf00      	nop
 8010e98:	3770      	adds	r7, #112	@ 0x70
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}

08010e9e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010e9e:	b580      	push	{r7, lr}
 8010ea0:	b084      	sub	sp, #16
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010eaa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	2201      	movs	r2, #1
 8010eb0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010eb6:	2b01      	cmp	r3, #1
 8010eb8:	d109      	bne.n	8010ece <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010ec0:	085b      	lsrs	r3, r3, #1
 8010ec2:	b29b      	uxth	r3, r3
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	68f8      	ldr	r0, [r7, #12]
 8010ec8:	f7ff fa18 	bl	80102fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010ecc:	e002      	b.n	8010ed4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010ece:	68f8      	ldr	r0, [r7, #12]
 8010ed0:	f7ff fa00 	bl	80102d4 <HAL_UART_RxHalfCpltCallback>
}
 8010ed4:	bf00      	nop
 8010ed6:	3710      	adds	r7, #16
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b086      	sub	sp, #24
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ee8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ef0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010ef8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	689b      	ldr	r3, [r3, #8]
 8010f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010f04:	2b80      	cmp	r3, #128	@ 0x80
 8010f06:	d109      	bne.n	8010f1c <UART_DMAError+0x40>
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	2b21      	cmp	r3, #33	@ 0x21
 8010f0c:	d106      	bne.n	8010f1c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	2200      	movs	r2, #0
 8010f12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010f16:	6978      	ldr	r0, [r7, #20]
 8010f18:	f7ff fe84 	bl	8010c24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	689b      	ldr	r3, [r3, #8]
 8010f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f26:	2b40      	cmp	r3, #64	@ 0x40
 8010f28:	d109      	bne.n	8010f3e <UART_DMAError+0x62>
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2b22      	cmp	r3, #34	@ 0x22
 8010f2e:	d106      	bne.n	8010f3e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	2200      	movs	r2, #0
 8010f34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010f38:	6978      	ldr	r0, [r7, #20]
 8010f3a:	f7ff feb4 	bl	8010ca6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f44:	f043 0210 	orr.w	r2, r3, #16
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010f4e:	6978      	ldr	r0, [r7, #20]
 8010f50:	f7ff f9ca 	bl	80102e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f54:	bf00      	nop
 8010f56:	3718      	adds	r7, #24
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}

08010f5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b084      	sub	sp, #16
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010f72:	68f8      	ldr	r0, [r7, #12]
 8010f74:	f7ff f9b8 	bl	80102e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f78:	bf00      	nop
 8010f7a:	3710      	adds	r7, #16
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b088      	sub	sp, #32
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	e853 3f00 	ldrex	r3, [r3]
 8010f94:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f9c:	61fb      	str	r3, [r7, #28]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	69fb      	ldr	r3, [r7, #28]
 8010fa6:	61bb      	str	r3, [r7, #24]
 8010fa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010faa:	6979      	ldr	r1, [r7, #20]
 8010fac:	69ba      	ldr	r2, [r7, #24]
 8010fae:	e841 2300 	strex	r3, r2, [r1]
 8010fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d1e6      	bne.n	8010f88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2220      	movs	r2, #32
 8010fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f7ff f979 	bl	80102c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fce:	bf00      	nop
 8010fd0:	3720      	adds	r7, #32
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}

08010fd6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010fd6:	b480      	push	{r7}
 8010fd8:	b083      	sub	sp, #12
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010fde:	bf00      	nop
 8010fe0:	370c      	adds	r7, #12
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe8:	4770      	bx	lr

08010fea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010fea:	b480      	push	{r7}
 8010fec:	b083      	sub	sp, #12
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010ff2:	bf00      	nop
 8010ff4:	370c      	adds	r7, #12
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffc:	4770      	bx	lr

08010ffe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010ffe:	b480      	push	{r7}
 8011000:	b083      	sub	sp, #12
 8011002:	af00      	add	r7, sp, #0
 8011004:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011006:	bf00      	nop
 8011008:	370c      	adds	r7, #12
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr

08011012 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011012:	b480      	push	{r7}
 8011014:	b085      	sub	sp, #20
 8011016:	af00      	add	r7, sp, #0
 8011018:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011020:	2b01      	cmp	r3, #1
 8011022:	d101      	bne.n	8011028 <HAL_UARTEx_DisableFifoMode+0x16>
 8011024:	2302      	movs	r3, #2
 8011026:	e027      	b.n	8011078 <HAL_UARTEx_DisableFifoMode+0x66>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2201      	movs	r2, #1
 801102c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2224      	movs	r2, #36	@ 0x24
 8011034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	681a      	ldr	r2, [r3, #0]
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	f022 0201 	bic.w	r2, r2, #1
 801104e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011056:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2200      	movs	r2, #0
 801105c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	68fa      	ldr	r2, [r7, #12]
 8011064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2220      	movs	r2, #32
 801106a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2200      	movs	r2, #0
 8011072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011076:	2300      	movs	r3, #0
}
 8011078:	4618      	mov	r0, r3
 801107a:	3714      	adds	r7, #20
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr

08011084 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b084      	sub	sp, #16
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011094:	2b01      	cmp	r3, #1
 8011096:	d101      	bne.n	801109c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011098:	2302      	movs	r3, #2
 801109a:	e02d      	b.n	80110f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2201      	movs	r2, #1
 80110a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2224      	movs	r2, #36	@ 0x24
 80110a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	681a      	ldr	r2, [r3, #0]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	f022 0201 	bic.w	r2, r2, #1
 80110c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	689b      	ldr	r3, [r3, #8]
 80110ca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	683a      	ldr	r2, [r7, #0]
 80110d4:	430a      	orrs	r2, r1
 80110d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 f84f 	bl	801117c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	68fa      	ldr	r2, [r7, #12]
 80110e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2220      	movs	r2, #32
 80110ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2200      	movs	r2, #0
 80110f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80110f6:	2300      	movs	r3, #0
}
 80110f8:	4618      	mov	r0, r3
 80110fa:	3710      	adds	r7, #16
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011110:	2b01      	cmp	r3, #1
 8011112:	d101      	bne.n	8011118 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011114:	2302      	movs	r3, #2
 8011116:	e02d      	b.n	8011174 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2201      	movs	r2, #1
 801111c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2224      	movs	r2, #36	@ 0x24
 8011124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	681a      	ldr	r2, [r3, #0]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	f022 0201 	bic.w	r2, r2, #1
 801113e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	689b      	ldr	r3, [r3, #8]
 8011146:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	683a      	ldr	r2, [r7, #0]
 8011150:	430a      	orrs	r2, r1
 8011152:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f000 f811 	bl	801117c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	68fa      	ldr	r2, [r7, #12]
 8011160:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2220      	movs	r2, #32
 8011166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2200      	movs	r2, #0
 801116e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011172:	2300      	movs	r3, #0
}
 8011174:	4618      	mov	r0, r3
 8011176:	3710      	adds	r7, #16
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801117c:	b480      	push	{r7}
 801117e:	b085      	sub	sp, #20
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011188:	2b00      	cmp	r3, #0
 801118a:	d108      	bne.n	801119e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2201      	movs	r2, #1
 8011190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2201      	movs	r2, #1
 8011198:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801119c:	e031      	b.n	8011202 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801119e:	2308      	movs	r3, #8
 80111a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80111a2:	2308      	movs	r3, #8
 80111a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	689b      	ldr	r3, [r3, #8]
 80111ac:	0e5b      	lsrs	r3, r3, #25
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	f003 0307 	and.w	r3, r3, #7
 80111b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	689b      	ldr	r3, [r3, #8]
 80111bc:	0f5b      	lsrs	r3, r3, #29
 80111be:	b2db      	uxtb	r3, r3
 80111c0:	f003 0307 	and.w	r3, r3, #7
 80111c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111c6:	7bbb      	ldrb	r3, [r7, #14]
 80111c8:	7b3a      	ldrb	r2, [r7, #12]
 80111ca:	4911      	ldr	r1, [pc, #68]	@ (8011210 <UARTEx_SetNbDataToProcess+0x94>)
 80111cc:	5c8a      	ldrb	r2, [r1, r2]
 80111ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80111d2:	7b3a      	ldrb	r2, [r7, #12]
 80111d4:	490f      	ldr	r1, [pc, #60]	@ (8011214 <UARTEx_SetNbDataToProcess+0x98>)
 80111d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80111dc:	b29a      	uxth	r2, r3
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111e4:	7bfb      	ldrb	r3, [r7, #15]
 80111e6:	7b7a      	ldrb	r2, [r7, #13]
 80111e8:	4909      	ldr	r1, [pc, #36]	@ (8011210 <UARTEx_SetNbDataToProcess+0x94>)
 80111ea:	5c8a      	ldrb	r2, [r1, r2]
 80111ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80111f0:	7b7a      	ldrb	r2, [r7, #13]
 80111f2:	4908      	ldr	r1, [pc, #32]	@ (8011214 <UARTEx_SetNbDataToProcess+0x98>)
 80111f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80111fa:	b29a      	uxth	r2, r3
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011202:	bf00      	nop
 8011204:	3714      	adds	r7, #20
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop
 8011210:	080230f0 	.word	0x080230f0
 8011214:	080230f8 	.word	0x080230f8

08011218 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8011218:	b480      	push	{r7}
 801121a:	b085      	sub	sp, #20
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011228:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 801122c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	b29a      	uxth	r2, r3
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011238:	2300      	movs	r3, #0
}
 801123a:	4618      	mov	r0, r3
 801123c:	3714      	adds	r7, #20
 801123e:	46bd      	mov	sp, r7
 8011240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011244:	4770      	bx	lr

08011246 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8011246:	b480      	push	{r7}
 8011248:	b085      	sub	sp, #20
 801124a:	af00      	add	r7, sp, #0
 801124c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801124e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8011252:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801125a:	b29a      	uxth	r2, r3
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	b29b      	uxth	r3, r3
 8011260:	43db      	mvns	r3, r3
 8011262:	b29b      	uxth	r3, r3
 8011264:	4013      	ands	r3, r2
 8011266:	b29a      	uxth	r2, r3
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801126e:	2300      	movs	r3, #0
}
 8011270:	4618      	mov	r0, r3
 8011272:	3714      	adds	r7, #20
 8011274:	46bd      	mov	sp, r7
 8011276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127a:	4770      	bx	lr

0801127c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801127c:	b480      	push	{r7}
 801127e:	b085      	sub	sp, #20
 8011280:	af00      	add	r7, sp, #0
 8011282:	60f8      	str	r0, [r7, #12]
 8011284:	1d3b      	adds	r3, r7, #4
 8011286:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	2201      	movs	r2, #1
 801128e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2200      	movs	r2, #0
 8011296:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	2200      	movs	r2, #0
 801129e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2200      	movs	r2, #0
 80112a6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80112aa:	2300      	movs	r3, #0
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	3714      	adds	r7, #20
 80112b0:	46bd      	mov	sp, r7
 80112b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b6:	4770      	bx	lr

080112b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80112b8:	b480      	push	{r7}
 80112ba:	b0a7      	sub	sp, #156	@ 0x9c
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80112c2:	2300      	movs	r3, #0
 80112c4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80112c8:	687a      	ldr	r2, [r7, #4]
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	009b      	lsls	r3, r3, #2
 80112d0:	4413      	add	r3, r2
 80112d2:	881b      	ldrh	r3, [r3, #0]
 80112d4:	b29b      	uxth	r3, r3
 80112d6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80112da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112de:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	78db      	ldrb	r3, [r3, #3]
 80112e6:	2b03      	cmp	r3, #3
 80112e8:	d81f      	bhi.n	801132a <USB_ActivateEndpoint+0x72>
 80112ea:	a201      	add	r2, pc, #4	@ (adr r2, 80112f0 <USB_ActivateEndpoint+0x38>)
 80112ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112f0:	08011301 	.word	0x08011301
 80112f4:	0801131d 	.word	0x0801131d
 80112f8:	08011333 	.word	0x08011333
 80112fc:	0801130f 	.word	0x0801130f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011300:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011304:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011308:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801130c:	e012      	b.n	8011334 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801130e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011312:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8011316:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801131a:	e00b      	b.n	8011334 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801131c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011320:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8011324:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8011328:	e004      	b.n	8011334 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 801132a:	2301      	movs	r3, #1
 801132c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8011330:	e000      	b.n	8011334 <USB_ActivateEndpoint+0x7c>
      break;
 8011332:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8011334:	687a      	ldr	r2, [r7, #4]
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	441a      	add	r2, r3
 801133e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801134a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801134e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011352:	b29b      	uxth	r3, r3
 8011354:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8011356:	687a      	ldr	r2, [r7, #4]
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	009b      	lsls	r3, r3, #2
 801135e:	4413      	add	r3, r2
 8011360:	881b      	ldrh	r3, [r3, #0]
 8011362:	b29b      	uxth	r3, r3
 8011364:	b21b      	sxth	r3, r3
 8011366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801136a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801136e:	b21a      	sxth	r2, r3
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	b21b      	sxth	r3, r3
 8011376:	4313      	orrs	r3, r2
 8011378:	b21b      	sxth	r3, r3
 801137a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 801137e:	687a      	ldr	r2, [r7, #4]
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	441a      	add	r2, r3
 8011388:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 801138c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011390:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011394:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801139c:	b29b      	uxth	r3, r3
 801139e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	7b1b      	ldrb	r3, [r3, #12]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	f040 8180 	bne.w	80116aa <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	785b      	ldrb	r3, [r3, #1]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	f000 8084 	beq.w	80114bc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	61bb      	str	r3, [r7, #24]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80113be:	b29b      	uxth	r3, r3
 80113c0:	461a      	mov	r2, r3
 80113c2:	69bb      	ldr	r3, [r7, #24]
 80113c4:	4413      	add	r3, r2
 80113c6:	61bb      	str	r3, [r7, #24]
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	781b      	ldrb	r3, [r3, #0]
 80113cc:	00da      	lsls	r2, r3, #3
 80113ce:	69bb      	ldr	r3, [r7, #24]
 80113d0:	4413      	add	r3, r2
 80113d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80113d6:	617b      	str	r3, [r7, #20]
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	88db      	ldrh	r3, [r3, #6]
 80113dc:	085b      	lsrs	r3, r3, #1
 80113de:	b29b      	uxth	r3, r3
 80113e0:	005b      	lsls	r3, r3, #1
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80113e8:	687a      	ldr	r2, [r7, #4]
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	4413      	add	r3, r2
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	827b      	strh	r3, [r7, #18]
 80113f6:	8a7b      	ldrh	r3, [r7, #18]
 80113f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d01b      	beq.n	8011438 <USB_ActivateEndpoint+0x180>
 8011400:	687a      	ldr	r2, [r7, #4]
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	009b      	lsls	r3, r3, #2
 8011408:	4413      	add	r3, r2
 801140a:	881b      	ldrh	r3, [r3, #0]
 801140c:	b29b      	uxth	r3, r3
 801140e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011416:	823b      	strh	r3, [r7, #16]
 8011418:	687a      	ldr	r2, [r7, #4]
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	009b      	lsls	r3, r3, #2
 8011420:	441a      	add	r2, r3
 8011422:	8a3b      	ldrh	r3, [r7, #16]
 8011424:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011428:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801142c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011430:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011434:	b29b      	uxth	r3, r3
 8011436:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	78db      	ldrb	r3, [r3, #3]
 801143c:	2b01      	cmp	r3, #1
 801143e:	d020      	beq.n	8011482 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011440:	687a      	ldr	r2, [r7, #4]
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	009b      	lsls	r3, r3, #2
 8011448:	4413      	add	r3, r2
 801144a:	881b      	ldrh	r3, [r3, #0]
 801144c:	b29b      	uxth	r3, r3
 801144e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011456:	81bb      	strh	r3, [r7, #12]
 8011458:	89bb      	ldrh	r3, [r7, #12]
 801145a:	f083 0320 	eor.w	r3, r3, #32
 801145e:	81bb      	strh	r3, [r7, #12]
 8011460:	687a      	ldr	r2, [r7, #4]
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	009b      	lsls	r3, r3, #2
 8011468:	441a      	add	r2, r3
 801146a:	89bb      	ldrh	r3, [r7, #12]
 801146c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011470:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011474:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801147c:	b29b      	uxth	r3, r3
 801147e:	8013      	strh	r3, [r2, #0]
 8011480:	e3f9      	b.n	8011c76 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	4413      	add	r3, r2
 801148c:	881b      	ldrh	r3, [r3, #0]
 801148e:	b29b      	uxth	r3, r3
 8011490:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011498:	81fb      	strh	r3, [r7, #14]
 801149a:	687a      	ldr	r2, [r7, #4]
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	009b      	lsls	r3, r3, #2
 80114a2:	441a      	add	r2, r3
 80114a4:	89fb      	ldrh	r3, [r7, #14]
 80114a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80114aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80114ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	8013      	strh	r3, [r2, #0]
 80114ba:	e3dc      	b.n	8011c76 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	633b      	str	r3, [r7, #48]	@ 0x30
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	461a      	mov	r2, r3
 80114ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114cc:	4413      	add	r3, r2
 80114ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	781b      	ldrb	r3, [r3, #0]
 80114d4:	00da      	lsls	r2, r3, #3
 80114d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114d8:	4413      	add	r3, r2
 80114da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80114de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	88db      	ldrh	r3, [r3, #6]
 80114e4:	085b      	lsrs	r3, r3, #1
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	005b      	lsls	r3, r3, #1
 80114ea:	b29a      	uxth	r2, r3
 80114ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ee:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	461a      	mov	r2, r3
 80114fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011500:	4413      	add	r3, r2
 8011502:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	00da      	lsls	r2, r3, #3
 801150a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801150c:	4413      	add	r3, r2
 801150e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011512:	627b      	str	r3, [r7, #36]	@ 0x24
 8011514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011516:	881b      	ldrh	r3, [r3, #0]
 8011518:	b29b      	uxth	r3, r3
 801151a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801151e:	b29a      	uxth	r2, r3
 8011520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011522:	801a      	strh	r2, [r3, #0]
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	691b      	ldr	r3, [r3, #16]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d10a      	bne.n	8011542 <USB_ActivateEndpoint+0x28a>
 801152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152e:	881b      	ldrh	r3, [r3, #0]
 8011530:	b29b      	uxth	r3, r3
 8011532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801153a:	b29a      	uxth	r2, r3
 801153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801153e:	801a      	strh	r2, [r3, #0]
 8011540:	e041      	b.n	80115c6 <USB_ActivateEndpoint+0x30e>
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	691b      	ldr	r3, [r3, #16]
 8011546:	2b3e      	cmp	r3, #62	@ 0x3e
 8011548:	d81c      	bhi.n	8011584 <USB_ActivateEndpoint+0x2cc>
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	691b      	ldr	r3, [r3, #16]
 801154e:	085b      	lsrs	r3, r3, #1
 8011550:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	691b      	ldr	r3, [r3, #16]
 8011558:	f003 0301 	and.w	r3, r3, #1
 801155c:	2b00      	cmp	r3, #0
 801155e:	d004      	beq.n	801156a <USB_ActivateEndpoint+0x2b2>
 8011560:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011564:	3301      	adds	r3, #1
 8011566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801156c:	881b      	ldrh	r3, [r3, #0]
 801156e:	b29a      	uxth	r2, r3
 8011570:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011574:	b29b      	uxth	r3, r3
 8011576:	029b      	lsls	r3, r3, #10
 8011578:	b29b      	uxth	r3, r3
 801157a:	4313      	orrs	r3, r2
 801157c:	b29a      	uxth	r2, r3
 801157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011580:	801a      	strh	r2, [r3, #0]
 8011582:	e020      	b.n	80115c6 <USB_ActivateEndpoint+0x30e>
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	691b      	ldr	r3, [r3, #16]
 8011588:	095b      	lsrs	r3, r3, #5
 801158a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	691b      	ldr	r3, [r3, #16]
 8011592:	f003 031f 	and.w	r3, r3, #31
 8011596:	2b00      	cmp	r3, #0
 8011598:	d104      	bne.n	80115a4 <USB_ActivateEndpoint+0x2ec>
 801159a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801159e:	3b01      	subs	r3, #1
 80115a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80115a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a6:	881b      	ldrh	r3, [r3, #0]
 80115a8:	b29a      	uxth	r2, r3
 80115aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80115ae:	b29b      	uxth	r3, r3
 80115b0:	029b      	lsls	r3, r3, #10
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	4313      	orrs	r3, r2
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115c0:	b29a      	uxth	r2, r3
 80115c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80115c6:	687a      	ldr	r2, [r7, #4]
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	781b      	ldrb	r3, [r3, #0]
 80115cc:	009b      	lsls	r3, r3, #2
 80115ce:	4413      	add	r3, r2
 80115d0:	881b      	ldrh	r3, [r3, #0]
 80115d2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80115d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80115d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d01b      	beq.n	8011616 <USB_ActivateEndpoint+0x35e>
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	781b      	ldrb	r3, [r3, #0]
 80115e4:	009b      	lsls	r3, r3, #2
 80115e6:	4413      	add	r3, r2
 80115e8:	881b      	ldrh	r3, [r3, #0]
 80115ea:	b29b      	uxth	r3, r3
 80115ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80115f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115f4:	843b      	strh	r3, [r7, #32]
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	009b      	lsls	r3, r3, #2
 80115fe:	441a      	add	r2, r3
 8011600:	8c3b      	ldrh	r3, [r7, #32]
 8011602:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011606:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801160a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801160e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011612:	b29b      	uxth	r3, r3
 8011614:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d124      	bne.n	8011668 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801161e:	687a      	ldr	r2, [r7, #4]
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	781b      	ldrb	r3, [r3, #0]
 8011624:	009b      	lsls	r3, r3, #2
 8011626:	4413      	add	r3, r2
 8011628:	881b      	ldrh	r3, [r3, #0]
 801162a:	b29b      	uxth	r3, r3
 801162c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011634:	83bb      	strh	r3, [r7, #28]
 8011636:	8bbb      	ldrh	r3, [r7, #28]
 8011638:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801163c:	83bb      	strh	r3, [r7, #28]
 801163e:	8bbb      	ldrh	r3, [r7, #28]
 8011640:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011644:	83bb      	strh	r3, [r7, #28]
 8011646:	687a      	ldr	r2, [r7, #4]
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	781b      	ldrb	r3, [r3, #0]
 801164c:	009b      	lsls	r3, r3, #2
 801164e:	441a      	add	r2, r3
 8011650:	8bbb      	ldrh	r3, [r7, #28]
 8011652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801165a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801165e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011662:	b29b      	uxth	r3, r3
 8011664:	8013      	strh	r3, [r2, #0]
 8011666:	e306      	b.n	8011c76 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8011668:	687a      	ldr	r2, [r7, #4]
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	009b      	lsls	r3, r3, #2
 8011670:	4413      	add	r3, r2
 8011672:	881b      	ldrh	r3, [r3, #0]
 8011674:	b29b      	uxth	r3, r3
 8011676:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801167a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801167e:	83fb      	strh	r3, [r7, #30]
 8011680:	8bfb      	ldrh	r3, [r7, #30]
 8011682:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011686:	83fb      	strh	r3, [r7, #30]
 8011688:	687a      	ldr	r2, [r7, #4]
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	009b      	lsls	r3, r3, #2
 8011690:	441a      	add	r2, r3
 8011692:	8bfb      	ldrh	r3, [r7, #30]
 8011694:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011698:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801169c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80116a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	8013      	strh	r3, [r2, #0]
 80116a8:	e2e5      	b.n	8011c76 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	78db      	ldrb	r3, [r3, #3]
 80116ae:	2b02      	cmp	r3, #2
 80116b0:	d11e      	bne.n	80116f0 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80116b2:	687a      	ldr	r2, [r7, #4]
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	781b      	ldrb	r3, [r3, #0]
 80116b8:	009b      	lsls	r3, r3, #2
 80116ba:	4413      	add	r3, r2
 80116bc:	881b      	ldrh	r3, [r3, #0]
 80116be:	b29b      	uxth	r3, r3
 80116c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80116c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80116c8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80116cc:	687a      	ldr	r2, [r7, #4]
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	009b      	lsls	r3, r3, #2
 80116d4:	441a      	add	r2, r3
 80116d6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80116da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116e2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80116e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116ea:	b29b      	uxth	r3, r3
 80116ec:	8013      	strh	r3, [r2, #0]
 80116ee:	e01d      	b.n	801172c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	781b      	ldrb	r3, [r3, #0]
 80116f6:	009b      	lsls	r3, r3, #2
 80116f8:	4413      	add	r3, r2
 80116fa:	881b      	ldrh	r3, [r3, #0]
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011706:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 801170a:	687a      	ldr	r2, [r7, #4]
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	781b      	ldrb	r3, [r3, #0]
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	441a      	add	r2, r3
 8011714:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8011718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801171c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011728:	b29b      	uxth	r3, r3
 801172a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011736:	b29b      	uxth	r3, r3
 8011738:	461a      	mov	r2, r3
 801173a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801173c:	4413      	add	r3, r2
 801173e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	00da      	lsls	r2, r3, #3
 8011746:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011748:	4413      	add	r3, r2
 801174a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801174e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	891b      	ldrh	r3, [r3, #8]
 8011754:	085b      	lsrs	r3, r3, #1
 8011756:	b29b      	uxth	r3, r3
 8011758:	005b      	lsls	r3, r3, #1
 801175a:	b29a      	uxth	r2, r3
 801175c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801175e:	801a      	strh	r2, [r3, #0]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	677b      	str	r3, [r7, #116]	@ 0x74
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801176a:	b29b      	uxth	r3, r3
 801176c:	461a      	mov	r2, r3
 801176e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011770:	4413      	add	r3, r2
 8011772:	677b      	str	r3, [r7, #116]	@ 0x74
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	781b      	ldrb	r3, [r3, #0]
 8011778:	00da      	lsls	r2, r3, #3
 801177a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801177c:	4413      	add	r3, r2
 801177e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8011782:	673b      	str	r3, [r7, #112]	@ 0x70
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	895b      	ldrh	r3, [r3, #10]
 8011788:	085b      	lsrs	r3, r3, #1
 801178a:	b29b      	uxth	r3, r3
 801178c:	005b      	lsls	r3, r3, #1
 801178e:	b29a      	uxth	r2, r3
 8011790:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011792:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	785b      	ldrb	r3, [r3, #1]
 8011798:	2b00      	cmp	r3, #0
 801179a:	f040 81af 	bne.w	8011afc <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	009b      	lsls	r3, r3, #2
 80117a6:	4413      	add	r3, r2
 80117a8:	881b      	ldrh	r3, [r3, #0]
 80117aa:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80117ae:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80117b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d01d      	beq.n	80117f6 <USB_ActivateEndpoint+0x53e>
 80117ba:	687a      	ldr	r2, [r7, #4]
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	009b      	lsls	r3, r3, #2
 80117c2:	4413      	add	r3, r2
 80117c4:	881b      	ldrh	r3, [r3, #0]
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80117cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80117d0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80117d4:	687a      	ldr	r2, [r7, #4]
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	441a      	add	r2, r3
 80117de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80117e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80117ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117f2:	b29b      	uxth	r3, r3
 80117f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80117f6:	687a      	ldr	r2, [r7, #4]
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	4413      	add	r3, r2
 8011800:	881b      	ldrh	r3, [r3, #0]
 8011802:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8011806:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801180a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801180e:	2b00      	cmp	r3, #0
 8011810:	d01d      	beq.n	801184e <USB_ActivateEndpoint+0x596>
 8011812:	687a      	ldr	r2, [r7, #4]
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	009b      	lsls	r3, r3, #2
 801181a:	4413      	add	r3, r2
 801181c:	881b      	ldrh	r3, [r3, #0]
 801181e:	b29b      	uxth	r3, r3
 8011820:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011828:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	009b      	lsls	r3, r3, #2
 8011834:	441a      	add	r2, r3
 8011836:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801183a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801183e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011846:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801184a:	b29b      	uxth	r3, r3
 801184c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	785b      	ldrb	r3, [r3, #1]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d16b      	bne.n	801192e <USB_ActivateEndpoint+0x676>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011860:	b29b      	uxth	r3, r3
 8011862:	461a      	mov	r2, r3
 8011864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011866:	4413      	add	r3, r2
 8011868:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	00da      	lsls	r2, r3, #3
 8011870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011872:	4413      	add	r3, r2
 8011874:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011878:	64bb      	str	r3, [r7, #72]	@ 0x48
 801187a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801187c:	881b      	ldrh	r3, [r3, #0]
 801187e:	b29b      	uxth	r3, r3
 8011880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011884:	b29a      	uxth	r2, r3
 8011886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011888:	801a      	strh	r2, [r3, #0]
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	691b      	ldr	r3, [r3, #16]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d10a      	bne.n	80118a8 <USB_ActivateEndpoint+0x5f0>
 8011892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011894:	881b      	ldrh	r3, [r3, #0]
 8011896:	b29b      	uxth	r3, r3
 8011898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801189c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80118a0:	b29a      	uxth	r2, r3
 80118a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118a4:	801a      	strh	r2, [r3, #0]
 80118a6:	e05d      	b.n	8011964 <USB_ActivateEndpoint+0x6ac>
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	691b      	ldr	r3, [r3, #16]
 80118ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80118ae:	d81c      	bhi.n	80118ea <USB_ActivateEndpoint+0x632>
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	691b      	ldr	r3, [r3, #16]
 80118b4:	085b      	lsrs	r3, r3, #1
 80118b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	691b      	ldr	r3, [r3, #16]
 80118be:	f003 0301 	and.w	r3, r3, #1
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d004      	beq.n	80118d0 <USB_ActivateEndpoint+0x618>
 80118c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80118ca:	3301      	adds	r3, #1
 80118cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80118d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118d2:	881b      	ldrh	r3, [r3, #0]
 80118d4:	b29a      	uxth	r2, r3
 80118d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80118da:	b29b      	uxth	r3, r3
 80118dc:	029b      	lsls	r3, r3, #10
 80118de:	b29b      	uxth	r3, r3
 80118e0:	4313      	orrs	r3, r2
 80118e2:	b29a      	uxth	r2, r3
 80118e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118e6:	801a      	strh	r2, [r3, #0]
 80118e8:	e03c      	b.n	8011964 <USB_ActivateEndpoint+0x6ac>
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	691b      	ldr	r3, [r3, #16]
 80118ee:	095b      	lsrs	r3, r3, #5
 80118f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	691b      	ldr	r3, [r3, #16]
 80118f8:	f003 031f 	and.w	r3, r3, #31
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d104      	bne.n	801190a <USB_ActivateEndpoint+0x652>
 8011900:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011904:	3b01      	subs	r3, #1
 8011906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801190a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801190c:	881b      	ldrh	r3, [r3, #0]
 801190e:	b29a      	uxth	r2, r3
 8011910:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011914:	b29b      	uxth	r3, r3
 8011916:	029b      	lsls	r3, r3, #10
 8011918:	b29b      	uxth	r3, r3
 801191a:	4313      	orrs	r3, r2
 801191c:	b29b      	uxth	r3, r3
 801191e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011926:	b29a      	uxth	r2, r3
 8011928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801192a:	801a      	strh	r2, [r3, #0]
 801192c:	e01a      	b.n	8011964 <USB_ActivateEndpoint+0x6ac>
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	785b      	ldrb	r3, [r3, #1]
 8011932:	2b01      	cmp	r3, #1
 8011934:	d116      	bne.n	8011964 <USB_ActivateEndpoint+0x6ac>
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	657b      	str	r3, [r7, #84]	@ 0x54
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011940:	b29b      	uxth	r3, r3
 8011942:	461a      	mov	r2, r3
 8011944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011946:	4413      	add	r3, r2
 8011948:	657b      	str	r3, [r7, #84]	@ 0x54
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	00da      	lsls	r2, r3, #3
 8011950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011952:	4413      	add	r3, r2
 8011954:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011958:	653b      	str	r3, [r7, #80]	@ 0x50
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	691b      	ldr	r3, [r3, #16]
 801195e:	b29a      	uxth	r2, r3
 8011960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011962:	801a      	strh	r2, [r3, #0]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	647b      	str	r3, [r7, #68]	@ 0x44
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	785b      	ldrb	r3, [r3, #1]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d16b      	bne.n	8011a48 <USB_ActivateEndpoint+0x790>
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801197a:	b29b      	uxth	r3, r3
 801197c:	461a      	mov	r2, r3
 801197e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011980:	4413      	add	r3, r2
 8011982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	00da      	lsls	r2, r3, #3
 801198a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801198c:	4413      	add	r3, r2
 801198e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011992:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011996:	881b      	ldrh	r3, [r3, #0]
 8011998:	b29b      	uxth	r3, r3
 801199a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801199e:	b29a      	uxth	r2, r3
 80119a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119a2:	801a      	strh	r2, [r3, #0]
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	691b      	ldr	r3, [r3, #16]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d10a      	bne.n	80119c2 <USB_ActivateEndpoint+0x70a>
 80119ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ae:	881b      	ldrh	r3, [r3, #0]
 80119b0:	b29b      	uxth	r3, r3
 80119b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80119b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80119ba:	b29a      	uxth	r2, r3
 80119bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119be:	801a      	strh	r2, [r3, #0]
 80119c0:	e05b      	b.n	8011a7a <USB_ActivateEndpoint+0x7c2>
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	691b      	ldr	r3, [r3, #16]
 80119c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80119c8:	d81c      	bhi.n	8011a04 <USB_ActivateEndpoint+0x74c>
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	691b      	ldr	r3, [r3, #16]
 80119ce:	085b      	lsrs	r3, r3, #1
 80119d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	691b      	ldr	r3, [r3, #16]
 80119d8:	f003 0301 	and.w	r3, r3, #1
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d004      	beq.n	80119ea <USB_ActivateEndpoint+0x732>
 80119e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80119e4:	3301      	adds	r3, #1
 80119e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80119ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ec:	881b      	ldrh	r3, [r3, #0]
 80119ee:	b29a      	uxth	r2, r3
 80119f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80119f4:	b29b      	uxth	r3, r3
 80119f6:	029b      	lsls	r3, r3, #10
 80119f8:	b29b      	uxth	r3, r3
 80119fa:	4313      	orrs	r3, r2
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a00:	801a      	strh	r2, [r3, #0]
 8011a02:	e03a      	b.n	8011a7a <USB_ActivateEndpoint+0x7c2>
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	691b      	ldr	r3, [r3, #16]
 8011a08:	095b      	lsrs	r3, r3, #5
 8011a0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	691b      	ldr	r3, [r3, #16]
 8011a12:	f003 031f 	and.w	r3, r3, #31
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d104      	bne.n	8011a24 <USB_ActivateEndpoint+0x76c>
 8011a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011a1e:	3b01      	subs	r3, #1
 8011a20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a26:	881b      	ldrh	r3, [r3, #0]
 8011a28:	b29a      	uxth	r2, r3
 8011a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011a2e:	b29b      	uxth	r3, r3
 8011a30:	029b      	lsls	r3, r3, #10
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	4313      	orrs	r3, r2
 8011a36:	b29b      	uxth	r3, r3
 8011a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a40:	b29a      	uxth	r2, r3
 8011a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a44:	801a      	strh	r2, [r3, #0]
 8011a46:	e018      	b.n	8011a7a <USB_ActivateEndpoint+0x7c2>
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	785b      	ldrb	r3, [r3, #1]
 8011a4c:	2b01      	cmp	r3, #1
 8011a4e:	d114      	bne.n	8011a7a <USB_ActivateEndpoint+0x7c2>
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	461a      	mov	r2, r3
 8011a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a5c:	4413      	add	r3, r2
 8011a5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	00da      	lsls	r2, r3, #3
 8011a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a68:	4413      	add	r3, r2
 8011a6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011a6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	691b      	ldr	r3, [r3, #16]
 8011a74:	b29a      	uxth	r2, r3
 8011a76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a78:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011a7a:	687a      	ldr	r2, [r7, #4]
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	781b      	ldrb	r3, [r3, #0]
 8011a80:	009b      	lsls	r3, r3, #2
 8011a82:	4413      	add	r3, r2
 8011a84:	881b      	ldrh	r3, [r3, #0]
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a90:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011a92:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011a94:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011a98:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011a9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011a9c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011aa0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011aa2:	687a      	ldr	r2, [r7, #4]
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	781b      	ldrb	r3, [r3, #0]
 8011aa8:	009b      	lsls	r3, r3, #2
 8011aaa:	441a      	add	r2, r3
 8011aac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011ac2:	687a      	ldr	r2, [r7, #4]
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	009b      	lsls	r3, r3, #2
 8011aca:	4413      	add	r3, r2
 8011acc:	881b      	ldrh	r3, [r3, #0]
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ad4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011ad8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8011ada:	687a      	ldr	r2, [r7, #4]
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	781b      	ldrb	r3, [r3, #0]
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	441a      	add	r2, r3
 8011ae4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011ae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011aea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	8013      	strh	r3, [r2, #0]
 8011afa:	e0bc      	b.n	8011c76 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	009b      	lsls	r3, r3, #2
 8011b04:	4413      	add	r3, r2
 8011b06:	881b      	ldrh	r3, [r3, #0]
 8011b08:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8011b0c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d01d      	beq.n	8011b54 <USB_ActivateEndpoint+0x89c>
 8011b18:	687a      	ldr	r2, [r7, #4]
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	781b      	ldrb	r3, [r3, #0]
 8011b1e:	009b      	lsls	r3, r3, #2
 8011b20:	4413      	add	r3, r2
 8011b22:	881b      	ldrh	r3, [r3, #0]
 8011b24:	b29b      	uxth	r3, r3
 8011b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b2e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8011b32:	687a      	ldr	r2, [r7, #4]
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	781b      	ldrb	r3, [r3, #0]
 8011b38:	009b      	lsls	r3, r3, #2
 8011b3a:	441a      	add	r2, r3
 8011b3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8011b40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	009b      	lsls	r3, r3, #2
 8011b5c:	4413      	add	r3, r2
 8011b5e:	881b      	ldrh	r3, [r3, #0]
 8011b60:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8011b64:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8011b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d01d      	beq.n	8011bac <USB_ActivateEndpoint+0x8f4>
 8011b70:	687a      	ldr	r2, [r7, #4]
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	009b      	lsls	r3, r3, #2
 8011b78:	4413      	add	r3, r2
 8011b7a:	881b      	ldrh	r3, [r3, #0]
 8011b7c:	b29b      	uxth	r3, r3
 8011b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b86:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8011b8a:	687a      	ldr	r2, [r7, #4]
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	009b      	lsls	r3, r3, #2
 8011b92:	441a      	add	r2, r3
 8011b94:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8011b98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011ba4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	78db      	ldrb	r3, [r3, #3]
 8011bb0:	2b01      	cmp	r3, #1
 8011bb2:	d024      	beq.n	8011bfe <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011bb4:	687a      	ldr	r2, [r7, #4]
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	781b      	ldrb	r3, [r3, #0]
 8011bba:	009b      	lsls	r3, r3, #2
 8011bbc:	4413      	add	r3, r2
 8011bbe:	881b      	ldrh	r3, [r3, #0]
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011bc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011bca:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011bce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011bd2:	f083 0320 	eor.w	r3, r3, #32
 8011bd6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011bda:	687a      	ldr	r2, [r7, #4]
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	781b      	ldrb	r3, [r3, #0]
 8011be0:	009b      	lsls	r3, r3, #2
 8011be2:	441a      	add	r2, r3
 8011be4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	8013      	strh	r3, [r2, #0]
 8011bfc:	e01d      	b.n	8011c3a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011bfe:	687a      	ldr	r2, [r7, #4]
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	009b      	lsls	r3, r3, #2
 8011c06:	4413      	add	r3, r2
 8011c08:	881b      	ldrh	r3, [r3, #0]
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c14:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8011c18:	687a      	ldr	r2, [r7, #4]
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	009b      	lsls	r3, r3, #2
 8011c20:	441a      	add	r2, r3
 8011c22:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8011c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c36:	b29b      	uxth	r3, r3
 8011c38:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011c3a:	687a      	ldr	r2, [r7, #4]
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	009b      	lsls	r3, r3, #2
 8011c42:	4413      	add	r3, r2
 8011c44:	881b      	ldrh	r3, [r3, #0]
 8011c46:	b29b      	uxth	r3, r3
 8011c48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c50:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8011c54:	687a      	ldr	r2, [r7, #4]
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	009b      	lsls	r3, r3, #2
 8011c5c:	441a      	add	r2, r3
 8011c5e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8011c62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c72:	b29b      	uxth	r3, r3
 8011c74:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011c76:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	379c      	adds	r7, #156	@ 0x9c
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c84:	4770      	bx	lr
 8011c86:	bf00      	nop

08011c88 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b08d      	sub	sp, #52	@ 0x34
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	7b1b      	ldrb	r3, [r3, #12]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	f040 808e 	bne.w	8011db8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	785b      	ldrb	r3, [r3, #1]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d044      	beq.n	8011d2e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011ca4:	687a      	ldr	r2, [r7, #4]
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	009b      	lsls	r3, r3, #2
 8011cac:	4413      	add	r3, r2
 8011cae:	881b      	ldrh	r3, [r3, #0]
 8011cb0:	81bb      	strh	r3, [r7, #12]
 8011cb2:	89bb      	ldrh	r3, [r7, #12]
 8011cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d01b      	beq.n	8011cf4 <USB_DeactivateEndpoint+0x6c>
 8011cbc:	687a      	ldr	r2, [r7, #4]
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	009b      	lsls	r3, r3, #2
 8011cc4:	4413      	add	r3, r2
 8011cc6:	881b      	ldrh	r3, [r3, #0]
 8011cc8:	b29b      	uxth	r3, r3
 8011cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011cd2:	817b      	strh	r3, [r7, #10]
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	009b      	lsls	r3, r3, #2
 8011cdc:	441a      	add	r2, r3
 8011cde:	897b      	ldrh	r3, [r7, #10]
 8011ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011cec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011cf4:	687a      	ldr	r2, [r7, #4]
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	781b      	ldrb	r3, [r3, #0]
 8011cfa:	009b      	lsls	r3, r3, #2
 8011cfc:	4413      	add	r3, r2
 8011cfe:	881b      	ldrh	r3, [r3, #0]
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011d0a:	813b      	strh	r3, [r7, #8]
 8011d0c:	687a      	ldr	r2, [r7, #4]
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	441a      	add	r2, r3
 8011d16:	893b      	ldrh	r3, [r7, #8]
 8011d18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d28:	b29b      	uxth	r3, r3
 8011d2a:	8013      	strh	r3, [r2, #0]
 8011d2c:	e192      	b.n	8012054 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	4413      	add	r3, r2
 8011d38:	881b      	ldrh	r3, [r3, #0]
 8011d3a:	827b      	strh	r3, [r7, #18]
 8011d3c:	8a7b      	ldrh	r3, [r7, #18]
 8011d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d01b      	beq.n	8011d7e <USB_DeactivateEndpoint+0xf6>
 8011d46:	687a      	ldr	r2, [r7, #4]
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	009b      	lsls	r3, r3, #2
 8011d4e:	4413      	add	r3, r2
 8011d50:	881b      	ldrh	r3, [r3, #0]
 8011d52:	b29b      	uxth	r3, r3
 8011d54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d5c:	823b      	strh	r3, [r7, #16]
 8011d5e:	687a      	ldr	r2, [r7, #4]
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	781b      	ldrb	r3, [r3, #0]
 8011d64:	009b      	lsls	r3, r3, #2
 8011d66:	441a      	add	r2, r3
 8011d68:	8a3b      	ldrh	r3, [r7, #16]
 8011d6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011d7e:	687a      	ldr	r2, [r7, #4]
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	009b      	lsls	r3, r3, #2
 8011d86:	4413      	add	r3, r2
 8011d88:	881b      	ldrh	r3, [r3, #0]
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d94:	81fb      	strh	r3, [r7, #14]
 8011d96:	687a      	ldr	r2, [r7, #4]
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	781b      	ldrb	r3, [r3, #0]
 8011d9c:	009b      	lsls	r3, r3, #2
 8011d9e:	441a      	add	r2, r3
 8011da0:	89fb      	ldrh	r3, [r7, #14]
 8011da2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011da6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011db2:	b29b      	uxth	r3, r3
 8011db4:	8013      	strh	r3, [r2, #0]
 8011db6:	e14d      	b.n	8012054 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	785b      	ldrb	r3, [r3, #1]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	f040 80a5 	bne.w	8011f0c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011dc2:	687a      	ldr	r2, [r7, #4]
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	009b      	lsls	r3, r3, #2
 8011dca:	4413      	add	r3, r2
 8011dcc:	881b      	ldrh	r3, [r3, #0]
 8011dce:	843b      	strh	r3, [r7, #32]
 8011dd0:	8c3b      	ldrh	r3, [r7, #32]
 8011dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d01b      	beq.n	8011e12 <USB_DeactivateEndpoint+0x18a>
 8011dda:	687a      	ldr	r2, [r7, #4]
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	781b      	ldrb	r3, [r3, #0]
 8011de0:	009b      	lsls	r3, r3, #2
 8011de2:	4413      	add	r3, r2
 8011de4:	881b      	ldrh	r3, [r3, #0]
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011dec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011df0:	83fb      	strh	r3, [r7, #30]
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	009b      	lsls	r3, r3, #2
 8011dfa:	441a      	add	r2, r3
 8011dfc:	8bfb      	ldrh	r3, [r7, #30]
 8011dfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e0e:	b29b      	uxth	r3, r3
 8011e10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011e12:	687a      	ldr	r2, [r7, #4]
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	781b      	ldrb	r3, [r3, #0]
 8011e18:	009b      	lsls	r3, r3, #2
 8011e1a:	4413      	add	r3, r2
 8011e1c:	881b      	ldrh	r3, [r3, #0]
 8011e1e:	83bb      	strh	r3, [r7, #28]
 8011e20:	8bbb      	ldrh	r3, [r7, #28]
 8011e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d01b      	beq.n	8011e62 <USB_DeactivateEndpoint+0x1da>
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	009b      	lsls	r3, r3, #2
 8011e32:	4413      	add	r3, r2
 8011e34:	881b      	ldrh	r3, [r3, #0]
 8011e36:	b29b      	uxth	r3, r3
 8011e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e40:	837b      	strh	r3, [r7, #26]
 8011e42:	687a      	ldr	r2, [r7, #4]
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	009b      	lsls	r3, r3, #2
 8011e4a:	441a      	add	r2, r3
 8011e4c:	8b7b      	ldrh	r3, [r7, #26]
 8011e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011e62:	687a      	ldr	r2, [r7, #4]
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	009b      	lsls	r3, r3, #2
 8011e6a:	4413      	add	r3, r2
 8011e6c:	881b      	ldrh	r3, [r3, #0]
 8011e6e:	b29b      	uxth	r3, r3
 8011e70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011e74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e78:	833b      	strh	r3, [r7, #24]
 8011e7a:	687a      	ldr	r2, [r7, #4]
 8011e7c:	683b      	ldr	r3, [r7, #0]
 8011e7e:	781b      	ldrb	r3, [r3, #0]
 8011e80:	009b      	lsls	r3, r3, #2
 8011e82:	441a      	add	r2, r3
 8011e84:	8b3b      	ldrh	r3, [r7, #24]
 8011e86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e92:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011e96:	b29b      	uxth	r3, r3
 8011e98:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011e9a:	687a      	ldr	r2, [r7, #4]
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	009b      	lsls	r3, r3, #2
 8011ea2:	4413      	add	r3, r2
 8011ea4:	881b      	ldrh	r3, [r3, #0]
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011eb0:	82fb      	strh	r3, [r7, #22]
 8011eb2:	687a      	ldr	r2, [r7, #4]
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	009b      	lsls	r3, r3, #2
 8011eba:	441a      	add	r2, r3
 8011ebc:	8afb      	ldrh	r3, [r7, #22]
 8011ebe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ec2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ece:	b29b      	uxth	r3, r3
 8011ed0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011ed2:	687a      	ldr	r2, [r7, #4]
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	009b      	lsls	r3, r3, #2
 8011eda:	4413      	add	r3, r2
 8011edc:	881b      	ldrh	r3, [r3, #0]
 8011ede:	b29b      	uxth	r3, r3
 8011ee0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011ee8:	82bb      	strh	r3, [r7, #20]
 8011eea:	687a      	ldr	r2, [r7, #4]
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	781b      	ldrb	r3, [r3, #0]
 8011ef0:	009b      	lsls	r3, r3, #2
 8011ef2:	441a      	add	r2, r3
 8011ef4:	8abb      	ldrh	r3, [r7, #20]
 8011ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	8013      	strh	r3, [r2, #0]
 8011f0a:	e0a3      	b.n	8012054 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	781b      	ldrb	r3, [r3, #0]
 8011f12:	009b      	lsls	r3, r3, #2
 8011f14:	4413      	add	r3, r2
 8011f16:	881b      	ldrh	r3, [r3, #0]
 8011f18:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011f1a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011f1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d01b      	beq.n	8011f5c <USB_DeactivateEndpoint+0x2d4>
 8011f24:	687a      	ldr	r2, [r7, #4]
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	009b      	lsls	r3, r3, #2
 8011f2c:	4413      	add	r3, r2
 8011f2e:	881b      	ldrh	r3, [r3, #0]
 8011f30:	b29b      	uxth	r3, r3
 8011f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f3a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8011f3c:	687a      	ldr	r2, [r7, #4]
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	009b      	lsls	r3, r3, #2
 8011f44:	441a      	add	r2, r3
 8011f46:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011f48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f58:	b29b      	uxth	r3, r3
 8011f5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011f5c:	687a      	ldr	r2, [r7, #4]
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	781b      	ldrb	r3, [r3, #0]
 8011f62:	009b      	lsls	r3, r3, #2
 8011f64:	4413      	add	r3, r2
 8011f66:	881b      	ldrh	r3, [r3, #0]
 8011f68:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8011f6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d01b      	beq.n	8011fac <USB_DeactivateEndpoint+0x324>
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	009b      	lsls	r3, r3, #2
 8011f7c:	4413      	add	r3, r2
 8011f7e:	881b      	ldrh	r3, [r3, #0]
 8011f80:	b29b      	uxth	r3, r3
 8011f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f8a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	441a      	add	r2, r3
 8011f96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011f98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011fa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011fa4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011fac:	687a      	ldr	r2, [r7, #4]
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	009b      	lsls	r3, r3, #2
 8011fb4:	4413      	add	r3, r2
 8011fb6:	881b      	ldrh	r3, [r3, #0]
 8011fb8:	b29b      	uxth	r3, r3
 8011fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011fc2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011fc4:	687a      	ldr	r2, [r7, #4]
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	781b      	ldrb	r3, [r3, #0]
 8011fca:	009b      	lsls	r3, r3, #2
 8011fcc:	441a      	add	r2, r3
 8011fce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011fd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011fe4:	687a      	ldr	r2, [r7, #4]
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	781b      	ldrb	r3, [r3, #0]
 8011fea:	009b      	lsls	r3, r3, #2
 8011fec:	4413      	add	r3, r2
 8011fee:	881b      	ldrh	r3, [r3, #0]
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011ffa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011ffc:	687a      	ldr	r2, [r7, #4]
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	009b      	lsls	r3, r3, #2
 8012004:	441a      	add	r2, r3
 8012006:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012008:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801200c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012018:	b29b      	uxth	r3, r3
 801201a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	009b      	lsls	r3, r3, #2
 8012024:	4413      	add	r3, r2
 8012026:	881b      	ldrh	r3, [r3, #0]
 8012028:	b29b      	uxth	r3, r3
 801202a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801202e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012032:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012034:	687a      	ldr	r2, [r7, #4]
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	441a      	add	r2, r3
 801203e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801204c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012050:	b29b      	uxth	r3, r3
 8012052:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8012054:	2300      	movs	r3, #0
}
 8012056:	4618      	mov	r0, r3
 8012058:	3734      	adds	r7, #52	@ 0x34
 801205a:	46bd      	mov	sp, r7
 801205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012060:	4770      	bx	lr

08012062 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012062:	b580      	push	{r7, lr}
 8012064:	b0ac      	sub	sp, #176	@ 0xb0
 8012066:	af00      	add	r7, sp, #0
 8012068:	6078      	str	r0, [r7, #4]
 801206a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	785b      	ldrb	r3, [r3, #1]
 8012070:	2b01      	cmp	r3, #1
 8012072:	f040 84ca 	bne.w	8012a0a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	699a      	ldr	r2, [r3, #24]
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	691b      	ldr	r3, [r3, #16]
 801207e:	429a      	cmp	r2, r3
 8012080:	d904      	bls.n	801208c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	691b      	ldr	r3, [r3, #16]
 8012086:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801208a:	e003      	b.n	8012094 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	699b      	ldr	r3, [r3, #24]
 8012090:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	7b1b      	ldrb	r3, [r3, #12]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d122      	bne.n	80120e2 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	6959      	ldr	r1, [r3, #20]
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	88da      	ldrh	r2, [r3, #6]
 80120a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f000 febd 	bl	8012e2a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	613b      	str	r3, [r7, #16]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	461a      	mov	r2, r3
 80120be:	693b      	ldr	r3, [r7, #16]
 80120c0:	4413      	add	r3, r2
 80120c2:	613b      	str	r3, [r7, #16]
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	00da      	lsls	r2, r3, #3
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	4413      	add	r3, r2
 80120ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80120d2:	60fb      	str	r3, [r7, #12]
 80120d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120d8:	b29a      	uxth	r2, r3
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	801a      	strh	r2, [r3, #0]
 80120de:	f000 bc6f 	b.w	80129c0 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	78db      	ldrb	r3, [r3, #3]
 80120e6:	2b02      	cmp	r3, #2
 80120e8:	f040 831e 	bne.w	8012728 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	6a1a      	ldr	r2, [r3, #32]
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	691b      	ldr	r3, [r3, #16]
 80120f4:	429a      	cmp	r2, r3
 80120f6:	f240 82cf 	bls.w	8012698 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80120fa:	687a      	ldr	r2, [r7, #4]
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	781b      	ldrb	r3, [r3, #0]
 8012100:	009b      	lsls	r3, r3, #2
 8012102:	4413      	add	r3, r2
 8012104:	881b      	ldrh	r3, [r3, #0]
 8012106:	b29b      	uxth	r3, r3
 8012108:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801210c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012110:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8012114:	687a      	ldr	r2, [r7, #4]
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	009b      	lsls	r3, r3, #2
 801211c:	441a      	add	r2, r3
 801211e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8012122:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012126:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801212a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 801212e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012132:	b29b      	uxth	r3, r3
 8012134:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	6a1a      	ldr	r2, [r3, #32]
 801213a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801213e:	1ad2      	subs	r2, r2, r3
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012144:	687a      	ldr	r2, [r7, #4]
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	009b      	lsls	r3, r3, #2
 801214c:	4413      	add	r3, r2
 801214e:	881b      	ldrh	r3, [r3, #0]
 8012150:	b29b      	uxth	r3, r3
 8012152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012156:	2b00      	cmp	r3, #0
 8012158:	f000 814f 	beq.w	80123fa <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	785b      	ldrb	r3, [r3, #1]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d16b      	bne.n	8012240 <USB_EPStartXfer+0x1de>
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012172:	b29b      	uxth	r3, r3
 8012174:	461a      	mov	r2, r3
 8012176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012178:	4413      	add	r3, r2
 801217a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	00da      	lsls	r2, r3, #3
 8012182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012184:	4413      	add	r3, r2
 8012186:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801218a:	627b      	str	r3, [r7, #36]	@ 0x24
 801218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801218e:	881b      	ldrh	r3, [r3, #0]
 8012190:	b29b      	uxth	r3, r3
 8012192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012196:	b29a      	uxth	r2, r3
 8012198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801219a:	801a      	strh	r2, [r3, #0]
 801219c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d10a      	bne.n	80121ba <USB_EPStartXfer+0x158>
 80121a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121a6:	881b      	ldrh	r3, [r3, #0]
 80121a8:	b29b      	uxth	r3, r3
 80121aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80121ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80121b2:	b29a      	uxth	r2, r3
 80121b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b6:	801a      	strh	r2, [r3, #0]
 80121b8:	e05b      	b.n	8012272 <USB_EPStartXfer+0x210>
 80121ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121be:	2b3e      	cmp	r3, #62	@ 0x3e
 80121c0:	d81c      	bhi.n	80121fc <USB_EPStartXfer+0x19a>
 80121c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121c6:	085b      	lsrs	r3, r3, #1
 80121c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80121cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121d0:	f003 0301 	and.w	r3, r3, #1
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d004      	beq.n	80121e2 <USB_EPStartXfer+0x180>
 80121d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80121dc:	3301      	adds	r3, #1
 80121de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80121e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121e4:	881b      	ldrh	r3, [r3, #0]
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80121ec:	b29b      	uxth	r3, r3
 80121ee:	029b      	lsls	r3, r3, #10
 80121f0:	b29b      	uxth	r3, r3
 80121f2:	4313      	orrs	r3, r2
 80121f4:	b29a      	uxth	r2, r3
 80121f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121f8:	801a      	strh	r2, [r3, #0]
 80121fa:	e03a      	b.n	8012272 <USB_EPStartXfer+0x210>
 80121fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012200:	095b      	lsrs	r3, r3, #5
 8012202:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801220a:	f003 031f 	and.w	r3, r3, #31
 801220e:	2b00      	cmp	r3, #0
 8012210:	d104      	bne.n	801221c <USB_EPStartXfer+0x1ba>
 8012212:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012216:	3b01      	subs	r3, #1
 8012218:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801221e:	881b      	ldrh	r3, [r3, #0]
 8012220:	b29a      	uxth	r2, r3
 8012222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012226:	b29b      	uxth	r3, r3
 8012228:	029b      	lsls	r3, r3, #10
 801222a:	b29b      	uxth	r3, r3
 801222c:	4313      	orrs	r3, r2
 801222e:	b29b      	uxth	r3, r3
 8012230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012238:	b29a      	uxth	r2, r3
 801223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801223c:	801a      	strh	r2, [r3, #0]
 801223e:	e018      	b.n	8012272 <USB_EPStartXfer+0x210>
 8012240:	683b      	ldr	r3, [r7, #0]
 8012242:	785b      	ldrb	r3, [r3, #1]
 8012244:	2b01      	cmp	r3, #1
 8012246:	d114      	bne.n	8012272 <USB_EPStartXfer+0x210>
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801224e:	b29b      	uxth	r3, r3
 8012250:	461a      	mov	r2, r3
 8012252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012254:	4413      	add	r3, r2
 8012256:	633b      	str	r3, [r7, #48]	@ 0x30
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	781b      	ldrb	r3, [r3, #0]
 801225c:	00da      	lsls	r2, r3, #3
 801225e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012260:	4413      	add	r3, r2
 8012262:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801226c:	b29a      	uxth	r2, r3
 801226e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012270:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	895b      	ldrh	r3, [r3, #10]
 8012276:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	6959      	ldr	r1, [r3, #20]
 801227e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012282:	b29b      	uxth	r3, r3
 8012284:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f000 fdce 	bl	8012e2a <USB_WritePMA>
            ep->xfer_buff += len;
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	695a      	ldr	r2, [r3, #20]
 8012292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012296:	441a      	add	r2, r3
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	6a1a      	ldr	r2, [r3, #32]
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	691b      	ldr	r3, [r3, #16]
 80122a4:	429a      	cmp	r2, r3
 80122a6:	d907      	bls.n	80122b8 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	6a1a      	ldr	r2, [r3, #32]
 80122ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122b0:	1ad2      	subs	r2, r2, r3
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	621a      	str	r2, [r3, #32]
 80122b6:	e006      	b.n	80122c6 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	6a1b      	ldr	r3, [r3, #32]
 80122bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	2200      	movs	r2, #0
 80122c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	785b      	ldrb	r3, [r3, #1]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d16b      	bne.n	80123a6 <USB_EPStartXfer+0x344>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	61bb      	str	r3, [r7, #24]
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80122d8:	b29b      	uxth	r3, r3
 80122da:	461a      	mov	r2, r3
 80122dc:	69bb      	ldr	r3, [r7, #24]
 80122de:	4413      	add	r3, r2
 80122e0:	61bb      	str	r3, [r7, #24]
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	781b      	ldrb	r3, [r3, #0]
 80122e6:	00da      	lsls	r2, r3, #3
 80122e8:	69bb      	ldr	r3, [r7, #24]
 80122ea:	4413      	add	r3, r2
 80122ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80122f0:	617b      	str	r3, [r7, #20]
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	881b      	ldrh	r3, [r3, #0]
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80122fc:	b29a      	uxth	r2, r3
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	801a      	strh	r2, [r3, #0]
 8012302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012306:	2b00      	cmp	r3, #0
 8012308:	d10a      	bne.n	8012320 <USB_EPStartXfer+0x2be>
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	881b      	ldrh	r3, [r3, #0]
 801230e:	b29b      	uxth	r3, r3
 8012310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012318:	b29a      	uxth	r2, r3
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	801a      	strh	r2, [r3, #0]
 801231e:	e05d      	b.n	80123dc <USB_EPStartXfer+0x37a>
 8012320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012324:	2b3e      	cmp	r3, #62	@ 0x3e
 8012326:	d81c      	bhi.n	8012362 <USB_EPStartXfer+0x300>
 8012328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801232c:	085b      	lsrs	r3, r3, #1
 801232e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012336:	f003 0301 	and.w	r3, r3, #1
 801233a:	2b00      	cmp	r3, #0
 801233c:	d004      	beq.n	8012348 <USB_EPStartXfer+0x2e6>
 801233e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012342:	3301      	adds	r3, #1
 8012344:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	881b      	ldrh	r3, [r3, #0]
 801234c:	b29a      	uxth	r2, r3
 801234e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012352:	b29b      	uxth	r3, r3
 8012354:	029b      	lsls	r3, r3, #10
 8012356:	b29b      	uxth	r3, r3
 8012358:	4313      	orrs	r3, r2
 801235a:	b29a      	uxth	r2, r3
 801235c:	697b      	ldr	r3, [r7, #20]
 801235e:	801a      	strh	r2, [r3, #0]
 8012360:	e03c      	b.n	80123dc <USB_EPStartXfer+0x37a>
 8012362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012366:	095b      	lsrs	r3, r3, #5
 8012368:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801236c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012370:	f003 031f 	and.w	r3, r3, #31
 8012374:	2b00      	cmp	r3, #0
 8012376:	d104      	bne.n	8012382 <USB_EPStartXfer+0x320>
 8012378:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801237c:	3b01      	subs	r3, #1
 801237e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	881b      	ldrh	r3, [r3, #0]
 8012386:	b29a      	uxth	r2, r3
 8012388:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801238c:	b29b      	uxth	r3, r3
 801238e:	029b      	lsls	r3, r3, #10
 8012390:	b29b      	uxth	r3, r3
 8012392:	4313      	orrs	r3, r2
 8012394:	b29b      	uxth	r3, r3
 8012396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801239a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801239e:	b29a      	uxth	r2, r3
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	801a      	strh	r2, [r3, #0]
 80123a4:	e01a      	b.n	80123dc <USB_EPStartXfer+0x37a>
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	785b      	ldrb	r3, [r3, #1]
 80123aa:	2b01      	cmp	r3, #1
 80123ac:	d116      	bne.n	80123dc <USB_EPStartXfer+0x37a>
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	623b      	str	r3, [r7, #32]
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80123b8:	b29b      	uxth	r3, r3
 80123ba:	461a      	mov	r2, r3
 80123bc:	6a3b      	ldr	r3, [r7, #32]
 80123be:	4413      	add	r3, r2
 80123c0:	623b      	str	r3, [r7, #32]
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	781b      	ldrb	r3, [r3, #0]
 80123c6:	00da      	lsls	r2, r3, #3
 80123c8:	6a3b      	ldr	r3, [r7, #32]
 80123ca:	4413      	add	r3, r2
 80123cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80123d0:	61fb      	str	r3, [r7, #28]
 80123d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	69fb      	ldr	r3, [r7, #28]
 80123da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	891b      	ldrh	r3, [r3, #8]
 80123e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	6959      	ldr	r1, [r3, #20]
 80123e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f000 fd19 	bl	8012e2a <USB_WritePMA>
 80123f8:	e2e2      	b.n	80129c0 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	785b      	ldrb	r3, [r3, #1]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d16b      	bne.n	80124da <USB_EPStartXfer+0x478>
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801240c:	b29b      	uxth	r3, r3
 801240e:	461a      	mov	r2, r3
 8012410:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012412:	4413      	add	r3, r2
 8012414:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	781b      	ldrb	r3, [r3, #0]
 801241a:	00da      	lsls	r2, r3, #3
 801241c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801241e:	4413      	add	r3, r2
 8012420:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012424:	647b      	str	r3, [r7, #68]	@ 0x44
 8012426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012428:	881b      	ldrh	r3, [r3, #0]
 801242a:	b29b      	uxth	r3, r3
 801242c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012430:	b29a      	uxth	r2, r3
 8012432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012434:	801a      	strh	r2, [r3, #0]
 8012436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801243a:	2b00      	cmp	r3, #0
 801243c:	d10a      	bne.n	8012454 <USB_EPStartXfer+0x3f2>
 801243e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012440:	881b      	ldrh	r3, [r3, #0]
 8012442:	b29b      	uxth	r3, r3
 8012444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801244c:	b29a      	uxth	r2, r3
 801244e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012450:	801a      	strh	r2, [r3, #0]
 8012452:	e05d      	b.n	8012510 <USB_EPStartXfer+0x4ae>
 8012454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012458:	2b3e      	cmp	r3, #62	@ 0x3e
 801245a:	d81c      	bhi.n	8012496 <USB_EPStartXfer+0x434>
 801245c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012460:	085b      	lsrs	r3, r3, #1
 8012462:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801246a:	f003 0301 	and.w	r3, r3, #1
 801246e:	2b00      	cmp	r3, #0
 8012470:	d004      	beq.n	801247c <USB_EPStartXfer+0x41a>
 8012472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012476:	3301      	adds	r3, #1
 8012478:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801247c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801247e:	881b      	ldrh	r3, [r3, #0]
 8012480:	b29a      	uxth	r2, r3
 8012482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012486:	b29b      	uxth	r3, r3
 8012488:	029b      	lsls	r3, r3, #10
 801248a:	b29b      	uxth	r3, r3
 801248c:	4313      	orrs	r3, r2
 801248e:	b29a      	uxth	r2, r3
 8012490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012492:	801a      	strh	r2, [r3, #0]
 8012494:	e03c      	b.n	8012510 <USB_EPStartXfer+0x4ae>
 8012496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801249a:	095b      	lsrs	r3, r3, #5
 801249c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80124a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124a4:	f003 031f 	and.w	r3, r3, #31
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d104      	bne.n	80124b6 <USB_EPStartXfer+0x454>
 80124ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80124b0:	3b01      	subs	r3, #1
 80124b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80124b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124b8:	881b      	ldrh	r3, [r3, #0]
 80124ba:	b29a      	uxth	r2, r3
 80124bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	029b      	lsls	r3, r3, #10
 80124c4:	b29b      	uxth	r3, r3
 80124c6:	4313      	orrs	r3, r2
 80124c8:	b29b      	uxth	r3, r3
 80124ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124d2:	b29a      	uxth	r2, r3
 80124d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124d6:	801a      	strh	r2, [r3, #0]
 80124d8:	e01a      	b.n	8012510 <USB_EPStartXfer+0x4ae>
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	785b      	ldrb	r3, [r3, #1]
 80124de:	2b01      	cmp	r3, #1
 80124e0:	d116      	bne.n	8012510 <USB_EPStartXfer+0x4ae>
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	461a      	mov	r2, r3
 80124f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80124f2:	4413      	add	r3, r2
 80124f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	781b      	ldrb	r3, [r3, #0]
 80124fa:	00da      	lsls	r2, r3, #3
 80124fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80124fe:	4413      	add	r3, r2
 8012500:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801250a:	b29a      	uxth	r2, r3
 801250c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801250e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	891b      	ldrh	r3, [r3, #8]
 8012514:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	6959      	ldr	r1, [r3, #20]
 801251c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012520:	b29b      	uxth	r3, r3
 8012522:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f000 fc7f 	bl	8012e2a <USB_WritePMA>
            ep->xfer_buff += len;
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	695a      	ldr	r2, [r3, #20]
 8012530:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012534:	441a      	add	r2, r3
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	6a1a      	ldr	r2, [r3, #32]
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	691b      	ldr	r3, [r3, #16]
 8012542:	429a      	cmp	r2, r3
 8012544:	d907      	bls.n	8012556 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	6a1a      	ldr	r2, [r3, #32]
 801254a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801254e:	1ad2      	subs	r2, r2, r3
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	621a      	str	r2, [r3, #32]
 8012554:	e006      	b.n	8012564 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	6a1b      	ldr	r3, [r3, #32]
 801255a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	2200      	movs	r2, #0
 8012562:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	643b      	str	r3, [r7, #64]	@ 0x40
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	785b      	ldrb	r3, [r3, #1]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d16b      	bne.n	8012648 <USB_EPStartXfer+0x5e6>
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801257a:	b29b      	uxth	r3, r3
 801257c:	461a      	mov	r2, r3
 801257e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012580:	4413      	add	r3, r2
 8012582:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	00da      	lsls	r2, r3, #3
 801258a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801258c:	4413      	add	r3, r2
 801258e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012592:	637b      	str	r3, [r7, #52]	@ 0x34
 8012594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012596:	881b      	ldrh	r3, [r3, #0]
 8012598:	b29b      	uxth	r3, r3
 801259a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801259e:	b29a      	uxth	r2, r3
 80125a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125a2:	801a      	strh	r2, [r3, #0]
 80125a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d10a      	bne.n	80125c2 <USB_EPStartXfer+0x560>
 80125ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125ae:	881b      	ldrh	r3, [r3, #0]
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125ba:	b29a      	uxth	r2, r3
 80125bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125be:	801a      	strh	r2, [r3, #0]
 80125c0:	e05b      	b.n	801267a <USB_EPStartXfer+0x618>
 80125c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80125c8:	d81c      	bhi.n	8012604 <USB_EPStartXfer+0x5a2>
 80125ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125ce:	085b      	lsrs	r3, r3, #1
 80125d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80125d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125d8:	f003 0301 	and.w	r3, r3, #1
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d004      	beq.n	80125ea <USB_EPStartXfer+0x588>
 80125e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80125e4:	3301      	adds	r3, #1
 80125e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80125ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125ec:	881b      	ldrh	r3, [r3, #0]
 80125ee:	b29a      	uxth	r2, r3
 80125f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	029b      	lsls	r3, r3, #10
 80125f8:	b29b      	uxth	r3, r3
 80125fa:	4313      	orrs	r3, r2
 80125fc:	b29a      	uxth	r2, r3
 80125fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012600:	801a      	strh	r2, [r3, #0]
 8012602:	e03a      	b.n	801267a <USB_EPStartXfer+0x618>
 8012604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012608:	095b      	lsrs	r3, r3, #5
 801260a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801260e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012612:	f003 031f 	and.w	r3, r3, #31
 8012616:	2b00      	cmp	r3, #0
 8012618:	d104      	bne.n	8012624 <USB_EPStartXfer+0x5c2>
 801261a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801261e:	3b01      	subs	r3, #1
 8012620:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012626:	881b      	ldrh	r3, [r3, #0]
 8012628:	b29a      	uxth	r2, r3
 801262a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801262e:	b29b      	uxth	r3, r3
 8012630:	029b      	lsls	r3, r3, #10
 8012632:	b29b      	uxth	r3, r3
 8012634:	4313      	orrs	r3, r2
 8012636:	b29b      	uxth	r3, r3
 8012638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801263c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012640:	b29a      	uxth	r2, r3
 8012642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012644:	801a      	strh	r2, [r3, #0]
 8012646:	e018      	b.n	801267a <USB_EPStartXfer+0x618>
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	785b      	ldrb	r3, [r3, #1]
 801264c:	2b01      	cmp	r3, #1
 801264e:	d114      	bne.n	801267a <USB_EPStartXfer+0x618>
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012656:	b29b      	uxth	r3, r3
 8012658:	461a      	mov	r2, r3
 801265a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801265c:	4413      	add	r3, r2
 801265e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	781b      	ldrb	r3, [r3, #0]
 8012664:	00da      	lsls	r2, r3, #3
 8012666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012668:	4413      	add	r3, r2
 801266a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801266e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012674:	b29a      	uxth	r2, r3
 8012676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012678:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	895b      	ldrh	r3, [r3, #10]
 801267e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	6959      	ldr	r1, [r3, #20]
 8012686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801268a:	b29b      	uxth	r3, r3
 801268c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f000 fbca 	bl	8012e2a <USB_WritePMA>
 8012696:	e193      	b.n	80129c0 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	6a1b      	ldr	r3, [r3, #32]
 801269c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80126a0:	687a      	ldr	r2, [r7, #4]
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	781b      	ldrb	r3, [r3, #0]
 80126a6:	009b      	lsls	r3, r3, #2
 80126a8:	4413      	add	r3, r2
 80126aa:	881b      	ldrh	r3, [r3, #0]
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80126b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80126b6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80126ba:	687a      	ldr	r2, [r7, #4]
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	009b      	lsls	r3, r3, #2
 80126c2:	441a      	add	r2, r3
 80126c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80126c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80126cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80126d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80126d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126d8:	b29b      	uxth	r3, r3
 80126da:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	461a      	mov	r2, r3
 80126ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80126ec:	4413      	add	r3, r2
 80126ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	781b      	ldrb	r3, [r3, #0]
 80126f4:	00da      	lsls	r2, r3, #3
 80126f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80126f8:	4413      	add	r3, r2
 80126fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80126fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012704:	b29a      	uxth	r2, r3
 8012706:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012708:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	891b      	ldrh	r3, [r3, #8]
 801270e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	6959      	ldr	r1, [r3, #20]
 8012716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801271a:	b29b      	uxth	r3, r3
 801271c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f000 fb82 	bl	8012e2a <USB_WritePMA>
 8012726:	e14b      	b.n	80129c0 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	6a1a      	ldr	r2, [r3, #32]
 801272c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012730:	1ad2      	subs	r2, r2, r3
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	781b      	ldrb	r3, [r3, #0]
 801273c:	009b      	lsls	r3, r3, #2
 801273e:	4413      	add	r3, r2
 8012740:	881b      	ldrh	r3, [r3, #0]
 8012742:	b29b      	uxth	r3, r3
 8012744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012748:	2b00      	cmp	r3, #0
 801274a:	f000 809a 	beq.w	8012882 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	673b      	str	r3, [r7, #112]	@ 0x70
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	785b      	ldrb	r3, [r3, #1]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d16b      	bne.n	8012832 <USB_EPStartXfer+0x7d0>
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012764:	b29b      	uxth	r3, r3
 8012766:	461a      	mov	r2, r3
 8012768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801276a:	4413      	add	r3, r2
 801276c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	00da      	lsls	r2, r3, #3
 8012774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012776:	4413      	add	r3, r2
 8012778:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801277c:	667b      	str	r3, [r7, #100]	@ 0x64
 801277e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012780:	881b      	ldrh	r3, [r3, #0]
 8012782:	b29b      	uxth	r3, r3
 8012784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012788:	b29a      	uxth	r2, r3
 801278a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801278c:	801a      	strh	r2, [r3, #0]
 801278e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012792:	2b00      	cmp	r3, #0
 8012794:	d10a      	bne.n	80127ac <USB_EPStartXfer+0x74a>
 8012796:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012798:	881b      	ldrh	r3, [r3, #0]
 801279a:	b29b      	uxth	r3, r3
 801279c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80127a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80127a4:	b29a      	uxth	r2, r3
 80127a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80127a8:	801a      	strh	r2, [r3, #0]
 80127aa:	e05b      	b.n	8012864 <USB_EPStartXfer+0x802>
 80127ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80127b2:	d81c      	bhi.n	80127ee <USB_EPStartXfer+0x78c>
 80127b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127b8:	085b      	lsrs	r3, r3, #1
 80127ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80127be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127c2:	f003 0301 	and.w	r3, r3, #1
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d004      	beq.n	80127d4 <USB_EPStartXfer+0x772>
 80127ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80127ce:	3301      	adds	r3, #1
 80127d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80127d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80127d6:	881b      	ldrh	r3, [r3, #0]
 80127d8:	b29a      	uxth	r2, r3
 80127da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80127de:	b29b      	uxth	r3, r3
 80127e0:	029b      	lsls	r3, r3, #10
 80127e2:	b29b      	uxth	r3, r3
 80127e4:	4313      	orrs	r3, r2
 80127e6:	b29a      	uxth	r2, r3
 80127e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80127ea:	801a      	strh	r2, [r3, #0]
 80127ec:	e03a      	b.n	8012864 <USB_EPStartXfer+0x802>
 80127ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127f2:	095b      	lsrs	r3, r3, #5
 80127f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80127f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127fc:	f003 031f 	and.w	r3, r3, #31
 8012800:	2b00      	cmp	r3, #0
 8012802:	d104      	bne.n	801280e <USB_EPStartXfer+0x7ac>
 8012804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012808:	3b01      	subs	r3, #1
 801280a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801280e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012810:	881b      	ldrh	r3, [r3, #0]
 8012812:	b29a      	uxth	r2, r3
 8012814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012818:	b29b      	uxth	r3, r3
 801281a:	029b      	lsls	r3, r3, #10
 801281c:	b29b      	uxth	r3, r3
 801281e:	4313      	orrs	r3, r2
 8012820:	b29b      	uxth	r3, r3
 8012822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801282a:	b29a      	uxth	r2, r3
 801282c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801282e:	801a      	strh	r2, [r3, #0]
 8012830:	e018      	b.n	8012864 <USB_EPStartXfer+0x802>
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	785b      	ldrb	r3, [r3, #1]
 8012836:	2b01      	cmp	r3, #1
 8012838:	d114      	bne.n	8012864 <USB_EPStartXfer+0x802>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012840:	b29b      	uxth	r3, r3
 8012842:	461a      	mov	r2, r3
 8012844:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012846:	4413      	add	r3, r2
 8012848:	673b      	str	r3, [r7, #112]	@ 0x70
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	00da      	lsls	r2, r3, #3
 8012850:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012852:	4413      	add	r3, r2
 8012854:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012858:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801285a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801285e:	b29a      	uxth	r2, r3
 8012860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012862:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	895b      	ldrh	r3, [r3, #10]
 8012868:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	6959      	ldr	r1, [r3, #20]
 8012870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012874:	b29b      	uxth	r3, r3
 8012876:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f000 fad5 	bl	8012e2a <USB_WritePMA>
 8012880:	e09e      	b.n	80129c0 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	785b      	ldrb	r3, [r3, #1]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d16b      	bne.n	8012962 <USB_EPStartXfer+0x900>
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012894:	b29b      	uxth	r3, r3
 8012896:	461a      	mov	r2, r3
 8012898:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801289a:	4413      	add	r3, r2
 801289c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	00da      	lsls	r2, r3, #3
 80128a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80128a6:	4413      	add	r3, r2
 80128a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80128ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80128ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80128b0:	881b      	ldrh	r3, [r3, #0]
 80128b2:	b29b      	uxth	r3, r3
 80128b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80128b8:	b29a      	uxth	r2, r3
 80128ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80128bc:	801a      	strh	r2, [r3, #0]
 80128be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d10a      	bne.n	80128dc <USB_EPStartXfer+0x87a>
 80128c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80128c8:	881b      	ldrh	r3, [r3, #0]
 80128ca:	b29b      	uxth	r3, r3
 80128cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80128d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80128d4:	b29a      	uxth	r2, r3
 80128d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80128d8:	801a      	strh	r2, [r3, #0]
 80128da:	e063      	b.n	80129a4 <USB_EPStartXfer+0x942>
 80128dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80128e2:	d81c      	bhi.n	801291e <USB_EPStartXfer+0x8bc>
 80128e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128e8:	085b      	lsrs	r3, r3, #1
 80128ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80128ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128f2:	f003 0301 	and.w	r3, r3, #1
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d004      	beq.n	8012904 <USB_EPStartXfer+0x8a2>
 80128fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80128fe:	3301      	adds	r3, #1
 8012900:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012904:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012906:	881b      	ldrh	r3, [r3, #0]
 8012908:	b29a      	uxth	r2, r3
 801290a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801290e:	b29b      	uxth	r3, r3
 8012910:	029b      	lsls	r3, r3, #10
 8012912:	b29b      	uxth	r3, r3
 8012914:	4313      	orrs	r3, r2
 8012916:	b29a      	uxth	r2, r3
 8012918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801291a:	801a      	strh	r2, [r3, #0]
 801291c:	e042      	b.n	80129a4 <USB_EPStartXfer+0x942>
 801291e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012922:	095b      	lsrs	r3, r3, #5
 8012924:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801292c:	f003 031f 	and.w	r3, r3, #31
 8012930:	2b00      	cmp	r3, #0
 8012932:	d104      	bne.n	801293e <USB_EPStartXfer+0x8dc>
 8012934:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012938:	3b01      	subs	r3, #1
 801293a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801293e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012940:	881b      	ldrh	r3, [r3, #0]
 8012942:	b29a      	uxth	r2, r3
 8012944:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012948:	b29b      	uxth	r3, r3
 801294a:	029b      	lsls	r3, r3, #10
 801294c:	b29b      	uxth	r3, r3
 801294e:	4313      	orrs	r3, r2
 8012950:	b29b      	uxth	r3, r3
 8012952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801295a:	b29a      	uxth	r2, r3
 801295c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801295e:	801a      	strh	r2, [r3, #0]
 8012960:	e020      	b.n	80129a4 <USB_EPStartXfer+0x942>
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	785b      	ldrb	r3, [r3, #1]
 8012966:	2b01      	cmp	r3, #1
 8012968:	d11c      	bne.n	80129a4 <USB_EPStartXfer+0x942>
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012976:	b29b      	uxth	r3, r3
 8012978:	461a      	mov	r2, r3
 801297a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801297e:	4413      	add	r3, r2
 8012980:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	00da      	lsls	r2, r3, #3
 801298a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801298e:	4413      	add	r3, r2
 8012990:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012994:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801299c:	b29a      	uxth	r2, r3
 801299e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80129a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	891b      	ldrh	r3, [r3, #8]
 80129a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	6959      	ldr	r1, [r3, #20]
 80129b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80129b4:	b29b      	uxth	r3, r3
 80129b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f000 fa35 	bl	8012e2a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80129c0:	687a      	ldr	r2, [r7, #4]
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	781b      	ldrb	r3, [r3, #0]
 80129c6:	009b      	lsls	r3, r3, #2
 80129c8:	4413      	add	r3, r2
 80129ca:	881b      	ldrh	r3, [r3, #0]
 80129cc:	b29b      	uxth	r3, r3
 80129ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80129d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80129d6:	817b      	strh	r3, [r7, #10]
 80129d8:	897b      	ldrh	r3, [r7, #10]
 80129da:	f083 0310 	eor.w	r3, r3, #16
 80129de:	817b      	strh	r3, [r7, #10]
 80129e0:	897b      	ldrh	r3, [r7, #10]
 80129e2:	f083 0320 	eor.w	r3, r3, #32
 80129e6:	817b      	strh	r3, [r7, #10]
 80129e8:	687a      	ldr	r2, [r7, #4]
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	009b      	lsls	r3, r3, #2
 80129f0:	441a      	add	r2, r3
 80129f2:	897b      	ldrh	r3, [r7, #10]
 80129f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80129f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80129fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a04:	b29b      	uxth	r3, r3
 8012a06:	8013      	strh	r3, [r2, #0]
 8012a08:	e0d5      	b.n	8012bb6 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	7b1b      	ldrb	r3, [r3, #12]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d156      	bne.n	8012ac0 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	699b      	ldr	r3, [r3, #24]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d122      	bne.n	8012a60 <USB_EPStartXfer+0x9fe>
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	78db      	ldrb	r3, [r3, #3]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d11e      	bne.n	8012a60 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8012a22:	687a      	ldr	r2, [r7, #4]
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	009b      	lsls	r3, r3, #2
 8012a2a:	4413      	add	r3, r2
 8012a2c:	881b      	ldrh	r3, [r3, #0]
 8012a2e:	b29b      	uxth	r3, r3
 8012a30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012a38:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8012a3c:	687a      	ldr	r2, [r7, #4]
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	781b      	ldrb	r3, [r3, #0]
 8012a42:	009b      	lsls	r3, r3, #2
 8012a44:	441a      	add	r2, r3
 8012a46:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012a4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012a4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012a52:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8012a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a5a:	b29b      	uxth	r3, r3
 8012a5c:	8013      	strh	r3, [r2, #0]
 8012a5e:	e01d      	b.n	8012a9c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8012a60:	687a      	ldr	r2, [r7, #4]
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	009b      	lsls	r3, r3, #2
 8012a68:	4413      	add	r3, r2
 8012a6a:	881b      	ldrh	r3, [r3, #0]
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8012a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012a76:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8012a7a:	687a      	ldr	r2, [r7, #4]
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	009b      	lsls	r3, r3, #2
 8012a82:	441a      	add	r2, r3
 8012a84:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8012a88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012a8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012a90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a98:	b29b      	uxth	r3, r3
 8012a9a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	699a      	ldr	r2, [r3, #24]
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	691b      	ldr	r3, [r3, #16]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d907      	bls.n	8012ab8 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	699a      	ldr	r2, [r3, #24]
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	691b      	ldr	r3, [r3, #16]
 8012ab0:	1ad2      	subs	r2, r2, r3
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	619a      	str	r2, [r3, #24]
 8012ab6:	e054      	b.n	8012b62 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	2200      	movs	r2, #0
 8012abc:	619a      	str	r2, [r3, #24]
 8012abe:	e050      	b.n	8012b62 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	78db      	ldrb	r3, [r3, #3]
 8012ac4:	2b02      	cmp	r3, #2
 8012ac6:	d142      	bne.n	8012b4e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	69db      	ldr	r3, [r3, #28]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d048      	beq.n	8012b62 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	781b      	ldrb	r3, [r3, #0]
 8012ad6:	009b      	lsls	r3, r3, #2
 8012ad8:	4413      	add	r3, r2
 8012ada:	881b      	ldrh	r3, [r3, #0]
 8012adc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012ae0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d005      	beq.n	8012af8 <USB_EPStartXfer+0xa96>
 8012aec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d10b      	bne.n	8012b10 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012af8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012afc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d12e      	bne.n	8012b62 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012b04:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d128      	bne.n	8012b62 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012b10:	687a      	ldr	r2, [r7, #4]
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	009b      	lsls	r3, r3, #2
 8012b18:	4413      	add	r3, r2
 8012b1a:	881b      	ldrh	r3, [r3, #0]
 8012b1c:	b29b      	uxth	r3, r3
 8012b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012b26:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8012b2a:	687a      	ldr	r2, [r7, #4]
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	009b      	lsls	r3, r3, #2
 8012b32:	441a      	add	r2, r3
 8012b34:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8012b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012b44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012b48:	b29b      	uxth	r3, r3
 8012b4a:	8013      	strh	r3, [r2, #0]
 8012b4c:	e009      	b.n	8012b62 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	78db      	ldrb	r3, [r3, #3]
 8012b52:	2b01      	cmp	r3, #1
 8012b54:	d103      	bne.n	8012b5e <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	2200      	movs	r2, #0
 8012b5a:	619a      	str	r2, [r3, #24]
 8012b5c:	e001      	b.n	8012b62 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8012b5e:	2301      	movs	r3, #1
 8012b60:	e02a      	b.n	8012bb8 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012b62:	687a      	ldr	r2, [r7, #4]
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	4413      	add	r3, r2
 8012b6c:	881b      	ldrh	r3, [r3, #0]
 8012b6e:	b29b      	uxth	r3, r3
 8012b70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012b78:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012b7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012b80:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012b84:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012b88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012b8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012b90:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012b94:	687a      	ldr	r2, [r7, #4]
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	781b      	ldrb	r3, [r3, #0]
 8012b9a:	009b      	lsls	r3, r3, #2
 8012b9c:	441a      	add	r2, r3
 8012b9e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012ba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012ba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012bb6:	2300      	movs	r3, #0
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	37b0      	adds	r7, #176	@ 0xb0
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}

08012bc0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012bc0:	b480      	push	{r7}
 8012bc2:	b085      	sub	sp, #20
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	785b      	ldrb	r3, [r3, #1]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d020      	beq.n	8012c14 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012bd2:	687a      	ldr	r2, [r7, #4]
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	781b      	ldrb	r3, [r3, #0]
 8012bd8:	009b      	lsls	r3, r3, #2
 8012bda:	4413      	add	r3, r2
 8012bdc:	881b      	ldrh	r3, [r3, #0]
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012be4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012be8:	81bb      	strh	r3, [r7, #12]
 8012bea:	89bb      	ldrh	r3, [r7, #12]
 8012bec:	f083 0310 	eor.w	r3, r3, #16
 8012bf0:	81bb      	strh	r3, [r7, #12]
 8012bf2:	687a      	ldr	r2, [r7, #4]
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	009b      	lsls	r3, r3, #2
 8012bfa:	441a      	add	r2, r3
 8012bfc:	89bb      	ldrh	r3, [r7, #12]
 8012bfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012c02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	8013      	strh	r3, [r2, #0]
 8012c12:	e01f      	b.n	8012c54 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012c14:	687a      	ldr	r2, [r7, #4]
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	009b      	lsls	r3, r3, #2
 8012c1c:	4413      	add	r3, r2
 8012c1e:	881b      	ldrh	r3, [r3, #0]
 8012c20:	b29b      	uxth	r3, r3
 8012c22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c2a:	81fb      	strh	r3, [r7, #14]
 8012c2c:	89fb      	ldrh	r3, [r7, #14]
 8012c2e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012c32:	81fb      	strh	r3, [r7, #14]
 8012c34:	687a      	ldr	r2, [r7, #4]
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	781b      	ldrb	r3, [r3, #0]
 8012c3a:	009b      	lsls	r3, r3, #2
 8012c3c:	441a      	add	r2, r3
 8012c3e:	89fb      	ldrh	r3, [r7, #14]
 8012c40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012c44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012c48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c50:	b29b      	uxth	r3, r3
 8012c52:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012c54:	2300      	movs	r3, #0
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	3714      	adds	r7, #20
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c60:	4770      	bx	lr

08012c62 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012c62:	b480      	push	{r7}
 8012c64:	b087      	sub	sp, #28
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	6078      	str	r0, [r7, #4]
 8012c6a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	785b      	ldrb	r3, [r3, #1]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d04c      	beq.n	8012d0e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012c74:	687a      	ldr	r2, [r7, #4]
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	009b      	lsls	r3, r3, #2
 8012c7c:	4413      	add	r3, r2
 8012c7e:	881b      	ldrh	r3, [r3, #0]
 8012c80:	823b      	strh	r3, [r7, #16]
 8012c82:	8a3b      	ldrh	r3, [r7, #16]
 8012c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d01b      	beq.n	8012cc4 <USB_EPClearStall+0x62>
 8012c8c:	687a      	ldr	r2, [r7, #4]
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	009b      	lsls	r3, r3, #2
 8012c94:	4413      	add	r3, r2
 8012c96:	881b      	ldrh	r3, [r3, #0]
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012ca2:	81fb      	strh	r3, [r7, #14]
 8012ca4:	687a      	ldr	r2, [r7, #4]
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	009b      	lsls	r3, r3, #2
 8012cac:	441a      	add	r2, r3
 8012cae:	89fb      	ldrh	r3, [r7, #14]
 8012cb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012cb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012cbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012cc0:	b29b      	uxth	r3, r3
 8012cc2:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	78db      	ldrb	r3, [r3, #3]
 8012cc8:	2b01      	cmp	r3, #1
 8012cca:	d06c      	beq.n	8012da6 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012ccc:	687a      	ldr	r2, [r7, #4]
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	009b      	lsls	r3, r3, #2
 8012cd4:	4413      	add	r3, r2
 8012cd6:	881b      	ldrh	r3, [r3, #0]
 8012cd8:	b29b      	uxth	r3, r3
 8012cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012ce2:	81bb      	strh	r3, [r7, #12]
 8012ce4:	89bb      	ldrh	r3, [r7, #12]
 8012ce6:	f083 0320 	eor.w	r3, r3, #32
 8012cea:	81bb      	strh	r3, [r7, #12]
 8012cec:	687a      	ldr	r2, [r7, #4]
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	781b      	ldrb	r3, [r3, #0]
 8012cf2:	009b      	lsls	r3, r3, #2
 8012cf4:	441a      	add	r2, r3
 8012cf6:	89bb      	ldrh	r3, [r7, #12]
 8012cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d08:	b29b      	uxth	r3, r3
 8012d0a:	8013      	strh	r3, [r2, #0]
 8012d0c:	e04b      	b.n	8012da6 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	009b      	lsls	r3, r3, #2
 8012d16:	4413      	add	r3, r2
 8012d18:	881b      	ldrh	r3, [r3, #0]
 8012d1a:	82fb      	strh	r3, [r7, #22]
 8012d1c:	8afb      	ldrh	r3, [r7, #22]
 8012d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d01b      	beq.n	8012d5e <USB_EPClearStall+0xfc>
 8012d26:	687a      	ldr	r2, [r7, #4]
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	781b      	ldrb	r3, [r3, #0]
 8012d2c:	009b      	lsls	r3, r3, #2
 8012d2e:	4413      	add	r3, r2
 8012d30:	881b      	ldrh	r3, [r3, #0]
 8012d32:	b29b      	uxth	r3, r3
 8012d34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012d3c:	82bb      	strh	r3, [r7, #20]
 8012d3e:	687a      	ldr	r2, [r7, #4]
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	441a      	add	r2, r3
 8012d48:	8abb      	ldrh	r3, [r7, #20]
 8012d4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012d4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012d52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	009b      	lsls	r3, r3, #2
 8012d66:	4413      	add	r3, r2
 8012d68:	881b      	ldrh	r3, [r3, #0]
 8012d6a:	b29b      	uxth	r3, r3
 8012d6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012d74:	827b      	strh	r3, [r7, #18]
 8012d76:	8a7b      	ldrh	r3, [r7, #18]
 8012d78:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012d7c:	827b      	strh	r3, [r7, #18]
 8012d7e:	8a7b      	ldrh	r3, [r7, #18]
 8012d80:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012d84:	827b      	strh	r3, [r7, #18]
 8012d86:	687a      	ldr	r2, [r7, #4]
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	781b      	ldrb	r3, [r3, #0]
 8012d8c:	009b      	lsls	r3, r3, #2
 8012d8e:	441a      	add	r2, r3
 8012d90:	8a7b      	ldrh	r3, [r7, #18]
 8012d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012da6:	2300      	movs	r3, #0
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	371c      	adds	r7, #28
 8012dac:	46bd      	mov	sp, r7
 8012dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db2:	4770      	bx	lr

08012db4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012db4:	b480      	push	{r7}
 8012db6:	b083      	sub	sp, #12
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	460b      	mov	r3, r1
 8012dbe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012dc0:	78fb      	ldrb	r3, [r7, #3]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d103      	bne.n	8012dce <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2280      	movs	r2, #128	@ 0x80
 8012dca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8012dce:	2300      	movs	r3, #0
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	370c      	adds	r7, #12
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dda:	4770      	bx	lr

08012ddc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012ddc:	b480      	push	{r7}
 8012dde:	b083      	sub	sp, #12
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8012dea:	b29b      	uxth	r3, r3
 8012dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012df4:	b29a      	uxth	r2, r3
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8012dfc:	2300      	movs	r3, #0
}
 8012dfe:	4618      	mov	r0, r3
 8012e00:	370c      	adds	r7, #12
 8012e02:	46bd      	mov	sp, r7
 8012e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e08:	4770      	bx	lr

08012e0a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8012e0a:	b480      	push	{r7}
 8012e0c:	b085      	sub	sp, #20
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	3714      	adds	r7, #20
 8012e22:	46bd      	mov	sp, r7
 8012e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e28:	4770      	bx	lr

08012e2a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012e2a:	b480      	push	{r7}
 8012e2c:	b08b      	sub	sp, #44	@ 0x2c
 8012e2e:	af00      	add	r7, sp, #0
 8012e30:	60f8      	str	r0, [r7, #12]
 8012e32:	60b9      	str	r1, [r7, #8]
 8012e34:	4611      	mov	r1, r2
 8012e36:	461a      	mov	r2, r3
 8012e38:	460b      	mov	r3, r1
 8012e3a:	80fb      	strh	r3, [r7, #6]
 8012e3c:	4613      	mov	r3, r2
 8012e3e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012e40:	88bb      	ldrh	r3, [r7, #4]
 8012e42:	3301      	adds	r3, #1
 8012e44:	085b      	lsrs	r3, r3, #1
 8012e46:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012e50:	88fa      	ldrh	r2, [r7, #6]
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	4413      	add	r3, r2
 8012e56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012e5a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012e5c:	69bb      	ldr	r3, [r7, #24]
 8012e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e60:	e01b      	b.n	8012e9a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8012e62:	69fb      	ldr	r3, [r7, #28]
 8012e64:	781b      	ldrb	r3, [r3, #0]
 8012e66:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012e68:	69fb      	ldr	r3, [r7, #28]
 8012e6a:	3301      	adds	r3, #1
 8012e6c:	781b      	ldrb	r3, [r3, #0]
 8012e6e:	021b      	lsls	r3, r3, #8
 8012e70:	b21a      	sxth	r2, r3
 8012e72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012e76:	4313      	orrs	r3, r2
 8012e78:	b21b      	sxth	r3, r3
 8012e7a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8012e7c:	6a3b      	ldr	r3, [r7, #32]
 8012e7e:	8a7a      	ldrh	r2, [r7, #18]
 8012e80:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012e82:	6a3b      	ldr	r3, [r7, #32]
 8012e84:	3302      	adds	r3, #2
 8012e86:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012e88:	69fb      	ldr	r3, [r7, #28]
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8012e8e:	69fb      	ldr	r3, [r7, #28]
 8012e90:	3301      	adds	r3, #1
 8012e92:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e96:	3b01      	subs	r3, #1
 8012e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d1e0      	bne.n	8012e62 <USB_WritePMA+0x38>
  }
}
 8012ea0:	bf00      	nop
 8012ea2:	bf00      	nop
 8012ea4:	372c      	adds	r7, #44	@ 0x2c
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eac:	4770      	bx	lr

08012eae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012eae:	b480      	push	{r7}
 8012eb0:	b08b      	sub	sp, #44	@ 0x2c
 8012eb2:	af00      	add	r7, sp, #0
 8012eb4:	60f8      	str	r0, [r7, #12]
 8012eb6:	60b9      	str	r1, [r7, #8]
 8012eb8:	4611      	mov	r1, r2
 8012eba:	461a      	mov	r2, r3
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	80fb      	strh	r3, [r7, #6]
 8012ec0:	4613      	mov	r3, r2
 8012ec2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012ec4:	88bb      	ldrh	r3, [r7, #4]
 8012ec6:	085b      	lsrs	r3, r3, #1
 8012ec8:	b29b      	uxth	r3, r3
 8012eca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012ed4:	88fa      	ldrh	r2, [r7, #6]
 8012ed6:	697b      	ldr	r3, [r7, #20]
 8012ed8:	4413      	add	r3, r2
 8012eda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012ede:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ee4:	e018      	b.n	8012f18 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012ee6:	6a3b      	ldr	r3, [r7, #32]
 8012ee8:	881b      	ldrh	r3, [r3, #0]
 8012eea:	b29b      	uxth	r3, r3
 8012eec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012eee:	6a3b      	ldr	r3, [r7, #32]
 8012ef0:	3302      	adds	r3, #2
 8012ef2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	b2da      	uxtb	r2, r3
 8012ef8:	69fb      	ldr	r3, [r7, #28]
 8012efa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012efc:	69fb      	ldr	r3, [r7, #28]
 8012efe:	3301      	adds	r3, #1
 8012f00:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	0a1b      	lsrs	r3, r3, #8
 8012f06:	b2da      	uxtb	r2, r3
 8012f08:	69fb      	ldr	r3, [r7, #28]
 8012f0a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	3301      	adds	r3, #1
 8012f10:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f14:	3b01      	subs	r3, #1
 8012f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d1e3      	bne.n	8012ee6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012f1e:	88bb      	ldrh	r3, [r7, #4]
 8012f20:	f003 0301 	and.w	r3, r3, #1
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d007      	beq.n	8012f3a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8012f2a:	6a3b      	ldr	r3, [r7, #32]
 8012f2c:	881b      	ldrh	r3, [r3, #0]
 8012f2e:	b29b      	uxth	r3, r3
 8012f30:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012f32:	693b      	ldr	r3, [r7, #16]
 8012f34:	b2da      	uxtb	r2, r3
 8012f36:	69fb      	ldr	r3, [r7, #28]
 8012f38:	701a      	strb	r2, [r3, #0]
  }
}
 8012f3a:	bf00      	nop
 8012f3c:	372c      	adds	r7, #44	@ 0x2c
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f44:	4770      	bx	lr
	...

08012f48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b084      	sub	sp, #16
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	460b      	mov	r3, r1
 8012f52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012f54:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012f58:	f006 f93a 	bl	80191d0 <USBD_static_malloc>
 8012f5c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d109      	bne.n	8012f78 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	32b0      	adds	r2, #176	@ 0xb0
 8012f6e:	2100      	movs	r1, #0
 8012f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012f74:	2302      	movs	r3, #2
 8012f76:	e0d4      	b.n	8013122 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012f78:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012f7c:	2100      	movs	r1, #0
 8012f7e:	68f8      	ldr	r0, [r7, #12]
 8012f80:	f008 fb47 	bl	801b612 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	32b0      	adds	r2, #176	@ 0xb0
 8012f8e:	68f9      	ldr	r1, [r7, #12]
 8012f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	32b0      	adds	r2, #176	@ 0xb0
 8012f9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	7c1b      	ldrb	r3, [r3, #16]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d138      	bne.n	8013022 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012fb0:	4b5e      	ldr	r3, [pc, #376]	@ (801312c <USBD_CDC_Init+0x1e4>)
 8012fb2:	7819      	ldrb	r1, [r3, #0]
 8012fb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012fb8:	2202      	movs	r2, #2
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f005 ffaf 	bl	8018f1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012fc0:	4b5a      	ldr	r3, [pc, #360]	@ (801312c <USBD_CDC_Init+0x1e4>)
 8012fc2:	781b      	ldrb	r3, [r3, #0]
 8012fc4:	f003 020f 	and.w	r2, r3, #15
 8012fc8:	6879      	ldr	r1, [r7, #4]
 8012fca:	4613      	mov	r3, r2
 8012fcc:	009b      	lsls	r3, r3, #2
 8012fce:	4413      	add	r3, r2
 8012fd0:	009b      	lsls	r3, r3, #2
 8012fd2:	440b      	add	r3, r1
 8012fd4:	3324      	adds	r3, #36	@ 0x24
 8012fd6:	2201      	movs	r2, #1
 8012fd8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012fda:	4b55      	ldr	r3, [pc, #340]	@ (8013130 <USBD_CDC_Init+0x1e8>)
 8012fdc:	7819      	ldrb	r1, [r3, #0]
 8012fde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012fe2:	2202      	movs	r2, #2
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f005 ff9a 	bl	8018f1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012fea:	4b51      	ldr	r3, [pc, #324]	@ (8013130 <USBD_CDC_Init+0x1e8>)
 8012fec:	781b      	ldrb	r3, [r3, #0]
 8012fee:	f003 020f 	and.w	r2, r3, #15
 8012ff2:	6879      	ldr	r1, [r7, #4]
 8012ff4:	4613      	mov	r3, r2
 8012ff6:	009b      	lsls	r3, r3, #2
 8012ff8:	4413      	add	r3, r2
 8012ffa:	009b      	lsls	r3, r3, #2
 8012ffc:	440b      	add	r3, r1
 8012ffe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013002:	2201      	movs	r2, #1
 8013004:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013006:	4b4b      	ldr	r3, [pc, #300]	@ (8013134 <USBD_CDC_Init+0x1ec>)
 8013008:	781b      	ldrb	r3, [r3, #0]
 801300a:	f003 020f 	and.w	r2, r3, #15
 801300e:	6879      	ldr	r1, [r7, #4]
 8013010:	4613      	mov	r3, r2
 8013012:	009b      	lsls	r3, r3, #2
 8013014:	4413      	add	r3, r2
 8013016:	009b      	lsls	r3, r3, #2
 8013018:	440b      	add	r3, r1
 801301a:	3326      	adds	r3, #38	@ 0x26
 801301c:	2210      	movs	r2, #16
 801301e:	801a      	strh	r2, [r3, #0]
 8013020:	e035      	b.n	801308e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013022:	4b42      	ldr	r3, [pc, #264]	@ (801312c <USBD_CDC_Init+0x1e4>)
 8013024:	7819      	ldrb	r1, [r3, #0]
 8013026:	2340      	movs	r3, #64	@ 0x40
 8013028:	2202      	movs	r2, #2
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f005 ff77 	bl	8018f1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013030:	4b3e      	ldr	r3, [pc, #248]	@ (801312c <USBD_CDC_Init+0x1e4>)
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	f003 020f 	and.w	r2, r3, #15
 8013038:	6879      	ldr	r1, [r7, #4]
 801303a:	4613      	mov	r3, r2
 801303c:	009b      	lsls	r3, r3, #2
 801303e:	4413      	add	r3, r2
 8013040:	009b      	lsls	r3, r3, #2
 8013042:	440b      	add	r3, r1
 8013044:	3324      	adds	r3, #36	@ 0x24
 8013046:	2201      	movs	r2, #1
 8013048:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801304a:	4b39      	ldr	r3, [pc, #228]	@ (8013130 <USBD_CDC_Init+0x1e8>)
 801304c:	7819      	ldrb	r1, [r3, #0]
 801304e:	2340      	movs	r3, #64	@ 0x40
 8013050:	2202      	movs	r2, #2
 8013052:	6878      	ldr	r0, [r7, #4]
 8013054:	f005 ff63 	bl	8018f1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013058:	4b35      	ldr	r3, [pc, #212]	@ (8013130 <USBD_CDC_Init+0x1e8>)
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	f003 020f 	and.w	r2, r3, #15
 8013060:	6879      	ldr	r1, [r7, #4]
 8013062:	4613      	mov	r3, r2
 8013064:	009b      	lsls	r3, r3, #2
 8013066:	4413      	add	r3, r2
 8013068:	009b      	lsls	r3, r3, #2
 801306a:	440b      	add	r3, r1
 801306c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013070:	2201      	movs	r2, #1
 8013072:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013074:	4b2f      	ldr	r3, [pc, #188]	@ (8013134 <USBD_CDC_Init+0x1ec>)
 8013076:	781b      	ldrb	r3, [r3, #0]
 8013078:	f003 020f 	and.w	r2, r3, #15
 801307c:	6879      	ldr	r1, [r7, #4]
 801307e:	4613      	mov	r3, r2
 8013080:	009b      	lsls	r3, r3, #2
 8013082:	4413      	add	r3, r2
 8013084:	009b      	lsls	r3, r3, #2
 8013086:	440b      	add	r3, r1
 8013088:	3326      	adds	r3, #38	@ 0x26
 801308a:	2210      	movs	r2, #16
 801308c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801308e:	4b29      	ldr	r3, [pc, #164]	@ (8013134 <USBD_CDC_Init+0x1ec>)
 8013090:	7819      	ldrb	r1, [r3, #0]
 8013092:	2308      	movs	r3, #8
 8013094:	2203      	movs	r2, #3
 8013096:	6878      	ldr	r0, [r7, #4]
 8013098:	f005 ff41 	bl	8018f1e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801309c:	4b25      	ldr	r3, [pc, #148]	@ (8013134 <USBD_CDC_Init+0x1ec>)
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	f003 020f 	and.w	r2, r3, #15
 80130a4:	6879      	ldr	r1, [r7, #4]
 80130a6:	4613      	mov	r3, r2
 80130a8:	009b      	lsls	r3, r3, #2
 80130aa:	4413      	add	r3, r2
 80130ac:	009b      	lsls	r3, r3, #2
 80130ae:	440b      	add	r3, r1
 80130b0:	3324      	adds	r3, #36	@ 0x24
 80130b2:	2201      	movs	r2, #1
 80130b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	2200      	movs	r2, #0
 80130ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80130c4:	687a      	ldr	r2, [r7, #4]
 80130c6:	33b0      	adds	r3, #176	@ 0xb0
 80130c8:	009b      	lsls	r3, r3, #2
 80130ca:	4413      	add	r3, r2
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	2200      	movs	r2, #0
 80130d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	2200      	movs	r2, #0
 80130de:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d101      	bne.n	80130f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80130ec:	2302      	movs	r3, #2
 80130ee:	e018      	b.n	8013122 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	7c1b      	ldrb	r3, [r3, #16]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d10a      	bne.n	801310e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80130f8:	4b0d      	ldr	r3, [pc, #52]	@ (8013130 <USBD_CDC_Init+0x1e8>)
 80130fa:	7819      	ldrb	r1, [r3, #0]
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013102:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013106:	6878      	ldr	r0, [r7, #4]
 8013108:	f005 fff8 	bl	80190fc <USBD_LL_PrepareReceive>
 801310c:	e008      	b.n	8013120 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801310e:	4b08      	ldr	r3, [pc, #32]	@ (8013130 <USBD_CDC_Init+0x1e8>)
 8013110:	7819      	ldrb	r1, [r3, #0]
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013118:	2340      	movs	r3, #64	@ 0x40
 801311a:	6878      	ldr	r0, [r7, #4]
 801311c:	f005 ffee 	bl	80190fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013120:	2300      	movs	r3, #0
}
 8013122:	4618      	mov	r0, r3
 8013124:	3710      	adds	r7, #16
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}
 801312a:	bf00      	nop
 801312c:	200000c7 	.word	0x200000c7
 8013130:	200000c8 	.word	0x200000c8
 8013134:	200000c9 	.word	0x200000c9

08013138 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b082      	sub	sp, #8
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
 8013140:	460b      	mov	r3, r1
 8013142:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013144:	4b3a      	ldr	r3, [pc, #232]	@ (8013230 <USBD_CDC_DeInit+0xf8>)
 8013146:	781b      	ldrb	r3, [r3, #0]
 8013148:	4619      	mov	r1, r3
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f005 ff0d 	bl	8018f6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013150:	4b37      	ldr	r3, [pc, #220]	@ (8013230 <USBD_CDC_DeInit+0xf8>)
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	f003 020f 	and.w	r2, r3, #15
 8013158:	6879      	ldr	r1, [r7, #4]
 801315a:	4613      	mov	r3, r2
 801315c:	009b      	lsls	r3, r3, #2
 801315e:	4413      	add	r3, r2
 8013160:	009b      	lsls	r3, r3, #2
 8013162:	440b      	add	r3, r1
 8013164:	3324      	adds	r3, #36	@ 0x24
 8013166:	2200      	movs	r2, #0
 8013168:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801316a:	4b32      	ldr	r3, [pc, #200]	@ (8013234 <USBD_CDC_DeInit+0xfc>)
 801316c:	781b      	ldrb	r3, [r3, #0]
 801316e:	4619      	mov	r1, r3
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f005 fefa 	bl	8018f6a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8013176:	4b2f      	ldr	r3, [pc, #188]	@ (8013234 <USBD_CDC_DeInit+0xfc>)
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	f003 020f 	and.w	r2, r3, #15
 801317e:	6879      	ldr	r1, [r7, #4]
 8013180:	4613      	mov	r3, r2
 8013182:	009b      	lsls	r3, r3, #2
 8013184:	4413      	add	r3, r2
 8013186:	009b      	lsls	r3, r3, #2
 8013188:	440b      	add	r3, r1
 801318a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801318e:	2200      	movs	r2, #0
 8013190:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013192:	4b29      	ldr	r3, [pc, #164]	@ (8013238 <USBD_CDC_DeInit+0x100>)
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	4619      	mov	r1, r3
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f005 fee6 	bl	8018f6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801319e:	4b26      	ldr	r3, [pc, #152]	@ (8013238 <USBD_CDC_DeInit+0x100>)
 80131a0:	781b      	ldrb	r3, [r3, #0]
 80131a2:	f003 020f 	and.w	r2, r3, #15
 80131a6:	6879      	ldr	r1, [r7, #4]
 80131a8:	4613      	mov	r3, r2
 80131aa:	009b      	lsls	r3, r3, #2
 80131ac:	4413      	add	r3, r2
 80131ae:	009b      	lsls	r3, r3, #2
 80131b0:	440b      	add	r3, r1
 80131b2:	3324      	adds	r3, #36	@ 0x24
 80131b4:	2200      	movs	r2, #0
 80131b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80131b8:	4b1f      	ldr	r3, [pc, #124]	@ (8013238 <USBD_CDC_DeInit+0x100>)
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	f003 020f 	and.w	r2, r3, #15
 80131c0:	6879      	ldr	r1, [r7, #4]
 80131c2:	4613      	mov	r3, r2
 80131c4:	009b      	lsls	r3, r3, #2
 80131c6:	4413      	add	r3, r2
 80131c8:	009b      	lsls	r3, r3, #2
 80131ca:	440b      	add	r3, r1
 80131cc:	3326      	adds	r3, #38	@ 0x26
 80131ce:	2200      	movs	r2, #0
 80131d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	32b0      	adds	r2, #176	@ 0xb0
 80131dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d01f      	beq.n	8013224 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80131ea:	687a      	ldr	r2, [r7, #4]
 80131ec:	33b0      	adds	r3, #176	@ 0xb0
 80131ee:	009b      	lsls	r3, r3, #2
 80131f0:	4413      	add	r3, r2
 80131f2:	685b      	ldr	r3, [r3, #4]
 80131f4:	685b      	ldr	r3, [r3, #4]
 80131f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	32b0      	adds	r2, #176	@ 0xb0
 8013202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013206:	4618      	mov	r0, r3
 8013208:	f005 fff0 	bl	80191ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	32b0      	adds	r2, #176	@ 0xb0
 8013216:	2100      	movs	r1, #0
 8013218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2200      	movs	r2, #0
 8013220:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013224:	2300      	movs	r3, #0
}
 8013226:	4618      	mov	r0, r3
 8013228:	3708      	adds	r7, #8
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
 801322e:	bf00      	nop
 8013230:	200000c7 	.word	0x200000c7
 8013234:	200000c8 	.word	0x200000c8
 8013238:	200000c9 	.word	0x200000c9

0801323c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b086      	sub	sp, #24
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	32b0      	adds	r2, #176	@ 0xb0
 8013250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013254:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013256:	2300      	movs	r3, #0
 8013258:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801325a:	2300      	movs	r3, #0
 801325c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801325e:	2300      	movs	r3, #0
 8013260:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d101      	bne.n	801326c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013268:	2303      	movs	r3, #3
 801326a:	e0bf      	b.n	80133ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	781b      	ldrb	r3, [r3, #0]
 8013270:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013274:	2b00      	cmp	r3, #0
 8013276:	d050      	beq.n	801331a <USBD_CDC_Setup+0xde>
 8013278:	2b20      	cmp	r3, #32
 801327a:	f040 80af 	bne.w	80133dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	88db      	ldrh	r3, [r3, #6]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d03a      	beq.n	80132fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	b25b      	sxtb	r3, r3
 801328c:	2b00      	cmp	r3, #0
 801328e:	da1b      	bge.n	80132c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013296:	687a      	ldr	r2, [r7, #4]
 8013298:	33b0      	adds	r3, #176	@ 0xb0
 801329a:	009b      	lsls	r3, r3, #2
 801329c:	4413      	add	r3, r2
 801329e:	685b      	ldr	r3, [r3, #4]
 80132a0:	689b      	ldr	r3, [r3, #8]
 80132a2:	683a      	ldr	r2, [r7, #0]
 80132a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80132a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80132a8:	683a      	ldr	r2, [r7, #0]
 80132aa:	88d2      	ldrh	r2, [r2, #6]
 80132ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	88db      	ldrh	r3, [r3, #6]
 80132b2:	2b07      	cmp	r3, #7
 80132b4:	bf28      	it	cs
 80132b6:	2307      	movcs	r3, #7
 80132b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	89fa      	ldrh	r2, [r7, #14]
 80132be:	4619      	mov	r1, r3
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f001 fd2b 	bl	8014d1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80132c6:	e090      	b.n	80133ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	785a      	ldrb	r2, [r3, #1]
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	88db      	ldrh	r3, [r3, #6]
 80132d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80132d8:	d803      	bhi.n	80132e2 <USBD_CDC_Setup+0xa6>
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	88db      	ldrh	r3, [r3, #6]
 80132de:	b2da      	uxtb	r2, r3
 80132e0:	e000      	b.n	80132e4 <USBD_CDC_Setup+0xa8>
 80132e2:	2240      	movs	r2, #64	@ 0x40
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80132ea:	6939      	ldr	r1, [r7, #16]
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80132f2:	461a      	mov	r2, r3
 80132f4:	6878      	ldr	r0, [r7, #4]
 80132f6:	f001 fd3d 	bl	8014d74 <USBD_CtlPrepareRx>
      break;
 80132fa:	e076      	b.n	80133ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	33b0      	adds	r3, #176	@ 0xb0
 8013306:	009b      	lsls	r3, r3, #2
 8013308:	4413      	add	r3, r2
 801330a:	685b      	ldr	r3, [r3, #4]
 801330c:	689b      	ldr	r3, [r3, #8]
 801330e:	683a      	ldr	r2, [r7, #0]
 8013310:	7850      	ldrb	r0, [r2, #1]
 8013312:	2200      	movs	r2, #0
 8013314:	6839      	ldr	r1, [r7, #0]
 8013316:	4798      	blx	r3
      break;
 8013318:	e067      	b.n	80133ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801331a:	683b      	ldr	r3, [r7, #0]
 801331c:	785b      	ldrb	r3, [r3, #1]
 801331e:	2b0b      	cmp	r3, #11
 8013320:	d851      	bhi.n	80133c6 <USBD_CDC_Setup+0x18a>
 8013322:	a201      	add	r2, pc, #4	@ (adr r2, 8013328 <USBD_CDC_Setup+0xec>)
 8013324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013328:	08013359 	.word	0x08013359
 801332c:	080133d5 	.word	0x080133d5
 8013330:	080133c7 	.word	0x080133c7
 8013334:	080133c7 	.word	0x080133c7
 8013338:	080133c7 	.word	0x080133c7
 801333c:	080133c7 	.word	0x080133c7
 8013340:	080133c7 	.word	0x080133c7
 8013344:	080133c7 	.word	0x080133c7
 8013348:	080133c7 	.word	0x080133c7
 801334c:	080133c7 	.word	0x080133c7
 8013350:	08013383 	.word	0x08013383
 8013354:	080133ad 	.word	0x080133ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801335e:	b2db      	uxtb	r3, r3
 8013360:	2b03      	cmp	r3, #3
 8013362:	d107      	bne.n	8013374 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013364:	f107 030a 	add.w	r3, r7, #10
 8013368:	2202      	movs	r2, #2
 801336a:	4619      	mov	r1, r3
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f001 fcd5 	bl	8014d1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013372:	e032      	b.n	80133da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013374:	6839      	ldr	r1, [r7, #0]
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f001 fc53 	bl	8014c22 <USBD_CtlError>
            ret = USBD_FAIL;
 801337c:	2303      	movs	r3, #3
 801337e:	75fb      	strb	r3, [r7, #23]
          break;
 8013380:	e02b      	b.n	80133da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013388:	b2db      	uxtb	r3, r3
 801338a:	2b03      	cmp	r3, #3
 801338c:	d107      	bne.n	801339e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801338e:	f107 030d 	add.w	r3, r7, #13
 8013392:	2201      	movs	r2, #1
 8013394:	4619      	mov	r1, r3
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	f001 fcc0 	bl	8014d1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801339c:	e01d      	b.n	80133da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801339e:	6839      	ldr	r1, [r7, #0]
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f001 fc3e 	bl	8014c22 <USBD_CtlError>
            ret = USBD_FAIL;
 80133a6:	2303      	movs	r3, #3
 80133a8:	75fb      	strb	r3, [r7, #23]
          break;
 80133aa:	e016      	b.n	80133da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133b2:	b2db      	uxtb	r3, r3
 80133b4:	2b03      	cmp	r3, #3
 80133b6:	d00f      	beq.n	80133d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80133b8:	6839      	ldr	r1, [r7, #0]
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	f001 fc31 	bl	8014c22 <USBD_CtlError>
            ret = USBD_FAIL;
 80133c0:	2303      	movs	r3, #3
 80133c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80133c4:	e008      	b.n	80133d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80133c6:	6839      	ldr	r1, [r7, #0]
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	f001 fc2a 	bl	8014c22 <USBD_CtlError>
          ret = USBD_FAIL;
 80133ce:	2303      	movs	r3, #3
 80133d0:	75fb      	strb	r3, [r7, #23]
          break;
 80133d2:	e002      	b.n	80133da <USBD_CDC_Setup+0x19e>
          break;
 80133d4:	bf00      	nop
 80133d6:	e008      	b.n	80133ea <USBD_CDC_Setup+0x1ae>
          break;
 80133d8:	bf00      	nop
      }
      break;
 80133da:	e006      	b.n	80133ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80133dc:	6839      	ldr	r1, [r7, #0]
 80133de:	6878      	ldr	r0, [r7, #4]
 80133e0:	f001 fc1f 	bl	8014c22 <USBD_CtlError>
      ret = USBD_FAIL;
 80133e4:	2303      	movs	r3, #3
 80133e6:	75fb      	strb	r3, [r7, #23]
      break;
 80133e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80133ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80133ec:	4618      	mov	r0, r3
 80133ee:	3718      	adds	r7, #24
 80133f0:	46bd      	mov	sp, r7
 80133f2:	bd80      	pop	{r7, pc}

080133f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b084      	sub	sp, #16
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
 80133fc:	460b      	mov	r3, r1
 80133fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013406:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	32b0      	adds	r2, #176	@ 0xb0
 8013412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d101      	bne.n	801341e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801341a:	2303      	movs	r3, #3
 801341c:	e065      	b.n	80134ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	32b0      	adds	r2, #176	@ 0xb0
 8013428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801342c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801342e:	78fb      	ldrb	r3, [r7, #3]
 8013430:	f003 020f 	and.w	r2, r3, #15
 8013434:	6879      	ldr	r1, [r7, #4]
 8013436:	4613      	mov	r3, r2
 8013438:	009b      	lsls	r3, r3, #2
 801343a:	4413      	add	r3, r2
 801343c:	009b      	lsls	r3, r3, #2
 801343e:	440b      	add	r3, r1
 8013440:	3318      	adds	r3, #24
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d02f      	beq.n	80134a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013448:	78fb      	ldrb	r3, [r7, #3]
 801344a:	f003 020f 	and.w	r2, r3, #15
 801344e:	6879      	ldr	r1, [r7, #4]
 8013450:	4613      	mov	r3, r2
 8013452:	009b      	lsls	r3, r3, #2
 8013454:	4413      	add	r3, r2
 8013456:	009b      	lsls	r3, r3, #2
 8013458:	440b      	add	r3, r1
 801345a:	3318      	adds	r3, #24
 801345c:	681a      	ldr	r2, [r3, #0]
 801345e:	78fb      	ldrb	r3, [r7, #3]
 8013460:	f003 010f 	and.w	r1, r3, #15
 8013464:	68f8      	ldr	r0, [r7, #12]
 8013466:	460b      	mov	r3, r1
 8013468:	009b      	lsls	r3, r3, #2
 801346a:	440b      	add	r3, r1
 801346c:	00db      	lsls	r3, r3, #3
 801346e:	4403      	add	r3, r0
 8013470:	3320      	adds	r3, #32
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	fbb2 f1f3 	udiv	r1, r2, r3
 8013478:	fb01 f303 	mul.w	r3, r1, r3
 801347c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801347e:	2b00      	cmp	r3, #0
 8013480:	d112      	bne.n	80134a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013482:	78fb      	ldrb	r3, [r7, #3]
 8013484:	f003 020f 	and.w	r2, r3, #15
 8013488:	6879      	ldr	r1, [r7, #4]
 801348a:	4613      	mov	r3, r2
 801348c:	009b      	lsls	r3, r3, #2
 801348e:	4413      	add	r3, r2
 8013490:	009b      	lsls	r3, r3, #2
 8013492:	440b      	add	r3, r1
 8013494:	3318      	adds	r3, #24
 8013496:	2200      	movs	r2, #0
 8013498:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801349a:	78f9      	ldrb	r1, [r7, #3]
 801349c:	2300      	movs	r3, #0
 801349e:	2200      	movs	r2, #0
 80134a0:	6878      	ldr	r0, [r7, #4]
 80134a2:	f005 fe0a 	bl	80190ba <USBD_LL_Transmit>
 80134a6:	e01f      	b.n	80134e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80134a8:	68bb      	ldr	r3, [r7, #8]
 80134aa:	2200      	movs	r2, #0
 80134ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	33b0      	adds	r3, #176	@ 0xb0
 80134ba:	009b      	lsls	r3, r3, #2
 80134bc:	4413      	add	r3, r2
 80134be:	685b      	ldr	r3, [r3, #4]
 80134c0:	691b      	ldr	r3, [r3, #16]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d010      	beq.n	80134e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80134cc:	687a      	ldr	r2, [r7, #4]
 80134ce:	33b0      	adds	r3, #176	@ 0xb0
 80134d0:	009b      	lsls	r3, r3, #2
 80134d2:	4413      	add	r3, r2
 80134d4:	685b      	ldr	r3, [r3, #4]
 80134d6:	691b      	ldr	r3, [r3, #16]
 80134d8:	68ba      	ldr	r2, [r7, #8]
 80134da:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80134de:	68ba      	ldr	r2, [r7, #8]
 80134e0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80134e4:	78fa      	ldrb	r2, [r7, #3]
 80134e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80134e8:	2300      	movs	r3, #0
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3710      	adds	r7, #16
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}

080134f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80134f2:	b580      	push	{r7, lr}
 80134f4:	b084      	sub	sp, #16
 80134f6:	af00      	add	r7, sp, #0
 80134f8:	6078      	str	r0, [r7, #4]
 80134fa:	460b      	mov	r3, r1
 80134fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	32b0      	adds	r2, #176	@ 0xb0
 8013508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801350c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	32b0      	adds	r2, #176	@ 0xb0
 8013518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d101      	bne.n	8013524 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013520:	2303      	movs	r3, #3
 8013522:	e01a      	b.n	801355a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013524:	78fb      	ldrb	r3, [r7, #3]
 8013526:	4619      	mov	r1, r3
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f005 fe08 	bl	801913e <USBD_LL_GetRxDataSize>
 801352e:	4602      	mov	r2, r0
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801353c:	687a      	ldr	r2, [r7, #4]
 801353e:	33b0      	adds	r3, #176	@ 0xb0
 8013540:	009b      	lsls	r3, r3, #2
 8013542:	4413      	add	r3, r2
 8013544:	685b      	ldr	r3, [r3, #4]
 8013546:	68db      	ldr	r3, [r3, #12]
 8013548:	68fa      	ldr	r2, [r7, #12]
 801354a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801354e:	68fa      	ldr	r2, [r7, #12]
 8013550:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8013554:	4611      	mov	r1, r2
 8013556:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013558:	2300      	movs	r3, #0
}
 801355a:	4618      	mov	r0, r3
 801355c:	3710      	adds	r7, #16
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}

08013562 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013562:	b580      	push	{r7, lr}
 8013564:	b084      	sub	sp, #16
 8013566:	af00      	add	r7, sp, #0
 8013568:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	32b0      	adds	r2, #176	@ 0xb0
 8013574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013578:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d101      	bne.n	8013584 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013580:	2303      	movs	r3, #3
 8013582:	e024      	b.n	80135ce <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801358a:	687a      	ldr	r2, [r7, #4]
 801358c:	33b0      	adds	r3, #176	@ 0xb0
 801358e:	009b      	lsls	r3, r3, #2
 8013590:	4413      	add	r3, r2
 8013592:	685b      	ldr	r3, [r3, #4]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d019      	beq.n	80135cc <USBD_CDC_EP0_RxReady+0x6a>
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801359e:	2bff      	cmp	r3, #255	@ 0xff
 80135a0:	d014      	beq.n	80135cc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	33b0      	adds	r3, #176	@ 0xb0
 80135ac:	009b      	lsls	r3, r3, #2
 80135ae:	4413      	add	r3, r2
 80135b0:	685b      	ldr	r3, [r3, #4]
 80135b2:	689b      	ldr	r3, [r3, #8]
 80135b4:	68fa      	ldr	r2, [r7, #12]
 80135b6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80135ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80135bc:	68fa      	ldr	r2, [r7, #12]
 80135be:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80135c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	22ff      	movs	r2, #255	@ 0xff
 80135c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80135cc:	2300      	movs	r3, #0
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	3710      	adds	r7, #16
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}
	...

080135d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b086      	sub	sp, #24
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80135e0:	2182      	movs	r1, #130	@ 0x82
 80135e2:	4818      	ldr	r0, [pc, #96]	@ (8013644 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80135e4:	f000 fcbd 	bl	8013f62 <USBD_GetEpDesc>
 80135e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80135ea:	2101      	movs	r1, #1
 80135ec:	4815      	ldr	r0, [pc, #84]	@ (8013644 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80135ee:	f000 fcb8 	bl	8013f62 <USBD_GetEpDesc>
 80135f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80135f4:	2181      	movs	r1, #129	@ 0x81
 80135f6:	4813      	ldr	r0, [pc, #76]	@ (8013644 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80135f8:	f000 fcb3 	bl	8013f62 <USBD_GetEpDesc>
 80135fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d002      	beq.n	801360a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	2210      	movs	r2, #16
 8013608:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d006      	beq.n	801361e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	2200      	movs	r2, #0
 8013614:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013618:	711a      	strb	r2, [r3, #4]
 801361a:	2200      	movs	r2, #0
 801361c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d006      	beq.n	8013632 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	2200      	movs	r2, #0
 8013628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801362c:	711a      	strb	r2, [r3, #4]
 801362e:	2200      	movs	r2, #0
 8013630:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	2243      	movs	r2, #67	@ 0x43
 8013636:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013638:	4b02      	ldr	r3, [pc, #8]	@ (8013644 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801363a:	4618      	mov	r0, r3
 801363c:	3718      	adds	r7, #24
 801363e:	46bd      	mov	sp, r7
 8013640:	bd80      	pop	{r7, pc}
 8013642:	bf00      	nop
 8013644:	20000084 	.word	0x20000084

08013648 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b086      	sub	sp, #24
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013650:	2182      	movs	r1, #130	@ 0x82
 8013652:	4818      	ldr	r0, [pc, #96]	@ (80136b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013654:	f000 fc85 	bl	8013f62 <USBD_GetEpDesc>
 8013658:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801365a:	2101      	movs	r1, #1
 801365c:	4815      	ldr	r0, [pc, #84]	@ (80136b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801365e:	f000 fc80 	bl	8013f62 <USBD_GetEpDesc>
 8013662:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013664:	2181      	movs	r1, #129	@ 0x81
 8013666:	4813      	ldr	r0, [pc, #76]	@ (80136b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013668:	f000 fc7b 	bl	8013f62 <USBD_GetEpDesc>
 801366c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d002      	beq.n	801367a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013674:	697b      	ldr	r3, [r7, #20]
 8013676:	2210      	movs	r2, #16
 8013678:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d006      	beq.n	801368e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	2200      	movs	r2, #0
 8013684:	711a      	strb	r2, [r3, #4]
 8013686:	2200      	movs	r2, #0
 8013688:	f042 0202 	orr.w	r2, r2, #2
 801368c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d006      	beq.n	80136a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	2200      	movs	r2, #0
 8013698:	711a      	strb	r2, [r3, #4]
 801369a:	2200      	movs	r2, #0
 801369c:	f042 0202 	orr.w	r2, r2, #2
 80136a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	2243      	movs	r2, #67	@ 0x43
 80136a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80136a8:	4b02      	ldr	r3, [pc, #8]	@ (80136b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3718      	adds	r7, #24
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}
 80136b2:	bf00      	nop
 80136b4:	20000084 	.word	0x20000084

080136b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b086      	sub	sp, #24
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80136c0:	2182      	movs	r1, #130	@ 0x82
 80136c2:	4818      	ldr	r0, [pc, #96]	@ (8013724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80136c4:	f000 fc4d 	bl	8013f62 <USBD_GetEpDesc>
 80136c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80136ca:	2101      	movs	r1, #1
 80136cc:	4815      	ldr	r0, [pc, #84]	@ (8013724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80136ce:	f000 fc48 	bl	8013f62 <USBD_GetEpDesc>
 80136d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80136d4:	2181      	movs	r1, #129	@ 0x81
 80136d6:	4813      	ldr	r0, [pc, #76]	@ (8013724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80136d8:	f000 fc43 	bl	8013f62 <USBD_GetEpDesc>
 80136dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d002      	beq.n	80136ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	2210      	movs	r2, #16
 80136e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d006      	beq.n	80136fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	2200      	movs	r2, #0
 80136f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80136f8:	711a      	strb	r2, [r3, #4]
 80136fa:	2200      	movs	r2, #0
 80136fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d006      	beq.n	8013712 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2200      	movs	r2, #0
 8013708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801370c:	711a      	strb	r2, [r3, #4]
 801370e:	2200      	movs	r2, #0
 8013710:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2243      	movs	r2, #67	@ 0x43
 8013716:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013718:	4b02      	ldr	r3, [pc, #8]	@ (8013724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801371a:	4618      	mov	r0, r3
 801371c:	3718      	adds	r7, #24
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}
 8013722:	bf00      	nop
 8013724:	20000084 	.word	0x20000084

08013728 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013728:	b480      	push	{r7}
 801372a:	b083      	sub	sp, #12
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	220a      	movs	r2, #10
 8013734:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013736:	4b03      	ldr	r3, [pc, #12]	@ (8013744 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013738:	4618      	mov	r0, r3
 801373a:	370c      	adds	r7, #12
 801373c:	46bd      	mov	sp, r7
 801373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013742:	4770      	bx	lr
 8013744:	20000040 	.word	0x20000040

08013748 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013748:	b480      	push	{r7}
 801374a:	b083      	sub	sp, #12
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d101      	bne.n	801375c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013758:	2303      	movs	r3, #3
 801375a:	e009      	b.n	8013770 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	33b0      	adds	r3, #176	@ 0xb0
 8013766:	009b      	lsls	r3, r3, #2
 8013768:	4413      	add	r3, r2
 801376a:	683a      	ldr	r2, [r7, #0]
 801376c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801376e:	2300      	movs	r3, #0
}
 8013770:	4618      	mov	r0, r3
 8013772:	370c      	adds	r7, #12
 8013774:	46bd      	mov	sp, r7
 8013776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377a:	4770      	bx	lr

0801377c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801377c:	b480      	push	{r7}
 801377e:	b087      	sub	sp, #28
 8013780:	af00      	add	r7, sp, #0
 8013782:	60f8      	str	r0, [r7, #12]
 8013784:	60b9      	str	r1, [r7, #8]
 8013786:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	32b0      	adds	r2, #176	@ 0xb0
 8013792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013796:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013798:	697b      	ldr	r3, [r7, #20]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d101      	bne.n	80137a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801379e:	2303      	movs	r3, #3
 80137a0:	e008      	b.n	80137b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	68ba      	ldr	r2, [r7, #8]
 80137a6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	687a      	ldr	r2, [r7, #4]
 80137ae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80137b2:	2300      	movs	r3, #0
}
 80137b4:	4618      	mov	r0, r3
 80137b6:	371c      	adds	r7, #28
 80137b8:	46bd      	mov	sp, r7
 80137ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137be:	4770      	bx	lr

080137c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80137c0:	b480      	push	{r7}
 80137c2:	b085      	sub	sp, #20
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
 80137c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	32b0      	adds	r2, #176	@ 0xb0
 80137d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d101      	bne.n	80137e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80137e0:	2303      	movs	r3, #3
 80137e2:	e004      	b.n	80137ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	683a      	ldr	r2, [r7, #0]
 80137e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80137ec:	2300      	movs	r3, #0
}
 80137ee:	4618      	mov	r0, r3
 80137f0:	3714      	adds	r7, #20
 80137f2:	46bd      	mov	sp, r7
 80137f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f8:	4770      	bx	lr
	...

080137fc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b084      	sub	sp, #16
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	32b0      	adds	r2, #176	@ 0xb0
 801380e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013812:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013814:	2301      	movs	r3, #1
 8013816:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d101      	bne.n	8013822 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801381e:	2303      	movs	r3, #3
 8013820:	e025      	b.n	801386e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013828:	2b00      	cmp	r3, #0
 801382a:	d11f      	bne.n	801386c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	2201      	movs	r2, #1
 8013830:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013834:	4b10      	ldr	r3, [pc, #64]	@ (8013878 <USBD_CDC_TransmitPacket+0x7c>)
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	f003 020f 	and.w	r2, r3, #15
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	4613      	mov	r3, r2
 8013846:	009b      	lsls	r3, r3, #2
 8013848:	4413      	add	r3, r2
 801384a:	009b      	lsls	r3, r3, #2
 801384c:	4403      	add	r3, r0
 801384e:	3318      	adds	r3, #24
 8013850:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013852:	4b09      	ldr	r3, [pc, #36]	@ (8013878 <USBD_CDC_TransmitPacket+0x7c>)
 8013854:	7819      	ldrb	r1, [r3, #0]
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013862:	6878      	ldr	r0, [r7, #4]
 8013864:	f005 fc29 	bl	80190ba <USBD_LL_Transmit>

    ret = USBD_OK;
 8013868:	2300      	movs	r3, #0
 801386a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801386c:	7bfb      	ldrb	r3, [r7, #15]
}
 801386e:	4618      	mov	r0, r3
 8013870:	3710      	adds	r7, #16
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}
 8013876:	bf00      	nop
 8013878:	200000c7 	.word	0x200000c7

0801387c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b084      	sub	sp, #16
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	32b0      	adds	r2, #176	@ 0xb0
 801388e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013892:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	32b0      	adds	r2, #176	@ 0xb0
 801389e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d101      	bne.n	80138aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80138a6:	2303      	movs	r3, #3
 80138a8:	e018      	b.n	80138dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	7c1b      	ldrb	r3, [r3, #16]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d10a      	bne.n	80138c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80138b2:	4b0c      	ldr	r3, [pc, #48]	@ (80138e4 <USBD_CDC_ReceivePacket+0x68>)
 80138b4:	7819      	ldrb	r1, [r3, #0]
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80138bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	f005 fc1b 	bl	80190fc <USBD_LL_PrepareReceive>
 80138c6:	e008      	b.n	80138da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80138c8:	4b06      	ldr	r3, [pc, #24]	@ (80138e4 <USBD_CDC_ReceivePacket+0x68>)
 80138ca:	7819      	ldrb	r1, [r3, #0]
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80138d2:	2340      	movs	r3, #64	@ 0x40
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f005 fc11 	bl	80190fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80138da:	2300      	movs	r3, #0
}
 80138dc:	4618      	mov	r0, r3
 80138de:	3710      	adds	r7, #16
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}
 80138e4:	200000c8 	.word	0x200000c8

080138e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b086      	sub	sp, #24
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	60f8      	str	r0, [r7, #12]
 80138f0:	60b9      	str	r1, [r7, #8]
 80138f2:	4613      	mov	r3, r2
 80138f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d101      	bne.n	8013900 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80138fc:	2303      	movs	r3, #3
 80138fe:	e01f      	b.n	8013940 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	2200      	movs	r2, #0
 8013904:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	2200      	movs	r2, #0
 801390c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	2200      	movs	r2, #0
 8013914:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d003      	beq.n	8013926 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	68ba      	ldr	r2, [r7, #8]
 8013922:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	2201      	movs	r2, #1
 801392a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	79fa      	ldrb	r2, [r7, #7]
 8013932:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013934:	68f8      	ldr	r0, [r7, #12]
 8013936:	f005 fa75 	bl	8018e24 <USBD_LL_Init>
 801393a:	4603      	mov	r3, r0
 801393c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801393e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013940:	4618      	mov	r0, r3
 8013942:	3718      	adds	r7, #24
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}

08013948 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b084      	sub	sp, #16
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013952:	2300      	movs	r3, #0
 8013954:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d101      	bne.n	8013960 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801395c:	2303      	movs	r3, #3
 801395e:	e025      	b.n	80139ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	683a      	ldr	r2, [r7, #0]
 8013964:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	32ae      	adds	r2, #174	@ 0xae
 8013972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013978:	2b00      	cmp	r3, #0
 801397a:	d00f      	beq.n	801399c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	32ae      	adds	r2, #174	@ 0xae
 8013986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801398a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801398c:	f107 020e 	add.w	r2, r7, #14
 8013990:	4610      	mov	r0, r2
 8013992:	4798      	blx	r3
 8013994:	4602      	mov	r2, r0
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80139a2:	1c5a      	adds	r2, r3, #1
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80139aa:	2300      	movs	r3, #0
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	3710      	adds	r7, #16
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}

080139b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b082      	sub	sp, #8
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f005 fa93 	bl	8018ee8 <USBD_LL_Start>
 80139c2:	4603      	mov	r3, r0
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3708      	adds	r7, #8
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}

080139cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80139cc:	b480      	push	{r7}
 80139ce:	b083      	sub	sp, #12
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80139d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80139d6:	4618      	mov	r0, r3
 80139d8:	370c      	adds	r7, #12
 80139da:	46bd      	mov	sp, r7
 80139dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e0:	4770      	bx	lr

080139e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80139e2:	b580      	push	{r7, lr}
 80139e4:	b084      	sub	sp, #16
 80139e6:	af00      	add	r7, sp, #0
 80139e8:	6078      	str	r0, [r7, #4]
 80139ea:	460b      	mov	r3, r1
 80139ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80139ee:	2300      	movs	r3, #0
 80139f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d009      	beq.n	8013a10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	78fa      	ldrb	r2, [r7, #3]
 8013a06:	4611      	mov	r1, r2
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	4798      	blx	r3
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a12:	4618      	mov	r0, r3
 8013a14:	3710      	adds	r7, #16
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}

08013a1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013a1a:	b580      	push	{r7, lr}
 8013a1c:	b084      	sub	sp, #16
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	6078      	str	r0, [r7, #4]
 8013a22:	460b      	mov	r3, r1
 8013a24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a26:	2300      	movs	r3, #0
 8013a28:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a30:	685b      	ldr	r3, [r3, #4]
 8013a32:	78fa      	ldrb	r2, [r7, #3]
 8013a34:	4611      	mov	r1, r2
 8013a36:	6878      	ldr	r0, [r7, #4]
 8013a38:	4798      	blx	r3
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d001      	beq.n	8013a44 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013a40:	2303      	movs	r3, #3
 8013a42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a46:	4618      	mov	r0, r3
 8013a48:	3710      	adds	r7, #16
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	bd80      	pop	{r7, pc}

08013a4e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013a4e:	b580      	push	{r7, lr}
 8013a50:	b084      	sub	sp, #16
 8013a52:	af00      	add	r7, sp, #0
 8013a54:	6078      	str	r0, [r7, #4]
 8013a56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013a5e:	6839      	ldr	r1, [r7, #0]
 8013a60:	4618      	mov	r0, r3
 8013a62:	f001 f8a4 	bl	8014bae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2201      	movs	r2, #1
 8013a6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013a74:	461a      	mov	r2, r3
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013a82:	f003 031f 	and.w	r3, r3, #31
 8013a86:	2b02      	cmp	r3, #2
 8013a88:	d01a      	beq.n	8013ac0 <USBD_LL_SetupStage+0x72>
 8013a8a:	2b02      	cmp	r3, #2
 8013a8c:	d822      	bhi.n	8013ad4 <USBD_LL_SetupStage+0x86>
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d002      	beq.n	8013a98 <USBD_LL_SetupStage+0x4a>
 8013a92:	2b01      	cmp	r3, #1
 8013a94:	d00a      	beq.n	8013aac <USBD_LL_SetupStage+0x5e>
 8013a96:	e01d      	b.n	8013ad4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013a9e:	4619      	mov	r1, r3
 8013aa0:	6878      	ldr	r0, [r7, #4]
 8013aa2:	f000 fad1 	bl	8014048 <USBD_StdDevReq>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8013aaa:	e020      	b.n	8013aee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013ab2:	4619      	mov	r1, r3
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f000 fb39 	bl	801412c <USBD_StdItfReq>
 8013aba:	4603      	mov	r3, r0
 8013abc:	73fb      	strb	r3, [r7, #15]
      break;
 8013abe:	e016      	b.n	8013aee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013ac6:	4619      	mov	r1, r3
 8013ac8:	6878      	ldr	r0, [r7, #4]
 8013aca:	f000 fb9b 	bl	8014204 <USBD_StdEPReq>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8013ad2:	e00c      	b.n	8013aee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013ada:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013ade:	b2db      	uxtb	r3, r3
 8013ae0:	4619      	mov	r1, r3
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f005 fa60 	bl	8018fa8 <USBD_LL_StallEP>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	73fb      	strb	r3, [r7, #15]
      break;
 8013aec:	bf00      	nop
  }

  return ret;
 8013aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3710      	adds	r7, #16
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}

08013af8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b086      	sub	sp, #24
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	60f8      	str	r0, [r7, #12]
 8013b00:	460b      	mov	r3, r1
 8013b02:	607a      	str	r2, [r7, #4]
 8013b04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013b06:	2300      	movs	r3, #0
 8013b08:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013b0a:	7afb      	ldrb	r3, [r7, #11]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d16e      	bne.n	8013bee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013b16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013b1e:	2b03      	cmp	r3, #3
 8013b20:	f040 8098 	bne.w	8013c54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	689a      	ldr	r2, [r3, #8]
 8013b28:	693b      	ldr	r3, [r7, #16]
 8013b2a:	68db      	ldr	r3, [r3, #12]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d913      	bls.n	8013b58 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013b30:	693b      	ldr	r3, [r7, #16]
 8013b32:	689a      	ldr	r2, [r3, #8]
 8013b34:	693b      	ldr	r3, [r7, #16]
 8013b36:	68db      	ldr	r3, [r3, #12]
 8013b38:	1ad2      	subs	r2, r2, r3
 8013b3a:	693b      	ldr	r3, [r7, #16]
 8013b3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	68da      	ldr	r2, [r3, #12]
 8013b42:	693b      	ldr	r3, [r7, #16]
 8013b44:	689b      	ldr	r3, [r3, #8]
 8013b46:	4293      	cmp	r3, r2
 8013b48:	bf28      	it	cs
 8013b4a:	4613      	movcs	r3, r2
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	6879      	ldr	r1, [r7, #4]
 8013b50:	68f8      	ldr	r0, [r7, #12]
 8013b52:	f001 f92c 	bl	8014dae <USBD_CtlContinueRx>
 8013b56:	e07d      	b.n	8013c54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013b5e:	f003 031f 	and.w	r3, r3, #31
 8013b62:	2b02      	cmp	r3, #2
 8013b64:	d014      	beq.n	8013b90 <USBD_LL_DataOutStage+0x98>
 8013b66:	2b02      	cmp	r3, #2
 8013b68:	d81d      	bhi.n	8013ba6 <USBD_LL_DataOutStage+0xae>
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d002      	beq.n	8013b74 <USBD_LL_DataOutStage+0x7c>
 8013b6e:	2b01      	cmp	r3, #1
 8013b70:	d003      	beq.n	8013b7a <USBD_LL_DataOutStage+0x82>
 8013b72:	e018      	b.n	8013ba6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013b74:	2300      	movs	r3, #0
 8013b76:	75bb      	strb	r3, [r7, #22]
            break;
 8013b78:	e018      	b.n	8013bac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013b80:	b2db      	uxtb	r3, r3
 8013b82:	4619      	mov	r1, r3
 8013b84:	68f8      	ldr	r0, [r7, #12]
 8013b86:	f000 f9d2 	bl	8013f2e <USBD_CoreFindIF>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	75bb      	strb	r3, [r7, #22]
            break;
 8013b8e:	e00d      	b.n	8013bac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013b96:	b2db      	uxtb	r3, r3
 8013b98:	4619      	mov	r1, r3
 8013b9a:	68f8      	ldr	r0, [r7, #12]
 8013b9c:	f000 f9d4 	bl	8013f48 <USBD_CoreFindEP>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	75bb      	strb	r3, [r7, #22]
            break;
 8013ba4:	e002      	b.n	8013bac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	75bb      	strb	r3, [r7, #22]
            break;
 8013baa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013bac:	7dbb      	ldrb	r3, [r7, #22]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d119      	bne.n	8013be6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	2b03      	cmp	r3, #3
 8013bbc:	d113      	bne.n	8013be6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013bbe:	7dba      	ldrb	r2, [r7, #22]
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	32ae      	adds	r2, #174	@ 0xae
 8013bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bc8:	691b      	ldr	r3, [r3, #16]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d00b      	beq.n	8013be6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013bce:	7dba      	ldrb	r2, [r7, #22]
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013bd6:	7dba      	ldrb	r2, [r7, #22]
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	32ae      	adds	r2, #174	@ 0xae
 8013bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013be0:	691b      	ldr	r3, [r3, #16]
 8013be2:	68f8      	ldr	r0, [r7, #12]
 8013be4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013be6:	68f8      	ldr	r0, [r7, #12]
 8013be8:	f001 f8f2 	bl	8014dd0 <USBD_CtlSendStatus>
 8013bec:	e032      	b.n	8013c54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013bee:	7afb      	ldrb	r3, [r7, #11]
 8013bf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013bf4:	b2db      	uxtb	r3, r3
 8013bf6:	4619      	mov	r1, r3
 8013bf8:	68f8      	ldr	r0, [r7, #12]
 8013bfa:	f000 f9a5 	bl	8013f48 <USBD_CoreFindEP>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013c02:	7dbb      	ldrb	r3, [r7, #22]
 8013c04:	2bff      	cmp	r3, #255	@ 0xff
 8013c06:	d025      	beq.n	8013c54 <USBD_LL_DataOutStage+0x15c>
 8013c08:	7dbb      	ldrb	r3, [r7, #22]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d122      	bne.n	8013c54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c14:	b2db      	uxtb	r3, r3
 8013c16:	2b03      	cmp	r3, #3
 8013c18:	d117      	bne.n	8013c4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013c1a:	7dba      	ldrb	r2, [r7, #22]
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	32ae      	adds	r2, #174	@ 0xae
 8013c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c24:	699b      	ldr	r3, [r3, #24]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d00f      	beq.n	8013c4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013c2a:	7dba      	ldrb	r2, [r7, #22]
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013c32:	7dba      	ldrb	r2, [r7, #22]
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	32ae      	adds	r2, #174	@ 0xae
 8013c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c3c:	699b      	ldr	r3, [r3, #24]
 8013c3e:	7afa      	ldrb	r2, [r7, #11]
 8013c40:	4611      	mov	r1, r2
 8013c42:	68f8      	ldr	r0, [r7, #12]
 8013c44:	4798      	blx	r3
 8013c46:	4603      	mov	r3, r0
 8013c48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013c4a:	7dfb      	ldrb	r3, [r7, #23]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d001      	beq.n	8013c54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013c50:	7dfb      	ldrb	r3, [r7, #23]
 8013c52:	e000      	b.n	8013c56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013c54:	2300      	movs	r3, #0
}
 8013c56:	4618      	mov	r0, r3
 8013c58:	3718      	adds	r7, #24
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}

08013c5e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013c5e:	b580      	push	{r7, lr}
 8013c60:	b086      	sub	sp, #24
 8013c62:	af00      	add	r7, sp, #0
 8013c64:	60f8      	str	r0, [r7, #12]
 8013c66:	460b      	mov	r3, r1
 8013c68:	607a      	str	r2, [r7, #4]
 8013c6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013c6c:	7afb      	ldrb	r3, [r7, #11]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d16f      	bne.n	8013d52 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	3314      	adds	r3, #20
 8013c76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013c7e:	2b02      	cmp	r3, #2
 8013c80:	d15a      	bne.n	8013d38 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013c82:	693b      	ldr	r3, [r7, #16]
 8013c84:	689a      	ldr	r2, [r3, #8]
 8013c86:	693b      	ldr	r3, [r7, #16]
 8013c88:	68db      	ldr	r3, [r3, #12]
 8013c8a:	429a      	cmp	r2, r3
 8013c8c:	d914      	bls.n	8013cb8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013c8e:	693b      	ldr	r3, [r7, #16]
 8013c90:	689a      	ldr	r2, [r3, #8]
 8013c92:	693b      	ldr	r3, [r7, #16]
 8013c94:	68db      	ldr	r3, [r3, #12]
 8013c96:	1ad2      	subs	r2, r2, r3
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013c9c:	693b      	ldr	r3, [r7, #16]
 8013c9e:	689b      	ldr	r3, [r3, #8]
 8013ca0:	461a      	mov	r2, r3
 8013ca2:	6879      	ldr	r1, [r7, #4]
 8013ca4:	68f8      	ldr	r0, [r7, #12]
 8013ca6:	f001 f854 	bl	8014d52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013caa:	2300      	movs	r3, #0
 8013cac:	2200      	movs	r2, #0
 8013cae:	2100      	movs	r1, #0
 8013cb0:	68f8      	ldr	r0, [r7, #12]
 8013cb2:	f005 fa23 	bl	80190fc <USBD_LL_PrepareReceive>
 8013cb6:	e03f      	b.n	8013d38 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013cb8:	693b      	ldr	r3, [r7, #16]
 8013cba:	68da      	ldr	r2, [r3, #12]
 8013cbc:	693b      	ldr	r3, [r7, #16]
 8013cbe:	689b      	ldr	r3, [r3, #8]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d11c      	bne.n	8013cfe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013cc4:	693b      	ldr	r3, [r7, #16]
 8013cc6:	685a      	ldr	r2, [r3, #4]
 8013cc8:	693b      	ldr	r3, [r7, #16]
 8013cca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	d316      	bcc.n	8013cfe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013cd0:	693b      	ldr	r3, [r7, #16]
 8013cd2:	685a      	ldr	r2, [r3, #4]
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d20f      	bcs.n	8013cfe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013cde:	2200      	movs	r2, #0
 8013ce0:	2100      	movs	r1, #0
 8013ce2:	68f8      	ldr	r0, [r7, #12]
 8013ce4:	f001 f835 	bl	8014d52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	2200      	movs	r2, #0
 8013cec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	2100      	movs	r1, #0
 8013cf6:	68f8      	ldr	r0, [r7, #12]
 8013cf8:	f005 fa00 	bl	80190fc <USBD_LL_PrepareReceive>
 8013cfc:	e01c      	b.n	8013d38 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d04:	b2db      	uxtb	r3, r3
 8013d06:	2b03      	cmp	r3, #3
 8013d08:	d10f      	bne.n	8013d2a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d10:	68db      	ldr	r3, [r3, #12]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d009      	beq.n	8013d2a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	2200      	movs	r2, #0
 8013d1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d24:	68db      	ldr	r3, [r3, #12]
 8013d26:	68f8      	ldr	r0, [r7, #12]
 8013d28:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013d2a:	2180      	movs	r1, #128	@ 0x80
 8013d2c:	68f8      	ldr	r0, [r7, #12]
 8013d2e:	f005 f93b 	bl	8018fa8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013d32:	68f8      	ldr	r0, [r7, #12]
 8013d34:	f001 f85f 	bl	8014df6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d03a      	beq.n	8013db8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013d42:	68f8      	ldr	r0, [r7, #12]
 8013d44:	f7ff fe42 	bl	80139cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013d50:	e032      	b.n	8013db8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013d52:	7afb      	ldrb	r3, [r7, #11]
 8013d54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013d58:	b2db      	uxtb	r3, r3
 8013d5a:	4619      	mov	r1, r3
 8013d5c:	68f8      	ldr	r0, [r7, #12]
 8013d5e:	f000 f8f3 	bl	8013f48 <USBD_CoreFindEP>
 8013d62:	4603      	mov	r3, r0
 8013d64:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013d66:	7dfb      	ldrb	r3, [r7, #23]
 8013d68:	2bff      	cmp	r3, #255	@ 0xff
 8013d6a:	d025      	beq.n	8013db8 <USBD_LL_DataInStage+0x15a>
 8013d6c:	7dfb      	ldrb	r3, [r7, #23]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d122      	bne.n	8013db8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d78:	b2db      	uxtb	r3, r3
 8013d7a:	2b03      	cmp	r3, #3
 8013d7c:	d11c      	bne.n	8013db8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013d7e:	7dfa      	ldrb	r2, [r7, #23]
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	32ae      	adds	r2, #174	@ 0xae
 8013d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d88:	695b      	ldr	r3, [r3, #20]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d014      	beq.n	8013db8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013d8e:	7dfa      	ldrb	r2, [r7, #23]
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013d96:	7dfa      	ldrb	r2, [r7, #23]
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	32ae      	adds	r2, #174	@ 0xae
 8013d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013da0:	695b      	ldr	r3, [r3, #20]
 8013da2:	7afa      	ldrb	r2, [r7, #11]
 8013da4:	4611      	mov	r1, r2
 8013da6:	68f8      	ldr	r0, [r7, #12]
 8013da8:	4798      	blx	r3
 8013daa:	4603      	mov	r3, r0
 8013dac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013dae:	7dbb      	ldrb	r3, [r7, #22]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d001      	beq.n	8013db8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013db4:	7dbb      	ldrb	r3, [r7, #22]
 8013db6:	e000      	b.n	8013dba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013db8:	2300      	movs	r3, #0
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3718      	adds	r7, #24
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}

08013dc2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013dc2:	b580      	push	{r7, lr}
 8013dc4:	b084      	sub	sp, #16
 8013dc6:	af00      	add	r7, sp, #0
 8013dc8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2201      	movs	r2, #1
 8013dd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	2200      	movs	r2, #0
 8013dda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	2200      	movs	r2, #0
 8013de2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2200      	movs	r2, #0
 8013de8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	2200      	movs	r2, #0
 8013df0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d014      	beq.n	8013e28 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d00e      	beq.n	8013e28 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	687a      	ldr	r2, [r7, #4]
 8013e14:	6852      	ldr	r2, [r2, #4]
 8013e16:	b2d2      	uxtb	r2, r2
 8013e18:	4611      	mov	r1, r2
 8013e1a:	6878      	ldr	r0, [r7, #4]
 8013e1c:	4798      	blx	r3
 8013e1e:	4603      	mov	r3, r0
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d001      	beq.n	8013e28 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013e24:	2303      	movs	r3, #3
 8013e26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013e28:	2340      	movs	r3, #64	@ 0x40
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	2100      	movs	r1, #0
 8013e2e:	6878      	ldr	r0, [r7, #4]
 8013e30:	f005 f875 	bl	8018f1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	2201      	movs	r2, #1
 8013e38:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	2240      	movs	r2, #64	@ 0x40
 8013e40:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013e44:	2340      	movs	r3, #64	@ 0x40
 8013e46:	2200      	movs	r2, #0
 8013e48:	2180      	movs	r1, #128	@ 0x80
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f005 f867 	bl	8018f1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	2201      	movs	r2, #1
 8013e54:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2240      	movs	r2, #64	@ 0x40
 8013e5a:	621a      	str	r2, [r3, #32]

  return ret;
 8013e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e5e:	4618      	mov	r0, r3
 8013e60:	3710      	adds	r7, #16
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}

08013e66 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013e66:	b480      	push	{r7}
 8013e68:	b083      	sub	sp, #12
 8013e6a:	af00      	add	r7, sp, #0
 8013e6c:	6078      	str	r0, [r7, #4]
 8013e6e:	460b      	mov	r3, r1
 8013e70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	78fa      	ldrb	r2, [r7, #3]
 8013e76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013e78:	2300      	movs	r3, #0
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	370c      	adds	r7, #12
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e84:	4770      	bx	lr

08013e86 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013e86:	b480      	push	{r7}
 8013e88:	b083      	sub	sp, #12
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e94:	b2db      	uxtb	r3, r3
 8013e96:	2b04      	cmp	r3, #4
 8013e98:	d006      	beq.n	8013ea8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ea0:	b2da      	uxtb	r2, r3
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2204      	movs	r2, #4
 8013eac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013eb0:	2300      	movs	r3, #0
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	370c      	adds	r7, #12
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebc:	4770      	bx	lr

08013ebe <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013ebe:	b480      	push	{r7}
 8013ec0:	b083      	sub	sp, #12
 8013ec2:	af00      	add	r7, sp, #0
 8013ec4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ecc:	b2db      	uxtb	r3, r3
 8013ece:	2b04      	cmp	r3, #4
 8013ed0:	d106      	bne.n	8013ee0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013ed8:	b2da      	uxtb	r2, r3
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013ee0:	2300      	movs	r3, #0
}
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	370c      	adds	r7, #12
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eec:	4770      	bx	lr

08013eee <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013eee:	b580      	push	{r7, lr}
 8013ef0:	b082      	sub	sp, #8
 8013ef2:	af00      	add	r7, sp, #0
 8013ef4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013efc:	b2db      	uxtb	r3, r3
 8013efe:	2b03      	cmp	r3, #3
 8013f00:	d110      	bne.n	8013f24 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d00b      	beq.n	8013f24 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f12:	69db      	ldr	r3, [r3, #28]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d005      	beq.n	8013f24 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f1e:	69db      	ldr	r3, [r3, #28]
 8013f20:	6878      	ldr	r0, [r7, #4]
 8013f22:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013f24:	2300      	movs	r3, #0
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3708      	adds	r7, #8
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}

08013f2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013f2e:	b480      	push	{r7}
 8013f30:	b083      	sub	sp, #12
 8013f32:	af00      	add	r7, sp, #0
 8013f34:	6078      	str	r0, [r7, #4]
 8013f36:	460b      	mov	r3, r1
 8013f38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013f3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	370c      	adds	r7, #12
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr

08013f48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013f48:	b480      	push	{r7}
 8013f4a:	b083      	sub	sp, #12
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	460b      	mov	r3, r1
 8013f52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013f54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013f56:	4618      	mov	r0, r3
 8013f58:	370c      	adds	r7, #12
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f60:	4770      	bx	lr

08013f62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013f62:	b580      	push	{r7, lr}
 8013f64:	b086      	sub	sp, #24
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	6078      	str	r0, [r7, #4]
 8013f6a:	460b      	mov	r3, r1
 8013f6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013f76:	2300      	movs	r3, #0
 8013f78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	885b      	ldrh	r3, [r3, #2]
 8013f7e:	b29b      	uxth	r3, r3
 8013f80:	68fa      	ldr	r2, [r7, #12]
 8013f82:	7812      	ldrb	r2, [r2, #0]
 8013f84:	4293      	cmp	r3, r2
 8013f86:	d91f      	bls.n	8013fc8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	781b      	ldrb	r3, [r3, #0]
 8013f8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013f8e:	e013      	b.n	8013fb8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013f90:	f107 030a 	add.w	r3, r7, #10
 8013f94:	4619      	mov	r1, r3
 8013f96:	6978      	ldr	r0, [r7, #20]
 8013f98:	f000 f81b 	bl	8013fd2 <USBD_GetNextDesc>
 8013f9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	785b      	ldrb	r3, [r3, #1]
 8013fa2:	2b05      	cmp	r3, #5
 8013fa4:	d108      	bne.n	8013fb8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013faa:	693b      	ldr	r3, [r7, #16]
 8013fac:	789b      	ldrb	r3, [r3, #2]
 8013fae:	78fa      	ldrb	r2, [r7, #3]
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	d008      	beq.n	8013fc6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	885b      	ldrh	r3, [r3, #2]
 8013fbc:	b29a      	uxth	r2, r3
 8013fbe:	897b      	ldrh	r3, [r7, #10]
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d8e5      	bhi.n	8013f90 <USBD_GetEpDesc+0x2e>
 8013fc4:	e000      	b.n	8013fc8 <USBD_GetEpDesc+0x66>
          break;
 8013fc6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013fc8:	693b      	ldr	r3, [r7, #16]
}
 8013fca:	4618      	mov	r0, r3
 8013fcc:	3718      	adds	r7, #24
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd80      	pop	{r7, pc}

08013fd2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013fd2:	b480      	push	{r7}
 8013fd4:	b085      	sub	sp, #20
 8013fd6:	af00      	add	r7, sp, #0
 8013fd8:	6078      	str	r0, [r7, #4]
 8013fda:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013fe0:	683b      	ldr	r3, [r7, #0]
 8013fe2:	881b      	ldrh	r3, [r3, #0]
 8013fe4:	68fa      	ldr	r2, [r7, #12]
 8013fe6:	7812      	ldrb	r2, [r2, #0]
 8013fe8:	4413      	add	r3, r2
 8013fea:	b29a      	uxth	r2, r3
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	781b      	ldrb	r3, [r3, #0]
 8013ff4:	461a      	mov	r2, r3
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	4413      	add	r3, r2
 8013ffa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013ffc:	68fb      	ldr	r3, [r7, #12]
}
 8013ffe:	4618      	mov	r0, r3
 8014000:	3714      	adds	r7, #20
 8014002:	46bd      	mov	sp, r7
 8014004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014008:	4770      	bx	lr

0801400a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801400a:	b480      	push	{r7}
 801400c:	b087      	sub	sp, #28
 801400e:	af00      	add	r7, sp, #0
 8014010:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	781b      	ldrb	r3, [r3, #0]
 801401a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	3301      	adds	r3, #1
 8014020:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	781b      	ldrb	r3, [r3, #0]
 8014026:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014028:	8a3b      	ldrh	r3, [r7, #16]
 801402a:	021b      	lsls	r3, r3, #8
 801402c:	b21a      	sxth	r2, r3
 801402e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014032:	4313      	orrs	r3, r2
 8014034:	b21b      	sxth	r3, r3
 8014036:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014038:	89fb      	ldrh	r3, [r7, #14]
}
 801403a:	4618      	mov	r0, r3
 801403c:	371c      	adds	r7, #28
 801403e:	46bd      	mov	sp, r7
 8014040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014044:	4770      	bx	lr
	...

08014048 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b084      	sub	sp, #16
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
 8014050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014052:	2300      	movs	r3, #0
 8014054:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	781b      	ldrb	r3, [r3, #0]
 801405a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801405e:	2b40      	cmp	r3, #64	@ 0x40
 8014060:	d005      	beq.n	801406e <USBD_StdDevReq+0x26>
 8014062:	2b40      	cmp	r3, #64	@ 0x40
 8014064:	d857      	bhi.n	8014116 <USBD_StdDevReq+0xce>
 8014066:	2b00      	cmp	r3, #0
 8014068:	d00f      	beq.n	801408a <USBD_StdDevReq+0x42>
 801406a:	2b20      	cmp	r3, #32
 801406c:	d153      	bne.n	8014116 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	32ae      	adds	r2, #174	@ 0xae
 8014078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801407c:	689b      	ldr	r3, [r3, #8]
 801407e:	6839      	ldr	r1, [r7, #0]
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	4798      	blx	r3
 8014084:	4603      	mov	r3, r0
 8014086:	73fb      	strb	r3, [r7, #15]
      break;
 8014088:	e04a      	b.n	8014120 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801408a:	683b      	ldr	r3, [r7, #0]
 801408c:	785b      	ldrb	r3, [r3, #1]
 801408e:	2b09      	cmp	r3, #9
 8014090:	d83b      	bhi.n	801410a <USBD_StdDevReq+0xc2>
 8014092:	a201      	add	r2, pc, #4	@ (adr r2, 8014098 <USBD_StdDevReq+0x50>)
 8014094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014098:	080140ed 	.word	0x080140ed
 801409c:	08014101 	.word	0x08014101
 80140a0:	0801410b 	.word	0x0801410b
 80140a4:	080140f7 	.word	0x080140f7
 80140a8:	0801410b 	.word	0x0801410b
 80140ac:	080140cb 	.word	0x080140cb
 80140b0:	080140c1 	.word	0x080140c1
 80140b4:	0801410b 	.word	0x0801410b
 80140b8:	080140e3 	.word	0x080140e3
 80140bc:	080140d5 	.word	0x080140d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80140c0:	6839      	ldr	r1, [r7, #0]
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f000 fa3c 	bl	8014540 <USBD_GetDescriptor>
          break;
 80140c8:	e024      	b.n	8014114 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80140ca:	6839      	ldr	r1, [r7, #0]
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f000 fbcb 	bl	8014868 <USBD_SetAddress>
          break;
 80140d2:	e01f      	b.n	8014114 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80140d4:	6839      	ldr	r1, [r7, #0]
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f000 fc0a 	bl	80148f0 <USBD_SetConfig>
 80140dc:	4603      	mov	r3, r0
 80140de:	73fb      	strb	r3, [r7, #15]
          break;
 80140e0:	e018      	b.n	8014114 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80140e2:	6839      	ldr	r1, [r7, #0]
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	f000 fcad 	bl	8014a44 <USBD_GetConfig>
          break;
 80140ea:	e013      	b.n	8014114 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80140ec:	6839      	ldr	r1, [r7, #0]
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f000 fcde 	bl	8014ab0 <USBD_GetStatus>
          break;
 80140f4:	e00e      	b.n	8014114 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80140f6:	6839      	ldr	r1, [r7, #0]
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f000 fd0d 	bl	8014b18 <USBD_SetFeature>
          break;
 80140fe:	e009      	b.n	8014114 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014100:	6839      	ldr	r1, [r7, #0]
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f000 fd31 	bl	8014b6a <USBD_ClrFeature>
          break;
 8014108:	e004      	b.n	8014114 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801410a:	6839      	ldr	r1, [r7, #0]
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f000 fd88 	bl	8014c22 <USBD_CtlError>
          break;
 8014112:	bf00      	nop
      }
      break;
 8014114:	e004      	b.n	8014120 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014116:	6839      	ldr	r1, [r7, #0]
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f000 fd82 	bl	8014c22 <USBD_CtlError>
      break;
 801411e:	bf00      	nop
  }

  return ret;
 8014120:	7bfb      	ldrb	r3, [r7, #15]
}
 8014122:	4618      	mov	r0, r3
 8014124:	3710      	adds	r7, #16
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}
 801412a:	bf00      	nop

0801412c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b084      	sub	sp, #16
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014136:	2300      	movs	r3, #0
 8014138:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801413a:	683b      	ldr	r3, [r7, #0]
 801413c:	781b      	ldrb	r3, [r3, #0]
 801413e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014142:	2b40      	cmp	r3, #64	@ 0x40
 8014144:	d005      	beq.n	8014152 <USBD_StdItfReq+0x26>
 8014146:	2b40      	cmp	r3, #64	@ 0x40
 8014148:	d852      	bhi.n	80141f0 <USBD_StdItfReq+0xc4>
 801414a:	2b00      	cmp	r3, #0
 801414c:	d001      	beq.n	8014152 <USBD_StdItfReq+0x26>
 801414e:	2b20      	cmp	r3, #32
 8014150:	d14e      	bne.n	80141f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014158:	b2db      	uxtb	r3, r3
 801415a:	3b01      	subs	r3, #1
 801415c:	2b02      	cmp	r3, #2
 801415e:	d840      	bhi.n	80141e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014160:	683b      	ldr	r3, [r7, #0]
 8014162:	889b      	ldrh	r3, [r3, #4]
 8014164:	b2db      	uxtb	r3, r3
 8014166:	2b01      	cmp	r3, #1
 8014168:	d836      	bhi.n	80141d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801416a:	683b      	ldr	r3, [r7, #0]
 801416c:	889b      	ldrh	r3, [r3, #4]
 801416e:	b2db      	uxtb	r3, r3
 8014170:	4619      	mov	r1, r3
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f7ff fedb 	bl	8013f2e <USBD_CoreFindIF>
 8014178:	4603      	mov	r3, r0
 801417a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801417c:	7bbb      	ldrb	r3, [r7, #14]
 801417e:	2bff      	cmp	r3, #255	@ 0xff
 8014180:	d01d      	beq.n	80141be <USBD_StdItfReq+0x92>
 8014182:	7bbb      	ldrb	r3, [r7, #14]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d11a      	bne.n	80141be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014188:	7bba      	ldrb	r2, [r7, #14]
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	32ae      	adds	r2, #174	@ 0xae
 801418e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014192:	689b      	ldr	r3, [r3, #8]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d00f      	beq.n	80141b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014198:	7bba      	ldrb	r2, [r7, #14]
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80141a0:	7bba      	ldrb	r2, [r7, #14]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	32ae      	adds	r2, #174	@ 0xae
 80141a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141aa:	689b      	ldr	r3, [r3, #8]
 80141ac:	6839      	ldr	r1, [r7, #0]
 80141ae:	6878      	ldr	r0, [r7, #4]
 80141b0:	4798      	blx	r3
 80141b2:	4603      	mov	r3, r0
 80141b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80141b6:	e004      	b.n	80141c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80141b8:	2303      	movs	r3, #3
 80141ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80141bc:	e001      	b.n	80141c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80141be:	2303      	movs	r3, #3
 80141c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	88db      	ldrh	r3, [r3, #6]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d110      	bne.n	80141ec <USBD_StdItfReq+0xc0>
 80141ca:	7bfb      	ldrb	r3, [r7, #15]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d10d      	bne.n	80141ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	f000 fdfd 	bl	8014dd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80141d6:	e009      	b.n	80141ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80141d8:	6839      	ldr	r1, [r7, #0]
 80141da:	6878      	ldr	r0, [r7, #4]
 80141dc:	f000 fd21 	bl	8014c22 <USBD_CtlError>
          break;
 80141e0:	e004      	b.n	80141ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80141e2:	6839      	ldr	r1, [r7, #0]
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f000 fd1c 	bl	8014c22 <USBD_CtlError>
          break;
 80141ea:	e000      	b.n	80141ee <USBD_StdItfReq+0xc2>
          break;
 80141ec:	bf00      	nop
      }
      break;
 80141ee:	e004      	b.n	80141fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80141f0:	6839      	ldr	r1, [r7, #0]
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f000 fd15 	bl	8014c22 <USBD_CtlError>
      break;
 80141f8:	bf00      	nop
  }

  return ret;
 80141fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80141fc:	4618      	mov	r0, r3
 80141fe:	3710      	adds	r7, #16
 8014200:	46bd      	mov	sp, r7
 8014202:	bd80      	pop	{r7, pc}

08014204 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b084      	sub	sp, #16
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
 801420c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801420e:	2300      	movs	r3, #0
 8014210:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	889b      	ldrh	r3, [r3, #4]
 8014216:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	781b      	ldrb	r3, [r3, #0]
 801421c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014220:	2b40      	cmp	r3, #64	@ 0x40
 8014222:	d007      	beq.n	8014234 <USBD_StdEPReq+0x30>
 8014224:	2b40      	cmp	r3, #64	@ 0x40
 8014226:	f200 817f 	bhi.w	8014528 <USBD_StdEPReq+0x324>
 801422a:	2b00      	cmp	r3, #0
 801422c:	d02a      	beq.n	8014284 <USBD_StdEPReq+0x80>
 801422e:	2b20      	cmp	r3, #32
 8014230:	f040 817a 	bne.w	8014528 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014234:	7bbb      	ldrb	r3, [r7, #14]
 8014236:	4619      	mov	r1, r3
 8014238:	6878      	ldr	r0, [r7, #4]
 801423a:	f7ff fe85 	bl	8013f48 <USBD_CoreFindEP>
 801423e:	4603      	mov	r3, r0
 8014240:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014242:	7b7b      	ldrb	r3, [r7, #13]
 8014244:	2bff      	cmp	r3, #255	@ 0xff
 8014246:	f000 8174 	beq.w	8014532 <USBD_StdEPReq+0x32e>
 801424a:	7b7b      	ldrb	r3, [r7, #13]
 801424c:	2b00      	cmp	r3, #0
 801424e:	f040 8170 	bne.w	8014532 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014252:	7b7a      	ldrb	r2, [r7, #13]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801425a:	7b7a      	ldrb	r2, [r7, #13]
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	32ae      	adds	r2, #174	@ 0xae
 8014260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014264:	689b      	ldr	r3, [r3, #8]
 8014266:	2b00      	cmp	r3, #0
 8014268:	f000 8163 	beq.w	8014532 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801426c:	7b7a      	ldrb	r2, [r7, #13]
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	32ae      	adds	r2, #174	@ 0xae
 8014272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014276:	689b      	ldr	r3, [r3, #8]
 8014278:	6839      	ldr	r1, [r7, #0]
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	4798      	blx	r3
 801427e:	4603      	mov	r3, r0
 8014280:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014282:	e156      	b.n	8014532 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014284:	683b      	ldr	r3, [r7, #0]
 8014286:	785b      	ldrb	r3, [r3, #1]
 8014288:	2b03      	cmp	r3, #3
 801428a:	d008      	beq.n	801429e <USBD_StdEPReq+0x9a>
 801428c:	2b03      	cmp	r3, #3
 801428e:	f300 8145 	bgt.w	801451c <USBD_StdEPReq+0x318>
 8014292:	2b00      	cmp	r3, #0
 8014294:	f000 809b 	beq.w	80143ce <USBD_StdEPReq+0x1ca>
 8014298:	2b01      	cmp	r3, #1
 801429a:	d03c      	beq.n	8014316 <USBD_StdEPReq+0x112>
 801429c:	e13e      	b.n	801451c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142a4:	b2db      	uxtb	r3, r3
 80142a6:	2b02      	cmp	r3, #2
 80142a8:	d002      	beq.n	80142b0 <USBD_StdEPReq+0xac>
 80142aa:	2b03      	cmp	r3, #3
 80142ac:	d016      	beq.n	80142dc <USBD_StdEPReq+0xd8>
 80142ae:	e02c      	b.n	801430a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80142b0:	7bbb      	ldrb	r3, [r7, #14]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d00d      	beq.n	80142d2 <USBD_StdEPReq+0xce>
 80142b6:	7bbb      	ldrb	r3, [r7, #14]
 80142b8:	2b80      	cmp	r3, #128	@ 0x80
 80142ba:	d00a      	beq.n	80142d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80142bc:	7bbb      	ldrb	r3, [r7, #14]
 80142be:	4619      	mov	r1, r3
 80142c0:	6878      	ldr	r0, [r7, #4]
 80142c2:	f004 fe71 	bl	8018fa8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80142c6:	2180      	movs	r1, #128	@ 0x80
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f004 fe6d 	bl	8018fa8 <USBD_LL_StallEP>
 80142ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80142d0:	e020      	b.n	8014314 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80142d2:	6839      	ldr	r1, [r7, #0]
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f000 fca4 	bl	8014c22 <USBD_CtlError>
              break;
 80142da:	e01b      	b.n	8014314 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	885b      	ldrh	r3, [r3, #2]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d10e      	bne.n	8014302 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80142e4:	7bbb      	ldrb	r3, [r7, #14]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d00b      	beq.n	8014302 <USBD_StdEPReq+0xfe>
 80142ea:	7bbb      	ldrb	r3, [r7, #14]
 80142ec:	2b80      	cmp	r3, #128	@ 0x80
 80142ee:	d008      	beq.n	8014302 <USBD_StdEPReq+0xfe>
 80142f0:	683b      	ldr	r3, [r7, #0]
 80142f2:	88db      	ldrh	r3, [r3, #6]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d104      	bne.n	8014302 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80142f8:	7bbb      	ldrb	r3, [r7, #14]
 80142fa:	4619      	mov	r1, r3
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f004 fe53 	bl	8018fa8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f000 fd64 	bl	8014dd0 <USBD_CtlSendStatus>

              break;
 8014308:	e004      	b.n	8014314 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801430a:	6839      	ldr	r1, [r7, #0]
 801430c:	6878      	ldr	r0, [r7, #4]
 801430e:	f000 fc88 	bl	8014c22 <USBD_CtlError>
              break;
 8014312:	bf00      	nop
          }
          break;
 8014314:	e107      	b.n	8014526 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801431c:	b2db      	uxtb	r3, r3
 801431e:	2b02      	cmp	r3, #2
 8014320:	d002      	beq.n	8014328 <USBD_StdEPReq+0x124>
 8014322:	2b03      	cmp	r3, #3
 8014324:	d016      	beq.n	8014354 <USBD_StdEPReq+0x150>
 8014326:	e04b      	b.n	80143c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014328:	7bbb      	ldrb	r3, [r7, #14]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d00d      	beq.n	801434a <USBD_StdEPReq+0x146>
 801432e:	7bbb      	ldrb	r3, [r7, #14]
 8014330:	2b80      	cmp	r3, #128	@ 0x80
 8014332:	d00a      	beq.n	801434a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014334:	7bbb      	ldrb	r3, [r7, #14]
 8014336:	4619      	mov	r1, r3
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f004 fe35 	bl	8018fa8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801433e:	2180      	movs	r1, #128	@ 0x80
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f004 fe31 	bl	8018fa8 <USBD_LL_StallEP>
 8014346:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014348:	e040      	b.n	80143cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801434a:	6839      	ldr	r1, [r7, #0]
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f000 fc68 	bl	8014c22 <USBD_CtlError>
              break;
 8014352:	e03b      	b.n	80143cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	885b      	ldrh	r3, [r3, #2]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d136      	bne.n	80143ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801435c:	7bbb      	ldrb	r3, [r7, #14]
 801435e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014362:	2b00      	cmp	r3, #0
 8014364:	d004      	beq.n	8014370 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014366:	7bbb      	ldrb	r3, [r7, #14]
 8014368:	4619      	mov	r1, r3
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f004 fe3b 	bl	8018fe6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	f000 fd2d 	bl	8014dd0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014376:	7bbb      	ldrb	r3, [r7, #14]
 8014378:	4619      	mov	r1, r3
 801437a:	6878      	ldr	r0, [r7, #4]
 801437c:	f7ff fde4 	bl	8013f48 <USBD_CoreFindEP>
 8014380:	4603      	mov	r3, r0
 8014382:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014384:	7b7b      	ldrb	r3, [r7, #13]
 8014386:	2bff      	cmp	r3, #255	@ 0xff
 8014388:	d01f      	beq.n	80143ca <USBD_StdEPReq+0x1c6>
 801438a:	7b7b      	ldrb	r3, [r7, #13]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d11c      	bne.n	80143ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014390:	7b7a      	ldrb	r2, [r7, #13]
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014398:	7b7a      	ldrb	r2, [r7, #13]
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	32ae      	adds	r2, #174	@ 0xae
 801439e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143a2:	689b      	ldr	r3, [r3, #8]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d010      	beq.n	80143ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80143a8:	7b7a      	ldrb	r2, [r7, #13]
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	32ae      	adds	r2, #174	@ 0xae
 80143ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143b2:	689b      	ldr	r3, [r3, #8]
 80143b4:	6839      	ldr	r1, [r7, #0]
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	4798      	blx	r3
 80143ba:	4603      	mov	r3, r0
 80143bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80143be:	e004      	b.n	80143ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80143c0:	6839      	ldr	r1, [r7, #0]
 80143c2:	6878      	ldr	r0, [r7, #4]
 80143c4:	f000 fc2d 	bl	8014c22 <USBD_CtlError>
              break;
 80143c8:	e000      	b.n	80143cc <USBD_StdEPReq+0x1c8>
              break;
 80143ca:	bf00      	nop
          }
          break;
 80143cc:	e0ab      	b.n	8014526 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80143d4:	b2db      	uxtb	r3, r3
 80143d6:	2b02      	cmp	r3, #2
 80143d8:	d002      	beq.n	80143e0 <USBD_StdEPReq+0x1dc>
 80143da:	2b03      	cmp	r3, #3
 80143dc:	d032      	beq.n	8014444 <USBD_StdEPReq+0x240>
 80143de:	e097      	b.n	8014510 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80143e0:	7bbb      	ldrb	r3, [r7, #14]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d007      	beq.n	80143f6 <USBD_StdEPReq+0x1f2>
 80143e6:	7bbb      	ldrb	r3, [r7, #14]
 80143e8:	2b80      	cmp	r3, #128	@ 0x80
 80143ea:	d004      	beq.n	80143f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80143ec:	6839      	ldr	r1, [r7, #0]
 80143ee:	6878      	ldr	r0, [r7, #4]
 80143f0:	f000 fc17 	bl	8014c22 <USBD_CtlError>
                break;
 80143f4:	e091      	b.n	801451a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80143f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	da0b      	bge.n	8014416 <USBD_StdEPReq+0x212>
 80143fe:	7bbb      	ldrb	r3, [r7, #14]
 8014400:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014404:	4613      	mov	r3, r2
 8014406:	009b      	lsls	r3, r3, #2
 8014408:	4413      	add	r3, r2
 801440a:	009b      	lsls	r3, r3, #2
 801440c:	3310      	adds	r3, #16
 801440e:	687a      	ldr	r2, [r7, #4]
 8014410:	4413      	add	r3, r2
 8014412:	3304      	adds	r3, #4
 8014414:	e00b      	b.n	801442e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014416:	7bbb      	ldrb	r3, [r7, #14]
 8014418:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801441c:	4613      	mov	r3, r2
 801441e:	009b      	lsls	r3, r3, #2
 8014420:	4413      	add	r3, r2
 8014422:	009b      	lsls	r3, r3, #2
 8014424:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014428:	687a      	ldr	r2, [r7, #4]
 801442a:	4413      	add	r3, r2
 801442c:	3304      	adds	r3, #4
 801442e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014430:	68bb      	ldr	r3, [r7, #8]
 8014432:	2200      	movs	r2, #0
 8014434:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	2202      	movs	r2, #2
 801443a:	4619      	mov	r1, r3
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f000 fc6d 	bl	8014d1c <USBD_CtlSendData>
              break;
 8014442:	e06a      	b.n	801451a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014448:	2b00      	cmp	r3, #0
 801444a:	da11      	bge.n	8014470 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801444c:	7bbb      	ldrb	r3, [r7, #14]
 801444e:	f003 020f 	and.w	r2, r3, #15
 8014452:	6879      	ldr	r1, [r7, #4]
 8014454:	4613      	mov	r3, r2
 8014456:	009b      	lsls	r3, r3, #2
 8014458:	4413      	add	r3, r2
 801445a:	009b      	lsls	r3, r3, #2
 801445c:	440b      	add	r3, r1
 801445e:	3324      	adds	r3, #36	@ 0x24
 8014460:	881b      	ldrh	r3, [r3, #0]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d117      	bne.n	8014496 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014466:	6839      	ldr	r1, [r7, #0]
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f000 fbda 	bl	8014c22 <USBD_CtlError>
                  break;
 801446e:	e054      	b.n	801451a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014470:	7bbb      	ldrb	r3, [r7, #14]
 8014472:	f003 020f 	and.w	r2, r3, #15
 8014476:	6879      	ldr	r1, [r7, #4]
 8014478:	4613      	mov	r3, r2
 801447a:	009b      	lsls	r3, r3, #2
 801447c:	4413      	add	r3, r2
 801447e:	009b      	lsls	r3, r3, #2
 8014480:	440b      	add	r3, r1
 8014482:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014486:	881b      	ldrh	r3, [r3, #0]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d104      	bne.n	8014496 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801448c:	6839      	ldr	r1, [r7, #0]
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f000 fbc7 	bl	8014c22 <USBD_CtlError>
                  break;
 8014494:	e041      	b.n	801451a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014496:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801449a:	2b00      	cmp	r3, #0
 801449c:	da0b      	bge.n	80144b6 <USBD_StdEPReq+0x2b2>
 801449e:	7bbb      	ldrb	r3, [r7, #14]
 80144a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80144a4:	4613      	mov	r3, r2
 80144a6:	009b      	lsls	r3, r3, #2
 80144a8:	4413      	add	r3, r2
 80144aa:	009b      	lsls	r3, r3, #2
 80144ac:	3310      	adds	r3, #16
 80144ae:	687a      	ldr	r2, [r7, #4]
 80144b0:	4413      	add	r3, r2
 80144b2:	3304      	adds	r3, #4
 80144b4:	e00b      	b.n	80144ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80144b6:	7bbb      	ldrb	r3, [r7, #14]
 80144b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80144bc:	4613      	mov	r3, r2
 80144be:	009b      	lsls	r3, r3, #2
 80144c0:	4413      	add	r3, r2
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80144c8:	687a      	ldr	r2, [r7, #4]
 80144ca:	4413      	add	r3, r2
 80144cc:	3304      	adds	r3, #4
 80144ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80144d0:	7bbb      	ldrb	r3, [r7, #14]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d002      	beq.n	80144dc <USBD_StdEPReq+0x2d8>
 80144d6:	7bbb      	ldrb	r3, [r7, #14]
 80144d8:	2b80      	cmp	r3, #128	@ 0x80
 80144da:	d103      	bne.n	80144e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	2200      	movs	r2, #0
 80144e0:	601a      	str	r2, [r3, #0]
 80144e2:	e00e      	b.n	8014502 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80144e4:	7bbb      	ldrb	r3, [r7, #14]
 80144e6:	4619      	mov	r1, r3
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f004 fd9b 	bl	8019024 <USBD_LL_IsStallEP>
 80144ee:	4603      	mov	r3, r0
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d003      	beq.n	80144fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	2201      	movs	r2, #1
 80144f8:	601a      	str	r2, [r3, #0]
 80144fa:	e002      	b.n	8014502 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	2200      	movs	r2, #0
 8014500:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	2202      	movs	r2, #2
 8014506:	4619      	mov	r1, r3
 8014508:	6878      	ldr	r0, [r7, #4]
 801450a:	f000 fc07 	bl	8014d1c <USBD_CtlSendData>
              break;
 801450e:	e004      	b.n	801451a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014510:	6839      	ldr	r1, [r7, #0]
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f000 fb85 	bl	8014c22 <USBD_CtlError>
              break;
 8014518:	bf00      	nop
          }
          break;
 801451a:	e004      	b.n	8014526 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801451c:	6839      	ldr	r1, [r7, #0]
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	f000 fb7f 	bl	8014c22 <USBD_CtlError>
          break;
 8014524:	bf00      	nop
      }
      break;
 8014526:	e005      	b.n	8014534 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014528:	6839      	ldr	r1, [r7, #0]
 801452a:	6878      	ldr	r0, [r7, #4]
 801452c:	f000 fb79 	bl	8014c22 <USBD_CtlError>
      break;
 8014530:	e000      	b.n	8014534 <USBD_StdEPReq+0x330>
      break;
 8014532:	bf00      	nop
  }

  return ret;
 8014534:	7bfb      	ldrb	r3, [r7, #15]
}
 8014536:	4618      	mov	r0, r3
 8014538:	3710      	adds	r7, #16
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
	...

08014540 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b084      	sub	sp, #16
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801454a:	2300      	movs	r3, #0
 801454c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801454e:	2300      	movs	r3, #0
 8014550:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014552:	2300      	movs	r3, #0
 8014554:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	885b      	ldrh	r3, [r3, #2]
 801455a:	0a1b      	lsrs	r3, r3, #8
 801455c:	b29b      	uxth	r3, r3
 801455e:	3b01      	subs	r3, #1
 8014560:	2b0e      	cmp	r3, #14
 8014562:	f200 8152 	bhi.w	801480a <USBD_GetDescriptor+0x2ca>
 8014566:	a201      	add	r2, pc, #4	@ (adr r2, 801456c <USBD_GetDescriptor+0x2c>)
 8014568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801456c:	080145dd 	.word	0x080145dd
 8014570:	080145f5 	.word	0x080145f5
 8014574:	08014635 	.word	0x08014635
 8014578:	0801480b 	.word	0x0801480b
 801457c:	0801480b 	.word	0x0801480b
 8014580:	080147ab 	.word	0x080147ab
 8014584:	080147d7 	.word	0x080147d7
 8014588:	0801480b 	.word	0x0801480b
 801458c:	0801480b 	.word	0x0801480b
 8014590:	0801480b 	.word	0x0801480b
 8014594:	0801480b 	.word	0x0801480b
 8014598:	0801480b 	.word	0x0801480b
 801459c:	0801480b 	.word	0x0801480b
 80145a0:	0801480b 	.word	0x0801480b
 80145a4:	080145a9 	.word	0x080145a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145ae:	69db      	ldr	r3, [r3, #28]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d00b      	beq.n	80145cc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145ba:	69db      	ldr	r3, [r3, #28]
 80145bc:	687a      	ldr	r2, [r7, #4]
 80145be:	7c12      	ldrb	r2, [r2, #16]
 80145c0:	f107 0108 	add.w	r1, r7, #8
 80145c4:	4610      	mov	r0, r2
 80145c6:	4798      	blx	r3
 80145c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80145ca:	e126      	b.n	801481a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80145cc:	6839      	ldr	r1, [r7, #0]
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f000 fb27 	bl	8014c22 <USBD_CtlError>
        err++;
 80145d4:	7afb      	ldrb	r3, [r7, #11]
 80145d6:	3301      	adds	r3, #1
 80145d8:	72fb      	strb	r3, [r7, #11]
      break;
 80145da:	e11e      	b.n	801481a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	687a      	ldr	r2, [r7, #4]
 80145e6:	7c12      	ldrb	r2, [r2, #16]
 80145e8:	f107 0108 	add.w	r1, r7, #8
 80145ec:	4610      	mov	r0, r2
 80145ee:	4798      	blx	r3
 80145f0:	60f8      	str	r0, [r7, #12]
      break;
 80145f2:	e112      	b.n	801481a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	7c1b      	ldrb	r3, [r3, #16]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d10d      	bne.n	8014618 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014604:	f107 0208 	add.w	r2, r7, #8
 8014608:	4610      	mov	r0, r2
 801460a:	4798      	blx	r3
 801460c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	3301      	adds	r3, #1
 8014612:	2202      	movs	r2, #2
 8014614:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014616:	e100      	b.n	801481a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801461e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014620:	f107 0208 	add.w	r2, r7, #8
 8014624:	4610      	mov	r0, r2
 8014626:	4798      	blx	r3
 8014628:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	3301      	adds	r3, #1
 801462e:	2202      	movs	r2, #2
 8014630:	701a      	strb	r2, [r3, #0]
      break;
 8014632:	e0f2      	b.n	801481a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014634:	683b      	ldr	r3, [r7, #0]
 8014636:	885b      	ldrh	r3, [r3, #2]
 8014638:	b2db      	uxtb	r3, r3
 801463a:	2b05      	cmp	r3, #5
 801463c:	f200 80ac 	bhi.w	8014798 <USBD_GetDescriptor+0x258>
 8014640:	a201      	add	r2, pc, #4	@ (adr r2, 8014648 <USBD_GetDescriptor+0x108>)
 8014642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014646:	bf00      	nop
 8014648:	08014661 	.word	0x08014661
 801464c:	08014695 	.word	0x08014695
 8014650:	080146c9 	.word	0x080146c9
 8014654:	080146fd 	.word	0x080146fd
 8014658:	08014731 	.word	0x08014731
 801465c:	08014765 	.word	0x08014765
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014666:	685b      	ldr	r3, [r3, #4]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d00b      	beq.n	8014684 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014672:	685b      	ldr	r3, [r3, #4]
 8014674:	687a      	ldr	r2, [r7, #4]
 8014676:	7c12      	ldrb	r2, [r2, #16]
 8014678:	f107 0108 	add.w	r1, r7, #8
 801467c:	4610      	mov	r0, r2
 801467e:	4798      	blx	r3
 8014680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014682:	e091      	b.n	80147a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014684:	6839      	ldr	r1, [r7, #0]
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f000 facb 	bl	8014c22 <USBD_CtlError>
            err++;
 801468c:	7afb      	ldrb	r3, [r7, #11]
 801468e:	3301      	adds	r3, #1
 8014690:	72fb      	strb	r3, [r7, #11]
          break;
 8014692:	e089      	b.n	80147a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801469a:	689b      	ldr	r3, [r3, #8]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d00b      	beq.n	80146b8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146a6:	689b      	ldr	r3, [r3, #8]
 80146a8:	687a      	ldr	r2, [r7, #4]
 80146aa:	7c12      	ldrb	r2, [r2, #16]
 80146ac:	f107 0108 	add.w	r1, r7, #8
 80146b0:	4610      	mov	r0, r2
 80146b2:	4798      	blx	r3
 80146b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146b6:	e077      	b.n	80147a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80146b8:	6839      	ldr	r1, [r7, #0]
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f000 fab1 	bl	8014c22 <USBD_CtlError>
            err++;
 80146c0:	7afb      	ldrb	r3, [r7, #11]
 80146c2:	3301      	adds	r3, #1
 80146c4:	72fb      	strb	r3, [r7, #11]
          break;
 80146c6:	e06f      	b.n	80147a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146ce:	68db      	ldr	r3, [r3, #12]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d00b      	beq.n	80146ec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146da:	68db      	ldr	r3, [r3, #12]
 80146dc:	687a      	ldr	r2, [r7, #4]
 80146de:	7c12      	ldrb	r2, [r2, #16]
 80146e0:	f107 0108 	add.w	r1, r7, #8
 80146e4:	4610      	mov	r0, r2
 80146e6:	4798      	blx	r3
 80146e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146ea:	e05d      	b.n	80147a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80146ec:	6839      	ldr	r1, [r7, #0]
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f000 fa97 	bl	8014c22 <USBD_CtlError>
            err++;
 80146f4:	7afb      	ldrb	r3, [r7, #11]
 80146f6:	3301      	adds	r3, #1
 80146f8:	72fb      	strb	r3, [r7, #11]
          break;
 80146fa:	e055      	b.n	80147a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014702:	691b      	ldr	r3, [r3, #16]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d00b      	beq.n	8014720 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801470e:	691b      	ldr	r3, [r3, #16]
 8014710:	687a      	ldr	r2, [r7, #4]
 8014712:	7c12      	ldrb	r2, [r2, #16]
 8014714:	f107 0108 	add.w	r1, r7, #8
 8014718:	4610      	mov	r0, r2
 801471a:	4798      	blx	r3
 801471c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801471e:	e043      	b.n	80147a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014720:	6839      	ldr	r1, [r7, #0]
 8014722:	6878      	ldr	r0, [r7, #4]
 8014724:	f000 fa7d 	bl	8014c22 <USBD_CtlError>
            err++;
 8014728:	7afb      	ldrb	r3, [r7, #11]
 801472a:	3301      	adds	r3, #1
 801472c:	72fb      	strb	r3, [r7, #11]
          break;
 801472e:	e03b      	b.n	80147a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014736:	695b      	ldr	r3, [r3, #20]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d00b      	beq.n	8014754 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014742:	695b      	ldr	r3, [r3, #20]
 8014744:	687a      	ldr	r2, [r7, #4]
 8014746:	7c12      	ldrb	r2, [r2, #16]
 8014748:	f107 0108 	add.w	r1, r7, #8
 801474c:	4610      	mov	r0, r2
 801474e:	4798      	blx	r3
 8014750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014752:	e029      	b.n	80147a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014754:	6839      	ldr	r1, [r7, #0]
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f000 fa63 	bl	8014c22 <USBD_CtlError>
            err++;
 801475c:	7afb      	ldrb	r3, [r7, #11]
 801475e:	3301      	adds	r3, #1
 8014760:	72fb      	strb	r3, [r7, #11]
          break;
 8014762:	e021      	b.n	80147a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801476a:	699b      	ldr	r3, [r3, #24]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d00b      	beq.n	8014788 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014776:	699b      	ldr	r3, [r3, #24]
 8014778:	687a      	ldr	r2, [r7, #4]
 801477a:	7c12      	ldrb	r2, [r2, #16]
 801477c:	f107 0108 	add.w	r1, r7, #8
 8014780:	4610      	mov	r0, r2
 8014782:	4798      	blx	r3
 8014784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014786:	e00f      	b.n	80147a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014788:	6839      	ldr	r1, [r7, #0]
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f000 fa49 	bl	8014c22 <USBD_CtlError>
            err++;
 8014790:	7afb      	ldrb	r3, [r7, #11]
 8014792:	3301      	adds	r3, #1
 8014794:	72fb      	strb	r3, [r7, #11]
          break;
 8014796:	e007      	b.n	80147a8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014798:	6839      	ldr	r1, [r7, #0]
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f000 fa41 	bl	8014c22 <USBD_CtlError>
          err++;
 80147a0:	7afb      	ldrb	r3, [r7, #11]
 80147a2:	3301      	adds	r3, #1
 80147a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80147a6:	bf00      	nop
      }
      break;
 80147a8:	e037      	b.n	801481a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	7c1b      	ldrb	r3, [r3, #16]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d109      	bne.n	80147c6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80147b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80147ba:	f107 0208 	add.w	r2, r7, #8
 80147be:	4610      	mov	r0, r2
 80147c0:	4798      	blx	r3
 80147c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80147c4:	e029      	b.n	801481a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80147c6:	6839      	ldr	r1, [r7, #0]
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f000 fa2a 	bl	8014c22 <USBD_CtlError>
        err++;
 80147ce:	7afb      	ldrb	r3, [r7, #11]
 80147d0:	3301      	adds	r3, #1
 80147d2:	72fb      	strb	r3, [r7, #11]
      break;
 80147d4:	e021      	b.n	801481a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	7c1b      	ldrb	r3, [r3, #16]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d10d      	bne.n	80147fa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80147e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80147e6:	f107 0208 	add.w	r2, r7, #8
 80147ea:	4610      	mov	r0, r2
 80147ec:	4798      	blx	r3
 80147ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	3301      	adds	r3, #1
 80147f4:	2207      	movs	r2, #7
 80147f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80147f8:	e00f      	b.n	801481a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80147fa:	6839      	ldr	r1, [r7, #0]
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f000 fa10 	bl	8014c22 <USBD_CtlError>
        err++;
 8014802:	7afb      	ldrb	r3, [r7, #11]
 8014804:	3301      	adds	r3, #1
 8014806:	72fb      	strb	r3, [r7, #11]
      break;
 8014808:	e007      	b.n	801481a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801480a:	6839      	ldr	r1, [r7, #0]
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f000 fa08 	bl	8014c22 <USBD_CtlError>
      err++;
 8014812:	7afb      	ldrb	r3, [r7, #11]
 8014814:	3301      	adds	r3, #1
 8014816:	72fb      	strb	r3, [r7, #11]
      break;
 8014818:	bf00      	nop
  }

  if (err != 0U)
 801481a:	7afb      	ldrb	r3, [r7, #11]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d11e      	bne.n	801485e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	88db      	ldrh	r3, [r3, #6]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d016      	beq.n	8014856 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014828:	893b      	ldrh	r3, [r7, #8]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d00e      	beq.n	801484c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	88da      	ldrh	r2, [r3, #6]
 8014832:	893b      	ldrh	r3, [r7, #8]
 8014834:	4293      	cmp	r3, r2
 8014836:	bf28      	it	cs
 8014838:	4613      	movcs	r3, r2
 801483a:	b29b      	uxth	r3, r3
 801483c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801483e:	893b      	ldrh	r3, [r7, #8]
 8014840:	461a      	mov	r2, r3
 8014842:	68f9      	ldr	r1, [r7, #12]
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f000 fa69 	bl	8014d1c <USBD_CtlSendData>
 801484a:	e009      	b.n	8014860 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801484c:	6839      	ldr	r1, [r7, #0]
 801484e:	6878      	ldr	r0, [r7, #4]
 8014850:	f000 f9e7 	bl	8014c22 <USBD_CtlError>
 8014854:	e004      	b.n	8014860 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f000 faba 	bl	8014dd0 <USBD_CtlSendStatus>
 801485c:	e000      	b.n	8014860 <USBD_GetDescriptor+0x320>
    return;
 801485e:	bf00      	nop
  }
}
 8014860:	3710      	adds	r7, #16
 8014862:	46bd      	mov	sp, r7
 8014864:	bd80      	pop	{r7, pc}
 8014866:	bf00      	nop

08014868 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b084      	sub	sp, #16
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
 8014870:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	889b      	ldrh	r3, [r3, #4]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d131      	bne.n	80148de <USBD_SetAddress+0x76>
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	88db      	ldrh	r3, [r3, #6]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d12d      	bne.n	80148de <USBD_SetAddress+0x76>
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	885b      	ldrh	r3, [r3, #2]
 8014886:	2b7f      	cmp	r3, #127	@ 0x7f
 8014888:	d829      	bhi.n	80148de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	885b      	ldrh	r3, [r3, #2]
 801488e:	b2db      	uxtb	r3, r3
 8014890:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014894:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801489c:	b2db      	uxtb	r3, r3
 801489e:	2b03      	cmp	r3, #3
 80148a0:	d104      	bne.n	80148ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80148a2:	6839      	ldr	r1, [r7, #0]
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f000 f9bc 	bl	8014c22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148aa:	e01d      	b.n	80148e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	7bfa      	ldrb	r2, [r7, #15]
 80148b0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80148b4:	7bfb      	ldrb	r3, [r7, #15]
 80148b6:	4619      	mov	r1, r3
 80148b8:	6878      	ldr	r0, [r7, #4]
 80148ba:	f004 fbdf 	bl	801907c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f000 fa86 	bl	8014dd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80148c4:	7bfb      	ldrb	r3, [r7, #15]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d004      	beq.n	80148d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2202      	movs	r2, #2
 80148ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148d2:	e009      	b.n	80148e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2201      	movs	r2, #1
 80148d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148dc:	e004      	b.n	80148e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80148de:	6839      	ldr	r1, [r7, #0]
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f000 f99e 	bl	8014c22 <USBD_CtlError>
  }
}
 80148e6:	bf00      	nop
 80148e8:	bf00      	nop
 80148ea:	3710      	adds	r7, #16
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd80      	pop	{r7, pc}

080148f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b084      	sub	sp, #16
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
 80148f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80148fa:	2300      	movs	r3, #0
 80148fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80148fe:	683b      	ldr	r3, [r7, #0]
 8014900:	885b      	ldrh	r3, [r3, #2]
 8014902:	b2da      	uxtb	r2, r3
 8014904:	4b4e      	ldr	r3, [pc, #312]	@ (8014a40 <USBD_SetConfig+0x150>)
 8014906:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014908:	4b4d      	ldr	r3, [pc, #308]	@ (8014a40 <USBD_SetConfig+0x150>)
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	2b01      	cmp	r3, #1
 801490e:	d905      	bls.n	801491c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014910:	6839      	ldr	r1, [r7, #0]
 8014912:	6878      	ldr	r0, [r7, #4]
 8014914:	f000 f985 	bl	8014c22 <USBD_CtlError>
    return USBD_FAIL;
 8014918:	2303      	movs	r3, #3
 801491a:	e08c      	b.n	8014a36 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014922:	b2db      	uxtb	r3, r3
 8014924:	2b02      	cmp	r3, #2
 8014926:	d002      	beq.n	801492e <USBD_SetConfig+0x3e>
 8014928:	2b03      	cmp	r3, #3
 801492a:	d029      	beq.n	8014980 <USBD_SetConfig+0x90>
 801492c:	e075      	b.n	8014a1a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801492e:	4b44      	ldr	r3, [pc, #272]	@ (8014a40 <USBD_SetConfig+0x150>)
 8014930:	781b      	ldrb	r3, [r3, #0]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d020      	beq.n	8014978 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014936:	4b42      	ldr	r3, [pc, #264]	@ (8014a40 <USBD_SetConfig+0x150>)
 8014938:	781b      	ldrb	r3, [r3, #0]
 801493a:	461a      	mov	r2, r3
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014940:	4b3f      	ldr	r3, [pc, #252]	@ (8014a40 <USBD_SetConfig+0x150>)
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	4619      	mov	r1, r3
 8014946:	6878      	ldr	r0, [r7, #4]
 8014948:	f7ff f84b 	bl	80139e2 <USBD_SetClassConfig>
 801494c:	4603      	mov	r3, r0
 801494e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014950:	7bfb      	ldrb	r3, [r7, #15]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d008      	beq.n	8014968 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014956:	6839      	ldr	r1, [r7, #0]
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f000 f962 	bl	8014c22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	2202      	movs	r2, #2
 8014962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014966:	e065      	b.n	8014a34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f000 fa31 	bl	8014dd0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2203      	movs	r2, #3
 8014972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014976:	e05d      	b.n	8014a34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f000 fa29 	bl	8014dd0 <USBD_CtlSendStatus>
      break;
 801497e:	e059      	b.n	8014a34 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014980:	4b2f      	ldr	r3, [pc, #188]	@ (8014a40 <USBD_SetConfig+0x150>)
 8014982:	781b      	ldrb	r3, [r3, #0]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d112      	bne.n	80149ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	2202      	movs	r2, #2
 801498c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014990:	4b2b      	ldr	r3, [pc, #172]	@ (8014a40 <USBD_SetConfig+0x150>)
 8014992:	781b      	ldrb	r3, [r3, #0]
 8014994:	461a      	mov	r2, r3
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801499a:	4b29      	ldr	r3, [pc, #164]	@ (8014a40 <USBD_SetConfig+0x150>)
 801499c:	781b      	ldrb	r3, [r3, #0]
 801499e:	4619      	mov	r1, r3
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	f7ff f83a 	bl	8013a1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f000 fa12 	bl	8014dd0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80149ac:	e042      	b.n	8014a34 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80149ae:	4b24      	ldr	r3, [pc, #144]	@ (8014a40 <USBD_SetConfig+0x150>)
 80149b0:	781b      	ldrb	r3, [r3, #0]
 80149b2:	461a      	mov	r2, r3
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	685b      	ldr	r3, [r3, #4]
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d02a      	beq.n	8014a12 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	685b      	ldr	r3, [r3, #4]
 80149c0:	b2db      	uxtb	r3, r3
 80149c2:	4619      	mov	r1, r3
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f7ff f828 	bl	8013a1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80149ca:	4b1d      	ldr	r3, [pc, #116]	@ (8014a40 <USBD_SetConfig+0x150>)
 80149cc:	781b      	ldrb	r3, [r3, #0]
 80149ce:	461a      	mov	r2, r3
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80149d4:	4b1a      	ldr	r3, [pc, #104]	@ (8014a40 <USBD_SetConfig+0x150>)
 80149d6:	781b      	ldrb	r3, [r3, #0]
 80149d8:	4619      	mov	r1, r3
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f7ff f801 	bl	80139e2 <USBD_SetClassConfig>
 80149e0:	4603      	mov	r3, r0
 80149e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80149e4:	7bfb      	ldrb	r3, [r7, #15]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d00f      	beq.n	8014a0a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80149ea:	6839      	ldr	r1, [r7, #0]
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f000 f918 	bl	8014c22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	685b      	ldr	r3, [r3, #4]
 80149f6:	b2db      	uxtb	r3, r3
 80149f8:	4619      	mov	r1, r3
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f7ff f80d 	bl	8013a1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2202      	movs	r2, #2
 8014a04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014a08:	e014      	b.n	8014a34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014a0a:	6878      	ldr	r0, [r7, #4]
 8014a0c:	f000 f9e0 	bl	8014dd0 <USBD_CtlSendStatus>
      break;
 8014a10:	e010      	b.n	8014a34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f000 f9dc 	bl	8014dd0 <USBD_CtlSendStatus>
      break;
 8014a18:	e00c      	b.n	8014a34 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014a1a:	6839      	ldr	r1, [r7, #0]
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f000 f900 	bl	8014c22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014a22:	4b07      	ldr	r3, [pc, #28]	@ (8014a40 <USBD_SetConfig+0x150>)
 8014a24:	781b      	ldrb	r3, [r3, #0]
 8014a26:	4619      	mov	r1, r3
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f7fe fff6 	bl	8013a1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014a2e:	2303      	movs	r3, #3
 8014a30:	73fb      	strb	r3, [r7, #15]
      break;
 8014a32:	bf00      	nop
  }

  return ret;
 8014a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	3710      	adds	r7, #16
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}
 8014a3e:	bf00      	nop
 8014a40:	20001378 	.word	0x20001378

08014a44 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b082      	sub	sp, #8
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014a4e:	683b      	ldr	r3, [r7, #0]
 8014a50:	88db      	ldrh	r3, [r3, #6]
 8014a52:	2b01      	cmp	r3, #1
 8014a54:	d004      	beq.n	8014a60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014a56:	6839      	ldr	r1, [r7, #0]
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f000 f8e2 	bl	8014c22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014a5e:	e023      	b.n	8014aa8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014a66:	b2db      	uxtb	r3, r3
 8014a68:	2b02      	cmp	r3, #2
 8014a6a:	dc02      	bgt.n	8014a72 <USBD_GetConfig+0x2e>
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	dc03      	bgt.n	8014a78 <USBD_GetConfig+0x34>
 8014a70:	e015      	b.n	8014a9e <USBD_GetConfig+0x5a>
 8014a72:	2b03      	cmp	r3, #3
 8014a74:	d00b      	beq.n	8014a8e <USBD_GetConfig+0x4a>
 8014a76:	e012      	b.n	8014a9e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	3308      	adds	r3, #8
 8014a82:	2201      	movs	r2, #1
 8014a84:	4619      	mov	r1, r3
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f000 f948 	bl	8014d1c <USBD_CtlSendData>
        break;
 8014a8c:	e00c      	b.n	8014aa8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	3304      	adds	r3, #4
 8014a92:	2201      	movs	r2, #1
 8014a94:	4619      	mov	r1, r3
 8014a96:	6878      	ldr	r0, [r7, #4]
 8014a98:	f000 f940 	bl	8014d1c <USBD_CtlSendData>
        break;
 8014a9c:	e004      	b.n	8014aa8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014a9e:	6839      	ldr	r1, [r7, #0]
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f000 f8be 	bl	8014c22 <USBD_CtlError>
        break;
 8014aa6:	bf00      	nop
}
 8014aa8:	bf00      	nop
 8014aaa:	3708      	adds	r7, #8
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b082      	sub	sp, #8
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
 8014ab8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014ac0:	b2db      	uxtb	r3, r3
 8014ac2:	3b01      	subs	r3, #1
 8014ac4:	2b02      	cmp	r3, #2
 8014ac6:	d81e      	bhi.n	8014b06 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	88db      	ldrh	r3, [r3, #6]
 8014acc:	2b02      	cmp	r3, #2
 8014ace:	d004      	beq.n	8014ada <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014ad0:	6839      	ldr	r1, [r7, #0]
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	f000 f8a5 	bl	8014c22 <USBD_CtlError>
        break;
 8014ad8:	e01a      	b.n	8014b10 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	2201      	movs	r2, #1
 8014ade:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d005      	beq.n	8014af6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	68db      	ldr	r3, [r3, #12]
 8014aee:	f043 0202 	orr.w	r2, r3, #2
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	330c      	adds	r3, #12
 8014afa:	2202      	movs	r2, #2
 8014afc:	4619      	mov	r1, r3
 8014afe:	6878      	ldr	r0, [r7, #4]
 8014b00:	f000 f90c 	bl	8014d1c <USBD_CtlSendData>
      break;
 8014b04:	e004      	b.n	8014b10 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014b06:	6839      	ldr	r1, [r7, #0]
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	f000 f88a 	bl	8014c22 <USBD_CtlError>
      break;
 8014b0e:	bf00      	nop
  }
}
 8014b10:	bf00      	nop
 8014b12:	3708      	adds	r7, #8
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}

08014b18 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b082      	sub	sp, #8
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b22:	683b      	ldr	r3, [r7, #0]
 8014b24:	885b      	ldrh	r3, [r3, #2]
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	d107      	bne.n	8014b3a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	2201      	movs	r2, #1
 8014b2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014b32:	6878      	ldr	r0, [r7, #4]
 8014b34:	f000 f94c 	bl	8014dd0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014b38:	e013      	b.n	8014b62 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	885b      	ldrh	r3, [r3, #2]
 8014b3e:	2b02      	cmp	r3, #2
 8014b40:	d10b      	bne.n	8014b5a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014b42:	683b      	ldr	r3, [r7, #0]
 8014b44:	889b      	ldrh	r3, [r3, #4]
 8014b46:	0a1b      	lsrs	r3, r3, #8
 8014b48:	b29b      	uxth	r3, r3
 8014b4a:	b2da      	uxtb	r2, r3
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	f000 f93c 	bl	8014dd0 <USBD_CtlSendStatus>
}
 8014b58:	e003      	b.n	8014b62 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014b5a:	6839      	ldr	r1, [r7, #0]
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	f000 f860 	bl	8014c22 <USBD_CtlError>
}
 8014b62:	bf00      	nop
 8014b64:	3708      	adds	r7, #8
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}

08014b6a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b6a:	b580      	push	{r7, lr}
 8014b6c:	b082      	sub	sp, #8
 8014b6e:	af00      	add	r7, sp, #0
 8014b70:	6078      	str	r0, [r7, #4]
 8014b72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014b7a:	b2db      	uxtb	r3, r3
 8014b7c:	3b01      	subs	r3, #1
 8014b7e:	2b02      	cmp	r3, #2
 8014b80:	d80b      	bhi.n	8014b9a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	885b      	ldrh	r3, [r3, #2]
 8014b86:	2b01      	cmp	r3, #1
 8014b88:	d10c      	bne.n	8014ba4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f000 f91c 	bl	8014dd0 <USBD_CtlSendStatus>
      }
      break;
 8014b98:	e004      	b.n	8014ba4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014b9a:	6839      	ldr	r1, [r7, #0]
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f000 f840 	bl	8014c22 <USBD_CtlError>
      break;
 8014ba2:	e000      	b.n	8014ba6 <USBD_ClrFeature+0x3c>
      break;
 8014ba4:	bf00      	nop
  }
}
 8014ba6:	bf00      	nop
 8014ba8:	3708      	adds	r7, #8
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}

08014bae <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014bae:	b580      	push	{r7, lr}
 8014bb0:	b084      	sub	sp, #16
 8014bb2:	af00      	add	r7, sp, #0
 8014bb4:	6078      	str	r0, [r7, #4]
 8014bb6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	781a      	ldrb	r2, [r3, #0]
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	781a      	ldrb	r2, [r3, #0]
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	3301      	adds	r3, #1
 8014bd6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014bd8:	68f8      	ldr	r0, [r7, #12]
 8014bda:	f7ff fa16 	bl	801400a <SWAPBYTE>
 8014bde:	4603      	mov	r3, r0
 8014be0:	461a      	mov	r2, r3
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	3301      	adds	r3, #1
 8014bea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	3301      	adds	r3, #1
 8014bf0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014bf2:	68f8      	ldr	r0, [r7, #12]
 8014bf4:	f7ff fa09 	bl	801400a <SWAPBYTE>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	461a      	mov	r2, r3
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	3301      	adds	r3, #1
 8014c04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	3301      	adds	r3, #1
 8014c0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014c0c:	68f8      	ldr	r0, [r7, #12]
 8014c0e:	f7ff f9fc 	bl	801400a <SWAPBYTE>
 8014c12:	4603      	mov	r3, r0
 8014c14:	461a      	mov	r2, r3
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	80da      	strh	r2, [r3, #6]
}
 8014c1a:	bf00      	nop
 8014c1c:	3710      	adds	r7, #16
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}

08014c22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c22:	b580      	push	{r7, lr}
 8014c24:	b082      	sub	sp, #8
 8014c26:	af00      	add	r7, sp, #0
 8014c28:	6078      	str	r0, [r7, #4]
 8014c2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c2c:	2180      	movs	r1, #128	@ 0x80
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f004 f9ba 	bl	8018fa8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014c34:	2100      	movs	r1, #0
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f004 f9b6 	bl	8018fa8 <USBD_LL_StallEP>
}
 8014c3c:	bf00      	nop
 8014c3e:	3708      	adds	r7, #8
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd80      	pop	{r7, pc}

08014c44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b086      	sub	sp, #24
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	60f8      	str	r0, [r7, #12]
 8014c4c:	60b9      	str	r1, [r7, #8]
 8014c4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014c50:	2300      	movs	r3, #0
 8014c52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d042      	beq.n	8014ce0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014c5e:	6938      	ldr	r0, [r7, #16]
 8014c60:	f000 f842 	bl	8014ce8 <USBD_GetLen>
 8014c64:	4603      	mov	r3, r0
 8014c66:	3301      	adds	r3, #1
 8014c68:	005b      	lsls	r3, r3, #1
 8014c6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014c6e:	d808      	bhi.n	8014c82 <USBD_GetString+0x3e>
 8014c70:	6938      	ldr	r0, [r7, #16]
 8014c72:	f000 f839 	bl	8014ce8 <USBD_GetLen>
 8014c76:	4603      	mov	r3, r0
 8014c78:	3301      	adds	r3, #1
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	005b      	lsls	r3, r3, #1
 8014c7e:	b29a      	uxth	r2, r3
 8014c80:	e001      	b.n	8014c86 <USBD_GetString+0x42>
 8014c82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014c8a:	7dfb      	ldrb	r3, [r7, #23]
 8014c8c:	68ba      	ldr	r2, [r7, #8]
 8014c8e:	4413      	add	r3, r2
 8014c90:	687a      	ldr	r2, [r7, #4]
 8014c92:	7812      	ldrb	r2, [r2, #0]
 8014c94:	701a      	strb	r2, [r3, #0]
  idx++;
 8014c96:	7dfb      	ldrb	r3, [r7, #23]
 8014c98:	3301      	adds	r3, #1
 8014c9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014c9c:	7dfb      	ldrb	r3, [r7, #23]
 8014c9e:	68ba      	ldr	r2, [r7, #8]
 8014ca0:	4413      	add	r3, r2
 8014ca2:	2203      	movs	r2, #3
 8014ca4:	701a      	strb	r2, [r3, #0]
  idx++;
 8014ca6:	7dfb      	ldrb	r3, [r7, #23]
 8014ca8:	3301      	adds	r3, #1
 8014caa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014cac:	e013      	b.n	8014cd6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014cae:	7dfb      	ldrb	r3, [r7, #23]
 8014cb0:	68ba      	ldr	r2, [r7, #8]
 8014cb2:	4413      	add	r3, r2
 8014cb4:	693a      	ldr	r2, [r7, #16]
 8014cb6:	7812      	ldrb	r2, [r2, #0]
 8014cb8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014cba:	693b      	ldr	r3, [r7, #16]
 8014cbc:	3301      	adds	r3, #1
 8014cbe:	613b      	str	r3, [r7, #16]
    idx++;
 8014cc0:	7dfb      	ldrb	r3, [r7, #23]
 8014cc2:	3301      	adds	r3, #1
 8014cc4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014cc6:	7dfb      	ldrb	r3, [r7, #23]
 8014cc8:	68ba      	ldr	r2, [r7, #8]
 8014cca:	4413      	add	r3, r2
 8014ccc:	2200      	movs	r2, #0
 8014cce:	701a      	strb	r2, [r3, #0]
    idx++;
 8014cd0:	7dfb      	ldrb	r3, [r7, #23]
 8014cd2:	3301      	adds	r3, #1
 8014cd4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	781b      	ldrb	r3, [r3, #0]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d1e7      	bne.n	8014cae <USBD_GetString+0x6a>
 8014cde:	e000      	b.n	8014ce2 <USBD_GetString+0x9e>
    return;
 8014ce0:	bf00      	nop
  }
}
 8014ce2:	3718      	adds	r7, #24
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bd80      	pop	{r7, pc}

08014ce8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014ce8:	b480      	push	{r7}
 8014cea:	b085      	sub	sp, #20
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014cf8:	e005      	b.n	8014d06 <USBD_GetLen+0x1e>
  {
    len++;
 8014cfa:	7bfb      	ldrb	r3, [r7, #15]
 8014cfc:	3301      	adds	r3, #1
 8014cfe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014d00:	68bb      	ldr	r3, [r7, #8]
 8014d02:	3301      	adds	r3, #1
 8014d04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014d06:	68bb      	ldr	r3, [r7, #8]
 8014d08:	781b      	ldrb	r3, [r3, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d1f5      	bne.n	8014cfa <USBD_GetLen+0x12>
  }

  return len;
 8014d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	3714      	adds	r7, #20
 8014d14:	46bd      	mov	sp, r7
 8014d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1a:	4770      	bx	lr

08014d1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b084      	sub	sp, #16
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	60f8      	str	r0, [r7, #12]
 8014d24:	60b9      	str	r1, [r7, #8]
 8014d26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	2202      	movs	r2, #2
 8014d2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	687a      	ldr	r2, [r7, #4]
 8014d34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	687a      	ldr	r2, [r7, #4]
 8014d3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	68ba      	ldr	r2, [r7, #8]
 8014d40:	2100      	movs	r1, #0
 8014d42:	68f8      	ldr	r0, [r7, #12]
 8014d44:	f004 f9b9 	bl	80190ba <USBD_LL_Transmit>

  return USBD_OK;
 8014d48:	2300      	movs	r3, #0
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	3710      	adds	r7, #16
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}

08014d52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014d52:	b580      	push	{r7, lr}
 8014d54:	b084      	sub	sp, #16
 8014d56:	af00      	add	r7, sp, #0
 8014d58:	60f8      	str	r0, [r7, #12]
 8014d5a:	60b9      	str	r1, [r7, #8]
 8014d5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	68ba      	ldr	r2, [r7, #8]
 8014d62:	2100      	movs	r1, #0
 8014d64:	68f8      	ldr	r0, [r7, #12]
 8014d66:	f004 f9a8 	bl	80190ba <USBD_LL_Transmit>

  return USBD_OK;
 8014d6a:	2300      	movs	r3, #0
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3710      	adds	r7, #16
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b084      	sub	sp, #16
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	2203      	movs	r2, #3
 8014d84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	687a      	ldr	r2, [r7, #4]
 8014d8c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	687a      	ldr	r2, [r7, #4]
 8014d94:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	68ba      	ldr	r2, [r7, #8]
 8014d9c:	2100      	movs	r1, #0
 8014d9e:	68f8      	ldr	r0, [r7, #12]
 8014da0:	f004 f9ac 	bl	80190fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014da4:	2300      	movs	r3, #0
}
 8014da6:	4618      	mov	r0, r3
 8014da8:	3710      	adds	r7, #16
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}

08014dae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014dae:	b580      	push	{r7, lr}
 8014db0:	b084      	sub	sp, #16
 8014db2:	af00      	add	r7, sp, #0
 8014db4:	60f8      	str	r0, [r7, #12]
 8014db6:	60b9      	str	r1, [r7, #8]
 8014db8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	68ba      	ldr	r2, [r7, #8]
 8014dbe:	2100      	movs	r1, #0
 8014dc0:	68f8      	ldr	r0, [r7, #12]
 8014dc2:	f004 f99b 	bl	80190fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014dc6:	2300      	movs	r3, #0
}
 8014dc8:	4618      	mov	r0, r3
 8014dca:	3710      	adds	r7, #16
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}

08014dd0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	2204      	movs	r2, #4
 8014ddc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014de0:	2300      	movs	r3, #0
 8014de2:	2200      	movs	r2, #0
 8014de4:	2100      	movs	r1, #0
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f004 f967 	bl	80190ba <USBD_LL_Transmit>

  return USBD_OK;
 8014dec:	2300      	movs	r3, #0
}
 8014dee:	4618      	mov	r0, r3
 8014df0:	3708      	adds	r7, #8
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd80      	pop	{r7, pc}

08014df6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014df6:	b580      	push	{r7, lr}
 8014df8:	b082      	sub	sp, #8
 8014dfa:	af00      	add	r7, sp, #0
 8014dfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	2205      	movs	r2, #5
 8014e02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e06:	2300      	movs	r3, #0
 8014e08:	2200      	movs	r2, #0
 8014e0a:	2100      	movs	r1, #0
 8014e0c:	6878      	ldr	r0, [r7, #4]
 8014e0e:	f004 f975 	bl	80190fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e12:	2300      	movs	r3, #0
}
 8014e14:	4618      	mov	r0, r3
 8014e16:	3708      	adds	r7, #8
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	bd80      	pop	{r7, pc}

08014e1c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b088      	sub	sp, #32
 8014e20:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8014e22:	2300      	movs	r3, #0
 8014e24:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014e26:	f107 0308 	add.w	r3, r7, #8
 8014e2a:	2218      	movs	r2, #24
 8014e2c:	2100      	movs	r1, #0
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f001 f92d 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 8014e34:	233f      	movs	r3, #63	@ 0x3f
 8014e36:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8014e38:	2381      	movs	r3, #129	@ 0x81
 8014e3a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014e3c:	1dfb      	adds	r3, r7, #7
 8014e3e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8014e40:	2301      	movs	r3, #1
 8014e42:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014e44:	f107 0308 	add.w	r3, r7, #8
 8014e48:	2100      	movs	r1, #0
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f001 fba8 	bl	80165a0 <hci_send_req>
 8014e50:	4603      	mov	r3, r0
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	da01      	bge.n	8014e5a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8014e56:	23ff      	movs	r3, #255	@ 0xff
 8014e58:	e000      	b.n	8014e5c <aci_gap_set_non_discoverable+0x40>
  return status;
 8014e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	3720      	adds	r7, #32
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}

08014e64 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8014e64:	b5b0      	push	{r4, r5, r7, lr}
 8014e66:	b0ce      	sub	sp, #312	@ 0x138
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	4605      	mov	r5, r0
 8014e6c:	460c      	mov	r4, r1
 8014e6e:	4610      	mov	r0, r2
 8014e70:	4619      	mov	r1, r3
 8014e72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e76:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8014e7a:	462a      	mov	r2, r5
 8014e7c:	701a      	strb	r2, [r3, #0]
 8014e7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e82:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014e86:	4622      	mov	r2, r4
 8014e88:	801a      	strh	r2, [r3, #0]
 8014e8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e8e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8014e92:	4602      	mov	r2, r0
 8014e94:	801a      	strh	r2, [r3, #0]
 8014e96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e9a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8014e9e:	460a      	mov	r2, r1
 8014ea0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8014ea2:	f107 0310 	add.w	r3, r7, #16
 8014ea6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8014eaa:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014eae:	3308      	adds	r3, #8
 8014eb0:	f107 0210 	add.w	r2, r7, #16
 8014eb4:	4413      	add	r3, r2
 8014eb6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8014eba:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014ebe:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014ec2:	4413      	add	r3, r2
 8014ec4:	3309      	adds	r3, #9
 8014ec6:	f107 0210 	add.w	r2, r7, #16
 8014eca:	4413      	add	r3, r2
 8014ecc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014ed0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ed4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014ed8:	2200      	movs	r2, #0
 8014eda:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014edc:	2300      	movs	r3, #0
 8014ede:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8014ee2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014ee6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014eea:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8014eee:	7812      	ldrb	r2, [r2, #0]
 8014ef0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014ef2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ef6:	3301      	adds	r3, #1
 8014ef8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8014efc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f00:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014f04:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8014f08:	8812      	ldrh	r2, [r2, #0]
 8014f0a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8014f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f12:	3302      	adds	r3, #2
 8014f14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8014f18:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f1c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014f20:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8014f24:	8812      	ldrh	r2, [r2, #0]
 8014f26:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8014f2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f2e:	3302      	adds	r3, #2
 8014f30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8014f34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f38:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014f3c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8014f40:	7812      	ldrb	r2, [r2, #0]
 8014f42:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014f44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f48:	3301      	adds	r3, #1
 8014f4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8014f4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f52:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014f56:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014f58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f5c:	3301      	adds	r3, #1
 8014f5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8014f62:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f66:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014f6a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8014f6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f70:	3301      	adds	r3, #1
 8014f72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8014f76:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f7a:	3308      	adds	r3, #8
 8014f7c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014f80:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8014f84:	4618      	mov	r0, r3
 8014f86:	f001 f872 	bl	801606e <Osal_MemCpy>
    index_input += Local_Name_Length;
 8014f8a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014f8e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014f92:	4413      	add	r3, r2
 8014f94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8014f98:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014f9c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014fa0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8014fa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fa6:	3301      	adds	r3, #1
 8014fa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8014fac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014fb0:	3301      	adds	r3, #1
 8014fb2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014fb6:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f001 f857 	bl	801606e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8014fc0:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014fc4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014fc8:	4413      	add	r3, r2
 8014fca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8014fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014fd2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8014fd6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014fd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fdc:	3302      	adds	r3, #2
 8014fde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8014fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014fe6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8014fea:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8014fec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ff0:	3302      	adds	r3, #2
 8014ff2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014ff6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014ffa:	2218      	movs	r2, #24
 8014ffc:	2100      	movs	r1, #0
 8014ffe:	4618      	mov	r0, r3
 8015000:	f001 f845 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015004:	233f      	movs	r3, #63	@ 0x3f
 8015006:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 801500a:	2383      	movs	r3, #131	@ 0x83
 801500c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015010:	f107 0310 	add.w	r3, r7, #16
 8015014:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015018:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801501c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015020:	f107 030f 	add.w	r3, r7, #15
 8015024:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015028:	2301      	movs	r3, #1
 801502a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801502e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015032:	2100      	movs	r1, #0
 8015034:	4618      	mov	r0, r3
 8015036:	f001 fab3 	bl	80165a0 <hci_send_req>
 801503a:	4603      	mov	r3, r0
 801503c:	2b00      	cmp	r3, #0
 801503e:	da01      	bge.n	8015044 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8015040:	23ff      	movs	r3, #255	@ 0xff
 8015042:	e004      	b.n	801504e <aci_gap_set_discoverable+0x1ea>
  return status;
 8015044:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015048:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801504c:	781b      	ldrb	r3, [r3, #0]
}
 801504e:	4618      	mov	r0, r3
 8015050:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8015054:	46bd      	mov	sp, r7
 8015056:	bdb0      	pop	{r4, r5, r7, pc}

08015058 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b0cc      	sub	sp, #304	@ 0x130
 801505c:	af00      	add	r7, sp, #0
 801505e:	4602      	mov	r2, r0
 8015060:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015064:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015068:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 801506a:	f107 0310 	add.w	r3, r7, #16
 801506e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015072:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015076:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801507a:	2200      	movs	r2, #0
 801507c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801507e:	2300      	movs	r3, #0
 8015080:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8015084:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015088:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801508c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015090:	7812      	ldrb	r2, [r2, #0]
 8015092:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015094:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015098:	3301      	adds	r3, #1
 801509a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801509e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80150a2:	2218      	movs	r2, #24
 80150a4:	2100      	movs	r1, #0
 80150a6:	4618      	mov	r0, r3
 80150a8:	f000 fff1 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 80150ac:	233f      	movs	r3, #63	@ 0x3f
 80150ae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80150b2:	2385      	movs	r3, #133	@ 0x85
 80150b4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80150b8:	f107 0310 	add.w	r3, r7, #16
 80150bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80150c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80150c8:	f107 030f 	add.w	r3, r7, #15
 80150cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80150d0:	2301      	movs	r3, #1
 80150d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80150d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80150da:	2100      	movs	r1, #0
 80150dc:	4618      	mov	r0, r3
 80150de:	f001 fa5f 	bl	80165a0 <hci_send_req>
 80150e2:	4603      	mov	r3, r0
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	da01      	bge.n	80150ec <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80150e8:	23ff      	movs	r3, #255	@ 0xff
 80150ea:	e004      	b.n	80150f6 <aci_gap_set_io_capability+0x9e>
  return status;
 80150ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80150f4:	781b      	ldrb	r3, [r3, #0]
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}

08015100 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8015100:	b5b0      	push	{r4, r5, r7, lr}
 8015102:	b0cc      	sub	sp, #304	@ 0x130
 8015104:	af00      	add	r7, sp, #0
 8015106:	4605      	mov	r5, r0
 8015108:	460c      	mov	r4, r1
 801510a:	4610      	mov	r0, r2
 801510c:	4619      	mov	r1, r3
 801510e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015112:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015116:	462a      	mov	r2, r5
 8015118:	701a      	strb	r2, [r3, #0]
 801511a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801511e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015122:	4622      	mov	r2, r4
 8015124:	701a      	strb	r2, [r3, #0]
 8015126:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801512a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801512e:	4602      	mov	r2, r0
 8015130:	701a      	strb	r2, [r3, #0]
 8015132:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015136:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801513a:	460a      	mov	r2, r1
 801513c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 801513e:	f107 0310 	add.w	r3, r7, #16
 8015142:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015146:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801514a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801514e:	2200      	movs	r2, #0
 8015150:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015152:	2300      	movs	r3, #0
 8015154:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8015158:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801515c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015160:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015164:	7812      	ldrb	r2, [r2, #0]
 8015166:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015168:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801516c:	3301      	adds	r3, #1
 801516e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8015172:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015176:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801517a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801517e:	7812      	ldrb	r2, [r2, #0]
 8015180:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015182:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015186:	3301      	adds	r3, #1
 8015188:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 801518c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015190:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015194:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8015198:	7812      	ldrb	r2, [r2, #0]
 801519a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801519c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151a0:	3301      	adds	r3, #1
 80151a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80151a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80151aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80151ae:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80151b2:	7812      	ldrb	r2, [r2, #0]
 80151b4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80151b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151ba:	3301      	adds	r3, #1
 80151bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80151c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80151c4:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80151c8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80151ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151ce:	3301      	adds	r3, #1
 80151d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80151d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80151d8:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80151dc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80151de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151e2:	3301      	adds	r3, #1
 80151e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80151e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80151ec:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80151f0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80151f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151f6:	3301      	adds	r3, #1
 80151f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80151fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015200:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8015204:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8015208:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801520c:	3304      	adds	r3, #4
 801520e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8015212:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015216:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801521a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 801521c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015220:	3301      	adds	r3, #1
 8015222:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015226:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801522a:	2218      	movs	r2, #24
 801522c:	2100      	movs	r1, #0
 801522e:	4618      	mov	r0, r3
 8015230:	f000 ff2d 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015234:	233f      	movs	r3, #63	@ 0x3f
 8015236:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 801523a:	2386      	movs	r3, #134	@ 0x86
 801523c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015240:	f107 0310 	add.w	r3, r7, #16
 8015244:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015248:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801524c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015250:	f107 030f 	add.w	r3, r7, #15
 8015254:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015258:	2301      	movs	r3, #1
 801525a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801525e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015262:	2100      	movs	r1, #0
 8015264:	4618      	mov	r0, r3
 8015266:	f001 f99b 	bl	80165a0 <hci_send_req>
 801526a:	4603      	mov	r3, r0
 801526c:	2b00      	cmp	r3, #0
 801526e:	da01      	bge.n	8015274 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8015270:	23ff      	movs	r3, #255	@ 0xff
 8015272:	e004      	b.n	801527e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8015274:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015278:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801527c:	781b      	ldrb	r3, [r3, #0]
}
 801527e:	4618      	mov	r0, r3
 8015280:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015284:	46bd      	mov	sp, r7
 8015286:	bdb0      	pop	{r4, r5, r7, pc}

08015288 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b0cc      	sub	sp, #304	@ 0x130
 801528c:	af00      	add	r7, sp, #0
 801528e:	4602      	mov	r2, r0
 8015290:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015294:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015298:	6019      	str	r1, [r3, #0]
 801529a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801529e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80152a2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80152a4:	f107 0310 	add.w	r3, r7, #16
 80152a8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80152ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80152b0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80152b4:	2200      	movs	r2, #0
 80152b6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80152b8:	2300      	movs	r3, #0
 80152ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80152be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80152c6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80152ca:	8812      	ldrh	r2, [r2, #0]
 80152cc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80152ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152d2:	3302      	adds	r3, #2
 80152d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80152d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80152e0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80152e4:	6812      	ldr	r2, [r2, #0]
 80152e6:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80152ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152ee:	3304      	adds	r3, #4
 80152f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80152f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80152f8:	2218      	movs	r2, #24
 80152fa:	2100      	movs	r1, #0
 80152fc:	4618      	mov	r0, r3
 80152fe:	f000 fec6 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015302:	233f      	movs	r3, #63	@ 0x3f
 8015304:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8015308:	2388      	movs	r3, #136	@ 0x88
 801530a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801530e:	f107 0310 	add.w	r3, r7, #16
 8015312:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015316:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801531a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801531e:	f107 030f 	add.w	r3, r7, #15
 8015322:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015326:	2301      	movs	r3, #1
 8015328:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801532c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015330:	2100      	movs	r1, #0
 8015332:	4618      	mov	r0, r3
 8015334:	f001 f934 	bl	80165a0 <hci_send_req>
 8015338:	4603      	mov	r3, r0
 801533a:	2b00      	cmp	r3, #0
 801533c:	da01      	bge.n	8015342 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 801533e:	23ff      	movs	r3, #255	@ 0xff
 8015340:	e004      	b.n	801534c <aci_gap_pass_key_resp+0xc4>
  return status;
 8015342:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015346:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801534a:	781b      	ldrb	r3, [r3, #0]
}
 801534c:	4618      	mov	r0, r3
 801534e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015352:	46bd      	mov	sp, r7
 8015354:	bd80      	pop	{r7, pc}

08015356 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8015356:	b590      	push	{r4, r7, lr}
 8015358:	b0cd      	sub	sp, #308	@ 0x134
 801535a:	af00      	add	r7, sp, #0
 801535c:	4604      	mov	r4, r0
 801535e:	4608      	mov	r0, r1
 8015360:	4611      	mov	r1, r2
 8015362:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015366:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 801536a:	6013      	str	r3, [r2, #0]
 801536c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015370:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015374:	4622      	mov	r2, r4
 8015376:	701a      	strb	r2, [r3, #0]
 8015378:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801537c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015380:	4602      	mov	r2, r0
 8015382:	701a      	strb	r2, [r3, #0]
 8015384:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015388:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801538c:	460a      	mov	r2, r1
 801538e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8015390:	f107 0310 	add.w	r3, r7, #16
 8015394:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015398:	f107 0308 	add.w	r3, r7, #8
 801539c:	2207      	movs	r2, #7
 801539e:	2100      	movs	r1, #0
 80153a0:	4618      	mov	r0, r3
 80153a2:	f000 fe74 	bl	801608e <Osal_MemSet>
  int index_input = 0;
 80153a6:	2300      	movs	r3, #0
 80153a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80153ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80153b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80153b4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80153b8:	7812      	ldrb	r2, [r2, #0]
 80153ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80153bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153c0:	3301      	adds	r3, #1
 80153c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80153c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80153ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80153ce:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80153d2:	7812      	ldrb	r2, [r2, #0]
 80153d4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80153d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153da:	3301      	adds	r3, #1
 80153dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80153e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80153e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80153e8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80153ec:	7812      	ldrb	r2, [r2, #0]
 80153ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80153f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153f4:	3301      	adds	r3, #1
 80153f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80153fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80153fe:	2218      	movs	r2, #24
 8015400:	2100      	movs	r1, #0
 8015402:	4618      	mov	r0, r3
 8015404:	f000 fe43 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015408:	233f      	movs	r3, #63	@ 0x3f
 801540a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 801540e:	238a      	movs	r3, #138	@ 0x8a
 8015410:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015414:	f107 0310 	add.w	r3, r7, #16
 8015418:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801541c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015420:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8015424:	f107 0308 	add.w	r3, r7, #8
 8015428:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 801542c:	2307      	movs	r3, #7
 801542e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015432:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015436:	2100      	movs	r1, #0
 8015438:	4618      	mov	r0, r3
 801543a:	f001 f8b1 	bl	80165a0 <hci_send_req>
 801543e:	4603      	mov	r3, r0
 8015440:	2b00      	cmp	r3, #0
 8015442:	da01      	bge.n	8015448 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8015444:	23ff      	movs	r3, #255	@ 0xff
 8015446:	e02e      	b.n	80154a6 <aci_gap_init+0x150>
  if ( resp.Status )
 8015448:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801544c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015450:	781b      	ldrb	r3, [r3, #0]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d005      	beq.n	8015462 <aci_gap_init+0x10c>
    return resp.Status;
 8015456:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801545a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801545e:	781b      	ldrb	r3, [r3, #0]
 8015460:	e021      	b.n	80154a6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8015462:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015466:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801546a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801546e:	b29a      	uxth	r2, r3
 8015470:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015474:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 801547c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015480:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015484:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8015488:	b29a      	uxth	r2, r3
 801548a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801548e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8015490:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015494:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015498:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801549c:	b29a      	uxth	r2, r3
 801549e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80154a2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80154a4:	2300      	movs	r3, #0
}
 80154a6:	4618      	mov	r0, r3
 80154a8:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd90      	pop	{r4, r7, pc}

080154b0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b0cc      	sub	sp, #304	@ 0x130
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	4602      	mov	r2, r0
 80154b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80154c0:	6019      	str	r1, [r3, #0]
 80154c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154c6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80154ca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80154cc:	f107 0310 	add.w	r3, r7, #16
 80154d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80154d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154d8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80154dc:	2200      	movs	r2, #0
 80154de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80154e0:	2300      	movs	r3, #0
 80154e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80154e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80154ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80154ee:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80154f2:	7812      	ldrb	r2, [r2, #0]
 80154f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80154f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80154fa:	3301      	adds	r3, #1
 80154fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8015500:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015504:	1c58      	adds	r0, r3, #1
 8015506:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801550a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801550e:	781a      	ldrb	r2, [r3, #0]
 8015510:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015514:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015518:	6819      	ldr	r1, [r3, #0]
 801551a:	f000 fda8 	bl	801606e <Osal_MemCpy>
  index_input += AdvDataLen;
 801551e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015522:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015526:	781b      	ldrb	r3, [r3, #0]
 8015528:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801552c:	4413      	add	r3, r2
 801552e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015532:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015536:	2218      	movs	r2, #24
 8015538:	2100      	movs	r1, #0
 801553a:	4618      	mov	r0, r3
 801553c:	f000 fda7 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015540:	233f      	movs	r3, #63	@ 0x3f
 8015542:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8015546:	238e      	movs	r3, #142	@ 0x8e
 8015548:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801554c:	f107 0310 	add.w	r3, r7, #16
 8015550:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015554:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015558:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801555c:	f107 030f 	add.w	r3, r7, #15
 8015560:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015564:	2301      	movs	r3, #1
 8015566:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801556a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801556e:	2100      	movs	r1, #0
 8015570:	4618      	mov	r0, r3
 8015572:	f001 f815 	bl	80165a0 <hci_send_req>
 8015576:	4603      	mov	r3, r0
 8015578:	2b00      	cmp	r3, #0
 801557a:	da01      	bge.n	8015580 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 801557c:	23ff      	movs	r3, #255	@ 0xff
 801557e:	e004      	b.n	801558a <aci_gap_update_adv_data+0xda>
  return status;
 8015580:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015584:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015588:	781b      	ldrb	r3, [r3, #0]
}
 801558a:	4618      	mov	r0, r3
 801558c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}

08015594 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b088      	sub	sp, #32
 8015598:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801559a:	2300      	movs	r3, #0
 801559c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801559e:	f107 0308 	add.w	r3, r7, #8
 80155a2:	2218      	movs	r2, #24
 80155a4:	2100      	movs	r1, #0
 80155a6:	4618      	mov	r0, r3
 80155a8:	f000 fd71 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 80155ac:	233f      	movs	r3, #63	@ 0x3f
 80155ae:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80155b0:	2392      	movs	r3, #146	@ 0x92
 80155b2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80155b4:	1dfb      	adds	r3, r7, #7
 80155b6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80155b8:	2301      	movs	r3, #1
 80155ba:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80155bc:	f107 0308 	add.w	r3, r7, #8
 80155c0:	2100      	movs	r1, #0
 80155c2:	4618      	mov	r0, r3
 80155c4:	f000 ffec 	bl	80165a0 <hci_send_req>
 80155c8:	4603      	mov	r3, r0
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	da01      	bge.n	80155d2 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80155ce:	23ff      	movs	r3, #255	@ 0xff
 80155d0:	e000      	b.n	80155d4 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80155d2:	79fb      	ldrb	r3, [r7, #7]
}
 80155d4:	4618      	mov	r0, r3
 80155d6:	3720      	adds	r7, #32
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}

080155dc <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80155dc:	b580      	push	{r7, lr}
 80155de:	b0cc      	sub	sp, #304	@ 0x130
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	4602      	mov	r2, r0
 80155e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80155e8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80155ec:	801a      	strh	r2, [r3, #0]
 80155ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80155f2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80155f6:	460a      	mov	r2, r1
 80155f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80155fa:	f107 0310 	add.w	r3, r7, #16
 80155fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015602:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015606:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801560a:	2200      	movs	r2, #0
 801560c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801560e:	2300      	movs	r3, #0
 8015610:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015614:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015618:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801561c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015620:	8812      	ldrh	r2, [r2, #0]
 8015622:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015624:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015628:	3302      	adds	r3, #2
 801562a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 801562e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015632:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015636:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801563a:	7812      	ldrb	r2, [r2, #0]
 801563c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801563e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015642:	3301      	adds	r3, #1
 8015644:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015648:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801564c:	2218      	movs	r2, #24
 801564e:	2100      	movs	r1, #0
 8015650:	4618      	mov	r0, r3
 8015652:	f000 fd1c 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015656:	233f      	movs	r3, #63	@ 0x3f
 8015658:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 801565c:	23a5      	movs	r3, #165	@ 0xa5
 801565e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015662:	f107 0310 	add.w	r3, r7, #16
 8015666:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801566a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801566e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015672:	f107 030f 	add.w	r3, r7, #15
 8015676:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801567a:	2301      	movs	r3, #1
 801567c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015680:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015684:	2100      	movs	r1, #0
 8015686:	4618      	mov	r0, r3
 8015688:	f000 ff8a 	bl	80165a0 <hci_send_req>
 801568c:	4603      	mov	r3, r0
 801568e:	2b00      	cmp	r3, #0
 8015690:	da01      	bge.n	8015696 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8015692:	23ff      	movs	r3, #255	@ 0xff
 8015694:	e004      	b.n	80156a0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8015696:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801569a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801569e:	781b      	ldrb	r3, [r3, #0]
}
 80156a0:	4618      	mov	r0, r3
 80156a2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}

080156aa <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80156aa:	b580      	push	{r7, lr}
 80156ac:	b088      	sub	sp, #32
 80156ae:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80156b0:	2300      	movs	r3, #0
 80156b2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80156b4:	f107 0308 	add.w	r3, r7, #8
 80156b8:	2218      	movs	r2, #24
 80156ba:	2100      	movs	r1, #0
 80156bc:	4618      	mov	r0, r3
 80156be:	f000 fce6 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 80156c2:	233f      	movs	r3, #63	@ 0x3f
 80156c4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80156c6:	f240 1301 	movw	r3, #257	@ 0x101
 80156ca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80156cc:	1dfb      	adds	r3, r7, #7
 80156ce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80156d0:	2301      	movs	r3, #1
 80156d2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80156d4:	f107 0308 	add.w	r3, r7, #8
 80156d8:	2100      	movs	r1, #0
 80156da:	4618      	mov	r0, r3
 80156dc:	f000 ff60 	bl	80165a0 <hci_send_req>
 80156e0:	4603      	mov	r3, r0
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	da01      	bge.n	80156ea <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80156e6:	23ff      	movs	r3, #255	@ 0xff
 80156e8:	e000      	b.n	80156ec <aci_gatt_init+0x42>
  return status;
 80156ea:	79fb      	ldrb	r3, [r7, #7]
}
 80156ec:	4618      	mov	r0, r3
 80156ee:	3720      	adds	r7, #32
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd80      	pop	{r7, pc}

080156f4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80156f4:	b590      	push	{r4, r7, lr}
 80156f6:	b0cf      	sub	sp, #316	@ 0x13c
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	4604      	mov	r4, r0
 80156fc:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8015700:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8015704:	6001      	str	r1, [r0, #0]
 8015706:	4610      	mov	r0, r2
 8015708:	4619      	mov	r1, r3
 801570a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801570e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8015712:	4622      	mov	r2, r4
 8015714:	701a      	strb	r2, [r3, #0]
 8015716:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801571a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801571e:	4602      	mov	r2, r0
 8015720:	701a      	strb	r2, [r3, #0]
 8015722:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015726:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801572a:	460a      	mov	r2, r1
 801572c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 801572e:	f107 0310 	add.w	r3, r7, #16
 8015732:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8015736:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801573a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801573e:	781b      	ldrb	r3, [r3, #0]
 8015740:	2b01      	cmp	r3, #1
 8015742:	d00a      	beq.n	801575a <aci_gatt_add_service+0x66>
 8015744:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015748:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801574c:	781b      	ldrb	r3, [r3, #0]
 801574e:	2b02      	cmp	r3, #2
 8015750:	d101      	bne.n	8015756 <aci_gatt_add_service+0x62>
 8015752:	2311      	movs	r3, #17
 8015754:	e002      	b.n	801575c <aci_gatt_add_service+0x68>
 8015756:	2301      	movs	r3, #1
 8015758:	e000      	b.n	801575c <aci_gatt_add_service+0x68>
 801575a:	2303      	movs	r3, #3
 801575c:	f107 0210 	add.w	r2, r7, #16
 8015760:	4413      	add	r3, r2
 8015762:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015766:	f107 030c 	add.w	r3, r7, #12
 801576a:	2203      	movs	r2, #3
 801576c:	2100      	movs	r1, #0
 801576e:	4618      	mov	r0, r3
 8015770:	f000 fc8d 	bl	801608e <Osal_MemSet>
  int index_input = 0;
 8015774:	2300      	movs	r3, #0
 8015776:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 801577a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801577e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015782:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8015786:	7812      	ldrb	r2, [r2, #0]
 8015788:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801578a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801578e:	3301      	adds	r3, #1
 8015790:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8015794:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015798:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801579c:	781b      	ldrb	r3, [r3, #0]
 801579e:	2b01      	cmp	r3, #1
 80157a0:	d002      	beq.n	80157a8 <aci_gatt_add_service+0xb4>
 80157a2:	2b02      	cmp	r3, #2
 80157a4:	d004      	beq.n	80157b0 <aci_gatt_add_service+0xbc>
 80157a6:	e007      	b.n	80157b8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80157a8:	2302      	movs	r3, #2
 80157aa:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80157ae:	e005      	b.n	80157bc <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80157b0:	2310      	movs	r3, #16
 80157b2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80157b6:	e001      	b.n	80157bc <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80157b8:	2397      	movs	r3, #151	@ 0x97
 80157ba:	e06c      	b.n	8015896 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80157bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80157c0:	1c58      	adds	r0, r3, #1
 80157c2:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80157c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80157ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80157ce:	6819      	ldr	r1, [r3, #0]
 80157d0:	f000 fc4d 	bl	801606e <Osal_MemCpy>
    index_input += size;
 80157d4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80157d8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80157dc:	4413      	add	r3, r2
 80157de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 80157e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80157e6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80157ea:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80157ee:	7812      	ldrb	r2, [r2, #0]
 80157f0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80157f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157f6:	3301      	adds	r3, #1
 80157f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80157fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015800:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015804:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8015808:	7812      	ldrb	r2, [r2, #0]
 801580a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 801580c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015810:	3301      	adds	r3, #1
 8015812:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015816:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801581a:	2218      	movs	r2, #24
 801581c:	2100      	movs	r1, #0
 801581e:	4618      	mov	r0, r3
 8015820:	f000 fc35 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015824:	233f      	movs	r3, #63	@ 0x3f
 8015826:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 801582a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 801582e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015832:	f107 0310 	add.w	r3, r7, #16
 8015836:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801583a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801583e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8015842:	f107 030c 	add.w	r3, r7, #12
 8015846:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 801584a:	2303      	movs	r3, #3
 801584c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015850:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015854:	2100      	movs	r1, #0
 8015856:	4618      	mov	r0, r3
 8015858:	f000 fea2 	bl	80165a0 <hci_send_req>
 801585c:	4603      	mov	r3, r0
 801585e:	2b00      	cmp	r3, #0
 8015860:	da01      	bge.n	8015866 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8015862:	23ff      	movs	r3, #255	@ 0xff
 8015864:	e017      	b.n	8015896 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8015866:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801586a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801586e:	781b      	ldrb	r3, [r3, #0]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d005      	beq.n	8015880 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8015874:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015878:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801587c:	781b      	ldrb	r3, [r3, #0]
 801587e:	e00a      	b.n	8015896 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8015880:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015884:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015888:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801588c:	b29a      	uxth	r2, r3
 801588e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8015892:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015894:	2300      	movs	r3, #0
}
 8015896:	4618      	mov	r0, r3
 8015898:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 801589c:	46bd      	mov	sp, r7
 801589e:	bd90      	pop	{r4, r7, pc}

080158a0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80158a0:	b590      	push	{r4, r7, lr}
 80158a2:	b0d1      	sub	sp, #324	@ 0x144
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	4604      	mov	r4, r0
 80158a8:	4608      	mov	r0, r1
 80158aa:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80158ae:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80158b2:	600a      	str	r2, [r1, #0]
 80158b4:	4619      	mov	r1, r3
 80158b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80158ba:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80158be:	4622      	mov	r2, r4
 80158c0:	801a      	strh	r2, [r3, #0]
 80158c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80158c6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80158ca:	4602      	mov	r2, r0
 80158cc:	701a      	strb	r2, [r3, #0]
 80158ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80158d2:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 80158d6:	460a      	mov	r2, r1
 80158d8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80158da:	f107 0318 	add.w	r3, r7, #24
 80158de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80158e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80158e6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	2b01      	cmp	r3, #1
 80158ee:	d00a      	beq.n	8015906 <aci_gatt_add_char+0x66>
 80158f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80158f4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80158f8:	781b      	ldrb	r3, [r3, #0]
 80158fa:	2b02      	cmp	r3, #2
 80158fc:	d101      	bne.n	8015902 <aci_gatt_add_char+0x62>
 80158fe:	2313      	movs	r3, #19
 8015900:	e002      	b.n	8015908 <aci_gatt_add_char+0x68>
 8015902:	2303      	movs	r3, #3
 8015904:	e000      	b.n	8015908 <aci_gatt_add_char+0x68>
 8015906:	2305      	movs	r3, #5
 8015908:	f107 0218 	add.w	r2, r7, #24
 801590c:	4413      	add	r3, r2
 801590e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015912:	f107 0314 	add.w	r3, r7, #20
 8015916:	2203      	movs	r2, #3
 8015918:	2100      	movs	r1, #0
 801591a:	4618      	mov	r0, r3
 801591c:	f000 fbb7 	bl	801608e <Osal_MemSet>
  int index_input = 0;
 8015920:	2300      	movs	r3, #0
 8015922:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8015926:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801592a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801592e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8015932:	8812      	ldrh	r2, [r2, #0]
 8015934:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015936:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801593a:	3302      	adds	r3, #2
 801593c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8015940:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8015944:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8015948:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 801594c:	7812      	ldrb	r2, [r2, #0]
 801594e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015950:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015954:	3301      	adds	r3, #1
 8015956:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 801595a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801595e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8015962:	781b      	ldrb	r3, [r3, #0]
 8015964:	2b01      	cmp	r3, #1
 8015966:	d002      	beq.n	801596e <aci_gatt_add_char+0xce>
 8015968:	2b02      	cmp	r3, #2
 801596a:	d004      	beq.n	8015976 <aci_gatt_add_char+0xd6>
 801596c:	e007      	b.n	801597e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 801596e:	2302      	movs	r3, #2
 8015970:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8015974:	e005      	b.n	8015982 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8015976:	2310      	movs	r3, #16
 8015978:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 801597c:	e001      	b.n	8015982 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 801597e:	2397      	movs	r3, #151	@ 0x97
 8015980:	e091      	b.n	8015aa6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8015982:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8015986:	1cd8      	adds	r0, r3, #3
 8015988:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 801598c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015990:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015994:	6819      	ldr	r1, [r3, #0]
 8015996:	f000 fb6a 	bl	801606e <Osal_MemCpy>
    index_input += size;
 801599a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801599e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80159a2:	4413      	add	r3, r2
 80159a4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80159a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80159ac:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80159b0:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80159b4:	8812      	ldrh	r2, [r2, #0]
 80159b6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80159b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80159bc:	3302      	adds	r3, #2
 80159be:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80159c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80159c6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80159ca:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80159cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80159d0:	3301      	adds	r3, #1
 80159d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80159d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80159da:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80159de:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80159e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80159e4:	3301      	adds	r3, #1
 80159e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80159ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80159ee:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80159f2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80159f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80159f8:	3301      	adds	r3, #1
 80159fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80159fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015a02:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8015a06:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8015a08:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a0c:	3301      	adds	r3, #1
 8015a0e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8015a12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015a16:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8015a1a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8015a1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a20:	3301      	adds	r3, #1
 8015a22:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015a26:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015a2a:	2218      	movs	r2, #24
 8015a2c:	2100      	movs	r1, #0
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f000 fb2d 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015a34:	233f      	movs	r3, #63	@ 0x3f
 8015a36:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8015a3a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8015a3e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8015a42:	f107 0318 	add.w	r3, r7, #24
 8015a46:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8015a4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a4e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8015a52:	f107 0314 	add.w	r3, r7, #20
 8015a56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8015a5a:	2303      	movs	r3, #3
 8015a5c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015a60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015a64:	2100      	movs	r1, #0
 8015a66:	4618      	mov	r0, r3
 8015a68:	f000 fd9a 	bl	80165a0 <hci_send_req>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	da01      	bge.n	8015a76 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8015a72:	23ff      	movs	r3, #255	@ 0xff
 8015a74:	e017      	b.n	8015aa6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8015a76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015a7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d005      	beq.n	8015a90 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8015a84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015a88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015a8c:	781b      	ldrb	r3, [r3, #0]
 8015a8e:	e00a      	b.n	8015aa6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8015a90:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015a94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015a98:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015a9c:	b29a      	uxth	r2, r3
 8015a9e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8015aa2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015aa4:	2300      	movs	r3, #0
}
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd90      	pop	{r4, r7, pc}

08015ab0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8015ab0:	b5b0      	push	{r4, r5, r7, lr}
 8015ab2:	b0cc      	sub	sp, #304	@ 0x130
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	4605      	mov	r5, r0
 8015ab8:	460c      	mov	r4, r1
 8015aba:	4610      	mov	r0, r2
 8015abc:	4619      	mov	r1, r3
 8015abe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ac2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015ac6:	462a      	mov	r2, r5
 8015ac8:	801a      	strh	r2, [r3, #0]
 8015aca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ace:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015ad2:	4622      	mov	r2, r4
 8015ad4:	801a      	strh	r2, [r3, #0]
 8015ad6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ada:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8015ade:	4602      	mov	r2, r0
 8015ae0:	701a      	strb	r2, [r3, #0]
 8015ae2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ae6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015aea:	460a      	mov	r2, r1
 8015aec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8015aee:	f107 0310 	add.w	r3, r7, #16
 8015af2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015af6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015afa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015afe:	2200      	movs	r2, #0
 8015b00:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015b02:	2300      	movs	r3, #0
 8015b04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8015b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b0c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015b10:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015b14:	8812      	ldrh	r2, [r2, #0]
 8015b16:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015b18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b1c:	3302      	adds	r3, #2
 8015b1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8015b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b26:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015b2a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8015b2e:	8812      	ldrh	r2, [r2, #0]
 8015b30:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8015b32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b36:	3302      	adds	r3, #2
 8015b38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8015b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b40:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015b44:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8015b48:	7812      	ldrb	r2, [r2, #0]
 8015b4a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8015b4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b50:	3301      	adds	r3, #1
 8015b52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8015b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b5a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015b5e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8015b62:	7812      	ldrb	r2, [r2, #0]
 8015b64:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8015b66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b6a:	3301      	adds	r3, #1
 8015b6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8015b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b74:	1d98      	adds	r0, r3, #6
 8015b76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b7a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015b7e:	781b      	ldrb	r3, [r3, #0]
 8015b80:	461a      	mov	r2, r3
 8015b82:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8015b86:	f000 fa72 	bl	801606e <Osal_MemCpy>
  index_input += Char_Value_Length;
 8015b8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b8e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015b92:	781b      	ldrb	r3, [r3, #0]
 8015b94:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015b98:	4413      	add	r3, r2
 8015b9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015b9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015ba2:	2218      	movs	r2, #24
 8015ba4:	2100      	movs	r1, #0
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f000 fa71 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015bac:	233f      	movs	r3, #63	@ 0x3f
 8015bae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8015bb2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8015bb6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015bba:	f107 0310 	add.w	r3, r7, #16
 8015bbe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015bc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bc6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015bca:	f107 030f 	add.w	r3, r7, #15
 8015bce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015bd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015bdc:	2100      	movs	r1, #0
 8015bde:	4618      	mov	r0, r3
 8015be0:	f000 fcde 	bl	80165a0 <hci_send_req>
 8015be4:	4603      	mov	r3, r0
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	da01      	bge.n	8015bee <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8015bea:	23ff      	movs	r3, #255	@ 0xff
 8015bec:	e004      	b.n	8015bf8 <aci_gatt_update_char_value+0x148>
  return status;
 8015bee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015bf2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015bf6:	781b      	ldrb	r3, [r3, #0]
}
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bdb0      	pop	{r4, r5, r7, pc}

08015c02 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8015c02:	b580      	push	{r7, lr}
 8015c04:	b0cc      	sub	sp, #304	@ 0x130
 8015c06:	af00      	add	r7, sp, #0
 8015c08:	4602      	mov	r2, r0
 8015c0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c0e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015c12:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8015c14:	f107 0310 	add.w	r3, r7, #16
 8015c18:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015c1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c20:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015c24:	2200      	movs	r2, #0
 8015c26:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015c28:	2300      	movs	r3, #0
 8015c2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015c32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015c36:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015c3a:	8812      	ldrh	r2, [r2, #0]
 8015c3c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015c3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c42:	3302      	adds	r3, #2
 8015c44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015c48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015c4c:	2218      	movs	r2, #24
 8015c4e:	2100      	movs	r1, #0
 8015c50:	4618      	mov	r0, r3
 8015c52:	f000 fa1c 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015c56:	233f      	movs	r3, #63	@ 0x3f
 8015c58:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8015c5c:	f240 1325 	movw	r3, #293	@ 0x125
 8015c60:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015c64:	f107 0310 	add.w	r3, r7, #16
 8015c68:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015c6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c70:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015c74:	f107 030f 	add.w	r3, r7, #15
 8015c78:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015c82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015c86:	2100      	movs	r1, #0
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f000 fc89 	bl	80165a0 <hci_send_req>
 8015c8e:	4603      	mov	r3, r0
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	da01      	bge.n	8015c98 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8015c94:	23ff      	movs	r3, #255	@ 0xff
 8015c96:	e004      	b.n	8015ca2 <aci_gatt_confirm_indication+0xa0>
  return status;
 8015c98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c9c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015ca0:	781b      	ldrb	r3, [r3, #0]
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	bd80      	pop	{r7, pc}

08015cac <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b0cc      	sub	sp, #304	@ 0x130
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015cb6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015cba:	601a      	str	r2, [r3, #0]
 8015cbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015cc0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015cc4:	4602      	mov	r2, r0
 8015cc6:	701a      	strb	r2, [r3, #0]
 8015cc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ccc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015cd0:	460a      	mov	r2, r1
 8015cd2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8015cd4:	f107 0310 	add.w	r3, r7, #16
 8015cd8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015cdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ce0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015ce8:	2300      	movs	r3, #0
 8015cea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8015cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015cf2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015cf6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015cfa:	7812      	ldrb	r2, [r2, #0]
 8015cfc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015cfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d02:	3301      	adds	r3, #1
 8015d04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8015d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015d0c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015d10:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015d14:	7812      	ldrb	r2, [r2, #0]
 8015d16:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015d18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d1c:	3301      	adds	r3, #1
 8015d1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8015d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015d26:	1c98      	adds	r0, r3, #2
 8015d28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d2c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015d30:	781a      	ldrb	r2, [r3, #0]
 8015d32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d36:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015d3a:	6819      	ldr	r1, [r3, #0]
 8015d3c:	f000 f997 	bl	801606e <Osal_MemCpy>
  index_input += Length;
 8015d40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d44:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015d48:	781b      	ldrb	r3, [r3, #0]
 8015d4a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015d4e:	4413      	add	r3, r2
 8015d50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015d54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015d58:	2218      	movs	r2, #24
 8015d5a:	2100      	movs	r1, #0
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f000 f996 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015d62:	233f      	movs	r3, #63	@ 0x3f
 8015d64:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8015d68:	230c      	movs	r3, #12
 8015d6a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015d6e:	f107 0310 	add.w	r3, r7, #16
 8015d72:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015d76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015d7e:	f107 030f 	add.w	r3, r7, #15
 8015d82:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015d86:	2301      	movs	r3, #1
 8015d88:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015d8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015d90:	2100      	movs	r1, #0
 8015d92:	4618      	mov	r0, r3
 8015d94:	f000 fc04 	bl	80165a0 <hci_send_req>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	da01      	bge.n	8015da2 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8015d9e:	23ff      	movs	r3, #255	@ 0xff
 8015da0:	e004      	b.n	8015dac <aci_hal_write_config_data+0x100>
  return status;
 8015da2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015da6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015daa:	781b      	ldrb	r3, [r3, #0]
}
 8015dac:	4618      	mov	r0, r3
 8015dae:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}

08015db6 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8015db6:	b580      	push	{r7, lr}
 8015db8:	b0cc      	sub	sp, #304	@ 0x130
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	4602      	mov	r2, r0
 8015dbe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015dc2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015dc6:	701a      	strb	r2, [r3, #0]
 8015dc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015dcc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015dd0:	460a      	mov	r2, r1
 8015dd2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8015dd4:	f107 0310 	add.w	r3, r7, #16
 8015dd8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015ddc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015de0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015de4:	2200      	movs	r2, #0
 8015de6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015de8:	2300      	movs	r3, #0
 8015dea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8015dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015df2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015df6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015dfa:	7812      	ldrb	r2, [r2, #0]
 8015dfc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e02:	3301      	adds	r3, #1
 8015e04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8015e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015e0c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015e10:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015e14:	7812      	ldrb	r2, [r2, #0]
 8015e16:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015e18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e1c:	3301      	adds	r3, #1
 8015e1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015e22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015e26:	2218      	movs	r2, #24
 8015e28:	2100      	movs	r1, #0
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f000 f92f 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015e30:	233f      	movs	r3, #63	@ 0x3f
 8015e32:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8015e36:	230f      	movs	r3, #15
 8015e38:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015e3c:	f107 0310 	add.w	r3, r7, #16
 8015e40:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015e44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e48:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015e4c:	f107 030f 	add.w	r3, r7, #15
 8015e50:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015e54:	2301      	movs	r3, #1
 8015e56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015e5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015e5e:	2100      	movs	r1, #0
 8015e60:	4618      	mov	r0, r3
 8015e62:	f000 fb9d 	bl	80165a0 <hci_send_req>
 8015e66:	4603      	mov	r3, r0
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	da01      	bge.n	8015e70 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8015e6c:	23ff      	movs	r3, #255	@ 0xff
 8015e6e:	e004      	b.n	8015e7a <aci_hal_set_tx_power_level+0xc4>
  return status;
 8015e70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e74:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015e78:	781b      	ldrb	r3, [r3, #0]
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}

08015e84 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b0cc      	sub	sp, #304	@ 0x130
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	4602      	mov	r2, r0
 8015e8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e90:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015e94:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8015e96:	f107 0310 	add.w	r3, r7, #16
 8015e9a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015e9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ea2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015eaa:	2300      	movs	r3, #0
 8015eac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8015eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015eb4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015eb8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015ebc:	8812      	ldrh	r2, [r2, #0]
 8015ebe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015ec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ec4:	3302      	adds	r3, #2
 8015ec6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015eca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015ece:	2218      	movs	r2, #24
 8015ed0:	2100      	movs	r1, #0
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	f000 f8db 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015ed8:	233f      	movs	r3, #63	@ 0x3f
 8015eda:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8015ede:	2318      	movs	r3, #24
 8015ee0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015ee4:	f107 0310 	add.w	r3, r7, #16
 8015ee8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015eec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ef0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015ef4:	f107 030f 	add.w	r3, r7, #15
 8015ef8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015efc:	2301      	movs	r3, #1
 8015efe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015f02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015f06:	2100      	movs	r1, #0
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f000 fb49 	bl	80165a0 <hci_send_req>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	da01      	bge.n	8015f18 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8015f14:	23ff      	movs	r3, #255	@ 0xff
 8015f16:	e004      	b.n	8015f22 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8015f18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015f1c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015f20:	781b      	ldrb	r3, [r3, #0]
}
 8015f22:	4618      	mov	r0, r3
 8015f24:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	bd80      	pop	{r7, pc}

08015f2c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b088      	sub	sp, #32
 8015f30:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015f32:	2300      	movs	r3, #0
 8015f34:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015f36:	f107 0308 	add.w	r3, r7, #8
 8015f3a:	2218      	movs	r2, #24
 8015f3c:	2100      	movs	r1, #0
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f000 f8a5 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x03;
 8015f44:	2303      	movs	r3, #3
 8015f46:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8015f48:	2303      	movs	r3, #3
 8015f4a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015f4c:	1dfb      	adds	r3, r7, #7
 8015f4e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015f50:	2301      	movs	r3, #1
 8015f52:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015f54:	f107 0308 	add.w	r3, r7, #8
 8015f58:	2100      	movs	r1, #0
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f000 fb20 	bl	80165a0 <hci_send_req>
 8015f60:	4603      	mov	r3, r0
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	da01      	bge.n	8015f6a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8015f66:	23ff      	movs	r3, #255	@ 0xff
 8015f68:	e000      	b.n	8015f6c <hci_reset+0x40>
  return status;
 8015f6a:	79fb      	ldrb	r3, [r7, #7]
}
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	3720      	adds	r7, #32
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}

08015f74 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8015f74:	b590      	push	{r4, r7, lr}
 8015f76:	b0cd      	sub	sp, #308	@ 0x134
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	4604      	mov	r4, r0
 8015f7c:	4608      	mov	r0, r1
 8015f7e:	4611      	mov	r1, r2
 8015f80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015f84:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015f88:	4622      	mov	r2, r4
 8015f8a:	701a      	strb	r2, [r3, #0]
 8015f8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015f90:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015f94:	4602      	mov	r2, r0
 8015f96:	701a      	strb	r2, [r3, #0]
 8015f98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015f9c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015fa0:	460a      	mov	r2, r1
 8015fa2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8015fa4:	f107 0310 	add.w	r3, r7, #16
 8015fa8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015fac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015fb0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015fb8:	2300      	movs	r3, #0
 8015fba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8015fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015fc2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015fc6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015fca:	7812      	ldrb	r2, [r2, #0]
 8015fcc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015fce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015fd2:	3301      	adds	r3, #1
 8015fd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8015fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015fdc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015fe0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015fe4:	7812      	ldrb	r2, [r2, #0]
 8015fe6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015fe8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015fec:	3301      	adds	r3, #1
 8015fee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8015ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015ff6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015ffa:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8015ffe:	7812      	ldrb	r2, [r2, #0]
 8016000:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8016002:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016006:	3301      	adds	r3, #1
 8016008:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801600c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016010:	2218      	movs	r2, #24
 8016012:	2100      	movs	r1, #0
 8016014:	4618      	mov	r0, r3
 8016016:	f000 f83a 	bl	801608e <Osal_MemSet>
  rq.ogf = 0x08;
 801601a:	2308      	movs	r3, #8
 801601c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8016020:	2331      	movs	r3, #49	@ 0x31
 8016022:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016026:	f107 0310 	add.w	r3, r7, #16
 801602a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801602e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016032:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8016036:	f107 030f 	add.w	r3, r7, #15
 801603a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801603e:	2301      	movs	r3, #1
 8016040:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016044:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016048:	2100      	movs	r1, #0
 801604a:	4618      	mov	r0, r3
 801604c:	f000 faa8 	bl	80165a0 <hci_send_req>
 8016050:	4603      	mov	r3, r0
 8016052:	2b00      	cmp	r3, #0
 8016054:	da01      	bge.n	801605a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8016056:	23ff      	movs	r3, #255	@ 0xff
 8016058:	e004      	b.n	8016064 <hci_le_set_default_phy+0xf0>
  return status;
 801605a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801605e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016062:	781b      	ldrb	r3, [r3, #0]
}
 8016064:	4618      	mov	r0, r3
 8016066:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 801606a:	46bd      	mov	sp, r7
 801606c:	bd90      	pop	{r4, r7, pc}

0801606e <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 801606e:	b580      	push	{r7, lr}
 8016070:	b084      	sub	sp, #16
 8016072:	af00      	add	r7, sp, #0
 8016074:	60f8      	str	r0, [r7, #12]
 8016076:	60b9      	str	r1, [r7, #8]
 8016078:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 801607a:	687a      	ldr	r2, [r7, #4]
 801607c:	68b9      	ldr	r1, [r7, #8]
 801607e:	68f8      	ldr	r0, [r7, #12]
 8016080:	f005 fbe3 	bl	801b84a <memcpy>
 8016084:	4603      	mov	r3, r0
}
 8016086:	4618      	mov	r0, r3
 8016088:	3710      	adds	r7, #16
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}

0801608e <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 801608e:	b580      	push	{r7, lr}
 8016090:	b084      	sub	sp, #16
 8016092:	af00      	add	r7, sp, #0
 8016094:	60f8      	str	r0, [r7, #12]
 8016096:	60b9      	str	r1, [r7, #8]
 8016098:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 801609a:	687a      	ldr	r2, [r7, #4]
 801609c:	68b9      	ldr	r1, [r7, #8]
 801609e:	68f8      	ldr	r0, [r7, #12]
 80160a0:	f005 fab7 	bl	801b612 <memset>
 80160a4:	4603      	mov	r3, r0
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	3710      	adds	r7, #16
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bd80      	pop	{r7, pc}

080160ae <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80160ae:	b480      	push	{r7}
 80160b0:	af00      	add	r7, sp, #0
  return;
 80160b2:	bf00      	nop
}
 80160b4:	46bd      	mov	sp, r7
 80160b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ba:	4770      	bx	lr

080160bc <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80160bc:	b480      	push	{r7}
 80160be:	af00      	add	r7, sp, #0
  return;
 80160c0:	bf00      	nop
}
 80160c2:	46bd      	mov	sp, r7
 80160c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c8:	4770      	bx	lr

080160ca <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80160ca:	b480      	push	{r7}
 80160cc:	af00      	add	r7, sp, #0
  return;
 80160ce:	bf00      	nop
}
 80160d0:	46bd      	mov	sp, r7
 80160d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d6:	4770      	bx	lr

080160d8 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80160d8:	b480      	push	{r7}
 80160da:	af00      	add	r7, sp, #0
  return;
 80160dc:	bf00      	nop
}
 80160de:	46bd      	mov	sp, r7
 80160e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e4:	4770      	bx	lr

080160e6 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80160e6:	b480      	push	{r7}
 80160e8:	af00      	add	r7, sp, #0
  return;
 80160ea:	bf00      	nop
}
 80160ec:	46bd      	mov	sp, r7
 80160ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f2:	4770      	bx	lr

080160f4 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80160f4:	b480      	push	{r7}
 80160f6:	af00      	add	r7, sp, #0
  return;
 80160f8:	bf00      	nop
}
 80160fa:	46bd      	mov	sp, r7
 80160fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016100:	4770      	bx	lr

08016102 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8016102:	b480      	push	{r7}
 8016104:	af00      	add	r7, sp, #0
  return;
 8016106:	bf00      	nop
}
 8016108:	46bd      	mov	sp, r7
 801610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610e:	4770      	bx	lr

08016110 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8016110:	b480      	push	{r7}
 8016112:	af00      	add	r7, sp, #0
  return;
 8016114:	bf00      	nop
}
 8016116:	46bd      	mov	sp, r7
 8016118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611c:	4770      	bx	lr

0801611e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 801611e:	b480      	push	{r7}
 8016120:	af00      	add	r7, sp, #0
  return;
 8016122:	bf00      	nop
}
 8016124:	46bd      	mov	sp, r7
 8016126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612a:	4770      	bx	lr

0801612c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 801612c:	b480      	push	{r7}
 801612e:	af00      	add	r7, sp, #0
  return;
 8016130:	bf00      	nop
}
 8016132:	46bd      	mov	sp, r7
 8016134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016138:	4770      	bx	lr

0801613a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 801613a:	b480      	push	{r7}
 801613c:	af00      	add	r7, sp, #0
  return;
 801613e:	bf00      	nop
}
 8016140:	46bd      	mov	sp, r7
 8016142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016146:	4770      	bx	lr

08016148 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8016148:	b480      	push	{r7}
 801614a:	af00      	add	r7, sp, #0
  return;
 801614c:	bf00      	nop
}
 801614e:	46bd      	mov	sp, r7
 8016150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016154:	4770      	bx	lr

08016156 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8016156:	b480      	push	{r7}
 8016158:	af00      	add	r7, sp, #0
  return;
 801615a:	bf00      	nop
}
 801615c:	46bd      	mov	sp, r7
 801615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016162:	4770      	bx	lr

08016164 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8016164:	b480      	push	{r7}
 8016166:	af00      	add	r7, sp, #0
  return;
 8016168:	bf00      	nop
}
 801616a:	46bd      	mov	sp, r7
 801616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016170:	4770      	bx	lr

08016172 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8016172:	b480      	push	{r7}
 8016174:	af00      	add	r7, sp, #0
  return;
 8016176:	bf00      	nop
}
 8016178:	46bd      	mov	sp, r7
 801617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617e:	4770      	bx	lr

08016180 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8016180:	b480      	push	{r7}
 8016182:	af00      	add	r7, sp, #0
  return;
 8016184:	bf00      	nop
}
 8016186:	46bd      	mov	sp, r7
 8016188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618c:	4770      	bx	lr

0801618e <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 801618e:	b480      	push	{r7}
 8016190:	af00      	add	r7, sp, #0
  return;
 8016192:	bf00      	nop
}
 8016194:	46bd      	mov	sp, r7
 8016196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619a:	4770      	bx	lr

0801619c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 801619c:	b580      	push	{r7, lr}
 801619e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80161a0:	4b04      	ldr	r3, [pc, #16]	@ (80161b4 <SVCCTL_Init+0x18>)
 80161a2:	2200      	movs	r2, #0
 80161a4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80161a6:	4b04      	ldr	r3, [pc, #16]	@ (80161b8 <SVCCTL_Init+0x1c>)
 80161a8:	2200      	movs	r2, #0
 80161aa:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80161ac:	f000 f806 	bl	80161bc <SVCCTL_SvcInit>

  return;
 80161b0:	bf00      	nop
}
 80161b2:	bd80      	pop	{r7, pc}
 80161b4:	20000328 	.word	0x20000328
 80161b8:	20000348 	.word	0x20000348

080161bc <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	af00      	add	r7, sp, #0
  BAS_Init();
 80161c0:	f7ff ff75 	bl	80160ae <BAS_Init>

  BLS_Init();
 80161c4:	f7ff ff7a 	bl	80160bc <BLS_Init>

  CRS_STM_Init();
 80161c8:	f7ff ff7f 	bl	80160ca <CRS_STM_Init>

  DIS_Init();
 80161cc:	f7ff ff84 	bl	80160d8 <DIS_Init>

  EDS_STM_Init();
 80161d0:	f7ff ff89 	bl	80160e6 <EDS_STM_Init>

  HIDS_Init();
 80161d4:	f7ff ff8e 	bl	80160f4 <HIDS_Init>

  HRS_Init();
 80161d8:	f7ff ff93 	bl	8016102 <HRS_Init>

  HTS_Init();
 80161dc:	f7ff ff98 	bl	8016110 <HTS_Init>

  IAS_Init();
 80161e0:	f7ff ff9d 	bl	801611e <IAS_Init>

  LLS_Init();
 80161e4:	f7ff ffa2 	bl	801612c <LLS_Init>

  TPS_Init();
 80161e8:	f7ff ffa7 	bl	801613a <TPS_Init>

  MOTENV_STM_Init();
 80161ec:	f7ff ffac 	bl	8016148 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80161f0:	f7ff ffb1 	bl	8016156 <P2PS_STM_Init>

  ZDD_STM_Init();
 80161f4:	f7ff ffb6 	bl	8016164 <ZDD_STM_Init>

  OTAS_STM_Init();
 80161f8:	f7ff ffbb 	bl	8016172 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80161fc:	f7ff ffc7 	bl	801618e <BVOPUS_STM_Init>

  MESH_Init();
 8016200:	f7ff ffbe 	bl	8016180 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8016204:	f002 f820 	bl	8018248 <SVCCTL_InitCustomSvc>
  
  return;
 8016208:	bf00      	nop
}
 801620a:	bd80      	pop	{r7, pc}

0801620c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 801620c:	b480      	push	{r7}
 801620e:	b083      	sub	sp, #12
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8016214:	4b09      	ldr	r3, [pc, #36]	@ (801623c <SVCCTL_RegisterSvcHandler+0x30>)
 8016216:	7f1b      	ldrb	r3, [r3, #28]
 8016218:	4619      	mov	r1, r3
 801621a:	4a08      	ldr	r2, [pc, #32]	@ (801623c <SVCCTL_RegisterSvcHandler+0x30>)
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8016222:	4b06      	ldr	r3, [pc, #24]	@ (801623c <SVCCTL_RegisterSvcHandler+0x30>)
 8016224:	7f1b      	ldrb	r3, [r3, #28]
 8016226:	3301      	adds	r3, #1
 8016228:	b2da      	uxtb	r2, r3
 801622a:	4b04      	ldr	r3, [pc, #16]	@ (801623c <SVCCTL_RegisterSvcHandler+0x30>)
 801622c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 801622e:	bf00      	nop
}
 8016230:	370c      	adds	r7, #12
 8016232:	46bd      	mov	sp, r7
 8016234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016238:	4770      	bx	lr
 801623a:	bf00      	nop
 801623c:	20000328 	.word	0x20000328

08016240 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b086      	sub	sp, #24
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	3301      	adds	r3, #1
 801624c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 801624e:	2300      	movs	r3, #0
 8016250:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8016252:	693b      	ldr	r3, [r7, #16]
 8016254:	781b      	ldrb	r3, [r3, #0]
 8016256:	2bff      	cmp	r3, #255	@ 0xff
 8016258:	d125      	bne.n	80162a6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 801625a:	693b      	ldr	r3, [r7, #16]
 801625c:	3302      	adds	r3, #2
 801625e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	881b      	ldrh	r3, [r3, #0]
 8016264:	b29b      	uxth	r3, r3
 8016266:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801626a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801626e:	d118      	bne.n	80162a2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8016270:	2300      	movs	r3, #0
 8016272:	757b      	strb	r3, [r7, #21]
 8016274:	e00d      	b.n	8016292 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8016276:	7d7b      	ldrb	r3, [r7, #21]
 8016278:	4a1a      	ldr	r2, [pc, #104]	@ (80162e4 <SVCCTL_UserEvtRx+0xa4>)
 801627a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801627e:	6878      	ldr	r0, [r7, #4]
 8016280:	4798      	blx	r3
 8016282:	4603      	mov	r3, r0
 8016284:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8016286:	7dfb      	ldrb	r3, [r7, #23]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d108      	bne.n	801629e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 801628c:	7d7b      	ldrb	r3, [r7, #21]
 801628e:	3301      	adds	r3, #1
 8016290:	757b      	strb	r3, [r7, #21]
 8016292:	4b14      	ldr	r3, [pc, #80]	@ (80162e4 <SVCCTL_UserEvtRx+0xa4>)
 8016294:	7f1b      	ldrb	r3, [r3, #28]
 8016296:	7d7a      	ldrb	r2, [r7, #21]
 8016298:	429a      	cmp	r2, r3
 801629a:	d3ec      	bcc.n	8016276 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 801629c:	e002      	b.n	80162a4 <SVCCTL_UserEvtRx+0x64>
              break;
 801629e:	bf00      	nop
          break;
 80162a0:	e000      	b.n	80162a4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80162a2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80162a4:	e000      	b.n	80162a8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80162a6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80162a8:	7dfb      	ldrb	r3, [r7, #23]
 80162aa:	2b02      	cmp	r3, #2
 80162ac:	d00f      	beq.n	80162ce <SVCCTL_UserEvtRx+0x8e>
 80162ae:	2b02      	cmp	r3, #2
 80162b0:	dc10      	bgt.n	80162d4 <SVCCTL_UserEvtRx+0x94>
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d002      	beq.n	80162bc <SVCCTL_UserEvtRx+0x7c>
 80162b6:	2b01      	cmp	r3, #1
 80162b8:	d006      	beq.n	80162c8 <SVCCTL_UserEvtRx+0x88>
 80162ba:	e00b      	b.n	80162d4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f001 fc7f 	bl	8017bc0 <SVCCTL_App_Notification>
 80162c2:	4603      	mov	r3, r0
 80162c4:	75bb      	strb	r3, [r7, #22]
      break;
 80162c6:	e008      	b.n	80162da <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80162c8:	2301      	movs	r3, #1
 80162ca:	75bb      	strb	r3, [r7, #22]
      break;
 80162cc:	e005      	b.n	80162da <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80162ce:	2300      	movs	r3, #0
 80162d0:	75bb      	strb	r3, [r7, #22]
      break;
 80162d2:	e002      	b.n	80162da <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80162d4:	2301      	movs	r3, #1
 80162d6:	75bb      	strb	r3, [r7, #22]
      break;
 80162d8:	bf00      	nop
  }

  return (return_status);
 80162da:	7dbb      	ldrb	r3, [r7, #22]
}
 80162dc:	4618      	mov	r0, r3
 80162de:	3718      	adds	r7, #24
 80162e0:	46bd      	mov	sp, r7
 80162e2:	bd80      	pop	{r7, pc}
 80162e4:	20000328 	.word	0x20000328

080162e8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b088      	sub	sp, #32
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80162f0:	f107 030c 	add.w	r3, r7, #12
 80162f4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80162fc:	69fb      	ldr	r3, [r7, #28]
 80162fe:	212e      	movs	r1, #46	@ 0x2e
 8016300:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8016304:	f000 fae8 	bl	80168d8 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8016308:	69fb      	ldr	r3, [r7, #28]
 801630a:	330b      	adds	r3, #11
 801630c:	78db      	ldrb	r3, [r3, #3]
}
 801630e:	4618      	mov	r0, r3
 8016310:	3720      	adds	r7, #32
 8016312:	46bd      	mov	sp, r7
 8016314:	bd80      	pop	{r7, pc}

08016316 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8016316:	b580      	push	{r7, lr}
 8016318:	b088      	sub	sp, #32
 801631a:	af00      	add	r7, sp, #0
 801631c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801631e:	f107 030c 	add.w	r3, r7, #12
 8016322:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 801632a:	69fb      	ldr	r3, [r7, #28]
 801632c:	210f      	movs	r1, #15
 801632e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8016332:	f000 fad1 	bl	80168d8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8016336:	69fb      	ldr	r3, [r7, #28]
 8016338:	330b      	adds	r3, #11
 801633a:	78db      	ldrb	r3, [r3, #3]
}
 801633c:	4618      	mov	r0, r3
 801633e:	3720      	adds	r7, #32
 8016340:	46bd      	mov	sp, r7
 8016342:	bd80      	pop	{r7, pc}

08016344 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b088      	sub	sp, #32
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801634c:	f107 030c 	add.w	r3, r7, #12
 8016350:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8016352:	69fb      	ldr	r3, [r7, #28]
 8016354:	687a      	ldr	r2, [r7, #4]
 8016356:	2110      	movs	r1, #16
 8016358:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 801635c:	f000 fabc 	bl	80168d8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8016360:	69fb      	ldr	r3, [r7, #28]
 8016362:	330b      	adds	r3, #11
 8016364:	78db      	ldrb	r3, [r3, #3]
}
 8016366:	4618      	mov	r0, r3
 8016368:	3720      	adds	r7, #32
 801636a:	46bd      	mov	sp, r7
 801636c:	bd80      	pop	{r7, pc}
	...

08016370 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8016370:	b480      	push	{r7}
 8016372:	b08b      	sub	sp, #44	@ 0x2c
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8016378:	2300      	movs	r3, #0
 801637a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 801637c:	2300      	movs	r3, #0
 801637e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8016380:	2300      	movs	r3, #0
 8016382:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8016384:	2300      	movs	r3, #0
 8016386:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8016388:	2300      	movs	r3, #0
 801638a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 801638c:	2300      	movs	r3, #0
 801638e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8016390:	2300      	movs	r3, #0
 8016392:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8016394:	2300      	movs	r3, #0
 8016396:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8016398:	4b4a      	ldr	r3, [pc, #296]	@ (80164c4 <SHCI_GetWirelessFwInfo+0x154>)
 801639a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801639c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80163a0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80163a2:	693b      	ldr	r3, [r7, #16]
 80163a4:	009b      	lsls	r3, r3, #2
 80163a6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80163aa:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80163b2:	68bb      	ldr	r3, [r7, #8]
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	4a44      	ldr	r2, [pc, #272]	@ (80164c8 <SHCI_GetWirelessFwInfo+0x158>)
 80163b8:	4293      	cmp	r3, r2
 80163ba:	d10f      	bne.n	80163dc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80163bc:	68bb      	ldr	r3, [r7, #8]
 80163be:	695b      	ldr	r3, [r3, #20]
 80163c0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80163c2:	68bb      	ldr	r3, [r7, #8]
 80163c4:	699b      	ldr	r3, [r3, #24]
 80163c6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80163c8:	68bb      	ldr	r3, [r7, #8]
 80163ca:	69db      	ldr	r3, [r3, #28]
 80163cc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80163ce:	68bb      	ldr	r3, [r7, #8]
 80163d0:	68db      	ldr	r3, [r3, #12]
 80163d2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80163d4:	68bb      	ldr	r3, [r7, #8]
 80163d6:	691b      	ldr	r3, [r3, #16]
 80163d8:	617b      	str	r3, [r7, #20]
 80163da:	e01a      	b.n	8016412 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80163dc:	693b      	ldr	r3, [r7, #16]
 80163de:	009b      	lsls	r3, r3, #2
 80163e0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80163e4:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80163e8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	691b      	ldr	r3, [r3, #16]
 80163f0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	695b      	ldr	r3, [r3, #20]
 80163f8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	699b      	ldr	r3, [r3, #24]
 8016400:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	685b      	ldr	r3, [r3, #4]
 8016408:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	689b      	ldr	r3, [r3, #8]
 8016410:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8016412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016414:	0e1b      	lsrs	r3, r3, #24
 8016416:	b2da      	uxtb	r2, r3
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801641c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801641e:	0c1b      	lsrs	r3, r3, #16
 8016420:	b2da      	uxtb	r2, r3
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8016426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016428:	0a1b      	lsrs	r3, r3, #8
 801642a:	b2da      	uxtb	r2, r3
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8016430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016432:	091b      	lsrs	r3, r3, #4
 8016434:	b2db      	uxtb	r3, r3
 8016436:	f003 030f 	and.w	r3, r3, #15
 801643a:	b2da      	uxtb	r2, r3
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8016440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016442:	b2db      	uxtb	r3, r3
 8016444:	f003 030f 	and.w	r3, r3, #15
 8016448:	b2da      	uxtb	r2, r3
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801644e:	6a3b      	ldr	r3, [r7, #32]
 8016450:	0e1b      	lsrs	r3, r3, #24
 8016452:	b2da      	uxtb	r2, r3
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8016458:	6a3b      	ldr	r3, [r7, #32]
 801645a:	0c1b      	lsrs	r3, r3, #16
 801645c:	b2da      	uxtb	r2, r3
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8016462:	6a3b      	ldr	r3, [r7, #32]
 8016464:	0a1b      	lsrs	r3, r3, #8
 8016466:	b2da      	uxtb	r2, r3
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801646c:	6a3b      	ldr	r3, [r7, #32]
 801646e:	b2da      	uxtb	r2, r3
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8016474:	69fb      	ldr	r3, [r7, #28]
 8016476:	b2da      	uxtb	r2, r3
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801647c:	69bb      	ldr	r3, [r7, #24]
 801647e:	0e1b      	lsrs	r3, r3, #24
 8016480:	b2da      	uxtb	r2, r3
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8016486:	69bb      	ldr	r3, [r7, #24]
 8016488:	0c1b      	lsrs	r3, r3, #16
 801648a:	b2da      	uxtb	r2, r3
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8016490:	69bb      	ldr	r3, [r7, #24]
 8016492:	0a1b      	lsrs	r3, r3, #8
 8016494:	b2da      	uxtb	r2, r3
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801649a:	697b      	ldr	r3, [r7, #20]
 801649c:	0e1b      	lsrs	r3, r3, #24
 801649e:	b2da      	uxtb	r2, r3
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80164a4:	697b      	ldr	r3, [r7, #20]
 80164a6:	0c1b      	lsrs	r3, r3, #16
 80164a8:	b2da      	uxtb	r2, r3
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80164ae:	697b      	ldr	r3, [r7, #20]
 80164b0:	b2da      	uxtb	r2, r3
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80164b6:	2300      	movs	r3, #0
}
 80164b8:	4618      	mov	r0, r3
 80164ba:	372c      	adds	r7, #44	@ 0x2c
 80164bc:	46bd      	mov	sp, r7
 80164be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c2:	4770      	bx	lr
 80164c4:	58004000 	.word	0x58004000
 80164c8:	a94656b9 	.word	0xa94656b9

080164cc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b082      	sub	sp, #8
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
 80164d4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80164d6:	683b      	ldr	r3, [r7, #0]
 80164d8:	685b      	ldr	r3, [r3, #4]
 80164da:	4a08      	ldr	r2, [pc, #32]	@ (80164fc <hci_init+0x30>)
 80164dc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80164de:	4a08      	ldr	r2, [pc, #32]	@ (8016500 <hci_init+0x34>)
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80164e4:	4806      	ldr	r0, [pc, #24]	@ (8016500 <hci_init+0x34>)
 80164e6:	f000 f979 	bl	80167dc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80164ea:	683b      	ldr	r3, [r7, #0]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	4618      	mov	r0, r3
 80164f0:	f000 f8da 	bl	80166a8 <TlInit>

  return;
 80164f4:	bf00      	nop
}
 80164f6:	3708      	adds	r7, #8
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}
 80164fc:	200013a4 	.word	0x200013a4
 8016500:	2000137c 	.word	0x2000137c

08016504 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b084      	sub	sp, #16
 8016508:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801650a:	4822      	ldr	r0, [pc, #136]	@ (8016594 <hci_user_evt_proc+0x90>)
 801650c:	f000 fd32 	bl	8016f74 <LST_is_empty>
 8016510:	4603      	mov	r3, r0
 8016512:	2b00      	cmp	r3, #0
 8016514:	d12b      	bne.n	801656e <hci_user_evt_proc+0x6a>
 8016516:	4b20      	ldr	r3, [pc, #128]	@ (8016598 <hci_user_evt_proc+0x94>)
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d027      	beq.n	801656e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801651e:	f107 030c 	add.w	r3, r7, #12
 8016522:	4619      	mov	r1, r3
 8016524:	481b      	ldr	r0, [pc, #108]	@ (8016594 <hci_user_evt_proc+0x90>)
 8016526:	f000 fdb4 	bl	8017092 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801652a:	4b1c      	ldr	r3, [pc, #112]	@ (801659c <hci_user_evt_proc+0x98>)
 801652c:	69db      	ldr	r3, [r3, #28]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d00c      	beq.n	801654c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8016536:	2301      	movs	r3, #1
 8016538:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 801653a:	4b18      	ldr	r3, [pc, #96]	@ (801659c <hci_user_evt_proc+0x98>)
 801653c:	69db      	ldr	r3, [r3, #28]
 801653e:	1d3a      	adds	r2, r7, #4
 8016540:	4610      	mov	r0, r2
 8016542:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8016544:	793a      	ldrb	r2, [r7, #4]
 8016546:	4b14      	ldr	r3, [pc, #80]	@ (8016598 <hci_user_evt_proc+0x94>)
 8016548:	701a      	strb	r2, [r3, #0]
 801654a:	e002      	b.n	8016552 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 801654c:	4b12      	ldr	r3, [pc, #72]	@ (8016598 <hci_user_evt_proc+0x94>)
 801654e:	2201      	movs	r2, #1
 8016550:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8016552:	4b11      	ldr	r3, [pc, #68]	@ (8016598 <hci_user_evt_proc+0x94>)
 8016554:	781b      	ldrb	r3, [r3, #0]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d004      	beq.n	8016564 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	4618      	mov	r0, r3
 801655e:	f000 fc0d 	bl	8016d7c <TL_MM_EvtDone>
 8016562:	e004      	b.n	801656e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	4619      	mov	r1, r3
 8016568:	480a      	ldr	r0, [pc, #40]	@ (8016594 <hci_user_evt_proc+0x90>)
 801656a:	f000 fd25 	bl	8016fb8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801656e:	4809      	ldr	r0, [pc, #36]	@ (8016594 <hci_user_evt_proc+0x90>)
 8016570:	f000 fd00 	bl	8016f74 <LST_is_empty>
 8016574:	4603      	mov	r3, r0
 8016576:	2b00      	cmp	r3, #0
 8016578:	d107      	bne.n	801658a <hci_user_evt_proc+0x86>
 801657a:	4b07      	ldr	r3, [pc, #28]	@ (8016598 <hci_user_evt_proc+0x94>)
 801657c:	781b      	ldrb	r3, [r3, #0]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d003      	beq.n	801658a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8016582:	4804      	ldr	r0, [pc, #16]	@ (8016594 <hci_user_evt_proc+0x90>)
 8016584:	f001 fd50 	bl	8018028 <hci_notify_asynch_evt>
  }


  return;
 8016588:	bf00      	nop
 801658a:	bf00      	nop
}
 801658c:	3710      	adds	r7, #16
 801658e:	46bd      	mov	sp, r7
 8016590:	bd80      	pop	{r7, pc}
 8016592:	bf00      	nop
 8016594:	20000350 	.word	0x20000350
 8016598:	2000035c 	.word	0x2000035c
 801659c:	2000137c 	.word	0x2000137c

080165a0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b088      	sub	sp, #32
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	460b      	mov	r3, r1
 80165aa:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80165ac:	2000      	movs	r0, #0
 80165ae:	f000 f8d1 	bl	8016754 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80165b2:	2300      	movs	r3, #0
 80165b4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	885b      	ldrh	r3, [r3, #2]
 80165ba:	b21b      	sxth	r3, r3
 80165bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80165c0:	b21a      	sxth	r2, r3
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	881b      	ldrh	r3, [r3, #0]
 80165c6:	029b      	lsls	r3, r3, #10
 80165c8:	b21b      	sxth	r3, r3
 80165ca:	4313      	orrs	r3, r2
 80165cc:	b21b      	sxth	r3, r3
 80165ce:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80165d0:	4b33      	ldr	r3, [pc, #204]	@ (80166a0 <hci_send_req+0x100>)
 80165d2:	2201      	movs	r2, #1
 80165d4:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	68db      	ldr	r3, [r3, #12]
 80165da:	b2d9      	uxtb	r1, r3
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	689a      	ldr	r2, [r3, #8]
 80165e0:	8bbb      	ldrh	r3, [r7, #28]
 80165e2:	4618      	mov	r0, r3
 80165e4:	f000 f890 	bl	8016708 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80165e8:	e04e      	b.n	8016688 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80165ea:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80165ee:	f001 fd32 	bl	8018056 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80165f2:	e043      	b.n	801667c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80165f4:	f107 030c 	add.w	r3, r7, #12
 80165f8:	4619      	mov	r1, r3
 80165fa:	482a      	ldr	r0, [pc, #168]	@ (80166a4 <hci_send_req+0x104>)
 80165fc:	f000 fd49 	bl	8017092 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	7a5b      	ldrb	r3, [r3, #9]
 8016604:	2b0f      	cmp	r3, #15
 8016606:	d114      	bne.n	8016632 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	330b      	adds	r3, #11
 801660c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801660e:	693b      	ldr	r3, [r7, #16]
 8016610:	885b      	ldrh	r3, [r3, #2]
 8016612:	b29b      	uxth	r3, r3
 8016614:	8bba      	ldrh	r2, [r7, #28]
 8016616:	429a      	cmp	r2, r3
 8016618:	d104      	bne.n	8016624 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	691b      	ldr	r3, [r3, #16]
 801661e:	693a      	ldr	r2, [r7, #16]
 8016620:	7812      	ldrb	r2, [r2, #0]
 8016622:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8016624:	693b      	ldr	r3, [r7, #16]
 8016626:	785b      	ldrb	r3, [r3, #1]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d027      	beq.n	801667c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801662c:	2301      	movs	r3, #1
 801662e:	77fb      	strb	r3, [r7, #31]
 8016630:	e024      	b.n	801667c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	330b      	adds	r3, #11
 8016636:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8016638:	69bb      	ldr	r3, [r7, #24]
 801663a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801663e:	b29b      	uxth	r3, r3
 8016640:	8bba      	ldrh	r2, [r7, #28]
 8016642:	429a      	cmp	r2, r3
 8016644:	d114      	bne.n	8016670 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	7a9b      	ldrb	r3, [r3, #10]
 801664a:	3b03      	subs	r3, #3
 801664c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	695a      	ldr	r2, [r3, #20]
 8016652:	7dfb      	ldrb	r3, [r7, #23]
 8016654:	429a      	cmp	r2, r3
 8016656:	bfa8      	it	ge
 8016658:	461a      	movge	r2, r3
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	6918      	ldr	r0, [r3, #16]
 8016662:	69bb      	ldr	r3, [r7, #24]
 8016664:	1cd9      	adds	r1, r3, #3
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	695b      	ldr	r3, [r3, #20]
 801666a:	461a      	mov	r2, r3
 801666c:	f005 f8ed 	bl	801b84a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8016670:	69bb      	ldr	r3, [r7, #24]
 8016672:	781b      	ldrb	r3, [r3, #0]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d001      	beq.n	801667c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8016678:	2301      	movs	r3, #1
 801667a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 801667c:	4809      	ldr	r0, [pc, #36]	@ (80166a4 <hci_send_req+0x104>)
 801667e:	f000 fc79 	bl	8016f74 <LST_is_empty>
 8016682:	4603      	mov	r3, r0
 8016684:	2b00      	cmp	r3, #0
 8016686:	d0b5      	beq.n	80165f4 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8016688:	7ffb      	ldrb	r3, [r7, #31]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d0ad      	beq.n	80165ea <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 801668e:	2001      	movs	r0, #1
 8016690:	f000 f860 	bl	8016754 <NotifyCmdStatus>

  return 0;
 8016694:	2300      	movs	r3, #0
}
 8016696:	4618      	mov	r0, r3
 8016698:	3720      	adds	r7, #32
 801669a:	46bd      	mov	sp, r7
 801669c:	bd80      	pop	{r7, pc}
 801669e:	bf00      	nop
 80166a0:	200013a8 	.word	0x200013a8
 80166a4:	2000139c 	.word	0x2000139c

080166a8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b086      	sub	sp, #24
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80166b0:	480f      	ldr	r0, [pc, #60]	@ (80166f0 <TlInit+0x48>)
 80166b2:	f000 fc4f 	bl	8016f54 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80166b6:	4a0f      	ldr	r2, [pc, #60]	@ (80166f4 <TlInit+0x4c>)
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80166bc:	480e      	ldr	r0, [pc, #56]	@ (80166f8 <TlInit+0x50>)
 80166be:	f000 fc49 	bl	8016f54 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80166c2:	4b0e      	ldr	r3, [pc, #56]	@ (80166fc <TlInit+0x54>)
 80166c4:	2201      	movs	r2, #1
 80166c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80166c8:	4b0d      	ldr	r3, [pc, #52]	@ (8016700 <TlInit+0x58>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d00a      	beq.n	80166e6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80166d4:	4b0b      	ldr	r3, [pc, #44]	@ (8016704 <TlInit+0x5c>)
 80166d6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80166d8:	4b09      	ldr	r3, [pc, #36]	@ (8016700 <TlInit+0x58>)
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	f107 0208 	add.w	r2, r7, #8
 80166e0:	4610      	mov	r0, r2
 80166e2:	4798      	blx	r3
  }

  return;
 80166e4:	bf00      	nop
 80166e6:	bf00      	nop
}
 80166e8:	3718      	adds	r7, #24
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}
 80166ee:	bf00      	nop
 80166f0:	2000139c 	.word	0x2000139c
 80166f4:	20000358 	.word	0x20000358
 80166f8:	20000350 	.word	0x20000350
 80166fc:	2000035c 	.word	0x2000035c
 8016700:	2000137c 	.word	0x2000137c
 8016704:	08016795 	.word	0x08016795

08016708 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b082      	sub	sp, #8
 801670c:	af00      	add	r7, sp, #0
 801670e:	4603      	mov	r3, r0
 8016710:	603a      	str	r2, [r7, #0]
 8016712:	80fb      	strh	r3, [r7, #6]
 8016714:	460b      	mov	r3, r1
 8016716:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8016718:	4b0c      	ldr	r3, [pc, #48]	@ (801674c <SendCmd+0x44>)
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	88fa      	ldrh	r2, [r7, #6]
 801671e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8016722:	4b0a      	ldr	r3, [pc, #40]	@ (801674c <SendCmd+0x44>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	797a      	ldrb	r2, [r7, #5]
 8016728:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801672a:	4b08      	ldr	r3, [pc, #32]	@ (801674c <SendCmd+0x44>)
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	330c      	adds	r3, #12
 8016730:	797a      	ldrb	r2, [r7, #5]
 8016732:	6839      	ldr	r1, [r7, #0]
 8016734:	4618      	mov	r0, r3
 8016736:	f005 f888 	bl	801b84a <memcpy>

  hciContext.io.Send(0,0);
 801673a:	4b05      	ldr	r3, [pc, #20]	@ (8016750 <SendCmd+0x48>)
 801673c:	691b      	ldr	r3, [r3, #16]
 801673e:	2100      	movs	r1, #0
 8016740:	2000      	movs	r0, #0
 8016742:	4798      	blx	r3

  return;
 8016744:	bf00      	nop
}
 8016746:	3708      	adds	r7, #8
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}
 801674c:	20000358 	.word	0x20000358
 8016750:	2000137c 	.word	0x2000137c

08016754 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b082      	sub	sp, #8
 8016758:	af00      	add	r7, sp, #0
 801675a:	4603      	mov	r3, r0
 801675c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 801675e:	79fb      	ldrb	r3, [r7, #7]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d108      	bne.n	8016776 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8016764:	4b0a      	ldr	r3, [pc, #40]	@ (8016790 <NotifyCmdStatus+0x3c>)
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d00d      	beq.n	8016788 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 801676c:	4b08      	ldr	r3, [pc, #32]	@ (8016790 <NotifyCmdStatus+0x3c>)
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	2000      	movs	r0, #0
 8016772:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8016774:	e008      	b.n	8016788 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8016776:	4b06      	ldr	r3, [pc, #24]	@ (8016790 <NotifyCmdStatus+0x3c>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d004      	beq.n	8016788 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 801677e:	4b04      	ldr	r3, [pc, #16]	@ (8016790 <NotifyCmdStatus+0x3c>)
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	2001      	movs	r0, #1
 8016784:	4798      	blx	r3
  return;
 8016786:	bf00      	nop
 8016788:	bf00      	nop
}
 801678a:	3708      	adds	r7, #8
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}
 8016790:	200013a4 	.word	0x200013a4

08016794 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b082      	sub	sp, #8
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	7a5b      	ldrb	r3, [r3, #9]
 80167a0:	2b0f      	cmp	r3, #15
 80167a2:	d003      	beq.n	80167ac <TlEvtReceived+0x18>
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	7a5b      	ldrb	r3, [r3, #9]
 80167a8:	2b0e      	cmp	r3, #14
 80167aa:	d107      	bne.n	80167bc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80167ac:	6879      	ldr	r1, [r7, #4]
 80167ae:	4809      	ldr	r0, [pc, #36]	@ (80167d4 <TlEvtReceived+0x40>)
 80167b0:	f000 fc28 	bl	8017004 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80167b4:	2000      	movs	r0, #0
 80167b6:	f001 fc43 	bl	8018040 <hci_cmd_resp_release>
 80167ba:	e006      	b.n	80167ca <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80167bc:	6879      	ldr	r1, [r7, #4]
 80167be:	4806      	ldr	r0, [pc, #24]	@ (80167d8 <TlEvtReceived+0x44>)
 80167c0:	f000 fc20 	bl	8017004 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80167c4:	4804      	ldr	r0, [pc, #16]	@ (80167d8 <TlEvtReceived+0x44>)
 80167c6:	f001 fc2f 	bl	8018028 <hci_notify_asynch_evt>
  }

  return;
 80167ca:	bf00      	nop
}
 80167cc:	3708      	adds	r7, #8
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}
 80167d2:	bf00      	nop
 80167d4:	2000139c 	.word	0x2000139c
 80167d8:	20000350 	.word	0x20000350

080167dc <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80167dc:	b480      	push	{r7}
 80167de:	b083      	sub	sp, #12
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	4a05      	ldr	r2, [pc, #20]	@ (80167fc <hci_register_io_bus+0x20>)
 80167e8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	4a04      	ldr	r2, [pc, #16]	@ (8016800 <hci_register_io_bus+0x24>)
 80167ee:	611a      	str	r2, [r3, #16]

  return;
 80167f0:	bf00      	nop
}
 80167f2:	370c      	adds	r7, #12
 80167f4:	46bd      	mov	sp, r7
 80167f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fa:	4770      	bx	lr
 80167fc:	08016af5 	.word	0x08016af5
 8016800:	08016b5d 	.word	0x08016b5d

08016804 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b082      	sub	sp, #8
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
 801680c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801680e:	683b      	ldr	r3, [r7, #0]
 8016810:	685b      	ldr	r3, [r3, #4]
 8016812:	4a08      	ldr	r2, [pc, #32]	@ (8016834 <shci_init+0x30>)
 8016814:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8016816:	4a08      	ldr	r2, [pc, #32]	@ (8016838 <shci_init+0x34>)
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 801681c:	4806      	ldr	r0, [pc, #24]	@ (8016838 <shci_init+0x34>)
 801681e:	f000 f915 	bl	8016a4c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8016822:	683b      	ldr	r3, [r7, #0]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	4618      	mov	r0, r3
 8016828:	f000 f898 	bl	801695c <TlInit>

  return;
 801682c:	bf00      	nop
}
 801682e:	3708      	adds	r7, #8
 8016830:	46bd      	mov	sp, r7
 8016832:	bd80      	pop	{r7, pc}
 8016834:	200013cc 	.word	0x200013cc
 8016838:	200013ac 	.word	0x200013ac

0801683c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 801683c:	b580      	push	{r7, lr}
 801683e:	b084      	sub	sp, #16
 8016840:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8016842:	4822      	ldr	r0, [pc, #136]	@ (80168cc <shci_user_evt_proc+0x90>)
 8016844:	f000 fb96 	bl	8016f74 <LST_is_empty>
 8016848:	4603      	mov	r3, r0
 801684a:	2b00      	cmp	r3, #0
 801684c:	d12b      	bne.n	80168a6 <shci_user_evt_proc+0x6a>
 801684e:	4b20      	ldr	r3, [pc, #128]	@ (80168d0 <shci_user_evt_proc+0x94>)
 8016850:	781b      	ldrb	r3, [r3, #0]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d027      	beq.n	80168a6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8016856:	f107 030c 	add.w	r3, r7, #12
 801685a:	4619      	mov	r1, r3
 801685c:	481b      	ldr	r0, [pc, #108]	@ (80168cc <shci_user_evt_proc+0x90>)
 801685e:	f000 fc18 	bl	8017092 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8016862:	4b1c      	ldr	r3, [pc, #112]	@ (80168d4 <shci_user_evt_proc+0x98>)
 8016864:	69db      	ldr	r3, [r3, #28]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d00c      	beq.n	8016884 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801686e:	2301      	movs	r3, #1
 8016870:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8016872:	4b18      	ldr	r3, [pc, #96]	@ (80168d4 <shci_user_evt_proc+0x98>)
 8016874:	69db      	ldr	r3, [r3, #28]
 8016876:	1d3a      	adds	r2, r7, #4
 8016878:	4610      	mov	r0, r2
 801687a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 801687c:	793a      	ldrb	r2, [r7, #4]
 801687e:	4b14      	ldr	r3, [pc, #80]	@ (80168d0 <shci_user_evt_proc+0x94>)
 8016880:	701a      	strb	r2, [r3, #0]
 8016882:	e002      	b.n	801688a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8016884:	4b12      	ldr	r3, [pc, #72]	@ (80168d0 <shci_user_evt_proc+0x94>)
 8016886:	2201      	movs	r2, #1
 8016888:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 801688a:	4b11      	ldr	r3, [pc, #68]	@ (80168d0 <shci_user_evt_proc+0x94>)
 801688c:	781b      	ldrb	r3, [r3, #0]
 801688e:	2b00      	cmp	r3, #0
 8016890:	d004      	beq.n	801689c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	4618      	mov	r0, r3
 8016896:	f000 fa71 	bl	8016d7c <TL_MM_EvtDone>
 801689a:	e004      	b.n	80168a6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	4619      	mov	r1, r3
 80168a0:	480a      	ldr	r0, [pc, #40]	@ (80168cc <shci_user_evt_proc+0x90>)
 80168a2:	f000 fb89 	bl	8016fb8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80168a6:	4809      	ldr	r0, [pc, #36]	@ (80168cc <shci_user_evt_proc+0x90>)
 80168a8:	f000 fb64 	bl	8016f74 <LST_is_empty>
 80168ac:	4603      	mov	r3, r0
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d107      	bne.n	80168c2 <shci_user_evt_proc+0x86>
 80168b2:	4b07      	ldr	r3, [pc, #28]	@ (80168d0 <shci_user_evt_proc+0x94>)
 80168b4:	781b      	ldrb	r3, [r3, #0]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d003      	beq.n	80168c2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80168ba:	4804      	ldr	r0, [pc, #16]	@ (80168cc <shci_user_evt_proc+0x90>)
 80168bc:	f7eb f938 	bl	8001b30 <shci_notify_asynch_evt>
  }


  return;
 80168c0:	bf00      	nop
 80168c2:	bf00      	nop
}
 80168c4:	3710      	adds	r7, #16
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	bf00      	nop
 80168cc:	20000360 	.word	0x20000360
 80168d0:	20000370 	.word	0x20000370
 80168d4:	200013ac 	.word	0x200013ac

080168d8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b084      	sub	sp, #16
 80168dc:	af00      	add	r7, sp, #0
 80168de:	60ba      	str	r2, [r7, #8]
 80168e0:	607b      	str	r3, [r7, #4]
 80168e2:	4603      	mov	r3, r0
 80168e4:	81fb      	strh	r3, [r7, #14]
 80168e6:	460b      	mov	r3, r1
 80168e8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80168ea:	2000      	movs	r0, #0
 80168ec:	f000 f868 	bl	80169c0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80168f0:	4b17      	ldr	r3, [pc, #92]	@ (8016950 <shci_send+0x78>)
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	89fa      	ldrh	r2, [r7, #14]
 80168f6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80168fa:	4b15      	ldr	r3, [pc, #84]	@ (8016950 <shci_send+0x78>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	7b7a      	ldrb	r2, [r7, #13]
 8016900:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8016902:	4b13      	ldr	r3, [pc, #76]	@ (8016950 <shci_send+0x78>)
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	330c      	adds	r3, #12
 8016908:	7b7a      	ldrb	r2, [r7, #13]
 801690a:	68b9      	ldr	r1, [r7, #8]
 801690c:	4618      	mov	r0, r3
 801690e:	f004 ff9c 	bl	801b84a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8016912:	4b10      	ldr	r3, [pc, #64]	@ (8016954 <shci_send+0x7c>)
 8016914:	2201      	movs	r2, #1
 8016916:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8016918:	4b0f      	ldr	r3, [pc, #60]	@ (8016958 <shci_send+0x80>)
 801691a:	691b      	ldr	r3, [r3, #16]
 801691c:	2100      	movs	r1, #0
 801691e:	2000      	movs	r0, #0
 8016920:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8016922:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8016926:	f7eb f91a 	bl	8001b5e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	f103 0008 	add.w	r0, r3, #8
 8016930:	4b07      	ldr	r3, [pc, #28]	@ (8016950 <shci_send+0x78>)
 8016932:	6819      	ldr	r1, [r3, #0]
 8016934:	4b06      	ldr	r3, [pc, #24]	@ (8016950 <shci_send+0x78>)
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	789b      	ldrb	r3, [r3, #2]
 801693a:	3303      	adds	r3, #3
 801693c:	461a      	mov	r2, r3
 801693e:	f004 ff84 	bl	801b84a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8016942:	2001      	movs	r0, #1
 8016944:	f000 f83c 	bl	80169c0 <Cmd_SetStatus>

  return;
 8016948:	bf00      	nop
}
 801694a:	3710      	adds	r7, #16
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}
 8016950:	2000036c 	.word	0x2000036c
 8016954:	200013d0 	.word	0x200013d0
 8016958:	200013ac 	.word	0x200013ac

0801695c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b086      	sub	sp, #24
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8016964:	4a10      	ldr	r2, [pc, #64]	@ (80169a8 <TlInit+0x4c>)
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801696a:	4810      	ldr	r0, [pc, #64]	@ (80169ac <TlInit+0x50>)
 801696c:	f000 faf2 	bl	8016f54 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8016970:	2001      	movs	r0, #1
 8016972:	f000 f825 	bl	80169c0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8016976:	4b0e      	ldr	r3, [pc, #56]	@ (80169b0 <TlInit+0x54>)
 8016978:	2201      	movs	r2, #1
 801697a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 801697c:	4b0d      	ldr	r3, [pc, #52]	@ (80169b4 <TlInit+0x58>)
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d00c      	beq.n	801699e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8016988:	4b0b      	ldr	r3, [pc, #44]	@ (80169b8 <TlInit+0x5c>)
 801698a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 801698c:	4b0b      	ldr	r3, [pc, #44]	@ (80169bc <TlInit+0x60>)
 801698e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8016990:	4b08      	ldr	r3, [pc, #32]	@ (80169b4 <TlInit+0x58>)
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	f107 020c 	add.w	r2, r7, #12
 8016998:	4610      	mov	r0, r2
 801699a:	4798      	blx	r3
  }

  return;
 801699c:	bf00      	nop
 801699e:	bf00      	nop
}
 80169a0:	3718      	adds	r7, #24
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}
 80169a6:	bf00      	nop
 80169a8:	2000036c 	.word	0x2000036c
 80169ac:	20000360 	.word	0x20000360
 80169b0:	20000370 	.word	0x20000370
 80169b4:	200013ac 	.word	0x200013ac
 80169b8:	08016a11 	.word	0x08016a11
 80169bc:	08016a29 	.word	0x08016a29

080169c0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b082      	sub	sp, #8
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	4603      	mov	r3, r0
 80169c8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80169ca:	79fb      	ldrb	r3, [r7, #7]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d10b      	bne.n	80169e8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80169d0:	4b0d      	ldr	r3, [pc, #52]	@ (8016a08 <Cmd_SetStatus+0x48>)
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d003      	beq.n	80169e0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80169d8:	4b0b      	ldr	r3, [pc, #44]	@ (8016a08 <Cmd_SetStatus+0x48>)
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	2000      	movs	r0, #0
 80169de:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80169e0:	4b0a      	ldr	r3, [pc, #40]	@ (8016a0c <Cmd_SetStatus+0x4c>)
 80169e2:	2200      	movs	r2, #0
 80169e4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80169e6:	e00b      	b.n	8016a00 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80169e8:	4b08      	ldr	r3, [pc, #32]	@ (8016a0c <Cmd_SetStatus+0x4c>)
 80169ea:	2201      	movs	r2, #1
 80169ec:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80169ee:	4b06      	ldr	r3, [pc, #24]	@ (8016a08 <Cmd_SetStatus+0x48>)
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d004      	beq.n	8016a00 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80169f6:	4b04      	ldr	r3, [pc, #16]	@ (8016a08 <Cmd_SetStatus+0x48>)
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	2001      	movs	r0, #1
 80169fc:	4798      	blx	r3
  return;
 80169fe:	bf00      	nop
 8016a00:	bf00      	nop
}
 8016a02:	3708      	adds	r7, #8
 8016a04:	46bd      	mov	sp, r7
 8016a06:	bd80      	pop	{r7, pc}
 8016a08:	200013cc 	.word	0x200013cc
 8016a0c:	20000368 	.word	0x20000368

08016a10 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b082      	sub	sp, #8
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8016a18:	2000      	movs	r0, #0
 8016a1a:	f7eb f895 	bl	8001b48 <shci_cmd_resp_release>

  return;
 8016a1e:	bf00      	nop
}
 8016a20:	3708      	adds	r7, #8
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}
	...

08016a28 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b082      	sub	sp, #8
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8016a30:	6879      	ldr	r1, [r7, #4]
 8016a32:	4805      	ldr	r0, [pc, #20]	@ (8016a48 <TlUserEvtReceived+0x20>)
 8016a34:	f000 fae6 	bl	8017004 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8016a38:	4803      	ldr	r0, [pc, #12]	@ (8016a48 <TlUserEvtReceived+0x20>)
 8016a3a:	f7eb f879 	bl	8001b30 <shci_notify_asynch_evt>

  return;
 8016a3e:	bf00      	nop
}
 8016a40:	3708      	adds	r7, #8
 8016a42:	46bd      	mov	sp, r7
 8016a44:	bd80      	pop	{r7, pc}
 8016a46:	bf00      	nop
 8016a48:	20000360 	.word	0x20000360

08016a4c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8016a4c:	b480      	push	{r7}
 8016a4e:	b083      	sub	sp, #12
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	4a05      	ldr	r2, [pc, #20]	@ (8016a6c <shci_register_io_bus+0x20>)
 8016a58:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	4a04      	ldr	r2, [pc, #16]	@ (8016a70 <shci_register_io_bus+0x24>)
 8016a5e:	611a      	str	r2, [r3, #16]

  return;
 8016a60:	bf00      	nop
}
 8016a62:	370c      	adds	r7, #12
 8016a64:	46bd      	mov	sp, r7
 8016a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6a:	4770      	bx	lr
 8016a6c:	08016c09 	.word	0x08016c09
 8016a70:	08016c5d 	.word	0x08016c5d

08016a74 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8016a78:	f001 fdd2 	bl	8018620 <HW_IPCC_Enable>

  return;
 8016a7c:	bf00      	nop
}
 8016a7e:	bd80      	pop	{r7, pc}

08016a80 <TL_Init>:


void TL_Init( void )
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8016a84:	4b10      	ldr	r3, [pc, #64]	@ (8016ac8 <TL_Init+0x48>)
 8016a86:	4a11      	ldr	r2, [pc, #68]	@ (8016acc <TL_Init+0x4c>)
 8016a88:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8016a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8016ac8 <TL_Init+0x48>)
 8016a8c:	4a10      	ldr	r2, [pc, #64]	@ (8016ad0 <TL_Init+0x50>)
 8016a8e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8016a90:	4b0d      	ldr	r3, [pc, #52]	@ (8016ac8 <TL_Init+0x48>)
 8016a92:	4a10      	ldr	r2, [pc, #64]	@ (8016ad4 <TL_Init+0x54>)
 8016a94:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8016a96:	4b0c      	ldr	r3, [pc, #48]	@ (8016ac8 <TL_Init+0x48>)
 8016a98:	4a0f      	ldr	r2, [pc, #60]	@ (8016ad8 <TL_Init+0x58>)
 8016a9a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8016a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8016ac8 <TL_Init+0x48>)
 8016a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8016adc <TL_Init+0x5c>)
 8016aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8016aa2:	4b09      	ldr	r3, [pc, #36]	@ (8016ac8 <TL_Init+0x48>)
 8016aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8016ae0 <TL_Init+0x60>)
 8016aa6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8016aa8:	4b07      	ldr	r3, [pc, #28]	@ (8016ac8 <TL_Init+0x48>)
 8016aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8016ae4 <TL_Init+0x64>)
 8016aac:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8016aae:	4b06      	ldr	r3, [pc, #24]	@ (8016ac8 <TL_Init+0x48>)
 8016ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8016ae8 <TL_Init+0x68>)
 8016ab2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8016ab4:	4b04      	ldr	r3, [pc, #16]	@ (8016ac8 <TL_Init+0x48>)
 8016ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8016aec <TL_Init+0x6c>)
 8016ab8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8016aba:	4b03      	ldr	r3, [pc, #12]	@ (8016ac8 <TL_Init+0x48>)
 8016abc:	4a0c      	ldr	r2, [pc, #48]	@ (8016af0 <TL_Init+0x70>)
 8016abe:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8016ac0:	f001 fdc2 	bl	8018648 <HW_IPCC_Init>

  return;
 8016ac4:	bf00      	nop
}
 8016ac6:	bd80      	pop	{r7, pc}
 8016ac8:	20030000 	.word	0x20030000
 8016acc:	20030028 	.word	0x20030028
 8016ad0:	20030048 	.word	0x20030048
 8016ad4:	20030058 	.word	0x20030058
 8016ad8:	20030068 	.word	0x20030068
 8016adc:	20030070 	.word	0x20030070
 8016ae0:	20030078 	.word	0x20030078
 8016ae4:	20030080 	.word	0x20030080
 8016ae8:	2003009c 	.word	0x2003009c
 8016aec:	200300a0 	.word	0x200300a0
 8016af0:	200300ac 	.word	0x200300ac

08016af4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b084      	sub	sp, #16
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8016b00:	4811      	ldr	r0, [pc, #68]	@ (8016b48 <TL_BLE_Init+0x54>)
 8016b02:	f000 fa27 	bl	8016f54 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8016b06:	4b11      	ldr	r3, [pc, #68]	@ (8016b4c <TL_BLE_Init+0x58>)
 8016b08:	685b      	ldr	r3, [r3, #4]
 8016b0a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	689a      	ldr	r2, [r3, #8]
 8016b10:	68bb      	ldr	r3, [r7, #8]
 8016b12:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	68da      	ldr	r2, [r3, #12]
 8016b18:	68bb      	ldr	r3, [r7, #8]
 8016b1a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8016b1c:	68bb      	ldr	r3, [r7, #8]
 8016b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8016b50 <TL_BLE_Init+0x5c>)
 8016b20:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8016b22:	68bb      	ldr	r3, [r7, #8]
 8016b24:	4a08      	ldr	r2, [pc, #32]	@ (8016b48 <TL_BLE_Init+0x54>)
 8016b26:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8016b28:	f001 fda4 	bl	8018674 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	4a08      	ldr	r2, [pc, #32]	@ (8016b54 <TL_BLE_Init+0x60>)
 8016b32:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	685b      	ldr	r3, [r3, #4]
 8016b38:	4a07      	ldr	r2, [pc, #28]	@ (8016b58 <TL_BLE_Init+0x64>)
 8016b3a:	6013      	str	r3, [r2, #0]

  return 0;
 8016b3c:	2300      	movs	r3, #0
}
 8016b3e:	4618      	mov	r0, r3
 8016b40:	3710      	adds	r7, #16
 8016b42:	46bd      	mov	sp, r7
 8016b44:	bd80      	pop	{r7, pc}
 8016b46:	bf00      	nop
 8016b48:	200300c8 	.word	0x200300c8
 8016b4c:	20030000 	.word	0x20030000
 8016b50:	20030a58 	.word	0x20030a58
 8016b54:	200013dc 	.word	0x200013dc
 8016b58:	200013e0 	.word	0x200013e0

08016b5c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b082      	sub	sp, #8
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
 8016b64:	460b      	mov	r3, r1
 8016b66:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8016b68:	4b09      	ldr	r3, [pc, #36]	@ (8016b90 <TL_BLE_SendCmd+0x34>)
 8016b6a:	685b      	ldr	r3, [r3, #4]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	2201      	movs	r2, #1
 8016b70:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8016b72:	4b07      	ldr	r3, [pc, #28]	@ (8016b90 <TL_BLE_SendCmd+0x34>)
 8016b74:	685b      	ldr	r3, [r3, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	4619      	mov	r1, r3
 8016b7a:	2001      	movs	r0, #1
 8016b7c:	f000 f96c 	bl	8016e58 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8016b80:	f001 fd82 	bl	8018688 <HW_IPCC_BLE_SendCmd>

  return 0;
 8016b84:	2300      	movs	r3, #0
}
 8016b86:	4618      	mov	r0, r3
 8016b88:	3708      	adds	r7, #8
 8016b8a:	46bd      	mov	sp, r7
 8016b8c:	bd80      	pop	{r7, pc}
 8016b8e:	bf00      	nop
 8016b90:	20030000 	.word	0x20030000

08016b94 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8016b94:	b580      	push	{r7, lr}
 8016b96:	b082      	sub	sp, #8
 8016b98:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8016b9a:	e01c      	b.n	8016bd6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8016b9c:	1d3b      	adds	r3, r7, #4
 8016b9e:	4619      	mov	r1, r3
 8016ba0:	4812      	ldr	r0, [pc, #72]	@ (8016bec <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016ba2:	f000 fa76 	bl	8017092 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	7a5b      	ldrb	r3, [r3, #9]
 8016baa:	2b0f      	cmp	r3, #15
 8016bac:	d003      	beq.n	8016bb6 <HW_IPCC_BLE_RxEvtNot+0x22>
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	7a5b      	ldrb	r3, [r3, #9]
 8016bb2:	2b0e      	cmp	r3, #14
 8016bb4:	d105      	bne.n	8016bc2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	4619      	mov	r1, r3
 8016bba:	2002      	movs	r0, #2
 8016bbc:	f000 f94c 	bl	8016e58 <OutputDbgTrace>
 8016bc0:	e004      	b.n	8016bcc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	4619      	mov	r1, r3
 8016bc6:	2003      	movs	r0, #3
 8016bc8:	f000 f946 	bl	8016e58 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8016bcc:	4b08      	ldr	r3, [pc, #32]	@ (8016bf0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	687a      	ldr	r2, [r7, #4]
 8016bd2:	4610      	mov	r0, r2
 8016bd4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8016bd6:	4805      	ldr	r0, [pc, #20]	@ (8016bec <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016bd8:	f000 f9cc 	bl	8016f74 <LST_is_empty>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d0dc      	beq.n	8016b9c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8016be2:	bf00      	nop
}
 8016be4:	3708      	adds	r7, #8
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd80      	pop	{r7, pc}
 8016bea:	bf00      	nop
 8016bec:	200300c8 	.word	0x200300c8
 8016bf0:	200013dc 	.word	0x200013dc

08016bf4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8016bf8:	4b02      	ldr	r3, [pc, #8]	@ (8016c04 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	4798      	blx	r3

  return;
 8016bfe:	bf00      	nop
}
 8016c00:	bd80      	pop	{r7, pc}
 8016c02:	bf00      	nop
 8016c04:	200013e0 	.word	0x200013e0

08016c08 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b084      	sub	sp, #16
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8016c14:	480d      	ldr	r0, [pc, #52]	@ (8016c4c <TL_SYS_Init+0x44>)
 8016c16:	f000 f99d 	bl	8016f54 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8016c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8016c50 <TL_SYS_Init+0x48>)
 8016c1c:	68db      	ldr	r3, [r3, #12]
 8016c1e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	689a      	ldr	r2, [r3, #8]
 8016c24:	68bb      	ldr	r3, [r7, #8]
 8016c26:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8016c28:	68bb      	ldr	r3, [r7, #8]
 8016c2a:	4a08      	ldr	r2, [pc, #32]	@ (8016c4c <TL_SYS_Init+0x44>)
 8016c2c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8016c2e:	f001 fd4d 	bl	80186cc <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	4a07      	ldr	r2, [pc, #28]	@ (8016c54 <TL_SYS_Init+0x4c>)
 8016c38:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	685b      	ldr	r3, [r3, #4]
 8016c3e:	4a06      	ldr	r2, [pc, #24]	@ (8016c58 <TL_SYS_Init+0x50>)
 8016c40:	6013      	str	r3, [r2, #0]

  return 0;
 8016c42:	2300      	movs	r3, #0
}
 8016c44:	4618      	mov	r0, r3
 8016c46:	3710      	adds	r7, #16
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	bd80      	pop	{r7, pc}
 8016c4c:	200300d0 	.word	0x200300d0
 8016c50:	20030000 	.word	0x20030000
 8016c54:	200013e4 	.word	0x200013e4
 8016c58:	200013e8 	.word	0x200013e8

08016c5c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b082      	sub	sp, #8
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
 8016c64:	460b      	mov	r3, r1
 8016c66:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8016c68:	4b09      	ldr	r3, [pc, #36]	@ (8016c90 <TL_SYS_SendCmd+0x34>)
 8016c6a:	68db      	ldr	r3, [r3, #12]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	2210      	movs	r2, #16
 8016c70:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8016c72:	4b07      	ldr	r3, [pc, #28]	@ (8016c90 <TL_SYS_SendCmd+0x34>)
 8016c74:	68db      	ldr	r3, [r3, #12]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	4619      	mov	r1, r3
 8016c7a:	2004      	movs	r0, #4
 8016c7c:	f000 f8ec 	bl	8016e58 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8016c80:	f001 fd2e 	bl	80186e0 <HW_IPCC_SYS_SendCmd>

  return 0;
 8016c84:	2300      	movs	r3, #0
}
 8016c86:	4618      	mov	r0, r3
 8016c88:	3708      	adds	r7, #8
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	bd80      	pop	{r7, pc}
 8016c8e:	bf00      	nop
 8016c90:	20030000 	.word	0x20030000

08016c94 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016c98:	4b07      	ldr	r3, [pc, #28]	@ (8016cb8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016c9a:	68db      	ldr	r3, [r3, #12]
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	4619      	mov	r1, r3
 8016ca0:	2005      	movs	r0, #5
 8016ca2:	f000 f8d9 	bl	8016e58 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016ca6:	4b05      	ldr	r3, [pc, #20]	@ (8016cbc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	4a03      	ldr	r2, [pc, #12]	@ (8016cb8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016cac:	68d2      	ldr	r2, [r2, #12]
 8016cae:	6812      	ldr	r2, [r2, #0]
 8016cb0:	4610      	mov	r0, r2
 8016cb2:	4798      	blx	r3

  return;
 8016cb4:	bf00      	nop
}
 8016cb6:	bd80      	pop	{r7, pc}
 8016cb8:	20030000 	.word	0x20030000
 8016cbc:	200013e4 	.word	0x200013e4

08016cc0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b082      	sub	sp, #8
 8016cc4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016cc6:	e00e      	b.n	8016ce6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8016cc8:	1d3b      	adds	r3, r7, #4
 8016cca:	4619      	mov	r1, r3
 8016ccc:	480b      	ldr	r0, [pc, #44]	@ (8016cfc <HW_IPCC_SYS_EvtNot+0x3c>)
 8016cce:	f000 f9e0 	bl	8017092 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	4619      	mov	r1, r3
 8016cd6:	2006      	movs	r0, #6
 8016cd8:	f000 f8be 	bl	8016e58 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8016cdc:	4b08      	ldr	r3, [pc, #32]	@ (8016d00 <HW_IPCC_SYS_EvtNot+0x40>)
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	687a      	ldr	r2, [r7, #4]
 8016ce2:	4610      	mov	r0, r2
 8016ce4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016ce6:	4805      	ldr	r0, [pc, #20]	@ (8016cfc <HW_IPCC_SYS_EvtNot+0x3c>)
 8016ce8:	f000 f944 	bl	8016f74 <LST_is_empty>
 8016cec:	4603      	mov	r3, r0
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d0ea      	beq.n	8016cc8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8016cf2:	bf00      	nop
}
 8016cf4:	3708      	adds	r7, #8
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	bd80      	pop	{r7, pc}
 8016cfa:	bf00      	nop
 8016cfc:	200300d0 	.word	0x200300d0
 8016d00:	200013e8 	.word	0x200013e8

08016d04 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b082      	sub	sp, #8
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8016d0c:	4817      	ldr	r0, [pc, #92]	@ (8016d6c <TL_MM_Init+0x68>)
 8016d0e:	f000 f921 	bl	8016f54 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8016d12:	4817      	ldr	r0, [pc, #92]	@ (8016d70 <TL_MM_Init+0x6c>)
 8016d14:	f000 f91e 	bl	8016f54 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8016d18:	4b16      	ldr	r3, [pc, #88]	@ (8016d74 <TL_MM_Init+0x70>)
 8016d1a:	691b      	ldr	r3, [r3, #16]
 8016d1c:	4a16      	ldr	r2, [pc, #88]	@ (8016d78 <TL_MM_Init+0x74>)
 8016d1e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8016d20:	4b15      	ldr	r3, [pc, #84]	@ (8016d78 <TL_MM_Init+0x74>)
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	687a      	ldr	r2, [r7, #4]
 8016d26:	6892      	ldr	r2, [r2, #8]
 8016d28:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8016d2a:	4b13      	ldr	r3, [pc, #76]	@ (8016d78 <TL_MM_Init+0x74>)
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	687a      	ldr	r2, [r7, #4]
 8016d30:	68d2      	ldr	r2, [r2, #12]
 8016d32:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8016d34:	4b10      	ldr	r3, [pc, #64]	@ (8016d78 <TL_MM_Init+0x74>)
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	4a0c      	ldr	r2, [pc, #48]	@ (8016d6c <TL_MM_Init+0x68>)
 8016d3a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8016d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8016d78 <TL_MM_Init+0x74>)
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	687a      	ldr	r2, [r7, #4]
 8016d42:	6812      	ldr	r2, [r2, #0]
 8016d44:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8016d46:	4b0c      	ldr	r3, [pc, #48]	@ (8016d78 <TL_MM_Init+0x74>)
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	687a      	ldr	r2, [r7, #4]
 8016d4c:	6852      	ldr	r2, [r2, #4]
 8016d4e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8016d50:	4b09      	ldr	r3, [pc, #36]	@ (8016d78 <TL_MM_Init+0x74>)
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	687a      	ldr	r2, [r7, #4]
 8016d56:	6912      	ldr	r2, [r2, #16]
 8016d58:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8016d5a:	4b07      	ldr	r3, [pc, #28]	@ (8016d78 <TL_MM_Init+0x74>)
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	687a      	ldr	r2, [r7, #4]
 8016d60:	6952      	ldr	r2, [r2, #20]
 8016d62:	619a      	str	r2, [r3, #24]

  return;
 8016d64:	bf00      	nop
}
 8016d66:	3708      	adds	r7, #8
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	bd80      	pop	{r7, pc}
 8016d6c:	200300b8 	.word	0x200300b8
 8016d70:	200013d4 	.word	0x200013d4
 8016d74:	20030000 	.word	0x20030000
 8016d78:	200013ec 	.word	0x200013ec

08016d7c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b082      	sub	sp, #8
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8016d84:	6879      	ldr	r1, [r7, #4]
 8016d86:	4807      	ldr	r0, [pc, #28]	@ (8016da4 <TL_MM_EvtDone+0x28>)
 8016d88:	f000 f93c 	bl	8017004 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8016d8c:	6879      	ldr	r1, [r7, #4]
 8016d8e:	2000      	movs	r0, #0
 8016d90:	f000 f862 	bl	8016e58 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8016d94:	4804      	ldr	r0, [pc, #16]	@ (8016da8 <TL_MM_EvtDone+0x2c>)
 8016d96:	f001 fcc9 	bl	801872c <HW_IPCC_MM_SendFreeBuf>

  return;
 8016d9a:	bf00      	nop
}
 8016d9c:	3708      	adds	r7, #8
 8016d9e:	46bd      	mov	sp, r7
 8016da0:	bd80      	pop	{r7, pc}
 8016da2:	bf00      	nop
 8016da4:	200013d4 	.word	0x200013d4
 8016da8:	08016dad 	.word	0x08016dad

08016dac <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b082      	sub	sp, #8
 8016db0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016db2:	e00c      	b.n	8016dce <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8016db4:	1d3b      	adds	r3, r7, #4
 8016db6:	4619      	mov	r1, r3
 8016db8:	480a      	ldr	r0, [pc, #40]	@ (8016de4 <SendFreeBuf+0x38>)
 8016dba:	f000 f96a 	bl	8017092 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8016dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8016de8 <SendFreeBuf+0x3c>)
 8016dc0:	691b      	ldr	r3, [r3, #16]
 8016dc2:	691b      	ldr	r3, [r3, #16]
 8016dc4:	687a      	ldr	r2, [r7, #4]
 8016dc6:	4611      	mov	r1, r2
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f000 f91b 	bl	8017004 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016dce:	4805      	ldr	r0, [pc, #20]	@ (8016de4 <SendFreeBuf+0x38>)
 8016dd0:	f000 f8d0 	bl	8016f74 <LST_is_empty>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d0ec      	beq.n	8016db4 <SendFreeBuf+0x8>
  }

  return;
 8016dda:	bf00      	nop
}
 8016ddc:	3708      	adds	r7, #8
 8016dde:	46bd      	mov	sp, r7
 8016de0:	bd80      	pop	{r7, pc}
 8016de2:	bf00      	nop
 8016de4:	200013d4 	.word	0x200013d4
 8016de8:	20030000 	.word	0x20030000

08016dec <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8016dec:	b580      	push	{r7, lr}
 8016dee:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8016df0:	4805      	ldr	r0, [pc, #20]	@ (8016e08 <TL_TRACES_Init+0x1c>)
 8016df2:	f000 f8af 	bl	8016f54 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8016df6:	4b05      	ldr	r3, [pc, #20]	@ (8016e0c <TL_TRACES_Init+0x20>)
 8016df8:	695b      	ldr	r3, [r3, #20]
 8016dfa:	4a03      	ldr	r2, [pc, #12]	@ (8016e08 <TL_TRACES_Init+0x1c>)
 8016dfc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8016dfe:	f001 fccb 	bl	8018798 <HW_IPCC_TRACES_Init>

  return;
 8016e02:	bf00      	nop
}
 8016e04:	bd80      	pop	{r7, pc}
 8016e06:	bf00      	nop
 8016e08:	200300c0 	.word	0x200300c0
 8016e0c:	20030000 	.word	0x20030000

08016e10 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b082      	sub	sp, #8
 8016e14:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016e16:	e008      	b.n	8016e2a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8016e18:	1d3b      	adds	r3, r7, #4
 8016e1a:	4619      	mov	r1, r3
 8016e1c:	4808      	ldr	r0, [pc, #32]	@ (8016e40 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016e1e:	f000 f938 	bl	8017092 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	4618      	mov	r0, r3
 8016e26:	f000 f80d 	bl	8016e44 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016e2a:	4805      	ldr	r0, [pc, #20]	@ (8016e40 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016e2c:	f000 f8a2 	bl	8016f74 <LST_is_empty>
 8016e30:	4603      	mov	r3, r0
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d0f0      	beq.n	8016e18 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8016e36:	bf00      	nop
}
 8016e38:	3708      	adds	r7, #8
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}
 8016e3e:	bf00      	nop
 8016e40:	200300c0 	.word	0x200300c0

08016e44 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8016e44:	b480      	push	{r7}
 8016e46:	b083      	sub	sp, #12
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8016e4c:	bf00      	nop
 8016e4e:	370c      	adds	r7, #12
 8016e50:	46bd      	mov	sp, r7
 8016e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e56:	4770      	bx	lr

08016e58 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8016e58:	b480      	push	{r7}
 8016e5a:	b087      	sub	sp, #28
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	4603      	mov	r3, r0
 8016e60:	6039      	str	r1, [r7, #0]
 8016e62:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8016e64:	79fb      	ldrb	r3, [r7, #7]
 8016e66:	2b06      	cmp	r3, #6
 8016e68:	d845      	bhi.n	8016ef6 <OutputDbgTrace+0x9e>
 8016e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8016e70 <OutputDbgTrace+0x18>)
 8016e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e70:	08016e8d 	.word	0x08016e8d
 8016e74:	08016eb1 	.word	0x08016eb1
 8016e78:	08016eb7 	.word	0x08016eb7
 8016e7c:	08016ecb 	.word	0x08016ecb
 8016e80:	08016ed7 	.word	0x08016ed7
 8016e84:	08016edd 	.word	0x08016edd
 8016e88:	08016eeb 	.word	0x08016eeb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016e8c:	683b      	ldr	r3, [r7, #0]
 8016e8e:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016e90:	697b      	ldr	r3, [r7, #20]
 8016e92:	7a5b      	ldrb	r3, [r3, #9]
 8016e94:	2bff      	cmp	r3, #255	@ 0xff
 8016e96:	d005      	beq.n	8016ea4 <OutputDbgTrace+0x4c>
 8016e98:	2bff      	cmp	r3, #255	@ 0xff
 8016e9a:	dc05      	bgt.n	8016ea8 <OutputDbgTrace+0x50>
 8016e9c:	2b0e      	cmp	r3, #14
 8016e9e:	d005      	beq.n	8016eac <OutputDbgTrace+0x54>
 8016ea0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8016ea2:	e001      	b.n	8016ea8 <OutputDbgTrace+0x50>
          break;
 8016ea4:	bf00      	nop
 8016ea6:	e027      	b.n	8016ef8 <OutputDbgTrace+0xa0>
          break;
 8016ea8:	bf00      	nop
 8016eaa:	e025      	b.n	8016ef8 <OutputDbgTrace+0xa0>
          break;
 8016eac:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8016eae:	e023      	b.n	8016ef8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016eb0:	683b      	ldr	r3, [r7, #0]
 8016eb2:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016eb4:	e020      	b.n	8016ef8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016eb6:	683b      	ldr	r3, [r7, #0]
 8016eb8:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016eba:	697b      	ldr	r3, [r7, #20]
 8016ebc:	7a5b      	ldrb	r3, [r3, #9]
 8016ebe:	2b0e      	cmp	r3, #14
 8016ec0:	d001      	beq.n	8016ec6 <OutputDbgTrace+0x6e>
 8016ec2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8016ec4:	e000      	b.n	8016ec8 <OutputDbgTrace+0x70>
          break;
 8016ec6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016ec8:	e016      	b.n	8016ef8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016eca:	683b      	ldr	r3, [r7, #0]
 8016ecc:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016ece:	697b      	ldr	r3, [r7, #20]
 8016ed0:	7a5b      	ldrb	r3, [r3, #9]
 8016ed2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016ed4:	e010      	b.n	8016ef8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016ed6:	683b      	ldr	r3, [r7, #0]
 8016ed8:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016eda:	e00d      	b.n	8016ef8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8016ee0:	693b      	ldr	r3, [r7, #16]
 8016ee2:	785b      	ldrb	r3, [r3, #1]
 8016ee4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8016ee6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016ee8:	e006      	b.n	8016ef8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016eea:	683b      	ldr	r3, [r7, #0]
 8016eec:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016eee:	697b      	ldr	r3, [r7, #20]
 8016ef0:	7a5b      	ldrb	r3, [r3, #9]
 8016ef2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016ef4:	e000      	b.n	8016ef8 <OutputDbgTrace+0xa0>

    default:
      break;
 8016ef6:	bf00      	nop
  }

  return;
 8016ef8:	bf00      	nop
}
 8016efa:	371c      	adds	r7, #28
 8016efc:	46bd      	mov	sp, r7
 8016efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f02:	4770      	bx	lr

08016f04 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8016f04:	b480      	push	{r7}
 8016f06:	b085      	sub	sp, #20
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	4603      	mov	r3, r0
 8016f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8016f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8016f4c <OTP_Read+0x48>)
 8016f10:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016f12:	e002      	b.n	8016f1a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	3b08      	subs	r3, #8
 8016f18:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	3307      	adds	r3, #7
 8016f1e:	781b      	ldrb	r3, [r3, #0]
 8016f20:	79fa      	ldrb	r2, [r7, #7]
 8016f22:	429a      	cmp	r2, r3
 8016f24:	d003      	beq.n	8016f2e <OTP_Read+0x2a>
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	4a09      	ldr	r2, [pc, #36]	@ (8016f50 <OTP_Read+0x4c>)
 8016f2a:	4293      	cmp	r3, r2
 8016f2c:	d1f2      	bne.n	8016f14 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	3307      	adds	r3, #7
 8016f32:	781b      	ldrb	r3, [r3, #0]
 8016f34:	79fa      	ldrb	r2, [r7, #7]
 8016f36:	429a      	cmp	r2, r3
 8016f38:	d001      	beq.n	8016f3e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8016f3e:	68fb      	ldr	r3, [r7, #12]
}
 8016f40:	4618      	mov	r0, r3
 8016f42:	3714      	adds	r7, #20
 8016f44:	46bd      	mov	sp, r7
 8016f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4a:	4770      	bx	lr
 8016f4c:	1fff73f8 	.word	0x1fff73f8
 8016f50:	1fff7000 	.word	0x1fff7000

08016f54 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8016f54:	b480      	push	{r7}
 8016f56:	b083      	sub	sp, #12
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	687a      	ldr	r2, [r7, #4]
 8016f60:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	687a      	ldr	r2, [r7, #4]
 8016f66:	605a      	str	r2, [r3, #4]
}
 8016f68:	bf00      	nop
 8016f6a:	370c      	adds	r7, #12
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f72:	4770      	bx	lr

08016f74 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8016f74:	b480      	push	{r7}
 8016f76:	b087      	sub	sp, #28
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8016f80:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f82:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016f84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f86:	b672      	cpsid	i
}
 8016f88:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	687a      	ldr	r2, [r7, #4]
 8016f90:	429a      	cmp	r2, r3
 8016f92:	d102      	bne.n	8016f9a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8016f94:	2301      	movs	r3, #1
 8016f96:	75fb      	strb	r3, [r7, #23]
 8016f98:	e001      	b.n	8016f9e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	75fb      	strb	r3, [r7, #23]
 8016f9e:	693b      	ldr	r3, [r7, #16]
 8016fa0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fa2:	68bb      	ldr	r3, [r7, #8]
 8016fa4:	f383 8810 	msr	PRIMASK, r3
}
 8016fa8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8016faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8016fac:	4618      	mov	r0, r3
 8016fae:	371c      	adds	r7, #28
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb6:	4770      	bx	lr

08016fb8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8016fb8:	b480      	push	{r7}
 8016fba:	b087      	sub	sp, #28
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	6078      	str	r0, [r7, #4]
 8016fc0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8016fc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8016fc8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016fca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016fcc:	b672      	cpsid	i
}
 8016fce:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	681a      	ldr	r2, [r3, #0]
 8016fd4:	683b      	ldr	r3, [r7, #0]
 8016fd6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016fd8:	683b      	ldr	r3, [r7, #0]
 8016fda:	687a      	ldr	r2, [r7, #4]
 8016fdc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	683a      	ldr	r2, [r7, #0]
 8016fe2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016fe4:	683b      	ldr	r3, [r7, #0]
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	683a      	ldr	r2, [r7, #0]
 8016fea:	605a      	str	r2, [r3, #4]
 8016fec:	697b      	ldr	r3, [r7, #20]
 8016fee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ff0:	693b      	ldr	r3, [r7, #16]
 8016ff2:	f383 8810 	msr	PRIMASK, r3
}
 8016ff6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016ff8:	bf00      	nop
 8016ffa:	371c      	adds	r7, #28
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017002:	4770      	bx	lr

08017004 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8017004:	b480      	push	{r7}
 8017006:	b087      	sub	sp, #28
 8017008:	af00      	add	r7, sp, #0
 801700a:	6078      	str	r0, [r7, #4]
 801700c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801700e:	f3ef 8310 	mrs	r3, PRIMASK
 8017012:	60fb      	str	r3, [r7, #12]
  return(result);
 8017014:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8017016:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017018:	b672      	cpsid	i
}
 801701a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 801701c:	683b      	ldr	r3, [r7, #0]
 801701e:	687a      	ldr	r2, [r7, #4]
 8017020:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	685a      	ldr	r2, [r3, #4]
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	683a      	ldr	r2, [r7, #0]
 801702e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8017030:	683b      	ldr	r3, [r7, #0]
 8017032:	685b      	ldr	r3, [r3, #4]
 8017034:	683a      	ldr	r2, [r7, #0]
 8017036:	601a      	str	r2, [r3, #0]
 8017038:	697b      	ldr	r3, [r7, #20]
 801703a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801703c:	693b      	ldr	r3, [r7, #16]
 801703e:	f383 8810 	msr	PRIMASK, r3
}
 8017042:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8017044:	bf00      	nop
 8017046:	371c      	adds	r7, #28
 8017048:	46bd      	mov	sp, r7
 801704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704e:	4770      	bx	lr

08017050 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8017050:	b480      	push	{r7}
 8017052:	b087      	sub	sp, #28
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017058:	f3ef 8310 	mrs	r3, PRIMASK
 801705c:	60fb      	str	r3, [r7, #12]
  return(result);
 801705e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8017060:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017062:	b672      	cpsid	i
}
 8017064:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	685b      	ldr	r3, [r3, #4]
 801706a:	687a      	ldr	r2, [r7, #4]
 801706c:	6812      	ldr	r2, [r2, #0]
 801706e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	687a      	ldr	r2, [r7, #4]
 8017076:	6852      	ldr	r2, [r2, #4]
 8017078:	605a      	str	r2, [r3, #4]
 801707a:	697b      	ldr	r3, [r7, #20]
 801707c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801707e:	693b      	ldr	r3, [r7, #16]
 8017080:	f383 8810 	msr	PRIMASK, r3
}
 8017084:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8017086:	bf00      	nop
 8017088:	371c      	adds	r7, #28
 801708a:	46bd      	mov	sp, r7
 801708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017090:	4770      	bx	lr

08017092 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8017092:	b580      	push	{r7, lr}
 8017094:	b086      	sub	sp, #24
 8017096:	af00      	add	r7, sp, #0
 8017098:	6078      	str	r0, [r7, #4]
 801709a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801709c:	f3ef 8310 	mrs	r3, PRIMASK
 80170a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80170a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80170a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80170a6:	b672      	cpsid	i
}
 80170a8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	681a      	ldr	r2, [r3, #0]
 80170ae:	683b      	ldr	r3, [r7, #0]
 80170b0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	4618      	mov	r0, r3
 80170b8:	f7ff ffca 	bl	8017050 <LST_remove_node>
 80170bc:	697b      	ldr	r3, [r7, #20]
 80170be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170c0:	693b      	ldr	r3, [r7, #16]
 80170c2:	f383 8810 	msr	PRIMASK, r3
}
 80170c6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80170c8:	bf00      	nop
 80170ca:	3718      	adds	r7, #24
 80170cc:	46bd      	mov	sp, r7
 80170ce:	bd80      	pop	{r7, pc}

080170d0 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b082      	sub	sp, #8
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 80170d8:	6878      	ldr	r0, [r7, #4]
 80170da:	f7ea fce8 	bl	8001aae <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80170de:	bf00      	nop
 80170e0:	3708      	adds	r7, #8
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bd80      	pop	{r7, pc}

080170e6 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 80170e6:	b580      	push	{r7, lr}
 80170e8:	b082      	sub	sp, #8
 80170ea:	af00      	add	r7, sp, #0
 80170ec:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 80170ee:	e002      	b.n	80170f6 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 80170f0:	2001      	movs	r0, #1
 80170f2:	f7ff ffed 	bl	80170d0 <SPIF_Delay>
  while (Handle->Lock)
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	7b1b      	ldrb	r3, [r3, #12]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d1f8      	bne.n	80170f0 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	2201      	movs	r2, #1
 8017102:	731a      	strb	r2, [r3, #12]
}
 8017104:	bf00      	nop
 8017106:	3708      	adds	r7, #8
 8017108:	46bd      	mov	sp, r7
 801710a:	bd80      	pop	{r7, pc}

0801710c <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 801710c:	b480      	push	{r7}
 801710e:	b083      	sub	sp, #12
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	2200      	movs	r2, #0
 8017118:	731a      	strb	r2, [r3, #12]
}
 801711a:	bf00      	nop
 801711c:	370c      	adds	r7, #12
 801711e:	46bd      	mov	sp, r7
 8017120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017124:	4770      	bx	lr

08017126 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8017126:	b580      	push	{r7, lr}
 8017128:	b084      	sub	sp, #16
 801712a:	af00      	add	r7, sp, #0
 801712c:	6078      	str	r0, [r7, #4]
 801712e:	460b      	mov	r3, r1
 8017130:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	6858      	ldr	r0, [r3, #4]
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	691b      	ldr	r3, [r3, #16]
 801713a:	b29b      	uxth	r3, r3
 801713c:	78fa      	ldrb	r2, [r7, #3]
 801713e:	4619      	mov	r1, r3
 8017140:	f7f2 f974 	bl	800942c <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8017144:	2300      	movs	r3, #0
 8017146:	60fb      	str	r3, [r7, #12]
 8017148:	e002      	b.n	8017150 <SPIF_CsPin+0x2a>
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	3301      	adds	r3, #1
 801714e:	60fb      	str	r3, [r7, #12]
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	2b09      	cmp	r3, #9
 8017154:	ddf9      	ble.n	801714a <SPIF_CsPin+0x24>
}
 8017156:	bf00      	nop
 8017158:	bf00      	nop
 801715a:	3710      	adds	r7, #16
 801715c:	46bd      	mov	sp, r7
 801715e:	bd80      	pop	{r7, pc}

08017160 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b088      	sub	sp, #32
 8017164:	af02      	add	r7, sp, #8
 8017166:	60f8      	str	r0, [r7, #12]
 8017168:	60b9      	str	r1, [r7, #8]
 801716a:	607a      	str	r2, [r7, #4]
 801716c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801716e:	2300      	movs	r3, #0
 8017170:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	6818      	ldr	r0, [r3, #0]
 8017176:	683b      	ldr	r3, [r7, #0]
 8017178:	b29a      	uxth	r2, r3
 801717a:	6a3b      	ldr	r3, [r7, #32]
 801717c:	9300      	str	r3, [sp, #0]
 801717e:	4613      	mov	r3, r2
 8017180:	687a      	ldr	r2, [r7, #4]
 8017182:	68b9      	ldr	r1, [r7, #8]
 8017184:	f7f7 f9f9 	bl	800e57a <HAL_SPI_TransmitReceive>
 8017188:	4603      	mov	r3, r0
 801718a:	2b00      	cmp	r3, #0
 801718c:	d101      	bne.n	8017192 <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 801718e:	2301      	movs	r3, #1
 8017190:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8017192:	7dfb      	ldrb	r3, [r7, #23]
}
 8017194:	4618      	mov	r0, r3
 8017196:	3718      	adds	r7, #24
 8017198:	46bd      	mov	sp, r7
 801719a:	bd80      	pop	{r7, pc}

0801719c <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 801719c:	b580      	push	{r7, lr}
 801719e:	b086      	sub	sp, #24
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	60f8      	str	r0, [r7, #12]
 80171a4:	60b9      	str	r1, [r7, #8]
 80171a6:	607a      	str	r2, [r7, #4]
 80171a8:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80171aa:	2300      	movs	r3, #0
 80171ac:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	6818      	ldr	r0, [r3, #0]
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	b29a      	uxth	r2, r3
 80171b6:	683b      	ldr	r3, [r7, #0]
 80171b8:	68b9      	ldr	r1, [r7, #8]
 80171ba:	f7f6 ff30 	bl	800e01e <HAL_SPI_Transmit>
 80171be:	4603      	mov	r3, r0
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d101      	bne.n	80171c8 <SPIF_Transmit+0x2c>
  {
    retVal = true;
 80171c4:	2301      	movs	r3, #1
 80171c6:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80171c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80171ca:	4618      	mov	r0, r3
 80171cc:	3718      	adds	r7, #24
 80171ce:	46bd      	mov	sp, r7
 80171d0:	bd80      	pop	{r7, pc}

080171d2 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 80171d2:	b580      	push	{r7, lr}
 80171d4:	b086      	sub	sp, #24
 80171d6:	af00      	add	r7, sp, #0
 80171d8:	60f8      	str	r0, [r7, #12]
 80171da:	60b9      	str	r1, [r7, #8]
 80171dc:	607a      	str	r2, [r7, #4]
 80171de:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80171e0:	2300      	movs	r3, #0
 80171e2:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	6818      	ldr	r0, [r3, #0]
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	b29a      	uxth	r2, r3
 80171ec:	683b      	ldr	r3, [r7, #0]
 80171ee:	68b9      	ldr	r1, [r7, #8]
 80171f0:	f7f7 f88b 	bl	800e30a <HAL_SPI_Receive>
 80171f4:	4603      	mov	r3, r0
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d101      	bne.n	80171fe <SPIF_Receive+0x2c>
  {
    retVal = true;
 80171fa:	2301      	movs	r3, #1
 80171fc:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80171fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8017200:	4618      	mov	r0, r3
 8017202:	3718      	adds	r7, #24
 8017204:	46bd      	mov	sp, r7
 8017206:	bd80      	pop	{r7, pc}

08017208 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8017208:	b580      	push	{r7, lr}
 801720a:	b084      	sub	sp, #16
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8017210:	2301      	movs	r3, #1
 8017212:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8017214:	2306      	movs	r3, #6
 8017216:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8017218:	2100      	movs	r1, #0
 801721a:	6878      	ldr	r0, [r7, #4]
 801721c:	f7ff ff83 	bl	8017126 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8017220:	f107 010c 	add.w	r1, r7, #12
 8017224:	2364      	movs	r3, #100	@ 0x64
 8017226:	2201      	movs	r2, #1
 8017228:	6878      	ldr	r0, [r7, #4]
 801722a:	f7ff ffb7 	bl	801719c <SPIF_Transmit>
 801722e:	4603      	mov	r3, r0
 8017230:	f083 0301 	eor.w	r3, r3, #1
 8017234:	b2db      	uxtb	r3, r3
 8017236:	2b00      	cmp	r3, #0
 8017238:	d001      	beq.n	801723e <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 801723a:	2300      	movs	r3, #0
 801723c:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 801723e:	2101      	movs	r1, #1
 8017240:	6878      	ldr	r0, [r7, #4]
 8017242:	f7ff ff70 	bl	8017126 <SPIF_CsPin>
  return retVal;
 8017246:	7bfb      	ldrb	r3, [r7, #15]
}
 8017248:	4618      	mov	r0, r3
 801724a:	3710      	adds	r7, #16
 801724c:	46bd      	mov	sp, r7
 801724e:	bd80      	pop	{r7, pc}

08017250 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8017250:	b580      	push	{r7, lr}
 8017252:	b084      	sub	sp, #16
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8017258:	2301      	movs	r3, #1
 801725a:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 801725c:	2304      	movs	r3, #4
 801725e:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8017260:	2100      	movs	r1, #0
 8017262:	6878      	ldr	r0, [r7, #4]
 8017264:	f7ff ff5f 	bl	8017126 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8017268:	f107 010c 	add.w	r1, r7, #12
 801726c:	2364      	movs	r3, #100	@ 0x64
 801726e:	2201      	movs	r2, #1
 8017270:	6878      	ldr	r0, [r7, #4]
 8017272:	f7ff ff93 	bl	801719c <SPIF_Transmit>
 8017276:	4603      	mov	r3, r0
 8017278:	f083 0301 	eor.w	r3, r3, #1
 801727c:	b2db      	uxtb	r3, r3
 801727e:	2b00      	cmp	r3, #0
 8017280:	d001      	beq.n	8017286 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8017282:	2300      	movs	r3, #0
 8017284:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8017286:	2101      	movs	r1, #1
 8017288:	6878      	ldr	r0, [r7, #4]
 801728a:	f7ff ff4c 	bl	8017126 <SPIF_CsPin>
  return retVal;
 801728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017290:	4618      	mov	r0, r3
 8017292:	3710      	adds	r7, #16
 8017294:	46bd      	mov	sp, r7
 8017296:	bd80      	pop	{r7, pc}

08017298 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b086      	sub	sp, #24
 801729c:	af02      	add	r7, sp, #8
 801729e:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 80172a0:	2300      	movs	r3, #0
 80172a2:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 80172a4:	f24a 5305 	movw	r3, #42245	@ 0xa505
 80172a8:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 80172aa:	2100      	movs	r1, #0
 80172ac:	6878      	ldr	r0, [r7, #4]
 80172ae:	f7ff ff3a 	bl	8017126 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 80172b2:	f107 0208 	add.w	r2, r7, #8
 80172b6:	f107 010c 	add.w	r1, r7, #12
 80172ba:	2364      	movs	r3, #100	@ 0x64
 80172bc:	9300      	str	r3, [sp, #0]
 80172be:	2302      	movs	r3, #2
 80172c0:	6878      	ldr	r0, [r7, #4]
 80172c2:	f7ff ff4d 	bl	8017160 <SPIF_TransmitReceive>
 80172c6:	4603      	mov	r3, r0
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d001      	beq.n	80172d0 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 80172cc:	7a7b      	ldrb	r3, [r7, #9]
 80172ce:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 80172d0:	2101      	movs	r1, #1
 80172d2:	6878      	ldr	r0, [r7, #4]
 80172d4:	f7ff ff27 	bl	8017126 <SPIF_CsPin>
  return retVal;
 80172d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80172da:	4618      	mov	r0, r3
 80172dc:	3710      	adds	r7, #16
 80172de:	46bd      	mov	sp, r7
 80172e0:	bd80      	pop	{r7, pc}

080172e2 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 80172e2:	b580      	push	{r7, lr}
 80172e4:	b084      	sub	sp, #16
 80172e6:	af00      	add	r7, sp, #0
 80172e8:	6078      	str	r0, [r7, #4]
 80172ea:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 80172ec:	2300      	movs	r3, #0
 80172ee:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 80172f0:	f7f0 f998 	bl	8007624 <HAL_GetTick>
 80172f4:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 80172f6:	2001      	movs	r0, #1
 80172f8:	f7ff feea 	bl	80170d0 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 80172fc:	f7f0 f992 	bl	8007624 <HAL_GetTick>
 8017300:	4602      	mov	r2, r0
 8017302:	68bb      	ldr	r3, [r7, #8]
 8017304:	1ad3      	subs	r3, r2, r3
 8017306:	683a      	ldr	r2, [r7, #0]
 8017308:	429a      	cmp	r2, r3
 801730a:	d90a      	bls.n	8017322 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 801730c:	6878      	ldr	r0, [r7, #4]
 801730e:	f7ff ffc3 	bl	8017298 <SPIF_ReadReg1>
 8017312:	4603      	mov	r3, r0
 8017314:	f003 0301 	and.w	r3, r3, #1
 8017318:	2b00      	cmp	r3, #0
 801731a:	d1ec      	bne.n	80172f6 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 801731c:	2301      	movs	r3, #1
 801731e:	73fb      	strb	r3, [r7, #15]
      break;
 8017320:	e000      	b.n	8017324 <SPIF_WaitForWriting+0x42>
      break;
 8017322:	bf00      	nop
    }
  }
  return retVal;
 8017324:	7bfb      	ldrb	r3, [r7, #15]
}
 8017326:	4618      	mov	r0, r3
 8017328:	3710      	adds	r7, #16
 801732a:	46bd      	mov	sp, r7
 801732c:	bd80      	pop	{r7, pc}
	...

08017330 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b088      	sub	sp, #32
 8017334:	af02      	add	r7, sp, #8
 8017336:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8017338:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 801733c:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 801733e:	2300      	movs	r3, #0
 8017340:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 8017342:	2100      	movs	r1, #0
 8017344:	6878      	ldr	r0, [r7, #4]
 8017346:	f7ff feee 	bl	8017126 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 801734a:	f107 020c 	add.w	r2, r7, #12
 801734e:	f107 0110 	add.w	r1, r7, #16
 8017352:	2364      	movs	r3, #100	@ 0x64
 8017354:	9300      	str	r3, [sp, #0]
 8017356:	2304      	movs	r3, #4
 8017358:	6878      	ldr	r0, [r7, #4]
 801735a:	f7ff ff01 	bl	8017160 <SPIF_TransmitReceive>
 801735e:	4603      	mov	r3, r0
 8017360:	f083 0301 	eor.w	r3, r3, #1
 8017364:	b2db      	uxtb	r3, r3
 8017366:	2b00      	cmp	r3, #0
 8017368:	d004      	beq.n	8017374 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 801736a:	2101      	movs	r1, #1
 801736c:	6878      	ldr	r0, [r7, #4]
 801736e:	f7ff feda 	bl	8017126 <SPIF_CsPin>
      break;
 8017372:	e16f      	b.n	8017654 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8017374:	2101      	movs	r1, #1
 8017376:	6878      	ldr	r0, [r7, #4]
 8017378:	f7ff fed5 	bl	8017126 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 801737c:	7b7a      	ldrb	r2, [r7, #13]
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 8017382:	7bba      	ldrb	r2, [r7, #14]
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8017388:	7bfa      	ldrb	r2, [r7, #15]
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	7a1b      	ldrb	r3, [r3, #8]
 8017392:	2bef      	cmp	r3, #239	@ 0xef
 8017394:	f000 80f0 	beq.w	8017578 <SPIF_FindChip+0x248>
 8017398:	2bef      	cmp	r3, #239	@ 0xef
 801739a:	f300 80e9 	bgt.w	8017570 <SPIF_FindChip+0x240>
 801739e:	2bc8      	cmp	r3, #200	@ 0xc8
 80173a0:	f300 80e6 	bgt.w	8017570 <SPIF_FindChip+0x240>
 80173a4:	2b85      	cmp	r3, #133	@ 0x85
 80173a6:	da0c      	bge.n	80173c2 <SPIF_FindChip+0x92>
 80173a8:	2b62      	cmp	r3, #98	@ 0x62
 80173aa:	f000 80e7 	beq.w	801757c <SPIF_FindChip+0x24c>
 80173ae:	2b62      	cmp	r3, #98	@ 0x62
 80173b0:	f300 80de 	bgt.w	8017570 <SPIF_FindChip+0x240>
 80173b4:	2b20      	cmp	r3, #32
 80173b6:	f300 80d9 	bgt.w	801756c <SPIF_FindChip+0x23c>
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	f300 8090 	bgt.w	80174e0 <SPIF_FindChip+0x1b0>
 80173c0:	e0d6      	b.n	8017570 <SPIF_FindChip+0x240>
 80173c2:	3b85      	subs	r3, #133	@ 0x85
 80173c4:	2b43      	cmp	r3, #67	@ 0x43
 80173c6:	f200 80d3 	bhi.w	8017570 <SPIF_FindChip+0x240>
 80173ca:	a201      	add	r2, pc, #4	@ (adr r2, 80173d0 <SPIF_FindChip+0xa0>)
 80173cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173d0:	08017581 	.word	0x08017581
 80173d4:	08017571 	.word	0x08017571
 80173d8:	08017571 	.word	0x08017571
 80173dc:	08017571 	.word	0x08017571
 80173e0:	08017581 	.word	0x08017581
 80173e4:	08017571 	.word	0x08017571
 80173e8:	08017571 	.word	0x08017571
 80173ec:	08017581 	.word	0x08017581
 80173f0:	08017571 	.word	0x08017571
 80173f4:	08017571 	.word	0x08017571
 80173f8:	08017571 	.word	0x08017571
 80173fc:	08017571 	.word	0x08017571
 8017400:	08017571 	.word	0x08017571
 8017404:	08017571 	.word	0x08017571
 8017408:	08017571 	.word	0x08017571
 801740c:	08017571 	.word	0x08017571
 8017410:	08017571 	.word	0x08017571
 8017414:	08017571 	.word	0x08017571
 8017418:	08017571 	.word	0x08017571
 801741c:	08017571 	.word	0x08017571
 8017420:	08017571 	.word	0x08017571
 8017424:	08017571 	.word	0x08017571
 8017428:	08017571 	.word	0x08017571
 801742c:	08017571 	.word	0x08017571
 8017430:	08017581 	.word	0x08017581
 8017434:	08017571 	.word	0x08017571
 8017438:	08017571 	.word	0x08017571
 801743c:	08017571 	.word	0x08017571
 8017440:	08017581 	.word	0x08017581
 8017444:	08017571 	.word	0x08017571
 8017448:	08017571 	.word	0x08017571
 801744c:	08017571 	.word	0x08017571
 8017450:	08017571 	.word	0x08017571
 8017454:	08017571 	.word	0x08017571
 8017458:	08017571 	.word	0x08017571
 801745c:	08017571 	.word	0x08017571
 8017460:	08017571 	.word	0x08017571
 8017464:	08017571 	.word	0x08017571
 8017468:	08017571 	.word	0x08017571
 801746c:	08017571 	.word	0x08017571
 8017470:	08017581 	.word	0x08017581
 8017474:	08017571 	.word	0x08017571
 8017478:	08017571 	.word	0x08017571
 801747c:	08017571 	.word	0x08017571
 8017480:	08017571 	.word	0x08017571
 8017484:	08017571 	.word	0x08017571
 8017488:	08017571 	.word	0x08017571
 801748c:	08017571 	.word	0x08017571
 8017490:	08017571 	.word	0x08017571
 8017494:	08017571 	.word	0x08017571
 8017498:	08017571 	.word	0x08017571
 801749c:	08017571 	.word	0x08017571
 80174a0:	08017571 	.word	0x08017571
 80174a4:	08017571 	.word	0x08017571
 80174a8:	08017571 	.word	0x08017571
 80174ac:	08017571 	.word	0x08017571
 80174b0:	08017571 	.word	0x08017571
 80174b4:	08017571 	.word	0x08017571
 80174b8:	08017581 	.word	0x08017581
 80174bc:	08017571 	.word	0x08017571
 80174c0:	08017571 	.word	0x08017571
 80174c4:	08017581 	.word	0x08017581
 80174c8:	08017571 	.word	0x08017571
 80174cc:	08017571 	.word	0x08017571
 80174d0:	08017571 	.word	0x08017571
 80174d4:	08017571 	.word	0x08017571
 80174d8:	08017571 	.word	0x08017571
 80174dc:	08017581 	.word	0x08017581
 80174e0:	3b01      	subs	r3, #1
 80174e2:	2b1f      	cmp	r3, #31
 80174e4:	d844      	bhi.n	8017570 <SPIF_FindChip+0x240>
 80174e6:	a201      	add	r2, pc, #4	@ (adr r2, 80174ec <SPIF_FindChip+0x1bc>)
 80174e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174ec:	08017585 	.word	0x08017585
 80174f0:	08017571 	.word	0x08017571
 80174f4:	08017571 	.word	0x08017571
 80174f8:	08017585 	.word	0x08017585
 80174fc:	08017571 	.word	0x08017571
 8017500:	08017571 	.word	0x08017571
 8017504:	08017571 	.word	0x08017571
 8017508:	08017571 	.word	0x08017571
 801750c:	08017571 	.word	0x08017571
 8017510:	08017571 	.word	0x08017571
 8017514:	08017571 	.word	0x08017571
 8017518:	08017571 	.word	0x08017571
 801751c:	08017571 	.word	0x08017571
 8017520:	08017571 	.word	0x08017571
 8017524:	08017571 	.word	0x08017571
 8017528:	08017571 	.word	0x08017571
 801752c:	08017571 	.word	0x08017571
 8017530:	08017571 	.word	0x08017571
 8017534:	08017571 	.word	0x08017571
 8017538:	08017571 	.word	0x08017571
 801753c:	08017571 	.word	0x08017571
 8017540:	08017571 	.word	0x08017571
 8017544:	08017571 	.word	0x08017571
 8017548:	08017571 	.word	0x08017571
 801754c:	08017571 	.word	0x08017571
 8017550:	08017571 	.word	0x08017571
 8017554:	08017571 	.word	0x08017571
 8017558:	08017585 	.word	0x08017585
 801755c:	08017571 	.word	0x08017571
 8017560:	08017571 	.word	0x08017571
 8017564:	08017571 	.word	0x08017571
 8017568:	08017585 	.word	0x08017585
 801756c:	2b37      	cmp	r3, #55	@ 0x37
 801756e:	d00b      	beq.n	8017588 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	2200      	movs	r2, #0
 8017574:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8017576:	e008      	b.n	801758a <SPIF_FindChip+0x25a>
      break;
 8017578:	bf00      	nop
 801757a:	e006      	b.n	801758a <SPIF_FindChip+0x25a>
      break;
 801757c:	bf00      	nop
 801757e:	e004      	b.n	801758a <SPIF_FindChip+0x25a>
      break;
 8017580:	bf00      	nop
 8017582:	e002      	b.n	801758a <SPIF_FindChip+0x25a>
      break;
 8017584:	bf00      	nop
 8017586:	e000      	b.n	801758a <SPIF_FindChip+0x25a>
      break;
 8017588:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	7a5b      	ldrb	r3, [r3, #9]
 801758e:	3b11      	subs	r3, #17
 8017590:	2b0f      	cmp	r3, #15
 8017592:	d84e      	bhi.n	8017632 <SPIF_FindChip+0x302>
 8017594:	a201      	add	r2, pc, #4	@ (adr r2, 801759c <SPIF_FindChip+0x26c>)
 8017596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801759a:	bf00      	nop
 801759c:	080175dd 	.word	0x080175dd
 80175a0:	080175e5 	.word	0x080175e5
 80175a4:	080175ed 	.word	0x080175ed
 80175a8:	080175f5 	.word	0x080175f5
 80175ac:	080175fd 	.word	0x080175fd
 80175b0:	08017605 	.word	0x08017605
 80175b4:	0801760d 	.word	0x0801760d
 80175b8:	08017615 	.word	0x08017615
 80175bc:	0801761f 	.word	0x0801761f
 80175c0:	08017633 	.word	0x08017633
 80175c4:	08017633 	.word	0x08017633
 80175c8:	08017633 	.word	0x08017633
 80175cc:	08017633 	.word	0x08017633
 80175d0:	08017633 	.word	0x08017633
 80175d4:	08017633 	.word	0x08017633
 80175d8:	08017629 	.word	0x08017629
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	2202      	movs	r2, #2
 80175e0:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 80175e2:	e02a      	b.n	801763a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	2204      	movs	r2, #4
 80175e8:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 80175ea:	e026      	b.n	801763a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	2208      	movs	r2, #8
 80175f0:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 80175f2:	e022      	b.n	801763a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	2210      	movs	r2, #16
 80175f8:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 80175fa:	e01e      	b.n	801763a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	2220      	movs	r2, #32
 8017600:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 8017602:	e01a      	b.n	801763a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	2240      	movs	r2, #64	@ 0x40
 8017608:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 801760a:	e016      	b.n	801763a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	2280      	movs	r2, #128	@ 0x80
 8017610:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 8017612:	e012      	b.n	801763a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801761a:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 801761c:	e00d      	b.n	801763a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017624:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 8017626:	e008      	b.n	801763a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801762e:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8017630:	e003      	b.n	801763a <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	2200      	movs	r2, #0
 8017636:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8017638:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	69db      	ldr	r3, [r3, #28]
 801763e:	011a      	lsls	r2, r3, #4
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	699b      	ldr	r3, [r3, #24]
 8017648:	031b      	lsls	r3, r3, #12
 801764a:	0a1a      	lsrs	r2, r3, #8
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8017650:	2301      	movs	r3, #1
 8017652:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8017654:	7dfb      	ldrb	r3, [r7, #23]
}
 8017656:	4618      	mov	r0, r3
 8017658:	3718      	adds	r7, #24
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}
 801765e:	bf00      	nop

08017660 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b08a      	sub	sp, #40	@ 0x28
 8017664:	af00      	add	r7, sp, #0
 8017666:	60f8      	str	r0, [r7, #12]
 8017668:	60b9      	str	r1, [r7, #8]
 801766a:	607a      	str	r2, [r7, #4]
 801766c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801766e:	2300      	movs	r3, #0
 8017670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8017674:	2300      	movs	r3, #0
 8017676:	623b      	str	r3, [r7, #32]
 8017678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801767a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801767e:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	695b      	ldr	r3, [r3, #20]
 8017684:	68ba      	ldr	r2, [r7, #8]
 8017686:	429a      	cmp	r2, r3
 8017688:	f080 8084 	bcs.w	8017794 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 801768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801768e:	2bff      	cmp	r3, #255	@ 0xff
 8017690:	f200 8082 	bhi.w	8017798 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8017694:	683a      	ldr	r2, [r7, #0]
 8017696:	69fb      	ldr	r3, [r7, #28]
 8017698:	429a      	cmp	r2, r3
 801769a:	d901      	bls.n	80176a0 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 801769c:	69fb      	ldr	r3, [r7, #28]
 801769e:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 80176a0:	68bb      	ldr	r3, [r7, #8]
 80176a2:	021b      	lsls	r3, r3, #8
 80176a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80176a6:	4413      	add	r3, r2
 80176a8:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 80176aa:	68f8      	ldr	r0, [r7, #12]
 80176ac:	f7ff fdac 	bl	8017208 <SPIF_WriteEnable>
 80176b0:	4603      	mov	r3, r0
 80176b2:	f083 0301 	eor.w	r3, r3, #1
 80176b6:	b2db      	uxtb	r3, r3
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d16f      	bne.n	801779c <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80176bc:	2100      	movs	r1, #0
 80176be:	68f8      	ldr	r0, [r7, #12]
 80176c0:	f7ff fd31 	bl	8017126 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	69db      	ldr	r3, [r3, #28]
 80176c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80176cc:	d322      	bcc.n	8017714 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 80176ce:	2312      	movs	r3, #18
 80176d0:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 80176d2:	6a3b      	ldr	r3, [r7, #32]
 80176d4:	0e1b      	lsrs	r3, r3, #24
 80176d6:	b2db      	uxtb	r3, r3
 80176d8:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 80176da:	6a3b      	ldr	r3, [r7, #32]
 80176dc:	0c1b      	lsrs	r3, r3, #16
 80176de:	b2db      	uxtb	r3, r3
 80176e0:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 80176e2:	6a3b      	ldr	r3, [r7, #32]
 80176e4:	0a1b      	lsrs	r3, r3, #8
 80176e6:	b2db      	uxtb	r3, r3
 80176e8:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 80176ea:	6a3b      	ldr	r3, [r7, #32]
 80176ec:	b2db      	uxtb	r3, r3
 80176ee:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80176f0:	f107 0114 	add.w	r1, r7, #20
 80176f4:	2364      	movs	r3, #100	@ 0x64
 80176f6:	2205      	movs	r2, #5
 80176f8:	68f8      	ldr	r0, [r7, #12]
 80176fa:	f7ff fd4f 	bl	801719c <SPIF_Transmit>
 80176fe:	4603      	mov	r3, r0
 8017700:	f083 0301 	eor.w	r3, r3, #1
 8017704:	b2db      	uxtb	r3, r3
 8017706:	2b00      	cmp	r3, #0
 8017708:	d023      	beq.n	8017752 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 801770a:	2101      	movs	r1, #1
 801770c:	68f8      	ldr	r0, [r7, #12]
 801770e:	f7ff fd0a 	bl	8017126 <SPIF_CsPin>
        break;
 8017712:	e044      	b.n	801779e <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8017714:	2302      	movs	r3, #2
 8017716:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8017718:	6a3b      	ldr	r3, [r7, #32]
 801771a:	0c1b      	lsrs	r3, r3, #16
 801771c:	b2db      	uxtb	r3, r3
 801771e:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8017720:	6a3b      	ldr	r3, [r7, #32]
 8017722:	0a1b      	lsrs	r3, r3, #8
 8017724:	b2db      	uxtb	r3, r3
 8017726:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8017728:	6a3b      	ldr	r3, [r7, #32]
 801772a:	b2db      	uxtb	r3, r3
 801772c:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 801772e:	f107 0114 	add.w	r1, r7, #20
 8017732:	2364      	movs	r3, #100	@ 0x64
 8017734:	2204      	movs	r2, #4
 8017736:	68f8      	ldr	r0, [r7, #12]
 8017738:	f7ff fd30 	bl	801719c <SPIF_Transmit>
 801773c:	4603      	mov	r3, r0
 801773e:	f083 0301 	eor.w	r3, r3, #1
 8017742:	b2db      	uxtb	r3, r3
 8017744:	2b00      	cmp	r3, #0
 8017746:	d004      	beq.n	8017752 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8017748:	2101      	movs	r1, #1
 801774a:	68f8      	ldr	r0, [r7, #12]
 801774c:	f7ff fceb 	bl	8017126 <SPIF_CsPin>
        break;
 8017750:	e025      	b.n	801779e <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8017752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017756:	683a      	ldr	r2, [r7, #0]
 8017758:	6879      	ldr	r1, [r7, #4]
 801775a:	68f8      	ldr	r0, [r7, #12]
 801775c:	f7ff fd1e 	bl	801719c <SPIF_Transmit>
 8017760:	4603      	mov	r3, r0
 8017762:	f083 0301 	eor.w	r3, r3, #1
 8017766:	b2db      	uxtb	r3, r3
 8017768:	2b00      	cmp	r3, #0
 801776a:	d004      	beq.n	8017776 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 801776c:	2101      	movs	r1, #1
 801776e:	68f8      	ldr	r0, [r7, #12]
 8017770:	f7ff fcd9 	bl	8017126 <SPIF_CsPin>
      break;
 8017774:	e013      	b.n	801779e <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8017776:	2101      	movs	r1, #1
 8017778:	68f8      	ldr	r0, [r7, #12]
 801777a:	f7ff fcd4 	bl	8017126 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 801777e:	2164      	movs	r1, #100	@ 0x64
 8017780:	68f8      	ldr	r0, [r7, #12]
 8017782:	f7ff fdae 	bl	80172e2 <SPIF_WaitForWriting>
 8017786:	4603      	mov	r3, r0
 8017788:	2b00      	cmp	r3, #0
 801778a:	d008      	beq.n	801779e <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 801778c:	2301      	movs	r3, #1
 801778e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017792:	e004      	b.n	801779e <SPIF_WriteFn+0x13e>
      break;
 8017794:	bf00      	nop
 8017796:	e002      	b.n	801779e <SPIF_WriteFn+0x13e>
      break;
 8017798:	bf00      	nop
 801779a:	e000      	b.n	801779e <SPIF_WriteFn+0x13e>
      break;
 801779c:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 801779e:	68f8      	ldr	r0, [r7, #12]
 80177a0:	f7ff fd56 	bl	8017250 <SPIF_WriteDisable>
  return retVal;
 80177a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80177a8:	4618      	mov	r0, r3
 80177aa:	3728      	adds	r7, #40	@ 0x28
 80177ac:	46bd      	mov	sp, r7
 80177ae:	bd80      	pop	{r7, pc}

080177b0 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b086      	sub	sp, #24
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	60f8      	str	r0, [r7, #12]
 80177b8:	60b9      	str	r1, [r7, #8]
 80177ba:	607a      	str	r2, [r7, #4]
 80177bc:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80177be:	2300      	movs	r3, #0
 80177c0:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 80177c2:	2100      	movs	r1, #0
 80177c4:	68f8      	ldr	r0, [r7, #12]
 80177c6:	f7ff fcae 	bl	8017126 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	69db      	ldr	r3, [r3, #28]
 80177ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80177d2:	d322      	bcc.n	801781a <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 80177d4:	2313      	movs	r3, #19
 80177d6:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 80177d8:	68bb      	ldr	r3, [r7, #8]
 80177da:	0e1b      	lsrs	r3, r3, #24
 80177dc:	b2db      	uxtb	r3, r3
 80177de:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 80177e0:	68bb      	ldr	r3, [r7, #8]
 80177e2:	0c1b      	lsrs	r3, r3, #16
 80177e4:	b2db      	uxtb	r3, r3
 80177e6:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 80177e8:	68bb      	ldr	r3, [r7, #8]
 80177ea:	0a1b      	lsrs	r3, r3, #8
 80177ec:	b2db      	uxtb	r3, r3
 80177ee:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 80177f0:	68bb      	ldr	r3, [r7, #8]
 80177f2:	b2db      	uxtb	r3, r3
 80177f4:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80177f6:	f107 0110 	add.w	r1, r7, #16
 80177fa:	2364      	movs	r3, #100	@ 0x64
 80177fc:	2205      	movs	r2, #5
 80177fe:	68f8      	ldr	r0, [r7, #12]
 8017800:	f7ff fccc 	bl	801719c <SPIF_Transmit>
 8017804:	4603      	mov	r3, r0
 8017806:	f083 0301 	eor.w	r3, r3, #1
 801780a:	b2db      	uxtb	r3, r3
 801780c:	2b00      	cmp	r3, #0
 801780e:	d023      	beq.n	8017858 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8017810:	2101      	movs	r1, #1
 8017812:	68f8      	ldr	r0, [r7, #12]
 8017814:	f7ff fc87 	bl	8017126 <SPIF_CsPin>
        break;
 8017818:	e036      	b.n	8017888 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 801781a:	2303      	movs	r3, #3
 801781c:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 801781e:	68bb      	ldr	r3, [r7, #8]
 8017820:	0c1b      	lsrs	r3, r3, #16
 8017822:	b2db      	uxtb	r3, r3
 8017824:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8017826:	68bb      	ldr	r3, [r7, #8]
 8017828:	0a1b      	lsrs	r3, r3, #8
 801782a:	b2db      	uxtb	r3, r3
 801782c:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 801782e:	68bb      	ldr	r3, [r7, #8]
 8017830:	b2db      	uxtb	r3, r3
 8017832:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8017834:	f107 0110 	add.w	r1, r7, #16
 8017838:	2364      	movs	r3, #100	@ 0x64
 801783a:	2204      	movs	r2, #4
 801783c:	68f8      	ldr	r0, [r7, #12]
 801783e:	f7ff fcad 	bl	801719c <SPIF_Transmit>
 8017842:	4603      	mov	r3, r0
 8017844:	f083 0301 	eor.w	r3, r3, #1
 8017848:	b2db      	uxtb	r3, r3
 801784a:	2b00      	cmp	r3, #0
 801784c:	d004      	beq.n	8017858 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 801784e:	2101      	movs	r1, #1
 8017850:	68f8      	ldr	r0, [r7, #12]
 8017852:	f7ff fc68 	bl	8017126 <SPIF_CsPin>
        break;
 8017856:	e017      	b.n	8017888 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8017858:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801785c:	683a      	ldr	r2, [r7, #0]
 801785e:	6879      	ldr	r1, [r7, #4]
 8017860:	68f8      	ldr	r0, [r7, #12]
 8017862:	f7ff fcb6 	bl	80171d2 <SPIF_Receive>
 8017866:	4603      	mov	r3, r0
 8017868:	f083 0301 	eor.w	r3, r3, #1
 801786c:	b2db      	uxtb	r3, r3
 801786e:	2b00      	cmp	r3, #0
 8017870:	d004      	beq.n	801787c <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8017872:	2101      	movs	r1, #1
 8017874:	68f8      	ldr	r0, [r7, #12]
 8017876:	f7ff fc56 	bl	8017126 <SPIF_CsPin>
      break;
 801787a:	e005      	b.n	8017888 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 801787c:	2101      	movs	r1, #1
 801787e:	68f8      	ldr	r0, [r7, #12]
 8017880:	f7ff fc51 	bl	8017126 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8017884:	2301      	movs	r3, #1
 8017886:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8017888:	7dfb      	ldrb	r3, [r7, #23]
}
 801788a:	4618      	mov	r0, r3
 801788c:	3718      	adds	r7, #24
 801788e:	46bd      	mov	sp, r7
 8017890:	bd80      	pop	{r7, pc}

08017892 <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8017892:	b580      	push	{r7, lr}
 8017894:	b086      	sub	sp, #24
 8017896:	af00      	add	r7, sp, #0
 8017898:	60f8      	str	r0, [r7, #12]
 801789a:	60b9      	str	r1, [r7, #8]
 801789c:	607a      	str	r2, [r7, #4]
 801789e:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 80178a0:	2300      	movs	r3, #0
 80178a2:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d03a      	beq.n	8017920 <SPIF_Init+0x8e>
 80178aa:	68bb      	ldr	r3, [r7, #8]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d037      	beq.n	8017920 <SPIF_Init+0x8e>
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d034      	beq.n	8017920 <SPIF_Init+0x8e>
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	7a9b      	ldrb	r3, [r3, #10]
 80178ba:	2b01      	cmp	r3, #1
 80178bc:	d030      	beq.n	8017920 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 80178be:	2220      	movs	r2, #32
 80178c0:	2100      	movs	r1, #0
 80178c2:	68f8      	ldr	r0, [r7, #12]
 80178c4:	f003 fea5 	bl	801b612 <memset>
    Handle->HSpi = HSpi;
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	68ba      	ldr	r2, [r7, #8]
 80178cc:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	687a      	ldr	r2, [r7, #4]
 80178d2:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 80178d4:	887a      	ldrh	r2, [r7, #2]
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 80178da:	2101      	movs	r1, #1
 80178dc:	68f8      	ldr	r0, [r7, #12]
 80178de:	f7ff fc22 	bl	8017126 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 80178e2:	e002      	b.n	80178ea <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 80178e4:	2001      	movs	r0, #1
 80178e6:	f7ff fbf3 	bl	80170d0 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 80178ea:	f7ef fe9b 	bl	8007624 <HAL_GetTick>
 80178ee:	4603      	mov	r3, r0
 80178f0:	2b13      	cmp	r3, #19
 80178f2:	d9f7      	bls.n	80178e4 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 80178f4:	68f8      	ldr	r0, [r7, #12]
 80178f6:	f7ff fcab 	bl	8017250 <SPIF_WriteDisable>
 80178fa:	4603      	mov	r3, r0
 80178fc:	f083 0301 	eor.w	r3, r3, #1
 8017900:	b2db      	uxtb	r3, r3
 8017902:	2b00      	cmp	r3, #0
 8017904:	d10b      	bne.n	801791e <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8017906:	68f8      	ldr	r0, [r7, #12]
 8017908:	f7ff fd12 	bl	8017330 <SPIF_FindChip>
 801790c:	4603      	mov	r3, r0
 801790e:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8017910:	7dfb      	ldrb	r3, [r7, #23]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d004      	beq.n	8017920 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	2201      	movs	r2, #1
 801791a:	729a      	strb	r2, [r3, #10]
 801791c:	e000      	b.n	8017920 <SPIF_Init+0x8e>
      break;
 801791e:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8017920:	7dfb      	ldrb	r3, [r7, #23]
}
 8017922:	4618      	mov	r0, r3
 8017924:	3718      	adds	r7, #24
 8017926:	46bd      	mov	sp, r7
 8017928:	bd80      	pop	{r7, pc}

0801792a <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 801792a:	b580      	push	{r7, lr}
 801792c:	b086      	sub	sp, #24
 801792e:	af00      	add	r7, sp, #0
 8017930:	6078      	str	r0, [r7, #4]
 8017932:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8017934:	6878      	ldr	r0, [r7, #4]
 8017936:	f7ff fbd6 	bl	80170e6 <SPIF_Lock>
  bool retVal = false;
 801793a:	2300      	movs	r3, #0
 801793c:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	031b      	lsls	r3, r3, #12
 8017942:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	699b      	ldr	r3, [r3, #24]
 8017948:	683a      	ldr	r2, [r7, #0]
 801794a:	429a      	cmp	r2, r3
 801794c:	d262      	bcs.n	8017a14 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 801794e:	6878      	ldr	r0, [r7, #4]
 8017950:	f7ff fc5a 	bl	8017208 <SPIF_WriteEnable>
 8017954:	4603      	mov	r3, r0
 8017956:	f083 0301 	eor.w	r3, r3, #1
 801795a:	b2db      	uxtb	r3, r3
 801795c:	2b00      	cmp	r3, #0
 801795e:	d15b      	bne.n	8017a18 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8017960:	2100      	movs	r1, #0
 8017962:	6878      	ldr	r0, [r7, #4]
 8017964:	f7ff fbdf 	bl	8017126 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	69db      	ldr	r3, [r3, #28]
 801796c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017970:	d322      	bcc.n	80179b8 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8017972:	2321      	movs	r3, #33	@ 0x21
 8017974:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8017976:	693b      	ldr	r3, [r7, #16]
 8017978:	0e1b      	lsrs	r3, r3, #24
 801797a:	b2db      	uxtb	r3, r3
 801797c:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 801797e:	693b      	ldr	r3, [r7, #16]
 8017980:	0c1b      	lsrs	r3, r3, #16
 8017982:	b2db      	uxtb	r3, r3
 8017984:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8017986:	693b      	ldr	r3, [r7, #16]
 8017988:	0a1b      	lsrs	r3, r3, #8
 801798a:	b2db      	uxtb	r3, r3
 801798c:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 801798e:	693b      	ldr	r3, [r7, #16]
 8017990:	b2db      	uxtb	r3, r3
 8017992:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017994:	f107 0108 	add.w	r1, r7, #8
 8017998:	2364      	movs	r3, #100	@ 0x64
 801799a:	2205      	movs	r2, #5
 801799c:	6878      	ldr	r0, [r7, #4]
 801799e:	f7ff fbfd 	bl	801719c <SPIF_Transmit>
 80179a2:	4603      	mov	r3, r0
 80179a4:	f083 0301 	eor.w	r3, r3, #1
 80179a8:	b2db      	uxtb	r3, r3
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d023      	beq.n	80179f6 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80179ae:	2101      	movs	r1, #1
 80179b0:	6878      	ldr	r0, [r7, #4]
 80179b2:	f7ff fbb8 	bl	8017126 <SPIF_CsPin>
        break;
 80179b6:	e030      	b.n	8017a1a <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 80179b8:	2320      	movs	r3, #32
 80179ba:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 80179bc:	693b      	ldr	r3, [r7, #16]
 80179be:	0c1b      	lsrs	r3, r3, #16
 80179c0:	b2db      	uxtb	r3, r3
 80179c2:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 80179c4:	693b      	ldr	r3, [r7, #16]
 80179c6:	0a1b      	lsrs	r3, r3, #8
 80179c8:	b2db      	uxtb	r3, r3
 80179ca:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 80179cc:	693b      	ldr	r3, [r7, #16]
 80179ce:	b2db      	uxtb	r3, r3
 80179d0:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80179d2:	f107 0108 	add.w	r1, r7, #8
 80179d6:	2364      	movs	r3, #100	@ 0x64
 80179d8:	2204      	movs	r2, #4
 80179da:	6878      	ldr	r0, [r7, #4]
 80179dc:	f7ff fbde 	bl	801719c <SPIF_Transmit>
 80179e0:	4603      	mov	r3, r0
 80179e2:	f083 0301 	eor.w	r3, r3, #1
 80179e6:	b2db      	uxtb	r3, r3
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d004      	beq.n	80179f6 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80179ec:	2101      	movs	r1, #1
 80179ee:	6878      	ldr	r0, [r7, #4]
 80179f0:	f7ff fb99 	bl	8017126 <SPIF_CsPin>
        break;
 80179f4:	e011      	b.n	8017a1a <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 80179f6:	2101      	movs	r1, #1
 80179f8:	6878      	ldr	r0, [r7, #4]
 80179fa:	f7ff fb94 	bl	8017126 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 80179fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017a02:	6878      	ldr	r0, [r7, #4]
 8017a04:	f7ff fc6d 	bl	80172e2 <SPIF_WaitForWriting>
 8017a08:	4603      	mov	r3, r0
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d005      	beq.n	8017a1a <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8017a0e:	2301      	movs	r3, #1
 8017a10:	75fb      	strb	r3, [r7, #23]
 8017a12:	e002      	b.n	8017a1a <SPIF_EraseSector+0xf0>
      break;
 8017a14:	bf00      	nop
 8017a16:	e000      	b.n	8017a1a <SPIF_EraseSector+0xf0>
      break;
 8017a18:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8017a1a:	6878      	ldr	r0, [r7, #4]
 8017a1c:	f7ff fc18 	bl	8017250 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8017a20:	6878      	ldr	r0, [r7, #4]
 8017a22:	f7ff fb73 	bl	801710c <SPIF_UnLock>
  return retVal;
 8017a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a28:	4618      	mov	r0, r3
 8017a2a:	3718      	adds	r7, #24
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	bd80      	pop	{r7, pc}

08017a30 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017a30:	b580      	push	{r7, lr}
 8017a32:	b088      	sub	sp, #32
 8017a34:	af02      	add	r7, sp, #8
 8017a36:	60f8      	str	r0, [r7, #12]
 8017a38:	60b9      	str	r1, [r7, #8]
 8017a3a:	607a      	str	r2, [r7, #4]
 8017a3c:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8017a3e:	68f8      	ldr	r0, [r7, #12]
 8017a40:	f7ff fb51 	bl	80170e6 <SPIF_Lock>
  bool retVal = false;
 8017a44:	2300      	movs	r3, #0
 8017a46:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8017a48:	6a3b      	ldr	r3, [r7, #32]
 8017a4a:	9300      	str	r3, [sp, #0]
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	687a      	ldr	r2, [r7, #4]
 8017a50:	68b9      	ldr	r1, [r7, #8]
 8017a52:	68f8      	ldr	r0, [r7, #12]
 8017a54:	f7ff fe04 	bl	8017660 <SPIF_WriteFn>
 8017a58:	4603      	mov	r3, r0
 8017a5a:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 8017a5c:	68f8      	ldr	r0, [r7, #12]
 8017a5e:	f7ff fb55 	bl	801710c <SPIF_UnLock>
  return retVal;
 8017a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a64:	4618      	mov	r0, r3
 8017a66:	3718      	adds	r7, #24
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd80      	pop	{r7, pc}

08017a6c <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b088      	sub	sp, #32
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	60f8      	str	r0, [r7, #12]
 8017a74:	60b9      	str	r1, [r7, #8]
 8017a76:	607a      	str	r2, [r7, #4]
 8017a78:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8017a7a:	68f8      	ldr	r0, [r7, #12]
 8017a7c:	f7ff fb33 	bl	80170e6 <SPIF_Lock>
  bool retVal = false;
 8017a80:	2300      	movs	r3, #0
 8017a82:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8017a84:	68bb      	ldr	r3, [r7, #8]
 8017a86:	021b      	lsls	r3, r3, #8
 8017a88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017a8a:	4413      	add	r3, r2
 8017a8c:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 8017a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a90:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8017a94:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8017a96:	683a      	ldr	r2, [r7, #0]
 8017a98:	697b      	ldr	r3, [r7, #20]
 8017a9a:	429a      	cmp	r2, r3
 8017a9c:	d901      	bls.n	8017aa2 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 8017a9e:	697b      	ldr	r3, [r7, #20]
 8017aa0:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8017aa2:	683b      	ldr	r3, [r7, #0]
 8017aa4:	687a      	ldr	r2, [r7, #4]
 8017aa6:	69b9      	ldr	r1, [r7, #24]
 8017aa8:	68f8      	ldr	r0, [r7, #12]
 8017aaa:	f7ff fe81 	bl	80177b0 <SPIF_ReadFn>
 8017aae:	4603      	mov	r3, r0
 8017ab0:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8017ab2:	68f8      	ldr	r0, [r7, #12]
 8017ab4:	f7ff fb2a 	bl	801710c <SPIF_UnLock>
  return retVal;
 8017ab8:	7ffb      	ldrb	r3, [r7, #31]
}
 8017aba:	4618      	mov	r0, r3
 8017abc:	3720      	adds	r7, #32
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	bd80      	pop	{r7, pc}
	...

08017ac4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8017ac4:	b480      	push	{r7}
 8017ac6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8017ac8:	4b03      	ldr	r3, [pc, #12]	@ (8017ad8 <LL_FLASH_GetUDN+0x14>)
 8017aca:	681b      	ldr	r3, [r3, #0]
}
 8017acc:	4618      	mov	r0, r3
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad4:	4770      	bx	lr
 8017ad6:	bf00      	nop
 8017ad8:	1fff7580 	.word	0x1fff7580

08017adc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8017adc:	b480      	push	{r7}
 8017ade:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8017ae0:	4b03      	ldr	r3, [pc, #12]	@ (8017af0 <LL_FLASH_GetDeviceID+0x14>)
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	b2db      	uxtb	r3, r3
}
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	46bd      	mov	sp, r7
 8017aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aee:	4770      	bx	lr
 8017af0:	1fff7584 	.word	0x1fff7584

08017af4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8017af4:	b480      	push	{r7}
 8017af6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8017af8:	4b03      	ldr	r3, [pc, #12]	@ (8017b08 <LL_FLASH_GetSTCompanyID+0x14>)
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	0a1b      	lsrs	r3, r3, #8
}
 8017afe:	4618      	mov	r0, r3
 8017b00:	46bd      	mov	sp, r7
 8017b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b06:	4770      	bx	lr
 8017b08:	1fff7584 	.word	0x1fff7584

08017b0c <APP_BLE_Init>:
/* USER CODE BEGIN EV */
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8017b0c:	b5b0      	push	{r4, r5, r7, lr}
 8017b0e:	b090      	sub	sp, #64	@ 0x40
 8017b10:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017b12:	2392      	movs	r3, #146	@ 0x92
 8017b14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8017b18:	4b25      	ldr	r3, [pc, #148]	@ (8017bb0 <APP_BLE_Init+0xa4>)
 8017b1a:	1d3c      	adds	r4, r7, #4
 8017b1c:	461d      	mov	r5, r3
 8017b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017b2e:	c403      	stmia	r4!, {r0, r1}
 8017b30:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8017b32:	f000 f921 	bl	8017d78 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8017b36:	2101      	movs	r1, #1
 8017b38:	2002      	movs	r0, #2
 8017b3a:	f001 fba5 	bl	8019288 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8017b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8017bb4 <APP_BLE_Init+0xa8>)
 8017b40:	2100      	movs	r1, #0
 8017b42:	2002      	movs	r0, #2
 8017b44:	f001 fccc 	bl	80194e0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8017b48:	1d3b      	adds	r3, r7, #4
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	f7fe fbcc 	bl	80162e8 <SHCI_C2_BLE_Init>
 8017b50:	4603      	mov	r3, r0
 8017b52:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8017b56:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d001      	beq.n	8017b62 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8017b5e:	f7eb fa4f 	bl	8003000 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8017b62:	f000 f91f 	bl	8017da4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8017b66:	f7fe fb19 	bl	801619c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017b6a:	4b13      	ldr	r3, [pc, #76]	@ (8017bb8 <APP_BLE_Init+0xac>)
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8017b72:	4b11      	ldr	r3, [pc, #68]	@ (8017bb8 <APP_BLE_Init+0xac>)
 8017b74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017b78:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8017b7a:	4a10      	ldr	r2, [pc, #64]	@ (8017bbc <APP_BLE_Init+0xb0>)
 8017b7c:	2100      	movs	r1, #0
 8017b7e:	2001      	movs	r0, #1
 8017b80:	f001 fcae 	bl	80194e0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8017b84:	2006      	movs	r0, #6
 8017b86:	f7fe f97d 	bl	8015e84 <aci_hal_set_radio_activity_mask>
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8017b90:	f000 facb 	bl	801812a <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8017b94:	4b08      	ldr	r3, [pc, #32]	@ (8017bb8 <APP_BLE_Init+0xac>)
 8017b96:	2200      	movs	r2, #0
 8017b98:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8017b9a:	4b07      	ldr	r3, [pc, #28]	@ (8017bb8 <APP_BLE_Init+0xac>)
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8017ba0:	2001      	movs	r0, #1
 8017ba2:	f000 f9b3 	bl	8017f0c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
  /* USER CODE END APP_BLE_Init_2 */

  return;
 8017ba6:	bf00      	nop
}
 8017ba8:	3740      	adds	r7, #64	@ 0x40
 8017baa:	46bd      	mov	sp, r7
 8017bac:	bdb0      	pop	{r4, r5, r7, pc}
 8017bae:	bf00      	nop
 8017bb0:	0802008c 	.word	0x0802008c
 8017bb4:	08016505 	.word	0x08016505
 8017bb8:	200013f8 	.word	0x200013f8
 8017bbc:	08017ff5 	.word	0x08017ff5

08017bc0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b08c      	sub	sp, #48	@ 0x30
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8017bc8:	2392      	movs	r3, #146	@ 0x92
 8017bca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  /* PAIRING */

  /* USER CODE BEGIN SVCCTL_App_Notification */
  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	3301      	adds	r3, #1
 8017bd2:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8017bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bd6:	781b      	ldrb	r3, [r3, #0]
 8017bd8:	2bff      	cmp	r3, #255	@ 0xff
 8017bda:	d05c      	beq.n	8017c96 <SVCCTL_App_Notification+0xd6>
 8017bdc:	2bff      	cmp	r3, #255	@ 0xff
 8017bde:	f300 80bd 	bgt.w	8017d5c <SVCCTL_App_Notification+0x19c>
 8017be2:	2b3e      	cmp	r3, #62	@ 0x3e
 8017be4:	d02b      	beq.n	8017c3e <SVCCTL_App_Notification+0x7e>
 8017be6:	2b3e      	cmp	r3, #62	@ 0x3e
 8017be8:	f300 80b8 	bgt.w	8017d5c <SVCCTL_App_Notification+0x19c>
 8017bec:	2b05      	cmp	r3, #5
 8017bee:	d002      	beq.n	8017bf6 <SVCCTL_App_Notification+0x36>
 8017bf0:	2b10      	cmp	r3, #16
 8017bf2:	d020      	beq.n	8017c36 <SVCCTL_App_Notification+0x76>
      /* USER CODE END EVENT_PCKT */

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/
      /* USER CODE END ECODE_DEFAULT*/
      break;
 8017bf4:	e0b2      	b.n	8017d5c <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8017bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bf8:	3302      	adds	r3, #2
 8017bfa:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017c02:	b29a      	uxth	r2, r3
 8017c04:	4b59      	ldr	r3, [pc, #356]	@ (8017d6c <SVCCTL_App_Notification+0x1ac>)
 8017c06:	8adb      	ldrh	r3, [r3, #22]
 8017c08:	429a      	cmp	r2, r3
 8017c0a:	d106      	bne.n	8017c1a <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8017c0c:	4b57      	ldr	r3, [pc, #348]	@ (8017d6c <SVCCTL_App_Notification+0x1ac>)
 8017c0e:	2200      	movs	r2, #0
 8017c10:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017c12:	4b56      	ldr	r3, [pc, #344]	@ (8017d6c <SVCCTL_App_Notification+0x1ac>)
 8017c14:	2200      	movs	r2, #0
 8017c16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8017c1a:	2001      	movs	r0, #1
 8017c1c:	f000 f976 	bl	8017f0c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8017c20:	4b53      	ldr	r3, [pc, #332]	@ (8017d70 <SVCCTL_App_Notification+0x1b0>)
 8017c22:	2201      	movs	r2, #1
 8017c24:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8017c26:	4b51      	ldr	r3, [pc, #324]	@ (8017d6c <SVCCTL_App_Notification+0x1ac>)
 8017c28:	8ada      	ldrh	r2, [r3, #22]
 8017c2a:	4b51      	ldr	r3, [pc, #324]	@ (8017d70 <SVCCTL_App_Notification+0x1b0>)
 8017c2c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8017c2e:	4850      	ldr	r0, [pc, #320]	@ (8017d70 <SVCCTL_App_Notification+0x1b0>)
 8017c30:	f000 fa67 	bl	8018102 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8017c34:	e095      	b.n	8017d62 <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8017c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c38:	3302      	adds	r3, #2
 8017c3a:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8017c3c:	e091      	b.n	8017d62 <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8017c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c40:	3302      	adds	r3, #2
 8017c42:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8017c44:	69bb      	ldr	r3, [r7, #24]
 8017c46:	781b      	ldrb	r3, [r3, #0]
 8017c48:	2b01      	cmp	r3, #1
 8017c4a:	d001      	beq.n	8017c50 <SVCCTL_App_Notification+0x90>
 8017c4c:	2b03      	cmp	r3, #3
          break;
 8017c4e:	e021      	b.n	8017c94 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8017c50:	69bb      	ldr	r3, [r7, #24]
 8017c52:	3301      	adds	r3, #1
 8017c54:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8017c56:	4b45      	ldr	r3, [pc, #276]	@ (8017d6c <SVCCTL_App_Notification+0x1ac>)
 8017c58:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8017c5c:	2b04      	cmp	r3, #4
 8017c5e:	d104      	bne.n	8017c6a <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8017c60:	4b42      	ldr	r3, [pc, #264]	@ (8017d6c <SVCCTL_App_Notification+0x1ac>)
 8017c62:	2206      	movs	r2, #6
 8017c64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8017c68:	e003      	b.n	8017c72 <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8017c6a:	4b40      	ldr	r3, [pc, #256]	@ (8017d6c <SVCCTL_App_Notification+0x1ac>)
 8017c6c:	2205      	movs	r2, #5
 8017c6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8017c72:	697b      	ldr	r3, [r7, #20]
 8017c74:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017c78:	b29a      	uxth	r2, r3
 8017c7a:	4b3c      	ldr	r3, [pc, #240]	@ (8017d6c <SVCCTL_App_Notification+0x1ac>)
 8017c7c:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8017c7e:	4b3c      	ldr	r3, [pc, #240]	@ (8017d70 <SVCCTL_App_Notification+0x1b0>)
 8017c80:	2200      	movs	r2, #0
 8017c82:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8017c84:	4b39      	ldr	r3, [pc, #228]	@ (8017d6c <SVCCTL_App_Notification+0x1ac>)
 8017c86:	8ada      	ldrh	r2, [r3, #22]
 8017c88:	4b39      	ldr	r3, [pc, #228]	@ (8017d70 <SVCCTL_App_Notification+0x1b0>)
 8017c8a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8017c8c:	4838      	ldr	r0, [pc, #224]	@ (8017d70 <SVCCTL_App_Notification+0x1b0>)
 8017c8e:	f000 fa38 	bl	8018102 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8017c92:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8017c94:	e065      	b.n	8017d62 <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8017c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c98:	3302      	adds	r3, #2
 8017c9a:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8017c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c9e:	881b      	ldrh	r3, [r3, #0]
 8017ca0:	b29b      	uxth	r3, r3
 8017ca2:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8017ca6:	4293      	cmp	r3, r2
 8017ca8:	d048      	beq.n	8017d3c <SVCCTL_App_Notification+0x17c>
 8017caa:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8017cae:	4293      	cmp	r3, r2
 8017cb0:	dc56      	bgt.n	8017d60 <SVCCTL_App_Notification+0x1a0>
 8017cb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017cb6:	d04b      	beq.n	8017d50 <SVCCTL_App_Notification+0x190>
 8017cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017cbc:	dc50      	bgt.n	8017d60 <SVCCTL_App_Notification+0x1a0>
 8017cbe:	f240 420a 	movw	r2, #1034	@ 0x40a
 8017cc2:	4293      	cmp	r3, r2
 8017cc4:	dc4c      	bgt.n	8017d60 <SVCCTL_App_Notification+0x1a0>
 8017cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017cca:	dc04      	bgt.n	8017cd6 <SVCCTL_App_Notification+0x116>
 8017ccc:	2b04      	cmp	r3, #4
 8017cce:	d041      	beq.n	8017d54 <SVCCTL_App_Notification+0x194>
 8017cd0:	2b06      	cmp	r3, #6
 8017cd2:	d039      	beq.n	8017d48 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017cd4:	e044      	b.n	8017d60 <SVCCTL_App_Notification+0x1a0>
 8017cd6:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8017cda:	2b09      	cmp	r3, #9
 8017cdc:	d840      	bhi.n	8017d60 <SVCCTL_App_Notification+0x1a0>
 8017cde:	a201      	add	r2, pc, #4	@ (adr r2, 8017ce4 <SVCCTL_App_Notification+0x124>)
 8017ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ce4:	08017d35 	.word	0x08017d35
 8017ce8:	08017d0d 	.word	0x08017d0d
 8017cec:	08017d61 	.word	0x08017d61
 8017cf0:	08017d61 	.word	0x08017d61
 8017cf4:	08017d61 	.word	0x08017d61
 8017cf8:	08017d61 	.word	0x08017d61
 8017cfc:	08017d59 	.word	0x08017d59
 8017d00:	08017d61 	.word	0x08017d61
 8017d04:	08017d21 	.word	0x08017d21
 8017d08:	08017d59 	.word	0x08017d59
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8017d0c:	4b17      	ldr	r3, [pc, #92]	@ (8017d6c <SVCCTL_App_Notification+0x1ac>)
 8017d0e:	8adb      	ldrh	r3, [r3, #22]
 8017d10:	4918      	ldr	r1, [pc, #96]	@ (8017d74 <SVCCTL_App_Notification+0x1b4>)
 8017d12:	4618      	mov	r0, r3
 8017d14:	f7fd fab8 	bl	8015288 <aci_gap_pass_key_resp>
 8017d18:	4603      	mov	r3, r0
 8017d1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8017d1e:	e01c      	b.n	8017d5a <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8017d20:	4b12      	ldr	r3, [pc, #72]	@ (8017d6c <SVCCTL_App_Notification+0x1ac>)
 8017d22:	8adb      	ldrh	r3, [r3, #22]
 8017d24:	2101      	movs	r1, #1
 8017d26:	4618      	mov	r0, r3
 8017d28:	f7fd fc58 	bl	80155dc <aci_gap_numeric_comparison_value_confirm_yesno>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8017d32:	e012      	b.n	8017d5a <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8017d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d36:	3302      	adds	r3, #2
 8017d38:	623b      	str	r3, [r7, #32]
          break;
 8017d3a:	e00e      	b.n	8017d5a <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8017d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8017d6c <SVCCTL_App_Notification+0x1ac>)
 8017d3e:	8adb      	ldrh	r3, [r3, #22]
 8017d40:	4618      	mov	r0, r3
 8017d42:	f7fd ff5e 	bl	8015c02 <aci_gatt_confirm_indication>
        break;
 8017d46:	e008      	b.n	8017d5a <SVCCTL_App_Notification+0x19a>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 8017d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d4a:	3302      	adds	r3, #2
 8017d4c:	61fb      	str	r3, [r7, #28]
          break;
 8017d4e:	e004      	b.n	8017d5a <SVCCTL_App_Notification+0x19a>
          break;
 8017d50:	bf00      	nop
 8017d52:	e005      	b.n	8017d60 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8017d54:	bf00      	nop
 8017d56:	e003      	b.n	8017d60 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8017d58:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017d5a:	e001      	b.n	8017d60 <SVCCTL_App_Notification+0x1a0>
      break;
 8017d5c:	bf00      	nop
 8017d5e:	e000      	b.n	8017d62 <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017d60:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8017d62:	2301      	movs	r3, #1
}
 8017d64:	4618      	mov	r0, r3
 8017d66:	3730      	adds	r7, #48	@ 0x30
 8017d68:	46bd      	mov	sp, r7
 8017d6a:	bd80      	pop	{r7, pc}
 8017d6c:	200013f8 	.word	0x200013f8
 8017d70:	2000147c 	.word	0x2000147c
 8017d74:	0001b207 	.word	0x0001b207

08017d78 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b082      	sub	sp, #8
 8017d7c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8017d7e:	4b06      	ldr	r3, [pc, #24]	@ (8017d98 <Ble_Tl_Init+0x20>)
 8017d80:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8017d82:	4b06      	ldr	r3, [pc, #24]	@ (8017d9c <Ble_Tl_Init+0x24>)
 8017d84:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8017d86:	463b      	mov	r3, r7
 8017d88:	4619      	mov	r1, r3
 8017d8a:	4805      	ldr	r0, [pc, #20]	@ (8017da0 <Ble_Tl_Init+0x28>)
 8017d8c:	f7fe fb9e 	bl	80164cc <hci_init>

  return;
 8017d90:	bf00      	nop
}
 8017d92:	3708      	adds	r7, #8
 8017d94:	46bd      	mov	sp, r7
 8017d96:	bd80      	pop	{r7, pc}
 8017d98:	200300d8 	.word	0x200300d8
 8017d9c:	080180a5 	.word	0x080180a5
 8017da0:	0801806d 	.word	0x0801806d

08017da4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8017da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017da6:	b08d      	sub	sp, #52	@ 0x34
 8017da8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8017daa:	2300      	movs	r3, #0
 8017dac:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017dae:	2392      	movs	r3, #146	@ 0x92
 8017db0:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8017db2:	f7fe f8bb 	bl	8015f2c <hci_reset>
 8017db6:	4603      	mov	r3, r0
 8017db8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8017dba:	f000 f8d7 	bl	8017f6c <BleGetBdAddress>
 8017dbe:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8017dc0:	693a      	ldr	r2, [r7, #16]
 8017dc2:	2106      	movs	r1, #6
 8017dc4:	2000      	movs	r0, #0
 8017dc6:	f7fd ff71 	bl	8015cac <aci_hal_write_config_data>
 8017dca:	4603      	mov	r3, r0
 8017dcc:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8017dce:	4a4a      	ldr	r2, [pc, #296]	@ (8017ef8 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8017dd0:	2110      	movs	r1, #16
 8017dd2:	2018      	movs	r0, #24
 8017dd4:	f7fd ff6a 	bl	8015cac <aci_hal_write_config_data>
 8017dd8:	4603      	mov	r3, r0
 8017dda:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8017ddc:	4a47      	ldr	r2, [pc, #284]	@ (8017efc <Ble_Hci_Gap_Gatt_Init+0x158>)
 8017dde:	2110      	movs	r1, #16
 8017de0:	2008      	movs	r0, #8
 8017de2:	f7fd ff63 	bl	8015cac <aci_hal_write_config_data>
 8017de6:	4603      	mov	r3, r0
 8017de8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8017dea:	2109      	movs	r1, #9
 8017dec:	2001      	movs	r0, #1
 8017dee:	f7fd ffe2 	bl	8015db6 <aci_hal_set_tx_power_level>
 8017df2:	4603      	mov	r3, r0
 8017df4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8017df6:	f7fd fc58 	bl	80156aa <aci_gatt_init>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8017dfe:	2300      	movs	r3, #0
 8017e00:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8017e02:	7bfb      	ldrb	r3, [r7, #15]
 8017e04:	f043 0301 	orr.w	r3, r3, #1
 8017e08:	73fb      	strb	r3, [r7, #15]
#endif /* BLE_CFG_CENTRAL == 1 */

/* USER CODE BEGIN Role_Mngt*/
/* USER CODE END Role_Mngt */

  if (role > 0)
 8017e0a:	7bfb      	ldrb	r3, [r7, #15]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d01f      	beq.n	8017e50 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8017e10:	4b3b      	ldr	r3, [pc, #236]	@ (8017f00 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8017e12:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8017e14:	1dba      	adds	r2, r7, #6
 8017e16:	7bf8      	ldrb	r0, [r7, #15]
 8017e18:	1cbb      	adds	r3, r7, #2
 8017e1a:	9301      	str	r3, [sp, #4]
 8017e1c:	1d3b      	adds	r3, r7, #4
 8017e1e:	9300      	str	r3, [sp, #0]
 8017e20:	4613      	mov	r3, r2
 8017e22:	2208      	movs	r2, #8
 8017e24:	2100      	movs	r1, #0
 8017e26:	f7fd fa96 	bl	8015356 <aci_gap_init>
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8017e2e:	88fc      	ldrh	r4, [r7, #6]
 8017e30:	88bd      	ldrh	r5, [r7, #4]
 8017e32:	68b8      	ldr	r0, [r7, #8]
 8017e34:	f7e8 f9f4 	bl	8000220 <strlen>
 8017e38:	4603      	mov	r3, r0
 8017e3a:	b2da      	uxtb	r2, r3
 8017e3c:	68bb      	ldr	r3, [r7, #8]
 8017e3e:	9300      	str	r3, [sp, #0]
 8017e40:	4613      	mov	r3, r2
 8017e42:	2200      	movs	r2, #0
 8017e44:	4629      	mov	r1, r5
 8017e46:	4620      	mov	r0, r4
 8017e48:	f7fd fe32 	bl	8015ab0 <aci_gatt_update_char_value>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8017e50:	88f8      	ldrh	r0, [r7, #6]
 8017e52:	8879      	ldrh	r1, [r7, #2]
 8017e54:	463b      	mov	r3, r7
 8017e56:	9300      	str	r3, [sp, #0]
 8017e58:	2302      	movs	r3, #2
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	f7fd fe28 	bl	8015ab0 <aci_gatt_update_char_value>
 8017e60:	4603      	mov	r3, r0
 8017e62:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8017e64:	2202      	movs	r2, #2
 8017e66:	2102      	movs	r1, #2
 8017e68:	2000      	movs	r0, #0
 8017e6a:	f7fe f883 	bl	8015f74 <hci_le_set_default_phy>
 8017e6e:	4603      	mov	r3, r0
 8017e70:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8017e72:	4b24      	ldr	r3, [pc, #144]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017e74:	2201      	movs	r2, #1
 8017e76:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8017e78:	4b22      	ldr	r3, [pc, #136]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017e7a:	781b      	ldrb	r3, [r3, #0]
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	f7fd f8eb 	bl	8015058 <aci_gap_set_io_capability>
 8017e82:	4603      	mov	r3, r0
 8017e84:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8017e86:	4b1f      	ldr	r3, [pc, #124]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017e88:	2201      	movs	r2, #1
 8017e8a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8017e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017e8e:	2208      	movs	r2, #8
 8017e90:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8017e92:	4b1c      	ldr	r3, [pc, #112]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017e94:	2210      	movs	r2, #16
 8017e96:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8017e98:	4b1a      	ldr	r3, [pc, #104]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8017e9e:	4b19      	ldr	r3, [pc, #100]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ea0:	4a19      	ldr	r2, [pc, #100]	@ (8017f08 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8017ea2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8017ea4:	4b17      	ldr	r3, [pc, #92]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8017eaa:	4b16      	ldr	r3, [pc, #88]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017eac:	789c      	ldrb	r4, [r3, #2]
 8017eae:	4b15      	ldr	r3, [pc, #84]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017eb0:	785d      	ldrb	r5, [r3, #1]
 8017eb2:	4b14      	ldr	r3, [pc, #80]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017eb4:	791b      	ldrb	r3, [r3, #4]
 8017eb6:	4a13      	ldr	r2, [pc, #76]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017eb8:	7952      	ldrb	r2, [r2, #5]
 8017eba:	4912      	ldr	r1, [pc, #72]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ebc:	78c9      	ldrb	r1, [r1, #3]
 8017ebe:	4811      	ldr	r0, [pc, #68]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ec0:	6880      	ldr	r0, [r0, #8]
 8017ec2:	2600      	movs	r6, #0
 8017ec4:	9604      	str	r6, [sp, #16]
 8017ec6:	9003      	str	r0, [sp, #12]
 8017ec8:	9102      	str	r1, [sp, #8]
 8017eca:	9201      	str	r2, [sp, #4]
 8017ecc:	9300      	str	r3, [sp, #0]
 8017ece:	2300      	movs	r3, #0
 8017ed0:	2201      	movs	r2, #1
 8017ed2:	4629      	mov	r1, r5
 8017ed4:	4620      	mov	r0, r4
 8017ed6:	f7fd f913 	bl	8015100 <aci_gap_set_authentication_requirement>
 8017eda:	4603      	mov	r3, r0
 8017edc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8017ede:	4b09      	ldr	r3, [pc, #36]	@ (8017f04 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ee0:	789b      	ldrb	r3, [r3, #2]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d003      	beq.n	8017eee <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8017ee6:	f7fd fb55 	bl	8015594 <aci_gap_configure_filter_accept_list>
 8017eea:	4603      	mov	r3, r0
 8017eec:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8017eee:	bf00      	nop
 8017ef0:	371c      	adds	r7, #28
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ef6:	bf00      	nop
 8017ef8:	08023108 	.word	0x08023108
 8017efc:	08023118 	.word	0x08023118
 8017f00:	080200c8 	.word	0x080200c8
 8017f04:	200013f8 	.word	0x200013f8
 8017f08:	0001b207 	.word	0x0001b207

08017f0c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8017f0c:	b580      	push	{r7, lr}
 8017f0e:	b08c      	sub	sp, #48	@ 0x30
 8017f10:	af08      	add	r7, sp, #32
 8017f12:	4603      	mov	r3, r0
 8017f14:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017f16:	2392      	movs	r3, #146	@ 0x92
 8017f18:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8017f1a:	4a12      	ldr	r2, [pc, #72]	@ (8017f64 <Adv_Request+0x58>)
 8017f1c:	79fb      	ldrb	r3, [r7, #7]
 8017f1e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8017f22:	2300      	movs	r3, #0
 8017f24:	9306      	str	r3, [sp, #24]
 8017f26:	2300      	movs	r3, #0
 8017f28:	9305      	str	r3, [sp, #20]
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	9304      	str	r3, [sp, #16]
 8017f2e:	2300      	movs	r3, #0
 8017f30:	9303      	str	r3, [sp, #12]
 8017f32:	2300      	movs	r3, #0
 8017f34:	9302      	str	r3, [sp, #8]
 8017f36:	2300      	movs	r3, #0
 8017f38:	9301      	str	r3, [sp, #4]
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	9300      	str	r3, [sp, #0]
 8017f3e:	2300      	movs	r3, #0
 8017f40:	22a0      	movs	r2, #160	@ 0xa0
 8017f42:	2180      	movs	r1, #128	@ 0x80
 8017f44:	2000      	movs	r0, #0
 8017f46:	f7fc ff8d 	bl	8014e64 <aci_gap_set_discoverable>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8017f4e:	4906      	ldr	r1, [pc, #24]	@ (8017f68 <Adv_Request+0x5c>)
 8017f50:	200e      	movs	r0, #14
 8017f52:	f7fd faad 	bl	80154b0 <aci_gap_update_adv_data>
 8017f56:	4603      	mov	r3, r0
 8017f58:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8017f5a:	bf00      	nop
}
 8017f5c:	3710      	adds	r7, #16
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	bd80      	pop	{r7, pc}
 8017f62:	bf00      	nop
 8017f64:	200013f8 	.word	0x200013f8
 8017f68:	200000cc 	.word	0x200000cc

08017f6c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b086      	sub	sp, #24
 8017f70:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8017f72:	f7ff fda7 	bl	8017ac4 <LL_FLASH_GetUDN>
 8017f76:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8017f78:	693b      	ldr	r3, [r7, #16]
 8017f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f7e:	d023      	beq.n	8017fc8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8017f80:	f7ff fdb8 	bl	8017af4 <LL_FLASH_GetSTCompanyID>
 8017f84:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8017f86:	f7ff fda9 	bl	8017adc <LL_FLASH_GetDeviceID>
 8017f8a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8017f8c:	693b      	ldr	r3, [r7, #16]
 8017f8e:	b2da      	uxtb	r2, r3
 8017f90:	4b16      	ldr	r3, [pc, #88]	@ (8017fec <BleGetBdAddress+0x80>)
 8017f92:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8017f94:	693b      	ldr	r3, [r7, #16]
 8017f96:	0a1b      	lsrs	r3, r3, #8
 8017f98:	b2da      	uxtb	r2, r3
 8017f9a:	4b14      	ldr	r3, [pc, #80]	@ (8017fec <BleGetBdAddress+0x80>)
 8017f9c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	b2da      	uxtb	r2, r3
 8017fa2:	4b12      	ldr	r3, [pc, #72]	@ (8017fec <BleGetBdAddress+0x80>)
 8017fa4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8017fa6:	68bb      	ldr	r3, [r7, #8]
 8017fa8:	b2da      	uxtb	r2, r3
 8017faa:	4b10      	ldr	r3, [pc, #64]	@ (8017fec <BleGetBdAddress+0x80>)
 8017fac:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8017fae:	68bb      	ldr	r3, [r7, #8]
 8017fb0:	0a1b      	lsrs	r3, r3, #8
 8017fb2:	b2da      	uxtb	r2, r3
 8017fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8017fec <BleGetBdAddress+0x80>)
 8017fb6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8017fb8:	68bb      	ldr	r3, [r7, #8]
 8017fba:	0c1b      	lsrs	r3, r3, #16
 8017fbc:	b2da      	uxtb	r2, r3
 8017fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8017fec <BleGetBdAddress+0x80>)
 8017fc0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8017fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8017fec <BleGetBdAddress+0x80>)
 8017fc4:	617b      	str	r3, [r7, #20]
 8017fc6:	e00b      	b.n	8017fe0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8017fc8:	2000      	movs	r0, #0
 8017fca:	f7fe ff9b 	bl	8016f04 <OTP_Read>
 8017fce:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d002      	beq.n	8017fdc <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	617b      	str	r3, [r7, #20]
 8017fda:	e001      	b.n	8017fe0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8017fdc:	4b04      	ldr	r3, [pc, #16]	@ (8017ff0 <BleGetBdAddress+0x84>)
 8017fde:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8017fe0:	697b      	ldr	r3, [r7, #20]
}
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	3718      	adds	r7, #24
 8017fe6:	46bd      	mov	sp, r7
 8017fe8:	bd80      	pop	{r7, pc}
 8017fea:	bf00      	nop
 8017fec:	200013f0 	.word	0x200013f0
 8017ff0:	08023100 	.word	0x08023100

08017ff4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b082      	sub	sp, #8
 8017ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8017ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8018024 <Adv_Cancel+0x30>)
 8017ffc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8018000:	2b05      	cmp	r3, #5
 8018002:	d00a      	beq.n	801801a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8018004:	2392      	movs	r3, #146	@ 0x92
 8018006:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8018008:	f7fc ff08 	bl	8014e1c <aci_gap_set_non_discoverable>
 801800c:	4603      	mov	r3, r0
 801800e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8018010:	4b04      	ldr	r3, [pc, #16]	@ (8018024 <Adv_Cancel+0x30>)
 8018012:	2200      	movs	r2, #0
 8018014:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8018018:	bf00      	nop
 801801a:	bf00      	nop
}
 801801c:	3708      	adds	r7, #8
 801801e:	46bd      	mov	sp, r7
 8018020:	bd80      	pop	{r7, pc}
 8018022:	bf00      	nop
 8018024:	200013f8 	.word	0x200013f8

08018028 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8018028:	b580      	push	{r7, lr}
 801802a:	b082      	sub	sp, #8
 801802c:	af00      	add	r7, sp, #0
 801802e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8018030:	2100      	movs	r1, #0
 8018032:	2002      	movs	r0, #2
 8018034:	f001 fa76 	bl	8019524 <UTIL_SEQ_SetTask>

  return;
 8018038:	bf00      	nop
}
 801803a:	3708      	adds	r7, #8
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}

08018040 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8018040:	b580      	push	{r7, lr}
 8018042:	b082      	sub	sp, #8
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8018048:	2001      	movs	r0, #1
 801804a:	f001 fad7 	bl	80195fc <UTIL_SEQ_SetEvt>

  return;
 801804e:	bf00      	nop
}
 8018050:	3708      	adds	r7, #8
 8018052:	46bd      	mov	sp, r7
 8018054:	bd80      	pop	{r7, pc}

08018056 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8018056:	b580      	push	{r7, lr}
 8018058:	b082      	sub	sp, #8
 801805a:	af00      	add	r7, sp, #0
 801805c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 801805e:	2001      	movs	r0, #1
 8018060:	f001 faec 	bl	801963c <UTIL_SEQ_WaitEvt>

  return;
 8018064:	bf00      	nop
}
 8018066:	3708      	adds	r7, #8
 8018068:	46bd      	mov	sp, r7
 801806a:	bd80      	pop	{r7, pc}

0801806c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 801806c:	b580      	push	{r7, lr}
 801806e:	b084      	sub	sp, #16
 8018070:	af00      	add	r7, sp, #0
 8018072:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	685b      	ldr	r3, [r3, #4]
 801807c:	3308      	adds	r3, #8
 801807e:	4618      	mov	r0, r3
 8018080:	f7fe f8de 	bl	8016240 <SVCCTL_UserEvtRx>
 8018084:	4603      	mov	r3, r0
 8018086:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8018088:	7afb      	ldrb	r3, [r7, #11]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d003      	beq.n	8018096 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	2201      	movs	r2, #1
 8018092:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8018094:	e003      	b.n	801809e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	2200      	movs	r2, #0
 801809a:	701a      	strb	r2, [r3, #0]
  return;
 801809c:	bf00      	nop
}
 801809e:	3710      	adds	r7, #16
 80180a0:	46bd      	mov	sp, r7
 80180a2:	bd80      	pop	{r7, pc}

080180a4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80180a4:	b580      	push	{r7, lr}
 80180a6:	b084      	sub	sp, #16
 80180a8:	af00      	add	r7, sp, #0
 80180aa:	4603      	mov	r3, r0
 80180ac:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80180ae:	79fb      	ldrb	r3, [r7, #7]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d002      	beq.n	80180ba <BLE_StatusNot+0x16>
 80180b4:	2b01      	cmp	r3, #1
 80180b6:	d006      	beq.n	80180c6 <BLE_StatusNot+0x22>
      break;

    default:
      /* USER CODE BEGIN Status */
      /* USER CODE END Status */
      break;
 80180b8:	e00b      	b.n	80180d2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80180ba:	2307      	movs	r3, #7
 80180bc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80180be:	68f8      	ldr	r0, [r7, #12]
 80180c0:	f001 fa5c 	bl	801957c <UTIL_SEQ_PauseTask>
      break;
 80180c4:	e005      	b.n	80180d2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80180c6:	2307      	movs	r3, #7
 80180c8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80180ca:	68f8      	ldr	r0, [r7, #12]
 80180cc:	f001 fa76 	bl	80195bc <UTIL_SEQ_ResumeTask>
      break;
 80180d0:	bf00      	nop
  }

  return;
 80180d2:	bf00      	nop
}
 80180d4:	3710      	adds	r7, #16
 80180d6:	46bd      	mov	sp, r7
 80180d8:	bd80      	pop	{r7, pc}

080180da <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80180da:	b480      	push	{r7}
 80180dc:	b083      	sub	sp, #12
 80180de:	af00      	add	r7, sp, #0
 80180e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	781b      	ldrb	r3, [r3, #0]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d002      	beq.n	80180f0 <Custom_STM_App_Notification+0x16>
 80180ea:	2b01      	cmp	r3, #1
 80180ec:	d002      	beq.n	80180f4 <Custom_STM_App_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80180ee:	e002      	b.n	80180f6 <Custom_STM_App_Notification+0x1c>
      break;
 80180f0:	bf00      	nop
 80180f2:	e000      	b.n	80180f6 <Custom_STM_App_Notification+0x1c>
      break;
 80180f4:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80180f6:	bf00      	nop
}
 80180f8:	370c      	adds	r7, #12
 80180fa:	46bd      	mov	sp, r7
 80180fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018100:	4770      	bx	lr

08018102 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8018102:	b480      	push	{r7}
 8018104:	b083      	sub	sp, #12
 8018106:	af00      	add	r7, sp, #0
 8018108:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	781b      	ldrb	r3, [r3, #0]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d002      	beq.n	8018118 <Custom_APP_Notification+0x16>
 8018112:	2b01      	cmp	r3, #1
 8018114:	d002      	beq.n	801811c <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8018116:	e002      	b.n	801811e <Custom_APP_Notification+0x1c>
      break;
 8018118:	bf00      	nop
 801811a:	e000      	b.n	801811e <Custom_APP_Notification+0x1c>
      break;
 801811c:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 801811e:	bf00      	nop
}
 8018120:	370c      	adds	r7, #12
 8018122:	46bd      	mov	sp, r7
 8018124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018128:	4770      	bx	lr

0801812a <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 801812a:	b480      	push	{r7}
 801812c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 801812e:	bf00      	nop
}
 8018130:	46bd      	mov	sp, r7
 8018132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018136:	4770      	bx	lr

08018138 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8018138:	b580      	push	{r7, lr}
 801813a:	b08c      	sub	sp, #48	@ 0x30
 801813c:	af00      	add	r7, sp, #0
 801813e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8018140:	2300      	movs	r3, #0
 8018142:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	3301      	adds	r3, #1
 801814a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 801814c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801814e:	781b      	ldrb	r3, [r3, #0]
 8018150:	2bff      	cmp	r3, #255	@ 0xff
 8018152:	d16d      	bne.n	8018230 <Custom_STM_Event_Handler+0xf8>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8018154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018156:	3302      	adds	r3, #2
 8018158:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 801815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801815c:	881b      	ldrh	r3, [r3, #0]
 801815e:	b29b      	uxth	r3, r3
 8018160:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8018164:	2b1a      	cmp	r3, #26
 8018166:	d85f      	bhi.n	8018228 <Custom_STM_Event_Handler+0xf0>
 8018168:	a201      	add	r2, pc, #4	@ (adr r2, 8018170 <Custom_STM_Event_Handler+0x38>)
 801816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801816e:	bf00      	nop
 8018170:	080181dd 	.word	0x080181dd
 8018174:	08018229 	.word	0x08018229
 8018178:	08018229 	.word	0x08018229
 801817c:	08018229 	.word	0x08018229
 8018180:	08018229 	.word	0x08018229
 8018184:	08018229 	.word	0x08018229
 8018188:	08018229 	.word	0x08018229
 801818c:	08018229 	.word	0x08018229
 8018190:	08018229 	.word	0x08018229
 8018194:	08018229 	.word	0x08018229
 8018198:	08018229 	.word	0x08018229
 801819c:	08018229 	.word	0x08018229
 80181a0:	08018229 	.word	0x08018229
 80181a4:	08018229 	.word	0x08018229
 80181a8:	08018229 	.word	0x08018229
 80181ac:	08018229 	.word	0x08018229
 80181b0:	08018229 	.word	0x08018229
 80181b4:	08018229 	.word	0x08018229
 80181b8:	08018229 	.word	0x08018229
 80181bc:	08018229 	.word	0x08018229
 80181c0:	08018229 	.word	0x08018229
 80181c4:	08018229 	.word	0x08018229
 80181c8:	08018229 	.word	0x08018229
 80181cc:	08018229 	.word	0x08018229
 80181d0:	08018229 	.word	0x08018229
 80181d4:	08018229 	.word	0x08018229
 80181d8:	0801820b 	.word	0x0801820b
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80181dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181de:	3302      	adds	r3, #2
 80181e0:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80181e2:	69fb      	ldr	r3, [r7, #28]
 80181e4:	885b      	ldrh	r3, [r3, #2]
 80181e6:	b29b      	uxth	r3, r3
 80181e8:	461a      	mov	r2, r3
 80181ea:	4b15      	ldr	r3, [pc, #84]	@ (8018240 <Custom_STM_Event_Handler+0x108>)
 80181ec:	885b      	ldrh	r3, [r3, #2]
 80181ee:	3301      	adds	r3, #1
 80181f0:	429a      	cmp	r2, r3
 80181f2:	d11b      	bne.n	801822c <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80181f4:	2301      	movs	r3, #1
 80181f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            memcpy((char *) blereceivebuf,(char *)attribute_modified->Attr_Data,64);
 80181fa:	69fb      	ldr	r3, [r7, #28]
 80181fc:	3308      	adds	r3, #8
 80181fe:	2240      	movs	r2, #64	@ 0x40
 8018200:	4619      	mov	r1, r3
 8018202:	4810      	ldr	r0, [pc, #64]	@ (8018244 <Custom_STM_Event_Handler+0x10c>)
 8018204:	f003 fb21 	bl	801b84a <memcpy>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8018208:	e010      	b.n	801822c <Custom_STM_Event_Handler+0xf4>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 801820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801820c:	3302      	adds	r3, #2
 801820e:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8018210:	2301      	movs	r3, #1
 8018212:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8018214:	6a3b      	ldr	r3, [r7, #32]
 8018216:	881b      	ldrh	r3, [r3, #0]
 8018218:	b29b      	uxth	r3, r3
 801821a:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 801821c:	f107 0308 	add.w	r3, r7, #8
 8018220:	4618      	mov	r0, r3
 8018222:	f7ff ff5a 	bl	80180da <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8018226:	e002      	b.n	801822e <Custom_STM_Event_Handler+0xf6>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8018228:	bf00      	nop
 801822a:	e002      	b.n	8018232 <Custom_STM_Event_Handler+0xfa>
          break;
 801822c:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801822e:	e000      	b.n	8018232 <Custom_STM_Event_Handler+0xfa>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8018230:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8018232:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8018236:	4618      	mov	r0, r3
 8018238:	3730      	adds	r7, #48	@ 0x30
 801823a:	46bd      	mov	sp, r7
 801823c:	bd80      	pop	{r7, pc}
 801823e:	bf00      	nop
 8018240:	20001480 	.word	0x20001480
 8018244:	20000ac0 	.word	0x20000ac0

08018248 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b08c      	sub	sp, #48	@ 0x30
 801824c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801824e:	2392      	movs	r3, #146	@ 0x92
 8018250:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8018252:	4834      	ldr	r0, [pc, #208]	@ (8018324 <SVCCTL_InitCustomSvc+0xdc>)
 8018254:	f7fd ffda 	bl	801620c <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 8018258:	2303      	movs	r3, #3
 801825a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BPSERVICE_UUID(uuid.Char_UUID_128);
 801825c:	238f      	movs	r3, #143	@ 0x8f
 801825e:	713b      	strb	r3, [r7, #4]
 8018260:	23e5      	movs	r3, #229	@ 0xe5
 8018262:	717b      	strb	r3, [r7, #5]
 8018264:	23b3      	movs	r3, #179	@ 0xb3
 8018266:	71bb      	strb	r3, [r7, #6]
 8018268:	23d5      	movs	r3, #213	@ 0xd5
 801826a:	71fb      	strb	r3, [r7, #7]
 801826c:	232e      	movs	r3, #46	@ 0x2e
 801826e:	723b      	strb	r3, [r7, #8]
 8018270:	237f      	movs	r3, #127	@ 0x7f
 8018272:	727b      	strb	r3, [r7, #9]
 8018274:	234a      	movs	r3, #74	@ 0x4a
 8018276:	72bb      	strb	r3, [r7, #10]
 8018278:	2398      	movs	r3, #152	@ 0x98
 801827a:	72fb      	strb	r3, [r7, #11]
 801827c:	232a      	movs	r3, #42	@ 0x2a
 801827e:	733b      	strb	r3, [r7, #12]
 8018280:	2348      	movs	r3, #72	@ 0x48
 8018282:	737b      	strb	r3, [r7, #13]
 8018284:	237a      	movs	r3, #122	@ 0x7a
 8018286:	73bb      	strb	r3, [r7, #14]
 8018288:	23cc      	movs	r3, #204	@ 0xcc
 801828a:	73fb      	strb	r3, [r7, #15]
 801828c:	2300      	movs	r3, #0
 801828e:	743b      	strb	r3, [r7, #16]
 8018290:	2300      	movs	r3, #0
 8018292:	747b      	strb	r3, [r7, #17]
 8018294:	2300      	movs	r3, #0
 8018296:	74bb      	strb	r3, [r7, #18]
 8018298:	2300      	movs	r3, #0
 801829a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 801829c:	7dbb      	ldrb	r3, [r7, #22]
 801829e:	1d39      	adds	r1, r7, #4
 80182a0:	4a21      	ldr	r2, [pc, #132]	@ (8018328 <SVCCTL_InitCustomSvc+0xe0>)
 80182a2:	9200      	str	r2, [sp, #0]
 80182a4:	2201      	movs	r2, #1
 80182a6:	2002      	movs	r0, #2
 80182a8:	f7fd fa24 	bl	80156f4 <aci_gatt_add_service>
 80182ac:	4603      	mov	r3, r0
 80182ae:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  charWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 80182b0:	2319      	movs	r3, #25
 80182b2:	713b      	strb	r3, [r7, #4]
 80182b4:	23ed      	movs	r3, #237	@ 0xed
 80182b6:	717b      	strb	r3, [r7, #5]
 80182b8:	2382      	movs	r3, #130	@ 0x82
 80182ba:	71bb      	strb	r3, [r7, #6]
 80182bc:	23ae      	movs	r3, #174	@ 0xae
 80182be:	71fb      	strb	r3, [r7, #7]
 80182c0:	23ed      	movs	r3, #237	@ 0xed
 80182c2:	723b      	strb	r3, [r7, #8]
 80182c4:	2321      	movs	r3, #33	@ 0x21
 80182c6:	727b      	strb	r3, [r7, #9]
 80182c8:	234c      	movs	r3, #76	@ 0x4c
 80182ca:	72bb      	strb	r3, [r7, #10]
 80182cc:	239d      	movs	r3, #157	@ 0x9d
 80182ce:	72fb      	strb	r3, [r7, #11]
 80182d0:	2341      	movs	r3, #65	@ 0x41
 80182d2:	733b      	strb	r3, [r7, #12]
 80182d4:	2345      	movs	r3, #69	@ 0x45
 80182d6:	737b      	strb	r3, [r7, #13]
 80182d8:	2322      	movs	r3, #34	@ 0x22
 80182da:	73bb      	strb	r3, [r7, #14]
 80182dc:	238e      	movs	r3, #142	@ 0x8e
 80182de:	73fb      	strb	r3, [r7, #15]
 80182e0:	2300      	movs	r3, #0
 80182e2:	743b      	strb	r3, [r7, #16]
 80182e4:	2300      	movs	r3, #0
 80182e6:	747b      	strb	r3, [r7, #17]
 80182e8:	2300      	movs	r3, #0
 80182ea:	74bb      	strb	r3, [r7, #18]
 80182ec:	2300      	movs	r3, #0
 80182ee:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 80182f0:	4b0d      	ldr	r3, [pc, #52]	@ (8018328 <SVCCTL_InitCustomSvc+0xe0>)
 80182f2:	8818      	ldrh	r0, [r3, #0]
 80182f4:	4b0d      	ldr	r3, [pc, #52]	@ (801832c <SVCCTL_InitCustomSvc+0xe4>)
 80182f6:	881b      	ldrh	r3, [r3, #0]
 80182f8:	1d3a      	adds	r2, r7, #4
 80182fa:	490d      	ldr	r1, [pc, #52]	@ (8018330 <SVCCTL_InitCustomSvc+0xe8>)
 80182fc:	9105      	str	r1, [sp, #20]
 80182fe:	2100      	movs	r1, #0
 8018300:	9104      	str	r1, [sp, #16]
 8018302:	2110      	movs	r1, #16
 8018304:	9103      	str	r1, [sp, #12]
 8018306:	2101      	movs	r1, #1
 8018308:	9102      	str	r1, [sp, #8]
 801830a:	2100      	movs	r1, #0
 801830c:	9101      	str	r1, [sp, #4]
 801830e:	2108      	movs	r1, #8
 8018310:	9100      	str	r1, [sp, #0]
 8018312:	2102      	movs	r1, #2
 8018314:	f7fd fac4 	bl	80158a0 <aci_gatt_add_char>
 8018318:	4603      	mov	r3, r0
 801831a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 801831c:	bf00      	nop
}
 801831e:	3718      	adds	r7, #24
 8018320:	46bd      	mov	sp, r7
 8018322:	bd80      	pop	{r7, pc}
 8018324:	08018139 	.word	0x08018139
 8018328:	20001480 	.word	0x20001480
 801832c:	200000da 	.word	0x200000da
 8018330:	20001482 	.word	0x20001482

08018334 <LL_PWR_EnableBootC2>:
{
 8018334:	b480      	push	{r7}
 8018336:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8018338:	4b05      	ldr	r3, [pc, #20]	@ (8018350 <LL_PWR_EnableBootC2+0x1c>)
 801833a:	68db      	ldr	r3, [r3, #12]
 801833c:	4a04      	ldr	r2, [pc, #16]	@ (8018350 <LL_PWR_EnableBootC2+0x1c>)
 801833e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8018342:	60d3      	str	r3, [r2, #12]
}
 8018344:	bf00      	nop
 8018346:	46bd      	mov	sp, r7
 8018348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801834c:	4770      	bx	lr
 801834e:	bf00      	nop
 8018350:	58000400 	.word	0x58000400

08018354 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8018354:	b480      	push	{r7}
 8018356:	b083      	sub	sp, #12
 8018358:	af00      	add	r7, sp, #0
 801835a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 801835c:	4b06      	ldr	r3, [pc, #24]	@ (8018378 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801835e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8018362:	4905      	ldr	r1, [pc, #20]	@ (8018378 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	4313      	orrs	r3, r2
 8018368:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 801836c:	bf00      	nop
 801836e:	370c      	adds	r7, #12
 8018370:	46bd      	mov	sp, r7
 8018372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018376:	4770      	bx	lr
 8018378:	58000800 	.word	0x58000800

0801837c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 801837c:	b480      	push	{r7}
 801837e:	b083      	sub	sp, #12
 8018380:	af00      	add	r7, sp, #0
 8018382:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8018384:	4b05      	ldr	r3, [pc, #20]	@ (801839c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8018386:	6a1a      	ldr	r2, [r3, #32]
 8018388:	4904      	ldr	r1, [pc, #16]	@ (801839c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	4313      	orrs	r3, r2
 801838e:	620b      	str	r3, [r1, #32]
}
 8018390:	bf00      	nop
 8018392:	370c      	adds	r7, #12
 8018394:	46bd      	mov	sp, r7
 8018396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801839a:	4770      	bx	lr
 801839c:	58000800 	.word	0x58000800

080183a0 <LL_AHB3_GRP1_EnableClock>:
{
 80183a0:	b480      	push	{r7}
 80183a2:	b085      	sub	sp, #20
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80183a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80183ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80183ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	4313      	orrs	r3, r2
 80183b6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80183b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80183bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	4013      	ands	r3, r2
 80183c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80183c4:	68fb      	ldr	r3, [r7, #12]
}
 80183c6:	bf00      	nop
 80183c8:	3714      	adds	r7, #20
 80183ca:	46bd      	mov	sp, r7
 80183cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d0:	4770      	bx	lr

080183d2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80183d2:	b480      	push	{r7}
 80183d4:	b085      	sub	sp, #20
 80183d6:	af00      	add	r7, sp, #0
 80183d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80183da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80183de:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80183e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	4313      	orrs	r3, r2
 80183ea:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80183ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80183f2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	4013      	ands	r3, r2
 80183fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80183fc:	68fb      	ldr	r3, [r7, #12]
}
 80183fe:	bf00      	nop
 8018400:	3714      	adds	r7, #20
 8018402:	46bd      	mov	sp, r7
 8018404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018408:	4770      	bx	lr

0801840a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 801840a:	b480      	push	{r7}
 801840c:	b083      	sub	sp, #12
 801840e:	af00      	add	r7, sp, #0
 8018410:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	601a      	str	r2, [r3, #0]
}
 801841e:	bf00      	nop
 8018420:	370c      	adds	r7, #12
 8018422:	46bd      	mov	sp, r7
 8018424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018428:	4770      	bx	lr

0801842a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 801842a:	b480      	push	{r7}
 801842c:	b083      	sub	sp, #12
 801842e:	af00      	add	r7, sp, #0
 8018430:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	f043 0201 	orr.w	r2, r3, #1
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	601a      	str	r2, [r3, #0]
}
 801843e:	bf00      	nop
 8018440:	370c      	adds	r7, #12
 8018442:	46bd      	mov	sp, r7
 8018444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018448:	4770      	bx	lr

0801844a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801844a:	b480      	push	{r7}
 801844c:	b083      	sub	sp, #12
 801844e:	af00      	add	r7, sp, #0
 8018450:	6078      	str	r0, [r7, #4]
 8018452:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	685a      	ldr	r2, [r3, #4]
 8018458:	683b      	ldr	r3, [r7, #0]
 801845a:	041b      	lsls	r3, r3, #16
 801845c:	43db      	mvns	r3, r3
 801845e:	401a      	ands	r2, r3
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	605a      	str	r2, [r3, #4]
}
 8018464:	bf00      	nop
 8018466:	370c      	adds	r7, #12
 8018468:	46bd      	mov	sp, r7
 801846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801846e:	4770      	bx	lr

08018470 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018470:	b480      	push	{r7}
 8018472:	b083      	sub	sp, #12
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
 8018478:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	685a      	ldr	r2, [r3, #4]
 801847e:	683b      	ldr	r3, [r7, #0]
 8018480:	041b      	lsls	r3, r3, #16
 8018482:	431a      	orrs	r2, r3
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	605a      	str	r2, [r3, #4]
}
 8018488:	bf00      	nop
 801848a:	370c      	adds	r7, #12
 801848c:	46bd      	mov	sp, r7
 801848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018492:	4770      	bx	lr

08018494 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018494:	b480      	push	{r7}
 8018496:	b083      	sub	sp, #12
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]
 801849c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	685a      	ldr	r2, [r3, #4]
 80184a2:	683b      	ldr	r3, [r7, #0]
 80184a4:	43db      	mvns	r3, r3
 80184a6:	401a      	ands	r2, r3
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	605a      	str	r2, [r3, #4]
}
 80184ac:	bf00      	nop
 80184ae:	370c      	adds	r7, #12
 80184b0:	46bd      	mov	sp, r7
 80184b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b6:	4770      	bx	lr

080184b8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80184b8:	b480      	push	{r7}
 80184ba:	b083      	sub	sp, #12
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]
 80184c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	683a      	ldr	r2, [r7, #0]
 80184c6:	609a      	str	r2, [r3, #8]
}
 80184c8:	bf00      	nop
 80184ca:	370c      	adds	r7, #12
 80184cc:	46bd      	mov	sp, r7
 80184ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184d2:	4770      	bx	lr

080184d4 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80184d4:	b480      	push	{r7}
 80184d6:	b083      	sub	sp, #12
 80184d8:	af00      	add	r7, sp, #0
 80184da:	6078      	str	r0, [r7, #4]
 80184dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80184de:	683b      	ldr	r3, [r7, #0]
 80184e0:	041a      	lsls	r2, r3, #16
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	609a      	str	r2, [r3, #8]
}
 80184e6:	bf00      	nop
 80184e8:	370c      	adds	r7, #12
 80184ea:	46bd      	mov	sp, r7
 80184ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f0:	4770      	bx	lr

080184f2 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80184f2:	b480      	push	{r7}
 80184f4:	b083      	sub	sp, #12
 80184f6:	af00      	add	r7, sp, #0
 80184f8:	6078      	str	r0, [r7, #4]
 80184fa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	68da      	ldr	r2, [r3, #12]
 8018500:	683b      	ldr	r3, [r7, #0]
 8018502:	4013      	ands	r3, r2
 8018504:	683a      	ldr	r2, [r7, #0]
 8018506:	429a      	cmp	r2, r3
 8018508:	d101      	bne.n	801850e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801850a:	2301      	movs	r3, #1
 801850c:	e000      	b.n	8018510 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801850e:	2300      	movs	r3, #0
}
 8018510:	4618      	mov	r0, r3
 8018512:	370c      	adds	r7, #12
 8018514:	46bd      	mov	sp, r7
 8018516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801851a:	4770      	bx	lr

0801851c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801851c:	b480      	push	{r7}
 801851e:	b083      	sub	sp, #12
 8018520:	af00      	add	r7, sp, #0
 8018522:	6078      	str	r0, [r7, #4]
 8018524:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	69da      	ldr	r2, [r3, #28]
 801852a:	683b      	ldr	r3, [r7, #0]
 801852c:	4013      	ands	r3, r2
 801852e:	683a      	ldr	r2, [r7, #0]
 8018530:	429a      	cmp	r2, r3
 8018532:	d101      	bne.n	8018538 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8018534:	2301      	movs	r3, #1
 8018536:	e000      	b.n	801853a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8018538:	2300      	movs	r3, #0
}
 801853a:	4618      	mov	r0, r3
 801853c:	370c      	adds	r7, #12
 801853e:	46bd      	mov	sp, r7
 8018540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018544:	4770      	bx	lr
	...

08018548 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8018548:	b580      	push	{r7, lr}
 801854a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 801854c:	2102      	movs	r1, #2
 801854e:	4818      	ldr	r0, [pc, #96]	@ (80185b0 <HW_IPCC_Rx_Handler+0x68>)
 8018550:	f7ff ffe4 	bl	801851c <LL_C2_IPCC_IsActiveFlag_CHx>
 8018554:	4603      	mov	r3, r0
 8018556:	2b00      	cmp	r3, #0
 8018558:	d008      	beq.n	801856c <HW_IPCC_Rx_Handler+0x24>
 801855a:	4b15      	ldr	r3, [pc, #84]	@ (80185b0 <HW_IPCC_Rx_Handler+0x68>)
 801855c:	685b      	ldr	r3, [r3, #4]
 801855e:	f003 0302 	and.w	r3, r3, #2
 8018562:	2b00      	cmp	r3, #0
 8018564:	d102      	bne.n	801856c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8018566:	f000 f8d5 	bl	8018714 <HW_IPCC_SYS_EvtHandler>
 801856a:	e01e      	b.n	80185aa <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 801856c:	2101      	movs	r1, #1
 801856e:	4810      	ldr	r0, [pc, #64]	@ (80185b0 <HW_IPCC_Rx_Handler+0x68>)
 8018570:	f7ff ffd4 	bl	801851c <LL_C2_IPCC_IsActiveFlag_CHx>
 8018574:	4603      	mov	r3, r0
 8018576:	2b00      	cmp	r3, #0
 8018578:	d008      	beq.n	801858c <HW_IPCC_Rx_Handler+0x44>
 801857a:	4b0d      	ldr	r3, [pc, #52]	@ (80185b0 <HW_IPCC_Rx_Handler+0x68>)
 801857c:	685b      	ldr	r3, [r3, #4]
 801857e:	f003 0301 	and.w	r3, r3, #1
 8018582:	2b00      	cmp	r3, #0
 8018584:	d102      	bne.n	801858c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8018586:	f000 f889 	bl	801869c <HW_IPCC_BLE_EvtHandler>
 801858a:	e00e      	b.n	80185aa <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 801858c:	2108      	movs	r1, #8
 801858e:	4808      	ldr	r0, [pc, #32]	@ (80185b0 <HW_IPCC_Rx_Handler+0x68>)
 8018590:	f7ff ffc4 	bl	801851c <LL_C2_IPCC_IsActiveFlag_CHx>
 8018594:	4603      	mov	r3, r0
 8018596:	2b00      	cmp	r3, #0
 8018598:	d008      	beq.n	80185ac <HW_IPCC_Rx_Handler+0x64>
 801859a:	4b05      	ldr	r3, [pc, #20]	@ (80185b0 <HW_IPCC_Rx_Handler+0x68>)
 801859c:	685b      	ldr	r3, [r3, #4]
 801859e:	f003 0308 	and.w	r3, r3, #8
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d102      	bne.n	80185ac <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80185a6:	f000 f901 	bl	80187ac <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80185aa:	bf00      	nop
 80185ac:	bf00      	nop
}
 80185ae:	bd80      	pop	{r7, pc}
 80185b0:	58000c00 	.word	0x58000c00

080185b4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80185b8:	2102      	movs	r1, #2
 80185ba:	4818      	ldr	r0, [pc, #96]	@ (801861c <HW_IPCC_Tx_Handler+0x68>)
 80185bc:	f7ff ff99 	bl	80184f2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80185c0:	4603      	mov	r3, r0
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d108      	bne.n	80185d8 <HW_IPCC_Tx_Handler+0x24>
 80185c6:	4b15      	ldr	r3, [pc, #84]	@ (801861c <HW_IPCC_Tx_Handler+0x68>)
 80185c8:	685b      	ldr	r3, [r3, #4]
 80185ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d102      	bne.n	80185d8 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80185d2:	f000 f893 	bl	80186fc <HW_IPCC_SYS_CmdEvtHandler>
 80185d6:	e01e      	b.n	8018616 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80185d8:	2108      	movs	r1, #8
 80185da:	4810      	ldr	r0, [pc, #64]	@ (801861c <HW_IPCC_Tx_Handler+0x68>)
 80185dc:	f7ff ff89 	bl	80184f2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80185e0:	4603      	mov	r3, r0
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d108      	bne.n	80185f8 <HW_IPCC_Tx_Handler+0x44>
 80185e6:	4b0d      	ldr	r3, [pc, #52]	@ (801861c <HW_IPCC_Tx_Handler+0x68>)
 80185e8:	685b      	ldr	r3, [r3, #4]
 80185ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d102      	bne.n	80185f8 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80185f2:	f000 f8bd 	bl	8018770 <HW_IPCC_MM_FreeBufHandler>
 80185f6:	e00e      	b.n	8018616 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80185f8:	2120      	movs	r1, #32
 80185fa:	4808      	ldr	r0, [pc, #32]	@ (801861c <HW_IPCC_Tx_Handler+0x68>)
 80185fc:	f7ff ff79 	bl	80184f2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018600:	4603      	mov	r3, r0
 8018602:	2b00      	cmp	r3, #0
 8018604:	d108      	bne.n	8018618 <HW_IPCC_Tx_Handler+0x64>
 8018606:	4b05      	ldr	r3, [pc, #20]	@ (801861c <HW_IPCC_Tx_Handler+0x68>)
 8018608:	685b      	ldr	r3, [r3, #4]
 801860a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801860e:	2b00      	cmp	r3, #0
 8018610:	d102      	bne.n	8018618 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8018612:	f000 f84f 	bl	80186b4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8018616:	bf00      	nop
 8018618:	bf00      	nop
}
 801861a:	bd80      	pop	{r7, pc}
 801861c:	58000c00 	.word	0x58000c00

08018620 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8018620:	b580      	push	{r7, lr}
 8018622:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8018624:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8018628:	f7ff fed3 	bl	80183d2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 801862c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018630:	f7ff fea4 	bl	801837c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8018634:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018638:	f7ff fe8c 	bl	8018354 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 801863c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801863e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8018640:	f7ff fe78 	bl	8018334 <LL_PWR_EnableBootC2>

  return;
 8018644:	bf00      	nop
}
 8018646:	bd80      	pop	{r7, pc}

08018648 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8018648:	b580      	push	{r7, lr}
 801864a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 801864c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8018650:	f7ff fea6 	bl	80183a0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8018654:	4806      	ldr	r0, [pc, #24]	@ (8018670 <HW_IPCC_Init+0x28>)
 8018656:	f7ff fee8 	bl	801842a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801865a:	4805      	ldr	r0, [pc, #20]	@ (8018670 <HW_IPCC_Init+0x28>)
 801865c:	f7ff fed5 	bl	801840a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8018660:	202c      	movs	r0, #44	@ 0x2c
 8018662:	f7f0 f9d8 	bl	8008a16 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8018666:	202d      	movs	r0, #45	@ 0x2d
 8018668:	f7f0 f9d5 	bl	8008a16 <HAL_NVIC_EnableIRQ>

  return;
 801866c:	bf00      	nop
}
 801866e:	bd80      	pop	{r7, pc}
 8018670:	58000c00 	.word	0x58000c00

08018674 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8018674:	b580      	push	{r7, lr}
 8018676:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8018678:	2101      	movs	r1, #1
 801867a:	4802      	ldr	r0, [pc, #8]	@ (8018684 <HW_IPCC_BLE_Init+0x10>)
 801867c:	f7ff ff0a 	bl	8018494 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8018680:	bf00      	nop
}
 8018682:	bd80      	pop	{r7, pc}
 8018684:	58000c00 	.word	0x58000c00

08018688 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8018688:	b580      	push	{r7, lr}
 801868a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 801868c:	2101      	movs	r1, #1
 801868e:	4802      	ldr	r0, [pc, #8]	@ (8018698 <HW_IPCC_BLE_SendCmd+0x10>)
 8018690:	f7ff ff20 	bl	80184d4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8018694:	bf00      	nop
}
 8018696:	bd80      	pop	{r7, pc}
 8018698:	58000c00 	.word	0x58000c00

0801869c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 801869c:	b580      	push	{r7, lr}
 801869e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80186a0:	f7fe fa78 	bl	8016b94 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80186a4:	2101      	movs	r1, #1
 80186a6:	4802      	ldr	r0, [pc, #8]	@ (80186b0 <HW_IPCC_BLE_EvtHandler+0x14>)
 80186a8:	f7ff ff06 	bl	80184b8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80186ac:	bf00      	nop
}
 80186ae:	bd80      	pop	{r7, pc}
 80186b0:	58000c00 	.word	0x58000c00

080186b4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80186b8:	2120      	movs	r1, #32
 80186ba:	4803      	ldr	r0, [pc, #12]	@ (80186c8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80186bc:	f7ff fed8 	bl	8018470 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80186c0:	f7fe fa98 	bl	8016bf4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80186c4:	bf00      	nop
}
 80186c6:	bd80      	pop	{r7, pc}
 80186c8:	58000c00 	.word	0x58000c00

080186cc <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80186d0:	2102      	movs	r1, #2
 80186d2:	4802      	ldr	r0, [pc, #8]	@ (80186dc <HW_IPCC_SYS_Init+0x10>)
 80186d4:	f7ff fede 	bl	8018494 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80186d8:	bf00      	nop
}
 80186da:	bd80      	pop	{r7, pc}
 80186dc:	58000c00 	.word	0x58000c00

080186e0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80186e4:	2102      	movs	r1, #2
 80186e6:	4804      	ldr	r0, [pc, #16]	@ (80186f8 <HW_IPCC_SYS_SendCmd+0x18>)
 80186e8:	f7ff fef4 	bl	80184d4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80186ec:	2102      	movs	r1, #2
 80186ee:	4802      	ldr	r0, [pc, #8]	@ (80186f8 <HW_IPCC_SYS_SendCmd+0x18>)
 80186f0:	f7ff feab 	bl	801844a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80186f4:	bf00      	nop
}
 80186f6:	bd80      	pop	{r7, pc}
 80186f8:	58000c00 	.word	0x58000c00

080186fc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8018700:	2102      	movs	r1, #2
 8018702:	4803      	ldr	r0, [pc, #12]	@ (8018710 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8018704:	f7ff feb4 	bl	8018470 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8018708:	f7fe fac4 	bl	8016c94 <HW_IPCC_SYS_CmdEvtNot>

  return;
 801870c:	bf00      	nop
}
 801870e:	bd80      	pop	{r7, pc}
 8018710:	58000c00 	.word	0x58000c00

08018714 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8018714:	b580      	push	{r7, lr}
 8018716:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8018718:	f7fe fad2 	bl	8016cc0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801871c:	2102      	movs	r1, #2
 801871e:	4802      	ldr	r0, [pc, #8]	@ (8018728 <HW_IPCC_SYS_EvtHandler+0x14>)
 8018720:	f7ff feca 	bl	80184b8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8018724:	bf00      	nop
}
 8018726:	bd80      	pop	{r7, pc}
 8018728:	58000c00 	.word	0x58000c00

0801872c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 801872c:	b580      	push	{r7, lr}
 801872e:	b082      	sub	sp, #8
 8018730:	af00      	add	r7, sp, #0
 8018732:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8018734:	2108      	movs	r1, #8
 8018736:	480c      	ldr	r0, [pc, #48]	@ (8018768 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018738:	f7ff fedb 	bl	80184f2 <LL_C1_IPCC_IsActiveFlag_CHx>
 801873c:	4603      	mov	r3, r0
 801873e:	2b00      	cmp	r3, #0
 8018740:	d007      	beq.n	8018752 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8018742:	4a0a      	ldr	r2, [pc, #40]	@ (801876c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018748:	2108      	movs	r1, #8
 801874a:	4807      	ldr	r0, [pc, #28]	@ (8018768 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801874c:	f7ff fe7d 	bl	801844a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8018750:	e006      	b.n	8018760 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018756:	2108      	movs	r1, #8
 8018758:	4803      	ldr	r0, [pc, #12]	@ (8018768 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801875a:	f7ff febb 	bl	80184d4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 801875e:	bf00      	nop
}
 8018760:	3708      	adds	r7, #8
 8018762:	46bd      	mov	sp, r7
 8018764:	bd80      	pop	{r7, pc}
 8018766:	bf00      	nop
 8018768:	58000c00 	.word	0x58000c00
 801876c:	20001484 	.word	0x20001484

08018770 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8018770:	b580      	push	{r7, lr}
 8018772:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018774:	2108      	movs	r1, #8
 8018776:	4806      	ldr	r0, [pc, #24]	@ (8018790 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8018778:	f7ff fe7a 	bl	8018470 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 801877c:	4b05      	ldr	r3, [pc, #20]	@ (8018794 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018782:	2108      	movs	r1, #8
 8018784:	4802      	ldr	r0, [pc, #8]	@ (8018790 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8018786:	f7ff fea5 	bl	80184d4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 801878a:	bf00      	nop
}
 801878c:	bd80      	pop	{r7, pc}
 801878e:	bf00      	nop
 8018790:	58000c00 	.word	0x58000c00
 8018794:	20001484 	.word	0x20001484

08018798 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8018798:	b580      	push	{r7, lr}
 801879a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 801879c:	2108      	movs	r1, #8
 801879e:	4802      	ldr	r0, [pc, #8]	@ (80187a8 <HW_IPCC_TRACES_Init+0x10>)
 80187a0:	f7ff fe78 	bl	8018494 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80187a4:	bf00      	nop
}
 80187a6:	bd80      	pop	{r7, pc}
 80187a8:	58000c00 	.word	0x58000c00

080187ac <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80187b0:	f7fe fb2e 	bl	8016e10 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80187b4:	2108      	movs	r1, #8
 80187b6:	4802      	ldr	r0, [pc, #8]	@ (80187c0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80187b8:	f7ff fe7e 	bl	80184b8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80187bc:	bf00      	nop
}
 80187be:	bd80      	pop	{r7, pc}
 80187c0:	58000c00 	.word	0x58000c00

080187c4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80187c4:	b580      	push	{r7, lr}
 80187c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80187c8:	2200      	movs	r2, #0
 80187ca:	4912      	ldr	r1, [pc, #72]	@ (8018814 <MX_USB_Device_Init+0x50>)
 80187cc:	4812      	ldr	r0, [pc, #72]	@ (8018818 <MX_USB_Device_Init+0x54>)
 80187ce:	f7fb f88b 	bl	80138e8 <USBD_Init>
 80187d2:	4603      	mov	r3, r0
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d001      	beq.n	80187dc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80187d8:	f7ea fc12 	bl	8003000 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80187dc:	490f      	ldr	r1, [pc, #60]	@ (801881c <MX_USB_Device_Init+0x58>)
 80187de:	480e      	ldr	r0, [pc, #56]	@ (8018818 <MX_USB_Device_Init+0x54>)
 80187e0:	f7fb f8b2 	bl	8013948 <USBD_RegisterClass>
 80187e4:	4603      	mov	r3, r0
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d001      	beq.n	80187ee <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80187ea:	f7ea fc09 	bl	8003000 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80187ee:	490c      	ldr	r1, [pc, #48]	@ (8018820 <MX_USB_Device_Init+0x5c>)
 80187f0:	4809      	ldr	r0, [pc, #36]	@ (8018818 <MX_USB_Device_Init+0x54>)
 80187f2:	f7fa ffa9 	bl	8013748 <USBD_CDC_RegisterInterface>
 80187f6:	4603      	mov	r3, r0
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d001      	beq.n	8018800 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80187fc:	f7ea fc00 	bl	8003000 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8018800:	4805      	ldr	r0, [pc, #20]	@ (8018818 <MX_USB_Device_Init+0x54>)
 8018802:	f7fb f8d7 	bl	80139b4 <USBD_Start>
 8018806:	4603      	mov	r3, r0
 8018808:	2b00      	cmp	r3, #0
 801880a:	d001      	beq.n	8018810 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801880c:	f7ea fbf8 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8018810:	bf00      	nop
 8018812:	bd80      	pop	{r7, pc}
 8018814:	200000f0 	.word	0x200000f0
 8018818:	20001488 	.word	0x20001488
 801881c:	2000004c 	.word	0x2000004c
 8018820:	200000dc 	.word	0x200000dc

08018824 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018824:	b580      	push	{r7, lr}
 8018826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018828:	2200      	movs	r2, #0
 801882a:	4905      	ldr	r1, [pc, #20]	@ (8018840 <CDC_Init_FS+0x1c>)
 801882c:	4805      	ldr	r0, [pc, #20]	@ (8018844 <CDC_Init_FS+0x20>)
 801882e:	f7fa ffa5 	bl	801377c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018832:	4905      	ldr	r1, [pc, #20]	@ (8018848 <CDC_Init_FS+0x24>)
 8018834:	4803      	ldr	r0, [pc, #12]	@ (8018844 <CDC_Init_FS+0x20>)
 8018836:	f7fa ffc3 	bl	80137c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801883a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801883c:	4618      	mov	r0, r3
 801883e:	bd80      	pop	{r7, pc}
 8018840:	20001f64 	.word	0x20001f64
 8018844:	20001488 	.word	0x20001488
 8018848:	20001764 	.word	0x20001764

0801884c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801884c:	b480      	push	{r7}
 801884e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018850:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018852:	4618      	mov	r0, r3
 8018854:	46bd      	mov	sp, r7
 8018856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801885a:	4770      	bx	lr

0801885c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801885c:	b480      	push	{r7}
 801885e:	b083      	sub	sp, #12
 8018860:	af00      	add	r7, sp, #0
 8018862:	4603      	mov	r3, r0
 8018864:	6039      	str	r1, [r7, #0]
 8018866:	71fb      	strb	r3, [r7, #7]
 8018868:	4613      	mov	r3, r2
 801886a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801886c:	79fb      	ldrb	r3, [r7, #7]
 801886e:	2b23      	cmp	r3, #35	@ 0x23
 8018870:	d84a      	bhi.n	8018908 <CDC_Control_FS+0xac>
 8018872:	a201      	add	r2, pc, #4	@ (adr r2, 8018878 <CDC_Control_FS+0x1c>)
 8018874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018878:	08018909 	.word	0x08018909
 801887c:	08018909 	.word	0x08018909
 8018880:	08018909 	.word	0x08018909
 8018884:	08018909 	.word	0x08018909
 8018888:	08018909 	.word	0x08018909
 801888c:	08018909 	.word	0x08018909
 8018890:	08018909 	.word	0x08018909
 8018894:	08018909 	.word	0x08018909
 8018898:	08018909 	.word	0x08018909
 801889c:	08018909 	.word	0x08018909
 80188a0:	08018909 	.word	0x08018909
 80188a4:	08018909 	.word	0x08018909
 80188a8:	08018909 	.word	0x08018909
 80188ac:	08018909 	.word	0x08018909
 80188b0:	08018909 	.word	0x08018909
 80188b4:	08018909 	.word	0x08018909
 80188b8:	08018909 	.word	0x08018909
 80188bc:	08018909 	.word	0x08018909
 80188c0:	08018909 	.word	0x08018909
 80188c4:	08018909 	.word	0x08018909
 80188c8:	08018909 	.word	0x08018909
 80188cc:	08018909 	.word	0x08018909
 80188d0:	08018909 	.word	0x08018909
 80188d4:	08018909 	.word	0x08018909
 80188d8:	08018909 	.word	0x08018909
 80188dc:	08018909 	.word	0x08018909
 80188e0:	08018909 	.word	0x08018909
 80188e4:	08018909 	.word	0x08018909
 80188e8:	08018909 	.word	0x08018909
 80188ec:	08018909 	.word	0x08018909
 80188f0:	08018909 	.word	0x08018909
 80188f4:	08018909 	.word	0x08018909
 80188f8:	08018909 	.word	0x08018909
 80188fc:	08018909 	.word	0x08018909
 8018900:	08018909 	.word	0x08018909
 8018904:	08018909 	.word	0x08018909
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018908:	bf00      	nop
  }

  return (USBD_OK);
 801890a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801890c:	4618      	mov	r0, r3
 801890e:	370c      	adds	r7, #12
 8018910:	46bd      	mov	sp, r7
 8018912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018916:	4770      	bx	lr

08018918 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018918:	b580      	push	{r7, lr}
 801891a:	b084      	sub	sp, #16
 801891c:	af00      	add	r7, sp, #0
 801891e:	6078      	str	r0, [r7, #4]
 8018920:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018922:	6879      	ldr	r1, [r7, #4]
 8018924:	480f      	ldr	r0, [pc, #60]	@ (8018964 <CDC_Receive_FS+0x4c>)
 8018926:	f7fa ff4b 	bl	80137c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801892a:	480e      	ldr	r0, [pc, #56]	@ (8018964 <CDC_Receive_FS+0x4c>)
 801892c:	f7fa ffa6 	bl	801387c <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 8018930:	2240      	movs	r2, #64	@ 0x40
 8018932:	2100      	movs	r1, #0
 8018934:	480c      	ldr	r0, [pc, #48]	@ (8018968 <CDC_Receive_FS+0x50>)
 8018936:	f002 fe6c 	bl	801b612 <memset>
  uint8_t len = (uint8_t)*Len;
 801893a:	683b      	ldr	r3, [r7, #0]
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 8018940:	7bfb      	ldrb	r3, [r7, #15]
 8018942:	461a      	mov	r2, r3
 8018944:	6879      	ldr	r1, [r7, #4]
 8018946:	4808      	ldr	r0, [pc, #32]	@ (8018968 <CDC_Receive_FS+0x50>)
 8018948:	f002 ff7f 	bl	801b84a <memcpy>
  memset(Buf, '\0', len);
 801894c:	7bfb      	ldrb	r3, [r7, #15]
 801894e:	461a      	mov	r2, r3
 8018950:	2100      	movs	r1, #0
 8018952:	6878      	ldr	r0, [r7, #4]
 8018954:	f002 fe5d 	bl	801b612 <memset>
  return (USBD_OK);
 8018958:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801895a:	4618      	mov	r0, r3
 801895c:	3710      	adds	r7, #16
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}
 8018962:	bf00      	nop
 8018964:	20001488 	.word	0x20001488
 8018968:	20000a14 	.word	0x20000a14

0801896c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b084      	sub	sp, #16
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
 8018974:	460b      	mov	r3, r1
 8018976:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018978:	2300      	movs	r3, #0
 801897a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801897c:	4b0d      	ldr	r3, [pc, #52]	@ (80189b4 <CDC_Transmit_FS+0x48>)
 801897e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8018982:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018984:	68bb      	ldr	r3, [r7, #8]
 8018986:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801898a:	2b00      	cmp	r3, #0
 801898c:	d001      	beq.n	8018992 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801898e:	2301      	movs	r3, #1
 8018990:	e00b      	b.n	80189aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018992:	887b      	ldrh	r3, [r7, #2]
 8018994:	461a      	mov	r2, r3
 8018996:	6879      	ldr	r1, [r7, #4]
 8018998:	4806      	ldr	r0, [pc, #24]	@ (80189b4 <CDC_Transmit_FS+0x48>)
 801899a:	f7fa feef 	bl	801377c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801899e:	4805      	ldr	r0, [pc, #20]	@ (80189b4 <CDC_Transmit_FS+0x48>)
 80189a0:	f7fa ff2c 	bl	80137fc <USBD_CDC_TransmitPacket>
 80189a4:	4603      	mov	r3, r0
 80189a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80189a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80189aa:	4618      	mov	r0, r3
 80189ac:	3710      	adds	r7, #16
 80189ae:	46bd      	mov	sp, r7
 80189b0:	bd80      	pop	{r7, pc}
 80189b2:	bf00      	nop
 80189b4:	20001488 	.word	0x20001488

080189b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80189b8:	b480      	push	{r7}
 80189ba:	b087      	sub	sp, #28
 80189bc:	af00      	add	r7, sp, #0
 80189be:	60f8      	str	r0, [r7, #12]
 80189c0:	60b9      	str	r1, [r7, #8]
 80189c2:	4613      	mov	r3, r2
 80189c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80189c6:	2300      	movs	r3, #0
 80189c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80189ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80189ce:	4618      	mov	r0, r3
 80189d0:	371c      	adds	r7, #28
 80189d2:	46bd      	mov	sp, r7
 80189d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d8:	4770      	bx	lr
	...

080189dc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189dc:	b480      	push	{r7}
 80189de:	b083      	sub	sp, #12
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	4603      	mov	r3, r0
 80189e4:	6039      	str	r1, [r7, #0]
 80189e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80189e8:	683b      	ldr	r3, [r7, #0]
 80189ea:	2212      	movs	r2, #18
 80189ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80189ee:	4b03      	ldr	r3, [pc, #12]	@ (80189fc <USBD_CDC_DeviceDescriptor+0x20>)
}
 80189f0:	4618      	mov	r0, r3
 80189f2:	370c      	adds	r7, #12
 80189f4:	46bd      	mov	sp, r7
 80189f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189fa:	4770      	bx	lr
 80189fc:	20000110 	.word	0x20000110

08018a00 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a00:	b480      	push	{r7}
 8018a02:	b083      	sub	sp, #12
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	4603      	mov	r3, r0
 8018a08:	6039      	str	r1, [r7, #0]
 8018a0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	2204      	movs	r2, #4
 8018a10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018a12:	4b03      	ldr	r3, [pc, #12]	@ (8018a20 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8018a14:	4618      	mov	r0, r3
 8018a16:	370c      	adds	r7, #12
 8018a18:	46bd      	mov	sp, r7
 8018a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1e:	4770      	bx	lr
 8018a20:	20000124 	.word	0x20000124

08018a24 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a24:	b580      	push	{r7, lr}
 8018a26:	b082      	sub	sp, #8
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	4603      	mov	r3, r0
 8018a2c:	6039      	str	r1, [r7, #0]
 8018a2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018a30:	79fb      	ldrb	r3, [r7, #7]
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d105      	bne.n	8018a42 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018a36:	683a      	ldr	r2, [r7, #0]
 8018a38:	4907      	ldr	r1, [pc, #28]	@ (8018a58 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018a3a:	4808      	ldr	r0, [pc, #32]	@ (8018a5c <USBD_CDC_ProductStrDescriptor+0x38>)
 8018a3c:	f7fc f902 	bl	8014c44 <USBD_GetString>
 8018a40:	e004      	b.n	8018a4c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018a42:	683a      	ldr	r2, [r7, #0]
 8018a44:	4904      	ldr	r1, [pc, #16]	@ (8018a58 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018a46:	4805      	ldr	r0, [pc, #20]	@ (8018a5c <USBD_CDC_ProductStrDescriptor+0x38>)
 8018a48:	f7fc f8fc 	bl	8014c44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a4c:	4b02      	ldr	r3, [pc, #8]	@ (8018a58 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8018a4e:	4618      	mov	r0, r3
 8018a50:	3708      	adds	r7, #8
 8018a52:	46bd      	mov	sp, r7
 8018a54:	bd80      	pop	{r7, pc}
 8018a56:	bf00      	nop
 8018a58:	20002764 	.word	0x20002764
 8018a5c:	080200d0 	.word	0x080200d0

08018a60 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b082      	sub	sp, #8
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	4603      	mov	r3, r0
 8018a68:	6039      	str	r1, [r7, #0]
 8018a6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018a6c:	683a      	ldr	r2, [r7, #0]
 8018a6e:	4904      	ldr	r1, [pc, #16]	@ (8018a80 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8018a70:	4804      	ldr	r0, [pc, #16]	@ (8018a84 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8018a72:	f7fc f8e7 	bl	8014c44 <USBD_GetString>
  return USBD_StrDesc;
 8018a76:	4b02      	ldr	r3, [pc, #8]	@ (8018a80 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8018a78:	4618      	mov	r0, r3
 8018a7a:	3708      	adds	r7, #8
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	bd80      	pop	{r7, pc}
 8018a80:	20002764 	.word	0x20002764
 8018a84:	080200e8 	.word	0x080200e8

08018a88 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b082      	sub	sp, #8
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	4603      	mov	r3, r0
 8018a90:	6039      	str	r1, [r7, #0]
 8018a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018a94:	683b      	ldr	r3, [r7, #0]
 8018a96:	221a      	movs	r2, #26
 8018a98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018a9a:	f000 f843 	bl	8018b24 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8018a9e:	4b02      	ldr	r3, [pc, #8]	@ (8018aa8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	3708      	adds	r7, #8
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}
 8018aa8:	20000128 	.word	0x20000128

08018aac <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b082      	sub	sp, #8
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	6039      	str	r1, [r7, #0]
 8018ab6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018ab8:	79fb      	ldrb	r3, [r7, #7]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d105      	bne.n	8018aca <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8018abe:	683a      	ldr	r2, [r7, #0]
 8018ac0:	4907      	ldr	r1, [pc, #28]	@ (8018ae0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8018ac2:	4808      	ldr	r0, [pc, #32]	@ (8018ae4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8018ac4:	f7fc f8be 	bl	8014c44 <USBD_GetString>
 8018ac8:	e004      	b.n	8018ad4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8018aca:	683a      	ldr	r2, [r7, #0]
 8018acc:	4904      	ldr	r1, [pc, #16]	@ (8018ae0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8018ace:	4805      	ldr	r0, [pc, #20]	@ (8018ae4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8018ad0:	f7fc f8b8 	bl	8014c44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018ad4:	4b02      	ldr	r3, [pc, #8]	@ (8018ae0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	3708      	adds	r7, #8
 8018ada:	46bd      	mov	sp, r7
 8018adc:	bd80      	pop	{r7, pc}
 8018ade:	bf00      	nop
 8018ae0:	20002764 	.word	0x20002764
 8018ae4:	080200fc 	.word	0x080200fc

08018ae8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b082      	sub	sp, #8
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	4603      	mov	r3, r0
 8018af0:	6039      	str	r1, [r7, #0]
 8018af2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018af4:	79fb      	ldrb	r3, [r7, #7]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d105      	bne.n	8018b06 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018afa:	683a      	ldr	r2, [r7, #0]
 8018afc:	4907      	ldr	r1, [pc, #28]	@ (8018b1c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8018afe:	4808      	ldr	r0, [pc, #32]	@ (8018b20 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018b00:	f7fc f8a0 	bl	8014c44 <USBD_GetString>
 8018b04:	e004      	b.n	8018b10 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018b06:	683a      	ldr	r2, [r7, #0]
 8018b08:	4904      	ldr	r1, [pc, #16]	@ (8018b1c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8018b0a:	4805      	ldr	r0, [pc, #20]	@ (8018b20 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018b0c:	f7fc f89a 	bl	8014c44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018b10:	4b02      	ldr	r3, [pc, #8]	@ (8018b1c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8018b12:	4618      	mov	r0, r3
 8018b14:	3708      	adds	r7, #8
 8018b16:	46bd      	mov	sp, r7
 8018b18:	bd80      	pop	{r7, pc}
 8018b1a:	bf00      	nop
 8018b1c:	20002764 	.word	0x20002764
 8018b20:	08020108 	.word	0x08020108

08018b24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	b084      	sub	sp, #16
 8018b28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8018b68 <Get_SerialNum+0x44>)
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018b30:	4b0e      	ldr	r3, [pc, #56]	@ (8018b6c <Get_SerialNum+0x48>)
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018b36:	4b0e      	ldr	r3, [pc, #56]	@ (8018b70 <Get_SerialNum+0x4c>)
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018b3c:	68fa      	ldr	r2, [r7, #12]
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	4413      	add	r3, r2
 8018b42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d009      	beq.n	8018b5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018b4a:	2208      	movs	r2, #8
 8018b4c:	4909      	ldr	r1, [pc, #36]	@ (8018b74 <Get_SerialNum+0x50>)
 8018b4e:	68f8      	ldr	r0, [r7, #12]
 8018b50:	f000 f814 	bl	8018b7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018b54:	2204      	movs	r2, #4
 8018b56:	4908      	ldr	r1, [pc, #32]	@ (8018b78 <Get_SerialNum+0x54>)
 8018b58:	68b8      	ldr	r0, [r7, #8]
 8018b5a:	f000 f80f 	bl	8018b7c <IntToUnicode>
  }
}
 8018b5e:	bf00      	nop
 8018b60:	3710      	adds	r7, #16
 8018b62:	46bd      	mov	sp, r7
 8018b64:	bd80      	pop	{r7, pc}
 8018b66:	bf00      	nop
 8018b68:	1fff7590 	.word	0x1fff7590
 8018b6c:	1fff7594 	.word	0x1fff7594
 8018b70:	1fff7598 	.word	0x1fff7598
 8018b74:	2000012a 	.word	0x2000012a
 8018b78:	2000013a 	.word	0x2000013a

08018b7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018b7c:	b480      	push	{r7}
 8018b7e:	b087      	sub	sp, #28
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	60f8      	str	r0, [r7, #12]
 8018b84:	60b9      	str	r1, [r7, #8]
 8018b86:	4613      	mov	r3, r2
 8018b88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018b8a:	2300      	movs	r3, #0
 8018b8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018b8e:	2300      	movs	r3, #0
 8018b90:	75fb      	strb	r3, [r7, #23]
 8018b92:	e027      	b.n	8018be4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	0f1b      	lsrs	r3, r3, #28
 8018b98:	2b09      	cmp	r3, #9
 8018b9a:	d80b      	bhi.n	8018bb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	0f1b      	lsrs	r3, r3, #28
 8018ba0:	b2da      	uxtb	r2, r3
 8018ba2:	7dfb      	ldrb	r3, [r7, #23]
 8018ba4:	005b      	lsls	r3, r3, #1
 8018ba6:	4619      	mov	r1, r3
 8018ba8:	68bb      	ldr	r3, [r7, #8]
 8018baa:	440b      	add	r3, r1
 8018bac:	3230      	adds	r2, #48	@ 0x30
 8018bae:	b2d2      	uxtb	r2, r2
 8018bb0:	701a      	strb	r2, [r3, #0]
 8018bb2:	e00a      	b.n	8018bca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	0f1b      	lsrs	r3, r3, #28
 8018bb8:	b2da      	uxtb	r2, r3
 8018bba:	7dfb      	ldrb	r3, [r7, #23]
 8018bbc:	005b      	lsls	r3, r3, #1
 8018bbe:	4619      	mov	r1, r3
 8018bc0:	68bb      	ldr	r3, [r7, #8]
 8018bc2:	440b      	add	r3, r1
 8018bc4:	3237      	adds	r2, #55	@ 0x37
 8018bc6:	b2d2      	uxtb	r2, r2
 8018bc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	011b      	lsls	r3, r3, #4
 8018bce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018bd0:	7dfb      	ldrb	r3, [r7, #23]
 8018bd2:	005b      	lsls	r3, r3, #1
 8018bd4:	3301      	adds	r3, #1
 8018bd6:	68ba      	ldr	r2, [r7, #8]
 8018bd8:	4413      	add	r3, r2
 8018bda:	2200      	movs	r2, #0
 8018bdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018bde:	7dfb      	ldrb	r3, [r7, #23]
 8018be0:	3301      	adds	r3, #1
 8018be2:	75fb      	strb	r3, [r7, #23]
 8018be4:	7dfa      	ldrb	r2, [r7, #23]
 8018be6:	79fb      	ldrb	r3, [r7, #7]
 8018be8:	429a      	cmp	r2, r3
 8018bea:	d3d3      	bcc.n	8018b94 <IntToUnicode+0x18>
  }
}
 8018bec:	bf00      	nop
 8018bee:	bf00      	nop
 8018bf0:	371c      	adds	r7, #28
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf8:	4770      	bx	lr

08018bfa <LL_AHB2_GRP1_EnableClock>:
{
 8018bfa:	b480      	push	{r7}
 8018bfc:	b085      	sub	sp, #20
 8018bfe:	af00      	add	r7, sp, #0
 8018c00:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8018c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018c06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018c08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	4313      	orrs	r3, r2
 8018c10:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8018c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	4013      	ands	r3, r2
 8018c1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018c1e:	68fb      	ldr	r3, [r7, #12]
}
 8018c20:	bf00      	nop
 8018c22:	3714      	adds	r7, #20
 8018c24:	46bd      	mov	sp, r7
 8018c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c2a:	4770      	bx	lr

08018c2c <LL_APB1_GRP1_EnableClock>:
{
 8018c2c:	b480      	push	{r7}
 8018c2e:	b085      	sub	sp, #20
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8018c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018c38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018c3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	4313      	orrs	r3, r2
 8018c42:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8018c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018c48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	4013      	ands	r3, r2
 8018c4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018c50:	68fb      	ldr	r3, [r7, #12]
}
 8018c52:	bf00      	nop
 8018c54:	3714      	adds	r7, #20
 8018c56:	46bd      	mov	sp, r7
 8018c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c5c:	4770      	bx	lr
	...

08018c60 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b088      	sub	sp, #32
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018c68:	f107 030c 	add.w	r3, r7, #12
 8018c6c:	2200      	movs	r2, #0
 8018c6e:	601a      	str	r2, [r3, #0]
 8018c70:	605a      	str	r2, [r3, #4]
 8018c72:	609a      	str	r2, [r3, #8]
 8018c74:	60da      	str	r2, [r3, #12]
 8018c76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	4a13      	ldr	r2, [pc, #76]	@ (8018ccc <HAL_PCD_MspInit+0x6c>)
 8018c7e:	4293      	cmp	r3, r2
 8018c80:	d120      	bne.n	8018cc4 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018c82:	2001      	movs	r0, #1
 8018c84:	f7ff ffb9 	bl	8018bfa <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018c88:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018c8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018c8e:	2302      	movs	r3, #2
 8018c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018c92:	2300      	movs	r3, #0
 8018c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018c96:	2300      	movs	r3, #0
 8018c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8018c9a:	230a      	movs	r3, #10
 8018c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018c9e:	f107 030c 	add.w	r3, r7, #12
 8018ca2:	4619      	mov	r1, r3
 8018ca4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8018ca8:	f7f0 fa38 	bl	800911c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8018cac:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8018cb0:	f7ff ffbc 	bl	8018c2c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8018cb4:	2200      	movs	r2, #0
 8018cb6:	2105      	movs	r1, #5
 8018cb8:	2014      	movs	r0, #20
 8018cba:	f7ef fe92 	bl	80089e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8018cbe:	2014      	movs	r0, #20
 8018cc0:	f7ef fea9 	bl	8008a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8018cc4:	bf00      	nop
 8018cc6:	3720      	adds	r7, #32
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	bd80      	pop	{r7, pc}
 8018ccc:	40006800 	.word	0x40006800

08018cd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b082      	sub	sp, #8
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8018ce4:	4619      	mov	r1, r3
 8018ce6:	4610      	mov	r0, r2
 8018ce8:	f7fa feb1 	bl	8013a4e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8018cec:	bf00      	nop
 8018cee:	3708      	adds	r7, #8
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	bd80      	pop	{r7, pc}

08018cf4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b082      	sub	sp, #8
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	6078      	str	r0, [r7, #4]
 8018cfc:	460b      	mov	r3, r1
 8018cfe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018d06:	78fa      	ldrb	r2, [r7, #3]
 8018d08:	6879      	ldr	r1, [r7, #4]
 8018d0a:	4613      	mov	r3, r2
 8018d0c:	009b      	lsls	r3, r3, #2
 8018d0e:	4413      	add	r3, r2
 8018d10:	00db      	lsls	r3, r3, #3
 8018d12:	440b      	add	r3, r1
 8018d14:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018d18:	681a      	ldr	r2, [r3, #0]
 8018d1a:	78fb      	ldrb	r3, [r7, #3]
 8018d1c:	4619      	mov	r1, r3
 8018d1e:	f7fa feeb 	bl	8013af8 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8018d22:	bf00      	nop
 8018d24:	3708      	adds	r7, #8
 8018d26:	46bd      	mov	sp, r7
 8018d28:	bd80      	pop	{r7, pc}

08018d2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d2a:	b580      	push	{r7, lr}
 8018d2c:	b082      	sub	sp, #8
 8018d2e:	af00      	add	r7, sp, #0
 8018d30:	6078      	str	r0, [r7, #4]
 8018d32:	460b      	mov	r3, r1
 8018d34:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018d3c:	78fa      	ldrb	r2, [r7, #3]
 8018d3e:	6879      	ldr	r1, [r7, #4]
 8018d40:	4613      	mov	r3, r2
 8018d42:	009b      	lsls	r3, r3, #2
 8018d44:	4413      	add	r3, r2
 8018d46:	00db      	lsls	r3, r3, #3
 8018d48:	440b      	add	r3, r1
 8018d4a:	3324      	adds	r3, #36	@ 0x24
 8018d4c:	681a      	ldr	r2, [r3, #0]
 8018d4e:	78fb      	ldrb	r3, [r7, #3]
 8018d50:	4619      	mov	r1, r3
 8018d52:	f7fa ff84 	bl	8013c5e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8018d56:	bf00      	nop
 8018d58:	3708      	adds	r7, #8
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	bd80      	pop	{r7, pc}

08018d5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d5e:	b580      	push	{r7, lr}
 8018d60:	b082      	sub	sp, #8
 8018d62:	af00      	add	r7, sp, #0
 8018d64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	f7fb f8be 	bl	8013eee <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8018d72:	bf00      	nop
 8018d74:	3708      	adds	r7, #8
 8018d76:	46bd      	mov	sp, r7
 8018d78:	bd80      	pop	{r7, pc}

08018d7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d7a:	b580      	push	{r7, lr}
 8018d7c:	b084      	sub	sp, #16
 8018d7e:	af00      	add	r7, sp, #0
 8018d80:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018d82:	2301      	movs	r3, #1
 8018d84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	795b      	ldrb	r3, [r3, #5]
 8018d8a:	2b02      	cmp	r3, #2
 8018d8c:	d001      	beq.n	8018d92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018d8e:	f7ea f937 	bl	8003000 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018d98:	7bfa      	ldrb	r2, [r7, #15]
 8018d9a:	4611      	mov	r1, r2
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	f7fb f862 	bl	8013e66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018da8:	4618      	mov	r0, r3
 8018daa:	f7fb f80a 	bl	8013dc2 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8018dae:	bf00      	nop
 8018db0:	3710      	adds	r7, #16
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}
	...

08018db8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b082      	sub	sp, #8
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7fb f85d 	bl	8013e86 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	7a5b      	ldrb	r3, [r3, #9]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d005      	beq.n	8018de0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018dd4:	4b04      	ldr	r3, [pc, #16]	@ (8018de8 <HAL_PCD_SuspendCallback+0x30>)
 8018dd6:	691b      	ldr	r3, [r3, #16]
 8018dd8:	4a03      	ldr	r2, [pc, #12]	@ (8018de8 <HAL_PCD_SuspendCallback+0x30>)
 8018dda:	f043 0306 	orr.w	r3, r3, #6
 8018dde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8018de0:	bf00      	nop
 8018de2:	3708      	adds	r7, #8
 8018de4:	46bd      	mov	sp, r7
 8018de6:	bd80      	pop	{r7, pc}
 8018de8:	e000ed00 	.word	0xe000ed00

08018dec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	b082      	sub	sp, #8
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	7a5b      	ldrb	r3, [r3, #9]
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d007      	beq.n	8018e0c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018dfc:	4b08      	ldr	r3, [pc, #32]	@ (8018e20 <HAL_PCD_ResumeCallback+0x34>)
 8018dfe:	691b      	ldr	r3, [r3, #16]
 8018e00:	4a07      	ldr	r2, [pc, #28]	@ (8018e20 <HAL_PCD_ResumeCallback+0x34>)
 8018e02:	f023 0306 	bic.w	r3, r3, #6
 8018e06:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018e08:	f000 f9fa 	bl	8019200 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018e12:	4618      	mov	r0, r3
 8018e14:	f7fb f853 	bl	8013ebe <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8018e18:	bf00      	nop
 8018e1a:	3708      	adds	r7, #8
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	bd80      	pop	{r7, pc}
 8018e20:	e000ed00 	.word	0xe000ed00

08018e24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b082      	sub	sp, #8
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8018e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8018ee0 <USBD_LL_Init+0xbc>)
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	4a2a      	ldr	r2, [pc, #168]	@ (8018ee0 <USBD_LL_Init+0xbc>)
 8018e38:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8018e3c:	f7f2 ff40 	bl	800bcc0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8018e40:	4b27      	ldr	r3, [pc, #156]	@ (8018ee0 <USBD_LL_Init+0xbc>)
 8018e42:	4a28      	ldr	r2, [pc, #160]	@ (8018ee4 <USBD_LL_Init+0xc0>)
 8018e44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8018e46:	4b26      	ldr	r3, [pc, #152]	@ (8018ee0 <USBD_LL_Init+0xbc>)
 8018e48:	2208      	movs	r2, #8
 8018e4a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8018e4c:	4b24      	ldr	r3, [pc, #144]	@ (8018ee0 <USBD_LL_Init+0xbc>)
 8018e4e:	2202      	movs	r2, #2
 8018e50:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018e52:	4b23      	ldr	r3, [pc, #140]	@ (8018ee0 <USBD_LL_Init+0xbc>)
 8018e54:	2202      	movs	r2, #2
 8018e56:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8018e58:	4b21      	ldr	r3, [pc, #132]	@ (8018ee0 <USBD_LL_Init+0xbc>)
 8018e5a:	2200      	movs	r2, #0
 8018e5c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8018e5e:	4b20      	ldr	r3, [pc, #128]	@ (8018ee0 <USBD_LL_Init+0xbc>)
 8018e60:	2200      	movs	r2, #0
 8018e62:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8018e64:	4b1e      	ldr	r3, [pc, #120]	@ (8018ee0 <USBD_LL_Init+0xbc>)
 8018e66:	2200      	movs	r2, #0
 8018e68:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8018e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8018ee0 <USBD_LL_Init+0xbc>)
 8018e6c:	2200      	movs	r2, #0
 8018e6e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8018e70:	481b      	ldr	r0, [pc, #108]	@ (8018ee0 <USBD_LL_Init+0xbc>)
 8018e72:	f7f1 fa05 	bl	800a280 <HAL_PCD_Init>
 8018e76:	4603      	mov	r3, r0
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d001      	beq.n	8018e80 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8018e7c:	f7ea f8c0 	bl	8003000 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018e86:	2318      	movs	r3, #24
 8018e88:	2200      	movs	r2, #0
 8018e8a:	2100      	movs	r1, #0
 8018e8c:	f7f2 fe8c 	bl	800bba8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018e96:	2358      	movs	r3, #88	@ 0x58
 8018e98:	2200      	movs	r2, #0
 8018e9a:	2180      	movs	r1, #128	@ 0x80
 8018e9c:	f7f2 fe84 	bl	800bba8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018ea6:	23c0      	movs	r3, #192	@ 0xc0
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	2181      	movs	r1, #129	@ 0x81
 8018eac:	f7f2 fe7c 	bl	800bba8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018eb6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8018eba:	2200      	movs	r2, #0
 8018ebc:	2101      	movs	r1, #1
 8018ebe:	f7f2 fe73 	bl	800bba8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018ec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018ecc:	2200      	movs	r2, #0
 8018ece:	2182      	movs	r1, #130	@ 0x82
 8018ed0:	f7f2 fe6a 	bl	800bba8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8018ed4:	2300      	movs	r3, #0
}
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	3708      	adds	r7, #8
 8018eda:	46bd      	mov	sp, r7
 8018edc:	bd80      	pop	{r7, pc}
 8018ede:	bf00      	nop
 8018ee0:	20002964 	.word	0x20002964
 8018ee4:	40006800 	.word	0x40006800

08018ee8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b084      	sub	sp, #16
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018efe:	4618      	mov	r0, r3
 8018f00:	f7f1 fa8c 	bl	800a41c <HAL_PCD_Start>
 8018f04:	4603      	mov	r3, r0
 8018f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f08:	7bfb      	ldrb	r3, [r7, #15]
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	f000 f97e 	bl	801920c <USBD_Get_USB_Status>
 8018f10:	4603      	mov	r3, r0
 8018f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f16:	4618      	mov	r0, r3
 8018f18:	3710      	adds	r7, #16
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	bd80      	pop	{r7, pc}

08018f1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018f1e:	b580      	push	{r7, lr}
 8018f20:	b084      	sub	sp, #16
 8018f22:	af00      	add	r7, sp, #0
 8018f24:	6078      	str	r0, [r7, #4]
 8018f26:	4608      	mov	r0, r1
 8018f28:	4611      	mov	r1, r2
 8018f2a:	461a      	mov	r2, r3
 8018f2c:	4603      	mov	r3, r0
 8018f2e:	70fb      	strb	r3, [r7, #3]
 8018f30:	460b      	mov	r3, r1
 8018f32:	70bb      	strb	r3, [r7, #2]
 8018f34:	4613      	mov	r3, r2
 8018f36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f38:	2300      	movs	r3, #0
 8018f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018f46:	78bb      	ldrb	r3, [r7, #2]
 8018f48:	883a      	ldrh	r2, [r7, #0]
 8018f4a:	78f9      	ldrb	r1, [r7, #3]
 8018f4c:	f7f1 fbd3 	bl	800a6f6 <HAL_PCD_EP_Open>
 8018f50:	4603      	mov	r3, r0
 8018f52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f54:	7bfb      	ldrb	r3, [r7, #15]
 8018f56:	4618      	mov	r0, r3
 8018f58:	f000 f958 	bl	801920c <USBD_Get_USB_Status>
 8018f5c:	4603      	mov	r3, r0
 8018f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f62:	4618      	mov	r0, r3
 8018f64:	3710      	adds	r7, #16
 8018f66:	46bd      	mov	sp, r7
 8018f68:	bd80      	pop	{r7, pc}

08018f6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f6a:	b580      	push	{r7, lr}
 8018f6c:	b084      	sub	sp, #16
 8018f6e:	af00      	add	r7, sp, #0
 8018f70:	6078      	str	r0, [r7, #4]
 8018f72:	460b      	mov	r3, r1
 8018f74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f76:	2300      	movs	r3, #0
 8018f78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f7a:	2300      	movs	r3, #0
 8018f7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018f84:	78fa      	ldrb	r2, [r7, #3]
 8018f86:	4611      	mov	r1, r2
 8018f88:	4618      	mov	r0, r3
 8018f8a:	f7f1 fc13 	bl	800a7b4 <HAL_PCD_EP_Close>
 8018f8e:	4603      	mov	r3, r0
 8018f90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f92:	7bfb      	ldrb	r3, [r7, #15]
 8018f94:	4618      	mov	r0, r3
 8018f96:	f000 f939 	bl	801920c <USBD_Get_USB_Status>
 8018f9a:	4603      	mov	r3, r0
 8018f9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	3710      	adds	r7, #16
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd80      	pop	{r7, pc}

08018fa8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b084      	sub	sp, #16
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	6078      	str	r0, [r7, #4]
 8018fb0:	460b      	mov	r3, r1
 8018fb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018fb4:	2300      	movs	r3, #0
 8018fb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018fb8:	2300      	movs	r3, #0
 8018fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018fc2:	78fa      	ldrb	r2, [r7, #3]
 8018fc4:	4611      	mov	r1, r2
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	f7f1 fcbc 	bl	800a944 <HAL_PCD_EP_SetStall>
 8018fcc:	4603      	mov	r3, r0
 8018fce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018fd0:	7bfb      	ldrb	r3, [r7, #15]
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	f000 f91a 	bl	801920c <USBD_Get_USB_Status>
 8018fd8:	4603      	mov	r3, r0
 8018fda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018fdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8018fde:	4618      	mov	r0, r3
 8018fe0:	3710      	adds	r7, #16
 8018fe2:	46bd      	mov	sp, r7
 8018fe4:	bd80      	pop	{r7, pc}

08018fe6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018fe6:	b580      	push	{r7, lr}
 8018fe8:	b084      	sub	sp, #16
 8018fea:	af00      	add	r7, sp, #0
 8018fec:	6078      	str	r0, [r7, #4]
 8018fee:	460b      	mov	r3, r1
 8018ff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019000:	78fa      	ldrb	r2, [r7, #3]
 8019002:	4611      	mov	r1, r2
 8019004:	4618      	mov	r0, r3
 8019006:	f7f1 fcef 	bl	800a9e8 <HAL_PCD_EP_ClrStall>
 801900a:	4603      	mov	r3, r0
 801900c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801900e:	7bfb      	ldrb	r3, [r7, #15]
 8019010:	4618      	mov	r0, r3
 8019012:	f000 f8fb 	bl	801920c <USBD_Get_USB_Status>
 8019016:	4603      	mov	r3, r0
 8019018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801901a:	7bbb      	ldrb	r3, [r7, #14]
}
 801901c:	4618      	mov	r0, r3
 801901e:	3710      	adds	r7, #16
 8019020:	46bd      	mov	sp, r7
 8019022:	bd80      	pop	{r7, pc}

08019024 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019024:	b480      	push	{r7}
 8019026:	b085      	sub	sp, #20
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
 801902c:	460b      	mov	r3, r1
 801902e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019036:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801903c:	2b00      	cmp	r3, #0
 801903e:	da0b      	bge.n	8019058 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019040:	78fb      	ldrb	r3, [r7, #3]
 8019042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019046:	68f9      	ldr	r1, [r7, #12]
 8019048:	4613      	mov	r3, r2
 801904a:	009b      	lsls	r3, r3, #2
 801904c:	4413      	add	r3, r2
 801904e:	00db      	lsls	r3, r3, #3
 8019050:	440b      	add	r3, r1
 8019052:	3312      	adds	r3, #18
 8019054:	781b      	ldrb	r3, [r3, #0]
 8019056:	e00b      	b.n	8019070 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019058:	78fb      	ldrb	r3, [r7, #3]
 801905a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801905e:	68f9      	ldr	r1, [r7, #12]
 8019060:	4613      	mov	r3, r2
 8019062:	009b      	lsls	r3, r3, #2
 8019064:	4413      	add	r3, r2
 8019066:	00db      	lsls	r3, r3, #3
 8019068:	440b      	add	r3, r1
 801906a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801906e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019070:	4618      	mov	r0, r3
 8019072:	3714      	adds	r7, #20
 8019074:	46bd      	mov	sp, r7
 8019076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801907a:	4770      	bx	lr

0801907c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801907c:	b580      	push	{r7, lr}
 801907e:	b084      	sub	sp, #16
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
 8019084:	460b      	mov	r3, r1
 8019086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019088:	2300      	movs	r3, #0
 801908a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801908c:	2300      	movs	r3, #0
 801908e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019096:	78fa      	ldrb	r2, [r7, #3]
 8019098:	4611      	mov	r1, r2
 801909a:	4618      	mov	r0, r3
 801909c:	f7f1 fb07 	bl	800a6ae <HAL_PCD_SetAddress>
 80190a0:	4603      	mov	r3, r0
 80190a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190a4:	7bfb      	ldrb	r3, [r7, #15]
 80190a6:	4618      	mov	r0, r3
 80190a8:	f000 f8b0 	bl	801920c <USBD_Get_USB_Status>
 80190ac:	4603      	mov	r3, r0
 80190ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80190b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80190b2:	4618      	mov	r0, r3
 80190b4:	3710      	adds	r7, #16
 80190b6:	46bd      	mov	sp, r7
 80190b8:	bd80      	pop	{r7, pc}

080190ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80190ba:	b580      	push	{r7, lr}
 80190bc:	b086      	sub	sp, #24
 80190be:	af00      	add	r7, sp, #0
 80190c0:	60f8      	str	r0, [r7, #12]
 80190c2:	607a      	str	r2, [r7, #4]
 80190c4:	603b      	str	r3, [r7, #0]
 80190c6:	460b      	mov	r3, r1
 80190c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190ca:	2300      	movs	r3, #0
 80190cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190ce:	2300      	movs	r3, #0
 80190d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80190d2:	68fb      	ldr	r3, [r7, #12]
 80190d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80190d8:	7af9      	ldrb	r1, [r7, #11]
 80190da:	683b      	ldr	r3, [r7, #0]
 80190dc:	687a      	ldr	r2, [r7, #4]
 80190de:	f7f1 fbfa 	bl	800a8d6 <HAL_PCD_EP_Transmit>
 80190e2:	4603      	mov	r3, r0
 80190e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190e6:	7dfb      	ldrb	r3, [r7, #23]
 80190e8:	4618      	mov	r0, r3
 80190ea:	f000 f88f 	bl	801920c <USBD_Get_USB_Status>
 80190ee:	4603      	mov	r3, r0
 80190f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80190f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80190f4:	4618      	mov	r0, r3
 80190f6:	3718      	adds	r7, #24
 80190f8:	46bd      	mov	sp, r7
 80190fa:	bd80      	pop	{r7, pc}

080190fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	b086      	sub	sp, #24
 8019100:	af00      	add	r7, sp, #0
 8019102:	60f8      	str	r0, [r7, #12]
 8019104:	607a      	str	r2, [r7, #4]
 8019106:	603b      	str	r3, [r7, #0]
 8019108:	460b      	mov	r3, r1
 801910a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801910c:	2300      	movs	r3, #0
 801910e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019110:	2300      	movs	r3, #0
 8019112:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801911a:	7af9      	ldrb	r1, [r7, #11]
 801911c:	683b      	ldr	r3, [r7, #0]
 801911e:	687a      	ldr	r2, [r7, #4]
 8019120:	f7f1 fb90 	bl	800a844 <HAL_PCD_EP_Receive>
 8019124:	4603      	mov	r3, r0
 8019126:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019128:	7dfb      	ldrb	r3, [r7, #23]
 801912a:	4618      	mov	r0, r3
 801912c:	f000 f86e 	bl	801920c <USBD_Get_USB_Status>
 8019130:	4603      	mov	r3, r0
 8019132:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019134:	7dbb      	ldrb	r3, [r7, #22]
}
 8019136:	4618      	mov	r0, r3
 8019138:	3718      	adds	r7, #24
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}

0801913e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801913e:	b580      	push	{r7, lr}
 8019140:	b082      	sub	sp, #8
 8019142:	af00      	add	r7, sp, #0
 8019144:	6078      	str	r0, [r7, #4]
 8019146:	460b      	mov	r3, r1
 8019148:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019150:	78fa      	ldrb	r2, [r7, #3]
 8019152:	4611      	mov	r1, r2
 8019154:	4618      	mov	r0, r3
 8019156:	f7f1 fba6 	bl	800a8a6 <HAL_PCD_EP_GetRxCount>
 801915a:	4603      	mov	r3, r0
}
 801915c:	4618      	mov	r0, r3
 801915e:	3708      	adds	r7, #8
 8019160:	46bd      	mov	sp, r7
 8019162:	bd80      	pop	{r7, pc}

08019164 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019164:	b580      	push	{r7, lr}
 8019166:	b082      	sub	sp, #8
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
 801916c:	460b      	mov	r3, r1
 801916e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8019170:	78fb      	ldrb	r3, [r7, #3]
 8019172:	2b00      	cmp	r3, #0
 8019174:	d002      	beq.n	801917c <HAL_PCDEx_LPM_Callback+0x18>
 8019176:	2b01      	cmp	r3, #1
 8019178:	d013      	beq.n	80191a2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801917a:	e023      	b.n	80191c4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	7a5b      	ldrb	r3, [r3, #9]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d007      	beq.n	8019194 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019184:	f000 f83c 	bl	8019200 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019188:	4b10      	ldr	r3, [pc, #64]	@ (80191cc <HAL_PCDEx_LPM_Callback+0x68>)
 801918a:	691b      	ldr	r3, [r3, #16]
 801918c:	4a0f      	ldr	r2, [pc, #60]	@ (80191cc <HAL_PCDEx_LPM_Callback+0x68>)
 801918e:	f023 0306 	bic.w	r3, r3, #6
 8019192:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801919a:	4618      	mov	r0, r3
 801919c:	f7fa fe8f 	bl	8013ebe <USBD_LL_Resume>
    break;
 80191a0:	e010      	b.n	80191c4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80191a8:	4618      	mov	r0, r3
 80191aa:	f7fa fe6c 	bl	8013e86 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	7a5b      	ldrb	r3, [r3, #9]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d005      	beq.n	80191c2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80191b6:	4b05      	ldr	r3, [pc, #20]	@ (80191cc <HAL_PCDEx_LPM_Callback+0x68>)
 80191b8:	691b      	ldr	r3, [r3, #16]
 80191ba:	4a04      	ldr	r2, [pc, #16]	@ (80191cc <HAL_PCDEx_LPM_Callback+0x68>)
 80191bc:	f043 0306 	orr.w	r3, r3, #6
 80191c0:	6113      	str	r3, [r2, #16]
    break;
 80191c2:	bf00      	nop
}
 80191c4:	bf00      	nop
 80191c6:	3708      	adds	r7, #8
 80191c8:	46bd      	mov	sp, r7
 80191ca:	bd80      	pop	{r7, pc}
 80191cc:	e000ed00 	.word	0xe000ed00

080191d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80191d0:	b480      	push	{r7}
 80191d2:	b083      	sub	sp, #12
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80191d8:	4b03      	ldr	r3, [pc, #12]	@ (80191e8 <USBD_static_malloc+0x18>)
}
 80191da:	4618      	mov	r0, r3
 80191dc:	370c      	adds	r7, #12
 80191de:	46bd      	mov	sp, r7
 80191e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e4:	4770      	bx	lr
 80191e6:	bf00      	nop
 80191e8:	20002c40 	.word	0x20002c40

080191ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80191ec:	b480      	push	{r7}
 80191ee:	b083      	sub	sp, #12
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80191f4:	bf00      	nop
 80191f6:	370c      	adds	r7, #12
 80191f8:	46bd      	mov	sp, r7
 80191fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191fe:	4770      	bx	lr

08019200 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019200:	b580      	push	{r7, lr}
 8019202:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019204:	f7e9 fe5e 	bl	8002ec4 <SystemClock_Config>
}
 8019208:	bf00      	nop
 801920a:	bd80      	pop	{r7, pc}

0801920c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801920c:	b480      	push	{r7}
 801920e:	b085      	sub	sp, #20
 8019210:	af00      	add	r7, sp, #0
 8019212:	4603      	mov	r3, r0
 8019214:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019216:	2300      	movs	r3, #0
 8019218:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801921a:	79fb      	ldrb	r3, [r7, #7]
 801921c:	2b03      	cmp	r3, #3
 801921e:	d817      	bhi.n	8019250 <USBD_Get_USB_Status+0x44>
 8019220:	a201      	add	r2, pc, #4	@ (adr r2, 8019228 <USBD_Get_USB_Status+0x1c>)
 8019222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019226:	bf00      	nop
 8019228:	08019239 	.word	0x08019239
 801922c:	0801923f 	.word	0x0801923f
 8019230:	08019245 	.word	0x08019245
 8019234:	0801924b 	.word	0x0801924b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019238:	2300      	movs	r3, #0
 801923a:	73fb      	strb	r3, [r7, #15]
    break;
 801923c:	e00b      	b.n	8019256 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801923e:	2303      	movs	r3, #3
 8019240:	73fb      	strb	r3, [r7, #15]
    break;
 8019242:	e008      	b.n	8019256 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019244:	2301      	movs	r3, #1
 8019246:	73fb      	strb	r3, [r7, #15]
    break;
 8019248:	e005      	b.n	8019256 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801924a:	2303      	movs	r3, #3
 801924c:	73fb      	strb	r3, [r7, #15]
    break;
 801924e:	e002      	b.n	8019256 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019250:	2303      	movs	r3, #3
 8019252:	73fb      	strb	r3, [r7, #15]
    break;
 8019254:	bf00      	nop
  }
  return usb_status;
 8019256:	7bfb      	ldrb	r3, [r7, #15]
}
 8019258:	4618      	mov	r0, r3
 801925a:	3714      	adds	r7, #20
 801925c:	46bd      	mov	sp, r7
 801925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019262:	4770      	bx	lr

08019264 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019264:	b480      	push	{r7}
 8019266:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019268:	4b05      	ldr	r3, [pc, #20]	@ (8019280 <UTIL_LPM_Init+0x1c>)
 801926a:	2200      	movs	r2, #0
 801926c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801926e:	4b05      	ldr	r3, [pc, #20]	@ (8019284 <UTIL_LPM_Init+0x20>)
 8019270:	2200      	movs	r2, #0
 8019272:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019274:	bf00      	nop
 8019276:	46bd      	mov	sp, r7
 8019278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801927c:	4770      	bx	lr
 801927e:	bf00      	nop
 8019280:	20002e60 	.word	0x20002e60
 8019284:	20002e64 	.word	0x20002e64

08019288 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019288:	b480      	push	{r7}
 801928a:	b087      	sub	sp, #28
 801928c:	af00      	add	r7, sp, #0
 801928e:	6078      	str	r0, [r7, #4]
 8019290:	460b      	mov	r3, r1
 8019292:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019294:	f3ef 8310 	mrs	r3, PRIMASK
 8019298:	613b      	str	r3, [r7, #16]
  return(result);
 801929a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801929c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801929e:	b672      	cpsid	i
}
 80192a0:	bf00      	nop
  
  switch(state)
 80192a2:	78fb      	ldrb	r3, [r7, #3]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d008      	beq.n	80192ba <UTIL_LPM_SetOffMode+0x32>
 80192a8:	2b01      	cmp	r3, #1
 80192aa:	d10e      	bne.n	80192ca <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80192ac:	4b0d      	ldr	r3, [pc, #52]	@ (80192e4 <UTIL_LPM_SetOffMode+0x5c>)
 80192ae:	681a      	ldr	r2, [r3, #0]
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	4313      	orrs	r3, r2
 80192b4:	4a0b      	ldr	r2, [pc, #44]	@ (80192e4 <UTIL_LPM_SetOffMode+0x5c>)
 80192b6:	6013      	str	r3, [r2, #0]
      break;
 80192b8:	e008      	b.n	80192cc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	43da      	mvns	r2, r3
 80192be:	4b09      	ldr	r3, [pc, #36]	@ (80192e4 <UTIL_LPM_SetOffMode+0x5c>)
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	4013      	ands	r3, r2
 80192c4:	4a07      	ldr	r2, [pc, #28]	@ (80192e4 <UTIL_LPM_SetOffMode+0x5c>)
 80192c6:	6013      	str	r3, [r2, #0]
      break;
 80192c8:	e000      	b.n	80192cc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80192ca:	bf00      	nop
 80192cc:	697b      	ldr	r3, [r7, #20]
 80192ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	f383 8810 	msr	PRIMASK, r3
}
 80192d6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80192d8:	bf00      	nop
 80192da:	371c      	adds	r7, #28
 80192dc:	46bd      	mov	sp, r7
 80192de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e2:	4770      	bx	lr
 80192e4:	20002e64 	.word	0x20002e64

080192e8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b090      	sub	sp, #64	@ 0x40
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80192f0:	4b73      	ldr	r3, [pc, #460]	@ (80194c0 <UTIL_SEQ_Run+0x1d8>)
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80192f6:	4b72      	ldr	r3, [pc, #456]	@ (80194c0 <UTIL_SEQ_Run+0x1d8>)
 80192f8:	681a      	ldr	r2, [r3, #0]
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	4013      	ands	r3, r2
 80192fe:	4a70      	ldr	r2, [pc, #448]	@ (80194c0 <UTIL_SEQ_Run+0x1d8>)
 8019300:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8019302:	4b70      	ldr	r3, [pc, #448]	@ (80194c4 <UTIL_SEQ_Run+0x1dc>)
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019308:	4b6f      	ldr	r3, [pc, #444]	@ (80194c8 <UTIL_SEQ_Run+0x1e0>)
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801930e:	4b6f      	ldr	r3, [pc, #444]	@ (80194cc <UTIL_SEQ_Run+0x1e4>)
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8019314:	4b6e      	ldr	r3, [pc, #440]	@ (80194d0 <UTIL_SEQ_Run+0x1e8>)
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801931a:	e08d      	b.n	8019438 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801931c:	2300      	movs	r3, #0
 801931e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019320:	e002      	b.n	8019328 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8019322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019324:	3301      	adds	r3, #1
 8019326:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019328:	4a6a      	ldr	r2, [pc, #424]	@ (80194d4 <UTIL_SEQ_Run+0x1ec>)
 801932a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801932c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019332:	401a      	ands	r2, r3
 8019334:	4b62      	ldr	r3, [pc, #392]	@ (80194c0 <UTIL_SEQ_Run+0x1d8>)
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	4013      	ands	r3, r2
 801933a:	2b00      	cmp	r3, #0
 801933c:	d0f1      	beq.n	8019322 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801933e:	4a65      	ldr	r2, [pc, #404]	@ (80194d4 <UTIL_SEQ_Run+0x1ec>)
 8019340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019342:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019348:	401a      	ands	r2, r3
 801934a:	4b5d      	ldr	r3, [pc, #372]	@ (80194c0 <UTIL_SEQ_Run+0x1d8>)
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	4013      	ands	r3, r2
 8019350:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8019352:	4a60      	ldr	r2, [pc, #384]	@ (80194d4 <UTIL_SEQ_Run+0x1ec>)
 8019354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019356:	00db      	lsls	r3, r3, #3
 8019358:	4413      	add	r3, r2
 801935a:	685a      	ldr	r2, [r3, #4]
 801935c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801935e:	4013      	ands	r3, r2
 8019360:	2b00      	cmp	r3, #0
 8019362:	d106      	bne.n	8019372 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8019364:	4a5b      	ldr	r2, [pc, #364]	@ (80194d4 <UTIL_SEQ_Run+0x1ec>)
 8019366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019368:	00db      	lsls	r3, r3, #3
 801936a:	4413      	add	r3, r2
 801936c:	f04f 32ff 	mov.w	r2, #4294967295
 8019370:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8019372:	4a58      	ldr	r2, [pc, #352]	@ (80194d4 <UTIL_SEQ_Run+0x1ec>)
 8019374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019376:	00db      	lsls	r3, r3, #3
 8019378:	4413      	add	r3, r2
 801937a:	685a      	ldr	r2, [r3, #4]
 801937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801937e:	4013      	ands	r3, r2
 8019380:	4618      	mov	r0, r3
 8019382:	f000 f9b3 	bl	80196ec <SEQ_BitPosition>
 8019386:	4603      	mov	r3, r0
 8019388:	461a      	mov	r2, r3
 801938a:	4b53      	ldr	r3, [pc, #332]	@ (80194d8 <UTIL_SEQ_Run+0x1f0>)
 801938c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801938e:	4a51      	ldr	r2, [pc, #324]	@ (80194d4 <UTIL_SEQ_Run+0x1ec>)
 8019390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019392:	00db      	lsls	r3, r3, #3
 8019394:	4413      	add	r3, r2
 8019396:	685a      	ldr	r2, [r3, #4]
 8019398:	4b4f      	ldr	r3, [pc, #316]	@ (80194d8 <UTIL_SEQ_Run+0x1f0>)
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	2101      	movs	r1, #1
 801939e:	fa01 f303 	lsl.w	r3, r1, r3
 80193a2:	43db      	mvns	r3, r3
 80193a4:	401a      	ands	r2, r3
 80193a6:	494b      	ldr	r1, [pc, #300]	@ (80194d4 <UTIL_SEQ_Run+0x1ec>)
 80193a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80193aa:	00db      	lsls	r3, r3, #3
 80193ac:	440b      	add	r3, r1
 80193ae:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193b0:	f3ef 8310 	mrs	r3, PRIMASK
 80193b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80193b6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80193b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80193ba:	b672      	cpsid	i
}
 80193bc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80193be:	4b46      	ldr	r3, [pc, #280]	@ (80194d8 <UTIL_SEQ_Run+0x1f0>)
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	2201      	movs	r2, #1
 80193c4:	fa02 f303 	lsl.w	r3, r2, r3
 80193c8:	43da      	mvns	r2, r3
 80193ca:	4b3e      	ldr	r3, [pc, #248]	@ (80194c4 <UTIL_SEQ_Run+0x1dc>)
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	4013      	ands	r3, r2
 80193d0:	4a3c      	ldr	r2, [pc, #240]	@ (80194c4 <UTIL_SEQ_Run+0x1dc>)
 80193d2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80193d4:	2301      	movs	r3, #1
 80193d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80193d8:	e013      	b.n	8019402 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80193da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80193dc:	3b01      	subs	r3, #1
 80193de:	4a3d      	ldr	r2, [pc, #244]	@ (80194d4 <UTIL_SEQ_Run+0x1ec>)
 80193e0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80193e4:	4b3c      	ldr	r3, [pc, #240]	@ (80194d8 <UTIL_SEQ_Run+0x1f0>)
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	2201      	movs	r2, #1
 80193ea:	fa02 f303 	lsl.w	r3, r2, r3
 80193ee:	43da      	mvns	r2, r3
 80193f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80193f2:	3b01      	subs	r3, #1
 80193f4:	400a      	ands	r2, r1
 80193f6:	4937      	ldr	r1, [pc, #220]	@ (80194d4 <UTIL_SEQ_Run+0x1ec>)
 80193f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80193fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80193fe:	3b01      	subs	r3, #1
 8019400:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019404:	2b00      	cmp	r3, #0
 8019406:	d1e8      	bne.n	80193da <UTIL_SEQ_Run+0xf2>
 8019408:	6a3b      	ldr	r3, [r7, #32]
 801940a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801940c:	697b      	ldr	r3, [r7, #20]
 801940e:	f383 8810 	msr	PRIMASK, r3
}
 8019412:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8019414:	4b30      	ldr	r3, [pc, #192]	@ (80194d8 <UTIL_SEQ_Run+0x1f0>)
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	4a30      	ldr	r2, [pc, #192]	@ (80194dc <UTIL_SEQ_Run+0x1f4>)
 801941a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801941e:	4798      	blx	r3

    local_taskset = TaskSet;
 8019420:	4b28      	ldr	r3, [pc, #160]	@ (80194c4 <UTIL_SEQ_Run+0x1dc>)
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8019426:	4b28      	ldr	r3, [pc, #160]	@ (80194c8 <UTIL_SEQ_Run+0x1e0>)
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801942c:	4b27      	ldr	r3, [pc, #156]	@ (80194cc <UTIL_SEQ_Run+0x1e4>)
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8019432:	4b27      	ldr	r3, [pc, #156]	@ (80194d0 <UTIL_SEQ_Run+0x1e8>)
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019438:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801943a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801943c:	401a      	ands	r2, r3
 801943e:	4b20      	ldr	r3, [pc, #128]	@ (80194c0 <UTIL_SEQ_Run+0x1d8>)
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	4013      	ands	r3, r2
 8019444:	2b00      	cmp	r3, #0
 8019446:	d005      	beq.n	8019454 <UTIL_SEQ_Run+0x16c>
 8019448:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801944a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801944c:	4013      	ands	r3, r2
 801944e:	2b00      	cmp	r3, #0
 8019450:	f43f af64 	beq.w	801931c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8019454:	4b20      	ldr	r3, [pc, #128]	@ (80194d8 <UTIL_SEQ_Run+0x1f0>)
 8019456:	f04f 32ff 	mov.w	r2, #4294967295
 801945a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801945c:	f000 f938 	bl	80196d0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019460:	f3ef 8310 	mrs	r3, PRIMASK
 8019464:	613b      	str	r3, [r7, #16]
  return(result);
 8019466:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8019468:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801946a:	b672      	cpsid	i
}
 801946c:	bf00      	nop
  local_taskset = TaskSet;
 801946e:	4b15      	ldr	r3, [pc, #84]	@ (80194c4 <UTIL_SEQ_Run+0x1dc>)
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019474:	4b14      	ldr	r3, [pc, #80]	@ (80194c8 <UTIL_SEQ_Run+0x1e0>)
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801947a:	4b14      	ldr	r3, [pc, #80]	@ (80194cc <UTIL_SEQ_Run+0x1e4>)
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8019480:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019484:	401a      	ands	r2, r3
 8019486:	4b0e      	ldr	r3, [pc, #56]	@ (80194c0 <UTIL_SEQ_Run+0x1d8>)
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	4013      	ands	r3, r2
 801948c:	2b00      	cmp	r3, #0
 801948e:	d107      	bne.n	80194a0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8019490:	4b0f      	ldr	r3, [pc, #60]	@ (80194d0 <UTIL_SEQ_Run+0x1e8>)
 8019492:	681a      	ldr	r2, [r3, #0]
 8019494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019496:	4013      	ands	r3, r2
 8019498:	2b00      	cmp	r3, #0
 801949a:	d101      	bne.n	80194a0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801949c:	f7e8 fb34 	bl	8001b08 <UTIL_SEQ_Idle>
 80194a0:	69fb      	ldr	r3, [r7, #28]
 80194a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	f383 8810 	msr	PRIMASK, r3
}
 80194aa:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80194ac:	f000 f917 	bl	80196de <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80194b0:	4a03      	ldr	r2, [pc, #12]	@ (80194c0 <UTIL_SEQ_Run+0x1d8>)
 80194b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194b4:	6013      	str	r3, [r2, #0]

  return;
 80194b6:	bf00      	nop
}
 80194b8:	3740      	adds	r7, #64	@ 0x40
 80194ba:	46bd      	mov	sp, r7
 80194bc:	bd80      	pop	{r7, pc}
 80194be:	bf00      	nop
 80194c0:	20000148 	.word	0x20000148
 80194c4:	20002e68 	.word	0x20002e68
 80194c8:	20002e6c 	.word	0x20002e6c
 80194cc:	20000144 	.word	0x20000144
 80194d0:	20002e70 	.word	0x20002e70
 80194d4:	20002ef8 	.word	0x20002ef8
 80194d8:	20002e74 	.word	0x20002e74
 80194dc:	20002e78 	.word	0x20002e78

080194e0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80194e0:	b580      	push	{r7, lr}
 80194e2:	b088      	sub	sp, #32
 80194e4:	af00      	add	r7, sp, #0
 80194e6:	60f8      	str	r0, [r7, #12]
 80194e8:	60b9      	str	r1, [r7, #8]
 80194ea:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80194ec:	f3ef 8310 	mrs	r3, PRIMASK
 80194f0:	617b      	str	r3, [r7, #20]
  return(result);
 80194f2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80194f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80194f6:	b672      	cpsid	i
}
 80194f8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80194fa:	68f8      	ldr	r0, [r7, #12]
 80194fc:	f000 f8f6 	bl	80196ec <SEQ_BitPosition>
 8019500:	4603      	mov	r3, r0
 8019502:	4619      	mov	r1, r3
 8019504:	4a06      	ldr	r2, [pc, #24]	@ (8019520 <UTIL_SEQ_RegTask+0x40>)
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801950c:	69fb      	ldr	r3, [r7, #28]
 801950e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019510:	69bb      	ldr	r3, [r7, #24]
 8019512:	f383 8810 	msr	PRIMASK, r3
}
 8019516:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019518:	bf00      	nop
}
 801951a:	3720      	adds	r7, #32
 801951c:	46bd      	mov	sp, r7
 801951e:	bd80      	pop	{r7, pc}
 8019520:	20002e78 	.word	0x20002e78

08019524 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8019524:	b480      	push	{r7}
 8019526:	b087      	sub	sp, #28
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
 801952c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801952e:	f3ef 8310 	mrs	r3, PRIMASK
 8019532:	60fb      	str	r3, [r7, #12]
  return(result);
 8019534:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019536:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019538:	b672      	cpsid	i
}
 801953a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801953c:	4b0d      	ldr	r3, [pc, #52]	@ (8019574 <UTIL_SEQ_SetTask+0x50>)
 801953e:	681a      	ldr	r2, [r3, #0]
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	4313      	orrs	r3, r2
 8019544:	4a0b      	ldr	r2, [pc, #44]	@ (8019574 <UTIL_SEQ_SetTask+0x50>)
 8019546:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8019548:	4a0b      	ldr	r2, [pc, #44]	@ (8019578 <UTIL_SEQ_SetTask+0x54>)
 801954a:	683b      	ldr	r3, [r7, #0]
 801954c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	431a      	orrs	r2, r3
 8019554:	4908      	ldr	r1, [pc, #32]	@ (8019578 <UTIL_SEQ_SetTask+0x54>)
 8019556:	683b      	ldr	r3, [r7, #0]
 8019558:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801955c:	697b      	ldr	r3, [r7, #20]
 801955e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019560:	693b      	ldr	r3, [r7, #16]
 8019562:	f383 8810 	msr	PRIMASK, r3
}
 8019566:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019568:	bf00      	nop
}
 801956a:	371c      	adds	r7, #28
 801956c:	46bd      	mov	sp, r7
 801956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019572:	4770      	bx	lr
 8019574:	20002e68 	.word	0x20002e68
 8019578:	20002ef8 	.word	0x20002ef8

0801957c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801957c:	b480      	push	{r7}
 801957e:	b087      	sub	sp, #28
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019584:	f3ef 8310 	mrs	r3, PRIMASK
 8019588:	60fb      	str	r3, [r7, #12]
  return(result);
 801958a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801958c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801958e:	b672      	cpsid	i
}
 8019590:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	43da      	mvns	r2, r3
 8019596:	4b08      	ldr	r3, [pc, #32]	@ (80195b8 <UTIL_SEQ_PauseTask+0x3c>)
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	4013      	ands	r3, r2
 801959c:	4a06      	ldr	r2, [pc, #24]	@ (80195b8 <UTIL_SEQ_PauseTask+0x3c>)
 801959e:	6013      	str	r3, [r2, #0]
 80195a0:	697b      	ldr	r3, [r7, #20]
 80195a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195a4:	693b      	ldr	r3, [r7, #16]
 80195a6:	f383 8810 	msr	PRIMASK, r3
}
 80195aa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80195ac:	bf00      	nop
}
 80195ae:	371c      	adds	r7, #28
 80195b0:	46bd      	mov	sp, r7
 80195b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b6:	4770      	bx	lr
 80195b8:	20000144 	.word	0x20000144

080195bc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80195bc:	b480      	push	{r7}
 80195be:	b087      	sub	sp, #28
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80195c4:	f3ef 8310 	mrs	r3, PRIMASK
 80195c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80195ca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80195cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80195ce:	b672      	cpsid	i
}
 80195d0:	bf00      	nop

  TaskMask |= TaskId_bm;
 80195d2:	4b09      	ldr	r3, [pc, #36]	@ (80195f8 <UTIL_SEQ_ResumeTask+0x3c>)
 80195d4:	681a      	ldr	r2, [r3, #0]
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	4313      	orrs	r3, r2
 80195da:	4a07      	ldr	r2, [pc, #28]	@ (80195f8 <UTIL_SEQ_ResumeTask+0x3c>)
 80195dc:	6013      	str	r3, [r2, #0]
 80195de:	697b      	ldr	r3, [r7, #20]
 80195e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195e2:	693b      	ldr	r3, [r7, #16]
 80195e4:	f383 8810 	msr	PRIMASK, r3
}
 80195e8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80195ea:	bf00      	nop
}
 80195ec:	371c      	adds	r7, #28
 80195ee:	46bd      	mov	sp, r7
 80195f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f4:	4770      	bx	lr
 80195f6:	bf00      	nop
 80195f8:	20000144 	.word	0x20000144

080195fc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80195fc:	b480      	push	{r7}
 80195fe:	b087      	sub	sp, #28
 8019600:	af00      	add	r7, sp, #0
 8019602:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019604:	f3ef 8310 	mrs	r3, PRIMASK
 8019608:	60fb      	str	r3, [r7, #12]
  return(result);
 801960a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801960c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801960e:	b672      	cpsid	i
}
 8019610:	bf00      	nop

  EvtSet |= EvtId_bm;
 8019612:	4b09      	ldr	r3, [pc, #36]	@ (8019638 <UTIL_SEQ_SetEvt+0x3c>)
 8019614:	681a      	ldr	r2, [r3, #0]
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	4313      	orrs	r3, r2
 801961a:	4a07      	ldr	r2, [pc, #28]	@ (8019638 <UTIL_SEQ_SetEvt+0x3c>)
 801961c:	6013      	str	r3, [r2, #0]
 801961e:	697b      	ldr	r3, [r7, #20]
 8019620:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019622:	693b      	ldr	r3, [r7, #16]
 8019624:	f383 8810 	msr	PRIMASK, r3
}
 8019628:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801962a:	bf00      	nop
}
 801962c:	371c      	adds	r7, #28
 801962e:	46bd      	mov	sp, r7
 8019630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019634:	4770      	bx	lr
 8019636:	bf00      	nop
 8019638:	20002e6c 	.word	0x20002e6c

0801963c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801963c:	b580      	push	{r7, lr}
 801963e:	b088      	sub	sp, #32
 8019640:	af00      	add	r7, sp, #0
 8019642:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8019644:	4b1f      	ldr	r3, [pc, #124]	@ (80196c4 <UTIL_SEQ_WaitEvt+0x88>)
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801964a:	4b1e      	ldr	r3, [pc, #120]	@ (80196c4 <UTIL_SEQ_WaitEvt+0x88>)
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019652:	d102      	bne.n	801965a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8019654:	2300      	movs	r3, #0
 8019656:	61fb      	str	r3, [r7, #28]
 8019658:	e005      	b.n	8019666 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801965a:	4b1a      	ldr	r3, [pc, #104]	@ (80196c4 <UTIL_SEQ_WaitEvt+0x88>)
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	2201      	movs	r2, #1
 8019660:	fa02 f303 	lsl.w	r3, r2, r3
 8019664:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8019666:	4b18      	ldr	r3, [pc, #96]	@ (80196c8 <UTIL_SEQ_WaitEvt+0x8c>)
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 801966c:	4a16      	ldr	r2, [pc, #88]	@ (80196c8 <UTIL_SEQ_WaitEvt+0x8c>)
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8019672:	e003      	b.n	801967c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8019674:	6879      	ldr	r1, [r7, #4]
 8019676:	69f8      	ldr	r0, [r7, #28]
 8019678:	f7e8 fa4d 	bl	8001b16 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 801967c:	4b13      	ldr	r3, [pc, #76]	@ (80196cc <UTIL_SEQ_WaitEvt+0x90>)
 801967e:	681a      	ldr	r2, [r3, #0]
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	4013      	ands	r3, r2
 8019684:	2b00      	cmp	r3, #0
 8019686:	d0f5      	beq.n	8019674 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8019688:	4a0e      	ldr	r2, [pc, #56]	@ (80196c4 <UTIL_SEQ_WaitEvt+0x88>)
 801968a:	69bb      	ldr	r3, [r7, #24]
 801968c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801968e:	f3ef 8310 	mrs	r3, PRIMASK
 8019692:	60bb      	str	r3, [r7, #8]
  return(result);
 8019694:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019696:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019698:	b672      	cpsid	i
}
 801969a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	43da      	mvns	r2, r3
 80196a0:	4b0a      	ldr	r3, [pc, #40]	@ (80196cc <UTIL_SEQ_WaitEvt+0x90>)
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	4013      	ands	r3, r2
 80196a6:	4a09      	ldr	r2, [pc, #36]	@ (80196cc <UTIL_SEQ_WaitEvt+0x90>)
 80196a8:	6013      	str	r3, [r2, #0]
 80196aa:	693b      	ldr	r3, [r7, #16]
 80196ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	f383 8810 	msr	PRIMASK, r3
}
 80196b4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80196b6:	4a04      	ldr	r2, [pc, #16]	@ (80196c8 <UTIL_SEQ_WaitEvt+0x8c>)
 80196b8:	697b      	ldr	r3, [r7, #20]
 80196ba:	6013      	str	r3, [r2, #0]
  return;
 80196bc:	bf00      	nop
}
 80196be:	3720      	adds	r7, #32
 80196c0:	46bd      	mov	sp, r7
 80196c2:	bd80      	pop	{r7, pc}
 80196c4:	20002e74 	.word	0x20002e74
 80196c8:	20002e70 	.word	0x20002e70
 80196cc:	20002e6c 	.word	0x20002e6c

080196d0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80196d0:	b480      	push	{r7}
 80196d2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80196d4:	bf00      	nop
}
 80196d6:	46bd      	mov	sp, r7
 80196d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196dc:	4770      	bx	lr

080196de <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80196de:	b480      	push	{r7}
 80196e0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80196e2:	bf00      	nop
}
 80196e4:	46bd      	mov	sp, r7
 80196e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ea:	4770      	bx	lr

080196ec <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80196ec:	b480      	push	{r7}
 80196ee:	b085      	sub	sp, #20
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	6078      	str	r0, [r7, #4]
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d101      	bne.n	8019702 <SEQ_BitPosition+0x16>
    return 32U;
 80196fe:	2320      	movs	r3, #32
 8019700:	e003      	b.n	801970a <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	fab3 f383 	clz	r3, r3
 8019708:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 801970a:	f1c3 031f 	rsb	r3, r3, #31
 801970e:	b2db      	uxtb	r3, r3
}
 8019710:	4618      	mov	r0, r3
 8019712:	3714      	adds	r7, #20
 8019714:	46bd      	mov	sp, r7
 8019716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801971a:	4770      	bx	lr

0801971c <atoi>:
 801971c:	220a      	movs	r2, #10
 801971e:	2100      	movs	r1, #0
 8019720:	f000 bfa8 	b.w	801a674 <strtol>

08019724 <malloc>:
 8019724:	4b02      	ldr	r3, [pc, #8]	@ (8019730 <malloc+0xc>)
 8019726:	4601      	mov	r1, r0
 8019728:	6818      	ldr	r0, [r3, #0]
 801972a:	f000 b82d 	b.w	8019788 <_malloc_r>
 801972e:	bf00      	nop
 8019730:	200002c4 	.word	0x200002c4

08019734 <free>:
 8019734:	4b02      	ldr	r3, [pc, #8]	@ (8019740 <free+0xc>)
 8019736:	4601      	mov	r1, r0
 8019738:	6818      	ldr	r0, [r3, #0]
 801973a:	f002 bf0d 	b.w	801c558 <_free_r>
 801973e:	bf00      	nop
 8019740:	200002c4 	.word	0x200002c4

08019744 <sbrk_aligned>:
 8019744:	b570      	push	{r4, r5, r6, lr}
 8019746:	4e0f      	ldr	r6, [pc, #60]	@ (8019784 <sbrk_aligned+0x40>)
 8019748:	460c      	mov	r4, r1
 801974a:	6831      	ldr	r1, [r6, #0]
 801974c:	4605      	mov	r5, r0
 801974e:	b911      	cbnz	r1, 8019756 <sbrk_aligned+0x12>
 8019750:	f002 f824 	bl	801b79c <_sbrk_r>
 8019754:	6030      	str	r0, [r6, #0]
 8019756:	4621      	mov	r1, r4
 8019758:	4628      	mov	r0, r5
 801975a:	f002 f81f 	bl	801b79c <_sbrk_r>
 801975e:	1c43      	adds	r3, r0, #1
 8019760:	d103      	bne.n	801976a <sbrk_aligned+0x26>
 8019762:	f04f 34ff 	mov.w	r4, #4294967295
 8019766:	4620      	mov	r0, r4
 8019768:	bd70      	pop	{r4, r5, r6, pc}
 801976a:	1cc4      	adds	r4, r0, #3
 801976c:	f024 0403 	bic.w	r4, r4, #3
 8019770:	42a0      	cmp	r0, r4
 8019772:	d0f8      	beq.n	8019766 <sbrk_aligned+0x22>
 8019774:	1a21      	subs	r1, r4, r0
 8019776:	4628      	mov	r0, r5
 8019778:	f002 f810 	bl	801b79c <_sbrk_r>
 801977c:	3001      	adds	r0, #1
 801977e:	d1f2      	bne.n	8019766 <sbrk_aligned+0x22>
 8019780:	e7ef      	b.n	8019762 <sbrk_aligned+0x1e>
 8019782:	bf00      	nop
 8019784:	20002f00 	.word	0x20002f00

08019788 <_malloc_r>:
 8019788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801978c:	1ccd      	adds	r5, r1, #3
 801978e:	f025 0503 	bic.w	r5, r5, #3
 8019792:	3508      	adds	r5, #8
 8019794:	2d0c      	cmp	r5, #12
 8019796:	bf38      	it	cc
 8019798:	250c      	movcc	r5, #12
 801979a:	2d00      	cmp	r5, #0
 801979c:	4606      	mov	r6, r0
 801979e:	db01      	blt.n	80197a4 <_malloc_r+0x1c>
 80197a0:	42a9      	cmp	r1, r5
 80197a2:	d904      	bls.n	80197ae <_malloc_r+0x26>
 80197a4:	230c      	movs	r3, #12
 80197a6:	6033      	str	r3, [r6, #0]
 80197a8:	2000      	movs	r0, #0
 80197aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019884 <_malloc_r+0xfc>
 80197b2:	f000 f869 	bl	8019888 <__malloc_lock>
 80197b6:	f8d8 3000 	ldr.w	r3, [r8]
 80197ba:	461c      	mov	r4, r3
 80197bc:	bb44      	cbnz	r4, 8019810 <_malloc_r+0x88>
 80197be:	4629      	mov	r1, r5
 80197c0:	4630      	mov	r0, r6
 80197c2:	f7ff ffbf 	bl	8019744 <sbrk_aligned>
 80197c6:	1c43      	adds	r3, r0, #1
 80197c8:	4604      	mov	r4, r0
 80197ca:	d158      	bne.n	801987e <_malloc_r+0xf6>
 80197cc:	f8d8 4000 	ldr.w	r4, [r8]
 80197d0:	4627      	mov	r7, r4
 80197d2:	2f00      	cmp	r7, #0
 80197d4:	d143      	bne.n	801985e <_malloc_r+0xd6>
 80197d6:	2c00      	cmp	r4, #0
 80197d8:	d04b      	beq.n	8019872 <_malloc_r+0xea>
 80197da:	6823      	ldr	r3, [r4, #0]
 80197dc:	4639      	mov	r1, r7
 80197de:	4630      	mov	r0, r6
 80197e0:	eb04 0903 	add.w	r9, r4, r3
 80197e4:	f001 ffda 	bl	801b79c <_sbrk_r>
 80197e8:	4581      	cmp	r9, r0
 80197ea:	d142      	bne.n	8019872 <_malloc_r+0xea>
 80197ec:	6821      	ldr	r1, [r4, #0]
 80197ee:	1a6d      	subs	r5, r5, r1
 80197f0:	4629      	mov	r1, r5
 80197f2:	4630      	mov	r0, r6
 80197f4:	f7ff ffa6 	bl	8019744 <sbrk_aligned>
 80197f8:	3001      	adds	r0, #1
 80197fa:	d03a      	beq.n	8019872 <_malloc_r+0xea>
 80197fc:	6823      	ldr	r3, [r4, #0]
 80197fe:	442b      	add	r3, r5
 8019800:	6023      	str	r3, [r4, #0]
 8019802:	f8d8 3000 	ldr.w	r3, [r8]
 8019806:	685a      	ldr	r2, [r3, #4]
 8019808:	bb62      	cbnz	r2, 8019864 <_malloc_r+0xdc>
 801980a:	f8c8 7000 	str.w	r7, [r8]
 801980e:	e00f      	b.n	8019830 <_malloc_r+0xa8>
 8019810:	6822      	ldr	r2, [r4, #0]
 8019812:	1b52      	subs	r2, r2, r5
 8019814:	d420      	bmi.n	8019858 <_malloc_r+0xd0>
 8019816:	2a0b      	cmp	r2, #11
 8019818:	d917      	bls.n	801984a <_malloc_r+0xc2>
 801981a:	1961      	adds	r1, r4, r5
 801981c:	42a3      	cmp	r3, r4
 801981e:	6025      	str	r5, [r4, #0]
 8019820:	bf18      	it	ne
 8019822:	6059      	strne	r1, [r3, #4]
 8019824:	6863      	ldr	r3, [r4, #4]
 8019826:	bf08      	it	eq
 8019828:	f8c8 1000 	streq.w	r1, [r8]
 801982c:	5162      	str	r2, [r4, r5]
 801982e:	604b      	str	r3, [r1, #4]
 8019830:	4630      	mov	r0, r6
 8019832:	f000 f82f 	bl	8019894 <__malloc_unlock>
 8019836:	f104 000b 	add.w	r0, r4, #11
 801983a:	1d23      	adds	r3, r4, #4
 801983c:	f020 0007 	bic.w	r0, r0, #7
 8019840:	1ac2      	subs	r2, r0, r3
 8019842:	bf1c      	itt	ne
 8019844:	1a1b      	subne	r3, r3, r0
 8019846:	50a3      	strne	r3, [r4, r2]
 8019848:	e7af      	b.n	80197aa <_malloc_r+0x22>
 801984a:	6862      	ldr	r2, [r4, #4]
 801984c:	42a3      	cmp	r3, r4
 801984e:	bf0c      	ite	eq
 8019850:	f8c8 2000 	streq.w	r2, [r8]
 8019854:	605a      	strne	r2, [r3, #4]
 8019856:	e7eb      	b.n	8019830 <_malloc_r+0xa8>
 8019858:	4623      	mov	r3, r4
 801985a:	6864      	ldr	r4, [r4, #4]
 801985c:	e7ae      	b.n	80197bc <_malloc_r+0x34>
 801985e:	463c      	mov	r4, r7
 8019860:	687f      	ldr	r7, [r7, #4]
 8019862:	e7b6      	b.n	80197d2 <_malloc_r+0x4a>
 8019864:	461a      	mov	r2, r3
 8019866:	685b      	ldr	r3, [r3, #4]
 8019868:	42a3      	cmp	r3, r4
 801986a:	d1fb      	bne.n	8019864 <_malloc_r+0xdc>
 801986c:	2300      	movs	r3, #0
 801986e:	6053      	str	r3, [r2, #4]
 8019870:	e7de      	b.n	8019830 <_malloc_r+0xa8>
 8019872:	230c      	movs	r3, #12
 8019874:	6033      	str	r3, [r6, #0]
 8019876:	4630      	mov	r0, r6
 8019878:	f000 f80c 	bl	8019894 <__malloc_unlock>
 801987c:	e794      	b.n	80197a8 <_malloc_r+0x20>
 801987e:	6005      	str	r5, [r0, #0]
 8019880:	e7d6      	b.n	8019830 <_malloc_r+0xa8>
 8019882:	bf00      	nop
 8019884:	20002f04 	.word	0x20002f04

08019888 <__malloc_lock>:
 8019888:	4801      	ldr	r0, [pc, #4]	@ (8019890 <__malloc_lock+0x8>)
 801988a:	f001 bfd4 	b.w	801b836 <__retarget_lock_acquire_recursive>
 801988e:	bf00      	nop
 8019890:	20003048 	.word	0x20003048

08019894 <__malloc_unlock>:
 8019894:	4801      	ldr	r0, [pc, #4]	@ (801989c <__malloc_unlock+0x8>)
 8019896:	f001 bfcf 	b.w	801b838 <__retarget_lock_release_recursive>
 801989a:	bf00      	nop
 801989c:	20003048 	.word	0x20003048

080198a0 <sulp>:
 80198a0:	b570      	push	{r4, r5, r6, lr}
 80198a2:	4604      	mov	r4, r0
 80198a4:	460d      	mov	r5, r1
 80198a6:	ec45 4b10 	vmov	d0, r4, r5
 80198aa:	4616      	mov	r6, r2
 80198ac:	f003 fd5e 	bl	801d36c <__ulp>
 80198b0:	ec51 0b10 	vmov	r0, r1, d0
 80198b4:	b17e      	cbz	r6, 80198d6 <sulp+0x36>
 80198b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80198ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80198be:	2b00      	cmp	r3, #0
 80198c0:	dd09      	ble.n	80198d6 <sulp+0x36>
 80198c2:	051b      	lsls	r3, r3, #20
 80198c4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80198c8:	2400      	movs	r4, #0
 80198ca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80198ce:	4622      	mov	r2, r4
 80198d0:	462b      	mov	r3, r5
 80198d2:	f7e6 fe69 	bl	80005a8 <__aeabi_dmul>
 80198d6:	ec41 0b10 	vmov	d0, r0, r1
 80198da:	bd70      	pop	{r4, r5, r6, pc}
 80198dc:	0000      	movs	r0, r0
	...

080198e0 <_strtod_l>:
 80198e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198e4:	b09f      	sub	sp, #124	@ 0x7c
 80198e6:	460c      	mov	r4, r1
 80198e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80198ea:	2200      	movs	r2, #0
 80198ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80198ee:	9005      	str	r0, [sp, #20]
 80198f0:	f04f 0a00 	mov.w	sl, #0
 80198f4:	f04f 0b00 	mov.w	fp, #0
 80198f8:	460a      	mov	r2, r1
 80198fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80198fc:	7811      	ldrb	r1, [r2, #0]
 80198fe:	292b      	cmp	r1, #43	@ 0x2b
 8019900:	d04a      	beq.n	8019998 <_strtod_l+0xb8>
 8019902:	d838      	bhi.n	8019976 <_strtod_l+0x96>
 8019904:	290d      	cmp	r1, #13
 8019906:	d832      	bhi.n	801996e <_strtod_l+0x8e>
 8019908:	2908      	cmp	r1, #8
 801990a:	d832      	bhi.n	8019972 <_strtod_l+0x92>
 801990c:	2900      	cmp	r1, #0
 801990e:	d03b      	beq.n	8019988 <_strtod_l+0xa8>
 8019910:	2200      	movs	r2, #0
 8019912:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019914:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8019916:	782a      	ldrb	r2, [r5, #0]
 8019918:	2a30      	cmp	r2, #48	@ 0x30
 801991a:	f040 80b3 	bne.w	8019a84 <_strtod_l+0x1a4>
 801991e:	786a      	ldrb	r2, [r5, #1]
 8019920:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019924:	2a58      	cmp	r2, #88	@ 0x58
 8019926:	d16e      	bne.n	8019a06 <_strtod_l+0x126>
 8019928:	9302      	str	r3, [sp, #8]
 801992a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801992c:	9301      	str	r3, [sp, #4]
 801992e:	ab1a      	add	r3, sp, #104	@ 0x68
 8019930:	9300      	str	r3, [sp, #0]
 8019932:	4a8e      	ldr	r2, [pc, #568]	@ (8019b6c <_strtod_l+0x28c>)
 8019934:	9805      	ldr	r0, [sp, #20]
 8019936:	ab1b      	add	r3, sp, #108	@ 0x6c
 8019938:	a919      	add	r1, sp, #100	@ 0x64
 801993a:	f002 febf 	bl	801c6bc <__gethex>
 801993e:	f010 060f 	ands.w	r6, r0, #15
 8019942:	4604      	mov	r4, r0
 8019944:	d005      	beq.n	8019952 <_strtod_l+0x72>
 8019946:	2e06      	cmp	r6, #6
 8019948:	d128      	bne.n	801999c <_strtod_l+0xbc>
 801994a:	3501      	adds	r5, #1
 801994c:	2300      	movs	r3, #0
 801994e:	9519      	str	r5, [sp, #100]	@ 0x64
 8019950:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019952:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019954:	2b00      	cmp	r3, #0
 8019956:	f040 858e 	bne.w	801a476 <_strtod_l+0xb96>
 801995a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801995c:	b1cb      	cbz	r3, 8019992 <_strtod_l+0xb2>
 801995e:	4652      	mov	r2, sl
 8019960:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8019964:	ec43 2b10 	vmov	d0, r2, r3
 8019968:	b01f      	add	sp, #124	@ 0x7c
 801996a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801996e:	2920      	cmp	r1, #32
 8019970:	d1ce      	bne.n	8019910 <_strtod_l+0x30>
 8019972:	3201      	adds	r2, #1
 8019974:	e7c1      	b.n	80198fa <_strtod_l+0x1a>
 8019976:	292d      	cmp	r1, #45	@ 0x2d
 8019978:	d1ca      	bne.n	8019910 <_strtod_l+0x30>
 801997a:	2101      	movs	r1, #1
 801997c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801997e:	1c51      	adds	r1, r2, #1
 8019980:	9119      	str	r1, [sp, #100]	@ 0x64
 8019982:	7852      	ldrb	r2, [r2, #1]
 8019984:	2a00      	cmp	r2, #0
 8019986:	d1c5      	bne.n	8019914 <_strtod_l+0x34>
 8019988:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801998a:	9419      	str	r4, [sp, #100]	@ 0x64
 801998c:	2b00      	cmp	r3, #0
 801998e:	f040 8570 	bne.w	801a472 <_strtod_l+0xb92>
 8019992:	4652      	mov	r2, sl
 8019994:	465b      	mov	r3, fp
 8019996:	e7e5      	b.n	8019964 <_strtod_l+0x84>
 8019998:	2100      	movs	r1, #0
 801999a:	e7ef      	b.n	801997c <_strtod_l+0x9c>
 801999c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801999e:	b13a      	cbz	r2, 80199b0 <_strtod_l+0xd0>
 80199a0:	2135      	movs	r1, #53	@ 0x35
 80199a2:	a81c      	add	r0, sp, #112	@ 0x70
 80199a4:	f003 fddc 	bl	801d560 <__copybits>
 80199a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80199aa:	9805      	ldr	r0, [sp, #20]
 80199ac:	f003 f9aa 	bl	801cd04 <_Bfree>
 80199b0:	3e01      	subs	r6, #1
 80199b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80199b4:	2e04      	cmp	r6, #4
 80199b6:	d806      	bhi.n	80199c6 <_strtod_l+0xe6>
 80199b8:	e8df f006 	tbb	[pc, r6]
 80199bc:	201d0314 	.word	0x201d0314
 80199c0:	14          	.byte	0x14
 80199c1:	00          	.byte	0x00
 80199c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80199c6:	05e1      	lsls	r1, r4, #23
 80199c8:	bf48      	it	mi
 80199ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80199ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80199d2:	0d1b      	lsrs	r3, r3, #20
 80199d4:	051b      	lsls	r3, r3, #20
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d1bb      	bne.n	8019952 <_strtod_l+0x72>
 80199da:	f001 ff01 	bl	801b7e0 <__errno>
 80199de:	2322      	movs	r3, #34	@ 0x22
 80199e0:	6003      	str	r3, [r0, #0]
 80199e2:	e7b6      	b.n	8019952 <_strtod_l+0x72>
 80199e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80199e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80199ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80199f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80199f4:	e7e7      	b.n	80199c6 <_strtod_l+0xe6>
 80199f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8019b74 <_strtod_l+0x294>
 80199fa:	e7e4      	b.n	80199c6 <_strtod_l+0xe6>
 80199fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8019a00:	f04f 3aff 	mov.w	sl, #4294967295
 8019a04:	e7df      	b.n	80199c6 <_strtod_l+0xe6>
 8019a06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019a08:	1c5a      	adds	r2, r3, #1
 8019a0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8019a0c:	785b      	ldrb	r3, [r3, #1]
 8019a0e:	2b30      	cmp	r3, #48	@ 0x30
 8019a10:	d0f9      	beq.n	8019a06 <_strtod_l+0x126>
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d09d      	beq.n	8019952 <_strtod_l+0x72>
 8019a16:	2301      	movs	r3, #1
 8019a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8019a1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019a1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8019a1e:	2300      	movs	r3, #0
 8019a20:	9308      	str	r3, [sp, #32]
 8019a22:	930a      	str	r3, [sp, #40]	@ 0x28
 8019a24:	461f      	mov	r7, r3
 8019a26:	220a      	movs	r2, #10
 8019a28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8019a2a:	7805      	ldrb	r5, [r0, #0]
 8019a2c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8019a30:	b2d9      	uxtb	r1, r3
 8019a32:	2909      	cmp	r1, #9
 8019a34:	d928      	bls.n	8019a88 <_strtod_l+0x1a8>
 8019a36:	494e      	ldr	r1, [pc, #312]	@ (8019b70 <_strtod_l+0x290>)
 8019a38:	2201      	movs	r2, #1
 8019a3a:	f001 fdf2 	bl	801b622 <strncmp>
 8019a3e:	2800      	cmp	r0, #0
 8019a40:	d032      	beq.n	8019aa8 <_strtod_l+0x1c8>
 8019a42:	2000      	movs	r0, #0
 8019a44:	462a      	mov	r2, r5
 8019a46:	4681      	mov	r9, r0
 8019a48:	463d      	mov	r5, r7
 8019a4a:	4603      	mov	r3, r0
 8019a4c:	2a65      	cmp	r2, #101	@ 0x65
 8019a4e:	d001      	beq.n	8019a54 <_strtod_l+0x174>
 8019a50:	2a45      	cmp	r2, #69	@ 0x45
 8019a52:	d114      	bne.n	8019a7e <_strtod_l+0x19e>
 8019a54:	b91d      	cbnz	r5, 8019a5e <_strtod_l+0x17e>
 8019a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019a58:	4302      	orrs	r2, r0
 8019a5a:	d095      	beq.n	8019988 <_strtod_l+0xa8>
 8019a5c:	2500      	movs	r5, #0
 8019a5e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8019a60:	1c62      	adds	r2, r4, #1
 8019a62:	9219      	str	r2, [sp, #100]	@ 0x64
 8019a64:	7862      	ldrb	r2, [r4, #1]
 8019a66:	2a2b      	cmp	r2, #43	@ 0x2b
 8019a68:	d077      	beq.n	8019b5a <_strtod_l+0x27a>
 8019a6a:	2a2d      	cmp	r2, #45	@ 0x2d
 8019a6c:	d07b      	beq.n	8019b66 <_strtod_l+0x286>
 8019a6e:	f04f 0c00 	mov.w	ip, #0
 8019a72:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8019a76:	2909      	cmp	r1, #9
 8019a78:	f240 8082 	bls.w	8019b80 <_strtod_l+0x2a0>
 8019a7c:	9419      	str	r4, [sp, #100]	@ 0x64
 8019a7e:	f04f 0800 	mov.w	r8, #0
 8019a82:	e0a2      	b.n	8019bca <_strtod_l+0x2ea>
 8019a84:	2300      	movs	r3, #0
 8019a86:	e7c7      	b.n	8019a18 <_strtod_l+0x138>
 8019a88:	2f08      	cmp	r7, #8
 8019a8a:	bfd5      	itete	le
 8019a8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8019a8e:	9908      	ldrgt	r1, [sp, #32]
 8019a90:	fb02 3301 	mlale	r3, r2, r1, r3
 8019a94:	fb02 3301 	mlagt	r3, r2, r1, r3
 8019a98:	f100 0001 	add.w	r0, r0, #1
 8019a9c:	bfd4      	ite	le
 8019a9e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8019aa0:	9308      	strgt	r3, [sp, #32]
 8019aa2:	3701      	adds	r7, #1
 8019aa4:	9019      	str	r0, [sp, #100]	@ 0x64
 8019aa6:	e7bf      	b.n	8019a28 <_strtod_l+0x148>
 8019aa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019aaa:	1c5a      	adds	r2, r3, #1
 8019aac:	9219      	str	r2, [sp, #100]	@ 0x64
 8019aae:	785a      	ldrb	r2, [r3, #1]
 8019ab0:	b37f      	cbz	r7, 8019b12 <_strtod_l+0x232>
 8019ab2:	4681      	mov	r9, r0
 8019ab4:	463d      	mov	r5, r7
 8019ab6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8019aba:	2b09      	cmp	r3, #9
 8019abc:	d912      	bls.n	8019ae4 <_strtod_l+0x204>
 8019abe:	2301      	movs	r3, #1
 8019ac0:	e7c4      	b.n	8019a4c <_strtod_l+0x16c>
 8019ac2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019ac4:	1c5a      	adds	r2, r3, #1
 8019ac6:	9219      	str	r2, [sp, #100]	@ 0x64
 8019ac8:	785a      	ldrb	r2, [r3, #1]
 8019aca:	3001      	adds	r0, #1
 8019acc:	2a30      	cmp	r2, #48	@ 0x30
 8019ace:	d0f8      	beq.n	8019ac2 <_strtod_l+0x1e2>
 8019ad0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8019ad4:	2b08      	cmp	r3, #8
 8019ad6:	f200 84d3 	bhi.w	801a480 <_strtod_l+0xba0>
 8019ada:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019adc:	930c      	str	r3, [sp, #48]	@ 0x30
 8019ade:	4681      	mov	r9, r0
 8019ae0:	2000      	movs	r0, #0
 8019ae2:	4605      	mov	r5, r0
 8019ae4:	3a30      	subs	r2, #48	@ 0x30
 8019ae6:	f100 0301 	add.w	r3, r0, #1
 8019aea:	d02a      	beq.n	8019b42 <_strtod_l+0x262>
 8019aec:	4499      	add	r9, r3
 8019aee:	eb00 0c05 	add.w	ip, r0, r5
 8019af2:	462b      	mov	r3, r5
 8019af4:	210a      	movs	r1, #10
 8019af6:	4563      	cmp	r3, ip
 8019af8:	d10d      	bne.n	8019b16 <_strtod_l+0x236>
 8019afa:	1c69      	adds	r1, r5, #1
 8019afc:	4401      	add	r1, r0
 8019afe:	4428      	add	r0, r5
 8019b00:	2808      	cmp	r0, #8
 8019b02:	dc16      	bgt.n	8019b32 <_strtod_l+0x252>
 8019b04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019b06:	230a      	movs	r3, #10
 8019b08:	fb03 2300 	mla	r3, r3, r0, r2
 8019b0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8019b0e:	2300      	movs	r3, #0
 8019b10:	e018      	b.n	8019b44 <_strtod_l+0x264>
 8019b12:	4638      	mov	r0, r7
 8019b14:	e7da      	b.n	8019acc <_strtod_l+0x1ec>
 8019b16:	2b08      	cmp	r3, #8
 8019b18:	f103 0301 	add.w	r3, r3, #1
 8019b1c:	dc03      	bgt.n	8019b26 <_strtod_l+0x246>
 8019b1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019b20:	434e      	muls	r6, r1
 8019b22:	960a      	str	r6, [sp, #40]	@ 0x28
 8019b24:	e7e7      	b.n	8019af6 <_strtod_l+0x216>
 8019b26:	2b10      	cmp	r3, #16
 8019b28:	bfde      	ittt	le
 8019b2a:	9e08      	ldrle	r6, [sp, #32]
 8019b2c:	434e      	mulle	r6, r1
 8019b2e:	9608      	strle	r6, [sp, #32]
 8019b30:	e7e1      	b.n	8019af6 <_strtod_l+0x216>
 8019b32:	280f      	cmp	r0, #15
 8019b34:	dceb      	bgt.n	8019b0e <_strtod_l+0x22e>
 8019b36:	9808      	ldr	r0, [sp, #32]
 8019b38:	230a      	movs	r3, #10
 8019b3a:	fb03 2300 	mla	r3, r3, r0, r2
 8019b3e:	9308      	str	r3, [sp, #32]
 8019b40:	e7e5      	b.n	8019b0e <_strtod_l+0x22e>
 8019b42:	4629      	mov	r1, r5
 8019b44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019b46:	1c50      	adds	r0, r2, #1
 8019b48:	9019      	str	r0, [sp, #100]	@ 0x64
 8019b4a:	7852      	ldrb	r2, [r2, #1]
 8019b4c:	4618      	mov	r0, r3
 8019b4e:	460d      	mov	r5, r1
 8019b50:	e7b1      	b.n	8019ab6 <_strtod_l+0x1d6>
 8019b52:	f04f 0900 	mov.w	r9, #0
 8019b56:	2301      	movs	r3, #1
 8019b58:	e77d      	b.n	8019a56 <_strtod_l+0x176>
 8019b5a:	f04f 0c00 	mov.w	ip, #0
 8019b5e:	1ca2      	adds	r2, r4, #2
 8019b60:	9219      	str	r2, [sp, #100]	@ 0x64
 8019b62:	78a2      	ldrb	r2, [r4, #2]
 8019b64:	e785      	b.n	8019a72 <_strtod_l+0x192>
 8019b66:	f04f 0c01 	mov.w	ip, #1
 8019b6a:	e7f8      	b.n	8019b5e <_strtod_l+0x27e>
 8019b6c:	08023140 	.word	0x08023140
 8019b70:	08023128 	.word	0x08023128
 8019b74:	7ff00000 	.word	0x7ff00000
 8019b78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019b7a:	1c51      	adds	r1, r2, #1
 8019b7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8019b7e:	7852      	ldrb	r2, [r2, #1]
 8019b80:	2a30      	cmp	r2, #48	@ 0x30
 8019b82:	d0f9      	beq.n	8019b78 <_strtod_l+0x298>
 8019b84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8019b88:	2908      	cmp	r1, #8
 8019b8a:	f63f af78 	bhi.w	8019a7e <_strtod_l+0x19e>
 8019b8e:	3a30      	subs	r2, #48	@ 0x30
 8019b90:	920e      	str	r2, [sp, #56]	@ 0x38
 8019b92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019b94:	920f      	str	r2, [sp, #60]	@ 0x3c
 8019b96:	f04f 080a 	mov.w	r8, #10
 8019b9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019b9c:	1c56      	adds	r6, r2, #1
 8019b9e:	9619      	str	r6, [sp, #100]	@ 0x64
 8019ba0:	7852      	ldrb	r2, [r2, #1]
 8019ba2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019ba6:	f1be 0f09 	cmp.w	lr, #9
 8019baa:	d939      	bls.n	8019c20 <_strtod_l+0x340>
 8019bac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8019bae:	1a76      	subs	r6, r6, r1
 8019bb0:	2e08      	cmp	r6, #8
 8019bb2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8019bb6:	dc03      	bgt.n	8019bc0 <_strtod_l+0x2e0>
 8019bb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019bba:	4588      	cmp	r8, r1
 8019bbc:	bfa8      	it	ge
 8019bbe:	4688      	movge	r8, r1
 8019bc0:	f1bc 0f00 	cmp.w	ip, #0
 8019bc4:	d001      	beq.n	8019bca <_strtod_l+0x2ea>
 8019bc6:	f1c8 0800 	rsb	r8, r8, #0
 8019bca:	2d00      	cmp	r5, #0
 8019bcc:	d14e      	bne.n	8019c6c <_strtod_l+0x38c>
 8019bce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019bd0:	4308      	orrs	r0, r1
 8019bd2:	f47f aebe 	bne.w	8019952 <_strtod_l+0x72>
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	f47f aed6 	bne.w	8019988 <_strtod_l+0xa8>
 8019bdc:	2a69      	cmp	r2, #105	@ 0x69
 8019bde:	d028      	beq.n	8019c32 <_strtod_l+0x352>
 8019be0:	dc25      	bgt.n	8019c2e <_strtod_l+0x34e>
 8019be2:	2a49      	cmp	r2, #73	@ 0x49
 8019be4:	d025      	beq.n	8019c32 <_strtod_l+0x352>
 8019be6:	2a4e      	cmp	r2, #78	@ 0x4e
 8019be8:	f47f aece 	bne.w	8019988 <_strtod_l+0xa8>
 8019bec:	499b      	ldr	r1, [pc, #620]	@ (8019e5c <_strtod_l+0x57c>)
 8019bee:	a819      	add	r0, sp, #100	@ 0x64
 8019bf0:	f002 ff86 	bl	801cb00 <__match>
 8019bf4:	2800      	cmp	r0, #0
 8019bf6:	f43f aec7 	beq.w	8019988 <_strtod_l+0xa8>
 8019bfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019bfc:	781b      	ldrb	r3, [r3, #0]
 8019bfe:	2b28      	cmp	r3, #40	@ 0x28
 8019c00:	d12e      	bne.n	8019c60 <_strtod_l+0x380>
 8019c02:	4997      	ldr	r1, [pc, #604]	@ (8019e60 <_strtod_l+0x580>)
 8019c04:	aa1c      	add	r2, sp, #112	@ 0x70
 8019c06:	a819      	add	r0, sp, #100	@ 0x64
 8019c08:	f002 ff8e 	bl	801cb28 <__hexnan>
 8019c0c:	2805      	cmp	r0, #5
 8019c0e:	d127      	bne.n	8019c60 <_strtod_l+0x380>
 8019c10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019c12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8019c16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8019c1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8019c1e:	e698      	b.n	8019952 <_strtod_l+0x72>
 8019c20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019c22:	fb08 2101 	mla	r1, r8, r1, r2
 8019c26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8019c2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8019c2c:	e7b5      	b.n	8019b9a <_strtod_l+0x2ba>
 8019c2e:	2a6e      	cmp	r2, #110	@ 0x6e
 8019c30:	e7da      	b.n	8019be8 <_strtod_l+0x308>
 8019c32:	498c      	ldr	r1, [pc, #560]	@ (8019e64 <_strtod_l+0x584>)
 8019c34:	a819      	add	r0, sp, #100	@ 0x64
 8019c36:	f002 ff63 	bl	801cb00 <__match>
 8019c3a:	2800      	cmp	r0, #0
 8019c3c:	f43f aea4 	beq.w	8019988 <_strtod_l+0xa8>
 8019c40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c42:	4989      	ldr	r1, [pc, #548]	@ (8019e68 <_strtod_l+0x588>)
 8019c44:	3b01      	subs	r3, #1
 8019c46:	a819      	add	r0, sp, #100	@ 0x64
 8019c48:	9319      	str	r3, [sp, #100]	@ 0x64
 8019c4a:	f002 ff59 	bl	801cb00 <__match>
 8019c4e:	b910      	cbnz	r0, 8019c56 <_strtod_l+0x376>
 8019c50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c52:	3301      	adds	r3, #1
 8019c54:	9319      	str	r3, [sp, #100]	@ 0x64
 8019c56:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8019e78 <_strtod_l+0x598>
 8019c5a:	f04f 0a00 	mov.w	sl, #0
 8019c5e:	e678      	b.n	8019952 <_strtod_l+0x72>
 8019c60:	4882      	ldr	r0, [pc, #520]	@ (8019e6c <_strtod_l+0x58c>)
 8019c62:	f001 fe01 	bl	801b868 <nan>
 8019c66:	ec5b ab10 	vmov	sl, fp, d0
 8019c6a:	e672      	b.n	8019952 <_strtod_l+0x72>
 8019c6c:	eba8 0309 	sub.w	r3, r8, r9
 8019c70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019c72:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c74:	2f00      	cmp	r7, #0
 8019c76:	bf08      	it	eq
 8019c78:	462f      	moveq	r7, r5
 8019c7a:	2d10      	cmp	r5, #16
 8019c7c:	462c      	mov	r4, r5
 8019c7e:	bfa8      	it	ge
 8019c80:	2410      	movge	r4, #16
 8019c82:	f7e6 fc17 	bl	80004b4 <__aeabi_ui2d>
 8019c86:	2d09      	cmp	r5, #9
 8019c88:	4682      	mov	sl, r0
 8019c8a:	468b      	mov	fp, r1
 8019c8c:	dc13      	bgt.n	8019cb6 <_strtod_l+0x3d6>
 8019c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	f43f ae5e 	beq.w	8019952 <_strtod_l+0x72>
 8019c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c98:	dd78      	ble.n	8019d8c <_strtod_l+0x4ac>
 8019c9a:	2b16      	cmp	r3, #22
 8019c9c:	dc5f      	bgt.n	8019d5e <_strtod_l+0x47e>
 8019c9e:	4974      	ldr	r1, [pc, #464]	@ (8019e70 <_strtod_l+0x590>)
 8019ca0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ca8:	4652      	mov	r2, sl
 8019caa:	465b      	mov	r3, fp
 8019cac:	f7e6 fc7c 	bl	80005a8 <__aeabi_dmul>
 8019cb0:	4682      	mov	sl, r0
 8019cb2:	468b      	mov	fp, r1
 8019cb4:	e64d      	b.n	8019952 <_strtod_l+0x72>
 8019cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8019e70 <_strtod_l+0x590>)
 8019cb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019cbc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8019cc0:	f7e6 fc72 	bl	80005a8 <__aeabi_dmul>
 8019cc4:	4682      	mov	sl, r0
 8019cc6:	9808      	ldr	r0, [sp, #32]
 8019cc8:	468b      	mov	fp, r1
 8019cca:	f7e6 fbf3 	bl	80004b4 <__aeabi_ui2d>
 8019cce:	4602      	mov	r2, r0
 8019cd0:	460b      	mov	r3, r1
 8019cd2:	4650      	mov	r0, sl
 8019cd4:	4659      	mov	r1, fp
 8019cd6:	f7e6 fab1 	bl	800023c <__adddf3>
 8019cda:	2d0f      	cmp	r5, #15
 8019cdc:	4682      	mov	sl, r0
 8019cde:	468b      	mov	fp, r1
 8019ce0:	ddd5      	ble.n	8019c8e <_strtod_l+0x3ae>
 8019ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ce4:	1b2c      	subs	r4, r5, r4
 8019ce6:	441c      	add	r4, r3
 8019ce8:	2c00      	cmp	r4, #0
 8019cea:	f340 8096 	ble.w	8019e1a <_strtod_l+0x53a>
 8019cee:	f014 030f 	ands.w	r3, r4, #15
 8019cf2:	d00a      	beq.n	8019d0a <_strtod_l+0x42a>
 8019cf4:	495e      	ldr	r1, [pc, #376]	@ (8019e70 <_strtod_l+0x590>)
 8019cf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019cfa:	4652      	mov	r2, sl
 8019cfc:	465b      	mov	r3, fp
 8019cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d02:	f7e6 fc51 	bl	80005a8 <__aeabi_dmul>
 8019d06:	4682      	mov	sl, r0
 8019d08:	468b      	mov	fp, r1
 8019d0a:	f034 040f 	bics.w	r4, r4, #15
 8019d0e:	d073      	beq.n	8019df8 <_strtod_l+0x518>
 8019d10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8019d14:	dd48      	ble.n	8019da8 <_strtod_l+0x4c8>
 8019d16:	2400      	movs	r4, #0
 8019d18:	46a0      	mov	r8, r4
 8019d1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8019d1c:	46a1      	mov	r9, r4
 8019d1e:	9a05      	ldr	r2, [sp, #20]
 8019d20:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8019e78 <_strtod_l+0x598>
 8019d24:	2322      	movs	r3, #34	@ 0x22
 8019d26:	6013      	str	r3, [r2, #0]
 8019d28:	f04f 0a00 	mov.w	sl, #0
 8019d2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	f43f ae0f 	beq.w	8019952 <_strtod_l+0x72>
 8019d34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019d36:	9805      	ldr	r0, [sp, #20]
 8019d38:	f002 ffe4 	bl	801cd04 <_Bfree>
 8019d3c:	9805      	ldr	r0, [sp, #20]
 8019d3e:	4649      	mov	r1, r9
 8019d40:	f002 ffe0 	bl	801cd04 <_Bfree>
 8019d44:	9805      	ldr	r0, [sp, #20]
 8019d46:	4641      	mov	r1, r8
 8019d48:	f002 ffdc 	bl	801cd04 <_Bfree>
 8019d4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019d4e:	9805      	ldr	r0, [sp, #20]
 8019d50:	f002 ffd8 	bl	801cd04 <_Bfree>
 8019d54:	9805      	ldr	r0, [sp, #20]
 8019d56:	4621      	mov	r1, r4
 8019d58:	f002 ffd4 	bl	801cd04 <_Bfree>
 8019d5c:	e5f9      	b.n	8019952 <_strtod_l+0x72>
 8019d5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019d60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8019d64:	4293      	cmp	r3, r2
 8019d66:	dbbc      	blt.n	8019ce2 <_strtod_l+0x402>
 8019d68:	4c41      	ldr	r4, [pc, #260]	@ (8019e70 <_strtod_l+0x590>)
 8019d6a:	f1c5 050f 	rsb	r5, r5, #15
 8019d6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8019d72:	4652      	mov	r2, sl
 8019d74:	465b      	mov	r3, fp
 8019d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d7a:	f7e6 fc15 	bl	80005a8 <__aeabi_dmul>
 8019d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019d80:	1b5d      	subs	r5, r3, r5
 8019d82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019d86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019d8a:	e78f      	b.n	8019cac <_strtod_l+0x3cc>
 8019d8c:	3316      	adds	r3, #22
 8019d8e:	dba8      	blt.n	8019ce2 <_strtod_l+0x402>
 8019d90:	4b37      	ldr	r3, [pc, #220]	@ (8019e70 <_strtod_l+0x590>)
 8019d92:	eba9 0808 	sub.w	r8, r9, r8
 8019d96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8019d9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8019d9e:	4650      	mov	r0, sl
 8019da0:	4659      	mov	r1, fp
 8019da2:	f7e6 fd2b 	bl	80007fc <__aeabi_ddiv>
 8019da6:	e783      	b.n	8019cb0 <_strtod_l+0x3d0>
 8019da8:	4b32      	ldr	r3, [pc, #200]	@ (8019e74 <_strtod_l+0x594>)
 8019daa:	9308      	str	r3, [sp, #32]
 8019dac:	2300      	movs	r3, #0
 8019dae:	1124      	asrs	r4, r4, #4
 8019db0:	4650      	mov	r0, sl
 8019db2:	4659      	mov	r1, fp
 8019db4:	461e      	mov	r6, r3
 8019db6:	2c01      	cmp	r4, #1
 8019db8:	dc21      	bgt.n	8019dfe <_strtod_l+0x51e>
 8019dba:	b10b      	cbz	r3, 8019dc0 <_strtod_l+0x4e0>
 8019dbc:	4682      	mov	sl, r0
 8019dbe:	468b      	mov	fp, r1
 8019dc0:	492c      	ldr	r1, [pc, #176]	@ (8019e74 <_strtod_l+0x594>)
 8019dc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8019dc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8019dca:	4652      	mov	r2, sl
 8019dcc:	465b      	mov	r3, fp
 8019dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019dd2:	f7e6 fbe9 	bl	80005a8 <__aeabi_dmul>
 8019dd6:	4b28      	ldr	r3, [pc, #160]	@ (8019e78 <_strtod_l+0x598>)
 8019dd8:	460a      	mov	r2, r1
 8019dda:	400b      	ands	r3, r1
 8019ddc:	4927      	ldr	r1, [pc, #156]	@ (8019e7c <_strtod_l+0x59c>)
 8019dde:	428b      	cmp	r3, r1
 8019de0:	4682      	mov	sl, r0
 8019de2:	d898      	bhi.n	8019d16 <_strtod_l+0x436>
 8019de4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8019de8:	428b      	cmp	r3, r1
 8019dea:	bf86      	itte	hi
 8019dec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8019e80 <_strtod_l+0x5a0>
 8019df0:	f04f 3aff 	movhi.w	sl, #4294967295
 8019df4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8019df8:	2300      	movs	r3, #0
 8019dfa:	9308      	str	r3, [sp, #32]
 8019dfc:	e07a      	b.n	8019ef4 <_strtod_l+0x614>
 8019dfe:	07e2      	lsls	r2, r4, #31
 8019e00:	d505      	bpl.n	8019e0e <_strtod_l+0x52e>
 8019e02:	9b08      	ldr	r3, [sp, #32]
 8019e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e08:	f7e6 fbce 	bl	80005a8 <__aeabi_dmul>
 8019e0c:	2301      	movs	r3, #1
 8019e0e:	9a08      	ldr	r2, [sp, #32]
 8019e10:	3208      	adds	r2, #8
 8019e12:	3601      	adds	r6, #1
 8019e14:	1064      	asrs	r4, r4, #1
 8019e16:	9208      	str	r2, [sp, #32]
 8019e18:	e7cd      	b.n	8019db6 <_strtod_l+0x4d6>
 8019e1a:	d0ed      	beq.n	8019df8 <_strtod_l+0x518>
 8019e1c:	4264      	negs	r4, r4
 8019e1e:	f014 020f 	ands.w	r2, r4, #15
 8019e22:	d00a      	beq.n	8019e3a <_strtod_l+0x55a>
 8019e24:	4b12      	ldr	r3, [pc, #72]	@ (8019e70 <_strtod_l+0x590>)
 8019e26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019e2a:	4650      	mov	r0, sl
 8019e2c:	4659      	mov	r1, fp
 8019e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e32:	f7e6 fce3 	bl	80007fc <__aeabi_ddiv>
 8019e36:	4682      	mov	sl, r0
 8019e38:	468b      	mov	fp, r1
 8019e3a:	1124      	asrs	r4, r4, #4
 8019e3c:	d0dc      	beq.n	8019df8 <_strtod_l+0x518>
 8019e3e:	2c1f      	cmp	r4, #31
 8019e40:	dd20      	ble.n	8019e84 <_strtod_l+0x5a4>
 8019e42:	2400      	movs	r4, #0
 8019e44:	46a0      	mov	r8, r4
 8019e46:	940a      	str	r4, [sp, #40]	@ 0x28
 8019e48:	46a1      	mov	r9, r4
 8019e4a:	9a05      	ldr	r2, [sp, #20]
 8019e4c:	2322      	movs	r3, #34	@ 0x22
 8019e4e:	f04f 0a00 	mov.w	sl, #0
 8019e52:	f04f 0b00 	mov.w	fp, #0
 8019e56:	6013      	str	r3, [r2, #0]
 8019e58:	e768      	b.n	8019d2c <_strtod_l+0x44c>
 8019e5a:	bf00      	nop
 8019e5c:	0802328e 	.word	0x0802328e
 8019e60:	0802312c 	.word	0x0802312c
 8019e64:	08023286 	.word	0x08023286
 8019e68:	08023372 	.word	0x08023372
 8019e6c:	0802336e 	.word	0x0802336e
 8019e70:	080234d8 	.word	0x080234d8
 8019e74:	080234b0 	.word	0x080234b0
 8019e78:	7ff00000 	.word	0x7ff00000
 8019e7c:	7ca00000 	.word	0x7ca00000
 8019e80:	7fefffff 	.word	0x7fefffff
 8019e84:	f014 0310 	ands.w	r3, r4, #16
 8019e88:	bf18      	it	ne
 8019e8a:	236a      	movne	r3, #106	@ 0x6a
 8019e8c:	4ea9      	ldr	r6, [pc, #676]	@ (801a134 <_strtod_l+0x854>)
 8019e8e:	9308      	str	r3, [sp, #32]
 8019e90:	4650      	mov	r0, sl
 8019e92:	4659      	mov	r1, fp
 8019e94:	2300      	movs	r3, #0
 8019e96:	07e2      	lsls	r2, r4, #31
 8019e98:	d504      	bpl.n	8019ea4 <_strtod_l+0x5c4>
 8019e9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019e9e:	f7e6 fb83 	bl	80005a8 <__aeabi_dmul>
 8019ea2:	2301      	movs	r3, #1
 8019ea4:	1064      	asrs	r4, r4, #1
 8019ea6:	f106 0608 	add.w	r6, r6, #8
 8019eaa:	d1f4      	bne.n	8019e96 <_strtod_l+0x5b6>
 8019eac:	b10b      	cbz	r3, 8019eb2 <_strtod_l+0x5d2>
 8019eae:	4682      	mov	sl, r0
 8019eb0:	468b      	mov	fp, r1
 8019eb2:	9b08      	ldr	r3, [sp, #32]
 8019eb4:	b1b3      	cbz	r3, 8019ee4 <_strtod_l+0x604>
 8019eb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8019eba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	4659      	mov	r1, fp
 8019ec2:	dd0f      	ble.n	8019ee4 <_strtod_l+0x604>
 8019ec4:	2b1f      	cmp	r3, #31
 8019ec6:	dd55      	ble.n	8019f74 <_strtod_l+0x694>
 8019ec8:	2b34      	cmp	r3, #52	@ 0x34
 8019eca:	bfde      	ittt	le
 8019ecc:	f04f 33ff 	movle.w	r3, #4294967295
 8019ed0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8019ed4:	4093      	lslle	r3, r2
 8019ed6:	f04f 0a00 	mov.w	sl, #0
 8019eda:	bfcc      	ite	gt
 8019edc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8019ee0:	ea03 0b01 	andle.w	fp, r3, r1
 8019ee4:	2200      	movs	r2, #0
 8019ee6:	2300      	movs	r3, #0
 8019ee8:	4650      	mov	r0, sl
 8019eea:	4659      	mov	r1, fp
 8019eec:	f7e6 fdc4 	bl	8000a78 <__aeabi_dcmpeq>
 8019ef0:	2800      	cmp	r0, #0
 8019ef2:	d1a6      	bne.n	8019e42 <_strtod_l+0x562>
 8019ef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019ef6:	9300      	str	r3, [sp, #0]
 8019ef8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019efa:	9805      	ldr	r0, [sp, #20]
 8019efc:	462b      	mov	r3, r5
 8019efe:	463a      	mov	r2, r7
 8019f00:	f002 ff68 	bl	801cdd4 <__s2b>
 8019f04:	900a      	str	r0, [sp, #40]	@ 0x28
 8019f06:	2800      	cmp	r0, #0
 8019f08:	f43f af05 	beq.w	8019d16 <_strtod_l+0x436>
 8019f0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019f0e:	2a00      	cmp	r2, #0
 8019f10:	eba9 0308 	sub.w	r3, r9, r8
 8019f14:	bfa8      	it	ge
 8019f16:	2300      	movge	r3, #0
 8019f18:	9312      	str	r3, [sp, #72]	@ 0x48
 8019f1a:	2400      	movs	r4, #0
 8019f1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019f20:	9316      	str	r3, [sp, #88]	@ 0x58
 8019f22:	46a0      	mov	r8, r4
 8019f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019f26:	9805      	ldr	r0, [sp, #20]
 8019f28:	6859      	ldr	r1, [r3, #4]
 8019f2a:	f002 feab 	bl	801cc84 <_Balloc>
 8019f2e:	4681      	mov	r9, r0
 8019f30:	2800      	cmp	r0, #0
 8019f32:	f43f aef4 	beq.w	8019d1e <_strtod_l+0x43e>
 8019f36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019f38:	691a      	ldr	r2, [r3, #16]
 8019f3a:	3202      	adds	r2, #2
 8019f3c:	f103 010c 	add.w	r1, r3, #12
 8019f40:	0092      	lsls	r2, r2, #2
 8019f42:	300c      	adds	r0, #12
 8019f44:	f001 fc81 	bl	801b84a <memcpy>
 8019f48:	ec4b ab10 	vmov	d0, sl, fp
 8019f4c:	9805      	ldr	r0, [sp, #20]
 8019f4e:	aa1c      	add	r2, sp, #112	@ 0x70
 8019f50:	a91b      	add	r1, sp, #108	@ 0x6c
 8019f52:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8019f56:	f003 fa79 	bl	801d44c <__d2b>
 8019f5a:	901a      	str	r0, [sp, #104]	@ 0x68
 8019f5c:	2800      	cmp	r0, #0
 8019f5e:	f43f aede 	beq.w	8019d1e <_strtod_l+0x43e>
 8019f62:	9805      	ldr	r0, [sp, #20]
 8019f64:	2101      	movs	r1, #1
 8019f66:	f002 ffcb 	bl	801cf00 <__i2b>
 8019f6a:	4680      	mov	r8, r0
 8019f6c:	b948      	cbnz	r0, 8019f82 <_strtod_l+0x6a2>
 8019f6e:	f04f 0800 	mov.w	r8, #0
 8019f72:	e6d4      	b.n	8019d1e <_strtod_l+0x43e>
 8019f74:	f04f 32ff 	mov.w	r2, #4294967295
 8019f78:	fa02 f303 	lsl.w	r3, r2, r3
 8019f7c:	ea03 0a0a 	and.w	sl, r3, sl
 8019f80:	e7b0      	b.n	8019ee4 <_strtod_l+0x604>
 8019f82:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8019f84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8019f86:	2d00      	cmp	r5, #0
 8019f88:	bfab      	itete	ge
 8019f8a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8019f8c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8019f8e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8019f90:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8019f92:	bfac      	ite	ge
 8019f94:	18ef      	addge	r7, r5, r3
 8019f96:	1b5e      	sublt	r6, r3, r5
 8019f98:	9b08      	ldr	r3, [sp, #32]
 8019f9a:	1aed      	subs	r5, r5, r3
 8019f9c:	4415      	add	r5, r2
 8019f9e:	4b66      	ldr	r3, [pc, #408]	@ (801a138 <_strtod_l+0x858>)
 8019fa0:	3d01      	subs	r5, #1
 8019fa2:	429d      	cmp	r5, r3
 8019fa4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019fa8:	da50      	bge.n	801a04c <_strtod_l+0x76c>
 8019faa:	1b5b      	subs	r3, r3, r5
 8019fac:	2b1f      	cmp	r3, #31
 8019fae:	eba2 0203 	sub.w	r2, r2, r3
 8019fb2:	f04f 0101 	mov.w	r1, #1
 8019fb6:	dc3d      	bgt.n	801a034 <_strtod_l+0x754>
 8019fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8019fbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019fbe:	2300      	movs	r3, #0
 8019fc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8019fc2:	18bd      	adds	r5, r7, r2
 8019fc4:	9b08      	ldr	r3, [sp, #32]
 8019fc6:	42af      	cmp	r7, r5
 8019fc8:	4416      	add	r6, r2
 8019fca:	441e      	add	r6, r3
 8019fcc:	463b      	mov	r3, r7
 8019fce:	bfa8      	it	ge
 8019fd0:	462b      	movge	r3, r5
 8019fd2:	42b3      	cmp	r3, r6
 8019fd4:	bfa8      	it	ge
 8019fd6:	4633      	movge	r3, r6
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	bfc2      	ittt	gt
 8019fdc:	1aed      	subgt	r5, r5, r3
 8019fde:	1af6      	subgt	r6, r6, r3
 8019fe0:	1aff      	subgt	r7, r7, r3
 8019fe2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	dd16      	ble.n	801a016 <_strtod_l+0x736>
 8019fe8:	4641      	mov	r1, r8
 8019fea:	9805      	ldr	r0, [sp, #20]
 8019fec:	461a      	mov	r2, r3
 8019fee:	f003 f847 	bl	801d080 <__pow5mult>
 8019ff2:	4680      	mov	r8, r0
 8019ff4:	2800      	cmp	r0, #0
 8019ff6:	d0ba      	beq.n	8019f6e <_strtod_l+0x68e>
 8019ff8:	4601      	mov	r1, r0
 8019ffa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019ffc:	9805      	ldr	r0, [sp, #20]
 8019ffe:	f002 ff95 	bl	801cf2c <__multiply>
 801a002:	900e      	str	r0, [sp, #56]	@ 0x38
 801a004:	2800      	cmp	r0, #0
 801a006:	f43f ae8a 	beq.w	8019d1e <_strtod_l+0x43e>
 801a00a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a00c:	9805      	ldr	r0, [sp, #20]
 801a00e:	f002 fe79 	bl	801cd04 <_Bfree>
 801a012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a014:	931a      	str	r3, [sp, #104]	@ 0x68
 801a016:	2d00      	cmp	r5, #0
 801a018:	dc1d      	bgt.n	801a056 <_strtod_l+0x776>
 801a01a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	dd23      	ble.n	801a068 <_strtod_l+0x788>
 801a020:	4649      	mov	r1, r9
 801a022:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a024:	9805      	ldr	r0, [sp, #20]
 801a026:	f003 f82b 	bl	801d080 <__pow5mult>
 801a02a:	4681      	mov	r9, r0
 801a02c:	b9e0      	cbnz	r0, 801a068 <_strtod_l+0x788>
 801a02e:	f04f 0900 	mov.w	r9, #0
 801a032:	e674      	b.n	8019d1e <_strtod_l+0x43e>
 801a034:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801a038:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801a03c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801a040:	35e2      	adds	r5, #226	@ 0xe2
 801a042:	fa01 f305 	lsl.w	r3, r1, r5
 801a046:	9310      	str	r3, [sp, #64]	@ 0x40
 801a048:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a04a:	e7ba      	b.n	8019fc2 <_strtod_l+0x6e2>
 801a04c:	2300      	movs	r3, #0
 801a04e:	9310      	str	r3, [sp, #64]	@ 0x40
 801a050:	2301      	movs	r3, #1
 801a052:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a054:	e7b5      	b.n	8019fc2 <_strtod_l+0x6e2>
 801a056:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a058:	9805      	ldr	r0, [sp, #20]
 801a05a:	462a      	mov	r2, r5
 801a05c:	f003 f86a 	bl	801d134 <__lshift>
 801a060:	901a      	str	r0, [sp, #104]	@ 0x68
 801a062:	2800      	cmp	r0, #0
 801a064:	d1d9      	bne.n	801a01a <_strtod_l+0x73a>
 801a066:	e65a      	b.n	8019d1e <_strtod_l+0x43e>
 801a068:	2e00      	cmp	r6, #0
 801a06a:	dd07      	ble.n	801a07c <_strtod_l+0x79c>
 801a06c:	4649      	mov	r1, r9
 801a06e:	9805      	ldr	r0, [sp, #20]
 801a070:	4632      	mov	r2, r6
 801a072:	f003 f85f 	bl	801d134 <__lshift>
 801a076:	4681      	mov	r9, r0
 801a078:	2800      	cmp	r0, #0
 801a07a:	d0d8      	beq.n	801a02e <_strtod_l+0x74e>
 801a07c:	2f00      	cmp	r7, #0
 801a07e:	dd08      	ble.n	801a092 <_strtod_l+0x7b2>
 801a080:	4641      	mov	r1, r8
 801a082:	9805      	ldr	r0, [sp, #20]
 801a084:	463a      	mov	r2, r7
 801a086:	f003 f855 	bl	801d134 <__lshift>
 801a08a:	4680      	mov	r8, r0
 801a08c:	2800      	cmp	r0, #0
 801a08e:	f43f ae46 	beq.w	8019d1e <_strtod_l+0x43e>
 801a092:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a094:	9805      	ldr	r0, [sp, #20]
 801a096:	464a      	mov	r2, r9
 801a098:	f003 f8d4 	bl	801d244 <__mdiff>
 801a09c:	4604      	mov	r4, r0
 801a09e:	2800      	cmp	r0, #0
 801a0a0:	f43f ae3d 	beq.w	8019d1e <_strtod_l+0x43e>
 801a0a4:	68c3      	ldr	r3, [r0, #12]
 801a0a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	60c3      	str	r3, [r0, #12]
 801a0ac:	4641      	mov	r1, r8
 801a0ae:	f003 f8ad 	bl	801d20c <__mcmp>
 801a0b2:	2800      	cmp	r0, #0
 801a0b4:	da46      	bge.n	801a144 <_strtod_l+0x864>
 801a0b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a0b8:	ea53 030a 	orrs.w	r3, r3, sl
 801a0bc:	d16c      	bne.n	801a198 <_strtod_l+0x8b8>
 801a0be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d168      	bne.n	801a198 <_strtod_l+0x8b8>
 801a0c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a0ca:	0d1b      	lsrs	r3, r3, #20
 801a0cc:	051b      	lsls	r3, r3, #20
 801a0ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a0d2:	d961      	bls.n	801a198 <_strtod_l+0x8b8>
 801a0d4:	6963      	ldr	r3, [r4, #20]
 801a0d6:	b913      	cbnz	r3, 801a0de <_strtod_l+0x7fe>
 801a0d8:	6923      	ldr	r3, [r4, #16]
 801a0da:	2b01      	cmp	r3, #1
 801a0dc:	dd5c      	ble.n	801a198 <_strtod_l+0x8b8>
 801a0de:	4621      	mov	r1, r4
 801a0e0:	2201      	movs	r2, #1
 801a0e2:	9805      	ldr	r0, [sp, #20]
 801a0e4:	f003 f826 	bl	801d134 <__lshift>
 801a0e8:	4641      	mov	r1, r8
 801a0ea:	4604      	mov	r4, r0
 801a0ec:	f003 f88e 	bl	801d20c <__mcmp>
 801a0f0:	2800      	cmp	r0, #0
 801a0f2:	dd51      	ble.n	801a198 <_strtod_l+0x8b8>
 801a0f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a0f8:	9a08      	ldr	r2, [sp, #32]
 801a0fa:	0d1b      	lsrs	r3, r3, #20
 801a0fc:	051b      	lsls	r3, r3, #20
 801a0fe:	2a00      	cmp	r2, #0
 801a100:	d06b      	beq.n	801a1da <_strtod_l+0x8fa>
 801a102:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a106:	d868      	bhi.n	801a1da <_strtod_l+0x8fa>
 801a108:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801a10c:	f67f ae9d 	bls.w	8019e4a <_strtod_l+0x56a>
 801a110:	4b0a      	ldr	r3, [pc, #40]	@ (801a13c <_strtod_l+0x85c>)
 801a112:	4650      	mov	r0, sl
 801a114:	4659      	mov	r1, fp
 801a116:	2200      	movs	r2, #0
 801a118:	f7e6 fa46 	bl	80005a8 <__aeabi_dmul>
 801a11c:	4b08      	ldr	r3, [pc, #32]	@ (801a140 <_strtod_l+0x860>)
 801a11e:	400b      	ands	r3, r1
 801a120:	4682      	mov	sl, r0
 801a122:	468b      	mov	fp, r1
 801a124:	2b00      	cmp	r3, #0
 801a126:	f47f ae05 	bne.w	8019d34 <_strtod_l+0x454>
 801a12a:	9a05      	ldr	r2, [sp, #20]
 801a12c:	2322      	movs	r3, #34	@ 0x22
 801a12e:	6013      	str	r3, [r2, #0]
 801a130:	e600      	b.n	8019d34 <_strtod_l+0x454>
 801a132:	bf00      	nop
 801a134:	08023158 	.word	0x08023158
 801a138:	fffffc02 	.word	0xfffffc02
 801a13c:	39500000 	.word	0x39500000
 801a140:	7ff00000 	.word	0x7ff00000
 801a144:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801a148:	d165      	bne.n	801a216 <_strtod_l+0x936>
 801a14a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a14c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a150:	b35a      	cbz	r2, 801a1aa <_strtod_l+0x8ca>
 801a152:	4a9f      	ldr	r2, [pc, #636]	@ (801a3d0 <_strtod_l+0xaf0>)
 801a154:	4293      	cmp	r3, r2
 801a156:	d12b      	bne.n	801a1b0 <_strtod_l+0x8d0>
 801a158:	9b08      	ldr	r3, [sp, #32]
 801a15a:	4651      	mov	r1, sl
 801a15c:	b303      	cbz	r3, 801a1a0 <_strtod_l+0x8c0>
 801a15e:	4b9d      	ldr	r3, [pc, #628]	@ (801a3d4 <_strtod_l+0xaf4>)
 801a160:	465a      	mov	r2, fp
 801a162:	4013      	ands	r3, r2
 801a164:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801a168:	f04f 32ff 	mov.w	r2, #4294967295
 801a16c:	d81b      	bhi.n	801a1a6 <_strtod_l+0x8c6>
 801a16e:	0d1b      	lsrs	r3, r3, #20
 801a170:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801a174:	fa02 f303 	lsl.w	r3, r2, r3
 801a178:	4299      	cmp	r1, r3
 801a17a:	d119      	bne.n	801a1b0 <_strtod_l+0x8d0>
 801a17c:	4b96      	ldr	r3, [pc, #600]	@ (801a3d8 <_strtod_l+0xaf8>)
 801a17e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a180:	429a      	cmp	r2, r3
 801a182:	d102      	bne.n	801a18a <_strtod_l+0x8aa>
 801a184:	3101      	adds	r1, #1
 801a186:	f43f adca 	beq.w	8019d1e <_strtod_l+0x43e>
 801a18a:	4b92      	ldr	r3, [pc, #584]	@ (801a3d4 <_strtod_l+0xaf4>)
 801a18c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a18e:	401a      	ands	r2, r3
 801a190:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801a194:	f04f 0a00 	mov.w	sl, #0
 801a198:	9b08      	ldr	r3, [sp, #32]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d1b8      	bne.n	801a110 <_strtod_l+0x830>
 801a19e:	e5c9      	b.n	8019d34 <_strtod_l+0x454>
 801a1a0:	f04f 33ff 	mov.w	r3, #4294967295
 801a1a4:	e7e8      	b.n	801a178 <_strtod_l+0x898>
 801a1a6:	4613      	mov	r3, r2
 801a1a8:	e7e6      	b.n	801a178 <_strtod_l+0x898>
 801a1aa:	ea53 030a 	orrs.w	r3, r3, sl
 801a1ae:	d0a1      	beq.n	801a0f4 <_strtod_l+0x814>
 801a1b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a1b2:	b1db      	cbz	r3, 801a1ec <_strtod_l+0x90c>
 801a1b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a1b6:	4213      	tst	r3, r2
 801a1b8:	d0ee      	beq.n	801a198 <_strtod_l+0x8b8>
 801a1ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a1bc:	9a08      	ldr	r2, [sp, #32]
 801a1be:	4650      	mov	r0, sl
 801a1c0:	4659      	mov	r1, fp
 801a1c2:	b1bb      	cbz	r3, 801a1f4 <_strtod_l+0x914>
 801a1c4:	f7ff fb6c 	bl	80198a0 <sulp>
 801a1c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a1cc:	ec53 2b10 	vmov	r2, r3, d0
 801a1d0:	f7e6 f834 	bl	800023c <__adddf3>
 801a1d4:	4682      	mov	sl, r0
 801a1d6:	468b      	mov	fp, r1
 801a1d8:	e7de      	b.n	801a198 <_strtod_l+0x8b8>
 801a1da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801a1de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a1e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a1e6:	f04f 3aff 	mov.w	sl, #4294967295
 801a1ea:	e7d5      	b.n	801a198 <_strtod_l+0x8b8>
 801a1ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a1ee:	ea13 0f0a 	tst.w	r3, sl
 801a1f2:	e7e1      	b.n	801a1b8 <_strtod_l+0x8d8>
 801a1f4:	f7ff fb54 	bl	80198a0 <sulp>
 801a1f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a1fc:	ec53 2b10 	vmov	r2, r3, d0
 801a200:	f7e6 f81a 	bl	8000238 <__aeabi_dsub>
 801a204:	2200      	movs	r2, #0
 801a206:	2300      	movs	r3, #0
 801a208:	4682      	mov	sl, r0
 801a20a:	468b      	mov	fp, r1
 801a20c:	f7e6 fc34 	bl	8000a78 <__aeabi_dcmpeq>
 801a210:	2800      	cmp	r0, #0
 801a212:	d0c1      	beq.n	801a198 <_strtod_l+0x8b8>
 801a214:	e619      	b.n	8019e4a <_strtod_l+0x56a>
 801a216:	4641      	mov	r1, r8
 801a218:	4620      	mov	r0, r4
 801a21a:	f003 f96f 	bl	801d4fc <__ratio>
 801a21e:	ec57 6b10 	vmov	r6, r7, d0
 801a222:	2200      	movs	r2, #0
 801a224:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a228:	4630      	mov	r0, r6
 801a22a:	4639      	mov	r1, r7
 801a22c:	f7e6 fc38 	bl	8000aa0 <__aeabi_dcmple>
 801a230:	2800      	cmp	r0, #0
 801a232:	d06f      	beq.n	801a314 <_strtod_l+0xa34>
 801a234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a236:	2b00      	cmp	r3, #0
 801a238:	d17a      	bne.n	801a330 <_strtod_l+0xa50>
 801a23a:	f1ba 0f00 	cmp.w	sl, #0
 801a23e:	d158      	bne.n	801a2f2 <_strtod_l+0xa12>
 801a240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a242:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a246:	2b00      	cmp	r3, #0
 801a248:	d15a      	bne.n	801a300 <_strtod_l+0xa20>
 801a24a:	4b64      	ldr	r3, [pc, #400]	@ (801a3dc <_strtod_l+0xafc>)
 801a24c:	2200      	movs	r2, #0
 801a24e:	4630      	mov	r0, r6
 801a250:	4639      	mov	r1, r7
 801a252:	f7e6 fc1b 	bl	8000a8c <__aeabi_dcmplt>
 801a256:	2800      	cmp	r0, #0
 801a258:	d159      	bne.n	801a30e <_strtod_l+0xa2e>
 801a25a:	4630      	mov	r0, r6
 801a25c:	4639      	mov	r1, r7
 801a25e:	4b60      	ldr	r3, [pc, #384]	@ (801a3e0 <_strtod_l+0xb00>)
 801a260:	2200      	movs	r2, #0
 801a262:	f7e6 f9a1 	bl	80005a8 <__aeabi_dmul>
 801a266:	4606      	mov	r6, r0
 801a268:	460f      	mov	r7, r1
 801a26a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801a26e:	9606      	str	r6, [sp, #24]
 801a270:	9307      	str	r3, [sp, #28]
 801a272:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a276:	4d57      	ldr	r5, [pc, #348]	@ (801a3d4 <_strtod_l+0xaf4>)
 801a278:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a27c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a27e:	401d      	ands	r5, r3
 801a280:	4b58      	ldr	r3, [pc, #352]	@ (801a3e4 <_strtod_l+0xb04>)
 801a282:	429d      	cmp	r5, r3
 801a284:	f040 80b2 	bne.w	801a3ec <_strtod_l+0xb0c>
 801a288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a28a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801a28e:	ec4b ab10 	vmov	d0, sl, fp
 801a292:	f003 f86b 	bl	801d36c <__ulp>
 801a296:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a29a:	ec51 0b10 	vmov	r0, r1, d0
 801a29e:	f7e6 f983 	bl	80005a8 <__aeabi_dmul>
 801a2a2:	4652      	mov	r2, sl
 801a2a4:	465b      	mov	r3, fp
 801a2a6:	f7e5 ffc9 	bl	800023c <__adddf3>
 801a2aa:	460b      	mov	r3, r1
 801a2ac:	4949      	ldr	r1, [pc, #292]	@ (801a3d4 <_strtod_l+0xaf4>)
 801a2ae:	4a4e      	ldr	r2, [pc, #312]	@ (801a3e8 <_strtod_l+0xb08>)
 801a2b0:	4019      	ands	r1, r3
 801a2b2:	4291      	cmp	r1, r2
 801a2b4:	4682      	mov	sl, r0
 801a2b6:	d942      	bls.n	801a33e <_strtod_l+0xa5e>
 801a2b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a2ba:	4b47      	ldr	r3, [pc, #284]	@ (801a3d8 <_strtod_l+0xaf8>)
 801a2bc:	429a      	cmp	r2, r3
 801a2be:	d103      	bne.n	801a2c8 <_strtod_l+0x9e8>
 801a2c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a2c2:	3301      	adds	r3, #1
 801a2c4:	f43f ad2b 	beq.w	8019d1e <_strtod_l+0x43e>
 801a2c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801a3d8 <_strtod_l+0xaf8>
 801a2cc:	f04f 3aff 	mov.w	sl, #4294967295
 801a2d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a2d2:	9805      	ldr	r0, [sp, #20]
 801a2d4:	f002 fd16 	bl	801cd04 <_Bfree>
 801a2d8:	9805      	ldr	r0, [sp, #20]
 801a2da:	4649      	mov	r1, r9
 801a2dc:	f002 fd12 	bl	801cd04 <_Bfree>
 801a2e0:	9805      	ldr	r0, [sp, #20]
 801a2e2:	4641      	mov	r1, r8
 801a2e4:	f002 fd0e 	bl	801cd04 <_Bfree>
 801a2e8:	9805      	ldr	r0, [sp, #20]
 801a2ea:	4621      	mov	r1, r4
 801a2ec:	f002 fd0a 	bl	801cd04 <_Bfree>
 801a2f0:	e618      	b.n	8019f24 <_strtod_l+0x644>
 801a2f2:	f1ba 0f01 	cmp.w	sl, #1
 801a2f6:	d103      	bne.n	801a300 <_strtod_l+0xa20>
 801a2f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	f43f ada5 	beq.w	8019e4a <_strtod_l+0x56a>
 801a300:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801a3b0 <_strtod_l+0xad0>
 801a304:	4f35      	ldr	r7, [pc, #212]	@ (801a3dc <_strtod_l+0xafc>)
 801a306:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a30a:	2600      	movs	r6, #0
 801a30c:	e7b1      	b.n	801a272 <_strtod_l+0x992>
 801a30e:	4f34      	ldr	r7, [pc, #208]	@ (801a3e0 <_strtod_l+0xb00>)
 801a310:	2600      	movs	r6, #0
 801a312:	e7aa      	b.n	801a26a <_strtod_l+0x98a>
 801a314:	4b32      	ldr	r3, [pc, #200]	@ (801a3e0 <_strtod_l+0xb00>)
 801a316:	4630      	mov	r0, r6
 801a318:	4639      	mov	r1, r7
 801a31a:	2200      	movs	r2, #0
 801a31c:	f7e6 f944 	bl	80005a8 <__aeabi_dmul>
 801a320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a322:	4606      	mov	r6, r0
 801a324:	460f      	mov	r7, r1
 801a326:	2b00      	cmp	r3, #0
 801a328:	d09f      	beq.n	801a26a <_strtod_l+0x98a>
 801a32a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801a32e:	e7a0      	b.n	801a272 <_strtod_l+0x992>
 801a330:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801a3b8 <_strtod_l+0xad8>
 801a334:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a338:	ec57 6b17 	vmov	r6, r7, d7
 801a33c:	e799      	b.n	801a272 <_strtod_l+0x992>
 801a33e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801a342:	9b08      	ldr	r3, [sp, #32]
 801a344:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d1c1      	bne.n	801a2d0 <_strtod_l+0x9f0>
 801a34c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a350:	0d1b      	lsrs	r3, r3, #20
 801a352:	051b      	lsls	r3, r3, #20
 801a354:	429d      	cmp	r5, r3
 801a356:	d1bb      	bne.n	801a2d0 <_strtod_l+0x9f0>
 801a358:	4630      	mov	r0, r6
 801a35a:	4639      	mov	r1, r7
 801a35c:	f7e6 fc84 	bl	8000c68 <__aeabi_d2lz>
 801a360:	f7e6 f8f4 	bl	800054c <__aeabi_l2d>
 801a364:	4602      	mov	r2, r0
 801a366:	460b      	mov	r3, r1
 801a368:	4630      	mov	r0, r6
 801a36a:	4639      	mov	r1, r7
 801a36c:	f7e5 ff64 	bl	8000238 <__aeabi_dsub>
 801a370:	460b      	mov	r3, r1
 801a372:	4602      	mov	r2, r0
 801a374:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801a378:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801a37c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a37e:	ea46 060a 	orr.w	r6, r6, sl
 801a382:	431e      	orrs	r6, r3
 801a384:	d06f      	beq.n	801a466 <_strtod_l+0xb86>
 801a386:	a30e      	add	r3, pc, #56	@ (adr r3, 801a3c0 <_strtod_l+0xae0>)
 801a388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a38c:	f7e6 fb7e 	bl	8000a8c <__aeabi_dcmplt>
 801a390:	2800      	cmp	r0, #0
 801a392:	f47f accf 	bne.w	8019d34 <_strtod_l+0x454>
 801a396:	a30c      	add	r3, pc, #48	@ (adr r3, 801a3c8 <_strtod_l+0xae8>)
 801a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a39c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a3a0:	f7e6 fb92 	bl	8000ac8 <__aeabi_dcmpgt>
 801a3a4:	2800      	cmp	r0, #0
 801a3a6:	d093      	beq.n	801a2d0 <_strtod_l+0x9f0>
 801a3a8:	e4c4      	b.n	8019d34 <_strtod_l+0x454>
 801a3aa:	bf00      	nop
 801a3ac:	f3af 8000 	nop.w
 801a3b0:	00000000 	.word	0x00000000
 801a3b4:	bff00000 	.word	0xbff00000
 801a3b8:	00000000 	.word	0x00000000
 801a3bc:	3ff00000 	.word	0x3ff00000
 801a3c0:	94a03595 	.word	0x94a03595
 801a3c4:	3fdfffff 	.word	0x3fdfffff
 801a3c8:	35afe535 	.word	0x35afe535
 801a3cc:	3fe00000 	.word	0x3fe00000
 801a3d0:	000fffff 	.word	0x000fffff
 801a3d4:	7ff00000 	.word	0x7ff00000
 801a3d8:	7fefffff 	.word	0x7fefffff
 801a3dc:	3ff00000 	.word	0x3ff00000
 801a3e0:	3fe00000 	.word	0x3fe00000
 801a3e4:	7fe00000 	.word	0x7fe00000
 801a3e8:	7c9fffff 	.word	0x7c9fffff
 801a3ec:	9b08      	ldr	r3, [sp, #32]
 801a3ee:	b323      	cbz	r3, 801a43a <_strtod_l+0xb5a>
 801a3f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801a3f4:	d821      	bhi.n	801a43a <_strtod_l+0xb5a>
 801a3f6:	a328      	add	r3, pc, #160	@ (adr r3, 801a498 <_strtod_l+0xbb8>)
 801a3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3fc:	4630      	mov	r0, r6
 801a3fe:	4639      	mov	r1, r7
 801a400:	f7e6 fb4e 	bl	8000aa0 <__aeabi_dcmple>
 801a404:	b1a0      	cbz	r0, 801a430 <_strtod_l+0xb50>
 801a406:	4639      	mov	r1, r7
 801a408:	4630      	mov	r0, r6
 801a40a:	f7e6 fba5 	bl	8000b58 <__aeabi_d2uiz>
 801a40e:	2801      	cmp	r0, #1
 801a410:	bf38      	it	cc
 801a412:	2001      	movcc	r0, #1
 801a414:	f7e6 f84e 	bl	80004b4 <__aeabi_ui2d>
 801a418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a41a:	4606      	mov	r6, r0
 801a41c:	460f      	mov	r7, r1
 801a41e:	b9fb      	cbnz	r3, 801a460 <_strtod_l+0xb80>
 801a420:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a424:	9014      	str	r0, [sp, #80]	@ 0x50
 801a426:	9315      	str	r3, [sp, #84]	@ 0x54
 801a428:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801a42c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a430:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a432:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801a436:	1b5b      	subs	r3, r3, r5
 801a438:	9311      	str	r3, [sp, #68]	@ 0x44
 801a43a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801a43e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801a442:	f002 ff93 	bl	801d36c <__ulp>
 801a446:	4650      	mov	r0, sl
 801a448:	ec53 2b10 	vmov	r2, r3, d0
 801a44c:	4659      	mov	r1, fp
 801a44e:	f7e6 f8ab 	bl	80005a8 <__aeabi_dmul>
 801a452:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801a456:	f7e5 fef1 	bl	800023c <__adddf3>
 801a45a:	4682      	mov	sl, r0
 801a45c:	468b      	mov	fp, r1
 801a45e:	e770      	b.n	801a342 <_strtod_l+0xa62>
 801a460:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801a464:	e7e0      	b.n	801a428 <_strtod_l+0xb48>
 801a466:	a30e      	add	r3, pc, #56	@ (adr r3, 801a4a0 <_strtod_l+0xbc0>)
 801a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a46c:	f7e6 fb0e 	bl	8000a8c <__aeabi_dcmplt>
 801a470:	e798      	b.n	801a3a4 <_strtod_l+0xac4>
 801a472:	2300      	movs	r3, #0
 801a474:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a476:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a478:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a47a:	6013      	str	r3, [r2, #0]
 801a47c:	f7ff ba6d 	b.w	801995a <_strtod_l+0x7a>
 801a480:	2a65      	cmp	r2, #101	@ 0x65
 801a482:	f43f ab66 	beq.w	8019b52 <_strtod_l+0x272>
 801a486:	2a45      	cmp	r2, #69	@ 0x45
 801a488:	f43f ab63 	beq.w	8019b52 <_strtod_l+0x272>
 801a48c:	2301      	movs	r3, #1
 801a48e:	f7ff bb9e 	b.w	8019bce <_strtod_l+0x2ee>
 801a492:	bf00      	nop
 801a494:	f3af 8000 	nop.w
 801a498:	ffc00000 	.word	0xffc00000
 801a49c:	41dfffff 	.word	0x41dfffff
 801a4a0:	94a03595 	.word	0x94a03595
 801a4a4:	3fcfffff 	.word	0x3fcfffff

0801a4a8 <_strtod_r>:
 801a4a8:	4b01      	ldr	r3, [pc, #4]	@ (801a4b0 <_strtod_r+0x8>)
 801a4aa:	f7ff ba19 	b.w	80198e0 <_strtod_l>
 801a4ae:	bf00      	nop
 801a4b0:	20000158 	.word	0x20000158

0801a4b4 <strtof>:
 801a4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4b8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 801a578 <strtof+0xc4>
 801a4bc:	4b29      	ldr	r3, [pc, #164]	@ (801a564 <strtof+0xb0>)
 801a4be:	460a      	mov	r2, r1
 801a4c0:	ed2d 8b02 	vpush	{d8}
 801a4c4:	4601      	mov	r1, r0
 801a4c6:	f8d8 0000 	ldr.w	r0, [r8]
 801a4ca:	f7ff fa09 	bl	80198e0 <_strtod_l>
 801a4ce:	ec55 4b10 	vmov	r4, r5, d0
 801a4d2:	4622      	mov	r2, r4
 801a4d4:	462b      	mov	r3, r5
 801a4d6:	4620      	mov	r0, r4
 801a4d8:	4629      	mov	r1, r5
 801a4da:	f7e6 faff 	bl	8000adc <__aeabi_dcmpun>
 801a4de:	b190      	cbz	r0, 801a506 <strtof+0x52>
 801a4e0:	2d00      	cmp	r5, #0
 801a4e2:	4821      	ldr	r0, [pc, #132]	@ (801a568 <strtof+0xb4>)
 801a4e4:	da09      	bge.n	801a4fa <strtof+0x46>
 801a4e6:	f001 f9c7 	bl	801b878 <nanf>
 801a4ea:	eeb1 8a40 	vneg.f32	s16, s0
 801a4ee:	eeb0 0a48 	vmov.f32	s0, s16
 801a4f2:	ecbd 8b02 	vpop	{d8}
 801a4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4fa:	ecbd 8b02 	vpop	{d8}
 801a4fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a502:	f001 b9b9 	b.w	801b878 <nanf>
 801a506:	4620      	mov	r0, r4
 801a508:	4629      	mov	r1, r5
 801a50a:	f7e6 fb45 	bl	8000b98 <__aeabi_d2f>
 801a50e:	ee08 0a10 	vmov	s16, r0
 801a512:	eddf 7a16 	vldr	s15, [pc, #88]	@ 801a56c <strtof+0xb8>
 801a516:	eeb0 7ac8 	vabs.f32	s14, s16
 801a51a:	eeb4 7a67 	vcmp.f32	s14, s15
 801a51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a522:	dd11      	ble.n	801a548 <strtof+0x94>
 801a524:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 801a528:	4b11      	ldr	r3, [pc, #68]	@ (801a570 <strtof+0xbc>)
 801a52a:	f04f 32ff 	mov.w	r2, #4294967295
 801a52e:	4620      	mov	r0, r4
 801a530:	4639      	mov	r1, r7
 801a532:	f7e6 fad3 	bl	8000adc <__aeabi_dcmpun>
 801a536:	b980      	cbnz	r0, 801a55a <strtof+0xa6>
 801a538:	4b0d      	ldr	r3, [pc, #52]	@ (801a570 <strtof+0xbc>)
 801a53a:	f04f 32ff 	mov.w	r2, #4294967295
 801a53e:	4620      	mov	r0, r4
 801a540:	4639      	mov	r1, r7
 801a542:	f7e6 faad 	bl	8000aa0 <__aeabi_dcmple>
 801a546:	b940      	cbnz	r0, 801a55a <strtof+0xa6>
 801a548:	ee18 3a10 	vmov	r3, s16
 801a54c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801a550:	d1cd      	bne.n	801a4ee <strtof+0x3a>
 801a552:	4b08      	ldr	r3, [pc, #32]	@ (801a574 <strtof+0xc0>)
 801a554:	402b      	ands	r3, r5
 801a556:	2b00      	cmp	r3, #0
 801a558:	d0c9      	beq.n	801a4ee <strtof+0x3a>
 801a55a:	f8d8 3000 	ldr.w	r3, [r8]
 801a55e:	2222      	movs	r2, #34	@ 0x22
 801a560:	601a      	str	r2, [r3, #0]
 801a562:	e7c4      	b.n	801a4ee <strtof+0x3a>
 801a564:	20000158 	.word	0x20000158
 801a568:	0802336e 	.word	0x0802336e
 801a56c:	7f7fffff 	.word	0x7f7fffff
 801a570:	7fefffff 	.word	0x7fefffff
 801a574:	7ff00000 	.word	0x7ff00000
 801a578:	200002c4 	.word	0x200002c4

0801a57c <_strtol_l.constprop.0>:
 801a57c:	2b24      	cmp	r3, #36	@ 0x24
 801a57e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a582:	4686      	mov	lr, r0
 801a584:	4690      	mov	r8, r2
 801a586:	d801      	bhi.n	801a58c <_strtol_l.constprop.0+0x10>
 801a588:	2b01      	cmp	r3, #1
 801a58a:	d106      	bne.n	801a59a <_strtol_l.constprop.0+0x1e>
 801a58c:	f001 f928 	bl	801b7e0 <__errno>
 801a590:	2316      	movs	r3, #22
 801a592:	6003      	str	r3, [r0, #0]
 801a594:	2000      	movs	r0, #0
 801a596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a59a:	4834      	ldr	r0, [pc, #208]	@ (801a66c <_strtol_l.constprop.0+0xf0>)
 801a59c:	460d      	mov	r5, r1
 801a59e:	462a      	mov	r2, r5
 801a5a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a5a4:	5d06      	ldrb	r6, [r0, r4]
 801a5a6:	f016 0608 	ands.w	r6, r6, #8
 801a5aa:	d1f8      	bne.n	801a59e <_strtol_l.constprop.0+0x22>
 801a5ac:	2c2d      	cmp	r4, #45	@ 0x2d
 801a5ae:	d12d      	bne.n	801a60c <_strtol_l.constprop.0+0x90>
 801a5b0:	782c      	ldrb	r4, [r5, #0]
 801a5b2:	2601      	movs	r6, #1
 801a5b4:	1c95      	adds	r5, r2, #2
 801a5b6:	f033 0210 	bics.w	r2, r3, #16
 801a5ba:	d109      	bne.n	801a5d0 <_strtol_l.constprop.0+0x54>
 801a5bc:	2c30      	cmp	r4, #48	@ 0x30
 801a5be:	d12a      	bne.n	801a616 <_strtol_l.constprop.0+0x9a>
 801a5c0:	782a      	ldrb	r2, [r5, #0]
 801a5c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801a5c6:	2a58      	cmp	r2, #88	@ 0x58
 801a5c8:	d125      	bne.n	801a616 <_strtol_l.constprop.0+0x9a>
 801a5ca:	786c      	ldrb	r4, [r5, #1]
 801a5cc:	2310      	movs	r3, #16
 801a5ce:	3502      	adds	r5, #2
 801a5d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801a5d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a5d8:	2200      	movs	r2, #0
 801a5da:	fbbc f9f3 	udiv	r9, ip, r3
 801a5de:	4610      	mov	r0, r2
 801a5e0:	fb03 ca19 	mls	sl, r3, r9, ip
 801a5e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801a5e8:	2f09      	cmp	r7, #9
 801a5ea:	d81b      	bhi.n	801a624 <_strtol_l.constprop.0+0xa8>
 801a5ec:	463c      	mov	r4, r7
 801a5ee:	42a3      	cmp	r3, r4
 801a5f0:	dd27      	ble.n	801a642 <_strtol_l.constprop.0+0xc6>
 801a5f2:	1c57      	adds	r7, r2, #1
 801a5f4:	d007      	beq.n	801a606 <_strtol_l.constprop.0+0x8a>
 801a5f6:	4581      	cmp	r9, r0
 801a5f8:	d320      	bcc.n	801a63c <_strtol_l.constprop.0+0xc0>
 801a5fa:	d101      	bne.n	801a600 <_strtol_l.constprop.0+0x84>
 801a5fc:	45a2      	cmp	sl, r4
 801a5fe:	db1d      	blt.n	801a63c <_strtol_l.constprop.0+0xc0>
 801a600:	fb00 4003 	mla	r0, r0, r3, r4
 801a604:	2201      	movs	r2, #1
 801a606:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a60a:	e7eb      	b.n	801a5e4 <_strtol_l.constprop.0+0x68>
 801a60c:	2c2b      	cmp	r4, #43	@ 0x2b
 801a60e:	bf04      	itt	eq
 801a610:	782c      	ldrbeq	r4, [r5, #0]
 801a612:	1c95      	addeq	r5, r2, #2
 801a614:	e7cf      	b.n	801a5b6 <_strtol_l.constprop.0+0x3a>
 801a616:	2b00      	cmp	r3, #0
 801a618:	d1da      	bne.n	801a5d0 <_strtol_l.constprop.0+0x54>
 801a61a:	2c30      	cmp	r4, #48	@ 0x30
 801a61c:	bf0c      	ite	eq
 801a61e:	2308      	moveq	r3, #8
 801a620:	230a      	movne	r3, #10
 801a622:	e7d5      	b.n	801a5d0 <_strtol_l.constprop.0+0x54>
 801a624:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801a628:	2f19      	cmp	r7, #25
 801a62a:	d801      	bhi.n	801a630 <_strtol_l.constprop.0+0xb4>
 801a62c:	3c37      	subs	r4, #55	@ 0x37
 801a62e:	e7de      	b.n	801a5ee <_strtol_l.constprop.0+0x72>
 801a630:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801a634:	2f19      	cmp	r7, #25
 801a636:	d804      	bhi.n	801a642 <_strtol_l.constprop.0+0xc6>
 801a638:	3c57      	subs	r4, #87	@ 0x57
 801a63a:	e7d8      	b.n	801a5ee <_strtol_l.constprop.0+0x72>
 801a63c:	f04f 32ff 	mov.w	r2, #4294967295
 801a640:	e7e1      	b.n	801a606 <_strtol_l.constprop.0+0x8a>
 801a642:	1c53      	adds	r3, r2, #1
 801a644:	d108      	bne.n	801a658 <_strtol_l.constprop.0+0xdc>
 801a646:	2322      	movs	r3, #34	@ 0x22
 801a648:	f8ce 3000 	str.w	r3, [lr]
 801a64c:	4660      	mov	r0, ip
 801a64e:	f1b8 0f00 	cmp.w	r8, #0
 801a652:	d0a0      	beq.n	801a596 <_strtol_l.constprop.0+0x1a>
 801a654:	1e69      	subs	r1, r5, #1
 801a656:	e006      	b.n	801a666 <_strtol_l.constprop.0+0xea>
 801a658:	b106      	cbz	r6, 801a65c <_strtol_l.constprop.0+0xe0>
 801a65a:	4240      	negs	r0, r0
 801a65c:	f1b8 0f00 	cmp.w	r8, #0
 801a660:	d099      	beq.n	801a596 <_strtol_l.constprop.0+0x1a>
 801a662:	2a00      	cmp	r2, #0
 801a664:	d1f6      	bne.n	801a654 <_strtol_l.constprop.0+0xd8>
 801a666:	f8c8 1000 	str.w	r1, [r8]
 801a66a:	e794      	b.n	801a596 <_strtol_l.constprop.0+0x1a>
 801a66c:	08023181 	.word	0x08023181

0801a670 <_strtol_r>:
 801a670:	f7ff bf84 	b.w	801a57c <_strtol_l.constprop.0>

0801a674 <strtol>:
 801a674:	4613      	mov	r3, r2
 801a676:	460a      	mov	r2, r1
 801a678:	4601      	mov	r1, r0
 801a67a:	4802      	ldr	r0, [pc, #8]	@ (801a684 <strtol+0x10>)
 801a67c:	6800      	ldr	r0, [r0, #0]
 801a67e:	f7ff bf7d 	b.w	801a57c <_strtol_l.constprop.0>
 801a682:	bf00      	nop
 801a684:	200002c4 	.word	0x200002c4

0801a688 <__cvt>:
 801a688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a68c:	ec57 6b10 	vmov	r6, r7, d0
 801a690:	2f00      	cmp	r7, #0
 801a692:	460c      	mov	r4, r1
 801a694:	4619      	mov	r1, r3
 801a696:	463b      	mov	r3, r7
 801a698:	bfbb      	ittet	lt
 801a69a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a69e:	461f      	movlt	r7, r3
 801a6a0:	2300      	movge	r3, #0
 801a6a2:	232d      	movlt	r3, #45	@ 0x2d
 801a6a4:	700b      	strb	r3, [r1, #0]
 801a6a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a6a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a6ac:	4691      	mov	r9, r2
 801a6ae:	f023 0820 	bic.w	r8, r3, #32
 801a6b2:	bfbc      	itt	lt
 801a6b4:	4632      	movlt	r2, r6
 801a6b6:	4616      	movlt	r6, r2
 801a6b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a6bc:	d005      	beq.n	801a6ca <__cvt+0x42>
 801a6be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a6c2:	d100      	bne.n	801a6c6 <__cvt+0x3e>
 801a6c4:	3401      	adds	r4, #1
 801a6c6:	2102      	movs	r1, #2
 801a6c8:	e000      	b.n	801a6cc <__cvt+0x44>
 801a6ca:	2103      	movs	r1, #3
 801a6cc:	ab03      	add	r3, sp, #12
 801a6ce:	9301      	str	r3, [sp, #4]
 801a6d0:	ab02      	add	r3, sp, #8
 801a6d2:	9300      	str	r3, [sp, #0]
 801a6d4:	ec47 6b10 	vmov	d0, r6, r7
 801a6d8:	4653      	mov	r3, sl
 801a6da:	4622      	mov	r2, r4
 801a6dc:	f001 f978 	bl	801b9d0 <_dtoa_r>
 801a6e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a6e4:	4605      	mov	r5, r0
 801a6e6:	d119      	bne.n	801a71c <__cvt+0x94>
 801a6e8:	f019 0f01 	tst.w	r9, #1
 801a6ec:	d00e      	beq.n	801a70c <__cvt+0x84>
 801a6ee:	eb00 0904 	add.w	r9, r0, r4
 801a6f2:	2200      	movs	r2, #0
 801a6f4:	2300      	movs	r3, #0
 801a6f6:	4630      	mov	r0, r6
 801a6f8:	4639      	mov	r1, r7
 801a6fa:	f7e6 f9bd 	bl	8000a78 <__aeabi_dcmpeq>
 801a6fe:	b108      	cbz	r0, 801a704 <__cvt+0x7c>
 801a700:	f8cd 900c 	str.w	r9, [sp, #12]
 801a704:	2230      	movs	r2, #48	@ 0x30
 801a706:	9b03      	ldr	r3, [sp, #12]
 801a708:	454b      	cmp	r3, r9
 801a70a:	d31e      	bcc.n	801a74a <__cvt+0xc2>
 801a70c:	9b03      	ldr	r3, [sp, #12]
 801a70e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a710:	1b5b      	subs	r3, r3, r5
 801a712:	4628      	mov	r0, r5
 801a714:	6013      	str	r3, [r2, #0]
 801a716:	b004      	add	sp, #16
 801a718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a71c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a720:	eb00 0904 	add.w	r9, r0, r4
 801a724:	d1e5      	bne.n	801a6f2 <__cvt+0x6a>
 801a726:	7803      	ldrb	r3, [r0, #0]
 801a728:	2b30      	cmp	r3, #48	@ 0x30
 801a72a:	d10a      	bne.n	801a742 <__cvt+0xba>
 801a72c:	2200      	movs	r2, #0
 801a72e:	2300      	movs	r3, #0
 801a730:	4630      	mov	r0, r6
 801a732:	4639      	mov	r1, r7
 801a734:	f7e6 f9a0 	bl	8000a78 <__aeabi_dcmpeq>
 801a738:	b918      	cbnz	r0, 801a742 <__cvt+0xba>
 801a73a:	f1c4 0401 	rsb	r4, r4, #1
 801a73e:	f8ca 4000 	str.w	r4, [sl]
 801a742:	f8da 3000 	ldr.w	r3, [sl]
 801a746:	4499      	add	r9, r3
 801a748:	e7d3      	b.n	801a6f2 <__cvt+0x6a>
 801a74a:	1c59      	adds	r1, r3, #1
 801a74c:	9103      	str	r1, [sp, #12]
 801a74e:	701a      	strb	r2, [r3, #0]
 801a750:	e7d9      	b.n	801a706 <__cvt+0x7e>

0801a752 <__exponent>:
 801a752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a754:	2900      	cmp	r1, #0
 801a756:	bfba      	itte	lt
 801a758:	4249      	neglt	r1, r1
 801a75a:	232d      	movlt	r3, #45	@ 0x2d
 801a75c:	232b      	movge	r3, #43	@ 0x2b
 801a75e:	2909      	cmp	r1, #9
 801a760:	7002      	strb	r2, [r0, #0]
 801a762:	7043      	strb	r3, [r0, #1]
 801a764:	dd29      	ble.n	801a7ba <__exponent+0x68>
 801a766:	f10d 0307 	add.w	r3, sp, #7
 801a76a:	461d      	mov	r5, r3
 801a76c:	270a      	movs	r7, #10
 801a76e:	461a      	mov	r2, r3
 801a770:	fbb1 f6f7 	udiv	r6, r1, r7
 801a774:	fb07 1416 	mls	r4, r7, r6, r1
 801a778:	3430      	adds	r4, #48	@ 0x30
 801a77a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a77e:	460c      	mov	r4, r1
 801a780:	2c63      	cmp	r4, #99	@ 0x63
 801a782:	f103 33ff 	add.w	r3, r3, #4294967295
 801a786:	4631      	mov	r1, r6
 801a788:	dcf1      	bgt.n	801a76e <__exponent+0x1c>
 801a78a:	3130      	adds	r1, #48	@ 0x30
 801a78c:	1e94      	subs	r4, r2, #2
 801a78e:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a792:	1c41      	adds	r1, r0, #1
 801a794:	4623      	mov	r3, r4
 801a796:	42ab      	cmp	r3, r5
 801a798:	d30a      	bcc.n	801a7b0 <__exponent+0x5e>
 801a79a:	f10d 0309 	add.w	r3, sp, #9
 801a79e:	1a9b      	subs	r3, r3, r2
 801a7a0:	42ac      	cmp	r4, r5
 801a7a2:	bf88      	it	hi
 801a7a4:	2300      	movhi	r3, #0
 801a7a6:	3302      	adds	r3, #2
 801a7a8:	4403      	add	r3, r0
 801a7aa:	1a18      	subs	r0, r3, r0
 801a7ac:	b003      	add	sp, #12
 801a7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a7b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a7b8:	e7ed      	b.n	801a796 <__exponent+0x44>
 801a7ba:	2330      	movs	r3, #48	@ 0x30
 801a7bc:	3130      	adds	r1, #48	@ 0x30
 801a7be:	7083      	strb	r3, [r0, #2]
 801a7c0:	70c1      	strb	r1, [r0, #3]
 801a7c2:	1d03      	adds	r3, r0, #4
 801a7c4:	e7f1      	b.n	801a7aa <__exponent+0x58>
	...

0801a7c8 <_printf_float>:
 801a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7cc:	b08d      	sub	sp, #52	@ 0x34
 801a7ce:	460c      	mov	r4, r1
 801a7d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a7d4:	4616      	mov	r6, r2
 801a7d6:	461f      	mov	r7, r3
 801a7d8:	4605      	mov	r5, r0
 801a7da:	f000 ffa7 	bl	801b72c <_localeconv_r>
 801a7de:	6803      	ldr	r3, [r0, #0]
 801a7e0:	9304      	str	r3, [sp, #16]
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	f7e5 fd1c 	bl	8000220 <strlen>
 801a7e8:	2300      	movs	r3, #0
 801a7ea:	930a      	str	r3, [sp, #40]	@ 0x28
 801a7ec:	f8d8 3000 	ldr.w	r3, [r8]
 801a7f0:	9005      	str	r0, [sp, #20]
 801a7f2:	3307      	adds	r3, #7
 801a7f4:	f023 0307 	bic.w	r3, r3, #7
 801a7f8:	f103 0208 	add.w	r2, r3, #8
 801a7fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a800:	f8d4 b000 	ldr.w	fp, [r4]
 801a804:	f8c8 2000 	str.w	r2, [r8]
 801a808:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a80c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a810:	9307      	str	r3, [sp, #28]
 801a812:	f8cd 8018 	str.w	r8, [sp, #24]
 801a816:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a81a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a81e:	4b9c      	ldr	r3, [pc, #624]	@ (801aa90 <_printf_float+0x2c8>)
 801a820:	f04f 32ff 	mov.w	r2, #4294967295
 801a824:	f7e6 f95a 	bl	8000adc <__aeabi_dcmpun>
 801a828:	bb70      	cbnz	r0, 801a888 <_printf_float+0xc0>
 801a82a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a82e:	4b98      	ldr	r3, [pc, #608]	@ (801aa90 <_printf_float+0x2c8>)
 801a830:	f04f 32ff 	mov.w	r2, #4294967295
 801a834:	f7e6 f934 	bl	8000aa0 <__aeabi_dcmple>
 801a838:	bb30      	cbnz	r0, 801a888 <_printf_float+0xc0>
 801a83a:	2200      	movs	r2, #0
 801a83c:	2300      	movs	r3, #0
 801a83e:	4640      	mov	r0, r8
 801a840:	4649      	mov	r1, r9
 801a842:	f7e6 f923 	bl	8000a8c <__aeabi_dcmplt>
 801a846:	b110      	cbz	r0, 801a84e <_printf_float+0x86>
 801a848:	232d      	movs	r3, #45	@ 0x2d
 801a84a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a84e:	4a91      	ldr	r2, [pc, #580]	@ (801aa94 <_printf_float+0x2cc>)
 801a850:	4b91      	ldr	r3, [pc, #580]	@ (801aa98 <_printf_float+0x2d0>)
 801a852:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a856:	bf94      	ite	ls
 801a858:	4690      	movls	r8, r2
 801a85a:	4698      	movhi	r8, r3
 801a85c:	2303      	movs	r3, #3
 801a85e:	6123      	str	r3, [r4, #16]
 801a860:	f02b 0304 	bic.w	r3, fp, #4
 801a864:	6023      	str	r3, [r4, #0]
 801a866:	f04f 0900 	mov.w	r9, #0
 801a86a:	9700      	str	r7, [sp, #0]
 801a86c:	4633      	mov	r3, r6
 801a86e:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a870:	4621      	mov	r1, r4
 801a872:	4628      	mov	r0, r5
 801a874:	f000 f9d2 	bl	801ac1c <_printf_common>
 801a878:	3001      	adds	r0, #1
 801a87a:	f040 808d 	bne.w	801a998 <_printf_float+0x1d0>
 801a87e:	f04f 30ff 	mov.w	r0, #4294967295
 801a882:	b00d      	add	sp, #52	@ 0x34
 801a884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a888:	4642      	mov	r2, r8
 801a88a:	464b      	mov	r3, r9
 801a88c:	4640      	mov	r0, r8
 801a88e:	4649      	mov	r1, r9
 801a890:	f7e6 f924 	bl	8000adc <__aeabi_dcmpun>
 801a894:	b140      	cbz	r0, 801a8a8 <_printf_float+0xe0>
 801a896:	464b      	mov	r3, r9
 801a898:	2b00      	cmp	r3, #0
 801a89a:	bfbc      	itt	lt
 801a89c:	232d      	movlt	r3, #45	@ 0x2d
 801a89e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a8a2:	4a7e      	ldr	r2, [pc, #504]	@ (801aa9c <_printf_float+0x2d4>)
 801a8a4:	4b7e      	ldr	r3, [pc, #504]	@ (801aaa0 <_printf_float+0x2d8>)
 801a8a6:	e7d4      	b.n	801a852 <_printf_float+0x8a>
 801a8a8:	6863      	ldr	r3, [r4, #4]
 801a8aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a8ae:	9206      	str	r2, [sp, #24]
 801a8b0:	1c5a      	adds	r2, r3, #1
 801a8b2:	d13b      	bne.n	801a92c <_printf_float+0x164>
 801a8b4:	2306      	movs	r3, #6
 801a8b6:	6063      	str	r3, [r4, #4]
 801a8b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a8bc:	2300      	movs	r3, #0
 801a8be:	6022      	str	r2, [r4, #0]
 801a8c0:	9303      	str	r3, [sp, #12]
 801a8c2:	ab0a      	add	r3, sp, #40	@ 0x28
 801a8c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a8c8:	ab09      	add	r3, sp, #36	@ 0x24
 801a8ca:	9300      	str	r3, [sp, #0]
 801a8cc:	6861      	ldr	r1, [r4, #4]
 801a8ce:	ec49 8b10 	vmov	d0, r8, r9
 801a8d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a8d6:	4628      	mov	r0, r5
 801a8d8:	f7ff fed6 	bl	801a688 <__cvt>
 801a8dc:	9b06      	ldr	r3, [sp, #24]
 801a8de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a8e0:	2b47      	cmp	r3, #71	@ 0x47
 801a8e2:	4680      	mov	r8, r0
 801a8e4:	d129      	bne.n	801a93a <_printf_float+0x172>
 801a8e6:	1cc8      	adds	r0, r1, #3
 801a8e8:	db02      	blt.n	801a8f0 <_printf_float+0x128>
 801a8ea:	6863      	ldr	r3, [r4, #4]
 801a8ec:	4299      	cmp	r1, r3
 801a8ee:	dd41      	ble.n	801a974 <_printf_float+0x1ac>
 801a8f0:	f1aa 0a02 	sub.w	sl, sl, #2
 801a8f4:	fa5f fa8a 	uxtb.w	sl, sl
 801a8f8:	3901      	subs	r1, #1
 801a8fa:	4652      	mov	r2, sl
 801a8fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a900:	9109      	str	r1, [sp, #36]	@ 0x24
 801a902:	f7ff ff26 	bl	801a752 <__exponent>
 801a906:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a908:	1813      	adds	r3, r2, r0
 801a90a:	2a01      	cmp	r2, #1
 801a90c:	4681      	mov	r9, r0
 801a90e:	6123      	str	r3, [r4, #16]
 801a910:	dc02      	bgt.n	801a918 <_printf_float+0x150>
 801a912:	6822      	ldr	r2, [r4, #0]
 801a914:	07d2      	lsls	r2, r2, #31
 801a916:	d501      	bpl.n	801a91c <_printf_float+0x154>
 801a918:	3301      	adds	r3, #1
 801a91a:	6123      	str	r3, [r4, #16]
 801a91c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a920:	2b00      	cmp	r3, #0
 801a922:	d0a2      	beq.n	801a86a <_printf_float+0xa2>
 801a924:	232d      	movs	r3, #45	@ 0x2d
 801a926:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a92a:	e79e      	b.n	801a86a <_printf_float+0xa2>
 801a92c:	9a06      	ldr	r2, [sp, #24]
 801a92e:	2a47      	cmp	r2, #71	@ 0x47
 801a930:	d1c2      	bne.n	801a8b8 <_printf_float+0xf0>
 801a932:	2b00      	cmp	r3, #0
 801a934:	d1c0      	bne.n	801a8b8 <_printf_float+0xf0>
 801a936:	2301      	movs	r3, #1
 801a938:	e7bd      	b.n	801a8b6 <_printf_float+0xee>
 801a93a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a93e:	d9db      	bls.n	801a8f8 <_printf_float+0x130>
 801a940:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801a944:	d118      	bne.n	801a978 <_printf_float+0x1b0>
 801a946:	2900      	cmp	r1, #0
 801a948:	6863      	ldr	r3, [r4, #4]
 801a94a:	dd0b      	ble.n	801a964 <_printf_float+0x19c>
 801a94c:	6121      	str	r1, [r4, #16]
 801a94e:	b913      	cbnz	r3, 801a956 <_printf_float+0x18e>
 801a950:	6822      	ldr	r2, [r4, #0]
 801a952:	07d0      	lsls	r0, r2, #31
 801a954:	d502      	bpl.n	801a95c <_printf_float+0x194>
 801a956:	3301      	adds	r3, #1
 801a958:	440b      	add	r3, r1
 801a95a:	6123      	str	r3, [r4, #16]
 801a95c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a95e:	f04f 0900 	mov.w	r9, #0
 801a962:	e7db      	b.n	801a91c <_printf_float+0x154>
 801a964:	b913      	cbnz	r3, 801a96c <_printf_float+0x1a4>
 801a966:	6822      	ldr	r2, [r4, #0]
 801a968:	07d2      	lsls	r2, r2, #31
 801a96a:	d501      	bpl.n	801a970 <_printf_float+0x1a8>
 801a96c:	3302      	adds	r3, #2
 801a96e:	e7f4      	b.n	801a95a <_printf_float+0x192>
 801a970:	2301      	movs	r3, #1
 801a972:	e7f2      	b.n	801a95a <_printf_float+0x192>
 801a974:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801a978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a97a:	4299      	cmp	r1, r3
 801a97c:	db05      	blt.n	801a98a <_printf_float+0x1c2>
 801a97e:	6823      	ldr	r3, [r4, #0]
 801a980:	6121      	str	r1, [r4, #16]
 801a982:	07d8      	lsls	r0, r3, #31
 801a984:	d5ea      	bpl.n	801a95c <_printf_float+0x194>
 801a986:	1c4b      	adds	r3, r1, #1
 801a988:	e7e7      	b.n	801a95a <_printf_float+0x192>
 801a98a:	2900      	cmp	r1, #0
 801a98c:	bfd4      	ite	le
 801a98e:	f1c1 0202 	rsble	r2, r1, #2
 801a992:	2201      	movgt	r2, #1
 801a994:	4413      	add	r3, r2
 801a996:	e7e0      	b.n	801a95a <_printf_float+0x192>
 801a998:	6823      	ldr	r3, [r4, #0]
 801a99a:	055a      	lsls	r2, r3, #21
 801a99c:	d407      	bmi.n	801a9ae <_printf_float+0x1e6>
 801a99e:	6923      	ldr	r3, [r4, #16]
 801a9a0:	4642      	mov	r2, r8
 801a9a2:	4631      	mov	r1, r6
 801a9a4:	4628      	mov	r0, r5
 801a9a6:	47b8      	blx	r7
 801a9a8:	3001      	adds	r0, #1
 801a9aa:	d12b      	bne.n	801aa04 <_printf_float+0x23c>
 801a9ac:	e767      	b.n	801a87e <_printf_float+0xb6>
 801a9ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a9b2:	f240 80dd 	bls.w	801ab70 <_printf_float+0x3a8>
 801a9b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	2300      	movs	r3, #0
 801a9be:	f7e6 f85b 	bl	8000a78 <__aeabi_dcmpeq>
 801a9c2:	2800      	cmp	r0, #0
 801a9c4:	d033      	beq.n	801aa2e <_printf_float+0x266>
 801a9c6:	4a37      	ldr	r2, [pc, #220]	@ (801aaa4 <_printf_float+0x2dc>)
 801a9c8:	2301      	movs	r3, #1
 801a9ca:	4631      	mov	r1, r6
 801a9cc:	4628      	mov	r0, r5
 801a9ce:	47b8      	blx	r7
 801a9d0:	3001      	adds	r0, #1
 801a9d2:	f43f af54 	beq.w	801a87e <_printf_float+0xb6>
 801a9d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a9da:	4543      	cmp	r3, r8
 801a9dc:	db02      	blt.n	801a9e4 <_printf_float+0x21c>
 801a9de:	6823      	ldr	r3, [r4, #0]
 801a9e0:	07d8      	lsls	r0, r3, #31
 801a9e2:	d50f      	bpl.n	801aa04 <_printf_float+0x23c>
 801a9e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a9e8:	4631      	mov	r1, r6
 801a9ea:	4628      	mov	r0, r5
 801a9ec:	47b8      	blx	r7
 801a9ee:	3001      	adds	r0, #1
 801a9f0:	f43f af45 	beq.w	801a87e <_printf_float+0xb6>
 801a9f4:	f04f 0900 	mov.w	r9, #0
 801a9f8:	f108 38ff 	add.w	r8, r8, #4294967295
 801a9fc:	f104 0a1a 	add.w	sl, r4, #26
 801aa00:	45c8      	cmp	r8, r9
 801aa02:	dc09      	bgt.n	801aa18 <_printf_float+0x250>
 801aa04:	6823      	ldr	r3, [r4, #0]
 801aa06:	079b      	lsls	r3, r3, #30
 801aa08:	f100 8103 	bmi.w	801ac12 <_printf_float+0x44a>
 801aa0c:	68e0      	ldr	r0, [r4, #12]
 801aa0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aa10:	4298      	cmp	r0, r3
 801aa12:	bfb8      	it	lt
 801aa14:	4618      	movlt	r0, r3
 801aa16:	e734      	b.n	801a882 <_printf_float+0xba>
 801aa18:	2301      	movs	r3, #1
 801aa1a:	4652      	mov	r2, sl
 801aa1c:	4631      	mov	r1, r6
 801aa1e:	4628      	mov	r0, r5
 801aa20:	47b8      	blx	r7
 801aa22:	3001      	adds	r0, #1
 801aa24:	f43f af2b 	beq.w	801a87e <_printf_float+0xb6>
 801aa28:	f109 0901 	add.w	r9, r9, #1
 801aa2c:	e7e8      	b.n	801aa00 <_printf_float+0x238>
 801aa2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	dc39      	bgt.n	801aaa8 <_printf_float+0x2e0>
 801aa34:	4a1b      	ldr	r2, [pc, #108]	@ (801aaa4 <_printf_float+0x2dc>)
 801aa36:	2301      	movs	r3, #1
 801aa38:	4631      	mov	r1, r6
 801aa3a:	4628      	mov	r0, r5
 801aa3c:	47b8      	blx	r7
 801aa3e:	3001      	adds	r0, #1
 801aa40:	f43f af1d 	beq.w	801a87e <_printf_float+0xb6>
 801aa44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801aa48:	ea59 0303 	orrs.w	r3, r9, r3
 801aa4c:	d102      	bne.n	801aa54 <_printf_float+0x28c>
 801aa4e:	6823      	ldr	r3, [r4, #0]
 801aa50:	07d9      	lsls	r1, r3, #31
 801aa52:	d5d7      	bpl.n	801aa04 <_printf_float+0x23c>
 801aa54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aa58:	4631      	mov	r1, r6
 801aa5a:	4628      	mov	r0, r5
 801aa5c:	47b8      	blx	r7
 801aa5e:	3001      	adds	r0, #1
 801aa60:	f43f af0d 	beq.w	801a87e <_printf_float+0xb6>
 801aa64:	f04f 0a00 	mov.w	sl, #0
 801aa68:	f104 0b1a 	add.w	fp, r4, #26
 801aa6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa6e:	425b      	negs	r3, r3
 801aa70:	4553      	cmp	r3, sl
 801aa72:	dc01      	bgt.n	801aa78 <_printf_float+0x2b0>
 801aa74:	464b      	mov	r3, r9
 801aa76:	e793      	b.n	801a9a0 <_printf_float+0x1d8>
 801aa78:	2301      	movs	r3, #1
 801aa7a:	465a      	mov	r2, fp
 801aa7c:	4631      	mov	r1, r6
 801aa7e:	4628      	mov	r0, r5
 801aa80:	47b8      	blx	r7
 801aa82:	3001      	adds	r0, #1
 801aa84:	f43f aefb 	beq.w	801a87e <_printf_float+0xb6>
 801aa88:	f10a 0a01 	add.w	sl, sl, #1
 801aa8c:	e7ee      	b.n	801aa6c <_printf_float+0x2a4>
 801aa8e:	bf00      	nop
 801aa90:	7fefffff 	.word	0x7fefffff
 801aa94:	08023281 	.word	0x08023281
 801aa98:	08023285 	.word	0x08023285
 801aa9c:	08023289 	.word	0x08023289
 801aaa0:	0802328d 	.word	0x0802328d
 801aaa4:	08023291 	.word	0x08023291
 801aaa8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801aaaa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801aaae:	4553      	cmp	r3, sl
 801aab0:	bfa8      	it	ge
 801aab2:	4653      	movge	r3, sl
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	4699      	mov	r9, r3
 801aab8:	dc36      	bgt.n	801ab28 <_printf_float+0x360>
 801aaba:	f04f 0b00 	mov.w	fp, #0
 801aabe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801aac2:	f104 021a 	add.w	r2, r4, #26
 801aac6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801aac8:	9306      	str	r3, [sp, #24]
 801aaca:	eba3 0309 	sub.w	r3, r3, r9
 801aace:	455b      	cmp	r3, fp
 801aad0:	dc31      	bgt.n	801ab36 <_printf_float+0x36e>
 801aad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aad4:	459a      	cmp	sl, r3
 801aad6:	dc3a      	bgt.n	801ab4e <_printf_float+0x386>
 801aad8:	6823      	ldr	r3, [r4, #0]
 801aada:	07da      	lsls	r2, r3, #31
 801aadc:	d437      	bmi.n	801ab4e <_printf_float+0x386>
 801aade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aae0:	ebaa 0903 	sub.w	r9, sl, r3
 801aae4:	9b06      	ldr	r3, [sp, #24]
 801aae6:	ebaa 0303 	sub.w	r3, sl, r3
 801aaea:	4599      	cmp	r9, r3
 801aaec:	bfa8      	it	ge
 801aaee:	4699      	movge	r9, r3
 801aaf0:	f1b9 0f00 	cmp.w	r9, #0
 801aaf4:	dc33      	bgt.n	801ab5e <_printf_float+0x396>
 801aaf6:	f04f 0800 	mov.w	r8, #0
 801aafa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801aafe:	f104 0b1a 	add.w	fp, r4, #26
 801ab02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab04:	ebaa 0303 	sub.w	r3, sl, r3
 801ab08:	eba3 0309 	sub.w	r3, r3, r9
 801ab0c:	4543      	cmp	r3, r8
 801ab0e:	f77f af79 	ble.w	801aa04 <_printf_float+0x23c>
 801ab12:	2301      	movs	r3, #1
 801ab14:	465a      	mov	r2, fp
 801ab16:	4631      	mov	r1, r6
 801ab18:	4628      	mov	r0, r5
 801ab1a:	47b8      	blx	r7
 801ab1c:	3001      	adds	r0, #1
 801ab1e:	f43f aeae 	beq.w	801a87e <_printf_float+0xb6>
 801ab22:	f108 0801 	add.w	r8, r8, #1
 801ab26:	e7ec      	b.n	801ab02 <_printf_float+0x33a>
 801ab28:	4642      	mov	r2, r8
 801ab2a:	4631      	mov	r1, r6
 801ab2c:	4628      	mov	r0, r5
 801ab2e:	47b8      	blx	r7
 801ab30:	3001      	adds	r0, #1
 801ab32:	d1c2      	bne.n	801aaba <_printf_float+0x2f2>
 801ab34:	e6a3      	b.n	801a87e <_printf_float+0xb6>
 801ab36:	2301      	movs	r3, #1
 801ab38:	4631      	mov	r1, r6
 801ab3a:	4628      	mov	r0, r5
 801ab3c:	9206      	str	r2, [sp, #24]
 801ab3e:	47b8      	blx	r7
 801ab40:	3001      	adds	r0, #1
 801ab42:	f43f ae9c 	beq.w	801a87e <_printf_float+0xb6>
 801ab46:	9a06      	ldr	r2, [sp, #24]
 801ab48:	f10b 0b01 	add.w	fp, fp, #1
 801ab4c:	e7bb      	b.n	801aac6 <_printf_float+0x2fe>
 801ab4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ab52:	4631      	mov	r1, r6
 801ab54:	4628      	mov	r0, r5
 801ab56:	47b8      	blx	r7
 801ab58:	3001      	adds	r0, #1
 801ab5a:	d1c0      	bne.n	801aade <_printf_float+0x316>
 801ab5c:	e68f      	b.n	801a87e <_printf_float+0xb6>
 801ab5e:	9a06      	ldr	r2, [sp, #24]
 801ab60:	464b      	mov	r3, r9
 801ab62:	4442      	add	r2, r8
 801ab64:	4631      	mov	r1, r6
 801ab66:	4628      	mov	r0, r5
 801ab68:	47b8      	blx	r7
 801ab6a:	3001      	adds	r0, #1
 801ab6c:	d1c3      	bne.n	801aaf6 <_printf_float+0x32e>
 801ab6e:	e686      	b.n	801a87e <_printf_float+0xb6>
 801ab70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801ab74:	f1ba 0f01 	cmp.w	sl, #1
 801ab78:	dc01      	bgt.n	801ab7e <_printf_float+0x3b6>
 801ab7a:	07db      	lsls	r3, r3, #31
 801ab7c:	d536      	bpl.n	801abec <_printf_float+0x424>
 801ab7e:	2301      	movs	r3, #1
 801ab80:	4642      	mov	r2, r8
 801ab82:	4631      	mov	r1, r6
 801ab84:	4628      	mov	r0, r5
 801ab86:	47b8      	blx	r7
 801ab88:	3001      	adds	r0, #1
 801ab8a:	f43f ae78 	beq.w	801a87e <_printf_float+0xb6>
 801ab8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ab92:	4631      	mov	r1, r6
 801ab94:	4628      	mov	r0, r5
 801ab96:	47b8      	blx	r7
 801ab98:	3001      	adds	r0, #1
 801ab9a:	f43f ae70 	beq.w	801a87e <_printf_float+0xb6>
 801ab9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801aba2:	2200      	movs	r2, #0
 801aba4:	2300      	movs	r3, #0
 801aba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801abaa:	f7e5 ff65 	bl	8000a78 <__aeabi_dcmpeq>
 801abae:	b9c0      	cbnz	r0, 801abe2 <_printf_float+0x41a>
 801abb0:	4653      	mov	r3, sl
 801abb2:	f108 0201 	add.w	r2, r8, #1
 801abb6:	4631      	mov	r1, r6
 801abb8:	4628      	mov	r0, r5
 801abba:	47b8      	blx	r7
 801abbc:	3001      	adds	r0, #1
 801abbe:	d10c      	bne.n	801abda <_printf_float+0x412>
 801abc0:	e65d      	b.n	801a87e <_printf_float+0xb6>
 801abc2:	2301      	movs	r3, #1
 801abc4:	465a      	mov	r2, fp
 801abc6:	4631      	mov	r1, r6
 801abc8:	4628      	mov	r0, r5
 801abca:	47b8      	blx	r7
 801abcc:	3001      	adds	r0, #1
 801abce:	f43f ae56 	beq.w	801a87e <_printf_float+0xb6>
 801abd2:	f108 0801 	add.w	r8, r8, #1
 801abd6:	45d0      	cmp	r8, sl
 801abd8:	dbf3      	blt.n	801abc2 <_printf_float+0x3fa>
 801abda:	464b      	mov	r3, r9
 801abdc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801abe0:	e6df      	b.n	801a9a2 <_printf_float+0x1da>
 801abe2:	f04f 0800 	mov.w	r8, #0
 801abe6:	f104 0b1a 	add.w	fp, r4, #26
 801abea:	e7f4      	b.n	801abd6 <_printf_float+0x40e>
 801abec:	2301      	movs	r3, #1
 801abee:	4642      	mov	r2, r8
 801abf0:	e7e1      	b.n	801abb6 <_printf_float+0x3ee>
 801abf2:	2301      	movs	r3, #1
 801abf4:	464a      	mov	r2, r9
 801abf6:	4631      	mov	r1, r6
 801abf8:	4628      	mov	r0, r5
 801abfa:	47b8      	blx	r7
 801abfc:	3001      	adds	r0, #1
 801abfe:	f43f ae3e 	beq.w	801a87e <_printf_float+0xb6>
 801ac02:	f108 0801 	add.w	r8, r8, #1
 801ac06:	68e3      	ldr	r3, [r4, #12]
 801ac08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ac0a:	1a5b      	subs	r3, r3, r1
 801ac0c:	4543      	cmp	r3, r8
 801ac0e:	dcf0      	bgt.n	801abf2 <_printf_float+0x42a>
 801ac10:	e6fc      	b.n	801aa0c <_printf_float+0x244>
 801ac12:	f04f 0800 	mov.w	r8, #0
 801ac16:	f104 0919 	add.w	r9, r4, #25
 801ac1a:	e7f4      	b.n	801ac06 <_printf_float+0x43e>

0801ac1c <_printf_common>:
 801ac1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac20:	4616      	mov	r6, r2
 801ac22:	4698      	mov	r8, r3
 801ac24:	688a      	ldr	r2, [r1, #8]
 801ac26:	690b      	ldr	r3, [r1, #16]
 801ac28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ac2c:	4293      	cmp	r3, r2
 801ac2e:	bfb8      	it	lt
 801ac30:	4613      	movlt	r3, r2
 801ac32:	6033      	str	r3, [r6, #0]
 801ac34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ac38:	4607      	mov	r7, r0
 801ac3a:	460c      	mov	r4, r1
 801ac3c:	b10a      	cbz	r2, 801ac42 <_printf_common+0x26>
 801ac3e:	3301      	adds	r3, #1
 801ac40:	6033      	str	r3, [r6, #0]
 801ac42:	6823      	ldr	r3, [r4, #0]
 801ac44:	0699      	lsls	r1, r3, #26
 801ac46:	bf42      	ittt	mi
 801ac48:	6833      	ldrmi	r3, [r6, #0]
 801ac4a:	3302      	addmi	r3, #2
 801ac4c:	6033      	strmi	r3, [r6, #0]
 801ac4e:	6825      	ldr	r5, [r4, #0]
 801ac50:	f015 0506 	ands.w	r5, r5, #6
 801ac54:	d106      	bne.n	801ac64 <_printf_common+0x48>
 801ac56:	f104 0a19 	add.w	sl, r4, #25
 801ac5a:	68e3      	ldr	r3, [r4, #12]
 801ac5c:	6832      	ldr	r2, [r6, #0]
 801ac5e:	1a9b      	subs	r3, r3, r2
 801ac60:	42ab      	cmp	r3, r5
 801ac62:	dc26      	bgt.n	801acb2 <_printf_common+0x96>
 801ac64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ac68:	6822      	ldr	r2, [r4, #0]
 801ac6a:	3b00      	subs	r3, #0
 801ac6c:	bf18      	it	ne
 801ac6e:	2301      	movne	r3, #1
 801ac70:	0692      	lsls	r2, r2, #26
 801ac72:	d42b      	bmi.n	801accc <_printf_common+0xb0>
 801ac74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ac78:	4641      	mov	r1, r8
 801ac7a:	4638      	mov	r0, r7
 801ac7c:	47c8      	blx	r9
 801ac7e:	3001      	adds	r0, #1
 801ac80:	d01e      	beq.n	801acc0 <_printf_common+0xa4>
 801ac82:	6823      	ldr	r3, [r4, #0]
 801ac84:	6922      	ldr	r2, [r4, #16]
 801ac86:	f003 0306 	and.w	r3, r3, #6
 801ac8a:	2b04      	cmp	r3, #4
 801ac8c:	bf02      	ittt	eq
 801ac8e:	68e5      	ldreq	r5, [r4, #12]
 801ac90:	6833      	ldreq	r3, [r6, #0]
 801ac92:	1aed      	subeq	r5, r5, r3
 801ac94:	68a3      	ldr	r3, [r4, #8]
 801ac96:	bf0c      	ite	eq
 801ac98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ac9c:	2500      	movne	r5, #0
 801ac9e:	4293      	cmp	r3, r2
 801aca0:	bfc4      	itt	gt
 801aca2:	1a9b      	subgt	r3, r3, r2
 801aca4:	18ed      	addgt	r5, r5, r3
 801aca6:	2600      	movs	r6, #0
 801aca8:	341a      	adds	r4, #26
 801acaa:	42b5      	cmp	r5, r6
 801acac:	d11a      	bne.n	801ace4 <_printf_common+0xc8>
 801acae:	2000      	movs	r0, #0
 801acb0:	e008      	b.n	801acc4 <_printf_common+0xa8>
 801acb2:	2301      	movs	r3, #1
 801acb4:	4652      	mov	r2, sl
 801acb6:	4641      	mov	r1, r8
 801acb8:	4638      	mov	r0, r7
 801acba:	47c8      	blx	r9
 801acbc:	3001      	adds	r0, #1
 801acbe:	d103      	bne.n	801acc8 <_printf_common+0xac>
 801acc0:	f04f 30ff 	mov.w	r0, #4294967295
 801acc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acc8:	3501      	adds	r5, #1
 801acca:	e7c6      	b.n	801ac5a <_printf_common+0x3e>
 801accc:	18e1      	adds	r1, r4, r3
 801acce:	1c5a      	adds	r2, r3, #1
 801acd0:	2030      	movs	r0, #48	@ 0x30
 801acd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801acd6:	4422      	add	r2, r4
 801acd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801acdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ace0:	3302      	adds	r3, #2
 801ace2:	e7c7      	b.n	801ac74 <_printf_common+0x58>
 801ace4:	2301      	movs	r3, #1
 801ace6:	4622      	mov	r2, r4
 801ace8:	4641      	mov	r1, r8
 801acea:	4638      	mov	r0, r7
 801acec:	47c8      	blx	r9
 801acee:	3001      	adds	r0, #1
 801acf0:	d0e6      	beq.n	801acc0 <_printf_common+0xa4>
 801acf2:	3601      	adds	r6, #1
 801acf4:	e7d9      	b.n	801acaa <_printf_common+0x8e>
	...

0801acf8 <_printf_i>:
 801acf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801acfc:	7e0f      	ldrb	r7, [r1, #24]
 801acfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ad00:	2f78      	cmp	r7, #120	@ 0x78
 801ad02:	4691      	mov	r9, r2
 801ad04:	4680      	mov	r8, r0
 801ad06:	460c      	mov	r4, r1
 801ad08:	469a      	mov	sl, r3
 801ad0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ad0e:	d807      	bhi.n	801ad20 <_printf_i+0x28>
 801ad10:	2f62      	cmp	r7, #98	@ 0x62
 801ad12:	d80a      	bhi.n	801ad2a <_printf_i+0x32>
 801ad14:	2f00      	cmp	r7, #0
 801ad16:	f000 80d2 	beq.w	801aebe <_printf_i+0x1c6>
 801ad1a:	2f58      	cmp	r7, #88	@ 0x58
 801ad1c:	f000 80b9 	beq.w	801ae92 <_printf_i+0x19a>
 801ad20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ad24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ad28:	e03a      	b.n	801ada0 <_printf_i+0xa8>
 801ad2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ad2e:	2b15      	cmp	r3, #21
 801ad30:	d8f6      	bhi.n	801ad20 <_printf_i+0x28>
 801ad32:	a101      	add	r1, pc, #4	@ (adr r1, 801ad38 <_printf_i+0x40>)
 801ad34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ad38:	0801ad91 	.word	0x0801ad91
 801ad3c:	0801ada5 	.word	0x0801ada5
 801ad40:	0801ad21 	.word	0x0801ad21
 801ad44:	0801ad21 	.word	0x0801ad21
 801ad48:	0801ad21 	.word	0x0801ad21
 801ad4c:	0801ad21 	.word	0x0801ad21
 801ad50:	0801ada5 	.word	0x0801ada5
 801ad54:	0801ad21 	.word	0x0801ad21
 801ad58:	0801ad21 	.word	0x0801ad21
 801ad5c:	0801ad21 	.word	0x0801ad21
 801ad60:	0801ad21 	.word	0x0801ad21
 801ad64:	0801aea5 	.word	0x0801aea5
 801ad68:	0801adcf 	.word	0x0801adcf
 801ad6c:	0801ae5f 	.word	0x0801ae5f
 801ad70:	0801ad21 	.word	0x0801ad21
 801ad74:	0801ad21 	.word	0x0801ad21
 801ad78:	0801aec7 	.word	0x0801aec7
 801ad7c:	0801ad21 	.word	0x0801ad21
 801ad80:	0801adcf 	.word	0x0801adcf
 801ad84:	0801ad21 	.word	0x0801ad21
 801ad88:	0801ad21 	.word	0x0801ad21
 801ad8c:	0801ae67 	.word	0x0801ae67
 801ad90:	6833      	ldr	r3, [r6, #0]
 801ad92:	1d1a      	adds	r2, r3, #4
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	6032      	str	r2, [r6, #0]
 801ad98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ad9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ada0:	2301      	movs	r3, #1
 801ada2:	e09d      	b.n	801aee0 <_printf_i+0x1e8>
 801ada4:	6833      	ldr	r3, [r6, #0]
 801ada6:	6820      	ldr	r0, [r4, #0]
 801ada8:	1d19      	adds	r1, r3, #4
 801adaa:	6031      	str	r1, [r6, #0]
 801adac:	0606      	lsls	r6, r0, #24
 801adae:	d501      	bpl.n	801adb4 <_printf_i+0xbc>
 801adb0:	681d      	ldr	r5, [r3, #0]
 801adb2:	e003      	b.n	801adbc <_printf_i+0xc4>
 801adb4:	0645      	lsls	r5, r0, #25
 801adb6:	d5fb      	bpl.n	801adb0 <_printf_i+0xb8>
 801adb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801adbc:	2d00      	cmp	r5, #0
 801adbe:	da03      	bge.n	801adc8 <_printf_i+0xd0>
 801adc0:	232d      	movs	r3, #45	@ 0x2d
 801adc2:	426d      	negs	r5, r5
 801adc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801adc8:	4859      	ldr	r0, [pc, #356]	@ (801af30 <_printf_i+0x238>)
 801adca:	230a      	movs	r3, #10
 801adcc:	e011      	b.n	801adf2 <_printf_i+0xfa>
 801adce:	6821      	ldr	r1, [r4, #0]
 801add0:	6833      	ldr	r3, [r6, #0]
 801add2:	0608      	lsls	r0, r1, #24
 801add4:	f853 5b04 	ldr.w	r5, [r3], #4
 801add8:	d402      	bmi.n	801ade0 <_printf_i+0xe8>
 801adda:	0649      	lsls	r1, r1, #25
 801addc:	bf48      	it	mi
 801adde:	b2ad      	uxthmi	r5, r5
 801ade0:	2f6f      	cmp	r7, #111	@ 0x6f
 801ade2:	4853      	ldr	r0, [pc, #332]	@ (801af30 <_printf_i+0x238>)
 801ade4:	6033      	str	r3, [r6, #0]
 801ade6:	bf14      	ite	ne
 801ade8:	230a      	movne	r3, #10
 801adea:	2308      	moveq	r3, #8
 801adec:	2100      	movs	r1, #0
 801adee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801adf2:	6866      	ldr	r6, [r4, #4]
 801adf4:	60a6      	str	r6, [r4, #8]
 801adf6:	2e00      	cmp	r6, #0
 801adf8:	bfa2      	ittt	ge
 801adfa:	6821      	ldrge	r1, [r4, #0]
 801adfc:	f021 0104 	bicge.w	r1, r1, #4
 801ae00:	6021      	strge	r1, [r4, #0]
 801ae02:	b90d      	cbnz	r5, 801ae08 <_printf_i+0x110>
 801ae04:	2e00      	cmp	r6, #0
 801ae06:	d04b      	beq.n	801aea0 <_printf_i+0x1a8>
 801ae08:	4616      	mov	r6, r2
 801ae0a:	fbb5 f1f3 	udiv	r1, r5, r3
 801ae0e:	fb03 5711 	mls	r7, r3, r1, r5
 801ae12:	5dc7      	ldrb	r7, [r0, r7]
 801ae14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ae18:	462f      	mov	r7, r5
 801ae1a:	42bb      	cmp	r3, r7
 801ae1c:	460d      	mov	r5, r1
 801ae1e:	d9f4      	bls.n	801ae0a <_printf_i+0x112>
 801ae20:	2b08      	cmp	r3, #8
 801ae22:	d10b      	bne.n	801ae3c <_printf_i+0x144>
 801ae24:	6823      	ldr	r3, [r4, #0]
 801ae26:	07df      	lsls	r7, r3, #31
 801ae28:	d508      	bpl.n	801ae3c <_printf_i+0x144>
 801ae2a:	6923      	ldr	r3, [r4, #16]
 801ae2c:	6861      	ldr	r1, [r4, #4]
 801ae2e:	4299      	cmp	r1, r3
 801ae30:	bfde      	ittt	le
 801ae32:	2330      	movle	r3, #48	@ 0x30
 801ae34:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ae38:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ae3c:	1b92      	subs	r2, r2, r6
 801ae3e:	6122      	str	r2, [r4, #16]
 801ae40:	f8cd a000 	str.w	sl, [sp]
 801ae44:	464b      	mov	r3, r9
 801ae46:	aa03      	add	r2, sp, #12
 801ae48:	4621      	mov	r1, r4
 801ae4a:	4640      	mov	r0, r8
 801ae4c:	f7ff fee6 	bl	801ac1c <_printf_common>
 801ae50:	3001      	adds	r0, #1
 801ae52:	d14a      	bne.n	801aeea <_printf_i+0x1f2>
 801ae54:	f04f 30ff 	mov.w	r0, #4294967295
 801ae58:	b004      	add	sp, #16
 801ae5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae5e:	6823      	ldr	r3, [r4, #0]
 801ae60:	f043 0320 	orr.w	r3, r3, #32
 801ae64:	6023      	str	r3, [r4, #0]
 801ae66:	4833      	ldr	r0, [pc, #204]	@ (801af34 <_printf_i+0x23c>)
 801ae68:	2778      	movs	r7, #120	@ 0x78
 801ae6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ae6e:	6823      	ldr	r3, [r4, #0]
 801ae70:	6831      	ldr	r1, [r6, #0]
 801ae72:	061f      	lsls	r7, r3, #24
 801ae74:	f851 5b04 	ldr.w	r5, [r1], #4
 801ae78:	d402      	bmi.n	801ae80 <_printf_i+0x188>
 801ae7a:	065f      	lsls	r7, r3, #25
 801ae7c:	bf48      	it	mi
 801ae7e:	b2ad      	uxthmi	r5, r5
 801ae80:	6031      	str	r1, [r6, #0]
 801ae82:	07d9      	lsls	r1, r3, #31
 801ae84:	bf44      	itt	mi
 801ae86:	f043 0320 	orrmi.w	r3, r3, #32
 801ae8a:	6023      	strmi	r3, [r4, #0]
 801ae8c:	b11d      	cbz	r5, 801ae96 <_printf_i+0x19e>
 801ae8e:	2310      	movs	r3, #16
 801ae90:	e7ac      	b.n	801adec <_printf_i+0xf4>
 801ae92:	4827      	ldr	r0, [pc, #156]	@ (801af30 <_printf_i+0x238>)
 801ae94:	e7e9      	b.n	801ae6a <_printf_i+0x172>
 801ae96:	6823      	ldr	r3, [r4, #0]
 801ae98:	f023 0320 	bic.w	r3, r3, #32
 801ae9c:	6023      	str	r3, [r4, #0]
 801ae9e:	e7f6      	b.n	801ae8e <_printf_i+0x196>
 801aea0:	4616      	mov	r6, r2
 801aea2:	e7bd      	b.n	801ae20 <_printf_i+0x128>
 801aea4:	6833      	ldr	r3, [r6, #0]
 801aea6:	6825      	ldr	r5, [r4, #0]
 801aea8:	6961      	ldr	r1, [r4, #20]
 801aeaa:	1d18      	adds	r0, r3, #4
 801aeac:	6030      	str	r0, [r6, #0]
 801aeae:	062e      	lsls	r6, r5, #24
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	d501      	bpl.n	801aeb8 <_printf_i+0x1c0>
 801aeb4:	6019      	str	r1, [r3, #0]
 801aeb6:	e002      	b.n	801aebe <_printf_i+0x1c6>
 801aeb8:	0668      	lsls	r0, r5, #25
 801aeba:	d5fb      	bpl.n	801aeb4 <_printf_i+0x1bc>
 801aebc:	8019      	strh	r1, [r3, #0]
 801aebe:	2300      	movs	r3, #0
 801aec0:	6123      	str	r3, [r4, #16]
 801aec2:	4616      	mov	r6, r2
 801aec4:	e7bc      	b.n	801ae40 <_printf_i+0x148>
 801aec6:	6833      	ldr	r3, [r6, #0]
 801aec8:	1d1a      	adds	r2, r3, #4
 801aeca:	6032      	str	r2, [r6, #0]
 801aecc:	681e      	ldr	r6, [r3, #0]
 801aece:	6862      	ldr	r2, [r4, #4]
 801aed0:	2100      	movs	r1, #0
 801aed2:	4630      	mov	r0, r6
 801aed4:	f7e5 f954 	bl	8000180 <memchr>
 801aed8:	b108      	cbz	r0, 801aede <_printf_i+0x1e6>
 801aeda:	1b80      	subs	r0, r0, r6
 801aedc:	6060      	str	r0, [r4, #4]
 801aede:	6863      	ldr	r3, [r4, #4]
 801aee0:	6123      	str	r3, [r4, #16]
 801aee2:	2300      	movs	r3, #0
 801aee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aee8:	e7aa      	b.n	801ae40 <_printf_i+0x148>
 801aeea:	6923      	ldr	r3, [r4, #16]
 801aeec:	4632      	mov	r2, r6
 801aeee:	4649      	mov	r1, r9
 801aef0:	4640      	mov	r0, r8
 801aef2:	47d0      	blx	sl
 801aef4:	3001      	adds	r0, #1
 801aef6:	d0ad      	beq.n	801ae54 <_printf_i+0x15c>
 801aef8:	6823      	ldr	r3, [r4, #0]
 801aefa:	079b      	lsls	r3, r3, #30
 801aefc:	d413      	bmi.n	801af26 <_printf_i+0x22e>
 801aefe:	68e0      	ldr	r0, [r4, #12]
 801af00:	9b03      	ldr	r3, [sp, #12]
 801af02:	4298      	cmp	r0, r3
 801af04:	bfb8      	it	lt
 801af06:	4618      	movlt	r0, r3
 801af08:	e7a6      	b.n	801ae58 <_printf_i+0x160>
 801af0a:	2301      	movs	r3, #1
 801af0c:	4632      	mov	r2, r6
 801af0e:	4649      	mov	r1, r9
 801af10:	4640      	mov	r0, r8
 801af12:	47d0      	blx	sl
 801af14:	3001      	adds	r0, #1
 801af16:	d09d      	beq.n	801ae54 <_printf_i+0x15c>
 801af18:	3501      	adds	r5, #1
 801af1a:	68e3      	ldr	r3, [r4, #12]
 801af1c:	9903      	ldr	r1, [sp, #12]
 801af1e:	1a5b      	subs	r3, r3, r1
 801af20:	42ab      	cmp	r3, r5
 801af22:	dcf2      	bgt.n	801af0a <_printf_i+0x212>
 801af24:	e7eb      	b.n	801aefe <_printf_i+0x206>
 801af26:	2500      	movs	r5, #0
 801af28:	f104 0619 	add.w	r6, r4, #25
 801af2c:	e7f5      	b.n	801af1a <_printf_i+0x222>
 801af2e:	bf00      	nop
 801af30:	08023293 	.word	0x08023293
 801af34:	080232a4 	.word	0x080232a4

0801af38 <_scanf_float>:
 801af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af3c:	b087      	sub	sp, #28
 801af3e:	4617      	mov	r7, r2
 801af40:	9303      	str	r3, [sp, #12]
 801af42:	688b      	ldr	r3, [r1, #8]
 801af44:	1e5a      	subs	r2, r3, #1
 801af46:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801af4a:	bf81      	itttt	hi
 801af4c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801af50:	eb03 0b05 	addhi.w	fp, r3, r5
 801af54:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801af58:	608b      	strhi	r3, [r1, #8]
 801af5a:	680b      	ldr	r3, [r1, #0]
 801af5c:	460a      	mov	r2, r1
 801af5e:	f04f 0500 	mov.w	r5, #0
 801af62:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801af66:	f842 3b1c 	str.w	r3, [r2], #28
 801af6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801af6e:	4680      	mov	r8, r0
 801af70:	460c      	mov	r4, r1
 801af72:	bf98      	it	ls
 801af74:	f04f 0b00 	movls.w	fp, #0
 801af78:	9201      	str	r2, [sp, #4]
 801af7a:	4616      	mov	r6, r2
 801af7c:	46aa      	mov	sl, r5
 801af7e:	46a9      	mov	r9, r5
 801af80:	9502      	str	r5, [sp, #8]
 801af82:	68a2      	ldr	r2, [r4, #8]
 801af84:	b152      	cbz	r2, 801af9c <_scanf_float+0x64>
 801af86:	683b      	ldr	r3, [r7, #0]
 801af88:	781b      	ldrb	r3, [r3, #0]
 801af8a:	2b4e      	cmp	r3, #78	@ 0x4e
 801af8c:	d864      	bhi.n	801b058 <_scanf_float+0x120>
 801af8e:	2b40      	cmp	r3, #64	@ 0x40
 801af90:	d83c      	bhi.n	801b00c <_scanf_float+0xd4>
 801af92:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801af96:	b2c8      	uxtb	r0, r1
 801af98:	280e      	cmp	r0, #14
 801af9a:	d93a      	bls.n	801b012 <_scanf_float+0xda>
 801af9c:	f1b9 0f00 	cmp.w	r9, #0
 801afa0:	d003      	beq.n	801afaa <_scanf_float+0x72>
 801afa2:	6823      	ldr	r3, [r4, #0]
 801afa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801afa8:	6023      	str	r3, [r4, #0]
 801afaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801afae:	f1ba 0f01 	cmp.w	sl, #1
 801afb2:	f200 8117 	bhi.w	801b1e4 <_scanf_float+0x2ac>
 801afb6:	9b01      	ldr	r3, [sp, #4]
 801afb8:	429e      	cmp	r6, r3
 801afba:	f200 8108 	bhi.w	801b1ce <_scanf_float+0x296>
 801afbe:	2001      	movs	r0, #1
 801afc0:	b007      	add	sp, #28
 801afc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afc6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801afca:	2a0d      	cmp	r2, #13
 801afcc:	d8e6      	bhi.n	801af9c <_scanf_float+0x64>
 801afce:	a101      	add	r1, pc, #4	@ (adr r1, 801afd4 <_scanf_float+0x9c>)
 801afd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801afd4:	0801b11b 	.word	0x0801b11b
 801afd8:	0801af9d 	.word	0x0801af9d
 801afdc:	0801af9d 	.word	0x0801af9d
 801afe0:	0801af9d 	.word	0x0801af9d
 801afe4:	0801b17b 	.word	0x0801b17b
 801afe8:	0801b153 	.word	0x0801b153
 801afec:	0801af9d 	.word	0x0801af9d
 801aff0:	0801af9d 	.word	0x0801af9d
 801aff4:	0801b129 	.word	0x0801b129
 801aff8:	0801af9d 	.word	0x0801af9d
 801affc:	0801af9d 	.word	0x0801af9d
 801b000:	0801af9d 	.word	0x0801af9d
 801b004:	0801af9d 	.word	0x0801af9d
 801b008:	0801b0e1 	.word	0x0801b0e1
 801b00c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801b010:	e7db      	b.n	801afca <_scanf_float+0x92>
 801b012:	290e      	cmp	r1, #14
 801b014:	d8c2      	bhi.n	801af9c <_scanf_float+0x64>
 801b016:	a001      	add	r0, pc, #4	@ (adr r0, 801b01c <_scanf_float+0xe4>)
 801b018:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b01c:	0801b0d1 	.word	0x0801b0d1
 801b020:	0801af9d 	.word	0x0801af9d
 801b024:	0801b0d1 	.word	0x0801b0d1
 801b028:	0801b167 	.word	0x0801b167
 801b02c:	0801af9d 	.word	0x0801af9d
 801b030:	0801b079 	.word	0x0801b079
 801b034:	0801b0b7 	.word	0x0801b0b7
 801b038:	0801b0b7 	.word	0x0801b0b7
 801b03c:	0801b0b7 	.word	0x0801b0b7
 801b040:	0801b0b7 	.word	0x0801b0b7
 801b044:	0801b0b7 	.word	0x0801b0b7
 801b048:	0801b0b7 	.word	0x0801b0b7
 801b04c:	0801b0b7 	.word	0x0801b0b7
 801b050:	0801b0b7 	.word	0x0801b0b7
 801b054:	0801b0b7 	.word	0x0801b0b7
 801b058:	2b6e      	cmp	r3, #110	@ 0x6e
 801b05a:	d809      	bhi.n	801b070 <_scanf_float+0x138>
 801b05c:	2b60      	cmp	r3, #96	@ 0x60
 801b05e:	d8b2      	bhi.n	801afc6 <_scanf_float+0x8e>
 801b060:	2b54      	cmp	r3, #84	@ 0x54
 801b062:	d07b      	beq.n	801b15c <_scanf_float+0x224>
 801b064:	2b59      	cmp	r3, #89	@ 0x59
 801b066:	d199      	bne.n	801af9c <_scanf_float+0x64>
 801b068:	2d07      	cmp	r5, #7
 801b06a:	d197      	bne.n	801af9c <_scanf_float+0x64>
 801b06c:	2508      	movs	r5, #8
 801b06e:	e02c      	b.n	801b0ca <_scanf_float+0x192>
 801b070:	2b74      	cmp	r3, #116	@ 0x74
 801b072:	d073      	beq.n	801b15c <_scanf_float+0x224>
 801b074:	2b79      	cmp	r3, #121	@ 0x79
 801b076:	e7f6      	b.n	801b066 <_scanf_float+0x12e>
 801b078:	6821      	ldr	r1, [r4, #0]
 801b07a:	05c8      	lsls	r0, r1, #23
 801b07c:	d51b      	bpl.n	801b0b6 <_scanf_float+0x17e>
 801b07e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801b082:	6021      	str	r1, [r4, #0]
 801b084:	f109 0901 	add.w	r9, r9, #1
 801b088:	f1bb 0f00 	cmp.w	fp, #0
 801b08c:	d003      	beq.n	801b096 <_scanf_float+0x15e>
 801b08e:	3201      	adds	r2, #1
 801b090:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b094:	60a2      	str	r2, [r4, #8]
 801b096:	68a3      	ldr	r3, [r4, #8]
 801b098:	3b01      	subs	r3, #1
 801b09a:	60a3      	str	r3, [r4, #8]
 801b09c:	6923      	ldr	r3, [r4, #16]
 801b09e:	3301      	adds	r3, #1
 801b0a0:	6123      	str	r3, [r4, #16]
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	3b01      	subs	r3, #1
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	607b      	str	r3, [r7, #4]
 801b0aa:	f340 8087 	ble.w	801b1bc <_scanf_float+0x284>
 801b0ae:	683b      	ldr	r3, [r7, #0]
 801b0b0:	3301      	adds	r3, #1
 801b0b2:	603b      	str	r3, [r7, #0]
 801b0b4:	e765      	b.n	801af82 <_scanf_float+0x4a>
 801b0b6:	eb1a 0105 	adds.w	r1, sl, r5
 801b0ba:	f47f af6f 	bne.w	801af9c <_scanf_float+0x64>
 801b0be:	6822      	ldr	r2, [r4, #0]
 801b0c0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801b0c4:	6022      	str	r2, [r4, #0]
 801b0c6:	460d      	mov	r5, r1
 801b0c8:	468a      	mov	sl, r1
 801b0ca:	f806 3b01 	strb.w	r3, [r6], #1
 801b0ce:	e7e2      	b.n	801b096 <_scanf_float+0x15e>
 801b0d0:	6822      	ldr	r2, [r4, #0]
 801b0d2:	0610      	lsls	r0, r2, #24
 801b0d4:	f57f af62 	bpl.w	801af9c <_scanf_float+0x64>
 801b0d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801b0dc:	6022      	str	r2, [r4, #0]
 801b0de:	e7f4      	b.n	801b0ca <_scanf_float+0x192>
 801b0e0:	f1ba 0f00 	cmp.w	sl, #0
 801b0e4:	d10e      	bne.n	801b104 <_scanf_float+0x1cc>
 801b0e6:	f1b9 0f00 	cmp.w	r9, #0
 801b0ea:	d10e      	bne.n	801b10a <_scanf_float+0x1d2>
 801b0ec:	6822      	ldr	r2, [r4, #0]
 801b0ee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b0f2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b0f6:	d108      	bne.n	801b10a <_scanf_float+0x1d2>
 801b0f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b0fc:	6022      	str	r2, [r4, #0]
 801b0fe:	f04f 0a01 	mov.w	sl, #1
 801b102:	e7e2      	b.n	801b0ca <_scanf_float+0x192>
 801b104:	f1ba 0f02 	cmp.w	sl, #2
 801b108:	d055      	beq.n	801b1b6 <_scanf_float+0x27e>
 801b10a:	2d01      	cmp	r5, #1
 801b10c:	d002      	beq.n	801b114 <_scanf_float+0x1dc>
 801b10e:	2d04      	cmp	r5, #4
 801b110:	f47f af44 	bne.w	801af9c <_scanf_float+0x64>
 801b114:	3501      	adds	r5, #1
 801b116:	b2ed      	uxtb	r5, r5
 801b118:	e7d7      	b.n	801b0ca <_scanf_float+0x192>
 801b11a:	f1ba 0f01 	cmp.w	sl, #1
 801b11e:	f47f af3d 	bne.w	801af9c <_scanf_float+0x64>
 801b122:	f04f 0a02 	mov.w	sl, #2
 801b126:	e7d0      	b.n	801b0ca <_scanf_float+0x192>
 801b128:	b97d      	cbnz	r5, 801b14a <_scanf_float+0x212>
 801b12a:	f1b9 0f00 	cmp.w	r9, #0
 801b12e:	f47f af38 	bne.w	801afa2 <_scanf_float+0x6a>
 801b132:	6822      	ldr	r2, [r4, #0]
 801b134:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b138:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b13c:	f040 8108 	bne.w	801b350 <_scanf_float+0x418>
 801b140:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b144:	6022      	str	r2, [r4, #0]
 801b146:	2501      	movs	r5, #1
 801b148:	e7bf      	b.n	801b0ca <_scanf_float+0x192>
 801b14a:	2d03      	cmp	r5, #3
 801b14c:	d0e2      	beq.n	801b114 <_scanf_float+0x1dc>
 801b14e:	2d05      	cmp	r5, #5
 801b150:	e7de      	b.n	801b110 <_scanf_float+0x1d8>
 801b152:	2d02      	cmp	r5, #2
 801b154:	f47f af22 	bne.w	801af9c <_scanf_float+0x64>
 801b158:	2503      	movs	r5, #3
 801b15a:	e7b6      	b.n	801b0ca <_scanf_float+0x192>
 801b15c:	2d06      	cmp	r5, #6
 801b15e:	f47f af1d 	bne.w	801af9c <_scanf_float+0x64>
 801b162:	2507      	movs	r5, #7
 801b164:	e7b1      	b.n	801b0ca <_scanf_float+0x192>
 801b166:	6822      	ldr	r2, [r4, #0]
 801b168:	0591      	lsls	r1, r2, #22
 801b16a:	f57f af17 	bpl.w	801af9c <_scanf_float+0x64>
 801b16e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801b172:	6022      	str	r2, [r4, #0]
 801b174:	f8cd 9008 	str.w	r9, [sp, #8]
 801b178:	e7a7      	b.n	801b0ca <_scanf_float+0x192>
 801b17a:	6822      	ldr	r2, [r4, #0]
 801b17c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801b180:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801b184:	d006      	beq.n	801b194 <_scanf_float+0x25c>
 801b186:	0550      	lsls	r0, r2, #21
 801b188:	f57f af08 	bpl.w	801af9c <_scanf_float+0x64>
 801b18c:	f1b9 0f00 	cmp.w	r9, #0
 801b190:	f000 80de 	beq.w	801b350 <_scanf_float+0x418>
 801b194:	0591      	lsls	r1, r2, #22
 801b196:	bf58      	it	pl
 801b198:	9902      	ldrpl	r1, [sp, #8]
 801b19a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b19e:	bf58      	it	pl
 801b1a0:	eba9 0101 	subpl.w	r1, r9, r1
 801b1a4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801b1a8:	bf58      	it	pl
 801b1aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b1ae:	6022      	str	r2, [r4, #0]
 801b1b0:	f04f 0900 	mov.w	r9, #0
 801b1b4:	e789      	b.n	801b0ca <_scanf_float+0x192>
 801b1b6:	f04f 0a03 	mov.w	sl, #3
 801b1ba:	e786      	b.n	801b0ca <_scanf_float+0x192>
 801b1bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801b1c0:	4639      	mov	r1, r7
 801b1c2:	4640      	mov	r0, r8
 801b1c4:	4798      	blx	r3
 801b1c6:	2800      	cmp	r0, #0
 801b1c8:	f43f aedb 	beq.w	801af82 <_scanf_float+0x4a>
 801b1cc:	e6e6      	b.n	801af9c <_scanf_float+0x64>
 801b1ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b1d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b1d6:	463a      	mov	r2, r7
 801b1d8:	4640      	mov	r0, r8
 801b1da:	4798      	blx	r3
 801b1dc:	6923      	ldr	r3, [r4, #16]
 801b1de:	3b01      	subs	r3, #1
 801b1e0:	6123      	str	r3, [r4, #16]
 801b1e2:	e6e8      	b.n	801afb6 <_scanf_float+0x7e>
 801b1e4:	1e6b      	subs	r3, r5, #1
 801b1e6:	2b06      	cmp	r3, #6
 801b1e8:	d824      	bhi.n	801b234 <_scanf_float+0x2fc>
 801b1ea:	2d02      	cmp	r5, #2
 801b1ec:	d836      	bhi.n	801b25c <_scanf_float+0x324>
 801b1ee:	9b01      	ldr	r3, [sp, #4]
 801b1f0:	429e      	cmp	r6, r3
 801b1f2:	f67f aee4 	bls.w	801afbe <_scanf_float+0x86>
 801b1f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b1fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b1fe:	463a      	mov	r2, r7
 801b200:	4640      	mov	r0, r8
 801b202:	4798      	blx	r3
 801b204:	6923      	ldr	r3, [r4, #16]
 801b206:	3b01      	subs	r3, #1
 801b208:	6123      	str	r3, [r4, #16]
 801b20a:	e7f0      	b.n	801b1ee <_scanf_float+0x2b6>
 801b20c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b210:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801b214:	463a      	mov	r2, r7
 801b216:	4640      	mov	r0, r8
 801b218:	4798      	blx	r3
 801b21a:	6923      	ldr	r3, [r4, #16]
 801b21c:	3b01      	subs	r3, #1
 801b21e:	6123      	str	r3, [r4, #16]
 801b220:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b224:	fa5f fa8a 	uxtb.w	sl, sl
 801b228:	f1ba 0f02 	cmp.w	sl, #2
 801b22c:	d1ee      	bne.n	801b20c <_scanf_float+0x2d4>
 801b22e:	3d03      	subs	r5, #3
 801b230:	b2ed      	uxtb	r5, r5
 801b232:	1b76      	subs	r6, r6, r5
 801b234:	6823      	ldr	r3, [r4, #0]
 801b236:	05da      	lsls	r2, r3, #23
 801b238:	d530      	bpl.n	801b29c <_scanf_float+0x364>
 801b23a:	055b      	lsls	r3, r3, #21
 801b23c:	d511      	bpl.n	801b262 <_scanf_float+0x32a>
 801b23e:	9b01      	ldr	r3, [sp, #4]
 801b240:	429e      	cmp	r6, r3
 801b242:	f67f aebc 	bls.w	801afbe <_scanf_float+0x86>
 801b246:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b24a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b24e:	463a      	mov	r2, r7
 801b250:	4640      	mov	r0, r8
 801b252:	4798      	blx	r3
 801b254:	6923      	ldr	r3, [r4, #16]
 801b256:	3b01      	subs	r3, #1
 801b258:	6123      	str	r3, [r4, #16]
 801b25a:	e7f0      	b.n	801b23e <_scanf_float+0x306>
 801b25c:	46aa      	mov	sl, r5
 801b25e:	46b3      	mov	fp, r6
 801b260:	e7de      	b.n	801b220 <_scanf_float+0x2e8>
 801b262:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b266:	6923      	ldr	r3, [r4, #16]
 801b268:	2965      	cmp	r1, #101	@ 0x65
 801b26a:	f103 33ff 	add.w	r3, r3, #4294967295
 801b26e:	f106 35ff 	add.w	r5, r6, #4294967295
 801b272:	6123      	str	r3, [r4, #16]
 801b274:	d00c      	beq.n	801b290 <_scanf_float+0x358>
 801b276:	2945      	cmp	r1, #69	@ 0x45
 801b278:	d00a      	beq.n	801b290 <_scanf_float+0x358>
 801b27a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b27e:	463a      	mov	r2, r7
 801b280:	4640      	mov	r0, r8
 801b282:	4798      	blx	r3
 801b284:	6923      	ldr	r3, [r4, #16]
 801b286:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b28a:	3b01      	subs	r3, #1
 801b28c:	1eb5      	subs	r5, r6, #2
 801b28e:	6123      	str	r3, [r4, #16]
 801b290:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b294:	463a      	mov	r2, r7
 801b296:	4640      	mov	r0, r8
 801b298:	4798      	blx	r3
 801b29a:	462e      	mov	r6, r5
 801b29c:	6822      	ldr	r2, [r4, #0]
 801b29e:	f012 0210 	ands.w	r2, r2, #16
 801b2a2:	d001      	beq.n	801b2a8 <_scanf_float+0x370>
 801b2a4:	2000      	movs	r0, #0
 801b2a6:	e68b      	b.n	801afc0 <_scanf_float+0x88>
 801b2a8:	7032      	strb	r2, [r6, #0]
 801b2aa:	6823      	ldr	r3, [r4, #0]
 801b2ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801b2b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b2b4:	d11c      	bne.n	801b2f0 <_scanf_float+0x3b8>
 801b2b6:	9b02      	ldr	r3, [sp, #8]
 801b2b8:	454b      	cmp	r3, r9
 801b2ba:	eba3 0209 	sub.w	r2, r3, r9
 801b2be:	d123      	bne.n	801b308 <_scanf_float+0x3d0>
 801b2c0:	9901      	ldr	r1, [sp, #4]
 801b2c2:	2200      	movs	r2, #0
 801b2c4:	4640      	mov	r0, r8
 801b2c6:	f7ff f8ef 	bl	801a4a8 <_strtod_r>
 801b2ca:	9b03      	ldr	r3, [sp, #12]
 801b2cc:	6821      	ldr	r1, [r4, #0]
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	f011 0f02 	tst.w	r1, #2
 801b2d4:	ec57 6b10 	vmov	r6, r7, d0
 801b2d8:	f103 0204 	add.w	r2, r3, #4
 801b2dc:	d01f      	beq.n	801b31e <_scanf_float+0x3e6>
 801b2de:	9903      	ldr	r1, [sp, #12]
 801b2e0:	600a      	str	r2, [r1, #0]
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	e9c3 6700 	strd	r6, r7, [r3]
 801b2e8:	68e3      	ldr	r3, [r4, #12]
 801b2ea:	3301      	adds	r3, #1
 801b2ec:	60e3      	str	r3, [r4, #12]
 801b2ee:	e7d9      	b.n	801b2a4 <_scanf_float+0x36c>
 801b2f0:	9b04      	ldr	r3, [sp, #16]
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d0e4      	beq.n	801b2c0 <_scanf_float+0x388>
 801b2f6:	9905      	ldr	r1, [sp, #20]
 801b2f8:	230a      	movs	r3, #10
 801b2fa:	3101      	adds	r1, #1
 801b2fc:	4640      	mov	r0, r8
 801b2fe:	f7ff f9b7 	bl	801a670 <_strtol_r>
 801b302:	9b04      	ldr	r3, [sp, #16]
 801b304:	9e05      	ldr	r6, [sp, #20]
 801b306:	1ac2      	subs	r2, r0, r3
 801b308:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801b30c:	429e      	cmp	r6, r3
 801b30e:	bf28      	it	cs
 801b310:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801b314:	4910      	ldr	r1, [pc, #64]	@ (801b358 <_scanf_float+0x420>)
 801b316:	4630      	mov	r0, r6
 801b318:	f000 f918 	bl	801b54c <siprintf>
 801b31c:	e7d0      	b.n	801b2c0 <_scanf_float+0x388>
 801b31e:	f011 0f04 	tst.w	r1, #4
 801b322:	9903      	ldr	r1, [sp, #12]
 801b324:	600a      	str	r2, [r1, #0]
 801b326:	d1dc      	bne.n	801b2e2 <_scanf_float+0x3aa>
 801b328:	681d      	ldr	r5, [r3, #0]
 801b32a:	4632      	mov	r2, r6
 801b32c:	463b      	mov	r3, r7
 801b32e:	4630      	mov	r0, r6
 801b330:	4639      	mov	r1, r7
 801b332:	f7e5 fbd3 	bl	8000adc <__aeabi_dcmpun>
 801b336:	b128      	cbz	r0, 801b344 <_scanf_float+0x40c>
 801b338:	4808      	ldr	r0, [pc, #32]	@ (801b35c <_scanf_float+0x424>)
 801b33a:	f000 fa9d 	bl	801b878 <nanf>
 801b33e:	ed85 0a00 	vstr	s0, [r5]
 801b342:	e7d1      	b.n	801b2e8 <_scanf_float+0x3b0>
 801b344:	4630      	mov	r0, r6
 801b346:	4639      	mov	r1, r7
 801b348:	f7e5 fc26 	bl	8000b98 <__aeabi_d2f>
 801b34c:	6028      	str	r0, [r5, #0]
 801b34e:	e7cb      	b.n	801b2e8 <_scanf_float+0x3b0>
 801b350:	f04f 0900 	mov.w	r9, #0
 801b354:	e629      	b.n	801afaa <_scanf_float+0x72>
 801b356:	bf00      	nop
 801b358:	080232b5 	.word	0x080232b5
 801b35c:	0802336e 	.word	0x0802336e

0801b360 <std>:
 801b360:	2300      	movs	r3, #0
 801b362:	b510      	push	{r4, lr}
 801b364:	4604      	mov	r4, r0
 801b366:	e9c0 3300 	strd	r3, r3, [r0]
 801b36a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b36e:	6083      	str	r3, [r0, #8]
 801b370:	8181      	strh	r1, [r0, #12]
 801b372:	6643      	str	r3, [r0, #100]	@ 0x64
 801b374:	81c2      	strh	r2, [r0, #14]
 801b376:	6183      	str	r3, [r0, #24]
 801b378:	4619      	mov	r1, r3
 801b37a:	2208      	movs	r2, #8
 801b37c:	305c      	adds	r0, #92	@ 0x5c
 801b37e:	f000 f948 	bl	801b612 <memset>
 801b382:	4b0d      	ldr	r3, [pc, #52]	@ (801b3b8 <std+0x58>)
 801b384:	6263      	str	r3, [r4, #36]	@ 0x24
 801b386:	4b0d      	ldr	r3, [pc, #52]	@ (801b3bc <std+0x5c>)
 801b388:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b38a:	4b0d      	ldr	r3, [pc, #52]	@ (801b3c0 <std+0x60>)
 801b38c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b38e:	4b0d      	ldr	r3, [pc, #52]	@ (801b3c4 <std+0x64>)
 801b390:	6323      	str	r3, [r4, #48]	@ 0x30
 801b392:	4b0d      	ldr	r3, [pc, #52]	@ (801b3c8 <std+0x68>)
 801b394:	6224      	str	r4, [r4, #32]
 801b396:	429c      	cmp	r4, r3
 801b398:	d006      	beq.n	801b3a8 <std+0x48>
 801b39a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b39e:	4294      	cmp	r4, r2
 801b3a0:	d002      	beq.n	801b3a8 <std+0x48>
 801b3a2:	33d0      	adds	r3, #208	@ 0xd0
 801b3a4:	429c      	cmp	r4, r3
 801b3a6:	d105      	bne.n	801b3b4 <std+0x54>
 801b3a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3b0:	f000 ba40 	b.w	801b834 <__retarget_lock_init_recursive>
 801b3b4:	bd10      	pop	{r4, pc}
 801b3b6:	bf00      	nop
 801b3b8:	0801b58d 	.word	0x0801b58d
 801b3bc:	0801b5af 	.word	0x0801b5af
 801b3c0:	0801b5e7 	.word	0x0801b5e7
 801b3c4:	0801b60b 	.word	0x0801b60b
 801b3c8:	20002f08 	.word	0x20002f08

0801b3cc <stdio_exit_handler>:
 801b3cc:	4a02      	ldr	r2, [pc, #8]	@ (801b3d8 <stdio_exit_handler+0xc>)
 801b3ce:	4903      	ldr	r1, [pc, #12]	@ (801b3dc <stdio_exit_handler+0x10>)
 801b3d0:	4803      	ldr	r0, [pc, #12]	@ (801b3e0 <stdio_exit_handler+0x14>)
 801b3d2:	f000 b869 	b.w	801b4a8 <_fwalk_sglue>
 801b3d6:	bf00      	nop
 801b3d8:	2000014c 	.word	0x2000014c
 801b3dc:	0801dc3d 	.word	0x0801dc3d
 801b3e0:	200002c8 	.word	0x200002c8

0801b3e4 <cleanup_stdio>:
 801b3e4:	6841      	ldr	r1, [r0, #4]
 801b3e6:	4b0c      	ldr	r3, [pc, #48]	@ (801b418 <cleanup_stdio+0x34>)
 801b3e8:	4299      	cmp	r1, r3
 801b3ea:	b510      	push	{r4, lr}
 801b3ec:	4604      	mov	r4, r0
 801b3ee:	d001      	beq.n	801b3f4 <cleanup_stdio+0x10>
 801b3f0:	f002 fc24 	bl	801dc3c <_fflush_r>
 801b3f4:	68a1      	ldr	r1, [r4, #8]
 801b3f6:	4b09      	ldr	r3, [pc, #36]	@ (801b41c <cleanup_stdio+0x38>)
 801b3f8:	4299      	cmp	r1, r3
 801b3fa:	d002      	beq.n	801b402 <cleanup_stdio+0x1e>
 801b3fc:	4620      	mov	r0, r4
 801b3fe:	f002 fc1d 	bl	801dc3c <_fflush_r>
 801b402:	68e1      	ldr	r1, [r4, #12]
 801b404:	4b06      	ldr	r3, [pc, #24]	@ (801b420 <cleanup_stdio+0x3c>)
 801b406:	4299      	cmp	r1, r3
 801b408:	d004      	beq.n	801b414 <cleanup_stdio+0x30>
 801b40a:	4620      	mov	r0, r4
 801b40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b410:	f002 bc14 	b.w	801dc3c <_fflush_r>
 801b414:	bd10      	pop	{r4, pc}
 801b416:	bf00      	nop
 801b418:	20002f08 	.word	0x20002f08
 801b41c:	20002f70 	.word	0x20002f70
 801b420:	20002fd8 	.word	0x20002fd8

0801b424 <global_stdio_init.part.0>:
 801b424:	b510      	push	{r4, lr}
 801b426:	4b0b      	ldr	r3, [pc, #44]	@ (801b454 <global_stdio_init.part.0+0x30>)
 801b428:	4c0b      	ldr	r4, [pc, #44]	@ (801b458 <global_stdio_init.part.0+0x34>)
 801b42a:	4a0c      	ldr	r2, [pc, #48]	@ (801b45c <global_stdio_init.part.0+0x38>)
 801b42c:	601a      	str	r2, [r3, #0]
 801b42e:	4620      	mov	r0, r4
 801b430:	2200      	movs	r2, #0
 801b432:	2104      	movs	r1, #4
 801b434:	f7ff ff94 	bl	801b360 <std>
 801b438:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b43c:	2201      	movs	r2, #1
 801b43e:	2109      	movs	r1, #9
 801b440:	f7ff ff8e 	bl	801b360 <std>
 801b444:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b448:	2202      	movs	r2, #2
 801b44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b44e:	2112      	movs	r1, #18
 801b450:	f7ff bf86 	b.w	801b360 <std>
 801b454:	20003040 	.word	0x20003040
 801b458:	20002f08 	.word	0x20002f08
 801b45c:	0801b3cd 	.word	0x0801b3cd

0801b460 <__sfp_lock_acquire>:
 801b460:	4801      	ldr	r0, [pc, #4]	@ (801b468 <__sfp_lock_acquire+0x8>)
 801b462:	f000 b9e8 	b.w	801b836 <__retarget_lock_acquire_recursive>
 801b466:	bf00      	nop
 801b468:	20003049 	.word	0x20003049

0801b46c <__sfp_lock_release>:
 801b46c:	4801      	ldr	r0, [pc, #4]	@ (801b474 <__sfp_lock_release+0x8>)
 801b46e:	f000 b9e3 	b.w	801b838 <__retarget_lock_release_recursive>
 801b472:	bf00      	nop
 801b474:	20003049 	.word	0x20003049

0801b478 <__sinit>:
 801b478:	b510      	push	{r4, lr}
 801b47a:	4604      	mov	r4, r0
 801b47c:	f7ff fff0 	bl	801b460 <__sfp_lock_acquire>
 801b480:	6a23      	ldr	r3, [r4, #32]
 801b482:	b11b      	cbz	r3, 801b48c <__sinit+0x14>
 801b484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b488:	f7ff bff0 	b.w	801b46c <__sfp_lock_release>
 801b48c:	4b04      	ldr	r3, [pc, #16]	@ (801b4a0 <__sinit+0x28>)
 801b48e:	6223      	str	r3, [r4, #32]
 801b490:	4b04      	ldr	r3, [pc, #16]	@ (801b4a4 <__sinit+0x2c>)
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d1f5      	bne.n	801b484 <__sinit+0xc>
 801b498:	f7ff ffc4 	bl	801b424 <global_stdio_init.part.0>
 801b49c:	e7f2      	b.n	801b484 <__sinit+0xc>
 801b49e:	bf00      	nop
 801b4a0:	0801b3e5 	.word	0x0801b3e5
 801b4a4:	20003040 	.word	0x20003040

0801b4a8 <_fwalk_sglue>:
 801b4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b4ac:	4607      	mov	r7, r0
 801b4ae:	4688      	mov	r8, r1
 801b4b0:	4614      	mov	r4, r2
 801b4b2:	2600      	movs	r6, #0
 801b4b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b4b8:	f1b9 0901 	subs.w	r9, r9, #1
 801b4bc:	d505      	bpl.n	801b4ca <_fwalk_sglue+0x22>
 801b4be:	6824      	ldr	r4, [r4, #0]
 801b4c0:	2c00      	cmp	r4, #0
 801b4c2:	d1f7      	bne.n	801b4b4 <_fwalk_sglue+0xc>
 801b4c4:	4630      	mov	r0, r6
 801b4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4ca:	89ab      	ldrh	r3, [r5, #12]
 801b4cc:	2b01      	cmp	r3, #1
 801b4ce:	d907      	bls.n	801b4e0 <_fwalk_sglue+0x38>
 801b4d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b4d4:	3301      	adds	r3, #1
 801b4d6:	d003      	beq.n	801b4e0 <_fwalk_sglue+0x38>
 801b4d8:	4629      	mov	r1, r5
 801b4da:	4638      	mov	r0, r7
 801b4dc:	47c0      	blx	r8
 801b4de:	4306      	orrs	r6, r0
 801b4e0:	3568      	adds	r5, #104	@ 0x68
 801b4e2:	e7e9      	b.n	801b4b8 <_fwalk_sglue+0x10>

0801b4e4 <sniprintf>:
 801b4e4:	b40c      	push	{r2, r3}
 801b4e6:	b530      	push	{r4, r5, lr}
 801b4e8:	4b17      	ldr	r3, [pc, #92]	@ (801b548 <sniprintf+0x64>)
 801b4ea:	1e0c      	subs	r4, r1, #0
 801b4ec:	681d      	ldr	r5, [r3, #0]
 801b4ee:	b09d      	sub	sp, #116	@ 0x74
 801b4f0:	da08      	bge.n	801b504 <sniprintf+0x20>
 801b4f2:	238b      	movs	r3, #139	@ 0x8b
 801b4f4:	602b      	str	r3, [r5, #0]
 801b4f6:	f04f 30ff 	mov.w	r0, #4294967295
 801b4fa:	b01d      	add	sp, #116	@ 0x74
 801b4fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b500:	b002      	add	sp, #8
 801b502:	4770      	bx	lr
 801b504:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b508:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b50c:	bf14      	ite	ne
 801b50e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b512:	4623      	moveq	r3, r4
 801b514:	9304      	str	r3, [sp, #16]
 801b516:	9307      	str	r3, [sp, #28]
 801b518:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b51c:	9002      	str	r0, [sp, #8]
 801b51e:	9006      	str	r0, [sp, #24]
 801b520:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b524:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b526:	ab21      	add	r3, sp, #132	@ 0x84
 801b528:	a902      	add	r1, sp, #8
 801b52a:	4628      	mov	r0, r5
 801b52c:	9301      	str	r3, [sp, #4]
 801b52e:	f002 f8c3 	bl	801d6b8 <_svfiprintf_r>
 801b532:	1c43      	adds	r3, r0, #1
 801b534:	bfbc      	itt	lt
 801b536:	238b      	movlt	r3, #139	@ 0x8b
 801b538:	602b      	strlt	r3, [r5, #0]
 801b53a:	2c00      	cmp	r4, #0
 801b53c:	d0dd      	beq.n	801b4fa <sniprintf+0x16>
 801b53e:	9b02      	ldr	r3, [sp, #8]
 801b540:	2200      	movs	r2, #0
 801b542:	701a      	strb	r2, [r3, #0]
 801b544:	e7d9      	b.n	801b4fa <sniprintf+0x16>
 801b546:	bf00      	nop
 801b548:	200002c4 	.word	0x200002c4

0801b54c <siprintf>:
 801b54c:	b40e      	push	{r1, r2, r3}
 801b54e:	b500      	push	{lr}
 801b550:	b09c      	sub	sp, #112	@ 0x70
 801b552:	ab1d      	add	r3, sp, #116	@ 0x74
 801b554:	9002      	str	r0, [sp, #8]
 801b556:	9006      	str	r0, [sp, #24]
 801b558:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b55c:	4809      	ldr	r0, [pc, #36]	@ (801b584 <siprintf+0x38>)
 801b55e:	9107      	str	r1, [sp, #28]
 801b560:	9104      	str	r1, [sp, #16]
 801b562:	4909      	ldr	r1, [pc, #36]	@ (801b588 <siprintf+0x3c>)
 801b564:	f853 2b04 	ldr.w	r2, [r3], #4
 801b568:	9105      	str	r1, [sp, #20]
 801b56a:	6800      	ldr	r0, [r0, #0]
 801b56c:	9301      	str	r3, [sp, #4]
 801b56e:	a902      	add	r1, sp, #8
 801b570:	f002 f8a2 	bl	801d6b8 <_svfiprintf_r>
 801b574:	9b02      	ldr	r3, [sp, #8]
 801b576:	2200      	movs	r2, #0
 801b578:	701a      	strb	r2, [r3, #0]
 801b57a:	b01c      	add	sp, #112	@ 0x70
 801b57c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b580:	b003      	add	sp, #12
 801b582:	4770      	bx	lr
 801b584:	200002c4 	.word	0x200002c4
 801b588:	ffff0208 	.word	0xffff0208

0801b58c <__sread>:
 801b58c:	b510      	push	{r4, lr}
 801b58e:	460c      	mov	r4, r1
 801b590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b594:	f000 f8f0 	bl	801b778 <_read_r>
 801b598:	2800      	cmp	r0, #0
 801b59a:	bfab      	itete	ge
 801b59c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b59e:	89a3      	ldrhlt	r3, [r4, #12]
 801b5a0:	181b      	addge	r3, r3, r0
 801b5a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b5a6:	bfac      	ite	ge
 801b5a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b5aa:	81a3      	strhlt	r3, [r4, #12]
 801b5ac:	bd10      	pop	{r4, pc}

0801b5ae <__swrite>:
 801b5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5b2:	461f      	mov	r7, r3
 801b5b4:	898b      	ldrh	r3, [r1, #12]
 801b5b6:	05db      	lsls	r3, r3, #23
 801b5b8:	4605      	mov	r5, r0
 801b5ba:	460c      	mov	r4, r1
 801b5bc:	4616      	mov	r6, r2
 801b5be:	d505      	bpl.n	801b5cc <__swrite+0x1e>
 801b5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b5c4:	2302      	movs	r3, #2
 801b5c6:	2200      	movs	r2, #0
 801b5c8:	f000 f8c4 	bl	801b754 <_lseek_r>
 801b5cc:	89a3      	ldrh	r3, [r4, #12]
 801b5ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b5d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b5d6:	81a3      	strh	r3, [r4, #12]
 801b5d8:	4632      	mov	r2, r6
 801b5da:	463b      	mov	r3, r7
 801b5dc:	4628      	mov	r0, r5
 801b5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b5e2:	f000 b8eb 	b.w	801b7bc <_write_r>

0801b5e6 <__sseek>:
 801b5e6:	b510      	push	{r4, lr}
 801b5e8:	460c      	mov	r4, r1
 801b5ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b5ee:	f000 f8b1 	bl	801b754 <_lseek_r>
 801b5f2:	1c43      	adds	r3, r0, #1
 801b5f4:	89a3      	ldrh	r3, [r4, #12]
 801b5f6:	bf15      	itete	ne
 801b5f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b5fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b5fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b602:	81a3      	strheq	r3, [r4, #12]
 801b604:	bf18      	it	ne
 801b606:	81a3      	strhne	r3, [r4, #12]
 801b608:	bd10      	pop	{r4, pc}

0801b60a <__sclose>:
 801b60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b60e:	f000 b891 	b.w	801b734 <_close_r>

0801b612 <memset>:
 801b612:	4402      	add	r2, r0
 801b614:	4603      	mov	r3, r0
 801b616:	4293      	cmp	r3, r2
 801b618:	d100      	bne.n	801b61c <memset+0xa>
 801b61a:	4770      	bx	lr
 801b61c:	f803 1b01 	strb.w	r1, [r3], #1
 801b620:	e7f9      	b.n	801b616 <memset+0x4>

0801b622 <strncmp>:
 801b622:	b510      	push	{r4, lr}
 801b624:	b16a      	cbz	r2, 801b642 <strncmp+0x20>
 801b626:	3901      	subs	r1, #1
 801b628:	1884      	adds	r4, r0, r2
 801b62a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b62e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b632:	429a      	cmp	r2, r3
 801b634:	d103      	bne.n	801b63e <strncmp+0x1c>
 801b636:	42a0      	cmp	r0, r4
 801b638:	d001      	beq.n	801b63e <strncmp+0x1c>
 801b63a:	2a00      	cmp	r2, #0
 801b63c:	d1f5      	bne.n	801b62a <strncmp+0x8>
 801b63e:	1ad0      	subs	r0, r2, r3
 801b640:	bd10      	pop	{r4, pc}
 801b642:	4610      	mov	r0, r2
 801b644:	e7fc      	b.n	801b640 <strncmp+0x1e>
	...

0801b648 <strtok>:
 801b648:	4b16      	ldr	r3, [pc, #88]	@ (801b6a4 <strtok+0x5c>)
 801b64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b64e:	681f      	ldr	r7, [r3, #0]
 801b650:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801b652:	4605      	mov	r5, r0
 801b654:	460e      	mov	r6, r1
 801b656:	b9ec      	cbnz	r4, 801b694 <strtok+0x4c>
 801b658:	2050      	movs	r0, #80	@ 0x50
 801b65a:	f7fe f863 	bl	8019724 <malloc>
 801b65e:	4602      	mov	r2, r0
 801b660:	6478      	str	r0, [r7, #68]	@ 0x44
 801b662:	b920      	cbnz	r0, 801b66e <strtok+0x26>
 801b664:	4b10      	ldr	r3, [pc, #64]	@ (801b6a8 <strtok+0x60>)
 801b666:	4811      	ldr	r0, [pc, #68]	@ (801b6ac <strtok+0x64>)
 801b668:	215b      	movs	r1, #91	@ 0x5b
 801b66a:	f000 f90b 	bl	801b884 <__assert_func>
 801b66e:	e9c0 4400 	strd	r4, r4, [r0]
 801b672:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801b676:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801b67a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801b67e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801b682:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801b686:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801b68a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801b68e:	6184      	str	r4, [r0, #24]
 801b690:	7704      	strb	r4, [r0, #28]
 801b692:	6244      	str	r4, [r0, #36]	@ 0x24
 801b694:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b696:	4631      	mov	r1, r6
 801b698:	4628      	mov	r0, r5
 801b69a:	2301      	movs	r3, #1
 801b69c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b6a0:	f000 b806 	b.w	801b6b0 <__strtok_r>
 801b6a4:	200002c4 	.word	0x200002c4
 801b6a8:	080232ba 	.word	0x080232ba
 801b6ac:	080232d1 	.word	0x080232d1

0801b6b0 <__strtok_r>:
 801b6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6b2:	4604      	mov	r4, r0
 801b6b4:	b908      	cbnz	r0, 801b6ba <__strtok_r+0xa>
 801b6b6:	6814      	ldr	r4, [r2, #0]
 801b6b8:	b144      	cbz	r4, 801b6cc <__strtok_r+0x1c>
 801b6ba:	4620      	mov	r0, r4
 801b6bc:	f814 5b01 	ldrb.w	r5, [r4], #1
 801b6c0:	460f      	mov	r7, r1
 801b6c2:	f817 6b01 	ldrb.w	r6, [r7], #1
 801b6c6:	b91e      	cbnz	r6, 801b6d0 <__strtok_r+0x20>
 801b6c8:	b965      	cbnz	r5, 801b6e4 <__strtok_r+0x34>
 801b6ca:	6015      	str	r5, [r2, #0]
 801b6cc:	2000      	movs	r0, #0
 801b6ce:	e005      	b.n	801b6dc <__strtok_r+0x2c>
 801b6d0:	42b5      	cmp	r5, r6
 801b6d2:	d1f6      	bne.n	801b6c2 <__strtok_r+0x12>
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d1f0      	bne.n	801b6ba <__strtok_r+0xa>
 801b6d8:	6014      	str	r4, [r2, #0]
 801b6da:	7003      	strb	r3, [r0, #0]
 801b6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6de:	461c      	mov	r4, r3
 801b6e0:	e00c      	b.n	801b6fc <__strtok_r+0x4c>
 801b6e2:	b915      	cbnz	r5, 801b6ea <__strtok_r+0x3a>
 801b6e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b6e8:	460e      	mov	r6, r1
 801b6ea:	f816 5b01 	ldrb.w	r5, [r6], #1
 801b6ee:	42ab      	cmp	r3, r5
 801b6f0:	d1f7      	bne.n	801b6e2 <__strtok_r+0x32>
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d0f3      	beq.n	801b6de <__strtok_r+0x2e>
 801b6f6:	2300      	movs	r3, #0
 801b6f8:	f804 3c01 	strb.w	r3, [r4, #-1]
 801b6fc:	6014      	str	r4, [r2, #0]
 801b6fe:	e7ed      	b.n	801b6dc <__strtok_r+0x2c>

0801b700 <strstr>:
 801b700:	780a      	ldrb	r2, [r1, #0]
 801b702:	b570      	push	{r4, r5, r6, lr}
 801b704:	b96a      	cbnz	r2, 801b722 <strstr+0x22>
 801b706:	bd70      	pop	{r4, r5, r6, pc}
 801b708:	429a      	cmp	r2, r3
 801b70a:	d109      	bne.n	801b720 <strstr+0x20>
 801b70c:	460c      	mov	r4, r1
 801b70e:	4605      	mov	r5, r0
 801b710:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b714:	2b00      	cmp	r3, #0
 801b716:	d0f6      	beq.n	801b706 <strstr+0x6>
 801b718:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b71c:	429e      	cmp	r6, r3
 801b71e:	d0f7      	beq.n	801b710 <strstr+0x10>
 801b720:	3001      	adds	r0, #1
 801b722:	7803      	ldrb	r3, [r0, #0]
 801b724:	2b00      	cmp	r3, #0
 801b726:	d1ef      	bne.n	801b708 <strstr+0x8>
 801b728:	4618      	mov	r0, r3
 801b72a:	e7ec      	b.n	801b706 <strstr+0x6>

0801b72c <_localeconv_r>:
 801b72c:	4800      	ldr	r0, [pc, #0]	@ (801b730 <_localeconv_r+0x4>)
 801b72e:	4770      	bx	lr
 801b730:	20000248 	.word	0x20000248

0801b734 <_close_r>:
 801b734:	b538      	push	{r3, r4, r5, lr}
 801b736:	4d06      	ldr	r5, [pc, #24]	@ (801b750 <_close_r+0x1c>)
 801b738:	2300      	movs	r3, #0
 801b73a:	4604      	mov	r4, r0
 801b73c:	4608      	mov	r0, r1
 801b73e:	602b      	str	r3, [r5, #0]
 801b740:	f7eb f95e 	bl	8006a00 <_close>
 801b744:	1c43      	adds	r3, r0, #1
 801b746:	d102      	bne.n	801b74e <_close_r+0x1a>
 801b748:	682b      	ldr	r3, [r5, #0]
 801b74a:	b103      	cbz	r3, 801b74e <_close_r+0x1a>
 801b74c:	6023      	str	r3, [r4, #0]
 801b74e:	bd38      	pop	{r3, r4, r5, pc}
 801b750:	20003044 	.word	0x20003044

0801b754 <_lseek_r>:
 801b754:	b538      	push	{r3, r4, r5, lr}
 801b756:	4d07      	ldr	r5, [pc, #28]	@ (801b774 <_lseek_r+0x20>)
 801b758:	4604      	mov	r4, r0
 801b75a:	4608      	mov	r0, r1
 801b75c:	4611      	mov	r1, r2
 801b75e:	2200      	movs	r2, #0
 801b760:	602a      	str	r2, [r5, #0]
 801b762:	461a      	mov	r2, r3
 801b764:	f7eb f973 	bl	8006a4e <_lseek>
 801b768:	1c43      	adds	r3, r0, #1
 801b76a:	d102      	bne.n	801b772 <_lseek_r+0x1e>
 801b76c:	682b      	ldr	r3, [r5, #0]
 801b76e:	b103      	cbz	r3, 801b772 <_lseek_r+0x1e>
 801b770:	6023      	str	r3, [r4, #0]
 801b772:	bd38      	pop	{r3, r4, r5, pc}
 801b774:	20003044 	.word	0x20003044

0801b778 <_read_r>:
 801b778:	b538      	push	{r3, r4, r5, lr}
 801b77a:	4d07      	ldr	r5, [pc, #28]	@ (801b798 <_read_r+0x20>)
 801b77c:	4604      	mov	r4, r0
 801b77e:	4608      	mov	r0, r1
 801b780:	4611      	mov	r1, r2
 801b782:	2200      	movs	r2, #0
 801b784:	602a      	str	r2, [r5, #0]
 801b786:	461a      	mov	r2, r3
 801b788:	f7eb f901 	bl	800698e <_read>
 801b78c:	1c43      	adds	r3, r0, #1
 801b78e:	d102      	bne.n	801b796 <_read_r+0x1e>
 801b790:	682b      	ldr	r3, [r5, #0]
 801b792:	b103      	cbz	r3, 801b796 <_read_r+0x1e>
 801b794:	6023      	str	r3, [r4, #0]
 801b796:	bd38      	pop	{r3, r4, r5, pc}
 801b798:	20003044 	.word	0x20003044

0801b79c <_sbrk_r>:
 801b79c:	b538      	push	{r3, r4, r5, lr}
 801b79e:	4d06      	ldr	r5, [pc, #24]	@ (801b7b8 <_sbrk_r+0x1c>)
 801b7a0:	2300      	movs	r3, #0
 801b7a2:	4604      	mov	r4, r0
 801b7a4:	4608      	mov	r0, r1
 801b7a6:	602b      	str	r3, [r5, #0]
 801b7a8:	f7eb f95e 	bl	8006a68 <_sbrk>
 801b7ac:	1c43      	adds	r3, r0, #1
 801b7ae:	d102      	bne.n	801b7b6 <_sbrk_r+0x1a>
 801b7b0:	682b      	ldr	r3, [r5, #0]
 801b7b2:	b103      	cbz	r3, 801b7b6 <_sbrk_r+0x1a>
 801b7b4:	6023      	str	r3, [r4, #0]
 801b7b6:	bd38      	pop	{r3, r4, r5, pc}
 801b7b8:	20003044 	.word	0x20003044

0801b7bc <_write_r>:
 801b7bc:	b538      	push	{r3, r4, r5, lr}
 801b7be:	4d07      	ldr	r5, [pc, #28]	@ (801b7dc <_write_r+0x20>)
 801b7c0:	4604      	mov	r4, r0
 801b7c2:	4608      	mov	r0, r1
 801b7c4:	4611      	mov	r1, r2
 801b7c6:	2200      	movs	r2, #0
 801b7c8:	602a      	str	r2, [r5, #0]
 801b7ca:	461a      	mov	r2, r3
 801b7cc:	f7eb f8fc 	bl	80069c8 <_write>
 801b7d0:	1c43      	adds	r3, r0, #1
 801b7d2:	d102      	bne.n	801b7da <_write_r+0x1e>
 801b7d4:	682b      	ldr	r3, [r5, #0]
 801b7d6:	b103      	cbz	r3, 801b7da <_write_r+0x1e>
 801b7d8:	6023      	str	r3, [r4, #0]
 801b7da:	bd38      	pop	{r3, r4, r5, pc}
 801b7dc:	20003044 	.word	0x20003044

0801b7e0 <__errno>:
 801b7e0:	4b01      	ldr	r3, [pc, #4]	@ (801b7e8 <__errno+0x8>)
 801b7e2:	6818      	ldr	r0, [r3, #0]
 801b7e4:	4770      	bx	lr
 801b7e6:	bf00      	nop
 801b7e8:	200002c4 	.word	0x200002c4

0801b7ec <__libc_init_array>:
 801b7ec:	b570      	push	{r4, r5, r6, lr}
 801b7ee:	4d0d      	ldr	r5, [pc, #52]	@ (801b824 <__libc_init_array+0x38>)
 801b7f0:	4c0d      	ldr	r4, [pc, #52]	@ (801b828 <__libc_init_array+0x3c>)
 801b7f2:	1b64      	subs	r4, r4, r5
 801b7f4:	10a4      	asrs	r4, r4, #2
 801b7f6:	2600      	movs	r6, #0
 801b7f8:	42a6      	cmp	r6, r4
 801b7fa:	d109      	bne.n	801b810 <__libc_init_array+0x24>
 801b7fc:	4d0b      	ldr	r5, [pc, #44]	@ (801b82c <__libc_init_array+0x40>)
 801b7fe:	4c0c      	ldr	r4, [pc, #48]	@ (801b830 <__libc_init_array+0x44>)
 801b800:	f004 faba 	bl	801fd78 <_init>
 801b804:	1b64      	subs	r4, r4, r5
 801b806:	10a4      	asrs	r4, r4, #2
 801b808:	2600      	movs	r6, #0
 801b80a:	42a6      	cmp	r6, r4
 801b80c:	d105      	bne.n	801b81a <__libc_init_array+0x2e>
 801b80e:	bd70      	pop	{r4, r5, r6, pc}
 801b810:	f855 3b04 	ldr.w	r3, [r5], #4
 801b814:	4798      	blx	r3
 801b816:	3601      	adds	r6, #1
 801b818:	e7ee      	b.n	801b7f8 <__libc_init_array+0xc>
 801b81a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b81e:	4798      	blx	r3
 801b820:	3601      	adds	r6, #1
 801b822:	e7f2      	b.n	801b80a <__libc_init_array+0x1e>
 801b824:	080237b0 	.word	0x080237b0
 801b828:	080237b0 	.word	0x080237b0
 801b82c:	080237b0 	.word	0x080237b0
 801b830:	080237b4 	.word	0x080237b4

0801b834 <__retarget_lock_init_recursive>:
 801b834:	4770      	bx	lr

0801b836 <__retarget_lock_acquire_recursive>:
 801b836:	4770      	bx	lr

0801b838 <__retarget_lock_release_recursive>:
 801b838:	4770      	bx	lr

0801b83a <strcpy>:
 801b83a:	4603      	mov	r3, r0
 801b83c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b840:	f803 2b01 	strb.w	r2, [r3], #1
 801b844:	2a00      	cmp	r2, #0
 801b846:	d1f9      	bne.n	801b83c <strcpy+0x2>
 801b848:	4770      	bx	lr

0801b84a <memcpy>:
 801b84a:	440a      	add	r2, r1
 801b84c:	4291      	cmp	r1, r2
 801b84e:	f100 33ff 	add.w	r3, r0, #4294967295
 801b852:	d100      	bne.n	801b856 <memcpy+0xc>
 801b854:	4770      	bx	lr
 801b856:	b510      	push	{r4, lr}
 801b858:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b85c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b860:	4291      	cmp	r1, r2
 801b862:	d1f9      	bne.n	801b858 <memcpy+0xe>
 801b864:	bd10      	pop	{r4, pc}
	...

0801b868 <nan>:
 801b868:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b870 <nan+0x8>
 801b86c:	4770      	bx	lr
 801b86e:	bf00      	nop
 801b870:	00000000 	.word	0x00000000
 801b874:	7ff80000 	.word	0x7ff80000

0801b878 <nanf>:
 801b878:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801b880 <nanf+0x8>
 801b87c:	4770      	bx	lr
 801b87e:	bf00      	nop
 801b880:	7fc00000 	.word	0x7fc00000

0801b884 <__assert_func>:
 801b884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b886:	4614      	mov	r4, r2
 801b888:	461a      	mov	r2, r3
 801b88a:	4b09      	ldr	r3, [pc, #36]	@ (801b8b0 <__assert_func+0x2c>)
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	4605      	mov	r5, r0
 801b890:	68d8      	ldr	r0, [r3, #12]
 801b892:	b954      	cbnz	r4, 801b8aa <__assert_func+0x26>
 801b894:	4b07      	ldr	r3, [pc, #28]	@ (801b8b4 <__assert_func+0x30>)
 801b896:	461c      	mov	r4, r3
 801b898:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b89c:	9100      	str	r1, [sp, #0]
 801b89e:	462b      	mov	r3, r5
 801b8a0:	4905      	ldr	r1, [pc, #20]	@ (801b8b8 <__assert_func+0x34>)
 801b8a2:	f002 f9f3 	bl	801dc8c <fiprintf>
 801b8a6:	f002 fab1 	bl	801de0c <abort>
 801b8aa:	4b04      	ldr	r3, [pc, #16]	@ (801b8bc <__assert_func+0x38>)
 801b8ac:	e7f4      	b.n	801b898 <__assert_func+0x14>
 801b8ae:	bf00      	nop
 801b8b0:	200002c4 	.word	0x200002c4
 801b8b4:	0802336e 	.word	0x0802336e
 801b8b8:	08023340 	.word	0x08023340
 801b8bc:	08023333 	.word	0x08023333

0801b8c0 <quorem>:
 801b8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8c4:	6903      	ldr	r3, [r0, #16]
 801b8c6:	690c      	ldr	r4, [r1, #16]
 801b8c8:	42a3      	cmp	r3, r4
 801b8ca:	4607      	mov	r7, r0
 801b8cc:	db7e      	blt.n	801b9cc <quorem+0x10c>
 801b8ce:	3c01      	subs	r4, #1
 801b8d0:	f101 0814 	add.w	r8, r1, #20
 801b8d4:	00a3      	lsls	r3, r4, #2
 801b8d6:	f100 0514 	add.w	r5, r0, #20
 801b8da:	9300      	str	r3, [sp, #0]
 801b8dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b8e0:	9301      	str	r3, [sp, #4]
 801b8e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b8e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b8ea:	3301      	adds	r3, #1
 801b8ec:	429a      	cmp	r2, r3
 801b8ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b8f2:	fbb2 f6f3 	udiv	r6, r2, r3
 801b8f6:	d32e      	bcc.n	801b956 <quorem+0x96>
 801b8f8:	f04f 0a00 	mov.w	sl, #0
 801b8fc:	46c4      	mov	ip, r8
 801b8fe:	46ae      	mov	lr, r5
 801b900:	46d3      	mov	fp, sl
 801b902:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b906:	b298      	uxth	r0, r3
 801b908:	fb06 a000 	mla	r0, r6, r0, sl
 801b90c:	0c02      	lsrs	r2, r0, #16
 801b90e:	0c1b      	lsrs	r3, r3, #16
 801b910:	fb06 2303 	mla	r3, r6, r3, r2
 801b914:	f8de 2000 	ldr.w	r2, [lr]
 801b918:	b280      	uxth	r0, r0
 801b91a:	b292      	uxth	r2, r2
 801b91c:	1a12      	subs	r2, r2, r0
 801b91e:	445a      	add	r2, fp
 801b920:	f8de 0000 	ldr.w	r0, [lr]
 801b924:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b928:	b29b      	uxth	r3, r3
 801b92a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b92e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b932:	b292      	uxth	r2, r2
 801b934:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b938:	45e1      	cmp	r9, ip
 801b93a:	f84e 2b04 	str.w	r2, [lr], #4
 801b93e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b942:	d2de      	bcs.n	801b902 <quorem+0x42>
 801b944:	9b00      	ldr	r3, [sp, #0]
 801b946:	58eb      	ldr	r3, [r5, r3]
 801b948:	b92b      	cbnz	r3, 801b956 <quorem+0x96>
 801b94a:	9b01      	ldr	r3, [sp, #4]
 801b94c:	3b04      	subs	r3, #4
 801b94e:	429d      	cmp	r5, r3
 801b950:	461a      	mov	r2, r3
 801b952:	d32f      	bcc.n	801b9b4 <quorem+0xf4>
 801b954:	613c      	str	r4, [r7, #16]
 801b956:	4638      	mov	r0, r7
 801b958:	f001 fc58 	bl	801d20c <__mcmp>
 801b95c:	2800      	cmp	r0, #0
 801b95e:	db25      	blt.n	801b9ac <quorem+0xec>
 801b960:	4629      	mov	r1, r5
 801b962:	2000      	movs	r0, #0
 801b964:	f858 2b04 	ldr.w	r2, [r8], #4
 801b968:	f8d1 c000 	ldr.w	ip, [r1]
 801b96c:	fa1f fe82 	uxth.w	lr, r2
 801b970:	fa1f f38c 	uxth.w	r3, ip
 801b974:	eba3 030e 	sub.w	r3, r3, lr
 801b978:	4403      	add	r3, r0
 801b97a:	0c12      	lsrs	r2, r2, #16
 801b97c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b980:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b984:	b29b      	uxth	r3, r3
 801b986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b98a:	45c1      	cmp	r9, r8
 801b98c:	f841 3b04 	str.w	r3, [r1], #4
 801b990:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b994:	d2e6      	bcs.n	801b964 <quorem+0xa4>
 801b996:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b99a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b99e:	b922      	cbnz	r2, 801b9aa <quorem+0xea>
 801b9a0:	3b04      	subs	r3, #4
 801b9a2:	429d      	cmp	r5, r3
 801b9a4:	461a      	mov	r2, r3
 801b9a6:	d30b      	bcc.n	801b9c0 <quorem+0x100>
 801b9a8:	613c      	str	r4, [r7, #16]
 801b9aa:	3601      	adds	r6, #1
 801b9ac:	4630      	mov	r0, r6
 801b9ae:	b003      	add	sp, #12
 801b9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9b4:	6812      	ldr	r2, [r2, #0]
 801b9b6:	3b04      	subs	r3, #4
 801b9b8:	2a00      	cmp	r2, #0
 801b9ba:	d1cb      	bne.n	801b954 <quorem+0x94>
 801b9bc:	3c01      	subs	r4, #1
 801b9be:	e7c6      	b.n	801b94e <quorem+0x8e>
 801b9c0:	6812      	ldr	r2, [r2, #0]
 801b9c2:	3b04      	subs	r3, #4
 801b9c4:	2a00      	cmp	r2, #0
 801b9c6:	d1ef      	bne.n	801b9a8 <quorem+0xe8>
 801b9c8:	3c01      	subs	r4, #1
 801b9ca:	e7ea      	b.n	801b9a2 <quorem+0xe2>
 801b9cc:	2000      	movs	r0, #0
 801b9ce:	e7ee      	b.n	801b9ae <quorem+0xee>

0801b9d0 <_dtoa_r>:
 801b9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9d4:	69c7      	ldr	r7, [r0, #28]
 801b9d6:	b099      	sub	sp, #100	@ 0x64
 801b9d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b9dc:	ec55 4b10 	vmov	r4, r5, d0
 801b9e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801b9e2:	9109      	str	r1, [sp, #36]	@ 0x24
 801b9e4:	4683      	mov	fp, r0
 801b9e6:	920e      	str	r2, [sp, #56]	@ 0x38
 801b9e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b9ea:	b97f      	cbnz	r7, 801ba0c <_dtoa_r+0x3c>
 801b9ec:	2010      	movs	r0, #16
 801b9ee:	f7fd fe99 	bl	8019724 <malloc>
 801b9f2:	4602      	mov	r2, r0
 801b9f4:	f8cb 001c 	str.w	r0, [fp, #28]
 801b9f8:	b920      	cbnz	r0, 801ba04 <_dtoa_r+0x34>
 801b9fa:	4ba7      	ldr	r3, [pc, #668]	@ (801bc98 <_dtoa_r+0x2c8>)
 801b9fc:	21ef      	movs	r1, #239	@ 0xef
 801b9fe:	48a7      	ldr	r0, [pc, #668]	@ (801bc9c <_dtoa_r+0x2cc>)
 801ba00:	f7ff ff40 	bl	801b884 <__assert_func>
 801ba04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801ba08:	6007      	str	r7, [r0, #0]
 801ba0a:	60c7      	str	r7, [r0, #12]
 801ba0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ba10:	6819      	ldr	r1, [r3, #0]
 801ba12:	b159      	cbz	r1, 801ba2c <_dtoa_r+0x5c>
 801ba14:	685a      	ldr	r2, [r3, #4]
 801ba16:	604a      	str	r2, [r1, #4]
 801ba18:	2301      	movs	r3, #1
 801ba1a:	4093      	lsls	r3, r2
 801ba1c:	608b      	str	r3, [r1, #8]
 801ba1e:	4658      	mov	r0, fp
 801ba20:	f001 f970 	bl	801cd04 <_Bfree>
 801ba24:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ba28:	2200      	movs	r2, #0
 801ba2a:	601a      	str	r2, [r3, #0]
 801ba2c:	1e2b      	subs	r3, r5, #0
 801ba2e:	bfb9      	ittee	lt
 801ba30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801ba34:	9303      	strlt	r3, [sp, #12]
 801ba36:	2300      	movge	r3, #0
 801ba38:	6033      	strge	r3, [r6, #0]
 801ba3a:	9f03      	ldr	r7, [sp, #12]
 801ba3c:	4b98      	ldr	r3, [pc, #608]	@ (801bca0 <_dtoa_r+0x2d0>)
 801ba3e:	bfbc      	itt	lt
 801ba40:	2201      	movlt	r2, #1
 801ba42:	6032      	strlt	r2, [r6, #0]
 801ba44:	43bb      	bics	r3, r7
 801ba46:	d112      	bne.n	801ba6e <_dtoa_r+0x9e>
 801ba48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ba4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801ba4e:	6013      	str	r3, [r2, #0]
 801ba50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ba54:	4323      	orrs	r3, r4
 801ba56:	f000 854d 	beq.w	801c4f4 <_dtoa_r+0xb24>
 801ba5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ba5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801bcb4 <_dtoa_r+0x2e4>
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	f000 854f 	beq.w	801c504 <_dtoa_r+0xb34>
 801ba66:	f10a 0303 	add.w	r3, sl, #3
 801ba6a:	f000 bd49 	b.w	801c500 <_dtoa_r+0xb30>
 801ba6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ba72:	2200      	movs	r2, #0
 801ba74:	ec51 0b17 	vmov	r0, r1, d7
 801ba78:	2300      	movs	r3, #0
 801ba7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801ba7e:	f7e4 fffb 	bl	8000a78 <__aeabi_dcmpeq>
 801ba82:	4680      	mov	r8, r0
 801ba84:	b158      	cbz	r0, 801ba9e <_dtoa_r+0xce>
 801ba86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ba88:	2301      	movs	r3, #1
 801ba8a:	6013      	str	r3, [r2, #0]
 801ba8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ba8e:	b113      	cbz	r3, 801ba96 <_dtoa_r+0xc6>
 801ba90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ba92:	4b84      	ldr	r3, [pc, #528]	@ (801bca4 <_dtoa_r+0x2d4>)
 801ba94:	6013      	str	r3, [r2, #0]
 801ba96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801bcb8 <_dtoa_r+0x2e8>
 801ba9a:	f000 bd33 	b.w	801c504 <_dtoa_r+0xb34>
 801ba9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801baa2:	aa16      	add	r2, sp, #88	@ 0x58
 801baa4:	a917      	add	r1, sp, #92	@ 0x5c
 801baa6:	4658      	mov	r0, fp
 801baa8:	f001 fcd0 	bl	801d44c <__d2b>
 801baac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801bab0:	4681      	mov	r9, r0
 801bab2:	2e00      	cmp	r6, #0
 801bab4:	d077      	beq.n	801bba6 <_dtoa_r+0x1d6>
 801bab6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bab8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801babc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bac4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801bac8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801bacc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801bad0:	4619      	mov	r1, r3
 801bad2:	2200      	movs	r2, #0
 801bad4:	4b74      	ldr	r3, [pc, #464]	@ (801bca8 <_dtoa_r+0x2d8>)
 801bad6:	f7e4 fbaf 	bl	8000238 <__aeabi_dsub>
 801bada:	a369      	add	r3, pc, #420	@ (adr r3, 801bc80 <_dtoa_r+0x2b0>)
 801badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bae0:	f7e4 fd62 	bl	80005a8 <__aeabi_dmul>
 801bae4:	a368      	add	r3, pc, #416	@ (adr r3, 801bc88 <_dtoa_r+0x2b8>)
 801bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baea:	f7e4 fba7 	bl	800023c <__adddf3>
 801baee:	4604      	mov	r4, r0
 801baf0:	4630      	mov	r0, r6
 801baf2:	460d      	mov	r5, r1
 801baf4:	f7e4 fcee 	bl	80004d4 <__aeabi_i2d>
 801baf8:	a365      	add	r3, pc, #404	@ (adr r3, 801bc90 <_dtoa_r+0x2c0>)
 801bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bafe:	f7e4 fd53 	bl	80005a8 <__aeabi_dmul>
 801bb02:	4602      	mov	r2, r0
 801bb04:	460b      	mov	r3, r1
 801bb06:	4620      	mov	r0, r4
 801bb08:	4629      	mov	r1, r5
 801bb0a:	f7e4 fb97 	bl	800023c <__adddf3>
 801bb0e:	4604      	mov	r4, r0
 801bb10:	460d      	mov	r5, r1
 801bb12:	f7e4 fff9 	bl	8000b08 <__aeabi_d2iz>
 801bb16:	2200      	movs	r2, #0
 801bb18:	4607      	mov	r7, r0
 801bb1a:	2300      	movs	r3, #0
 801bb1c:	4620      	mov	r0, r4
 801bb1e:	4629      	mov	r1, r5
 801bb20:	f7e4 ffb4 	bl	8000a8c <__aeabi_dcmplt>
 801bb24:	b140      	cbz	r0, 801bb38 <_dtoa_r+0x168>
 801bb26:	4638      	mov	r0, r7
 801bb28:	f7e4 fcd4 	bl	80004d4 <__aeabi_i2d>
 801bb2c:	4622      	mov	r2, r4
 801bb2e:	462b      	mov	r3, r5
 801bb30:	f7e4 ffa2 	bl	8000a78 <__aeabi_dcmpeq>
 801bb34:	b900      	cbnz	r0, 801bb38 <_dtoa_r+0x168>
 801bb36:	3f01      	subs	r7, #1
 801bb38:	2f16      	cmp	r7, #22
 801bb3a:	d851      	bhi.n	801bbe0 <_dtoa_r+0x210>
 801bb3c:	4b5b      	ldr	r3, [pc, #364]	@ (801bcac <_dtoa_r+0x2dc>)
 801bb3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bb4a:	f7e4 ff9f 	bl	8000a8c <__aeabi_dcmplt>
 801bb4e:	2800      	cmp	r0, #0
 801bb50:	d048      	beq.n	801bbe4 <_dtoa_r+0x214>
 801bb52:	3f01      	subs	r7, #1
 801bb54:	2300      	movs	r3, #0
 801bb56:	9312      	str	r3, [sp, #72]	@ 0x48
 801bb58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bb5a:	1b9b      	subs	r3, r3, r6
 801bb5c:	1e5a      	subs	r2, r3, #1
 801bb5e:	bf44      	itt	mi
 801bb60:	f1c3 0801 	rsbmi	r8, r3, #1
 801bb64:	2300      	movmi	r3, #0
 801bb66:	9208      	str	r2, [sp, #32]
 801bb68:	bf54      	ite	pl
 801bb6a:	f04f 0800 	movpl.w	r8, #0
 801bb6e:	9308      	strmi	r3, [sp, #32]
 801bb70:	2f00      	cmp	r7, #0
 801bb72:	db39      	blt.n	801bbe8 <_dtoa_r+0x218>
 801bb74:	9b08      	ldr	r3, [sp, #32]
 801bb76:	970f      	str	r7, [sp, #60]	@ 0x3c
 801bb78:	443b      	add	r3, r7
 801bb7a:	9308      	str	r3, [sp, #32]
 801bb7c:	2300      	movs	r3, #0
 801bb7e:	930a      	str	r3, [sp, #40]	@ 0x28
 801bb80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb82:	2b09      	cmp	r3, #9
 801bb84:	d864      	bhi.n	801bc50 <_dtoa_r+0x280>
 801bb86:	2b05      	cmp	r3, #5
 801bb88:	bfc4      	itt	gt
 801bb8a:	3b04      	subgt	r3, #4
 801bb8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801bb8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb90:	f1a3 0302 	sub.w	r3, r3, #2
 801bb94:	bfcc      	ite	gt
 801bb96:	2400      	movgt	r4, #0
 801bb98:	2401      	movle	r4, #1
 801bb9a:	2b03      	cmp	r3, #3
 801bb9c:	d863      	bhi.n	801bc66 <_dtoa_r+0x296>
 801bb9e:	e8df f003 	tbb	[pc, r3]
 801bba2:	372a      	.short	0x372a
 801bba4:	5535      	.short	0x5535
 801bba6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801bbaa:	441e      	add	r6, r3
 801bbac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801bbb0:	2b20      	cmp	r3, #32
 801bbb2:	bfc1      	itttt	gt
 801bbb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801bbb8:	409f      	lslgt	r7, r3
 801bbba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801bbbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 801bbc2:	bfd6      	itet	le
 801bbc4:	f1c3 0320 	rsble	r3, r3, #32
 801bbc8:	ea47 0003 	orrgt.w	r0, r7, r3
 801bbcc:	fa04 f003 	lslle.w	r0, r4, r3
 801bbd0:	f7e4 fc70 	bl	80004b4 <__aeabi_ui2d>
 801bbd4:	2201      	movs	r2, #1
 801bbd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801bbda:	3e01      	subs	r6, #1
 801bbdc:	9214      	str	r2, [sp, #80]	@ 0x50
 801bbde:	e777      	b.n	801bad0 <_dtoa_r+0x100>
 801bbe0:	2301      	movs	r3, #1
 801bbe2:	e7b8      	b.n	801bb56 <_dtoa_r+0x186>
 801bbe4:	9012      	str	r0, [sp, #72]	@ 0x48
 801bbe6:	e7b7      	b.n	801bb58 <_dtoa_r+0x188>
 801bbe8:	427b      	negs	r3, r7
 801bbea:	930a      	str	r3, [sp, #40]	@ 0x28
 801bbec:	2300      	movs	r3, #0
 801bbee:	eba8 0807 	sub.w	r8, r8, r7
 801bbf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bbf4:	e7c4      	b.n	801bb80 <_dtoa_r+0x1b0>
 801bbf6:	2300      	movs	r3, #0
 801bbf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bbfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	dc35      	bgt.n	801bc6c <_dtoa_r+0x29c>
 801bc00:	2301      	movs	r3, #1
 801bc02:	9300      	str	r3, [sp, #0]
 801bc04:	9307      	str	r3, [sp, #28]
 801bc06:	461a      	mov	r2, r3
 801bc08:	920e      	str	r2, [sp, #56]	@ 0x38
 801bc0a:	e00b      	b.n	801bc24 <_dtoa_r+0x254>
 801bc0c:	2301      	movs	r3, #1
 801bc0e:	e7f3      	b.n	801bbf8 <_dtoa_r+0x228>
 801bc10:	2300      	movs	r3, #0
 801bc12:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bc14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bc16:	18fb      	adds	r3, r7, r3
 801bc18:	9300      	str	r3, [sp, #0]
 801bc1a:	3301      	adds	r3, #1
 801bc1c:	2b01      	cmp	r3, #1
 801bc1e:	9307      	str	r3, [sp, #28]
 801bc20:	bfb8      	it	lt
 801bc22:	2301      	movlt	r3, #1
 801bc24:	f8db 001c 	ldr.w	r0, [fp, #28]
 801bc28:	2100      	movs	r1, #0
 801bc2a:	2204      	movs	r2, #4
 801bc2c:	f102 0514 	add.w	r5, r2, #20
 801bc30:	429d      	cmp	r5, r3
 801bc32:	d91f      	bls.n	801bc74 <_dtoa_r+0x2a4>
 801bc34:	6041      	str	r1, [r0, #4]
 801bc36:	4658      	mov	r0, fp
 801bc38:	f001 f824 	bl	801cc84 <_Balloc>
 801bc3c:	4682      	mov	sl, r0
 801bc3e:	2800      	cmp	r0, #0
 801bc40:	d13c      	bne.n	801bcbc <_dtoa_r+0x2ec>
 801bc42:	4b1b      	ldr	r3, [pc, #108]	@ (801bcb0 <_dtoa_r+0x2e0>)
 801bc44:	4602      	mov	r2, r0
 801bc46:	f240 11af 	movw	r1, #431	@ 0x1af
 801bc4a:	e6d8      	b.n	801b9fe <_dtoa_r+0x2e>
 801bc4c:	2301      	movs	r3, #1
 801bc4e:	e7e0      	b.n	801bc12 <_dtoa_r+0x242>
 801bc50:	2401      	movs	r4, #1
 801bc52:	2300      	movs	r3, #0
 801bc54:	9309      	str	r3, [sp, #36]	@ 0x24
 801bc56:	940b      	str	r4, [sp, #44]	@ 0x2c
 801bc58:	f04f 33ff 	mov.w	r3, #4294967295
 801bc5c:	9300      	str	r3, [sp, #0]
 801bc5e:	9307      	str	r3, [sp, #28]
 801bc60:	2200      	movs	r2, #0
 801bc62:	2312      	movs	r3, #18
 801bc64:	e7d0      	b.n	801bc08 <_dtoa_r+0x238>
 801bc66:	2301      	movs	r3, #1
 801bc68:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bc6a:	e7f5      	b.n	801bc58 <_dtoa_r+0x288>
 801bc6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bc6e:	9300      	str	r3, [sp, #0]
 801bc70:	9307      	str	r3, [sp, #28]
 801bc72:	e7d7      	b.n	801bc24 <_dtoa_r+0x254>
 801bc74:	3101      	adds	r1, #1
 801bc76:	0052      	lsls	r2, r2, #1
 801bc78:	e7d8      	b.n	801bc2c <_dtoa_r+0x25c>
 801bc7a:	bf00      	nop
 801bc7c:	f3af 8000 	nop.w
 801bc80:	636f4361 	.word	0x636f4361
 801bc84:	3fd287a7 	.word	0x3fd287a7
 801bc88:	8b60c8b3 	.word	0x8b60c8b3
 801bc8c:	3fc68a28 	.word	0x3fc68a28
 801bc90:	509f79fb 	.word	0x509f79fb
 801bc94:	3fd34413 	.word	0x3fd34413
 801bc98:	080232ba 	.word	0x080232ba
 801bc9c:	0802337c 	.word	0x0802337c
 801bca0:	7ff00000 	.word	0x7ff00000
 801bca4:	08023292 	.word	0x08023292
 801bca8:	3ff80000 	.word	0x3ff80000
 801bcac:	080234d8 	.word	0x080234d8
 801bcb0:	080233d4 	.word	0x080233d4
 801bcb4:	08023378 	.word	0x08023378
 801bcb8:	08023291 	.word	0x08023291
 801bcbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bcc0:	6018      	str	r0, [r3, #0]
 801bcc2:	9b07      	ldr	r3, [sp, #28]
 801bcc4:	2b0e      	cmp	r3, #14
 801bcc6:	f200 80a4 	bhi.w	801be12 <_dtoa_r+0x442>
 801bcca:	2c00      	cmp	r4, #0
 801bccc:	f000 80a1 	beq.w	801be12 <_dtoa_r+0x442>
 801bcd0:	2f00      	cmp	r7, #0
 801bcd2:	dd33      	ble.n	801bd3c <_dtoa_r+0x36c>
 801bcd4:	4bad      	ldr	r3, [pc, #692]	@ (801bf8c <_dtoa_r+0x5bc>)
 801bcd6:	f007 020f 	and.w	r2, r7, #15
 801bcda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bcde:	ed93 7b00 	vldr	d7, [r3]
 801bce2:	05f8      	lsls	r0, r7, #23
 801bce4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801bce8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801bcec:	d516      	bpl.n	801bd1c <_dtoa_r+0x34c>
 801bcee:	4ba8      	ldr	r3, [pc, #672]	@ (801bf90 <_dtoa_r+0x5c0>)
 801bcf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bcf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bcf8:	f7e4 fd80 	bl	80007fc <__aeabi_ddiv>
 801bcfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bd00:	f004 040f 	and.w	r4, r4, #15
 801bd04:	2603      	movs	r6, #3
 801bd06:	4da2      	ldr	r5, [pc, #648]	@ (801bf90 <_dtoa_r+0x5c0>)
 801bd08:	b954      	cbnz	r4, 801bd20 <_dtoa_r+0x350>
 801bd0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bd0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd12:	f7e4 fd73 	bl	80007fc <__aeabi_ddiv>
 801bd16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bd1a:	e028      	b.n	801bd6e <_dtoa_r+0x39e>
 801bd1c:	2602      	movs	r6, #2
 801bd1e:	e7f2      	b.n	801bd06 <_dtoa_r+0x336>
 801bd20:	07e1      	lsls	r1, r4, #31
 801bd22:	d508      	bpl.n	801bd36 <_dtoa_r+0x366>
 801bd24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bd28:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bd2c:	f7e4 fc3c 	bl	80005a8 <__aeabi_dmul>
 801bd30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bd34:	3601      	adds	r6, #1
 801bd36:	1064      	asrs	r4, r4, #1
 801bd38:	3508      	adds	r5, #8
 801bd3a:	e7e5      	b.n	801bd08 <_dtoa_r+0x338>
 801bd3c:	f000 80d2 	beq.w	801bee4 <_dtoa_r+0x514>
 801bd40:	427c      	negs	r4, r7
 801bd42:	4b92      	ldr	r3, [pc, #584]	@ (801bf8c <_dtoa_r+0x5bc>)
 801bd44:	4d92      	ldr	r5, [pc, #584]	@ (801bf90 <_dtoa_r+0x5c0>)
 801bd46:	f004 020f 	and.w	r2, r4, #15
 801bd4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bd56:	f7e4 fc27 	bl	80005a8 <__aeabi_dmul>
 801bd5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bd5e:	1124      	asrs	r4, r4, #4
 801bd60:	2300      	movs	r3, #0
 801bd62:	2602      	movs	r6, #2
 801bd64:	2c00      	cmp	r4, #0
 801bd66:	f040 80b2 	bne.w	801bece <_dtoa_r+0x4fe>
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d1d3      	bne.n	801bd16 <_dtoa_r+0x346>
 801bd6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bd70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	f000 80b7 	beq.w	801bee8 <_dtoa_r+0x518>
 801bd7a:	4b86      	ldr	r3, [pc, #536]	@ (801bf94 <_dtoa_r+0x5c4>)
 801bd7c:	2200      	movs	r2, #0
 801bd7e:	4620      	mov	r0, r4
 801bd80:	4629      	mov	r1, r5
 801bd82:	f7e4 fe83 	bl	8000a8c <__aeabi_dcmplt>
 801bd86:	2800      	cmp	r0, #0
 801bd88:	f000 80ae 	beq.w	801bee8 <_dtoa_r+0x518>
 801bd8c:	9b07      	ldr	r3, [sp, #28]
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	f000 80aa 	beq.w	801bee8 <_dtoa_r+0x518>
 801bd94:	9b00      	ldr	r3, [sp, #0]
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	dd37      	ble.n	801be0a <_dtoa_r+0x43a>
 801bd9a:	1e7b      	subs	r3, r7, #1
 801bd9c:	9304      	str	r3, [sp, #16]
 801bd9e:	4620      	mov	r0, r4
 801bda0:	4b7d      	ldr	r3, [pc, #500]	@ (801bf98 <_dtoa_r+0x5c8>)
 801bda2:	2200      	movs	r2, #0
 801bda4:	4629      	mov	r1, r5
 801bda6:	f7e4 fbff 	bl	80005a8 <__aeabi_dmul>
 801bdaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bdae:	9c00      	ldr	r4, [sp, #0]
 801bdb0:	3601      	adds	r6, #1
 801bdb2:	4630      	mov	r0, r6
 801bdb4:	f7e4 fb8e 	bl	80004d4 <__aeabi_i2d>
 801bdb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bdbc:	f7e4 fbf4 	bl	80005a8 <__aeabi_dmul>
 801bdc0:	4b76      	ldr	r3, [pc, #472]	@ (801bf9c <_dtoa_r+0x5cc>)
 801bdc2:	2200      	movs	r2, #0
 801bdc4:	f7e4 fa3a 	bl	800023c <__adddf3>
 801bdc8:	4605      	mov	r5, r0
 801bdca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801bdce:	2c00      	cmp	r4, #0
 801bdd0:	f040 808d 	bne.w	801beee <_dtoa_r+0x51e>
 801bdd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bdd8:	4b71      	ldr	r3, [pc, #452]	@ (801bfa0 <_dtoa_r+0x5d0>)
 801bdda:	2200      	movs	r2, #0
 801bddc:	f7e4 fa2c 	bl	8000238 <__aeabi_dsub>
 801bde0:	4602      	mov	r2, r0
 801bde2:	460b      	mov	r3, r1
 801bde4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bde8:	462a      	mov	r2, r5
 801bdea:	4633      	mov	r3, r6
 801bdec:	f7e4 fe6c 	bl	8000ac8 <__aeabi_dcmpgt>
 801bdf0:	2800      	cmp	r0, #0
 801bdf2:	f040 828b 	bne.w	801c30c <_dtoa_r+0x93c>
 801bdf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bdfa:	462a      	mov	r2, r5
 801bdfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801be00:	f7e4 fe44 	bl	8000a8c <__aeabi_dcmplt>
 801be04:	2800      	cmp	r0, #0
 801be06:	f040 8128 	bne.w	801c05a <_dtoa_r+0x68a>
 801be0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801be0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801be12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801be14:	2b00      	cmp	r3, #0
 801be16:	f2c0 815a 	blt.w	801c0ce <_dtoa_r+0x6fe>
 801be1a:	2f0e      	cmp	r7, #14
 801be1c:	f300 8157 	bgt.w	801c0ce <_dtoa_r+0x6fe>
 801be20:	4b5a      	ldr	r3, [pc, #360]	@ (801bf8c <_dtoa_r+0x5bc>)
 801be22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801be26:	ed93 7b00 	vldr	d7, [r3]
 801be2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	ed8d 7b00 	vstr	d7, [sp]
 801be32:	da03      	bge.n	801be3c <_dtoa_r+0x46c>
 801be34:	9b07      	ldr	r3, [sp, #28]
 801be36:	2b00      	cmp	r3, #0
 801be38:	f340 8101 	ble.w	801c03e <_dtoa_r+0x66e>
 801be3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801be40:	4656      	mov	r6, sl
 801be42:	e9dd 2300 	ldrd	r2, r3, [sp]
 801be46:	4620      	mov	r0, r4
 801be48:	4629      	mov	r1, r5
 801be4a:	f7e4 fcd7 	bl	80007fc <__aeabi_ddiv>
 801be4e:	f7e4 fe5b 	bl	8000b08 <__aeabi_d2iz>
 801be52:	4680      	mov	r8, r0
 801be54:	f7e4 fb3e 	bl	80004d4 <__aeabi_i2d>
 801be58:	e9dd 2300 	ldrd	r2, r3, [sp]
 801be5c:	f7e4 fba4 	bl	80005a8 <__aeabi_dmul>
 801be60:	4602      	mov	r2, r0
 801be62:	460b      	mov	r3, r1
 801be64:	4620      	mov	r0, r4
 801be66:	4629      	mov	r1, r5
 801be68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801be6c:	f7e4 f9e4 	bl	8000238 <__aeabi_dsub>
 801be70:	f806 4b01 	strb.w	r4, [r6], #1
 801be74:	9d07      	ldr	r5, [sp, #28]
 801be76:	eba6 040a 	sub.w	r4, r6, sl
 801be7a:	42a5      	cmp	r5, r4
 801be7c:	4602      	mov	r2, r0
 801be7e:	460b      	mov	r3, r1
 801be80:	f040 8117 	bne.w	801c0b2 <_dtoa_r+0x6e2>
 801be84:	f7e4 f9da 	bl	800023c <__adddf3>
 801be88:	e9dd 2300 	ldrd	r2, r3, [sp]
 801be8c:	4604      	mov	r4, r0
 801be8e:	460d      	mov	r5, r1
 801be90:	f7e4 fe1a 	bl	8000ac8 <__aeabi_dcmpgt>
 801be94:	2800      	cmp	r0, #0
 801be96:	f040 80f9 	bne.w	801c08c <_dtoa_r+0x6bc>
 801be9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801be9e:	4620      	mov	r0, r4
 801bea0:	4629      	mov	r1, r5
 801bea2:	f7e4 fde9 	bl	8000a78 <__aeabi_dcmpeq>
 801bea6:	b118      	cbz	r0, 801beb0 <_dtoa_r+0x4e0>
 801bea8:	f018 0f01 	tst.w	r8, #1
 801beac:	f040 80ee 	bne.w	801c08c <_dtoa_r+0x6bc>
 801beb0:	4649      	mov	r1, r9
 801beb2:	4658      	mov	r0, fp
 801beb4:	f000 ff26 	bl	801cd04 <_Bfree>
 801beb8:	2300      	movs	r3, #0
 801beba:	7033      	strb	r3, [r6, #0]
 801bebc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bebe:	3701      	adds	r7, #1
 801bec0:	601f      	str	r7, [r3, #0]
 801bec2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	f000 831d 	beq.w	801c504 <_dtoa_r+0xb34>
 801beca:	601e      	str	r6, [r3, #0]
 801becc:	e31a      	b.n	801c504 <_dtoa_r+0xb34>
 801bece:	07e2      	lsls	r2, r4, #31
 801bed0:	d505      	bpl.n	801bede <_dtoa_r+0x50e>
 801bed2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bed6:	f7e4 fb67 	bl	80005a8 <__aeabi_dmul>
 801beda:	3601      	adds	r6, #1
 801bedc:	2301      	movs	r3, #1
 801bede:	1064      	asrs	r4, r4, #1
 801bee0:	3508      	adds	r5, #8
 801bee2:	e73f      	b.n	801bd64 <_dtoa_r+0x394>
 801bee4:	2602      	movs	r6, #2
 801bee6:	e742      	b.n	801bd6e <_dtoa_r+0x39e>
 801bee8:	9c07      	ldr	r4, [sp, #28]
 801beea:	9704      	str	r7, [sp, #16]
 801beec:	e761      	b.n	801bdb2 <_dtoa_r+0x3e2>
 801beee:	4b27      	ldr	r3, [pc, #156]	@ (801bf8c <_dtoa_r+0x5bc>)
 801bef0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801bef2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bef6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801befa:	4454      	add	r4, sl
 801befc:	2900      	cmp	r1, #0
 801befe:	d053      	beq.n	801bfa8 <_dtoa_r+0x5d8>
 801bf00:	4928      	ldr	r1, [pc, #160]	@ (801bfa4 <_dtoa_r+0x5d4>)
 801bf02:	2000      	movs	r0, #0
 801bf04:	f7e4 fc7a 	bl	80007fc <__aeabi_ddiv>
 801bf08:	4633      	mov	r3, r6
 801bf0a:	462a      	mov	r2, r5
 801bf0c:	f7e4 f994 	bl	8000238 <__aeabi_dsub>
 801bf10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bf14:	4656      	mov	r6, sl
 801bf16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bf1a:	f7e4 fdf5 	bl	8000b08 <__aeabi_d2iz>
 801bf1e:	4605      	mov	r5, r0
 801bf20:	f7e4 fad8 	bl	80004d4 <__aeabi_i2d>
 801bf24:	4602      	mov	r2, r0
 801bf26:	460b      	mov	r3, r1
 801bf28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bf2c:	f7e4 f984 	bl	8000238 <__aeabi_dsub>
 801bf30:	3530      	adds	r5, #48	@ 0x30
 801bf32:	4602      	mov	r2, r0
 801bf34:	460b      	mov	r3, r1
 801bf36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bf3a:	f806 5b01 	strb.w	r5, [r6], #1
 801bf3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bf42:	f7e4 fda3 	bl	8000a8c <__aeabi_dcmplt>
 801bf46:	2800      	cmp	r0, #0
 801bf48:	d171      	bne.n	801c02e <_dtoa_r+0x65e>
 801bf4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bf4e:	4911      	ldr	r1, [pc, #68]	@ (801bf94 <_dtoa_r+0x5c4>)
 801bf50:	2000      	movs	r0, #0
 801bf52:	f7e4 f971 	bl	8000238 <__aeabi_dsub>
 801bf56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bf5a:	f7e4 fd97 	bl	8000a8c <__aeabi_dcmplt>
 801bf5e:	2800      	cmp	r0, #0
 801bf60:	f040 8095 	bne.w	801c08e <_dtoa_r+0x6be>
 801bf64:	42a6      	cmp	r6, r4
 801bf66:	f43f af50 	beq.w	801be0a <_dtoa_r+0x43a>
 801bf6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801bf6e:	4b0a      	ldr	r3, [pc, #40]	@ (801bf98 <_dtoa_r+0x5c8>)
 801bf70:	2200      	movs	r2, #0
 801bf72:	f7e4 fb19 	bl	80005a8 <__aeabi_dmul>
 801bf76:	4b08      	ldr	r3, [pc, #32]	@ (801bf98 <_dtoa_r+0x5c8>)
 801bf78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bf7c:	2200      	movs	r2, #0
 801bf7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bf82:	f7e4 fb11 	bl	80005a8 <__aeabi_dmul>
 801bf86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf8a:	e7c4      	b.n	801bf16 <_dtoa_r+0x546>
 801bf8c:	080234d8 	.word	0x080234d8
 801bf90:	080234b0 	.word	0x080234b0
 801bf94:	3ff00000 	.word	0x3ff00000
 801bf98:	40240000 	.word	0x40240000
 801bf9c:	401c0000 	.word	0x401c0000
 801bfa0:	40140000 	.word	0x40140000
 801bfa4:	3fe00000 	.word	0x3fe00000
 801bfa8:	4631      	mov	r1, r6
 801bfaa:	4628      	mov	r0, r5
 801bfac:	f7e4 fafc 	bl	80005a8 <__aeabi_dmul>
 801bfb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bfb4:	9415      	str	r4, [sp, #84]	@ 0x54
 801bfb6:	4656      	mov	r6, sl
 801bfb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bfbc:	f7e4 fda4 	bl	8000b08 <__aeabi_d2iz>
 801bfc0:	4605      	mov	r5, r0
 801bfc2:	f7e4 fa87 	bl	80004d4 <__aeabi_i2d>
 801bfc6:	4602      	mov	r2, r0
 801bfc8:	460b      	mov	r3, r1
 801bfca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bfce:	f7e4 f933 	bl	8000238 <__aeabi_dsub>
 801bfd2:	3530      	adds	r5, #48	@ 0x30
 801bfd4:	f806 5b01 	strb.w	r5, [r6], #1
 801bfd8:	4602      	mov	r2, r0
 801bfda:	460b      	mov	r3, r1
 801bfdc:	42a6      	cmp	r6, r4
 801bfde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bfe2:	f04f 0200 	mov.w	r2, #0
 801bfe6:	d124      	bne.n	801c032 <_dtoa_r+0x662>
 801bfe8:	4bac      	ldr	r3, [pc, #688]	@ (801c29c <_dtoa_r+0x8cc>)
 801bfea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801bfee:	f7e4 f925 	bl	800023c <__adddf3>
 801bff2:	4602      	mov	r2, r0
 801bff4:	460b      	mov	r3, r1
 801bff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bffa:	f7e4 fd65 	bl	8000ac8 <__aeabi_dcmpgt>
 801bffe:	2800      	cmp	r0, #0
 801c000:	d145      	bne.n	801c08e <_dtoa_r+0x6be>
 801c002:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c006:	49a5      	ldr	r1, [pc, #660]	@ (801c29c <_dtoa_r+0x8cc>)
 801c008:	2000      	movs	r0, #0
 801c00a:	f7e4 f915 	bl	8000238 <__aeabi_dsub>
 801c00e:	4602      	mov	r2, r0
 801c010:	460b      	mov	r3, r1
 801c012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c016:	f7e4 fd39 	bl	8000a8c <__aeabi_dcmplt>
 801c01a:	2800      	cmp	r0, #0
 801c01c:	f43f aef5 	beq.w	801be0a <_dtoa_r+0x43a>
 801c020:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801c022:	1e73      	subs	r3, r6, #1
 801c024:	9315      	str	r3, [sp, #84]	@ 0x54
 801c026:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c02a:	2b30      	cmp	r3, #48	@ 0x30
 801c02c:	d0f8      	beq.n	801c020 <_dtoa_r+0x650>
 801c02e:	9f04      	ldr	r7, [sp, #16]
 801c030:	e73e      	b.n	801beb0 <_dtoa_r+0x4e0>
 801c032:	4b9b      	ldr	r3, [pc, #620]	@ (801c2a0 <_dtoa_r+0x8d0>)
 801c034:	f7e4 fab8 	bl	80005a8 <__aeabi_dmul>
 801c038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c03c:	e7bc      	b.n	801bfb8 <_dtoa_r+0x5e8>
 801c03e:	d10c      	bne.n	801c05a <_dtoa_r+0x68a>
 801c040:	4b98      	ldr	r3, [pc, #608]	@ (801c2a4 <_dtoa_r+0x8d4>)
 801c042:	2200      	movs	r2, #0
 801c044:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c048:	f7e4 faae 	bl	80005a8 <__aeabi_dmul>
 801c04c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c050:	f7e4 fd30 	bl	8000ab4 <__aeabi_dcmpge>
 801c054:	2800      	cmp	r0, #0
 801c056:	f000 8157 	beq.w	801c308 <_dtoa_r+0x938>
 801c05a:	2400      	movs	r4, #0
 801c05c:	4625      	mov	r5, r4
 801c05e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c060:	43db      	mvns	r3, r3
 801c062:	9304      	str	r3, [sp, #16]
 801c064:	4656      	mov	r6, sl
 801c066:	2700      	movs	r7, #0
 801c068:	4621      	mov	r1, r4
 801c06a:	4658      	mov	r0, fp
 801c06c:	f000 fe4a 	bl	801cd04 <_Bfree>
 801c070:	2d00      	cmp	r5, #0
 801c072:	d0dc      	beq.n	801c02e <_dtoa_r+0x65e>
 801c074:	b12f      	cbz	r7, 801c082 <_dtoa_r+0x6b2>
 801c076:	42af      	cmp	r7, r5
 801c078:	d003      	beq.n	801c082 <_dtoa_r+0x6b2>
 801c07a:	4639      	mov	r1, r7
 801c07c:	4658      	mov	r0, fp
 801c07e:	f000 fe41 	bl	801cd04 <_Bfree>
 801c082:	4629      	mov	r1, r5
 801c084:	4658      	mov	r0, fp
 801c086:	f000 fe3d 	bl	801cd04 <_Bfree>
 801c08a:	e7d0      	b.n	801c02e <_dtoa_r+0x65e>
 801c08c:	9704      	str	r7, [sp, #16]
 801c08e:	4633      	mov	r3, r6
 801c090:	461e      	mov	r6, r3
 801c092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c096:	2a39      	cmp	r2, #57	@ 0x39
 801c098:	d107      	bne.n	801c0aa <_dtoa_r+0x6da>
 801c09a:	459a      	cmp	sl, r3
 801c09c:	d1f8      	bne.n	801c090 <_dtoa_r+0x6c0>
 801c09e:	9a04      	ldr	r2, [sp, #16]
 801c0a0:	3201      	adds	r2, #1
 801c0a2:	9204      	str	r2, [sp, #16]
 801c0a4:	2230      	movs	r2, #48	@ 0x30
 801c0a6:	f88a 2000 	strb.w	r2, [sl]
 801c0aa:	781a      	ldrb	r2, [r3, #0]
 801c0ac:	3201      	adds	r2, #1
 801c0ae:	701a      	strb	r2, [r3, #0]
 801c0b0:	e7bd      	b.n	801c02e <_dtoa_r+0x65e>
 801c0b2:	4b7b      	ldr	r3, [pc, #492]	@ (801c2a0 <_dtoa_r+0x8d0>)
 801c0b4:	2200      	movs	r2, #0
 801c0b6:	f7e4 fa77 	bl	80005a8 <__aeabi_dmul>
 801c0ba:	2200      	movs	r2, #0
 801c0bc:	2300      	movs	r3, #0
 801c0be:	4604      	mov	r4, r0
 801c0c0:	460d      	mov	r5, r1
 801c0c2:	f7e4 fcd9 	bl	8000a78 <__aeabi_dcmpeq>
 801c0c6:	2800      	cmp	r0, #0
 801c0c8:	f43f aebb 	beq.w	801be42 <_dtoa_r+0x472>
 801c0cc:	e6f0      	b.n	801beb0 <_dtoa_r+0x4e0>
 801c0ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c0d0:	2a00      	cmp	r2, #0
 801c0d2:	f000 80db 	beq.w	801c28c <_dtoa_r+0x8bc>
 801c0d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c0d8:	2a01      	cmp	r2, #1
 801c0da:	f300 80bf 	bgt.w	801c25c <_dtoa_r+0x88c>
 801c0de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c0e0:	2a00      	cmp	r2, #0
 801c0e2:	f000 80b7 	beq.w	801c254 <_dtoa_r+0x884>
 801c0e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801c0ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c0ec:	4646      	mov	r6, r8
 801c0ee:	9a08      	ldr	r2, [sp, #32]
 801c0f0:	2101      	movs	r1, #1
 801c0f2:	441a      	add	r2, r3
 801c0f4:	4658      	mov	r0, fp
 801c0f6:	4498      	add	r8, r3
 801c0f8:	9208      	str	r2, [sp, #32]
 801c0fa:	f000 ff01 	bl	801cf00 <__i2b>
 801c0fe:	4605      	mov	r5, r0
 801c100:	b15e      	cbz	r6, 801c11a <_dtoa_r+0x74a>
 801c102:	9b08      	ldr	r3, [sp, #32]
 801c104:	2b00      	cmp	r3, #0
 801c106:	dd08      	ble.n	801c11a <_dtoa_r+0x74a>
 801c108:	42b3      	cmp	r3, r6
 801c10a:	9a08      	ldr	r2, [sp, #32]
 801c10c:	bfa8      	it	ge
 801c10e:	4633      	movge	r3, r6
 801c110:	eba8 0803 	sub.w	r8, r8, r3
 801c114:	1af6      	subs	r6, r6, r3
 801c116:	1ad3      	subs	r3, r2, r3
 801c118:	9308      	str	r3, [sp, #32]
 801c11a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c11c:	b1f3      	cbz	r3, 801c15c <_dtoa_r+0x78c>
 801c11e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c120:	2b00      	cmp	r3, #0
 801c122:	f000 80b7 	beq.w	801c294 <_dtoa_r+0x8c4>
 801c126:	b18c      	cbz	r4, 801c14c <_dtoa_r+0x77c>
 801c128:	4629      	mov	r1, r5
 801c12a:	4622      	mov	r2, r4
 801c12c:	4658      	mov	r0, fp
 801c12e:	f000 ffa7 	bl	801d080 <__pow5mult>
 801c132:	464a      	mov	r2, r9
 801c134:	4601      	mov	r1, r0
 801c136:	4605      	mov	r5, r0
 801c138:	4658      	mov	r0, fp
 801c13a:	f000 fef7 	bl	801cf2c <__multiply>
 801c13e:	4649      	mov	r1, r9
 801c140:	9004      	str	r0, [sp, #16]
 801c142:	4658      	mov	r0, fp
 801c144:	f000 fdde 	bl	801cd04 <_Bfree>
 801c148:	9b04      	ldr	r3, [sp, #16]
 801c14a:	4699      	mov	r9, r3
 801c14c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c14e:	1b1a      	subs	r2, r3, r4
 801c150:	d004      	beq.n	801c15c <_dtoa_r+0x78c>
 801c152:	4649      	mov	r1, r9
 801c154:	4658      	mov	r0, fp
 801c156:	f000 ff93 	bl	801d080 <__pow5mult>
 801c15a:	4681      	mov	r9, r0
 801c15c:	2101      	movs	r1, #1
 801c15e:	4658      	mov	r0, fp
 801c160:	f000 fece 	bl	801cf00 <__i2b>
 801c164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c166:	4604      	mov	r4, r0
 801c168:	2b00      	cmp	r3, #0
 801c16a:	f000 81cf 	beq.w	801c50c <_dtoa_r+0xb3c>
 801c16e:	461a      	mov	r2, r3
 801c170:	4601      	mov	r1, r0
 801c172:	4658      	mov	r0, fp
 801c174:	f000 ff84 	bl	801d080 <__pow5mult>
 801c178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c17a:	2b01      	cmp	r3, #1
 801c17c:	4604      	mov	r4, r0
 801c17e:	f300 8095 	bgt.w	801c2ac <_dtoa_r+0x8dc>
 801c182:	9b02      	ldr	r3, [sp, #8]
 801c184:	2b00      	cmp	r3, #0
 801c186:	f040 8087 	bne.w	801c298 <_dtoa_r+0x8c8>
 801c18a:	9b03      	ldr	r3, [sp, #12]
 801c18c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c190:	2b00      	cmp	r3, #0
 801c192:	f040 8089 	bne.w	801c2a8 <_dtoa_r+0x8d8>
 801c196:	9b03      	ldr	r3, [sp, #12]
 801c198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c19c:	0d1b      	lsrs	r3, r3, #20
 801c19e:	051b      	lsls	r3, r3, #20
 801c1a0:	b12b      	cbz	r3, 801c1ae <_dtoa_r+0x7de>
 801c1a2:	9b08      	ldr	r3, [sp, #32]
 801c1a4:	3301      	adds	r3, #1
 801c1a6:	9308      	str	r3, [sp, #32]
 801c1a8:	f108 0801 	add.w	r8, r8, #1
 801c1ac:	2301      	movs	r3, #1
 801c1ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801c1b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	f000 81b0 	beq.w	801c518 <_dtoa_r+0xb48>
 801c1b8:	6923      	ldr	r3, [r4, #16]
 801c1ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c1be:	6918      	ldr	r0, [r3, #16]
 801c1c0:	f000 fe52 	bl	801ce68 <__hi0bits>
 801c1c4:	f1c0 0020 	rsb	r0, r0, #32
 801c1c8:	9b08      	ldr	r3, [sp, #32]
 801c1ca:	4418      	add	r0, r3
 801c1cc:	f010 001f 	ands.w	r0, r0, #31
 801c1d0:	d077      	beq.n	801c2c2 <_dtoa_r+0x8f2>
 801c1d2:	f1c0 0320 	rsb	r3, r0, #32
 801c1d6:	2b04      	cmp	r3, #4
 801c1d8:	dd6b      	ble.n	801c2b2 <_dtoa_r+0x8e2>
 801c1da:	9b08      	ldr	r3, [sp, #32]
 801c1dc:	f1c0 001c 	rsb	r0, r0, #28
 801c1e0:	4403      	add	r3, r0
 801c1e2:	4480      	add	r8, r0
 801c1e4:	4406      	add	r6, r0
 801c1e6:	9308      	str	r3, [sp, #32]
 801c1e8:	f1b8 0f00 	cmp.w	r8, #0
 801c1ec:	dd05      	ble.n	801c1fa <_dtoa_r+0x82a>
 801c1ee:	4649      	mov	r1, r9
 801c1f0:	4642      	mov	r2, r8
 801c1f2:	4658      	mov	r0, fp
 801c1f4:	f000 ff9e 	bl	801d134 <__lshift>
 801c1f8:	4681      	mov	r9, r0
 801c1fa:	9b08      	ldr	r3, [sp, #32]
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	dd05      	ble.n	801c20c <_dtoa_r+0x83c>
 801c200:	4621      	mov	r1, r4
 801c202:	461a      	mov	r2, r3
 801c204:	4658      	mov	r0, fp
 801c206:	f000 ff95 	bl	801d134 <__lshift>
 801c20a:	4604      	mov	r4, r0
 801c20c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d059      	beq.n	801c2c6 <_dtoa_r+0x8f6>
 801c212:	4621      	mov	r1, r4
 801c214:	4648      	mov	r0, r9
 801c216:	f000 fff9 	bl	801d20c <__mcmp>
 801c21a:	2800      	cmp	r0, #0
 801c21c:	da53      	bge.n	801c2c6 <_dtoa_r+0x8f6>
 801c21e:	1e7b      	subs	r3, r7, #1
 801c220:	9304      	str	r3, [sp, #16]
 801c222:	4649      	mov	r1, r9
 801c224:	2300      	movs	r3, #0
 801c226:	220a      	movs	r2, #10
 801c228:	4658      	mov	r0, fp
 801c22a:	f000 fd8d 	bl	801cd48 <__multadd>
 801c22e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c230:	4681      	mov	r9, r0
 801c232:	2b00      	cmp	r3, #0
 801c234:	f000 8172 	beq.w	801c51c <_dtoa_r+0xb4c>
 801c238:	2300      	movs	r3, #0
 801c23a:	4629      	mov	r1, r5
 801c23c:	220a      	movs	r2, #10
 801c23e:	4658      	mov	r0, fp
 801c240:	f000 fd82 	bl	801cd48 <__multadd>
 801c244:	9b00      	ldr	r3, [sp, #0]
 801c246:	2b00      	cmp	r3, #0
 801c248:	4605      	mov	r5, r0
 801c24a:	dc67      	bgt.n	801c31c <_dtoa_r+0x94c>
 801c24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c24e:	2b02      	cmp	r3, #2
 801c250:	dc41      	bgt.n	801c2d6 <_dtoa_r+0x906>
 801c252:	e063      	b.n	801c31c <_dtoa_r+0x94c>
 801c254:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c256:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801c25a:	e746      	b.n	801c0ea <_dtoa_r+0x71a>
 801c25c:	9b07      	ldr	r3, [sp, #28]
 801c25e:	1e5c      	subs	r4, r3, #1
 801c260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c262:	42a3      	cmp	r3, r4
 801c264:	bfbf      	itttt	lt
 801c266:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801c268:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801c26a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801c26c:	1ae3      	sublt	r3, r4, r3
 801c26e:	bfb4      	ite	lt
 801c270:	18d2      	addlt	r2, r2, r3
 801c272:	1b1c      	subge	r4, r3, r4
 801c274:	9b07      	ldr	r3, [sp, #28]
 801c276:	bfbc      	itt	lt
 801c278:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801c27a:	2400      	movlt	r4, #0
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	bfb5      	itete	lt
 801c280:	eba8 0603 	sublt.w	r6, r8, r3
 801c284:	9b07      	ldrge	r3, [sp, #28]
 801c286:	2300      	movlt	r3, #0
 801c288:	4646      	movge	r6, r8
 801c28a:	e730      	b.n	801c0ee <_dtoa_r+0x71e>
 801c28c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c28e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801c290:	4646      	mov	r6, r8
 801c292:	e735      	b.n	801c100 <_dtoa_r+0x730>
 801c294:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c296:	e75c      	b.n	801c152 <_dtoa_r+0x782>
 801c298:	2300      	movs	r3, #0
 801c29a:	e788      	b.n	801c1ae <_dtoa_r+0x7de>
 801c29c:	3fe00000 	.word	0x3fe00000
 801c2a0:	40240000 	.word	0x40240000
 801c2a4:	40140000 	.word	0x40140000
 801c2a8:	9b02      	ldr	r3, [sp, #8]
 801c2aa:	e780      	b.n	801c1ae <_dtoa_r+0x7de>
 801c2ac:	2300      	movs	r3, #0
 801c2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801c2b0:	e782      	b.n	801c1b8 <_dtoa_r+0x7e8>
 801c2b2:	d099      	beq.n	801c1e8 <_dtoa_r+0x818>
 801c2b4:	9a08      	ldr	r2, [sp, #32]
 801c2b6:	331c      	adds	r3, #28
 801c2b8:	441a      	add	r2, r3
 801c2ba:	4498      	add	r8, r3
 801c2bc:	441e      	add	r6, r3
 801c2be:	9208      	str	r2, [sp, #32]
 801c2c0:	e792      	b.n	801c1e8 <_dtoa_r+0x818>
 801c2c2:	4603      	mov	r3, r0
 801c2c4:	e7f6      	b.n	801c2b4 <_dtoa_r+0x8e4>
 801c2c6:	9b07      	ldr	r3, [sp, #28]
 801c2c8:	9704      	str	r7, [sp, #16]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	dc20      	bgt.n	801c310 <_dtoa_r+0x940>
 801c2ce:	9300      	str	r3, [sp, #0]
 801c2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c2d2:	2b02      	cmp	r3, #2
 801c2d4:	dd1e      	ble.n	801c314 <_dtoa_r+0x944>
 801c2d6:	9b00      	ldr	r3, [sp, #0]
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	f47f aec0 	bne.w	801c05e <_dtoa_r+0x68e>
 801c2de:	4621      	mov	r1, r4
 801c2e0:	2205      	movs	r2, #5
 801c2e2:	4658      	mov	r0, fp
 801c2e4:	f000 fd30 	bl	801cd48 <__multadd>
 801c2e8:	4601      	mov	r1, r0
 801c2ea:	4604      	mov	r4, r0
 801c2ec:	4648      	mov	r0, r9
 801c2ee:	f000 ff8d 	bl	801d20c <__mcmp>
 801c2f2:	2800      	cmp	r0, #0
 801c2f4:	f77f aeb3 	ble.w	801c05e <_dtoa_r+0x68e>
 801c2f8:	4656      	mov	r6, sl
 801c2fa:	2331      	movs	r3, #49	@ 0x31
 801c2fc:	f806 3b01 	strb.w	r3, [r6], #1
 801c300:	9b04      	ldr	r3, [sp, #16]
 801c302:	3301      	adds	r3, #1
 801c304:	9304      	str	r3, [sp, #16]
 801c306:	e6ae      	b.n	801c066 <_dtoa_r+0x696>
 801c308:	9c07      	ldr	r4, [sp, #28]
 801c30a:	9704      	str	r7, [sp, #16]
 801c30c:	4625      	mov	r5, r4
 801c30e:	e7f3      	b.n	801c2f8 <_dtoa_r+0x928>
 801c310:	9b07      	ldr	r3, [sp, #28]
 801c312:	9300      	str	r3, [sp, #0]
 801c314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c316:	2b00      	cmp	r3, #0
 801c318:	f000 8104 	beq.w	801c524 <_dtoa_r+0xb54>
 801c31c:	2e00      	cmp	r6, #0
 801c31e:	dd05      	ble.n	801c32c <_dtoa_r+0x95c>
 801c320:	4629      	mov	r1, r5
 801c322:	4632      	mov	r2, r6
 801c324:	4658      	mov	r0, fp
 801c326:	f000 ff05 	bl	801d134 <__lshift>
 801c32a:	4605      	mov	r5, r0
 801c32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d05a      	beq.n	801c3e8 <_dtoa_r+0xa18>
 801c332:	6869      	ldr	r1, [r5, #4]
 801c334:	4658      	mov	r0, fp
 801c336:	f000 fca5 	bl	801cc84 <_Balloc>
 801c33a:	4606      	mov	r6, r0
 801c33c:	b928      	cbnz	r0, 801c34a <_dtoa_r+0x97a>
 801c33e:	4b84      	ldr	r3, [pc, #528]	@ (801c550 <_dtoa_r+0xb80>)
 801c340:	4602      	mov	r2, r0
 801c342:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801c346:	f7ff bb5a 	b.w	801b9fe <_dtoa_r+0x2e>
 801c34a:	692a      	ldr	r2, [r5, #16]
 801c34c:	3202      	adds	r2, #2
 801c34e:	0092      	lsls	r2, r2, #2
 801c350:	f105 010c 	add.w	r1, r5, #12
 801c354:	300c      	adds	r0, #12
 801c356:	f7ff fa78 	bl	801b84a <memcpy>
 801c35a:	2201      	movs	r2, #1
 801c35c:	4631      	mov	r1, r6
 801c35e:	4658      	mov	r0, fp
 801c360:	f000 fee8 	bl	801d134 <__lshift>
 801c364:	f10a 0301 	add.w	r3, sl, #1
 801c368:	9307      	str	r3, [sp, #28]
 801c36a:	9b00      	ldr	r3, [sp, #0]
 801c36c:	4453      	add	r3, sl
 801c36e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c370:	9b02      	ldr	r3, [sp, #8]
 801c372:	f003 0301 	and.w	r3, r3, #1
 801c376:	462f      	mov	r7, r5
 801c378:	930a      	str	r3, [sp, #40]	@ 0x28
 801c37a:	4605      	mov	r5, r0
 801c37c:	9b07      	ldr	r3, [sp, #28]
 801c37e:	4621      	mov	r1, r4
 801c380:	3b01      	subs	r3, #1
 801c382:	4648      	mov	r0, r9
 801c384:	9300      	str	r3, [sp, #0]
 801c386:	f7ff fa9b 	bl	801b8c0 <quorem>
 801c38a:	4639      	mov	r1, r7
 801c38c:	9002      	str	r0, [sp, #8]
 801c38e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c392:	4648      	mov	r0, r9
 801c394:	f000 ff3a 	bl	801d20c <__mcmp>
 801c398:	462a      	mov	r2, r5
 801c39a:	9008      	str	r0, [sp, #32]
 801c39c:	4621      	mov	r1, r4
 801c39e:	4658      	mov	r0, fp
 801c3a0:	f000 ff50 	bl	801d244 <__mdiff>
 801c3a4:	68c2      	ldr	r2, [r0, #12]
 801c3a6:	4606      	mov	r6, r0
 801c3a8:	bb02      	cbnz	r2, 801c3ec <_dtoa_r+0xa1c>
 801c3aa:	4601      	mov	r1, r0
 801c3ac:	4648      	mov	r0, r9
 801c3ae:	f000 ff2d 	bl	801d20c <__mcmp>
 801c3b2:	4602      	mov	r2, r0
 801c3b4:	4631      	mov	r1, r6
 801c3b6:	4658      	mov	r0, fp
 801c3b8:	920e      	str	r2, [sp, #56]	@ 0x38
 801c3ba:	f000 fca3 	bl	801cd04 <_Bfree>
 801c3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c3c2:	9e07      	ldr	r6, [sp, #28]
 801c3c4:	ea43 0102 	orr.w	r1, r3, r2
 801c3c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c3ca:	4319      	orrs	r1, r3
 801c3cc:	d110      	bne.n	801c3f0 <_dtoa_r+0xa20>
 801c3ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c3d2:	d029      	beq.n	801c428 <_dtoa_r+0xa58>
 801c3d4:	9b08      	ldr	r3, [sp, #32]
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	dd02      	ble.n	801c3e0 <_dtoa_r+0xa10>
 801c3da:	9b02      	ldr	r3, [sp, #8]
 801c3dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801c3e0:	9b00      	ldr	r3, [sp, #0]
 801c3e2:	f883 8000 	strb.w	r8, [r3]
 801c3e6:	e63f      	b.n	801c068 <_dtoa_r+0x698>
 801c3e8:	4628      	mov	r0, r5
 801c3ea:	e7bb      	b.n	801c364 <_dtoa_r+0x994>
 801c3ec:	2201      	movs	r2, #1
 801c3ee:	e7e1      	b.n	801c3b4 <_dtoa_r+0x9e4>
 801c3f0:	9b08      	ldr	r3, [sp, #32]
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	db04      	blt.n	801c400 <_dtoa_r+0xa30>
 801c3f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c3f8:	430b      	orrs	r3, r1
 801c3fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c3fc:	430b      	orrs	r3, r1
 801c3fe:	d120      	bne.n	801c442 <_dtoa_r+0xa72>
 801c400:	2a00      	cmp	r2, #0
 801c402:	dded      	ble.n	801c3e0 <_dtoa_r+0xa10>
 801c404:	4649      	mov	r1, r9
 801c406:	2201      	movs	r2, #1
 801c408:	4658      	mov	r0, fp
 801c40a:	f000 fe93 	bl	801d134 <__lshift>
 801c40e:	4621      	mov	r1, r4
 801c410:	4681      	mov	r9, r0
 801c412:	f000 fefb 	bl	801d20c <__mcmp>
 801c416:	2800      	cmp	r0, #0
 801c418:	dc03      	bgt.n	801c422 <_dtoa_r+0xa52>
 801c41a:	d1e1      	bne.n	801c3e0 <_dtoa_r+0xa10>
 801c41c:	f018 0f01 	tst.w	r8, #1
 801c420:	d0de      	beq.n	801c3e0 <_dtoa_r+0xa10>
 801c422:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c426:	d1d8      	bne.n	801c3da <_dtoa_r+0xa0a>
 801c428:	9a00      	ldr	r2, [sp, #0]
 801c42a:	2339      	movs	r3, #57	@ 0x39
 801c42c:	7013      	strb	r3, [r2, #0]
 801c42e:	4633      	mov	r3, r6
 801c430:	461e      	mov	r6, r3
 801c432:	3b01      	subs	r3, #1
 801c434:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c438:	2a39      	cmp	r2, #57	@ 0x39
 801c43a:	d052      	beq.n	801c4e2 <_dtoa_r+0xb12>
 801c43c:	3201      	adds	r2, #1
 801c43e:	701a      	strb	r2, [r3, #0]
 801c440:	e612      	b.n	801c068 <_dtoa_r+0x698>
 801c442:	2a00      	cmp	r2, #0
 801c444:	dd07      	ble.n	801c456 <_dtoa_r+0xa86>
 801c446:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c44a:	d0ed      	beq.n	801c428 <_dtoa_r+0xa58>
 801c44c:	9a00      	ldr	r2, [sp, #0]
 801c44e:	f108 0301 	add.w	r3, r8, #1
 801c452:	7013      	strb	r3, [r2, #0]
 801c454:	e608      	b.n	801c068 <_dtoa_r+0x698>
 801c456:	9b07      	ldr	r3, [sp, #28]
 801c458:	9a07      	ldr	r2, [sp, #28]
 801c45a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801c45e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c460:	4293      	cmp	r3, r2
 801c462:	d028      	beq.n	801c4b6 <_dtoa_r+0xae6>
 801c464:	4649      	mov	r1, r9
 801c466:	2300      	movs	r3, #0
 801c468:	220a      	movs	r2, #10
 801c46a:	4658      	mov	r0, fp
 801c46c:	f000 fc6c 	bl	801cd48 <__multadd>
 801c470:	42af      	cmp	r7, r5
 801c472:	4681      	mov	r9, r0
 801c474:	f04f 0300 	mov.w	r3, #0
 801c478:	f04f 020a 	mov.w	r2, #10
 801c47c:	4639      	mov	r1, r7
 801c47e:	4658      	mov	r0, fp
 801c480:	d107      	bne.n	801c492 <_dtoa_r+0xac2>
 801c482:	f000 fc61 	bl	801cd48 <__multadd>
 801c486:	4607      	mov	r7, r0
 801c488:	4605      	mov	r5, r0
 801c48a:	9b07      	ldr	r3, [sp, #28]
 801c48c:	3301      	adds	r3, #1
 801c48e:	9307      	str	r3, [sp, #28]
 801c490:	e774      	b.n	801c37c <_dtoa_r+0x9ac>
 801c492:	f000 fc59 	bl	801cd48 <__multadd>
 801c496:	4629      	mov	r1, r5
 801c498:	4607      	mov	r7, r0
 801c49a:	2300      	movs	r3, #0
 801c49c:	220a      	movs	r2, #10
 801c49e:	4658      	mov	r0, fp
 801c4a0:	f000 fc52 	bl	801cd48 <__multadd>
 801c4a4:	4605      	mov	r5, r0
 801c4a6:	e7f0      	b.n	801c48a <_dtoa_r+0xaba>
 801c4a8:	9b00      	ldr	r3, [sp, #0]
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	bfcc      	ite	gt
 801c4ae:	461e      	movgt	r6, r3
 801c4b0:	2601      	movle	r6, #1
 801c4b2:	4456      	add	r6, sl
 801c4b4:	2700      	movs	r7, #0
 801c4b6:	4649      	mov	r1, r9
 801c4b8:	2201      	movs	r2, #1
 801c4ba:	4658      	mov	r0, fp
 801c4bc:	f000 fe3a 	bl	801d134 <__lshift>
 801c4c0:	4621      	mov	r1, r4
 801c4c2:	4681      	mov	r9, r0
 801c4c4:	f000 fea2 	bl	801d20c <__mcmp>
 801c4c8:	2800      	cmp	r0, #0
 801c4ca:	dcb0      	bgt.n	801c42e <_dtoa_r+0xa5e>
 801c4cc:	d102      	bne.n	801c4d4 <_dtoa_r+0xb04>
 801c4ce:	f018 0f01 	tst.w	r8, #1
 801c4d2:	d1ac      	bne.n	801c42e <_dtoa_r+0xa5e>
 801c4d4:	4633      	mov	r3, r6
 801c4d6:	461e      	mov	r6, r3
 801c4d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c4dc:	2a30      	cmp	r2, #48	@ 0x30
 801c4de:	d0fa      	beq.n	801c4d6 <_dtoa_r+0xb06>
 801c4e0:	e5c2      	b.n	801c068 <_dtoa_r+0x698>
 801c4e2:	459a      	cmp	sl, r3
 801c4e4:	d1a4      	bne.n	801c430 <_dtoa_r+0xa60>
 801c4e6:	9b04      	ldr	r3, [sp, #16]
 801c4e8:	3301      	adds	r3, #1
 801c4ea:	9304      	str	r3, [sp, #16]
 801c4ec:	2331      	movs	r3, #49	@ 0x31
 801c4ee:	f88a 3000 	strb.w	r3, [sl]
 801c4f2:	e5b9      	b.n	801c068 <_dtoa_r+0x698>
 801c4f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c4f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801c554 <_dtoa_r+0xb84>
 801c4fa:	b11b      	cbz	r3, 801c504 <_dtoa_r+0xb34>
 801c4fc:	f10a 0308 	add.w	r3, sl, #8
 801c500:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c502:	6013      	str	r3, [r2, #0]
 801c504:	4650      	mov	r0, sl
 801c506:	b019      	add	sp, #100	@ 0x64
 801c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c50e:	2b01      	cmp	r3, #1
 801c510:	f77f ae37 	ble.w	801c182 <_dtoa_r+0x7b2>
 801c514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c516:	930a      	str	r3, [sp, #40]	@ 0x28
 801c518:	2001      	movs	r0, #1
 801c51a:	e655      	b.n	801c1c8 <_dtoa_r+0x7f8>
 801c51c:	9b00      	ldr	r3, [sp, #0]
 801c51e:	2b00      	cmp	r3, #0
 801c520:	f77f aed6 	ble.w	801c2d0 <_dtoa_r+0x900>
 801c524:	4656      	mov	r6, sl
 801c526:	4621      	mov	r1, r4
 801c528:	4648      	mov	r0, r9
 801c52a:	f7ff f9c9 	bl	801b8c0 <quorem>
 801c52e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c532:	f806 8b01 	strb.w	r8, [r6], #1
 801c536:	9b00      	ldr	r3, [sp, #0]
 801c538:	eba6 020a 	sub.w	r2, r6, sl
 801c53c:	4293      	cmp	r3, r2
 801c53e:	ddb3      	ble.n	801c4a8 <_dtoa_r+0xad8>
 801c540:	4649      	mov	r1, r9
 801c542:	2300      	movs	r3, #0
 801c544:	220a      	movs	r2, #10
 801c546:	4658      	mov	r0, fp
 801c548:	f000 fbfe 	bl	801cd48 <__multadd>
 801c54c:	4681      	mov	r9, r0
 801c54e:	e7ea      	b.n	801c526 <_dtoa_r+0xb56>
 801c550:	080233d4 	.word	0x080233d4
 801c554:	0802336f 	.word	0x0802336f

0801c558 <_free_r>:
 801c558:	b538      	push	{r3, r4, r5, lr}
 801c55a:	4605      	mov	r5, r0
 801c55c:	2900      	cmp	r1, #0
 801c55e:	d041      	beq.n	801c5e4 <_free_r+0x8c>
 801c560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c564:	1f0c      	subs	r4, r1, #4
 801c566:	2b00      	cmp	r3, #0
 801c568:	bfb8      	it	lt
 801c56a:	18e4      	addlt	r4, r4, r3
 801c56c:	f7fd f98c 	bl	8019888 <__malloc_lock>
 801c570:	4a1d      	ldr	r2, [pc, #116]	@ (801c5e8 <_free_r+0x90>)
 801c572:	6813      	ldr	r3, [r2, #0]
 801c574:	b933      	cbnz	r3, 801c584 <_free_r+0x2c>
 801c576:	6063      	str	r3, [r4, #4]
 801c578:	6014      	str	r4, [r2, #0]
 801c57a:	4628      	mov	r0, r5
 801c57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c580:	f7fd b988 	b.w	8019894 <__malloc_unlock>
 801c584:	42a3      	cmp	r3, r4
 801c586:	d908      	bls.n	801c59a <_free_r+0x42>
 801c588:	6820      	ldr	r0, [r4, #0]
 801c58a:	1821      	adds	r1, r4, r0
 801c58c:	428b      	cmp	r3, r1
 801c58e:	bf01      	itttt	eq
 801c590:	6819      	ldreq	r1, [r3, #0]
 801c592:	685b      	ldreq	r3, [r3, #4]
 801c594:	1809      	addeq	r1, r1, r0
 801c596:	6021      	streq	r1, [r4, #0]
 801c598:	e7ed      	b.n	801c576 <_free_r+0x1e>
 801c59a:	461a      	mov	r2, r3
 801c59c:	685b      	ldr	r3, [r3, #4]
 801c59e:	b10b      	cbz	r3, 801c5a4 <_free_r+0x4c>
 801c5a0:	42a3      	cmp	r3, r4
 801c5a2:	d9fa      	bls.n	801c59a <_free_r+0x42>
 801c5a4:	6811      	ldr	r1, [r2, #0]
 801c5a6:	1850      	adds	r0, r2, r1
 801c5a8:	42a0      	cmp	r0, r4
 801c5aa:	d10b      	bne.n	801c5c4 <_free_r+0x6c>
 801c5ac:	6820      	ldr	r0, [r4, #0]
 801c5ae:	4401      	add	r1, r0
 801c5b0:	1850      	adds	r0, r2, r1
 801c5b2:	4283      	cmp	r3, r0
 801c5b4:	6011      	str	r1, [r2, #0]
 801c5b6:	d1e0      	bne.n	801c57a <_free_r+0x22>
 801c5b8:	6818      	ldr	r0, [r3, #0]
 801c5ba:	685b      	ldr	r3, [r3, #4]
 801c5bc:	6053      	str	r3, [r2, #4]
 801c5be:	4408      	add	r0, r1
 801c5c0:	6010      	str	r0, [r2, #0]
 801c5c2:	e7da      	b.n	801c57a <_free_r+0x22>
 801c5c4:	d902      	bls.n	801c5cc <_free_r+0x74>
 801c5c6:	230c      	movs	r3, #12
 801c5c8:	602b      	str	r3, [r5, #0]
 801c5ca:	e7d6      	b.n	801c57a <_free_r+0x22>
 801c5cc:	6820      	ldr	r0, [r4, #0]
 801c5ce:	1821      	adds	r1, r4, r0
 801c5d0:	428b      	cmp	r3, r1
 801c5d2:	bf04      	itt	eq
 801c5d4:	6819      	ldreq	r1, [r3, #0]
 801c5d6:	685b      	ldreq	r3, [r3, #4]
 801c5d8:	6063      	str	r3, [r4, #4]
 801c5da:	bf04      	itt	eq
 801c5dc:	1809      	addeq	r1, r1, r0
 801c5de:	6021      	streq	r1, [r4, #0]
 801c5e0:	6054      	str	r4, [r2, #4]
 801c5e2:	e7ca      	b.n	801c57a <_free_r+0x22>
 801c5e4:	bd38      	pop	{r3, r4, r5, pc}
 801c5e6:	bf00      	nop
 801c5e8:	20002f04 	.word	0x20002f04

0801c5ec <rshift>:
 801c5ec:	6903      	ldr	r3, [r0, #16]
 801c5ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c5f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c5f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c5fa:	f100 0414 	add.w	r4, r0, #20
 801c5fe:	dd45      	ble.n	801c68c <rshift+0xa0>
 801c600:	f011 011f 	ands.w	r1, r1, #31
 801c604:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c608:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c60c:	d10c      	bne.n	801c628 <rshift+0x3c>
 801c60e:	f100 0710 	add.w	r7, r0, #16
 801c612:	4629      	mov	r1, r5
 801c614:	42b1      	cmp	r1, r6
 801c616:	d334      	bcc.n	801c682 <rshift+0x96>
 801c618:	1a9b      	subs	r3, r3, r2
 801c61a:	009b      	lsls	r3, r3, #2
 801c61c:	1eea      	subs	r2, r5, #3
 801c61e:	4296      	cmp	r6, r2
 801c620:	bf38      	it	cc
 801c622:	2300      	movcc	r3, #0
 801c624:	4423      	add	r3, r4
 801c626:	e015      	b.n	801c654 <rshift+0x68>
 801c628:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c62c:	f1c1 0820 	rsb	r8, r1, #32
 801c630:	40cf      	lsrs	r7, r1
 801c632:	f105 0e04 	add.w	lr, r5, #4
 801c636:	46a1      	mov	r9, r4
 801c638:	4576      	cmp	r6, lr
 801c63a:	46f4      	mov	ip, lr
 801c63c:	d815      	bhi.n	801c66a <rshift+0x7e>
 801c63e:	1a9a      	subs	r2, r3, r2
 801c640:	0092      	lsls	r2, r2, #2
 801c642:	3a04      	subs	r2, #4
 801c644:	3501      	adds	r5, #1
 801c646:	42ae      	cmp	r6, r5
 801c648:	bf38      	it	cc
 801c64a:	2200      	movcc	r2, #0
 801c64c:	18a3      	adds	r3, r4, r2
 801c64e:	50a7      	str	r7, [r4, r2]
 801c650:	b107      	cbz	r7, 801c654 <rshift+0x68>
 801c652:	3304      	adds	r3, #4
 801c654:	1b1a      	subs	r2, r3, r4
 801c656:	42a3      	cmp	r3, r4
 801c658:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c65c:	bf08      	it	eq
 801c65e:	2300      	moveq	r3, #0
 801c660:	6102      	str	r2, [r0, #16]
 801c662:	bf08      	it	eq
 801c664:	6143      	streq	r3, [r0, #20]
 801c666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c66a:	f8dc c000 	ldr.w	ip, [ip]
 801c66e:	fa0c fc08 	lsl.w	ip, ip, r8
 801c672:	ea4c 0707 	orr.w	r7, ip, r7
 801c676:	f849 7b04 	str.w	r7, [r9], #4
 801c67a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c67e:	40cf      	lsrs	r7, r1
 801c680:	e7da      	b.n	801c638 <rshift+0x4c>
 801c682:	f851 cb04 	ldr.w	ip, [r1], #4
 801c686:	f847 cf04 	str.w	ip, [r7, #4]!
 801c68a:	e7c3      	b.n	801c614 <rshift+0x28>
 801c68c:	4623      	mov	r3, r4
 801c68e:	e7e1      	b.n	801c654 <rshift+0x68>

0801c690 <__hexdig_fun>:
 801c690:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801c694:	2b09      	cmp	r3, #9
 801c696:	d802      	bhi.n	801c69e <__hexdig_fun+0xe>
 801c698:	3820      	subs	r0, #32
 801c69a:	b2c0      	uxtb	r0, r0
 801c69c:	4770      	bx	lr
 801c69e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801c6a2:	2b05      	cmp	r3, #5
 801c6a4:	d801      	bhi.n	801c6aa <__hexdig_fun+0x1a>
 801c6a6:	3847      	subs	r0, #71	@ 0x47
 801c6a8:	e7f7      	b.n	801c69a <__hexdig_fun+0xa>
 801c6aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801c6ae:	2b05      	cmp	r3, #5
 801c6b0:	d801      	bhi.n	801c6b6 <__hexdig_fun+0x26>
 801c6b2:	3827      	subs	r0, #39	@ 0x27
 801c6b4:	e7f1      	b.n	801c69a <__hexdig_fun+0xa>
 801c6b6:	2000      	movs	r0, #0
 801c6b8:	4770      	bx	lr
	...

0801c6bc <__gethex>:
 801c6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6c0:	b085      	sub	sp, #20
 801c6c2:	468a      	mov	sl, r1
 801c6c4:	9302      	str	r3, [sp, #8]
 801c6c6:	680b      	ldr	r3, [r1, #0]
 801c6c8:	9001      	str	r0, [sp, #4]
 801c6ca:	4690      	mov	r8, r2
 801c6cc:	1c9c      	adds	r4, r3, #2
 801c6ce:	46a1      	mov	r9, r4
 801c6d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 801c6d4:	2830      	cmp	r0, #48	@ 0x30
 801c6d6:	d0fa      	beq.n	801c6ce <__gethex+0x12>
 801c6d8:	eba9 0303 	sub.w	r3, r9, r3
 801c6dc:	f1a3 0b02 	sub.w	fp, r3, #2
 801c6e0:	f7ff ffd6 	bl	801c690 <__hexdig_fun>
 801c6e4:	4605      	mov	r5, r0
 801c6e6:	2800      	cmp	r0, #0
 801c6e8:	d168      	bne.n	801c7bc <__gethex+0x100>
 801c6ea:	49a0      	ldr	r1, [pc, #640]	@ (801c96c <__gethex+0x2b0>)
 801c6ec:	2201      	movs	r2, #1
 801c6ee:	4648      	mov	r0, r9
 801c6f0:	f7fe ff97 	bl	801b622 <strncmp>
 801c6f4:	4607      	mov	r7, r0
 801c6f6:	2800      	cmp	r0, #0
 801c6f8:	d167      	bne.n	801c7ca <__gethex+0x10e>
 801c6fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 801c6fe:	4626      	mov	r6, r4
 801c700:	f7ff ffc6 	bl	801c690 <__hexdig_fun>
 801c704:	2800      	cmp	r0, #0
 801c706:	d062      	beq.n	801c7ce <__gethex+0x112>
 801c708:	4623      	mov	r3, r4
 801c70a:	7818      	ldrb	r0, [r3, #0]
 801c70c:	2830      	cmp	r0, #48	@ 0x30
 801c70e:	4699      	mov	r9, r3
 801c710:	f103 0301 	add.w	r3, r3, #1
 801c714:	d0f9      	beq.n	801c70a <__gethex+0x4e>
 801c716:	f7ff ffbb 	bl	801c690 <__hexdig_fun>
 801c71a:	fab0 f580 	clz	r5, r0
 801c71e:	096d      	lsrs	r5, r5, #5
 801c720:	f04f 0b01 	mov.w	fp, #1
 801c724:	464a      	mov	r2, r9
 801c726:	4616      	mov	r6, r2
 801c728:	3201      	adds	r2, #1
 801c72a:	7830      	ldrb	r0, [r6, #0]
 801c72c:	f7ff ffb0 	bl	801c690 <__hexdig_fun>
 801c730:	2800      	cmp	r0, #0
 801c732:	d1f8      	bne.n	801c726 <__gethex+0x6a>
 801c734:	498d      	ldr	r1, [pc, #564]	@ (801c96c <__gethex+0x2b0>)
 801c736:	2201      	movs	r2, #1
 801c738:	4630      	mov	r0, r6
 801c73a:	f7fe ff72 	bl	801b622 <strncmp>
 801c73e:	2800      	cmp	r0, #0
 801c740:	d13f      	bne.n	801c7c2 <__gethex+0x106>
 801c742:	b944      	cbnz	r4, 801c756 <__gethex+0x9a>
 801c744:	1c74      	adds	r4, r6, #1
 801c746:	4622      	mov	r2, r4
 801c748:	4616      	mov	r6, r2
 801c74a:	3201      	adds	r2, #1
 801c74c:	7830      	ldrb	r0, [r6, #0]
 801c74e:	f7ff ff9f 	bl	801c690 <__hexdig_fun>
 801c752:	2800      	cmp	r0, #0
 801c754:	d1f8      	bne.n	801c748 <__gethex+0x8c>
 801c756:	1ba4      	subs	r4, r4, r6
 801c758:	00a7      	lsls	r7, r4, #2
 801c75a:	7833      	ldrb	r3, [r6, #0]
 801c75c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801c760:	2b50      	cmp	r3, #80	@ 0x50
 801c762:	d13e      	bne.n	801c7e2 <__gethex+0x126>
 801c764:	7873      	ldrb	r3, [r6, #1]
 801c766:	2b2b      	cmp	r3, #43	@ 0x2b
 801c768:	d033      	beq.n	801c7d2 <__gethex+0x116>
 801c76a:	2b2d      	cmp	r3, #45	@ 0x2d
 801c76c:	d034      	beq.n	801c7d8 <__gethex+0x11c>
 801c76e:	1c71      	adds	r1, r6, #1
 801c770:	2400      	movs	r4, #0
 801c772:	7808      	ldrb	r0, [r1, #0]
 801c774:	f7ff ff8c 	bl	801c690 <__hexdig_fun>
 801c778:	1e43      	subs	r3, r0, #1
 801c77a:	b2db      	uxtb	r3, r3
 801c77c:	2b18      	cmp	r3, #24
 801c77e:	d830      	bhi.n	801c7e2 <__gethex+0x126>
 801c780:	f1a0 0210 	sub.w	r2, r0, #16
 801c784:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c788:	f7ff ff82 	bl	801c690 <__hexdig_fun>
 801c78c:	f100 3cff 	add.w	ip, r0, #4294967295
 801c790:	fa5f fc8c 	uxtb.w	ip, ip
 801c794:	f1bc 0f18 	cmp.w	ip, #24
 801c798:	f04f 030a 	mov.w	r3, #10
 801c79c:	d91e      	bls.n	801c7dc <__gethex+0x120>
 801c79e:	b104      	cbz	r4, 801c7a2 <__gethex+0xe6>
 801c7a0:	4252      	negs	r2, r2
 801c7a2:	4417      	add	r7, r2
 801c7a4:	f8ca 1000 	str.w	r1, [sl]
 801c7a8:	b1ed      	cbz	r5, 801c7e6 <__gethex+0x12a>
 801c7aa:	f1bb 0f00 	cmp.w	fp, #0
 801c7ae:	bf0c      	ite	eq
 801c7b0:	2506      	moveq	r5, #6
 801c7b2:	2500      	movne	r5, #0
 801c7b4:	4628      	mov	r0, r5
 801c7b6:	b005      	add	sp, #20
 801c7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7bc:	2500      	movs	r5, #0
 801c7be:	462c      	mov	r4, r5
 801c7c0:	e7b0      	b.n	801c724 <__gethex+0x68>
 801c7c2:	2c00      	cmp	r4, #0
 801c7c4:	d1c7      	bne.n	801c756 <__gethex+0x9a>
 801c7c6:	4627      	mov	r7, r4
 801c7c8:	e7c7      	b.n	801c75a <__gethex+0x9e>
 801c7ca:	464e      	mov	r6, r9
 801c7cc:	462f      	mov	r7, r5
 801c7ce:	2501      	movs	r5, #1
 801c7d0:	e7c3      	b.n	801c75a <__gethex+0x9e>
 801c7d2:	2400      	movs	r4, #0
 801c7d4:	1cb1      	adds	r1, r6, #2
 801c7d6:	e7cc      	b.n	801c772 <__gethex+0xb6>
 801c7d8:	2401      	movs	r4, #1
 801c7da:	e7fb      	b.n	801c7d4 <__gethex+0x118>
 801c7dc:	fb03 0002 	mla	r0, r3, r2, r0
 801c7e0:	e7ce      	b.n	801c780 <__gethex+0xc4>
 801c7e2:	4631      	mov	r1, r6
 801c7e4:	e7de      	b.n	801c7a4 <__gethex+0xe8>
 801c7e6:	eba6 0309 	sub.w	r3, r6, r9
 801c7ea:	3b01      	subs	r3, #1
 801c7ec:	4629      	mov	r1, r5
 801c7ee:	2b07      	cmp	r3, #7
 801c7f0:	dc0a      	bgt.n	801c808 <__gethex+0x14c>
 801c7f2:	9801      	ldr	r0, [sp, #4]
 801c7f4:	f000 fa46 	bl	801cc84 <_Balloc>
 801c7f8:	4604      	mov	r4, r0
 801c7fa:	b940      	cbnz	r0, 801c80e <__gethex+0x152>
 801c7fc:	4b5c      	ldr	r3, [pc, #368]	@ (801c970 <__gethex+0x2b4>)
 801c7fe:	4602      	mov	r2, r0
 801c800:	21e4      	movs	r1, #228	@ 0xe4
 801c802:	485c      	ldr	r0, [pc, #368]	@ (801c974 <__gethex+0x2b8>)
 801c804:	f7ff f83e 	bl	801b884 <__assert_func>
 801c808:	3101      	adds	r1, #1
 801c80a:	105b      	asrs	r3, r3, #1
 801c80c:	e7ef      	b.n	801c7ee <__gethex+0x132>
 801c80e:	f100 0a14 	add.w	sl, r0, #20
 801c812:	2300      	movs	r3, #0
 801c814:	4655      	mov	r5, sl
 801c816:	469b      	mov	fp, r3
 801c818:	45b1      	cmp	r9, r6
 801c81a:	d337      	bcc.n	801c88c <__gethex+0x1d0>
 801c81c:	f845 bb04 	str.w	fp, [r5], #4
 801c820:	eba5 050a 	sub.w	r5, r5, sl
 801c824:	10ad      	asrs	r5, r5, #2
 801c826:	6125      	str	r5, [r4, #16]
 801c828:	4658      	mov	r0, fp
 801c82a:	f000 fb1d 	bl	801ce68 <__hi0bits>
 801c82e:	016d      	lsls	r5, r5, #5
 801c830:	f8d8 6000 	ldr.w	r6, [r8]
 801c834:	1a2d      	subs	r5, r5, r0
 801c836:	42b5      	cmp	r5, r6
 801c838:	dd54      	ble.n	801c8e4 <__gethex+0x228>
 801c83a:	1bad      	subs	r5, r5, r6
 801c83c:	4629      	mov	r1, r5
 801c83e:	4620      	mov	r0, r4
 801c840:	f000 feb1 	bl	801d5a6 <__any_on>
 801c844:	4681      	mov	r9, r0
 801c846:	b178      	cbz	r0, 801c868 <__gethex+0x1ac>
 801c848:	1e6b      	subs	r3, r5, #1
 801c84a:	1159      	asrs	r1, r3, #5
 801c84c:	f003 021f 	and.w	r2, r3, #31
 801c850:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801c854:	f04f 0901 	mov.w	r9, #1
 801c858:	fa09 f202 	lsl.w	r2, r9, r2
 801c85c:	420a      	tst	r2, r1
 801c85e:	d003      	beq.n	801c868 <__gethex+0x1ac>
 801c860:	454b      	cmp	r3, r9
 801c862:	dc36      	bgt.n	801c8d2 <__gethex+0x216>
 801c864:	f04f 0902 	mov.w	r9, #2
 801c868:	4629      	mov	r1, r5
 801c86a:	4620      	mov	r0, r4
 801c86c:	f7ff febe 	bl	801c5ec <rshift>
 801c870:	442f      	add	r7, r5
 801c872:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c876:	42bb      	cmp	r3, r7
 801c878:	da42      	bge.n	801c900 <__gethex+0x244>
 801c87a:	9801      	ldr	r0, [sp, #4]
 801c87c:	4621      	mov	r1, r4
 801c87e:	f000 fa41 	bl	801cd04 <_Bfree>
 801c882:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c884:	2300      	movs	r3, #0
 801c886:	6013      	str	r3, [r2, #0]
 801c888:	25a3      	movs	r5, #163	@ 0xa3
 801c88a:	e793      	b.n	801c7b4 <__gethex+0xf8>
 801c88c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801c890:	2a2e      	cmp	r2, #46	@ 0x2e
 801c892:	d012      	beq.n	801c8ba <__gethex+0x1fe>
 801c894:	2b20      	cmp	r3, #32
 801c896:	d104      	bne.n	801c8a2 <__gethex+0x1e6>
 801c898:	f845 bb04 	str.w	fp, [r5], #4
 801c89c:	f04f 0b00 	mov.w	fp, #0
 801c8a0:	465b      	mov	r3, fp
 801c8a2:	7830      	ldrb	r0, [r6, #0]
 801c8a4:	9303      	str	r3, [sp, #12]
 801c8a6:	f7ff fef3 	bl	801c690 <__hexdig_fun>
 801c8aa:	9b03      	ldr	r3, [sp, #12]
 801c8ac:	f000 000f 	and.w	r0, r0, #15
 801c8b0:	4098      	lsls	r0, r3
 801c8b2:	ea4b 0b00 	orr.w	fp, fp, r0
 801c8b6:	3304      	adds	r3, #4
 801c8b8:	e7ae      	b.n	801c818 <__gethex+0x15c>
 801c8ba:	45b1      	cmp	r9, r6
 801c8bc:	d8ea      	bhi.n	801c894 <__gethex+0x1d8>
 801c8be:	492b      	ldr	r1, [pc, #172]	@ (801c96c <__gethex+0x2b0>)
 801c8c0:	9303      	str	r3, [sp, #12]
 801c8c2:	2201      	movs	r2, #1
 801c8c4:	4630      	mov	r0, r6
 801c8c6:	f7fe feac 	bl	801b622 <strncmp>
 801c8ca:	9b03      	ldr	r3, [sp, #12]
 801c8cc:	2800      	cmp	r0, #0
 801c8ce:	d1e1      	bne.n	801c894 <__gethex+0x1d8>
 801c8d0:	e7a2      	b.n	801c818 <__gethex+0x15c>
 801c8d2:	1ea9      	subs	r1, r5, #2
 801c8d4:	4620      	mov	r0, r4
 801c8d6:	f000 fe66 	bl	801d5a6 <__any_on>
 801c8da:	2800      	cmp	r0, #0
 801c8dc:	d0c2      	beq.n	801c864 <__gethex+0x1a8>
 801c8de:	f04f 0903 	mov.w	r9, #3
 801c8e2:	e7c1      	b.n	801c868 <__gethex+0x1ac>
 801c8e4:	da09      	bge.n	801c8fa <__gethex+0x23e>
 801c8e6:	1b75      	subs	r5, r6, r5
 801c8e8:	4621      	mov	r1, r4
 801c8ea:	9801      	ldr	r0, [sp, #4]
 801c8ec:	462a      	mov	r2, r5
 801c8ee:	f000 fc21 	bl	801d134 <__lshift>
 801c8f2:	1b7f      	subs	r7, r7, r5
 801c8f4:	4604      	mov	r4, r0
 801c8f6:	f100 0a14 	add.w	sl, r0, #20
 801c8fa:	f04f 0900 	mov.w	r9, #0
 801c8fe:	e7b8      	b.n	801c872 <__gethex+0x1b6>
 801c900:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c904:	42bd      	cmp	r5, r7
 801c906:	dd6f      	ble.n	801c9e8 <__gethex+0x32c>
 801c908:	1bed      	subs	r5, r5, r7
 801c90a:	42ae      	cmp	r6, r5
 801c90c:	dc34      	bgt.n	801c978 <__gethex+0x2bc>
 801c90e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c912:	2b02      	cmp	r3, #2
 801c914:	d022      	beq.n	801c95c <__gethex+0x2a0>
 801c916:	2b03      	cmp	r3, #3
 801c918:	d024      	beq.n	801c964 <__gethex+0x2a8>
 801c91a:	2b01      	cmp	r3, #1
 801c91c:	d115      	bne.n	801c94a <__gethex+0x28e>
 801c91e:	42ae      	cmp	r6, r5
 801c920:	d113      	bne.n	801c94a <__gethex+0x28e>
 801c922:	2e01      	cmp	r6, #1
 801c924:	d10b      	bne.n	801c93e <__gethex+0x282>
 801c926:	9a02      	ldr	r2, [sp, #8]
 801c928:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c92c:	6013      	str	r3, [r2, #0]
 801c92e:	2301      	movs	r3, #1
 801c930:	6123      	str	r3, [r4, #16]
 801c932:	f8ca 3000 	str.w	r3, [sl]
 801c936:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c938:	2562      	movs	r5, #98	@ 0x62
 801c93a:	601c      	str	r4, [r3, #0]
 801c93c:	e73a      	b.n	801c7b4 <__gethex+0xf8>
 801c93e:	1e71      	subs	r1, r6, #1
 801c940:	4620      	mov	r0, r4
 801c942:	f000 fe30 	bl	801d5a6 <__any_on>
 801c946:	2800      	cmp	r0, #0
 801c948:	d1ed      	bne.n	801c926 <__gethex+0x26a>
 801c94a:	9801      	ldr	r0, [sp, #4]
 801c94c:	4621      	mov	r1, r4
 801c94e:	f000 f9d9 	bl	801cd04 <_Bfree>
 801c952:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c954:	2300      	movs	r3, #0
 801c956:	6013      	str	r3, [r2, #0]
 801c958:	2550      	movs	r5, #80	@ 0x50
 801c95a:	e72b      	b.n	801c7b4 <__gethex+0xf8>
 801c95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d1f3      	bne.n	801c94a <__gethex+0x28e>
 801c962:	e7e0      	b.n	801c926 <__gethex+0x26a>
 801c964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c966:	2b00      	cmp	r3, #0
 801c968:	d1dd      	bne.n	801c926 <__gethex+0x26a>
 801c96a:	e7ee      	b.n	801c94a <__gethex+0x28e>
 801c96c:	08023128 	.word	0x08023128
 801c970:	080233d4 	.word	0x080233d4
 801c974:	080233e5 	.word	0x080233e5
 801c978:	1e6f      	subs	r7, r5, #1
 801c97a:	f1b9 0f00 	cmp.w	r9, #0
 801c97e:	d130      	bne.n	801c9e2 <__gethex+0x326>
 801c980:	b127      	cbz	r7, 801c98c <__gethex+0x2d0>
 801c982:	4639      	mov	r1, r7
 801c984:	4620      	mov	r0, r4
 801c986:	f000 fe0e 	bl	801d5a6 <__any_on>
 801c98a:	4681      	mov	r9, r0
 801c98c:	117a      	asrs	r2, r7, #5
 801c98e:	2301      	movs	r3, #1
 801c990:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801c994:	f007 071f 	and.w	r7, r7, #31
 801c998:	40bb      	lsls	r3, r7
 801c99a:	4213      	tst	r3, r2
 801c99c:	4629      	mov	r1, r5
 801c99e:	4620      	mov	r0, r4
 801c9a0:	bf18      	it	ne
 801c9a2:	f049 0902 	orrne.w	r9, r9, #2
 801c9a6:	f7ff fe21 	bl	801c5ec <rshift>
 801c9aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801c9ae:	1b76      	subs	r6, r6, r5
 801c9b0:	2502      	movs	r5, #2
 801c9b2:	f1b9 0f00 	cmp.w	r9, #0
 801c9b6:	d047      	beq.n	801ca48 <__gethex+0x38c>
 801c9b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c9bc:	2b02      	cmp	r3, #2
 801c9be:	d015      	beq.n	801c9ec <__gethex+0x330>
 801c9c0:	2b03      	cmp	r3, #3
 801c9c2:	d017      	beq.n	801c9f4 <__gethex+0x338>
 801c9c4:	2b01      	cmp	r3, #1
 801c9c6:	d109      	bne.n	801c9dc <__gethex+0x320>
 801c9c8:	f019 0f02 	tst.w	r9, #2
 801c9cc:	d006      	beq.n	801c9dc <__gethex+0x320>
 801c9ce:	f8da 3000 	ldr.w	r3, [sl]
 801c9d2:	ea49 0903 	orr.w	r9, r9, r3
 801c9d6:	f019 0f01 	tst.w	r9, #1
 801c9da:	d10e      	bne.n	801c9fa <__gethex+0x33e>
 801c9dc:	f045 0510 	orr.w	r5, r5, #16
 801c9e0:	e032      	b.n	801ca48 <__gethex+0x38c>
 801c9e2:	f04f 0901 	mov.w	r9, #1
 801c9e6:	e7d1      	b.n	801c98c <__gethex+0x2d0>
 801c9e8:	2501      	movs	r5, #1
 801c9ea:	e7e2      	b.n	801c9b2 <__gethex+0x2f6>
 801c9ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c9ee:	f1c3 0301 	rsb	r3, r3, #1
 801c9f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c9f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d0f0      	beq.n	801c9dc <__gethex+0x320>
 801c9fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c9fe:	f104 0314 	add.w	r3, r4, #20
 801ca02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ca06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ca0a:	f04f 0c00 	mov.w	ip, #0
 801ca0e:	4618      	mov	r0, r3
 801ca10:	f853 2b04 	ldr.w	r2, [r3], #4
 801ca14:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ca18:	d01b      	beq.n	801ca52 <__gethex+0x396>
 801ca1a:	3201      	adds	r2, #1
 801ca1c:	6002      	str	r2, [r0, #0]
 801ca1e:	2d02      	cmp	r5, #2
 801ca20:	f104 0314 	add.w	r3, r4, #20
 801ca24:	d13c      	bne.n	801caa0 <__gethex+0x3e4>
 801ca26:	f8d8 2000 	ldr.w	r2, [r8]
 801ca2a:	3a01      	subs	r2, #1
 801ca2c:	42b2      	cmp	r2, r6
 801ca2e:	d109      	bne.n	801ca44 <__gethex+0x388>
 801ca30:	1171      	asrs	r1, r6, #5
 801ca32:	2201      	movs	r2, #1
 801ca34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ca38:	f006 061f 	and.w	r6, r6, #31
 801ca3c:	fa02 f606 	lsl.w	r6, r2, r6
 801ca40:	421e      	tst	r6, r3
 801ca42:	d13a      	bne.n	801caba <__gethex+0x3fe>
 801ca44:	f045 0520 	orr.w	r5, r5, #32
 801ca48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca4a:	601c      	str	r4, [r3, #0]
 801ca4c:	9b02      	ldr	r3, [sp, #8]
 801ca4e:	601f      	str	r7, [r3, #0]
 801ca50:	e6b0      	b.n	801c7b4 <__gethex+0xf8>
 801ca52:	4299      	cmp	r1, r3
 801ca54:	f843 cc04 	str.w	ip, [r3, #-4]
 801ca58:	d8d9      	bhi.n	801ca0e <__gethex+0x352>
 801ca5a:	68a3      	ldr	r3, [r4, #8]
 801ca5c:	459b      	cmp	fp, r3
 801ca5e:	db17      	blt.n	801ca90 <__gethex+0x3d4>
 801ca60:	6861      	ldr	r1, [r4, #4]
 801ca62:	9801      	ldr	r0, [sp, #4]
 801ca64:	3101      	adds	r1, #1
 801ca66:	f000 f90d 	bl	801cc84 <_Balloc>
 801ca6a:	4681      	mov	r9, r0
 801ca6c:	b918      	cbnz	r0, 801ca76 <__gethex+0x3ba>
 801ca6e:	4b1a      	ldr	r3, [pc, #104]	@ (801cad8 <__gethex+0x41c>)
 801ca70:	4602      	mov	r2, r0
 801ca72:	2184      	movs	r1, #132	@ 0x84
 801ca74:	e6c5      	b.n	801c802 <__gethex+0x146>
 801ca76:	6922      	ldr	r2, [r4, #16]
 801ca78:	3202      	adds	r2, #2
 801ca7a:	f104 010c 	add.w	r1, r4, #12
 801ca7e:	0092      	lsls	r2, r2, #2
 801ca80:	300c      	adds	r0, #12
 801ca82:	f7fe fee2 	bl	801b84a <memcpy>
 801ca86:	4621      	mov	r1, r4
 801ca88:	9801      	ldr	r0, [sp, #4]
 801ca8a:	f000 f93b 	bl	801cd04 <_Bfree>
 801ca8e:	464c      	mov	r4, r9
 801ca90:	6923      	ldr	r3, [r4, #16]
 801ca92:	1c5a      	adds	r2, r3, #1
 801ca94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ca98:	6122      	str	r2, [r4, #16]
 801ca9a:	2201      	movs	r2, #1
 801ca9c:	615a      	str	r2, [r3, #20]
 801ca9e:	e7be      	b.n	801ca1e <__gethex+0x362>
 801caa0:	6922      	ldr	r2, [r4, #16]
 801caa2:	455a      	cmp	r2, fp
 801caa4:	dd0b      	ble.n	801cabe <__gethex+0x402>
 801caa6:	2101      	movs	r1, #1
 801caa8:	4620      	mov	r0, r4
 801caaa:	f7ff fd9f 	bl	801c5ec <rshift>
 801caae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cab2:	3701      	adds	r7, #1
 801cab4:	42bb      	cmp	r3, r7
 801cab6:	f6ff aee0 	blt.w	801c87a <__gethex+0x1be>
 801caba:	2501      	movs	r5, #1
 801cabc:	e7c2      	b.n	801ca44 <__gethex+0x388>
 801cabe:	f016 061f 	ands.w	r6, r6, #31
 801cac2:	d0fa      	beq.n	801caba <__gethex+0x3fe>
 801cac4:	4453      	add	r3, sl
 801cac6:	f1c6 0620 	rsb	r6, r6, #32
 801caca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801cace:	f000 f9cb 	bl	801ce68 <__hi0bits>
 801cad2:	42b0      	cmp	r0, r6
 801cad4:	dbe7      	blt.n	801caa6 <__gethex+0x3ea>
 801cad6:	e7f0      	b.n	801caba <__gethex+0x3fe>
 801cad8:	080233d4 	.word	0x080233d4

0801cadc <L_shift>:
 801cadc:	f1c2 0208 	rsb	r2, r2, #8
 801cae0:	0092      	lsls	r2, r2, #2
 801cae2:	b570      	push	{r4, r5, r6, lr}
 801cae4:	f1c2 0620 	rsb	r6, r2, #32
 801cae8:	6843      	ldr	r3, [r0, #4]
 801caea:	6804      	ldr	r4, [r0, #0]
 801caec:	fa03 f506 	lsl.w	r5, r3, r6
 801caf0:	432c      	orrs	r4, r5
 801caf2:	40d3      	lsrs	r3, r2
 801caf4:	6004      	str	r4, [r0, #0]
 801caf6:	f840 3f04 	str.w	r3, [r0, #4]!
 801cafa:	4288      	cmp	r0, r1
 801cafc:	d3f4      	bcc.n	801cae8 <L_shift+0xc>
 801cafe:	bd70      	pop	{r4, r5, r6, pc}

0801cb00 <__match>:
 801cb00:	b530      	push	{r4, r5, lr}
 801cb02:	6803      	ldr	r3, [r0, #0]
 801cb04:	3301      	adds	r3, #1
 801cb06:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cb0a:	b914      	cbnz	r4, 801cb12 <__match+0x12>
 801cb0c:	6003      	str	r3, [r0, #0]
 801cb0e:	2001      	movs	r0, #1
 801cb10:	bd30      	pop	{r4, r5, pc}
 801cb12:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cb16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801cb1a:	2d19      	cmp	r5, #25
 801cb1c:	bf98      	it	ls
 801cb1e:	3220      	addls	r2, #32
 801cb20:	42a2      	cmp	r2, r4
 801cb22:	d0f0      	beq.n	801cb06 <__match+0x6>
 801cb24:	2000      	movs	r0, #0
 801cb26:	e7f3      	b.n	801cb10 <__match+0x10>

0801cb28 <__hexnan>:
 801cb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb2c:	680b      	ldr	r3, [r1, #0]
 801cb2e:	6801      	ldr	r1, [r0, #0]
 801cb30:	115e      	asrs	r6, r3, #5
 801cb32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cb36:	f013 031f 	ands.w	r3, r3, #31
 801cb3a:	b087      	sub	sp, #28
 801cb3c:	bf18      	it	ne
 801cb3e:	3604      	addne	r6, #4
 801cb40:	2500      	movs	r5, #0
 801cb42:	1f37      	subs	r7, r6, #4
 801cb44:	4682      	mov	sl, r0
 801cb46:	4690      	mov	r8, r2
 801cb48:	9301      	str	r3, [sp, #4]
 801cb4a:	f846 5c04 	str.w	r5, [r6, #-4]
 801cb4e:	46b9      	mov	r9, r7
 801cb50:	463c      	mov	r4, r7
 801cb52:	9502      	str	r5, [sp, #8]
 801cb54:	46ab      	mov	fp, r5
 801cb56:	784a      	ldrb	r2, [r1, #1]
 801cb58:	1c4b      	adds	r3, r1, #1
 801cb5a:	9303      	str	r3, [sp, #12]
 801cb5c:	b342      	cbz	r2, 801cbb0 <__hexnan+0x88>
 801cb5e:	4610      	mov	r0, r2
 801cb60:	9105      	str	r1, [sp, #20]
 801cb62:	9204      	str	r2, [sp, #16]
 801cb64:	f7ff fd94 	bl	801c690 <__hexdig_fun>
 801cb68:	2800      	cmp	r0, #0
 801cb6a:	d151      	bne.n	801cc10 <__hexnan+0xe8>
 801cb6c:	9a04      	ldr	r2, [sp, #16]
 801cb6e:	9905      	ldr	r1, [sp, #20]
 801cb70:	2a20      	cmp	r2, #32
 801cb72:	d818      	bhi.n	801cba6 <__hexnan+0x7e>
 801cb74:	9b02      	ldr	r3, [sp, #8]
 801cb76:	459b      	cmp	fp, r3
 801cb78:	dd13      	ble.n	801cba2 <__hexnan+0x7a>
 801cb7a:	454c      	cmp	r4, r9
 801cb7c:	d206      	bcs.n	801cb8c <__hexnan+0x64>
 801cb7e:	2d07      	cmp	r5, #7
 801cb80:	dc04      	bgt.n	801cb8c <__hexnan+0x64>
 801cb82:	462a      	mov	r2, r5
 801cb84:	4649      	mov	r1, r9
 801cb86:	4620      	mov	r0, r4
 801cb88:	f7ff ffa8 	bl	801cadc <L_shift>
 801cb8c:	4544      	cmp	r4, r8
 801cb8e:	d952      	bls.n	801cc36 <__hexnan+0x10e>
 801cb90:	2300      	movs	r3, #0
 801cb92:	f1a4 0904 	sub.w	r9, r4, #4
 801cb96:	f844 3c04 	str.w	r3, [r4, #-4]
 801cb9a:	f8cd b008 	str.w	fp, [sp, #8]
 801cb9e:	464c      	mov	r4, r9
 801cba0:	461d      	mov	r5, r3
 801cba2:	9903      	ldr	r1, [sp, #12]
 801cba4:	e7d7      	b.n	801cb56 <__hexnan+0x2e>
 801cba6:	2a29      	cmp	r2, #41	@ 0x29
 801cba8:	d157      	bne.n	801cc5a <__hexnan+0x132>
 801cbaa:	3102      	adds	r1, #2
 801cbac:	f8ca 1000 	str.w	r1, [sl]
 801cbb0:	f1bb 0f00 	cmp.w	fp, #0
 801cbb4:	d051      	beq.n	801cc5a <__hexnan+0x132>
 801cbb6:	454c      	cmp	r4, r9
 801cbb8:	d206      	bcs.n	801cbc8 <__hexnan+0xa0>
 801cbba:	2d07      	cmp	r5, #7
 801cbbc:	dc04      	bgt.n	801cbc8 <__hexnan+0xa0>
 801cbbe:	462a      	mov	r2, r5
 801cbc0:	4649      	mov	r1, r9
 801cbc2:	4620      	mov	r0, r4
 801cbc4:	f7ff ff8a 	bl	801cadc <L_shift>
 801cbc8:	4544      	cmp	r4, r8
 801cbca:	d936      	bls.n	801cc3a <__hexnan+0x112>
 801cbcc:	f1a8 0204 	sub.w	r2, r8, #4
 801cbd0:	4623      	mov	r3, r4
 801cbd2:	f853 1b04 	ldr.w	r1, [r3], #4
 801cbd6:	f842 1f04 	str.w	r1, [r2, #4]!
 801cbda:	429f      	cmp	r7, r3
 801cbdc:	d2f9      	bcs.n	801cbd2 <__hexnan+0xaa>
 801cbde:	1b3b      	subs	r3, r7, r4
 801cbe0:	f023 0303 	bic.w	r3, r3, #3
 801cbe4:	3304      	adds	r3, #4
 801cbe6:	3401      	adds	r4, #1
 801cbe8:	3e03      	subs	r6, #3
 801cbea:	42b4      	cmp	r4, r6
 801cbec:	bf88      	it	hi
 801cbee:	2304      	movhi	r3, #4
 801cbf0:	4443      	add	r3, r8
 801cbf2:	2200      	movs	r2, #0
 801cbf4:	f843 2b04 	str.w	r2, [r3], #4
 801cbf8:	429f      	cmp	r7, r3
 801cbfa:	d2fb      	bcs.n	801cbf4 <__hexnan+0xcc>
 801cbfc:	683b      	ldr	r3, [r7, #0]
 801cbfe:	b91b      	cbnz	r3, 801cc08 <__hexnan+0xe0>
 801cc00:	4547      	cmp	r7, r8
 801cc02:	d128      	bne.n	801cc56 <__hexnan+0x12e>
 801cc04:	2301      	movs	r3, #1
 801cc06:	603b      	str	r3, [r7, #0]
 801cc08:	2005      	movs	r0, #5
 801cc0a:	b007      	add	sp, #28
 801cc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc10:	3501      	adds	r5, #1
 801cc12:	2d08      	cmp	r5, #8
 801cc14:	f10b 0b01 	add.w	fp, fp, #1
 801cc18:	dd06      	ble.n	801cc28 <__hexnan+0x100>
 801cc1a:	4544      	cmp	r4, r8
 801cc1c:	d9c1      	bls.n	801cba2 <__hexnan+0x7a>
 801cc1e:	2300      	movs	r3, #0
 801cc20:	f844 3c04 	str.w	r3, [r4, #-4]
 801cc24:	2501      	movs	r5, #1
 801cc26:	3c04      	subs	r4, #4
 801cc28:	6822      	ldr	r2, [r4, #0]
 801cc2a:	f000 000f 	and.w	r0, r0, #15
 801cc2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801cc32:	6020      	str	r0, [r4, #0]
 801cc34:	e7b5      	b.n	801cba2 <__hexnan+0x7a>
 801cc36:	2508      	movs	r5, #8
 801cc38:	e7b3      	b.n	801cba2 <__hexnan+0x7a>
 801cc3a:	9b01      	ldr	r3, [sp, #4]
 801cc3c:	2b00      	cmp	r3, #0
 801cc3e:	d0dd      	beq.n	801cbfc <__hexnan+0xd4>
 801cc40:	f1c3 0320 	rsb	r3, r3, #32
 801cc44:	f04f 32ff 	mov.w	r2, #4294967295
 801cc48:	40da      	lsrs	r2, r3
 801cc4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801cc4e:	4013      	ands	r3, r2
 801cc50:	f846 3c04 	str.w	r3, [r6, #-4]
 801cc54:	e7d2      	b.n	801cbfc <__hexnan+0xd4>
 801cc56:	3f04      	subs	r7, #4
 801cc58:	e7d0      	b.n	801cbfc <__hexnan+0xd4>
 801cc5a:	2004      	movs	r0, #4
 801cc5c:	e7d5      	b.n	801cc0a <__hexnan+0xe2>

0801cc5e <__ascii_mbtowc>:
 801cc5e:	b082      	sub	sp, #8
 801cc60:	b901      	cbnz	r1, 801cc64 <__ascii_mbtowc+0x6>
 801cc62:	a901      	add	r1, sp, #4
 801cc64:	b142      	cbz	r2, 801cc78 <__ascii_mbtowc+0x1a>
 801cc66:	b14b      	cbz	r3, 801cc7c <__ascii_mbtowc+0x1e>
 801cc68:	7813      	ldrb	r3, [r2, #0]
 801cc6a:	600b      	str	r3, [r1, #0]
 801cc6c:	7812      	ldrb	r2, [r2, #0]
 801cc6e:	1e10      	subs	r0, r2, #0
 801cc70:	bf18      	it	ne
 801cc72:	2001      	movne	r0, #1
 801cc74:	b002      	add	sp, #8
 801cc76:	4770      	bx	lr
 801cc78:	4610      	mov	r0, r2
 801cc7a:	e7fb      	b.n	801cc74 <__ascii_mbtowc+0x16>
 801cc7c:	f06f 0001 	mvn.w	r0, #1
 801cc80:	e7f8      	b.n	801cc74 <__ascii_mbtowc+0x16>
	...

0801cc84 <_Balloc>:
 801cc84:	b570      	push	{r4, r5, r6, lr}
 801cc86:	69c6      	ldr	r6, [r0, #28]
 801cc88:	4604      	mov	r4, r0
 801cc8a:	460d      	mov	r5, r1
 801cc8c:	b976      	cbnz	r6, 801ccac <_Balloc+0x28>
 801cc8e:	2010      	movs	r0, #16
 801cc90:	f7fc fd48 	bl	8019724 <malloc>
 801cc94:	4602      	mov	r2, r0
 801cc96:	61e0      	str	r0, [r4, #28]
 801cc98:	b920      	cbnz	r0, 801cca4 <_Balloc+0x20>
 801cc9a:	4b18      	ldr	r3, [pc, #96]	@ (801ccfc <_Balloc+0x78>)
 801cc9c:	4818      	ldr	r0, [pc, #96]	@ (801cd00 <_Balloc+0x7c>)
 801cc9e:	216b      	movs	r1, #107	@ 0x6b
 801cca0:	f7fe fdf0 	bl	801b884 <__assert_func>
 801cca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cca8:	6006      	str	r6, [r0, #0]
 801ccaa:	60c6      	str	r6, [r0, #12]
 801ccac:	69e6      	ldr	r6, [r4, #28]
 801ccae:	68f3      	ldr	r3, [r6, #12]
 801ccb0:	b183      	cbz	r3, 801ccd4 <_Balloc+0x50>
 801ccb2:	69e3      	ldr	r3, [r4, #28]
 801ccb4:	68db      	ldr	r3, [r3, #12]
 801ccb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ccba:	b9b8      	cbnz	r0, 801ccec <_Balloc+0x68>
 801ccbc:	2101      	movs	r1, #1
 801ccbe:	fa01 f605 	lsl.w	r6, r1, r5
 801ccc2:	1d72      	adds	r2, r6, #5
 801ccc4:	0092      	lsls	r2, r2, #2
 801ccc6:	4620      	mov	r0, r4
 801ccc8:	f001 f8a7 	bl	801de1a <_calloc_r>
 801cccc:	b160      	cbz	r0, 801cce8 <_Balloc+0x64>
 801ccce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ccd2:	e00e      	b.n	801ccf2 <_Balloc+0x6e>
 801ccd4:	2221      	movs	r2, #33	@ 0x21
 801ccd6:	2104      	movs	r1, #4
 801ccd8:	4620      	mov	r0, r4
 801ccda:	f001 f89e 	bl	801de1a <_calloc_r>
 801ccde:	69e3      	ldr	r3, [r4, #28]
 801cce0:	60f0      	str	r0, [r6, #12]
 801cce2:	68db      	ldr	r3, [r3, #12]
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d1e4      	bne.n	801ccb2 <_Balloc+0x2e>
 801cce8:	2000      	movs	r0, #0
 801ccea:	bd70      	pop	{r4, r5, r6, pc}
 801ccec:	6802      	ldr	r2, [r0, #0]
 801ccee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ccf2:	2300      	movs	r3, #0
 801ccf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ccf8:	e7f7      	b.n	801ccea <_Balloc+0x66>
 801ccfa:	bf00      	nop
 801ccfc:	080232ba 	.word	0x080232ba
 801cd00:	08023445 	.word	0x08023445

0801cd04 <_Bfree>:
 801cd04:	b570      	push	{r4, r5, r6, lr}
 801cd06:	69c6      	ldr	r6, [r0, #28]
 801cd08:	4605      	mov	r5, r0
 801cd0a:	460c      	mov	r4, r1
 801cd0c:	b976      	cbnz	r6, 801cd2c <_Bfree+0x28>
 801cd0e:	2010      	movs	r0, #16
 801cd10:	f7fc fd08 	bl	8019724 <malloc>
 801cd14:	4602      	mov	r2, r0
 801cd16:	61e8      	str	r0, [r5, #28]
 801cd18:	b920      	cbnz	r0, 801cd24 <_Bfree+0x20>
 801cd1a:	4b09      	ldr	r3, [pc, #36]	@ (801cd40 <_Bfree+0x3c>)
 801cd1c:	4809      	ldr	r0, [pc, #36]	@ (801cd44 <_Bfree+0x40>)
 801cd1e:	218f      	movs	r1, #143	@ 0x8f
 801cd20:	f7fe fdb0 	bl	801b884 <__assert_func>
 801cd24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cd28:	6006      	str	r6, [r0, #0]
 801cd2a:	60c6      	str	r6, [r0, #12]
 801cd2c:	b13c      	cbz	r4, 801cd3e <_Bfree+0x3a>
 801cd2e:	69eb      	ldr	r3, [r5, #28]
 801cd30:	6862      	ldr	r2, [r4, #4]
 801cd32:	68db      	ldr	r3, [r3, #12]
 801cd34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cd38:	6021      	str	r1, [r4, #0]
 801cd3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cd3e:	bd70      	pop	{r4, r5, r6, pc}
 801cd40:	080232ba 	.word	0x080232ba
 801cd44:	08023445 	.word	0x08023445

0801cd48 <__multadd>:
 801cd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd4c:	690d      	ldr	r5, [r1, #16]
 801cd4e:	4607      	mov	r7, r0
 801cd50:	460c      	mov	r4, r1
 801cd52:	461e      	mov	r6, r3
 801cd54:	f101 0c14 	add.w	ip, r1, #20
 801cd58:	2000      	movs	r0, #0
 801cd5a:	f8dc 3000 	ldr.w	r3, [ip]
 801cd5e:	b299      	uxth	r1, r3
 801cd60:	fb02 6101 	mla	r1, r2, r1, r6
 801cd64:	0c1e      	lsrs	r6, r3, #16
 801cd66:	0c0b      	lsrs	r3, r1, #16
 801cd68:	fb02 3306 	mla	r3, r2, r6, r3
 801cd6c:	b289      	uxth	r1, r1
 801cd6e:	3001      	adds	r0, #1
 801cd70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cd74:	4285      	cmp	r5, r0
 801cd76:	f84c 1b04 	str.w	r1, [ip], #4
 801cd7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cd7e:	dcec      	bgt.n	801cd5a <__multadd+0x12>
 801cd80:	b30e      	cbz	r6, 801cdc6 <__multadd+0x7e>
 801cd82:	68a3      	ldr	r3, [r4, #8]
 801cd84:	42ab      	cmp	r3, r5
 801cd86:	dc19      	bgt.n	801cdbc <__multadd+0x74>
 801cd88:	6861      	ldr	r1, [r4, #4]
 801cd8a:	4638      	mov	r0, r7
 801cd8c:	3101      	adds	r1, #1
 801cd8e:	f7ff ff79 	bl	801cc84 <_Balloc>
 801cd92:	4680      	mov	r8, r0
 801cd94:	b928      	cbnz	r0, 801cda2 <__multadd+0x5a>
 801cd96:	4602      	mov	r2, r0
 801cd98:	4b0c      	ldr	r3, [pc, #48]	@ (801cdcc <__multadd+0x84>)
 801cd9a:	480d      	ldr	r0, [pc, #52]	@ (801cdd0 <__multadd+0x88>)
 801cd9c:	21ba      	movs	r1, #186	@ 0xba
 801cd9e:	f7fe fd71 	bl	801b884 <__assert_func>
 801cda2:	6922      	ldr	r2, [r4, #16]
 801cda4:	3202      	adds	r2, #2
 801cda6:	f104 010c 	add.w	r1, r4, #12
 801cdaa:	0092      	lsls	r2, r2, #2
 801cdac:	300c      	adds	r0, #12
 801cdae:	f7fe fd4c 	bl	801b84a <memcpy>
 801cdb2:	4621      	mov	r1, r4
 801cdb4:	4638      	mov	r0, r7
 801cdb6:	f7ff ffa5 	bl	801cd04 <_Bfree>
 801cdba:	4644      	mov	r4, r8
 801cdbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cdc0:	3501      	adds	r5, #1
 801cdc2:	615e      	str	r6, [r3, #20]
 801cdc4:	6125      	str	r5, [r4, #16]
 801cdc6:	4620      	mov	r0, r4
 801cdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdcc:	080233d4 	.word	0x080233d4
 801cdd0:	08023445 	.word	0x08023445

0801cdd4 <__s2b>:
 801cdd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cdd8:	460c      	mov	r4, r1
 801cdda:	4615      	mov	r5, r2
 801cddc:	461f      	mov	r7, r3
 801cdde:	2209      	movs	r2, #9
 801cde0:	3308      	adds	r3, #8
 801cde2:	4606      	mov	r6, r0
 801cde4:	fb93 f3f2 	sdiv	r3, r3, r2
 801cde8:	2100      	movs	r1, #0
 801cdea:	2201      	movs	r2, #1
 801cdec:	429a      	cmp	r2, r3
 801cdee:	db09      	blt.n	801ce04 <__s2b+0x30>
 801cdf0:	4630      	mov	r0, r6
 801cdf2:	f7ff ff47 	bl	801cc84 <_Balloc>
 801cdf6:	b940      	cbnz	r0, 801ce0a <__s2b+0x36>
 801cdf8:	4602      	mov	r2, r0
 801cdfa:	4b19      	ldr	r3, [pc, #100]	@ (801ce60 <__s2b+0x8c>)
 801cdfc:	4819      	ldr	r0, [pc, #100]	@ (801ce64 <__s2b+0x90>)
 801cdfe:	21d3      	movs	r1, #211	@ 0xd3
 801ce00:	f7fe fd40 	bl	801b884 <__assert_func>
 801ce04:	0052      	lsls	r2, r2, #1
 801ce06:	3101      	adds	r1, #1
 801ce08:	e7f0      	b.n	801cdec <__s2b+0x18>
 801ce0a:	9b08      	ldr	r3, [sp, #32]
 801ce0c:	6143      	str	r3, [r0, #20]
 801ce0e:	2d09      	cmp	r5, #9
 801ce10:	f04f 0301 	mov.w	r3, #1
 801ce14:	6103      	str	r3, [r0, #16]
 801ce16:	dd16      	ble.n	801ce46 <__s2b+0x72>
 801ce18:	f104 0909 	add.w	r9, r4, #9
 801ce1c:	46c8      	mov	r8, r9
 801ce1e:	442c      	add	r4, r5
 801ce20:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ce24:	4601      	mov	r1, r0
 801ce26:	3b30      	subs	r3, #48	@ 0x30
 801ce28:	220a      	movs	r2, #10
 801ce2a:	4630      	mov	r0, r6
 801ce2c:	f7ff ff8c 	bl	801cd48 <__multadd>
 801ce30:	45a0      	cmp	r8, r4
 801ce32:	d1f5      	bne.n	801ce20 <__s2b+0x4c>
 801ce34:	f1a5 0408 	sub.w	r4, r5, #8
 801ce38:	444c      	add	r4, r9
 801ce3a:	1b2d      	subs	r5, r5, r4
 801ce3c:	1963      	adds	r3, r4, r5
 801ce3e:	42bb      	cmp	r3, r7
 801ce40:	db04      	blt.n	801ce4c <__s2b+0x78>
 801ce42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ce46:	340a      	adds	r4, #10
 801ce48:	2509      	movs	r5, #9
 801ce4a:	e7f6      	b.n	801ce3a <__s2b+0x66>
 801ce4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ce50:	4601      	mov	r1, r0
 801ce52:	3b30      	subs	r3, #48	@ 0x30
 801ce54:	220a      	movs	r2, #10
 801ce56:	4630      	mov	r0, r6
 801ce58:	f7ff ff76 	bl	801cd48 <__multadd>
 801ce5c:	e7ee      	b.n	801ce3c <__s2b+0x68>
 801ce5e:	bf00      	nop
 801ce60:	080233d4 	.word	0x080233d4
 801ce64:	08023445 	.word	0x08023445

0801ce68 <__hi0bits>:
 801ce68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ce6c:	4603      	mov	r3, r0
 801ce6e:	bf36      	itet	cc
 801ce70:	0403      	lslcc	r3, r0, #16
 801ce72:	2000      	movcs	r0, #0
 801ce74:	2010      	movcc	r0, #16
 801ce76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ce7a:	bf3c      	itt	cc
 801ce7c:	021b      	lslcc	r3, r3, #8
 801ce7e:	3008      	addcc	r0, #8
 801ce80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ce84:	bf3c      	itt	cc
 801ce86:	011b      	lslcc	r3, r3, #4
 801ce88:	3004      	addcc	r0, #4
 801ce8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ce8e:	bf3c      	itt	cc
 801ce90:	009b      	lslcc	r3, r3, #2
 801ce92:	3002      	addcc	r0, #2
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	db05      	blt.n	801cea4 <__hi0bits+0x3c>
 801ce98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ce9c:	f100 0001 	add.w	r0, r0, #1
 801cea0:	bf08      	it	eq
 801cea2:	2020      	moveq	r0, #32
 801cea4:	4770      	bx	lr

0801cea6 <__lo0bits>:
 801cea6:	6803      	ldr	r3, [r0, #0]
 801cea8:	4602      	mov	r2, r0
 801ceaa:	f013 0007 	ands.w	r0, r3, #7
 801ceae:	d00b      	beq.n	801cec8 <__lo0bits+0x22>
 801ceb0:	07d9      	lsls	r1, r3, #31
 801ceb2:	d421      	bmi.n	801cef8 <__lo0bits+0x52>
 801ceb4:	0798      	lsls	r0, r3, #30
 801ceb6:	bf49      	itett	mi
 801ceb8:	085b      	lsrmi	r3, r3, #1
 801ceba:	089b      	lsrpl	r3, r3, #2
 801cebc:	2001      	movmi	r0, #1
 801cebe:	6013      	strmi	r3, [r2, #0]
 801cec0:	bf5c      	itt	pl
 801cec2:	6013      	strpl	r3, [r2, #0]
 801cec4:	2002      	movpl	r0, #2
 801cec6:	4770      	bx	lr
 801cec8:	b299      	uxth	r1, r3
 801ceca:	b909      	cbnz	r1, 801ced0 <__lo0bits+0x2a>
 801cecc:	0c1b      	lsrs	r3, r3, #16
 801cece:	2010      	movs	r0, #16
 801ced0:	b2d9      	uxtb	r1, r3
 801ced2:	b909      	cbnz	r1, 801ced8 <__lo0bits+0x32>
 801ced4:	3008      	adds	r0, #8
 801ced6:	0a1b      	lsrs	r3, r3, #8
 801ced8:	0719      	lsls	r1, r3, #28
 801ceda:	bf04      	itt	eq
 801cedc:	091b      	lsreq	r3, r3, #4
 801cede:	3004      	addeq	r0, #4
 801cee0:	0799      	lsls	r1, r3, #30
 801cee2:	bf04      	itt	eq
 801cee4:	089b      	lsreq	r3, r3, #2
 801cee6:	3002      	addeq	r0, #2
 801cee8:	07d9      	lsls	r1, r3, #31
 801ceea:	d403      	bmi.n	801cef4 <__lo0bits+0x4e>
 801ceec:	085b      	lsrs	r3, r3, #1
 801ceee:	f100 0001 	add.w	r0, r0, #1
 801cef2:	d003      	beq.n	801cefc <__lo0bits+0x56>
 801cef4:	6013      	str	r3, [r2, #0]
 801cef6:	4770      	bx	lr
 801cef8:	2000      	movs	r0, #0
 801cefa:	4770      	bx	lr
 801cefc:	2020      	movs	r0, #32
 801cefe:	4770      	bx	lr

0801cf00 <__i2b>:
 801cf00:	b510      	push	{r4, lr}
 801cf02:	460c      	mov	r4, r1
 801cf04:	2101      	movs	r1, #1
 801cf06:	f7ff febd 	bl	801cc84 <_Balloc>
 801cf0a:	4602      	mov	r2, r0
 801cf0c:	b928      	cbnz	r0, 801cf1a <__i2b+0x1a>
 801cf0e:	4b05      	ldr	r3, [pc, #20]	@ (801cf24 <__i2b+0x24>)
 801cf10:	4805      	ldr	r0, [pc, #20]	@ (801cf28 <__i2b+0x28>)
 801cf12:	f240 1145 	movw	r1, #325	@ 0x145
 801cf16:	f7fe fcb5 	bl	801b884 <__assert_func>
 801cf1a:	2301      	movs	r3, #1
 801cf1c:	6144      	str	r4, [r0, #20]
 801cf1e:	6103      	str	r3, [r0, #16]
 801cf20:	bd10      	pop	{r4, pc}
 801cf22:	bf00      	nop
 801cf24:	080233d4 	.word	0x080233d4
 801cf28:	08023445 	.word	0x08023445

0801cf2c <__multiply>:
 801cf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf30:	4614      	mov	r4, r2
 801cf32:	690a      	ldr	r2, [r1, #16]
 801cf34:	6923      	ldr	r3, [r4, #16]
 801cf36:	429a      	cmp	r2, r3
 801cf38:	bfa8      	it	ge
 801cf3a:	4623      	movge	r3, r4
 801cf3c:	460f      	mov	r7, r1
 801cf3e:	bfa4      	itt	ge
 801cf40:	460c      	movge	r4, r1
 801cf42:	461f      	movge	r7, r3
 801cf44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801cf48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801cf4c:	68a3      	ldr	r3, [r4, #8]
 801cf4e:	6861      	ldr	r1, [r4, #4]
 801cf50:	eb0a 0609 	add.w	r6, sl, r9
 801cf54:	42b3      	cmp	r3, r6
 801cf56:	b085      	sub	sp, #20
 801cf58:	bfb8      	it	lt
 801cf5a:	3101      	addlt	r1, #1
 801cf5c:	f7ff fe92 	bl	801cc84 <_Balloc>
 801cf60:	b930      	cbnz	r0, 801cf70 <__multiply+0x44>
 801cf62:	4602      	mov	r2, r0
 801cf64:	4b44      	ldr	r3, [pc, #272]	@ (801d078 <__multiply+0x14c>)
 801cf66:	4845      	ldr	r0, [pc, #276]	@ (801d07c <__multiply+0x150>)
 801cf68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801cf6c:	f7fe fc8a 	bl	801b884 <__assert_func>
 801cf70:	f100 0514 	add.w	r5, r0, #20
 801cf74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cf78:	462b      	mov	r3, r5
 801cf7a:	2200      	movs	r2, #0
 801cf7c:	4543      	cmp	r3, r8
 801cf7e:	d321      	bcc.n	801cfc4 <__multiply+0x98>
 801cf80:	f107 0114 	add.w	r1, r7, #20
 801cf84:	f104 0214 	add.w	r2, r4, #20
 801cf88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801cf8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801cf90:	9302      	str	r3, [sp, #8]
 801cf92:	1b13      	subs	r3, r2, r4
 801cf94:	3b15      	subs	r3, #21
 801cf96:	f023 0303 	bic.w	r3, r3, #3
 801cf9a:	3304      	adds	r3, #4
 801cf9c:	f104 0715 	add.w	r7, r4, #21
 801cfa0:	42ba      	cmp	r2, r7
 801cfa2:	bf38      	it	cc
 801cfa4:	2304      	movcc	r3, #4
 801cfa6:	9301      	str	r3, [sp, #4]
 801cfa8:	9b02      	ldr	r3, [sp, #8]
 801cfaa:	9103      	str	r1, [sp, #12]
 801cfac:	428b      	cmp	r3, r1
 801cfae:	d80c      	bhi.n	801cfca <__multiply+0x9e>
 801cfb0:	2e00      	cmp	r6, #0
 801cfb2:	dd03      	ble.n	801cfbc <__multiply+0x90>
 801cfb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d05b      	beq.n	801d074 <__multiply+0x148>
 801cfbc:	6106      	str	r6, [r0, #16]
 801cfbe:	b005      	add	sp, #20
 801cfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfc4:	f843 2b04 	str.w	r2, [r3], #4
 801cfc8:	e7d8      	b.n	801cf7c <__multiply+0x50>
 801cfca:	f8b1 a000 	ldrh.w	sl, [r1]
 801cfce:	f1ba 0f00 	cmp.w	sl, #0
 801cfd2:	d024      	beq.n	801d01e <__multiply+0xf2>
 801cfd4:	f104 0e14 	add.w	lr, r4, #20
 801cfd8:	46a9      	mov	r9, r5
 801cfda:	f04f 0c00 	mov.w	ip, #0
 801cfde:	f85e 7b04 	ldr.w	r7, [lr], #4
 801cfe2:	f8d9 3000 	ldr.w	r3, [r9]
 801cfe6:	fa1f fb87 	uxth.w	fp, r7
 801cfea:	b29b      	uxth	r3, r3
 801cfec:	fb0a 330b 	mla	r3, sl, fp, r3
 801cff0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801cff4:	f8d9 7000 	ldr.w	r7, [r9]
 801cff8:	4463      	add	r3, ip
 801cffa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801cffe:	fb0a c70b 	mla	r7, sl, fp, ip
 801d002:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801d006:	b29b      	uxth	r3, r3
 801d008:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801d00c:	4572      	cmp	r2, lr
 801d00e:	f849 3b04 	str.w	r3, [r9], #4
 801d012:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801d016:	d8e2      	bhi.n	801cfde <__multiply+0xb2>
 801d018:	9b01      	ldr	r3, [sp, #4]
 801d01a:	f845 c003 	str.w	ip, [r5, r3]
 801d01e:	9b03      	ldr	r3, [sp, #12]
 801d020:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801d024:	3104      	adds	r1, #4
 801d026:	f1b9 0f00 	cmp.w	r9, #0
 801d02a:	d021      	beq.n	801d070 <__multiply+0x144>
 801d02c:	682b      	ldr	r3, [r5, #0]
 801d02e:	f104 0c14 	add.w	ip, r4, #20
 801d032:	46ae      	mov	lr, r5
 801d034:	f04f 0a00 	mov.w	sl, #0
 801d038:	f8bc b000 	ldrh.w	fp, [ip]
 801d03c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801d040:	fb09 770b 	mla	r7, r9, fp, r7
 801d044:	4457      	add	r7, sl
 801d046:	b29b      	uxth	r3, r3
 801d048:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801d04c:	f84e 3b04 	str.w	r3, [lr], #4
 801d050:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d054:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d058:	f8be 3000 	ldrh.w	r3, [lr]
 801d05c:	fb09 330a 	mla	r3, r9, sl, r3
 801d060:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801d064:	4562      	cmp	r2, ip
 801d066:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d06a:	d8e5      	bhi.n	801d038 <__multiply+0x10c>
 801d06c:	9f01      	ldr	r7, [sp, #4]
 801d06e:	51eb      	str	r3, [r5, r7]
 801d070:	3504      	adds	r5, #4
 801d072:	e799      	b.n	801cfa8 <__multiply+0x7c>
 801d074:	3e01      	subs	r6, #1
 801d076:	e79b      	b.n	801cfb0 <__multiply+0x84>
 801d078:	080233d4 	.word	0x080233d4
 801d07c:	08023445 	.word	0x08023445

0801d080 <__pow5mult>:
 801d080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d084:	4615      	mov	r5, r2
 801d086:	f012 0203 	ands.w	r2, r2, #3
 801d08a:	4607      	mov	r7, r0
 801d08c:	460e      	mov	r6, r1
 801d08e:	d007      	beq.n	801d0a0 <__pow5mult+0x20>
 801d090:	4c25      	ldr	r4, [pc, #148]	@ (801d128 <__pow5mult+0xa8>)
 801d092:	3a01      	subs	r2, #1
 801d094:	2300      	movs	r3, #0
 801d096:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d09a:	f7ff fe55 	bl	801cd48 <__multadd>
 801d09e:	4606      	mov	r6, r0
 801d0a0:	10ad      	asrs	r5, r5, #2
 801d0a2:	d03d      	beq.n	801d120 <__pow5mult+0xa0>
 801d0a4:	69fc      	ldr	r4, [r7, #28]
 801d0a6:	b97c      	cbnz	r4, 801d0c8 <__pow5mult+0x48>
 801d0a8:	2010      	movs	r0, #16
 801d0aa:	f7fc fb3b 	bl	8019724 <malloc>
 801d0ae:	4602      	mov	r2, r0
 801d0b0:	61f8      	str	r0, [r7, #28]
 801d0b2:	b928      	cbnz	r0, 801d0c0 <__pow5mult+0x40>
 801d0b4:	4b1d      	ldr	r3, [pc, #116]	@ (801d12c <__pow5mult+0xac>)
 801d0b6:	481e      	ldr	r0, [pc, #120]	@ (801d130 <__pow5mult+0xb0>)
 801d0b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801d0bc:	f7fe fbe2 	bl	801b884 <__assert_func>
 801d0c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d0c4:	6004      	str	r4, [r0, #0]
 801d0c6:	60c4      	str	r4, [r0, #12]
 801d0c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801d0cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d0d0:	b94c      	cbnz	r4, 801d0e6 <__pow5mult+0x66>
 801d0d2:	f240 2171 	movw	r1, #625	@ 0x271
 801d0d6:	4638      	mov	r0, r7
 801d0d8:	f7ff ff12 	bl	801cf00 <__i2b>
 801d0dc:	2300      	movs	r3, #0
 801d0de:	f8c8 0008 	str.w	r0, [r8, #8]
 801d0e2:	4604      	mov	r4, r0
 801d0e4:	6003      	str	r3, [r0, #0]
 801d0e6:	f04f 0900 	mov.w	r9, #0
 801d0ea:	07eb      	lsls	r3, r5, #31
 801d0ec:	d50a      	bpl.n	801d104 <__pow5mult+0x84>
 801d0ee:	4631      	mov	r1, r6
 801d0f0:	4622      	mov	r2, r4
 801d0f2:	4638      	mov	r0, r7
 801d0f4:	f7ff ff1a 	bl	801cf2c <__multiply>
 801d0f8:	4631      	mov	r1, r6
 801d0fa:	4680      	mov	r8, r0
 801d0fc:	4638      	mov	r0, r7
 801d0fe:	f7ff fe01 	bl	801cd04 <_Bfree>
 801d102:	4646      	mov	r6, r8
 801d104:	106d      	asrs	r5, r5, #1
 801d106:	d00b      	beq.n	801d120 <__pow5mult+0xa0>
 801d108:	6820      	ldr	r0, [r4, #0]
 801d10a:	b938      	cbnz	r0, 801d11c <__pow5mult+0x9c>
 801d10c:	4622      	mov	r2, r4
 801d10e:	4621      	mov	r1, r4
 801d110:	4638      	mov	r0, r7
 801d112:	f7ff ff0b 	bl	801cf2c <__multiply>
 801d116:	6020      	str	r0, [r4, #0]
 801d118:	f8c0 9000 	str.w	r9, [r0]
 801d11c:	4604      	mov	r4, r0
 801d11e:	e7e4      	b.n	801d0ea <__pow5mult+0x6a>
 801d120:	4630      	mov	r0, r6
 801d122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d126:	bf00      	nop
 801d128:	080234a0 	.word	0x080234a0
 801d12c:	080232ba 	.word	0x080232ba
 801d130:	08023445 	.word	0x08023445

0801d134 <__lshift>:
 801d134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d138:	460c      	mov	r4, r1
 801d13a:	6849      	ldr	r1, [r1, #4]
 801d13c:	6923      	ldr	r3, [r4, #16]
 801d13e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d142:	68a3      	ldr	r3, [r4, #8]
 801d144:	4607      	mov	r7, r0
 801d146:	4691      	mov	r9, r2
 801d148:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d14c:	f108 0601 	add.w	r6, r8, #1
 801d150:	42b3      	cmp	r3, r6
 801d152:	db0b      	blt.n	801d16c <__lshift+0x38>
 801d154:	4638      	mov	r0, r7
 801d156:	f7ff fd95 	bl	801cc84 <_Balloc>
 801d15a:	4605      	mov	r5, r0
 801d15c:	b948      	cbnz	r0, 801d172 <__lshift+0x3e>
 801d15e:	4602      	mov	r2, r0
 801d160:	4b28      	ldr	r3, [pc, #160]	@ (801d204 <__lshift+0xd0>)
 801d162:	4829      	ldr	r0, [pc, #164]	@ (801d208 <__lshift+0xd4>)
 801d164:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801d168:	f7fe fb8c 	bl	801b884 <__assert_func>
 801d16c:	3101      	adds	r1, #1
 801d16e:	005b      	lsls	r3, r3, #1
 801d170:	e7ee      	b.n	801d150 <__lshift+0x1c>
 801d172:	2300      	movs	r3, #0
 801d174:	f100 0114 	add.w	r1, r0, #20
 801d178:	f100 0210 	add.w	r2, r0, #16
 801d17c:	4618      	mov	r0, r3
 801d17e:	4553      	cmp	r3, sl
 801d180:	db33      	blt.n	801d1ea <__lshift+0xb6>
 801d182:	6920      	ldr	r0, [r4, #16]
 801d184:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d188:	f104 0314 	add.w	r3, r4, #20
 801d18c:	f019 091f 	ands.w	r9, r9, #31
 801d190:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d194:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d198:	d02b      	beq.n	801d1f2 <__lshift+0xbe>
 801d19a:	f1c9 0e20 	rsb	lr, r9, #32
 801d19e:	468a      	mov	sl, r1
 801d1a0:	2200      	movs	r2, #0
 801d1a2:	6818      	ldr	r0, [r3, #0]
 801d1a4:	fa00 f009 	lsl.w	r0, r0, r9
 801d1a8:	4310      	orrs	r0, r2
 801d1aa:	f84a 0b04 	str.w	r0, [sl], #4
 801d1ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1b2:	459c      	cmp	ip, r3
 801d1b4:	fa22 f20e 	lsr.w	r2, r2, lr
 801d1b8:	d8f3      	bhi.n	801d1a2 <__lshift+0x6e>
 801d1ba:	ebac 0304 	sub.w	r3, ip, r4
 801d1be:	3b15      	subs	r3, #21
 801d1c0:	f023 0303 	bic.w	r3, r3, #3
 801d1c4:	3304      	adds	r3, #4
 801d1c6:	f104 0015 	add.w	r0, r4, #21
 801d1ca:	4584      	cmp	ip, r0
 801d1cc:	bf38      	it	cc
 801d1ce:	2304      	movcc	r3, #4
 801d1d0:	50ca      	str	r2, [r1, r3]
 801d1d2:	b10a      	cbz	r2, 801d1d8 <__lshift+0xa4>
 801d1d4:	f108 0602 	add.w	r6, r8, #2
 801d1d8:	3e01      	subs	r6, #1
 801d1da:	4638      	mov	r0, r7
 801d1dc:	612e      	str	r6, [r5, #16]
 801d1de:	4621      	mov	r1, r4
 801d1e0:	f7ff fd90 	bl	801cd04 <_Bfree>
 801d1e4:	4628      	mov	r0, r5
 801d1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d1ea:	f842 0f04 	str.w	r0, [r2, #4]!
 801d1ee:	3301      	adds	r3, #1
 801d1f0:	e7c5      	b.n	801d17e <__lshift+0x4a>
 801d1f2:	3904      	subs	r1, #4
 801d1f4:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1f8:	f841 2f04 	str.w	r2, [r1, #4]!
 801d1fc:	459c      	cmp	ip, r3
 801d1fe:	d8f9      	bhi.n	801d1f4 <__lshift+0xc0>
 801d200:	e7ea      	b.n	801d1d8 <__lshift+0xa4>
 801d202:	bf00      	nop
 801d204:	080233d4 	.word	0x080233d4
 801d208:	08023445 	.word	0x08023445

0801d20c <__mcmp>:
 801d20c:	690a      	ldr	r2, [r1, #16]
 801d20e:	4603      	mov	r3, r0
 801d210:	6900      	ldr	r0, [r0, #16]
 801d212:	1a80      	subs	r0, r0, r2
 801d214:	b530      	push	{r4, r5, lr}
 801d216:	d10e      	bne.n	801d236 <__mcmp+0x2a>
 801d218:	3314      	adds	r3, #20
 801d21a:	3114      	adds	r1, #20
 801d21c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801d220:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801d224:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d228:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d22c:	4295      	cmp	r5, r2
 801d22e:	d003      	beq.n	801d238 <__mcmp+0x2c>
 801d230:	d205      	bcs.n	801d23e <__mcmp+0x32>
 801d232:	f04f 30ff 	mov.w	r0, #4294967295
 801d236:	bd30      	pop	{r4, r5, pc}
 801d238:	42a3      	cmp	r3, r4
 801d23a:	d3f3      	bcc.n	801d224 <__mcmp+0x18>
 801d23c:	e7fb      	b.n	801d236 <__mcmp+0x2a>
 801d23e:	2001      	movs	r0, #1
 801d240:	e7f9      	b.n	801d236 <__mcmp+0x2a>
	...

0801d244 <__mdiff>:
 801d244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d248:	4689      	mov	r9, r1
 801d24a:	4606      	mov	r6, r0
 801d24c:	4611      	mov	r1, r2
 801d24e:	4648      	mov	r0, r9
 801d250:	4614      	mov	r4, r2
 801d252:	f7ff ffdb 	bl	801d20c <__mcmp>
 801d256:	1e05      	subs	r5, r0, #0
 801d258:	d112      	bne.n	801d280 <__mdiff+0x3c>
 801d25a:	4629      	mov	r1, r5
 801d25c:	4630      	mov	r0, r6
 801d25e:	f7ff fd11 	bl	801cc84 <_Balloc>
 801d262:	4602      	mov	r2, r0
 801d264:	b928      	cbnz	r0, 801d272 <__mdiff+0x2e>
 801d266:	4b3f      	ldr	r3, [pc, #252]	@ (801d364 <__mdiff+0x120>)
 801d268:	f240 2137 	movw	r1, #567	@ 0x237
 801d26c:	483e      	ldr	r0, [pc, #248]	@ (801d368 <__mdiff+0x124>)
 801d26e:	f7fe fb09 	bl	801b884 <__assert_func>
 801d272:	2301      	movs	r3, #1
 801d274:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d278:	4610      	mov	r0, r2
 801d27a:	b003      	add	sp, #12
 801d27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d280:	bfbc      	itt	lt
 801d282:	464b      	movlt	r3, r9
 801d284:	46a1      	movlt	r9, r4
 801d286:	4630      	mov	r0, r6
 801d288:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d28c:	bfba      	itte	lt
 801d28e:	461c      	movlt	r4, r3
 801d290:	2501      	movlt	r5, #1
 801d292:	2500      	movge	r5, #0
 801d294:	f7ff fcf6 	bl	801cc84 <_Balloc>
 801d298:	4602      	mov	r2, r0
 801d29a:	b918      	cbnz	r0, 801d2a4 <__mdiff+0x60>
 801d29c:	4b31      	ldr	r3, [pc, #196]	@ (801d364 <__mdiff+0x120>)
 801d29e:	f240 2145 	movw	r1, #581	@ 0x245
 801d2a2:	e7e3      	b.n	801d26c <__mdiff+0x28>
 801d2a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d2a8:	6926      	ldr	r6, [r4, #16]
 801d2aa:	60c5      	str	r5, [r0, #12]
 801d2ac:	f109 0310 	add.w	r3, r9, #16
 801d2b0:	f109 0514 	add.w	r5, r9, #20
 801d2b4:	f104 0e14 	add.w	lr, r4, #20
 801d2b8:	f100 0b14 	add.w	fp, r0, #20
 801d2bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801d2c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801d2c4:	9301      	str	r3, [sp, #4]
 801d2c6:	46d9      	mov	r9, fp
 801d2c8:	f04f 0c00 	mov.w	ip, #0
 801d2cc:	9b01      	ldr	r3, [sp, #4]
 801d2ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 801d2d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801d2d6:	9301      	str	r3, [sp, #4]
 801d2d8:	fa1f f38a 	uxth.w	r3, sl
 801d2dc:	4619      	mov	r1, r3
 801d2de:	b283      	uxth	r3, r0
 801d2e0:	1acb      	subs	r3, r1, r3
 801d2e2:	0c00      	lsrs	r0, r0, #16
 801d2e4:	4463      	add	r3, ip
 801d2e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d2ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d2ee:	b29b      	uxth	r3, r3
 801d2f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d2f4:	4576      	cmp	r6, lr
 801d2f6:	f849 3b04 	str.w	r3, [r9], #4
 801d2fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d2fe:	d8e5      	bhi.n	801d2cc <__mdiff+0x88>
 801d300:	1b33      	subs	r3, r6, r4
 801d302:	3b15      	subs	r3, #21
 801d304:	f023 0303 	bic.w	r3, r3, #3
 801d308:	3415      	adds	r4, #21
 801d30a:	3304      	adds	r3, #4
 801d30c:	42a6      	cmp	r6, r4
 801d30e:	bf38      	it	cc
 801d310:	2304      	movcc	r3, #4
 801d312:	441d      	add	r5, r3
 801d314:	445b      	add	r3, fp
 801d316:	461e      	mov	r6, r3
 801d318:	462c      	mov	r4, r5
 801d31a:	4544      	cmp	r4, r8
 801d31c:	d30e      	bcc.n	801d33c <__mdiff+0xf8>
 801d31e:	f108 0103 	add.w	r1, r8, #3
 801d322:	1b49      	subs	r1, r1, r5
 801d324:	f021 0103 	bic.w	r1, r1, #3
 801d328:	3d03      	subs	r5, #3
 801d32a:	45a8      	cmp	r8, r5
 801d32c:	bf38      	it	cc
 801d32e:	2100      	movcc	r1, #0
 801d330:	440b      	add	r3, r1
 801d332:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d336:	b191      	cbz	r1, 801d35e <__mdiff+0x11a>
 801d338:	6117      	str	r7, [r2, #16]
 801d33a:	e79d      	b.n	801d278 <__mdiff+0x34>
 801d33c:	f854 1b04 	ldr.w	r1, [r4], #4
 801d340:	46e6      	mov	lr, ip
 801d342:	0c08      	lsrs	r0, r1, #16
 801d344:	fa1c fc81 	uxtah	ip, ip, r1
 801d348:	4471      	add	r1, lr
 801d34a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d34e:	b289      	uxth	r1, r1
 801d350:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d354:	f846 1b04 	str.w	r1, [r6], #4
 801d358:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d35c:	e7dd      	b.n	801d31a <__mdiff+0xd6>
 801d35e:	3f01      	subs	r7, #1
 801d360:	e7e7      	b.n	801d332 <__mdiff+0xee>
 801d362:	bf00      	nop
 801d364:	080233d4 	.word	0x080233d4
 801d368:	08023445 	.word	0x08023445

0801d36c <__ulp>:
 801d36c:	b082      	sub	sp, #8
 801d36e:	ed8d 0b00 	vstr	d0, [sp]
 801d372:	9a01      	ldr	r2, [sp, #4]
 801d374:	4b0f      	ldr	r3, [pc, #60]	@ (801d3b4 <__ulp+0x48>)
 801d376:	4013      	ands	r3, r2
 801d378:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801d37c:	2b00      	cmp	r3, #0
 801d37e:	dc08      	bgt.n	801d392 <__ulp+0x26>
 801d380:	425b      	negs	r3, r3
 801d382:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801d386:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d38a:	da04      	bge.n	801d396 <__ulp+0x2a>
 801d38c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801d390:	4113      	asrs	r3, r2
 801d392:	2200      	movs	r2, #0
 801d394:	e008      	b.n	801d3a8 <__ulp+0x3c>
 801d396:	f1a2 0314 	sub.w	r3, r2, #20
 801d39a:	2b1e      	cmp	r3, #30
 801d39c:	bfda      	itte	le
 801d39e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801d3a2:	40da      	lsrle	r2, r3
 801d3a4:	2201      	movgt	r2, #1
 801d3a6:	2300      	movs	r3, #0
 801d3a8:	4619      	mov	r1, r3
 801d3aa:	4610      	mov	r0, r2
 801d3ac:	ec41 0b10 	vmov	d0, r0, r1
 801d3b0:	b002      	add	sp, #8
 801d3b2:	4770      	bx	lr
 801d3b4:	7ff00000 	.word	0x7ff00000

0801d3b8 <__b2d>:
 801d3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3bc:	6906      	ldr	r6, [r0, #16]
 801d3be:	f100 0814 	add.w	r8, r0, #20
 801d3c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d3c6:	1f37      	subs	r7, r6, #4
 801d3c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d3cc:	4610      	mov	r0, r2
 801d3ce:	f7ff fd4b 	bl	801ce68 <__hi0bits>
 801d3d2:	f1c0 0320 	rsb	r3, r0, #32
 801d3d6:	280a      	cmp	r0, #10
 801d3d8:	600b      	str	r3, [r1, #0]
 801d3da:	491b      	ldr	r1, [pc, #108]	@ (801d448 <__b2d+0x90>)
 801d3dc:	dc15      	bgt.n	801d40a <__b2d+0x52>
 801d3de:	f1c0 0c0b 	rsb	ip, r0, #11
 801d3e2:	fa22 f30c 	lsr.w	r3, r2, ip
 801d3e6:	45b8      	cmp	r8, r7
 801d3e8:	ea43 0501 	orr.w	r5, r3, r1
 801d3ec:	bf34      	ite	cc
 801d3ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d3f2:	2300      	movcs	r3, #0
 801d3f4:	3015      	adds	r0, #21
 801d3f6:	fa02 f000 	lsl.w	r0, r2, r0
 801d3fa:	fa23 f30c 	lsr.w	r3, r3, ip
 801d3fe:	4303      	orrs	r3, r0
 801d400:	461c      	mov	r4, r3
 801d402:	ec45 4b10 	vmov	d0, r4, r5
 801d406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d40a:	45b8      	cmp	r8, r7
 801d40c:	bf3a      	itte	cc
 801d40e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d412:	f1a6 0708 	subcc.w	r7, r6, #8
 801d416:	2300      	movcs	r3, #0
 801d418:	380b      	subs	r0, #11
 801d41a:	d012      	beq.n	801d442 <__b2d+0x8a>
 801d41c:	f1c0 0120 	rsb	r1, r0, #32
 801d420:	fa23 f401 	lsr.w	r4, r3, r1
 801d424:	4082      	lsls	r2, r0
 801d426:	4322      	orrs	r2, r4
 801d428:	4547      	cmp	r7, r8
 801d42a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801d42e:	bf8c      	ite	hi
 801d430:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d434:	2200      	movls	r2, #0
 801d436:	4083      	lsls	r3, r0
 801d438:	40ca      	lsrs	r2, r1
 801d43a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801d43e:	4313      	orrs	r3, r2
 801d440:	e7de      	b.n	801d400 <__b2d+0x48>
 801d442:	ea42 0501 	orr.w	r5, r2, r1
 801d446:	e7db      	b.n	801d400 <__b2d+0x48>
 801d448:	3ff00000 	.word	0x3ff00000

0801d44c <__d2b>:
 801d44c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d450:	460f      	mov	r7, r1
 801d452:	2101      	movs	r1, #1
 801d454:	ec59 8b10 	vmov	r8, r9, d0
 801d458:	4616      	mov	r6, r2
 801d45a:	f7ff fc13 	bl	801cc84 <_Balloc>
 801d45e:	4604      	mov	r4, r0
 801d460:	b930      	cbnz	r0, 801d470 <__d2b+0x24>
 801d462:	4602      	mov	r2, r0
 801d464:	4b23      	ldr	r3, [pc, #140]	@ (801d4f4 <__d2b+0xa8>)
 801d466:	4824      	ldr	r0, [pc, #144]	@ (801d4f8 <__d2b+0xac>)
 801d468:	f240 310f 	movw	r1, #783	@ 0x30f
 801d46c:	f7fe fa0a 	bl	801b884 <__assert_func>
 801d470:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d474:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d478:	b10d      	cbz	r5, 801d47e <__d2b+0x32>
 801d47a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d47e:	9301      	str	r3, [sp, #4]
 801d480:	f1b8 0300 	subs.w	r3, r8, #0
 801d484:	d023      	beq.n	801d4ce <__d2b+0x82>
 801d486:	4668      	mov	r0, sp
 801d488:	9300      	str	r3, [sp, #0]
 801d48a:	f7ff fd0c 	bl	801cea6 <__lo0bits>
 801d48e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d492:	b1d0      	cbz	r0, 801d4ca <__d2b+0x7e>
 801d494:	f1c0 0320 	rsb	r3, r0, #32
 801d498:	fa02 f303 	lsl.w	r3, r2, r3
 801d49c:	430b      	orrs	r3, r1
 801d49e:	40c2      	lsrs	r2, r0
 801d4a0:	6163      	str	r3, [r4, #20]
 801d4a2:	9201      	str	r2, [sp, #4]
 801d4a4:	9b01      	ldr	r3, [sp, #4]
 801d4a6:	61a3      	str	r3, [r4, #24]
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	bf0c      	ite	eq
 801d4ac:	2201      	moveq	r2, #1
 801d4ae:	2202      	movne	r2, #2
 801d4b0:	6122      	str	r2, [r4, #16]
 801d4b2:	b1a5      	cbz	r5, 801d4de <__d2b+0x92>
 801d4b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d4b8:	4405      	add	r5, r0
 801d4ba:	603d      	str	r5, [r7, #0]
 801d4bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d4c0:	6030      	str	r0, [r6, #0]
 801d4c2:	4620      	mov	r0, r4
 801d4c4:	b003      	add	sp, #12
 801d4c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d4ca:	6161      	str	r1, [r4, #20]
 801d4cc:	e7ea      	b.n	801d4a4 <__d2b+0x58>
 801d4ce:	a801      	add	r0, sp, #4
 801d4d0:	f7ff fce9 	bl	801cea6 <__lo0bits>
 801d4d4:	9b01      	ldr	r3, [sp, #4]
 801d4d6:	6163      	str	r3, [r4, #20]
 801d4d8:	3020      	adds	r0, #32
 801d4da:	2201      	movs	r2, #1
 801d4dc:	e7e8      	b.n	801d4b0 <__d2b+0x64>
 801d4de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d4e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d4e6:	6038      	str	r0, [r7, #0]
 801d4e8:	6918      	ldr	r0, [r3, #16]
 801d4ea:	f7ff fcbd 	bl	801ce68 <__hi0bits>
 801d4ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d4f2:	e7e5      	b.n	801d4c0 <__d2b+0x74>
 801d4f4:	080233d4 	.word	0x080233d4
 801d4f8:	08023445 	.word	0x08023445

0801d4fc <__ratio>:
 801d4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d500:	b085      	sub	sp, #20
 801d502:	e9cd 1000 	strd	r1, r0, [sp]
 801d506:	a902      	add	r1, sp, #8
 801d508:	f7ff ff56 	bl	801d3b8 <__b2d>
 801d50c:	9800      	ldr	r0, [sp, #0]
 801d50e:	a903      	add	r1, sp, #12
 801d510:	ec55 4b10 	vmov	r4, r5, d0
 801d514:	f7ff ff50 	bl	801d3b8 <__b2d>
 801d518:	9b01      	ldr	r3, [sp, #4]
 801d51a:	6919      	ldr	r1, [r3, #16]
 801d51c:	9b00      	ldr	r3, [sp, #0]
 801d51e:	691b      	ldr	r3, [r3, #16]
 801d520:	1ac9      	subs	r1, r1, r3
 801d522:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801d526:	1a9b      	subs	r3, r3, r2
 801d528:	ec5b ab10 	vmov	sl, fp, d0
 801d52c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801d530:	2b00      	cmp	r3, #0
 801d532:	bfce      	itee	gt
 801d534:	462a      	movgt	r2, r5
 801d536:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d53a:	465a      	movle	r2, fp
 801d53c:	462f      	mov	r7, r5
 801d53e:	46d9      	mov	r9, fp
 801d540:	bfcc      	ite	gt
 801d542:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d546:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801d54a:	464b      	mov	r3, r9
 801d54c:	4652      	mov	r2, sl
 801d54e:	4620      	mov	r0, r4
 801d550:	4639      	mov	r1, r7
 801d552:	f7e3 f953 	bl	80007fc <__aeabi_ddiv>
 801d556:	ec41 0b10 	vmov	d0, r0, r1
 801d55a:	b005      	add	sp, #20
 801d55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d560 <__copybits>:
 801d560:	3901      	subs	r1, #1
 801d562:	b570      	push	{r4, r5, r6, lr}
 801d564:	1149      	asrs	r1, r1, #5
 801d566:	6914      	ldr	r4, [r2, #16]
 801d568:	3101      	adds	r1, #1
 801d56a:	f102 0314 	add.w	r3, r2, #20
 801d56e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d572:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d576:	1f05      	subs	r5, r0, #4
 801d578:	42a3      	cmp	r3, r4
 801d57a:	d30c      	bcc.n	801d596 <__copybits+0x36>
 801d57c:	1aa3      	subs	r3, r4, r2
 801d57e:	3b11      	subs	r3, #17
 801d580:	f023 0303 	bic.w	r3, r3, #3
 801d584:	3211      	adds	r2, #17
 801d586:	42a2      	cmp	r2, r4
 801d588:	bf88      	it	hi
 801d58a:	2300      	movhi	r3, #0
 801d58c:	4418      	add	r0, r3
 801d58e:	2300      	movs	r3, #0
 801d590:	4288      	cmp	r0, r1
 801d592:	d305      	bcc.n	801d5a0 <__copybits+0x40>
 801d594:	bd70      	pop	{r4, r5, r6, pc}
 801d596:	f853 6b04 	ldr.w	r6, [r3], #4
 801d59a:	f845 6f04 	str.w	r6, [r5, #4]!
 801d59e:	e7eb      	b.n	801d578 <__copybits+0x18>
 801d5a0:	f840 3b04 	str.w	r3, [r0], #4
 801d5a4:	e7f4      	b.n	801d590 <__copybits+0x30>

0801d5a6 <__any_on>:
 801d5a6:	f100 0214 	add.w	r2, r0, #20
 801d5aa:	6900      	ldr	r0, [r0, #16]
 801d5ac:	114b      	asrs	r3, r1, #5
 801d5ae:	4298      	cmp	r0, r3
 801d5b0:	b510      	push	{r4, lr}
 801d5b2:	db11      	blt.n	801d5d8 <__any_on+0x32>
 801d5b4:	dd0a      	ble.n	801d5cc <__any_on+0x26>
 801d5b6:	f011 011f 	ands.w	r1, r1, #31
 801d5ba:	d007      	beq.n	801d5cc <__any_on+0x26>
 801d5bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d5c0:	fa24 f001 	lsr.w	r0, r4, r1
 801d5c4:	fa00 f101 	lsl.w	r1, r0, r1
 801d5c8:	428c      	cmp	r4, r1
 801d5ca:	d10b      	bne.n	801d5e4 <__any_on+0x3e>
 801d5cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d5d0:	4293      	cmp	r3, r2
 801d5d2:	d803      	bhi.n	801d5dc <__any_on+0x36>
 801d5d4:	2000      	movs	r0, #0
 801d5d6:	bd10      	pop	{r4, pc}
 801d5d8:	4603      	mov	r3, r0
 801d5da:	e7f7      	b.n	801d5cc <__any_on+0x26>
 801d5dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d5e0:	2900      	cmp	r1, #0
 801d5e2:	d0f5      	beq.n	801d5d0 <__any_on+0x2a>
 801d5e4:	2001      	movs	r0, #1
 801d5e6:	e7f6      	b.n	801d5d6 <__any_on+0x30>

0801d5e8 <__ascii_wctomb>:
 801d5e8:	4603      	mov	r3, r0
 801d5ea:	4608      	mov	r0, r1
 801d5ec:	b141      	cbz	r1, 801d600 <__ascii_wctomb+0x18>
 801d5ee:	2aff      	cmp	r2, #255	@ 0xff
 801d5f0:	d904      	bls.n	801d5fc <__ascii_wctomb+0x14>
 801d5f2:	228a      	movs	r2, #138	@ 0x8a
 801d5f4:	601a      	str	r2, [r3, #0]
 801d5f6:	f04f 30ff 	mov.w	r0, #4294967295
 801d5fa:	4770      	bx	lr
 801d5fc:	700a      	strb	r2, [r1, #0]
 801d5fe:	2001      	movs	r0, #1
 801d600:	4770      	bx	lr

0801d602 <__ssputs_r>:
 801d602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d606:	688e      	ldr	r6, [r1, #8]
 801d608:	461f      	mov	r7, r3
 801d60a:	42be      	cmp	r6, r7
 801d60c:	680b      	ldr	r3, [r1, #0]
 801d60e:	4682      	mov	sl, r0
 801d610:	460c      	mov	r4, r1
 801d612:	4690      	mov	r8, r2
 801d614:	d82d      	bhi.n	801d672 <__ssputs_r+0x70>
 801d616:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d61a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d61e:	d026      	beq.n	801d66e <__ssputs_r+0x6c>
 801d620:	6965      	ldr	r5, [r4, #20]
 801d622:	6909      	ldr	r1, [r1, #16]
 801d624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d628:	eba3 0901 	sub.w	r9, r3, r1
 801d62c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d630:	1c7b      	adds	r3, r7, #1
 801d632:	444b      	add	r3, r9
 801d634:	106d      	asrs	r5, r5, #1
 801d636:	429d      	cmp	r5, r3
 801d638:	bf38      	it	cc
 801d63a:	461d      	movcc	r5, r3
 801d63c:	0553      	lsls	r3, r2, #21
 801d63e:	d527      	bpl.n	801d690 <__ssputs_r+0x8e>
 801d640:	4629      	mov	r1, r5
 801d642:	f7fc f8a1 	bl	8019788 <_malloc_r>
 801d646:	4606      	mov	r6, r0
 801d648:	b360      	cbz	r0, 801d6a4 <__ssputs_r+0xa2>
 801d64a:	6921      	ldr	r1, [r4, #16]
 801d64c:	464a      	mov	r2, r9
 801d64e:	f7fe f8fc 	bl	801b84a <memcpy>
 801d652:	89a3      	ldrh	r3, [r4, #12]
 801d654:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d65c:	81a3      	strh	r3, [r4, #12]
 801d65e:	6126      	str	r6, [r4, #16]
 801d660:	6165      	str	r5, [r4, #20]
 801d662:	444e      	add	r6, r9
 801d664:	eba5 0509 	sub.w	r5, r5, r9
 801d668:	6026      	str	r6, [r4, #0]
 801d66a:	60a5      	str	r5, [r4, #8]
 801d66c:	463e      	mov	r6, r7
 801d66e:	42be      	cmp	r6, r7
 801d670:	d900      	bls.n	801d674 <__ssputs_r+0x72>
 801d672:	463e      	mov	r6, r7
 801d674:	6820      	ldr	r0, [r4, #0]
 801d676:	4632      	mov	r2, r6
 801d678:	4641      	mov	r1, r8
 801d67a:	f000 fbad 	bl	801ddd8 <memmove>
 801d67e:	68a3      	ldr	r3, [r4, #8]
 801d680:	1b9b      	subs	r3, r3, r6
 801d682:	60a3      	str	r3, [r4, #8]
 801d684:	6823      	ldr	r3, [r4, #0]
 801d686:	4433      	add	r3, r6
 801d688:	6023      	str	r3, [r4, #0]
 801d68a:	2000      	movs	r0, #0
 801d68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d690:	462a      	mov	r2, r5
 801d692:	f000 fbd6 	bl	801de42 <_realloc_r>
 801d696:	4606      	mov	r6, r0
 801d698:	2800      	cmp	r0, #0
 801d69a:	d1e0      	bne.n	801d65e <__ssputs_r+0x5c>
 801d69c:	6921      	ldr	r1, [r4, #16]
 801d69e:	4650      	mov	r0, sl
 801d6a0:	f7fe ff5a 	bl	801c558 <_free_r>
 801d6a4:	230c      	movs	r3, #12
 801d6a6:	f8ca 3000 	str.w	r3, [sl]
 801d6aa:	89a3      	ldrh	r3, [r4, #12]
 801d6ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d6b0:	81a3      	strh	r3, [r4, #12]
 801d6b2:	f04f 30ff 	mov.w	r0, #4294967295
 801d6b6:	e7e9      	b.n	801d68c <__ssputs_r+0x8a>

0801d6b8 <_svfiprintf_r>:
 801d6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6bc:	4698      	mov	r8, r3
 801d6be:	898b      	ldrh	r3, [r1, #12]
 801d6c0:	061b      	lsls	r3, r3, #24
 801d6c2:	b09d      	sub	sp, #116	@ 0x74
 801d6c4:	4607      	mov	r7, r0
 801d6c6:	460d      	mov	r5, r1
 801d6c8:	4614      	mov	r4, r2
 801d6ca:	d510      	bpl.n	801d6ee <_svfiprintf_r+0x36>
 801d6cc:	690b      	ldr	r3, [r1, #16]
 801d6ce:	b973      	cbnz	r3, 801d6ee <_svfiprintf_r+0x36>
 801d6d0:	2140      	movs	r1, #64	@ 0x40
 801d6d2:	f7fc f859 	bl	8019788 <_malloc_r>
 801d6d6:	6028      	str	r0, [r5, #0]
 801d6d8:	6128      	str	r0, [r5, #16]
 801d6da:	b930      	cbnz	r0, 801d6ea <_svfiprintf_r+0x32>
 801d6dc:	230c      	movs	r3, #12
 801d6de:	603b      	str	r3, [r7, #0]
 801d6e0:	f04f 30ff 	mov.w	r0, #4294967295
 801d6e4:	b01d      	add	sp, #116	@ 0x74
 801d6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6ea:	2340      	movs	r3, #64	@ 0x40
 801d6ec:	616b      	str	r3, [r5, #20]
 801d6ee:	2300      	movs	r3, #0
 801d6f0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d6f2:	2320      	movs	r3, #32
 801d6f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d6f8:	f8cd 800c 	str.w	r8, [sp, #12]
 801d6fc:	2330      	movs	r3, #48	@ 0x30
 801d6fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d89c <_svfiprintf_r+0x1e4>
 801d702:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d706:	f04f 0901 	mov.w	r9, #1
 801d70a:	4623      	mov	r3, r4
 801d70c:	469a      	mov	sl, r3
 801d70e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d712:	b10a      	cbz	r2, 801d718 <_svfiprintf_r+0x60>
 801d714:	2a25      	cmp	r2, #37	@ 0x25
 801d716:	d1f9      	bne.n	801d70c <_svfiprintf_r+0x54>
 801d718:	ebba 0b04 	subs.w	fp, sl, r4
 801d71c:	d00b      	beq.n	801d736 <_svfiprintf_r+0x7e>
 801d71e:	465b      	mov	r3, fp
 801d720:	4622      	mov	r2, r4
 801d722:	4629      	mov	r1, r5
 801d724:	4638      	mov	r0, r7
 801d726:	f7ff ff6c 	bl	801d602 <__ssputs_r>
 801d72a:	3001      	adds	r0, #1
 801d72c:	f000 80a7 	beq.w	801d87e <_svfiprintf_r+0x1c6>
 801d730:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d732:	445a      	add	r2, fp
 801d734:	9209      	str	r2, [sp, #36]	@ 0x24
 801d736:	f89a 3000 	ldrb.w	r3, [sl]
 801d73a:	2b00      	cmp	r3, #0
 801d73c:	f000 809f 	beq.w	801d87e <_svfiprintf_r+0x1c6>
 801d740:	2300      	movs	r3, #0
 801d742:	f04f 32ff 	mov.w	r2, #4294967295
 801d746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d74a:	f10a 0a01 	add.w	sl, sl, #1
 801d74e:	9304      	str	r3, [sp, #16]
 801d750:	9307      	str	r3, [sp, #28]
 801d752:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d756:	931a      	str	r3, [sp, #104]	@ 0x68
 801d758:	4654      	mov	r4, sl
 801d75a:	2205      	movs	r2, #5
 801d75c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d760:	484e      	ldr	r0, [pc, #312]	@ (801d89c <_svfiprintf_r+0x1e4>)
 801d762:	f7e2 fd0d 	bl	8000180 <memchr>
 801d766:	9a04      	ldr	r2, [sp, #16]
 801d768:	b9d8      	cbnz	r0, 801d7a2 <_svfiprintf_r+0xea>
 801d76a:	06d0      	lsls	r0, r2, #27
 801d76c:	bf44      	itt	mi
 801d76e:	2320      	movmi	r3, #32
 801d770:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d774:	0711      	lsls	r1, r2, #28
 801d776:	bf44      	itt	mi
 801d778:	232b      	movmi	r3, #43	@ 0x2b
 801d77a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d77e:	f89a 3000 	ldrb.w	r3, [sl]
 801d782:	2b2a      	cmp	r3, #42	@ 0x2a
 801d784:	d015      	beq.n	801d7b2 <_svfiprintf_r+0xfa>
 801d786:	9a07      	ldr	r2, [sp, #28]
 801d788:	4654      	mov	r4, sl
 801d78a:	2000      	movs	r0, #0
 801d78c:	f04f 0c0a 	mov.w	ip, #10
 801d790:	4621      	mov	r1, r4
 801d792:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d796:	3b30      	subs	r3, #48	@ 0x30
 801d798:	2b09      	cmp	r3, #9
 801d79a:	d94b      	bls.n	801d834 <_svfiprintf_r+0x17c>
 801d79c:	b1b0      	cbz	r0, 801d7cc <_svfiprintf_r+0x114>
 801d79e:	9207      	str	r2, [sp, #28]
 801d7a0:	e014      	b.n	801d7cc <_svfiprintf_r+0x114>
 801d7a2:	eba0 0308 	sub.w	r3, r0, r8
 801d7a6:	fa09 f303 	lsl.w	r3, r9, r3
 801d7aa:	4313      	orrs	r3, r2
 801d7ac:	9304      	str	r3, [sp, #16]
 801d7ae:	46a2      	mov	sl, r4
 801d7b0:	e7d2      	b.n	801d758 <_svfiprintf_r+0xa0>
 801d7b2:	9b03      	ldr	r3, [sp, #12]
 801d7b4:	1d19      	adds	r1, r3, #4
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	9103      	str	r1, [sp, #12]
 801d7ba:	2b00      	cmp	r3, #0
 801d7bc:	bfbb      	ittet	lt
 801d7be:	425b      	neglt	r3, r3
 801d7c0:	f042 0202 	orrlt.w	r2, r2, #2
 801d7c4:	9307      	strge	r3, [sp, #28]
 801d7c6:	9307      	strlt	r3, [sp, #28]
 801d7c8:	bfb8      	it	lt
 801d7ca:	9204      	strlt	r2, [sp, #16]
 801d7cc:	7823      	ldrb	r3, [r4, #0]
 801d7ce:	2b2e      	cmp	r3, #46	@ 0x2e
 801d7d0:	d10a      	bne.n	801d7e8 <_svfiprintf_r+0x130>
 801d7d2:	7863      	ldrb	r3, [r4, #1]
 801d7d4:	2b2a      	cmp	r3, #42	@ 0x2a
 801d7d6:	d132      	bne.n	801d83e <_svfiprintf_r+0x186>
 801d7d8:	9b03      	ldr	r3, [sp, #12]
 801d7da:	1d1a      	adds	r2, r3, #4
 801d7dc:	681b      	ldr	r3, [r3, #0]
 801d7de:	9203      	str	r2, [sp, #12]
 801d7e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d7e4:	3402      	adds	r4, #2
 801d7e6:	9305      	str	r3, [sp, #20]
 801d7e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d8ac <_svfiprintf_r+0x1f4>
 801d7ec:	7821      	ldrb	r1, [r4, #0]
 801d7ee:	2203      	movs	r2, #3
 801d7f0:	4650      	mov	r0, sl
 801d7f2:	f7e2 fcc5 	bl	8000180 <memchr>
 801d7f6:	b138      	cbz	r0, 801d808 <_svfiprintf_r+0x150>
 801d7f8:	9b04      	ldr	r3, [sp, #16]
 801d7fa:	eba0 000a 	sub.w	r0, r0, sl
 801d7fe:	2240      	movs	r2, #64	@ 0x40
 801d800:	4082      	lsls	r2, r0
 801d802:	4313      	orrs	r3, r2
 801d804:	3401      	adds	r4, #1
 801d806:	9304      	str	r3, [sp, #16]
 801d808:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d80c:	4824      	ldr	r0, [pc, #144]	@ (801d8a0 <_svfiprintf_r+0x1e8>)
 801d80e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d812:	2206      	movs	r2, #6
 801d814:	f7e2 fcb4 	bl	8000180 <memchr>
 801d818:	2800      	cmp	r0, #0
 801d81a:	d036      	beq.n	801d88a <_svfiprintf_r+0x1d2>
 801d81c:	4b21      	ldr	r3, [pc, #132]	@ (801d8a4 <_svfiprintf_r+0x1ec>)
 801d81e:	bb1b      	cbnz	r3, 801d868 <_svfiprintf_r+0x1b0>
 801d820:	9b03      	ldr	r3, [sp, #12]
 801d822:	3307      	adds	r3, #7
 801d824:	f023 0307 	bic.w	r3, r3, #7
 801d828:	3308      	adds	r3, #8
 801d82a:	9303      	str	r3, [sp, #12]
 801d82c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d82e:	4433      	add	r3, r6
 801d830:	9309      	str	r3, [sp, #36]	@ 0x24
 801d832:	e76a      	b.n	801d70a <_svfiprintf_r+0x52>
 801d834:	fb0c 3202 	mla	r2, ip, r2, r3
 801d838:	460c      	mov	r4, r1
 801d83a:	2001      	movs	r0, #1
 801d83c:	e7a8      	b.n	801d790 <_svfiprintf_r+0xd8>
 801d83e:	2300      	movs	r3, #0
 801d840:	3401      	adds	r4, #1
 801d842:	9305      	str	r3, [sp, #20]
 801d844:	4619      	mov	r1, r3
 801d846:	f04f 0c0a 	mov.w	ip, #10
 801d84a:	4620      	mov	r0, r4
 801d84c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d850:	3a30      	subs	r2, #48	@ 0x30
 801d852:	2a09      	cmp	r2, #9
 801d854:	d903      	bls.n	801d85e <_svfiprintf_r+0x1a6>
 801d856:	2b00      	cmp	r3, #0
 801d858:	d0c6      	beq.n	801d7e8 <_svfiprintf_r+0x130>
 801d85a:	9105      	str	r1, [sp, #20]
 801d85c:	e7c4      	b.n	801d7e8 <_svfiprintf_r+0x130>
 801d85e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d862:	4604      	mov	r4, r0
 801d864:	2301      	movs	r3, #1
 801d866:	e7f0      	b.n	801d84a <_svfiprintf_r+0x192>
 801d868:	ab03      	add	r3, sp, #12
 801d86a:	9300      	str	r3, [sp, #0]
 801d86c:	462a      	mov	r2, r5
 801d86e:	4b0e      	ldr	r3, [pc, #56]	@ (801d8a8 <_svfiprintf_r+0x1f0>)
 801d870:	a904      	add	r1, sp, #16
 801d872:	4638      	mov	r0, r7
 801d874:	f7fc ffa8 	bl	801a7c8 <_printf_float>
 801d878:	1c42      	adds	r2, r0, #1
 801d87a:	4606      	mov	r6, r0
 801d87c:	d1d6      	bne.n	801d82c <_svfiprintf_r+0x174>
 801d87e:	89ab      	ldrh	r3, [r5, #12]
 801d880:	065b      	lsls	r3, r3, #25
 801d882:	f53f af2d 	bmi.w	801d6e0 <_svfiprintf_r+0x28>
 801d886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d888:	e72c      	b.n	801d6e4 <_svfiprintf_r+0x2c>
 801d88a:	ab03      	add	r3, sp, #12
 801d88c:	9300      	str	r3, [sp, #0]
 801d88e:	462a      	mov	r2, r5
 801d890:	4b05      	ldr	r3, [pc, #20]	@ (801d8a8 <_svfiprintf_r+0x1f0>)
 801d892:	a904      	add	r1, sp, #16
 801d894:	4638      	mov	r0, r7
 801d896:	f7fd fa2f 	bl	801acf8 <_printf_i>
 801d89a:	e7ed      	b.n	801d878 <_svfiprintf_r+0x1c0>
 801d89c:	080235a0 	.word	0x080235a0
 801d8a0:	080235aa 	.word	0x080235aa
 801d8a4:	0801a7c9 	.word	0x0801a7c9
 801d8a8:	0801d603 	.word	0x0801d603
 801d8ac:	080235a6 	.word	0x080235a6

0801d8b0 <__sfputc_r>:
 801d8b0:	6893      	ldr	r3, [r2, #8]
 801d8b2:	3b01      	subs	r3, #1
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	b410      	push	{r4}
 801d8b8:	6093      	str	r3, [r2, #8]
 801d8ba:	da08      	bge.n	801d8ce <__sfputc_r+0x1e>
 801d8bc:	6994      	ldr	r4, [r2, #24]
 801d8be:	42a3      	cmp	r3, r4
 801d8c0:	db01      	blt.n	801d8c6 <__sfputc_r+0x16>
 801d8c2:	290a      	cmp	r1, #10
 801d8c4:	d103      	bne.n	801d8ce <__sfputc_r+0x1e>
 801d8c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8ca:	f000 b9f1 	b.w	801dcb0 <__swbuf_r>
 801d8ce:	6813      	ldr	r3, [r2, #0]
 801d8d0:	1c58      	adds	r0, r3, #1
 801d8d2:	6010      	str	r0, [r2, #0]
 801d8d4:	7019      	strb	r1, [r3, #0]
 801d8d6:	4608      	mov	r0, r1
 801d8d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8dc:	4770      	bx	lr

0801d8de <__sfputs_r>:
 801d8de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8e0:	4606      	mov	r6, r0
 801d8e2:	460f      	mov	r7, r1
 801d8e4:	4614      	mov	r4, r2
 801d8e6:	18d5      	adds	r5, r2, r3
 801d8e8:	42ac      	cmp	r4, r5
 801d8ea:	d101      	bne.n	801d8f0 <__sfputs_r+0x12>
 801d8ec:	2000      	movs	r0, #0
 801d8ee:	e007      	b.n	801d900 <__sfputs_r+0x22>
 801d8f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8f4:	463a      	mov	r2, r7
 801d8f6:	4630      	mov	r0, r6
 801d8f8:	f7ff ffda 	bl	801d8b0 <__sfputc_r>
 801d8fc:	1c43      	adds	r3, r0, #1
 801d8fe:	d1f3      	bne.n	801d8e8 <__sfputs_r+0xa>
 801d900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d904 <_vfiprintf_r>:
 801d904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d908:	460d      	mov	r5, r1
 801d90a:	b09d      	sub	sp, #116	@ 0x74
 801d90c:	4614      	mov	r4, r2
 801d90e:	4698      	mov	r8, r3
 801d910:	4606      	mov	r6, r0
 801d912:	b118      	cbz	r0, 801d91c <_vfiprintf_r+0x18>
 801d914:	6a03      	ldr	r3, [r0, #32]
 801d916:	b90b      	cbnz	r3, 801d91c <_vfiprintf_r+0x18>
 801d918:	f7fd fdae 	bl	801b478 <__sinit>
 801d91c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d91e:	07d9      	lsls	r1, r3, #31
 801d920:	d405      	bmi.n	801d92e <_vfiprintf_r+0x2a>
 801d922:	89ab      	ldrh	r3, [r5, #12]
 801d924:	059a      	lsls	r2, r3, #22
 801d926:	d402      	bmi.n	801d92e <_vfiprintf_r+0x2a>
 801d928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d92a:	f7fd ff84 	bl	801b836 <__retarget_lock_acquire_recursive>
 801d92e:	89ab      	ldrh	r3, [r5, #12]
 801d930:	071b      	lsls	r3, r3, #28
 801d932:	d501      	bpl.n	801d938 <_vfiprintf_r+0x34>
 801d934:	692b      	ldr	r3, [r5, #16]
 801d936:	b99b      	cbnz	r3, 801d960 <_vfiprintf_r+0x5c>
 801d938:	4629      	mov	r1, r5
 801d93a:	4630      	mov	r0, r6
 801d93c:	f000 f9f6 	bl	801dd2c <__swsetup_r>
 801d940:	b170      	cbz	r0, 801d960 <_vfiprintf_r+0x5c>
 801d942:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d944:	07dc      	lsls	r4, r3, #31
 801d946:	d504      	bpl.n	801d952 <_vfiprintf_r+0x4e>
 801d948:	f04f 30ff 	mov.w	r0, #4294967295
 801d94c:	b01d      	add	sp, #116	@ 0x74
 801d94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d952:	89ab      	ldrh	r3, [r5, #12]
 801d954:	0598      	lsls	r0, r3, #22
 801d956:	d4f7      	bmi.n	801d948 <_vfiprintf_r+0x44>
 801d958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d95a:	f7fd ff6d 	bl	801b838 <__retarget_lock_release_recursive>
 801d95e:	e7f3      	b.n	801d948 <_vfiprintf_r+0x44>
 801d960:	2300      	movs	r3, #0
 801d962:	9309      	str	r3, [sp, #36]	@ 0x24
 801d964:	2320      	movs	r3, #32
 801d966:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d96a:	f8cd 800c 	str.w	r8, [sp, #12]
 801d96e:	2330      	movs	r3, #48	@ 0x30
 801d970:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801db20 <_vfiprintf_r+0x21c>
 801d974:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d978:	f04f 0901 	mov.w	r9, #1
 801d97c:	4623      	mov	r3, r4
 801d97e:	469a      	mov	sl, r3
 801d980:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d984:	b10a      	cbz	r2, 801d98a <_vfiprintf_r+0x86>
 801d986:	2a25      	cmp	r2, #37	@ 0x25
 801d988:	d1f9      	bne.n	801d97e <_vfiprintf_r+0x7a>
 801d98a:	ebba 0b04 	subs.w	fp, sl, r4
 801d98e:	d00b      	beq.n	801d9a8 <_vfiprintf_r+0xa4>
 801d990:	465b      	mov	r3, fp
 801d992:	4622      	mov	r2, r4
 801d994:	4629      	mov	r1, r5
 801d996:	4630      	mov	r0, r6
 801d998:	f7ff ffa1 	bl	801d8de <__sfputs_r>
 801d99c:	3001      	adds	r0, #1
 801d99e:	f000 80a7 	beq.w	801daf0 <_vfiprintf_r+0x1ec>
 801d9a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d9a4:	445a      	add	r2, fp
 801d9a6:	9209      	str	r2, [sp, #36]	@ 0x24
 801d9a8:	f89a 3000 	ldrb.w	r3, [sl]
 801d9ac:	2b00      	cmp	r3, #0
 801d9ae:	f000 809f 	beq.w	801daf0 <_vfiprintf_r+0x1ec>
 801d9b2:	2300      	movs	r3, #0
 801d9b4:	f04f 32ff 	mov.w	r2, #4294967295
 801d9b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d9bc:	f10a 0a01 	add.w	sl, sl, #1
 801d9c0:	9304      	str	r3, [sp, #16]
 801d9c2:	9307      	str	r3, [sp, #28]
 801d9c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d9c8:	931a      	str	r3, [sp, #104]	@ 0x68
 801d9ca:	4654      	mov	r4, sl
 801d9cc:	2205      	movs	r2, #5
 801d9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d9d2:	4853      	ldr	r0, [pc, #332]	@ (801db20 <_vfiprintf_r+0x21c>)
 801d9d4:	f7e2 fbd4 	bl	8000180 <memchr>
 801d9d8:	9a04      	ldr	r2, [sp, #16]
 801d9da:	b9d8      	cbnz	r0, 801da14 <_vfiprintf_r+0x110>
 801d9dc:	06d1      	lsls	r1, r2, #27
 801d9de:	bf44      	itt	mi
 801d9e0:	2320      	movmi	r3, #32
 801d9e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d9e6:	0713      	lsls	r3, r2, #28
 801d9e8:	bf44      	itt	mi
 801d9ea:	232b      	movmi	r3, #43	@ 0x2b
 801d9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d9f0:	f89a 3000 	ldrb.w	r3, [sl]
 801d9f4:	2b2a      	cmp	r3, #42	@ 0x2a
 801d9f6:	d015      	beq.n	801da24 <_vfiprintf_r+0x120>
 801d9f8:	9a07      	ldr	r2, [sp, #28]
 801d9fa:	4654      	mov	r4, sl
 801d9fc:	2000      	movs	r0, #0
 801d9fe:	f04f 0c0a 	mov.w	ip, #10
 801da02:	4621      	mov	r1, r4
 801da04:	f811 3b01 	ldrb.w	r3, [r1], #1
 801da08:	3b30      	subs	r3, #48	@ 0x30
 801da0a:	2b09      	cmp	r3, #9
 801da0c:	d94b      	bls.n	801daa6 <_vfiprintf_r+0x1a2>
 801da0e:	b1b0      	cbz	r0, 801da3e <_vfiprintf_r+0x13a>
 801da10:	9207      	str	r2, [sp, #28]
 801da12:	e014      	b.n	801da3e <_vfiprintf_r+0x13a>
 801da14:	eba0 0308 	sub.w	r3, r0, r8
 801da18:	fa09 f303 	lsl.w	r3, r9, r3
 801da1c:	4313      	orrs	r3, r2
 801da1e:	9304      	str	r3, [sp, #16]
 801da20:	46a2      	mov	sl, r4
 801da22:	e7d2      	b.n	801d9ca <_vfiprintf_r+0xc6>
 801da24:	9b03      	ldr	r3, [sp, #12]
 801da26:	1d19      	adds	r1, r3, #4
 801da28:	681b      	ldr	r3, [r3, #0]
 801da2a:	9103      	str	r1, [sp, #12]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	bfbb      	ittet	lt
 801da30:	425b      	neglt	r3, r3
 801da32:	f042 0202 	orrlt.w	r2, r2, #2
 801da36:	9307      	strge	r3, [sp, #28]
 801da38:	9307      	strlt	r3, [sp, #28]
 801da3a:	bfb8      	it	lt
 801da3c:	9204      	strlt	r2, [sp, #16]
 801da3e:	7823      	ldrb	r3, [r4, #0]
 801da40:	2b2e      	cmp	r3, #46	@ 0x2e
 801da42:	d10a      	bne.n	801da5a <_vfiprintf_r+0x156>
 801da44:	7863      	ldrb	r3, [r4, #1]
 801da46:	2b2a      	cmp	r3, #42	@ 0x2a
 801da48:	d132      	bne.n	801dab0 <_vfiprintf_r+0x1ac>
 801da4a:	9b03      	ldr	r3, [sp, #12]
 801da4c:	1d1a      	adds	r2, r3, #4
 801da4e:	681b      	ldr	r3, [r3, #0]
 801da50:	9203      	str	r2, [sp, #12]
 801da52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801da56:	3402      	adds	r4, #2
 801da58:	9305      	str	r3, [sp, #20]
 801da5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801db30 <_vfiprintf_r+0x22c>
 801da5e:	7821      	ldrb	r1, [r4, #0]
 801da60:	2203      	movs	r2, #3
 801da62:	4650      	mov	r0, sl
 801da64:	f7e2 fb8c 	bl	8000180 <memchr>
 801da68:	b138      	cbz	r0, 801da7a <_vfiprintf_r+0x176>
 801da6a:	9b04      	ldr	r3, [sp, #16]
 801da6c:	eba0 000a 	sub.w	r0, r0, sl
 801da70:	2240      	movs	r2, #64	@ 0x40
 801da72:	4082      	lsls	r2, r0
 801da74:	4313      	orrs	r3, r2
 801da76:	3401      	adds	r4, #1
 801da78:	9304      	str	r3, [sp, #16]
 801da7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da7e:	4829      	ldr	r0, [pc, #164]	@ (801db24 <_vfiprintf_r+0x220>)
 801da80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801da84:	2206      	movs	r2, #6
 801da86:	f7e2 fb7b 	bl	8000180 <memchr>
 801da8a:	2800      	cmp	r0, #0
 801da8c:	d03f      	beq.n	801db0e <_vfiprintf_r+0x20a>
 801da8e:	4b26      	ldr	r3, [pc, #152]	@ (801db28 <_vfiprintf_r+0x224>)
 801da90:	bb1b      	cbnz	r3, 801dada <_vfiprintf_r+0x1d6>
 801da92:	9b03      	ldr	r3, [sp, #12]
 801da94:	3307      	adds	r3, #7
 801da96:	f023 0307 	bic.w	r3, r3, #7
 801da9a:	3308      	adds	r3, #8
 801da9c:	9303      	str	r3, [sp, #12]
 801da9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801daa0:	443b      	add	r3, r7
 801daa2:	9309      	str	r3, [sp, #36]	@ 0x24
 801daa4:	e76a      	b.n	801d97c <_vfiprintf_r+0x78>
 801daa6:	fb0c 3202 	mla	r2, ip, r2, r3
 801daaa:	460c      	mov	r4, r1
 801daac:	2001      	movs	r0, #1
 801daae:	e7a8      	b.n	801da02 <_vfiprintf_r+0xfe>
 801dab0:	2300      	movs	r3, #0
 801dab2:	3401      	adds	r4, #1
 801dab4:	9305      	str	r3, [sp, #20]
 801dab6:	4619      	mov	r1, r3
 801dab8:	f04f 0c0a 	mov.w	ip, #10
 801dabc:	4620      	mov	r0, r4
 801dabe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dac2:	3a30      	subs	r2, #48	@ 0x30
 801dac4:	2a09      	cmp	r2, #9
 801dac6:	d903      	bls.n	801dad0 <_vfiprintf_r+0x1cc>
 801dac8:	2b00      	cmp	r3, #0
 801daca:	d0c6      	beq.n	801da5a <_vfiprintf_r+0x156>
 801dacc:	9105      	str	r1, [sp, #20]
 801dace:	e7c4      	b.n	801da5a <_vfiprintf_r+0x156>
 801dad0:	fb0c 2101 	mla	r1, ip, r1, r2
 801dad4:	4604      	mov	r4, r0
 801dad6:	2301      	movs	r3, #1
 801dad8:	e7f0      	b.n	801dabc <_vfiprintf_r+0x1b8>
 801dada:	ab03      	add	r3, sp, #12
 801dadc:	9300      	str	r3, [sp, #0]
 801dade:	462a      	mov	r2, r5
 801dae0:	4b12      	ldr	r3, [pc, #72]	@ (801db2c <_vfiprintf_r+0x228>)
 801dae2:	a904      	add	r1, sp, #16
 801dae4:	4630      	mov	r0, r6
 801dae6:	f7fc fe6f 	bl	801a7c8 <_printf_float>
 801daea:	4607      	mov	r7, r0
 801daec:	1c78      	adds	r0, r7, #1
 801daee:	d1d6      	bne.n	801da9e <_vfiprintf_r+0x19a>
 801daf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801daf2:	07d9      	lsls	r1, r3, #31
 801daf4:	d405      	bmi.n	801db02 <_vfiprintf_r+0x1fe>
 801daf6:	89ab      	ldrh	r3, [r5, #12]
 801daf8:	059a      	lsls	r2, r3, #22
 801dafa:	d402      	bmi.n	801db02 <_vfiprintf_r+0x1fe>
 801dafc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dafe:	f7fd fe9b 	bl	801b838 <__retarget_lock_release_recursive>
 801db02:	89ab      	ldrh	r3, [r5, #12]
 801db04:	065b      	lsls	r3, r3, #25
 801db06:	f53f af1f 	bmi.w	801d948 <_vfiprintf_r+0x44>
 801db0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801db0c:	e71e      	b.n	801d94c <_vfiprintf_r+0x48>
 801db0e:	ab03      	add	r3, sp, #12
 801db10:	9300      	str	r3, [sp, #0]
 801db12:	462a      	mov	r2, r5
 801db14:	4b05      	ldr	r3, [pc, #20]	@ (801db2c <_vfiprintf_r+0x228>)
 801db16:	a904      	add	r1, sp, #16
 801db18:	4630      	mov	r0, r6
 801db1a:	f7fd f8ed 	bl	801acf8 <_printf_i>
 801db1e:	e7e4      	b.n	801daea <_vfiprintf_r+0x1e6>
 801db20:	080235a0 	.word	0x080235a0
 801db24:	080235aa 	.word	0x080235aa
 801db28:	0801a7c9 	.word	0x0801a7c9
 801db2c:	0801d8df 	.word	0x0801d8df
 801db30:	080235a6 	.word	0x080235a6

0801db34 <__sflush_r>:
 801db34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801db38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db3c:	0716      	lsls	r6, r2, #28
 801db3e:	4605      	mov	r5, r0
 801db40:	460c      	mov	r4, r1
 801db42:	d454      	bmi.n	801dbee <__sflush_r+0xba>
 801db44:	684b      	ldr	r3, [r1, #4]
 801db46:	2b00      	cmp	r3, #0
 801db48:	dc02      	bgt.n	801db50 <__sflush_r+0x1c>
 801db4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	dd48      	ble.n	801dbe2 <__sflush_r+0xae>
 801db50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801db52:	2e00      	cmp	r6, #0
 801db54:	d045      	beq.n	801dbe2 <__sflush_r+0xae>
 801db56:	2300      	movs	r3, #0
 801db58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801db5c:	682f      	ldr	r7, [r5, #0]
 801db5e:	6a21      	ldr	r1, [r4, #32]
 801db60:	602b      	str	r3, [r5, #0]
 801db62:	d030      	beq.n	801dbc6 <__sflush_r+0x92>
 801db64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801db66:	89a3      	ldrh	r3, [r4, #12]
 801db68:	0759      	lsls	r1, r3, #29
 801db6a:	d505      	bpl.n	801db78 <__sflush_r+0x44>
 801db6c:	6863      	ldr	r3, [r4, #4]
 801db6e:	1ad2      	subs	r2, r2, r3
 801db70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801db72:	b10b      	cbz	r3, 801db78 <__sflush_r+0x44>
 801db74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801db76:	1ad2      	subs	r2, r2, r3
 801db78:	2300      	movs	r3, #0
 801db7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801db7c:	6a21      	ldr	r1, [r4, #32]
 801db7e:	4628      	mov	r0, r5
 801db80:	47b0      	blx	r6
 801db82:	1c43      	adds	r3, r0, #1
 801db84:	89a3      	ldrh	r3, [r4, #12]
 801db86:	d106      	bne.n	801db96 <__sflush_r+0x62>
 801db88:	6829      	ldr	r1, [r5, #0]
 801db8a:	291d      	cmp	r1, #29
 801db8c:	d82b      	bhi.n	801dbe6 <__sflush_r+0xb2>
 801db8e:	4a2a      	ldr	r2, [pc, #168]	@ (801dc38 <__sflush_r+0x104>)
 801db90:	410a      	asrs	r2, r1
 801db92:	07d6      	lsls	r6, r2, #31
 801db94:	d427      	bmi.n	801dbe6 <__sflush_r+0xb2>
 801db96:	2200      	movs	r2, #0
 801db98:	6062      	str	r2, [r4, #4]
 801db9a:	04d9      	lsls	r1, r3, #19
 801db9c:	6922      	ldr	r2, [r4, #16]
 801db9e:	6022      	str	r2, [r4, #0]
 801dba0:	d504      	bpl.n	801dbac <__sflush_r+0x78>
 801dba2:	1c42      	adds	r2, r0, #1
 801dba4:	d101      	bne.n	801dbaa <__sflush_r+0x76>
 801dba6:	682b      	ldr	r3, [r5, #0]
 801dba8:	b903      	cbnz	r3, 801dbac <__sflush_r+0x78>
 801dbaa:	6560      	str	r0, [r4, #84]	@ 0x54
 801dbac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dbae:	602f      	str	r7, [r5, #0]
 801dbb0:	b1b9      	cbz	r1, 801dbe2 <__sflush_r+0xae>
 801dbb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dbb6:	4299      	cmp	r1, r3
 801dbb8:	d002      	beq.n	801dbc0 <__sflush_r+0x8c>
 801dbba:	4628      	mov	r0, r5
 801dbbc:	f7fe fccc 	bl	801c558 <_free_r>
 801dbc0:	2300      	movs	r3, #0
 801dbc2:	6363      	str	r3, [r4, #52]	@ 0x34
 801dbc4:	e00d      	b.n	801dbe2 <__sflush_r+0xae>
 801dbc6:	2301      	movs	r3, #1
 801dbc8:	4628      	mov	r0, r5
 801dbca:	47b0      	blx	r6
 801dbcc:	4602      	mov	r2, r0
 801dbce:	1c50      	adds	r0, r2, #1
 801dbd0:	d1c9      	bne.n	801db66 <__sflush_r+0x32>
 801dbd2:	682b      	ldr	r3, [r5, #0]
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	d0c6      	beq.n	801db66 <__sflush_r+0x32>
 801dbd8:	2b1d      	cmp	r3, #29
 801dbda:	d001      	beq.n	801dbe0 <__sflush_r+0xac>
 801dbdc:	2b16      	cmp	r3, #22
 801dbde:	d11e      	bne.n	801dc1e <__sflush_r+0xea>
 801dbe0:	602f      	str	r7, [r5, #0]
 801dbe2:	2000      	movs	r0, #0
 801dbe4:	e022      	b.n	801dc2c <__sflush_r+0xf8>
 801dbe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dbea:	b21b      	sxth	r3, r3
 801dbec:	e01b      	b.n	801dc26 <__sflush_r+0xf2>
 801dbee:	690f      	ldr	r7, [r1, #16]
 801dbf0:	2f00      	cmp	r7, #0
 801dbf2:	d0f6      	beq.n	801dbe2 <__sflush_r+0xae>
 801dbf4:	0793      	lsls	r3, r2, #30
 801dbf6:	680e      	ldr	r6, [r1, #0]
 801dbf8:	bf08      	it	eq
 801dbfa:	694b      	ldreq	r3, [r1, #20]
 801dbfc:	600f      	str	r7, [r1, #0]
 801dbfe:	bf18      	it	ne
 801dc00:	2300      	movne	r3, #0
 801dc02:	eba6 0807 	sub.w	r8, r6, r7
 801dc06:	608b      	str	r3, [r1, #8]
 801dc08:	f1b8 0f00 	cmp.w	r8, #0
 801dc0c:	dde9      	ble.n	801dbe2 <__sflush_r+0xae>
 801dc0e:	6a21      	ldr	r1, [r4, #32]
 801dc10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801dc12:	4643      	mov	r3, r8
 801dc14:	463a      	mov	r2, r7
 801dc16:	4628      	mov	r0, r5
 801dc18:	47b0      	blx	r6
 801dc1a:	2800      	cmp	r0, #0
 801dc1c:	dc08      	bgt.n	801dc30 <__sflush_r+0xfc>
 801dc1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc26:	81a3      	strh	r3, [r4, #12]
 801dc28:	f04f 30ff 	mov.w	r0, #4294967295
 801dc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc30:	4407      	add	r7, r0
 801dc32:	eba8 0800 	sub.w	r8, r8, r0
 801dc36:	e7e7      	b.n	801dc08 <__sflush_r+0xd4>
 801dc38:	dfbffffe 	.word	0xdfbffffe

0801dc3c <_fflush_r>:
 801dc3c:	b538      	push	{r3, r4, r5, lr}
 801dc3e:	690b      	ldr	r3, [r1, #16]
 801dc40:	4605      	mov	r5, r0
 801dc42:	460c      	mov	r4, r1
 801dc44:	b913      	cbnz	r3, 801dc4c <_fflush_r+0x10>
 801dc46:	2500      	movs	r5, #0
 801dc48:	4628      	mov	r0, r5
 801dc4a:	bd38      	pop	{r3, r4, r5, pc}
 801dc4c:	b118      	cbz	r0, 801dc56 <_fflush_r+0x1a>
 801dc4e:	6a03      	ldr	r3, [r0, #32]
 801dc50:	b90b      	cbnz	r3, 801dc56 <_fflush_r+0x1a>
 801dc52:	f7fd fc11 	bl	801b478 <__sinit>
 801dc56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	d0f3      	beq.n	801dc46 <_fflush_r+0xa>
 801dc5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dc60:	07d0      	lsls	r0, r2, #31
 801dc62:	d404      	bmi.n	801dc6e <_fflush_r+0x32>
 801dc64:	0599      	lsls	r1, r3, #22
 801dc66:	d402      	bmi.n	801dc6e <_fflush_r+0x32>
 801dc68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dc6a:	f7fd fde4 	bl	801b836 <__retarget_lock_acquire_recursive>
 801dc6e:	4628      	mov	r0, r5
 801dc70:	4621      	mov	r1, r4
 801dc72:	f7ff ff5f 	bl	801db34 <__sflush_r>
 801dc76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dc78:	07da      	lsls	r2, r3, #31
 801dc7a:	4605      	mov	r5, r0
 801dc7c:	d4e4      	bmi.n	801dc48 <_fflush_r+0xc>
 801dc7e:	89a3      	ldrh	r3, [r4, #12]
 801dc80:	059b      	lsls	r3, r3, #22
 801dc82:	d4e1      	bmi.n	801dc48 <_fflush_r+0xc>
 801dc84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dc86:	f7fd fdd7 	bl	801b838 <__retarget_lock_release_recursive>
 801dc8a:	e7dd      	b.n	801dc48 <_fflush_r+0xc>

0801dc8c <fiprintf>:
 801dc8c:	b40e      	push	{r1, r2, r3}
 801dc8e:	b503      	push	{r0, r1, lr}
 801dc90:	4601      	mov	r1, r0
 801dc92:	ab03      	add	r3, sp, #12
 801dc94:	4805      	ldr	r0, [pc, #20]	@ (801dcac <fiprintf+0x20>)
 801dc96:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc9a:	6800      	ldr	r0, [r0, #0]
 801dc9c:	9301      	str	r3, [sp, #4]
 801dc9e:	f7ff fe31 	bl	801d904 <_vfiprintf_r>
 801dca2:	b002      	add	sp, #8
 801dca4:	f85d eb04 	ldr.w	lr, [sp], #4
 801dca8:	b003      	add	sp, #12
 801dcaa:	4770      	bx	lr
 801dcac:	200002c4 	.word	0x200002c4

0801dcb0 <__swbuf_r>:
 801dcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcb2:	460e      	mov	r6, r1
 801dcb4:	4614      	mov	r4, r2
 801dcb6:	4605      	mov	r5, r0
 801dcb8:	b118      	cbz	r0, 801dcc2 <__swbuf_r+0x12>
 801dcba:	6a03      	ldr	r3, [r0, #32]
 801dcbc:	b90b      	cbnz	r3, 801dcc2 <__swbuf_r+0x12>
 801dcbe:	f7fd fbdb 	bl	801b478 <__sinit>
 801dcc2:	69a3      	ldr	r3, [r4, #24]
 801dcc4:	60a3      	str	r3, [r4, #8]
 801dcc6:	89a3      	ldrh	r3, [r4, #12]
 801dcc8:	071a      	lsls	r2, r3, #28
 801dcca:	d501      	bpl.n	801dcd0 <__swbuf_r+0x20>
 801dccc:	6923      	ldr	r3, [r4, #16]
 801dcce:	b943      	cbnz	r3, 801dce2 <__swbuf_r+0x32>
 801dcd0:	4621      	mov	r1, r4
 801dcd2:	4628      	mov	r0, r5
 801dcd4:	f000 f82a 	bl	801dd2c <__swsetup_r>
 801dcd8:	b118      	cbz	r0, 801dce2 <__swbuf_r+0x32>
 801dcda:	f04f 37ff 	mov.w	r7, #4294967295
 801dcde:	4638      	mov	r0, r7
 801dce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dce2:	6823      	ldr	r3, [r4, #0]
 801dce4:	6922      	ldr	r2, [r4, #16]
 801dce6:	1a98      	subs	r0, r3, r2
 801dce8:	6963      	ldr	r3, [r4, #20]
 801dcea:	b2f6      	uxtb	r6, r6
 801dcec:	4283      	cmp	r3, r0
 801dcee:	4637      	mov	r7, r6
 801dcf0:	dc05      	bgt.n	801dcfe <__swbuf_r+0x4e>
 801dcf2:	4621      	mov	r1, r4
 801dcf4:	4628      	mov	r0, r5
 801dcf6:	f7ff ffa1 	bl	801dc3c <_fflush_r>
 801dcfa:	2800      	cmp	r0, #0
 801dcfc:	d1ed      	bne.n	801dcda <__swbuf_r+0x2a>
 801dcfe:	68a3      	ldr	r3, [r4, #8]
 801dd00:	3b01      	subs	r3, #1
 801dd02:	60a3      	str	r3, [r4, #8]
 801dd04:	6823      	ldr	r3, [r4, #0]
 801dd06:	1c5a      	adds	r2, r3, #1
 801dd08:	6022      	str	r2, [r4, #0]
 801dd0a:	701e      	strb	r6, [r3, #0]
 801dd0c:	6962      	ldr	r2, [r4, #20]
 801dd0e:	1c43      	adds	r3, r0, #1
 801dd10:	429a      	cmp	r2, r3
 801dd12:	d004      	beq.n	801dd1e <__swbuf_r+0x6e>
 801dd14:	89a3      	ldrh	r3, [r4, #12]
 801dd16:	07db      	lsls	r3, r3, #31
 801dd18:	d5e1      	bpl.n	801dcde <__swbuf_r+0x2e>
 801dd1a:	2e0a      	cmp	r6, #10
 801dd1c:	d1df      	bne.n	801dcde <__swbuf_r+0x2e>
 801dd1e:	4621      	mov	r1, r4
 801dd20:	4628      	mov	r0, r5
 801dd22:	f7ff ff8b 	bl	801dc3c <_fflush_r>
 801dd26:	2800      	cmp	r0, #0
 801dd28:	d0d9      	beq.n	801dcde <__swbuf_r+0x2e>
 801dd2a:	e7d6      	b.n	801dcda <__swbuf_r+0x2a>

0801dd2c <__swsetup_r>:
 801dd2c:	b538      	push	{r3, r4, r5, lr}
 801dd2e:	4b29      	ldr	r3, [pc, #164]	@ (801ddd4 <__swsetup_r+0xa8>)
 801dd30:	4605      	mov	r5, r0
 801dd32:	6818      	ldr	r0, [r3, #0]
 801dd34:	460c      	mov	r4, r1
 801dd36:	b118      	cbz	r0, 801dd40 <__swsetup_r+0x14>
 801dd38:	6a03      	ldr	r3, [r0, #32]
 801dd3a:	b90b      	cbnz	r3, 801dd40 <__swsetup_r+0x14>
 801dd3c:	f7fd fb9c 	bl	801b478 <__sinit>
 801dd40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd44:	0719      	lsls	r1, r3, #28
 801dd46:	d422      	bmi.n	801dd8e <__swsetup_r+0x62>
 801dd48:	06da      	lsls	r2, r3, #27
 801dd4a:	d407      	bmi.n	801dd5c <__swsetup_r+0x30>
 801dd4c:	2209      	movs	r2, #9
 801dd4e:	602a      	str	r2, [r5, #0]
 801dd50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd54:	81a3      	strh	r3, [r4, #12]
 801dd56:	f04f 30ff 	mov.w	r0, #4294967295
 801dd5a:	e033      	b.n	801ddc4 <__swsetup_r+0x98>
 801dd5c:	0758      	lsls	r0, r3, #29
 801dd5e:	d512      	bpl.n	801dd86 <__swsetup_r+0x5a>
 801dd60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dd62:	b141      	cbz	r1, 801dd76 <__swsetup_r+0x4a>
 801dd64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dd68:	4299      	cmp	r1, r3
 801dd6a:	d002      	beq.n	801dd72 <__swsetup_r+0x46>
 801dd6c:	4628      	mov	r0, r5
 801dd6e:	f7fe fbf3 	bl	801c558 <_free_r>
 801dd72:	2300      	movs	r3, #0
 801dd74:	6363      	str	r3, [r4, #52]	@ 0x34
 801dd76:	89a3      	ldrh	r3, [r4, #12]
 801dd78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dd7c:	81a3      	strh	r3, [r4, #12]
 801dd7e:	2300      	movs	r3, #0
 801dd80:	6063      	str	r3, [r4, #4]
 801dd82:	6923      	ldr	r3, [r4, #16]
 801dd84:	6023      	str	r3, [r4, #0]
 801dd86:	89a3      	ldrh	r3, [r4, #12]
 801dd88:	f043 0308 	orr.w	r3, r3, #8
 801dd8c:	81a3      	strh	r3, [r4, #12]
 801dd8e:	6923      	ldr	r3, [r4, #16]
 801dd90:	b94b      	cbnz	r3, 801dda6 <__swsetup_r+0x7a>
 801dd92:	89a3      	ldrh	r3, [r4, #12]
 801dd94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801dd98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dd9c:	d003      	beq.n	801dda6 <__swsetup_r+0x7a>
 801dd9e:	4621      	mov	r1, r4
 801dda0:	4628      	mov	r0, r5
 801dda2:	f000 f8a2 	bl	801deea <__smakebuf_r>
 801dda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ddaa:	f013 0201 	ands.w	r2, r3, #1
 801ddae:	d00a      	beq.n	801ddc6 <__swsetup_r+0x9a>
 801ddb0:	2200      	movs	r2, #0
 801ddb2:	60a2      	str	r2, [r4, #8]
 801ddb4:	6962      	ldr	r2, [r4, #20]
 801ddb6:	4252      	negs	r2, r2
 801ddb8:	61a2      	str	r2, [r4, #24]
 801ddba:	6922      	ldr	r2, [r4, #16]
 801ddbc:	b942      	cbnz	r2, 801ddd0 <__swsetup_r+0xa4>
 801ddbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ddc2:	d1c5      	bne.n	801dd50 <__swsetup_r+0x24>
 801ddc4:	bd38      	pop	{r3, r4, r5, pc}
 801ddc6:	0799      	lsls	r1, r3, #30
 801ddc8:	bf58      	it	pl
 801ddca:	6962      	ldrpl	r2, [r4, #20]
 801ddcc:	60a2      	str	r2, [r4, #8]
 801ddce:	e7f4      	b.n	801ddba <__swsetup_r+0x8e>
 801ddd0:	2000      	movs	r0, #0
 801ddd2:	e7f7      	b.n	801ddc4 <__swsetup_r+0x98>
 801ddd4:	200002c4 	.word	0x200002c4

0801ddd8 <memmove>:
 801ddd8:	4288      	cmp	r0, r1
 801ddda:	b510      	push	{r4, lr}
 801dddc:	eb01 0402 	add.w	r4, r1, r2
 801dde0:	d902      	bls.n	801dde8 <memmove+0x10>
 801dde2:	4284      	cmp	r4, r0
 801dde4:	4623      	mov	r3, r4
 801dde6:	d807      	bhi.n	801ddf8 <memmove+0x20>
 801dde8:	1e43      	subs	r3, r0, #1
 801ddea:	42a1      	cmp	r1, r4
 801ddec:	d008      	beq.n	801de00 <memmove+0x28>
 801ddee:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ddf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ddf6:	e7f8      	b.n	801ddea <memmove+0x12>
 801ddf8:	4402      	add	r2, r0
 801ddfa:	4601      	mov	r1, r0
 801ddfc:	428a      	cmp	r2, r1
 801ddfe:	d100      	bne.n	801de02 <memmove+0x2a>
 801de00:	bd10      	pop	{r4, pc}
 801de02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801de06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801de0a:	e7f7      	b.n	801ddfc <memmove+0x24>

0801de0c <abort>:
 801de0c:	b508      	push	{r3, lr}
 801de0e:	2006      	movs	r0, #6
 801de10:	f000 f8d0 	bl	801dfb4 <raise>
 801de14:	2001      	movs	r0, #1
 801de16:	f7e8 fdaf 	bl	8006978 <_exit>

0801de1a <_calloc_r>:
 801de1a:	b570      	push	{r4, r5, r6, lr}
 801de1c:	fba1 5402 	umull	r5, r4, r1, r2
 801de20:	b93c      	cbnz	r4, 801de32 <_calloc_r+0x18>
 801de22:	4629      	mov	r1, r5
 801de24:	f7fb fcb0 	bl	8019788 <_malloc_r>
 801de28:	4606      	mov	r6, r0
 801de2a:	b928      	cbnz	r0, 801de38 <_calloc_r+0x1e>
 801de2c:	2600      	movs	r6, #0
 801de2e:	4630      	mov	r0, r6
 801de30:	bd70      	pop	{r4, r5, r6, pc}
 801de32:	220c      	movs	r2, #12
 801de34:	6002      	str	r2, [r0, #0]
 801de36:	e7f9      	b.n	801de2c <_calloc_r+0x12>
 801de38:	462a      	mov	r2, r5
 801de3a:	4621      	mov	r1, r4
 801de3c:	f7fd fbe9 	bl	801b612 <memset>
 801de40:	e7f5      	b.n	801de2e <_calloc_r+0x14>

0801de42 <_realloc_r>:
 801de42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de46:	4680      	mov	r8, r0
 801de48:	4615      	mov	r5, r2
 801de4a:	460c      	mov	r4, r1
 801de4c:	b921      	cbnz	r1, 801de58 <_realloc_r+0x16>
 801de4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801de52:	4611      	mov	r1, r2
 801de54:	f7fb bc98 	b.w	8019788 <_malloc_r>
 801de58:	b92a      	cbnz	r2, 801de66 <_realloc_r+0x24>
 801de5a:	f7fe fb7d 	bl	801c558 <_free_r>
 801de5e:	2400      	movs	r4, #0
 801de60:	4620      	mov	r0, r4
 801de62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de66:	f000 f8e3 	bl	801e030 <_malloc_usable_size_r>
 801de6a:	4285      	cmp	r5, r0
 801de6c:	4606      	mov	r6, r0
 801de6e:	d802      	bhi.n	801de76 <_realloc_r+0x34>
 801de70:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801de74:	d8f4      	bhi.n	801de60 <_realloc_r+0x1e>
 801de76:	4629      	mov	r1, r5
 801de78:	4640      	mov	r0, r8
 801de7a:	f7fb fc85 	bl	8019788 <_malloc_r>
 801de7e:	4607      	mov	r7, r0
 801de80:	2800      	cmp	r0, #0
 801de82:	d0ec      	beq.n	801de5e <_realloc_r+0x1c>
 801de84:	42b5      	cmp	r5, r6
 801de86:	462a      	mov	r2, r5
 801de88:	4621      	mov	r1, r4
 801de8a:	bf28      	it	cs
 801de8c:	4632      	movcs	r2, r6
 801de8e:	f7fd fcdc 	bl	801b84a <memcpy>
 801de92:	4621      	mov	r1, r4
 801de94:	4640      	mov	r0, r8
 801de96:	f7fe fb5f 	bl	801c558 <_free_r>
 801de9a:	463c      	mov	r4, r7
 801de9c:	e7e0      	b.n	801de60 <_realloc_r+0x1e>

0801de9e <__swhatbuf_r>:
 801de9e:	b570      	push	{r4, r5, r6, lr}
 801dea0:	460c      	mov	r4, r1
 801dea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dea6:	2900      	cmp	r1, #0
 801dea8:	b096      	sub	sp, #88	@ 0x58
 801deaa:	4615      	mov	r5, r2
 801deac:	461e      	mov	r6, r3
 801deae:	da0d      	bge.n	801decc <__swhatbuf_r+0x2e>
 801deb0:	89a3      	ldrh	r3, [r4, #12]
 801deb2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801deb6:	f04f 0100 	mov.w	r1, #0
 801deba:	bf14      	ite	ne
 801debc:	2340      	movne	r3, #64	@ 0x40
 801debe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801dec2:	2000      	movs	r0, #0
 801dec4:	6031      	str	r1, [r6, #0]
 801dec6:	602b      	str	r3, [r5, #0]
 801dec8:	b016      	add	sp, #88	@ 0x58
 801deca:	bd70      	pop	{r4, r5, r6, pc}
 801decc:	466a      	mov	r2, sp
 801dece:	f000 f879 	bl	801dfc4 <_fstat_r>
 801ded2:	2800      	cmp	r0, #0
 801ded4:	dbec      	blt.n	801deb0 <__swhatbuf_r+0x12>
 801ded6:	9901      	ldr	r1, [sp, #4]
 801ded8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801dedc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801dee0:	4259      	negs	r1, r3
 801dee2:	4159      	adcs	r1, r3
 801dee4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801dee8:	e7eb      	b.n	801dec2 <__swhatbuf_r+0x24>

0801deea <__smakebuf_r>:
 801deea:	898b      	ldrh	r3, [r1, #12]
 801deec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801deee:	079d      	lsls	r5, r3, #30
 801def0:	4606      	mov	r6, r0
 801def2:	460c      	mov	r4, r1
 801def4:	d507      	bpl.n	801df06 <__smakebuf_r+0x1c>
 801def6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801defa:	6023      	str	r3, [r4, #0]
 801defc:	6123      	str	r3, [r4, #16]
 801defe:	2301      	movs	r3, #1
 801df00:	6163      	str	r3, [r4, #20]
 801df02:	b003      	add	sp, #12
 801df04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801df06:	ab01      	add	r3, sp, #4
 801df08:	466a      	mov	r2, sp
 801df0a:	f7ff ffc8 	bl	801de9e <__swhatbuf_r>
 801df0e:	9f00      	ldr	r7, [sp, #0]
 801df10:	4605      	mov	r5, r0
 801df12:	4639      	mov	r1, r7
 801df14:	4630      	mov	r0, r6
 801df16:	f7fb fc37 	bl	8019788 <_malloc_r>
 801df1a:	b948      	cbnz	r0, 801df30 <__smakebuf_r+0x46>
 801df1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df20:	059a      	lsls	r2, r3, #22
 801df22:	d4ee      	bmi.n	801df02 <__smakebuf_r+0x18>
 801df24:	f023 0303 	bic.w	r3, r3, #3
 801df28:	f043 0302 	orr.w	r3, r3, #2
 801df2c:	81a3      	strh	r3, [r4, #12]
 801df2e:	e7e2      	b.n	801def6 <__smakebuf_r+0xc>
 801df30:	89a3      	ldrh	r3, [r4, #12]
 801df32:	6020      	str	r0, [r4, #0]
 801df34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801df38:	81a3      	strh	r3, [r4, #12]
 801df3a:	9b01      	ldr	r3, [sp, #4]
 801df3c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801df40:	b15b      	cbz	r3, 801df5a <__smakebuf_r+0x70>
 801df42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df46:	4630      	mov	r0, r6
 801df48:	f000 f84e 	bl	801dfe8 <_isatty_r>
 801df4c:	b128      	cbz	r0, 801df5a <__smakebuf_r+0x70>
 801df4e:	89a3      	ldrh	r3, [r4, #12]
 801df50:	f023 0303 	bic.w	r3, r3, #3
 801df54:	f043 0301 	orr.w	r3, r3, #1
 801df58:	81a3      	strh	r3, [r4, #12]
 801df5a:	89a3      	ldrh	r3, [r4, #12]
 801df5c:	431d      	orrs	r5, r3
 801df5e:	81a5      	strh	r5, [r4, #12]
 801df60:	e7cf      	b.n	801df02 <__smakebuf_r+0x18>

0801df62 <_raise_r>:
 801df62:	291f      	cmp	r1, #31
 801df64:	b538      	push	{r3, r4, r5, lr}
 801df66:	4605      	mov	r5, r0
 801df68:	460c      	mov	r4, r1
 801df6a:	d904      	bls.n	801df76 <_raise_r+0x14>
 801df6c:	2316      	movs	r3, #22
 801df6e:	6003      	str	r3, [r0, #0]
 801df70:	f04f 30ff 	mov.w	r0, #4294967295
 801df74:	bd38      	pop	{r3, r4, r5, pc}
 801df76:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801df78:	b112      	cbz	r2, 801df80 <_raise_r+0x1e>
 801df7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801df7e:	b94b      	cbnz	r3, 801df94 <_raise_r+0x32>
 801df80:	4628      	mov	r0, r5
 801df82:	f000 f853 	bl	801e02c <_getpid_r>
 801df86:	4622      	mov	r2, r4
 801df88:	4601      	mov	r1, r0
 801df8a:	4628      	mov	r0, r5
 801df8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801df90:	f000 b83a 	b.w	801e008 <_kill_r>
 801df94:	2b01      	cmp	r3, #1
 801df96:	d00a      	beq.n	801dfae <_raise_r+0x4c>
 801df98:	1c59      	adds	r1, r3, #1
 801df9a:	d103      	bne.n	801dfa4 <_raise_r+0x42>
 801df9c:	2316      	movs	r3, #22
 801df9e:	6003      	str	r3, [r0, #0]
 801dfa0:	2001      	movs	r0, #1
 801dfa2:	e7e7      	b.n	801df74 <_raise_r+0x12>
 801dfa4:	2100      	movs	r1, #0
 801dfa6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801dfaa:	4620      	mov	r0, r4
 801dfac:	4798      	blx	r3
 801dfae:	2000      	movs	r0, #0
 801dfb0:	e7e0      	b.n	801df74 <_raise_r+0x12>
	...

0801dfb4 <raise>:
 801dfb4:	4b02      	ldr	r3, [pc, #8]	@ (801dfc0 <raise+0xc>)
 801dfb6:	4601      	mov	r1, r0
 801dfb8:	6818      	ldr	r0, [r3, #0]
 801dfba:	f7ff bfd2 	b.w	801df62 <_raise_r>
 801dfbe:	bf00      	nop
 801dfc0:	200002c4 	.word	0x200002c4

0801dfc4 <_fstat_r>:
 801dfc4:	b538      	push	{r3, r4, r5, lr}
 801dfc6:	4d07      	ldr	r5, [pc, #28]	@ (801dfe4 <_fstat_r+0x20>)
 801dfc8:	2300      	movs	r3, #0
 801dfca:	4604      	mov	r4, r0
 801dfcc:	4608      	mov	r0, r1
 801dfce:	4611      	mov	r1, r2
 801dfd0:	602b      	str	r3, [r5, #0]
 801dfd2:	f7e8 fd21 	bl	8006a18 <_fstat>
 801dfd6:	1c43      	adds	r3, r0, #1
 801dfd8:	d102      	bne.n	801dfe0 <_fstat_r+0x1c>
 801dfda:	682b      	ldr	r3, [r5, #0]
 801dfdc:	b103      	cbz	r3, 801dfe0 <_fstat_r+0x1c>
 801dfde:	6023      	str	r3, [r4, #0]
 801dfe0:	bd38      	pop	{r3, r4, r5, pc}
 801dfe2:	bf00      	nop
 801dfe4:	20003044 	.word	0x20003044

0801dfe8 <_isatty_r>:
 801dfe8:	b538      	push	{r3, r4, r5, lr}
 801dfea:	4d06      	ldr	r5, [pc, #24]	@ (801e004 <_isatty_r+0x1c>)
 801dfec:	2300      	movs	r3, #0
 801dfee:	4604      	mov	r4, r0
 801dff0:	4608      	mov	r0, r1
 801dff2:	602b      	str	r3, [r5, #0]
 801dff4:	f7e8 fd20 	bl	8006a38 <_isatty>
 801dff8:	1c43      	adds	r3, r0, #1
 801dffa:	d102      	bne.n	801e002 <_isatty_r+0x1a>
 801dffc:	682b      	ldr	r3, [r5, #0]
 801dffe:	b103      	cbz	r3, 801e002 <_isatty_r+0x1a>
 801e000:	6023      	str	r3, [r4, #0]
 801e002:	bd38      	pop	{r3, r4, r5, pc}
 801e004:	20003044 	.word	0x20003044

0801e008 <_kill_r>:
 801e008:	b538      	push	{r3, r4, r5, lr}
 801e00a:	4d07      	ldr	r5, [pc, #28]	@ (801e028 <_kill_r+0x20>)
 801e00c:	2300      	movs	r3, #0
 801e00e:	4604      	mov	r4, r0
 801e010:	4608      	mov	r0, r1
 801e012:	4611      	mov	r1, r2
 801e014:	602b      	str	r3, [r5, #0]
 801e016:	f7e8 fc9f 	bl	8006958 <_kill>
 801e01a:	1c43      	adds	r3, r0, #1
 801e01c:	d102      	bne.n	801e024 <_kill_r+0x1c>
 801e01e:	682b      	ldr	r3, [r5, #0]
 801e020:	b103      	cbz	r3, 801e024 <_kill_r+0x1c>
 801e022:	6023      	str	r3, [r4, #0]
 801e024:	bd38      	pop	{r3, r4, r5, pc}
 801e026:	bf00      	nop
 801e028:	20003044 	.word	0x20003044

0801e02c <_getpid_r>:
 801e02c:	f7e8 bc8c 	b.w	8006948 <_getpid>

0801e030 <_malloc_usable_size_r>:
 801e030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e034:	1f18      	subs	r0, r3, #4
 801e036:	2b00      	cmp	r3, #0
 801e038:	bfbc      	itt	lt
 801e03a:	580b      	ldrlt	r3, [r1, r0]
 801e03c:	18c0      	addlt	r0, r0, r3
 801e03e:	4770      	bx	lr

0801e040 <cos>:
 801e040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e042:	ec53 2b10 	vmov	r2, r3, d0
 801e046:	4826      	ldr	r0, [pc, #152]	@ (801e0e0 <cos+0xa0>)
 801e048:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e04c:	4281      	cmp	r1, r0
 801e04e:	d806      	bhi.n	801e05e <cos+0x1e>
 801e050:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801e0d8 <cos+0x98>
 801e054:	b005      	add	sp, #20
 801e056:	f85d eb04 	ldr.w	lr, [sp], #4
 801e05a:	f000 b9dd 	b.w	801e418 <__kernel_cos>
 801e05e:	4821      	ldr	r0, [pc, #132]	@ (801e0e4 <cos+0xa4>)
 801e060:	4281      	cmp	r1, r0
 801e062:	d908      	bls.n	801e076 <cos+0x36>
 801e064:	4610      	mov	r0, r2
 801e066:	4619      	mov	r1, r3
 801e068:	f7e2 f8e6 	bl	8000238 <__aeabi_dsub>
 801e06c:	ec41 0b10 	vmov	d0, r0, r1
 801e070:	b005      	add	sp, #20
 801e072:	f85d fb04 	ldr.w	pc, [sp], #4
 801e076:	4668      	mov	r0, sp
 801e078:	f000 fb52 	bl	801e720 <__ieee754_rem_pio2>
 801e07c:	f000 0003 	and.w	r0, r0, #3
 801e080:	2801      	cmp	r0, #1
 801e082:	d00b      	beq.n	801e09c <cos+0x5c>
 801e084:	2802      	cmp	r0, #2
 801e086:	d015      	beq.n	801e0b4 <cos+0x74>
 801e088:	b9d8      	cbnz	r0, 801e0c2 <cos+0x82>
 801e08a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e08e:	ed9d 0b00 	vldr	d0, [sp]
 801e092:	f000 f9c1 	bl	801e418 <__kernel_cos>
 801e096:	ec51 0b10 	vmov	r0, r1, d0
 801e09a:	e7e7      	b.n	801e06c <cos+0x2c>
 801e09c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e0a0:	ed9d 0b00 	vldr	d0, [sp]
 801e0a4:	f000 fa80 	bl	801e5a8 <__kernel_sin>
 801e0a8:	ec53 2b10 	vmov	r2, r3, d0
 801e0ac:	4610      	mov	r0, r2
 801e0ae:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801e0b2:	e7db      	b.n	801e06c <cos+0x2c>
 801e0b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e0b8:	ed9d 0b00 	vldr	d0, [sp]
 801e0bc:	f000 f9ac 	bl	801e418 <__kernel_cos>
 801e0c0:	e7f2      	b.n	801e0a8 <cos+0x68>
 801e0c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e0c6:	ed9d 0b00 	vldr	d0, [sp]
 801e0ca:	2001      	movs	r0, #1
 801e0cc:	f000 fa6c 	bl	801e5a8 <__kernel_sin>
 801e0d0:	e7e1      	b.n	801e096 <cos+0x56>
 801e0d2:	bf00      	nop
 801e0d4:	f3af 8000 	nop.w
	...
 801e0e0:	3fe921fb 	.word	0x3fe921fb
 801e0e4:	7fefffff 	.word	0x7fefffff

0801e0e8 <sin>:
 801e0e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e0ea:	ec53 2b10 	vmov	r2, r3, d0
 801e0ee:	4826      	ldr	r0, [pc, #152]	@ (801e188 <sin+0xa0>)
 801e0f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e0f4:	4281      	cmp	r1, r0
 801e0f6:	d807      	bhi.n	801e108 <sin+0x20>
 801e0f8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801e180 <sin+0x98>
 801e0fc:	2000      	movs	r0, #0
 801e0fe:	b005      	add	sp, #20
 801e100:	f85d eb04 	ldr.w	lr, [sp], #4
 801e104:	f000 ba50 	b.w	801e5a8 <__kernel_sin>
 801e108:	4820      	ldr	r0, [pc, #128]	@ (801e18c <sin+0xa4>)
 801e10a:	4281      	cmp	r1, r0
 801e10c:	d908      	bls.n	801e120 <sin+0x38>
 801e10e:	4610      	mov	r0, r2
 801e110:	4619      	mov	r1, r3
 801e112:	f7e2 f891 	bl	8000238 <__aeabi_dsub>
 801e116:	ec41 0b10 	vmov	d0, r0, r1
 801e11a:	b005      	add	sp, #20
 801e11c:	f85d fb04 	ldr.w	pc, [sp], #4
 801e120:	4668      	mov	r0, sp
 801e122:	f000 fafd 	bl	801e720 <__ieee754_rem_pio2>
 801e126:	f000 0003 	and.w	r0, r0, #3
 801e12a:	2801      	cmp	r0, #1
 801e12c:	d00c      	beq.n	801e148 <sin+0x60>
 801e12e:	2802      	cmp	r0, #2
 801e130:	d011      	beq.n	801e156 <sin+0x6e>
 801e132:	b9e8      	cbnz	r0, 801e170 <sin+0x88>
 801e134:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e138:	ed9d 0b00 	vldr	d0, [sp]
 801e13c:	2001      	movs	r0, #1
 801e13e:	f000 fa33 	bl	801e5a8 <__kernel_sin>
 801e142:	ec51 0b10 	vmov	r0, r1, d0
 801e146:	e7e6      	b.n	801e116 <sin+0x2e>
 801e148:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e14c:	ed9d 0b00 	vldr	d0, [sp]
 801e150:	f000 f962 	bl	801e418 <__kernel_cos>
 801e154:	e7f5      	b.n	801e142 <sin+0x5a>
 801e156:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e15a:	ed9d 0b00 	vldr	d0, [sp]
 801e15e:	2001      	movs	r0, #1
 801e160:	f000 fa22 	bl	801e5a8 <__kernel_sin>
 801e164:	ec53 2b10 	vmov	r2, r3, d0
 801e168:	4610      	mov	r0, r2
 801e16a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801e16e:	e7d2      	b.n	801e116 <sin+0x2e>
 801e170:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e174:	ed9d 0b00 	vldr	d0, [sp]
 801e178:	f000 f94e 	bl	801e418 <__kernel_cos>
 801e17c:	e7f2      	b.n	801e164 <sin+0x7c>
 801e17e:	bf00      	nop
	...
 801e188:	3fe921fb 	.word	0x3fe921fb
 801e18c:	7fefffff 	.word	0x7fefffff

0801e190 <expf>:
 801e190:	b508      	push	{r3, lr}
 801e192:	ed2d 8b02 	vpush	{d8}
 801e196:	eef0 8a40 	vmov.f32	s17, s0
 801e19a:	f000 fcf9 	bl	801eb90 <__ieee754_expf>
 801e19e:	eeb0 8a40 	vmov.f32	s16, s0
 801e1a2:	eeb0 0a68 	vmov.f32	s0, s17
 801e1a6:	f000 f8ab 	bl	801e300 <finitef>
 801e1aa:	b160      	cbz	r0, 801e1c6 <expf+0x36>
 801e1ac:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801e1ec <expf+0x5c>
 801e1b0:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1b8:	dd0a      	ble.n	801e1d0 <expf+0x40>
 801e1ba:	f7fd fb11 	bl	801b7e0 <__errno>
 801e1be:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 801e1f0 <expf+0x60>
 801e1c2:	2322      	movs	r3, #34	@ 0x22
 801e1c4:	6003      	str	r3, [r0, #0]
 801e1c6:	eeb0 0a48 	vmov.f32	s0, s16
 801e1ca:	ecbd 8b02 	vpop	{d8}
 801e1ce:	bd08      	pop	{r3, pc}
 801e1d0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801e1f4 <expf+0x64>
 801e1d4:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1dc:	d5f3      	bpl.n	801e1c6 <expf+0x36>
 801e1de:	f7fd faff 	bl	801b7e0 <__errno>
 801e1e2:	2322      	movs	r3, #34	@ 0x22
 801e1e4:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 801e1f8 <expf+0x68>
 801e1e8:	6003      	str	r3, [r0, #0]
 801e1ea:	e7ec      	b.n	801e1c6 <expf+0x36>
 801e1ec:	42b17217 	.word	0x42b17217
 801e1f0:	7f800000 	.word	0x7f800000
 801e1f4:	c2cff1b5 	.word	0xc2cff1b5
 801e1f8:	00000000 	.word	0x00000000

0801e1fc <logf>:
 801e1fc:	b508      	push	{r3, lr}
 801e1fe:	ed2d 8b02 	vpush	{d8}
 801e202:	eeb0 8a40 	vmov.f32	s16, s0
 801e206:	f000 fd91 	bl	801ed2c <__ieee754_logf>
 801e20a:	eeb4 8a48 	vcmp.f32	s16, s16
 801e20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e212:	d60f      	bvs.n	801e234 <logf+0x38>
 801e214:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801e218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e21c:	dc0a      	bgt.n	801e234 <logf+0x38>
 801e21e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e226:	d108      	bne.n	801e23a <logf+0x3e>
 801e228:	f7fd fada 	bl	801b7e0 <__errno>
 801e22c:	2322      	movs	r3, #34	@ 0x22
 801e22e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801e250 <logf+0x54>
 801e232:	6003      	str	r3, [r0, #0]
 801e234:	ecbd 8b02 	vpop	{d8}
 801e238:	bd08      	pop	{r3, pc}
 801e23a:	f7fd fad1 	bl	801b7e0 <__errno>
 801e23e:	ecbd 8b02 	vpop	{d8}
 801e242:	2321      	movs	r3, #33	@ 0x21
 801e244:	6003      	str	r3, [r0, #0]
 801e246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801e24a:	4802      	ldr	r0, [pc, #8]	@ (801e254 <logf+0x58>)
 801e24c:	f7fd bb14 	b.w	801b878 <nanf>
 801e250:	ff800000 	.word	0xff800000
 801e254:	0802336e 	.word	0x0802336e

0801e258 <fmin>:
 801e258:	b508      	push	{r3, lr}
 801e25a:	ed2d 8b04 	vpush	{d8-d9}
 801e25e:	eeb0 8a40 	vmov.f32	s16, s0
 801e262:	eef0 8a60 	vmov.f32	s17, s1
 801e266:	eeb0 9a41 	vmov.f32	s18, s2
 801e26a:	eef0 9a61 	vmov.f32	s19, s3
 801e26e:	f000 f81d 	bl	801e2ac <__fpclassifyd>
 801e272:	b950      	cbnz	r0, 801e28a <fmin+0x32>
 801e274:	eeb0 8a49 	vmov.f32	s16, s18
 801e278:	eef0 8a69 	vmov.f32	s17, s19
 801e27c:	eeb0 0a48 	vmov.f32	s0, s16
 801e280:	eef0 0a68 	vmov.f32	s1, s17
 801e284:	ecbd 8b04 	vpop	{d8-d9}
 801e288:	bd08      	pop	{r3, pc}
 801e28a:	eeb0 0a49 	vmov.f32	s0, s18
 801e28e:	eef0 0a69 	vmov.f32	s1, s19
 801e292:	f000 f80b 	bl	801e2ac <__fpclassifyd>
 801e296:	2800      	cmp	r0, #0
 801e298:	d0f0      	beq.n	801e27c <fmin+0x24>
 801e29a:	ec53 2b19 	vmov	r2, r3, d9
 801e29e:	ec51 0b18 	vmov	r0, r1, d8
 801e2a2:	f7e2 fbf3 	bl	8000a8c <__aeabi_dcmplt>
 801e2a6:	2800      	cmp	r0, #0
 801e2a8:	d0e4      	beq.n	801e274 <fmin+0x1c>
 801e2aa:	e7e7      	b.n	801e27c <fmin+0x24>

0801e2ac <__fpclassifyd>:
 801e2ac:	ec51 0b10 	vmov	r0, r1, d0
 801e2b0:	b510      	push	{r4, lr}
 801e2b2:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 801e2b6:	460b      	mov	r3, r1
 801e2b8:	d019      	beq.n	801e2ee <__fpclassifyd+0x42>
 801e2ba:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 801e2be:	490e      	ldr	r1, [pc, #56]	@ (801e2f8 <__fpclassifyd+0x4c>)
 801e2c0:	428a      	cmp	r2, r1
 801e2c2:	d90e      	bls.n	801e2e2 <__fpclassifyd+0x36>
 801e2c4:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 801e2c8:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 801e2cc:	428a      	cmp	r2, r1
 801e2ce:	d908      	bls.n	801e2e2 <__fpclassifyd+0x36>
 801e2d0:	4a0a      	ldr	r2, [pc, #40]	@ (801e2fc <__fpclassifyd+0x50>)
 801e2d2:	4213      	tst	r3, r2
 801e2d4:	d007      	beq.n	801e2e6 <__fpclassifyd+0x3a>
 801e2d6:	4294      	cmp	r4, r2
 801e2d8:	d107      	bne.n	801e2ea <__fpclassifyd+0x3e>
 801e2da:	fab0 f080 	clz	r0, r0
 801e2de:	0940      	lsrs	r0, r0, #5
 801e2e0:	bd10      	pop	{r4, pc}
 801e2e2:	2004      	movs	r0, #4
 801e2e4:	e7fc      	b.n	801e2e0 <__fpclassifyd+0x34>
 801e2e6:	2003      	movs	r0, #3
 801e2e8:	e7fa      	b.n	801e2e0 <__fpclassifyd+0x34>
 801e2ea:	2000      	movs	r0, #0
 801e2ec:	e7f8      	b.n	801e2e0 <__fpclassifyd+0x34>
 801e2ee:	2800      	cmp	r0, #0
 801e2f0:	d1ee      	bne.n	801e2d0 <__fpclassifyd+0x24>
 801e2f2:	2002      	movs	r0, #2
 801e2f4:	e7f4      	b.n	801e2e0 <__fpclassifyd+0x34>
 801e2f6:	bf00      	nop
 801e2f8:	7fdfffff 	.word	0x7fdfffff
 801e2fc:	7ff00000 	.word	0x7ff00000

0801e300 <finitef>:
 801e300:	ee10 3a10 	vmov	r3, s0
 801e304:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801e308:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801e30c:	bfac      	ite	ge
 801e30e:	2000      	movge	r0, #0
 801e310:	2001      	movlt	r0, #1
 801e312:	4770      	bx	lr

0801e314 <cosl>:
 801e314:	f7ff be94 	b.w	801e040 <cos>

0801e318 <sinl>:
 801e318:	f7ff bee6 	b.w	801e0e8 <sin>

0801e31c <acosl>:
 801e31c:	f000 bbfc 	b.w	801eb18 <acos>

0801e320 <floor>:
 801e320:	ec51 0b10 	vmov	r0, r1, d0
 801e324:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e32c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801e330:	2e13      	cmp	r6, #19
 801e332:	460c      	mov	r4, r1
 801e334:	4605      	mov	r5, r0
 801e336:	4680      	mov	r8, r0
 801e338:	dc34      	bgt.n	801e3a4 <floor+0x84>
 801e33a:	2e00      	cmp	r6, #0
 801e33c:	da17      	bge.n	801e36e <floor+0x4e>
 801e33e:	a332      	add	r3, pc, #200	@ (adr r3, 801e408 <floor+0xe8>)
 801e340:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e344:	f7e1 ff7a 	bl	800023c <__adddf3>
 801e348:	2200      	movs	r2, #0
 801e34a:	2300      	movs	r3, #0
 801e34c:	f7e2 fbbc 	bl	8000ac8 <__aeabi_dcmpgt>
 801e350:	b150      	cbz	r0, 801e368 <floor+0x48>
 801e352:	2c00      	cmp	r4, #0
 801e354:	da55      	bge.n	801e402 <floor+0xe2>
 801e356:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e35a:	432c      	orrs	r4, r5
 801e35c:	2500      	movs	r5, #0
 801e35e:	42ac      	cmp	r4, r5
 801e360:	4c2b      	ldr	r4, [pc, #172]	@ (801e410 <floor+0xf0>)
 801e362:	bf08      	it	eq
 801e364:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e368:	4621      	mov	r1, r4
 801e36a:	4628      	mov	r0, r5
 801e36c:	e023      	b.n	801e3b6 <floor+0x96>
 801e36e:	4f29      	ldr	r7, [pc, #164]	@ (801e414 <floor+0xf4>)
 801e370:	4137      	asrs	r7, r6
 801e372:	ea01 0307 	and.w	r3, r1, r7
 801e376:	4303      	orrs	r3, r0
 801e378:	d01d      	beq.n	801e3b6 <floor+0x96>
 801e37a:	a323      	add	r3, pc, #140	@ (adr r3, 801e408 <floor+0xe8>)
 801e37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e380:	f7e1 ff5c 	bl	800023c <__adddf3>
 801e384:	2200      	movs	r2, #0
 801e386:	2300      	movs	r3, #0
 801e388:	f7e2 fb9e 	bl	8000ac8 <__aeabi_dcmpgt>
 801e38c:	2800      	cmp	r0, #0
 801e38e:	d0eb      	beq.n	801e368 <floor+0x48>
 801e390:	2c00      	cmp	r4, #0
 801e392:	bfbe      	ittt	lt
 801e394:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e398:	4133      	asrlt	r3, r6
 801e39a:	18e4      	addlt	r4, r4, r3
 801e39c:	ea24 0407 	bic.w	r4, r4, r7
 801e3a0:	2500      	movs	r5, #0
 801e3a2:	e7e1      	b.n	801e368 <floor+0x48>
 801e3a4:	2e33      	cmp	r6, #51	@ 0x33
 801e3a6:	dd0a      	ble.n	801e3be <floor+0x9e>
 801e3a8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e3ac:	d103      	bne.n	801e3b6 <floor+0x96>
 801e3ae:	4602      	mov	r2, r0
 801e3b0:	460b      	mov	r3, r1
 801e3b2:	f7e1 ff43 	bl	800023c <__adddf3>
 801e3b6:	ec41 0b10 	vmov	d0, r0, r1
 801e3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e3be:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801e3c2:	f04f 37ff 	mov.w	r7, #4294967295
 801e3c6:	40df      	lsrs	r7, r3
 801e3c8:	4207      	tst	r7, r0
 801e3ca:	d0f4      	beq.n	801e3b6 <floor+0x96>
 801e3cc:	a30e      	add	r3, pc, #56	@ (adr r3, 801e408 <floor+0xe8>)
 801e3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3d2:	f7e1 ff33 	bl	800023c <__adddf3>
 801e3d6:	2200      	movs	r2, #0
 801e3d8:	2300      	movs	r3, #0
 801e3da:	f7e2 fb75 	bl	8000ac8 <__aeabi_dcmpgt>
 801e3de:	2800      	cmp	r0, #0
 801e3e0:	d0c2      	beq.n	801e368 <floor+0x48>
 801e3e2:	2c00      	cmp	r4, #0
 801e3e4:	da0a      	bge.n	801e3fc <floor+0xdc>
 801e3e6:	2e14      	cmp	r6, #20
 801e3e8:	d101      	bne.n	801e3ee <floor+0xce>
 801e3ea:	3401      	adds	r4, #1
 801e3ec:	e006      	b.n	801e3fc <floor+0xdc>
 801e3ee:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e3f2:	2301      	movs	r3, #1
 801e3f4:	40b3      	lsls	r3, r6
 801e3f6:	441d      	add	r5, r3
 801e3f8:	4545      	cmp	r5, r8
 801e3fa:	d3f6      	bcc.n	801e3ea <floor+0xca>
 801e3fc:	ea25 0507 	bic.w	r5, r5, r7
 801e400:	e7b2      	b.n	801e368 <floor+0x48>
 801e402:	2500      	movs	r5, #0
 801e404:	462c      	mov	r4, r5
 801e406:	e7af      	b.n	801e368 <floor+0x48>
 801e408:	8800759c 	.word	0x8800759c
 801e40c:	7e37e43c 	.word	0x7e37e43c
 801e410:	bff00000 	.word	0xbff00000
 801e414:	000fffff 	.word	0x000fffff

0801e418 <__kernel_cos>:
 801e418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e41c:	ec57 6b10 	vmov	r6, r7, d0
 801e420:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e424:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801e428:	ed8d 1b00 	vstr	d1, [sp]
 801e42c:	d206      	bcs.n	801e43c <__kernel_cos+0x24>
 801e42e:	4630      	mov	r0, r6
 801e430:	4639      	mov	r1, r7
 801e432:	f7e2 fb69 	bl	8000b08 <__aeabi_d2iz>
 801e436:	2800      	cmp	r0, #0
 801e438:	f000 8088 	beq.w	801e54c <__kernel_cos+0x134>
 801e43c:	4632      	mov	r2, r6
 801e43e:	463b      	mov	r3, r7
 801e440:	4630      	mov	r0, r6
 801e442:	4639      	mov	r1, r7
 801e444:	f7e2 f8b0 	bl	80005a8 <__aeabi_dmul>
 801e448:	4b51      	ldr	r3, [pc, #324]	@ (801e590 <__kernel_cos+0x178>)
 801e44a:	2200      	movs	r2, #0
 801e44c:	4604      	mov	r4, r0
 801e44e:	460d      	mov	r5, r1
 801e450:	f7e2 f8aa 	bl	80005a8 <__aeabi_dmul>
 801e454:	a340      	add	r3, pc, #256	@ (adr r3, 801e558 <__kernel_cos+0x140>)
 801e456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e45a:	4682      	mov	sl, r0
 801e45c:	468b      	mov	fp, r1
 801e45e:	4620      	mov	r0, r4
 801e460:	4629      	mov	r1, r5
 801e462:	f7e2 f8a1 	bl	80005a8 <__aeabi_dmul>
 801e466:	a33e      	add	r3, pc, #248	@ (adr r3, 801e560 <__kernel_cos+0x148>)
 801e468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e46c:	f7e1 fee6 	bl	800023c <__adddf3>
 801e470:	4622      	mov	r2, r4
 801e472:	462b      	mov	r3, r5
 801e474:	f7e2 f898 	bl	80005a8 <__aeabi_dmul>
 801e478:	a33b      	add	r3, pc, #236	@ (adr r3, 801e568 <__kernel_cos+0x150>)
 801e47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e47e:	f7e1 fedb 	bl	8000238 <__aeabi_dsub>
 801e482:	4622      	mov	r2, r4
 801e484:	462b      	mov	r3, r5
 801e486:	f7e2 f88f 	bl	80005a8 <__aeabi_dmul>
 801e48a:	a339      	add	r3, pc, #228	@ (adr r3, 801e570 <__kernel_cos+0x158>)
 801e48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e490:	f7e1 fed4 	bl	800023c <__adddf3>
 801e494:	4622      	mov	r2, r4
 801e496:	462b      	mov	r3, r5
 801e498:	f7e2 f886 	bl	80005a8 <__aeabi_dmul>
 801e49c:	a336      	add	r3, pc, #216	@ (adr r3, 801e578 <__kernel_cos+0x160>)
 801e49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4a2:	f7e1 fec9 	bl	8000238 <__aeabi_dsub>
 801e4a6:	4622      	mov	r2, r4
 801e4a8:	462b      	mov	r3, r5
 801e4aa:	f7e2 f87d 	bl	80005a8 <__aeabi_dmul>
 801e4ae:	a334      	add	r3, pc, #208	@ (adr r3, 801e580 <__kernel_cos+0x168>)
 801e4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4b4:	f7e1 fec2 	bl	800023c <__adddf3>
 801e4b8:	4622      	mov	r2, r4
 801e4ba:	462b      	mov	r3, r5
 801e4bc:	f7e2 f874 	bl	80005a8 <__aeabi_dmul>
 801e4c0:	4622      	mov	r2, r4
 801e4c2:	462b      	mov	r3, r5
 801e4c4:	f7e2 f870 	bl	80005a8 <__aeabi_dmul>
 801e4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e4cc:	4604      	mov	r4, r0
 801e4ce:	460d      	mov	r5, r1
 801e4d0:	4630      	mov	r0, r6
 801e4d2:	4639      	mov	r1, r7
 801e4d4:	f7e2 f868 	bl	80005a8 <__aeabi_dmul>
 801e4d8:	460b      	mov	r3, r1
 801e4da:	4602      	mov	r2, r0
 801e4dc:	4629      	mov	r1, r5
 801e4de:	4620      	mov	r0, r4
 801e4e0:	f7e1 feaa 	bl	8000238 <__aeabi_dsub>
 801e4e4:	4b2b      	ldr	r3, [pc, #172]	@ (801e594 <__kernel_cos+0x17c>)
 801e4e6:	4598      	cmp	r8, r3
 801e4e8:	4606      	mov	r6, r0
 801e4ea:	460f      	mov	r7, r1
 801e4ec:	d810      	bhi.n	801e510 <__kernel_cos+0xf8>
 801e4ee:	4602      	mov	r2, r0
 801e4f0:	460b      	mov	r3, r1
 801e4f2:	4650      	mov	r0, sl
 801e4f4:	4659      	mov	r1, fp
 801e4f6:	f7e1 fe9f 	bl	8000238 <__aeabi_dsub>
 801e4fa:	460b      	mov	r3, r1
 801e4fc:	4926      	ldr	r1, [pc, #152]	@ (801e598 <__kernel_cos+0x180>)
 801e4fe:	4602      	mov	r2, r0
 801e500:	2000      	movs	r0, #0
 801e502:	f7e1 fe99 	bl	8000238 <__aeabi_dsub>
 801e506:	ec41 0b10 	vmov	d0, r0, r1
 801e50a:	b003      	add	sp, #12
 801e50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e510:	4b22      	ldr	r3, [pc, #136]	@ (801e59c <__kernel_cos+0x184>)
 801e512:	4921      	ldr	r1, [pc, #132]	@ (801e598 <__kernel_cos+0x180>)
 801e514:	4598      	cmp	r8, r3
 801e516:	bf8c      	ite	hi
 801e518:	4d21      	ldrhi	r5, [pc, #132]	@ (801e5a0 <__kernel_cos+0x188>)
 801e51a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801e51e:	2400      	movs	r4, #0
 801e520:	4622      	mov	r2, r4
 801e522:	462b      	mov	r3, r5
 801e524:	2000      	movs	r0, #0
 801e526:	f7e1 fe87 	bl	8000238 <__aeabi_dsub>
 801e52a:	4622      	mov	r2, r4
 801e52c:	4680      	mov	r8, r0
 801e52e:	4689      	mov	r9, r1
 801e530:	462b      	mov	r3, r5
 801e532:	4650      	mov	r0, sl
 801e534:	4659      	mov	r1, fp
 801e536:	f7e1 fe7f 	bl	8000238 <__aeabi_dsub>
 801e53a:	4632      	mov	r2, r6
 801e53c:	463b      	mov	r3, r7
 801e53e:	f7e1 fe7b 	bl	8000238 <__aeabi_dsub>
 801e542:	4602      	mov	r2, r0
 801e544:	460b      	mov	r3, r1
 801e546:	4640      	mov	r0, r8
 801e548:	4649      	mov	r1, r9
 801e54a:	e7da      	b.n	801e502 <__kernel_cos+0xea>
 801e54c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801e588 <__kernel_cos+0x170>
 801e550:	e7db      	b.n	801e50a <__kernel_cos+0xf2>
 801e552:	bf00      	nop
 801e554:	f3af 8000 	nop.w
 801e558:	be8838d4 	.word	0xbe8838d4
 801e55c:	bda8fae9 	.word	0xbda8fae9
 801e560:	bdb4b1c4 	.word	0xbdb4b1c4
 801e564:	3e21ee9e 	.word	0x3e21ee9e
 801e568:	809c52ad 	.word	0x809c52ad
 801e56c:	3e927e4f 	.word	0x3e927e4f
 801e570:	19cb1590 	.word	0x19cb1590
 801e574:	3efa01a0 	.word	0x3efa01a0
 801e578:	16c15177 	.word	0x16c15177
 801e57c:	3f56c16c 	.word	0x3f56c16c
 801e580:	5555554c 	.word	0x5555554c
 801e584:	3fa55555 	.word	0x3fa55555
 801e588:	00000000 	.word	0x00000000
 801e58c:	3ff00000 	.word	0x3ff00000
 801e590:	3fe00000 	.word	0x3fe00000
 801e594:	3fd33332 	.word	0x3fd33332
 801e598:	3ff00000 	.word	0x3ff00000
 801e59c:	3fe90000 	.word	0x3fe90000
 801e5a0:	3fd20000 	.word	0x3fd20000
 801e5a4:	00000000 	.word	0x00000000

0801e5a8 <__kernel_sin>:
 801e5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5ac:	ec55 4b10 	vmov	r4, r5, d0
 801e5b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801e5b4:	b085      	sub	sp, #20
 801e5b6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801e5ba:	ed8d 1b02 	vstr	d1, [sp, #8]
 801e5be:	4680      	mov	r8, r0
 801e5c0:	d205      	bcs.n	801e5ce <__kernel_sin+0x26>
 801e5c2:	4620      	mov	r0, r4
 801e5c4:	4629      	mov	r1, r5
 801e5c6:	f7e2 fa9f 	bl	8000b08 <__aeabi_d2iz>
 801e5ca:	2800      	cmp	r0, #0
 801e5cc:	d052      	beq.n	801e674 <__kernel_sin+0xcc>
 801e5ce:	4622      	mov	r2, r4
 801e5d0:	462b      	mov	r3, r5
 801e5d2:	4620      	mov	r0, r4
 801e5d4:	4629      	mov	r1, r5
 801e5d6:	f7e1 ffe7 	bl	80005a8 <__aeabi_dmul>
 801e5da:	4682      	mov	sl, r0
 801e5dc:	468b      	mov	fp, r1
 801e5de:	4602      	mov	r2, r0
 801e5e0:	460b      	mov	r3, r1
 801e5e2:	4620      	mov	r0, r4
 801e5e4:	4629      	mov	r1, r5
 801e5e6:	f7e1 ffdf 	bl	80005a8 <__aeabi_dmul>
 801e5ea:	a342      	add	r3, pc, #264	@ (adr r3, 801e6f4 <__kernel_sin+0x14c>)
 801e5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5f0:	e9cd 0100 	strd	r0, r1, [sp]
 801e5f4:	4650      	mov	r0, sl
 801e5f6:	4659      	mov	r1, fp
 801e5f8:	f7e1 ffd6 	bl	80005a8 <__aeabi_dmul>
 801e5fc:	a33f      	add	r3, pc, #252	@ (adr r3, 801e6fc <__kernel_sin+0x154>)
 801e5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e602:	f7e1 fe19 	bl	8000238 <__aeabi_dsub>
 801e606:	4652      	mov	r2, sl
 801e608:	465b      	mov	r3, fp
 801e60a:	f7e1 ffcd 	bl	80005a8 <__aeabi_dmul>
 801e60e:	a33d      	add	r3, pc, #244	@ (adr r3, 801e704 <__kernel_sin+0x15c>)
 801e610:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e614:	f7e1 fe12 	bl	800023c <__adddf3>
 801e618:	4652      	mov	r2, sl
 801e61a:	465b      	mov	r3, fp
 801e61c:	f7e1 ffc4 	bl	80005a8 <__aeabi_dmul>
 801e620:	a33a      	add	r3, pc, #232	@ (adr r3, 801e70c <__kernel_sin+0x164>)
 801e622:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e626:	f7e1 fe07 	bl	8000238 <__aeabi_dsub>
 801e62a:	4652      	mov	r2, sl
 801e62c:	465b      	mov	r3, fp
 801e62e:	f7e1 ffbb 	bl	80005a8 <__aeabi_dmul>
 801e632:	a338      	add	r3, pc, #224	@ (adr r3, 801e714 <__kernel_sin+0x16c>)
 801e634:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e638:	f7e1 fe00 	bl	800023c <__adddf3>
 801e63c:	4606      	mov	r6, r0
 801e63e:	460f      	mov	r7, r1
 801e640:	f1b8 0f00 	cmp.w	r8, #0
 801e644:	d11b      	bne.n	801e67e <__kernel_sin+0xd6>
 801e646:	4602      	mov	r2, r0
 801e648:	460b      	mov	r3, r1
 801e64a:	4650      	mov	r0, sl
 801e64c:	4659      	mov	r1, fp
 801e64e:	f7e1 ffab 	bl	80005a8 <__aeabi_dmul>
 801e652:	a325      	add	r3, pc, #148	@ (adr r3, 801e6e8 <__kernel_sin+0x140>)
 801e654:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e658:	f7e1 fdee 	bl	8000238 <__aeabi_dsub>
 801e65c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e660:	f7e1 ffa2 	bl	80005a8 <__aeabi_dmul>
 801e664:	4602      	mov	r2, r0
 801e666:	460b      	mov	r3, r1
 801e668:	4620      	mov	r0, r4
 801e66a:	4629      	mov	r1, r5
 801e66c:	f7e1 fde6 	bl	800023c <__adddf3>
 801e670:	4604      	mov	r4, r0
 801e672:	460d      	mov	r5, r1
 801e674:	ec45 4b10 	vmov	d0, r4, r5
 801e678:	b005      	add	sp, #20
 801e67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e682:	4b1b      	ldr	r3, [pc, #108]	@ (801e6f0 <__kernel_sin+0x148>)
 801e684:	2200      	movs	r2, #0
 801e686:	f7e1 ff8f 	bl	80005a8 <__aeabi_dmul>
 801e68a:	4632      	mov	r2, r6
 801e68c:	4680      	mov	r8, r0
 801e68e:	4689      	mov	r9, r1
 801e690:	463b      	mov	r3, r7
 801e692:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e696:	f7e1 ff87 	bl	80005a8 <__aeabi_dmul>
 801e69a:	4602      	mov	r2, r0
 801e69c:	460b      	mov	r3, r1
 801e69e:	4640      	mov	r0, r8
 801e6a0:	4649      	mov	r1, r9
 801e6a2:	f7e1 fdc9 	bl	8000238 <__aeabi_dsub>
 801e6a6:	4652      	mov	r2, sl
 801e6a8:	465b      	mov	r3, fp
 801e6aa:	f7e1 ff7d 	bl	80005a8 <__aeabi_dmul>
 801e6ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e6b2:	f7e1 fdc1 	bl	8000238 <__aeabi_dsub>
 801e6b6:	a30c      	add	r3, pc, #48	@ (adr r3, 801e6e8 <__kernel_sin+0x140>)
 801e6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6bc:	4606      	mov	r6, r0
 801e6be:	460f      	mov	r7, r1
 801e6c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e6c4:	f7e1 ff70 	bl	80005a8 <__aeabi_dmul>
 801e6c8:	4602      	mov	r2, r0
 801e6ca:	460b      	mov	r3, r1
 801e6cc:	4630      	mov	r0, r6
 801e6ce:	4639      	mov	r1, r7
 801e6d0:	f7e1 fdb4 	bl	800023c <__adddf3>
 801e6d4:	4602      	mov	r2, r0
 801e6d6:	460b      	mov	r3, r1
 801e6d8:	4620      	mov	r0, r4
 801e6da:	4629      	mov	r1, r5
 801e6dc:	f7e1 fdac 	bl	8000238 <__aeabi_dsub>
 801e6e0:	e7c6      	b.n	801e670 <__kernel_sin+0xc8>
 801e6e2:	bf00      	nop
 801e6e4:	f3af 8000 	nop.w
 801e6e8:	55555549 	.word	0x55555549
 801e6ec:	3fc55555 	.word	0x3fc55555
 801e6f0:	3fe00000 	.word	0x3fe00000
 801e6f4:	5acfd57c 	.word	0x5acfd57c
 801e6f8:	3de5d93a 	.word	0x3de5d93a
 801e6fc:	8a2b9ceb 	.word	0x8a2b9ceb
 801e700:	3e5ae5e6 	.word	0x3e5ae5e6
 801e704:	57b1fe7d 	.word	0x57b1fe7d
 801e708:	3ec71de3 	.word	0x3ec71de3
 801e70c:	19c161d5 	.word	0x19c161d5
 801e710:	3f2a01a0 	.word	0x3f2a01a0
 801e714:	1110f8a6 	.word	0x1110f8a6
 801e718:	3f811111 	.word	0x3f811111
 801e71c:	00000000 	.word	0x00000000

0801e720 <__ieee754_rem_pio2>:
 801e720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e724:	ec57 6b10 	vmov	r6, r7, d0
 801e728:	4bc5      	ldr	r3, [pc, #788]	@ (801ea40 <__ieee754_rem_pio2+0x320>)
 801e72a:	b08d      	sub	sp, #52	@ 0x34
 801e72c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e730:	4598      	cmp	r8, r3
 801e732:	4604      	mov	r4, r0
 801e734:	9704      	str	r7, [sp, #16]
 801e736:	d807      	bhi.n	801e748 <__ieee754_rem_pio2+0x28>
 801e738:	2200      	movs	r2, #0
 801e73a:	2300      	movs	r3, #0
 801e73c:	ed80 0b00 	vstr	d0, [r0]
 801e740:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e744:	2500      	movs	r5, #0
 801e746:	e028      	b.n	801e79a <__ieee754_rem_pio2+0x7a>
 801e748:	4bbe      	ldr	r3, [pc, #760]	@ (801ea44 <__ieee754_rem_pio2+0x324>)
 801e74a:	4598      	cmp	r8, r3
 801e74c:	d878      	bhi.n	801e840 <__ieee754_rem_pio2+0x120>
 801e74e:	9b04      	ldr	r3, [sp, #16]
 801e750:	4dbd      	ldr	r5, [pc, #756]	@ (801ea48 <__ieee754_rem_pio2+0x328>)
 801e752:	2b00      	cmp	r3, #0
 801e754:	4630      	mov	r0, r6
 801e756:	a3ac      	add	r3, pc, #688	@ (adr r3, 801ea08 <__ieee754_rem_pio2+0x2e8>)
 801e758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e75c:	4639      	mov	r1, r7
 801e75e:	dd38      	ble.n	801e7d2 <__ieee754_rem_pio2+0xb2>
 801e760:	f7e1 fd6a 	bl	8000238 <__aeabi_dsub>
 801e764:	45a8      	cmp	r8, r5
 801e766:	4606      	mov	r6, r0
 801e768:	460f      	mov	r7, r1
 801e76a:	d01a      	beq.n	801e7a2 <__ieee754_rem_pio2+0x82>
 801e76c:	a3a8      	add	r3, pc, #672	@ (adr r3, 801ea10 <__ieee754_rem_pio2+0x2f0>)
 801e76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e772:	f7e1 fd61 	bl	8000238 <__aeabi_dsub>
 801e776:	4602      	mov	r2, r0
 801e778:	460b      	mov	r3, r1
 801e77a:	4680      	mov	r8, r0
 801e77c:	4689      	mov	r9, r1
 801e77e:	4630      	mov	r0, r6
 801e780:	4639      	mov	r1, r7
 801e782:	f7e1 fd59 	bl	8000238 <__aeabi_dsub>
 801e786:	a3a2      	add	r3, pc, #648	@ (adr r3, 801ea10 <__ieee754_rem_pio2+0x2f0>)
 801e788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e78c:	f7e1 fd54 	bl	8000238 <__aeabi_dsub>
 801e790:	e9c4 8900 	strd	r8, r9, [r4]
 801e794:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e798:	2501      	movs	r5, #1
 801e79a:	4628      	mov	r0, r5
 801e79c:	b00d      	add	sp, #52	@ 0x34
 801e79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7a2:	a39d      	add	r3, pc, #628	@ (adr r3, 801ea18 <__ieee754_rem_pio2+0x2f8>)
 801e7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7a8:	f7e1 fd46 	bl	8000238 <__aeabi_dsub>
 801e7ac:	a39c      	add	r3, pc, #624	@ (adr r3, 801ea20 <__ieee754_rem_pio2+0x300>)
 801e7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7b2:	4606      	mov	r6, r0
 801e7b4:	460f      	mov	r7, r1
 801e7b6:	f7e1 fd3f 	bl	8000238 <__aeabi_dsub>
 801e7ba:	4602      	mov	r2, r0
 801e7bc:	460b      	mov	r3, r1
 801e7be:	4680      	mov	r8, r0
 801e7c0:	4689      	mov	r9, r1
 801e7c2:	4630      	mov	r0, r6
 801e7c4:	4639      	mov	r1, r7
 801e7c6:	f7e1 fd37 	bl	8000238 <__aeabi_dsub>
 801e7ca:	a395      	add	r3, pc, #596	@ (adr r3, 801ea20 <__ieee754_rem_pio2+0x300>)
 801e7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7d0:	e7dc      	b.n	801e78c <__ieee754_rem_pio2+0x6c>
 801e7d2:	f7e1 fd33 	bl	800023c <__adddf3>
 801e7d6:	45a8      	cmp	r8, r5
 801e7d8:	4606      	mov	r6, r0
 801e7da:	460f      	mov	r7, r1
 801e7dc:	d018      	beq.n	801e810 <__ieee754_rem_pio2+0xf0>
 801e7de:	a38c      	add	r3, pc, #560	@ (adr r3, 801ea10 <__ieee754_rem_pio2+0x2f0>)
 801e7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7e4:	f7e1 fd2a 	bl	800023c <__adddf3>
 801e7e8:	4602      	mov	r2, r0
 801e7ea:	460b      	mov	r3, r1
 801e7ec:	4680      	mov	r8, r0
 801e7ee:	4689      	mov	r9, r1
 801e7f0:	4630      	mov	r0, r6
 801e7f2:	4639      	mov	r1, r7
 801e7f4:	f7e1 fd20 	bl	8000238 <__aeabi_dsub>
 801e7f8:	a385      	add	r3, pc, #532	@ (adr r3, 801ea10 <__ieee754_rem_pio2+0x2f0>)
 801e7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7fe:	f7e1 fd1d 	bl	800023c <__adddf3>
 801e802:	f04f 35ff 	mov.w	r5, #4294967295
 801e806:	e9c4 8900 	strd	r8, r9, [r4]
 801e80a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e80e:	e7c4      	b.n	801e79a <__ieee754_rem_pio2+0x7a>
 801e810:	a381      	add	r3, pc, #516	@ (adr r3, 801ea18 <__ieee754_rem_pio2+0x2f8>)
 801e812:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e816:	f7e1 fd11 	bl	800023c <__adddf3>
 801e81a:	a381      	add	r3, pc, #516	@ (adr r3, 801ea20 <__ieee754_rem_pio2+0x300>)
 801e81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e820:	4606      	mov	r6, r0
 801e822:	460f      	mov	r7, r1
 801e824:	f7e1 fd0a 	bl	800023c <__adddf3>
 801e828:	4602      	mov	r2, r0
 801e82a:	460b      	mov	r3, r1
 801e82c:	4680      	mov	r8, r0
 801e82e:	4689      	mov	r9, r1
 801e830:	4630      	mov	r0, r6
 801e832:	4639      	mov	r1, r7
 801e834:	f7e1 fd00 	bl	8000238 <__aeabi_dsub>
 801e838:	a379      	add	r3, pc, #484	@ (adr r3, 801ea20 <__ieee754_rem_pio2+0x300>)
 801e83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e83e:	e7de      	b.n	801e7fe <__ieee754_rem_pio2+0xde>
 801e840:	4b82      	ldr	r3, [pc, #520]	@ (801ea4c <__ieee754_rem_pio2+0x32c>)
 801e842:	4598      	cmp	r8, r3
 801e844:	f200 80d1 	bhi.w	801e9ea <__ieee754_rem_pio2+0x2ca>
 801e848:	f000 f99a 	bl	801eb80 <fabs>
 801e84c:	ec57 6b10 	vmov	r6, r7, d0
 801e850:	a375      	add	r3, pc, #468	@ (adr r3, 801ea28 <__ieee754_rem_pio2+0x308>)
 801e852:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e856:	4630      	mov	r0, r6
 801e858:	4639      	mov	r1, r7
 801e85a:	f7e1 fea5 	bl	80005a8 <__aeabi_dmul>
 801e85e:	4b7c      	ldr	r3, [pc, #496]	@ (801ea50 <__ieee754_rem_pio2+0x330>)
 801e860:	2200      	movs	r2, #0
 801e862:	f7e1 fceb 	bl	800023c <__adddf3>
 801e866:	f7e2 f94f 	bl	8000b08 <__aeabi_d2iz>
 801e86a:	4605      	mov	r5, r0
 801e86c:	f7e1 fe32 	bl	80004d4 <__aeabi_i2d>
 801e870:	4602      	mov	r2, r0
 801e872:	460b      	mov	r3, r1
 801e874:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e878:	a363      	add	r3, pc, #396	@ (adr r3, 801ea08 <__ieee754_rem_pio2+0x2e8>)
 801e87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e87e:	f7e1 fe93 	bl	80005a8 <__aeabi_dmul>
 801e882:	4602      	mov	r2, r0
 801e884:	460b      	mov	r3, r1
 801e886:	4630      	mov	r0, r6
 801e888:	4639      	mov	r1, r7
 801e88a:	f7e1 fcd5 	bl	8000238 <__aeabi_dsub>
 801e88e:	a360      	add	r3, pc, #384	@ (adr r3, 801ea10 <__ieee754_rem_pio2+0x2f0>)
 801e890:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e894:	4682      	mov	sl, r0
 801e896:	468b      	mov	fp, r1
 801e898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e89c:	f7e1 fe84 	bl	80005a8 <__aeabi_dmul>
 801e8a0:	2d1f      	cmp	r5, #31
 801e8a2:	4606      	mov	r6, r0
 801e8a4:	460f      	mov	r7, r1
 801e8a6:	dc0c      	bgt.n	801e8c2 <__ieee754_rem_pio2+0x1a2>
 801e8a8:	4b6a      	ldr	r3, [pc, #424]	@ (801ea54 <__ieee754_rem_pio2+0x334>)
 801e8aa:	1e6a      	subs	r2, r5, #1
 801e8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e8b0:	4543      	cmp	r3, r8
 801e8b2:	d006      	beq.n	801e8c2 <__ieee754_rem_pio2+0x1a2>
 801e8b4:	4632      	mov	r2, r6
 801e8b6:	463b      	mov	r3, r7
 801e8b8:	4650      	mov	r0, sl
 801e8ba:	4659      	mov	r1, fp
 801e8bc:	f7e1 fcbc 	bl	8000238 <__aeabi_dsub>
 801e8c0:	e00e      	b.n	801e8e0 <__ieee754_rem_pio2+0x1c0>
 801e8c2:	463b      	mov	r3, r7
 801e8c4:	4632      	mov	r2, r6
 801e8c6:	4650      	mov	r0, sl
 801e8c8:	4659      	mov	r1, fp
 801e8ca:	f7e1 fcb5 	bl	8000238 <__aeabi_dsub>
 801e8ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e8d2:	9305      	str	r3, [sp, #20]
 801e8d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e8d8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801e8dc:	2b10      	cmp	r3, #16
 801e8de:	dc02      	bgt.n	801e8e6 <__ieee754_rem_pio2+0x1c6>
 801e8e0:	e9c4 0100 	strd	r0, r1, [r4]
 801e8e4:	e039      	b.n	801e95a <__ieee754_rem_pio2+0x23a>
 801e8e6:	a34c      	add	r3, pc, #304	@ (adr r3, 801ea18 <__ieee754_rem_pio2+0x2f8>)
 801e8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e8f0:	f7e1 fe5a 	bl	80005a8 <__aeabi_dmul>
 801e8f4:	4606      	mov	r6, r0
 801e8f6:	460f      	mov	r7, r1
 801e8f8:	4602      	mov	r2, r0
 801e8fa:	460b      	mov	r3, r1
 801e8fc:	4650      	mov	r0, sl
 801e8fe:	4659      	mov	r1, fp
 801e900:	f7e1 fc9a 	bl	8000238 <__aeabi_dsub>
 801e904:	4602      	mov	r2, r0
 801e906:	460b      	mov	r3, r1
 801e908:	4680      	mov	r8, r0
 801e90a:	4689      	mov	r9, r1
 801e90c:	4650      	mov	r0, sl
 801e90e:	4659      	mov	r1, fp
 801e910:	f7e1 fc92 	bl	8000238 <__aeabi_dsub>
 801e914:	4632      	mov	r2, r6
 801e916:	463b      	mov	r3, r7
 801e918:	f7e1 fc8e 	bl	8000238 <__aeabi_dsub>
 801e91c:	a340      	add	r3, pc, #256	@ (adr r3, 801ea20 <__ieee754_rem_pio2+0x300>)
 801e91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e922:	4606      	mov	r6, r0
 801e924:	460f      	mov	r7, r1
 801e926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e92a:	f7e1 fe3d 	bl	80005a8 <__aeabi_dmul>
 801e92e:	4632      	mov	r2, r6
 801e930:	463b      	mov	r3, r7
 801e932:	f7e1 fc81 	bl	8000238 <__aeabi_dsub>
 801e936:	4602      	mov	r2, r0
 801e938:	460b      	mov	r3, r1
 801e93a:	4606      	mov	r6, r0
 801e93c:	460f      	mov	r7, r1
 801e93e:	4640      	mov	r0, r8
 801e940:	4649      	mov	r1, r9
 801e942:	f7e1 fc79 	bl	8000238 <__aeabi_dsub>
 801e946:	9a05      	ldr	r2, [sp, #20]
 801e948:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e94c:	1ad3      	subs	r3, r2, r3
 801e94e:	2b31      	cmp	r3, #49	@ 0x31
 801e950:	dc20      	bgt.n	801e994 <__ieee754_rem_pio2+0x274>
 801e952:	e9c4 0100 	strd	r0, r1, [r4]
 801e956:	46c2      	mov	sl, r8
 801e958:	46cb      	mov	fp, r9
 801e95a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801e95e:	4650      	mov	r0, sl
 801e960:	4642      	mov	r2, r8
 801e962:	464b      	mov	r3, r9
 801e964:	4659      	mov	r1, fp
 801e966:	f7e1 fc67 	bl	8000238 <__aeabi_dsub>
 801e96a:	463b      	mov	r3, r7
 801e96c:	4632      	mov	r2, r6
 801e96e:	f7e1 fc63 	bl	8000238 <__aeabi_dsub>
 801e972:	9b04      	ldr	r3, [sp, #16]
 801e974:	2b00      	cmp	r3, #0
 801e976:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e97a:	f6bf af0e 	bge.w	801e79a <__ieee754_rem_pio2+0x7a>
 801e97e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801e982:	6063      	str	r3, [r4, #4]
 801e984:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e988:	f8c4 8000 	str.w	r8, [r4]
 801e98c:	60a0      	str	r0, [r4, #8]
 801e98e:	60e3      	str	r3, [r4, #12]
 801e990:	426d      	negs	r5, r5
 801e992:	e702      	b.n	801e79a <__ieee754_rem_pio2+0x7a>
 801e994:	a326      	add	r3, pc, #152	@ (adr r3, 801ea30 <__ieee754_rem_pio2+0x310>)
 801e996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e99a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e99e:	f7e1 fe03 	bl	80005a8 <__aeabi_dmul>
 801e9a2:	4606      	mov	r6, r0
 801e9a4:	460f      	mov	r7, r1
 801e9a6:	4602      	mov	r2, r0
 801e9a8:	460b      	mov	r3, r1
 801e9aa:	4640      	mov	r0, r8
 801e9ac:	4649      	mov	r1, r9
 801e9ae:	f7e1 fc43 	bl	8000238 <__aeabi_dsub>
 801e9b2:	4602      	mov	r2, r0
 801e9b4:	460b      	mov	r3, r1
 801e9b6:	4682      	mov	sl, r0
 801e9b8:	468b      	mov	fp, r1
 801e9ba:	4640      	mov	r0, r8
 801e9bc:	4649      	mov	r1, r9
 801e9be:	f7e1 fc3b 	bl	8000238 <__aeabi_dsub>
 801e9c2:	4632      	mov	r2, r6
 801e9c4:	463b      	mov	r3, r7
 801e9c6:	f7e1 fc37 	bl	8000238 <__aeabi_dsub>
 801e9ca:	a31b      	add	r3, pc, #108	@ (adr r3, 801ea38 <__ieee754_rem_pio2+0x318>)
 801e9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9d0:	4606      	mov	r6, r0
 801e9d2:	460f      	mov	r7, r1
 801e9d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e9d8:	f7e1 fde6 	bl	80005a8 <__aeabi_dmul>
 801e9dc:	4632      	mov	r2, r6
 801e9de:	463b      	mov	r3, r7
 801e9e0:	f7e1 fc2a 	bl	8000238 <__aeabi_dsub>
 801e9e4:	4606      	mov	r6, r0
 801e9e6:	460f      	mov	r7, r1
 801e9e8:	e764      	b.n	801e8b4 <__ieee754_rem_pio2+0x194>
 801e9ea:	4b1b      	ldr	r3, [pc, #108]	@ (801ea58 <__ieee754_rem_pio2+0x338>)
 801e9ec:	4598      	cmp	r8, r3
 801e9ee:	d935      	bls.n	801ea5c <__ieee754_rem_pio2+0x33c>
 801e9f0:	4632      	mov	r2, r6
 801e9f2:	463b      	mov	r3, r7
 801e9f4:	4630      	mov	r0, r6
 801e9f6:	4639      	mov	r1, r7
 801e9f8:	f7e1 fc1e 	bl	8000238 <__aeabi_dsub>
 801e9fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ea00:	e9c4 0100 	strd	r0, r1, [r4]
 801ea04:	e69e      	b.n	801e744 <__ieee754_rem_pio2+0x24>
 801ea06:	bf00      	nop
 801ea08:	54400000 	.word	0x54400000
 801ea0c:	3ff921fb 	.word	0x3ff921fb
 801ea10:	1a626331 	.word	0x1a626331
 801ea14:	3dd0b461 	.word	0x3dd0b461
 801ea18:	1a600000 	.word	0x1a600000
 801ea1c:	3dd0b461 	.word	0x3dd0b461
 801ea20:	2e037073 	.word	0x2e037073
 801ea24:	3ba3198a 	.word	0x3ba3198a
 801ea28:	6dc9c883 	.word	0x6dc9c883
 801ea2c:	3fe45f30 	.word	0x3fe45f30
 801ea30:	2e000000 	.word	0x2e000000
 801ea34:	3ba3198a 	.word	0x3ba3198a
 801ea38:	252049c1 	.word	0x252049c1
 801ea3c:	397b839a 	.word	0x397b839a
 801ea40:	3fe921fb 	.word	0x3fe921fb
 801ea44:	4002d97b 	.word	0x4002d97b
 801ea48:	3ff921fb 	.word	0x3ff921fb
 801ea4c:	413921fb 	.word	0x413921fb
 801ea50:	3fe00000 	.word	0x3fe00000
 801ea54:	080235b4 	.word	0x080235b4
 801ea58:	7fefffff 	.word	0x7fefffff
 801ea5c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801ea60:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801ea64:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801ea68:	4630      	mov	r0, r6
 801ea6a:	460f      	mov	r7, r1
 801ea6c:	f7e2 f84c 	bl	8000b08 <__aeabi_d2iz>
 801ea70:	f7e1 fd30 	bl	80004d4 <__aeabi_i2d>
 801ea74:	4602      	mov	r2, r0
 801ea76:	460b      	mov	r3, r1
 801ea78:	4630      	mov	r0, r6
 801ea7a:	4639      	mov	r1, r7
 801ea7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ea80:	f7e1 fbda 	bl	8000238 <__aeabi_dsub>
 801ea84:	4b22      	ldr	r3, [pc, #136]	@ (801eb10 <__ieee754_rem_pio2+0x3f0>)
 801ea86:	2200      	movs	r2, #0
 801ea88:	f7e1 fd8e 	bl	80005a8 <__aeabi_dmul>
 801ea8c:	460f      	mov	r7, r1
 801ea8e:	4606      	mov	r6, r0
 801ea90:	f7e2 f83a 	bl	8000b08 <__aeabi_d2iz>
 801ea94:	f7e1 fd1e 	bl	80004d4 <__aeabi_i2d>
 801ea98:	4602      	mov	r2, r0
 801ea9a:	460b      	mov	r3, r1
 801ea9c:	4630      	mov	r0, r6
 801ea9e:	4639      	mov	r1, r7
 801eaa0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801eaa4:	f7e1 fbc8 	bl	8000238 <__aeabi_dsub>
 801eaa8:	4b19      	ldr	r3, [pc, #100]	@ (801eb10 <__ieee754_rem_pio2+0x3f0>)
 801eaaa:	2200      	movs	r2, #0
 801eaac:	f7e1 fd7c 	bl	80005a8 <__aeabi_dmul>
 801eab0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801eab4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801eab8:	f04f 0803 	mov.w	r8, #3
 801eabc:	2600      	movs	r6, #0
 801eabe:	2700      	movs	r7, #0
 801eac0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801eac4:	4632      	mov	r2, r6
 801eac6:	463b      	mov	r3, r7
 801eac8:	46c2      	mov	sl, r8
 801eaca:	f108 38ff 	add.w	r8, r8, #4294967295
 801eace:	f7e1 ffd3 	bl	8000a78 <__aeabi_dcmpeq>
 801ead2:	2800      	cmp	r0, #0
 801ead4:	d1f4      	bne.n	801eac0 <__ieee754_rem_pio2+0x3a0>
 801ead6:	4b0f      	ldr	r3, [pc, #60]	@ (801eb14 <__ieee754_rem_pio2+0x3f4>)
 801ead8:	9301      	str	r3, [sp, #4]
 801eada:	2302      	movs	r3, #2
 801eadc:	9300      	str	r3, [sp, #0]
 801eade:	462a      	mov	r2, r5
 801eae0:	4653      	mov	r3, sl
 801eae2:	4621      	mov	r1, r4
 801eae4:	a806      	add	r0, sp, #24
 801eae6:	f000 fa3b 	bl	801ef60 <__kernel_rem_pio2>
 801eaea:	9b04      	ldr	r3, [sp, #16]
 801eaec:	2b00      	cmp	r3, #0
 801eaee:	4605      	mov	r5, r0
 801eaf0:	f6bf ae53 	bge.w	801e79a <__ieee754_rem_pio2+0x7a>
 801eaf4:	e9d4 2100 	ldrd	r2, r1, [r4]
 801eaf8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801eafc:	e9c4 2300 	strd	r2, r3, [r4]
 801eb00:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801eb04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801eb08:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801eb0c:	e740      	b.n	801e990 <__ieee754_rem_pio2+0x270>
 801eb0e:	bf00      	nop
 801eb10:	41700000 	.word	0x41700000
 801eb14:	08023634 	.word	0x08023634

0801eb18 <acos>:
 801eb18:	b538      	push	{r3, r4, r5, lr}
 801eb1a:	ed2d 8b02 	vpush	{d8}
 801eb1e:	ec55 4b10 	vmov	r4, r5, d0
 801eb22:	f000 fd75 	bl	801f610 <__ieee754_acos>
 801eb26:	4622      	mov	r2, r4
 801eb28:	462b      	mov	r3, r5
 801eb2a:	4620      	mov	r0, r4
 801eb2c:	4629      	mov	r1, r5
 801eb2e:	eeb0 8a40 	vmov.f32	s16, s0
 801eb32:	eef0 8a60 	vmov.f32	s17, s1
 801eb36:	f7e1 ffd1 	bl	8000adc <__aeabi_dcmpun>
 801eb3a:	b9a8      	cbnz	r0, 801eb68 <acos+0x50>
 801eb3c:	ec45 4b10 	vmov	d0, r4, r5
 801eb40:	f000 f81e 	bl	801eb80 <fabs>
 801eb44:	4b0c      	ldr	r3, [pc, #48]	@ (801eb78 <acos+0x60>)
 801eb46:	ec51 0b10 	vmov	r0, r1, d0
 801eb4a:	2200      	movs	r2, #0
 801eb4c:	f7e1 ffbc 	bl	8000ac8 <__aeabi_dcmpgt>
 801eb50:	b150      	cbz	r0, 801eb68 <acos+0x50>
 801eb52:	f7fc fe45 	bl	801b7e0 <__errno>
 801eb56:	ecbd 8b02 	vpop	{d8}
 801eb5a:	2321      	movs	r3, #33	@ 0x21
 801eb5c:	6003      	str	r3, [r0, #0]
 801eb5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eb62:	4806      	ldr	r0, [pc, #24]	@ (801eb7c <acos+0x64>)
 801eb64:	f7fc be80 	b.w	801b868 <nan>
 801eb68:	eeb0 0a48 	vmov.f32	s0, s16
 801eb6c:	eef0 0a68 	vmov.f32	s1, s17
 801eb70:	ecbd 8b02 	vpop	{d8}
 801eb74:	bd38      	pop	{r3, r4, r5, pc}
 801eb76:	bf00      	nop
 801eb78:	3ff00000 	.word	0x3ff00000
 801eb7c:	0802336e 	.word	0x0802336e

0801eb80 <fabs>:
 801eb80:	ec51 0b10 	vmov	r0, r1, d0
 801eb84:	4602      	mov	r2, r0
 801eb86:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801eb8a:	ec43 2b10 	vmov	d0, r2, r3
 801eb8e:	4770      	bx	lr

0801eb90 <__ieee754_expf>:
 801eb90:	ee10 2a10 	vmov	r2, s0
 801eb94:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801eb98:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801eb9c:	d902      	bls.n	801eba4 <__ieee754_expf+0x14>
 801eb9e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801eba2:	4770      	bx	lr
 801eba4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801eba8:	d106      	bne.n	801ebb8 <__ieee754_expf+0x28>
 801ebaa:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801ece4 <__ieee754_expf+0x154>
 801ebae:	2900      	cmp	r1, #0
 801ebb0:	bf18      	it	ne
 801ebb2:	eeb0 0a67 	vmovne.f32	s0, s15
 801ebb6:	4770      	bx	lr
 801ebb8:	484b      	ldr	r0, [pc, #300]	@ (801ece8 <__ieee754_expf+0x158>)
 801ebba:	4282      	cmp	r2, r0
 801ebbc:	dd02      	ble.n	801ebc4 <__ieee754_expf+0x34>
 801ebbe:	2000      	movs	r0, #0
 801ebc0:	f000 b9c6 	b.w	801ef50 <__math_oflowf>
 801ebc4:	2a00      	cmp	r2, #0
 801ebc6:	da05      	bge.n	801ebd4 <__ieee754_expf+0x44>
 801ebc8:	4a48      	ldr	r2, [pc, #288]	@ (801ecec <__ieee754_expf+0x15c>)
 801ebca:	4293      	cmp	r3, r2
 801ebcc:	d902      	bls.n	801ebd4 <__ieee754_expf+0x44>
 801ebce:	2000      	movs	r0, #0
 801ebd0:	f000 b9b8 	b.w	801ef44 <__math_uflowf>
 801ebd4:	4a46      	ldr	r2, [pc, #280]	@ (801ecf0 <__ieee754_expf+0x160>)
 801ebd6:	4293      	cmp	r3, r2
 801ebd8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801ebdc:	d952      	bls.n	801ec84 <__ieee754_expf+0xf4>
 801ebde:	4a45      	ldr	r2, [pc, #276]	@ (801ecf4 <__ieee754_expf+0x164>)
 801ebe0:	4293      	cmp	r3, r2
 801ebe2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801ebe6:	d834      	bhi.n	801ec52 <__ieee754_expf+0xc2>
 801ebe8:	4b43      	ldr	r3, [pc, #268]	@ (801ecf8 <__ieee754_expf+0x168>)
 801ebea:	4413      	add	r3, r2
 801ebec:	ed93 7a00 	vldr	s14, [r3]
 801ebf0:	4b42      	ldr	r3, [pc, #264]	@ (801ecfc <__ieee754_expf+0x16c>)
 801ebf2:	4413      	add	r3, r2
 801ebf4:	ee30 7a47 	vsub.f32	s14, s0, s14
 801ebf8:	f1c1 0201 	rsb	r2, r1, #1
 801ebfc:	edd3 7a00 	vldr	s15, [r3]
 801ec00:	1a52      	subs	r2, r2, r1
 801ec02:	ee37 0a67 	vsub.f32	s0, s14, s15
 801ec06:	ee20 6a00 	vmul.f32	s12, s0, s0
 801ec0a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801ed00 <__ieee754_expf+0x170>
 801ec0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801ed04 <__ieee754_expf+0x174>
 801ec12:	eee6 6a05 	vfma.f32	s13, s12, s10
 801ec16:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801ed08 <__ieee754_expf+0x178>
 801ec1a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801ec1e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801ed0c <__ieee754_expf+0x17c>
 801ec22:	eee5 6a06 	vfma.f32	s13, s10, s12
 801ec26:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801ed10 <__ieee754_expf+0x180>
 801ec2a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801ec2e:	eef0 6a40 	vmov.f32	s13, s0
 801ec32:	eee5 6a46 	vfms.f32	s13, s10, s12
 801ec36:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801ec3a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801ec3e:	bb92      	cbnz	r2, 801eca6 <__ieee754_expf+0x116>
 801ec40:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801ec44:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801ec48:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ec4c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801ec50:	4770      	bx	lr
 801ec52:	4b30      	ldr	r3, [pc, #192]	@ (801ed14 <__ieee754_expf+0x184>)
 801ec54:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801ed18 <__ieee754_expf+0x188>
 801ec58:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801ed1c <__ieee754_expf+0x18c>
 801ec5c:	4413      	add	r3, r2
 801ec5e:	edd3 7a00 	vldr	s15, [r3]
 801ec62:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ec66:	eeb0 7a40 	vmov.f32	s14, s0
 801ec6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ec6e:	ee17 2a90 	vmov	r2, s15
 801ec72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ec76:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801ec7a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801ed20 <__ieee754_expf+0x190>
 801ec7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ec82:	e7be      	b.n	801ec02 <__ieee754_expf+0x72>
 801ec84:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801ec88:	d20b      	bcs.n	801eca2 <__ieee754_expf+0x112>
 801ec8a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801ed24 <__ieee754_expf+0x194>
 801ec8e:	ee70 6a26 	vadd.f32	s13, s0, s13
 801ec92:	eef4 6ae5 	vcmpe.f32	s13, s11
 801ec96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec9a:	dd02      	ble.n	801eca2 <__ieee754_expf+0x112>
 801ec9c:	ee30 0a25 	vadd.f32	s0, s0, s11
 801eca0:	4770      	bx	lr
 801eca2:	2200      	movs	r2, #0
 801eca4:	e7af      	b.n	801ec06 <__ieee754_expf+0x76>
 801eca6:	ee36 6a66 	vsub.f32	s12, s12, s13
 801ecaa:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801ecae:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801ecb2:	bfb8      	it	lt
 801ecb4:	3264      	addlt	r2, #100	@ 0x64
 801ecb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ecba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ecbe:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801ecc2:	ee17 3a90 	vmov	r3, s15
 801ecc6:	bfab      	itete	ge
 801ecc8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801eccc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801ecd0:	ee00 3a10 	vmovge	s0, r3
 801ecd4:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801ed28 <__ieee754_expf+0x198>
 801ecd8:	bfbc      	itt	lt
 801ecda:	ee00 3a10 	vmovlt	s0, r3
 801ecde:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801ece2:	4770      	bx	lr
 801ece4:	00000000 	.word	0x00000000
 801ece8:	42b17217 	.word	0x42b17217
 801ecec:	42cff1b5 	.word	0x42cff1b5
 801ecf0:	3eb17218 	.word	0x3eb17218
 801ecf4:	3f851591 	.word	0x3f851591
 801ecf8:	08023744 	.word	0x08023744
 801ecfc:	0802373c 	.word	0x0802373c
 801ed00:	3331bb4c 	.word	0x3331bb4c
 801ed04:	b5ddea0e 	.word	0xb5ddea0e
 801ed08:	388ab355 	.word	0x388ab355
 801ed0c:	bb360b61 	.word	0xbb360b61
 801ed10:	3e2aaaab 	.word	0x3e2aaaab
 801ed14:	0802374c 	.word	0x0802374c
 801ed18:	3fb8aa3b 	.word	0x3fb8aa3b
 801ed1c:	3f317180 	.word	0x3f317180
 801ed20:	3717f7d1 	.word	0x3717f7d1
 801ed24:	7149f2ca 	.word	0x7149f2ca
 801ed28:	0d800000 	.word	0x0d800000

0801ed2c <__ieee754_logf>:
 801ed2c:	ee10 3a10 	vmov	r3, s0
 801ed30:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801ed34:	d106      	bne.n	801ed44 <__ieee754_logf+0x18>
 801ed36:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 801eed0 <__ieee754_logf+0x1a4>
 801ed3a:	eddf 7a66 	vldr	s15, [pc, #408]	@ 801eed4 <__ieee754_logf+0x1a8>
 801ed3e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801ed42:	4770      	bx	lr
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	461a      	mov	r2, r3
 801ed48:	da02      	bge.n	801ed50 <__ieee754_logf+0x24>
 801ed4a:	ee30 7a40 	vsub.f32	s14, s0, s0
 801ed4e:	e7f4      	b.n	801ed3a <__ieee754_logf+0xe>
 801ed50:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ed54:	db02      	blt.n	801ed5c <__ieee754_logf+0x30>
 801ed56:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ed5a:	4770      	bx	lr
 801ed5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801ed60:	bfb8      	it	lt
 801ed62:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 801eed8 <__ieee754_logf+0x1ac>
 801ed66:	485d      	ldr	r0, [pc, #372]	@ (801eedc <__ieee754_logf+0x1b0>)
 801ed68:	bfbe      	ittt	lt
 801ed6a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801ed6e:	f06f 0118 	mvnlt.w	r1, #24
 801ed72:	ee17 2a90 	vmovlt	r2, s15
 801ed76:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801ed7a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801ed7e:	4410      	add	r0, r2
 801ed80:	bfa8      	it	ge
 801ed82:	2100      	movge	r1, #0
 801ed84:	3b7f      	subs	r3, #127	@ 0x7f
 801ed86:	440b      	add	r3, r1
 801ed88:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 801ed8c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 801ed90:	4311      	orrs	r1, r2
 801ed92:	ee00 1a10 	vmov	s0, r1
 801ed96:	4952      	ldr	r1, [pc, #328]	@ (801eee0 <__ieee754_logf+0x1b4>)
 801ed98:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 801ed9c:	f102 000f 	add.w	r0, r2, #15
 801eda0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801eda4:	4001      	ands	r1, r0
 801eda6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801edaa:	bb89      	cbnz	r1, 801ee10 <__ieee754_logf+0xe4>
 801edac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801edb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edb4:	d10f      	bne.n	801edd6 <__ieee754_logf+0xaa>
 801edb6:	2b00      	cmp	r3, #0
 801edb8:	f000 8087 	beq.w	801eeca <__ieee754_logf+0x19e>
 801edbc:	ee07 3a90 	vmov	s15, r3
 801edc0:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 801eee4 <__ieee754_logf+0x1b8>
 801edc4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801eee8 <__ieee754_logf+0x1bc>
 801edc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801edcc:	ee27 0a80 	vmul.f32	s0, s15, s0
 801edd0:	eea7 0a87 	vfma.f32	s0, s15, s14
 801edd4:	4770      	bx	lr
 801edd6:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801eeec <__ieee754_logf+0x1c0>
 801edda:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801edde:	eee0 7a66 	vfms.f32	s15, s0, s13
 801ede2:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ede6:	ee27 7a27 	vmul.f32	s14, s14, s15
 801edea:	b913      	cbnz	r3, 801edf2 <__ieee754_logf+0xc6>
 801edec:	ee30 0a47 	vsub.f32	s0, s0, s14
 801edf0:	4770      	bx	lr
 801edf2:	ee07 3a90 	vmov	s15, r3
 801edf6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801eee4 <__ieee754_logf+0x1b8>
 801edfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801edfe:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801ee02:	ee37 0a40 	vsub.f32	s0, s14, s0
 801ee06:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801eee8 <__ieee754_logf+0x1bc>
 801ee0a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801ee0e:	4770      	bx	lr
 801ee10:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801ee14:	ee70 7a27 	vadd.f32	s15, s0, s15
 801ee18:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801eef0 <__ieee754_logf+0x1c4>
 801ee1c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 801eef4 <__ieee754_logf+0x1c8>
 801ee20:	4935      	ldr	r1, [pc, #212]	@ (801eef8 <__ieee754_logf+0x1cc>)
 801ee22:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801ee26:	4411      	add	r1, r2
 801ee28:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 801ee2c:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 801ee30:	430a      	orrs	r2, r1
 801ee32:	2a00      	cmp	r2, #0
 801ee34:	ee07 3a90 	vmov	s15, r3
 801ee38:	ee26 5a06 	vmul.f32	s10, s12, s12
 801ee3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ee40:	ee25 7a05 	vmul.f32	s14, s10, s10
 801ee44:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 801eefc <__ieee754_logf+0x1d0>
 801ee48:	eee7 7a25 	vfma.f32	s15, s14, s11
 801ee4c:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 801ef00 <__ieee754_logf+0x1d4>
 801ee50:	eee7 5a87 	vfma.f32	s11, s15, s14
 801ee54:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 801ef04 <__ieee754_logf+0x1d8>
 801ee58:	eee7 7a24 	vfma.f32	s15, s14, s9
 801ee5c:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 801ef08 <__ieee754_logf+0x1dc>
 801ee60:	eee7 4a87 	vfma.f32	s9, s15, s14
 801ee64:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801ef0c <__ieee754_logf+0x1e0>
 801ee68:	eee4 7a87 	vfma.f32	s15, s9, s14
 801ee6c:	ee67 7a85 	vmul.f32	s15, s15, s10
 801ee70:	eee5 7a87 	vfma.f32	s15, s11, s14
 801ee74:	dd1a      	ble.n	801eeac <__ieee754_logf+0x180>
 801ee76:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801ee7a:	ee20 7a07 	vmul.f32	s14, s0, s14
 801ee7e:	ee27 7a00 	vmul.f32	s14, s14, s0
 801ee82:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ee86:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ee8a:	b913      	cbnz	r3, 801ee92 <__ieee754_logf+0x166>
 801ee8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ee90:	e7ac      	b.n	801edec <__ieee754_logf+0xc0>
 801ee92:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 801eee4 <__ieee754_logf+0x1b8>
 801ee96:	eee6 7a86 	vfma.f32	s15, s13, s12
 801ee9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ee9e:	ee37 0a40 	vsub.f32	s0, s14, s0
 801eea2:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801eee8 <__ieee754_logf+0x1bc>
 801eea6:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801eeaa:	4770      	bx	lr
 801eeac:	ee70 7a67 	vsub.f32	s15, s0, s15
 801eeb0:	ee67 7a86 	vmul.f32	s15, s15, s12
 801eeb4:	b913      	cbnz	r3, 801eebc <__ieee754_logf+0x190>
 801eeb6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801eeba:	4770      	bx	lr
 801eebc:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 801eee4 <__ieee754_logf+0x1b8>
 801eec0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801eec4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801eec8:	e7eb      	b.n	801eea2 <__ieee754_logf+0x176>
 801eeca:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 801eed4 <__ieee754_logf+0x1a8>
 801eece:	4770      	bx	lr
 801eed0:	cc000000 	.word	0xcc000000
 801eed4:	00000000 	.word	0x00000000
 801eed8:	4c000000 	.word	0x4c000000
 801eedc:	004afb20 	.word	0x004afb20
 801eee0:	007ffff0 	.word	0x007ffff0
 801eee4:	3717f7d1 	.word	0x3717f7d1
 801eee8:	3f317180 	.word	0x3f317180
 801eeec:	3eaaaaab 	.word	0x3eaaaaab
 801eef0:	3e1cd04f 	.word	0x3e1cd04f
 801eef4:	3e178897 	.word	0x3e178897
 801eef8:	ffcf5c30 	.word	0xffcf5c30
 801eefc:	3e638e29 	.word	0x3e638e29
 801ef00:	3ecccccd 	.word	0x3ecccccd
 801ef04:	3e3a3325 	.word	0x3e3a3325
 801ef08:	3e924925 	.word	0x3e924925
 801ef0c:	3f2aaaab 	.word	0x3f2aaaab

0801ef10 <with_errnof>:
 801ef10:	b510      	push	{r4, lr}
 801ef12:	ed2d 8b02 	vpush	{d8}
 801ef16:	eeb0 8a40 	vmov.f32	s16, s0
 801ef1a:	4604      	mov	r4, r0
 801ef1c:	f7fc fc60 	bl	801b7e0 <__errno>
 801ef20:	eeb0 0a48 	vmov.f32	s0, s16
 801ef24:	ecbd 8b02 	vpop	{d8}
 801ef28:	6004      	str	r4, [r0, #0]
 801ef2a:	bd10      	pop	{r4, pc}

0801ef2c <xflowf>:
 801ef2c:	b130      	cbz	r0, 801ef3c <xflowf+0x10>
 801ef2e:	eef1 7a40 	vneg.f32	s15, s0
 801ef32:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ef36:	2022      	movs	r0, #34	@ 0x22
 801ef38:	f7ff bfea 	b.w	801ef10 <with_errnof>
 801ef3c:	eef0 7a40 	vmov.f32	s15, s0
 801ef40:	e7f7      	b.n	801ef32 <xflowf+0x6>
	...

0801ef44 <__math_uflowf>:
 801ef44:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ef4c <__math_uflowf+0x8>
 801ef48:	f7ff bff0 	b.w	801ef2c <xflowf>
 801ef4c:	10000000 	.word	0x10000000

0801ef50 <__math_oflowf>:
 801ef50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ef58 <__math_oflowf+0x8>
 801ef54:	f7ff bfea 	b.w	801ef2c <xflowf>
 801ef58:	70000000 	.word	0x70000000
 801ef5c:	00000000 	.word	0x00000000

0801ef60 <__kernel_rem_pio2>:
 801ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef64:	ed2d 8b02 	vpush	{d8}
 801ef68:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801ef6c:	f112 0f14 	cmn.w	r2, #20
 801ef70:	9306      	str	r3, [sp, #24]
 801ef72:	9104      	str	r1, [sp, #16]
 801ef74:	4bbe      	ldr	r3, [pc, #760]	@ (801f270 <__kernel_rem_pio2+0x310>)
 801ef76:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801ef78:	9008      	str	r0, [sp, #32]
 801ef7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ef7e:	9300      	str	r3, [sp, #0]
 801ef80:	9b06      	ldr	r3, [sp, #24]
 801ef82:	f103 33ff 	add.w	r3, r3, #4294967295
 801ef86:	bfa8      	it	ge
 801ef88:	1ed4      	subge	r4, r2, #3
 801ef8a:	9305      	str	r3, [sp, #20]
 801ef8c:	bfb2      	itee	lt
 801ef8e:	2400      	movlt	r4, #0
 801ef90:	2318      	movge	r3, #24
 801ef92:	fb94 f4f3 	sdivge	r4, r4, r3
 801ef96:	f06f 0317 	mvn.w	r3, #23
 801ef9a:	fb04 3303 	mla	r3, r4, r3, r3
 801ef9e:	eb03 0b02 	add.w	fp, r3, r2
 801efa2:	9b00      	ldr	r3, [sp, #0]
 801efa4:	9a05      	ldr	r2, [sp, #20]
 801efa6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801f260 <__kernel_rem_pio2+0x300>
 801efaa:	eb03 0802 	add.w	r8, r3, r2
 801efae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801efb0:	1aa7      	subs	r7, r4, r2
 801efb2:	ae20      	add	r6, sp, #128	@ 0x80
 801efb4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801efb8:	2500      	movs	r5, #0
 801efba:	4545      	cmp	r5, r8
 801efbc:	dd13      	ble.n	801efe6 <__kernel_rem_pio2+0x86>
 801efbe:	9b06      	ldr	r3, [sp, #24]
 801efc0:	aa20      	add	r2, sp, #128	@ 0x80
 801efc2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801efc6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801efca:	f04f 0800 	mov.w	r8, #0
 801efce:	9b00      	ldr	r3, [sp, #0]
 801efd0:	4598      	cmp	r8, r3
 801efd2:	dc31      	bgt.n	801f038 <__kernel_rem_pio2+0xd8>
 801efd4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801f260 <__kernel_rem_pio2+0x300>
 801efd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801efdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801efe0:	462f      	mov	r7, r5
 801efe2:	2600      	movs	r6, #0
 801efe4:	e01b      	b.n	801f01e <__kernel_rem_pio2+0xbe>
 801efe6:	42ef      	cmn	r7, r5
 801efe8:	d407      	bmi.n	801effa <__kernel_rem_pio2+0x9a>
 801efea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801efee:	f7e1 fa71 	bl	80004d4 <__aeabi_i2d>
 801eff2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801eff6:	3501      	adds	r5, #1
 801eff8:	e7df      	b.n	801efba <__kernel_rem_pio2+0x5a>
 801effa:	ec51 0b18 	vmov	r0, r1, d8
 801effe:	e7f8      	b.n	801eff2 <__kernel_rem_pio2+0x92>
 801f000:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f004:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801f008:	f7e1 face 	bl	80005a8 <__aeabi_dmul>
 801f00c:	4602      	mov	r2, r0
 801f00e:	460b      	mov	r3, r1
 801f010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f014:	f7e1 f912 	bl	800023c <__adddf3>
 801f018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f01c:	3601      	adds	r6, #1
 801f01e:	9b05      	ldr	r3, [sp, #20]
 801f020:	429e      	cmp	r6, r3
 801f022:	f1a7 0708 	sub.w	r7, r7, #8
 801f026:	ddeb      	ble.n	801f000 <__kernel_rem_pio2+0xa0>
 801f028:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f02c:	f108 0801 	add.w	r8, r8, #1
 801f030:	ecaa 7b02 	vstmia	sl!, {d7}
 801f034:	3508      	adds	r5, #8
 801f036:	e7ca      	b.n	801efce <__kernel_rem_pio2+0x6e>
 801f038:	9b00      	ldr	r3, [sp, #0]
 801f03a:	f8dd 8000 	ldr.w	r8, [sp]
 801f03e:	aa0c      	add	r2, sp, #48	@ 0x30
 801f040:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f044:	930a      	str	r3, [sp, #40]	@ 0x28
 801f046:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801f048:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801f04c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f04e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801f052:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f054:	ab98      	add	r3, sp, #608	@ 0x260
 801f056:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801f05a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801f05e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f062:	ac0c      	add	r4, sp, #48	@ 0x30
 801f064:	ab70      	add	r3, sp, #448	@ 0x1c0
 801f066:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801f06a:	46a1      	mov	r9, r4
 801f06c:	46c2      	mov	sl, r8
 801f06e:	f1ba 0f00 	cmp.w	sl, #0
 801f072:	f1a5 0508 	sub.w	r5, r5, #8
 801f076:	dc77      	bgt.n	801f168 <__kernel_rem_pio2+0x208>
 801f078:	4658      	mov	r0, fp
 801f07a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801f07e:	f000 fd23 	bl	801fac8 <scalbn>
 801f082:	ec57 6b10 	vmov	r6, r7, d0
 801f086:	2200      	movs	r2, #0
 801f088:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801f08c:	4630      	mov	r0, r6
 801f08e:	4639      	mov	r1, r7
 801f090:	f7e1 fa8a 	bl	80005a8 <__aeabi_dmul>
 801f094:	ec41 0b10 	vmov	d0, r0, r1
 801f098:	f7ff f942 	bl	801e320 <floor>
 801f09c:	4b75      	ldr	r3, [pc, #468]	@ (801f274 <__kernel_rem_pio2+0x314>)
 801f09e:	ec51 0b10 	vmov	r0, r1, d0
 801f0a2:	2200      	movs	r2, #0
 801f0a4:	f7e1 fa80 	bl	80005a8 <__aeabi_dmul>
 801f0a8:	4602      	mov	r2, r0
 801f0aa:	460b      	mov	r3, r1
 801f0ac:	4630      	mov	r0, r6
 801f0ae:	4639      	mov	r1, r7
 801f0b0:	f7e1 f8c2 	bl	8000238 <__aeabi_dsub>
 801f0b4:	460f      	mov	r7, r1
 801f0b6:	4606      	mov	r6, r0
 801f0b8:	f7e1 fd26 	bl	8000b08 <__aeabi_d2iz>
 801f0bc:	9002      	str	r0, [sp, #8]
 801f0be:	f7e1 fa09 	bl	80004d4 <__aeabi_i2d>
 801f0c2:	4602      	mov	r2, r0
 801f0c4:	460b      	mov	r3, r1
 801f0c6:	4630      	mov	r0, r6
 801f0c8:	4639      	mov	r1, r7
 801f0ca:	f7e1 f8b5 	bl	8000238 <__aeabi_dsub>
 801f0ce:	f1bb 0f00 	cmp.w	fp, #0
 801f0d2:	4606      	mov	r6, r0
 801f0d4:	460f      	mov	r7, r1
 801f0d6:	dd6c      	ble.n	801f1b2 <__kernel_rem_pio2+0x252>
 801f0d8:	f108 31ff 	add.w	r1, r8, #4294967295
 801f0dc:	ab0c      	add	r3, sp, #48	@ 0x30
 801f0de:	9d02      	ldr	r5, [sp, #8]
 801f0e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f0e4:	f1cb 0018 	rsb	r0, fp, #24
 801f0e8:	fa43 f200 	asr.w	r2, r3, r0
 801f0ec:	4415      	add	r5, r2
 801f0ee:	4082      	lsls	r2, r0
 801f0f0:	1a9b      	subs	r3, r3, r2
 801f0f2:	aa0c      	add	r2, sp, #48	@ 0x30
 801f0f4:	9502      	str	r5, [sp, #8]
 801f0f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801f0fa:	f1cb 0217 	rsb	r2, fp, #23
 801f0fe:	fa43 f902 	asr.w	r9, r3, r2
 801f102:	f1b9 0f00 	cmp.w	r9, #0
 801f106:	dd64      	ble.n	801f1d2 <__kernel_rem_pio2+0x272>
 801f108:	9b02      	ldr	r3, [sp, #8]
 801f10a:	2200      	movs	r2, #0
 801f10c:	3301      	adds	r3, #1
 801f10e:	9302      	str	r3, [sp, #8]
 801f110:	4615      	mov	r5, r2
 801f112:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801f116:	4590      	cmp	r8, r2
 801f118:	f300 80b8 	bgt.w	801f28c <__kernel_rem_pio2+0x32c>
 801f11c:	f1bb 0f00 	cmp.w	fp, #0
 801f120:	dd07      	ble.n	801f132 <__kernel_rem_pio2+0x1d2>
 801f122:	f1bb 0f01 	cmp.w	fp, #1
 801f126:	f000 80bf 	beq.w	801f2a8 <__kernel_rem_pio2+0x348>
 801f12a:	f1bb 0f02 	cmp.w	fp, #2
 801f12e:	f000 80c6 	beq.w	801f2be <__kernel_rem_pio2+0x35e>
 801f132:	f1b9 0f02 	cmp.w	r9, #2
 801f136:	d14c      	bne.n	801f1d2 <__kernel_rem_pio2+0x272>
 801f138:	4632      	mov	r2, r6
 801f13a:	463b      	mov	r3, r7
 801f13c:	494e      	ldr	r1, [pc, #312]	@ (801f278 <__kernel_rem_pio2+0x318>)
 801f13e:	2000      	movs	r0, #0
 801f140:	f7e1 f87a 	bl	8000238 <__aeabi_dsub>
 801f144:	4606      	mov	r6, r0
 801f146:	460f      	mov	r7, r1
 801f148:	2d00      	cmp	r5, #0
 801f14a:	d042      	beq.n	801f1d2 <__kernel_rem_pio2+0x272>
 801f14c:	4658      	mov	r0, fp
 801f14e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801f268 <__kernel_rem_pio2+0x308>
 801f152:	f000 fcb9 	bl	801fac8 <scalbn>
 801f156:	4630      	mov	r0, r6
 801f158:	4639      	mov	r1, r7
 801f15a:	ec53 2b10 	vmov	r2, r3, d0
 801f15e:	f7e1 f86b 	bl	8000238 <__aeabi_dsub>
 801f162:	4606      	mov	r6, r0
 801f164:	460f      	mov	r7, r1
 801f166:	e034      	b.n	801f1d2 <__kernel_rem_pio2+0x272>
 801f168:	4b44      	ldr	r3, [pc, #272]	@ (801f27c <__kernel_rem_pio2+0x31c>)
 801f16a:	2200      	movs	r2, #0
 801f16c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f170:	f7e1 fa1a 	bl	80005a8 <__aeabi_dmul>
 801f174:	f7e1 fcc8 	bl	8000b08 <__aeabi_d2iz>
 801f178:	f7e1 f9ac 	bl	80004d4 <__aeabi_i2d>
 801f17c:	4b40      	ldr	r3, [pc, #256]	@ (801f280 <__kernel_rem_pio2+0x320>)
 801f17e:	2200      	movs	r2, #0
 801f180:	4606      	mov	r6, r0
 801f182:	460f      	mov	r7, r1
 801f184:	f7e1 fa10 	bl	80005a8 <__aeabi_dmul>
 801f188:	4602      	mov	r2, r0
 801f18a:	460b      	mov	r3, r1
 801f18c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f190:	f7e1 f852 	bl	8000238 <__aeabi_dsub>
 801f194:	f7e1 fcb8 	bl	8000b08 <__aeabi_d2iz>
 801f198:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f19c:	f849 0b04 	str.w	r0, [r9], #4
 801f1a0:	4639      	mov	r1, r7
 801f1a2:	4630      	mov	r0, r6
 801f1a4:	f7e1 f84a 	bl	800023c <__adddf3>
 801f1a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f1ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f1b0:	e75d      	b.n	801f06e <__kernel_rem_pio2+0x10e>
 801f1b2:	d107      	bne.n	801f1c4 <__kernel_rem_pio2+0x264>
 801f1b4:	f108 33ff 	add.w	r3, r8, #4294967295
 801f1b8:	aa0c      	add	r2, sp, #48	@ 0x30
 801f1ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f1be:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801f1c2:	e79e      	b.n	801f102 <__kernel_rem_pio2+0x1a2>
 801f1c4:	4b2f      	ldr	r3, [pc, #188]	@ (801f284 <__kernel_rem_pio2+0x324>)
 801f1c6:	2200      	movs	r2, #0
 801f1c8:	f7e1 fc74 	bl	8000ab4 <__aeabi_dcmpge>
 801f1cc:	2800      	cmp	r0, #0
 801f1ce:	d143      	bne.n	801f258 <__kernel_rem_pio2+0x2f8>
 801f1d0:	4681      	mov	r9, r0
 801f1d2:	2200      	movs	r2, #0
 801f1d4:	2300      	movs	r3, #0
 801f1d6:	4630      	mov	r0, r6
 801f1d8:	4639      	mov	r1, r7
 801f1da:	f7e1 fc4d 	bl	8000a78 <__aeabi_dcmpeq>
 801f1de:	2800      	cmp	r0, #0
 801f1e0:	f000 80bf 	beq.w	801f362 <__kernel_rem_pio2+0x402>
 801f1e4:	f108 33ff 	add.w	r3, r8, #4294967295
 801f1e8:	2200      	movs	r2, #0
 801f1ea:	9900      	ldr	r1, [sp, #0]
 801f1ec:	428b      	cmp	r3, r1
 801f1ee:	da6e      	bge.n	801f2ce <__kernel_rem_pio2+0x36e>
 801f1f0:	2a00      	cmp	r2, #0
 801f1f2:	f000 8089 	beq.w	801f308 <__kernel_rem_pio2+0x3a8>
 801f1f6:	f108 38ff 	add.w	r8, r8, #4294967295
 801f1fa:	ab0c      	add	r3, sp, #48	@ 0x30
 801f1fc:	f1ab 0b18 	sub.w	fp, fp, #24
 801f200:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801f204:	2b00      	cmp	r3, #0
 801f206:	d0f6      	beq.n	801f1f6 <__kernel_rem_pio2+0x296>
 801f208:	4658      	mov	r0, fp
 801f20a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801f268 <__kernel_rem_pio2+0x308>
 801f20e:	f000 fc5b 	bl	801fac8 <scalbn>
 801f212:	f108 0301 	add.w	r3, r8, #1
 801f216:	00da      	lsls	r2, r3, #3
 801f218:	9205      	str	r2, [sp, #20]
 801f21a:	ec55 4b10 	vmov	r4, r5, d0
 801f21e:	aa70      	add	r2, sp, #448	@ 0x1c0
 801f220:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801f27c <__kernel_rem_pio2+0x31c>
 801f224:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801f228:	4646      	mov	r6, r8
 801f22a:	f04f 0a00 	mov.w	sl, #0
 801f22e:	2e00      	cmp	r6, #0
 801f230:	f280 80cf 	bge.w	801f3d2 <__kernel_rem_pio2+0x472>
 801f234:	4644      	mov	r4, r8
 801f236:	2c00      	cmp	r4, #0
 801f238:	f2c0 80fd 	blt.w	801f436 <__kernel_rem_pio2+0x4d6>
 801f23c:	4b12      	ldr	r3, [pc, #72]	@ (801f288 <__kernel_rem_pio2+0x328>)
 801f23e:	461f      	mov	r7, r3
 801f240:	ab70      	add	r3, sp, #448	@ 0x1c0
 801f242:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f246:	9306      	str	r3, [sp, #24]
 801f248:	f04f 0a00 	mov.w	sl, #0
 801f24c:	f04f 0b00 	mov.w	fp, #0
 801f250:	2600      	movs	r6, #0
 801f252:	eba8 0504 	sub.w	r5, r8, r4
 801f256:	e0e2      	b.n	801f41e <__kernel_rem_pio2+0x4be>
 801f258:	f04f 0902 	mov.w	r9, #2
 801f25c:	e754      	b.n	801f108 <__kernel_rem_pio2+0x1a8>
 801f25e:	bf00      	nop
	...
 801f26c:	3ff00000 	.word	0x3ff00000
 801f270:	08023798 	.word	0x08023798
 801f274:	40200000 	.word	0x40200000
 801f278:	3ff00000 	.word	0x3ff00000
 801f27c:	3e700000 	.word	0x3e700000
 801f280:	41700000 	.word	0x41700000
 801f284:	3fe00000 	.word	0x3fe00000
 801f288:	08023758 	.word	0x08023758
 801f28c:	f854 3b04 	ldr.w	r3, [r4], #4
 801f290:	b945      	cbnz	r5, 801f2a4 <__kernel_rem_pio2+0x344>
 801f292:	b123      	cbz	r3, 801f29e <__kernel_rem_pio2+0x33e>
 801f294:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801f298:	f844 3c04 	str.w	r3, [r4, #-4]
 801f29c:	2301      	movs	r3, #1
 801f29e:	3201      	adds	r2, #1
 801f2a0:	461d      	mov	r5, r3
 801f2a2:	e738      	b.n	801f116 <__kernel_rem_pio2+0x1b6>
 801f2a4:	1acb      	subs	r3, r1, r3
 801f2a6:	e7f7      	b.n	801f298 <__kernel_rem_pio2+0x338>
 801f2a8:	f108 32ff 	add.w	r2, r8, #4294967295
 801f2ac:	ab0c      	add	r3, sp, #48	@ 0x30
 801f2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f2b2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f2b6:	a90c      	add	r1, sp, #48	@ 0x30
 801f2b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801f2bc:	e739      	b.n	801f132 <__kernel_rem_pio2+0x1d2>
 801f2be:	f108 32ff 	add.w	r2, r8, #4294967295
 801f2c2:	ab0c      	add	r3, sp, #48	@ 0x30
 801f2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f2c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801f2cc:	e7f3      	b.n	801f2b6 <__kernel_rem_pio2+0x356>
 801f2ce:	a90c      	add	r1, sp, #48	@ 0x30
 801f2d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801f2d4:	3b01      	subs	r3, #1
 801f2d6:	430a      	orrs	r2, r1
 801f2d8:	e787      	b.n	801f1ea <__kernel_rem_pio2+0x28a>
 801f2da:	3401      	adds	r4, #1
 801f2dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f2e0:	2a00      	cmp	r2, #0
 801f2e2:	d0fa      	beq.n	801f2da <__kernel_rem_pio2+0x37a>
 801f2e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f2e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801f2ea:	eb0d 0503 	add.w	r5, sp, r3
 801f2ee:	9b06      	ldr	r3, [sp, #24]
 801f2f0:	aa20      	add	r2, sp, #128	@ 0x80
 801f2f2:	4443      	add	r3, r8
 801f2f4:	f108 0701 	add.w	r7, r8, #1
 801f2f8:	3d98      	subs	r5, #152	@ 0x98
 801f2fa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801f2fe:	4444      	add	r4, r8
 801f300:	42bc      	cmp	r4, r7
 801f302:	da04      	bge.n	801f30e <__kernel_rem_pio2+0x3ae>
 801f304:	46a0      	mov	r8, r4
 801f306:	e6a2      	b.n	801f04e <__kernel_rem_pio2+0xee>
 801f308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f30a:	2401      	movs	r4, #1
 801f30c:	e7e6      	b.n	801f2dc <__kernel_rem_pio2+0x37c>
 801f30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f310:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801f314:	f7e1 f8de 	bl	80004d4 <__aeabi_i2d>
 801f318:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801f5e0 <__kernel_rem_pio2+0x680>
 801f31c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801f320:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f328:	46b2      	mov	sl, r6
 801f32a:	f04f 0800 	mov.w	r8, #0
 801f32e:	9b05      	ldr	r3, [sp, #20]
 801f330:	4598      	cmp	r8, r3
 801f332:	dd05      	ble.n	801f340 <__kernel_rem_pio2+0x3e0>
 801f334:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f338:	3701      	adds	r7, #1
 801f33a:	eca5 7b02 	vstmia	r5!, {d7}
 801f33e:	e7df      	b.n	801f300 <__kernel_rem_pio2+0x3a0>
 801f340:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801f344:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801f348:	f7e1 f92e 	bl	80005a8 <__aeabi_dmul>
 801f34c:	4602      	mov	r2, r0
 801f34e:	460b      	mov	r3, r1
 801f350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f354:	f7e0 ff72 	bl	800023c <__adddf3>
 801f358:	f108 0801 	add.w	r8, r8, #1
 801f35c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f360:	e7e5      	b.n	801f32e <__kernel_rem_pio2+0x3ce>
 801f362:	f1cb 0000 	rsb	r0, fp, #0
 801f366:	ec47 6b10 	vmov	d0, r6, r7
 801f36a:	f000 fbad 	bl	801fac8 <scalbn>
 801f36e:	ec55 4b10 	vmov	r4, r5, d0
 801f372:	4b9d      	ldr	r3, [pc, #628]	@ (801f5e8 <__kernel_rem_pio2+0x688>)
 801f374:	2200      	movs	r2, #0
 801f376:	4620      	mov	r0, r4
 801f378:	4629      	mov	r1, r5
 801f37a:	f7e1 fb9b 	bl	8000ab4 <__aeabi_dcmpge>
 801f37e:	b300      	cbz	r0, 801f3c2 <__kernel_rem_pio2+0x462>
 801f380:	4b9a      	ldr	r3, [pc, #616]	@ (801f5ec <__kernel_rem_pio2+0x68c>)
 801f382:	2200      	movs	r2, #0
 801f384:	4620      	mov	r0, r4
 801f386:	4629      	mov	r1, r5
 801f388:	f7e1 f90e 	bl	80005a8 <__aeabi_dmul>
 801f38c:	f7e1 fbbc 	bl	8000b08 <__aeabi_d2iz>
 801f390:	4606      	mov	r6, r0
 801f392:	f7e1 f89f 	bl	80004d4 <__aeabi_i2d>
 801f396:	4b94      	ldr	r3, [pc, #592]	@ (801f5e8 <__kernel_rem_pio2+0x688>)
 801f398:	2200      	movs	r2, #0
 801f39a:	f7e1 f905 	bl	80005a8 <__aeabi_dmul>
 801f39e:	460b      	mov	r3, r1
 801f3a0:	4602      	mov	r2, r0
 801f3a2:	4629      	mov	r1, r5
 801f3a4:	4620      	mov	r0, r4
 801f3a6:	f7e0 ff47 	bl	8000238 <__aeabi_dsub>
 801f3aa:	f7e1 fbad 	bl	8000b08 <__aeabi_d2iz>
 801f3ae:	ab0c      	add	r3, sp, #48	@ 0x30
 801f3b0:	f10b 0b18 	add.w	fp, fp, #24
 801f3b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801f3b8:	f108 0801 	add.w	r8, r8, #1
 801f3bc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801f3c0:	e722      	b.n	801f208 <__kernel_rem_pio2+0x2a8>
 801f3c2:	4620      	mov	r0, r4
 801f3c4:	4629      	mov	r1, r5
 801f3c6:	f7e1 fb9f 	bl	8000b08 <__aeabi_d2iz>
 801f3ca:	ab0c      	add	r3, sp, #48	@ 0x30
 801f3cc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801f3d0:	e71a      	b.n	801f208 <__kernel_rem_pio2+0x2a8>
 801f3d2:	ab0c      	add	r3, sp, #48	@ 0x30
 801f3d4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801f3d8:	f7e1 f87c 	bl	80004d4 <__aeabi_i2d>
 801f3dc:	4622      	mov	r2, r4
 801f3de:	462b      	mov	r3, r5
 801f3e0:	f7e1 f8e2 	bl	80005a8 <__aeabi_dmul>
 801f3e4:	4652      	mov	r2, sl
 801f3e6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801f3ea:	465b      	mov	r3, fp
 801f3ec:	4620      	mov	r0, r4
 801f3ee:	4629      	mov	r1, r5
 801f3f0:	f7e1 f8da 	bl	80005a8 <__aeabi_dmul>
 801f3f4:	3e01      	subs	r6, #1
 801f3f6:	4604      	mov	r4, r0
 801f3f8:	460d      	mov	r5, r1
 801f3fa:	e718      	b.n	801f22e <__kernel_rem_pio2+0x2ce>
 801f3fc:	9906      	ldr	r1, [sp, #24]
 801f3fe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801f402:	9106      	str	r1, [sp, #24]
 801f404:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801f408:	f7e1 f8ce 	bl	80005a8 <__aeabi_dmul>
 801f40c:	4602      	mov	r2, r0
 801f40e:	460b      	mov	r3, r1
 801f410:	4650      	mov	r0, sl
 801f412:	4659      	mov	r1, fp
 801f414:	f7e0 ff12 	bl	800023c <__adddf3>
 801f418:	3601      	adds	r6, #1
 801f41a:	4682      	mov	sl, r0
 801f41c:	468b      	mov	fp, r1
 801f41e:	9b00      	ldr	r3, [sp, #0]
 801f420:	429e      	cmp	r6, r3
 801f422:	dc01      	bgt.n	801f428 <__kernel_rem_pio2+0x4c8>
 801f424:	42b5      	cmp	r5, r6
 801f426:	dae9      	bge.n	801f3fc <__kernel_rem_pio2+0x49c>
 801f428:	ab48      	add	r3, sp, #288	@ 0x120
 801f42a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801f42e:	e9c5 ab00 	strd	sl, fp, [r5]
 801f432:	3c01      	subs	r4, #1
 801f434:	e6ff      	b.n	801f236 <__kernel_rem_pio2+0x2d6>
 801f436:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801f438:	2b02      	cmp	r3, #2
 801f43a:	dc0b      	bgt.n	801f454 <__kernel_rem_pio2+0x4f4>
 801f43c:	2b00      	cmp	r3, #0
 801f43e:	dc39      	bgt.n	801f4b4 <__kernel_rem_pio2+0x554>
 801f440:	d05d      	beq.n	801f4fe <__kernel_rem_pio2+0x59e>
 801f442:	9b02      	ldr	r3, [sp, #8]
 801f444:	f003 0007 	and.w	r0, r3, #7
 801f448:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801f44c:	ecbd 8b02 	vpop	{d8}
 801f450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f454:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801f456:	2b03      	cmp	r3, #3
 801f458:	d1f3      	bne.n	801f442 <__kernel_rem_pio2+0x4e2>
 801f45a:	9b05      	ldr	r3, [sp, #20]
 801f45c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801f460:	eb0d 0403 	add.w	r4, sp, r3
 801f464:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801f468:	4625      	mov	r5, r4
 801f46a:	46c2      	mov	sl, r8
 801f46c:	f1ba 0f00 	cmp.w	sl, #0
 801f470:	f1a5 0508 	sub.w	r5, r5, #8
 801f474:	dc6b      	bgt.n	801f54e <__kernel_rem_pio2+0x5ee>
 801f476:	4645      	mov	r5, r8
 801f478:	2d01      	cmp	r5, #1
 801f47a:	f1a4 0408 	sub.w	r4, r4, #8
 801f47e:	f300 8087 	bgt.w	801f590 <__kernel_rem_pio2+0x630>
 801f482:	9c05      	ldr	r4, [sp, #20]
 801f484:	ab48      	add	r3, sp, #288	@ 0x120
 801f486:	441c      	add	r4, r3
 801f488:	2000      	movs	r0, #0
 801f48a:	2100      	movs	r1, #0
 801f48c:	f1b8 0f01 	cmp.w	r8, #1
 801f490:	f300 809c 	bgt.w	801f5cc <__kernel_rem_pio2+0x66c>
 801f494:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801f498:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801f49c:	f1b9 0f00 	cmp.w	r9, #0
 801f4a0:	f040 80a6 	bne.w	801f5f0 <__kernel_rem_pio2+0x690>
 801f4a4:	9b04      	ldr	r3, [sp, #16]
 801f4a6:	e9c3 7800 	strd	r7, r8, [r3]
 801f4aa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801f4ae:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801f4b2:	e7c6      	b.n	801f442 <__kernel_rem_pio2+0x4e2>
 801f4b4:	9d05      	ldr	r5, [sp, #20]
 801f4b6:	ab48      	add	r3, sp, #288	@ 0x120
 801f4b8:	441d      	add	r5, r3
 801f4ba:	4644      	mov	r4, r8
 801f4bc:	2000      	movs	r0, #0
 801f4be:	2100      	movs	r1, #0
 801f4c0:	2c00      	cmp	r4, #0
 801f4c2:	da35      	bge.n	801f530 <__kernel_rem_pio2+0x5d0>
 801f4c4:	f1b9 0f00 	cmp.w	r9, #0
 801f4c8:	d038      	beq.n	801f53c <__kernel_rem_pio2+0x5dc>
 801f4ca:	4602      	mov	r2, r0
 801f4cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f4d0:	9c04      	ldr	r4, [sp, #16]
 801f4d2:	e9c4 2300 	strd	r2, r3, [r4]
 801f4d6:	4602      	mov	r2, r0
 801f4d8:	460b      	mov	r3, r1
 801f4da:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801f4de:	f7e0 feab 	bl	8000238 <__aeabi_dsub>
 801f4e2:	ad4a      	add	r5, sp, #296	@ 0x128
 801f4e4:	2401      	movs	r4, #1
 801f4e6:	45a0      	cmp	r8, r4
 801f4e8:	da2b      	bge.n	801f542 <__kernel_rem_pio2+0x5e2>
 801f4ea:	f1b9 0f00 	cmp.w	r9, #0
 801f4ee:	d002      	beq.n	801f4f6 <__kernel_rem_pio2+0x596>
 801f4f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f4f4:	4619      	mov	r1, r3
 801f4f6:	9b04      	ldr	r3, [sp, #16]
 801f4f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801f4fc:	e7a1      	b.n	801f442 <__kernel_rem_pio2+0x4e2>
 801f4fe:	9c05      	ldr	r4, [sp, #20]
 801f500:	ab48      	add	r3, sp, #288	@ 0x120
 801f502:	441c      	add	r4, r3
 801f504:	2000      	movs	r0, #0
 801f506:	2100      	movs	r1, #0
 801f508:	f1b8 0f00 	cmp.w	r8, #0
 801f50c:	da09      	bge.n	801f522 <__kernel_rem_pio2+0x5c2>
 801f50e:	f1b9 0f00 	cmp.w	r9, #0
 801f512:	d002      	beq.n	801f51a <__kernel_rem_pio2+0x5ba>
 801f514:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f518:	4619      	mov	r1, r3
 801f51a:	9b04      	ldr	r3, [sp, #16]
 801f51c:	e9c3 0100 	strd	r0, r1, [r3]
 801f520:	e78f      	b.n	801f442 <__kernel_rem_pio2+0x4e2>
 801f522:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f526:	f7e0 fe89 	bl	800023c <__adddf3>
 801f52a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f52e:	e7eb      	b.n	801f508 <__kernel_rem_pio2+0x5a8>
 801f530:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801f534:	f7e0 fe82 	bl	800023c <__adddf3>
 801f538:	3c01      	subs	r4, #1
 801f53a:	e7c1      	b.n	801f4c0 <__kernel_rem_pio2+0x560>
 801f53c:	4602      	mov	r2, r0
 801f53e:	460b      	mov	r3, r1
 801f540:	e7c6      	b.n	801f4d0 <__kernel_rem_pio2+0x570>
 801f542:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801f546:	f7e0 fe79 	bl	800023c <__adddf3>
 801f54a:	3401      	adds	r4, #1
 801f54c:	e7cb      	b.n	801f4e6 <__kernel_rem_pio2+0x586>
 801f54e:	ed95 7b00 	vldr	d7, [r5]
 801f552:	ed8d 7b00 	vstr	d7, [sp]
 801f556:	ed95 7b02 	vldr	d7, [r5, #8]
 801f55a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f55e:	ec53 2b17 	vmov	r2, r3, d7
 801f562:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f566:	f7e0 fe69 	bl	800023c <__adddf3>
 801f56a:	4602      	mov	r2, r0
 801f56c:	460b      	mov	r3, r1
 801f56e:	4606      	mov	r6, r0
 801f570:	460f      	mov	r7, r1
 801f572:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f576:	f7e0 fe5f 	bl	8000238 <__aeabi_dsub>
 801f57a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f57e:	f7e0 fe5d 	bl	800023c <__adddf3>
 801f582:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f586:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801f58a:	e9c5 6700 	strd	r6, r7, [r5]
 801f58e:	e76d      	b.n	801f46c <__kernel_rem_pio2+0x50c>
 801f590:	ed94 7b00 	vldr	d7, [r4]
 801f594:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801f598:	ec51 0b17 	vmov	r0, r1, d7
 801f59c:	4652      	mov	r2, sl
 801f59e:	465b      	mov	r3, fp
 801f5a0:	ed8d 7b00 	vstr	d7, [sp]
 801f5a4:	f7e0 fe4a 	bl	800023c <__adddf3>
 801f5a8:	4602      	mov	r2, r0
 801f5aa:	460b      	mov	r3, r1
 801f5ac:	4606      	mov	r6, r0
 801f5ae:	460f      	mov	r7, r1
 801f5b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f5b4:	f7e0 fe40 	bl	8000238 <__aeabi_dsub>
 801f5b8:	4652      	mov	r2, sl
 801f5ba:	465b      	mov	r3, fp
 801f5bc:	f7e0 fe3e 	bl	800023c <__adddf3>
 801f5c0:	3d01      	subs	r5, #1
 801f5c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801f5c6:	e9c4 6700 	strd	r6, r7, [r4]
 801f5ca:	e755      	b.n	801f478 <__kernel_rem_pio2+0x518>
 801f5cc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f5d0:	f7e0 fe34 	bl	800023c <__adddf3>
 801f5d4:	f108 38ff 	add.w	r8, r8, #4294967295
 801f5d8:	e758      	b.n	801f48c <__kernel_rem_pio2+0x52c>
 801f5da:	bf00      	nop
 801f5dc:	f3af 8000 	nop.w
	...
 801f5e8:	41700000 	.word	0x41700000
 801f5ec:	3e700000 	.word	0x3e700000
 801f5f0:	9b04      	ldr	r3, [sp, #16]
 801f5f2:	9a04      	ldr	r2, [sp, #16]
 801f5f4:	601f      	str	r7, [r3, #0]
 801f5f6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801f5fa:	605c      	str	r4, [r3, #4]
 801f5fc:	609d      	str	r5, [r3, #8]
 801f5fe:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f602:	60d3      	str	r3, [r2, #12]
 801f604:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f608:	6110      	str	r0, [r2, #16]
 801f60a:	6153      	str	r3, [r2, #20]
 801f60c:	e719      	b.n	801f442 <__kernel_rem_pio2+0x4e2>
 801f60e:	bf00      	nop

0801f610 <__ieee754_acos>:
 801f610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f614:	ec55 4b10 	vmov	r4, r5, d0
 801f618:	49b7      	ldr	r1, [pc, #732]	@ (801f8f8 <__ieee754_acos+0x2e8>)
 801f61a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f61e:	428b      	cmp	r3, r1
 801f620:	d919      	bls.n	801f656 <__ieee754_acos+0x46>
 801f622:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801f626:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801f62a:	4323      	orrs	r3, r4
 801f62c:	d106      	bne.n	801f63c <__ieee754_acos+0x2c>
 801f62e:	2d00      	cmp	r5, #0
 801f630:	f340 8210 	ble.w	801fa54 <__ieee754_acos+0x444>
 801f634:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 801f888 <__ieee754_acos+0x278>
 801f638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f63c:	4622      	mov	r2, r4
 801f63e:	462b      	mov	r3, r5
 801f640:	4620      	mov	r0, r4
 801f642:	4629      	mov	r1, r5
 801f644:	f7e0 fdf8 	bl	8000238 <__aeabi_dsub>
 801f648:	4602      	mov	r2, r0
 801f64a:	460b      	mov	r3, r1
 801f64c:	f7e1 f8d6 	bl	80007fc <__aeabi_ddiv>
 801f650:	ec41 0b10 	vmov	d0, r0, r1
 801f654:	e7f0      	b.n	801f638 <__ieee754_acos+0x28>
 801f656:	49a9      	ldr	r1, [pc, #676]	@ (801f8fc <__ieee754_acos+0x2ec>)
 801f658:	428b      	cmp	r3, r1
 801f65a:	f200 8085 	bhi.w	801f768 <__ieee754_acos+0x158>
 801f65e:	4aa8      	ldr	r2, [pc, #672]	@ (801f900 <__ieee754_acos+0x2f0>)
 801f660:	4293      	cmp	r3, r2
 801f662:	f240 81fa 	bls.w	801fa5a <__ieee754_acos+0x44a>
 801f666:	4622      	mov	r2, r4
 801f668:	462b      	mov	r3, r5
 801f66a:	4620      	mov	r0, r4
 801f66c:	4629      	mov	r1, r5
 801f66e:	f7e0 ff9b 	bl	80005a8 <__aeabi_dmul>
 801f672:	a387      	add	r3, pc, #540	@ (adr r3, 801f890 <__ieee754_acos+0x280>)
 801f674:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f678:	4606      	mov	r6, r0
 801f67a:	460f      	mov	r7, r1
 801f67c:	f7e0 ff94 	bl	80005a8 <__aeabi_dmul>
 801f680:	a385      	add	r3, pc, #532	@ (adr r3, 801f898 <__ieee754_acos+0x288>)
 801f682:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f686:	f7e0 fdd9 	bl	800023c <__adddf3>
 801f68a:	4632      	mov	r2, r6
 801f68c:	463b      	mov	r3, r7
 801f68e:	f7e0 ff8b 	bl	80005a8 <__aeabi_dmul>
 801f692:	a383      	add	r3, pc, #524	@ (adr r3, 801f8a0 <__ieee754_acos+0x290>)
 801f694:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f698:	f7e0 fdce 	bl	8000238 <__aeabi_dsub>
 801f69c:	4632      	mov	r2, r6
 801f69e:	463b      	mov	r3, r7
 801f6a0:	f7e0 ff82 	bl	80005a8 <__aeabi_dmul>
 801f6a4:	a380      	add	r3, pc, #512	@ (adr r3, 801f8a8 <__ieee754_acos+0x298>)
 801f6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6aa:	f7e0 fdc7 	bl	800023c <__adddf3>
 801f6ae:	4632      	mov	r2, r6
 801f6b0:	463b      	mov	r3, r7
 801f6b2:	f7e0 ff79 	bl	80005a8 <__aeabi_dmul>
 801f6b6:	a37e      	add	r3, pc, #504	@ (adr r3, 801f8b0 <__ieee754_acos+0x2a0>)
 801f6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6bc:	f7e0 fdbc 	bl	8000238 <__aeabi_dsub>
 801f6c0:	4632      	mov	r2, r6
 801f6c2:	463b      	mov	r3, r7
 801f6c4:	f7e0 ff70 	bl	80005a8 <__aeabi_dmul>
 801f6c8:	a37b      	add	r3, pc, #492	@ (adr r3, 801f8b8 <__ieee754_acos+0x2a8>)
 801f6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6ce:	f7e0 fdb5 	bl	800023c <__adddf3>
 801f6d2:	4632      	mov	r2, r6
 801f6d4:	463b      	mov	r3, r7
 801f6d6:	f7e0 ff67 	bl	80005a8 <__aeabi_dmul>
 801f6da:	a379      	add	r3, pc, #484	@ (adr r3, 801f8c0 <__ieee754_acos+0x2b0>)
 801f6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6e0:	4680      	mov	r8, r0
 801f6e2:	4689      	mov	r9, r1
 801f6e4:	4630      	mov	r0, r6
 801f6e6:	4639      	mov	r1, r7
 801f6e8:	f7e0 ff5e 	bl	80005a8 <__aeabi_dmul>
 801f6ec:	a376      	add	r3, pc, #472	@ (adr r3, 801f8c8 <__ieee754_acos+0x2b8>)
 801f6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6f2:	f7e0 fda1 	bl	8000238 <__aeabi_dsub>
 801f6f6:	4632      	mov	r2, r6
 801f6f8:	463b      	mov	r3, r7
 801f6fa:	f7e0 ff55 	bl	80005a8 <__aeabi_dmul>
 801f6fe:	a374      	add	r3, pc, #464	@ (adr r3, 801f8d0 <__ieee754_acos+0x2c0>)
 801f700:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f704:	f7e0 fd9a 	bl	800023c <__adddf3>
 801f708:	4632      	mov	r2, r6
 801f70a:	463b      	mov	r3, r7
 801f70c:	f7e0 ff4c 	bl	80005a8 <__aeabi_dmul>
 801f710:	a371      	add	r3, pc, #452	@ (adr r3, 801f8d8 <__ieee754_acos+0x2c8>)
 801f712:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f716:	f7e0 fd8f 	bl	8000238 <__aeabi_dsub>
 801f71a:	4632      	mov	r2, r6
 801f71c:	463b      	mov	r3, r7
 801f71e:	f7e0 ff43 	bl	80005a8 <__aeabi_dmul>
 801f722:	4b78      	ldr	r3, [pc, #480]	@ (801f904 <__ieee754_acos+0x2f4>)
 801f724:	2200      	movs	r2, #0
 801f726:	f7e0 fd89 	bl	800023c <__adddf3>
 801f72a:	4602      	mov	r2, r0
 801f72c:	460b      	mov	r3, r1
 801f72e:	4640      	mov	r0, r8
 801f730:	4649      	mov	r1, r9
 801f732:	f7e1 f863 	bl	80007fc <__aeabi_ddiv>
 801f736:	4622      	mov	r2, r4
 801f738:	462b      	mov	r3, r5
 801f73a:	f7e0 ff35 	bl	80005a8 <__aeabi_dmul>
 801f73e:	4602      	mov	r2, r0
 801f740:	460b      	mov	r3, r1
 801f742:	a167      	add	r1, pc, #412	@ (adr r1, 801f8e0 <__ieee754_acos+0x2d0>)
 801f744:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f748:	f7e0 fd76 	bl	8000238 <__aeabi_dsub>
 801f74c:	4602      	mov	r2, r0
 801f74e:	460b      	mov	r3, r1
 801f750:	4620      	mov	r0, r4
 801f752:	4629      	mov	r1, r5
 801f754:	f7e0 fd70 	bl	8000238 <__aeabi_dsub>
 801f758:	4602      	mov	r2, r0
 801f75a:	460b      	mov	r3, r1
 801f75c:	a162      	add	r1, pc, #392	@ (adr r1, 801f8e8 <__ieee754_acos+0x2d8>)
 801f75e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f762:	f7e0 fd69 	bl	8000238 <__aeabi_dsub>
 801f766:	e773      	b.n	801f650 <__ieee754_acos+0x40>
 801f768:	2d00      	cmp	r5, #0
 801f76a:	f280 80cf 	bge.w	801f90c <__ieee754_acos+0x2fc>
 801f76e:	4b65      	ldr	r3, [pc, #404]	@ (801f904 <__ieee754_acos+0x2f4>)
 801f770:	2200      	movs	r2, #0
 801f772:	4620      	mov	r0, r4
 801f774:	4629      	mov	r1, r5
 801f776:	f7e0 fd61 	bl	800023c <__adddf3>
 801f77a:	4b63      	ldr	r3, [pc, #396]	@ (801f908 <__ieee754_acos+0x2f8>)
 801f77c:	2200      	movs	r2, #0
 801f77e:	f7e0 ff13 	bl	80005a8 <__aeabi_dmul>
 801f782:	a343      	add	r3, pc, #268	@ (adr r3, 801f890 <__ieee754_acos+0x280>)
 801f784:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f788:	4604      	mov	r4, r0
 801f78a:	460d      	mov	r5, r1
 801f78c:	f7e0 ff0c 	bl	80005a8 <__aeabi_dmul>
 801f790:	a341      	add	r3, pc, #260	@ (adr r3, 801f898 <__ieee754_acos+0x288>)
 801f792:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f796:	f7e0 fd51 	bl	800023c <__adddf3>
 801f79a:	4622      	mov	r2, r4
 801f79c:	462b      	mov	r3, r5
 801f79e:	f7e0 ff03 	bl	80005a8 <__aeabi_dmul>
 801f7a2:	a33f      	add	r3, pc, #252	@ (adr r3, 801f8a0 <__ieee754_acos+0x290>)
 801f7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7a8:	f7e0 fd46 	bl	8000238 <__aeabi_dsub>
 801f7ac:	4622      	mov	r2, r4
 801f7ae:	462b      	mov	r3, r5
 801f7b0:	f7e0 fefa 	bl	80005a8 <__aeabi_dmul>
 801f7b4:	a33c      	add	r3, pc, #240	@ (adr r3, 801f8a8 <__ieee754_acos+0x298>)
 801f7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7ba:	f7e0 fd3f 	bl	800023c <__adddf3>
 801f7be:	4622      	mov	r2, r4
 801f7c0:	462b      	mov	r3, r5
 801f7c2:	f7e0 fef1 	bl	80005a8 <__aeabi_dmul>
 801f7c6:	a33a      	add	r3, pc, #232	@ (adr r3, 801f8b0 <__ieee754_acos+0x2a0>)
 801f7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7cc:	f7e0 fd34 	bl	8000238 <__aeabi_dsub>
 801f7d0:	4622      	mov	r2, r4
 801f7d2:	462b      	mov	r3, r5
 801f7d4:	f7e0 fee8 	bl	80005a8 <__aeabi_dmul>
 801f7d8:	a337      	add	r3, pc, #220	@ (adr r3, 801f8b8 <__ieee754_acos+0x2a8>)
 801f7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7de:	f7e0 fd2d 	bl	800023c <__adddf3>
 801f7e2:	4622      	mov	r2, r4
 801f7e4:	462b      	mov	r3, r5
 801f7e6:	f7e0 fedf 	bl	80005a8 <__aeabi_dmul>
 801f7ea:	a335      	add	r3, pc, #212	@ (adr r3, 801f8c0 <__ieee754_acos+0x2b0>)
 801f7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7f0:	4606      	mov	r6, r0
 801f7f2:	460f      	mov	r7, r1
 801f7f4:	4620      	mov	r0, r4
 801f7f6:	4629      	mov	r1, r5
 801f7f8:	f7e0 fed6 	bl	80005a8 <__aeabi_dmul>
 801f7fc:	a332      	add	r3, pc, #200	@ (adr r3, 801f8c8 <__ieee754_acos+0x2b8>)
 801f7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f802:	f7e0 fd19 	bl	8000238 <__aeabi_dsub>
 801f806:	4622      	mov	r2, r4
 801f808:	462b      	mov	r3, r5
 801f80a:	f7e0 fecd 	bl	80005a8 <__aeabi_dmul>
 801f80e:	a330      	add	r3, pc, #192	@ (adr r3, 801f8d0 <__ieee754_acos+0x2c0>)
 801f810:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f814:	f7e0 fd12 	bl	800023c <__adddf3>
 801f818:	4622      	mov	r2, r4
 801f81a:	462b      	mov	r3, r5
 801f81c:	f7e0 fec4 	bl	80005a8 <__aeabi_dmul>
 801f820:	a32d      	add	r3, pc, #180	@ (adr r3, 801f8d8 <__ieee754_acos+0x2c8>)
 801f822:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f826:	f7e0 fd07 	bl	8000238 <__aeabi_dsub>
 801f82a:	4622      	mov	r2, r4
 801f82c:	462b      	mov	r3, r5
 801f82e:	f7e0 febb 	bl	80005a8 <__aeabi_dmul>
 801f832:	4b34      	ldr	r3, [pc, #208]	@ (801f904 <__ieee754_acos+0x2f4>)
 801f834:	2200      	movs	r2, #0
 801f836:	f7e0 fd01 	bl	800023c <__adddf3>
 801f83a:	ec45 4b10 	vmov	d0, r4, r5
 801f83e:	4680      	mov	r8, r0
 801f840:	4689      	mov	r9, r1
 801f842:	f000 f9bf 	bl	801fbc4 <__ieee754_sqrt>
 801f846:	ec55 4b10 	vmov	r4, r5, d0
 801f84a:	4642      	mov	r2, r8
 801f84c:	464b      	mov	r3, r9
 801f84e:	4630      	mov	r0, r6
 801f850:	4639      	mov	r1, r7
 801f852:	f7e0 ffd3 	bl	80007fc <__aeabi_ddiv>
 801f856:	4622      	mov	r2, r4
 801f858:	462b      	mov	r3, r5
 801f85a:	f7e0 fea5 	bl	80005a8 <__aeabi_dmul>
 801f85e:	a320      	add	r3, pc, #128	@ (adr r3, 801f8e0 <__ieee754_acos+0x2d0>)
 801f860:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f864:	f7e0 fce8 	bl	8000238 <__aeabi_dsub>
 801f868:	4622      	mov	r2, r4
 801f86a:	462b      	mov	r3, r5
 801f86c:	f7e0 fce6 	bl	800023c <__adddf3>
 801f870:	4602      	mov	r2, r0
 801f872:	460b      	mov	r3, r1
 801f874:	f7e0 fce2 	bl	800023c <__adddf3>
 801f878:	4602      	mov	r2, r0
 801f87a:	460b      	mov	r3, r1
 801f87c:	a11c      	add	r1, pc, #112	@ (adr r1, 801f8f0 <__ieee754_acos+0x2e0>)
 801f87e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f882:	e76e      	b.n	801f762 <__ieee754_acos+0x152>
 801f884:	f3af 8000 	nop.w
	...
 801f890:	0dfdf709 	.word	0x0dfdf709
 801f894:	3f023de1 	.word	0x3f023de1
 801f898:	7501b288 	.word	0x7501b288
 801f89c:	3f49efe0 	.word	0x3f49efe0
 801f8a0:	b5688f3b 	.word	0xb5688f3b
 801f8a4:	3fa48228 	.word	0x3fa48228
 801f8a8:	0e884455 	.word	0x0e884455
 801f8ac:	3fc9c155 	.word	0x3fc9c155
 801f8b0:	03eb6f7d 	.word	0x03eb6f7d
 801f8b4:	3fd4d612 	.word	0x3fd4d612
 801f8b8:	55555555 	.word	0x55555555
 801f8bc:	3fc55555 	.word	0x3fc55555
 801f8c0:	b12e9282 	.word	0xb12e9282
 801f8c4:	3fb3b8c5 	.word	0x3fb3b8c5
 801f8c8:	1b8d0159 	.word	0x1b8d0159
 801f8cc:	3fe6066c 	.word	0x3fe6066c
 801f8d0:	9c598ac8 	.word	0x9c598ac8
 801f8d4:	40002ae5 	.word	0x40002ae5
 801f8d8:	1c8a2d4b 	.word	0x1c8a2d4b
 801f8dc:	40033a27 	.word	0x40033a27
 801f8e0:	33145c07 	.word	0x33145c07
 801f8e4:	3c91a626 	.word	0x3c91a626
 801f8e8:	54442d18 	.word	0x54442d18
 801f8ec:	3ff921fb 	.word	0x3ff921fb
 801f8f0:	54442d18 	.word	0x54442d18
 801f8f4:	400921fb 	.word	0x400921fb
 801f8f8:	3fefffff 	.word	0x3fefffff
 801f8fc:	3fdfffff 	.word	0x3fdfffff
 801f900:	3c600000 	.word	0x3c600000
 801f904:	3ff00000 	.word	0x3ff00000
 801f908:	3fe00000 	.word	0x3fe00000
 801f90c:	4622      	mov	r2, r4
 801f90e:	462b      	mov	r3, r5
 801f910:	496b      	ldr	r1, [pc, #428]	@ (801fac0 <__ieee754_acos+0x4b0>)
 801f912:	2000      	movs	r0, #0
 801f914:	f7e0 fc90 	bl	8000238 <__aeabi_dsub>
 801f918:	4b6a      	ldr	r3, [pc, #424]	@ (801fac4 <__ieee754_acos+0x4b4>)
 801f91a:	2200      	movs	r2, #0
 801f91c:	f7e0 fe44 	bl	80005a8 <__aeabi_dmul>
 801f920:	4604      	mov	r4, r0
 801f922:	460d      	mov	r5, r1
 801f924:	ec45 4b10 	vmov	d0, r4, r5
 801f928:	f000 f94c 	bl	801fbc4 <__ieee754_sqrt>
 801f92c:	a34c      	add	r3, pc, #304	@ (adr r3, 801fa60 <__ieee754_acos+0x450>)
 801f92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f932:	4620      	mov	r0, r4
 801f934:	4629      	mov	r1, r5
 801f936:	ec59 8b10 	vmov	r8, r9, d0
 801f93a:	f7e0 fe35 	bl	80005a8 <__aeabi_dmul>
 801f93e:	a34a      	add	r3, pc, #296	@ (adr r3, 801fa68 <__ieee754_acos+0x458>)
 801f940:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f944:	f7e0 fc7a 	bl	800023c <__adddf3>
 801f948:	4622      	mov	r2, r4
 801f94a:	462b      	mov	r3, r5
 801f94c:	f7e0 fe2c 	bl	80005a8 <__aeabi_dmul>
 801f950:	a347      	add	r3, pc, #284	@ (adr r3, 801fa70 <__ieee754_acos+0x460>)
 801f952:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f956:	f7e0 fc6f 	bl	8000238 <__aeabi_dsub>
 801f95a:	4622      	mov	r2, r4
 801f95c:	462b      	mov	r3, r5
 801f95e:	f7e0 fe23 	bl	80005a8 <__aeabi_dmul>
 801f962:	a345      	add	r3, pc, #276	@ (adr r3, 801fa78 <__ieee754_acos+0x468>)
 801f964:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f968:	f7e0 fc68 	bl	800023c <__adddf3>
 801f96c:	4622      	mov	r2, r4
 801f96e:	462b      	mov	r3, r5
 801f970:	f7e0 fe1a 	bl	80005a8 <__aeabi_dmul>
 801f974:	a342      	add	r3, pc, #264	@ (adr r3, 801fa80 <__ieee754_acos+0x470>)
 801f976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f97a:	f7e0 fc5d 	bl	8000238 <__aeabi_dsub>
 801f97e:	4622      	mov	r2, r4
 801f980:	462b      	mov	r3, r5
 801f982:	f7e0 fe11 	bl	80005a8 <__aeabi_dmul>
 801f986:	a340      	add	r3, pc, #256	@ (adr r3, 801fa88 <__ieee754_acos+0x478>)
 801f988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f98c:	f7e0 fc56 	bl	800023c <__adddf3>
 801f990:	4622      	mov	r2, r4
 801f992:	462b      	mov	r3, r5
 801f994:	f7e0 fe08 	bl	80005a8 <__aeabi_dmul>
 801f998:	a33d      	add	r3, pc, #244	@ (adr r3, 801fa90 <__ieee754_acos+0x480>)
 801f99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f99e:	4682      	mov	sl, r0
 801f9a0:	468b      	mov	fp, r1
 801f9a2:	4620      	mov	r0, r4
 801f9a4:	4629      	mov	r1, r5
 801f9a6:	f7e0 fdff 	bl	80005a8 <__aeabi_dmul>
 801f9aa:	a33b      	add	r3, pc, #236	@ (adr r3, 801fa98 <__ieee754_acos+0x488>)
 801f9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9b0:	f7e0 fc42 	bl	8000238 <__aeabi_dsub>
 801f9b4:	4622      	mov	r2, r4
 801f9b6:	462b      	mov	r3, r5
 801f9b8:	f7e0 fdf6 	bl	80005a8 <__aeabi_dmul>
 801f9bc:	a338      	add	r3, pc, #224	@ (adr r3, 801faa0 <__ieee754_acos+0x490>)
 801f9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9c2:	f7e0 fc3b 	bl	800023c <__adddf3>
 801f9c6:	4622      	mov	r2, r4
 801f9c8:	462b      	mov	r3, r5
 801f9ca:	f7e0 fded 	bl	80005a8 <__aeabi_dmul>
 801f9ce:	a336      	add	r3, pc, #216	@ (adr r3, 801faa8 <__ieee754_acos+0x498>)
 801f9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9d4:	f7e0 fc30 	bl	8000238 <__aeabi_dsub>
 801f9d8:	4622      	mov	r2, r4
 801f9da:	462b      	mov	r3, r5
 801f9dc:	f7e0 fde4 	bl	80005a8 <__aeabi_dmul>
 801f9e0:	4b37      	ldr	r3, [pc, #220]	@ (801fac0 <__ieee754_acos+0x4b0>)
 801f9e2:	2200      	movs	r2, #0
 801f9e4:	f7e0 fc2a 	bl	800023c <__adddf3>
 801f9e8:	4602      	mov	r2, r0
 801f9ea:	460b      	mov	r3, r1
 801f9ec:	4650      	mov	r0, sl
 801f9ee:	4659      	mov	r1, fp
 801f9f0:	f7e0 ff04 	bl	80007fc <__aeabi_ddiv>
 801f9f4:	4642      	mov	r2, r8
 801f9f6:	464b      	mov	r3, r9
 801f9f8:	f7e0 fdd6 	bl	80005a8 <__aeabi_dmul>
 801f9fc:	2600      	movs	r6, #0
 801f9fe:	4682      	mov	sl, r0
 801fa00:	468b      	mov	fp, r1
 801fa02:	4632      	mov	r2, r6
 801fa04:	464b      	mov	r3, r9
 801fa06:	4630      	mov	r0, r6
 801fa08:	4649      	mov	r1, r9
 801fa0a:	f7e0 fdcd 	bl	80005a8 <__aeabi_dmul>
 801fa0e:	4602      	mov	r2, r0
 801fa10:	460b      	mov	r3, r1
 801fa12:	4620      	mov	r0, r4
 801fa14:	4629      	mov	r1, r5
 801fa16:	f7e0 fc0f 	bl	8000238 <__aeabi_dsub>
 801fa1a:	4632      	mov	r2, r6
 801fa1c:	4604      	mov	r4, r0
 801fa1e:	460d      	mov	r5, r1
 801fa20:	464b      	mov	r3, r9
 801fa22:	4640      	mov	r0, r8
 801fa24:	4649      	mov	r1, r9
 801fa26:	f7e0 fc09 	bl	800023c <__adddf3>
 801fa2a:	4602      	mov	r2, r0
 801fa2c:	460b      	mov	r3, r1
 801fa2e:	4620      	mov	r0, r4
 801fa30:	4629      	mov	r1, r5
 801fa32:	f7e0 fee3 	bl	80007fc <__aeabi_ddiv>
 801fa36:	4602      	mov	r2, r0
 801fa38:	460b      	mov	r3, r1
 801fa3a:	4650      	mov	r0, sl
 801fa3c:	4659      	mov	r1, fp
 801fa3e:	f7e0 fbfd 	bl	800023c <__adddf3>
 801fa42:	4632      	mov	r2, r6
 801fa44:	464b      	mov	r3, r9
 801fa46:	f7e0 fbf9 	bl	800023c <__adddf3>
 801fa4a:	4602      	mov	r2, r0
 801fa4c:	460b      	mov	r3, r1
 801fa4e:	f7e0 fbf5 	bl	800023c <__adddf3>
 801fa52:	e5fd      	b.n	801f650 <__ieee754_acos+0x40>
 801fa54:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801fab0 <__ieee754_acos+0x4a0>
 801fa58:	e5ee      	b.n	801f638 <__ieee754_acos+0x28>
 801fa5a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801fab8 <__ieee754_acos+0x4a8>
 801fa5e:	e5eb      	b.n	801f638 <__ieee754_acos+0x28>
 801fa60:	0dfdf709 	.word	0x0dfdf709
 801fa64:	3f023de1 	.word	0x3f023de1
 801fa68:	7501b288 	.word	0x7501b288
 801fa6c:	3f49efe0 	.word	0x3f49efe0
 801fa70:	b5688f3b 	.word	0xb5688f3b
 801fa74:	3fa48228 	.word	0x3fa48228
 801fa78:	0e884455 	.word	0x0e884455
 801fa7c:	3fc9c155 	.word	0x3fc9c155
 801fa80:	03eb6f7d 	.word	0x03eb6f7d
 801fa84:	3fd4d612 	.word	0x3fd4d612
 801fa88:	55555555 	.word	0x55555555
 801fa8c:	3fc55555 	.word	0x3fc55555
 801fa90:	b12e9282 	.word	0xb12e9282
 801fa94:	3fb3b8c5 	.word	0x3fb3b8c5
 801fa98:	1b8d0159 	.word	0x1b8d0159
 801fa9c:	3fe6066c 	.word	0x3fe6066c
 801faa0:	9c598ac8 	.word	0x9c598ac8
 801faa4:	40002ae5 	.word	0x40002ae5
 801faa8:	1c8a2d4b 	.word	0x1c8a2d4b
 801faac:	40033a27 	.word	0x40033a27
 801fab0:	54442d18 	.word	0x54442d18
 801fab4:	400921fb 	.word	0x400921fb
 801fab8:	54442d18 	.word	0x54442d18
 801fabc:	3ff921fb 	.word	0x3ff921fb
 801fac0:	3ff00000 	.word	0x3ff00000
 801fac4:	3fe00000 	.word	0x3fe00000

0801fac8 <scalbn>:
 801fac8:	b570      	push	{r4, r5, r6, lr}
 801faca:	ec55 4b10 	vmov	r4, r5, d0
 801face:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801fad2:	4606      	mov	r6, r0
 801fad4:	462b      	mov	r3, r5
 801fad6:	b991      	cbnz	r1, 801fafe <scalbn+0x36>
 801fad8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801fadc:	4323      	orrs	r3, r4
 801fade:	d03d      	beq.n	801fb5c <scalbn+0x94>
 801fae0:	4b35      	ldr	r3, [pc, #212]	@ (801fbb8 <scalbn+0xf0>)
 801fae2:	4620      	mov	r0, r4
 801fae4:	4629      	mov	r1, r5
 801fae6:	2200      	movs	r2, #0
 801fae8:	f7e0 fd5e 	bl	80005a8 <__aeabi_dmul>
 801faec:	4b33      	ldr	r3, [pc, #204]	@ (801fbbc <scalbn+0xf4>)
 801faee:	429e      	cmp	r6, r3
 801faf0:	4604      	mov	r4, r0
 801faf2:	460d      	mov	r5, r1
 801faf4:	da0f      	bge.n	801fb16 <scalbn+0x4e>
 801faf6:	a328      	add	r3, pc, #160	@ (adr r3, 801fb98 <scalbn+0xd0>)
 801faf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fafc:	e01e      	b.n	801fb3c <scalbn+0x74>
 801fafe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801fb02:	4291      	cmp	r1, r2
 801fb04:	d10b      	bne.n	801fb1e <scalbn+0x56>
 801fb06:	4622      	mov	r2, r4
 801fb08:	4620      	mov	r0, r4
 801fb0a:	4629      	mov	r1, r5
 801fb0c:	f7e0 fb96 	bl	800023c <__adddf3>
 801fb10:	4604      	mov	r4, r0
 801fb12:	460d      	mov	r5, r1
 801fb14:	e022      	b.n	801fb5c <scalbn+0x94>
 801fb16:	460b      	mov	r3, r1
 801fb18:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801fb1c:	3936      	subs	r1, #54	@ 0x36
 801fb1e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801fb22:	4296      	cmp	r6, r2
 801fb24:	dd0d      	ble.n	801fb42 <scalbn+0x7a>
 801fb26:	2d00      	cmp	r5, #0
 801fb28:	a11d      	add	r1, pc, #116	@ (adr r1, 801fba0 <scalbn+0xd8>)
 801fb2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fb2e:	da02      	bge.n	801fb36 <scalbn+0x6e>
 801fb30:	a11d      	add	r1, pc, #116	@ (adr r1, 801fba8 <scalbn+0xe0>)
 801fb32:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fb36:	a31a      	add	r3, pc, #104	@ (adr r3, 801fba0 <scalbn+0xd8>)
 801fb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb3c:	f7e0 fd34 	bl	80005a8 <__aeabi_dmul>
 801fb40:	e7e6      	b.n	801fb10 <scalbn+0x48>
 801fb42:	1872      	adds	r2, r6, r1
 801fb44:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801fb48:	428a      	cmp	r2, r1
 801fb4a:	dcec      	bgt.n	801fb26 <scalbn+0x5e>
 801fb4c:	2a00      	cmp	r2, #0
 801fb4e:	dd08      	ble.n	801fb62 <scalbn+0x9a>
 801fb50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fb54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801fb58:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fb5c:	ec45 4b10 	vmov	d0, r4, r5
 801fb60:	bd70      	pop	{r4, r5, r6, pc}
 801fb62:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801fb66:	da08      	bge.n	801fb7a <scalbn+0xb2>
 801fb68:	2d00      	cmp	r5, #0
 801fb6a:	a10b      	add	r1, pc, #44	@ (adr r1, 801fb98 <scalbn+0xd0>)
 801fb6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fb70:	dac1      	bge.n	801faf6 <scalbn+0x2e>
 801fb72:	a10f      	add	r1, pc, #60	@ (adr r1, 801fbb0 <scalbn+0xe8>)
 801fb74:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fb78:	e7bd      	b.n	801faf6 <scalbn+0x2e>
 801fb7a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fb7e:	3236      	adds	r2, #54	@ 0x36
 801fb80:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801fb84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fb88:	4620      	mov	r0, r4
 801fb8a:	4b0d      	ldr	r3, [pc, #52]	@ (801fbc0 <scalbn+0xf8>)
 801fb8c:	4629      	mov	r1, r5
 801fb8e:	2200      	movs	r2, #0
 801fb90:	e7d4      	b.n	801fb3c <scalbn+0x74>
 801fb92:	bf00      	nop
 801fb94:	f3af 8000 	nop.w
 801fb98:	c2f8f359 	.word	0xc2f8f359
 801fb9c:	01a56e1f 	.word	0x01a56e1f
 801fba0:	8800759c 	.word	0x8800759c
 801fba4:	7e37e43c 	.word	0x7e37e43c
 801fba8:	8800759c 	.word	0x8800759c
 801fbac:	fe37e43c 	.word	0xfe37e43c
 801fbb0:	c2f8f359 	.word	0xc2f8f359
 801fbb4:	81a56e1f 	.word	0x81a56e1f
 801fbb8:	43500000 	.word	0x43500000
 801fbbc:	ffff3cb0 	.word	0xffff3cb0
 801fbc0:	3c900000 	.word	0x3c900000

0801fbc4 <__ieee754_sqrt>:
 801fbc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbc8:	4a68      	ldr	r2, [pc, #416]	@ (801fd6c <__ieee754_sqrt+0x1a8>)
 801fbca:	ec55 4b10 	vmov	r4, r5, d0
 801fbce:	43aa      	bics	r2, r5
 801fbd0:	462b      	mov	r3, r5
 801fbd2:	4621      	mov	r1, r4
 801fbd4:	d110      	bne.n	801fbf8 <__ieee754_sqrt+0x34>
 801fbd6:	4622      	mov	r2, r4
 801fbd8:	4620      	mov	r0, r4
 801fbda:	4629      	mov	r1, r5
 801fbdc:	f7e0 fce4 	bl	80005a8 <__aeabi_dmul>
 801fbe0:	4602      	mov	r2, r0
 801fbe2:	460b      	mov	r3, r1
 801fbe4:	4620      	mov	r0, r4
 801fbe6:	4629      	mov	r1, r5
 801fbe8:	f7e0 fb28 	bl	800023c <__adddf3>
 801fbec:	4604      	mov	r4, r0
 801fbee:	460d      	mov	r5, r1
 801fbf0:	ec45 4b10 	vmov	d0, r4, r5
 801fbf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbf8:	2d00      	cmp	r5, #0
 801fbfa:	dc0e      	bgt.n	801fc1a <__ieee754_sqrt+0x56>
 801fbfc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801fc00:	4322      	orrs	r2, r4
 801fc02:	d0f5      	beq.n	801fbf0 <__ieee754_sqrt+0x2c>
 801fc04:	b19d      	cbz	r5, 801fc2e <__ieee754_sqrt+0x6a>
 801fc06:	4622      	mov	r2, r4
 801fc08:	4620      	mov	r0, r4
 801fc0a:	4629      	mov	r1, r5
 801fc0c:	f7e0 fb14 	bl	8000238 <__aeabi_dsub>
 801fc10:	4602      	mov	r2, r0
 801fc12:	460b      	mov	r3, r1
 801fc14:	f7e0 fdf2 	bl	80007fc <__aeabi_ddiv>
 801fc18:	e7e8      	b.n	801fbec <__ieee754_sqrt+0x28>
 801fc1a:	152a      	asrs	r2, r5, #20
 801fc1c:	d115      	bne.n	801fc4a <__ieee754_sqrt+0x86>
 801fc1e:	2000      	movs	r0, #0
 801fc20:	e009      	b.n	801fc36 <__ieee754_sqrt+0x72>
 801fc22:	0acb      	lsrs	r3, r1, #11
 801fc24:	3a15      	subs	r2, #21
 801fc26:	0549      	lsls	r1, r1, #21
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	d0fa      	beq.n	801fc22 <__ieee754_sqrt+0x5e>
 801fc2c:	e7f7      	b.n	801fc1e <__ieee754_sqrt+0x5a>
 801fc2e:	462a      	mov	r2, r5
 801fc30:	e7fa      	b.n	801fc28 <__ieee754_sqrt+0x64>
 801fc32:	005b      	lsls	r3, r3, #1
 801fc34:	3001      	adds	r0, #1
 801fc36:	02dc      	lsls	r4, r3, #11
 801fc38:	d5fb      	bpl.n	801fc32 <__ieee754_sqrt+0x6e>
 801fc3a:	1e44      	subs	r4, r0, #1
 801fc3c:	1b12      	subs	r2, r2, r4
 801fc3e:	f1c0 0420 	rsb	r4, r0, #32
 801fc42:	fa21 f404 	lsr.w	r4, r1, r4
 801fc46:	4323      	orrs	r3, r4
 801fc48:	4081      	lsls	r1, r0
 801fc4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fc4e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801fc52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fc56:	07d2      	lsls	r2, r2, #31
 801fc58:	bf5c      	itt	pl
 801fc5a:	005b      	lslpl	r3, r3, #1
 801fc5c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801fc60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fc64:	bf58      	it	pl
 801fc66:	0049      	lslpl	r1, r1, #1
 801fc68:	2600      	movs	r6, #0
 801fc6a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801fc6e:	106d      	asrs	r5, r5, #1
 801fc70:	0049      	lsls	r1, r1, #1
 801fc72:	2016      	movs	r0, #22
 801fc74:	4632      	mov	r2, r6
 801fc76:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801fc7a:	1917      	adds	r7, r2, r4
 801fc7c:	429f      	cmp	r7, r3
 801fc7e:	bfde      	ittt	le
 801fc80:	193a      	addle	r2, r7, r4
 801fc82:	1bdb      	suble	r3, r3, r7
 801fc84:	1936      	addle	r6, r6, r4
 801fc86:	0fcf      	lsrs	r7, r1, #31
 801fc88:	3801      	subs	r0, #1
 801fc8a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801fc8e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fc92:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801fc96:	d1f0      	bne.n	801fc7a <__ieee754_sqrt+0xb6>
 801fc98:	4604      	mov	r4, r0
 801fc9a:	2720      	movs	r7, #32
 801fc9c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801fca0:	429a      	cmp	r2, r3
 801fca2:	eb00 0e0c 	add.w	lr, r0, ip
 801fca6:	db02      	blt.n	801fcae <__ieee754_sqrt+0xea>
 801fca8:	d113      	bne.n	801fcd2 <__ieee754_sqrt+0x10e>
 801fcaa:	458e      	cmp	lr, r1
 801fcac:	d811      	bhi.n	801fcd2 <__ieee754_sqrt+0x10e>
 801fcae:	f1be 0f00 	cmp.w	lr, #0
 801fcb2:	eb0e 000c 	add.w	r0, lr, ip
 801fcb6:	da42      	bge.n	801fd3e <__ieee754_sqrt+0x17a>
 801fcb8:	2800      	cmp	r0, #0
 801fcba:	db40      	blt.n	801fd3e <__ieee754_sqrt+0x17a>
 801fcbc:	f102 0801 	add.w	r8, r2, #1
 801fcc0:	1a9b      	subs	r3, r3, r2
 801fcc2:	458e      	cmp	lr, r1
 801fcc4:	bf88      	it	hi
 801fcc6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801fcca:	eba1 010e 	sub.w	r1, r1, lr
 801fcce:	4464      	add	r4, ip
 801fcd0:	4642      	mov	r2, r8
 801fcd2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801fcd6:	3f01      	subs	r7, #1
 801fcd8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801fcdc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fce0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801fce4:	d1dc      	bne.n	801fca0 <__ieee754_sqrt+0xdc>
 801fce6:	4319      	orrs	r1, r3
 801fce8:	d01b      	beq.n	801fd22 <__ieee754_sqrt+0x15e>
 801fcea:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801fd70 <__ieee754_sqrt+0x1ac>
 801fcee:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801fd74 <__ieee754_sqrt+0x1b0>
 801fcf2:	e9da 0100 	ldrd	r0, r1, [sl]
 801fcf6:	e9db 2300 	ldrd	r2, r3, [fp]
 801fcfa:	f7e0 fa9d 	bl	8000238 <__aeabi_dsub>
 801fcfe:	e9da 8900 	ldrd	r8, r9, [sl]
 801fd02:	4602      	mov	r2, r0
 801fd04:	460b      	mov	r3, r1
 801fd06:	4640      	mov	r0, r8
 801fd08:	4649      	mov	r1, r9
 801fd0a:	f7e0 fec9 	bl	8000aa0 <__aeabi_dcmple>
 801fd0e:	b140      	cbz	r0, 801fd22 <__ieee754_sqrt+0x15e>
 801fd10:	f1b4 3fff 	cmp.w	r4, #4294967295
 801fd14:	e9da 0100 	ldrd	r0, r1, [sl]
 801fd18:	e9db 2300 	ldrd	r2, r3, [fp]
 801fd1c:	d111      	bne.n	801fd42 <__ieee754_sqrt+0x17e>
 801fd1e:	3601      	adds	r6, #1
 801fd20:	463c      	mov	r4, r7
 801fd22:	1072      	asrs	r2, r6, #1
 801fd24:	0863      	lsrs	r3, r4, #1
 801fd26:	07f1      	lsls	r1, r6, #31
 801fd28:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801fd2c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801fd30:	bf48      	it	mi
 801fd32:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801fd36:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801fd3a:	4618      	mov	r0, r3
 801fd3c:	e756      	b.n	801fbec <__ieee754_sqrt+0x28>
 801fd3e:	4690      	mov	r8, r2
 801fd40:	e7be      	b.n	801fcc0 <__ieee754_sqrt+0xfc>
 801fd42:	f7e0 fa7b 	bl	800023c <__adddf3>
 801fd46:	e9da 8900 	ldrd	r8, r9, [sl]
 801fd4a:	4602      	mov	r2, r0
 801fd4c:	460b      	mov	r3, r1
 801fd4e:	4640      	mov	r0, r8
 801fd50:	4649      	mov	r1, r9
 801fd52:	f7e0 fe9b 	bl	8000a8c <__aeabi_dcmplt>
 801fd56:	b120      	cbz	r0, 801fd62 <__ieee754_sqrt+0x19e>
 801fd58:	1ca0      	adds	r0, r4, #2
 801fd5a:	bf08      	it	eq
 801fd5c:	3601      	addeq	r6, #1
 801fd5e:	3402      	adds	r4, #2
 801fd60:	e7df      	b.n	801fd22 <__ieee754_sqrt+0x15e>
 801fd62:	1c63      	adds	r3, r4, #1
 801fd64:	f023 0401 	bic.w	r4, r3, #1
 801fd68:	e7db      	b.n	801fd22 <__ieee754_sqrt+0x15e>
 801fd6a:	bf00      	nop
 801fd6c:	7ff00000 	.word	0x7ff00000
 801fd70:	20000320 	.word	0x20000320
 801fd74:	20000318 	.word	0x20000318

0801fd78 <_init>:
 801fd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd7a:	bf00      	nop
 801fd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd7e:	bc08      	pop	{r3}
 801fd80:	469e      	mov	lr, r3
 801fd82:	4770      	bx	lr

0801fd84 <_fini>:
 801fd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd86:	bf00      	nop
 801fd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd8a:	bc08      	pop	{r3}
 801fd8c:	469e      	mov	lr, r3
 801fd8e:	4770      	bx	lr
