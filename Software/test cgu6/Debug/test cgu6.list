
test cgu6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010704  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08010840  08010840  00020840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010b4c  08010b4c  00020b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010b54  08010b54  00020b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010b58  08010b58  00020b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000118  20000008  08010b5c  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  20000120  08010c74  00030120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000160  08010cb1  00030160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fa8  20000174  08010cc2  00030174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000211c  08010cc2  0003211c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08010cc2  000301e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00030a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0003c9c3  00000000  00000000  00030ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00008a28  00000000  00000000  0006d49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003400  00000000  00000000  00075ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000279d  00000000  00000000  000792c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00034139  00000000  00000000  0007ba65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000449ab  00000000  00000000  000afb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0010ea08  00000000  00000000  000f4549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000d7fc  00000000  00000000  00202f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000065  00000000  00000000  00210750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000174 	.word	0x20000174
 8000158:	00000000 	.word	0x00000000
 800015c:	08010828 	.word	0x08010828

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000178 	.word	0x20000178
 8000178:	08010828 	.word	0x08010828

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b970 	b.w	8000484 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	460f      	mov	r7, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14a      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d965      	bls.n	800029e <__udivmoddi4+0xe2>
 80001d2:	fab2 f382 	clz	r3, r2
 80001d6:	b143      	cbz	r3, 80001ea <__udivmoddi4+0x2e>
 80001d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001dc:	f1c3 0220 	rsb	r2, r3, #32
 80001e0:	409f      	lsls	r7, r3
 80001e2:	fa20 f202 	lsr.w	r2, r0, r2
 80001e6:	4317      	orrs	r7, r2
 80001e8:	409c      	lsls	r4, r3
 80001ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001ee:	fa1f f58c 	uxth.w	r5, ip
 80001f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001f6:	0c22      	lsrs	r2, r4, #16
 80001f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000200:	fb01 f005 	mul.w	r0, r1, r5
 8000204:	4290      	cmp	r0, r2
 8000206:	d90a      	bls.n	800021e <__udivmoddi4+0x62>
 8000208:	eb1c 0202 	adds.w	r2, ip, r2
 800020c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000210:	f080 811c 	bcs.w	800044c <__udivmoddi4+0x290>
 8000214:	4290      	cmp	r0, r2
 8000216:	f240 8119 	bls.w	800044c <__udivmoddi4+0x290>
 800021a:	3902      	subs	r1, #2
 800021c:	4462      	add	r2, ip
 800021e:	1a12      	subs	r2, r2, r0
 8000220:	b2a4      	uxth	r4, r4
 8000222:	fbb2 f0fe 	udiv	r0, r2, lr
 8000226:	fb0e 2210 	mls	r2, lr, r0, r2
 800022a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022e:	fb00 f505 	mul.w	r5, r0, r5
 8000232:	42a5      	cmp	r5, r4
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x90>
 8000236:	eb1c 0404 	adds.w	r4, ip, r4
 800023a:	f100 32ff 	add.w	r2, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x294>
 8000242:	42a5      	cmp	r5, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x294>
 8000248:	4464      	add	r4, ip
 800024a:	3802      	subs	r0, #2
 800024c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000250:	1b64      	subs	r4, r4, r5
 8000252:	2100      	movs	r1, #0
 8000254:	b11e      	cbz	r6, 800025e <__udivmoddi4+0xa2>
 8000256:	40dc      	lsrs	r4, r3
 8000258:	2300      	movs	r3, #0
 800025a:	e9c6 4300 	strd	r4, r3, [r6]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d908      	bls.n	8000278 <__udivmoddi4+0xbc>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80ed 	beq.w	8000446 <__udivmoddi4+0x28a>
 800026c:	2100      	movs	r1, #0
 800026e:	e9c6 0500 	strd	r0, r5, [r6]
 8000272:	4608      	mov	r0, r1
 8000274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000278:	fab3 f183 	clz	r1, r3
 800027c:	2900      	cmp	r1, #0
 800027e:	d149      	bne.n	8000314 <__udivmoddi4+0x158>
 8000280:	42ab      	cmp	r3, r5
 8000282:	d302      	bcc.n	800028a <__udivmoddi4+0xce>
 8000284:	4282      	cmp	r2, r0
 8000286:	f200 80f8 	bhi.w	800047a <__udivmoddi4+0x2be>
 800028a:	1a84      	subs	r4, r0, r2
 800028c:	eb65 0203 	sbc.w	r2, r5, r3
 8000290:	2001      	movs	r0, #1
 8000292:	4617      	mov	r7, r2
 8000294:	2e00      	cmp	r6, #0
 8000296:	d0e2      	beq.n	800025e <__udivmoddi4+0xa2>
 8000298:	e9c6 4700 	strd	r4, r7, [r6]
 800029c:	e7df      	b.n	800025e <__udivmoddi4+0xa2>
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xe6>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f382 	clz	r3, r2
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	f040 8090 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ac:	1a8a      	subs	r2, r1, r2
 80002ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b2:	fa1f fe8c 	uxth.w	lr, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002bc:	fb07 2015 	mls	r0, r7, r5, r2
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c6:	fb0e f005 	mul.w	r0, lr, r5
 80002ca:	4290      	cmp	r0, r2
 80002cc:	d908      	bls.n	80002e0 <__udivmoddi4+0x124>
 80002ce:	eb1c 0202 	adds.w	r2, ip, r2
 80002d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0x122>
 80002d8:	4290      	cmp	r0, r2
 80002da:	f200 80cb 	bhi.w	8000474 <__udivmoddi4+0x2b8>
 80002de:	4645      	mov	r5, r8
 80002e0:	1a12      	subs	r2, r2, r0
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e8:	fb07 2210 	mls	r2, r7, r0, r2
 80002ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f0:	fb0e fe00 	mul.w	lr, lr, r0
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x14e>
 80002f8:	eb1c 0404 	adds.w	r4, ip, r4
 80002fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x14c>
 8000302:	45a6      	cmp	lr, r4
 8000304:	f200 80bb 	bhi.w	800047e <__udivmoddi4+0x2c2>
 8000308:	4610      	mov	r0, r2
 800030a:	eba4 040e 	sub.w	r4, r4, lr
 800030e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000312:	e79f      	b.n	8000254 <__udivmoddi4+0x98>
 8000314:	f1c1 0720 	rsb	r7, r1, #32
 8000318:	408b      	lsls	r3, r1
 800031a:	fa22 fc07 	lsr.w	ip, r2, r7
 800031e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000322:	fa05 f401 	lsl.w	r4, r5, r1
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	40fd      	lsrs	r5, r7
 800032c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000330:	4323      	orrs	r3, r4
 8000332:	fbb5 f8f9 	udiv	r8, r5, r9
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	fb09 5518 	mls	r5, r9, r8, r5
 800033e:	0c1c      	lsrs	r4, r3, #16
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb08 f50e 	mul.w	r5, r8, lr
 8000348:	42a5      	cmp	r5, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	fa00 f001 	lsl.w	r0, r0, r1
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f108 3aff 	add.w	sl, r8, #4294967295
 800035c:	f080 8088 	bcs.w	8000470 <__udivmoddi4+0x2b4>
 8000360:	42a5      	cmp	r5, r4
 8000362:	f240 8085 	bls.w	8000470 <__udivmoddi4+0x2b4>
 8000366:	f1a8 0802 	sub.w	r8, r8, #2
 800036a:	4464      	add	r4, ip
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	b29d      	uxth	r5, r3
 8000370:	fbb4 f3f9 	udiv	r3, r4, r9
 8000374:	fb09 4413 	mls	r4, r9, r3, r4
 8000378:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800037c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x1da>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f103 35ff 	add.w	r5, r3, #4294967295
 800038c:	d26c      	bcs.n	8000468 <__udivmoddi4+0x2ac>
 800038e:	45a6      	cmp	lr, r4
 8000390:	d96a      	bls.n	8000468 <__udivmoddi4+0x2ac>
 8000392:	3b02      	subs	r3, #2
 8000394:	4464      	add	r4, ip
 8000396:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800039a:	fba3 9502 	umull	r9, r5, r3, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	42ac      	cmp	r4, r5
 80003a4:	46c8      	mov	r8, r9
 80003a6:	46ae      	mov	lr, r5
 80003a8:	d356      	bcc.n	8000458 <__udivmoddi4+0x29c>
 80003aa:	d053      	beq.n	8000454 <__udivmoddi4+0x298>
 80003ac:	b156      	cbz	r6, 80003c4 <__udivmoddi4+0x208>
 80003ae:	ebb0 0208 	subs.w	r2, r0, r8
 80003b2:	eb64 040e 	sbc.w	r4, r4, lr
 80003b6:	fa04 f707 	lsl.w	r7, r4, r7
 80003ba:	40ca      	lsrs	r2, r1
 80003bc:	40cc      	lsrs	r4, r1
 80003be:	4317      	orrs	r7, r2
 80003c0:	e9c6 7400 	strd	r7, r4, [r6]
 80003c4:	4618      	mov	r0, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	f1c3 0120 	rsb	r1, r3, #32
 80003d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d4:	fa20 f201 	lsr.w	r2, r0, r1
 80003d8:	fa25 f101 	lsr.w	r1, r5, r1
 80003dc:	409d      	lsls	r5, r3
 80003de:	432a      	orrs	r2, r5
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ec:	fb07 1510 	mls	r5, r7, r0, r1
 80003f0:	0c11      	lsrs	r1, r2, #16
 80003f2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003f6:	fb00 f50e 	mul.w	r5, r0, lr
 80003fa:	428d      	cmp	r5, r1
 80003fc:	fa04 f403 	lsl.w	r4, r4, r3
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x258>
 8000402:	eb1c 0101 	adds.w	r1, ip, r1
 8000406:	f100 38ff 	add.w	r8, r0, #4294967295
 800040a:	d22f      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800040c:	428d      	cmp	r5, r1
 800040e:	d92d      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000410:	3802      	subs	r0, #2
 8000412:	4461      	add	r1, ip
 8000414:	1b49      	subs	r1, r1, r5
 8000416:	b292      	uxth	r2, r2
 8000418:	fbb1 f5f7 	udiv	r5, r1, r7
 800041c:	fb07 1115 	mls	r1, r7, r5, r1
 8000420:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000424:	fb05 f10e 	mul.w	r1, r5, lr
 8000428:	4291      	cmp	r1, r2
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x282>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f105 38ff 	add.w	r8, r5, #4294967295
 8000434:	d216      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 8000436:	4291      	cmp	r1, r2
 8000438:	d914      	bls.n	8000464 <__udivmoddi4+0x2a8>
 800043a:	3d02      	subs	r5, #2
 800043c:	4462      	add	r2, ip
 800043e:	1a52      	subs	r2, r2, r1
 8000440:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000444:	e738      	b.n	80002b8 <__udivmoddi4+0xfc>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e708      	b.n	800025e <__udivmoddi4+0xa2>
 800044c:	4639      	mov	r1, r7
 800044e:	e6e6      	b.n	800021e <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x90>
 8000454:	4548      	cmp	r0, r9
 8000456:	d2a9      	bcs.n	80003ac <__udivmoddi4+0x1f0>
 8000458:	ebb9 0802 	subs.w	r8, r9, r2
 800045c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000460:	3b01      	subs	r3, #1
 8000462:	e7a3      	b.n	80003ac <__udivmoddi4+0x1f0>
 8000464:	4645      	mov	r5, r8
 8000466:	e7ea      	b.n	800043e <__udivmoddi4+0x282>
 8000468:	462b      	mov	r3, r5
 800046a:	e794      	b.n	8000396 <__udivmoddi4+0x1da>
 800046c:	4640      	mov	r0, r8
 800046e:	e7d1      	b.n	8000414 <__udivmoddi4+0x258>
 8000470:	46d0      	mov	r8, sl
 8000472:	e77b      	b.n	800036c <__udivmoddi4+0x1b0>
 8000474:	3d02      	subs	r5, #2
 8000476:	4462      	add	r2, ip
 8000478:	e732      	b.n	80002e0 <__udivmoddi4+0x124>
 800047a:	4608      	mov	r0, r1
 800047c:	e70a      	b.n	8000294 <__udivmoddi4+0xd8>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	e742      	b.n	800030a <__udivmoddi4+0x14e>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4313      	orrs	r3, r2
 800049e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4013      	ands	r3, r2
 80004aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ac:	68fb      	ldr	r3, [r7, #12]
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
	...

080004bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004c2:	463b      	mov	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
 80004d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d2:	4b37      	ldr	r3, [pc, #220]	; (80005b0 <MX_ADC1_Init+0xf4>)
 80004d4:	4a37      	ldr	r2, [pc, #220]	; (80005b4 <MX_ADC1_Init+0xf8>)
 80004d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004d8:	4b35      	ldr	r3, [pc, #212]	; (80005b0 <MX_ADC1_Init+0xf4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004de:	4b34      	ldr	r3, [pc, #208]	; (80005b0 <MX_ADC1_Init+0xf4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e4:	4b32      	ldr	r3, [pc, #200]	; (80005b0 <MX_ADC1_Init+0xf4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004ea:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <MX_ADC1_Init+0xf4>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004f0:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <MX_ADC1_Init+0xf4>)
 80004f2:	2208      	movs	r2, #8
 80004f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004f6:	4b2e      	ldr	r3, [pc, #184]	; (80005b0 <MX_ADC1_Init+0xf4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004fc:	4b2c      	ldr	r3, [pc, #176]	; (80005b0 <MX_ADC1_Init+0xf4>)
 80004fe:	2201      	movs	r2, #1
 8000500:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000502:	4b2b      	ldr	r3, [pc, #172]	; (80005b0 <MX_ADC1_Init+0xf4>)
 8000504:	2203      	movs	r2, #3
 8000506:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000508:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <MX_ADC1_Init+0xf4>)
 800050a:	2200      	movs	r2, #0
 800050c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000510:	4b27      	ldr	r3, [pc, #156]	; (80005b0 <MX_ADC1_Init+0xf4>)
 8000512:	2200      	movs	r2, #0
 8000514:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <MX_ADC1_Init+0xf4>)
 8000518:	2200      	movs	r2, #0
 800051a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051c:	4b24      	ldr	r3, [pc, #144]	; (80005b0 <MX_ADC1_Init+0xf4>)
 800051e:	2200      	movs	r2, #0
 8000520:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000524:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <MX_ADC1_Init+0xf4>)
 8000526:	2200      	movs	r2, #0
 8000528:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800052a:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <MX_ADC1_Init+0xf4>)
 800052c:	2200      	movs	r2, #0
 800052e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000532:	481f      	ldr	r0, [pc, #124]	; (80005b0 <MX_ADC1_Init+0xf4>)
 8000534:	f002 f924 	bl	8002780 <HAL_ADC_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800053e:	f001 fb6f 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <MX_ADC1_Init+0xfc>)
 8000544:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000546:	2306      	movs	r3, #6
 8000548:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800054a:	2306      	movs	r3, #6
 800054c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800054e:	237f      	movs	r3, #127	; 0x7f
 8000550:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000552:	2304      	movs	r3, #4
 8000554:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	4814      	ldr	r0, [pc, #80]	; (80005b0 <MX_ADC1_Init+0xf4>)
 8000560:	f002 fa5a 	bl	8002a18 <HAL_ADC_ConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800056a:	f001 fb59 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <MX_ADC1_Init+0x100>)
 8000570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000572:	230c      	movs	r3, #12
 8000574:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000576:	463b      	mov	r3, r7
 8000578:	4619      	mov	r1, r3
 800057a:	480d      	ldr	r0, [pc, #52]	; (80005b0 <MX_ADC1_Init+0xf4>)
 800057c:	f002 fa4c 	bl	8002a18 <HAL_ADC_ConfigChannel>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000586:	f001 fb4b 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_ADC1_Init+0x104>)
 800058c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800058e:	2312      	movs	r3, #18
 8000590:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000592:	463b      	mov	r3, r7
 8000594:	4619      	mov	r1, r3
 8000596:	4806      	ldr	r0, [pc, #24]	; (80005b0 <MX_ADC1_Init+0xf4>)
 8000598:	f002 fa3e 	bl	8002a18 <HAL_ADC_ConfigChannel>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80005a2:	f001 fb3d 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005a6:	bf00      	nop
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000190 	.word	0x20000190
 80005b4:	50040000 	.word	0x50040000
 80005b8:	80000001 	.word	0x80000001
 80005bc:	c7520000 	.word	0xc7520000
 80005c0:	25b00200 	.word	0x25b00200

080005c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a22      	ldr	r2, [pc, #136]	; (800066c <HAL_ADC_MspInit+0xa8>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d13e      	bne.n	8000664 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005e6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005ea:	f7ff ff4d 	bl	8000488 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff ff4a 	bl	8000488 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005f4:	2310      	movs	r3, #16
 80005f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f8:	2303      	movs	r3, #3
 80005fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4619      	mov	r1, r3
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f003 f921 	bl	8003850 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <HAL_ADC_MspInit+0xac>)
 8000610:	4a18      	ldr	r2, [pc, #96]	; (8000674 <HAL_ADC_MspInit+0xb0>)
 8000612:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <HAL_ADC_MspInit+0xac>)
 8000616:	2205      	movs	r2, #5
 8000618:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <HAL_ADC_MspInit+0xac>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <HAL_ADC_MspInit+0xac>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_ADC_MspInit+0xac>)
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <HAL_ADC_MspInit+0xac>)
 800062e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000632:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <HAL_ADC_MspInit+0xac>)
 8000636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800063a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <HAL_ADC_MspInit+0xac>)
 800063e:	2220      	movs	r2, #32
 8000640:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <HAL_ADC_MspInit+0xac>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000648:	4809      	ldr	r0, [pc, #36]	; (8000670 <HAL_ADC_MspInit+0xac>)
 800064a:	f002 ff45 	bl	80034d8 <HAL_DMA_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8000654:	f001 fae4 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a05      	ldr	r2, [pc, #20]	; (8000670 <HAL_ADC_MspInit+0xac>)
 800065c:	64da      	str	r2, [r3, #76]	; 0x4c
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <HAL_ADC_MspInit+0xac>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	50040000 	.word	0x50040000
 8000670:	200001f4 	.word	0x200001f4
 8000674:	40020008 	.word	0x40020008

08000678 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000678:	b5b0      	push	{r4, r5, r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <APPD_EnableCPU2+0x34>)
 8000680:	1d3c      	adds	r4, r7, #4
 8000682:	461d      	mov	r5, r3
 8000684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000688:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068c:	c403      	stmia	r4!, {r0, r1}
 800068e:	8022      	strh	r2, [r4, #0]
 8000690:	3402      	adds	r4, #2
 8000692:	0c13      	lsrs	r3, r2, #16
 8000694:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000696:	f00e f9a5 	bl	800e9e4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f00d fc36 	bl	800df0e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80006a2:	bf00      	nop
}
 80006a4:	3720      	adds	r7, #32
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bdb0      	pop	{r4, r5, r7, pc}
 80006aa:	bf00      	nop
 80006ac:	08010840 	.word	0x08010840

080006b0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <LL_C2_PWR_SetPowerMode+0x28>)
 80006ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006be:	f023 0207 	bic.w	r2, r3, #7
 80006c2:	4905      	ldr	r1, [pc, #20]	; (80006d8 <LL_C2_PWR_SetPowerMode+0x28>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	58000400 	.word	0x58000400

080006dc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <LL_EXTI_EnableIT_32_63+0x24>)
 80006e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80006ea:	4905      	ldr	r1, [pc, #20]	; (8000700 <LL_EXTI_EnableIT_32_63+0x24>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	58000800 	.word	0x58000800

08000704 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800070c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000710:	4a0a      	ldr	r2, [pc, #40]	; (800073c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000712:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800071a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800071e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800072a:	4313      	orrs	r3, r2
 800072c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	cafecafe 	.word	0xcafecafe

08000740 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4313      	orrs	r3, r2
 800075a:	608b      	str	r3, [r1, #8]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <LL_DBGMCU_GetDeviceID+0x18>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e0042000 	.word	0xe0042000

08000784 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <LL_DBGMCU_GetRevisionID+0x18>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	0c1b      	lsrs	r3, r3, #16
 800078e:	b29b      	uxth	r3, r3
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e0042000 	.word	0xe0042000

080007a0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	22ca      	movs	r2, #202	; 0xca
 80007c6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2253      	movs	r2, #83	; 0x53
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	f023 0207 	bic.w	r2, r3, #7
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	431a      	orrs	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	609a      	str	r2, [r3, #8]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000804:	4b04      	ldr	r3, [pc, #16]	; (8000818 <MX_APPE_Config+0x18>)
 8000806:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800080a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800080c:	f000 f824 	bl	8000858 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000810:	f000 f829 	bl	8000866 <Config_HSE>

  return;
 8000814:	bf00      	nop
}
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58004000 	.word	0x58004000

0800081c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000820:	f000 f835 	bl	800088e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000824:	f000 f84e 	bl	80008c4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000828:	4903      	ldr	r1, [pc, #12]	; (8000838 <MX_APPE_Init+0x1c>)
 800082a:	2000      	movs	r0, #0
 800082c:	f000 fd40 	bl	80012b0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000830:	f000 f856 	bl	80008e0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000834:	bf00      	nop
}
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200003d8 	.word	0x200003d8

0800083c <Init_Smps>:

void Init_Smps(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000840:	bf00      	nop
}
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <Init_Exti>:

void Init_Exti(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800084e:	2050      	movs	r0, #80	; 0x50
 8000850:	f7ff ff44 	bl	80006dc <LL_EXTI_EnableIT_32_63>

  return;
 8000854:	bf00      	nop
}
 8000856:	bd80      	pop	{r7, pc}

08000858 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800085c:	bf00      	nop
}
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800086c:	2000      	movs	r0, #0
 800086e:	f00e f945 	bl	800eafc <OTP_Read>
 8000872:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d005      	beq.n	8000886 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	799b      	ldrb	r3, [r3, #6]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff40 	bl	8000704 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000884:	bf00      	nop
 8000886:	bf00      	nop
}
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <System_Init>:

static void System_Init(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  Init_Smps();
 8000892:	f7ff ffd3 	bl	800083c <Init_Smps>

  Init_Exti();
 8000896:	f7ff ffd8 	bl	800084a <Init_Exti>

  Init_Rtc();
 800089a:	f000 f803 	bl	80008a4 <Init_Rtc>

  return;
 800089e:	bf00      	nop
}
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <Init_Rtc+0x1c>)
 80008aa:	f7ff ff86 	bl	80007ba <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80008ae:	2100      	movs	r1, #0
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <Init_Rtc+0x1c>)
 80008b2:	f7ff ff92 	bl	80007da <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80008b6:	4802      	ldr	r0, [pc, #8]	; (80008c0 <Init_Rtc+0x1c>)
 80008b8:	f7ff ff72 	bl	80007a0 <LL_RTC_EnableWriteProtection>

  return;
 80008bc:	bf00      	nop
}
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40002800 	.word	0x40002800

080008c4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80008c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80008cc:	f7ff ff38 	bl	8000740 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80008d0:	f00f fcf0 	bl	80102b4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80008d4:	2004      	movs	r0, #4
 80008d6:	f7ff feeb 	bl	80006b0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80008da:	bf00      	nop
}
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80008e6:	f00d fec7 	bl	800e678 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80008ea:	4a11      	ldr	r2, [pc, #68]	; (8000930 <appe_Tl_Init+0x50>)
 80008ec:	2100      	movs	r1, #0
 80008ee:	2004      	movs	r0, #4
 80008f0:	f00f fe1e 	bl	8010530 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <appe_Tl_Init+0x54>)
 80008f6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <appe_Tl_Init+0x58>)
 80008fa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	480e      	ldr	r0, [pc, #56]	; (800093c <appe_Tl_Init+0x5c>)
 8000902:	f00d fd7b 	bl	800e3fc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <appe_Tl_Init+0x60>)
 8000908:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <appe_Tl_Init+0x64>)
 800090c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <appe_Tl_Init+0x68>)
 8000910:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000912:	f240 533c 	movw	r3, #1340	; 0x53c
 8000916:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	4618      	mov	r0, r3
 800091e:	f00d ffed 	bl	800e8fc <TL_MM_Init>

  TL_Enable();
 8000922:	f00d fea3 	bl	800e66c <TL_Enable>

  return;
 8000926:	bf00      	nop
}
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	0800e435 	.word	0x0800e435
 8000934:	20030734 	.word	0x20030734
 8000938:	0800094d 	.word	0x0800094d
 800093c:	08000965 	.word	0x08000965
 8000940:	2003094c 	.word	0x2003094c
 8000944:	20030840 	.word	0x20030840
 8000948:	200301f8 	.word	0x200301f8

0800094c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000956:	bf00      	nop
}
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	330b      	adds	r3, #11
 8000972:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	b29b      	uxth	r3, r3
 800097a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800097e:	2b07      	cmp	r3, #7
 8000980:	d81f      	bhi.n	80009c2 <APPE_SysUserEvtRx+0x5e>
 8000982:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <APPE_SysUserEvtRx+0x24>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	080009a9 	.word	0x080009a9
 800098c:	080009bb 	.word	0x080009bb
 8000990:	080009c3 	.word	0x080009c3
 8000994:	080009c3 	.word	0x080009c3
 8000998:	080009c3 	.word	0x080009c3
 800099c:	080009c3 	.word	0x080009c3
 80009a0:	080009c3 	.word	0x080009c3
 80009a4:	080009c3 	.word	0x080009c3
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4618      	mov	r0, r3
 80009ae:	f00d fadb 	bl	800df68 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f000 f81b 	bl	80009ee <APPE_SysEvtReadyProcessing>
    break;
 80009b8:	e004      	b.n	80009c4 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 f806 	bl	80009cc <APPE_SysEvtError>
    break;
 80009c0:	e000      	b.n	80009c4 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80009c2:	bf00      	nop
  }

  return;
 80009c4:	bf00      	nop
}
 80009c6:	3720      	adds	r7, #32
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	330b      	adds	r3, #11
 80009da:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3302      	adds	r3, #2
 80009e0:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80009e2:	bf00      	nop
}
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b08a      	sub	sp, #40	; 0x28
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	330b      	adds	r3, #11
 8000a12:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	3302      	adds	r3, #2
 8000a18:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d11d      	bne.n	8000a5e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000a22:	f7ff fe29 	bl	8000678 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000a26:	230f      	movs	r3, #15
 8000a28:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000a2a:	237f      	movs	r3, #127	; 0x7f
 8000a2c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000a2e:	f7ff fea9 	bl	8000784 <LL_DBGMCU_GetRevisionID>
 8000a32:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000a3a:	f7ff fe95 	bl	8000768 <LL_DBGMCU_GetDeviceID>
 8000a3e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000a40:	6a3b      	ldr	r3, [r7, #32]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f00d fa76 	bl	800df3c <SHCI_C2_Config>

    APP_BLE_Init();
 8000a50:	f00e f95e 	bl	800ed10 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000a54:	2100      	movs	r1, #0
 8000a56:	2001      	movs	r0, #1
 8000a58:	f00f fc3e 	bl	80102d8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000a5c:	e007      	b.n	8000a6e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d103      	bne.n	8000a6e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
  return;
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
}
 8000a70:	3728      	adds	r7, #40	; 0x28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7e:	f00f fc5b 	bl	8010338 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000a8a:	bf00      	nop
}
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa2:	f00f fc49 	bl	8010338 <UTIL_SEQ_Run>
  return;
 8000aa6:	bf00      	nop
}
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2004      	movs	r0, #4
 8000aba:	f00f fd5b 	bl	8010574 <UTIL_SEQ_SetTask>
  return;
 8000abe:	bf00      	nop
}
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f00f fdbc 	bl	801064c <UTIL_SEQ_SetEvt>
  return;
 8000ad4:	bf00      	nop
}
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f00f fdd1 	bl	801068c <UTIL_SEQ_WaitEvt>
  return;
 8000aea:	bf00      	nop
}
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <LL_AHB1_GRP1_EnableClock>:
{
 8000af2:	b480      	push	{r7}
 8000af4:	b085      	sub	sp, #20
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000afe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4013      	ands	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b28:	2004      	movs	r0, #4
 8000b2a:	f7ff ffe2 	bl	8000af2 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff ffdf 	bl	8000af2 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	200b      	movs	r0, #11
 8000b3a:	f002 fc6e 	bl	800341a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b3e:	200b      	movs	r0, #11
 8000b40:	f002 fc85 	bl	800344e <HAL_NVIC_EnableIRQ>

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LL_AHB2_GRP1_EnableClock>:
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
}
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b90:	2004      	movs	r0, #4
 8000b92:	f7ff ffd9 	bl	8000b48 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2002      	movs	r0, #2
 8000b98:	f7ff ffd6 	bl	8000b48 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f7ff ffd3 	bl	8000b48 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ALIMGPS_GPIO_Port, ALIMGPS_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000baa:	f002 ffc1 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD0_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	4817      	ldr	r0, [pc, #92]	; (8000c10 <MX_GPIO_Init+0x94>)
 8000bb4:	f002 ffbc 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000bb8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4811      	ldr	r0, [pc, #68]	; (8000c14 <MX_GPIO_Init+0x98>)
 8000bce:	f002 fe3f 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ALIMGPS_Pin;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ALIMGPS_GPIO_Port, &GPIO_InitStruct);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bea:	f002 fe31 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD0_Pin;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4803      	ldr	r0, [pc, #12]	; (8000c10 <MX_GPIO_Init+0x94>)
 8000c04:	f002 fe24 	bl	8003850 <HAL_GPIO_Init>

}
 8000c08:	bf00      	nop
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	48000400 	.word	0x48000400
 8000c14:	48000800 	.word	0x48000800

08000c18 <LL_EXTI_EnableIT_0_31>:
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <LL_EXTI_EnableIT_0_31+0x24>)
 8000c22:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000c26:	4905      	ldr	r1, [pc, #20]	; (8000c3c <LL_EXTI_EnableIT_0_31+0x24>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	58000800 	.word	0x58000800

08000c40 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4904      	ldr	r1, [pc, #16]	; (8000c60 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	600b      	str	r3, [r1, #0]

}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	58000800 	.word	0x58000800

08000c64 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <ReadRtcSsrValue+0x3c>)
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <ReadRtcSsrValue+0x3c>)
 8000c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000c7a:	e005      	b.n	8000c88 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <ReadRtcSsrValue+0x3c>)
 8000c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d1f5      	bne.n	8000c7c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000c90:	683b      	ldr	r3, [r7, #0]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40002800 	.word	0x40002800

08000ca4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	460a      	mov	r2, r1
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000cb4:	79ba      	ldrb	r2, [r7, #6]
 8000cb6:	491d      	ldr	r1, [pc, #116]	; (8000d2c <LinkTimerAfter+0x88>)
 8000cb8:	4613      	mov	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	440b      	add	r3, r1
 8000cc2:	3315      	adds	r3, #21
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d009      	beq.n	8000ce2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000cce:	7bfa      	ldrb	r2, [r7, #15]
 8000cd0:	4916      	ldr	r1, [pc, #88]	; (8000d2c <LinkTimerAfter+0x88>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	440b      	add	r3, r1
 8000cdc:	3314      	adds	r3, #20
 8000cde:	79fa      	ldrb	r2, [r7, #7]
 8000ce0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	4911      	ldr	r1, [pc, #68]	; (8000d2c <LinkTimerAfter+0x88>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	440b      	add	r3, r1
 8000cf0:	3315      	adds	r3, #21
 8000cf2:	7bfa      	ldrb	r2, [r7, #15]
 8000cf4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <LinkTimerAfter+0x88>)
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	440b      	add	r3, r1
 8000d04:	3314      	adds	r3, #20
 8000d06:	79ba      	ldrb	r2, [r7, #6]
 8000d08:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000d0a:	79ba      	ldrb	r2, [r7, #6]
 8000d0c:	4907      	ldr	r1, [pc, #28]	; (8000d2c <LinkTimerAfter+0x88>)
 8000d0e:	4613      	mov	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	440b      	add	r3, r1
 8000d18:	3315      	adds	r3, #21
 8000d1a:	79fa      	ldrb	r2, [r7, #7]
 8000d1c:	701a      	strb	r2, [r3, #0]

  return;
 8000d1e:	bf00      	nop
}
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000254 	.word	0x20000254

08000d30 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	460a      	mov	r2, r1
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000d40:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <LinkTimerBefore+0xb8>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	79ba      	ldrb	r2, [r7, #6]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d032      	beq.n	8000db2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000d4c:	79ba      	ldrb	r2, [r7, #6]
 8000d4e:	4927      	ldr	r1, [pc, #156]	; (8000dec <LinkTimerBefore+0xbc>)
 8000d50:	4613      	mov	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	3314      	adds	r3, #20
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000d60:	7bfa      	ldrb	r2, [r7, #15]
 8000d62:	4922      	ldr	r1, [pc, #136]	; (8000dec <LinkTimerBefore+0xbc>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3315      	adds	r3, #21
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000d74:	79fa      	ldrb	r2, [r7, #7]
 8000d76:	491d      	ldr	r1, [pc, #116]	; (8000dec <LinkTimerBefore+0xbc>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	440b      	add	r3, r1
 8000d82:	3315      	adds	r3, #21
 8000d84:	79ba      	ldrb	r2, [r7, #6]
 8000d86:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000d88:	79fa      	ldrb	r2, [r7, #7]
 8000d8a:	4918      	ldr	r1, [pc, #96]	; (8000dec <LinkTimerBefore+0xbc>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3314      	adds	r3, #20
 8000d98:	7bfa      	ldrb	r2, [r7, #15]
 8000d9a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d9c:	79ba      	ldrb	r2, [r7, #6]
 8000d9e:	4913      	ldr	r1, [pc, #76]	; (8000dec <LinkTimerBefore+0xbc>)
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	440b      	add	r3, r1
 8000daa:	3314      	adds	r3, #20
 8000dac:	79fa      	ldrb	r2, [r7, #7]
 8000dae:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000db0:	e014      	b.n	8000ddc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000db2:	79fa      	ldrb	r2, [r7, #7]
 8000db4:	490d      	ldr	r1, [pc, #52]	; (8000dec <LinkTimerBefore+0xbc>)
 8000db6:	4613      	mov	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4413      	add	r3, r2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	440b      	add	r3, r1
 8000dc0:	3315      	adds	r3, #21
 8000dc2:	79ba      	ldrb	r2, [r7, #6]
 8000dc4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000dc6:	79ba      	ldrb	r2, [r7, #6]
 8000dc8:	4908      	ldr	r1, [pc, #32]	; (8000dec <LinkTimerBefore+0xbc>)
 8000dca:	4613      	mov	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4413      	add	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	440b      	add	r3, r1
 8000dd4:	3314      	adds	r3, #20
 8000dd6:	79fa      	ldrb	r2, [r7, #7]
 8000dd8:	701a      	strb	r2, [r3, #0]
  return;
 8000dda:	bf00      	nop
}
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200002e4 	.word	0x200002e4
 8000dec:	20000254 	.word	0x20000254

08000df0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dfa:	4b4e      	ldr	r3, [pc, #312]	; (8000f34 <linkTimer+0x144>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b06      	cmp	r3, #6
 8000e02:	d118      	bne.n	8000e36 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000e04:	4b4b      	ldr	r3, [pc, #300]	; (8000f34 <linkTimer+0x144>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b4b      	ldr	r3, [pc, #300]	; (8000f38 <linkTimer+0x148>)
 8000e0c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000e0e:	4a49      	ldr	r2, [pc, #292]	; (8000f34 <linkTimer+0x144>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000e14:	79fa      	ldrb	r2, [r7, #7]
 8000e16:	4949      	ldr	r1, [pc, #292]	; (8000f3c <linkTimer+0x14c>)
 8000e18:	4613      	mov	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4413      	add	r3, r2
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	440b      	add	r3, r1
 8000e22:	3315      	adds	r3, #21
 8000e24:	2206      	movs	r2, #6
 8000e26:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e28:	4b45      	ldr	r3, [pc, #276]	; (8000f40 <linkTimer+0x150>)
 8000e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	81fb      	strh	r3, [r7, #14]
 8000e34:	e078      	b.n	8000f28 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000e36:	f000 f909 	bl	800104c <ReturnTimeElapsed>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000e3e:	79fa      	ldrb	r2, [r7, #7]
 8000e40:	493e      	ldr	r1, [pc, #248]	; (8000f3c <linkTimer+0x14c>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	440b      	add	r3, r1
 8000e4c:	3308      	adds	r3, #8
 8000e4e:	6819      	ldr	r1, [r3, #0]
 8000e50:	89fb      	ldrh	r3, [r7, #14]
 8000e52:	79fa      	ldrb	r2, [r7, #7]
 8000e54:	4419      	add	r1, r3
 8000e56:	4839      	ldr	r0, [pc, #228]	; (8000f3c <linkTimer+0x14c>)
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	4403      	add	r3, r0
 8000e62:	3308      	adds	r3, #8
 8000e64:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000e66:	79fa      	ldrb	r2, [r7, #7]
 8000e68:	4934      	ldr	r1, [pc, #208]	; (8000f3c <linkTimer+0x14c>)
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	440b      	add	r3, r1
 8000e74:	3308      	adds	r3, #8
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000e7a:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <linkTimer+0x144>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4619      	mov	r1, r3
 8000e82:	4a2e      	ldr	r2, [pc, #184]	; (8000f3c <linkTimer+0x14c>)
 8000e84:	460b      	mov	r3, r1
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	440b      	add	r3, r1
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3308      	adds	r3, #8
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d337      	bcc.n	8000f08 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <linkTimer+0x144>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000e9e:	7b7a      	ldrb	r2, [r7, #13]
 8000ea0:	4926      	ldr	r1, [pc, #152]	; (8000f3c <linkTimer+0x14c>)
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	440b      	add	r3, r1
 8000eac:	3315      	adds	r3, #21
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000eb2:	e013      	b.n	8000edc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000eb4:	7b7a      	ldrb	r2, [r7, #13]
 8000eb6:	4921      	ldr	r1, [pc, #132]	; (8000f3c <linkTimer+0x14c>)
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	440b      	add	r3, r1
 8000ec2:	3315      	adds	r3, #21
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ec8:	7b7a      	ldrb	r2, [r7, #13]
 8000eca:	491c      	ldr	r1, [pc, #112]	; (8000f3c <linkTimer+0x14c>)
 8000ecc:	4613      	mov	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	4413      	add	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	440b      	add	r3, r1
 8000ed6:	3315      	adds	r3, #21
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000edc:	7b3b      	ldrb	r3, [r7, #12]
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d00b      	beq.n	8000efa <linkTimer+0x10a>
 8000ee2:	7b3a      	ldrb	r2, [r7, #12]
 8000ee4:	4915      	ldr	r1, [pc, #84]	; (8000f3c <linkTimer+0x14c>)
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	440b      	add	r3, r1
 8000ef0:	3308      	adds	r3, #8
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d2dc      	bcs.n	8000eb4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000efa:	7b7a      	ldrb	r2, [r7, #13]
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fecf 	bl	8000ca4 <LinkTimerAfter>
 8000f06:	e00f      	b.n	8000f28 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <linkTimer+0x144>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff0c 	bl	8000d30 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <linkTimer+0x144>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <linkTimer+0x148>)
 8000f20:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <linkTimer+0x144>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000f28:	89fb      	ldrh	r3, [r7, #14]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200002e4 	.word	0x200002e4
 8000f38:	200002e5 	.word	0x200002e5
 8000f3c:	20000254 	.word	0x20000254
 8000f40:	200002e8 	.word	0x200002e8

08000f44 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000f54:	4b39      	ldr	r3, [pc, #228]	; (800103c <UnlinkTimer+0xf8>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	79fa      	ldrb	r2, [r7, #7]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d111      	bne.n	8000f84 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000f60:	4b36      	ldr	r3, [pc, #216]	; (800103c <UnlinkTimer+0xf8>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b36      	ldr	r3, [pc, #216]	; (8001040 <UnlinkTimer+0xfc>)
 8000f68:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	4935      	ldr	r1, [pc, #212]	; (8001044 <UnlinkTimer+0x100>)
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	440b      	add	r3, r1
 8000f78:	3315      	adds	r3, #21
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	; (800103c <UnlinkTimer+0xf8>)
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	e03e      	b.n	8001002 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000f84:	79fa      	ldrb	r2, [r7, #7]
 8000f86:	492f      	ldr	r1, [pc, #188]	; (8001044 <UnlinkTimer+0x100>)
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	440b      	add	r3, r1
 8000f92:	3314      	adds	r3, #20
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000f98:	79fa      	ldrb	r2, [r7, #7]
 8000f9a:	492a      	ldr	r1, [pc, #168]	; (8001044 <UnlinkTimer+0x100>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3315      	adds	r3, #21
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000fac:	79f9      	ldrb	r1, [r7, #7]
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	4824      	ldr	r0, [pc, #144]	; (8001044 <UnlinkTimer+0x100>)
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	440b      	add	r3, r1
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	4403      	add	r3, r0
 8000fbc:	3315      	adds	r3, #21
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2d8      	uxtb	r0, r3
 8000fc2:	4920      	ldr	r1, [pc, #128]	; (8001044 <UnlinkTimer+0x100>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	440b      	add	r3, r1
 8000fce:	3315      	adds	r3, #21
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d013      	beq.n	8001002 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000fda:	79f9      	ldrb	r1, [r7, #7]
 8000fdc:	7bba      	ldrb	r2, [r7, #14]
 8000fde:	4819      	ldr	r0, [pc, #100]	; (8001044 <UnlinkTimer+0x100>)
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	440b      	add	r3, r1
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4403      	add	r3, r0
 8000fea:	3314      	adds	r3, #20
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b2d8      	uxtb	r0, r3
 8000ff0:	4914      	ldr	r1, [pc, #80]	; (8001044 <UnlinkTimer+0x100>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3314      	adds	r3, #20
 8000ffe:	4602      	mov	r2, r0
 8001000:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001002:	79fa      	ldrb	r2, [r7, #7]
 8001004:	490f      	ldr	r1, [pc, #60]	; (8001044 <UnlinkTimer+0x100>)
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	440b      	add	r3, r1
 8001010:	330c      	adds	r3, #12
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <UnlinkTimer+0xf8>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b06      	cmp	r3, #6
 800101e:	d107      	bne.n	8001030 <UnlinkTimer+0xec>
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d104      	bne.n	8001030 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <UnlinkTimer+0x104>)
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	601a      	str	r2, [r3, #0]
  }

  return;
 800102e:	bf00      	nop
 8001030:	bf00      	nop
}
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	200002e4 	.word	0x200002e4
 8001040:	200002e5 	.word	0x200002e5
 8001044:	20000254 	.word	0x20000254
 8001048:	200002e8 	.word	0x200002e8

0800104c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <ReturnTimeElapsed+0x70>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105a:	d026      	beq.n	80010aa <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800105c:	f7ff fe02 	bl	8000c64 <ReadRtcSsrValue>
 8001060:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <ReturnTimeElapsed+0x70>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	d805      	bhi.n	8001078 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <ReturnTimeElapsed+0x70>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	e00a      	b.n	800108e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <ReturnTimeElapsed+0x74>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <ReturnTimeElapsed+0x70>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	4413      	add	r3, r2
 800108c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <ReturnTimeElapsed+0x78>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	fb02 f303 	mul.w	r3, r2, r3
 800109a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <ReturnTimeElapsed+0x7c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	40d3      	lsrs	r3, r2
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	e001      	b.n	80010ae <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	b29b      	uxth	r3, r3
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200002e8 	.word	0x200002e8
 80010c0:	200002f0 	.word	0x200002f0
 80010c4:	200002ee 	.word	0x200002ee
 80010c8:	200002ed 	.word	0x200002ed

080010cc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d108      	bne.n	80010ee <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80010dc:	f7ff fdc2 	bl	8000c64 <ReadRtcSsrValue>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a21      	ldr	r2, [pc, #132]	; (8001168 <RestartWakeupCounter+0x9c>)
 80010e4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80010e6:	2003      	movs	r0, #3
 80010e8:	f002 f9d9 	bl	800349e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80010ec:	e039      	b.n	8001162 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d803      	bhi.n	80010fc <RestartWakeupCounter+0x30>
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <RestartWakeupCounter+0xa0>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d002      	beq.n	8001102 <RestartWakeupCounter+0x36>
      Value -= 1;
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	3b01      	subs	r3, #1
 8001100:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001102:	bf00      	nop
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <RestartWakeupCounter+0xa4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f8      	beq.n	8001104 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <RestartWakeupCounter+0xa4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <RestartWakeupCounter+0xa4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001122:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <RestartWakeupCounter+0xa8>)
 8001126:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800112a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800112c:	2003      	movs	r0, #3
 800112e:	f002 f9c4 	bl	80034ba <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <RestartWakeupCounter+0xac>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	0c1b      	lsrs	r3, r3, #16
 8001138:	041b      	lsls	r3, r3, #16
 800113a:	88fa      	ldrh	r2, [r7, #6]
 800113c:	490e      	ldr	r1, [pc, #56]	; (8001178 <RestartWakeupCounter+0xac>)
 800113e:	4313      	orrs	r3, r2
 8001140:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001142:	f7ff fd8f 	bl	8000c64 <ReadRtcSsrValue>
 8001146:	4603      	mov	r3, r0
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <RestartWakeupCounter+0x9c>)
 800114a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <RestartWakeupCounter+0xa4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <RestartWakeupCounter+0xa4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800115a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800115c:	f3af 8000 	nop.w
  return ;
 8001160:	bf00      	nop
}
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200002e8 	.word	0x200002e8
 800116c:	200002ed 	.word	0x200002ed
 8001170:	200003d8 	.word	0x200003d8
 8001174:	58000800 	.word	0x58000800
 8001178:	40002800 	.word	0x40002800

0800117c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001182:	4b45      	ldr	r3, [pc, #276]	; (8001298 <RescheduleTimerList+0x11c>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800118a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800118e:	d107      	bne.n	80011a0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001190:	bf00      	nop
 8001192:	4b42      	ldr	r3, [pc, #264]	; (800129c <RescheduleTimerList+0x120>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f8      	bne.n	8001192 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80011a0:	4b3e      	ldr	r3, [pc, #248]	; (800129c <RescheduleTimerList+0x120>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	4b3d      	ldr	r3, [pc, #244]	; (800129c <RescheduleTimerList+0x120>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011ae:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80011b0:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <RescheduleTimerList+0x124>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	493a      	ldr	r1, [pc, #232]	; (80012a4 <RescheduleTimerList+0x128>)
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	3308      	adds	r3, #8
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80011ca:	f7ff ff3f 	bl	800104c <ReturnTimeElapsed>
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d205      	bcs.n	80011e6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80011de:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <RescheduleTimerList+0x12c>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e04d      	b.n	8001282 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	4a30      	ldr	r2, [pc, #192]	; (80012ac <RescheduleTimerList+0x130>)
 80011ea:	8812      	ldrh	r2, [r2, #0]
 80011ec:	b292      	uxth	r2, r2
 80011ee:	4413      	add	r3, r2
 80011f0:	461a      	mov	r2, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d906      	bls.n	8001206 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80011f8:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <RescheduleTimerList+0x130>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <RescheduleTimerList+0x12c>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
 8001204:	e03d      	b.n	8001282 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	b29a      	uxth	r2, r3
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001210:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <RescheduleTimerList+0x12c>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001216:	e034      	b.n	8001282 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001218:	7bfa      	ldrb	r2, [r7, #15]
 800121a:	4922      	ldr	r1, [pc, #136]	; (80012a4 <RescheduleTimerList+0x128>)
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	3308      	adds	r3, #8
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	429a      	cmp	r2, r3
 800122e:	d20a      	bcs.n	8001246 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	491c      	ldr	r1, [pc, #112]	; (80012a4 <RescheduleTimerList+0x128>)
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	3308      	adds	r3, #8
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	e013      	b.n	800126e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	4916      	ldr	r1, [pc, #88]	; (80012a4 <RescheduleTimerList+0x128>)
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	440b      	add	r3, r1
 8001254:	3308      	adds	r3, #8
 8001256:	6819      	ldr	r1, [r3, #0]
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	1ac9      	subs	r1, r1, r3
 800125e:	4811      	ldr	r0, [pc, #68]	; (80012a4 <RescheduleTimerList+0x128>)
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4403      	add	r3, r0
 800126a:	3308      	adds	r3, #8
 800126c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <RescheduleTimerList+0x128>)
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	440b      	add	r3, r1
 800127c:	3315      	adds	r3, #21
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	2b06      	cmp	r3, #6
 8001286:	d1c7      	bne.n	8001218 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001288:	89bb      	ldrh	r3, [r7, #12]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff1e 	bl	80010cc <RestartWakeupCounter>

  return ;
 8001290:	bf00      	nop
}
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40002800 	.word	0x40002800
 800129c:	200003d8 	.word	0x200003d8
 80012a0:	200002e4 	.word	0x200002e4
 80012a4:	20000254 	.word	0x20000254
 80012a8:	200002ec 	.word	0x200002ec
 80012ac:	200002f2 	.word	0x200002f2

080012b0 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012bc:	4b5e      	ldr	r3, [pc, #376]	; (8001438 <HW_TS_Init+0x188>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	22ca      	movs	r2, #202	; 0xca
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
 80012c4:	4b5c      	ldr	r3, [pc, #368]	; (8001438 <HW_TS_Init+0x188>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2253      	movs	r2, #83	; 0x53
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80012cc:	4b5b      	ldr	r3, [pc, #364]	; (800143c <HW_TS_Init+0x18c>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4a5a      	ldr	r2, [pc, #360]	; (800143c <HW_TS_Init+0x18c>)
 80012d2:	f043 0320 	orr.w	r3, r3, #32
 80012d6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80012d8:	4b58      	ldr	r3, [pc, #352]	; (800143c <HW_TS_Init+0x18c>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f1c3 0304 	rsb	r3, r3, #4
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b55      	ldr	r3, [pc, #340]	; (8001440 <HW_TS_Init+0x190>)
 80012ec:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80012ee:	4b53      	ldr	r3, [pc, #332]	; (800143c <HW_TS_Init+0x18c>)
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80012f6:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80012fa:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	fa92 f2a2 	rbit	r2, r2
 8001302:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	2a00      	cmp	r2, #0
 800130c:	d101      	bne.n	8001312 <HW_TS_Init+0x62>
  {
    return 32U;
 800130e:	2220      	movs	r2, #32
 8001310:	e003      	b.n	800131a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	fab2 f282 	clz	r2, r2
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	40d3      	lsrs	r3, r2
 800131c:	b2db      	uxtb	r3, r3
 800131e:	3301      	adds	r3, #1
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b48      	ldr	r3, [pc, #288]	; (8001444 <HW_TS_Init+0x194>)
 8001324:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001326:	4b45      	ldr	r3, [pc, #276]	; (800143c <HW_TS_Init+0x18c>)
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	b29b      	uxth	r3, r3
 800132c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001330:	b29b      	uxth	r3, r3
 8001332:	3301      	adds	r3, #1
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b44      	ldr	r3, [pc, #272]	; (8001448 <HW_TS_Init+0x198>)
 8001338:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800133a:	4b43      	ldr	r3, [pc, #268]	; (8001448 <HW_TS_Init+0x198>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	3b01      	subs	r3, #1
 8001340:	4a40      	ldr	r2, [pc, #256]	; (8001444 <HW_TS_Init+0x194>)
 8001342:	7812      	ldrb	r2, [r2, #0]
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800134c:	4a3c      	ldr	r2, [pc, #240]	; (8001440 <HW_TS_Init+0x190>)
 800134e:	7812      	ldrb	r2, [r2, #0]
 8001350:	40d3      	lsrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800135a:	4293      	cmp	r3, r2
 800135c:	d904      	bls.n	8001368 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800135e:	4b3b      	ldr	r3, [pc, #236]	; (800144c <HW_TS_Init+0x19c>)
 8001360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	e003      	b.n	8001370 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b37      	ldr	r3, [pc, #220]	; (800144c <HW_TS_Init+0x19c>)
 800136e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001370:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001374:	f7ff fc64 	bl	8000c40 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001378:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800137c:	f7ff fc4c 	bl	8000c18 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d13d      	bne.n	8001402 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <HW_TS_Init+0x1a0>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800138c:	4b31      	ldr	r3, [pc, #196]	; (8001454 <HW_TS_Init+0x1a4>)
 800138e:	f04f 32ff 	mov.w	r2, #4294967295
 8001392:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001394:	2300      	movs	r3, #0
 8001396:	77fb      	strb	r3, [r7, #31]
 8001398:	e00c      	b.n	80013b4 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800139a:	7ffa      	ldrb	r2, [r7, #31]
 800139c:	492e      	ldr	r1, [pc, #184]	; (8001458 <HW_TS_Init+0x1a8>)
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	440b      	add	r3, r1
 80013a8:	330c      	adds	r3, #12
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80013ae:	7ffb      	ldrb	r3, [r7, #31]
 80013b0:	3301      	adds	r3, #1
 80013b2:	77fb      	strb	r3, [r7, #31]
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d9ef      	bls.n	800139a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <HW_TS_Init+0x1ac>)
 80013bc:	2206      	movs	r2, #6
 80013be:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HW_TS_Init+0x188>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <HW_TS_Init+0x188>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ce:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HW_TS_Init+0x188>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <HW_TS_Init+0x188>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013e0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <HW_TS_Init+0x1b0>)
 80013e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013e8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80013ea:	2003      	movs	r0, #3
 80013ec:	f002 f865 	bl	80034ba <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HW_TS_Init+0x188>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HW_TS_Init+0x188>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	e009      	b.n	8001416 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HW_TS_Init+0x188>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001410:	2003      	movs	r0, #3
 8001412:	f002 f844 	bl	800349e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HW_TS_Init+0x188>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	22ff      	movs	r2, #255	; 0xff
 800141c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800141e:	2200      	movs	r2, #0
 8001420:	2103      	movs	r1, #3
 8001422:	2003      	movs	r0, #3
 8001424:	f001 fff9 	bl	800341a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001428:	2003      	movs	r0, #3
 800142a:	f002 f810 	bl	800344e <HAL_NVIC_EnableIRQ>

  return;
 800142e:	bf00      	nop
}
 8001430:	3720      	adds	r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200003d8 	.word	0x200003d8
 800143c:	40002800 	.word	0x40002800
 8001440:	200002ed 	.word	0x200002ed
 8001444:	200002ee 	.word	0x200002ee
 8001448:	200002f0 	.word	0x200002f0
 800144c:	200002f2 	.word	0x200002f2
 8001450:	200002ec 	.word	0x200002ec
 8001454:	200002e8 	.word	0x200002e8
 8001458:	20000254 	.word	0x20000254
 800145c:	200002e4 	.word	0x200002e4
 8001460:	58000800 	.word	0x58000800

08001464 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001464:	b480      	push	{r7}
 8001466:	b08b      	sub	sp, #44	; 0x2c
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	4613      	mov	r3, r2
 8001472:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800147a:	f3ef 8310 	mrs	r3, PRIMASK
 800147e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001480:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001482:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001488:	e004      	b.n	8001494 <HW_TS_Create+0x30>
  {
    loop++;
 800148a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800148e:	3301      	adds	r3, #1
 8001490:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001494:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001498:	2b05      	cmp	r3, #5
 800149a:	d80c      	bhi.n	80014b6 <HW_TS_Create+0x52>
 800149c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014a0:	492c      	ldr	r1, [pc, #176]	; (8001554 <HW_TS_Create+0xf0>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	440b      	add	r3, r1
 80014ac:	330c      	adds	r3, #12
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1e9      	bne.n	800148a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d038      	beq.n	8001530 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80014be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014c2:	4924      	ldr	r1, [pc, #144]	; (8001554 <HW_TS_Create+0xf0>)
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	440b      	add	r3, r1
 80014ce:	330c      	adds	r3, #12
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	f383 8810 	msr	PRIMASK, r3
}
 80014de:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80014e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014e4:	491b      	ldr	r1, [pc, #108]	; (8001554 <HW_TS_Create+0xf0>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	3310      	adds	r3, #16
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80014f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014fa:	4916      	ldr	r1, [pc, #88]	; (8001554 <HW_TS_Create+0xf0>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	440b      	add	r3, r1
 8001506:	330d      	adds	r3, #13
 8001508:	79fa      	ldrb	r2, [r7, #7]
 800150a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800150c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001510:	4910      	ldr	r1, [pc, #64]	; (8001554 <HW_TS_Create+0xf0>)
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	440b      	add	r3, r1
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001526:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001528:	2300      	movs	r3, #0
 800152a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800152e:	e008      	b.n	8001542 <HW_TS_Create+0xde>
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f383 8810 	msr	PRIMASK, r3
}
 800153a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800153c:	2301      	movs	r3, #1
 800153e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001546:	4618      	mov	r0, r3
 8001548:	372c      	adds	r7, #44	; 0x2c
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000254 	.word	0x20000254

08001558 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001562:	f3ef 8310 	mrs	r3, PRIMASK
 8001566:	60fb      	str	r3, [r7, #12]
  return(result);
 8001568:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800156a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001570:	2003      	movs	r0, #3
 8001572:	f001 ff7a 	bl	800346a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HW_TS_Stop+0xf0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	22ca      	movs	r2, #202	; 0xca
 800157c:	625a      	str	r2, [r3, #36]	; 0x24
 800157e:	4b32      	ldr	r3, [pc, #200]	; (8001648 <HW_TS_Stop+0xf0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2253      	movs	r2, #83	; 0x53
 8001584:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	4930      	ldr	r1, [pc, #192]	; (800164c <HW_TS_Stop+0xf4>)
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	440b      	add	r3, r1
 8001594:	330c      	adds	r3, #12
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d142      	bne.n	8001624 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fcce 	bl	8000f44 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <HW_TS_Stop+0xf8>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015ae:	7cfb      	ldrb	r3, [r7, #19]
 80015b0:	2b06      	cmp	r3, #6
 80015b2:	d12f      	bne.n	8001614 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HW_TS_Stop+0xfc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c0:	d107      	bne.n	80015d2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80015c2:	bf00      	nop
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <HW_TS_Stop+0xf0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f8      	bne.n	80015c4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80015d2:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <HW_TS_Stop+0xf0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HW_TS_Stop+0xf0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015e0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80015e2:	bf00      	nop
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HW_TS_Stop+0xf0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f8      	beq.n	80015e4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HW_TS_Stop+0xf0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HW_TS_Stop+0xf0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001602:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HW_TS_Stop+0x100>)
 8001606:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800160a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800160c:	2003      	movs	r0, #3
 800160e:	f001 ff54 	bl	80034ba <HAL_NVIC_ClearPendingIRQ>
 8001612:	e007      	b.n	8001624 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <HW_TS_Stop+0x104>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	7cfa      	ldrb	r2, [r7, #19]
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001620:	f7ff fdac 	bl	800117c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HW_TS_Stop+0xf0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	22ff      	movs	r2, #255	; 0xff
 800162a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800162c:	2003      	movs	r0, #3
 800162e:	f001 ff0e 	bl	800344e <HAL_NVIC_EnableIRQ>
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f383 8810 	msr	PRIMASK, r3
}
 800163c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800163e:	bf00      	nop
}
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200003d8 	.word	0x200003d8
 800164c:	20000254 	.word	0x20000254
 8001650:	200002e4 	.word	0x200002e4
 8001654:	40002800 	.word	0x40002800
 8001658:	58000800 	.word	0x58000800
 800165c:	200002e5 	.word	0x200002e5

08001660 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800166c:	79fa      	ldrb	r2, [r7, #7]
 800166e:	493b      	ldr	r1, [pc, #236]	; (800175c <HW_TS_Start+0xfc>)
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	440b      	add	r3, r1
 800167a:	330c      	adds	r3, #12
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d103      	bne.n	800168c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff66 	bl	8001558 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800168c:	f3ef 8310 	mrs	r3, PRIMASK
 8001690:	60fb      	str	r3, [r7, #12]
  return(result);
 8001692:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001694:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001696:	b672      	cpsid	i
}
 8001698:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800169a:	2003      	movs	r0, #3
 800169c:	f001 fee5 	bl	800346a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80016a0:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <HW_TS_Start+0x100>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	22ca      	movs	r2, #202	; 0xca
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24
 80016a8:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <HW_TS_Start+0x100>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2253      	movs	r2, #83	; 0x53
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80016b0:	79fa      	ldrb	r2, [r7, #7]
 80016b2:	492a      	ldr	r1, [pc, #168]	; (800175c <HW_TS_Start+0xfc>)
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	330c      	adds	r3, #12
 80016c0:	2202      	movs	r2, #2
 80016c2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80016c4:	79fa      	ldrb	r2, [r7, #7]
 80016c6:	4925      	ldr	r1, [pc, #148]	; (800175c <HW_TS_Start+0xfc>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	3308      	adds	r3, #8
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80016d8:	79fa      	ldrb	r2, [r7, #7]
 80016da:	4920      	ldr	r1, [pc, #128]	; (800175c <HW_TS_Start+0xfc>)
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	440b      	add	r3, r1
 80016e6:	3304      	adds	r3, #4
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fb7e 	bl	8000df0 <linkTimer>
 80016f4:	4603      	mov	r3, r0
 80016f6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HW_TS_Start+0x104>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <HW_TS_Start+0x108>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	7c7a      	ldrb	r2, [r7, #17]
 8001706:	429a      	cmp	r2, r3
 8001708:	d002      	beq.n	8001710 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800170a:	f7ff fd37 	bl	800117c <RescheduleTimerList>
 800170e:	e013      	b.n	8001738 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	4912      	ldr	r1, [pc, #72]	; (800175c <HW_TS_Start+0xfc>)
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	3308      	adds	r3, #8
 8001720:	6819      	ldr	r1, [r3, #0]
 8001722:	8a7b      	ldrh	r3, [r7, #18]
 8001724:	79fa      	ldrb	r2, [r7, #7]
 8001726:	1ac9      	subs	r1, r1, r3
 8001728:	480c      	ldr	r0, [pc, #48]	; (800175c <HW_TS_Start+0xfc>)
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4403      	add	r3, r0
 8001734:	3308      	adds	r3, #8
 8001736:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HW_TS_Start+0x100>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	22ff      	movs	r2, #255	; 0xff
 800173e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001740:	2003      	movs	r0, #3
 8001742:	f001 fe84 	bl	800344e <HAL_NVIC_EnableIRQ>
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f383 8810 	msr	PRIMASK, r3
}
 8001750:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001752:	bf00      	nop
}
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000254 	.word	0x20000254
 8001760:	200003d8 	.word	0x200003d8
 8001764:	200002e4 	.word	0x200002e4
 8001768:	200002e5 	.word	0x200002e5

0800176c <LL_AHB2_GRP1_EnableClock>:
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800177a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4313      	orrs	r3, r2
 8001782:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001788:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001790:	68fb      	ldr	r3, [r7, #12]
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4013      	ands	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <MX_I2C1_Init+0x74>)
 80017d6:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <MX_I2C1_Init+0x78>)
 80017d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_I2C1_Init+0x74>)
 80017dc:	4a1b      	ldr	r2, [pc, #108]	; (800184c <MX_I2C1_Init+0x7c>)
 80017de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_I2C1_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <MX_I2C1_Init+0x74>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <MX_I2C1_Init+0x74>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_I2C1_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_I2C1_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_I2C1_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_I2C1_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800180a:	480e      	ldr	r0, [pc, #56]	; (8001844 <MX_I2C1_Init+0x74>)
 800180c:	f002 f9cc 	bl	8003ba8 <HAL_I2C_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001816:	f000 fa03 	bl	8001c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800181a:	2100      	movs	r1, #0
 800181c:	4809      	ldr	r0, [pc, #36]	; (8001844 <MX_I2C1_Init+0x74>)
 800181e:	f002 fa5e 	bl	8003cde <HAL_I2CEx_ConfigAnalogFilter>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001828:	f000 f9fa 	bl	8001c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800182c:	2100      	movs	r1, #0
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_I2C1_Init+0x74>)
 8001830:	f002 faa0 	bl	8003d74 <HAL_I2CEx_ConfigDigitalFilter>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800183a:	f000 f9f1 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200002f4 	.word	0x200002f4
 8001848:	40005400 	.word	0x40005400
 800184c:	00707cbb 	.word	0x00707cbb

08001850 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <MX_I2C3_Init+0x74>)
 8001856:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <MX_I2C3_Init+0x78>)
 8001858:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 800185a:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <MX_I2C3_Init+0x74>)
 800185c:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <MX_I2C3_Init+0x7c>)
 800185e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <MX_I2C3_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <MX_I2C3_Init+0x74>)
 8001868:	2201      	movs	r2, #1
 800186a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <MX_I2C3_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_I2C3_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_I2C3_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_I2C3_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_I2C3_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800188a:	480e      	ldr	r0, [pc, #56]	; (80018c4 <MX_I2C3_Init+0x74>)
 800188c:	f002 f98c 	bl	8003ba8 <HAL_I2C_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001896:	f000 f9c3 	bl	8001c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800189a:	2100      	movs	r1, #0
 800189c:	4809      	ldr	r0, [pc, #36]	; (80018c4 <MX_I2C3_Init+0x74>)
 800189e:	f002 fa1e 	bl	8003cde <HAL_I2CEx_ConfigAnalogFilter>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80018a8:	f000 f9ba 	bl	8001c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018ac:	2100      	movs	r1, #0
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_I2C3_Init+0x74>)
 80018b0:	f002 fa60 	bl	8003d74 <HAL_I2CEx_ConfigDigitalFilter>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80018ba:	f000 f9b1 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000348 	.word	0x20000348
 80018c8:	40005c00 	.word	0x40005c00
 80018cc:	00707cbb 	.word	0x00707cbb

080018d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b09c      	sub	sp, #112	; 0x70
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2250      	movs	r2, #80	; 0x50
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f00e ff5f 	bl	80107b4 <memset>
  if(i2cHandle->Instance==I2C1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a37      	ldr	r2, [pc, #220]	; (80019d8 <HAL_I2C_MspInit+0x108>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d127      	bne.n	8001950 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001900:	2304      	movs	r3, #4
 8001902:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001904:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	4618      	mov	r0, r3
 8001910:	f005 fb9a 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800191a:	f000 f981 	bl	8001c20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2002      	movs	r0, #2
 8001920:	f7ff ff24 	bl	800176c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001924:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001928:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192a:	2312      	movs	r3, #18
 800192c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001936:	2304      	movs	r3, #4
 8001938:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800193e:	4619      	mov	r1, r3
 8001940:	4826      	ldr	r0, [pc, #152]	; (80019dc <HAL_I2C_MspInit+0x10c>)
 8001942:	f001 ff85 	bl	8003850 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001946:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800194a:	f7ff ff28 	bl	800179e <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800194e:	e03e      	b.n	80019ce <HAL_I2C_MspInit+0xfe>
  else if(i2cHandle->Instance==I2C3)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a22      	ldr	r2, [pc, #136]	; (80019e0 <HAL_I2C_MspInit+0x110>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d139      	bne.n	80019ce <HAL_I2C_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800195a:	2308      	movs	r3, #8
 800195c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800195e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	4618      	mov	r0, r3
 800196a:	f005 fb6d 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8001974:	f000 f954 	bl	8001c20 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	2001      	movs	r0, #1
 800197a:	f7ff fef7 	bl	800176c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2002      	movs	r0, #2
 8001980:	f7ff fef4 	bl	800176c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001988:	2312      	movs	r3, #18
 800198a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001994:	2304      	movs	r3, #4
 8001996:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800199c:	4619      	mov	r1, r3
 800199e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a2:	f001 ff55 	bl	8003850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019a6:	2310      	movs	r3, #16
 80019a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019aa:	2312      	movs	r3, #18
 80019ac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019b6:	2304      	movs	r3, #4
 80019b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019be:	4619      	mov	r1, r3
 80019c0:	4806      	ldr	r0, [pc, #24]	; (80019dc <HAL_I2C_MspInit+0x10c>)
 80019c2:	f001 ff45 	bl	8003850 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019c6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80019ca:	f7ff fee8 	bl	800179e <LL_APB1_GRP1_EnableClock>
}
 80019ce:	bf00      	nop
 80019d0:	3770      	adds	r7, #112	; 0x70
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40005400 	.word	0x40005400
 80019dc:	48000400 	.word	0x48000400
 80019e0:	40005c00 	.word	0x40005c00

080019e4 <LL_AHB3_GRP1_EnableClock>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80019ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80019fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a08:	68fb      	ldr	r3, [r7, #12]
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_IPCC_Init+0x20>)
 8001a1e:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <MX_IPCC_Init+0x24>)
 8001a20:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_IPCC_Init+0x20>)
 8001a24:	f002 f9f2 	bl	8003e0c <HAL_IPCC_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001a2e:	f000 f8f7 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000039c 	.word	0x2000039c
 8001a3c:	58000c00 	.word	0x58000c00

08001a40 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <HAL_IPCC_MspInit+0x44>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d113      	bne.n	8001a7a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001a52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a56:	f7ff ffc5 	bl	80019e4 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	202c      	movs	r0, #44	; 0x2c
 8001a60:	f001 fcdb 	bl	800341a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001a64:	202c      	movs	r0, #44	; 0x2c
 8001a66:	f001 fcf2 	bl	800344e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	202d      	movs	r0, #45	; 0x2d
 8001a70:	f001 fcd3 	bl	800341a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001a74:	202d      	movs	r0, #45	; 0x2d
 8001a76:	f001 fcea 	bl	800344e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	58000c00 	.word	0x58000c00

08001a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a8c:	f000 fc66 	bl	800235c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001a90:	f7fe feb6 	bl	8000800 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a94:	f000 f820 	bl	8001ad8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a98:	f000 f88e 	bl	8001bb8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001a9c:	f7ff ffbc 	bl	8001a18 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aa0:	f7ff f86c 	bl	8000b7c <MX_GPIO_Init>
  MX_DMA_Init();
 8001aa4:	f7ff f83e 	bl	8000b24 <MX_DMA_Init>
  MX_ADC1_Init();
 8001aa8:	f7fe fd08 	bl	80004bc <MX_ADC1_Init>
  MX_I2C1_Init();
 8001aac:	f7ff fe90 	bl	80017d0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001ab0:	f7ff fece 	bl	8001850 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001ab4:	f000 fb0e 	bl	80020d4 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001ab8:	f000 fb58 	bl	800216c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001abc:	f000 f970 	bl	8001da0 <MX_SPI1_Init>
  MX_RTC_Init();
 8001ac0:	f000 f8e4 	bl	8001c8c <MX_RTC_Init>
  MX_USB_Device_Init();
 8001ac4:	f00d fee2 	bl	800f88c <MX_USB_Device_Init>
  MX_RF_Init();
 8001ac8:	f000 f8af 	bl	8001c2a <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001acc:	f7fe fea6 	bl	800081c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001ad0:	f7fe ffd1 	bl	8000a76 <MX_APPE_Process>
 8001ad4:	e7fc      	b.n	8001ad0 <main+0x48>
	...

08001ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b09a      	sub	sp, #104	; 0x68
 8001adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ade:	f107 0320 	add.w	r3, r7, #32
 8001ae2:	2248      	movs	r2, #72	; 0x48
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f00e fe64 	bl	80107b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]
 8001afa:	615a      	str	r2, [r3, #20]
 8001afc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afe:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <SystemClock_Config+0xdc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b06:	4a2b      	ldr	r2, [pc, #172]	; (8001bb4 <SystemClock_Config+0xdc>)
 8001b08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <SystemClock_Config+0xdc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001b1a:	232f      	movs	r3, #47	; 0x2f
 8001b1c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b32:	2340      	movs	r3, #64	; 0x40
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b3a:	2360      	movs	r3, #96	; 0x60
 8001b3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b3e:	2305      	movs	r3, #5
 8001b40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b42:	2302      	movs	r3, #2
 8001b44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b46:	2301      	movs	r3, #1
 8001b48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001b4e:	2318      	movs	r3, #24
 8001b50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b56:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8001b58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b62:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b64:	f107 0320 	add.w	r3, r7, #32
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f004 faad 	bl	80060c8 <HAL_RCC_OscConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001b74:	f000 f854 	bl	8001c20 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001b78:	236f      	movs	r3, #111	; 0x6f
 8001b7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2101      	movs	r1, #1
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f004 fe09 	bl	80067b0 <HAL_RCC_ClockConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001ba4:	f000 f83c 	bl	8001c20 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001ba8:	f005 fbc4 	bl	8007334 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001bac:	bf00      	nop
 8001bae:	3768      	adds	r7, #104	; 0x68
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	58000400 	.word	0x58000400

08001bb8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b094      	sub	sp, #80	; 0x50
 8001bbc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	2250      	movs	r2, #80	; 0x50
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f00e fdf5 	bl	80107b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001bca:	f44f 5354 	mov.w	r3, #13568	; 0x3500
 8001bce:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001bd0:	2318      	movs	r3, #24
 8001bd2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001bd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bde:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001be0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001be4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8001be6:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8001bea:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001bec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001bf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8001bf8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bfc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001c02:	2310      	movs	r3, #16
 8001c04:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c06:	463b      	mov	r3, r7
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f005 fa1d 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8001c14:	f000 f804 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001c18:	bf00      	nop
 8001c1a:	3750      	adds	r7, #80	; 0x50
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <Error_Handler+0x8>

08001c2a <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <LL_APB1_GRP1_EnableClock>:
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_RTC_Init+0x4c>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <MX_RTC_Init+0x50>)
 8001c94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <MX_RTC_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_RTC_Init+0x4c>)
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <MX_RTC_Init+0x4c>)
 8001ca4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001ca8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <MX_RTC_Init+0x4c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_RTC_Init+0x4c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <MX_RTC_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_RTC_Init+0x4c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_RTC_Init+0x4c>)
 8001cc4:	f005 fc4e 	bl	8007564 <HAL_RTC_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001cce:	f7ff ffa7 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200003d8 	.word	0x200003d8
 8001cdc:	40002800 	.word	0x40002800

08001ce0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b096      	sub	sp, #88	; 0x58
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	2250      	movs	r2, #80	; 0x50
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f00e fd5f 	bl	80107b4 <memset>
  if(rtcHandle->Instance==RTC)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_RTC_MspInit+0x58>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d117      	bne.n	8001d30 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001d00:	f003 fe3e 	bl	8005980 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d08:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d10:	f107 0308 	add.w	r3, r7, #8
 8001d14:	4618      	mov	r0, r3
 8001d16:	f005 f997 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8001d20:	f7ff ff7e 	bl	8001c20 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d24:	f7ff ff88 	bl	8001c38 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d2c:	f7ff ff95 	bl	8001c5a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d30:	bf00      	nop
 8001d32:	3758      	adds	r7, #88	; 0x58
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40002800 	.word	0x40002800

08001d3c <LL_AHB2_GRP1_EnableClock>:
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d60:	68fb      	ldr	r3, [r7, #12]
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001da6:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <MX_SPI1_Init+0x78>)
 8001da8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001db0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001db8:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001dba:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001dbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001dee:	2207      	movs	r2, #7
 8001df0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_SPI1_Init+0x74>)
 8001e00:	f005 fcb0 	bl	8007764 <HAL_SPI_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e0a:	f7ff ff09 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200003fc 	.word	0x200003fc
 8001e18:	40013000 	.word	0x40013000

08001e1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <HAL_SPI_MspInit+0x80>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d12a      	bne.n	8001e94 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e3e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e42:	f7ff ff94 	bl	8001d6e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	2001      	movs	r0, #1
 8001e48:	f7ff ff78 	bl	8001d3c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4c:	2002      	movs	r0, #2
 8001e4e:	f7ff ff75 	bl	8001d3c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001e52:	2342      	movs	r3, #66	; 0x42
 8001e54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e62:	2305      	movs	r3, #5
 8001e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e70:	f001 fcee 	bl	8003850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e74:	2320      	movs	r3, #32
 8001e76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e84:	2305      	movs	r3, #5
 8001e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e88:	f107 030c 	add.w	r3, r7, #12
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <HAL_SPI_MspInit+0x84>)
 8001e90:	f001 fcde 	bl	8003850 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e94:	bf00      	nop
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40013000 	.word	0x40013000
 8001ea0:	48000400 	.word	0x48000400

08001ea4 <LL_AHB3_GRP1_EnableClock>:
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001eda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ede:	f7ff ffe1 	bl	8001ea4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	202e      	movs	r0, #46	; 0x2e
 8001ee8:	f001 fa97 	bl	800341a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001eec:	202e      	movs	r0, #46	; 0x2e
 8001eee:	f001 faae 	bl	800344e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001efa:	e7fe      	b.n	8001efa <NMI_Handler+0x4>

08001efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <HardFault_Handler+0x4>

08001f02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <MemManage_Handler+0x4>

08001f08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <BusFault_Handler+0x4>

08001f0e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <UsageFault_Handler+0x4>

08001f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f42:	f000 fa65 	bl	8002410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <DMA1_Channel1_IRQHandler+0x10>)
 8001f52:	f001 fb69 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200001f4 	.word	0x200001f4

08001f60 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <USB_LP_IRQHandler+0x10>)
 8001f66:	f002 f8c7 	bl	80040f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20001b78 	.word	0x20001b78

08001f74 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001f78:	f00d fb4a 	bl	800f610 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001f84:	f00d fb7a 	bl	800f67c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001f90:	f001 fde6 	bl	8003b60 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001f9c:	4b24      	ldr	r3, [pc, #144]	; (8002030 <SystemInit+0x98>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	4a23      	ldr	r2, [pc, #140]	; (8002030 <SystemInit+0x98>)
 8001fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001fc4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <SystemInit+0x9c>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fe2:	f023 0305 	bic.w	r3, r3, #5
 8001fe6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <SystemInit+0xa0>)
 8002004:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200a:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <SystemInit+0xa0>)
 800200c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00
 8002034:	faf6fefb 	.word	0xfaf6fefb
 8002038:	22041000 	.word	0x22041000

0800203c <LL_AHB2_GRP1_EnableClock>:
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002048:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800204a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4313      	orrs	r3, r2
 8002052:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002058:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002060:	68fb      	ldr	r3, [r7, #12]
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_APB1_GRP2_EnableClock>:
{
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800207c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4313      	orrs	r3, r2
 8002084:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4013      	ands	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002092:	68fb      	ldr	r3, [r7, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_APB2_GRP1_EnableClock>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020c4:	68fb      	ldr	r3, [r7, #12]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80020d8:	4b22      	ldr	r3, [pc, #136]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 80020da:	4a23      	ldr	r2, [pc, #140]	; (8002168 <MX_LPUART1_UART_Init+0x94>)
 80020dc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 80020e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020e4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020e6:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 80020fa:	220c      	movs	r2, #12
 80020fc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002104:	4b17      	ldr	r3, [pc, #92]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 8002106:	2200      	movs	r2, #0
 8002108:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800210a:	4b16      	ldr	r3, [pc, #88]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 800210c:	2200      	movs	r2, #0
 800210e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002110:	4b14      	ldr	r3, [pc, #80]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 8002112:	2200      	movs	r2, #0
 8002114:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 8002118:	2200      	movs	r2, #0
 800211a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800211c:	4811      	ldr	r0, [pc, #68]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 800211e:	f005 fbe4 	bl	80078ea <HAL_UART_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002128:	f7ff fd7a 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800212c:	2100      	movs	r1, #0
 800212e:	480d      	ldr	r0, [pc, #52]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 8002130:	f006 f8ac 	bl	800828c <HAL_UARTEx_SetTxFifoThreshold>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800213a:	f7ff fd71 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800213e:	2100      	movs	r1, #0
 8002140:	4808      	ldr	r0, [pc, #32]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 8002142:	f006 f8e1 	bl	8008308 <HAL_UARTEx_SetRxFifoThreshold>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800214c:	f7ff fd68 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002150:	4804      	ldr	r0, [pc, #16]	; (8002164 <MX_LPUART1_UART_Init+0x90>)
 8002152:	f006 f862 	bl	800821a <HAL_UARTEx_DisableFifoMode>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800215c:	f7ff fd60 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000460 	.word	0x20000460
 8002168:	40008000 	.word	0x40008000

0800216c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002170:	4b22      	ldr	r3, [pc, #136]	; (80021fc <MX_USART1_UART_Init+0x90>)
 8002172:	4a23      	ldr	r2, [pc, #140]	; (8002200 <MX_USART1_UART_Init+0x94>)
 8002174:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <MX_USART1_UART_Init+0x90>)
 8002178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800217c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <MX_USART1_UART_Init+0x90>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <MX_USART1_UART_Init+0x90>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800218a:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <MX_USART1_UART_Init+0x90>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <MX_USART1_UART_Init+0x90>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <MX_USART1_UART_Init+0x90>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800219c:	4b17      	ldr	r3, [pc, #92]	; (80021fc <MX_USART1_UART_Init+0x90>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <MX_USART1_UART_Init+0x90>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <MX_USART1_UART_Init+0x90>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <MX_USART1_UART_Init+0x90>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021b4:	4811      	ldr	r0, [pc, #68]	; (80021fc <MX_USART1_UART_Init+0x90>)
 80021b6:	f005 fb98 	bl	80078ea <HAL_UART_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80021c0:	f7ff fd2e 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021c4:	2100      	movs	r1, #0
 80021c6:	480d      	ldr	r0, [pc, #52]	; (80021fc <MX_USART1_UART_Init+0x90>)
 80021c8:	f006 f860 	bl	800828c <HAL_UARTEx_SetTxFifoThreshold>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80021d2:	f7ff fd25 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d6:	2100      	movs	r1, #0
 80021d8:	4808      	ldr	r0, [pc, #32]	; (80021fc <MX_USART1_UART_Init+0x90>)
 80021da:	f006 f895 	bl	8008308 <HAL_UARTEx_SetRxFifoThreshold>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80021e4:	f7ff fd1c 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80021e8:	4804      	ldr	r0, [pc, #16]	; (80021fc <MX_USART1_UART_Init+0x90>)
 80021ea:	f006 f816 	bl	800821a <HAL_UARTEx_DisableFifoMode>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80021f4:	f7ff fd14 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200004f4 	.word	0x200004f4
 8002200:	40013800 	.word	0x40013800

08002204 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b09c      	sub	sp, #112	; 0x70
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	2250      	movs	r2, #80	; 0x50
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f00e fac5 	bl	80107b4 <memset>
  if(uartHandle->Instance==LPUART1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2c      	ldr	r2, [pc, #176]	; (80022e0 <HAL_UART_MspInit+0xdc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d125      	bne.n	8002280 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002234:	2302      	movs	r3, #2
 8002236:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002238:	2300      	movs	r3, #0
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	4618      	mov	r0, r3
 8002242:	f004 ff01 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800224c:	f7ff fce8 	bl	8001c20 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002250:	2001      	movs	r0, #1
 8002252:	f7ff ff0c 	bl	800206e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	2001      	movs	r0, #1
 8002258:	f7ff fef0 	bl	800203c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800225c:	230c      	movs	r3, #12
 800225e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800226c:	2308      	movs	r3, #8
 800226e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002274:	4619      	mov	r1, r3
 8002276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227a:	f001 fae9 	bl	8003850 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800227e:	e02b      	b.n	80022d8 <HAL_UART_MspInit+0xd4>
  else if(uartHandle->Instance==USART1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a17      	ldr	r2, [pc, #92]	; (80022e4 <HAL_UART_MspInit+0xe0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d126      	bne.n	80022d8 <HAL_UART_MspInit+0xd4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800228a:	2301      	movs	r3, #1
 800228c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800228e:	2300      	movs	r3, #0
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	4618      	mov	r0, r3
 8002298:	f004 fed6 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_UART_MspInit+0xa2>
      Error_Handler();
 80022a2:	f7ff fcbd 	bl	8001c20 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022aa:	f7ff fef9 	bl	80020a0 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2001      	movs	r0, #1
 80022b0:	f7ff fec4 	bl	800203c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022c6:	2307      	movs	r3, #7
 80022c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022ce:	4619      	mov	r1, r3
 80022d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d4:	f001 fabc 	bl	8003850 <HAL_GPIO_Init>
}
 80022d8:	bf00      	nop
 80022da:	3770      	adds	r7, #112	; 0x70
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40008000 	.word	0x40008000
 80022e4:	40013800 	.word	0x40013800

080022e8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80022e8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ec:	3304      	adds	r3, #4

080022ee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80022f2:	d3f9      	bcc.n	80022e8 <CopyDataInit>
  bx lr
 80022f4:	4770      	bx	lr

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80022f6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80022f8:	3004      	adds	r0, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80022fa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>
  bx lr
 80022fe:	4770      	bx	lr

08002300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002300:	480c      	ldr	r0, [pc, #48]	; (8002334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002304:	f7ff fe48 	bl	8001f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002308:	480b      	ldr	r0, [pc, #44]	; (8002338 <LoopForever+0x6>)
 800230a:	490c      	ldr	r1, [pc, #48]	; (800233c <LoopForever+0xa>)
 800230c:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <LoopForever+0xe>)
 800230e:	2300      	movs	r3, #0
 8002310:	f7ff ffed 	bl	80022ee <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002314:	480b      	ldr	r0, [pc, #44]	; (8002344 <LoopForever+0x12>)
 8002316:	490c      	ldr	r1, [pc, #48]	; (8002348 <LoopForever+0x16>)
 8002318:	4a0c      	ldr	r2, [pc, #48]	; (800234c <LoopForever+0x1a>)
 800231a:	2300      	movs	r3, #0
 800231c:	f7ff ffe7 	bl	80022ee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002320:	480b      	ldr	r0, [pc, #44]	; (8002350 <LoopForever+0x1e>)
 8002322:	490c      	ldr	r1, [pc, #48]	; (8002354 <LoopForever+0x22>)
 8002324:	2300      	movs	r3, #0
 8002326:	f7ff ffe8 	bl	80022fa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800232a:	f00e fa4b 	bl	80107c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800232e:	f7ff fbab 	bl	8001a88 <main>

08002332 <LoopForever>:

LoopForever:
  b LoopForever
 8002332:	e7fe      	b.n	8002332 <LoopForever>
  ldr   r0, =_estack
 8002334:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002338:	20000008 	.word	0x20000008
 800233c:	20000120 	.word	0x20000120
 8002340:	08010b5c 	.word	0x08010b5c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002344:	200301e4 	.word	0x200301e4
 8002348:	20030a67 	.word	0x20030a67
 800234c:	08010cc2 	.word	0x08010cc2
  INIT_BSS _sbss, _ebss
 8002350:	20000174 	.word	0x20000174
 8002354:	2000211c 	.word	0x2000211c

08002358 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002358:	e7fe      	b.n	8002358 <ADC1_IRQHandler>
	...

0800235c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_Init+0x3c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_Init+0x3c>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002370:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002372:	2003      	movs	r0, #3
 8002374:	f001 f846 	bl	8003404 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002378:	200f      	movs	r0, #15
 800237a:	f000 f80f 	bl	800239c <HAL_InitTick>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	71fb      	strb	r3, [r7, #7]
 8002388:	e001      	b.n	800238e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800238a:	f7ff fda4 	bl	8001ed6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800238e:	79fb      	ldrb	r3, [r7, #7]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	58004000 	.word	0x58004000

0800239c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80023a8:	4b17      	ldr	r3, [pc, #92]	; (8002408 <HAL_InitTick+0x6c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d024      	beq.n	80023fa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023b0:	f004 fbaa 	bl	8006b08 <HAL_RCC_GetHCLKFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b14      	ldr	r3, [pc, #80]	; (8002408 <HAL_InitTick+0x6c>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	4619      	mov	r1, r3
 80023bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	4618      	mov	r0, r3
 80023ca:	f001 f85c 	bl	8003486 <HAL_SYSTICK_Config>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10f      	bne.n	80023f4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b0f      	cmp	r3, #15
 80023d8:	d809      	bhi.n	80023ee <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023da:	2200      	movs	r2, #0
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	f04f 30ff 	mov.w	r0, #4294967295
 80023e2:	f001 f81a 	bl	800341a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023e6:	4a09      	ldr	r2, [pc, #36]	; (800240c <HAL_InitTick+0x70>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	e007      	b.n	80023fe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	e004      	b.n	80023fe <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
 80023f8:	e001      	b.n	80023fe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000010 	.word	0x20000010
 800240c:	2000000c 	.word	0x2000000c

08002410 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_IncTick+0x20>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_IncTick+0x24>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4413      	add	r3, r2
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_IncTick+0x24>)
 8002422:	6013      	str	r3, [r2, #0]
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000010 	.word	0x20000010
 8002434:	20000588 	.word	0x20000588

08002438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return uwTick;
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <HAL_GetTick+0x14>)
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000588 	.word	0x20000588

08002450 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_GetTickPrio+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	2000000c 	.word	0x2000000c

08002468 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	609a      	str	r2, [r3, #8]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3360      	adds	r3, #96	; 0x60
 80024e2:	461a      	mov	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <LL_ADC_SetOffset+0x44>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	4313      	orrs	r3, r2
 8002500:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002508:	bf00      	nop
 800250a:	371c      	adds	r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	03fff000 	.word	0x03fff000

08002518 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3360      	adds	r3, #96	; 0x60
 8002526:	461a      	mov	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3360      	adds	r3, #96	; 0x60
 8002554:	461a      	mov	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	431a      	orrs	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800257a:	b480      	push	{r7}
 800257c:	b087      	sub	sp, #28
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3330      	adds	r3, #48	; 0x30
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	4413      	add	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	211f      	movs	r1, #31
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	401a      	ands	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	0e9b      	lsrs	r3, r3, #26
 80025b2:	f003 011f 	and.w	r1, r3, #31
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	431a      	orrs	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b087      	sub	sp, #28
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3314      	adds	r3, #20
 80025e2:	461a      	mov	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	0e5b      	lsrs	r3, r3, #25
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	4413      	add	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	0d1b      	lsrs	r3, r3, #20
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	2107      	movs	r1, #7
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	401a      	ands	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	0d1b      	lsrs	r3, r3, #20
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	431a      	orrs	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002640:	43db      	mvns	r3, r3
 8002642:	401a      	ands	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0318 	and.w	r3, r3, #24
 800264a:	4908      	ldr	r1, [pc, #32]	; (800266c <LL_ADC_SetChannelSingleDiff+0x44>)
 800264c:	40d9      	lsrs	r1, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	400b      	ands	r3, r1
 8002652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002656:	431a      	orrs	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	0007ffff 	.word	0x0007ffff

08002670 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002680:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6093      	str	r3, [r2, #8]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026a8:	d101      	bne.n	80026ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026f8:	d101      	bne.n	80026fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <LL_ADC_IsEnabled+0x18>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <LL_ADC_IsEnabled+0x1a>
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b04      	cmp	r3, #4
 8002744:	d101      	bne.n	800274a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b08      	cmp	r3, #8
 800276a:	d101      	bne.n	8002770 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e12e      	b.n	80029fc <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d109      	bne.n	80027c0 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7fd ff09 	bl	80005c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff65 	bl	8002694 <LL_ADC_IsDeepPowerDownEnabled>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff4b 	bl	8002670 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ff80 	bl	80026e4 <LL_ADC_IsInternalRegulatorEnabled>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d115      	bne.n	8002816 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff64 	bl	80026bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f4:	4b83      	ldr	r3, [pc, #524]	; (8002a04 <HAL_ADC_Init+0x284>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	4a83      	ldr	r2, [pc, #524]	; (8002a08 <HAL_ADC_Init+0x288>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	3301      	adds	r3, #1
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002808:	e002      	b.n	8002810 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3b01      	subs	r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f9      	bne.n	800280a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff62 	bl	80026e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10d      	bne.n	8002842 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f043 0210 	orr.w	r2, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	f043 0201 	orr.w	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff73 	bl	8002732 <LL_ADC_REG_IsConversionOngoing>
 800284c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 80c7 	bne.w	80029ea <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f040 80c3 	bne.w	80029ea <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002868:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800286c:	f043 0202 	orr.w	r2, r3, #2
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff47 	bl	800270c <LL_ADC_IsEnabled>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002884:	4861      	ldr	r0, [pc, #388]	; (8002a0c <HAL_ADC_Init+0x28c>)
 8002886:	f7ff ff41 	bl	800270c <LL_ADC_IsEnabled>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4619      	mov	r1, r3
 8002896:	485e      	ldr	r0, [pc, #376]	; (8002a10 <HAL_ADC_Init+0x290>)
 8002898:	f7ff fde6 	bl	8002468 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	7e5b      	ldrb	r3, [r3, #25]
 80028a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80028ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80028b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ba:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80028bc:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d106      	bne.n	80028dc <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	3b01      	subs	r3, #1
 80028d4:	045b      	lsls	r3, r3, #17
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d009      	beq.n	80028f8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	4b45      	ldr	r3, [pc, #276]	; (8002a14 <HAL_ADC_Init+0x294>)
 8002900:	4013      	ands	r3, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	430b      	orrs	r3, r1
 800290a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff0e 	bl	8002732 <LL_ADC_REG_IsConversionOngoing>
 8002916:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff1b 	bl	8002758 <LL_ADC_INJ_IsConversionOngoing>
 8002922:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d13d      	bne.n	80029a6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d13a      	bne.n	80029a6 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002934:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800293c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800294c:	f023 0302 	bic.w	r3, r3, #2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	69b9      	ldr	r1, [r7, #24]
 8002956:	430b      	orrs	r3, r1
 8002958:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002960:	2b01      	cmp	r3, #1
 8002962:	d118      	bne.n	8002996 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800296e:	f023 0304 	bic.w	r3, r3, #4
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800297a:	4311      	orrs	r1, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002980:	4311      	orrs	r1, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002986:	430a      	orrs	r2, r1
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	611a      	str	r2, [r3, #16]
 8002994:	e007      	b.n	80029a6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0201 	bic.w	r2, r2, #1
 80029a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d10c      	bne.n	80029c8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	f023 010f 	bic.w	r1, r3, #15
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	1e5a      	subs	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
 80029c6:	e007      	b.n	80029d8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 020f 	bic.w	r2, r2, #15
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	f023 0303 	bic.w	r3, r3, #3
 80029e0:	f043 0201 	orr.w	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
 80029e8:	e007      	b.n	80029fa <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	f043 0210 	orr.w	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3720      	adds	r7, #32
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000008 	.word	0x20000008
 8002a08:	053e2d63 	.word	0x053e2d63
 8002a0c:	50040000 	.word	0x50040000
 8002a10:	50040300 	.word	0x50040300
 8002a14:	fff0c007 	.word	0xfff0c007

08002a18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b0b6      	sub	sp, #216	; 0xd8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x22>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e39f      	b.n	800317a <HAL_ADC_ConfigChannel+0x762>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fe73 	bl	8002732 <LL_ADC_REG_IsConversionOngoing>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f040 8384 	bne.w	800315c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	f7ff fd8a 	bl	800257a <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fe61 	bl	8002732 <LL_ADC_REG_IsConversionOngoing>
 8002a70:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fe6d 	bl	8002758 <LL_ADC_INJ_IsConversionOngoing>
 8002a7e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 81a6 	bne.w	8002dd8 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f040 81a1 	bne.w	8002dd8 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6819      	ldr	r1, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f7ff fd95 	bl	80025d2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	08db      	lsrs	r3, r3, #3
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6919      	ldr	r1, [r3, #16]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ada:	f7ff fcf9 	bl	80024d0 <LL_ADC_SetOffset>
 8002ade:	e17b      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fd16 	bl	8002518 <LL_ADC_GetOffsetChannel>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0xf4>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fd0b 	bl	8002518 <LL_ADC_GetOffsetChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	f003 021f 	and.w	r2, r3, #31
 8002b0a:	e01e      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x132>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fd00 	bl	8002518 <LL_ADC_GetOffsetChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8002b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8002b32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	e004      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8002b3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x14a>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0e9b      	lsrs	r3, r3, #26
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	e018      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x17c>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002b86:	2320      	movs	r3, #32
 8002b88:	e004      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002b8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d106      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fccf 	bl	8002544 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fcb3 	bl	8002518 <LL_ADC_GetOffsetChannel>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x1ba>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fca8 	bl	8002518 <LL_ADC_GetOffsetChannel>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	0e9b      	lsrs	r3, r3, #26
 8002bcc:	f003 021f 	and.w	r2, r3, #31
 8002bd0:	e01e      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x1f8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fc9d 	bl	8002518 <LL_ADC_GetOffsetChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002bf0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002bf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e004      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002c04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c08:	fab3 f383 	clz	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d105      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x210>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0e9b      	lsrs	r3, r3, #26
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	e018      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x242>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	e004      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c54:	fab3 f383 	clz	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d106      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2200      	movs	r2, #0
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fc6c 	bl	8002544 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2102      	movs	r1, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fc50 	bl	8002518 <LL_ADC_GetOffsetChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10a      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x280>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2102      	movs	r1, #2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fc45 	bl	8002518 <LL_ADC_GetOffsetChannel>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	0e9b      	lsrs	r3, r3, #26
 8002c92:	f003 021f 	and.w	r2, r3, #31
 8002c96:	e01e      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x2be>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fc3a 	bl	8002518 <LL_ADC_GetOffsetChannel>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002cbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e004      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002cca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d105      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x2d6>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	0e9b      	lsrs	r3, r3, #26
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	e016      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x304>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002d0e:	2320      	movs	r3, #32
 8002d10:	e004      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002d12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d106      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2200      	movs	r2, #0
 8002d26:	2102      	movs	r1, #2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fc0b 	bl	8002544 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2103      	movs	r1, #3
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fbef 	bl	8002518 <LL_ADC_GetOffsetChannel>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x342>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2103      	movs	r1, #3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fbe4 	bl	8002518 <LL_ADC_GetOffsetChannel>
 8002d50:	4603      	mov	r3, r0
 8002d52:	0e9b      	lsrs	r3, r3, #26
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	e017      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x372>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2103      	movs	r1, #3
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fbd9 	bl	8002518 <LL_ADC_GetOffsetChannel>
 8002d66:	4603      	mov	r3, r0
 8002d68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d74:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	e003      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x38a>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	0e9b      	lsrs	r3, r3, #26
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	e011      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x3ae>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002db2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	e003      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d106      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fbb6 	bl	8002544 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fc95 	bl	800270c <LL_ADC_IsEnabled>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f040 81c2 	bne.w	800316e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6819      	ldr	r1, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	461a      	mov	r2, r3
 8002df8:	f7ff fc16 	bl	8002628 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4a8e      	ldr	r2, [pc, #568]	; (800303c <HAL_ADC_ConfigChannel+0x624>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	f040 8130 	bne.w	8003068 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10b      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x418>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	0e9b      	lsrs	r3, r3, #26
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	2b09      	cmp	r3, #9
 8002e26:	bf94      	ite	ls
 8002e28:	2301      	movls	r3, #1
 8002e2a:	2300      	movhi	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e019      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x44c>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e40:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002e48:	2320      	movs	r3, #32
 8002e4a:	e003      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	3301      	adds	r3, #1
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	2b09      	cmp	r3, #9
 8002e5c:	bf94      	ite	ls
 8002e5e:	2301      	movls	r3, #1
 8002e60:	2300      	movhi	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d079      	beq.n	8002f5c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x46c>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0e9b      	lsrs	r3, r3, #26
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	069b      	lsls	r3, r3, #26
 8002e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e82:	e015      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x498>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e94:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	e003      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	069b      	lsls	r3, r3, #26
 8002eac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d109      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x4b8>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	0e9b      	lsrs	r3, r3, #26
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	2101      	movs	r1, #1
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	e017      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x4e8>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002ee8:	2320      	movs	r3, #32
 8002eea:	e003      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	2101      	movs	r1, #1
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	ea42 0103 	orr.w	r1, r2, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10a      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x50e>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0e9b      	lsrs	r3, r3, #26
 8002f16:	3301      	adds	r3, #1
 8002f18:	f003 021f 	and.w	r2, r3, #31
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	051b      	lsls	r3, r3, #20
 8002f24:	e018      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x540>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	e003      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f003 021f 	and.w	r2, r3, #31
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	e080      	b.n	800305e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d107      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x560>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	0e9b      	lsrs	r3, r3, #26
 8002f6e:	3301      	adds	r3, #1
 8002f70:	069b      	lsls	r3, r3, #26
 8002f72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f76:	e015      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x58c>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e003      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	069b      	lsls	r3, r3, #26
 8002fa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x5ac>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	e017      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x5dc>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	61fb      	str	r3, [r7, #28]
  return result;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	e003      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	ea42 0103 	orr.w	r1, r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10d      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x608>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	3301      	adds	r3, #1
 800300c:	f003 021f 	and.w	r2, r3, #31
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	3b1e      	subs	r3, #30
 8003018:	051b      	lsls	r3, r3, #20
 800301a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800301e:	e01d      	b.n	800305c <HAL_ADC_ConfigChannel+0x644>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	613b      	str	r3, [r7, #16]
  return result;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d103      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003038:	2320      	movs	r3, #32
 800303a:	e005      	b.n	8003048 <HAL_ADC_ConfigChannel+0x630>
 800303c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	fab3 f383 	clz	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	3301      	adds	r3, #1
 800304a:	f003 021f 	and.w	r2, r3, #31
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	3b1e      	subs	r3, #30
 8003056:	051b      	lsls	r3, r3, #20
 8003058:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800305c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003062:	4619      	mov	r1, r3
 8003064:	f7ff fab5 	bl	80025d2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b45      	ldr	r3, [pc, #276]	; (8003184 <HAL_ADC_ConfigChannel+0x76c>)
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d07c      	beq.n	800316e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003074:	4844      	ldr	r0, [pc, #272]	; (8003188 <HAL_ADC_ConfigChannel+0x770>)
 8003076:	f7ff fa1d 	bl	80024b4 <LL_ADC_GetCommonPathInternalCh>
 800307a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800307e:	4843      	ldr	r0, [pc, #268]	; (800318c <HAL_ADC_ConfigChannel+0x774>)
 8003080:	f7ff fb44 	bl	800270c <LL_ADC_IsEnabled>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d15e      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a40      	ldr	r2, [pc, #256]	; (8003190 <HAL_ADC_ConfigChannel+0x778>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d127      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x6cc>
 8003094:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d121      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a39      	ldr	r2, [pc, #228]	; (800318c <HAL_ADC_ConfigChannel+0x774>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d161      	bne.n	800316e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80030aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030b2:	4619      	mov	r1, r3
 80030b4:	4834      	ldr	r0, [pc, #208]	; (8003188 <HAL_ADC_ConfigChannel+0x770>)
 80030b6:	f7ff f9ea 	bl	800248e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_ADC_ConfigChannel+0x77c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	099b      	lsrs	r3, r3, #6
 80030c0:	4a35      	ldr	r2, [pc, #212]	; (8003198 <HAL_ADC_ConfigChannel+0x780>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	099b      	lsrs	r3, r3, #6
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	4613      	mov	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80030d4:	e002      	b.n	80030dc <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3b01      	subs	r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f9      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030e2:	e044      	b.n	800316e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2c      	ldr	r2, [pc, #176]	; (800319c <HAL_ADC_ConfigChannel+0x784>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d113      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x6fe>
 80030ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10d      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a23      	ldr	r2, [pc, #140]	; (800318c <HAL_ADC_ConfigChannel+0x774>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d134      	bne.n	800316e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003104:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003108:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310c:	4619      	mov	r1, r3
 800310e:	481e      	ldr	r0, [pc, #120]	; (8003188 <HAL_ADC_ConfigChannel+0x770>)
 8003110:	f7ff f9bd 	bl	800248e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003114:	e02b      	b.n	800316e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a21      	ldr	r2, [pc, #132]	; (80031a0 <HAL_ADC_ConfigChannel+0x788>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d126      	bne.n	800316e <HAL_ADC_ConfigChannel+0x756>
 8003120:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d120      	bne.n	800316e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a16      	ldr	r2, [pc, #88]	; (800318c <HAL_ADC_ConfigChannel+0x774>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d11b      	bne.n	800316e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003136:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800313a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800313e:	4619      	mov	r1, r3
 8003140:	4811      	ldr	r0, [pc, #68]	; (8003188 <HAL_ADC_ConfigChannel+0x770>)
 8003142:	f7ff f9a4 	bl	800248e <LL_ADC_SetCommonPathInternalCh>
 8003146:	e012      	b.n	800316e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800315a:	e008      	b.n	800316e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003176:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800317a:	4618      	mov	r0, r3
 800317c:	37d8      	adds	r7, #216	; 0xd8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	80080000 	.word	0x80080000
 8003188:	50040300 	.word	0x50040300
 800318c:	50040000 	.word	0x50040000
 8003190:	c7520000 	.word	0xc7520000
 8003194:	20000008 	.word	0x20000008
 8003198:	053e2d63 	.word	0x053e2d63
 800319c:	cb840000 	.word	0xcb840000
 80031a0:	80000001 	.word	0x80000001

080031a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c0:	4013      	ands	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d6:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	60d3      	str	r3, [r2, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <__NVIC_GetPriorityGrouping+0x18>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	f003 0307 	and.w	r3, r3, #7
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	2b00      	cmp	r3, #0
 8003218:	db0b      	blt.n	8003232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	f003 021f 	and.w	r2, r3, #31
 8003220:	4907      	ldr	r1, [pc, #28]	; (8003240 <__NVIC_EnableIRQ+0x38>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2001      	movs	r0, #1
 800322a:	fa00 f202 	lsl.w	r2, r0, r2
 800322e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	2b00      	cmp	r3, #0
 8003254:	db12      	blt.n	800327c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	490a      	ldr	r1, [pc, #40]	; (8003288 <__NVIC_DisableIRQ+0x44>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2001      	movs	r0, #1
 8003266:	fa00 f202 	lsl.w	r2, r0, r2
 800326a:	3320      	adds	r3, #32
 800326c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003270:	f3bf 8f4f 	dsb	sy
}
 8003274:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003276:	f3bf 8f6f 	isb	sy
}
 800327a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000e100 	.word	0xe000e100

0800328c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	2b00      	cmp	r3, #0
 800329c:	db0c      	blt.n	80032b8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	f003 021f 	and.w	r2, r3, #31
 80032a4:	4907      	ldr	r1, [pc, #28]	; (80032c4 <__NVIC_SetPendingIRQ+0x38>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2001      	movs	r0, #1
 80032ae:	fa00 f202 	lsl.w	r2, r0, r2
 80032b2:	3340      	adds	r3, #64	; 0x40
 80032b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000e100 	.word	0xe000e100

080032c8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	db0c      	blt.n	80032f4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	f003 021f 	and.w	r2, r3, #31
 80032e0:	4907      	ldr	r1, [pc, #28]	; (8003300 <__NVIC_ClearPendingIRQ+0x38>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2001      	movs	r0, #1
 80032ea:	fa00 f202 	lsl.w	r2, r0, r2
 80032ee:	3360      	adds	r3, #96	; 0x60
 80032f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000e100 	.word	0xe000e100

08003304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003314:	2b00      	cmp	r3, #0
 8003316:	db0a      	blt.n	800332e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	b2da      	uxtb	r2, r3
 800331c:	490c      	ldr	r1, [pc, #48]	; (8003350 <__NVIC_SetPriority+0x4c>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	0112      	lsls	r2, r2, #4
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	440b      	add	r3, r1
 8003328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800332c:	e00a      	b.n	8003344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4908      	ldr	r1, [pc, #32]	; (8003354 <__NVIC_SetPriority+0x50>)
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	3b04      	subs	r3, #4
 800333c:	0112      	lsls	r2, r2, #4
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	440b      	add	r3, r1
 8003342:	761a      	strb	r2, [r3, #24]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000e100 	.word	0xe000e100
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	; 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f1c3 0307 	rsb	r3, r3, #7
 8003372:	2b04      	cmp	r3, #4
 8003374:	bf28      	it	cs
 8003376:	2304      	movcs	r3, #4
 8003378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3304      	adds	r3, #4
 800337e:	2b06      	cmp	r3, #6
 8003380:	d902      	bls.n	8003388 <NVIC_EncodePriority+0x30>
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3b03      	subs	r3, #3
 8003386:	e000      	b.n	800338a <NVIC_EncodePriority+0x32>
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800338c:	f04f 32ff 	mov.w	r2, #4294967295
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43da      	mvns	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	401a      	ands	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a0:	f04f 31ff 	mov.w	r1, #4294967295
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	43d9      	mvns	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b0:	4313      	orrs	r3, r2
         );
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3724      	adds	r7, #36	; 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033d0:	d301      	bcc.n	80033d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033d2:	2301      	movs	r3, #1
 80033d4:	e00f      	b.n	80033f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d6:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <SysTick_Config+0x40>)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3b01      	subs	r3, #1
 80033dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033de:	210f      	movs	r1, #15
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	f7ff ff8e 	bl	8003304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <SysTick_Config+0x40>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <SysTick_Config+0x40>)
 80033f0:	2207      	movs	r2, #7
 80033f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	e000e010 	.word	0xe000e010

08003404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff fec9 	bl	80031a4 <__NVIC_SetPriorityGrouping>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	4603      	mov	r3, r0
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003428:	f7ff fee0 	bl	80031ec <__NVIC_GetPriorityGrouping>
 800342c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	6978      	ldr	r0, [r7, #20]
 8003434:	f7ff ff90 	bl	8003358 <NVIC_EncodePriority>
 8003438:	4602      	mov	r2, r0
 800343a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff5f 	bl	8003304 <__NVIC_SetPriority>
}
 8003446:	bf00      	nop
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fed3 	bl	8003208 <__NVIC_EnableIRQ>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	4603      	mov	r3, r0
 8003472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fee3 	bl	8003244 <__NVIC_DisableIRQ>
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ff96 	bl	80033c0 <SysTick_Config>
 8003494:	4603      	mov	r3, r0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff feed 	bl	800328c <__NVIC_SetPendingIRQ>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4603      	mov	r3, r0
 80034c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80034c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fefd 	bl	80032c8 <__NVIC_ClearPendingIRQ>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e08e      	b.n	8003608 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	4b47      	ldr	r3, [pc, #284]	; (8003610 <HAL_DMA_Init+0x138>)
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d80f      	bhi.n	8003516 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	4b45      	ldr	r3, [pc, #276]	; (8003614 <HAL_DMA_Init+0x13c>)
 80034fe:	4413      	add	r3, r2
 8003500:	4a45      	ldr	r2, [pc, #276]	; (8003618 <HAL_DMA_Init+0x140>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	009a      	lsls	r2, r3, #2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a42      	ldr	r2, [pc, #264]	; (800361c <HAL_DMA_Init+0x144>)
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
 8003514:	e00e      	b.n	8003534 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	4b40      	ldr	r3, [pc, #256]	; (8003620 <HAL_DMA_Init+0x148>)
 800351e:	4413      	add	r3, r2
 8003520:	4a3d      	ldr	r2, [pc, #244]	; (8003618 <HAL_DMA_Init+0x140>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	009a      	lsls	r2, r3, #2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a3c      	ldr	r2, [pc, #240]	; (8003624 <HAL_DMA_Init+0x14c>)
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800354a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8fe 	bl	8003788 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003594:	d102      	bne.n	800359c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80035a8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035b2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d010      	beq.n	80035de <HAL_DMA_Init+0x106>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d80c      	bhi.n	80035de <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f91d 	bl	8003804 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	e008      	b.n	80035f0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40020407 	.word	0x40020407
 8003614:	bffdfff8 	.word	0xbffdfff8
 8003618:	cccccccd 	.word	0xcccccccd
 800361c:	40020000 	.word	0x40020000
 8003620:	bffdfbf8 	.word	0xbffdfbf8
 8003624:	40020400 	.word	0x40020400

08003628 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	f003 031c 	and.w	r3, r3, #28
 8003648:	2204      	movs	r2, #4
 800364a:	409a      	lsls	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d026      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x7a>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d021      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d107      	bne.n	800367c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	f003 021c 	and.w	r2, r3, #28
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	2104      	movs	r1, #4
 800368a:	fa01 f202 	lsl.w	r2, r1, r2
 800368e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	2b00      	cmp	r3, #0
 8003696:	d071      	beq.n	800377c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036a0:	e06c      	b.n	800377c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f003 031c 	and.w	r3, r3, #28
 80036aa:	2202      	movs	r2, #2
 80036ac:	409a      	lsls	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d02e      	beq.n	8003714 <HAL_DMA_IRQHandler+0xec>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d029      	beq.n	8003714 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 020a 	bic.w	r2, r2, #10
 80036dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f003 021c 	and.w	r2, r3, #28
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2102      	movs	r1, #2
 80036f4:	fa01 f202 	lsl.w	r2, r1, r2
 80036f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d038      	beq.n	800377c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003712:	e033      	b.n	800377c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003718:	f003 031c 	and.w	r3, r3, #28
 800371c:	2208      	movs	r2, #8
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d02a      	beq.n	800377e <HAL_DMA_IRQHandler+0x156>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d025      	beq.n	800377e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 020e 	bic.w	r2, r2, #14
 8003740:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f003 021c 	and.w	r2, r3, #28
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	2101      	movs	r1, #1
 8003750:	fa01 f202 	lsl.w	r2, r1, r2
 8003754:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800377c:	bf00      	nop
 800377e:	bf00      	nop
}
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003798:	429a      	cmp	r2, r3
 800379a:	d80a      	bhi.n	80037b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	089b      	lsrs	r3, r3, #2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037a8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6493      	str	r3, [r2, #72]	; 0x48
 80037b0:	e007      	b.n	80037c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	009a      	lsls	r2, r3, #2
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80037bc:	4413      	add	r3, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	3b08      	subs	r3, #8
 80037ca:	4a0c      	ldr	r2, [pc, #48]	; (80037fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80037d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	2201      	movs	r2, #1
 80037e2:	409a      	lsls	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	40020407 	.word	0x40020407
 80037f8:	4002081c 	.word	0x4002081c
 80037fc:	cccccccd 	.word	0xcccccccd
 8003800:	40020880 	.word	0x40020880

08003804 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003814:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	461a      	mov	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a09      	ldr	r2, [pc, #36]	; (800384c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003828:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3b01      	subs	r3, #1
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2201      	movs	r2, #1
 8003834:	409a      	lsls	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	1000823f 	.word	0x1000823f
 800384c:	40020940 	.word	0x40020940

08003850 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800385e:	e14c      	b.n	8003afa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	2101      	movs	r1, #1
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	fa01 f303 	lsl.w	r3, r1, r3
 800386c:	4013      	ands	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 813e 	beq.w	8003af4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d005      	beq.n	8003890 <HAL_GPIO_Init+0x40>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d130      	bne.n	80038f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	2203      	movs	r2, #3
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4013      	ands	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038c6:	2201      	movs	r2, #1
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4013      	ands	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f003 0201 	and.w	r2, r3, #1
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d017      	beq.n	800392e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	2203      	movs	r2, #3
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4013      	ands	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d123      	bne.n	8003982 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	08da      	lsrs	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3208      	adds	r2, #8
 8003942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003946:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	220f      	movs	r2, #15
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4013      	ands	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	08da      	lsrs	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3208      	adds	r2, #8
 800397c:	6939      	ldr	r1, [r7, #16]
 800397e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	2203      	movs	r2, #3
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 0203 	and.w	r2, r3, #3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 8098 	beq.w	8003af4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80039c4:	4a54      	ldr	r2, [pc, #336]	; (8003b18 <HAL_GPIO_Init+0x2c8>)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	089b      	lsrs	r3, r3, #2
 80039ca:	3302      	adds	r3, #2
 80039cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	220f      	movs	r2, #15
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039ee:	d019      	beq.n	8003a24 <HAL_GPIO_Init+0x1d4>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a4a      	ldr	r2, [pc, #296]	; (8003b1c <HAL_GPIO_Init+0x2cc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <HAL_GPIO_Init+0x1d0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a49      	ldr	r2, [pc, #292]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00d      	beq.n	8003a1c <HAL_GPIO_Init+0x1cc>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a48      	ldr	r2, [pc, #288]	; (8003b24 <HAL_GPIO_Init+0x2d4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d007      	beq.n	8003a18 <HAL_GPIO_Init+0x1c8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a47      	ldr	r2, [pc, #284]	; (8003b28 <HAL_GPIO_Init+0x2d8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d101      	bne.n	8003a14 <HAL_GPIO_Init+0x1c4>
 8003a10:	2304      	movs	r3, #4
 8003a12:	e008      	b.n	8003a26 <HAL_GPIO_Init+0x1d6>
 8003a14:	2307      	movs	r3, #7
 8003a16:	e006      	b.n	8003a26 <HAL_GPIO_Init+0x1d6>
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e004      	b.n	8003a26 <HAL_GPIO_Init+0x1d6>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e002      	b.n	8003a26 <HAL_GPIO_Init+0x1d6>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_GPIO_Init+0x1d6>
 8003a24:	2300      	movs	r3, #0
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	f002 0203 	and.w	r2, r2, #3
 8003a2c:	0092      	lsls	r2, r2, #2
 8003a2e:	4093      	lsls	r3, r2
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a36:	4938      	ldr	r1, [pc, #224]	; (8003b18 <HAL_GPIO_Init+0x2c8>)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	089b      	lsrs	r3, r3, #2
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a44:	4b39      	ldr	r3, [pc, #228]	; (8003b2c <HAL_GPIO_Init+0x2dc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4013      	ands	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a68:	4a30      	ldr	r2, [pc, #192]	; (8003b2c <HAL_GPIO_Init+0x2dc>)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a6e:	4b2f      	ldr	r3, [pc, #188]	; (8003b2c <HAL_GPIO_Init+0x2dc>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a92:	4a26      	ldr	r2, [pc, #152]	; (8003b2c <HAL_GPIO_Init+0x2dc>)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a98:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <HAL_GPIO_Init+0x2dc>)
 8003a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003abe:	4a1b      	ldr	r2, [pc, #108]	; (8003b2c <HAL_GPIO_Init+0x2dc>)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003ac6:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_GPIO_Init+0x2dc>)
 8003ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003aec:	4a0f      	ldr	r2, [pc, #60]	; (8003b2c <HAL_GPIO_Init+0x2dc>)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	3301      	adds	r3, #1
 8003af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f47f aeab 	bne.w	8003860 <HAL_GPIO_Init+0x10>
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	40010000 	.word	0x40010000
 8003b1c:	48000400 	.word	0x48000400
 8003b20:	48000800 	.word	0x48000800
 8003b24:	48000c00 	.word	0x48000c00
 8003b28:	48001000 	.word	0x48001000
 8003b2c:	58000800 	.word	0x58000800

08003b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b40:	787b      	ldrb	r3, [r7, #1]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b46:	887a      	ldrh	r2, [r7, #2]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b4c:	e002      	b.n	8003b54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b4e:	887a      	ldrh	r2, [r7, #2]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <HAL_HSEM_IRQHandler+0x30>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003b6c:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_HSEM_IRQHandler+0x30>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	43db      	mvns	r3, r3
 8003b74:	4906      	ldr	r1, [pc, #24]	; (8003b90 <HAL_HSEM_IRQHandler+0x30>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003b7a:	4a05      	ldr	r2, [pc, #20]	; (8003b90 <HAL_HSEM_IRQHandler+0x30>)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f807 	bl	8003b94 <HAL_HSEM_FreeCallback>
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	58001500 	.word	0x58001500

08003b94 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e08d      	b.n	8003cd6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fd fe7e 	bl	80018d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bf8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d107      	bne.n	8003c22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	e006      	b.n	8003c30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d108      	bne.n	8003c4a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	e007      	b.n	8003c5a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69d9      	ldr	r1, [r3, #28]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1a      	ldr	r2, [r3, #32]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d138      	bne.n	8003d66 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e032      	b.n	8003d68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2224      	movs	r2, #36	; 0x24
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0201 	bic.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d30:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6819      	ldr	r1, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	e000      	b.n	8003d68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
  }
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d139      	bne.n	8003dfe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e033      	b.n	8003e00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2224      	movs	r2, #36	; 0x24
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0201 	bic.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003dc6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0201 	orr.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e000      	b.n	8003e00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dfe:	2302      	movs	r3, #2
  }
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d01e      	beq.n	8003e5c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003e1e:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <HAL_IPCC_Init+0x60>)
 8003e20:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd fe06 	bl	8001a40 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003e34:	68b8      	ldr	r0, [r7, #8]
 8003e36:	f000 f85b 	bl	8003ef0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f82c 	bl	8003ea4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003e5a:	e001      	b.n	8003e60 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	58000c00 	.word	0x58000c00

08003e70 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	4613      	mov	r3, r2
 8003e96:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	e00f      	b.n	8003ed2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <IPCC_SetDefaultCallbacks+0x44>)
 8003ebc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3306      	adds	r3, #6
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	4a08      	ldr	r2, [pc, #32]	; (8003eec <IPCC_SetDefaultCallbacks+0x48>)
 8003eca:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d9ec      	bls.n	8003eb2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	08003e71 	.word	0x08003e71
 8003eec:	08003e8b 	.word	0x08003e8b

08003ef0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003f04:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	223f      	movs	r2, #63	; 0x3f
 8003f0a:	609a      	str	r2, [r3, #8]
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e0c0      	b.n	80040ac <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f00b feb6 	bl	800fcb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2203      	movs	r2, #3
 8003f48:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f004 fa7c 	bl	800844e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	73fb      	strb	r3, [r7, #15]
 8003f5a:	e03e      	b.n	8003fda <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f5c:	7bfa      	ldrb	r2, [r7, #15]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	440b      	add	r3, r1
 8003f6a:	3311      	adds	r3, #17
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f70:	7bfa      	ldrb	r2, [r7, #15]
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	440b      	add	r3, r1
 8003f7e:	3310      	adds	r3, #16
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	440b      	add	r3, r1
 8003f92:	3313      	adds	r3, #19
 8003f94:	2200      	movs	r2, #0
 8003f96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f98:	7bfa      	ldrb	r2, [r7, #15]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	440b      	add	r3, r1
 8003fa6:	3320      	adds	r3, #32
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fac:	7bfa      	ldrb	r2, [r7, #15]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	440b      	add	r3, r1
 8003fba:	3324      	adds	r3, #36	; 0x24
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	440b      	add	r3, r1
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	791b      	ldrb	r3, [r3, #4]
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d3bb      	bcc.n	8003f5c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	73fb      	strb	r3, [r7, #15]
 8003fe8:	e044      	b.n	8004074 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	440b      	add	r3, r1
 8003ff8:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004000:	7bfa      	ldrb	r2, [r7, #15]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	440b      	add	r3, r1
 800400e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004012:	7bfa      	ldrb	r2, [r7, #15]
 8004014:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004016:	7bfa      	ldrb	r2, [r7, #15]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	440b      	add	r3, r1
 8004024:	f203 1353 	addw	r3, r3, #339	; 0x153
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800402c:	7bfa      	ldrb	r2, [r7, #15]
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	440b      	add	r3, r1
 800403a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	440b      	add	r3, r1
 8004050:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004058:	7bfa      	ldrb	r2, [r7, #15]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	440b      	add	r3, r1
 8004066:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	3301      	adds	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	791b      	ldrb	r3, [r3, #4]
 8004078:	7bfa      	ldrb	r2, [r7, #15]
 800407a:	429a      	cmp	r2, r3
 800407c:	d3b5      	bcc.n	8003fea <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3304      	adds	r3, #4
 8004086:	e893 0006 	ldmia.w	r3, {r1, r2}
 800408a:	f004 f9fb 	bl	8008484 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	7a9b      	ldrb	r3, [r3, #10]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d102      	bne.n	80040aa <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f001 fc41 	bl	800592c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_PCD_Start+0x16>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e012      	b.n	80040f0 <HAL_PCD_Start+0x3c>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f004 f9a2 	bl	8008420 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f006 fc62 	bl	800a9aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f006 fc67 	bl	800a9d8 <USB_ReadInterrupts>
 800410a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fb04 	bl	8004724 <PCD_EP_ISR_Handler>

    return;
 800411c:	e110      	b.n	8004340 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	2b00      	cmp	r3, #0
 8004126:	d013      	beq.n	8004150 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004130:	b29a      	uxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413a:	b292      	uxth	r2, r2
 800413c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f00b fe42 	bl	800fdca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004146:	2100      	movs	r1, #0
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f8fc 	bl	8004346 <HAL_PCD_SetAddress>

    return;
 800414e:	e0f7      	b.n	8004340 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00c      	beq.n	8004174 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800416c:	b292      	uxth	r2, r2
 800416e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004172:	e0e5      	b.n	8004340 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004186:	b29a      	uxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004190:	b292      	uxth	r2, r2
 8004192:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004196:	e0d3      	b.n	8004340 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d034      	beq.n	800420c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0204 	bic.w	r2, r2, #4
 80041b4:	b292      	uxth	r2, r2
 80041b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0208 	bic.w	r2, r2, #8
 80041cc:	b292      	uxth	r2, r2
 80041ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d107      	bne.n	80041ec <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80041e4:	2100      	movs	r1, #0
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f00b ffe4 	bl	80101b4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f00b fe25 	bl	800fe3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004204:	b292      	uxth	r2, r2
 8004206:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800420a:	e099      	b.n	8004340 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004212:	2b00      	cmp	r3, #0
 8004214:	d027      	beq.n	8004266 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800421e:	b29a      	uxth	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0208 	orr.w	r2, r2, #8
 8004228:	b292      	uxth	r2, r2
 800422a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004236:	b29a      	uxth	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004240:	b292      	uxth	r2, r2
 8004242:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800424e:	b29a      	uxth	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0204 	orr.w	r2, r2, #4
 8004258:	b292      	uxth	r2, r2
 800425a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f00b fdd2 	bl	800fe08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004264:	e06c      	b.n	8004340 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d040      	beq.n	80042f2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004282:	b292      	uxth	r2, r2
 8004284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d12b      	bne.n	80042ea <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800429a:	b29a      	uxth	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0204 	orr.w	r2, r2, #4
 80042a4:	b292      	uxth	r2, r2
 80042a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0208 	orr.w	r2, r2, #8
 80042bc:	b292      	uxth	r2, r2
 80042be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	089b      	lsrs	r3, r3, #2
 80042d6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80042e0:	2101      	movs	r1, #1
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f00b ff66 	bl	80101b4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80042e8:	e02a      	b.n	8004340 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f00b fd8c 	bl	800fe08 <HAL_PCD_SuspendCallback>
    return;
 80042f0:	e026      	b.n	8004340 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00f      	beq.n	800431c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004304:	b29a      	uxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800430e:	b292      	uxth	r2, r2
 8004310:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f00b fd4a 	bl	800fdae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800431a:	e011      	b.n	8004340 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00c      	beq.n	8004340 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800432e:	b29a      	uxth	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004338:	b292      	uxth	r2, r2
 800433a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800433e:	bf00      	nop
  }
}
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	460b      	mov	r3, r1
 8004350:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_PCD_SetAddress+0x1a>
 800435c:	2302      	movs	r3, #2
 800435e:	e012      	b.n	8004386 <HAL_PCD_SetAddress+0x40>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f006 fb03 	bl	800a982 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	4608      	mov	r0, r1
 8004398:	4611      	mov	r1, r2
 800439a:	461a      	mov	r2, r3
 800439c:	4603      	mov	r3, r0
 800439e:	70fb      	strb	r3, [r7, #3]
 80043a0:	460b      	mov	r3, r1
 80043a2:	803b      	strh	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	da0e      	bge.n	80043d2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	f003 0207 	and.w	r2, r3, #7
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	3310      	adds	r3, #16
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	4413      	add	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	705a      	strb	r2, [r3, #1]
 80043d0:	e00e      	b.n	80043f0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	f003 0207 	and.w	r2, r3, #7
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	4413      	add	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043fc:	883a      	ldrh	r2, [r7, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	78ba      	ldrb	r2, [r7, #2]
 8004406:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004408:	78bb      	ldrb	r3, [r7, #2]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d102      	bne.n	8004414 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_PCD_EP_Open+0x94>
 800441e:	2302      	movs	r3, #2
 8004420:	e00e      	b.n	8004440 <HAL_PCD_EP_Open+0xb2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68f9      	ldr	r1, [r7, #12]
 8004430:	4618      	mov	r0, r3
 8004432:	f004 f845 	bl	80084c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800443e:	7afb      	ldrb	r3, [r7, #11]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004458:	2b00      	cmp	r3, #0
 800445a:	da0e      	bge.n	800447a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	f003 0207 	and.w	r2, r3, #7
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	3310      	adds	r3, #16
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	4413      	add	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	705a      	strb	r2, [r3, #1]
 8004478:	e00e      	b.n	8004498 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800447a:	78fb      	ldrb	r3, [r7, #3]
 800447c:	f003 0207 	and.w	r2, r3, #7
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	4413      	add	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_PCD_EP_Close+0x6a>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e00e      	b.n	80044d0 <HAL_PCD_EP_Close+0x88>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f004 fbc1 	bl	8008c48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	460b      	mov	r3, r1
 80044e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044e8:	7afb      	ldrb	r3, [r7, #11]
 80044ea:	f003 0207 	and.w	r2, r3, #7
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4413      	add	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2200      	movs	r2, #0
 8004510:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004518:	7afb      	ldrb	r3, [r7, #11]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	b2da      	uxtb	r2, r3
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6979      	ldr	r1, [r7, #20]
 800452a:	4618      	mov	r0, r3
 800452c:	f004 fd79 	bl	8009022 <USB_EPStartXfer>

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	460b      	mov	r3, r1
 8004544:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	f003 0207 	and.w	r2, r3, #7
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	440b      	add	r3, r1
 8004558:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800455c:	681b      	ldr	r3, [r3, #0]
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	460b      	mov	r3, r1
 8004578:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800457a:	7afb      	ldrb	r3, [r7, #11]
 800457c:	f003 0207 	and.w	r2, r3, #7
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	3310      	adds	r3, #16
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4413      	add	r3, r2
 800458e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2200      	movs	r2, #0
 80045ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2201      	movs	r2, #1
 80045b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045b6:	7afb      	ldrb	r3, [r7, #11]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6979      	ldr	r1, [r7, #20]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f004 fd2a 	bl	8009022 <USB_EPStartXfer>

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	7912      	ldrb	r2, [r2, #4]
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e03e      	b.n	8004674 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	da0e      	bge.n	800461c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045fe:	78fb      	ldrb	r3, [r7, #3]
 8004600:	f003 0207 	and.w	r2, r3, #7
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	3310      	adds	r3, #16
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	705a      	strb	r2, [r3, #1]
 800461a:	e00c      	b.n	8004636 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800461c:	78fa      	ldrb	r2, [r7, #3]
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	b2da      	uxtb	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_PCD_EP_SetStall+0x7e>
 8004652:	2302      	movs	r3, #2
 8004654:	e00e      	b.n	8004674 <HAL_PCD_EP_SetStall+0x9c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68f9      	ldr	r1, [r7, #12]
 8004664:	4618      	mov	r0, r3
 8004666:	f006 f88d 	bl	800a784 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	7912      	ldrb	r2, [r2, #4]
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e040      	b.n	800471c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800469a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da0e      	bge.n	80046c0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 0207 	and.w	r2, r3, #7
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	3310      	adds	r3, #16
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2201      	movs	r2, #1
 80046bc:	705a      	strb	r2, [r3, #1]
 80046be:	e00e      	b.n	80046de <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	f003 0207 	and.w	r2, r3, #7
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4413      	add	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_PCD_EP_ClrStall+0x82>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e00e      	b.n	800471c <HAL_PCD_EP_ClrStall+0xa0>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	4618      	mov	r0, r3
 800470e:	f006 f88a 	bl	800a826 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b096      	sub	sp, #88	; 0x58
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800472c:	e3ae      	b.n	8004e8c <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004736:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800473a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8004748:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 8170 	bne.w	8004a32 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004752:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	d14d      	bne.n	80047fa <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800476a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476e:	81fb      	strh	r3, [r7, #14]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	89fb      	ldrh	r3, [r7, #14]
 8004776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800477a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800477e:	b29b      	uxth	r3, r3
 8004780:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3310      	adds	r3, #16
 8004786:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004790:	b29b      	uxth	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4413      	add	r3, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	4413      	add	r3, r2
 80047a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80047b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b2:	695a      	ldr	r2, [r3, #20]
 80047b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	441a      	add	r2, r3
 80047ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80047be:	2100      	movs	r1, #0
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f00b fada 	bl	800fd7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	7b1b      	ldrb	r3, [r3, #12]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 835d 	beq.w	8004e8c <PCD_EP_ISR_Handler+0x768>
 80047d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 8358 	bne.w	8004e8c <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	7b1b      	ldrb	r3, [r3, #12]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	b292      	uxth	r2, r2
 80047ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	731a      	strb	r2, [r3, #12]
 80047f8:	e348      	b.n	8004e8c <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004800:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800480c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004814:	2b00      	cmp	r3, #0
 8004816:	d032      	beq.n	800487e <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004820:	b29b      	uxth	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	4413      	add	r3, r2
 8004832:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800483c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6818      	ldr	r0, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800484a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800484c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800484e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004850:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004852:	b29b      	uxth	r3, r3
 8004854:	f006 f912 	bl	800aa7c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29a      	uxth	r2, r3
 8004860:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004864:	4013      	ands	r3, r2
 8004866:	823b      	strh	r3, [r7, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	8a3a      	ldrh	r2, [r7, #16]
 800486e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004872:	b292      	uxth	r2, r2
 8004874:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f00b fa52 	bl	800fd20 <HAL_PCD_SetupStageCallback>
 800487c:	e306      	b.n	8004e8c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800487e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004882:	2b00      	cmp	r3, #0
 8004884:	f280 8302 	bge.w	8004e8c <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29a      	uxth	r2, r3
 8004890:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004894:	4013      	ands	r3, r2
 8004896:	83fb      	strh	r3, [r7, #30]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	8bfa      	ldrh	r2, [r7, #30]
 800489e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048a2:	b292      	uxth	r2, r2
 80048a4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	4413      	add	r3, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	4413      	add	r3, r2
 80048c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048cc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80048ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d019      	beq.n	800490a <PCD_EP_ISR_Handler+0x1e6>
 80048d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d015      	beq.n	800490a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e4:	6959      	ldr	r1, [r3, #20]
 80048e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80048ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f006 f8c4 	bl	800aa7c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80048f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	441a      	add	r2, r3
 80048fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004900:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004902:	2100      	movs	r1, #0
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f00b fa1d 	bl	800fd44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004914:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800491c:	2b00      	cmp	r3, #0
 800491e:	f040 82b5 	bne.w	8004e8c <PCD_EP_ISR_Handler+0x768>
 8004922:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004926:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800492a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800492e:	f000 82ad 	beq.w	8004e8c <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	61bb      	str	r3, [r7, #24]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004940:	b29b      	uxth	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	4413      	add	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800495c:	b29a      	uxth	r2, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b3e      	cmp	r3, #62	; 0x3e
 8004968:	d91d      	bls.n	80049a6 <PCD_EP_ISR_Handler+0x282>
 800496a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	647b      	str	r3, [r7, #68]	; 0x44
 8004972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <PCD_EP_ISR_Handler+0x260>
 800497e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004980:	3b01      	subs	r3, #1
 8004982:	647b      	str	r3, [r7, #68]	; 0x44
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29a      	uxth	r2, r3
 800498a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498c:	b29b      	uxth	r3, r3
 800498e:	029b      	lsls	r3, r3, #10
 8004990:	b29b      	uxth	r3, r3
 8004992:	4313      	orrs	r3, r2
 8004994:	b29b      	uxth	r3, r3
 8004996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800499a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800499e:	b29a      	uxth	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	801a      	strh	r2, [r3, #0]
 80049a4:	e026      	b.n	80049f4 <PCD_EP_ISR_Handler+0x2d0>
 80049a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10a      	bne.n	80049c4 <PCD_EP_ISR_Handler+0x2a0>
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049bc:	b29a      	uxth	r2, r3
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	e017      	b.n	80049f4 <PCD_EP_ISR_Handler+0x2d0>
 80049c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	085b      	lsrs	r3, r3, #1
 80049ca:	647b      	str	r3, [r7, #68]	; 0x44
 80049cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <PCD_EP_ISR_Handler+0x2ba>
 80049d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049da:	3301      	adds	r3, #1
 80049dc:	647b      	str	r3, [r7, #68]	; 0x44
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	029b      	lsls	r3, r3, #10
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	4313      	orrs	r3, r2
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a04:	827b      	strh	r3, [r7, #18]
 8004a06:	8a7b      	ldrh	r3, [r7, #18]
 8004a08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a0c:	827b      	strh	r3, [r7, #18]
 8004a0e:	8a7b      	ldrh	r3, [r7, #18]
 8004a10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a14:	827b      	strh	r3, [r7, #18]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	8a7b      	ldrh	r3, [r7, #18]
 8004a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	8013      	strh	r3, [r2, #0]
 8004a30:	e22c      	b.n	8004e8c <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a46:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f280 80f6 	bge.w	8004c3c <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a66:	4013      	ands	r3, r2
 8004a68:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004a7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a82:	b292      	uxth	r2, r2
 8004a84:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004a86:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a9e:	7b1b      	ldrb	r3, [r3, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d123      	bne.n	8004aec <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	4413      	add	r3, r2
 8004abe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004acc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 808e 	beq.w	8004bf2 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004adc:	6959      	ldr	r1, [r3, #20]
 8004ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae0:	88da      	ldrh	r2, [r3, #6]
 8004ae2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004ae6:	f005 ffc9 	bl	800aa7c <USB_ReadPMA>
 8004aea:	e082      	b.n	8004bf2 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aee:	78db      	ldrb	r3, [r3, #3]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d10a      	bne.n	8004b0a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004af4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004af8:	461a      	mov	r2, r3
 8004afa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f9d3 	bl	8004ea8 <HAL_PCD_EP_DB_Receive>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004b08:	e073      	b.n	8004bf2 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b24:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	441a      	add	r2, r3
 8004b36:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d022      	beq.n	8004bae <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	4413      	add	r3, r2
 8004b82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b8c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004b90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d02c      	beq.n	8004bf2 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b9e:	6959      	ldr	r1, [r3, #20]
 8004ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba2:	891a      	ldrh	r2, [r3, #8]
 8004ba4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004ba8:	f005 ff68 	bl	800aa7c <USB_ReadPMA>
 8004bac:	e021      	b.n	8004bf2 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bd2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004bd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004be4:	6959      	ldr	r1, [r3, #20]
 8004be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004be8:	895a      	ldrh	r2, [r3, #10]
 8004bea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004bee:	f005 ff45 	bl	800aa7c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004bfa:	441a      	add	r2, r3
 8004bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bfe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004c08:	441a      	add	r2, r3
 8004c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c0c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <PCD_EP_ISR_Handler+0x4fe>
 8004c16:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d206      	bcs.n	8004c30 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f00b f88b 	bl	800fd44 <HAL_PCD_DataOutStageCallback>
 8004c2e:	e005      	b.n	8004c3c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c36:	4618      	mov	r0, r3
 8004c38:	f004 f9f3 	bl	8009022 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004c3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8121 	beq.w	8004e8c <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8004c4a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	3310      	adds	r3, #16
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	441a      	add	r2, r3
 8004c8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c9c:	78db      	ldrb	r3, [r3, #3]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	f040 80a2 	bne.w	8004de8 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8004ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cac:	7b1b      	ldrb	r3, [r3, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 8093 	beq.w	8004dda <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004cb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d046      	beq.n	8004d4e <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc2:	785b      	ldrb	r3, [r3, #1]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d126      	bne.n	8004d16 <PCD_EP_ISR_Handler+0x5f2>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	4413      	add	r3, r2
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	00da      	lsls	r2, r3, #3
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	4413      	add	r3, r2
 8004cea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004cee:	623b      	str	r3, [r7, #32]
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	801a      	strh	r2, [r3, #0]
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	801a      	strh	r2, [r3, #0]
 8004d14:	e061      	b.n	8004dda <PCD_EP_ISR_Handler+0x6b6>
 8004d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d18:	785b      	ldrb	r3, [r3, #1]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d15d      	bne.n	8004dda <PCD_EP_ISR_Handler+0x6b6>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	461a      	mov	r2, r3
 8004d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d32:	4413      	add	r3, r2
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	00da      	lsls	r2, r3, #3
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	4413      	add	r3, r2
 8004d40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	2200      	movs	r2, #0
 8004d4a:	801a      	strh	r2, [r3, #0]
 8004d4c:	e045      	b.n	8004dda <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d56:	785b      	ldrb	r3, [r3, #1]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d126      	bne.n	8004daa <PCD_EP_ISR_Handler+0x686>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	637b      	str	r3, [r7, #52]	; 0x34
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d70:	4413      	add	r3, r2
 8004d72:	637b      	str	r3, [r7, #52]	; 0x34
 8004d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	00da      	lsls	r2, r3, #3
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d82:	633b      	str	r3, [r7, #48]	; 0x30
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	801a      	strh	r2, [r3, #0]
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	e017      	b.n	8004dda <PCD_EP_ISR_Handler+0x6b6>
 8004daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d113      	bne.n	8004dda <PCD_EP_ISR_Handler+0x6b6>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc0:	4413      	add	r3, r2
 8004dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	00da      	lsls	r2, r3, #3
 8004dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dcc:	4413      	add	r3, r2
 8004dce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	4619      	mov	r1, r3
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f00a ffca 	bl	800fd7a <HAL_PCD_DataInStageCallback>
 8004de6:	e051      	b.n	8004e8c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004de8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d144      	bne.n	8004e7e <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4413      	add	r3, r2
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e18:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e1e:	699a      	ldr	r2, [r3, #24]
 8004e20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d907      	bls.n	8004e38 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8004e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e2a:	699a      	ldr	r2, [r3, #24]
 8004e2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e30:	1ad2      	subs	r2, r2, r3
 8004e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e34:	619a      	str	r2, [r3, #24]
 8004e36:	e002      	b.n	8004e3e <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f00a ff94 	bl	800fd7a <HAL_PCD_DataInStageCallback>
 8004e52:	e01b      	b.n	8004e8c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e5c:	441a      	add	r2, r3
 8004e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e60:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e64:	69da      	ldr	r2, [r3, #28]
 8004e66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e6a:	441a      	add	r2, r3
 8004e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e6e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e76:	4618      	mov	r0, r3
 8004e78:	f004 f8d3 	bl	8009022 <USB_EPStartXfer>
 8004e7c:	e006      	b.n	8004e8c <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004e7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e82:	461a      	mov	r2, r3
 8004e84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f917 	bl	80050ba <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	b21b      	sxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f6ff ac48 	blt.w	800472e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3758      	adds	r7, #88	; 0x58
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d07c      	beq.n	8004fba <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ee4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	8b7b      	ldrh	r3, [r7, #26]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d306      	bcc.n	8004efe <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	699a      	ldr	r2, [r3, #24]
 8004ef4:	8b7b      	ldrh	r3, [r7, #26]
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	619a      	str	r2, [r3, #24]
 8004efc:	e002      	b.n	8004f04 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2200      	movs	r2, #0
 8004f02:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d123      	bne.n	8004f54 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	833b      	strh	r3, [r7, #24]
 8004f28:	8b3b      	ldrh	r3, [r7, #24]
 8004f2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f2e:	833b      	strh	r3, [r7, #24]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	8b3b      	ldrh	r3, [r7, #24]
 8004f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01f      	beq.n	8004f9e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f78:	82fb      	strh	r3, [r7, #22]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	441a      	add	r2, r3
 8004f88:	8afb      	ldrh	r3, [r7, #22]
 8004f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f9e:	8b7b      	ldrh	r3, [r7, #26]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8085 	beq.w	80050b0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	6959      	ldr	r1, [r3, #20]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	891a      	ldrh	r2, [r3, #8]
 8004fb2:	8b7b      	ldrh	r3, [r7, #26]
 8004fb4:	f005 fd62 	bl	800aa7c <USB_ReadPMA>
 8004fb8:	e07a      	b.n	80050b0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	4413      	add	r3, r2
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fde:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	699a      	ldr	r2, [r3, #24]
 8004fe4:	8b7b      	ldrh	r3, [r7, #26]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d306      	bcc.n	8004ff8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	8b7b      	ldrh	r3, [r7, #26]
 8004ff0:	1ad2      	subs	r2, r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	619a      	str	r2, [r3, #24]
 8004ff6:	e002      	b.n	8004ffe <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d123      	bne.n	800504e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800501c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005020:	83fb      	strh	r3, [r7, #30]
 8005022:	8bfb      	ldrh	r3, [r7, #30]
 8005024:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005028:	83fb      	strh	r3, [r7, #30]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	441a      	add	r2, r3
 8005038:	8bfb      	ldrh	r3, [r7, #30]
 800503a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504a:	b29b      	uxth	r3, r3
 800504c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d11f      	bne.n	8005098 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005072:	83bb      	strh	r3, [r7, #28]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	441a      	add	r2, r3
 8005082:	8bbb      	ldrh	r3, [r7, #28]
 8005084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005090:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005094:	b29b      	uxth	r3, r3
 8005096:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005098:	8b7b      	ldrh	r3, [r7, #26]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	6959      	ldr	r1, [r3, #20]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	895a      	ldrh	r2, [r3, #10]
 80050aa:	8b7b      	ldrh	r3, [r7, #26]
 80050ac:	f005 fce6 	bl	800aa7c <USB_ReadPMA>
    }
  }

  return count;
 80050b0:	8b7b      	ldrh	r3, [r7, #26]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3720      	adds	r7, #32
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b0a4      	sub	sp, #144	; 0x90
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	4613      	mov	r3, r2
 80050c6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 81db 	beq.w	800548a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050dc:	b29b      	uxth	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	4413      	add	r3, r2
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	4413      	add	r3, r2
 80050ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050f8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	699a      	ldr	r2, [r3, #24]
 8005100:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005104:	429a      	cmp	r2, r3
 8005106:	d907      	bls.n	8005118 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	699a      	ldr	r2, [r3, #24]
 800510c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005110:	1ad2      	subs	r2, r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	619a      	str	r2, [r3, #24]
 8005116:	e002      	b.n	800511e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2200      	movs	r2, #0
 800511c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f040 80b9 	bne.w	800529a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	785b      	ldrb	r3, [r3, #1]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d126      	bne.n	800517e <HAL_PCD_EP_DB_Transmit+0xc4>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800513e:	b29b      	uxth	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	4413      	add	r3, r2
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	00da      	lsls	r2, r3, #3
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	4413      	add	r3, r2
 8005152:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005156:	62bb      	str	r3, [r7, #40]	; 0x28
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005162:	b29a      	uxth	r2, r3
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005176:	b29a      	uxth	r2, r3
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	e01a      	b.n	80051b4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	785b      	ldrb	r3, [r3, #1]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d116      	bne.n	80051b4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	637b      	str	r3, [r7, #52]	; 0x34
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005194:	b29b      	uxth	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519a:	4413      	add	r3, r2
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	00da      	lsls	r2, r3, #3
 80051a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a6:	4413      	add	r3, r2
 80051a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051ac:	633b      	str	r3, [r7, #48]	; 0x30
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	2200      	movs	r2, #0
 80051b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	785b      	ldrb	r3, [r3, #1]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d126      	bne.n	8005210 <HAL_PCD_EP_DB_Transmit+0x156>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	61fb      	str	r3, [r7, #28]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	00da      	lsls	r2, r3, #3
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	801a      	strh	r2, [r3, #0]
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005208:	b29a      	uxth	r2, r3
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	801a      	strh	r2, [r3, #0]
 800520e:	e017      	b.n	8005240 <HAL_PCD_EP_DB_Transmit+0x186>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	785b      	ldrb	r3, [r3, #1]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d113      	bne.n	8005240 <HAL_PCD_EP_DB_Transmit+0x186>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005220:	b29b      	uxth	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	4413      	add	r3, r2
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	00da      	lsls	r2, r3, #3
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	4413      	add	r3, r2
 8005234:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005238:	623b      	str	r3, [r7, #32]
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	2200      	movs	r2, #0
 800523e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	4619      	mov	r1, r3
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f00a fd97 	bl	800fd7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 82fa 	beq.w	800584c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	82fb      	strh	r3, [r7, #22]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	461a      	mov	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	441a      	add	r2, r3
 8005282:	8afb      	ldrh	r3, [r7, #22]
 8005284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800528c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005294:	b29b      	uxth	r3, r3
 8005296:	8013      	strh	r3, [r2, #0]
 8005298:	e2d8      	b.n	800584c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800529a:	88fb      	ldrh	r3, [r7, #6]
 800529c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d021      	beq.n	80052e8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	461a      	mov	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	441a      	add	r2, r3
 80052d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80052d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	f040 82ac 	bne.w	800584c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80052fc:	441a      	add	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	69da      	ldr	r2, [r3, #28]
 8005306:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800530a:	441a      	add	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	6a1a      	ldr	r2, [r3, #32]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	429a      	cmp	r2, r3
 800531a:	d30b      	bcc.n	8005334 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	6a1a      	ldr	r2, [r3, #32]
 8005328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800532c:	1ad2      	subs	r2, r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	621a      	str	r2, [r3, #32]
 8005332:	e017      	b.n	8005364 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d108      	bne.n	800534e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800533c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005340:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800534c:	e00a      	b.n	8005364 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2200      	movs	r2, #0
 8005362:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d165      	bne.n	8005438 <HAL_PCD_EP_DB_Transmit+0x37e>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800537a:	b29b      	uxth	r3, r3
 800537c:	461a      	mov	r2, r3
 800537e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005380:	4413      	add	r3, r2
 8005382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	00da      	lsls	r2, r3, #3
 800538a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538c:	4413      	add	r3, r2
 800538e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005392:	63bb      	str	r3, [r7, #56]	; 0x38
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800539e:	b29a      	uxth	r2, r3
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053a8:	2b3e      	cmp	r3, #62	; 0x3e
 80053aa:	d91d      	bls.n	80053e8 <HAL_PCD_EP_DB_Transmit+0x32e>
 80053ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <HAL_PCD_EP_DB_Transmit+0x30c>
 80053c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c2:	3b01      	subs	r3, #1
 80053c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80053c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	029b      	lsls	r3, r3, #10
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	4313      	orrs	r3, r2
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	e044      	b.n	8005472 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80053e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <HAL_PCD_EP_DB_Transmit+0x34c>
 80053f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053fe:	b29a      	uxth	r2, r3
 8005400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005402:	801a      	strh	r2, [r3, #0]
 8005404:	e035      	b.n	8005472 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800540a:	085b      	lsrs	r3, r3, #1
 800540c:	64bb      	str	r3, [r7, #72]	; 0x48
 800540e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <HAL_PCD_EP_DB_Transmit+0x366>
 800541a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800541c:	3301      	adds	r3, #1
 800541e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b29a      	uxth	r2, r3
 8005426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005428:	b29b      	uxth	r3, r3
 800542a:	029b      	lsls	r3, r3, #10
 800542c:	b29b      	uxth	r3, r3
 800542e:	4313      	orrs	r3, r2
 8005430:	b29a      	uxth	r2, r3
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	801a      	strh	r2, [r3, #0]
 8005436:	e01c      	b.n	8005472 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	785b      	ldrb	r3, [r3, #1]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d118      	bne.n	8005472 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	647b      	str	r3, [r7, #68]	; 0x44
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544e:	b29b      	uxth	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005454:	4413      	add	r3, r2
 8005456:	647b      	str	r3, [r7, #68]	; 0x44
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	00da      	lsls	r2, r3, #3
 800545e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005460:	4413      	add	r3, r2
 8005462:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005466:	643b      	str	r3, [r7, #64]	; 0x40
 8005468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800546c:	b29a      	uxth	r2, r3
 800546e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005470:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	6959      	ldr	r1, [r3, #20]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	891a      	ldrh	r2, [r3, #8]
 800547e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005482:	b29b      	uxth	r3, r3
 8005484:	f005 fab8 	bl	800a9f8 <USB_WritePMA>
 8005488:	e1e0      	b.n	800584c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005492:	b29b      	uxth	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4413      	add	r3, r2
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	4413      	add	r3, r2
 80054a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054ae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d307      	bcc.n	80054ce <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80054c6:	1ad2      	subs	r2, r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	619a      	str	r2, [r3, #24]
 80054cc:	e002      	b.n	80054d4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2200      	movs	r2, #0
 80054d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f040 80c0 	bne.w	800565e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	785b      	ldrb	r3, [r3, #1]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d126      	bne.n	8005534 <HAL_PCD_EP_DB_Transmit+0x47a>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054fa:	4413      	add	r3, r2
 80054fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	00da      	lsls	r2, r3, #3
 8005504:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005506:	4413      	add	r3, r2
 8005508:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800550c:	67bb      	str	r3, [r7, #120]	; 0x78
 800550e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005518:	b29a      	uxth	r2, r3
 800551a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b29b      	uxth	r3, r3
 8005524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552c:	b29a      	uxth	r2, r3
 800552e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	e01a      	b.n	800556a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d116      	bne.n	800556a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	667b      	str	r3, [r7, #100]	; 0x64
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005550:	4413      	add	r3, r2
 8005552:	667b      	str	r3, [r7, #100]	; 0x64
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	00da      	lsls	r2, r3, #3
 800555a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800555c:	4413      	add	r3, r2
 800555e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005562:	663b      	str	r3, [r7, #96]	; 0x60
 8005564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005566:	2200      	movs	r2, #0
 8005568:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	677b      	str	r3, [r7, #116]	; 0x74
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d12b      	bne.n	80055d0 <HAL_PCD_EP_DB_Transmit+0x516>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005586:	b29b      	uxth	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558c:	4413      	add	r3, r2
 800558e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	00da      	lsls	r2, r3, #3
 8005596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005598:	4413      	add	r3, r2
 800559a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800559e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055b4:	801a      	strh	r2, [r3, #0]
 80055b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055cc:	801a      	strh	r2, [r3, #0]
 80055ce:	e017      	b.n	8005600 <HAL_PCD_EP_DB_Transmit+0x546>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d113      	bne.n	8005600 <HAL_PCD_EP_DB_Transmit+0x546>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055e6:	4413      	add	r3, r2
 80055e8:	677b      	str	r3, [r7, #116]	; 0x74
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	00da      	lsls	r2, r3, #3
 80055f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f2:	4413      	add	r3, r2
 80055f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055f8:	673b      	str	r3, [r7, #112]	; 0x70
 80055fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055fc:	2200      	movs	r2, #0
 80055fe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	4619      	mov	r1, r3
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f00a fbb7 	bl	800fd7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005612:	2b00      	cmp	r3, #0
 8005614:	f040 811a 	bne.w	800584c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	b29b      	uxth	r3, r3
 800562a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800562e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005632:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	441a      	add	r2, r3
 8005644:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005658:	b29b      	uxth	r3, r3
 800565a:	8013      	strh	r3, [r2, #0]
 800565c:	e0f6      	b.n	800584c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800565e:	88fb      	ldrh	r3, [r7, #6]
 8005660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d121      	bne.n	80056ac <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	461a      	mov	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005682:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	441a      	add	r2, r3
 8005694:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800569c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	f040 80ca 	bne.w	800584c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	695a      	ldr	r2, [r3, #20]
 80056bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80056c0:	441a      	add	r2, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	69da      	ldr	r2, [r3, #28]
 80056ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80056ce:	441a      	add	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d30b      	bcc.n	80056f8 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	6a1a      	ldr	r2, [r3, #32]
 80056ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056f0:	1ad2      	subs	r2, r2, r3
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	621a      	str	r2, [r3, #32]
 80056f6:	e017      	b.n	8005728 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d108      	bne.n	8005712 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005700:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005710:	e00a      	b.n	8005728 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2200      	movs	r2, #0
 800571e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	657b      	str	r3, [r7, #84]	; 0x54
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d165      	bne.n	8005802 <HAL_PCD_EP_DB_Transmit+0x748>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005744:	b29b      	uxth	r3, r3
 8005746:	461a      	mov	r2, r3
 8005748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800574a:	4413      	add	r3, r2
 800574c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	00da      	lsls	r2, r3, #3
 8005754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005756:	4413      	add	r3, r2
 8005758:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800575c:	65bb      	str	r3, [r7, #88]	; 0x58
 800575e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005768:	b29a      	uxth	r2, r3
 800576a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800576c:	801a      	strh	r2, [r3, #0]
 800576e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005772:	2b3e      	cmp	r3, #62	; 0x3e
 8005774:	d91d      	bls.n	80057b2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800577a:	095b      	lsrs	r3, r3, #5
 800577c:	66bb      	str	r3, [r7, #104]	; 0x68
 800577e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	2b00      	cmp	r3, #0
 8005788:	d102      	bne.n	8005790 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800578a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800578c:	3b01      	subs	r3, #1
 800578e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29a      	uxth	r2, r3
 8005796:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005798:	b29b      	uxth	r3, r3
 800579a:	029b      	lsls	r3, r3, #10
 800579c:	b29b      	uxth	r3, r3
 800579e:	4313      	orrs	r3, r2
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	e041      	b.n	8005836 <HAL_PCD_EP_DB_Transmit+0x77c>
 80057b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <HAL_PCD_EP_DB_Transmit+0x716>
 80057ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	e032      	b.n	8005836 <HAL_PCD_EP_DB_Transmit+0x77c>
 80057d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80057d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <HAL_PCD_EP_DB_Transmit+0x730>
 80057e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057e6:	3301      	adds	r3, #1
 80057e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80057ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	029b      	lsls	r3, r3, #10
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	4313      	orrs	r3, r2
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057fe:	801a      	strh	r2, [r3, #0]
 8005800:	e019      	b.n	8005836 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	785b      	ldrb	r3, [r3, #1]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d115      	bne.n	8005836 <HAL_PCD_EP_DB_Transmit+0x77c>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005812:	b29b      	uxth	r3, r3
 8005814:	461a      	mov	r2, r3
 8005816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005818:	4413      	add	r3, r2
 800581a:	657b      	str	r3, [r7, #84]	; 0x54
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	00da      	lsls	r2, r3, #3
 8005822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005824:	4413      	add	r3, r2
 8005826:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800582a:	653b      	str	r3, [r7, #80]	; 0x50
 800582c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005830:	b29a      	uxth	r2, r3
 8005832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005834:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	6959      	ldr	r1, [r3, #20]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	895a      	ldrh	r2, [r3, #10]
 8005842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005846:	b29b      	uxth	r3, r3
 8005848:	f005 f8d6 	bl	800a9f8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005866:	82bb      	strh	r3, [r7, #20]
 8005868:	8abb      	ldrh	r3, [r7, #20]
 800586a:	f083 0310 	eor.w	r3, r3, #16
 800586e:	82bb      	strh	r3, [r7, #20]
 8005870:	8abb      	ldrh	r3, [r7, #20]
 8005872:	f083 0320 	eor.w	r3, r3, #32
 8005876:	82bb      	strh	r3, [r7, #20]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	441a      	add	r2, r3
 8005886:	8abb      	ldrh	r3, [r7, #20]
 8005888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800588c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005898:	b29b      	uxth	r3, r3
 800589a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3790      	adds	r7, #144	; 0x90
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b087      	sub	sp, #28
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	607b      	str	r3, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	817b      	strh	r3, [r7, #10]
 80058b4:	4613      	mov	r3, r2
 80058b6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80058b8:	897b      	ldrh	r3, [r7, #10]
 80058ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00b      	beq.n	80058dc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058c4:	897b      	ldrh	r3, [r7, #10]
 80058c6:	f003 0207 	and.w	r2, r3, #7
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	3310      	adds	r3, #16
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	e009      	b.n	80058f0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058dc:	897a      	ldrh	r2, [r7, #10]
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4413      	add	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80058f0:	893b      	ldrh	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d107      	bne.n	8005906 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2200      	movs	r2, #0
 80058fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	b29a      	uxth	r2, r3
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	80da      	strh	r2, [r3, #6]
 8005904:	e00b      	b.n	800591e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2201      	movs	r2, #1
 800590a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	b29a      	uxth	r2, r3
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	0c1b      	lsrs	r3, r3, #16
 8005918:	b29a      	uxth	r2, r3
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005950:	b29b      	uxth	r3, r3
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005964:	b29b      	uxth	r3, r3
 8005966:	f043 0302 	orr.w	r3, r3, #2
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a04      	ldr	r2, [pc, #16]	; (800599c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800598a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800598e:	6013      	str	r3, [r2, #0]
}
 8005990:	bf00      	nop
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	58000400 	.word	0x58000400

080059a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	58000400 	.word	0x58000400

080059bc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4a04      	ldr	r2, [pc, #16]	; (80059d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80059c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059ca:	6053      	str	r3, [r2, #4]
}
 80059cc:	bf00      	nop
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	58000400 	.word	0x58000400

080059dc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80059e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ee:	d101      	bne.n	80059f4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <LL_RCC_HSE_Enable>:
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a12:	6013      	str	r3, [r2, #0]
}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <LL_RCC_HSE_Disable>:
{
 8005a1e:	b480      	push	{r7}
 8005a20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a30:	6013      	str	r3, [r2, #0]
}
 8005a32:	bf00      	nop
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <LL_RCC_HSE_IsReady>:
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a4e:	d101      	bne.n	8005a54 <LL_RCC_HSE_IsReady+0x18>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <LL_RCC_HSE_IsReady+0x1a>
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <LL_RCC_HSI_Enable>:
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a72:	6013      	str	r3, [r2, #0]
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <LL_RCC_HSI_Disable>:
{
 8005a7e:	b480      	push	{r7}
 8005a80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a90:	6013      	str	r3, [r2, #0]
}
 8005a92:	bf00      	nop
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <LL_RCC_HSI_IsReady>:
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aae:	d101      	bne.n	8005ab4 <LL_RCC_HSI_IsReady+0x18>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e000      	b.n	8005ab6 <LL_RCC_HSI_IsReady+0x1a>
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	061b      	lsls	r3, r3, #24
 8005ad6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ada:	4313      	orrs	r3, r2
 8005adc:	604b      	str	r3, [r1, #4]
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <LL_RCC_HSI48_Enable>:
{
 8005aea:	b480      	push	{r7}
 8005aec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005af6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005afa:	f043 0301 	orr.w	r3, r3, #1
 8005afe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005b02:	bf00      	nop
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <LL_RCC_HSI48_Disable>:
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b1c:	f023 0301 	bic.w	r3, r3, #1
 8005b20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005b24:	bf00      	nop
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <LL_RCC_HSI48_IsReady>:
{
 8005b2e:	b480      	push	{r7}
 8005b30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d101      	bne.n	8005b46 <LL_RCC_HSI48_IsReady+0x18>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <LL_RCC_HSI48_IsReady+0x1a>
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <LL_RCC_LSE_Enable>:
{
 8005b52:	b480      	push	{r7}
 8005b54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b62:	f043 0301 	orr.w	r3, r3, #1
 8005b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b6a:	bf00      	nop
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <LL_RCC_LSE_Disable>:
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b8c:	bf00      	nop
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <LL_RCC_LSE_EnableBypass>:
{
 8005b96:	b480      	push	{r7}
 8005b98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ba6:	f043 0304 	orr.w	r3, r3, #4
 8005baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005bae:	bf00      	nop
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <LL_RCC_LSE_DisableBypass>:
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bc8:	f023 0304 	bic.w	r3, r3, #4
 8005bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005bd0:	bf00      	nop
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <LL_RCC_LSE_IsReady>:
{
 8005bda:	b480      	push	{r7}
 8005bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d101      	bne.n	8005bf2 <LL_RCC_LSE_IsReady+0x18>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <LL_RCC_LSE_IsReady+0x1a>
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <LL_RCC_LSI1_Enable>:
{
 8005bfe:	b480      	push	{r7}
 8005c00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005c16:	bf00      	nop
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <LL_RCC_LSI1_Disable>:
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c30:	f023 0301 	bic.w	r3, r3, #1
 8005c34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005c38:	bf00      	nop
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <LL_RCC_LSI1_IsReady>:
{
 8005c42:	b480      	push	{r7}
 8005c44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d101      	bne.n	8005c5a <LL_RCC_LSI1_IsReady+0x18>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <LL_RCC_LSI1_IsReady+0x1a>
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <LL_RCC_LSI2_Enable>:
{
 8005c66:	b480      	push	{r7}
 8005c68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c76:	f043 0304 	orr.w	r3, r3, #4
 8005c7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005c7e:	bf00      	nop
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <LL_RCC_LSI2_Disable>:
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c98:	f023 0304 	bic.w	r3, r3, #4
 8005c9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005ca0:	bf00      	nop
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <LL_RCC_LSI2_IsReady>:
{
 8005caa:	b480      	push	{r7}
 8005cac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d101      	bne.n	8005cc2 <LL_RCC_LSI2_IsReady+0x18>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e000      	b.n	8005cc4 <LL_RCC_LSI2_IsReady+0x1a>
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <LL_RCC_LSI2_SetTrimming>:
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cde:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <LL_RCC_MSI_Enable>:
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	6013      	str	r3, [r2, #0]
}
 8005d10:	bf00      	nop
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <LL_RCC_MSI_Disable>:
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	6013      	str	r3, [r2, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <LL_RCC_MSI_IsReady>:
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d101      	bne.n	8005d4e <LL_RCC_MSI_IsReady+0x16>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e000      	b.n	8005d50 <LL_RCC_MSI_IsReady+0x18>
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <LL_RCC_MSI_SetRange>:
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	600b      	str	r3, [r1, #0]
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <LL_RCC_MSI_GetRange>:
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d92:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2bb0      	cmp	r3, #176	; 0xb0
 8005d98:	d901      	bls.n	8005d9e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005d9a:	23b0      	movs	r3, #176	; 0xb0
 8005d9c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005d9e:	687b      	ldr	r3, [r7, #4]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <LL_RCC_MSI_SetCalibTrimming>:
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	021b      	lsls	r3, r3, #8
 8005dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	604b      	str	r3, [r1, #4]
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <LL_RCC_SetSysClkSource>:
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f023 0203 	bic.w	r2, r3, #3
 8005de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	608b      	str	r3, [r1, #8]
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <LL_RCC_GetSysClkSource>:
{
 8005dfe:	b480      	push	{r7}
 8005e00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 030c 	and.w	r3, r3, #12
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <LL_RCC_SetAHBPrescaler>:
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	608b      	str	r3, [r1, #8]
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <LL_C2_RCC_SetAHBPrescaler>:
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <LL_RCC_SetAHB4Prescaler>:
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e7a:	f023 020f 	bic.w	r2, r3, #15
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <LL_RCC_SetAPB1Prescaler>:
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	608b      	str	r3, [r1, #8]
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <LL_RCC_SetAPB2Prescaler>:
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	608b      	str	r3, [r1, #8]
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <LL_RCC_GetAHBPrescaler>:
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <LL_RCC_GetAHB4Prescaler>:
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f08:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <LL_RCC_GetAPB1Prescaler>:
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <LL_RCC_GetAPB2Prescaler>:
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f5e:	6013      	str	r3, [r2, #0]
}
 8005f60:	bf00      	nop
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f7c:	6013      	str	r3, [r2, #0]
}
 8005f7e:	bf00      	nop
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f9a:	d101      	bne.n	8005fa0 <LL_RCC_PLL_IsReady+0x18>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e000      	b.n	8005fa2 <LL_RCC_PLL_IsReady+0x1a>
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0303 	and.w	r3, r3, #3
}
 8006004:	4618      	mov	r0, r3
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800600e:	b480      	push	{r7}
 8006010:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800601c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006020:	d101      	bne.n	8006026 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006032:	b480      	push	{r7}
 8006034:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800603e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006042:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006046:	d101      	bne.n	800604c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800605c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006060:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800606c:	d101      	bne.n	8006072 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800607e:	b480      	push	{r7}
 8006080:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006090:	d101      	bne.n	8006096 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80060a2:	b480      	push	{r7}
 80060a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80060a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060b4:	d101      	bne.n	80060ba <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060c8:	b590      	push	{r4, r7, lr}
 80060ca:	b08d      	sub	sp, #52	; 0x34
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e363      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 808d 	beq.w	8006202 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060e8:	f7ff fe89 	bl	8005dfe <LL_RCC_GetSysClkSource>
 80060ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060ee:	f7ff ff82 	bl	8005ff6 <LL_RCC_PLL_GetMainSource>
 80060f2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <HAL_RCC_OscConfig+0x3e>
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	2b0c      	cmp	r3, #12
 80060fe:	d147      	bne.n	8006190 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	2b01      	cmp	r3, #1
 8006104:	d144      	bne.n	8006190 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e347      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006116:	f7ff fe34 	bl	8005d82 <LL_RCC_MSI_GetRange>
 800611a:	4603      	mov	r3, r0
 800611c:	429c      	cmp	r4, r3
 800611e:	d914      	bls.n	800614a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fd2f 	bl	8006b88 <RCC_SetFlashLatencyFromMSIRange>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e336      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff fe0e 	bl	8005d5a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff fe32 	bl	8005dac <LL_RCC_MSI_SetCalibTrimming>
 8006148:	e013      	b.n	8006172 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fe03 	bl	8005d5a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff fe27 	bl	8005dac <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fd10 	bl	8006b88 <RCC_SetFlashLatencyFromMSIRange>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e317      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006172:	f000 fcc9 	bl	8006b08 <HAL_RCC_GetHCLKFreq>
 8006176:	4603      	mov	r3, r0
 8006178:	4aa4      	ldr	r2, [pc, #656]	; (800640c <HAL_RCC_OscConfig+0x344>)
 800617a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800617c:	4ba4      	ldr	r3, [pc, #656]	; (8006410 <HAL_RCC_OscConfig+0x348>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f7fc f90b 	bl	800239c <HAL_InitTick>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d039      	beq.n	8006200 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e308      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01e      	beq.n	80061d6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006198:	f7ff fdb0 	bl	8005cfc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800619c:	f7fc f94c 	bl	8002438 <HAL_GetTick>
 80061a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061a4:	f7fc f948 	bl	8002438 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e2f5      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80061b6:	f7ff fdbf 	bl	8005d38 <LL_RCC_MSI_IsReady>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0f1      	beq.n	80061a4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fdc8 	bl	8005d5a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff fdec 	bl	8005dac <LL_RCC_MSI_SetCalibTrimming>
 80061d4:	e015      	b.n	8006202 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061d6:	f7ff fda0 	bl	8005d1a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061da:	f7fc f92d 	bl	8002438 <HAL_GetTick>
 80061de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80061e0:	e008      	b.n	80061f4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061e2:	f7fc f929 	bl	8002438 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e2d6      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80061f4:	f7ff fda0 	bl	8005d38 <LL_RCC_MSI_IsReady>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1f1      	bne.n	80061e2 <HAL_RCC_OscConfig+0x11a>
 80061fe:	e000      	b.n	8006202 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006200:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d047      	beq.n	800629e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800620e:	f7ff fdf6 	bl	8005dfe <LL_RCC_GetSysClkSource>
 8006212:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006214:	f7ff feef 	bl	8005ff6 <LL_RCC_PLL_GetMainSource>
 8006218:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	2b08      	cmp	r3, #8
 800621e:	d005      	beq.n	800622c <HAL_RCC_OscConfig+0x164>
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	2b0c      	cmp	r3, #12
 8006224:	d108      	bne.n	8006238 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	2b03      	cmp	r3, #3
 800622a:	d105      	bne.n	8006238 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d134      	bne.n	800629e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e2b4      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006240:	d102      	bne.n	8006248 <HAL_RCC_OscConfig+0x180>
 8006242:	f7ff fbdd 	bl	8005a00 <LL_RCC_HSE_Enable>
 8006246:	e001      	b.n	800624c <HAL_RCC_OscConfig+0x184>
 8006248:	f7ff fbe9 	bl	8005a1e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d012      	beq.n	800627a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006254:	f7fc f8f0 	bl	8002438 <HAL_GetTick>
 8006258:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800625c:	f7fc f8ec 	bl	8002438 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b64      	cmp	r3, #100	; 0x64
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e299      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800626e:	f7ff fbe5 	bl	8005a3c <LL_RCC_HSE_IsReady>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f1      	beq.n	800625c <HAL_RCC_OscConfig+0x194>
 8006278:	e011      	b.n	800629e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627a:	f7fc f8dd 	bl	8002438 <HAL_GetTick>
 800627e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006282:	f7fc f8d9 	bl	8002438 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b64      	cmp	r3, #100	; 0x64
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e286      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006294:	f7ff fbd2 	bl	8005a3c <LL_RCC_HSE_IsReady>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1f1      	bne.n	8006282 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d04c      	beq.n	8006344 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062aa:	f7ff fda8 	bl	8005dfe <LL_RCC_GetSysClkSource>
 80062ae:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062b0:	f7ff fea1 	bl	8005ff6 <LL_RCC_PLL_GetMainSource>
 80062b4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d005      	beq.n	80062c8 <HAL_RCC_OscConfig+0x200>
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	2b0c      	cmp	r3, #12
 80062c0:	d10e      	bne.n	80062e0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d10b      	bne.n	80062e0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e266      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fbf1 	bl	8005ac0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80062de:	e031      	b.n	8006344 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d019      	beq.n	800631c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062e8:	f7ff fbba 	bl	8005a60 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ec:	f7fc f8a4 	bl	8002438 <HAL_GetTick>
 80062f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062f4:	f7fc f8a0 	bl	8002438 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e24d      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006306:	f7ff fbc9 	bl	8005a9c <LL_RCC_HSI_IsReady>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f1      	beq.n	80062f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff fbd3 	bl	8005ac0 <LL_RCC_HSI_SetCalibTrimming>
 800631a:	e013      	b.n	8006344 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800631c:	f7ff fbaf 	bl	8005a7e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006320:	f7fc f88a 	bl	8002438 <HAL_GetTick>
 8006324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006328:	f7fc f886 	bl	8002438 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e233      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800633a:	f7ff fbaf 	bl	8005a9c <LL_RCC_HSI_IsReady>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1f1      	bne.n	8006328 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b00      	cmp	r3, #0
 800634e:	d106      	bne.n	800635e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 80a3 	beq.w	80064a4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d076      	beq.n	8006454 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0310 	and.w	r3, r3, #16
 800636e:	2b00      	cmp	r3, #0
 8006370:	d046      	beq.n	8006400 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006372:	f7ff fc66 	bl	8005c42 <LL_RCC_LSI1_IsReady>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d113      	bne.n	80063a4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800637c:	f7ff fc3f 	bl	8005bfe <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006380:	f7fc f85a 	bl	8002438 <HAL_GetTick>
 8006384:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006388:	f7fc f856 	bl	8002438 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e203      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800639a:	f7ff fc52 	bl	8005c42 <LL_RCC_LSI1_IsReady>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f1      	beq.n	8006388 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80063a4:	f7ff fc5f 	bl	8005c66 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a8:	f7fc f846 	bl	8002438 <HAL_GetTick>
 80063ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80063b0:	f7fc f842 	bl	8002438 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e1ef      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80063c2:	f7ff fc72 	bl	8005caa <LL_RCC_LSI2_IsReady>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0f1      	beq.n	80063b0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff fc7c 	bl	8005cce <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80063d6:	f7ff fc23 	bl	8005c20 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063da:	f7fc f82d 	bl	8002438 <HAL_GetTick>
 80063de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80063e0:	e008      	b.n	80063f4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80063e2:	f7fc f829 	bl	8002438 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d901      	bls.n	80063f4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e1d6      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80063f4:	f7ff fc25 	bl	8005c42 <LL_RCC_LSI1_IsReady>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f1      	bne.n	80063e2 <HAL_RCC_OscConfig+0x31a>
 80063fe:	e051      	b.n	80064a4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006400:	f7ff fbfd 	bl	8005bfe <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006404:	f7fc f818 	bl	8002438 <HAL_GetTick>
 8006408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800640a:	e00c      	b.n	8006426 <HAL_RCC_OscConfig+0x35e>
 800640c:	20000008 	.word	0x20000008
 8006410:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006414:	f7fc f810 	bl	8002438 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e1bd      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006426:	f7ff fc0c 	bl	8005c42 <LL_RCC_LSI1_IsReady>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0f1      	beq.n	8006414 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006430:	f7ff fc2a 	bl	8005c88 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006436:	f7fb ffff 	bl	8002438 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b03      	cmp	r3, #3
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e1ac      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006448:	f7ff fc2f 	bl	8005caa <LL_RCC_LSI2_IsReady>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f1      	bne.n	8006436 <HAL_RCC_OscConfig+0x36e>
 8006452:	e027      	b.n	80064a4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006454:	f7ff fc18 	bl	8005c88 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006458:	f7fb ffee 	bl	8002438 <HAL_GetTick>
 800645c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006460:	f7fb ffea 	bl	8002438 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b03      	cmp	r3, #3
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e197      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006472:	f7ff fc1a 	bl	8005caa <LL_RCC_LSI2_IsReady>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1f1      	bne.n	8006460 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800647c:	f7ff fbd0 	bl	8005c20 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006480:	f7fb ffda 	bl	8002438 <HAL_GetTick>
 8006484:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006488:	f7fb ffd6 	bl	8002438 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e183      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800649a:	f7ff fbd2 	bl	8005c42 <LL_RCC_LSI1_IsReady>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f1      	bne.n	8006488 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d05b      	beq.n	8006568 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064b0:	4ba7      	ldr	r3, [pc, #668]	; (8006750 <HAL_RCC_OscConfig+0x688>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d114      	bne.n	80064e6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80064bc:	f7ff fa60 	bl	8005980 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064c0:	f7fb ffba 	bl	8002438 <HAL_GetTick>
 80064c4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064c6:	e008      	b.n	80064da <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c8:	f7fb ffb6 	bl	8002438 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e163      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064da:	4b9d      	ldr	r3, [pc, #628]	; (8006750 <HAL_RCC_OscConfig+0x688>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f0      	beq.n	80064c8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d102      	bne.n	80064f4 <HAL_RCC_OscConfig+0x42c>
 80064ee:	f7ff fb30 	bl	8005b52 <LL_RCC_LSE_Enable>
 80064f2:	e00c      	b.n	800650e <HAL_RCC_OscConfig+0x446>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	2b05      	cmp	r3, #5
 80064fa:	d104      	bne.n	8006506 <HAL_RCC_OscConfig+0x43e>
 80064fc:	f7ff fb4b 	bl	8005b96 <LL_RCC_LSE_EnableBypass>
 8006500:	f7ff fb27 	bl	8005b52 <LL_RCC_LSE_Enable>
 8006504:	e003      	b.n	800650e <HAL_RCC_OscConfig+0x446>
 8006506:	f7ff fb35 	bl	8005b74 <LL_RCC_LSE_Disable>
 800650a:	f7ff fb55 	bl	8005bb8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d014      	beq.n	8006540 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006516:	f7fb ff8f 	bl	8002438 <HAL_GetTick>
 800651a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800651c:	e00a      	b.n	8006534 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800651e:	f7fb ff8b 	bl	8002438 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	f241 3288 	movw	r2, #5000	; 0x1388
 800652c:	4293      	cmp	r3, r2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e136      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006534:	f7ff fb51 	bl	8005bda <LL_RCC_LSE_IsReady>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d0ef      	beq.n	800651e <HAL_RCC_OscConfig+0x456>
 800653e:	e013      	b.n	8006568 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006540:	f7fb ff7a 	bl	8002438 <HAL_GetTick>
 8006544:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006546:	e00a      	b.n	800655e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006548:	f7fb ff76 	bl	8002438 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	f241 3288 	movw	r2, #5000	; 0x1388
 8006556:	4293      	cmp	r3, r2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e121      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800655e:	f7ff fb3c 	bl	8005bda <LL_RCC_LSE_IsReady>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1ef      	bne.n	8006548 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d02c      	beq.n	80065ce <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006578:	2b00      	cmp	r3, #0
 800657a:	d014      	beq.n	80065a6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800657c:	f7ff fab5 	bl	8005aea <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006580:	f7fb ff5a 	bl	8002438 <HAL_GetTick>
 8006584:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006586:	e008      	b.n	800659a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006588:	f7fb ff56 	bl	8002438 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e103      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800659a:	f7ff fac8 	bl	8005b2e <LL_RCC_HSI48_IsReady>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d0f1      	beq.n	8006588 <HAL_RCC_OscConfig+0x4c0>
 80065a4:	e013      	b.n	80065ce <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065a6:	f7ff fab1 	bl	8005b0c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065aa:	f7fb ff45 	bl	8002438 <HAL_GetTick>
 80065ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065b2:	f7fb ff41 	bl	8002438 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e0ee      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80065c4:	f7ff fab3 	bl	8005b2e <LL_RCC_HSI48_IsReady>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1f1      	bne.n	80065b2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 80e4 	beq.w	80067a0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065d8:	f7ff fc11 	bl	8005dfe <LL_RCC_GetSysClkSource>
 80065dc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80065de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	f040 80b4 	bne.w	8006758 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f003 0203 	and.w	r2, r3, #3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d123      	bne.n	8006646 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006608:	429a      	cmp	r2, r3
 800660a:	d11c      	bne.n	8006646 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	0a1b      	lsrs	r3, r3, #8
 8006610:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006618:	429a      	cmp	r2, r3
 800661a:	d114      	bne.n	8006646 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006626:	429a      	cmp	r2, r3
 8006628:	d10d      	bne.n	8006646 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006634:	429a      	cmp	r2, r3
 8006636:	d106      	bne.n	8006646 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006642:	429a      	cmp	r2, r3
 8006644:	d05d      	beq.n	8006702 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b0c      	cmp	r3, #12
 800664a:	d058      	beq.n	80066fe <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800664c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e0a1      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800665e:	f7ff fc84 	bl	8005f6a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006662:	f7fb fee9 	bl	8002438 <HAL_GetTick>
 8006666:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800666a:	f7fb fee5 	bl	8002438 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e092      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800667c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1ef      	bne.n	800666a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800668a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	4b30      	ldr	r3, [pc, #192]	; (8006754 <HAL_RCC_OscConfig+0x68c>)
 8006692:	4013      	ands	r3, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800669c:	4311      	orrs	r1, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066a2:	0212      	lsls	r2, r2, #8
 80066a4:	4311      	orrs	r1, r2
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80066aa:	4311      	orrs	r1, r2
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80066b0:	4311      	orrs	r1, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80066b6:	430a      	orrs	r2, r1
 80066b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066bc:	4313      	orrs	r3, r2
 80066be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80066c0:	f7ff fc44 	bl	8005f4c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80066d4:	f7fb feb0 	bl	8002438 <HAL_GetTick>
 80066d8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066dc:	f7fb feac 	bl	8002438 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e059      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0ef      	beq.n	80066dc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066fc:	e050      	b.n	80067a0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e04f      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d147      	bne.n	80067a0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006710:	f7ff fc1c 	bl	8005f4c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800671e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006722:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006724:	f7fb fe88 	bl	8002438 <HAL_GetTick>
 8006728:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800672c:	f7fb fe84 	bl	8002438 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e031      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800673e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0ef      	beq.n	800672c <HAL_RCC_OscConfig+0x664>
 800674c:	e028      	b.n	80067a0 <HAL_RCC_OscConfig+0x6d8>
 800674e:	bf00      	nop
 8006750:	58000400 	.word	0x58000400
 8006754:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b0c      	cmp	r3, #12
 800675c:	d01e      	beq.n	800679c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800675e:	f7ff fc04 	bl	8005f6a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006762:	f7fb fe69 	bl	8002438 <HAL_GetTick>
 8006766:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006768:	e008      	b.n	800677c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800676a:	f7fb fe65 	bl	8002438 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e012      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800677c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1ef      	bne.n	800676a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800678a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006794:	4b05      	ldr	r3, [pc, #20]	; (80067ac <HAL_RCC_OscConfig+0x6e4>)
 8006796:	4013      	ands	r3, r2
 8006798:	60cb      	str	r3, [r1, #12]
 800679a:	e001      	b.n	80067a0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3734      	adds	r7, #52	; 0x34
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd90      	pop	{r4, r7, pc}
 80067aa:	bf00      	nop
 80067ac:	eefefffc 	.word	0xeefefffc

080067b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e12d      	b.n	8006a20 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067c4:	4b98      	ldr	r3, [pc, #608]	; (8006a28 <HAL_RCC_ClockConfig+0x278>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d91b      	bls.n	800680a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067d2:	4b95      	ldr	r3, [pc, #596]	; (8006a28 <HAL_RCC_ClockConfig+0x278>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f023 0207 	bic.w	r2, r3, #7
 80067da:	4993      	ldr	r1, [pc, #588]	; (8006a28 <HAL_RCC_ClockConfig+0x278>)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	4313      	orrs	r3, r2
 80067e0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e2:	f7fb fe29 	bl	8002438 <HAL_GetTick>
 80067e6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80067ea:	f7fb fe25 	bl	8002438 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e111      	b.n	8006a20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fc:	4b8a      	ldr	r3, [pc, #552]	; (8006a28 <HAL_RCC_ClockConfig+0x278>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d1ef      	bne.n	80067ea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d016      	beq.n	8006844 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff fafb 	bl	8005e16 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006820:	f7fb fe0a 	bl	8002438 <HAL_GetTick>
 8006824:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006826:	e008      	b.n	800683a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006828:	f7fb fe06 	bl	8002438 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e0f2      	b.n	8006a20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800683a:	f7ff fbe8 	bl	800600e <LL_RCC_IsActiveFlag_HPRE>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0f1      	beq.n	8006828 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	d016      	beq.n	800687e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff faf2 	bl	8005e3e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800685a:	f7fb fded 	bl	8002438 <HAL_GetTick>
 800685e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006860:	e008      	b.n	8006874 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006862:	f7fb fde9 	bl	8002438 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e0d5      	b.n	8006a20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006874:	f7ff fbdd 	bl	8006032 <LL_RCC_IsActiveFlag_C2HPRE>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f1      	beq.n	8006862 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006886:	2b00      	cmp	r3, #0
 8006888:	d016      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff faeb 	bl	8005e6a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006894:	f7fb fdd0 	bl	8002438 <HAL_GetTick>
 8006898:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800689a:	e008      	b.n	80068ae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800689c:	f7fb fdcc 	bl	8002438 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e0b8      	b.n	8006a20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80068ae:	f7ff fbd3 	bl	8006058 <LL_RCC_IsActiveFlag_SHDHPRE>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0f1      	beq.n	800689c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d016      	beq.n	80068f2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff fae5 	bl	8005e98 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80068ce:	f7fb fdb3 	bl	8002438 <HAL_GetTick>
 80068d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80068d4:	e008      	b.n	80068e8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80068d6:	f7fb fdaf 	bl	8002438 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e09b      	b.n	8006a20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80068e8:	f7ff fbc9 	bl	800607e <LL_RCC_IsActiveFlag_PPRE1>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0f1      	beq.n	80068d6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d017      	beq.n	800692e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff fadb 	bl	8005ec0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800690a:	f7fb fd95 	bl	8002438 <HAL_GetTick>
 800690e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006910:	e008      	b.n	8006924 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006912:	f7fb fd91 	bl	8002438 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b02      	cmp	r3, #2
 800691e:	d901      	bls.n	8006924 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e07d      	b.n	8006a20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006924:	f7ff fbbd 	bl	80060a2 <LL_RCC_IsActiveFlag_PPRE2>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0f1      	beq.n	8006912 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d043      	beq.n	80069c2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d106      	bne.n	8006950 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006942:	f7ff f87b 	bl	8005a3c <LL_RCC_HSE_IsReady>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d11e      	bne.n	800698a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e067      	b.n	8006a20 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2b03      	cmp	r3, #3
 8006956:	d106      	bne.n	8006966 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006958:	f7ff fb16 	bl	8005f88 <LL_RCC_PLL_IsReady>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d113      	bne.n	800698a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e05c      	b.n	8006a20 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800696e:	f7ff f9e3 	bl	8005d38 <LL_RCC_MSI_IsReady>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d108      	bne.n	800698a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e051      	b.n	8006a20 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800697c:	f7ff f88e 	bl	8005a9c <LL_RCC_HSI_IsReady>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e04a      	b.n	8006a20 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff fa21 	bl	8005dd6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006994:	f7fb fd50 	bl	8002438 <HAL_GetTick>
 8006998:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800699a:	e00a      	b.n	80069b2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800699c:	f7fb fd4c 	bl	8002438 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e036      	b.n	8006a20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069b2:	f7ff fa24 	bl	8005dfe <LL_RCC_GetSysClkSource>
 80069b6:	4602      	mov	r2, r0
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	429a      	cmp	r2, r3
 80069c0:	d1ec      	bne.n	800699c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069c2:	4b19      	ldr	r3, [pc, #100]	; (8006a28 <HAL_RCC_ClockConfig+0x278>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d21b      	bcs.n	8006a08 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d0:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <HAL_RCC_ClockConfig+0x278>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f023 0207 	bic.w	r2, r3, #7
 80069d8:	4913      	ldr	r1, [pc, #76]	; (8006a28 <HAL_RCC_ClockConfig+0x278>)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	4313      	orrs	r3, r2
 80069de:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e0:	f7fb fd2a 	bl	8002438 <HAL_GetTick>
 80069e4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80069e8:	f7fb fd26 	bl	8002438 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e012      	b.n	8006a20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069fa:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <HAL_RCC_ClockConfig+0x278>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d1ef      	bne.n	80069e8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006a08:	f000 f87e 	bl	8006b08 <HAL_RCC_GetHCLKFreq>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	4a07      	ldr	r2, [pc, #28]	; (8006a2c <HAL_RCC_ClockConfig+0x27c>)
 8006a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006a12:	f7fb fd1d 	bl	8002450 <HAL_GetTickPrio>
 8006a16:	4603      	mov	r3, r0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fb fcbf 	bl	800239c <HAL_InitTick>
 8006a1e:	4603      	mov	r3, r0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	58004000 	.word	0x58004000
 8006a2c:	20000008 	.word	0x20000008

08006a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a30:	b590      	push	{r4, r7, lr}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a36:	f7ff f9e2 	bl	8005dfe <LL_RCC_GetSysClkSource>
 8006a3a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006a42:	f7ff f99e 	bl	8005d82 <LL_RCC_MSI_GetRange>
 8006a46:	4603      	mov	r3, r0
 8006a48:	091b      	lsrs	r3, r3, #4
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	4a2b      	ldr	r2, [pc, #172]	; (8006afc <HAL_RCC_GetSysClockFreq+0xcc>)
 8006a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	e04b      	b.n	8006af0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d102      	bne.n	8006a64 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a5e:	4b28      	ldr	r3, [pc, #160]	; (8006b00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	e045      	b.n	8006af0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b08      	cmp	r3, #8
 8006a68:	d10a      	bne.n	8006a80 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006a6a:	f7fe ffb7 	bl	80059dc <LL_RCC_HSE_IsEnabledDiv2>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d102      	bne.n	8006a7a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006a74:	4b22      	ldr	r3, [pc, #136]	; (8006b00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	e03a      	b.n	8006af0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006a7a:	4b22      	ldr	r3, [pc, #136]	; (8006b04 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	e037      	b.n	8006af0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006a80:	f7ff fab9 	bl	8005ff6 <LL_RCC_PLL_GetMainSource>
 8006a84:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d003      	beq.n	8006a94 <HAL_RCC_GetSysClockFreq+0x64>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d003      	beq.n	8006a9a <HAL_RCC_GetSysClockFreq+0x6a>
 8006a92:	e00d      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006a94:	4b1a      	ldr	r3, [pc, #104]	; (8006b00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a96:	60bb      	str	r3, [r7, #8]
        break;
 8006a98:	e015      	b.n	8006ac6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006a9a:	f7fe ff9f 	bl	80059dc <LL_RCC_HSE_IsEnabledDiv2>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d102      	bne.n	8006aaa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006aa4:	4b16      	ldr	r3, [pc, #88]	; (8006b00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006aa6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006aa8:	e00d      	b.n	8006ac6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006aaa:	4b16      	ldr	r3, [pc, #88]	; (8006b04 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006aac:	60bb      	str	r3, [r7, #8]
        break;
 8006aae:	e00a      	b.n	8006ac6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006ab0:	f7ff f967 	bl	8005d82 <LL_RCC_MSI_GetRange>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	091b      	lsrs	r3, r3, #4
 8006ab8:	f003 030f 	and.w	r3, r3, #15
 8006abc:	4a0f      	ldr	r2, [pc, #60]	; (8006afc <HAL_RCC_GetSysClockFreq+0xcc>)
 8006abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac2:	60bb      	str	r3, [r7, #8]
        break;
 8006ac4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006ac6:	f7ff fa71 	bl	8005fac <LL_RCC_PLL_GetN>
 8006aca:	4602      	mov	r2, r0
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	fb03 f402 	mul.w	r4, r3, r2
 8006ad2:	f7ff fa84 	bl	8005fde <LL_RCC_PLL_GetDivider>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	091b      	lsrs	r3, r3, #4
 8006ada:	3301      	adds	r3, #1
 8006adc:	fbb4 f4f3 	udiv	r4, r4, r3
 8006ae0:	f7ff fa71 	bl	8005fc6 <LL_RCC_PLL_GetR>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	0f5b      	lsrs	r3, r3, #29
 8006ae8:	3301      	adds	r3, #1
 8006aea:	fbb4 f3f3 	udiv	r3, r4, r3
 8006aee:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006af0:	68fb      	ldr	r3, [r7, #12]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd90      	pop	{r4, r7, pc}
 8006afa:	bf00      	nop
 8006afc:	08010aa4 	.word	0x08010aa4
 8006b00:	00f42400 	.word	0x00f42400
 8006b04:	01e84800 	.word	0x01e84800

08006b08 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b08:	b598      	push	{r3, r4, r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006b0c:	f7ff ff90 	bl	8006a30 <HAL_RCC_GetSysClockFreq>
 8006b10:	4604      	mov	r4, r0
 8006b12:	f7ff f9e9 	bl	8005ee8 <LL_RCC_GetAHBPrescaler>
 8006b16:	4603      	mov	r3, r0
 8006b18:	091b      	lsrs	r3, r3, #4
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	4a03      	ldr	r2, [pc, #12]	; (8006b2c <HAL_RCC_GetHCLKFreq+0x24>)
 8006b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b24:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	bd98      	pop	{r3, r4, r7, pc}
 8006b2c:	08010a44 	.word	0x08010a44

08006b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b30:	b598      	push	{r3, r4, r7, lr}
 8006b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006b34:	f7ff ffe8 	bl	8006b08 <HAL_RCC_GetHCLKFreq>
 8006b38:	4604      	mov	r4, r0
 8006b3a:	f7ff f9ef 	bl	8005f1c <LL_RCC_GetAPB1Prescaler>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	0a1b      	lsrs	r3, r3, #8
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	4a04      	ldr	r2, [pc, #16]	; (8006b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b4c:	f003 031f 	and.w	r3, r3, #31
 8006b50:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	bd98      	pop	{r3, r4, r7, pc}
 8006b58:	08010a84 	.word	0x08010a84

08006b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b5c:	b598      	push	{r3, r4, r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006b60:	f7ff ffd2 	bl	8006b08 <HAL_RCC_GetHCLKFreq>
 8006b64:	4604      	mov	r4, r0
 8006b66:	f7ff f9e5 	bl	8005f34 <LL_RCC_GetAPB2Prescaler>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	0adb      	lsrs	r3, r3, #11
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	4a04      	ldr	r2, [pc, #16]	; (8006b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b78:	f003 031f 	and.w	r3, r3, #31
 8006b7c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	bd98      	pop	{r3, r4, r7, pc}
 8006b84:	08010a84 	.word	0x08010a84

08006b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006b88:	b590      	push	{r4, r7, lr}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2bb0      	cmp	r3, #176	; 0xb0
 8006b94:	d903      	bls.n	8006b9e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006b96:	4b15      	ldr	r3, [pc, #84]	; (8006bec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	e007      	b.n	8006bae <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	091b      	lsrs	r3, r3, #4
 8006ba2:	f003 030f 	and.w	r3, r3, #15
 8006ba6:	4a11      	ldr	r2, [pc, #68]	; (8006bec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bac:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006bae:	f7ff f9a7 	bl	8005f00 <LL_RCC_GetAHB4Prescaler>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	091b      	lsrs	r3, r3, #4
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	4a0d      	ldr	r2, [pc, #52]	; (8006bf0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4a0a      	ldr	r2, [pc, #40]	; (8006bf4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd0:	0c9c      	lsrs	r4, r3, #18
 8006bd2:	f7fe fee5 	bl	80059a0 <HAL_PWREx_GetVoltageRange>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 f80c 	bl	8006bf8 <RCC_SetFlashLatency>
 8006be0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd90      	pop	{r4, r7, pc}
 8006bea:	bf00      	nop
 8006bec:	08010aa4 	.word	0x08010aa4
 8006bf0:	08010a44 	.word	0x08010a44
 8006bf4:	431bde83 	.word	0x431bde83

08006bf8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006bf8:	b590      	push	{r4, r7, lr}
 8006bfa:	b093      	sub	sp, #76	; 0x4c
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006c02:	4b37      	ldr	r3, [pc, #220]	; (8006ce0 <RCC_SetFlashLatency+0xe8>)
 8006c04:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006c08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006c0e:	4a35      	ldr	r2, [pc, #212]	; (8006ce4 <RCC_SetFlashLatency+0xec>)
 8006c10:	f107 031c 	add.w	r3, r7, #28
 8006c14:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006c1a:	4b33      	ldr	r3, [pc, #204]	; (8006ce8 <RCC_SetFlashLatency+0xf0>)
 8006c1c:	f107 040c 	add.w	r4, r7, #12
 8006c20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006c26:	2300      	movs	r3, #0
 8006c28:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c30:	d11a      	bne.n	8006c68 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006c32:	2300      	movs	r3, #0
 8006c34:	643b      	str	r3, [r7, #64]	; 0x40
 8006c36:	e013      	b.n	8006c60 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	3348      	adds	r3, #72	; 0x48
 8006c3e:	443b      	add	r3, r7
 8006c40:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d807      	bhi.n	8006c5a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	3348      	adds	r3, #72	; 0x48
 8006c50:	443b      	add	r3, r7
 8006c52:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006c56:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006c58:	e020      	b.n	8006c9c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d9e8      	bls.n	8006c38 <RCC_SetFlashLatency+0x40>
 8006c66:	e019      	b.n	8006c9c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006c68:	2300      	movs	r3, #0
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c6c:	e013      	b.n	8006c96 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	3348      	adds	r3, #72	; 0x48
 8006c74:	443b      	add	r3, r7
 8006c76:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d807      	bhi.n	8006c90 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	3348      	adds	r3, #72	; 0x48
 8006c86:	443b      	add	r3, r7
 8006c88:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006c8c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006c8e:	e005      	b.n	8006c9c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c92:	3301      	adds	r3, #1
 8006c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d9e8      	bls.n	8006c6e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006c9c:	4b13      	ldr	r3, [pc, #76]	; (8006cec <RCC_SetFlashLatency+0xf4>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f023 0207 	bic.w	r2, r3, #7
 8006ca4:	4911      	ldr	r1, [pc, #68]	; (8006cec <RCC_SetFlashLatency+0xf4>)
 8006ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cac:	f7fb fbc4 	bl	8002438 <HAL_GetTick>
 8006cb0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006cb2:	e008      	b.n	8006cc6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006cb4:	f7fb fbc0 	bl	8002438 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d901      	bls.n	8006cc6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e007      	b.n	8006cd6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <RCC_SetFlashLatency+0xf4>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0307 	and.w	r3, r3, #7
 8006cce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d1ef      	bne.n	8006cb4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	374c      	adds	r7, #76	; 0x4c
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd90      	pop	{r4, r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	0801085c 	.word	0x0801085c
 8006ce4:	0801086c 	.word	0x0801086c
 8006ce8:	08010878 	.word	0x08010878
 8006cec:	58004000 	.word	0x58004000

08006cf0 <LL_RCC_LSE_IsEnabled>:
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <LL_RCC_LSE_IsEnabled+0x18>
 8006d04:	2301      	movs	r3, #1
 8006d06:	e000      	b.n	8006d0a <LL_RCC_LSE_IsEnabled+0x1a>
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <LL_RCC_LSE_IsReady>:
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d101      	bne.n	8006d2c <LL_RCC_LSE_IsReady+0x18>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <LL_RCC_LSE_IsReady+0x1a>
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <LL_RCC_MSI_EnablePLLMode>:
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8006d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d46:	f043 0304 	orr.w	r3, r3, #4
 8006d4a:	6013      	str	r3, [r2, #0]
}
 8006d4c:	bf00      	nop
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <LL_RCC_SetRFWKPClockSource>:
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <LL_RCC_SetSMPSClockSource>:
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	f023 0203 	bic.w	r2, r3, #3
 8006d94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <LL_RCC_SetSMPSPrescaler>:
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006dbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <LL_RCC_SetUSARTClockSource>:
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de2:	f023 0203 	bic.w	r2, r3, #3
 8006de6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <LL_RCC_SetLPUARTClockSource>:
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <LL_RCC_SetI2CClockSource>:
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	091b      	lsrs	r3, r3, #4
 8006e3e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006e42:	43db      	mvns	r3, r3
 8006e44:	401a      	ands	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e52:	4313      	orrs	r3, r2
 8006e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <LL_RCC_SetLPTIMClockSource>:
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	0c1b      	lsrs	r3, r3, #16
 8006e78:	041b      	lsls	r3, r3, #16
 8006e7a:	43db      	mvns	r3, r3
 8006e7c:	401a      	ands	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	041b      	lsls	r3, r3, #16
 8006e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <LL_RCC_SetSAIClockSource>:
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006eac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <LL_RCC_SetRNGClockSource>:
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <LL_RCC_SetCLK48ClockSource>:
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <LL_RCC_SetUSBClockSource>:
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff ffe3 	bl	8006ef0 <LL_RCC_SetCLK48ClockSource>
}
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <LL_RCC_SetADCClockSource>:
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <LL_RCC_SetRTCClockSource>:
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <LL_RCC_GetRTCClockSource>:
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <LL_RCC_ForceBackupDomainReset>:
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006fbc:	bf00      	nop
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006fde:	bf00      	nop
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <LL_RCC_PLLSAI1_Enable>:
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ff6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ffa:	6013      	str	r3, [r2, #0]
}
 8006ffc:	bf00      	nop
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <LL_RCC_PLLSAI1_Disable>:
{
 8007006:	b480      	push	{r7}
 8007008:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800700a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007014:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007018:	6013      	str	r3, [r2, #0]
}
 800701a:	bf00      	nop
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <LL_RCC_PLLSAI1_IsReady>:
{
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007032:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007036:	d101      	bne.n	800703c <LL_RCC_PLLSAI1_IsReady+0x18>
 8007038:	2301      	movs	r3, #1
 800703a:	e000      	b.n	800703e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b088      	sub	sp, #32
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007050:	2300      	movs	r3, #0
 8007052:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007054:	2300      	movs	r3, #0
 8007056:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d034      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007068:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800706c:	d021      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800706e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007072:	d81b      	bhi.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007074:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007078:	d01d      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800707a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800707e:	d815      	bhi.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00b      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007084:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007088:	d110      	bne.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800708a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007098:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800709a:	e00d      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3304      	adds	r3, #4
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 f94d 	bl	8007340 <RCCEx_PLLSAI1_ConfigNP>
 80070a6:	4603      	mov	r3, r0
 80070a8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80070aa:	e005      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	77fb      	strb	r3, [r7, #31]
        break;
 80070b0:	e002      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80070b2:	bf00      	nop
 80070b4:	e000      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80070b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b8:	7ffb      	ldrb	r3, [r7, #31]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d105      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff fee8 	bl	8006e98 <LL_RCC_SetSAIClockSource>
 80070c8:	e001      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ca:	7ffb      	ldrb	r3, [r7, #31]
 80070cc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d046      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80070da:	f7ff ff56 	bl	8006f8a <LL_RCC_GetRTCClockSource>
 80070de:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d03c      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80070ea:	f7fe fc49 	bl	8005980 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d105      	bne.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7ff ff30 	bl	8006f5e <LL_RCC_SetRTCClockSource>
 80070fe:	e02e      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007108:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800710a:	f7ff ff4b 	bl	8006fa4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800710e:	f7ff ff5a 	bl	8006fc6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	4313      	orrs	r3, r2
 800711e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800712a:	f7ff fde1 	bl	8006cf0 <LL_RCC_LSE_IsEnabled>
 800712e:	4603      	mov	r3, r0
 8007130:	2b01      	cmp	r3, #1
 8007132:	d114      	bne.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007134:	f7fb f980 	bl	8002438 <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800713a:	e00b      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800713c:	f7fb f97c 	bl	8002438 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	f241 3288 	movw	r2, #5000	; 0x1388
 800714a:	4293      	cmp	r3, r2
 800714c:	d902      	bls.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	77fb      	strb	r3, [r7, #31]
              break;
 8007152:	e004      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007154:	f7ff fdde 	bl	8006d14 <LL_RCC_LSE_IsReady>
 8007158:	4603      	mov	r3, r0
 800715a:	2b01      	cmp	r3, #1
 800715c:	d1ee      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800715e:	7ffb      	ldrb	r3, [r7, #31]
 8007160:	77bb      	strb	r3, [r7, #30]
 8007162:	e001      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	7ffb      	ldrb	r3, [r7, #31]
 8007166:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d004      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff fe2a 	bl	8006dd2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	4618      	mov	r0, r3
 8007190:	f7ff fe35 	bl	8006dfe <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0310 	and.w	r3, r3, #16
 800719c:	2b00      	cmp	r3, #0
 800719e:	d004      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff fe5d 	bl	8006e64 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d004      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff fe52 	bl	8006e64 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d004      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff fe2a 	bl	8006e2a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff fe1f 	bl	8006e2a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d022      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff fe8d 	bl	8006f1c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800720a:	d107      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800720c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800721a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007220:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007224:	d10b      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3304      	adds	r3, #4
 800722a:	4618      	mov	r0, r3
 800722c:	f000 f8e3 	bl	80073f6 <RCCEx_PLLSAI1_ConfigNQ>
 8007230:	4603      	mov	r3, r0
 8007232:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007234:	7ffb      	ldrb	r3, [r7, #31]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800723a:	7ffb      	ldrb	r3, [r7, #31]
 800723c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007246:	2b00      	cmp	r3, #0
 8007248:	d02b      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007252:	d008      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800725c:	d003      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	2b00      	cmp	r3, #0
 8007264:	d105      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff fe2a 	bl	8006ec4 <LL_RCC_SetRNGClockSource>
 8007270:	e00a      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	2000      	movs	r0, #0
 800727e:	f7ff fe21 	bl	8006ec4 <LL_RCC_SetRNGClockSource>
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f7ff fe34 	bl	8006ef0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007290:	d107      	bne.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800729c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072a0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d022      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fe3d 	bl	8006f32 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072c0:	d107      	bne.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072da:	d10b      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3304      	adds	r3, #4
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 f8e3 	bl	80074ac <RCCEx_PLLSAI1_ConfigNR>
 80072e6:	4603      	mov	r3, r0
 80072e8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80072ea:	7ffb      	ldrb	r3, [r7, #31]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80072f0:	7ffb      	ldrb	r3, [r7, #31]
 80072f2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d004      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff fd26 	bl	8006d56 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff fd45 	bl	8006daa <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff fd2c 	bl	8006d82 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800732a:	7fbb      	ldrb	r3, [r7, #30]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3720      	adds	r7, #32
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8007338:	f7ff fcfe 	bl	8006d38 <LL_RCC_MSI_EnablePLLMode>
}
 800733c:	bf00      	nop
 800733e:	bd80      	pop	{r7, pc}

08007340 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800734c:	f7ff fe5b 	bl	8007006 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007350:	f7fb f872 	bl	8002438 <HAL_GetTick>
 8007354:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007356:	e009      	b.n	800736c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007358:	f7fb f86e 	bl	8002438 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d902      	bls.n	800736c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	73fb      	strb	r3, [r7, #15]
      break;
 800736a:	e004      	b.n	8007376 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800736c:	f7ff fe5a 	bl	8007024 <LL_RCC_PLLSAI1_IsReady>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1f0      	bne.n	8007358 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d137      	bne.n	80073ec <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800737c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	021b      	lsls	r3, r3, #8
 800738c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007390:	4313      	orrs	r3, r2
 8007392:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073a6:	4313      	orrs	r3, r2
 80073a8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80073aa:	f7ff fe1d 	bl	8006fe8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ae:	f7fb f843 	bl	8002438 <HAL_GetTick>
 80073b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80073b4:	e009      	b.n	80073ca <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073b6:	f7fb f83f 	bl	8002438 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d902      	bls.n	80073ca <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	73fb      	strb	r3, [r7, #15]
        break;
 80073c8:	e004      	b.n	80073d4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80073ca:	f7ff fe2b 	bl	8007024 <LL_RCC_PLLSAI1_IsReady>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d1f0      	bne.n	80073b6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d108      	bne.n	80073ec <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80073da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073de:	691a      	ldr	r2, [r3, #16]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073e8:	4313      	orrs	r3, r2
 80073ea:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007402:	f7ff fe00 	bl	8007006 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007406:	f7fb f817 	bl	8002438 <HAL_GetTick>
 800740a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800740c:	e009      	b.n	8007422 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800740e:	f7fb f813 	bl	8002438 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	2b02      	cmp	r3, #2
 800741a:	d902      	bls.n	8007422 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	73fb      	strb	r3, [r7, #15]
      break;
 8007420:	e004      	b.n	800742c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007422:	f7ff fdff 	bl	8007024 <LL_RCC_PLLSAI1_IsReady>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1f0      	bne.n	800740e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d137      	bne.n	80074a2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007446:	4313      	orrs	r3, r2
 8007448:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800744a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800745c:	4313      	orrs	r3, r2
 800745e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007460:	f7ff fdc2 	bl	8006fe8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007464:	f7fa ffe8 	bl	8002438 <HAL_GetTick>
 8007468:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800746a:	e009      	b.n	8007480 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800746c:	f7fa ffe4 	bl	8002438 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d902      	bls.n	8007480 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	73fb      	strb	r3, [r7, #15]
        break;
 800747e:	e004      	b.n	800748a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007480:	f7ff fdd0 	bl	8007024 <LL_RCC_PLLSAI1_IsReady>
 8007484:	4603      	mov	r3, r0
 8007486:	2b01      	cmp	r3, #1
 8007488:	d1f0      	bne.n	800746c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800748a:	7bfb      	ldrb	r3, [r7, #15]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d108      	bne.n	80074a2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007494:	691a      	ldr	r2, [r3, #16]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800749e:	4313      	orrs	r3, r2
 80074a0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80074b8:	f7ff fda5 	bl	8007006 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074bc:	f7fa ffbc 	bl	8002438 <HAL_GetTick>
 80074c0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80074c2:	e009      	b.n	80074d8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074c4:	f7fa ffb8 	bl	8002438 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d902      	bls.n	80074d8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	73fb      	strb	r3, [r7, #15]
      break;
 80074d6:	e004      	b.n	80074e2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80074d8:	f7ff fda4 	bl	8007024 <LL_RCC_PLLSAI1_IsReady>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1f0      	bne.n	80074c4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d137      	bne.n	8007558 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80074e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	021b      	lsls	r3, r3, #8
 80074f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074fc:	4313      	orrs	r3, r2
 80074fe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007512:	4313      	orrs	r3, r2
 8007514:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007516:	f7ff fd67 	bl	8006fe8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800751a:	f7fa ff8d 	bl	8002438 <HAL_GetTick>
 800751e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007520:	e009      	b.n	8007536 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007522:	f7fa ff89 	bl	8002438 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d902      	bls.n	8007536 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	73fb      	strb	r3, [r7, #15]
        break;
 8007534:	e004      	b.n	8007540 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007536:	f7ff fd75 	bl	8007024 <LL_RCC_PLLSAI1_IsReady>
 800753a:	4603      	mov	r3, r0
 800753c:	2b01      	cmp	r3, #1
 800753e:	d1f0      	bne.n	8007522 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d108      	bne.n	8007558 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800754a:	691a      	ldr	r2, [r3, #16]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007554:	4313      	orrs	r3, r2
 8007556:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e09f      	b.n	80076b6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d106      	bne.n	8007590 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fa fba8 	bl	8001ce0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007598:	4b49      	ldr	r3, [pc, #292]	; (80076c0 <HAL_RTC_Init+0x15c>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b10      	cmp	r3, #16
 80075a2:	d07e      	beq.n	80076a2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	22ca      	movs	r2, #202	; 0xca
 80075aa:	625a      	str	r2, [r3, #36]	; 0x24
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2253      	movs	r2, #83	; 0x53
 80075b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f8ab 	bl	8007710 <RTC_EnterInitMode>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	22ff      	movs	r2, #255	; 0xff
 80075c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2204      	movs	r2, #4
 80075cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	73fb      	strb	r3, [r7, #15]
 80075d4:	e067      	b.n	80076a6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6812      	ldr	r2, [r2, #0]
 80075e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075e8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6899      	ldr	r1, [r3, #8]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	431a      	orrs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	68d2      	ldr	r2, [r2, #12]
 8007610:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6919      	ldr	r1, [r3, #16]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	041a      	lsls	r2, r3, #16
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68da      	ldr	r2, [r3, #12]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007634:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 0203 	bic.w	r2, r2, #3
 8007644:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	69da      	ldr	r2, [r3, #28]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	431a      	orrs	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0320 	and.w	r3, r3, #32
 8007668:	2b00      	cmp	r3, #0
 800766a:	d113      	bne.n	8007694 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f829 	bl	80076c4 <HAL_RTC_WaitForSynchro>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00d      	beq.n	8007694 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	22ff      	movs	r2, #255	; 0xff
 800767e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2204      	movs	r2, #4
 8007684:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e010      	b.n	80076b6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	22ff      	movs	r2, #255	; 0xff
 800769a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73fb      	strb	r3, [r7, #15]
 80076a0:	e001      	b.n	80076a6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d103      	bne.n	80076b4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	40002800 	.word	0x40002800

080076c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076da:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80076dc:	f7fa feac 	bl	8002438 <HAL_GetTick>
 80076e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80076e2:	e009      	b.n	80076f8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80076e4:	f7fa fea8 	bl	8002438 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076f2:	d901      	bls.n	80076f8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e007      	b.n	8007708 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0ee      	beq.n	80076e4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007722:	2b00      	cmp	r3, #0
 8007724:	d119      	bne.n	800775a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f04f 32ff 	mov.w	r2, #4294967295
 800772e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007730:	f7fa fe82 	bl	8002438 <HAL_GetTick>
 8007734:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007736:	e009      	b.n	800774c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007738:	f7fa fe7e 	bl	8002438 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007746:	d901      	bls.n	800774c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e007      	b.n	800775c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0ee      	beq.n	8007738 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e095      	b.n	80078a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	2b00      	cmp	r3, #0
 800777c:	d108      	bne.n	8007790 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007786:	d009      	beq.n	800779c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	61da      	str	r2, [r3, #28]
 800778e:	e005      	b.n	800779c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d106      	bne.n	80077bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7fa fb30 	bl	8001e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2202      	movs	r2, #2
 80077c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077dc:	d902      	bls.n	80077e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	e002      	b.n	80077ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80077e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80077f2:	d007      	beq.n	8007804 <HAL_SPI_Init+0xa0>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077fc:	d002      	beq.n	8007804 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	431a      	orrs	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	431a      	orrs	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007832:	431a      	orrs	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800783c:	431a      	orrs	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007846:	ea42 0103 	orr.w	r1, r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	0c1b      	lsrs	r3, r3, #16
 8007860:	f003 0204 	and.w	r2, r3, #4
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007872:	f003 0308 	and.w	r3, r3, #8
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007880:	ea42 0103 	orr.w	r1, r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <LL_RCC_GetUSARTClockSource>:
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80078b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4013      	ands	r3, r2
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <LL_RCC_GetLPUARTClockSource>:
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80078d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4013      	ands	r3, r2
}
 80078de:	4618      	mov	r0, r3
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e042      	b.n	8007982 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fa fc78 	bl	8002204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2224      	movs	r2, #36	; 0x24
 8007918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0201 	bic.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fa51 	bl	8007ddc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f826 	bl	800798c <UART_SetConfig>
 8007940:	4603      	mov	r3, r0
 8007942:	2b01      	cmp	r3, #1
 8007944:	d101      	bne.n	800794a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e01b      	b.n	8007982 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007958:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007968:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0201 	orr.w	r2, r2, #1
 8007978:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fad0 	bl	8007f20 <UART_CheckIdleState>
 8007980:	4603      	mov	r3, r0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800798c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007990:	b08c      	sub	sp, #48	; 0x30
 8007992:	af00      	add	r7, sp, #0
 8007994:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	431a      	orrs	r2, r3
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	431a      	orrs	r2, r3
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	69db      	ldr	r3, [r3, #28]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	4baf      	ldr	r3, [pc, #700]	; (8007c78 <UART_SetConfig+0x2ec>)
 80079bc:	4013      	ands	r3, r2
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	6812      	ldr	r2, [r2, #0]
 80079c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079c4:	430b      	orrs	r3, r1
 80079c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4aa4      	ldr	r2, [pc, #656]	; (8007c7c <UART_SetConfig+0x2f0>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d004      	beq.n	80079f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079f4:	4313      	orrs	r3, r2
 80079f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007a02:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	6812      	ldr	r2, [r2, #0]
 8007a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a16:	f023 010f 	bic.w	r1, r3, #15
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a95      	ldr	r2, [pc, #596]	; (8007c80 <UART_SetConfig+0x2f4>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d125      	bne.n	8007a7c <UART_SetConfig+0xf0>
 8007a30:	2003      	movs	r0, #3
 8007a32:	f7ff ff3a 	bl	80078aa <LL_RCC_GetUSARTClockSource>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d81b      	bhi.n	8007a74 <UART_SetConfig+0xe8>
 8007a3c:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <UART_SetConfig+0xb8>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007a55 	.word	0x08007a55
 8007a48:	08007a65 	.word	0x08007a65
 8007a4c:	08007a5d 	.word	0x08007a5d
 8007a50:	08007a6d 	.word	0x08007a6d
 8007a54:	2301      	movs	r3, #1
 8007a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a5a:	e042      	b.n	8007ae2 <UART_SetConfig+0x156>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a62:	e03e      	b.n	8007ae2 <UART_SetConfig+0x156>
 8007a64:	2304      	movs	r3, #4
 8007a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a6a:	e03a      	b.n	8007ae2 <UART_SetConfig+0x156>
 8007a6c:	2308      	movs	r3, #8
 8007a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a72:	e036      	b.n	8007ae2 <UART_SetConfig+0x156>
 8007a74:	2310      	movs	r3, #16
 8007a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a7a:	e032      	b.n	8007ae2 <UART_SetConfig+0x156>
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a7e      	ldr	r2, [pc, #504]	; (8007c7c <UART_SetConfig+0x2f0>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d12a      	bne.n	8007adc <UART_SetConfig+0x150>
 8007a86:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007a8a:	f7ff ff1e 	bl	80078ca <LL_RCC_GetLPUARTClockSource>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a94:	d01a      	beq.n	8007acc <UART_SetConfig+0x140>
 8007a96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a9a:	d81b      	bhi.n	8007ad4 <UART_SetConfig+0x148>
 8007a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aa0:	d00c      	beq.n	8007abc <UART_SetConfig+0x130>
 8007aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aa6:	d815      	bhi.n	8007ad4 <UART_SetConfig+0x148>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <UART_SetConfig+0x128>
 8007aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ab0:	d008      	beq.n	8007ac4 <UART_SetConfig+0x138>
 8007ab2:	e00f      	b.n	8007ad4 <UART_SetConfig+0x148>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aba:	e012      	b.n	8007ae2 <UART_SetConfig+0x156>
 8007abc:	2302      	movs	r3, #2
 8007abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ac2:	e00e      	b.n	8007ae2 <UART_SetConfig+0x156>
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aca:	e00a      	b.n	8007ae2 <UART_SetConfig+0x156>
 8007acc:	2308      	movs	r3, #8
 8007ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ad2:	e006      	b.n	8007ae2 <UART_SetConfig+0x156>
 8007ad4:	2310      	movs	r3, #16
 8007ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ada:	e002      	b.n	8007ae2 <UART_SetConfig+0x156>
 8007adc:	2310      	movs	r3, #16
 8007ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a65      	ldr	r2, [pc, #404]	; (8007c7c <UART_SetConfig+0x2f0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	f040 8097 	bne.w	8007c1c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007aee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007af2:	2b08      	cmp	r3, #8
 8007af4:	d823      	bhi.n	8007b3e <UART_SetConfig+0x1b2>
 8007af6:	a201      	add	r2, pc, #4	; (adr r2, 8007afc <UART_SetConfig+0x170>)
 8007af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afc:	08007b21 	.word	0x08007b21
 8007b00:	08007b3f 	.word	0x08007b3f
 8007b04:	08007b29 	.word	0x08007b29
 8007b08:	08007b3f 	.word	0x08007b3f
 8007b0c:	08007b2f 	.word	0x08007b2f
 8007b10:	08007b3f 	.word	0x08007b3f
 8007b14:	08007b3f 	.word	0x08007b3f
 8007b18:	08007b3f 	.word	0x08007b3f
 8007b1c:	08007b37 	.word	0x08007b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b20:	f7ff f806 	bl	8006b30 <HAL_RCC_GetPCLK1Freq>
 8007b24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b26:	e010      	b.n	8007b4a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b28:	4b56      	ldr	r3, [pc, #344]	; (8007c84 <UART_SetConfig+0x2f8>)
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b2c:	e00d      	b.n	8007b4a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b2e:	f7fe ff7f 	bl	8006a30 <HAL_RCC_GetSysClockFreq>
 8007b32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b34:	e009      	b.n	8007b4a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b3c:	e005      	b.n	8007b4a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007b48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 812b 	beq.w	8007da8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	4a4c      	ldr	r2, [pc, #304]	; (8007c88 <UART_SetConfig+0x2fc>)
 8007b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b64:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	4413      	add	r3, r2
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d305      	bcc.n	8007b82 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d903      	bls.n	8007b8a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007b88:	e10e      	b.n	8007da8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	60bb      	str	r3, [r7, #8]
 8007b90:	60fa      	str	r2, [r7, #12]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	4a3c      	ldr	r2, [pc, #240]	; (8007c88 <UART_SetConfig+0x2fc>)
 8007b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	603b      	str	r3, [r7, #0]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ba8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bac:	f7f8 faee 	bl	800018c <__aeabi_uldivmod>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	f04f 0200 	mov.w	r2, #0
 8007bbc:	f04f 0300 	mov.w	r3, #0
 8007bc0:	020b      	lsls	r3, r1, #8
 8007bc2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bc6:	0202      	lsls	r2, r0, #8
 8007bc8:	6979      	ldr	r1, [r7, #20]
 8007bca:	6849      	ldr	r1, [r1, #4]
 8007bcc:	0849      	lsrs	r1, r1, #1
 8007bce:	2000      	movs	r0, #0
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	eb12 0804 	adds.w	r8, r2, r4
 8007bd8:	eb43 0905 	adc.w	r9, r3, r5
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	469a      	mov	sl, r3
 8007be4:	4693      	mov	fp, r2
 8007be6:	4652      	mov	r2, sl
 8007be8:	465b      	mov	r3, fp
 8007bea:	4640      	mov	r0, r8
 8007bec:	4649      	mov	r1, r9
 8007bee:	f7f8 facd 	bl	800018c <__aeabi_uldivmod>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c00:	d308      	bcc.n	8007c14 <UART_SetConfig+0x288>
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c08:	d204      	bcs.n	8007c14 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6a3a      	ldr	r2, [r7, #32]
 8007c10:	60da      	str	r2, [r3, #12]
 8007c12:	e0c9      	b.n	8007da8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c1a:	e0c5      	b.n	8007da8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c24:	d16d      	bne.n	8007d02 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007c26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	2b07      	cmp	r3, #7
 8007c2e:	d82d      	bhi.n	8007c8c <UART_SetConfig+0x300>
 8007c30:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <UART_SetConfig+0x2ac>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c59 	.word	0x08007c59
 8007c3c:	08007c61 	.word	0x08007c61
 8007c40:	08007c8d 	.word	0x08007c8d
 8007c44:	08007c67 	.word	0x08007c67
 8007c48:	08007c8d 	.word	0x08007c8d
 8007c4c:	08007c8d 	.word	0x08007c8d
 8007c50:	08007c8d 	.word	0x08007c8d
 8007c54:	08007c6f 	.word	0x08007c6f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c58:	f7fe ff80 	bl	8006b5c <HAL_RCC_GetPCLK2Freq>
 8007c5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c5e:	e01b      	b.n	8007c98 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c60:	4b08      	ldr	r3, [pc, #32]	; (8007c84 <UART_SetConfig+0x2f8>)
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c64:	e018      	b.n	8007c98 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c66:	f7fe fee3 	bl	8006a30 <HAL_RCC_GetSysClockFreq>
 8007c6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c6c:	e014      	b.n	8007c98 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c74:	e010      	b.n	8007c98 <UART_SetConfig+0x30c>
 8007c76:	bf00      	nop
 8007c78:	cfff69f3 	.word	0xcfff69f3
 8007c7c:	40008000 	.word	0x40008000
 8007c80:	40013800 	.word	0x40013800
 8007c84:	00f42400 	.word	0x00f42400
 8007c88:	08010ae4 	.word	0x08010ae4
      default:
        pclk = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007c96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 8084 	beq.w	8007da8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	4a4b      	ldr	r2, [pc, #300]	; (8007dd4 <UART_SetConfig+0x448>)
 8007ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007caa:	461a      	mov	r2, r3
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cb2:	005a      	lsls	r2, r3, #1
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	085b      	lsrs	r3, r3, #1
 8007cba:	441a      	add	r2, r3
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	2b0f      	cmp	r3, #15
 8007cca:	d916      	bls.n	8007cfa <UART_SetConfig+0x36e>
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd2:	d212      	bcs.n	8007cfa <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	f023 030f 	bic.w	r3, r3, #15
 8007cdc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	085b      	lsrs	r3, r3, #1
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	f003 0307 	and.w	r3, r3, #7
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	8bfb      	ldrh	r3, [r7, #30]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	8bfa      	ldrh	r2, [r7, #30]
 8007cf6:	60da      	str	r2, [r3, #12]
 8007cf8:	e056      	b.n	8007da8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d00:	e052      	b.n	8007da8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d06:	3b01      	subs	r3, #1
 8007d08:	2b07      	cmp	r3, #7
 8007d0a:	d822      	bhi.n	8007d52 <UART_SetConfig+0x3c6>
 8007d0c:	a201      	add	r2, pc, #4	; (adr r2, 8007d14 <UART_SetConfig+0x388>)
 8007d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d12:	bf00      	nop
 8007d14:	08007d35 	.word	0x08007d35
 8007d18:	08007d3d 	.word	0x08007d3d
 8007d1c:	08007d53 	.word	0x08007d53
 8007d20:	08007d43 	.word	0x08007d43
 8007d24:	08007d53 	.word	0x08007d53
 8007d28:	08007d53 	.word	0x08007d53
 8007d2c:	08007d53 	.word	0x08007d53
 8007d30:	08007d4b 	.word	0x08007d4b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d34:	f7fe ff12 	bl	8006b5c <HAL_RCC_GetPCLK2Freq>
 8007d38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d3a:	e010      	b.n	8007d5e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d3c:	4b26      	ldr	r3, [pc, #152]	; (8007dd8 <UART_SetConfig+0x44c>)
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d40:	e00d      	b.n	8007d5e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d42:	f7fe fe75 	bl	8006a30 <HAL_RCC_GetSysClockFreq>
 8007d46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d48:	e009      	b.n	8007d5e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d50:	e005      	b.n	8007d5e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d5c:	bf00      	nop
    }

    if (pclk != 0U)
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d021      	beq.n	8007da8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	4a1a      	ldr	r2, [pc, #104]	; (8007dd4 <UART_SetConfig+0x448>)
 8007d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	085b      	lsrs	r3, r3, #1
 8007d7c:	441a      	add	r2, r3
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	2b0f      	cmp	r3, #15
 8007d8c:	d909      	bls.n	8007da2 <UART_SetConfig+0x416>
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d94:	d205      	bcs.n	8007da2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	60da      	str	r2, [r3, #12]
 8007da0:	e002      	b.n	8007da8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007dc4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3730      	adds	r7, #48	; 0x30
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dd2:	bf00      	nop
 8007dd4:	08010ae4 	.word	0x08010ae4
 8007dd8:	00f42400 	.word	0x00f42400

08007ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	f003 0308 	and.w	r3, r3, #8
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00a      	beq.n	8007e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	f003 0302 	and.w	r3, r3, #2
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00a      	beq.n	8007e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4e:	f003 0304 	and.w	r3, r3, #4
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e70:	f003 0310 	and.w	r3, r3, #16
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e92:	f003 0320 	and.w	r3, r3, #32
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01a      	beq.n	8007ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eda:	d10a      	bne.n	8007ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00a      	beq.n	8007f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	605a      	str	r2, [r3, #4]
  }
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b098      	sub	sp, #96	; 0x60
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f30:	f7fa fa82 	bl	8002438 <HAL_GetTick>
 8007f34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0308 	and.w	r3, r3, #8
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d12f      	bne.n	8007fa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f88e 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d022      	beq.n	8007fa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f72:	653b      	str	r3, [r7, #80]	; 0x50
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f7e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e6      	bne.n	8007f5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2220      	movs	r2, #32
 8007f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e063      	b.n	800806c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0304 	and.w	r3, r3, #4
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d149      	bne.n	8008046 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f857 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d03c      	beq.n	8008046 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fea:	633b      	str	r3, [r7, #48]	; 0x30
 8007fec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e6      	bne.n	8007fcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3308      	adds	r3, #8
 8008004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	60fb      	str	r3, [r7, #12]
   return(result);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f023 0301 	bic.w	r3, r3, #1
 8008014:	64bb      	str	r3, [r7, #72]	; 0x48
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3308      	adds	r3, #8
 800801c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800801e:	61fa      	str	r2, [r7, #28]
 8008020:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	69b9      	ldr	r1, [r7, #24]
 8008024:	69fa      	ldr	r2, [r7, #28]
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	617b      	str	r3, [r7, #20]
   return(result);
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e5      	bne.n	8007ffe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2220      	movs	r2, #32
 8008036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e012      	b.n	800806c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2220      	movs	r2, #32
 800804a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2220      	movs	r2, #32
 8008052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3758      	adds	r7, #88	; 0x58
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	4613      	mov	r3, r2
 8008082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008084:	e04f      	b.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d04b      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800808e:	f7fa f9d3 	bl	8002438 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	429a      	cmp	r2, r3
 800809c:	d302      	bcc.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e04e      	b.n	8008146 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d037      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	2b80      	cmp	r3, #128	; 0x80
 80080ba:	d034      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	d031      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	f003 0308 	and.w	r3, r3, #8
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d110      	bne.n	80080f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2208      	movs	r2, #8
 80080d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 f838 	bl	800814e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2208      	movs	r2, #8
 80080e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e029      	b.n	8008146 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008100:	d111      	bne.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800810a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 f81e 	bl	800814e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2220      	movs	r2, #32
 8008116:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e00f      	b.n	8008146 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	69da      	ldr	r2, [r3, #28]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4013      	ands	r3, r2
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	429a      	cmp	r2, r3
 8008134:	bf0c      	ite	eq
 8008136:	2301      	moveq	r3, #1
 8008138:	2300      	movne	r3, #0
 800813a:	b2db      	uxtb	r3, r3
 800813c:	461a      	mov	r2, r3
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	429a      	cmp	r2, r3
 8008142:	d0a0      	beq.n	8008086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800814e:	b480      	push	{r7}
 8008150:	b095      	sub	sp, #84	; 0x54
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800816a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008174:	643b      	str	r3, [r7, #64]	; 0x40
 8008176:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800817a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e6      	bne.n	8008156 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3308      	adds	r3, #8
 800818e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	61fb      	str	r3, [r7, #28]
   return(result);
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800819e:	f023 0301 	bic.w	r3, r3, #1
 80081a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3308      	adds	r3, #8
 80081aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081b4:	e841 2300 	strex	r3, r2, [r1]
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1e3      	bne.n	8008188 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d118      	bne.n	80081fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f023 0310 	bic.w	r3, r3, #16
 80081dc:	647b      	str	r3, [r7, #68]	; 0x44
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081e6:	61bb      	str	r3, [r7, #24]
 80081e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	6979      	ldr	r1, [r7, #20]
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	e841 2300 	strex	r3, r2, [r1]
 80081f2:	613b      	str	r3, [r7, #16]
   return(result);
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1e6      	bne.n	80081c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2220      	movs	r2, #32
 80081fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800820e:	bf00      	nop
 8008210:	3754      	adds	r7, #84	; 0x54
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800821a:	b480      	push	{r7}
 800821c:	b085      	sub	sp, #20
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008228:	2b01      	cmp	r3, #1
 800822a:	d101      	bne.n	8008230 <HAL_UARTEx_DisableFifoMode+0x16>
 800822c:	2302      	movs	r3, #2
 800822e:	e027      	b.n	8008280 <HAL_UARTEx_DisableFifoMode+0x66>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2224      	movs	r2, #36	; 0x24
 800823c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0201 	bic.w	r2, r2, #1
 8008256:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800825e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2220      	movs	r2, #32
 8008272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800829c:	2b01      	cmp	r3, #1
 800829e:	d101      	bne.n	80082a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80082a0:	2302      	movs	r3, #2
 80082a2:	e02d      	b.n	8008300 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2224      	movs	r2, #36	; 0x24
 80082b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f022 0201 	bic.w	r2, r2, #1
 80082ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	430a      	orrs	r2, r1
 80082de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f84f 	bl	8008384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2220      	movs	r2, #32
 80082f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008318:	2b01      	cmp	r3, #1
 800831a:	d101      	bne.n	8008320 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800831c:	2302      	movs	r3, #2
 800831e:	e02d      	b.n	800837c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2224      	movs	r2, #36	; 0x24
 800832c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f022 0201 	bic.w	r2, r2, #1
 8008346:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	430a      	orrs	r2, r1
 800835a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f811 	bl	8008384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008390:	2b00      	cmp	r3, #0
 8008392:	d108      	bne.n	80083a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083a4:	e031      	b.n	800840a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083a6:	2308      	movs	r3, #8
 80083a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083aa:	2308      	movs	r3, #8
 80083ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	0e5b      	lsrs	r3, r3, #25
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	f003 0307 	and.w	r3, r3, #7
 80083bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	0f5b      	lsrs	r3, r3, #29
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	7b3a      	ldrb	r2, [r7, #12]
 80083d2:	4911      	ldr	r1, [pc, #68]	; (8008418 <UARTEx_SetNbDataToProcess+0x94>)
 80083d4:	5c8a      	ldrb	r2, [r1, r2]
 80083d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80083da:	7b3a      	ldrb	r2, [r7, #12]
 80083dc:	490f      	ldr	r1, [pc, #60]	; (800841c <UARTEx_SetNbDataToProcess+0x98>)
 80083de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	7b7a      	ldrb	r2, [r7, #13]
 80083f0:	4909      	ldr	r1, [pc, #36]	; (8008418 <UARTEx_SetNbDataToProcess+0x94>)
 80083f2:	5c8a      	ldrb	r2, [r1, r2]
 80083f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083f8:	7b7a      	ldrb	r2, [r7, #13]
 80083fa:	4908      	ldr	r1, [pc, #32]	; (800841c <UARTEx_SetNbDataToProcess+0x98>)
 80083fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008402:	b29a      	uxth	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800840a:	bf00      	nop
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	08010afc 	.word	0x08010afc
 800841c:	08010b04 	.word	0x08010b04

08008420 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008430:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008434:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	b29a      	uxth	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800844e:	b480      	push	{r7}
 8008450:	b085      	sub	sp, #20
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008456:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800845a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008462:	b29a      	uxth	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	b29b      	uxth	r3, r3
 8008468:	43db      	mvns	r3, r3
 800846a:	b29b      	uxth	r3, r3
 800846c:	4013      	ands	r3, r2
 800846e:	b29a      	uxth	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	1d3b      	adds	r3, r7, #4
 800848e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2201      	movs	r2, #1
 8008496:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b09d      	sub	sp, #116	; 0x74
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80084e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	78db      	ldrb	r3, [r3, #3]
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d81f      	bhi.n	8008532 <USB_ActivateEndpoint+0x72>
 80084f2:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <USB_ActivateEndpoint+0x38>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	08008509 	.word	0x08008509
 80084fc:	08008525 	.word	0x08008525
 8008500:	0800853b 	.word	0x0800853b
 8008504:	08008517 	.word	0x08008517
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008508:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800850c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008510:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008514:	e012      	b.n	800853c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008516:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800851a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800851e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008522:	e00b      	b.n	800853c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008524:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008528:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800852c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008530:	e004      	b.n	800853c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008538:	e000      	b.n	800853c <USB_ActivateEndpoint+0x7c>
      break;
 800853a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	441a      	add	r2, r3
 8008546:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800854a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800854e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855a:	b29b      	uxth	r3, r3
 800855c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	b29b      	uxth	r3, r3
 800856c:	b21b      	sxth	r3, r3
 800856e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008576:	b21a      	sxth	r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	b21b      	sxth	r3, r3
 800857e:	4313      	orrs	r3, r2
 8008580:	b21b      	sxth	r3, r3
 8008582:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	441a      	add	r2, r3
 8008590:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800859c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	7b1b      	ldrb	r3, [r3, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 8178 	bne.w	80088a2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 8084 	beq.w	80086c4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	61bb      	str	r3, [r7, #24]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	461a      	mov	r2, r3
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	4413      	add	r3, r2
 80085ce:	61bb      	str	r3, [r7, #24]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	00da      	lsls	r2, r3, #3
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	4413      	add	r3, r2
 80085da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085de:	617b      	str	r3, [r7, #20]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	88db      	ldrh	r3, [r3, #6]
 80085e4:	085b      	lsrs	r3, r3, #1
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	827b      	strh	r3, [r7, #18]
 80085fe:	8a7b      	ldrh	r3, [r7, #18]
 8008600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008604:	2b00      	cmp	r3, #0
 8008606:	d01b      	beq.n	8008640 <USB_ActivateEndpoint+0x180>
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800861e:	823b      	strh	r3, [r7, #16]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	441a      	add	r2, r3
 800862a:	8a3b      	ldrh	r3, [r7, #16]
 800862c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008638:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800863c:	b29b      	uxth	r3, r3
 800863e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	78db      	ldrb	r3, [r3, #3]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d020      	beq.n	800868a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	b29b      	uxth	r3, r3
 8008656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800865a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800865e:	81bb      	strh	r3, [r7, #12]
 8008660:	89bb      	ldrh	r3, [r7, #12]
 8008662:	f083 0320 	eor.w	r3, r3, #32
 8008666:	81bb      	strh	r3, [r7, #12]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	441a      	add	r2, r3
 8008672:	89bb      	ldrh	r3, [r7, #12]
 8008674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800867c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008684:	b29b      	uxth	r3, r3
 8008686:	8013      	strh	r3, [r2, #0]
 8008688:	e2d5      	b.n	8008c36 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800869c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086a0:	81fb      	strh	r3, [r7, #14]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	441a      	add	r2, r3
 80086ac:	89fb      	ldrh	r3, [r7, #14]
 80086ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086be:	b29b      	uxth	r3, r3
 80086c0:	8013      	strh	r3, [r2, #0]
 80086c2:	e2b8      	b.n	8008c36 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	633b      	str	r3, [r7, #48]	; 0x30
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	461a      	mov	r2, r3
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	4413      	add	r3, r2
 80086d6:	633b      	str	r3, [r7, #48]	; 0x30
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	00da      	lsls	r2, r3, #3
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	4413      	add	r3, r2
 80086e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	88db      	ldrh	r3, [r3, #6]
 80086ec:	085b      	lsrs	r3, r3, #1
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008702:	b29b      	uxth	r3, r3
 8008704:	461a      	mov	r2, r3
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	4413      	add	r3, r2
 800870a:	62bb      	str	r3, [r7, #40]	; 0x28
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	00da      	lsls	r2, r3, #3
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	4413      	add	r3, r2
 8008716:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	881b      	ldrh	r3, [r3, #0]
 8008720:	b29b      	uxth	r3, r3
 8008722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008726:	b29a      	uxth	r2, r3
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	801a      	strh	r2, [r3, #0]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	2b3e      	cmp	r3, #62	; 0x3e
 8008732:	d91d      	bls.n	8008770 <USB_ActivateEndpoint+0x2b0>
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	095b      	lsrs	r3, r3, #5
 800873a:	66bb      	str	r3, [r7, #104]	; 0x68
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	f003 031f 	and.w	r3, r3, #31
 8008744:	2b00      	cmp	r3, #0
 8008746:	d102      	bne.n	800874e <USB_ActivateEndpoint+0x28e>
 8008748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800874a:	3b01      	subs	r3, #1
 800874c:	66bb      	str	r3, [r7, #104]	; 0x68
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	b29a      	uxth	r2, r3
 8008754:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008756:	b29b      	uxth	r3, r3
 8008758:	029b      	lsls	r3, r3, #10
 800875a:	b29b      	uxth	r3, r3
 800875c:	4313      	orrs	r3, r2
 800875e:	b29b      	uxth	r3, r3
 8008760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008768:	b29a      	uxth	r2, r3
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	801a      	strh	r2, [r3, #0]
 800876e:	e026      	b.n	80087be <USB_ActivateEndpoint+0x2fe>
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10a      	bne.n	800878e <USB_ActivateEndpoint+0x2ce>
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	b29b      	uxth	r3, r3
 800877e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008786:	b29a      	uxth	r2, r3
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	801a      	strh	r2, [r3, #0]
 800878c:	e017      	b.n	80087be <USB_ActivateEndpoint+0x2fe>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	085b      	lsrs	r3, r3, #1
 8008794:	66bb      	str	r3, [r7, #104]	; 0x68
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d002      	beq.n	80087a8 <USB_ActivateEndpoint+0x2e8>
 80087a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087a4:	3301      	adds	r3, #1
 80087a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	029b      	lsls	r3, r3, #10
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	4313      	orrs	r3, r2
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80087cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d01b      	beq.n	800880e <USB_ActivateEndpoint+0x34e>
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ec:	843b      	strh	r3, [r7, #32]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	441a      	add	r2, r3
 80087f8:	8c3b      	ldrh	r3, [r7, #32]
 80087fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800880a:	b29b      	uxth	r3, r3
 800880c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d124      	bne.n	8008860 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	b29b      	uxth	r3, r3
 8008824:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882c:	83bb      	strh	r3, [r7, #28]
 800882e:	8bbb      	ldrh	r3, [r7, #28]
 8008830:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008834:	83bb      	strh	r3, [r7, #28]
 8008836:	8bbb      	ldrh	r3, [r7, #28]
 8008838:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800883c:	83bb      	strh	r3, [r7, #28]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	441a      	add	r2, r3
 8008848:	8bbb      	ldrh	r3, [r7, #28]
 800884a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800884e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800885a:	b29b      	uxth	r3, r3
 800885c:	8013      	strh	r3, [r2, #0]
 800885e:	e1ea      	b.n	8008c36 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	b29b      	uxth	r3, r3
 800886e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008876:	83fb      	strh	r3, [r7, #30]
 8008878:	8bfb      	ldrh	r3, [r7, #30]
 800887a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800887e:	83fb      	strh	r3, [r7, #30]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	441a      	add	r2, r3
 800888a:	8bfb      	ldrh	r3, [r7, #30]
 800888c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889c:	b29b      	uxth	r3, r3
 800889e:	8013      	strh	r3, [r2, #0]
 80088a0:	e1c9      	b.n	8008c36 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	78db      	ldrb	r3, [r3, #3]
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d11e      	bne.n	80088e8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	441a      	add	r2, r3
 80088ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80088d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80088de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	8013      	strh	r3, [r2, #0]
 80088e6:	e01d      	b.n	8008924 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80088fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	441a      	add	r2, r3
 800890c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800891c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008920:	b29b      	uxth	r3, r3
 8008922:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800892e:	b29b      	uxth	r3, r3
 8008930:	461a      	mov	r2, r3
 8008932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008934:	4413      	add	r3, r2
 8008936:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	00da      	lsls	r2, r3, #3
 800893e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008940:	4413      	add	r3, r2
 8008942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008946:	65bb      	str	r3, [r7, #88]	; 0x58
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	891b      	ldrh	r3, [r3, #8]
 800894c:	085b      	lsrs	r3, r3, #1
 800894e:	b29b      	uxth	r3, r3
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	b29a      	uxth	r2, r3
 8008954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008956:	801a      	strh	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	657b      	str	r3, [r7, #84]	; 0x54
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008962:	b29b      	uxth	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008968:	4413      	add	r3, r2
 800896a:	657b      	str	r3, [r7, #84]	; 0x54
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	00da      	lsls	r2, r3, #3
 8008972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008974:	4413      	add	r3, r2
 8008976:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800897a:	653b      	str	r3, [r7, #80]	; 0x50
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	895b      	ldrh	r3, [r3, #10]
 8008980:	085b      	lsrs	r3, r3, #1
 8008982:	b29b      	uxth	r3, r3
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	b29a      	uxth	r2, r3
 8008988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800898a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	2b00      	cmp	r3, #0
 8008992:	f040 8093 	bne.w	8008abc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80089a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80089aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d01b      	beq.n	80089ea <USB_ActivateEndpoint+0x52a>
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	441a      	add	r2, r3
 80089d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80089d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80089f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80089fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01b      	beq.n	8008a3a <USB_ActivateEndpoint+0x57a>
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a18:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	441a      	add	r2, r3
 8008a24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4413      	add	r3, r2
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a50:	873b      	strh	r3, [r7, #56]	; 0x38
 8008a52:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008a54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a58:	873b      	strh	r3, [r7, #56]	; 0x38
 8008a5a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008a5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008a60:	873b      	strh	r3, [r7, #56]	; 0x38
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	441a      	add	r2, r3
 8008a6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a98:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	441a      	add	r2, r3
 8008aa4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	8013      	strh	r3, [r2, #0]
 8008aba:	e0bc      	b.n	8008c36 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	881b      	ldrh	r3, [r3, #0]
 8008ac8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008acc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d01d      	beq.n	8008b14 <USB_ActivateEndpoint+0x654>
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	441a      	add	r2, r3
 8008afc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008b24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d01d      	beq.n	8008b6c <USB_ActivateEndpoint+0x6ac>
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b46:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	441a      	add	r2, r3
 8008b54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	78db      	ldrb	r3, [r3, #3]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d024      	beq.n	8008bbe <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b8a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008b8e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008b92:	f083 0320 	eor.w	r3, r3, #32
 8008b96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	441a      	add	r2, r3
 8008ba4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	8013      	strh	r3, [r2, #0]
 8008bbc:	e01d      	b.n	8008bfa <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	441a      	add	r2, r3
 8008be2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	441a      	add	r2, r3
 8008c1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008c36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3774      	adds	r7, #116	; 0x74
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop

08008c48 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b08d      	sub	sp, #52	; 0x34
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	7b1b      	ldrb	r3, [r3, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f040 808e 	bne.w	8008d78 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	785b      	ldrb	r3, [r3, #1]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d044      	beq.n	8008cee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	81bb      	strh	r3, [r7, #12]
 8008c72:	89bb      	ldrh	r3, [r7, #12]
 8008c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d01b      	beq.n	8008cb4 <USB_DeactivateEndpoint+0x6c>
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c92:	817b      	strh	r3, [r7, #10]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	441a      	add	r2, r3
 8008c9e:	897b      	ldrh	r3, [r7, #10]
 8008ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cca:	813b      	strh	r3, [r7, #8]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	441a      	add	r2, r3
 8008cd6:	893b      	ldrh	r3, [r7, #8]
 8008cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	8013      	strh	r3, [r2, #0]
 8008cec:	e192      	b.n	8009014 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	827b      	strh	r3, [r7, #18]
 8008cfc:	8a7b      	ldrh	r3, [r7, #18]
 8008cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d01b      	beq.n	8008d3e <USB_DeactivateEndpoint+0xf6>
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d1c:	823b      	strh	r3, [r7, #16]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	441a      	add	r2, r3
 8008d28:	8a3b      	ldrh	r3, [r7, #16]
 8008d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d54:	81fb      	strh	r3, [r7, #14]
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	441a      	add	r2, r3
 8008d60:	89fb      	ldrh	r3, [r7, #14]
 8008d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	8013      	strh	r3, [r2, #0]
 8008d76:	e14d      	b.n	8009014 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	785b      	ldrb	r3, [r3, #1]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f040 80a5 	bne.w	8008ecc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	843b      	strh	r3, [r7, #32]
 8008d90:	8c3b      	ldrh	r3, [r7, #32]
 8008d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01b      	beq.n	8008dd2 <USB_DeactivateEndpoint+0x18a>
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db0:	83fb      	strh	r3, [r7, #30]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	441a      	add	r2, r3
 8008dbc:	8bfb      	ldrh	r3, [r7, #30]
 8008dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	83bb      	strh	r3, [r7, #28]
 8008de0:	8bbb      	ldrh	r3, [r7, #28]
 8008de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d01b      	beq.n	8008e22 <USB_DeactivateEndpoint+0x1da>
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	881b      	ldrh	r3, [r3, #0]
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e00:	837b      	strh	r3, [r7, #26]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	441a      	add	r2, r3
 8008e0c:	8b7b      	ldrh	r3, [r7, #26]
 8008e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e38:	833b      	strh	r3, [r7, #24]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	441a      	add	r2, r3
 8008e44:	8b3b      	ldrh	r3, [r7, #24]
 8008e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e70:	82fb      	strh	r3, [r7, #22]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	441a      	add	r2, r3
 8008e7c:	8afb      	ldrh	r3, [r7, #22]
 8008e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ea8:	82bb      	strh	r3, [r7, #20]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	441a      	add	r2, r3
 8008eb4:	8abb      	ldrh	r3, [r7, #20]
 8008eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	8013      	strh	r3, [r2, #0]
 8008eca:	e0a3      	b.n	8009014 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008eda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01b      	beq.n	8008f1c <USB_DeactivateEndpoint+0x2d4>
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	441a      	add	r2, r3
 8008f06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008f2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d01b      	beq.n	8008f6c <USB_DeactivateEndpoint+0x324>
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f4a:	853b      	strh	r3, [r7, #40]	; 0x28
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	441a      	add	r2, r3
 8008f56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f82:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	441a      	add	r2, r3
 8008f8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4413      	add	r3, r2
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	441a      	add	r2, r3
 8008fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ff2:	847b      	strh	r3, [r7, #34]	; 0x22
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	441a      	add	r2, r3
 8008ffe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800900c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009010:	b29b      	uxth	r3, r3
 8009012:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3734      	adds	r7, #52	; 0x34
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b0c2      	sub	sp, #264	; 0x108
 8009026:	af00      	add	r7, sp, #0
 8009028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800902c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009030:	6018      	str	r0, [r3, #0]
 8009032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800903a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800903c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	785b      	ldrb	r3, [r3, #1]
 8009048:	2b01      	cmp	r3, #1
 800904a:	f040 86b7 	bne.w	8009dbc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800904e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	699a      	ldr	r2, [r3, #24]
 800905a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	429a      	cmp	r2, r3
 8009068:	d908      	bls.n	800907c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800906a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800906e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800907a:	e007      	b.n	800908c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800907c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800908c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	7b1b      	ldrb	r3, [r3, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d13a      	bne.n	8009112 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800909c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6959      	ldr	r1, [r3, #20]
 80090a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	88da      	ldrh	r2, [r3, #6]
 80090b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80090be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80090c2:	6800      	ldr	r0, [r0, #0]
 80090c4:	f001 fc98 	bl	800a9f8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80090c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	613b      	str	r3, [r7, #16]
 80090d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	461a      	mov	r2, r3
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	4413      	add	r3, r2
 80090ea:	613b      	str	r3, [r7, #16]
 80090ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	00da      	lsls	r2, r3, #3
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	4413      	add	r3, r2
 80090fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009102:	60fb      	str	r3, [r7, #12]
 8009104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009108:	b29a      	uxth	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	801a      	strh	r2, [r3, #0]
 800910e:	f000 be1f 	b.w	8009d50 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	78db      	ldrb	r3, [r3, #3]
 800911e:	2b02      	cmp	r3, #2
 8009120:	f040 8462 	bne.w	80099e8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	6a1a      	ldr	r2, [r3, #32]
 8009130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	429a      	cmp	r2, r3
 800913e:	f240 83df 	bls.w	8009900 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	4413      	add	r3, r2
 800915c:	881b      	ldrh	r3, [r3, #0]
 800915e:	b29b      	uxth	r3, r3
 8009160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009168:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800916c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800917a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	441a      	add	r2, r3
 8009186:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800918a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800918e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009192:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800919a:	b29b      	uxth	r3, r3
 800919c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800919e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6a1a      	ldr	r2, [r3, #32]
 80091aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ae:	1ad2      	subs	r2, r2, r3
 80091b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80091bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4413      	add	r3, r2
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 81c7 	beq.w	8009572 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80091e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	633b      	str	r3, [r7, #48]	; 0x30
 80091f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	785b      	ldrb	r3, [r3, #1]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d177      	bne.n	80092f0 <USB_EPStartXfer+0x2ce>
 8009200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	62bb      	str	r3, [r7, #40]	; 0x28
 800920c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009210:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800921a:	b29b      	uxth	r3, r3
 800921c:	461a      	mov	r2, r3
 800921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009220:	4413      	add	r3, r2
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28
 8009224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	00da      	lsls	r2, r3, #3
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	4413      	add	r3, r2
 8009236:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800923a:	627b      	str	r3, [r7, #36]	; 0x24
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	b29b      	uxth	r3, r3
 8009242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009246:	b29a      	uxth	r2, r3
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	801a      	strh	r2, [r3, #0]
 800924c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009250:	2b3e      	cmp	r3, #62	; 0x3e
 8009252:	d921      	bls.n	8009298 <USB_EPStartXfer+0x276>
 8009254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009258:	095b      	lsrs	r3, r3, #5
 800925a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800925e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009262:	f003 031f 	and.w	r3, r3, #31
 8009266:	2b00      	cmp	r3, #0
 8009268:	d104      	bne.n	8009274 <USB_EPStartXfer+0x252>
 800926a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800926e:	3b01      	subs	r3, #1
 8009270:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29a      	uxth	r2, r3
 800927a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800927e:	b29b      	uxth	r3, r3
 8009280:	029b      	lsls	r3, r3, #10
 8009282:	b29b      	uxth	r3, r3
 8009284:	4313      	orrs	r3, r2
 8009286:	b29b      	uxth	r3, r3
 8009288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800928c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009290:	b29a      	uxth	r2, r3
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	801a      	strh	r2, [r3, #0]
 8009296:	e050      	b.n	800933a <USB_EPStartXfer+0x318>
 8009298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10a      	bne.n	80092b6 <USB_EPStartXfer+0x294>
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	801a      	strh	r2, [r3, #0]
 80092b4:	e041      	b.n	800933a <USB_EPStartXfer+0x318>
 80092b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ba:	085b      	lsrs	r3, r3, #1
 80092bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80092c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d004      	beq.n	80092d6 <USB_EPStartXfer+0x2b4>
 80092cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80092d0:	3301      	adds	r3, #1
 80092d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	b29a      	uxth	r2, r3
 80092dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	029b      	lsls	r3, r3, #10
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	4313      	orrs	r3, r2
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	801a      	strh	r2, [r3, #0]
 80092ee:	e024      	b.n	800933a <USB_EPStartXfer+0x318>
 80092f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	785b      	ldrb	r3, [r3, #1]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d11c      	bne.n	800933a <USB_EPStartXfer+0x318>
 8009300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800930e:	b29b      	uxth	r3, r3
 8009310:	461a      	mov	r2, r3
 8009312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009314:	4413      	add	r3, r2
 8009316:	633b      	str	r3, [r7, #48]	; 0x30
 8009318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800931c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	00da      	lsls	r2, r3, #3
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	4413      	add	r3, r2
 800932a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009334:	b29a      	uxth	r2, r3
 8009336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009338:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800933a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800933e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	895b      	ldrh	r3, [r3, #10]
 8009346:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800934a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6959      	ldr	r1, [r3, #20]
 8009356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800935a:	b29b      	uxth	r3, r3
 800935c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009360:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009364:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009368:	6800      	ldr	r0, [r0, #0]
 800936a:	f001 fb45 	bl	800a9f8 <USB_WritePMA>
            ep->xfer_buff += len;
 800936e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	695a      	ldr	r2, [r3, #20]
 800937a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800937e:	441a      	add	r2, r3
 8009380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800938c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6a1a      	ldr	r2, [r3, #32]
 8009398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800939c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d90f      	bls.n	80093c8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80093a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6a1a      	ldr	r2, [r3, #32]
 80093b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093b8:	1ad2      	subs	r2, r2, r3
 80093ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	621a      	str	r2, [r3, #32]
 80093c6:	e00e      	b.n	80093e6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80093c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80093d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2200      	movs	r2, #0
 80093e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80093e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	785b      	ldrb	r3, [r3, #1]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d177      	bne.n	80094e6 <USB_EPStartXfer+0x4c4>
 80093f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	61bb      	str	r3, [r7, #24]
 8009402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009410:	b29b      	uxth	r3, r3
 8009412:	461a      	mov	r2, r3
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	4413      	add	r3, r2
 8009418:	61bb      	str	r3, [r7, #24]
 800941a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800941e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	00da      	lsls	r2, r3, #3
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	4413      	add	r3, r2
 800942c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	b29b      	uxth	r3, r3
 8009438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800943c:	b29a      	uxth	r2, r3
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	801a      	strh	r2, [r3, #0]
 8009442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009446:	2b3e      	cmp	r3, #62	; 0x3e
 8009448:	d921      	bls.n	800948e <USB_EPStartXfer+0x46c>
 800944a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800944e:	095b      	lsrs	r3, r3, #5
 8009450:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009458:	f003 031f 	and.w	r3, r3, #31
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <USB_EPStartXfer+0x448>
 8009460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009464:	3b01      	subs	r3, #1
 8009466:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	b29a      	uxth	r2, r3
 8009470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009474:	b29b      	uxth	r3, r3
 8009476:	029b      	lsls	r3, r3, #10
 8009478:	b29b      	uxth	r3, r3
 800947a:	4313      	orrs	r3, r2
 800947c:	b29b      	uxth	r3, r3
 800947e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009486:	b29a      	uxth	r2, r3
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	801a      	strh	r2, [r3, #0]
 800948c:	e056      	b.n	800953c <USB_EPStartXfer+0x51a>
 800948e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10a      	bne.n	80094ac <USB_EPStartXfer+0x48a>
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	b29b      	uxth	r3, r3
 800949c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	801a      	strh	r2, [r3, #0]
 80094aa:	e047      	b.n	800953c <USB_EPStartXfer+0x51a>
 80094ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b0:	085b      	lsrs	r3, r3, #1
 80094b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80094b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d004      	beq.n	80094cc <USB_EPStartXfer+0x4aa>
 80094c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094c6:	3301      	adds	r3, #1
 80094c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	029b      	lsls	r3, r3, #10
 80094da:	b29b      	uxth	r3, r3
 80094dc:	4313      	orrs	r3, r2
 80094de:	b29a      	uxth	r2, r3
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	801a      	strh	r2, [r3, #0]
 80094e4:	e02a      	b.n	800953c <USB_EPStartXfer+0x51a>
 80094e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	785b      	ldrb	r3, [r3, #1]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d122      	bne.n	800953c <USB_EPStartXfer+0x51a>
 80094f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	623b      	str	r3, [r7, #32]
 8009502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009510:	b29b      	uxth	r3, r3
 8009512:	461a      	mov	r2, r3
 8009514:	6a3b      	ldr	r3, [r7, #32]
 8009516:	4413      	add	r3, r2
 8009518:	623b      	str	r3, [r7, #32]
 800951a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800951e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	00da      	lsls	r2, r3, #3
 8009528:	6a3b      	ldr	r3, [r7, #32]
 800952a:	4413      	add	r3, r2
 800952c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009530:	61fb      	str	r3, [r7, #28]
 8009532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009536:	b29a      	uxth	r2, r3
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800953c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	891b      	ldrh	r3, [r3, #8]
 8009548:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800954c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6959      	ldr	r1, [r3, #20]
 8009558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800955c:	b29b      	uxth	r3, r3
 800955e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009562:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009566:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800956a:	6800      	ldr	r0, [r0, #0]
 800956c:	f001 fa44 	bl	800a9f8 <USB_WritePMA>
 8009570:	e3ee      	b.n	8009d50 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	785b      	ldrb	r3, [r3, #1]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d177      	bne.n	8009672 <USB_EPStartXfer+0x650>
 8009582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	64bb      	str	r3, [r7, #72]	; 0x48
 800958e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800959c:	b29b      	uxth	r3, r3
 800959e:	461a      	mov	r2, r3
 80095a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095a2:	4413      	add	r3, r2
 80095a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80095a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	00da      	lsls	r2, r3, #3
 80095b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095b6:	4413      	add	r3, r2
 80095b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80095bc:	647b      	str	r3, [r7, #68]	; 0x44
 80095be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095cc:	801a      	strh	r2, [r3, #0]
 80095ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d2:	2b3e      	cmp	r3, #62	; 0x3e
 80095d4:	d921      	bls.n	800961a <USB_EPStartXfer+0x5f8>
 80095d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095da:	095b      	lsrs	r3, r3, #5
 80095dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80095e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e4:	f003 031f 	and.w	r3, r3, #31
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d104      	bne.n	80095f6 <USB_EPStartXfer+0x5d4>
 80095ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80095f0:	3b01      	subs	r3, #1
 80095f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80095f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095f8:	881b      	ldrh	r3, [r3, #0]
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009600:	b29b      	uxth	r3, r3
 8009602:	029b      	lsls	r3, r3, #10
 8009604:	b29b      	uxth	r3, r3
 8009606:	4313      	orrs	r3, r2
 8009608:	b29b      	uxth	r3, r3
 800960a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800960e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009612:	b29a      	uxth	r2, r3
 8009614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009616:	801a      	strh	r2, [r3, #0]
 8009618:	e056      	b.n	80096c8 <USB_EPStartXfer+0x6a6>
 800961a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10a      	bne.n	8009638 <USB_EPStartXfer+0x616>
 8009622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	b29b      	uxth	r3, r3
 8009628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800962c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009630:	b29a      	uxth	r2, r3
 8009632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009634:	801a      	strh	r2, [r3, #0]
 8009636:	e047      	b.n	80096c8 <USB_EPStartXfer+0x6a6>
 8009638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800963c:	085b      	lsrs	r3, r3, #1
 800963e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	2b00      	cmp	r3, #0
 800964c:	d004      	beq.n	8009658 <USB_EPStartXfer+0x636>
 800964e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009652:	3301      	adds	r3, #1
 8009654:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	b29a      	uxth	r2, r3
 800965e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009662:	b29b      	uxth	r3, r3
 8009664:	029b      	lsls	r3, r3, #10
 8009666:	b29b      	uxth	r3, r3
 8009668:	4313      	orrs	r3, r2
 800966a:	b29a      	uxth	r2, r3
 800966c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800966e:	801a      	strh	r2, [r3, #0]
 8009670:	e02a      	b.n	80096c8 <USB_EPStartXfer+0x6a6>
 8009672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	785b      	ldrb	r3, [r3, #1]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d122      	bne.n	80096c8 <USB_EPStartXfer+0x6a6>
 8009682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	653b      	str	r3, [r7, #80]	; 0x50
 800968e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009692:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800969c:	b29b      	uxth	r3, r3
 800969e:	461a      	mov	r2, r3
 80096a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a2:	4413      	add	r3, r2
 80096a4:	653b      	str	r3, [r7, #80]	; 0x50
 80096a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	00da      	lsls	r2, r3, #3
 80096b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096b6:	4413      	add	r3, r2
 80096b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80096c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	891b      	ldrh	r3, [r3, #8]
 80096d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6959      	ldr	r1, [r3, #20]
 80096e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80096ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80096f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80096f6:	6800      	ldr	r0, [r0, #0]
 80096f8:	f001 f97e 	bl	800a9f8 <USB_WritePMA>
            ep->xfer_buff += len;
 80096fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	695a      	ldr	r2, [r3, #20]
 8009708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800970c:	441a      	add	r2, r3
 800970e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800971a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800971e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6a1a      	ldr	r2, [r3, #32]
 8009726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800972a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	429a      	cmp	r2, r3
 8009734:	d90f      	bls.n	8009756 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800973a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6a1a      	ldr	r2, [r3, #32]
 8009742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009746:	1ad2      	subs	r2, r2, r3
 8009748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	621a      	str	r2, [r3, #32]
 8009754:	e00e      	b.n	8009774 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800975a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2200      	movs	r2, #0
 8009772:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	643b      	str	r3, [r7, #64]	; 0x40
 8009780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	785b      	ldrb	r3, [r3, #1]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d177      	bne.n	8009880 <USB_EPStartXfer+0x85e>
 8009790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	63bb      	str	r3, [r7, #56]	; 0x38
 800979c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	461a      	mov	r2, r3
 80097ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b0:	4413      	add	r3, r2
 80097b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80097b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	00da      	lsls	r2, r3, #3
 80097c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c4:	4413      	add	r3, r2
 80097c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097ca:	637b      	str	r3, [r7, #52]	; 0x34
 80097cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097da:	801a      	strh	r2, [r3, #0]
 80097dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097e0:	2b3e      	cmp	r3, #62	; 0x3e
 80097e2:	d921      	bls.n	8009828 <USB_EPStartXfer+0x806>
 80097e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097e8:	095b      	lsrs	r3, r3, #5
 80097ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80097ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097f2:	f003 031f 	and.w	r3, r3, #31
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d104      	bne.n	8009804 <USB_EPStartXfer+0x7e2>
 80097fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097fe:	3b01      	subs	r3, #1
 8009800:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009806:	881b      	ldrh	r3, [r3, #0]
 8009808:	b29a      	uxth	r2, r3
 800980a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800980e:	b29b      	uxth	r3, r3
 8009810:	029b      	lsls	r3, r3, #10
 8009812:	b29b      	uxth	r3, r3
 8009814:	4313      	orrs	r3, r2
 8009816:	b29b      	uxth	r3, r3
 8009818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800981c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009820:	b29a      	uxth	r2, r3
 8009822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009824:	801a      	strh	r2, [r3, #0]
 8009826:	e050      	b.n	80098ca <USB_EPStartXfer+0x8a8>
 8009828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10a      	bne.n	8009846 <USB_EPStartXfer+0x824>
 8009830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	b29b      	uxth	r3, r3
 8009836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800983a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800983e:	b29a      	uxth	r2, r3
 8009840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009842:	801a      	strh	r2, [r3, #0]
 8009844:	e041      	b.n	80098ca <USB_EPStartXfer+0x8a8>
 8009846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800984a:	085b      	lsrs	r3, r3, #1
 800984c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	d004      	beq.n	8009866 <USB_EPStartXfer+0x844>
 800985c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009860:	3301      	adds	r3, #1
 8009862:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	b29a      	uxth	r2, r3
 800986c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009870:	b29b      	uxth	r3, r3
 8009872:	029b      	lsls	r3, r3, #10
 8009874:	b29b      	uxth	r3, r3
 8009876:	4313      	orrs	r3, r2
 8009878:	b29a      	uxth	r2, r3
 800987a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800987c:	801a      	strh	r2, [r3, #0]
 800987e:	e024      	b.n	80098ca <USB_EPStartXfer+0x8a8>
 8009880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	785b      	ldrb	r3, [r3, #1]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d11c      	bne.n	80098ca <USB_EPStartXfer+0x8a8>
 8009890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800989e:	b29b      	uxth	r3, r3
 80098a0:	461a      	mov	r2, r3
 80098a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a4:	4413      	add	r3, r2
 80098a6:	643b      	str	r3, [r7, #64]	; 0x40
 80098a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	00da      	lsls	r2, r3, #3
 80098b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098b8:	4413      	add	r3, r2
 80098ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80098ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	895b      	ldrh	r3, [r3, #10]
 80098d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6959      	ldr	r1, [r3, #20]
 80098e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80098f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80098f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80098f8:	6800      	ldr	r0, [r0, #0]
 80098fa:	f001 f87d 	bl	800a9f8 <USB_WritePMA>
 80098fe:	e227      	b.n	8009d50 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009914:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	b29b      	uxth	r3, r3
 800992e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009936:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800993a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800993e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	441a      	add	r2, r3
 8009954:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800995c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009968:	b29b      	uxth	r3, r3
 800996a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800996c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009970:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800997c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009986:	b29b      	uxth	r3, r3
 8009988:	461a      	mov	r2, r3
 800998a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800998c:	4413      	add	r3, r2
 800998e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	00da      	lsls	r2, r3, #3
 800999e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099a0:	4413      	add	r3, r2
 80099a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80099a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80099a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80099b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	891b      	ldrh	r3, [r3, #8]
 80099be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6959      	ldr	r1, [r3, #20]
 80099ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80099d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80099dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80099e0:	6800      	ldr	r0, [r0, #0]
 80099e2:	f001 f809 	bl	800a9f8 <USB_WritePMA>
 80099e6:	e1b3      	b.n	8009d50 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80099e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	6a1a      	ldr	r2, [r3, #32]
 80099f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099f8:	1ad2      	subs	r2, r2, r3
 80099fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 80c6 	beq.w	8009bba <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	673b      	str	r3, [r7, #112]	; 0x70
 8009a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d177      	bne.n	8009b3a <USB_EPStartXfer+0xb18>
 8009a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	461a      	mov	r2, r3
 8009a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a6a:	4413      	add	r3, r2
 8009a6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	00da      	lsls	r2, r3, #3
 8009a7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a7e:	4413      	add	r3, r2
 8009a80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a84:	667b      	str	r3, [r7, #100]	; 0x64
 8009a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a88:	881b      	ldrh	r3, [r3, #0]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a94:	801a      	strh	r2, [r3, #0]
 8009a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a9a:	2b3e      	cmp	r3, #62	; 0x3e
 8009a9c:	d921      	bls.n	8009ae2 <USB_EPStartXfer+0xac0>
 8009a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aa2:	095b      	lsrs	r3, r3, #5
 8009aa4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aac:	f003 031f 	and.w	r3, r3, #31
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d104      	bne.n	8009abe <USB_EPStartXfer+0xa9c>
 8009ab4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	029b      	lsls	r3, r3, #10
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ade:	801a      	strh	r2, [r3, #0]
 8009ae0:	e050      	b.n	8009b84 <USB_EPStartXfer+0xb62>
 8009ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10a      	bne.n	8009b00 <USB_EPStartXfer+0xade>
 8009aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009afc:	801a      	strh	r2, [r3, #0]
 8009afe:	e041      	b.n	8009b84 <USB_EPStartXfer+0xb62>
 8009b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b04:	085b      	lsrs	r3, r3, #1
 8009b06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d004      	beq.n	8009b20 <USB_EPStartXfer+0xafe>
 8009b16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	029b      	lsls	r3, r3, #10
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	4313      	orrs	r3, r2
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b36:	801a      	strh	r2, [r3, #0]
 8009b38:	e024      	b.n	8009b84 <USB_EPStartXfer+0xb62>
 8009b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	785b      	ldrb	r3, [r3, #1]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d11c      	bne.n	8009b84 <USB_EPStartXfer+0xb62>
 8009b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b5e:	4413      	add	r3, r2
 8009b60:	673b      	str	r3, [r7, #112]	; 0x70
 8009b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	00da      	lsls	r2, r3, #3
 8009b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b72:	4413      	add	r3, r2
 8009b74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b82:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	895b      	ldrh	r3, [r3, #10]
 8009b90:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	6959      	ldr	r1, [r3, #20]
 8009ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009baa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009bae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009bb2:	6800      	ldr	r0, [r0, #0]
 8009bb4:	f000 ff20 	bl	800a9f8 <USB_WritePMA>
 8009bb8:	e0ca      	b.n	8009d50 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	785b      	ldrb	r3, [r3, #1]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d177      	bne.n	8009cba <USB_EPStartXfer+0xc98>
 8009bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	461a      	mov	r2, r3
 8009be8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bea:	4413      	add	r3, r2
 8009bec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	00da      	lsls	r2, r3, #3
 8009bfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bfe:	4413      	add	r3, r2
 8009c00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c04:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c14:	801a      	strh	r2, [r3, #0]
 8009c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c1a:	2b3e      	cmp	r3, #62	; 0x3e
 8009c1c:	d921      	bls.n	8009c62 <USB_EPStartXfer+0xc40>
 8009c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c22:	095b      	lsrs	r3, r3, #5
 8009c24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c2c:	f003 031f 	and.w	r3, r3, #31
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d104      	bne.n	8009c3e <USB_EPStartXfer+0xc1c>
 8009c34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	029b      	lsls	r3, r3, #10
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c5e:	801a      	strh	r2, [r3, #0]
 8009c60:	e05c      	b.n	8009d1c <USB_EPStartXfer+0xcfa>
 8009c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10a      	bne.n	8009c80 <USB_EPStartXfer+0xc5e>
 8009c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c7c:	801a      	strh	r2, [r3, #0]
 8009c7e:	e04d      	b.n	8009d1c <USB_EPStartXfer+0xcfa>
 8009c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c84:	085b      	lsrs	r3, r3, #1
 8009c86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d004      	beq.n	8009ca0 <USB_EPStartXfer+0xc7e>
 8009c96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ca2:	881b      	ldrh	r3, [r3, #0]
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	029b      	lsls	r3, r3, #10
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cb6:	801a      	strh	r2, [r3, #0]
 8009cb8:	e030      	b.n	8009d1c <USB_EPStartXfer+0xcfa>
 8009cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	785b      	ldrb	r3, [r3, #1]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d128      	bne.n	8009d1c <USB_EPStartXfer+0xcfa>
 8009cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	461a      	mov	r2, r3
 8009cea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cee:	4413      	add	r3, r2
 8009cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	00da      	lsls	r2, r3, #3
 8009d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d06:	4413      	add	r3, r2
 8009d08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	891b      	ldrh	r3, [r3, #8]
 8009d28:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6959      	ldr	r1, [r3, #20]
 8009d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009d42:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009d46:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009d4a:	6800      	ldr	r0, [r0, #0]
 8009d4c:	f000 fe54 	bl	800a9f8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	881b      	ldrh	r3, [r3, #0]
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d76:	817b      	strh	r3, [r7, #10]
 8009d78:	897b      	ldrh	r3, [r7, #10]
 8009d7a:	f083 0310 	eor.w	r3, r3, #16
 8009d7e:	817b      	strh	r3, [r7, #10]
 8009d80:	897b      	ldrh	r3, [r7, #10]
 8009d82:	f083 0320 	eor.w	r3, r3, #32
 8009d86:	817b      	strh	r3, [r7, #10]
 8009d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	441a      	add	r2, r3
 8009da2:	897b      	ldrh	r3, [r7, #10]
 8009da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	8013      	strh	r3, [r2, #0]
 8009db8:	f000 bcde 	b.w	800a778 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	7b1b      	ldrb	r3, [r3, #12]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f040 80bb 	bne.w	8009f44 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	699a      	ldr	r2, [r3, #24]
 8009dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d917      	bls.n	8009e1a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	699a      	ldr	r2, [r3, #24]
 8009e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e0a:	1ad2      	subs	r2, r2, r3
 8009e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	619a      	str	r2, [r3, #24]
 8009e18:	e00e      	b.n	8009e38 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2200      	movs	r2, #0
 8009e36:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	461a      	mov	r2, r3
 8009e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	00da      	lsls	r2, r3, #3
 8009e70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e74:	4413      	add	r3, r2
 8009e76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e82:	881b      	ldrh	r3, [r3, #0]
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e90:	801a      	strh	r2, [r3, #0]
 8009e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e96:	2b3e      	cmp	r3, #62	; 0x3e
 8009e98:	d924      	bls.n	8009ee4 <USB_EPStartXfer+0xec2>
 8009e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e9e:	095b      	lsrs	r3, r3, #5
 8009ea0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ea8:	f003 031f 	and.w	r3, r3, #31
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d104      	bne.n	8009eba <USB_EPStartXfer+0xe98>
 8009eb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	029b      	lsls	r3, r3, #10
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ede:	801a      	strh	r2, [r3, #0]
 8009ee0:	f000 bc10 	b.w	800a704 <USB_EPStartXfer+0x16e2>
 8009ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10c      	bne.n	8009f06 <USB_EPStartXfer+0xee4>
 8009eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ef0:	881b      	ldrh	r3, [r3, #0]
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f02:	801a      	strh	r2, [r3, #0]
 8009f04:	e3fe      	b.n	800a704 <USB_EPStartXfer+0x16e2>
 8009f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f0a:	085b      	lsrs	r3, r3, #1
 8009f0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f14:	f003 0301 	and.w	r3, r3, #1
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d004      	beq.n	8009f26 <USB_EPStartXfer+0xf04>
 8009f1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f20:	3301      	adds	r3, #1
 8009f22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f2a:	881b      	ldrh	r3, [r3, #0]
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	029b      	lsls	r3, r3, #10
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f40:	801a      	strh	r2, [r3, #0]
 8009f42:	e3df      	b.n	800a704 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	78db      	ldrb	r3, [r3, #3]
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	f040 8218 	bne.w	800a386 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	785b      	ldrb	r3, [r3, #1]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f040 809d 	bne.w	800a0a2 <USB_EPStartXfer+0x1080>
 8009f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	461a      	mov	r2, r3
 8009f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	00da      	lsls	r2, r3, #3
 8009fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009faa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009fae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009fc0:	801a      	strh	r2, [r3, #0]
 8009fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	2b3e      	cmp	r3, #62	; 0x3e
 8009fd0:	d92b      	bls.n	800a02a <USB_EPStartXfer+0x1008>
 8009fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	095b      	lsrs	r3, r3, #5
 8009fe0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	f003 031f 	and.w	r3, r3, #31
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d104      	bne.n	800a002 <USB_EPStartXfer+0xfe0>
 8009ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a006:	881b      	ldrh	r3, [r3, #0]
 800a008:	b29a      	uxth	r2, r3
 800a00a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a00e:	b29b      	uxth	r3, r3
 800a010:	029b      	lsls	r3, r3, #10
 800a012:	b29b      	uxth	r3, r3
 800a014:	4313      	orrs	r3, r2
 800a016:	b29b      	uxth	r3, r3
 800a018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a01c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a020:	b29a      	uxth	r2, r3
 800a022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a026:	801a      	strh	r2, [r3, #0]
 800a028:	e070      	b.n	800a10c <USB_EPStartXfer+0x10ea>
 800a02a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a02e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10c      	bne.n	800a054 <USB_EPStartXfer+0x1032>
 800a03a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a03e:	881b      	ldrh	r3, [r3, #0]
 800a040:	b29b      	uxth	r3, r3
 800a042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a050:	801a      	strh	r2, [r3, #0]
 800a052:	e05b      	b.n	800a10c <USB_EPStartXfer+0x10ea>
 800a054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	085b      	lsrs	r3, r3, #1
 800a062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a06a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d004      	beq.n	800a084 <USB_EPStartXfer+0x1062>
 800a07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a07e:	3301      	adds	r3, #1
 800a080:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a084:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a090:	b29b      	uxth	r3, r3
 800a092:	029b      	lsls	r3, r3, #10
 800a094:	b29b      	uxth	r3, r3
 800a096:	4313      	orrs	r3, r2
 800a098:	b29a      	uxth	r2, r3
 800a09a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a09e:	801a      	strh	r2, [r3, #0]
 800a0a0:	e034      	b.n	800a10c <USB_EPStartXfer+0x10ea>
 800a0a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	785b      	ldrb	r3, [r3, #1]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d12c      	bne.n	800a10c <USB_EPStartXfer+0x10ea>
 800a0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	00da      	lsls	r2, r3, #3
 800a0ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a0f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	b29a      	uxth	r2, r3
 800a106:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a10a:	801a      	strh	r2, [r3, #0]
 800a10c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a110:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a11a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a11e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	785b      	ldrb	r3, [r3, #1]
 800a126:	2b00      	cmp	r3, #0
 800a128:	f040 809d 	bne.w	800a266 <USB_EPStartXfer+0x1244>
 800a12c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a130:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a13a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a13e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a148:	b29b      	uxth	r3, r3
 800a14a:	461a      	mov	r2, r3
 800a14c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a150:	4413      	add	r3, r2
 800a152:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a15a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	00da      	lsls	r2, r3, #3
 800a164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a168:	4413      	add	r3, r2
 800a16a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a16e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a172:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a176:	881b      	ldrh	r3, [r3, #0]
 800a178:	b29b      	uxth	r3, r3
 800a17a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a17e:	b29a      	uxth	r2, r3
 800a180:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a184:	801a      	strh	r2, [r3, #0]
 800a186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a18a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	2b3e      	cmp	r3, #62	; 0x3e
 800a194:	d92b      	bls.n	800a1ee <USB_EPStartXfer+0x11cc>
 800a196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a19a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	095b      	lsrs	r3, r3, #5
 800a1a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	f003 031f 	and.w	r3, r3, #31
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d104      	bne.n	800a1c6 <USB_EPStartXfer+0x11a4>
 800a1bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a1ca:	881b      	ldrh	r3, [r3, #0]
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	029b      	lsls	r3, r3, #10
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a1ea:	801a      	strh	r2, [r3, #0]
 800a1ec:	e069      	b.n	800a2c2 <USB_EPStartXfer+0x12a0>
 800a1ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10c      	bne.n	800a218 <USB_EPStartXfer+0x11f6>
 800a1fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	b29b      	uxth	r3, r3
 800a206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a20a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a20e:	b29a      	uxth	r2, r3
 800a210:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a214:	801a      	strh	r2, [r3, #0]
 800a216:	e054      	b.n	800a2c2 <USB_EPStartXfer+0x12a0>
 800a218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	085b      	lsrs	r3, r3, #1
 800a226:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a22a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a22e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d004      	beq.n	800a248 <USB_EPStartXfer+0x1226>
 800a23e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a242:	3301      	adds	r3, #1
 800a244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a248:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	b29a      	uxth	r2, r3
 800a250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a254:	b29b      	uxth	r3, r3
 800a256:	029b      	lsls	r3, r3, #10
 800a258:	b29b      	uxth	r3, r3
 800a25a:	4313      	orrs	r3, r2
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a262:	801a      	strh	r2, [r3, #0]
 800a264:	e02d      	b.n	800a2c2 <USB_EPStartXfer+0x12a0>
 800a266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a26a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	785b      	ldrb	r3, [r3, #1]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d125      	bne.n	800a2c2 <USB_EPStartXfer+0x12a0>
 800a276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a284:	b29b      	uxth	r3, r3
 800a286:	461a      	mov	r2, r3
 800a288:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a28c:	4413      	add	r3, r2
 800a28e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	00da      	lsls	r2, r3, #3
 800a2a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a2aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a2ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a2c0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f000 8218 	beq.w	800a704 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	881b      	ldrh	r3, [r3, #0]
 800a2f0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a2f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a2f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d005      	beq.n	800a30c <USB_EPStartXfer+0x12ea>
 800a300:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10d      	bne.n	800a328 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a30c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a314:	2b00      	cmp	r3, #0
 800a316:	f040 81f5 	bne.w	800a704 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a31a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a31e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a322:	2b00      	cmp	r3, #0
 800a324:	f040 81ee 	bne.w	800a704 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a32c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4413      	add	r3, r2
 800a342:	881b      	ldrh	r3, [r3, #0]
 800a344:	b29b      	uxth	r3, r3
 800a346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a34a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a34e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	441a      	add	r2, r3
 800a36c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a37c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a380:	b29b      	uxth	r3, r3
 800a382:	8013      	strh	r3, [r2, #0]
 800a384:	e1be      	b.n	800a704 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a38a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	78db      	ldrb	r3, [r3, #3]
 800a392:	2b01      	cmp	r3, #1
 800a394:	f040 81b4 	bne.w	800a700 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a39c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	699a      	ldr	r2, [r3, #24]
 800a3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d917      	bls.n	800a3e4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a3b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a3c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	699a      	ldr	r2, [r3, #24]
 800a3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3d4:	1ad2      	subs	r2, r2, r3
 800a3d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	619a      	str	r2, [r3, #24]
 800a3e2:	e00e      	b.n	800a402 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a3e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a3f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2200      	movs	r2, #0
 800a400:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	785b      	ldrb	r3, [r3, #1]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f040 8085 	bne.w	800a51e <USB_EPStartXfer+0x14fc>
 800a414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a418:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a430:	b29b      	uxth	r3, r3
 800a432:	461a      	mov	r2, r3
 800a434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a438:	4413      	add	r3, r2
 800a43a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a43e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	00da      	lsls	r2, r3, #3
 800a44c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a450:	4413      	add	r3, r2
 800a452:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a45a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	b29b      	uxth	r3, r3
 800a462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a466:	b29a      	uxth	r2, r3
 800a468:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a46c:	801a      	strh	r2, [r3, #0]
 800a46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a472:	2b3e      	cmp	r3, #62	; 0x3e
 800a474:	d923      	bls.n	800a4be <USB_EPStartXfer+0x149c>
 800a476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a47a:	095b      	lsrs	r3, r3, #5
 800a47c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a484:	f003 031f 	and.w	r3, r3, #31
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d104      	bne.n	800a496 <USB_EPStartXfer+0x1474>
 800a48c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a490:	3b01      	subs	r3, #1
 800a492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a49a:	881b      	ldrh	r3, [r3, #0]
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	029b      	lsls	r3, r3, #10
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4b4:	b29a      	uxth	r2, r3
 800a4b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4ba:	801a      	strh	r2, [r3, #0]
 800a4bc:	e060      	b.n	800a580 <USB_EPStartXfer+0x155e>
 800a4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10c      	bne.n	800a4e0 <USB_EPStartXfer+0x14be>
 800a4c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4dc:	801a      	strh	r2, [r3, #0]
 800a4de:	e04f      	b.n	800a580 <USB_EPStartXfer+0x155e>
 800a4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4e4:	085b      	lsrs	r3, r3, #1
 800a4e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d004      	beq.n	800a500 <USB_EPStartXfer+0x14de>
 800a4f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a500:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	b29a      	uxth	r2, r3
 800a508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	029b      	lsls	r3, r3, #10
 800a510:	b29b      	uxth	r3, r3
 800a512:	4313      	orrs	r3, r2
 800a514:	b29a      	uxth	r2, r3
 800a516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a51a:	801a      	strh	r2, [r3, #0]
 800a51c:	e030      	b.n	800a580 <USB_EPStartXfer+0x155e>
 800a51e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	785b      	ldrb	r3, [r3, #1]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d128      	bne.n	800a580 <USB_EPStartXfer+0x155e>
 800a52e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	461a      	mov	r2, r3
 800a54e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a552:	4413      	add	r3, r2
 800a554:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	00da      	lsls	r2, r3, #3
 800a566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a56a:	4413      	add	r3, r2
 800a56c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a578:	b29a      	uxth	r2, r3
 800a57a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a57e:	801a      	strh	r2, [r3, #0]
 800a580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a584:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	785b      	ldrb	r3, [r3, #1]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f040 8085 	bne.w	800a6aa <USB_EPStartXfer+0x1688>
 800a5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a5ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	461a      	mov	r2, r3
 800a5c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a5c4:	4413      	add	r3, r2
 800a5c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a5ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	00da      	lsls	r2, r3, #3
 800a5d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a5dc:	4413      	add	r3, r2
 800a5de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a5e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a5e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a5ea:	881b      	ldrh	r3, [r3, #0]
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a5f8:	801a      	strh	r2, [r3, #0]
 800a5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5fe:	2b3e      	cmp	r3, #62	; 0x3e
 800a600:	d923      	bls.n	800a64a <USB_EPStartXfer+0x1628>
 800a602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a606:	095b      	lsrs	r3, r3, #5
 800a608:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a60c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a610:	f003 031f 	and.w	r3, r3, #31
 800a614:	2b00      	cmp	r3, #0
 800a616:	d104      	bne.n	800a622 <USB_EPStartXfer+0x1600>
 800a618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a61c:	3b01      	subs	r3, #1
 800a61e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	b29a      	uxth	r2, r3
 800a62a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a62e:	b29b      	uxth	r3, r3
 800a630:	029b      	lsls	r3, r3, #10
 800a632:	b29b      	uxth	r3, r3
 800a634:	4313      	orrs	r3, r2
 800a636:	b29b      	uxth	r3, r3
 800a638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a63c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a640:	b29a      	uxth	r2, r3
 800a642:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a646:	801a      	strh	r2, [r3, #0]
 800a648:	e05c      	b.n	800a704 <USB_EPStartXfer+0x16e2>
 800a64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d10c      	bne.n	800a66c <USB_EPStartXfer+0x164a>
 800a652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a65e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a662:	b29a      	uxth	r2, r3
 800a664:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a668:	801a      	strh	r2, [r3, #0]
 800a66a:	e04b      	b.n	800a704 <USB_EPStartXfer+0x16e2>
 800a66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a670:	085b      	lsrs	r3, r3, #1
 800a672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67a:	f003 0301 	and.w	r3, r3, #1
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d004      	beq.n	800a68c <USB_EPStartXfer+0x166a>
 800a682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a686:	3301      	adds	r3, #1
 800a688:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a68c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	b29a      	uxth	r2, r3
 800a694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a698:	b29b      	uxth	r3, r3
 800a69a:	029b      	lsls	r3, r3, #10
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a6a6:	801a      	strh	r2, [r3, #0]
 800a6a8:	e02c      	b.n	800a704 <USB_EPStartXfer+0x16e2>
 800a6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	785b      	ldrb	r3, [r3, #1]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d124      	bne.n	800a704 <USB_EPStartXfer+0x16e2>
 800a6ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a6d0:	4413      	add	r3, r2
 800a6d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	00da      	lsls	r2, r3, #3
 800a6e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a6e8:	4413      	add	r3, r2
 800a6ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a6fc:	801a      	strh	r2, [r3, #0]
 800a6fe:	e001      	b.n	800a704 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e03a      	b.n	800a77a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	881b      	ldrh	r3, [r3, #0]
 800a720:	b29b      	uxth	r3, r3
 800a722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a72a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a72e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a732:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a736:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a73a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a73e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a742:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a74a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	441a      	add	r2, r3
 800a760:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a76c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a774:	b29b      	uxth	r3, r3
 800a776:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	785b      	ldrb	r3, [r3, #1]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d020      	beq.n	800a7d8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4413      	add	r3, r2
 800a7a0:	881b      	ldrh	r3, [r3, #0]
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7ac:	81bb      	strh	r3, [r7, #12]
 800a7ae:	89bb      	ldrh	r3, [r7, #12]
 800a7b0:	f083 0310 	eor.w	r3, r3, #16
 800a7b4:	81bb      	strh	r3, [r7, #12]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	441a      	add	r2, r3
 800a7c0:	89bb      	ldrh	r3, [r7, #12]
 800a7c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	8013      	strh	r3, [r2, #0]
 800a7d6:	e01f      	b.n	800a818 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4413      	add	r3, r2
 800a7e2:	881b      	ldrh	r3, [r3, #0]
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ee:	81fb      	strh	r3, [r7, #14]
 800a7f0:	89fb      	ldrh	r3, [r7, #14]
 800a7f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a7f6:	81fb      	strh	r3, [r7, #14]
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	441a      	add	r2, r3
 800a802:	89fb      	ldrh	r3, [r7, #14]
 800a804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a80c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a814:	b29b      	uxth	r3, r3
 800a816:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a826:	b480      	push	{r7}
 800a828:	b087      	sub	sp, #28
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	7b1b      	ldrb	r3, [r3, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	f040 809d 	bne.w	800a974 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	785b      	ldrb	r3, [r3, #1]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d04c      	beq.n	800a8dc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4413      	add	r3, r2
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	823b      	strh	r3, [r7, #16]
 800a850:	8a3b      	ldrh	r3, [r7, #16]
 800a852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a856:	2b00      	cmp	r3, #0
 800a858:	d01b      	beq.n	800a892 <USB_EPClearStall+0x6c>
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	881b      	ldrh	r3, [r3, #0]
 800a866:	b29b      	uxth	r3, r3
 800a868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a86c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a870:	81fb      	strh	r3, [r7, #14]
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	441a      	add	r2, r3
 800a87c:	89fb      	ldrh	r3, [r7, #14]
 800a87e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a88a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a88e:	b29b      	uxth	r3, r3
 800a890:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	78db      	ldrb	r3, [r3, #3]
 800a896:	2b01      	cmp	r3, #1
 800a898:	d06c      	beq.n	800a974 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8b0:	81bb      	strh	r3, [r7, #12]
 800a8b2:	89bb      	ldrh	r3, [r7, #12]
 800a8b4:	f083 0320 	eor.w	r3, r3, #32
 800a8b8:	81bb      	strh	r3, [r7, #12]
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	441a      	add	r2, r3
 800a8c4:	89bb      	ldrh	r3, [r7, #12]
 800a8c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	8013      	strh	r3, [r2, #0]
 800a8da:	e04b      	b.n	800a974 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4413      	add	r3, r2
 800a8e6:	881b      	ldrh	r3, [r3, #0]
 800a8e8:	82fb      	strh	r3, [r7, #22]
 800a8ea:	8afb      	ldrh	r3, [r7, #22]
 800a8ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d01b      	beq.n	800a92c <USB_EPClearStall+0x106>
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4413      	add	r3, r2
 800a8fe:	881b      	ldrh	r3, [r3, #0]
 800a900:	b29b      	uxth	r3, r3
 800a902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a90a:	82bb      	strh	r3, [r7, #20]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	441a      	add	r2, r3
 800a916:	8abb      	ldrh	r3, [r7, #20]
 800a918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a91c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a928:	b29b      	uxth	r3, r3
 800a92a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	881b      	ldrh	r3, [r3, #0]
 800a938:	b29b      	uxth	r3, r3
 800a93a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a93e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a942:	827b      	strh	r3, [r7, #18]
 800a944:	8a7b      	ldrh	r3, [r7, #18]
 800a946:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a94a:	827b      	strh	r3, [r7, #18]
 800a94c:	8a7b      	ldrh	r3, [r7, #18]
 800a94e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a952:	827b      	strh	r3, [r7, #18]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	441a      	add	r2, r3
 800a95e:	8a7b      	ldrh	r3, [r7, #18]
 800a960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a96c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a970:	b29b      	uxth	r3, r3
 800a972:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	371c      	adds	r7, #28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	460b      	mov	r3, r1
 800a98c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a98e:	78fb      	ldrb	r3, [r7, #3]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d103      	bne.n	800a99c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2280      	movs	r2, #128	; 0x80
 800a998:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	370c      	adds	r7, #12
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b083      	sub	sp, #12
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b08b      	sub	sp, #44	; 0x2c
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	4611      	mov	r1, r2
 800aa04:	461a      	mov	r2, r3
 800aa06:	460b      	mov	r3, r1
 800aa08:	80fb      	strh	r3, [r7, #6]
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800aa0e:	88bb      	ldrh	r3, [r7, #4]
 800aa10:	3301      	adds	r3, #1
 800aa12:	085b      	lsrs	r3, r3, #1
 800aa14:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aa1e:	88fa      	ldrh	r2, [r7, #6]
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa28:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	627b      	str	r3, [r7, #36]	; 0x24
 800aa2e:	e01b      	b.n	800aa68 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	021b      	lsls	r3, r3, #8
 800aa3e:	b21a      	sxth	r2, r3
 800aa40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	b21b      	sxth	r3, r3
 800aa48:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800aa4a:	6a3b      	ldr	r3, [r7, #32]
 800aa4c:	8a7a      	ldrh	r2, [r7, #18]
 800aa4e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800aa50:	6a3b      	ldr	r3, [r7, #32]
 800aa52:	3302      	adds	r3, #2
 800aa54:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	3b01      	subs	r3, #1
 800aa66:	627b      	str	r3, [r7, #36]	; 0x24
 800aa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1e0      	bne.n	800aa30 <USB_WritePMA+0x38>
  }
}
 800aa6e:	bf00      	nop
 800aa70:	bf00      	nop
 800aa72:	372c      	adds	r7, #44	; 0x2c
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b08b      	sub	sp, #44	; 0x2c
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	4611      	mov	r1, r2
 800aa88:	461a      	mov	r2, r3
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	80fb      	strh	r3, [r7, #6]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800aa92:	88bb      	ldrh	r3, [r7, #4]
 800aa94:	085b      	lsrs	r3, r3, #1
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aaa2:	88fa      	ldrh	r2, [r7, #6]
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	627b      	str	r3, [r7, #36]	; 0x24
 800aab2:	e018      	b.n	800aae6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800aab4:	6a3b      	ldr	r3, [r7, #32]
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	3302      	adds	r3, #2
 800aac0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	b2da      	uxtb	r2, r3
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	3301      	adds	r3, #1
 800aace:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	0a1b      	lsrs	r3, r3, #8
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	3301      	adds	r3, #1
 800aade:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800aae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae2:	3b01      	subs	r3, #1
 800aae4:	627b      	str	r3, [r7, #36]	; 0x24
 800aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1e3      	bne.n	800aab4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800aaec:	88bb      	ldrh	r3, [r7, #4]
 800aaee:	f003 0301 	and.w	r3, r3, #1
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d007      	beq.n	800ab08 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800aaf8:	6a3b      	ldr	r3, [r7, #32]
 800aafa:	881b      	ldrh	r3, [r3, #0]
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	701a      	strb	r2, [r3, #0]
  }
}
 800ab08:	bf00      	nop
 800ab0a:	372c      	adds	r7, #44	; 0x2c
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ab24:	f005 fb7c 	bl	8010220 <USBD_static_malloc>
 800ab28:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d109      	bne.n	800ab44 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	32b0      	adds	r2, #176	; 0xb0
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ab40:	2302      	movs	r3, #2
 800ab42:	e0d4      	b.n	800acee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ab44:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ab48:	2100      	movs	r1, #0
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	f005 fe32 	bl	80107b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	32b0      	adds	r2, #176	; 0xb0
 800ab5a:	68f9      	ldr	r1, [r7, #12]
 800ab5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	32b0      	adds	r2, #176	; 0xb0
 800ab6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	7c1b      	ldrb	r3, [r3, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d138      	bne.n	800abee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab7c:	4b5e      	ldr	r3, [pc, #376]	; (800acf8 <USBD_CDC_Init+0x1e4>)
 800ab7e:	7819      	ldrb	r1, [r3, #0]
 800ab80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab84:	2202      	movs	r2, #2
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f005 f9f1 	bl	800ff6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab8c:	4b5a      	ldr	r3, [pc, #360]	; (800acf8 <USBD_CDC_Init+0x1e4>)
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	f003 020f 	and.w	r2, r3, #15
 800ab94:	6879      	ldr	r1, [r7, #4]
 800ab96:	4613      	mov	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4413      	add	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	440b      	add	r3, r1
 800aba0:	3324      	adds	r3, #36	; 0x24
 800aba2:	2201      	movs	r2, #1
 800aba4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aba6:	4b55      	ldr	r3, [pc, #340]	; (800acfc <USBD_CDC_Init+0x1e8>)
 800aba8:	7819      	ldrb	r1, [r3, #0]
 800abaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abae:	2202      	movs	r2, #2
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f005 f9dc 	bl	800ff6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800abb6:	4b51      	ldr	r3, [pc, #324]	; (800acfc <USBD_CDC_Init+0x1e8>)
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	f003 020f 	and.w	r2, r3, #15
 800abbe:	6879      	ldr	r1, [r7, #4]
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	440b      	add	r3, r1
 800abca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800abce:	2201      	movs	r2, #1
 800abd0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800abd2:	4b4b      	ldr	r3, [pc, #300]	; (800ad00 <USBD_CDC_Init+0x1ec>)
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	f003 020f 	and.w	r2, r3, #15
 800abda:	6879      	ldr	r1, [r7, #4]
 800abdc:	4613      	mov	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	440b      	add	r3, r1
 800abe6:	3326      	adds	r3, #38	; 0x26
 800abe8:	2210      	movs	r2, #16
 800abea:	801a      	strh	r2, [r3, #0]
 800abec:	e035      	b.n	800ac5a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800abee:	4b42      	ldr	r3, [pc, #264]	; (800acf8 <USBD_CDC_Init+0x1e4>)
 800abf0:	7819      	ldrb	r1, [r3, #0]
 800abf2:	2340      	movs	r3, #64	; 0x40
 800abf4:	2202      	movs	r2, #2
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f005 f9b9 	bl	800ff6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800abfc:	4b3e      	ldr	r3, [pc, #248]	; (800acf8 <USBD_CDC_Init+0x1e4>)
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	f003 020f 	and.w	r2, r3, #15
 800ac04:	6879      	ldr	r1, [r7, #4]
 800ac06:	4613      	mov	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	440b      	add	r3, r1
 800ac10:	3324      	adds	r3, #36	; 0x24
 800ac12:	2201      	movs	r2, #1
 800ac14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac16:	4b39      	ldr	r3, [pc, #228]	; (800acfc <USBD_CDC_Init+0x1e8>)
 800ac18:	7819      	ldrb	r1, [r3, #0]
 800ac1a:	2340      	movs	r3, #64	; 0x40
 800ac1c:	2202      	movs	r2, #2
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f005 f9a5 	bl	800ff6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac24:	4b35      	ldr	r3, [pc, #212]	; (800acfc <USBD_CDC_Init+0x1e8>)
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	f003 020f 	and.w	r2, r3, #15
 800ac2c:	6879      	ldr	r1, [r7, #4]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	440b      	add	r3, r1
 800ac38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ac40:	4b2f      	ldr	r3, [pc, #188]	; (800ad00 <USBD_CDC_Init+0x1ec>)
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	f003 020f 	and.w	r2, r3, #15
 800ac48:	6879      	ldr	r1, [r7, #4]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4413      	add	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	440b      	add	r3, r1
 800ac54:	3326      	adds	r3, #38	; 0x26
 800ac56:	2210      	movs	r2, #16
 800ac58:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac5a:	4b29      	ldr	r3, [pc, #164]	; (800ad00 <USBD_CDC_Init+0x1ec>)
 800ac5c:	7819      	ldrb	r1, [r3, #0]
 800ac5e:	2308      	movs	r3, #8
 800ac60:	2203      	movs	r2, #3
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f005 f983 	bl	800ff6e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ac68:	4b25      	ldr	r3, [pc, #148]	; (800ad00 <USBD_CDC_Init+0x1ec>)
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	f003 020f 	and.w	r2, r3, #15
 800ac70:	6879      	ldr	r1, [r7, #4]
 800ac72:	4613      	mov	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	440b      	add	r3, r1
 800ac7c:	3324      	adds	r3, #36	; 0x24
 800ac7e:	2201      	movs	r2, #1
 800ac80:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	33b0      	adds	r3, #176	; 0xb0
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d101      	bne.n	800acbc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800acb8:	2302      	movs	r3, #2
 800acba:	e018      	b.n	800acee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	7c1b      	ldrb	r3, [r3, #16]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10a      	bne.n	800acda <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800acc4:	4b0d      	ldr	r3, [pc, #52]	; (800acfc <USBD_CDC_Init+0x1e8>)
 800acc6:	7819      	ldrb	r1, [r3, #0]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800acce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f005 fa3a 	bl	801014c <USBD_LL_PrepareReceive>
 800acd8:	e008      	b.n	800acec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800acda:	4b08      	ldr	r3, [pc, #32]	; (800acfc <USBD_CDC_Init+0x1e8>)
 800acdc:	7819      	ldrb	r1, [r3, #0]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ace4:	2340      	movs	r3, #64	; 0x40
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f005 fa30 	bl	801014c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	2000009b 	.word	0x2000009b
 800acfc:	2000009c 	.word	0x2000009c
 800ad00:	2000009d 	.word	0x2000009d

0800ad04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ad10:	4b3a      	ldr	r3, [pc, #232]	; (800adfc <USBD_CDC_DeInit+0xf8>)
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f005 f94f 	bl	800ffba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ad1c:	4b37      	ldr	r3, [pc, #220]	; (800adfc <USBD_CDC_DeInit+0xf8>)
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	f003 020f 	and.w	r2, r3, #15
 800ad24:	6879      	ldr	r1, [r7, #4]
 800ad26:	4613      	mov	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4413      	add	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	440b      	add	r3, r1
 800ad30:	3324      	adds	r3, #36	; 0x24
 800ad32:	2200      	movs	r2, #0
 800ad34:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ad36:	4b32      	ldr	r3, [pc, #200]	; (800ae00 <USBD_CDC_DeInit+0xfc>)
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f005 f93c 	bl	800ffba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ad42:	4b2f      	ldr	r3, [pc, #188]	; (800ae00 <USBD_CDC_DeInit+0xfc>)
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	f003 020f 	and.w	r2, r3, #15
 800ad4a:	6879      	ldr	r1, [r7, #4]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4413      	add	r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	440b      	add	r3, r1
 800ad56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ad5e:	4b29      	ldr	r3, [pc, #164]	; (800ae04 <USBD_CDC_DeInit+0x100>)
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	4619      	mov	r1, r3
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f005 f928 	bl	800ffba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ad6a:	4b26      	ldr	r3, [pc, #152]	; (800ae04 <USBD_CDC_DeInit+0x100>)
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	f003 020f 	and.w	r2, r3, #15
 800ad72:	6879      	ldr	r1, [r7, #4]
 800ad74:	4613      	mov	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4413      	add	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	440b      	add	r3, r1
 800ad7e:	3324      	adds	r3, #36	; 0x24
 800ad80:	2200      	movs	r2, #0
 800ad82:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ad84:	4b1f      	ldr	r3, [pc, #124]	; (800ae04 <USBD_CDC_DeInit+0x100>)
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	f003 020f 	and.w	r2, r3, #15
 800ad8c:	6879      	ldr	r1, [r7, #4]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	440b      	add	r3, r1
 800ad98:	3326      	adds	r3, #38	; 0x26
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	32b0      	adds	r2, #176	; 0xb0
 800ada8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d01f      	beq.n	800adf0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	33b0      	adds	r3, #176	; 0xb0
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	4413      	add	r3, r2
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	32b0      	adds	r2, #176	; 0xb0
 800adce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add2:	4618      	mov	r0, r3
 800add4:	f005 fa32 	bl	801023c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	32b0      	adds	r2, #176	; 0xb0
 800ade2:	2100      	movs	r1, #0
 800ade4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	2000009b 	.word	0x2000009b
 800ae00:	2000009c 	.word	0x2000009c
 800ae04:	2000009d 	.word	0x2000009d

0800ae08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b086      	sub	sp, #24
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	32b0      	adds	r2, #176	; 0xb0
 800ae1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae22:	2300      	movs	r3, #0
 800ae24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ae26:	2300      	movs	r3, #0
 800ae28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ae34:	2303      	movs	r3, #3
 800ae36:	e0bf      	b.n	800afb8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d050      	beq.n	800aee6 <USBD_CDC_Setup+0xde>
 800ae44:	2b20      	cmp	r3, #32
 800ae46:	f040 80af 	bne.w	800afa8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	88db      	ldrh	r3, [r3, #6]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d03a      	beq.n	800aec8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	b25b      	sxtb	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	da1b      	bge.n	800ae94 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	33b0      	adds	r3, #176	; 0xb0
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ae72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae74:	683a      	ldr	r2, [r7, #0]
 800ae76:	88d2      	ldrh	r2, [r2, #6]
 800ae78:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	88db      	ldrh	r3, [r3, #6]
 800ae7e:	2b07      	cmp	r3, #7
 800ae80:	bf28      	it	cs
 800ae82:	2307      	movcs	r3, #7
 800ae84:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	89fa      	ldrh	r2, [r7, #14]
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f001 fce1 	bl	800c854 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ae92:	e090      	b.n	800afb6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	785a      	ldrb	r2, [r3, #1]
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	88db      	ldrh	r3, [r3, #6]
 800aea2:	2b3f      	cmp	r3, #63	; 0x3f
 800aea4:	d803      	bhi.n	800aeae <USBD_CDC_Setup+0xa6>
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	88db      	ldrh	r3, [r3, #6]
 800aeaa:	b2da      	uxtb	r2, r3
 800aeac:	e000      	b.n	800aeb0 <USBD_CDC_Setup+0xa8>
 800aeae:	2240      	movs	r2, #64	; 0x40
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aeb6:	6939      	ldr	r1, [r7, #16]
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800aebe:	461a      	mov	r2, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f001 fcf3 	bl	800c8ac <USBD_CtlPrepareRx>
      break;
 800aec6:	e076      	b.n	800afb6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	33b0      	adds	r3, #176	; 0xb0
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	683a      	ldr	r2, [r7, #0]
 800aedc:	7850      	ldrb	r0, [r2, #1]
 800aede:	2200      	movs	r2, #0
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	4798      	blx	r3
      break;
 800aee4:	e067      	b.n	800afb6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	785b      	ldrb	r3, [r3, #1]
 800aeea:	2b0b      	cmp	r3, #11
 800aeec:	d851      	bhi.n	800af92 <USBD_CDC_Setup+0x18a>
 800aeee:	a201      	add	r2, pc, #4	; (adr r2, 800aef4 <USBD_CDC_Setup+0xec>)
 800aef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef4:	0800af25 	.word	0x0800af25
 800aef8:	0800afa1 	.word	0x0800afa1
 800aefc:	0800af93 	.word	0x0800af93
 800af00:	0800af93 	.word	0x0800af93
 800af04:	0800af93 	.word	0x0800af93
 800af08:	0800af93 	.word	0x0800af93
 800af0c:	0800af93 	.word	0x0800af93
 800af10:	0800af93 	.word	0x0800af93
 800af14:	0800af93 	.word	0x0800af93
 800af18:	0800af93 	.word	0x0800af93
 800af1c:	0800af4f 	.word	0x0800af4f
 800af20:	0800af79 	.word	0x0800af79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	2b03      	cmp	r3, #3
 800af2e:	d107      	bne.n	800af40 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800af30:	f107 030a 	add.w	r3, r7, #10
 800af34:	2202      	movs	r2, #2
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f001 fc8b 	bl	800c854 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af3e:	e032      	b.n	800afa6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f001 fc15 	bl	800c772 <USBD_CtlError>
            ret = USBD_FAIL;
 800af48:	2303      	movs	r3, #3
 800af4a:	75fb      	strb	r3, [r7, #23]
          break;
 800af4c:	e02b      	b.n	800afa6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b03      	cmp	r3, #3
 800af58:	d107      	bne.n	800af6a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800af5a:	f107 030d 	add.w	r3, r7, #13
 800af5e:	2201      	movs	r2, #1
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f001 fc76 	bl	800c854 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af68:	e01d      	b.n	800afa6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af6a:	6839      	ldr	r1, [r7, #0]
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f001 fc00 	bl	800c772 <USBD_CtlError>
            ret = USBD_FAIL;
 800af72:	2303      	movs	r3, #3
 800af74:	75fb      	strb	r3, [r7, #23]
          break;
 800af76:	e016      	b.n	800afa6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	2b03      	cmp	r3, #3
 800af82:	d00f      	beq.n	800afa4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f001 fbf3 	bl	800c772 <USBD_CtlError>
            ret = USBD_FAIL;
 800af8c:	2303      	movs	r3, #3
 800af8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800af90:	e008      	b.n	800afa4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f001 fbec 	bl	800c772 <USBD_CtlError>
          ret = USBD_FAIL;
 800af9a:	2303      	movs	r3, #3
 800af9c:	75fb      	strb	r3, [r7, #23]
          break;
 800af9e:	e002      	b.n	800afa6 <USBD_CDC_Setup+0x19e>
          break;
 800afa0:	bf00      	nop
 800afa2:	e008      	b.n	800afb6 <USBD_CDC_Setup+0x1ae>
          break;
 800afa4:	bf00      	nop
      }
      break;
 800afa6:	e006      	b.n	800afb6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f001 fbe1 	bl	800c772 <USBD_CtlError>
      ret = USBD_FAIL;
 800afb0:	2303      	movs	r3, #3
 800afb2:	75fb      	strb	r3, [r7, #23]
      break;
 800afb4:	bf00      	nop
  }

  return (uint8_t)ret;
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	460b      	mov	r3, r1
 800afca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	32b0      	adds	r2, #176	; 0xb0
 800afde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d101      	bne.n	800afea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e065      	b.n	800b0b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	32b0      	adds	r2, #176	; 0xb0
 800aff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800affa:	78fb      	ldrb	r3, [r7, #3]
 800affc:	f003 020f 	and.w	r2, r3, #15
 800b000:	6879      	ldr	r1, [r7, #4]
 800b002:	4613      	mov	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4413      	add	r3, r2
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	440b      	add	r3, r1
 800b00c:	3318      	adds	r3, #24
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d02f      	beq.n	800b074 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b014:	78fb      	ldrb	r3, [r7, #3]
 800b016:	f003 020f 	and.w	r2, r3, #15
 800b01a:	6879      	ldr	r1, [r7, #4]
 800b01c:	4613      	mov	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	440b      	add	r3, r1
 800b026:	3318      	adds	r3, #24
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	78fb      	ldrb	r3, [r7, #3]
 800b02c:	f003 010f 	and.w	r1, r3, #15
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	460b      	mov	r3, r1
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	440b      	add	r3, r1
 800b038:	00db      	lsls	r3, r3, #3
 800b03a:	4403      	add	r3, r0
 800b03c:	3320      	adds	r3, #32
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	fbb2 f1f3 	udiv	r1, r2, r3
 800b044:	fb01 f303 	mul.w	r3, r1, r3
 800b048:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d112      	bne.n	800b074 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b04e:	78fb      	ldrb	r3, [r7, #3]
 800b050:	f003 020f 	and.w	r2, r3, #15
 800b054:	6879      	ldr	r1, [r7, #4]
 800b056:	4613      	mov	r3, r2
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4413      	add	r3, r2
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	440b      	add	r3, r1
 800b060:	3318      	adds	r3, #24
 800b062:	2200      	movs	r2, #0
 800b064:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b066:	78f9      	ldrb	r1, [r7, #3]
 800b068:	2300      	movs	r3, #0
 800b06a:	2200      	movs	r2, #0
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f005 f84c 	bl	801010a <USBD_LL_Transmit>
 800b072:	e01f      	b.n	800b0b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	2200      	movs	r2, #0
 800b078:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	33b0      	adds	r3, #176	; 0xb0
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4413      	add	r3, r2
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d010      	beq.n	800b0b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	33b0      	adds	r3, #176	; 0xb0
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4413      	add	r3, r2
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	68ba      	ldr	r2, [r7, #8]
 800b0a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b0b0:	78fa      	ldrb	r2, [r7, #3]
 800b0b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b084      	sub	sp, #16
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	32b0      	adds	r2, #176	; 0xb0
 800b0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	32b0      	adds	r2, #176	; 0xb0
 800b0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	e01a      	b.n	800b126 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b0f0:	78fb      	ldrb	r3, [r7, #3]
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f005 f84a 	bl	801018e <USBD_LL_GetRxDataSize>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	33b0      	adds	r3, #176	; 0xb0
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4413      	add	r3, r2
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b120:	4611      	mov	r1, r2
 800b122:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	32b0      	adds	r2, #176	; 0xb0
 800b140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b144:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b14c:	2303      	movs	r3, #3
 800b14e:	e025      	b.n	800b19c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	33b0      	adds	r3, #176	; 0xb0
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d01a      	beq.n	800b19a <USBD_CDC_EP0_RxReady+0x6c>
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b16a:	2bff      	cmp	r3, #255	; 0xff
 800b16c:	d015      	beq.n	800b19a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	33b0      	adds	r3, #176	; 0xb0
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b186:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b18e:	b292      	uxth	r2, r2
 800b190:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	22ff      	movs	r2, #255	; 0xff
 800b196:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1ac:	2182      	movs	r1, #130	; 0x82
 800b1ae:	4818      	ldr	r0, [pc, #96]	; (800b210 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1b0:	f000 fc7d 	bl	800baae <USBD_GetEpDesc>
 800b1b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1b6:	2101      	movs	r1, #1
 800b1b8:	4815      	ldr	r0, [pc, #84]	; (800b210 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1ba:	f000 fc78 	bl	800baae <USBD_GetEpDesc>
 800b1be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b1c0:	2181      	movs	r1, #129	; 0x81
 800b1c2:	4813      	ldr	r0, [pc, #76]	; (800b210 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1c4:	f000 fc73 	bl	800baae <USBD_GetEpDesc>
 800b1c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d002      	beq.n	800b1d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	2210      	movs	r2, #16
 800b1d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d006      	beq.n	800b1ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1e4:	711a      	strb	r2, [r3, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d006      	beq.n	800b1fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1f8:	711a      	strb	r2, [r3, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2243      	movs	r2, #67	; 0x43
 800b202:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b204:	4b02      	ldr	r3, [pc, #8]	; (800b210 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b206:	4618      	mov	r0, r3
 800b208:	3718      	adds	r7, #24
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	20000058 	.word	0x20000058

0800b214 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b21c:	2182      	movs	r1, #130	; 0x82
 800b21e:	4818      	ldr	r0, [pc, #96]	; (800b280 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b220:	f000 fc45 	bl	800baae <USBD_GetEpDesc>
 800b224:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b226:	2101      	movs	r1, #1
 800b228:	4815      	ldr	r0, [pc, #84]	; (800b280 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b22a:	f000 fc40 	bl	800baae <USBD_GetEpDesc>
 800b22e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b230:	2181      	movs	r1, #129	; 0x81
 800b232:	4813      	ldr	r0, [pc, #76]	; (800b280 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b234:	f000 fc3b 	bl	800baae <USBD_GetEpDesc>
 800b238:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d002      	beq.n	800b246 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	2210      	movs	r2, #16
 800b244:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d006      	beq.n	800b25a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	2200      	movs	r2, #0
 800b250:	711a      	strb	r2, [r3, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f042 0202 	orr.w	r2, r2, #2
 800b258:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d006      	beq.n	800b26e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	711a      	strb	r2, [r3, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	f042 0202 	orr.w	r2, r2, #2
 800b26c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2243      	movs	r2, #67	; 0x43
 800b272:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b274:	4b02      	ldr	r3, [pc, #8]	; (800b280 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b276:	4618      	mov	r0, r3
 800b278:	3718      	adds	r7, #24
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	20000058 	.word	0x20000058

0800b284 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b28c:	2182      	movs	r1, #130	; 0x82
 800b28e:	4818      	ldr	r0, [pc, #96]	; (800b2f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b290:	f000 fc0d 	bl	800baae <USBD_GetEpDesc>
 800b294:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b296:	2101      	movs	r1, #1
 800b298:	4815      	ldr	r0, [pc, #84]	; (800b2f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b29a:	f000 fc08 	bl	800baae <USBD_GetEpDesc>
 800b29e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2a0:	2181      	movs	r1, #129	; 0x81
 800b2a2:	4813      	ldr	r0, [pc, #76]	; (800b2f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2a4:	f000 fc03 	bl	800baae <USBD_GetEpDesc>
 800b2a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	2210      	movs	r2, #16
 800b2b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d006      	beq.n	800b2ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2c4:	711a      	strb	r2, [r3, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d006      	beq.n	800b2de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2d8:	711a      	strb	r2, [r3, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2243      	movs	r2, #67	; 0x43
 800b2e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2e4:	4b02      	ldr	r3, [pc, #8]	; (800b2f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20000058 	.word	0x20000058

0800b2f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	220a      	movs	r2, #10
 800b300:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b302:	4b03      	ldr	r3, [pc, #12]	; (800b310 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b304:	4618      	mov	r0, r3
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr
 800b310:	20000014 	.word	0x20000014

0800b314 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b324:	2303      	movs	r3, #3
 800b326:	e009      	b.n	800b33c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	33b0      	adds	r3, #176	; 0xb0
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4413      	add	r3, r2
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b348:	b480      	push	{r7}
 800b34a:	b087      	sub	sp, #28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	32b0      	adds	r2, #176	; 0xb0
 800b35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b362:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d101      	bne.n	800b36e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e008      	b.n	800b380 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	371c      	adds	r7, #28
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	32b0      	adds	r2, #176	; 0xb0
 800b3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d101      	bne.n	800b3b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	e004      	b.n	800b3ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3714      	adds	r7, #20
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
	...

0800b3c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	32b0      	adds	r2, #176	; 0xb0
 800b3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	32b0      	adds	r2, #176	; 0xb0
 800b3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d101      	bne.n	800b3f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	e018      	b.n	800b428 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	7c1b      	ldrb	r3, [r3, #16]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10a      	bne.n	800b414 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b3fe:	4b0c      	ldr	r3, [pc, #48]	; (800b430 <USBD_CDC_ReceivePacket+0x68>)
 800b400:	7819      	ldrb	r1, [r3, #0]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f004 fe9d 	bl	801014c <USBD_LL_PrepareReceive>
 800b412:	e008      	b.n	800b426 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b414:	4b06      	ldr	r3, [pc, #24]	; (800b430 <USBD_CDC_ReceivePacket+0x68>)
 800b416:	7819      	ldrb	r1, [r3, #0]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b41e:	2340      	movs	r3, #64	; 0x40
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f004 fe93 	bl	801014c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	2000009c 	.word	0x2000009c

0800b434 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b086      	sub	sp, #24
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	4613      	mov	r3, r2
 800b440:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b448:	2303      	movs	r3, #3
 800b44a:	e01f      	b.n	800b48c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2200      	movs	r2, #0
 800b458:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d003      	beq.n	800b472 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2201      	movs	r2, #1
 800b476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	79fa      	ldrb	r2, [r7, #7]
 800b47e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f004 fcf7 	bl	800fe74 <USBD_LL_Init>
 800b486:	4603      	mov	r3, r0
 800b488:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b48a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3718      	adds	r7, #24
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d101      	bne.n	800b4ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	e025      	b.n	800b4f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	32ae      	adds	r2, #174	; 0xae
 800b4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00f      	beq.n	800b4e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	32ae      	adds	r2, #174	; 0xae
 800b4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d8:	f107 020e 	add.w	r2, r7, #14
 800b4dc:	4610      	mov	r0, r2
 800b4de:	4798      	blx	r3
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b4ee:	1c5a      	adds	r2, r3, #1
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f004 fd15 	bl	800ff38 <USBD_LL_Start>
 800b50e:	4603      	mov	r3, r0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b520:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b522:	4618      	mov	r0, r3
 800b524:	370c      	adds	r7, #12
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	460b      	mov	r3, r1
 800b538:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b544:	2b00      	cmp	r3, #0
 800b546:	d009      	beq.n	800b55c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	78fa      	ldrb	r2, [r7, #3]
 800b552:	4611      	mov	r1, r2
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	4798      	blx	r3
 800b558:	4603      	mov	r3, r0
 800b55a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b084      	sub	sp, #16
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	460b      	mov	r3, r1
 800b570:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b572:	2300      	movs	r3, #0
 800b574:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	78fa      	ldrb	r2, [r7, #3]
 800b580:	4611      	mov	r1, r2
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	4798      	blx	r3
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d001      	beq.n	800b590 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b58c:	2303      	movs	r3, #3
 800b58e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b590:	7bfb      	ldrb	r3, [r7, #15]
}
 800b592:	4618      	mov	r0, r3
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b084      	sub	sp, #16
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5aa:	6839      	ldr	r1, [r7, #0]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f001 f8a6 	bl	800c6fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b5ce:	f003 031f 	and.w	r3, r3, #31
 800b5d2:	2b02      	cmp	r3, #2
 800b5d4:	d01a      	beq.n	800b60c <USBD_LL_SetupStage+0x72>
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d822      	bhi.n	800b620 <USBD_LL_SetupStage+0x86>
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d002      	beq.n	800b5e4 <USBD_LL_SetupStage+0x4a>
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d00a      	beq.n	800b5f8 <USBD_LL_SetupStage+0x5e>
 800b5e2:	e01d      	b.n	800b620 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fad3 	bl	800bb98 <USBD_StdDevReq>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b5f6:	e020      	b.n	800b63a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fb3b 	bl	800bc7c <USBD_StdItfReq>
 800b606:	4603      	mov	r3, r0
 800b608:	73fb      	strb	r3, [r7, #15]
      break;
 800b60a:	e016      	b.n	800b63a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fb9d 	bl	800bd54 <USBD_StdEPReq>
 800b61a:	4603      	mov	r3, r0
 800b61c:	73fb      	strb	r3, [r7, #15]
      break;
 800b61e:	e00c      	b.n	800b63a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b626:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	4619      	mov	r1, r3
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f004 fce2 	bl	800fff8 <USBD_LL_StallEP>
 800b634:	4603      	mov	r3, r0
 800b636:	73fb      	strb	r3, [r7, #15]
      break;
 800b638:	bf00      	nop
  }

  return ret;
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	460b      	mov	r3, r1
 800b64e:	607a      	str	r2, [r7, #4]
 800b650:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b652:	2300      	movs	r3, #0
 800b654:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b656:	7afb      	ldrb	r3, [r7, #11]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d16e      	bne.n	800b73a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b662:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b66a:	2b03      	cmp	r3, #3
 800b66c:	f040 8098 	bne.w	800b7a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	689a      	ldr	r2, [r3, #8]
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d913      	bls.n	800b6a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	689a      	ldr	r2, [r3, #8]
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	1ad2      	subs	r2, r2, r3
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	68da      	ldr	r2, [r3, #12]
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	4293      	cmp	r3, r2
 800b694:	bf28      	it	cs
 800b696:	4613      	movcs	r3, r2
 800b698:	461a      	mov	r2, r3
 800b69a:	6879      	ldr	r1, [r7, #4]
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f001 f922 	bl	800c8e6 <USBD_CtlContinueRx>
 800b6a2:	e07d      	b.n	800b7a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b6aa:	f003 031f 	and.w	r3, r3, #31
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d014      	beq.n	800b6dc <USBD_LL_DataOutStage+0x98>
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d81d      	bhi.n	800b6f2 <USBD_LL_DataOutStage+0xae>
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <USBD_LL_DataOutStage+0x7c>
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d003      	beq.n	800b6c6 <USBD_LL_DataOutStage+0x82>
 800b6be:	e018      	b.n	800b6f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	75bb      	strb	r3, [r7, #22]
            break;
 800b6c4:	e018      	b.n	800b6f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f000 f9d2 	bl	800ba7a <USBD_CoreFindIF>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	75bb      	strb	r3, [r7, #22]
            break;
 800b6da:	e00d      	b.n	800b6f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f000 f9d4 	bl	800ba94 <USBD_CoreFindEP>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	75bb      	strb	r3, [r7, #22]
            break;
 800b6f0:	e002      	b.n	800b6f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	75bb      	strb	r3, [r7, #22]
            break;
 800b6f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b6f8:	7dbb      	ldrb	r3, [r7, #22]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d119      	bne.n	800b732 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b704:	b2db      	uxtb	r3, r3
 800b706:	2b03      	cmp	r3, #3
 800b708:	d113      	bne.n	800b732 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b70a:	7dba      	ldrb	r2, [r7, #22]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	32ae      	adds	r2, #174	; 0xae
 800b710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00b      	beq.n	800b732 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b71a:	7dba      	ldrb	r2, [r7, #22]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b722:	7dba      	ldrb	r2, [r7, #22]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	32ae      	adds	r2, #174	; 0xae
 800b728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f001 f8e8 	bl	800c908 <USBD_CtlSendStatus>
 800b738:	e032      	b.n	800b7a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b73a:	7afb      	ldrb	r3, [r7, #11]
 800b73c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b740:	b2db      	uxtb	r3, r3
 800b742:	4619      	mov	r1, r3
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f000 f9a5 	bl	800ba94 <USBD_CoreFindEP>
 800b74a:	4603      	mov	r3, r0
 800b74c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b74e:	7dbb      	ldrb	r3, [r7, #22]
 800b750:	2bff      	cmp	r3, #255	; 0xff
 800b752:	d025      	beq.n	800b7a0 <USBD_LL_DataOutStage+0x15c>
 800b754:	7dbb      	ldrb	r3, [r7, #22]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d122      	bne.n	800b7a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b760:	b2db      	uxtb	r3, r3
 800b762:	2b03      	cmp	r3, #3
 800b764:	d117      	bne.n	800b796 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b766:	7dba      	ldrb	r2, [r7, #22]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	32ae      	adds	r2, #174	; 0xae
 800b76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b770:	699b      	ldr	r3, [r3, #24]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00f      	beq.n	800b796 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b776:	7dba      	ldrb	r2, [r7, #22]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b77e:	7dba      	ldrb	r2, [r7, #22]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	32ae      	adds	r2, #174	; 0xae
 800b784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	7afa      	ldrb	r2, [r7, #11]
 800b78c:	4611      	mov	r1, r2
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	4798      	blx	r3
 800b792:	4603      	mov	r3, r0
 800b794:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b796:	7dfb      	ldrb	r3, [r7, #23]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b79c:	7dfb      	ldrb	r3, [r7, #23]
 800b79e:	e000      	b.n	800b7a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3718      	adds	r7, #24
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b086      	sub	sp, #24
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	60f8      	str	r0, [r7, #12]
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	607a      	str	r2, [r7, #4]
 800b7b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b7b8:	7afb      	ldrb	r3, [r7, #11]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d16f      	bne.n	800b89e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	3314      	adds	r3, #20
 800b7c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d15a      	bne.n	800b884 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	689a      	ldr	r2, [r3, #8]
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d914      	bls.n	800b804 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	689a      	ldr	r2, [r3, #8]
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	1ad2      	subs	r2, r2, r3
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	6879      	ldr	r1, [r7, #4]
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f001 f84a 	bl	800c88a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f004 fca5 	bl	801014c <USBD_LL_PrepareReceive>
 800b802:	e03f      	b.n	800b884 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	68da      	ldr	r2, [r3, #12]
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d11c      	bne.n	800b84a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	685a      	ldr	r2, [r3, #4]
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b818:	429a      	cmp	r2, r3
 800b81a:	d316      	bcc.n	800b84a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	685a      	ldr	r2, [r3, #4]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b826:	429a      	cmp	r2, r3
 800b828:	d20f      	bcs.n	800b84a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b82a:	2200      	movs	r2, #0
 800b82c:	2100      	movs	r1, #0
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f001 f82b 	bl	800c88a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2200      	movs	r2, #0
 800b838:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b83c:	2300      	movs	r3, #0
 800b83e:	2200      	movs	r2, #0
 800b840:	2100      	movs	r1, #0
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f004 fc82 	bl	801014c <USBD_LL_PrepareReceive>
 800b848:	e01c      	b.n	800b884 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b03      	cmp	r3, #3
 800b854:	d10f      	bne.n	800b876 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d009      	beq.n	800b876 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2200      	movs	r2, #0
 800b866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b876:	2180      	movs	r1, #128	; 0x80
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f004 fbbd 	bl	800fff8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f001 f855 	bl	800c92e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d03a      	beq.n	800b904 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b88e:	68f8      	ldr	r0, [r7, #12]
 800b890:	f7ff fe42 	bl	800b518 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b89c:	e032      	b.n	800b904 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b89e:	7afb      	ldrb	r3, [r7, #11]
 800b8a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f000 f8f3 	bl	800ba94 <USBD_CoreFindEP>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8b2:	7dfb      	ldrb	r3, [r7, #23]
 800b8b4:	2bff      	cmp	r3, #255	; 0xff
 800b8b6:	d025      	beq.n	800b904 <USBD_LL_DataInStage+0x15a>
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d122      	bne.n	800b904 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	2b03      	cmp	r3, #3
 800b8c8:	d11c      	bne.n	800b904 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b8ca:	7dfa      	ldrb	r2, [r7, #23]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	32ae      	adds	r2, #174	; 0xae
 800b8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d4:	695b      	ldr	r3, [r3, #20]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d014      	beq.n	800b904 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b8da:	7dfa      	ldrb	r2, [r7, #23]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b8e2:	7dfa      	ldrb	r2, [r7, #23]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	32ae      	adds	r2, #174	; 0xae
 800b8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ec:	695b      	ldr	r3, [r3, #20]
 800b8ee:	7afa      	ldrb	r2, [r7, #11]
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	4798      	blx	r3
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b8fa:	7dbb      	ldrb	r3, [r7, #22]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b900:	7dbb      	ldrb	r3, [r7, #22]
 800b902:	e000      	b.n	800b906 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b904:	2300      	movs	r3, #0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3718      	adds	r7, #24
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b084      	sub	sp, #16
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b916:	2300      	movs	r3, #0
 800b918:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2201      	movs	r2, #1
 800b91e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b946:	2b00      	cmp	r3, #0
 800b948:	d014      	beq.n	800b974 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00e      	beq.n	800b974 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	6852      	ldr	r2, [r2, #4]
 800b962:	b2d2      	uxtb	r2, r2
 800b964:	4611      	mov	r1, r2
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	4798      	blx	r3
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d001      	beq.n	800b974 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b970:	2303      	movs	r3, #3
 800b972:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b974:	2340      	movs	r3, #64	; 0x40
 800b976:	2200      	movs	r2, #0
 800b978:	2100      	movs	r1, #0
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f004 faf7 	bl	800ff6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2240      	movs	r2, #64	; 0x40
 800b98c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b990:	2340      	movs	r3, #64	; 0x40
 800b992:	2200      	movs	r2, #0
 800b994:	2180      	movs	r1, #128	; 0x80
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f004 fae9 	bl	800ff6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2240      	movs	r2, #64	; 0x40
 800b9a6:	621a      	str	r2, [r3, #32]

  return ret;
 800b9a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	b083      	sub	sp, #12
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	78fa      	ldrb	r2, [r7, #3]
 800b9c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	370c      	adds	r7, #12
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr

0800b9d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b9d2:	b480      	push	{r7}
 800b9d4:	b083      	sub	sp, #12
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b04      	cmp	r3, #4
 800b9e4:	d006      	beq.n	800b9f4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2204      	movs	r2, #4
 800b9f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	370c      	adds	r7, #12
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr

0800ba0a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ba0a:	b480      	push	{r7}
 800ba0c:	b083      	sub	sp, #12
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	2b04      	cmp	r3, #4
 800ba1c:	d106      	bne.n	800ba2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ba24:	b2da      	uxtb	r2, r3
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b03      	cmp	r3, #3
 800ba4c:	d110      	bne.n	800ba70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00b      	beq.n	800ba70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba5e:	69db      	ldr	r3, [r3, #28]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d005      	beq.n	800ba70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba6a:	69db      	ldr	r3, [r3, #28]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba7a:	b480      	push	{r7}
 800ba7c:	b083      	sub	sp, #12
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	460b      	mov	r3, r1
 800ba84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800baa0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	370c      	adds	r7, #12
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b086      	sub	sp, #24
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	460b      	mov	r3, r1
 800bab8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bac2:	2300      	movs	r3, #0
 800bac4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	885b      	ldrh	r3, [r3, #2]
 800baca:	b29a      	uxth	r2, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d920      	bls.n	800bb18 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	b29b      	uxth	r3, r3
 800badc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bade:	e013      	b.n	800bb08 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bae0:	f107 030a 	add.w	r3, r7, #10
 800bae4:	4619      	mov	r1, r3
 800bae6:	6978      	ldr	r0, [r7, #20]
 800bae8:	f000 f81b 	bl	800bb22 <USBD_GetNextDesc>
 800baec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	785b      	ldrb	r3, [r3, #1]
 800baf2:	2b05      	cmp	r3, #5
 800baf4:	d108      	bne.n	800bb08 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	789b      	ldrb	r3, [r3, #2]
 800bafe:	78fa      	ldrb	r2, [r7, #3]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d008      	beq.n	800bb16 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bb04:	2300      	movs	r3, #0
 800bb06:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	885b      	ldrh	r3, [r3, #2]
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	897b      	ldrh	r3, [r7, #10]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d8e5      	bhi.n	800bae0 <USBD_GetEpDesc+0x32>
 800bb14:	e000      	b.n	800bb18 <USBD_GetEpDesc+0x6a>
          break;
 800bb16:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bb18:	693b      	ldr	r3, [r7, #16]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3718      	adds	r7, #24
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bb22:	b480      	push	{r7}
 800bb24:	b085      	sub	sp, #20
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	881a      	ldrh	r2, [r3, #0]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	4413      	add	r3, r2
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3714      	adds	r7, #20
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b087      	sub	sp, #28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	3301      	adds	r3, #1
 800bb72:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb7a:	8a3b      	ldrh	r3, [r7, #16]
 800bb7c:	021b      	lsls	r3, r3, #8
 800bb7e:	b21a      	sxth	r2, r3
 800bb80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	b21b      	sxth	r3, r3
 800bb88:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bb8a:	89fb      	ldrh	r3, [r7, #14]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	371c      	adds	r7, #28
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbae:	2b40      	cmp	r3, #64	; 0x40
 800bbb0:	d005      	beq.n	800bbbe <USBD_StdDevReq+0x26>
 800bbb2:	2b40      	cmp	r3, #64	; 0x40
 800bbb4:	d857      	bhi.n	800bc66 <USBD_StdDevReq+0xce>
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00f      	beq.n	800bbda <USBD_StdDevReq+0x42>
 800bbba:	2b20      	cmp	r3, #32
 800bbbc:	d153      	bne.n	800bc66 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	32ae      	adds	r2, #174	; 0xae
 800bbc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	4798      	blx	r3
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73fb      	strb	r3, [r7, #15]
      break;
 800bbd8:	e04a      	b.n	800bc70 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	785b      	ldrb	r3, [r3, #1]
 800bbde:	2b09      	cmp	r3, #9
 800bbe0:	d83b      	bhi.n	800bc5a <USBD_StdDevReq+0xc2>
 800bbe2:	a201      	add	r2, pc, #4	; (adr r2, 800bbe8 <USBD_StdDevReq+0x50>)
 800bbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe8:	0800bc3d 	.word	0x0800bc3d
 800bbec:	0800bc51 	.word	0x0800bc51
 800bbf0:	0800bc5b 	.word	0x0800bc5b
 800bbf4:	0800bc47 	.word	0x0800bc47
 800bbf8:	0800bc5b 	.word	0x0800bc5b
 800bbfc:	0800bc1b 	.word	0x0800bc1b
 800bc00:	0800bc11 	.word	0x0800bc11
 800bc04:	0800bc5b 	.word	0x0800bc5b
 800bc08:	0800bc33 	.word	0x0800bc33
 800bc0c:	0800bc25 	.word	0x0800bc25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bc10:	6839      	ldr	r1, [r7, #0]
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 fa3c 	bl	800c090 <USBD_GetDescriptor>
          break;
 800bc18:	e024      	b.n	800bc64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bc1a:	6839      	ldr	r1, [r7, #0]
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 fbcb 	bl	800c3b8 <USBD_SetAddress>
          break;
 800bc22:	e01f      	b.n	800bc64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fc0a 	bl	800c440 <USBD_SetConfig>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	73fb      	strb	r3, [r7, #15]
          break;
 800bc30:	e018      	b.n	800bc64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 fcad 	bl	800c594 <USBD_GetConfig>
          break;
 800bc3a:	e013      	b.n	800bc64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 fcde 	bl	800c600 <USBD_GetStatus>
          break;
 800bc44:	e00e      	b.n	800bc64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc46:	6839      	ldr	r1, [r7, #0]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fd0d 	bl	800c668 <USBD_SetFeature>
          break;
 800bc4e:	e009      	b.n	800bc64 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 fd31 	bl	800c6ba <USBD_ClrFeature>
          break;
 800bc58:	e004      	b.n	800bc64 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 fd88 	bl	800c772 <USBD_CtlError>
          break;
 800bc62:	bf00      	nop
      }
      break;
 800bc64:	e004      	b.n	800bc70 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fd82 	bl	800c772 <USBD_CtlError>
      break;
 800bc6e:	bf00      	nop
  }

  return ret;
 800bc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop

0800bc7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc92:	2b40      	cmp	r3, #64	; 0x40
 800bc94:	d005      	beq.n	800bca2 <USBD_StdItfReq+0x26>
 800bc96:	2b40      	cmp	r3, #64	; 0x40
 800bc98:	d852      	bhi.n	800bd40 <USBD_StdItfReq+0xc4>
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d001      	beq.n	800bca2 <USBD_StdItfReq+0x26>
 800bc9e:	2b20      	cmp	r3, #32
 800bca0:	d14e      	bne.n	800bd40 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	2b02      	cmp	r3, #2
 800bcae:	d840      	bhi.n	800bd32 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	889b      	ldrh	r3, [r3, #4]
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d836      	bhi.n	800bd28 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	889b      	ldrh	r3, [r3, #4]
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7ff fed9 	bl	800ba7a <USBD_CoreFindIF>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bccc:	7bbb      	ldrb	r3, [r7, #14]
 800bcce:	2bff      	cmp	r3, #255	; 0xff
 800bcd0:	d01d      	beq.n	800bd0e <USBD_StdItfReq+0x92>
 800bcd2:	7bbb      	ldrb	r3, [r7, #14]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d11a      	bne.n	800bd0e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bcd8:	7bba      	ldrb	r2, [r7, #14]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	32ae      	adds	r2, #174	; 0xae
 800bcde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00f      	beq.n	800bd08 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bce8:	7bba      	ldrb	r2, [r7, #14]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bcf0:	7bba      	ldrb	r2, [r7, #14]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	32ae      	adds	r2, #174	; 0xae
 800bcf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	6839      	ldr	r1, [r7, #0]
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	4798      	blx	r3
 800bd02:	4603      	mov	r3, r0
 800bd04:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd06:	e004      	b.n	800bd12 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd0c:	e001      	b.n	800bd12 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	88db      	ldrh	r3, [r3, #6]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d110      	bne.n	800bd3c <USBD_StdItfReq+0xc0>
 800bd1a:	7bfb      	ldrb	r3, [r7, #15]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d10d      	bne.n	800bd3c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fdf1 	bl	800c908 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bd26:	e009      	b.n	800bd3c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bd28:	6839      	ldr	r1, [r7, #0]
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fd21 	bl	800c772 <USBD_CtlError>
          break;
 800bd30:	e004      	b.n	800bd3c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bd32:	6839      	ldr	r1, [r7, #0]
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fd1c 	bl	800c772 <USBD_CtlError>
          break;
 800bd3a:	e000      	b.n	800bd3e <USBD_StdItfReq+0xc2>
          break;
 800bd3c:	bf00      	nop
      }
      break;
 800bd3e:	e004      	b.n	800bd4a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 fd15 	bl	800c772 <USBD_CtlError>
      break;
 800bd48:	bf00      	nop
  }

  return ret;
 800bd4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	889b      	ldrh	r3, [r3, #4]
 800bd66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd70:	2b40      	cmp	r3, #64	; 0x40
 800bd72:	d007      	beq.n	800bd84 <USBD_StdEPReq+0x30>
 800bd74:	2b40      	cmp	r3, #64	; 0x40
 800bd76:	f200 817f 	bhi.w	800c078 <USBD_StdEPReq+0x324>
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d02a      	beq.n	800bdd4 <USBD_StdEPReq+0x80>
 800bd7e:	2b20      	cmp	r3, #32
 800bd80:	f040 817a 	bne.w	800c078 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd84:	7bbb      	ldrb	r3, [r7, #14]
 800bd86:	4619      	mov	r1, r3
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f7ff fe83 	bl	800ba94 <USBD_CoreFindEP>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd92:	7b7b      	ldrb	r3, [r7, #13]
 800bd94:	2bff      	cmp	r3, #255	; 0xff
 800bd96:	f000 8174 	beq.w	800c082 <USBD_StdEPReq+0x32e>
 800bd9a:	7b7b      	ldrb	r3, [r7, #13]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	f040 8170 	bne.w	800c082 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bda2:	7b7a      	ldrb	r2, [r7, #13]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bdaa:	7b7a      	ldrb	r2, [r7, #13]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	32ae      	adds	r2, #174	; 0xae
 800bdb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 8163 	beq.w	800c082 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bdbc:	7b7a      	ldrb	r2, [r7, #13]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	32ae      	adds	r2, #174	; 0xae
 800bdc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	6839      	ldr	r1, [r7, #0]
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	4798      	blx	r3
 800bdce:	4603      	mov	r3, r0
 800bdd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bdd2:	e156      	b.n	800c082 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	785b      	ldrb	r3, [r3, #1]
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	d008      	beq.n	800bdee <USBD_StdEPReq+0x9a>
 800bddc:	2b03      	cmp	r3, #3
 800bdde:	f300 8145 	bgt.w	800c06c <USBD_StdEPReq+0x318>
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	f000 809b 	beq.w	800bf1e <USBD_StdEPReq+0x1ca>
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d03c      	beq.n	800be66 <USBD_StdEPReq+0x112>
 800bdec:	e13e      	b.n	800c06c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	d002      	beq.n	800be00 <USBD_StdEPReq+0xac>
 800bdfa:	2b03      	cmp	r3, #3
 800bdfc:	d016      	beq.n	800be2c <USBD_StdEPReq+0xd8>
 800bdfe:	e02c      	b.n	800be5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be00:	7bbb      	ldrb	r3, [r7, #14]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00d      	beq.n	800be22 <USBD_StdEPReq+0xce>
 800be06:	7bbb      	ldrb	r3, [r7, #14]
 800be08:	2b80      	cmp	r3, #128	; 0x80
 800be0a:	d00a      	beq.n	800be22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be0c:	7bbb      	ldrb	r3, [r7, #14]
 800be0e:	4619      	mov	r1, r3
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f004 f8f1 	bl	800fff8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be16:	2180      	movs	r1, #128	; 0x80
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f004 f8ed 	bl	800fff8 <USBD_LL_StallEP>
 800be1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be20:	e020      	b.n	800be64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fca4 	bl	800c772 <USBD_CtlError>
              break;
 800be2a:	e01b      	b.n	800be64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	885b      	ldrh	r3, [r3, #2]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10e      	bne.n	800be52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800be34:	7bbb      	ldrb	r3, [r7, #14]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00b      	beq.n	800be52 <USBD_StdEPReq+0xfe>
 800be3a:	7bbb      	ldrb	r3, [r7, #14]
 800be3c:	2b80      	cmp	r3, #128	; 0x80
 800be3e:	d008      	beq.n	800be52 <USBD_StdEPReq+0xfe>
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	88db      	ldrh	r3, [r3, #6]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d104      	bne.n	800be52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800be48:	7bbb      	ldrb	r3, [r7, #14]
 800be4a:	4619      	mov	r1, r3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f004 f8d3 	bl	800fff8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fd58 	bl	800c908 <USBD_CtlSendStatus>

              break;
 800be58:	e004      	b.n	800be64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800be5a:	6839      	ldr	r1, [r7, #0]
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 fc88 	bl	800c772 <USBD_CtlError>
              break;
 800be62:	bf00      	nop
          }
          break;
 800be64:	e107      	b.n	800c076 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d002      	beq.n	800be78 <USBD_StdEPReq+0x124>
 800be72:	2b03      	cmp	r3, #3
 800be74:	d016      	beq.n	800bea4 <USBD_StdEPReq+0x150>
 800be76:	e04b      	b.n	800bf10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be78:	7bbb      	ldrb	r3, [r7, #14]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00d      	beq.n	800be9a <USBD_StdEPReq+0x146>
 800be7e:	7bbb      	ldrb	r3, [r7, #14]
 800be80:	2b80      	cmp	r3, #128	; 0x80
 800be82:	d00a      	beq.n	800be9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be84:	7bbb      	ldrb	r3, [r7, #14]
 800be86:	4619      	mov	r1, r3
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f004 f8b5 	bl	800fff8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be8e:	2180      	movs	r1, #128	; 0x80
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f004 f8b1 	bl	800fff8 <USBD_LL_StallEP>
 800be96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be98:	e040      	b.n	800bf1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fc68 	bl	800c772 <USBD_CtlError>
              break;
 800bea2:	e03b      	b.n	800bf1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	885b      	ldrh	r3, [r3, #2]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d136      	bne.n	800bf1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800beac:	7bbb      	ldrb	r3, [r7, #14]
 800beae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d004      	beq.n	800bec0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800beb6:	7bbb      	ldrb	r3, [r7, #14]
 800beb8:	4619      	mov	r1, r3
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f004 f8bb 	bl	8010036 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 fd21 	bl	800c908 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bec6:	7bbb      	ldrb	r3, [r7, #14]
 800bec8:	4619      	mov	r1, r3
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f7ff fde2 	bl	800ba94 <USBD_CoreFindEP>
 800bed0:	4603      	mov	r3, r0
 800bed2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bed4:	7b7b      	ldrb	r3, [r7, #13]
 800bed6:	2bff      	cmp	r3, #255	; 0xff
 800bed8:	d01f      	beq.n	800bf1a <USBD_StdEPReq+0x1c6>
 800beda:	7b7b      	ldrb	r3, [r7, #13]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d11c      	bne.n	800bf1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bee0:	7b7a      	ldrb	r2, [r7, #13]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bee8:	7b7a      	ldrb	r2, [r7, #13]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	32ae      	adds	r2, #174	; 0xae
 800beee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d010      	beq.n	800bf1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bef8:	7b7a      	ldrb	r2, [r7, #13]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	32ae      	adds	r2, #174	; 0xae
 800befe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	6839      	ldr	r1, [r7, #0]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	4798      	blx	r3
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bf0e:	e004      	b.n	800bf1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fc2d 	bl	800c772 <USBD_CtlError>
              break;
 800bf18:	e000      	b.n	800bf1c <USBD_StdEPReq+0x1c8>
              break;
 800bf1a:	bf00      	nop
          }
          break;
 800bf1c:	e0ab      	b.n	800c076 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	d002      	beq.n	800bf30 <USBD_StdEPReq+0x1dc>
 800bf2a:	2b03      	cmp	r3, #3
 800bf2c:	d032      	beq.n	800bf94 <USBD_StdEPReq+0x240>
 800bf2e:	e097      	b.n	800c060 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf30:	7bbb      	ldrb	r3, [r7, #14]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d007      	beq.n	800bf46 <USBD_StdEPReq+0x1f2>
 800bf36:	7bbb      	ldrb	r3, [r7, #14]
 800bf38:	2b80      	cmp	r3, #128	; 0x80
 800bf3a:	d004      	beq.n	800bf46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fc17 	bl	800c772 <USBD_CtlError>
                break;
 800bf44:	e091      	b.n	800c06a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	da0b      	bge.n	800bf66 <USBD_StdEPReq+0x212>
 800bf4e:	7bbb      	ldrb	r3, [r7, #14]
 800bf50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf54:	4613      	mov	r3, r2
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4413      	add	r3, r2
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	3310      	adds	r3, #16
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	4413      	add	r3, r2
 800bf62:	3304      	adds	r3, #4
 800bf64:	e00b      	b.n	800bf7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf66:	7bbb      	ldrb	r3, [r7, #14]
 800bf68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4413      	add	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	3304      	adds	r3, #4
 800bf7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	2200      	movs	r2, #0
 800bf84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	2202      	movs	r2, #2
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fc61 	bl	800c854 <USBD_CtlSendData>
              break;
 800bf92:	e06a      	b.n	800c06a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bf94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	da11      	bge.n	800bfc0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bf9c:	7bbb      	ldrb	r3, [r7, #14]
 800bf9e:	f003 020f 	and.w	r2, r3, #15
 800bfa2:	6879      	ldr	r1, [r7, #4]
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	4413      	add	r3, r2
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	440b      	add	r3, r1
 800bfae:	3324      	adds	r3, #36	; 0x24
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d117      	bne.n	800bfe6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fbda 	bl	800c772 <USBD_CtlError>
                  break;
 800bfbe:	e054      	b.n	800c06a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bfc0:	7bbb      	ldrb	r3, [r7, #14]
 800bfc2:	f003 020f 	and.w	r2, r3, #15
 800bfc6:	6879      	ldr	r1, [r7, #4]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	440b      	add	r3, r1
 800bfd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bfd6:	881b      	ldrh	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d104      	bne.n	800bfe6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bfdc:	6839      	ldr	r1, [r7, #0]
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 fbc7 	bl	800c772 <USBD_CtlError>
                  break;
 800bfe4:	e041      	b.n	800c06a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfe6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	da0b      	bge.n	800c006 <USBD_StdEPReq+0x2b2>
 800bfee:	7bbb      	ldrb	r3, [r7, #14]
 800bff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bff4:	4613      	mov	r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	4413      	add	r3, r2
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	3310      	adds	r3, #16
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	4413      	add	r3, r2
 800c002:	3304      	adds	r3, #4
 800c004:	e00b      	b.n	800c01e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c006:	7bbb      	ldrb	r3, [r7, #14]
 800c008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c00c:	4613      	mov	r3, r2
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	4413      	add	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	4413      	add	r3, r2
 800c01c:	3304      	adds	r3, #4
 800c01e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c020:	7bbb      	ldrb	r3, [r7, #14]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d002      	beq.n	800c02c <USBD_StdEPReq+0x2d8>
 800c026:	7bbb      	ldrb	r3, [r7, #14]
 800c028:	2b80      	cmp	r3, #128	; 0x80
 800c02a:	d103      	bne.n	800c034 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	2200      	movs	r2, #0
 800c030:	601a      	str	r2, [r3, #0]
 800c032:	e00e      	b.n	800c052 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f004 f81b 	bl	8010074 <USBD_LL_IsStallEP>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d003      	beq.n	800c04c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	2201      	movs	r2, #1
 800c048:	601a      	str	r2, [r3, #0]
 800c04a:	e002      	b.n	800c052 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	2200      	movs	r2, #0
 800c050:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	2202      	movs	r2, #2
 800c056:	4619      	mov	r1, r3
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fbfb 	bl	800c854 <USBD_CtlSendData>
              break;
 800c05e:	e004      	b.n	800c06a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c060:	6839      	ldr	r1, [r7, #0]
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fb85 	bl	800c772 <USBD_CtlError>
              break;
 800c068:	bf00      	nop
          }
          break;
 800c06a:	e004      	b.n	800c076 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c06c:	6839      	ldr	r1, [r7, #0]
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 fb7f 	bl	800c772 <USBD_CtlError>
          break;
 800c074:	bf00      	nop
      }
      break;
 800c076:	e005      	b.n	800c084 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c078:	6839      	ldr	r1, [r7, #0]
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 fb79 	bl	800c772 <USBD_CtlError>
      break;
 800c080:	e000      	b.n	800c084 <USBD_StdEPReq+0x330>
      break;
 800c082:	bf00      	nop
  }

  return ret;
 800c084:	7bfb      	ldrb	r3, [r7, #15]
}
 800c086:	4618      	mov	r0, r3
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
	...

0800c090 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c09a:	2300      	movs	r3, #0
 800c09c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	885b      	ldrh	r3, [r3, #2]
 800c0aa:	0a1b      	lsrs	r3, r3, #8
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	3b01      	subs	r3, #1
 800c0b0:	2b0e      	cmp	r3, #14
 800c0b2:	f200 8152 	bhi.w	800c35a <USBD_GetDescriptor+0x2ca>
 800c0b6:	a201      	add	r2, pc, #4	; (adr r2, 800c0bc <USBD_GetDescriptor+0x2c>)
 800c0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0bc:	0800c12d 	.word	0x0800c12d
 800c0c0:	0800c145 	.word	0x0800c145
 800c0c4:	0800c185 	.word	0x0800c185
 800c0c8:	0800c35b 	.word	0x0800c35b
 800c0cc:	0800c35b 	.word	0x0800c35b
 800c0d0:	0800c2fb 	.word	0x0800c2fb
 800c0d4:	0800c327 	.word	0x0800c327
 800c0d8:	0800c35b 	.word	0x0800c35b
 800c0dc:	0800c35b 	.word	0x0800c35b
 800c0e0:	0800c35b 	.word	0x0800c35b
 800c0e4:	0800c35b 	.word	0x0800c35b
 800c0e8:	0800c35b 	.word	0x0800c35b
 800c0ec:	0800c35b 	.word	0x0800c35b
 800c0f0:	0800c35b 	.word	0x0800c35b
 800c0f4:	0800c0f9 	.word	0x0800c0f9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0fe:	69db      	ldr	r3, [r3, #28]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00b      	beq.n	800c11c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c10a:	69db      	ldr	r3, [r3, #28]
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	7c12      	ldrb	r2, [r2, #16]
 800c110:	f107 0108 	add.w	r1, r7, #8
 800c114:	4610      	mov	r0, r2
 800c116:	4798      	blx	r3
 800c118:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c11a:	e126      	b.n	800c36a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c11c:	6839      	ldr	r1, [r7, #0]
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fb27 	bl	800c772 <USBD_CtlError>
        err++;
 800c124:	7afb      	ldrb	r3, [r7, #11]
 800c126:	3301      	adds	r3, #1
 800c128:	72fb      	strb	r3, [r7, #11]
      break;
 800c12a:	e11e      	b.n	800c36a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	7c12      	ldrb	r2, [r2, #16]
 800c138:	f107 0108 	add.w	r1, r7, #8
 800c13c:	4610      	mov	r0, r2
 800c13e:	4798      	blx	r3
 800c140:	60f8      	str	r0, [r7, #12]
      break;
 800c142:	e112      	b.n	800c36a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	7c1b      	ldrb	r3, [r3, #16]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10d      	bne.n	800c168 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c154:	f107 0208 	add.w	r2, r7, #8
 800c158:	4610      	mov	r0, r2
 800c15a:	4798      	blx	r3
 800c15c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	3301      	adds	r3, #1
 800c162:	2202      	movs	r2, #2
 800c164:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c166:	e100      	b.n	800c36a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c170:	f107 0208 	add.w	r2, r7, #8
 800c174:	4610      	mov	r0, r2
 800c176:	4798      	blx	r3
 800c178:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3301      	adds	r3, #1
 800c17e:	2202      	movs	r2, #2
 800c180:	701a      	strb	r2, [r3, #0]
      break;
 800c182:	e0f2      	b.n	800c36a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	885b      	ldrh	r3, [r3, #2]
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	2b05      	cmp	r3, #5
 800c18c:	f200 80ac 	bhi.w	800c2e8 <USBD_GetDescriptor+0x258>
 800c190:	a201      	add	r2, pc, #4	; (adr r2, 800c198 <USBD_GetDescriptor+0x108>)
 800c192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c196:	bf00      	nop
 800c198:	0800c1b1 	.word	0x0800c1b1
 800c19c:	0800c1e5 	.word	0x0800c1e5
 800c1a0:	0800c219 	.word	0x0800c219
 800c1a4:	0800c24d 	.word	0x0800c24d
 800c1a8:	0800c281 	.word	0x0800c281
 800c1ac:	0800c2b5 	.word	0x0800c2b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00b      	beq.n	800c1d4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	7c12      	ldrb	r2, [r2, #16]
 800c1c8:	f107 0108 	add.w	r1, r7, #8
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	4798      	blx	r3
 800c1d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1d2:	e091      	b.n	800c2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1d4:	6839      	ldr	r1, [r7, #0]
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 facb 	bl	800c772 <USBD_CtlError>
            err++;
 800c1dc:	7afb      	ldrb	r3, [r7, #11]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c1e2:	e089      	b.n	800c2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00b      	beq.n	800c208 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	7c12      	ldrb	r2, [r2, #16]
 800c1fc:	f107 0108 	add.w	r1, r7, #8
 800c200:	4610      	mov	r0, r2
 800c202:	4798      	blx	r3
 800c204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c206:	e077      	b.n	800c2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c208:	6839      	ldr	r1, [r7, #0]
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 fab1 	bl	800c772 <USBD_CtlError>
            err++;
 800c210:	7afb      	ldrb	r3, [r7, #11]
 800c212:	3301      	adds	r3, #1
 800c214:	72fb      	strb	r3, [r7, #11]
          break;
 800c216:	e06f      	b.n	800c2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00b      	beq.n	800c23c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	7c12      	ldrb	r2, [r2, #16]
 800c230:	f107 0108 	add.w	r1, r7, #8
 800c234:	4610      	mov	r0, r2
 800c236:	4798      	blx	r3
 800c238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c23a:	e05d      	b.n	800c2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 fa97 	bl	800c772 <USBD_CtlError>
            err++;
 800c244:	7afb      	ldrb	r3, [r7, #11]
 800c246:	3301      	adds	r3, #1
 800c248:	72fb      	strb	r3, [r7, #11]
          break;
 800c24a:	e055      	b.n	800c2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d00b      	beq.n	800c270 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	7c12      	ldrb	r2, [r2, #16]
 800c264:	f107 0108 	add.w	r1, r7, #8
 800c268:	4610      	mov	r0, r2
 800c26a:	4798      	blx	r3
 800c26c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c26e:	e043      	b.n	800c2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fa7d 	bl	800c772 <USBD_CtlError>
            err++;
 800c278:	7afb      	ldrb	r3, [r7, #11]
 800c27a:	3301      	adds	r3, #1
 800c27c:	72fb      	strb	r3, [r7, #11]
          break;
 800c27e:	e03b      	b.n	800c2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c286:	695b      	ldr	r3, [r3, #20]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00b      	beq.n	800c2a4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c292:	695b      	ldr	r3, [r3, #20]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	7c12      	ldrb	r2, [r2, #16]
 800c298:	f107 0108 	add.w	r1, r7, #8
 800c29c:	4610      	mov	r0, r2
 800c29e:	4798      	blx	r3
 800c2a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2a2:	e029      	b.n	800c2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fa63 	bl	800c772 <USBD_CtlError>
            err++;
 800c2ac:	7afb      	ldrb	r3, [r7, #11]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c2b2:	e021      	b.n	800c2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2ba:	699b      	ldr	r3, [r3, #24]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00b      	beq.n	800c2d8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2c6:	699b      	ldr	r3, [r3, #24]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	7c12      	ldrb	r2, [r2, #16]
 800c2cc:	f107 0108 	add.w	r1, r7, #8
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	4798      	blx	r3
 800c2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2d6:	e00f      	b.n	800c2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2d8:	6839      	ldr	r1, [r7, #0]
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fa49 	bl	800c772 <USBD_CtlError>
            err++;
 800c2e0:	7afb      	ldrb	r3, [r7, #11]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2e6:	e007      	b.n	800c2f8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 fa41 	bl	800c772 <USBD_CtlError>
          err++;
 800c2f0:	7afb      	ldrb	r3, [r7, #11]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c2f6:	bf00      	nop
      }
      break;
 800c2f8:	e037      	b.n	800c36a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	7c1b      	ldrb	r3, [r3, #16]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d109      	bne.n	800c316 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c30a:	f107 0208 	add.w	r2, r7, #8
 800c30e:	4610      	mov	r0, r2
 800c310:	4798      	blx	r3
 800c312:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c314:	e029      	b.n	800c36a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 fa2a 	bl	800c772 <USBD_CtlError>
        err++;
 800c31e:	7afb      	ldrb	r3, [r7, #11]
 800c320:	3301      	adds	r3, #1
 800c322:	72fb      	strb	r3, [r7, #11]
      break;
 800c324:	e021      	b.n	800c36a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	7c1b      	ldrb	r3, [r3, #16]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d10d      	bne.n	800c34a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c336:	f107 0208 	add.w	r2, r7, #8
 800c33a:	4610      	mov	r0, r2
 800c33c:	4798      	blx	r3
 800c33e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	3301      	adds	r3, #1
 800c344:	2207      	movs	r2, #7
 800c346:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c348:	e00f      	b.n	800c36a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fa10 	bl	800c772 <USBD_CtlError>
        err++;
 800c352:	7afb      	ldrb	r3, [r7, #11]
 800c354:	3301      	adds	r3, #1
 800c356:	72fb      	strb	r3, [r7, #11]
      break;
 800c358:	e007      	b.n	800c36a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 fa08 	bl	800c772 <USBD_CtlError>
      err++;
 800c362:	7afb      	ldrb	r3, [r7, #11]
 800c364:	3301      	adds	r3, #1
 800c366:	72fb      	strb	r3, [r7, #11]
      break;
 800c368:	bf00      	nop
  }

  if (err != 0U)
 800c36a:	7afb      	ldrb	r3, [r7, #11]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d11e      	bne.n	800c3ae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	88db      	ldrh	r3, [r3, #6]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d016      	beq.n	800c3a6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c378:	893b      	ldrh	r3, [r7, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00e      	beq.n	800c39c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	88da      	ldrh	r2, [r3, #6]
 800c382:	893b      	ldrh	r3, [r7, #8]
 800c384:	4293      	cmp	r3, r2
 800c386:	bf28      	it	cs
 800c388:	4613      	movcs	r3, r2
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c38e:	893b      	ldrh	r3, [r7, #8]
 800c390:	461a      	mov	r2, r3
 800c392:	68f9      	ldr	r1, [r7, #12]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 fa5d 	bl	800c854 <USBD_CtlSendData>
 800c39a:	e009      	b.n	800c3b0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c39c:	6839      	ldr	r1, [r7, #0]
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f9e7 	bl	800c772 <USBD_CtlError>
 800c3a4:	e004      	b.n	800c3b0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 faae 	bl	800c908 <USBD_CtlSendStatus>
 800c3ac:	e000      	b.n	800c3b0 <USBD_GetDescriptor+0x320>
    return;
 800c3ae:	bf00      	nop
  }
}
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop

0800c3b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	889b      	ldrh	r3, [r3, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d131      	bne.n	800c42e <USBD_SetAddress+0x76>
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	88db      	ldrh	r3, [r3, #6]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d12d      	bne.n	800c42e <USBD_SetAddress+0x76>
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	885b      	ldrh	r3, [r3, #2]
 800c3d6:	2b7f      	cmp	r3, #127	; 0x7f
 800c3d8:	d829      	bhi.n	800c42e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	885b      	ldrh	r3, [r3, #2]
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	2b03      	cmp	r3, #3
 800c3f0:	d104      	bne.n	800c3fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c3f2:	6839      	ldr	r1, [r7, #0]
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 f9bc 	bl	800c772 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3fa:	e01d      	b.n	800c438 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	7bfa      	ldrb	r2, [r7, #15]
 800c400:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c404:	7bfb      	ldrb	r3, [r7, #15]
 800c406:	4619      	mov	r1, r3
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f003 fe5f 	bl	80100cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 fa7a 	bl	800c908 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c414:	7bfb      	ldrb	r3, [r7, #15]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d004      	beq.n	800c424 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2202      	movs	r2, #2
 800c41e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c422:	e009      	b.n	800c438 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c42c:	e004      	b.n	800c438 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 f99e 	bl	800c772 <USBD_CtlError>
  }
}
 800c436:	bf00      	nop
 800c438:	bf00      	nop
 800c43a:	3710      	adds	r7, #16
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	885b      	ldrh	r3, [r3, #2]
 800c452:	b2da      	uxtb	r2, r3
 800c454:	4b4e      	ldr	r3, [pc, #312]	; (800c590 <USBD_SetConfig+0x150>)
 800c456:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c458:	4b4d      	ldr	r3, [pc, #308]	; (800c590 <USBD_SetConfig+0x150>)
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d905      	bls.n	800c46c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c460:	6839      	ldr	r1, [r7, #0]
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 f985 	bl	800c772 <USBD_CtlError>
    return USBD_FAIL;
 800c468:	2303      	movs	r3, #3
 800c46a:	e08c      	b.n	800c586 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c472:	b2db      	uxtb	r3, r3
 800c474:	2b02      	cmp	r3, #2
 800c476:	d002      	beq.n	800c47e <USBD_SetConfig+0x3e>
 800c478:	2b03      	cmp	r3, #3
 800c47a:	d029      	beq.n	800c4d0 <USBD_SetConfig+0x90>
 800c47c:	e075      	b.n	800c56a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c47e:	4b44      	ldr	r3, [pc, #272]	; (800c590 <USBD_SetConfig+0x150>)
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d020      	beq.n	800c4c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c486:	4b42      	ldr	r3, [pc, #264]	; (800c590 <USBD_SetConfig+0x150>)
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	461a      	mov	r2, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c490:	4b3f      	ldr	r3, [pc, #252]	; (800c590 <USBD_SetConfig+0x150>)
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	4619      	mov	r1, r3
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7ff f849 	bl	800b52e <USBD_SetClassConfig>
 800c49c:	4603      	mov	r3, r0
 800c49e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c4a0:	7bfb      	ldrb	r3, [r7, #15]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d008      	beq.n	800c4b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c4a6:	6839      	ldr	r1, [r7, #0]
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 f962 	bl	800c772 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2202      	movs	r2, #2
 800c4b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c4b6:	e065      	b.n	800c584 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 fa25 	bl	800c908 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2203      	movs	r2, #3
 800c4c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c4c6:	e05d      	b.n	800c584 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 fa1d 	bl	800c908 <USBD_CtlSendStatus>
      break;
 800c4ce:	e059      	b.n	800c584 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c4d0:	4b2f      	ldr	r3, [pc, #188]	; (800c590 <USBD_SetConfig+0x150>)
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d112      	bne.n	800c4fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2202      	movs	r2, #2
 800c4dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c4e0:	4b2b      	ldr	r3, [pc, #172]	; (800c590 <USBD_SetConfig+0x150>)
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4ea:	4b29      	ldr	r3, [pc, #164]	; (800c590 <USBD_SetConfig+0x150>)
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f7ff f838 	bl	800b566 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 fa06 	bl	800c908 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c4fc:	e042      	b.n	800c584 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c4fe:	4b24      	ldr	r3, [pc, #144]	; (800c590 <USBD_SetConfig+0x150>)
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	461a      	mov	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d02a      	beq.n	800c562 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	b2db      	uxtb	r3, r3
 800c512:	4619      	mov	r1, r3
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f7ff f826 	bl	800b566 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c51a:	4b1d      	ldr	r3, [pc, #116]	; (800c590 <USBD_SetConfig+0x150>)
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	461a      	mov	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c524:	4b1a      	ldr	r3, [pc, #104]	; (800c590 <USBD_SetConfig+0x150>)
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	4619      	mov	r1, r3
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f7fe ffff 	bl	800b52e <USBD_SetClassConfig>
 800c530:	4603      	mov	r3, r0
 800c532:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c534:	7bfb      	ldrb	r3, [r7, #15]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00f      	beq.n	800c55a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c53a:	6839      	ldr	r1, [r7, #0]
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 f918 	bl	800c772 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	b2db      	uxtb	r3, r3
 800c548:	4619      	mov	r1, r3
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7ff f80b 	bl	800b566 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2202      	movs	r2, #2
 800c554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c558:	e014      	b.n	800c584 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f9d4 	bl	800c908 <USBD_CtlSendStatus>
      break;
 800c560:	e010      	b.n	800c584 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 f9d0 	bl	800c908 <USBD_CtlSendStatus>
      break;
 800c568:	e00c      	b.n	800c584 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c56a:	6839      	ldr	r1, [r7, #0]
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 f900 	bl	800c772 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c572:	4b07      	ldr	r3, [pc, #28]	; (800c590 <USBD_SetConfig+0x150>)
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	4619      	mov	r1, r3
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7fe fff4 	bl	800b566 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c57e:	2303      	movs	r3, #3
 800c580:	73fb      	strb	r3, [r7, #15]
      break;
 800c582:	bf00      	nop
  }

  return ret;
 800c584:	7bfb      	ldrb	r3, [r7, #15]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	2000058c 	.word	0x2000058c

0800c594 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	88db      	ldrh	r3, [r3, #6]
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d004      	beq.n	800c5b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 f8e2 	bl	800c772 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c5ae:	e023      	b.n	800c5f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	dc02      	bgt.n	800c5c2 <USBD_GetConfig+0x2e>
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	dc03      	bgt.n	800c5c8 <USBD_GetConfig+0x34>
 800c5c0:	e015      	b.n	800c5ee <USBD_GetConfig+0x5a>
 800c5c2:	2b03      	cmp	r3, #3
 800c5c4:	d00b      	beq.n	800c5de <USBD_GetConfig+0x4a>
 800c5c6:	e012      	b.n	800c5ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f93c 	bl	800c854 <USBD_CtlSendData>
        break;
 800c5dc:	e00c      	b.n	800c5f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	3304      	adds	r3, #4
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f934 	bl	800c854 <USBD_CtlSendData>
        break;
 800c5ec:	e004      	b.n	800c5f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c5ee:	6839      	ldr	r1, [r7, #0]
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 f8be 	bl	800c772 <USBD_CtlError>
        break;
 800c5f6:	bf00      	nop
}
 800c5f8:	bf00      	nop
 800c5fa:	3708      	adds	r7, #8
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c610:	b2db      	uxtb	r3, r3
 800c612:	3b01      	subs	r3, #1
 800c614:	2b02      	cmp	r3, #2
 800c616:	d81e      	bhi.n	800c656 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	88db      	ldrh	r3, [r3, #6]
 800c61c:	2b02      	cmp	r3, #2
 800c61e:	d004      	beq.n	800c62a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 f8a5 	bl	800c772 <USBD_CtlError>
        break;
 800c628:	e01a      	b.n	800c660 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2201      	movs	r2, #1
 800c62e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c636:	2b00      	cmp	r3, #0
 800c638:	d005      	beq.n	800c646 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	f043 0202 	orr.w	r2, r3, #2
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	330c      	adds	r3, #12
 800c64a:	2202      	movs	r2, #2
 800c64c:	4619      	mov	r1, r3
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 f900 	bl	800c854 <USBD_CtlSendData>
      break;
 800c654:	e004      	b.n	800c660 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 f88a 	bl	800c772 <USBD_CtlError>
      break;
 800c65e:	bf00      	nop
  }
}
 800c660:	bf00      	nop
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	885b      	ldrh	r3, [r3, #2]
 800c676:	2b01      	cmp	r3, #1
 800c678:	d107      	bne.n	800c68a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2201      	movs	r2, #1
 800c67e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f940 	bl	800c908 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c688:	e013      	b.n	800c6b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	885b      	ldrh	r3, [r3, #2]
 800c68e:	2b02      	cmp	r3, #2
 800c690:	d10b      	bne.n	800c6aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	889b      	ldrh	r3, [r3, #4]
 800c696:	0a1b      	lsrs	r3, r3, #8
 800c698:	b29b      	uxth	r3, r3
 800c69a:	b2da      	uxtb	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 f930 	bl	800c908 <USBD_CtlSendStatus>
}
 800c6a8:	e003      	b.n	800c6b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c6aa:	6839      	ldr	r1, [r7, #0]
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 f860 	bl	800c772 <USBD_CtlError>
}
 800c6b2:	bf00      	nop
 800c6b4:	3708      	adds	r7, #8
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b082      	sub	sp, #8
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
 800c6c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d80b      	bhi.n	800c6ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	885b      	ldrh	r3, [r3, #2]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d10c      	bne.n	800c6f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f910 	bl	800c908 <USBD_CtlSendStatus>
      }
      break;
 800c6e8:	e004      	b.n	800c6f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f840 	bl	800c772 <USBD_CtlError>
      break;
 800c6f2:	e000      	b.n	800c6f6 <USBD_ClrFeature+0x3c>
      break;
 800c6f4:	bf00      	nop
  }
}
 800c6f6:	bf00      	nop
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b084      	sub	sp, #16
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	781a      	ldrb	r2, [r3, #0]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	3301      	adds	r3, #1
 800c718:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	781a      	ldrb	r2, [r3, #0]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	3301      	adds	r3, #1
 800c726:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f7ff fa17 	bl	800bb5c <SWAPBYTE>
 800c72e:	4603      	mov	r3, r0
 800c730:	461a      	mov	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	3301      	adds	r3, #1
 800c73a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	3301      	adds	r3, #1
 800c740:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f7ff fa0a 	bl	800bb5c <SWAPBYTE>
 800c748:	4603      	mov	r3, r0
 800c74a:	461a      	mov	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	3301      	adds	r3, #1
 800c754:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	3301      	adds	r3, #1
 800c75a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c75c:	68f8      	ldr	r0, [r7, #12]
 800c75e:	f7ff f9fd 	bl	800bb5c <SWAPBYTE>
 800c762:	4603      	mov	r3, r0
 800c764:	461a      	mov	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	80da      	strh	r2, [r3, #6]
}
 800c76a:	bf00      	nop
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}

0800c772 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c772:	b580      	push	{r7, lr}
 800c774:	b082      	sub	sp, #8
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
 800c77a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c77c:	2180      	movs	r1, #128	; 0x80
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f003 fc3a 	bl	800fff8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c784:	2100      	movs	r1, #0
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f003 fc36 	bl	800fff8 <USBD_LL_StallEP>
}
 800c78c:	bf00      	nop
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d036      	beq.n	800c818 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c7ae:	6938      	ldr	r0, [r7, #16]
 800c7b0:	f000 f836 	bl	800c820 <USBD_GetLen>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	005b      	lsls	r3, r3, #1
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
 800c7c4:	68ba      	ldr	r2, [r7, #8]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	7812      	ldrb	r2, [r2, #0]
 800c7cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c7ce:	7dfb      	ldrb	r3, [r7, #23]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c7d4:	7dfb      	ldrb	r3, [r7, #23]
 800c7d6:	68ba      	ldr	r2, [r7, #8]
 800c7d8:	4413      	add	r3, r2
 800c7da:	2203      	movs	r2, #3
 800c7dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c7de:	7dfb      	ldrb	r3, [r7, #23]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c7e4:	e013      	b.n	800c80e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c7e6:	7dfb      	ldrb	r3, [r7, #23]
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	693a      	ldr	r2, [r7, #16]
 800c7ee:	7812      	ldrb	r2, [r2, #0]
 800c7f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	613b      	str	r3, [r7, #16]
    idx++;
 800c7f8:	7dfb      	ldrb	r3, [r7, #23]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c7fe:	7dfb      	ldrb	r3, [r7, #23]
 800c800:	68ba      	ldr	r2, [r7, #8]
 800c802:	4413      	add	r3, r2
 800c804:	2200      	movs	r2, #0
 800c806:	701a      	strb	r2, [r3, #0]
    idx++;
 800c808:	7dfb      	ldrb	r3, [r7, #23]
 800c80a:	3301      	adds	r3, #1
 800c80c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1e7      	bne.n	800c7e6 <USBD_GetString+0x52>
 800c816:	e000      	b.n	800c81a <USBD_GetString+0x86>
    return;
 800c818:	bf00      	nop
  }
}
 800c81a:	3718      	adds	r7, #24
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c820:	b480      	push	{r7}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c828:	2300      	movs	r3, #0
 800c82a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c830:	e005      	b.n	800c83e <USBD_GetLen+0x1e>
  {
    len++;
 800c832:	7bfb      	ldrb	r3, [r7, #15]
 800c834:	3301      	adds	r3, #1
 800c836:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	3301      	adds	r3, #1
 800c83c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1f5      	bne.n	800c832 <USBD_GetLen+0x12>
  }

  return len;
 800c846:	7bfb      	ldrb	r3, [r7, #15]
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2202      	movs	r2, #2
 800c864:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	2100      	movs	r1, #0
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f003 fc45 	bl	801010a <USBD_LL_Transmit>

  return USBD_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b084      	sub	sp, #16
 800c88e:	af00      	add	r7, sp, #0
 800c890:	60f8      	str	r0, [r7, #12]
 800c892:	60b9      	str	r1, [r7, #8]
 800c894:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	68ba      	ldr	r2, [r7, #8]
 800c89a:	2100      	movs	r1, #0
 800c89c:	68f8      	ldr	r0, [r7, #12]
 800c89e:	f003 fc34 	bl	801010a <USBD_LL_Transmit>

  return USBD_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3710      	adds	r7, #16
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2203      	movs	r2, #3
 800c8bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	68f8      	ldr	r0, [r7, #12]
 800c8d8:	f003 fc38 	bl	801014c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8dc:	2300      	movs	r3, #0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3710      	adds	r7, #16
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}

0800c8e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b084      	sub	sp, #16
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	60f8      	str	r0, [r7, #12]
 800c8ee:	60b9      	str	r1, [r7, #8]
 800c8f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f003 fc27 	bl	801014c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2204      	movs	r2, #4
 800c914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c918:	2300      	movs	r3, #0
 800c91a:	2200      	movs	r2, #0
 800c91c:	2100      	movs	r1, #0
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f003 fbf3 	bl	801010a <USBD_LL_Transmit>

  return USBD_OK;
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b082      	sub	sp, #8
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2205      	movs	r2, #5
 800c93a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c93e:	2300      	movs	r3, #0
 800c940:	2200      	movs	r2, #0
 800c942:	2100      	movs	r1, #0
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f003 fc01 	bl	801014c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b088      	sub	sp, #32
 800c958:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c95a:	2300      	movs	r3, #0
 800c95c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c95e:	f107 0308 	add.w	r3, r7, #8
 800c962:	2218      	movs	r2, #24
 800c964:	2100      	movs	r1, #0
 800c966:	4618      	mov	r0, r3
 800c968:	f001 f888 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800c96c:	233f      	movs	r3, #63	; 0x3f
 800c96e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800c970:	2381      	movs	r3, #129	; 0x81
 800c972:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c974:	1dfb      	adds	r3, r7, #7
 800c976:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c978:	2301      	movs	r3, #1
 800c97a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c97c:	f107 0308 	add.w	r3, r7, #8
 800c980:	2100      	movs	r1, #0
 800c982:	4618      	mov	r0, r3
 800c984:	f001 fc08 	bl	800e198 <hci_send_req>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	da01      	bge.n	800c992 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c98e:	23ff      	movs	r3, #255	; 0xff
 800c990:	e000      	b.n	800c994 <aci_gap_set_non_discoverable+0x40>
  return status;
 800c992:	79fb      	ldrb	r3, [r7, #7]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3720      	adds	r7, #32
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800c99c:	b5b0      	push	{r4, r5, r7, lr}
 800c99e:	b0ce      	sub	sp, #312	; 0x138
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	4605      	mov	r5, r0
 800c9a4:	460c      	mov	r4, r1
 800c9a6:	4610      	mov	r0, r2
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c9ae:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800c9b2:	462a      	mov	r2, r5
 800c9b4:	701a      	strb	r2, [r3, #0]
 800c9b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c9ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c9be:	4622      	mov	r2, r4
 800c9c0:	801a      	strh	r2, [r3, #0]
 800c9c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c9c6:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	801a      	strh	r2, [r3, #0]
 800c9ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c9d2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c9d6:	460a      	mov	r2, r1
 800c9d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800c9da:	f107 0310 	add.w	r3, r7, #16
 800c9de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800c9e2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c9e6:	3308      	adds	r3, #8
 800c9e8:	f107 0210 	add.w	r2, r7, #16
 800c9ec:	4413      	add	r3, r2
 800c9ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c9f2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c9f6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c9fa:	4413      	add	r3, r2
 800c9fc:	3309      	adds	r3, #9
 800c9fe:	f107 0210 	add.w	r2, r7, #16
 800ca02:	4413      	add	r3, r2
 800ca04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ca08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ca0c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ca10:	2200      	movs	r2, #0
 800ca12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ca14:	2300      	movs	r3, #0
 800ca16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800ca1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ca1e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ca22:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800ca26:	7812      	ldrb	r2, [r2, #0]
 800ca28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ca2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca2e:	3301      	adds	r3, #1
 800ca30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800ca34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ca38:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ca3c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800ca40:	8812      	ldrh	r2, [r2, #0]
 800ca42:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800ca46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca4a:	3302      	adds	r3, #2
 800ca4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800ca50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ca54:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ca58:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800ca5c:	8812      	ldrh	r2, [r2, #0]
 800ca5e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800ca62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca66:	3302      	adds	r3, #2
 800ca68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800ca6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ca70:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ca74:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800ca78:	7812      	ldrb	r2, [r2, #0]
 800ca7a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ca7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca80:	3301      	adds	r3, #1
 800ca82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800ca86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ca8a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800ca8e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ca90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca94:	3301      	adds	r3, #1
 800ca96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800ca9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ca9e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800caa2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800caa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800caa8:	3301      	adds	r3, #1
 800caaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800caae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cab2:	3308      	adds	r3, #8
 800cab4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800cab8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800cabc:	4618      	mov	r0, r3
 800cabe:	f000 ffcd 	bl	800da5c <Osal_MemCpy>
    index_input += Local_Name_Length;
 800cac2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800cac6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800caca:	4413      	add	r3, r2
 800cacc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800cad0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cad4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800cad8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800cada:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cade:	3301      	adds	r3, #1
 800cae0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800cae4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cae8:	3301      	adds	r3, #1
 800caea:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800caee:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800caf2:	4618      	mov	r0, r3
 800caf4:	f000 ffb2 	bl	800da5c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800caf8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800cafc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cb00:	4413      	add	r3, r2
 800cb02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800cb06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb0a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800cb0e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800cb10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb14:	3302      	adds	r3, #2
 800cb16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800cb1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb1e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800cb22:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800cb24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb28:	3302      	adds	r3, #2
 800cb2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cb2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb32:	2218      	movs	r2, #24
 800cb34:	2100      	movs	r1, #0
 800cb36:	4618      	mov	r0, r3
 800cb38:	f000 ffa0 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800cb3c:	233f      	movs	r3, #63	; 0x3f
 800cb3e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800cb42:	2383      	movs	r3, #131	; 0x83
 800cb44:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cb48:	f107 0310 	add.w	r3, r7, #16
 800cb4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cb50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cb58:	f107 030f 	add.w	r3, r7, #15
 800cb5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cb60:	2301      	movs	r3, #1
 800cb62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cb66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f001 fb13 	bl	800e198 <hci_send_req>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	da01      	bge.n	800cb7c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800cb78:	23ff      	movs	r3, #255	; 0xff
 800cb7a:	e004      	b.n	800cb86 <aci_gap_set_discoverable+0x1ea>
  return status;
 800cb7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cb80:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cb84:	781b      	ldrb	r3, [r3, #0]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bdb0      	pop	{r4, r5, r7, pc}

0800cb90 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b0cc      	sub	sp, #304	; 0x130
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4602      	mov	r2, r0
 800cb98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb9c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cba0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800cba2:	f107 0310 	add.w	r3, r7, #16
 800cba6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cbaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cbae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800cbbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cbc4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800cbc8:	7812      	ldrb	r2, [r2, #0]
 800cbca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cbcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cbd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cbda:	2218      	movs	r2, #24
 800cbdc:	2100      	movs	r1, #0
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 ff4c 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800cbe4:	233f      	movs	r3, #63	; 0x3f
 800cbe6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800cbea:	2385      	movs	r3, #133	; 0x85
 800cbec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cbf0:	f107 0310 	add.w	r3, r7, #16
 800cbf4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cbf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cbfc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cc00:	f107 030f 	add.w	r3, r7, #15
 800cc04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cc0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cc12:	2100      	movs	r1, #0
 800cc14:	4618      	mov	r0, r3
 800cc16:	f001 fabf 	bl	800e198 <hci_send_req>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	da01      	bge.n	800cc24 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800cc20:	23ff      	movs	r3, #255	; 0xff
 800cc22:	e004      	b.n	800cc2e <aci_gap_set_io_capability+0x9e>
  return status;
 800cc24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc28:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cc2c:	781b      	ldrb	r3, [r3, #0]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800cc38:	b5b0      	push	{r4, r5, r7, lr}
 800cc3a:	b0cc      	sub	sp, #304	; 0x130
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	4605      	mov	r5, r0
 800cc40:	460c      	mov	r4, r1
 800cc42:	4610      	mov	r0, r2
 800cc44:	4619      	mov	r1, r3
 800cc46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc4a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cc4e:	462a      	mov	r2, r5
 800cc50:	701a      	strb	r2, [r3, #0]
 800cc52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc56:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800cc5a:	4622      	mov	r2, r4
 800cc5c:	701a      	strb	r2, [r3, #0]
 800cc5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc62:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800cc66:	4602      	mov	r2, r0
 800cc68:	701a      	strb	r2, [r3, #0]
 800cc6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cc72:	460a      	mov	r2, r1
 800cc74:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800cc76:	f107 0310 	add.w	r3, r7, #16
 800cc7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cc7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc82:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cc86:	2200      	movs	r2, #0
 800cc88:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800cc90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cc98:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800cc9c:	7812      	ldrb	r2, [r2, #0]
 800cc9e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cca0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cca4:	3301      	adds	r3, #1
 800cca6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800ccaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ccb2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ccb6:	7812      	ldrb	r2, [r2, #0]
 800ccb8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ccba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800ccc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccc8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cccc:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800ccd0:	7812      	ldrb	r2, [r2, #0]
 800ccd2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ccd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ccd8:	3301      	adds	r3, #1
 800ccda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800ccde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cce2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cce6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800ccea:	7812      	ldrb	r2, [r2, #0]
 800ccec:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800ccee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800ccf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccfc:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800cd00:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800cd02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd06:	3301      	adds	r3, #1
 800cd08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800cd0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd10:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800cd14:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cd16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800cd20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd24:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800cd28:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800cd2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd2e:	3301      	adds	r3, #1
 800cd30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800cd34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd38:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800cd3c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800cd40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd44:	3304      	adds	r3, #4
 800cd46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800cd4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd4e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800cd52:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800cd54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd58:	3301      	adds	r3, #1
 800cd5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cd5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cd62:	2218      	movs	r2, #24
 800cd64:	2100      	movs	r1, #0
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 fe88 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800cd6c:	233f      	movs	r3, #63	; 0x3f
 800cd6e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800cd72:	2386      	movs	r3, #134	; 0x86
 800cd74:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cd78:	f107 0310 	add.w	r3, r7, #16
 800cd7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cd80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cd88:	f107 030f 	add.w	r3, r7, #15
 800cd8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cd90:	2301      	movs	r3, #1
 800cd92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cd96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f001 f9fb 	bl	800e198 <hci_send_req>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	da01      	bge.n	800cdac <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800cda8:	23ff      	movs	r3, #255	; 0xff
 800cdaa:	e004      	b.n	800cdb6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800cdac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cdb0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cdb4:	781b      	ldrb	r3, [r3, #0]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bdb0      	pop	{r4, r5, r7, pc}

0800cdc0 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800cdc0:	b590      	push	{r4, r7, lr}
 800cdc2:	b0cd      	sub	sp, #308	; 0x134
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	4608      	mov	r0, r1
 800cdca:	4611      	mov	r1, r2
 800cdcc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cdd0:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800cdd4:	6013      	str	r3, [r2, #0]
 800cdd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cdda:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cdde:	4622      	mov	r2, r4
 800cde0:	701a      	strb	r2, [r3, #0]
 800cde2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cde6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800cdea:	4602      	mov	r2, r0
 800cdec:	701a      	strb	r2, [r3, #0]
 800cdee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cdf2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800cdf6:	460a      	mov	r2, r1
 800cdf8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800cdfa:	f107 0310 	add.w	r3, r7, #16
 800cdfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ce02:	f107 0308 	add.w	r3, r7, #8
 800ce06:	2207      	movs	r2, #7
 800ce08:	2100      	movs	r1, #0
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 fe36 	bl	800da7c <Osal_MemSet>
  int index_input = 0;
 800ce10:	2300      	movs	r3, #0
 800ce12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800ce16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ce1a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ce1e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ce22:	7812      	ldrb	r2, [r2, #0]
 800ce24:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ce26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800ce30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ce34:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ce38:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ce3c:	7812      	ldrb	r2, [r2, #0]
 800ce3e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ce40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce44:	3301      	adds	r3, #1
 800ce46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800ce4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ce4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ce52:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800ce56:	7812      	ldrb	r2, [r2, #0]
 800ce58:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ce5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce5e:	3301      	adds	r3, #1
 800ce60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ce64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ce68:	2218      	movs	r2, #24
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f000 fe05 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800ce72:	233f      	movs	r3, #63	; 0x3f
 800ce74:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800ce78:	238a      	movs	r3, #138	; 0x8a
 800ce7a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ce7e:	f107 0310 	add.w	r3, r7, #16
 800ce82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ce86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800ce8e:	f107 0308 	add.w	r3, r7, #8
 800ce92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800ce96:	2307      	movs	r3, #7
 800ce98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ce9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cea0:	2100      	movs	r1, #0
 800cea2:	4618      	mov	r0, r3
 800cea4:	f001 f978 	bl	800e198 <hci_send_req>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	da01      	bge.n	800ceb2 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800ceae:	23ff      	movs	r3, #255	; 0xff
 800ceb0:	e02e      	b.n	800cf10 <aci_gap_init+0x150>
  if ( resp.Status )
 800ceb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ceb6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d005      	beq.n	800cecc <aci_gap_init+0x10c>
    return resp.Status;
 800cec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cec4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	e021      	b.n	800cf10 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800cecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ced0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ced4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800cee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ceea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ceee:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800cef2:	b29a      	uxth	r2, r3
 800cef4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cef8:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800cefa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cefe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cf02:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800cf0c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cf0e:	2300      	movs	r3, #0
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd90      	pop	{r4, r7, pc}

0800cf1a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b0cc      	sub	sp, #304	; 0x130
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	4602      	mov	r2, r0
 800cf22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cf2a:	6019      	str	r1, [r3, #0]
 800cf2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf30:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cf34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800cf36:	f107 0310 	add.w	r3, r7, #16
 800cf3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cf3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf42:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cf46:	2200      	movs	r2, #0
 800cf48:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800cf50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cf54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cf58:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800cf5c:	7812      	ldrb	r2, [r2, #0]
 800cf5e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cf60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf64:	3301      	adds	r3, #1
 800cf66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800cf6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cf6e:	1c58      	adds	r0, r3, #1
 800cf70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf74:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cf78:	781a      	ldrb	r2, [r3, #0]
 800cf7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cf82:	6819      	ldr	r1, [r3, #0]
 800cf84:	f000 fd6a 	bl	800da5c <Osal_MemCpy>
  index_input += AdvDataLen;
 800cf88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf8c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cf96:	4413      	add	r3, r2
 800cf98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cf9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cfa0:	2218      	movs	r2, #24
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f000 fd69 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800cfaa:	233f      	movs	r3, #63	; 0x3f
 800cfac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800cfb0:	238e      	movs	r3, #142	; 0x8e
 800cfb2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cfb6:	f107 0310 	add.w	r3, r7, #16
 800cfba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cfbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cfc2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cfc6:	f107 030f 	add.w	r3, r7, #15
 800cfca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cfd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cfd8:	2100      	movs	r1, #0
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f001 f8dc 	bl	800e198 <hci_send_req>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	da01      	bge.n	800cfea <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800cfe6:	23ff      	movs	r3, #255	; 0xff
 800cfe8:	e004      	b.n	800cff4 <aci_gap_update_adv_data+0xda>
  return status;
 800cfea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cfee:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cff2:	781b      	ldrb	r3, [r3, #0]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800cffe:	b580      	push	{r7, lr}
 800d000:	b088      	sub	sp, #32
 800d002:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d004:	2300      	movs	r3, #0
 800d006:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d008:	f107 0308 	add.w	r3, r7, #8
 800d00c:	2218      	movs	r2, #24
 800d00e:	2100      	movs	r1, #0
 800d010:	4618      	mov	r0, r3
 800d012:	f000 fd33 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d016:	233f      	movs	r3, #63	; 0x3f
 800d018:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800d01a:	2392      	movs	r3, #146	; 0x92
 800d01c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d01e:	1dfb      	adds	r3, r7, #7
 800d020:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d022:	2301      	movs	r3, #1
 800d024:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d026:	f107 0308 	add.w	r3, r7, #8
 800d02a:	2100      	movs	r1, #0
 800d02c:	4618      	mov	r0, r3
 800d02e:	f001 f8b3 	bl	800e198 <hci_send_req>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	da01      	bge.n	800d03c <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d038:	23ff      	movs	r3, #255	; 0xff
 800d03a:	e000      	b.n	800d03e <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800d03c:	79fb      	ldrb	r3, [r7, #7]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3720      	adds	r7, #32
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b088      	sub	sp, #32
 800d04a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d050:	f107 0308 	add.w	r3, r7, #8
 800d054:	2218      	movs	r2, #24
 800d056:	2100      	movs	r1, #0
 800d058:	4618      	mov	r0, r3
 800d05a:	f000 fd0f 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d05e:	233f      	movs	r3, #63	; 0x3f
 800d060:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800d062:	f240 1301 	movw	r3, #257	; 0x101
 800d066:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d068:	1dfb      	adds	r3, r7, #7
 800d06a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d06c:	2301      	movs	r3, #1
 800d06e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d070:	f107 0308 	add.w	r3, r7, #8
 800d074:	2100      	movs	r1, #0
 800d076:	4618      	mov	r0, r3
 800d078:	f001 f88e 	bl	800e198 <hci_send_req>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	da01      	bge.n	800d086 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800d082:	23ff      	movs	r3, #255	; 0xff
 800d084:	e000      	b.n	800d088 <aci_gatt_init+0x42>
  return status;
 800d086:	79fb      	ldrb	r3, [r7, #7]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3720      	adds	r7, #32
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800d090:	b590      	push	{r4, r7, lr}
 800d092:	b0cf      	sub	sp, #316	; 0x13c
 800d094:	af00      	add	r7, sp, #0
 800d096:	4604      	mov	r4, r0
 800d098:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800d09c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800d0a0:	6001      	str	r1, [r0, #0]
 800d0a2:	4610      	mov	r0, r2
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d0aa:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800d0ae:	4622      	mov	r2, r4
 800d0b0:	701a      	strb	r2, [r3, #0]
 800d0b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d0b6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	701a      	strb	r2, [r3, #0]
 800d0be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d0c2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d0c6:	460a      	mov	r2, r1
 800d0c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800d0ca:	f107 0310 	add.w	r3, r7, #16
 800d0ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800d0d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d0d6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d00a      	beq.n	800d0f6 <aci_gatt_add_service+0x66>
 800d0e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d0e4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	2b02      	cmp	r3, #2
 800d0ec:	d101      	bne.n	800d0f2 <aci_gatt_add_service+0x62>
 800d0ee:	2311      	movs	r3, #17
 800d0f0:	e002      	b.n	800d0f8 <aci_gatt_add_service+0x68>
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e000      	b.n	800d0f8 <aci_gatt_add_service+0x68>
 800d0f6:	2303      	movs	r3, #3
 800d0f8:	f107 0210 	add.w	r2, r7, #16
 800d0fc:	4413      	add	r3, r2
 800d0fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d102:	f107 030c 	add.w	r3, r7, #12
 800d106:	2203      	movs	r2, #3
 800d108:	2100      	movs	r1, #0
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 fcb6 	bl	800da7c <Osal_MemSet>
  int index_input = 0;
 800d110:	2300      	movs	r3, #0
 800d112:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d116:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d11a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d11e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800d122:	7812      	ldrb	r2, [r2, #0]
 800d124:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d126:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d12a:	3301      	adds	r3, #1
 800d12c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d130:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d134:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d002      	beq.n	800d144 <aci_gatt_add_service+0xb4>
 800d13e:	2b02      	cmp	r3, #2
 800d140:	d004      	beq.n	800d14c <aci_gatt_add_service+0xbc>
 800d142:	e007      	b.n	800d154 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800d144:	2302      	movs	r3, #2
 800d146:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d14a:	e005      	b.n	800d158 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800d14c:	2310      	movs	r3, #16
 800d14e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d152:	e001      	b.n	800d158 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800d154:	2397      	movs	r3, #151	; 0x97
 800d156:	e06c      	b.n	800d232 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d158:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d15c:	1c58      	adds	r0, r3, #1
 800d15e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800d162:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d166:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d16a:	6819      	ldr	r1, [r3, #0]
 800d16c:	f000 fc76 	bl	800da5c <Osal_MemCpy>
    index_input += size;
 800d170:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800d174:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d178:	4413      	add	r3, r2
 800d17a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800d17e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d182:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d186:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800d18a:	7812      	ldrb	r2, [r2, #0]
 800d18c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d18e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d192:	3301      	adds	r3, #1
 800d194:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d19c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d1a0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800d1a4:	7812      	ldrb	r2, [r2, #0]
 800d1a6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d1a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d1b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d1b6:	2218      	movs	r2, #24
 800d1b8:	2100      	movs	r1, #0
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f000 fc5e 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d1c0:	233f      	movs	r3, #63	; 0x3f
 800d1c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800d1c6:	f44f 7381 	mov.w	r3, #258	; 0x102
 800d1ca:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d1ce:	f107 0310 	add.w	r3, r7, #16
 800d1d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d1d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d1da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800d1de:	f107 030c 	add.w	r3, r7, #12
 800d1e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800d1e6:	2303      	movs	r3, #3
 800d1e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d1ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d1f0:	2100      	movs	r1, #0
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f000 ffd0 	bl	800e198 <hci_send_req>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	da01      	bge.n	800d202 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800d1fe:	23ff      	movs	r3, #255	; 0xff
 800d200:	e017      	b.n	800d232 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800d202:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d206:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d005      	beq.n	800d21c <aci_gatt_add_service+0x18c>
    return resp.Status;
 800d210:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d214:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	e00a      	b.n	800d232 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800d21c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d220:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d224:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d228:	b29a      	uxth	r2, r3
 800d22a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d22e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd90      	pop	{r4, r7, pc}

0800d23c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800d23c:	b590      	push	{r4, r7, lr}
 800d23e:	b0d1      	sub	sp, #324	; 0x144
 800d240:	af00      	add	r7, sp, #0
 800d242:	4604      	mov	r4, r0
 800d244:	4608      	mov	r0, r1
 800d246:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800d24a:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800d24e:	600a      	str	r2, [r1, #0]
 800d250:	4619      	mov	r1, r3
 800d252:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d256:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800d25a:	4622      	mov	r2, r4
 800d25c:	801a      	strh	r2, [r3, #0]
 800d25e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d262:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d266:	4602      	mov	r2, r0
 800d268:	701a      	strb	r2, [r3, #0]
 800d26a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d26e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800d272:	460a      	mov	r2, r1
 800d274:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800d276:	f107 0318 	add.w	r3, r7, #24
 800d27a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800d27e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d282:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d00a      	beq.n	800d2a2 <aci_gatt_add_char+0x66>
 800d28c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d290:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	2b02      	cmp	r3, #2
 800d298:	d101      	bne.n	800d29e <aci_gatt_add_char+0x62>
 800d29a:	2313      	movs	r3, #19
 800d29c:	e002      	b.n	800d2a4 <aci_gatt_add_char+0x68>
 800d29e:	2303      	movs	r3, #3
 800d2a0:	e000      	b.n	800d2a4 <aci_gatt_add_char+0x68>
 800d2a2:	2305      	movs	r3, #5
 800d2a4:	f107 0218 	add.w	r2, r7, #24
 800d2a8:	4413      	add	r3, r2
 800d2aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d2ae:	f107 0314 	add.w	r3, r7, #20
 800d2b2:	2203      	movs	r2, #3
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 fbe0 	bl	800da7c <Osal_MemSet>
  int index_input = 0;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800d2c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d2c6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800d2ca:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800d2ce:	8812      	ldrh	r2, [r2, #0]
 800d2d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d2d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2d6:	3302      	adds	r3, #2
 800d2d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800d2dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d2e0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800d2e4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800d2e8:	7812      	ldrb	r2, [r2, #0]
 800d2ea:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d2ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800d2f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d2fa:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	2b01      	cmp	r3, #1
 800d302:	d002      	beq.n	800d30a <aci_gatt_add_char+0xce>
 800d304:	2b02      	cmp	r3, #2
 800d306:	d004      	beq.n	800d312 <aci_gatt_add_char+0xd6>
 800d308:	e007      	b.n	800d31a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800d30a:	2302      	movs	r3, #2
 800d30c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800d310:	e005      	b.n	800d31e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800d312:	2310      	movs	r3, #16
 800d314:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800d318:	e001      	b.n	800d31e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800d31a:	2397      	movs	r3, #151	; 0x97
 800d31c:	e091      	b.n	800d442 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800d31e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d322:	1cd8      	adds	r0, r3, #3
 800d324:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800d328:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d32c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d330:	6819      	ldr	r1, [r3, #0]
 800d332:	f000 fb93 	bl	800da5c <Osal_MemCpy>
    index_input += size;
 800d336:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800d33a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800d33e:	4413      	add	r3, r2
 800d340:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800d344:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d348:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800d34c:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800d350:	8812      	ldrh	r2, [r2, #0]
 800d352:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d354:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d358:	3302      	adds	r3, #2
 800d35a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800d35e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d362:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800d366:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d368:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d36c:	3301      	adds	r3, #1
 800d36e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d372:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d376:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800d37a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d37c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d380:	3301      	adds	r3, #1
 800d382:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d386:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d38a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800d38e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d390:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d394:	3301      	adds	r3, #1
 800d396:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d39a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d39e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800d3a2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d3a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d3ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d3b2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800d3b6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d3b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3bc:	3301      	adds	r3, #1
 800d3be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d3c6:	2218      	movs	r2, #24
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 fb56 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d3d0:	233f      	movs	r3, #63	; 0x3f
 800d3d2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800d3d6:	f44f 7382 	mov.w	r3, #260	; 0x104
 800d3da:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800d3de:	f107 0318 	add.w	r3, r7, #24
 800d3e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800d3e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800d3ee:	f107 0314 	add.w	r3, r7, #20
 800d3f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800d3f6:	2303      	movs	r3, #3
 800d3f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d3fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d400:	2100      	movs	r1, #0
 800d402:	4618      	mov	r0, r3
 800d404:	f000 fec8 	bl	800e198 <hci_send_req>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	da01      	bge.n	800d412 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800d40e:	23ff      	movs	r3, #255	; 0xff
 800d410:	e017      	b.n	800d442 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800d412:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d005      	beq.n	800d42c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800d420:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	e00a      	b.n	800d442 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800d42c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d430:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d434:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d438:	b29a      	uxth	r2, r3
 800d43a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800d43e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd90      	pop	{r4, r7, pc}

0800d44c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d44c:	b5b0      	push	{r4, r5, r7, lr}
 800d44e:	b0cc      	sub	sp, #304	; 0x130
 800d450:	af00      	add	r7, sp, #0
 800d452:	4605      	mov	r5, r0
 800d454:	460c      	mov	r4, r1
 800d456:	4610      	mov	r0, r2
 800d458:	4619      	mov	r1, r3
 800d45a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d45e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d462:	462a      	mov	r2, r5
 800d464:	801a      	strh	r2, [r3, #0]
 800d466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d46a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d46e:	4622      	mov	r2, r4
 800d470:	801a      	strh	r2, [r3, #0]
 800d472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d476:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800d47a:	4602      	mov	r2, r0
 800d47c:	701a      	strb	r2, [r3, #0]
 800d47e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d482:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d486:	460a      	mov	r2, r1
 800d488:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d48a:	f107 0310 	add.w	r3, r7, #16
 800d48e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d496:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d49a:	2200      	movs	r2, #0
 800d49c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800d4a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d4ac:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d4b0:	8812      	ldrh	r2, [r2, #0]
 800d4b2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d4b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4b8:	3302      	adds	r3, #2
 800d4ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800d4be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d4c6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d4ca:	8812      	ldrh	r2, [r2, #0]
 800d4cc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d4ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4d2:	3302      	adds	r3, #2
 800d4d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800d4d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d4e0:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800d4e4:	7812      	ldrb	r2, [r2, #0]
 800d4e6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d4e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d4f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d4fa:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800d4fe:	7812      	ldrb	r2, [r2, #0]
 800d500:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d502:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d506:	3301      	adds	r3, #1
 800d508:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d50c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d510:	1d98      	adds	r0, r3, #6
 800d512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d516:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	461a      	mov	r2, r3
 800d51e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800d522:	f000 fa9b 	bl	800da5c <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d52a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d534:	4413      	add	r3, r2
 800d536:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d53a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d53e:	2218      	movs	r2, #24
 800d540:	2100      	movs	r1, #0
 800d542:	4618      	mov	r0, r3
 800d544:	f000 fa9a 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d548:	233f      	movs	r3, #63	; 0x3f
 800d54a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800d54e:	f44f 7383 	mov.w	r3, #262	; 0x106
 800d552:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d556:	f107 0310 	add.w	r3, r7, #16
 800d55a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d55e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d562:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d566:	f107 030f 	add.w	r3, r7, #15
 800d56a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d56e:	2301      	movs	r3, #1
 800d570:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d574:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d578:	2100      	movs	r1, #0
 800d57a:	4618      	mov	r0, r3
 800d57c:	f000 fe0c 	bl	800e198 <hci_send_req>
 800d580:	4603      	mov	r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	da01      	bge.n	800d58a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d586:	23ff      	movs	r3, #255	; 0xff
 800d588:	e004      	b.n	800d594 <aci_gatt_update_char_value+0x148>
  return status;
 800d58a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d58e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d592:	781b      	ldrb	r3, [r3, #0]
}
 800d594:	4618      	mov	r0, r3
 800d596:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bdb0      	pop	{r4, r5, r7, pc}

0800d59e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b0cc      	sub	sp, #304	; 0x130
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d5a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d5b2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	701a      	strb	r2, [r3, #0]
 800d5ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d5be:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d5c2:	460a      	mov	r2, r1
 800d5c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800d5c6:	f107 0310 	add.w	r3, r7, #16
 800d5ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d5ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d5d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800d5e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d5e8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d5ec:	7812      	ldrb	r2, [r2, #0]
 800d5ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d5f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800d5fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d602:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d606:	7812      	ldrb	r2, [r2, #0]
 800d608:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d60a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d60e:	3301      	adds	r3, #1
 800d610:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800d614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d618:	1c98      	adds	r0, r3, #2
 800d61a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d61e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d622:	781a      	ldrb	r2, [r3, #0]
 800d624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d62c:	6819      	ldr	r1, [r3, #0]
 800d62e:	f000 fa15 	bl	800da5c <Osal_MemCpy>
  index_input += Length;
 800d632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d636:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d640:	4413      	add	r3, r2
 800d642:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d646:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d64a:	2218      	movs	r2, #24
 800d64c:	2100      	movs	r1, #0
 800d64e:	4618      	mov	r0, r3
 800d650:	f000 fa14 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d654:	233f      	movs	r3, #63	; 0x3f
 800d656:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800d65a:	230c      	movs	r3, #12
 800d65c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d660:	f107 0310 	add.w	r3, r7, #16
 800d664:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d668:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d66c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d670:	f107 030f 	add.w	r3, r7, #15
 800d674:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d678:	2301      	movs	r3, #1
 800d67a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d67e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d682:	2100      	movs	r1, #0
 800d684:	4618      	mov	r0, r3
 800d686:	f000 fd87 	bl	800e198 <hci_send_req>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	da01      	bge.n	800d694 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800d690:	23ff      	movs	r3, #255	; 0xff
 800d692:	e004      	b.n	800d69e <aci_hal_write_config_data+0x100>
  return status;
 800d694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d698:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d69c:	781b      	ldrb	r3, [r3, #0]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b0cc      	sub	sp, #304	; 0x130
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6b4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d6b8:	701a      	strb	r2, [r3, #0]
 800d6ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6be:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d6c2:	460a      	mov	r2, r1
 800d6c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800d6c6:	f107 0310 	add.w	r3, r7, #16
 800d6ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d6ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800d6e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d6e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d6e8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d6ec:	7812      	ldrb	r2, [r2, #0]
 800d6ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d6f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800d6fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d6fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d702:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d706:	7812      	ldrb	r2, [r2, #0]
 800d708:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d70a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d70e:	3301      	adds	r3, #1
 800d710:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d714:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d718:	2218      	movs	r2, #24
 800d71a:	2100      	movs	r1, #0
 800d71c:	4618      	mov	r0, r3
 800d71e:	f000 f9ad 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d722:	233f      	movs	r3, #63	; 0x3f
 800d724:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800d728:	230f      	movs	r3, #15
 800d72a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d72e:	f107 0310 	add.w	r3, r7, #16
 800d732:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d736:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d73a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d73e:	f107 030f 	add.w	r3, r7, #15
 800d742:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d746:	2301      	movs	r3, #1
 800d748:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d74c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d750:	2100      	movs	r1, #0
 800d752:	4618      	mov	r0, r3
 800d754:	f000 fd20 	bl	800e198 <hci_send_req>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	da01      	bge.n	800d762 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800d75e:	23ff      	movs	r3, #255	; 0xff
 800d760:	e004      	b.n	800d76c <aci_hal_set_tx_power_level+0xc4>
  return status;
 800d762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d766:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d76a:	781b      	ldrb	r3, [r3, #0]
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b0cc      	sub	sp, #304	; 0x130
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	4602      	mov	r2, r0
 800d77e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d782:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d786:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800d788:	f107 0310 	add.w	r3, r7, #16
 800d78c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d794:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d798:	2200      	movs	r2, #0
 800d79a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d79c:	2300      	movs	r3, #0
 800d79e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800d7a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d7a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d7aa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d7ae:	8812      	ldrh	r2, [r2, #0]
 800d7b0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d7b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d7b6:	3302      	adds	r3, #2
 800d7b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d7bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d7c0:	2218      	movs	r2, #24
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f000 f959 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d7ca:	233f      	movs	r3, #63	; 0x3f
 800d7cc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800d7d0:	2318      	movs	r3, #24
 800d7d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d7d6:	f107 0310 	add.w	r3, r7, #16
 800d7da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d7de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d7e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d7e6:	f107 030f 	add.w	r3, r7, #15
 800d7ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d7f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f000 fccc 	bl	800e198 <hci_send_req>
 800d800:	4603      	mov	r3, r0
 800d802:	2b00      	cmp	r3, #0
 800d804:	da01      	bge.n	800d80a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800d806:	23ff      	movs	r3, #255	; 0xff
 800d808:	e004      	b.n	800d814 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800d80a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d80e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d812:	781b      	ldrb	r3, [r3, #0]
}
 800d814:	4618      	mov	r0, r3
 800d816:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b088      	sub	sp, #32
 800d822:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d824:	2300      	movs	r3, #0
 800d826:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d828:	f107 0308 	add.w	r3, r7, #8
 800d82c:	2218      	movs	r2, #24
 800d82e:	2100      	movs	r1, #0
 800d830:	4618      	mov	r0, r3
 800d832:	f000 f923 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x03;
 800d836:	2303      	movs	r3, #3
 800d838:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800d83a:	2303      	movs	r3, #3
 800d83c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d83e:	1dfb      	adds	r3, r7, #7
 800d840:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d842:	2301      	movs	r3, #1
 800d844:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d846:	f107 0308 	add.w	r3, r7, #8
 800d84a:	2100      	movs	r1, #0
 800d84c:	4618      	mov	r0, r3
 800d84e:	f000 fca3 	bl	800e198 <hci_send_req>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	da01      	bge.n	800d85c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d858:	23ff      	movs	r3, #255	; 0xff
 800d85a:	e000      	b.n	800d85e <hci_reset+0x40>
  return status;
 800d85c:	79fb      	ldrb	r3, [r7, #7]
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3720      	adds	r7, #32
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b0ce      	sub	sp, #312	; 0x138
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d874:	6019      	str	r1, [r3, #0]
 800d876:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d87a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d87e:	601a      	str	r2, [r3, #0]
 800d880:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d884:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d888:	4602      	mov	r2, r0
 800d88a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800d88c:	f107 0318 	add.w	r3, r7, #24
 800d890:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d894:	f107 0310 	add.w	r3, r7, #16
 800d898:	2205      	movs	r2, #5
 800d89a:	2100      	movs	r1, #0
 800d89c:	4618      	mov	r0, r3
 800d89e:	f000 f8ed 	bl	800da7c <Osal_MemSet>
  int index_input = 0;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800d8a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d8ac:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d8b0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d8b4:	8812      	ldrh	r2, [r2, #0]
 800d8b6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d8b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d8bc:	3302      	adds	r3, #2
 800d8be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d8c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d8c6:	2218      	movs	r2, #24
 800d8c8:	2100      	movs	r1, #0
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f000 f8d6 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x08;
 800d8d0:	2308      	movs	r3, #8
 800d8d2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800d8d6:	2330      	movs	r3, #48	; 0x30
 800d8d8:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800d8dc:	f107 0318 	add.w	r3, r7, #24
 800d8e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800d8e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d8e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800d8ec:	f107 0310 	add.w	r3, r7, #16
 800d8f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800d8f4:	2305      	movs	r3, #5
 800d8f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d8fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d8fe:	2100      	movs	r1, #0
 800d900:	4618      	mov	r0, r3
 800d902:	f000 fc49 	bl	800e198 <hci_send_req>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	da01      	bge.n	800d910 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800d90c:	23ff      	movs	r3, #255	; 0xff
 800d90e:	e023      	b.n	800d958 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800d910:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d914:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d005      	beq.n	800d92a <hci_le_read_phy+0xc4>
    return resp.Status;
 800d91e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d922:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	e016      	b.n	800d958 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800d92a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d92e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d932:	78da      	ldrb	r2, [r3, #3]
 800d934:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800d940:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d944:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d948:	791a      	ldrb	r2, [r3, #4]
 800d94a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d94e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}

0800d962 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800d962:	b590      	push	{r4, r7, lr}
 800d964:	b0cd      	sub	sp, #308	; 0x134
 800d966:	af00      	add	r7, sp, #0
 800d968:	4604      	mov	r4, r0
 800d96a:	4608      	mov	r0, r1
 800d96c:	4611      	mov	r1, r2
 800d96e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d972:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d976:	4622      	mov	r2, r4
 800d978:	701a      	strb	r2, [r3, #0]
 800d97a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d97e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d982:	4602      	mov	r2, r0
 800d984:	701a      	strb	r2, [r3, #0]
 800d986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d98a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800d98e:	460a      	mov	r2, r1
 800d990:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800d992:	f107 0310 	add.w	r3, r7, #16
 800d996:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d99a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d99e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800d9ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d9b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d9b4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d9b8:	7812      	ldrb	r2, [r2, #0]
 800d9ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d9bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800d9c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d9ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d9ce:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d9d2:	7812      	ldrb	r2, [r2, #0]
 800d9d4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d9d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9da:	3301      	adds	r3, #1
 800d9dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800d9e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d9e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d9e8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800d9ec:	7812      	ldrb	r2, [r2, #0]
 800d9ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d9f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d9fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d9fe:	2218      	movs	r2, #24
 800da00:	2100      	movs	r1, #0
 800da02:	4618      	mov	r0, r3
 800da04:	f000 f83a 	bl	800da7c <Osal_MemSet>
  rq.ogf = 0x08;
 800da08:	2308      	movs	r3, #8
 800da0a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800da0e:	2331      	movs	r3, #49	; 0x31
 800da10:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800da14:	f107 0310 	add.w	r3, r7, #16
 800da18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800da1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800da24:	f107 030f 	add.w	r3, r7, #15
 800da28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800da2c:	2301      	movs	r3, #1
 800da2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800da32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800da36:	2100      	movs	r1, #0
 800da38:	4618      	mov	r0, r3
 800da3a:	f000 fbad 	bl	800e198 <hci_send_req>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	da01      	bge.n	800da48 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800da44:	23ff      	movs	r3, #255	; 0xff
 800da46:	e004      	b.n	800da52 <hci_le_set_default_phy+0xf0>
  return status;
 800da48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800da4c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800da50:	781b      	ldrb	r3, [r3, #0]
}
 800da52:	4618      	mov	r0, r3
 800da54:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd90      	pop	{r4, r7, pc}

0800da5c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	68b9      	ldr	r1, [r7, #8]
 800da6c:	68f8      	ldr	r0, [r7, #12]
 800da6e:	f002 fecd 	bl	801080c <memcpy>
 800da72:	4603      	mov	r3, r0
}
 800da74:	4618      	mov	r0, r3
 800da76:	3710      	adds	r7, #16
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	68b9      	ldr	r1, [r7, #8]
 800da8c:	68f8      	ldr	r0, [r7, #12]
 800da8e:	f002 fe91 	bl	80107b4 <memset>
 800da92:	4603      	mov	r3, r0
}
 800da94:	4618      	mov	r0, r3
 800da96:	3710      	adds	r7, #16
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b08a      	sub	sp, #40	; 0x28
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800daa4:	2300      	movs	r3, #0
 800daa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	3301      	adds	r3, #1
 800daae:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800dab0:	6a3b      	ldr	r3, [r7, #32]
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	2bff      	cmp	r3, #255	; 0xff
 800dab6:	d14c      	bne.n	800db52 <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800dab8:	6a3b      	ldr	r3, [r7, #32]
 800daba:	3302      	adds	r3, #2
 800dabc:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	881b      	ldrh	r3, [r3, #0]
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	461a      	mov	r2, r3
 800dac6:	f640 4301 	movw	r3, #3073	; 0xc01
 800daca:	429a      	cmp	r2, r3
 800dacc:	d13d      	bne.n	800db4a <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800dace:	69fb      	ldr	r3, [r7, #28]
 800dad0:	3302      	adds	r3, #2
 800dad2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	885b      	ldrh	r3, [r3, #2]
 800dad8:	b29b      	uxth	r3, r3
 800dada:	461a      	mov	r2, r3
 800dadc:	4b20      	ldr	r3, [pc, #128]	; (800db60 <PeerToPeer_Event_Handler+0xc4>)
 800dade:	889b      	ldrh	r3, [r3, #4]
 800dae0:	3302      	adds	r3, #2
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d118      	bne.n	800db18 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800dae6:	2301      	movs	r3, #1
 800dae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800daec:	69bb      	ldr	r3, [r7, #24]
 800daee:	7a1b      	ldrb	r3, [r3, #8]
 800daf0:	f003 0301 	and.w	r3, r3, #1
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d007      	beq.n	800db08 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800daf8:	2300      	movs	r3, #0
 800dafa:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800dafc:	f107 0308 	add.w	r3, r7, #8
 800db00:	4618      	mov	r0, r3
 800db02:	f001 fc43 	bl	800f38c <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800db06:	e022      	b.n	800db4e <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800db08:	2301      	movs	r3, #1
 800db0a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800db0c:	f107 0308 	add.w	r3, r7, #8
 800db10:	4618      	mov	r0, r3
 800db12:	f001 fc3b 	bl	800f38c <P2PS_STM_App_Notification>
        break;
 800db16:	e01a      	b.n	800db4e <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	885b      	ldrh	r3, [r3, #2]
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	461a      	mov	r2, r3
 800db20:	4b0f      	ldr	r3, [pc, #60]	; (800db60 <PeerToPeer_Event_Handler+0xc4>)
 800db22:	885b      	ldrh	r3, [r3, #2]
 800db24:	3301      	adds	r3, #1
 800db26:	429a      	cmp	r2, r3
 800db28:	d111      	bne.n	800db4e <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800db2a:	2303      	movs	r3, #3
 800db2c:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	88db      	ldrh	r3, [r3, #6]
 800db32:	b29b      	uxth	r3, r3
 800db34:	b2db      	uxtb	r3, r3
 800db36:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	3308      	adds	r3, #8
 800db3c:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800db3e:	f107 0308 	add.w	r3, r7, #8
 800db42:	4618      	mov	r0, r3
 800db44:	f001 fc22 	bl	800f38c <P2PS_STM_App_Notification>
        break;
 800db48:	e001      	b.n	800db4e <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 800db4a:	bf00      	nop
 800db4c:	e002      	b.n	800db54 <PeerToPeer_Event_Handler+0xb8>
        break;
 800db4e:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800db50:	e000      	b.n	800db54 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 800db52:	bf00      	nop
  }

  return(return_value);
 800db54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800db58:	4618      	mov	r0, r3
 800db5a:	3728      	adds	r7, #40	; 0x28
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	20000120 	.word	0x20000120

0800db64 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b08a      	sub	sp, #40	; 0x28
 800db68:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800db6a:	484a      	ldr	r0, [pc, #296]	; (800dc94 <P2PS_STM_Init+0x130>)
 800db6c:	f000 f94a 	bl	800de04 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800db70:	238f      	movs	r3, #143	; 0x8f
 800db72:	703b      	strb	r3, [r7, #0]
 800db74:	23e5      	movs	r3, #229	; 0xe5
 800db76:	707b      	strb	r3, [r7, #1]
 800db78:	23b3      	movs	r3, #179	; 0xb3
 800db7a:	70bb      	strb	r3, [r7, #2]
 800db7c:	23d5      	movs	r3, #213	; 0xd5
 800db7e:	70fb      	strb	r3, [r7, #3]
 800db80:	232e      	movs	r3, #46	; 0x2e
 800db82:	713b      	strb	r3, [r7, #4]
 800db84:	237f      	movs	r3, #127	; 0x7f
 800db86:	717b      	strb	r3, [r7, #5]
 800db88:	234a      	movs	r3, #74	; 0x4a
 800db8a:	71bb      	strb	r3, [r7, #6]
 800db8c:	2398      	movs	r3, #152	; 0x98
 800db8e:	71fb      	strb	r3, [r7, #7]
 800db90:	232a      	movs	r3, #42	; 0x2a
 800db92:	723b      	strb	r3, [r7, #8]
 800db94:	2348      	movs	r3, #72	; 0x48
 800db96:	727b      	strb	r3, [r7, #9]
 800db98:	237a      	movs	r3, #122	; 0x7a
 800db9a:	72bb      	strb	r3, [r7, #10]
 800db9c:	23cc      	movs	r3, #204	; 0xcc
 800db9e:	72fb      	strb	r3, [r7, #11]
 800dba0:	2340      	movs	r3, #64	; 0x40
 800dba2:	733b      	strb	r3, [r7, #12]
 800dba4:	23fe      	movs	r3, #254	; 0xfe
 800dba6:	737b      	strb	r3, [r7, #13]
 800dba8:	2300      	movs	r3, #0
 800dbaa:	73bb      	strb	r3, [r7, #14]
 800dbac:	2300      	movs	r3, #0
 800dbae:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800dbb0:	4639      	mov	r1, r7
 800dbb2:	4b39      	ldr	r3, [pc, #228]	; (800dc98 <P2PS_STM_Init+0x134>)
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	2306      	movs	r3, #6
 800dbb8:	2201      	movs	r2, #1
 800dbba:	2002      	movs	r0, #2
 800dbbc:	f7ff fa68 	bl	800d090 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800dbc0:	2319      	movs	r3, #25
 800dbc2:	703b      	strb	r3, [r7, #0]
 800dbc4:	23ed      	movs	r3, #237	; 0xed
 800dbc6:	707b      	strb	r3, [r7, #1]
 800dbc8:	2382      	movs	r3, #130	; 0x82
 800dbca:	70bb      	strb	r3, [r7, #2]
 800dbcc:	23ae      	movs	r3, #174	; 0xae
 800dbce:	70fb      	strb	r3, [r7, #3]
 800dbd0:	23ed      	movs	r3, #237	; 0xed
 800dbd2:	713b      	strb	r3, [r7, #4]
 800dbd4:	2321      	movs	r3, #33	; 0x21
 800dbd6:	717b      	strb	r3, [r7, #5]
 800dbd8:	234c      	movs	r3, #76	; 0x4c
 800dbda:	71bb      	strb	r3, [r7, #6]
 800dbdc:	239d      	movs	r3, #157	; 0x9d
 800dbde:	71fb      	strb	r3, [r7, #7]
 800dbe0:	2341      	movs	r3, #65	; 0x41
 800dbe2:	723b      	strb	r3, [r7, #8]
 800dbe4:	2345      	movs	r3, #69	; 0x45
 800dbe6:	727b      	strb	r3, [r7, #9]
 800dbe8:	2322      	movs	r3, #34	; 0x22
 800dbea:	72bb      	strb	r3, [r7, #10]
 800dbec:	238e      	movs	r3, #142	; 0x8e
 800dbee:	72fb      	strb	r3, [r7, #11]
 800dbf0:	2341      	movs	r3, #65	; 0x41
 800dbf2:	733b      	strb	r3, [r7, #12]
 800dbf4:	23fe      	movs	r3, #254	; 0xfe
 800dbf6:	737b      	strb	r3, [r7, #13]
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	73bb      	strb	r3, [r7, #14]
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800dc00:	4b25      	ldr	r3, [pc, #148]	; (800dc98 <P2PS_STM_Init+0x134>)
 800dc02:	8818      	ldrh	r0, [r3, #0]
 800dc04:	463a      	mov	r2, r7
 800dc06:	4b25      	ldr	r3, [pc, #148]	; (800dc9c <P2PS_STM_Init+0x138>)
 800dc08:	9305      	str	r3, [sp, #20]
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	9304      	str	r3, [sp, #16]
 800dc0e:	230a      	movs	r3, #10
 800dc10:	9303      	str	r3, [sp, #12]
 800dc12:	2301      	movs	r3, #1
 800dc14:	9302      	str	r3, [sp, #8]
 800dc16:	2300      	movs	r3, #0
 800dc18:	9301      	str	r3, [sp, #4]
 800dc1a:	2306      	movs	r3, #6
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	2302      	movs	r3, #2
 800dc20:	2102      	movs	r1, #2
 800dc22:	f7ff fb0b 	bl	800d23c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800dc26:	2319      	movs	r3, #25
 800dc28:	703b      	strb	r3, [r7, #0]
 800dc2a:	23ed      	movs	r3, #237	; 0xed
 800dc2c:	707b      	strb	r3, [r7, #1]
 800dc2e:	2382      	movs	r3, #130	; 0x82
 800dc30:	70bb      	strb	r3, [r7, #2]
 800dc32:	23ae      	movs	r3, #174	; 0xae
 800dc34:	70fb      	strb	r3, [r7, #3]
 800dc36:	23ed      	movs	r3, #237	; 0xed
 800dc38:	713b      	strb	r3, [r7, #4]
 800dc3a:	2321      	movs	r3, #33	; 0x21
 800dc3c:	717b      	strb	r3, [r7, #5]
 800dc3e:	234c      	movs	r3, #76	; 0x4c
 800dc40:	71bb      	strb	r3, [r7, #6]
 800dc42:	239d      	movs	r3, #157	; 0x9d
 800dc44:	71fb      	strb	r3, [r7, #7]
 800dc46:	2341      	movs	r3, #65	; 0x41
 800dc48:	723b      	strb	r3, [r7, #8]
 800dc4a:	2345      	movs	r3, #69	; 0x45
 800dc4c:	727b      	strb	r3, [r7, #9]
 800dc4e:	2322      	movs	r3, #34	; 0x22
 800dc50:	72bb      	strb	r3, [r7, #10]
 800dc52:	238e      	movs	r3, #142	; 0x8e
 800dc54:	72fb      	strb	r3, [r7, #11]
 800dc56:	2342      	movs	r3, #66	; 0x42
 800dc58:	733b      	strb	r3, [r7, #12]
 800dc5a:	23fe      	movs	r3, #254	; 0xfe
 800dc5c:	737b      	strb	r3, [r7, #13]
 800dc5e:	2300      	movs	r3, #0
 800dc60:	73bb      	strb	r3, [r7, #14]
 800dc62:	2300      	movs	r3, #0
 800dc64:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800dc66:	4b0c      	ldr	r3, [pc, #48]	; (800dc98 <P2PS_STM_Init+0x134>)
 800dc68:	8818      	ldrh	r0, [r3, #0]
 800dc6a:	463a      	mov	r2, r7
 800dc6c:	4b0c      	ldr	r3, [pc, #48]	; (800dca0 <P2PS_STM_Init+0x13c>)
 800dc6e:	9305      	str	r3, [sp, #20]
 800dc70:	2301      	movs	r3, #1
 800dc72:	9304      	str	r3, [sp, #16]
 800dc74:	230a      	movs	r3, #10
 800dc76:	9303      	str	r3, [sp, #12]
 800dc78:	2301      	movs	r3, #1
 800dc7a:	9302      	str	r3, [sp, #8]
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	9301      	str	r3, [sp, #4]
 800dc80:	2310      	movs	r3, #16
 800dc82:	9300      	str	r3, [sp, #0]
 800dc84:	2302      	movs	r3, #2
 800dc86:	2102      	movs	r1, #2
 800dc88:	f7ff fad8 	bl	800d23c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800dc8c:	bf00      	nop
}
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	0800da9d 	.word	0x0800da9d
 800dc98:	20000120 	.word	0x20000120
 800dc9c:	20000122 	.word	0x20000122
 800dca0:	20000124 	.word	0x20000124

0800dca4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800dca4:	b480      	push	{r7}
 800dca6:	af00      	add	r7, sp, #0
  return;
 800dca8:	bf00      	nop
}
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr

0800dcb2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800dcb2:	b480      	push	{r7}
 800dcb4:	af00      	add	r7, sp, #0
  return;
 800dcb6:	bf00      	nop
}
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr

0800dcc0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	af00      	add	r7, sp, #0
  return;
 800dcc4:	bf00      	nop
}
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr

0800dcce <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800dcce:	b480      	push	{r7}
 800dcd0:	af00      	add	r7, sp, #0
  return;
 800dcd2:	bf00      	nop
}
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr

0800dcdc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800dcdc:	b480      	push	{r7}
 800dcde:	af00      	add	r7, sp, #0
  return;
 800dce0:	bf00      	nop
}
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr

0800dcea <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800dcea:	b480      	push	{r7}
 800dcec:	af00      	add	r7, sp, #0
  return;
 800dcee:	bf00      	nop
}
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	af00      	add	r7, sp, #0
  return;
 800dcfc:	bf00      	nop
}
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr

0800dd06 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800dd06:	b480      	push	{r7}
 800dd08:	af00      	add	r7, sp, #0
  return;
 800dd0a:	bf00      	nop
}
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800dd14:	b480      	push	{r7}
 800dd16:	af00      	add	r7, sp, #0
  return;
 800dd18:	bf00      	nop
}
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800dd22:	b480      	push	{r7}
 800dd24:	af00      	add	r7, sp, #0
  return;
 800dd26:	bf00      	nop
}
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800dd30:	b480      	push	{r7}
 800dd32:	af00      	add	r7, sp, #0
  return;
 800dd34:	bf00      	nop
}
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr

0800dd3e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800dd3e:	b480      	push	{r7}
 800dd40:	af00      	add	r7, sp, #0
  return;
 800dd42:	bf00      	nop
}
 800dd44:	46bd      	mov	sp, r7
 800dd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4a:	4770      	bx	lr

0800dd4c <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	af00      	add	r7, sp, #0
  return;
 800dd50:	bf00      	nop
}
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr

0800dd5a <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800dd5a:	b480      	push	{r7}
 800dd5c:	af00      	add	r7, sp, #0
  return;
 800dd5e:	bf00      	nop
}
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr

0800dd68 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800dd68:	b480      	push	{r7}
 800dd6a:	af00      	add	r7, sp, #0
  return;
 800dd6c:	bf00      	nop
}
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr

0800dd76 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800dd76:	b480      	push	{r7}
 800dd78:	af00      	add	r7, sp, #0
  return;
 800dd7a:	bf00      	nop
}
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800dd84:	b480      	push	{r7}
 800dd86:	af00      	add	r7, sp, #0
  return;
 800dd88:	bf00      	nop
}
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr
	...

0800dd94 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800dd98:	4b04      	ldr	r3, [pc, #16]	; (800ddac <SVCCTL_Init+0x18>)
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800dd9e:	4b04      	ldr	r3, [pc, #16]	; (800ddb0 <SVCCTL_Init+0x1c>)
 800dda0:	2200      	movs	r2, #0
 800dda2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800dda4:	f000 f806 	bl	800ddb4 <SVCCTL_SvcInit>

  return;
 800dda8:	bf00      	nop
}
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	20000128 	.word	0x20000128
 800ddb0:	20000148 	.word	0x20000148

0800ddb4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	af00      	add	r7, sp, #0
  BAS_Init();
 800ddb8:	f7ff ff74 	bl	800dca4 <BAS_Init>

  BLS_Init();
 800ddbc:	f7ff ff79 	bl	800dcb2 <BLS_Init>

  CRS_STM_Init();
 800ddc0:	f7ff ff7e 	bl	800dcc0 <CRS_STM_Init>

  DIS_Init();
 800ddc4:	f7ff ff83 	bl	800dcce <DIS_Init>

  EDS_STM_Init();
 800ddc8:	f7ff ff88 	bl	800dcdc <EDS_STM_Init>

  HIDS_Init();
 800ddcc:	f7ff ff8d 	bl	800dcea <HIDS_Init>

  HRS_Init();
 800ddd0:	f7ff ff92 	bl	800dcf8 <HRS_Init>

  HTS_Init();
 800ddd4:	f7ff ff97 	bl	800dd06 <HTS_Init>

  IAS_Init();
 800ddd8:	f7ff ff9c 	bl	800dd14 <IAS_Init>

  LLS_Init();
 800dddc:	f7ff ffa1 	bl	800dd22 <LLS_Init>

  TPS_Init();
 800dde0:	f7ff ffa6 	bl	800dd30 <TPS_Init>

  MOTENV_STM_Init();
 800dde4:	f7ff ffab 	bl	800dd3e <MOTENV_STM_Init>

  P2PS_STM_Init();
 800dde8:	f7ff febc 	bl	800db64 <P2PS_STM_Init>

  ZDD_STM_Init();
 800ddec:	f7ff ffae 	bl	800dd4c <ZDD_STM_Init>

  OTAS_STM_Init();
 800ddf0:	f7ff ffb3 	bl	800dd5a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ddf4:	f7ff ffbf 	bl	800dd76 <BVOPUS_STM_Init>

  MESH_Init();
 800ddf8:	f7ff ffb6 	bl	800dd68 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800ddfc:	f7ff ffc2 	bl	800dd84 <SVCCTL_InitCustomSvc>
  
  return;
 800de00:	bf00      	nop
}
 800de02:	bd80      	pop	{r7, pc}

0800de04 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800de0c:	4b09      	ldr	r3, [pc, #36]	; (800de34 <SVCCTL_RegisterSvcHandler+0x30>)
 800de0e:	7f1b      	ldrb	r3, [r3, #28]
 800de10:	4619      	mov	r1, r3
 800de12:	4a08      	ldr	r2, [pc, #32]	; (800de34 <SVCCTL_RegisterSvcHandler+0x30>)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800de1a:	4b06      	ldr	r3, [pc, #24]	; (800de34 <SVCCTL_RegisterSvcHandler+0x30>)
 800de1c:	7f1b      	ldrb	r3, [r3, #28]
 800de1e:	3301      	adds	r3, #1
 800de20:	b2da      	uxtb	r2, r3
 800de22:	4b04      	ldr	r3, [pc, #16]	; (800de34 <SVCCTL_RegisterSvcHandler+0x30>)
 800de24:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800de26:	bf00      	nop
}
 800de28:	370c      	adds	r7, #12
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop
 800de34:	20000128 	.word	0x20000128

0800de38 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b086      	sub	sp, #24
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	3301      	adds	r3, #1
 800de44:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800de46:	2300      	movs	r3, #0
 800de48:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	2bff      	cmp	r3, #255	; 0xff
 800de50:	d125      	bne.n	800de9e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	3302      	adds	r3, #2
 800de56:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	881b      	ldrh	r3, [r3, #0]
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800de62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800de66:	d118      	bne.n	800de9a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800de68:	2300      	movs	r3, #0
 800de6a:	757b      	strb	r3, [r7, #21]
 800de6c:	e00d      	b.n	800de8a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800de6e:	7d7b      	ldrb	r3, [r7, #21]
 800de70:	4a1a      	ldr	r2, [pc, #104]	; (800dedc <SVCCTL_UserEvtRx+0xa4>)
 800de72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	4798      	blx	r3
 800de7a:	4603      	mov	r3, r0
 800de7c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800de7e:	7dfb      	ldrb	r3, [r7, #23]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d108      	bne.n	800de96 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800de84:	7d7b      	ldrb	r3, [r7, #21]
 800de86:	3301      	adds	r3, #1
 800de88:	757b      	strb	r3, [r7, #21]
 800de8a:	4b14      	ldr	r3, [pc, #80]	; (800dedc <SVCCTL_UserEvtRx+0xa4>)
 800de8c:	7f1b      	ldrb	r3, [r3, #28]
 800de8e:	7d7a      	ldrb	r2, [r7, #21]
 800de90:	429a      	cmp	r2, r3
 800de92:	d3ec      	bcc.n	800de6e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800de94:	e002      	b.n	800de9c <SVCCTL_UserEvtRx+0x64>
              break;
 800de96:	bf00      	nop
          break;
 800de98:	e000      	b.n	800de9c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800de9a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800de9c:	e000      	b.n	800dea0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800de9e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800dea0:	7dfb      	ldrb	r3, [r7, #23]
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	d00f      	beq.n	800dec6 <SVCCTL_UserEvtRx+0x8e>
 800dea6:	2b02      	cmp	r3, #2
 800dea8:	dc10      	bgt.n	800decc <SVCCTL_UserEvtRx+0x94>
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d002      	beq.n	800deb4 <SVCCTL_UserEvtRx+0x7c>
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d006      	beq.n	800dec0 <SVCCTL_UserEvtRx+0x88>
 800deb2:	e00b      	b.n	800decc <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f000 ffa3 	bl	800ee00 <SVCCTL_App_Notification>
 800deba:	4603      	mov	r3, r0
 800debc:	75bb      	strb	r3, [r7, #22]
      break;
 800debe:	e008      	b.n	800ded2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800dec0:	2301      	movs	r3, #1
 800dec2:	75bb      	strb	r3, [r7, #22]
      break;
 800dec4:	e005      	b.n	800ded2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800dec6:	2300      	movs	r3, #0
 800dec8:	75bb      	strb	r3, [r7, #22]
      break;
 800deca:	e002      	b.n	800ded2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800decc:	2301      	movs	r3, #1
 800dece:	75bb      	strb	r3, [r7, #22]
      break;
 800ded0:	bf00      	nop
  }

  return (return_status);
 800ded2:	7dbb      	ldrb	r3, [r7, #22]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3718      	adds	r7, #24
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	20000128 	.word	0x20000128

0800dee0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b088      	sub	sp, #32
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800dee8:	f107 030c 	add.w	r3, r7, #12
 800deec:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	212e      	movs	r1, #46	; 0x2e
 800def8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800defc:	f000 fae8 	bl	800e4d0 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	330b      	adds	r3, #11
 800df04:	78db      	ldrb	r3, [r3, #3]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3720      	adds	r7, #32
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b088      	sub	sp, #32
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800df16:	f107 030c 	add.w	r3, r7, #12
 800df1a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	210f      	movs	r1, #15
 800df26:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800df2a:	f000 fad1 	bl	800e4d0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	330b      	adds	r3, #11
 800df32:	78db      	ldrb	r3, [r3, #3]
}
 800df34:	4618      	mov	r0, r3
 800df36:	3720      	adds	r7, #32
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b088      	sub	sp, #32
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800df44:	f107 030c 	add.w	r3, r7, #12
 800df48:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	2110      	movs	r1, #16
 800df50:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800df54:	f000 fabc 	bl	800e4d0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	330b      	adds	r3, #11
 800df5c:	78db      	ldrb	r3, [r3, #3]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3720      	adds	r7, #32
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
	...

0800df68 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800df68:	b480      	push	{r7}
 800df6a:	b08b      	sub	sp, #44	; 0x2c
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800df70:	2300      	movs	r3, #0
 800df72:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800df74:	2300      	movs	r3, #0
 800df76:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800df78:	2300      	movs	r3, #0
 800df7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800df7c:	2300      	movs	r3, #0
 800df7e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800df80:	2300      	movs	r3, #0
 800df82:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800df84:	2300      	movs	r3, #0
 800df86:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800df88:	2300      	movs	r3, #0
 800df8a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800df8c:	2300      	movs	r3, #0
 800df8e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800df90:	4b4a      	ldr	r3, [pc, #296]	; (800e0bc <SHCI_GetWirelessFwInfo+0x154>)
 800df92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800df98:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dfa2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4a44      	ldr	r2, [pc, #272]	; (800e0c0 <SHCI_GetWirelessFwInfo+0x158>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d10f      	bne.n	800dfd4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	695b      	ldr	r3, [r3, #20]
 800dfb8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	699b      	ldr	r3, [r3, #24]
 800dfbe:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	69db      	ldr	r3, [r3, #28]
 800dfc4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	68db      	ldr	r3, [r3, #12]
 800dfca:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	691b      	ldr	r3, [r3, #16]
 800dfd0:	617b      	str	r3, [r7, #20]
 800dfd2:	e01a      	b.n	800e00a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dfdc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800dfe0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	691b      	ldr	r3, [r3, #16]
 800dfe8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	695b      	ldr	r3, [r3, #20]
 800dff0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	699b      	ldr	r3, [r3, #24]
 800dff8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	689b      	ldr	r3, [r3, #8]
 800e008:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00c:	0e1b      	lsrs	r3, r3, #24
 800e00e:	b2da      	uxtb	r2, r3
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e016:	0c1b      	lsrs	r3, r3, #16
 800e018:	b2da      	uxtb	r2, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e020:	0a1b      	lsrs	r3, r3, #8
 800e022:	b2da      	uxtb	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	091b      	lsrs	r3, r3, #4
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	f003 030f 	and.w	r3, r3, #15
 800e032:	b2da      	uxtb	r2, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800e038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	f003 030f 	and.w	r3, r3, #15
 800e040:	b2da      	uxtb	r2, r3
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e046:	6a3b      	ldr	r3, [r7, #32]
 800e048:	0e1b      	lsrs	r3, r3, #24
 800e04a:	b2da      	uxtb	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	0c1b      	lsrs	r3, r3, #16
 800e054:	b2da      	uxtb	r2, r3
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800e05a:	6a3b      	ldr	r3, [r7, #32]
 800e05c:	0a1b      	lsrs	r3, r3, #8
 800e05e:	b2da      	uxtb	r2, r3
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e064:	6a3b      	ldr	r3, [r7, #32]
 800e066:	b2da      	uxtb	r2, r3
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	b2da      	uxtb	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e074:	69bb      	ldr	r3, [r7, #24]
 800e076:	0e1b      	lsrs	r3, r3, #24
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e07e:	69bb      	ldr	r3, [r7, #24]
 800e080:	0c1b      	lsrs	r3, r3, #16
 800e082:	b2da      	uxtb	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	0a1b      	lsrs	r3, r3, #8
 800e08c:	b2da      	uxtb	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	0e1b      	lsrs	r3, r3, #24
 800e096:	b2da      	uxtb	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	0c1b      	lsrs	r3, r3, #16
 800e0a0:	b2da      	uxtb	r2, r3
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	b2da      	uxtb	r2, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	372c      	adds	r7, #44	; 0x2c
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr
 800e0bc:	58004000 	.word	0x58004000
 800e0c0:	a94656b9 	.word	0xa94656b9

0800e0c4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	4a08      	ldr	r2, [pc, #32]	; (800e0f4 <hci_init+0x30>)
 800e0d4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800e0d6:	4a08      	ldr	r2, [pc, #32]	; (800e0f8 <hci_init+0x34>)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800e0dc:	4806      	ldr	r0, [pc, #24]	; (800e0f8 <hci_init+0x34>)
 800e0de:	f000 f979 	bl	800e3d4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f000 f8da 	bl	800e2a0 <TlInit>

  return;
 800e0ec:	bf00      	nop
}
 800e0ee:	3708      	adds	r7, #8
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	200005b8 	.word	0x200005b8
 800e0f8:	20000590 	.word	0x20000590

0800e0fc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e102:	4822      	ldr	r0, [pc, #136]	; (800e18c <hci_user_evt_proc+0x90>)
 800e104:	f000 fd32 	bl	800eb6c <LST_is_empty>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d12b      	bne.n	800e166 <hci_user_evt_proc+0x6a>
 800e10e:	4b20      	ldr	r3, [pc, #128]	; (800e190 <hci_user_evt_proc+0x94>)
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d027      	beq.n	800e166 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e116:	f107 030c 	add.w	r3, r7, #12
 800e11a:	4619      	mov	r1, r3
 800e11c:	481b      	ldr	r0, [pc, #108]	; (800e18c <hci_user_evt_proc+0x90>)
 800e11e:	f000 fdb4 	bl	800ec8a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e122:	4b1c      	ldr	r3, [pc, #112]	; (800e194 <hci_user_evt_proc+0x98>)
 800e124:	69db      	ldr	r3, [r3, #28]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d00c      	beq.n	800e144 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800e12e:	2301      	movs	r3, #1
 800e130:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e132:	4b18      	ldr	r3, [pc, #96]	; (800e194 <hci_user_evt_proc+0x98>)
 800e134:	69db      	ldr	r3, [r3, #28]
 800e136:	1d3a      	adds	r2, r7, #4
 800e138:	4610      	mov	r0, r2
 800e13a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800e13c:	793a      	ldrb	r2, [r7, #4]
 800e13e:	4b14      	ldr	r3, [pc, #80]	; (800e190 <hci_user_evt_proc+0x94>)
 800e140:	701a      	strb	r2, [r3, #0]
 800e142:	e002      	b.n	800e14a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e144:	4b12      	ldr	r3, [pc, #72]	; (800e190 <hci_user_evt_proc+0x94>)
 800e146:	2201      	movs	r2, #1
 800e148:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800e14a:	4b11      	ldr	r3, [pc, #68]	; (800e190 <hci_user_evt_proc+0x94>)
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d004      	beq.n	800e15c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	4618      	mov	r0, r3
 800e156:	f000 fc0d 	bl	800e974 <TL_MM_EvtDone>
 800e15a:	e004      	b.n	800e166 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	4619      	mov	r1, r3
 800e160:	480a      	ldr	r0, [pc, #40]	; (800e18c <hci_user_evt_proc+0x90>)
 800e162:	f000 fd25 	bl	800ebb0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e166:	4809      	ldr	r0, [pc, #36]	; (800e18c <hci_user_evt_proc+0x90>)
 800e168:	f000 fd00 	bl	800eb6c <LST_is_empty>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d107      	bne.n	800e182 <hci_user_evt_proc+0x86>
 800e172:	4b07      	ldr	r3, [pc, #28]	; (800e190 <hci_user_evt_proc+0x94>)
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d003      	beq.n	800e182 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800e17a:	4804      	ldr	r0, [pc, #16]	; (800e18c <hci_user_evt_proc+0x90>)
 800e17c:	f001 f8ad 	bl	800f2da <hci_notify_asynch_evt>
  }


  return;
 800e180:	bf00      	nop
 800e182:	bf00      	nop
}
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	20000150 	.word	0x20000150
 800e190:	2000015c 	.word	0x2000015c
 800e194:	20000590 	.word	0x20000590

0800e198 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b088      	sub	sp, #32
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	f000 f8d1 	bl	800e34c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	885b      	ldrh	r3, [r3, #2]
 800e1b2:	b21b      	sxth	r3, r3
 800e1b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1b8:	b21a      	sxth	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	881b      	ldrh	r3, [r3, #0]
 800e1be:	029b      	lsls	r3, r3, #10
 800e1c0:	b21b      	sxth	r3, r3
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	b21b      	sxth	r3, r3
 800e1c6:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800e1c8:	4b33      	ldr	r3, [pc, #204]	; (800e298 <hci_send_req+0x100>)
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	b2d9      	uxtb	r1, r3
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	689a      	ldr	r2, [r3, #8]
 800e1d8:	8bbb      	ldrh	r3, [r7, #28]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f000 f890 	bl	800e300 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800e1e0:	e04e      	b.n	800e280 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800e1e2:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800e1e6:	f001 f88f 	bl	800f308 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e1ea:	e043      	b.n	800e274 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e1ec:	f107 030c 	add.w	r3, r7, #12
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	482a      	ldr	r0, [pc, #168]	; (800e29c <hci_send_req+0x104>)
 800e1f4:	f000 fd49 	bl	800ec8a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	7a5b      	ldrb	r3, [r3, #9]
 800e1fc:	2b0f      	cmp	r3, #15
 800e1fe:	d114      	bne.n	800e22a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	330b      	adds	r3, #11
 800e204:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	885b      	ldrh	r3, [r3, #2]
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	8bba      	ldrh	r2, [r7, #28]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d104      	bne.n	800e21c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	691b      	ldr	r3, [r3, #16]
 800e216:	693a      	ldr	r2, [r7, #16]
 800e218:	7812      	ldrb	r2, [r2, #0]
 800e21a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	785b      	ldrb	r3, [r3, #1]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d027      	beq.n	800e274 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e224:	2301      	movs	r3, #1
 800e226:	77fb      	strb	r3, [r7, #31]
 800e228:	e024      	b.n	800e274 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	330b      	adds	r3, #11
 800e22e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800e230:	69bb      	ldr	r3, [r7, #24]
 800e232:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e236:	b29b      	uxth	r3, r3
 800e238:	8bba      	ldrh	r2, [r7, #28]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d114      	bne.n	800e268 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	7a9b      	ldrb	r3, [r3, #10]
 800e242:	3b03      	subs	r3, #3
 800e244:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	695a      	ldr	r2, [r3, #20]
 800e24a:	7dfb      	ldrb	r3, [r7, #23]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	bfa8      	it	ge
 800e250:	461a      	movge	r2, r3
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6918      	ldr	r0, [r3, #16]
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	1cd9      	adds	r1, r3, #3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	695b      	ldr	r3, [r3, #20]
 800e262:	461a      	mov	r2, r3
 800e264:	f002 fad2 	bl	801080c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d001      	beq.n	800e274 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e270:	2301      	movs	r3, #1
 800e272:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e274:	4809      	ldr	r0, [pc, #36]	; (800e29c <hci_send_req+0x104>)
 800e276:	f000 fc79 	bl	800eb6c <LST_is_empty>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d0b5      	beq.n	800e1ec <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800e280:	7ffb      	ldrb	r3, [r7, #31]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d0ad      	beq.n	800e1e2 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800e286:	2001      	movs	r0, #1
 800e288:	f000 f860 	bl	800e34c <NotifyCmdStatus>

  return 0;
 800e28c:	2300      	movs	r3, #0
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3720      	adds	r7, #32
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	200005bc 	.word	0x200005bc
 800e29c:	200005b0 	.word	0x200005b0

0800e2a0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b086      	sub	sp, #24
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800e2a8:	480f      	ldr	r0, [pc, #60]	; (800e2e8 <TlInit+0x48>)
 800e2aa:	f000 fc4f 	bl	800eb4c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800e2ae:	4a0f      	ldr	r2, [pc, #60]	; (800e2ec <TlInit+0x4c>)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800e2b4:	480e      	ldr	r0, [pc, #56]	; (800e2f0 <TlInit+0x50>)
 800e2b6:	f000 fc49 	bl	800eb4c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e2ba:	4b0e      	ldr	r3, [pc, #56]	; (800e2f4 <TlInit+0x54>)
 800e2bc:	2201      	movs	r2, #1
 800e2be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800e2c0:	4b0d      	ldr	r3, [pc, #52]	; (800e2f8 <TlInit+0x58>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d00a      	beq.n	800e2de <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800e2cc:	4b0b      	ldr	r3, [pc, #44]	; (800e2fc <TlInit+0x5c>)
 800e2ce:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800e2d0:	4b09      	ldr	r3, [pc, #36]	; (800e2f8 <TlInit+0x58>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f107 0208 	add.w	r2, r7, #8
 800e2d8:	4610      	mov	r0, r2
 800e2da:	4798      	blx	r3
  }

  return;
 800e2dc:	bf00      	nop
 800e2de:	bf00      	nop
}
 800e2e0:	3718      	adds	r7, #24
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	200005b0 	.word	0x200005b0
 800e2ec:	20000158 	.word	0x20000158
 800e2f0:	20000150 	.word	0x20000150
 800e2f4:	2000015c 	.word	0x2000015c
 800e2f8:	20000590 	.word	0x20000590
 800e2fc:	0800e38d 	.word	0x0800e38d

0800e300 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	4603      	mov	r3, r0
 800e308:	603a      	str	r2, [r7, #0]
 800e30a:	80fb      	strh	r3, [r7, #6]
 800e30c:	460b      	mov	r3, r1
 800e30e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e310:	4b0c      	ldr	r3, [pc, #48]	; (800e344 <SendCmd+0x44>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	88fa      	ldrh	r2, [r7, #6]
 800e316:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800e31a:	4b0a      	ldr	r3, [pc, #40]	; (800e344 <SendCmd+0x44>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	797a      	ldrb	r2, [r7, #5]
 800e320:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e322:	4b08      	ldr	r3, [pc, #32]	; (800e344 <SendCmd+0x44>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	330c      	adds	r3, #12
 800e328:	797a      	ldrb	r2, [r7, #5]
 800e32a:	6839      	ldr	r1, [r7, #0]
 800e32c:	4618      	mov	r0, r3
 800e32e:	f002 fa6d 	bl	801080c <memcpy>

  hciContext.io.Send(0,0);
 800e332:	4b05      	ldr	r3, [pc, #20]	; (800e348 <SendCmd+0x48>)
 800e334:	691b      	ldr	r3, [r3, #16]
 800e336:	2100      	movs	r1, #0
 800e338:	2000      	movs	r0, #0
 800e33a:	4798      	blx	r3

  return;
 800e33c:	bf00      	nop
}
 800e33e:	3708      	adds	r7, #8
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	20000158 	.word	0x20000158
 800e348:	20000590 	.word	0x20000590

0800e34c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	4603      	mov	r3, r0
 800e354:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800e356:	79fb      	ldrb	r3, [r7, #7]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d108      	bne.n	800e36e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800e35c:	4b0a      	ldr	r3, [pc, #40]	; (800e388 <NotifyCmdStatus+0x3c>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d00d      	beq.n	800e380 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800e364:	4b08      	ldr	r3, [pc, #32]	; (800e388 <NotifyCmdStatus+0x3c>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2000      	movs	r0, #0
 800e36a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800e36c:	e008      	b.n	800e380 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800e36e:	4b06      	ldr	r3, [pc, #24]	; (800e388 <NotifyCmdStatus+0x3c>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d004      	beq.n	800e380 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e376:	4b04      	ldr	r3, [pc, #16]	; (800e388 <NotifyCmdStatus+0x3c>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2001      	movs	r0, #1
 800e37c:	4798      	blx	r3
  return;
 800e37e:	bf00      	nop
 800e380:	bf00      	nop
}
 800e382:	3708      	adds	r7, #8
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	200005b8 	.word	0x200005b8

0800e38c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	7a5b      	ldrb	r3, [r3, #9]
 800e398:	2b0f      	cmp	r3, #15
 800e39a:	d003      	beq.n	800e3a4 <TlEvtReceived+0x18>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	7a5b      	ldrb	r3, [r3, #9]
 800e3a0:	2b0e      	cmp	r3, #14
 800e3a2:	d107      	bne.n	800e3b4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e3a4:	6879      	ldr	r1, [r7, #4]
 800e3a6:	4809      	ldr	r0, [pc, #36]	; (800e3cc <TlEvtReceived+0x40>)
 800e3a8:	f000 fc28 	bl	800ebfc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e3ac:	2000      	movs	r0, #0
 800e3ae:	f000 ffa0 	bl	800f2f2 <hci_cmd_resp_release>
 800e3b2:	e006      	b.n	800e3c2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e3b4:	6879      	ldr	r1, [r7, #4]
 800e3b6:	4806      	ldr	r0, [pc, #24]	; (800e3d0 <TlEvtReceived+0x44>)
 800e3b8:	f000 fc20 	bl	800ebfc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e3bc:	4804      	ldr	r0, [pc, #16]	; (800e3d0 <TlEvtReceived+0x44>)
 800e3be:	f000 ff8c 	bl	800f2da <hci_notify_asynch_evt>
  }

  return;
 800e3c2:	bf00      	nop
}
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	200005b0 	.word	0x200005b0
 800e3d0:	20000150 	.word	0x20000150

0800e3d4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	4a05      	ldr	r2, [pc, #20]	; (800e3f4 <hci_register_io_bus+0x20>)
 800e3e0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	4a04      	ldr	r2, [pc, #16]	; (800e3f8 <hci_register_io_bus+0x24>)
 800e3e6:	611a      	str	r2, [r3, #16]

  return;
 800e3e8:	bf00      	nop
}
 800e3ea:	370c      	adds	r7, #12
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr
 800e3f4:	0800e6ed 	.word	0x0800e6ed
 800e3f8:	0800e755 	.word	0x0800e755

0800e3fc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	4a08      	ldr	r2, [pc, #32]	; (800e42c <shci_init+0x30>)
 800e40c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e40e:	4a08      	ldr	r2, [pc, #32]	; (800e430 <shci_init+0x34>)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e414:	4806      	ldr	r0, [pc, #24]	; (800e430 <shci_init+0x34>)
 800e416:	f000 f915 	bl	800e644 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	4618      	mov	r0, r3
 800e420:	f000 f898 	bl	800e554 <TlInit>

  return;
 800e424:	bf00      	nop
}
 800e426:	3708      	adds	r7, #8
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	200005e0 	.word	0x200005e0
 800e430:	200005c0 	.word	0x200005c0

0800e434 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e43a:	4822      	ldr	r0, [pc, #136]	; (800e4c4 <shci_user_evt_proc+0x90>)
 800e43c:	f000 fb96 	bl	800eb6c <LST_is_empty>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	d12b      	bne.n	800e49e <shci_user_evt_proc+0x6a>
 800e446:	4b20      	ldr	r3, [pc, #128]	; (800e4c8 <shci_user_evt_proc+0x94>)
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d027      	beq.n	800e49e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e44e:	f107 030c 	add.w	r3, r7, #12
 800e452:	4619      	mov	r1, r3
 800e454:	481b      	ldr	r0, [pc, #108]	; (800e4c4 <shci_user_evt_proc+0x90>)
 800e456:	f000 fc18 	bl	800ec8a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e45a:	4b1c      	ldr	r3, [pc, #112]	; (800e4cc <shci_user_evt_proc+0x98>)
 800e45c:	69db      	ldr	r3, [r3, #28]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00c      	beq.n	800e47c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e466:	2301      	movs	r3, #1
 800e468:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e46a:	4b18      	ldr	r3, [pc, #96]	; (800e4cc <shci_user_evt_proc+0x98>)
 800e46c:	69db      	ldr	r3, [r3, #28]
 800e46e:	1d3a      	adds	r2, r7, #4
 800e470:	4610      	mov	r0, r2
 800e472:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e474:	793a      	ldrb	r2, [r7, #4]
 800e476:	4b14      	ldr	r3, [pc, #80]	; (800e4c8 <shci_user_evt_proc+0x94>)
 800e478:	701a      	strb	r2, [r3, #0]
 800e47a:	e002      	b.n	800e482 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e47c:	4b12      	ldr	r3, [pc, #72]	; (800e4c8 <shci_user_evt_proc+0x94>)
 800e47e:	2201      	movs	r2, #1
 800e480:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e482:	4b11      	ldr	r3, [pc, #68]	; (800e4c8 <shci_user_evt_proc+0x94>)
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d004      	beq.n	800e494 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	4618      	mov	r0, r3
 800e48e:	f000 fa71 	bl	800e974 <TL_MM_EvtDone>
 800e492:	e004      	b.n	800e49e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	4619      	mov	r1, r3
 800e498:	480a      	ldr	r0, [pc, #40]	; (800e4c4 <shci_user_evt_proc+0x90>)
 800e49a:	f000 fb89 	bl	800ebb0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e49e:	4809      	ldr	r0, [pc, #36]	; (800e4c4 <shci_user_evt_proc+0x90>)
 800e4a0:	f000 fb64 	bl	800eb6c <LST_is_empty>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d107      	bne.n	800e4ba <shci_user_evt_proc+0x86>
 800e4aa:	4b07      	ldr	r3, [pc, #28]	; (800e4c8 <shci_user_evt_proc+0x94>)
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d003      	beq.n	800e4ba <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e4b2:	4804      	ldr	r0, [pc, #16]	; (800e4c4 <shci_user_evt_proc+0x90>)
 800e4b4:	f7f2 fafb 	bl	8000aae <shci_notify_asynch_evt>
  }


  return;
 800e4b8:	bf00      	nop
 800e4ba:	bf00      	nop
}
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	20000160 	.word	0x20000160
 800e4c8:	20000170 	.word	0x20000170
 800e4cc:	200005c0 	.word	0x200005c0

0800e4d0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60ba      	str	r2, [r7, #8]
 800e4d8:	607b      	str	r3, [r7, #4]
 800e4da:	4603      	mov	r3, r0
 800e4dc:	81fb      	strh	r3, [r7, #14]
 800e4de:	460b      	mov	r3, r1
 800e4e0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	f000 f868 	bl	800e5b8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e4e8:	4b17      	ldr	r3, [pc, #92]	; (800e548 <shci_send+0x78>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	89fa      	ldrh	r2, [r7, #14]
 800e4ee:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e4f2:	4b15      	ldr	r3, [pc, #84]	; (800e548 <shci_send+0x78>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	7b7a      	ldrb	r2, [r7, #13]
 800e4f8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e4fa:	4b13      	ldr	r3, [pc, #76]	; (800e548 <shci_send+0x78>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	330c      	adds	r3, #12
 800e500:	7b7a      	ldrb	r2, [r7, #13]
 800e502:	68b9      	ldr	r1, [r7, #8]
 800e504:	4618      	mov	r0, r3
 800e506:	f002 f981 	bl	801080c <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800e50a:	4b10      	ldr	r3, [pc, #64]	; (800e54c <shci_send+0x7c>)
 800e50c:	2201      	movs	r2, #1
 800e50e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800e510:	4b0f      	ldr	r3, [pc, #60]	; (800e550 <shci_send+0x80>)
 800e512:	691b      	ldr	r3, [r3, #16]
 800e514:	2100      	movs	r1, #0
 800e516:	2000      	movs	r0, #0
 800e518:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e51a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800e51e:	f7f2 fadd 	bl	8000adc <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f103 0008 	add.w	r0, r3, #8
 800e528:	4b07      	ldr	r3, [pc, #28]	; (800e548 <shci_send+0x78>)
 800e52a:	6819      	ldr	r1, [r3, #0]
 800e52c:	4b06      	ldr	r3, [pc, #24]	; (800e548 <shci_send+0x78>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	789b      	ldrb	r3, [r3, #2]
 800e532:	3303      	adds	r3, #3
 800e534:	461a      	mov	r2, r3
 800e536:	f002 f969 	bl	801080c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e53a:	2001      	movs	r0, #1
 800e53c:	f000 f83c 	bl	800e5b8 <Cmd_SetStatus>

  return;
 800e540:	bf00      	nop
}
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}
 800e548:	2000016c 	.word	0x2000016c
 800e54c:	200005e4 	.word	0x200005e4
 800e550:	200005c0 	.word	0x200005c0

0800e554 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b086      	sub	sp, #24
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e55c:	4a10      	ldr	r2, [pc, #64]	; (800e5a0 <TlInit+0x4c>)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e562:	4810      	ldr	r0, [pc, #64]	; (800e5a4 <TlInit+0x50>)
 800e564:	f000 faf2 	bl	800eb4c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e568:	2001      	movs	r0, #1
 800e56a:	f000 f825 	bl	800e5b8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e56e:	4b0e      	ldr	r3, [pc, #56]	; (800e5a8 <TlInit+0x54>)
 800e570:	2201      	movs	r2, #1
 800e572:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e574:	4b0d      	ldr	r3, [pc, #52]	; (800e5ac <TlInit+0x58>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00c      	beq.n	800e596 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e580:	4b0b      	ldr	r3, [pc, #44]	; (800e5b0 <TlInit+0x5c>)
 800e582:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e584:	4b0b      	ldr	r3, [pc, #44]	; (800e5b4 <TlInit+0x60>)
 800e586:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e588:	4b08      	ldr	r3, [pc, #32]	; (800e5ac <TlInit+0x58>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f107 020c 	add.w	r2, r7, #12
 800e590:	4610      	mov	r0, r2
 800e592:	4798      	blx	r3
  }

  return;
 800e594:	bf00      	nop
 800e596:	bf00      	nop
}
 800e598:	3718      	adds	r7, #24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	2000016c 	.word	0x2000016c
 800e5a4:	20000160 	.word	0x20000160
 800e5a8:	20000170 	.word	0x20000170
 800e5ac:	200005c0 	.word	0x200005c0
 800e5b0:	0800e609 	.word	0x0800e609
 800e5b4:	0800e621 	.word	0x0800e621

0800e5b8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	4603      	mov	r3, r0
 800e5c0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e5c2:	79fb      	ldrb	r3, [r7, #7]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d10b      	bne.n	800e5e0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e5c8:	4b0d      	ldr	r3, [pc, #52]	; (800e600 <Cmd_SetStatus+0x48>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d003      	beq.n	800e5d8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e5d0:	4b0b      	ldr	r3, [pc, #44]	; (800e600 <Cmd_SetStatus+0x48>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2000      	movs	r0, #0
 800e5d6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e5d8:	4b0a      	ldr	r3, [pc, #40]	; (800e604 <Cmd_SetStatus+0x4c>)
 800e5da:	2200      	movs	r2, #0
 800e5dc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e5de:	e00b      	b.n	800e5f8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e5e0:	4b08      	ldr	r3, [pc, #32]	; (800e604 <Cmd_SetStatus+0x4c>)
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e5e6:	4b06      	ldr	r3, [pc, #24]	; (800e600 <Cmd_SetStatus+0x48>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d004      	beq.n	800e5f8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e5ee:	4b04      	ldr	r3, [pc, #16]	; (800e600 <Cmd_SetStatus+0x48>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2001      	movs	r0, #1
 800e5f4:	4798      	blx	r3
  return;
 800e5f6:	bf00      	nop
 800e5f8:	bf00      	nop
}
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	200005e0 	.word	0x200005e0
 800e604:	20000168 	.word	0x20000168

0800e608 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e610:	2000      	movs	r0, #0
 800e612:	f7f2 fa58 	bl	8000ac6 <shci_cmd_resp_release>

  return;
 800e616:	bf00      	nop
}
 800e618:	3708      	adds	r7, #8
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
	...

0800e620 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e628:	6879      	ldr	r1, [r7, #4]
 800e62a:	4805      	ldr	r0, [pc, #20]	; (800e640 <TlUserEvtReceived+0x20>)
 800e62c:	f000 fae6 	bl	800ebfc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e630:	4803      	ldr	r0, [pc, #12]	; (800e640 <TlUserEvtReceived+0x20>)
 800e632:	f7f2 fa3c 	bl	8000aae <shci_notify_asynch_evt>

  return;
 800e636:	bf00      	nop
}
 800e638:	3708      	adds	r7, #8
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	20000160 	.word	0x20000160

0800e644 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a05      	ldr	r2, [pc, #20]	; (800e664 <shci_register_io_bus+0x20>)
 800e650:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	4a04      	ldr	r2, [pc, #16]	; (800e668 <shci_register_io_bus+0x24>)
 800e656:	611a      	str	r2, [r3, #16]

  return;
 800e658:	bf00      	nop
}
 800e65a:	370c      	adds	r7, #12
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr
 800e664:	0800e801 	.word	0x0800e801
 800e668:	0800e855 	.word	0x0800e855

0800e66c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e670:	f001 f83a 	bl	800f6e8 <HW_IPCC_Enable>

  return;
 800e674:	bf00      	nop
}
 800e676:	bd80      	pop	{r7, pc}

0800e678 <TL_Init>:


void TL_Init( void )
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e67c:	4b10      	ldr	r3, [pc, #64]	; (800e6c0 <TL_Init+0x48>)
 800e67e:	4a11      	ldr	r2, [pc, #68]	; (800e6c4 <TL_Init+0x4c>)
 800e680:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e682:	4b0f      	ldr	r3, [pc, #60]	; (800e6c0 <TL_Init+0x48>)
 800e684:	4a10      	ldr	r2, [pc, #64]	; (800e6c8 <TL_Init+0x50>)
 800e686:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e688:	4b0d      	ldr	r3, [pc, #52]	; (800e6c0 <TL_Init+0x48>)
 800e68a:	4a10      	ldr	r2, [pc, #64]	; (800e6cc <TL_Init+0x54>)
 800e68c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e68e:	4b0c      	ldr	r3, [pc, #48]	; (800e6c0 <TL_Init+0x48>)
 800e690:	4a0f      	ldr	r2, [pc, #60]	; (800e6d0 <TL_Init+0x58>)
 800e692:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800e694:	4b0a      	ldr	r3, [pc, #40]	; (800e6c0 <TL_Init+0x48>)
 800e696:	4a0f      	ldr	r2, [pc, #60]	; (800e6d4 <TL_Init+0x5c>)
 800e698:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e69a:	4b09      	ldr	r3, [pc, #36]	; (800e6c0 <TL_Init+0x48>)
 800e69c:	4a0e      	ldr	r2, [pc, #56]	; (800e6d8 <TL_Init+0x60>)
 800e69e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e6a0:	4b07      	ldr	r3, [pc, #28]	; (800e6c0 <TL_Init+0x48>)
 800e6a2:	4a0e      	ldr	r2, [pc, #56]	; (800e6dc <TL_Init+0x64>)
 800e6a4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e6a6:	4b06      	ldr	r3, [pc, #24]	; (800e6c0 <TL_Init+0x48>)
 800e6a8:	4a0d      	ldr	r2, [pc, #52]	; (800e6e0 <TL_Init+0x68>)
 800e6aa:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e6ac:	4b04      	ldr	r3, [pc, #16]	; (800e6c0 <TL_Init+0x48>)
 800e6ae:	4a0d      	ldr	r2, [pc, #52]	; (800e6e4 <TL_Init+0x6c>)
 800e6b0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e6b2:	4b03      	ldr	r3, [pc, #12]	; (800e6c0 <TL_Init+0x48>)
 800e6b4:	4a0c      	ldr	r2, [pc, #48]	; (800e6e8 <TL_Init+0x70>)
 800e6b6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e6b8:	f001 f82a 	bl	800f710 <HW_IPCC_Init>

  return;
 800e6bc:	bf00      	nop
}
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	20030000 	.word	0x20030000
 800e6c4:	20030028 	.word	0x20030028
 800e6c8:	20030048 	.word	0x20030048
 800e6cc:	20030058 	.word	0x20030058
 800e6d0:	20030068 	.word	0x20030068
 800e6d4:	20030070 	.word	0x20030070
 800e6d8:	20030078 	.word	0x20030078
 800e6dc:	20030080 	.word	0x20030080
 800e6e0:	2003009c 	.word	0x2003009c
 800e6e4:	200300a0 	.word	0x200300a0
 800e6e8:	200300ac 	.word	0x200300ac

0800e6ec <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800e6f8:	4811      	ldr	r0, [pc, #68]	; (800e740 <TL_BLE_Init+0x54>)
 800e6fa:	f000 fa27 	bl	800eb4c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800e6fe:	4b11      	ldr	r3, [pc, #68]	; (800e744 <TL_BLE_Init+0x58>)
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	689a      	ldr	r2, [r3, #8]
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	68da      	ldr	r2, [r3, #12]
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	4a0c      	ldr	r2, [pc, #48]	; (800e748 <TL_BLE_Init+0x5c>)
 800e718:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	4a08      	ldr	r2, [pc, #32]	; (800e740 <TL_BLE_Init+0x54>)
 800e71e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800e720:	f001 f80c 	bl	800f73c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4a08      	ldr	r2, [pc, #32]	; (800e74c <TL_BLE_Init+0x60>)
 800e72a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	4a07      	ldr	r2, [pc, #28]	; (800e750 <TL_BLE_Init+0x64>)
 800e732:	6013      	str	r3, [r2, #0]

  return 0;
 800e734:	2300      	movs	r3, #0
}
 800e736:	4618      	mov	r0, r3
 800e738:	3710      	adds	r7, #16
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	200300c8 	.word	0x200300c8
 800e744:	20030000 	.word	0x20030000
 800e748:	20030a58 	.word	0x20030a58
 800e74c:	200005f0 	.word	0x200005f0
 800e750:	200005f4 	.word	0x200005f4

0800e754 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	460b      	mov	r3, r1
 800e75e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800e760:	4b09      	ldr	r3, [pc, #36]	; (800e788 <TL_BLE_SendCmd+0x34>)
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2201      	movs	r2, #1
 800e768:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800e76a:	4b07      	ldr	r3, [pc, #28]	; (800e788 <TL_BLE_SendCmd+0x34>)
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4619      	mov	r1, r3
 800e772:	2001      	movs	r0, #1
 800e774:	f000 f96c 	bl	800ea50 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e778:	f000 ffea 	bl	800f750 <HW_IPCC_BLE_SendCmd>

  return 0;
 800e77c:	2300      	movs	r3, #0
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3708      	adds	r7, #8
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
 800e786:	bf00      	nop
 800e788:	20030000 	.word	0x20030000

0800e78c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e792:	e01c      	b.n	800e7ce <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e794:	1d3b      	adds	r3, r7, #4
 800e796:	4619      	mov	r1, r3
 800e798:	4812      	ldr	r0, [pc, #72]	; (800e7e4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e79a:	f000 fa76 	bl	800ec8a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	7a5b      	ldrb	r3, [r3, #9]
 800e7a2:	2b0f      	cmp	r3, #15
 800e7a4:	d003      	beq.n	800e7ae <HW_IPCC_BLE_RxEvtNot+0x22>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	7a5b      	ldrb	r3, [r3, #9]
 800e7aa:	2b0e      	cmp	r3, #14
 800e7ac:	d105      	bne.n	800e7ba <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	2002      	movs	r0, #2
 800e7b4:	f000 f94c 	bl	800ea50 <OutputDbgTrace>
 800e7b8:	e004      	b.n	800e7c4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	4619      	mov	r1, r3
 800e7be:	2003      	movs	r0, #3
 800e7c0:	f000 f946 	bl	800ea50 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e7c4:	4b08      	ldr	r3, [pc, #32]	; (800e7e8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	4610      	mov	r0, r2
 800e7cc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e7ce:	4805      	ldr	r0, [pc, #20]	; (800e7e4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e7d0:	f000 f9cc 	bl	800eb6c <LST_is_empty>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d0dc      	beq.n	800e794 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e7da:	bf00      	nop
}
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	200300c8 	.word	0x200300c8
 800e7e8:	200005f0 	.word	0x200005f0

0800e7ec <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e7f0:	4b02      	ldr	r3, [pc, #8]	; (800e7fc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4798      	blx	r3

  return;
 800e7f6:	bf00      	nop
}
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	200005f4 	.word	0x200005f4

0800e800 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e80c:	480d      	ldr	r0, [pc, #52]	; (800e844 <TL_SYS_Init+0x44>)
 800e80e:	f000 f99d 	bl	800eb4c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e812:	4b0d      	ldr	r3, [pc, #52]	; (800e848 <TL_SYS_Init+0x48>)
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	689a      	ldr	r2, [r3, #8]
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	4a08      	ldr	r2, [pc, #32]	; (800e844 <TL_SYS_Init+0x44>)
 800e824:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e826:	f000 ffb5 	bl	800f794 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4a07      	ldr	r2, [pc, #28]	; (800e84c <TL_SYS_Init+0x4c>)
 800e830:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	4a06      	ldr	r2, [pc, #24]	; (800e850 <TL_SYS_Init+0x50>)
 800e838:	6013      	str	r3, [r2, #0]

  return 0;
 800e83a:	2300      	movs	r3, #0
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3710      	adds	r7, #16
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	200300d0 	.word	0x200300d0
 800e848:	20030000 	.word	0x20030000
 800e84c:	200005f8 	.word	0x200005f8
 800e850:	200005fc 	.word	0x200005fc

0800e854 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	460b      	mov	r3, r1
 800e85e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e860:	4b09      	ldr	r3, [pc, #36]	; (800e888 <TL_SYS_SendCmd+0x34>)
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	2210      	movs	r2, #16
 800e868:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e86a:	4b07      	ldr	r3, [pc, #28]	; (800e888 <TL_SYS_SendCmd+0x34>)
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4619      	mov	r1, r3
 800e872:	2004      	movs	r0, #4
 800e874:	f000 f8ec 	bl	800ea50 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e878:	f000 ff96 	bl	800f7a8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800e87c:	2300      	movs	r3, #0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3708      	adds	r7, #8
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	20030000 	.word	0x20030000

0800e88c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e890:	4b07      	ldr	r3, [pc, #28]	; (800e8b0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4619      	mov	r1, r3
 800e898:	2005      	movs	r0, #5
 800e89a:	f000 f8d9 	bl	800ea50 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e89e:	4b05      	ldr	r3, [pc, #20]	; (800e8b4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a03      	ldr	r2, [pc, #12]	; (800e8b0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e8a4:	68d2      	ldr	r2, [r2, #12]
 800e8a6:	6812      	ldr	r2, [r2, #0]
 800e8a8:	4610      	mov	r0, r2
 800e8aa:	4798      	blx	r3

  return;
 800e8ac:	bf00      	nop
}
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	20030000 	.word	0x20030000
 800e8b4:	200005f8 	.word	0x200005f8

0800e8b8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e8be:	e00e      	b.n	800e8de <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800e8c0:	1d3b      	adds	r3, r7, #4
 800e8c2:	4619      	mov	r1, r3
 800e8c4:	480b      	ldr	r0, [pc, #44]	; (800e8f4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e8c6:	f000 f9e0 	bl	800ec8a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	2006      	movs	r0, #6
 800e8d0:	f000 f8be 	bl	800ea50 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800e8d4:	4b08      	ldr	r3, [pc, #32]	; (800e8f8 <HW_IPCC_SYS_EvtNot+0x40>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	687a      	ldr	r2, [r7, #4]
 800e8da:	4610      	mov	r0, r2
 800e8dc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e8de:	4805      	ldr	r0, [pc, #20]	; (800e8f4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e8e0:	f000 f944 	bl	800eb6c <LST_is_empty>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d0ea      	beq.n	800e8c0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800e8ea:	bf00      	nop
}
 800e8ec:	3708      	adds	r7, #8
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}
 800e8f2:	bf00      	nop
 800e8f4:	200300d0 	.word	0x200300d0
 800e8f8:	200005fc 	.word	0x200005fc

0800e8fc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800e904:	4817      	ldr	r0, [pc, #92]	; (800e964 <TL_MM_Init+0x68>)
 800e906:	f000 f921 	bl	800eb4c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800e90a:	4817      	ldr	r0, [pc, #92]	; (800e968 <TL_MM_Init+0x6c>)
 800e90c:	f000 f91e 	bl	800eb4c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800e910:	4b16      	ldr	r3, [pc, #88]	; (800e96c <TL_MM_Init+0x70>)
 800e912:	691b      	ldr	r3, [r3, #16]
 800e914:	4a16      	ldr	r2, [pc, #88]	; (800e970 <TL_MM_Init+0x74>)
 800e916:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800e918:	4b15      	ldr	r3, [pc, #84]	; (800e970 <TL_MM_Init+0x74>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	6892      	ldr	r2, [r2, #8]
 800e920:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800e922:	4b13      	ldr	r3, [pc, #76]	; (800e970 <TL_MM_Init+0x74>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	687a      	ldr	r2, [r7, #4]
 800e928:	68d2      	ldr	r2, [r2, #12]
 800e92a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800e92c:	4b10      	ldr	r3, [pc, #64]	; (800e970 <TL_MM_Init+0x74>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a0c      	ldr	r2, [pc, #48]	; (800e964 <TL_MM_Init+0x68>)
 800e932:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800e934:	4b0e      	ldr	r3, [pc, #56]	; (800e970 <TL_MM_Init+0x74>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	6812      	ldr	r2, [r2, #0]
 800e93c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800e93e:	4b0c      	ldr	r3, [pc, #48]	; (800e970 <TL_MM_Init+0x74>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	6852      	ldr	r2, [r2, #4]
 800e946:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800e948:	4b09      	ldr	r3, [pc, #36]	; (800e970 <TL_MM_Init+0x74>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	6912      	ldr	r2, [r2, #16]
 800e950:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800e952:	4b07      	ldr	r3, [pc, #28]	; (800e970 <TL_MM_Init+0x74>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	687a      	ldr	r2, [r7, #4]
 800e958:	6952      	ldr	r2, [r2, #20]
 800e95a:	619a      	str	r2, [r3, #24]

  return;
 800e95c:	bf00      	nop
}
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	200300b8 	.word	0x200300b8
 800e968:	200005e8 	.word	0x200005e8
 800e96c:	20030000 	.word	0x20030000
 800e970:	20000600 	.word	0x20000600

0800e974 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800e97c:	6879      	ldr	r1, [r7, #4]
 800e97e:	4807      	ldr	r0, [pc, #28]	; (800e99c <TL_MM_EvtDone+0x28>)
 800e980:	f000 f93c 	bl	800ebfc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800e984:	6879      	ldr	r1, [r7, #4]
 800e986:	2000      	movs	r0, #0
 800e988:	f000 f862 	bl	800ea50 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800e98c:	4804      	ldr	r0, [pc, #16]	; (800e9a0 <TL_MM_EvtDone+0x2c>)
 800e98e:	f000 ff31 	bl	800f7f4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800e992:	bf00      	nop
}
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	200005e8 	.word	0x200005e8
 800e9a0:	0800e9a5 	.word	0x0800e9a5

0800e9a4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e9aa:	e00c      	b.n	800e9c6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800e9ac:	1d3b      	adds	r3, r7, #4
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	480a      	ldr	r0, [pc, #40]	; (800e9dc <SendFreeBuf+0x38>)
 800e9b2:	f000 f96a 	bl	800ec8a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800e9b6:	4b0a      	ldr	r3, [pc, #40]	; (800e9e0 <SendFreeBuf+0x3c>)
 800e9b8:	691b      	ldr	r3, [r3, #16]
 800e9ba:	691b      	ldr	r3, [r3, #16]
 800e9bc:	687a      	ldr	r2, [r7, #4]
 800e9be:	4611      	mov	r1, r2
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f000 f91b 	bl	800ebfc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e9c6:	4805      	ldr	r0, [pc, #20]	; (800e9dc <SendFreeBuf+0x38>)
 800e9c8:	f000 f8d0 	bl	800eb6c <LST_is_empty>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d0ec      	beq.n	800e9ac <SendFreeBuf+0x8>
  }

  return;
 800e9d2:	bf00      	nop
}
 800e9d4:	3708      	adds	r7, #8
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	200005e8 	.word	0x200005e8
 800e9e0:	20030000 	.word	0x20030000

0800e9e4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800e9e8:	4805      	ldr	r0, [pc, #20]	; (800ea00 <TL_TRACES_Init+0x1c>)
 800e9ea:	f000 f8af 	bl	800eb4c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800e9ee:	4b05      	ldr	r3, [pc, #20]	; (800ea04 <TL_TRACES_Init+0x20>)
 800e9f0:	695b      	ldr	r3, [r3, #20]
 800e9f2:	4a03      	ldr	r2, [pc, #12]	; (800ea00 <TL_TRACES_Init+0x1c>)
 800e9f4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800e9f6:	f000 ff33 	bl	800f860 <HW_IPCC_TRACES_Init>

  return;
 800e9fa:	bf00      	nop
}
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	200300c0 	.word	0x200300c0
 800ea04:	20030000 	.word	0x20030000

0800ea08 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ea0e:	e008      	b.n	800ea22 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800ea10:	1d3b      	adds	r3, r7, #4
 800ea12:	4619      	mov	r1, r3
 800ea14:	4808      	ldr	r0, [pc, #32]	; (800ea38 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ea16:	f000 f938 	bl	800ec8a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f000 f80d 	bl	800ea3c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ea22:	4805      	ldr	r0, [pc, #20]	; (800ea38 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ea24:	f000 f8a2 	bl	800eb6c <LST_is_empty>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d0f0      	beq.n	800ea10 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ea2e:	bf00      	nop
}
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	200300c0 	.word	0x200300c0

0800ea3c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b083      	sub	sp, #12
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ea44:	bf00      	nop
 800ea46:	370c      	adds	r7, #12
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr

0800ea50 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b085      	sub	sp, #20
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	4603      	mov	r3, r0
 800ea58:	6039      	str	r1, [r7, #0]
 800ea5a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ea5c:	79fb      	ldrb	r3, [r7, #7]
 800ea5e:	2b06      	cmp	r3, #6
 800ea60:	d845      	bhi.n	800eaee <OutputDbgTrace+0x9e>
 800ea62:	a201      	add	r2, pc, #4	; (adr r2, 800ea68 <OutputDbgTrace+0x18>)
 800ea64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea68:	0800ea85 	.word	0x0800ea85
 800ea6c:	0800eaa9 	.word	0x0800eaa9
 800ea70:	0800eaaf 	.word	0x0800eaaf
 800ea74:	0800eac3 	.word	0x0800eac3
 800ea78:	0800eacf 	.word	0x0800eacf
 800ea7c:	0800ead5 	.word	0x0800ead5
 800ea80:	0800eae3 	.word	0x0800eae3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	7a5b      	ldrb	r3, [r3, #9]
 800ea8c:	2bff      	cmp	r3, #255	; 0xff
 800ea8e:	d005      	beq.n	800ea9c <OutputDbgTrace+0x4c>
 800ea90:	2bff      	cmp	r3, #255	; 0xff
 800ea92:	dc05      	bgt.n	800eaa0 <OutputDbgTrace+0x50>
 800ea94:	2b0e      	cmp	r3, #14
 800ea96:	d005      	beq.n	800eaa4 <OutputDbgTrace+0x54>
 800ea98:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ea9a:	e001      	b.n	800eaa0 <OutputDbgTrace+0x50>
          break;
 800ea9c:	bf00      	nop
 800ea9e:	e027      	b.n	800eaf0 <OutputDbgTrace+0xa0>
          break;
 800eaa0:	bf00      	nop
 800eaa2:	e025      	b.n	800eaf0 <OutputDbgTrace+0xa0>
          break;
 800eaa4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800eaa6:	e023      	b.n	800eaf0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800eaac:	e020      	b.n	800eaf0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	7a5b      	ldrb	r3, [r3, #9]
 800eab6:	2b0e      	cmp	r3, #14
 800eab8:	d001      	beq.n	800eabe <OutputDbgTrace+0x6e>
 800eaba:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800eabc:	e000      	b.n	800eac0 <OutputDbgTrace+0x70>
          break;
 800eabe:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800eac0:	e016      	b.n	800eaf0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	7a5b      	ldrb	r3, [r3, #9]
 800eaca:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800eacc:	e010      	b.n	800eaf0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ead2:	e00d      	b.n	800eaf0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	7a5b      	ldrb	r3, [r3, #9]
 800eadc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800eade:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800eae0:	e006      	b.n	800eaf0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	7a5b      	ldrb	r3, [r3, #9]
 800eaea:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800eaec:	e000      	b.n	800eaf0 <OutputDbgTrace+0xa0>

    default:
      break;
 800eaee:	bf00      	nop
  }

  return;
 800eaf0:	bf00      	nop
}
 800eaf2:	3714      	adds	r7, #20
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr

0800eafc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800eafc:	b480      	push	{r7}
 800eafe:	b085      	sub	sp, #20
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	4603      	mov	r3, r0
 800eb04:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800eb06:	4b0f      	ldr	r3, [pc, #60]	; (800eb44 <OTP_Read+0x48>)
 800eb08:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800eb0a:	e002      	b.n	800eb12 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	3b08      	subs	r3, #8
 800eb10:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	3307      	adds	r3, #7
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	79fa      	ldrb	r2, [r7, #7]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d003      	beq.n	800eb26 <OTP_Read+0x2a>
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	4a09      	ldr	r2, [pc, #36]	; (800eb48 <OTP_Read+0x4c>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d1f2      	bne.n	800eb0c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	3307      	adds	r3, #7
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	79fa      	ldrb	r2, [r7, #7]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d001      	beq.n	800eb36 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800eb32:	2300      	movs	r3, #0
 800eb34:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800eb36:	68fb      	ldr	r3, [r7, #12]
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3714      	adds	r7, #20
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr
 800eb44:	1fff73f8 	.word	0x1fff73f8
 800eb48:	1fff7000 	.word	0x1fff7000

0800eb4c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	605a      	str	r2, [r3, #4]
}
 800eb60:	bf00      	nop
 800eb62:	370c      	adds	r7, #12
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr

0800eb6c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b087      	sub	sp, #28
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb74:	f3ef 8310 	mrs	r3, PRIMASK
 800eb78:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800eb7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb7e:	b672      	cpsid	i
}
 800eb80:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	687a      	ldr	r2, [r7, #4]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d102      	bne.n	800eb92 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	75fb      	strb	r3, [r7, #23]
 800eb90:	e001      	b.n	800eb96 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800eb92:	2300      	movs	r3, #0
 800eb94:	75fb      	strb	r3, [r7, #23]
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	f383 8810 	msr	PRIMASK, r3
}
 800eba0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800eba2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	371c      	adds	r7, #28
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b087      	sub	sp, #28
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebba:	f3ef 8310 	mrs	r3, PRIMASK
 800ebbe:	60fb      	str	r3, [r7, #12]
  return(result);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ebc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ebc4:	b672      	cpsid	i
}
 800ebc6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	683a      	ldr	r2, [r7, #0]
 800ebda:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	683a      	ldr	r2, [r7, #0]
 800ebe2:	605a      	str	r2, [r3, #4]
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	f383 8810 	msr	PRIMASK, r3
}
 800ebee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ebf0:	bf00      	nop
 800ebf2:	371c      	adds	r7, #28
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b087      	sub	sp, #28
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec06:	f3ef 8310 	mrs	r3, PRIMASK
 800ec0a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ec0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec10:	b672      	cpsid	i
}
 800ec12:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	685a      	ldr	r2, [r3, #4]
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	683a      	ldr	r2, [r7, #0]
 800ec26:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	683a      	ldr	r2, [r7, #0]
 800ec2e:	601a      	str	r2, [r3, #0]
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	f383 8810 	msr	PRIMASK, r3
}
 800ec3a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ec3c:	bf00      	nop
 800ec3e:	371c      	adds	r7, #28
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr

0800ec48 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b087      	sub	sp, #28
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec50:	f3ef 8310 	mrs	r3, PRIMASK
 800ec54:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec56:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ec58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec5a:	b672      	cpsid	i
}
 800ec5c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	6812      	ldr	r2, [r2, #0]
 800ec66:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	687a      	ldr	r2, [r7, #4]
 800ec6e:	6852      	ldr	r2, [r2, #4]
 800ec70:	605a      	str	r2, [r3, #4]
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	f383 8810 	msr	PRIMASK, r3
}
 800ec7c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ec7e:	bf00      	nop
 800ec80:	371c      	adds	r7, #28
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr

0800ec8a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b086      	sub	sp, #24
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
 800ec92:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec94:	f3ef 8310 	mrs	r3, PRIMASK
 800ec98:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec9a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ec9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec9e:	b672      	cpsid	i
}
 800eca0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7ff ffca 	bl	800ec48 <LST_remove_node>
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	f383 8810 	msr	PRIMASK, r3
}
 800ecbe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ecc0:	bf00      	nop
 800ecc2:	3718      	adds	r7, #24
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800eccc:	4b03      	ldr	r3, [pc, #12]	; (800ecdc <LL_FLASH_GetUDN+0x14>)
 800ecce:	681b      	ldr	r3, [r3, #0]
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr
 800ecda:	bf00      	nop
 800ecdc:	1fff7580 	.word	0x1fff7580

0800ece0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800ece0:	b480      	push	{r7}
 800ece2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800ece4:	4b03      	ldr	r3, [pc, #12]	; (800ecf4 <LL_FLASH_GetDeviceID+0x14>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	b2db      	uxtb	r3, r3
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr
 800ecf4:	1fff7584 	.word	0x1fff7584

0800ecf8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800ecfc:	4b03      	ldr	r3, [pc, #12]	; (800ed0c <LL_FLASH_GetSTCompanyID+0x14>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	0a1b      	lsrs	r3, r3, #8
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr
 800ed0c:	1fff7584 	.word	0x1fff7584

0800ed10 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800ed10:	b5b0      	push	{r4, r5, r7, lr}
 800ed12:	b090      	sub	sp, #64	; 0x40
 800ed14:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ed16:	2392      	movs	r3, #146	; 0x92
 800ed18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800ed1c:	4b2e      	ldr	r3, [pc, #184]	; (800edd8 <APP_BLE_Init+0xc8>)
 800ed1e:	1d3c      	adds	r4, r7, #4
 800ed20:	461d      	mov	r5, r3
 800ed22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ed32:	c403      	stmia	r4!, {r0, r1}
 800ed34:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800ed36:	f000 f90b 	bl	800ef50 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800ed3a:	2101      	movs	r1, #1
 800ed3c:	2002      	movs	r0, #2
 800ed3e:	f001 facb 	bl	80102d8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800ed42:	4a26      	ldr	r2, [pc, #152]	; (800eddc <APP_BLE_Init+0xcc>)
 800ed44:	2100      	movs	r1, #0
 800ed46:	2002      	movs	r0, #2
 800ed48:	f001 fbf2 	bl	8010530 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800ed4c:	1d3b      	adds	r3, r7, #4
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7ff f8c6 	bl	800dee0 <SHCI_C2_BLE_Init>
 800ed54:	4603      	mov	r3, r0
 800ed56:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800ed5a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d001      	beq.n	800ed66 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800ed62:	f7f2 ff5d 	bl	8001c20 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800ed66:	f000 f909 	bl	800ef7c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800ed6a:	f7ff f813 	bl	800dd94 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ed6e:	4b1c      	ldr	r3, [pc, #112]	; (800ede0 <APP_BLE_Init+0xd0>)
 800ed70:	2200      	movs	r2, #0
 800ed72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800ed76:	4b1a      	ldr	r3, [pc, #104]	; (800ede0 <APP_BLE_Init+0xd0>)
 800ed78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed7c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800ed7e:	4a19      	ldr	r2, [pc, #100]	; (800ede4 <APP_BLE_Init+0xd4>)
 800ed80:	2100      	movs	r1, #0
 800ed82:	2001      	movs	r0, #1
 800ed84:	f001 fbd4 	bl	8010530 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800ed88:	2006      	movs	r0, #6
 800ed8a:	f7fe fcf4 	bl	800d776 <aci_hal_set_radio_activity_mask>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800ed94:	f000 fb2a 	bl	800f3ec <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800ed98:	4b13      	ldr	r3, [pc, #76]	; (800ede8 <APP_BLE_Init+0xd8>)
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	4913      	ldr	r1, [pc, #76]	; (800edec <APP_BLE_Init+0xdc>)
 800ed9e:	2000      	movs	r0, #0
 800eda0:	f7f2 fb60 	bl	8001464 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800eda4:	4b12      	ldr	r3, [pc, #72]	; (800edf0 <APP_BLE_Init+0xe0>)
 800eda6:	2200      	movs	r2, #0
 800eda8:	4912      	ldr	r1, [pc, #72]	; (800edf4 <APP_BLE_Init+0xe4>)
 800edaa:	2000      	movs	r0, #0
 800edac:	f7f2 fb5a 	bl	8001464 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800edb0:	4b0b      	ldr	r3, [pc, #44]	; (800ede0 <APP_BLE_Init+0xd0>)
 800edb2:	2200      	movs	r2, #0
 800edb4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800edb6:	4b0a      	ldr	r3, [pc, #40]	; (800ede0 <APP_BLE_Init+0xd0>)
 800edb8:	2200      	movs	r2, #0
 800edba:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800edbc:	4b0e      	ldr	r3, [pc, #56]	; (800edf8 <APP_BLE_Init+0xe8>)
 800edbe:	2280      	movs	r2, #128	; 0x80
 800edc0:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800edc2:	4b0e      	ldr	r3, [pc, #56]	; (800edfc <APP_BLE_Init+0xec>)
 800edc4:	22a0      	movs	r2, #160	; 0xa0
 800edc6:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800edc8:	2001      	movs	r0, #1
 800edca:	f000 f9a9 	bl	800f120 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800edce:	bf00      	nop
}
 800edd0:	3740      	adds	r7, #64	; 0x40
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bdb0      	pop	{r4, r5, r7, pc}
 800edd6:	bf00      	nop
 800edd8:	08010888 	.word	0x08010888
 800eddc:	0800e0fd 	.word	0x0800e0fd
 800ede0:	2000060c 	.word	0x2000060c
 800ede4:	0800f289 	.word	0x0800f289
 800ede8:	0800f2bd 	.word	0x0800f2bd
 800edec:	2000068d 	.word	0x2000068d
 800edf0:	0800f2cd 	.word	0x0800f2cd
 800edf4:	2000068e 	.word	0x2000068e
 800edf8:	20000690 	.word	0x20000690
 800edfc:	20000692 	.word	0x20000692

0800ee00 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b08a      	sub	sp, #40	; 0x28
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800ee08:	2392      	movs	r3, #146	; 0x92
 800ee0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	3301      	adds	r3, #1
 800ee12:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800ee14:	6a3b      	ldr	r3, [r7, #32]
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	2bff      	cmp	r3, #255	; 0xff
 800ee1a:	d076      	beq.n	800ef0a <SVCCTL_App_Notification+0x10a>
 800ee1c:	2bff      	cmp	r3, #255	; 0xff
 800ee1e:	f300 808b 	bgt.w	800ef38 <SVCCTL_App_Notification+0x138>
 800ee22:	2b05      	cmp	r3, #5
 800ee24:	d002      	beq.n	800ee2c <SVCCTL_App_Notification+0x2c>
 800ee26:	2b3e      	cmp	r3, #62	; 0x3e
 800ee28:	d020      	beq.n	800ee6c <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800ee2a:	e085      	b.n	800ef38 <SVCCTL_App_Notification+0x138>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800ee2c:	6a3b      	ldr	r3, [r7, #32]
 800ee2e:	3302      	adds	r3, #2
 800ee30:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ee38:	b29a      	uxth	r2, r3
 800ee3a:	4b43      	ldr	r3, [pc, #268]	; (800ef48 <SVCCTL_App_Notification+0x148>)
 800ee3c:	8adb      	ldrh	r3, [r3, #22]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d106      	bne.n	800ee50 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800ee42:	4b41      	ldr	r3, [pc, #260]	; (800ef48 <SVCCTL_App_Notification+0x148>)
 800ee44:	2200      	movs	r2, #0
 800ee46:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ee48:	4b3f      	ldr	r3, [pc, #252]	; (800ef48 <SVCCTL_App_Notification+0x148>)
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800ee50:	2001      	movs	r0, #1
 800ee52:	f000 f965 	bl	800f120 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800ee56:	4b3d      	ldr	r3, [pc, #244]	; (800ef4c <SVCCTL_App_Notification+0x14c>)
 800ee58:	2201      	movs	r2, #1
 800ee5a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ee5c:	4b3a      	ldr	r3, [pc, #232]	; (800ef48 <SVCCTL_App_Notification+0x148>)
 800ee5e:	8ada      	ldrh	r2, [r3, #22]
 800ee60:	4b3a      	ldr	r3, [pc, #232]	; (800ef4c <SVCCTL_App_Notification+0x14c>)
 800ee62:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800ee64:	4839      	ldr	r0, [pc, #228]	; (800ef4c <SVCCTL_App_Notification+0x14c>)
 800ee66:	f000 faad 	bl	800f3c4 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800ee6a:	e068      	b.n	800ef3e <SVCCTL_App_Notification+0x13e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800ee6c:	6a3b      	ldr	r3, [r7, #32]
 800ee6e:	3302      	adds	r3, #2
 800ee70:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	2b0c      	cmp	r3, #12
 800ee78:	d005      	beq.n	800ee86 <SVCCTL_App_Notification+0x86>
 800ee7a:	2b0c      	cmp	r3, #12
 800ee7c:	dc41      	bgt.n	800ef02 <SVCCTL_App_Notification+0x102>
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d017      	beq.n	800eeb2 <SVCCTL_App_Notification+0xb2>
 800ee82:	2b03      	cmp	r3, #3
          break;
 800ee84:	e03d      	b.n	800ef02 <SVCCTL_App_Notification+0x102>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800ee8c:	4b2e      	ldr	r3, [pc, #184]	; (800ef48 <SVCCTL_App_Notification+0x148>)
 800ee8e:	8adb      	ldrh	r3, [r3, #22]
 800ee90:	f107 020a 	add.w	r2, r7, #10
 800ee94:	f107 010b 	add.w	r1, r7, #11
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7fe fce4 	bl	800d866 <hci_le_read_phy>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800eea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d12c      	bne.n	800ef06 <SVCCTL_App_Notification+0x106>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800eeac:	7afb      	ldrb	r3, [r7, #11]
 800eeae:	2b02      	cmp	r3, #2
          break;
 800eeb0:	e029      	b.n	800ef06 <SVCCTL_App_Notification+0x106>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800eeb2:	69bb      	ldr	r3, [r7, #24]
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800eeb8:	4b23      	ldr	r3, [pc, #140]	; (800ef48 <SVCCTL_App_Notification+0x148>)
 800eeba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7f2 fb4a 	bl	8001558 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800eec4:	4b20      	ldr	r3, [pc, #128]	; (800ef48 <SVCCTL_App_Notification+0x148>)
 800eec6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eeca:	2b04      	cmp	r3, #4
 800eecc:	d104      	bne.n	800eed8 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800eece:	4b1e      	ldr	r3, [pc, #120]	; (800ef48 <SVCCTL_App_Notification+0x148>)
 800eed0:	2206      	movs	r2, #6
 800eed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800eed6:	e003      	b.n	800eee0 <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800eed8:	4b1b      	ldr	r3, [pc, #108]	; (800ef48 <SVCCTL_App_Notification+0x148>)
 800eeda:	2205      	movs	r2, #5
 800eedc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800eee6:	b29a      	uxth	r2, r3
 800eee8:	4b17      	ldr	r3, [pc, #92]	; (800ef48 <SVCCTL_App_Notification+0x148>)
 800eeea:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800eeec:	4b17      	ldr	r3, [pc, #92]	; (800ef4c <SVCCTL_App_Notification+0x14c>)
 800eeee:	2200      	movs	r2, #0
 800eef0:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800eef2:	4b15      	ldr	r3, [pc, #84]	; (800ef48 <SVCCTL_App_Notification+0x148>)
 800eef4:	8ada      	ldrh	r2, [r3, #22]
 800eef6:	4b15      	ldr	r3, [pc, #84]	; (800ef4c <SVCCTL_App_Notification+0x14c>)
 800eef8:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 800eefa:	4814      	ldr	r0, [pc, #80]	; (800ef4c <SVCCTL_App_Notification+0x14c>)
 800eefc:	f000 fa62 	bl	800f3c4 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800ef00:	e002      	b.n	800ef08 <SVCCTL_App_Notification+0x108>
          break;
 800ef02:	bf00      	nop
 800ef04:	e01b      	b.n	800ef3e <SVCCTL_App_Notification+0x13e>
          break;
 800ef06:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800ef08:	e019      	b.n	800ef3e <SVCCTL_App_Notification+0x13e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800ef0a:	6a3b      	ldr	r3, [r7, #32]
 800ef0c:	3302      	adds	r3, #2
 800ef0e:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800ef10:	69fb      	ldr	r3, [r7, #28]
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef1a:	d009      	beq.n	800ef30 <SVCCTL_App_Notification+0x130>
 800ef1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef20:	dc0c      	bgt.n	800ef3c <SVCCTL_App_Notification+0x13c>
 800ef22:	2b04      	cmp	r3, #4
 800ef24:	d006      	beq.n	800ef34 <SVCCTL_App_Notification+0x134>
 800ef26:	f240 4207 	movw	r2, #1031	; 0x407
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d106      	bne.n	800ef3c <SVCCTL_App_Notification+0x13c>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ef2e:	e002      	b.n	800ef36 <SVCCTL_App_Notification+0x136>
          break;
 800ef30:	bf00      	nop
 800ef32:	e003      	b.n	800ef3c <SVCCTL_App_Notification+0x13c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800ef34:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ef36:	e001      	b.n	800ef3c <SVCCTL_App_Notification+0x13c>
      break;
 800ef38:	bf00      	nop
 800ef3a:	e000      	b.n	800ef3e <SVCCTL_App_Notification+0x13e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ef3c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800ef3e:	2301      	movs	r3, #1
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3728      	adds	r7, #40	; 0x28
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	2000060c 	.word	0x2000060c
 800ef4c:	20000694 	.word	0x20000694

0800ef50 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800ef56:	4b06      	ldr	r3, [pc, #24]	; (800ef70 <Ble_Tl_Init+0x20>)
 800ef58:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800ef5a:	4b06      	ldr	r3, [pc, #24]	; (800ef74 <Ble_Tl_Init+0x24>)
 800ef5c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800ef5e:	463b      	mov	r3, r7
 800ef60:	4619      	mov	r1, r3
 800ef62:	4805      	ldr	r0, [pc, #20]	; (800ef78 <Ble_Tl_Init+0x28>)
 800ef64:	f7ff f8ae 	bl	800e0c4 <hci_init>

  return;
 800ef68:	bf00      	nop
}
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	200300d8 	.word	0x200300d8
 800ef74:	0800f357 	.word	0x0800f357
 800ef78:	0800f31f 	.word	0x0800f31f

0800ef7c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800ef7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef7e:	b08d      	sub	sp, #52	; 0x34
 800ef80:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800ef82:	2300      	movs	r3, #0
 800ef84:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ef86:	2392      	movs	r3, #146	; 0x92
 800ef88:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800ef8a:	f7fe fc48 	bl	800d81e <hci_reset>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800ef92:	f000 f935 	bl	800f200 <BleGetBdAddress>
 800ef96:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800ef98:	693a      	ldr	r2, [r7, #16]
 800ef9a:	2106      	movs	r1, #6
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	f7fe fafe 	bl	800d59e <aci_hal_write_config_data>
 800efa2:	4603      	mov	r3, r0
 800efa4:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	3305      	adds	r3, #5
 800efaa:	781a      	ldrb	r2, [r3, #0]
 800efac:	4b56      	ldr	r3, [pc, #344]	; (800f108 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800efae:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	3304      	adds	r3, #4
 800efb4:	781a      	ldrb	r2, [r3, #0]
 800efb6:	4b54      	ldr	r3, [pc, #336]	; (800f108 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800efb8:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	3303      	adds	r3, #3
 800efbe:	781a      	ldrb	r2, [r3, #0]
 800efc0:	4b51      	ldr	r3, [pc, #324]	; (800f108 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800efc2:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	3302      	adds	r3, #2
 800efc8:	781a      	ldrb	r2, [r3, #0]
 800efca:	4b4f      	ldr	r3, [pc, #316]	; (800f108 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800efcc:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	3301      	adds	r3, #1
 800efd2:	781a      	ldrb	r2, [r3, #0]
 800efd4:	4b4c      	ldr	r3, [pc, #304]	; (800f108 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800efd6:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	781a      	ldrb	r2, [r3, #0]
 800efdc:	4b4a      	ldr	r3, [pc, #296]	; (800f108 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800efde:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800efe0:	4a4a      	ldr	r2, [pc, #296]	; (800f10c <Ble_Hci_Gap_Gatt_Init+0x190>)
 800efe2:	2110      	movs	r1, #16
 800efe4:	2018      	movs	r0, #24
 800efe6:	f7fe fada 	bl	800d59e <aci_hal_write_config_data>
 800efea:	4603      	mov	r3, r0
 800efec:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800efee:	4a48      	ldr	r2, [pc, #288]	; (800f110 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800eff0:	2110      	movs	r1, #16
 800eff2:	2008      	movs	r0, #8
 800eff4:	f7fe fad3 	bl	800d59e <aci_hal_write_config_data>
 800eff8:	4603      	mov	r3, r0
 800effa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800effc:	2118      	movs	r1, #24
 800effe:	2001      	movs	r0, #1
 800f000:	f7fe fb52 	bl	800d6a8 <aci_hal_set_tx_power_level>
 800f004:	4603      	mov	r3, r0
 800f006:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800f008:	f7fe f81d 	bl	800d046 <aci_gatt_init>
 800f00c:	4603      	mov	r3, r0
 800f00e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800f010:	2300      	movs	r3, #0
 800f012:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800f014:	7bfb      	ldrb	r3, [r7, #15]
 800f016:	f043 0301 	orr.w	r3, r3, #1
 800f01a:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800f01c:	7bfb      	ldrb	r3, [r7, #15]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d01f      	beq.n	800f062 <Ble_Hci_Gap_Gatt_Init+0xe6>
  {
    const char *name = "P2PSRV1";
 800f022:	4b3c      	ldr	r3, [pc, #240]	; (800f114 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800f024:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800f026:	1dba      	adds	r2, r7, #6
 800f028:	7bf8      	ldrb	r0, [r7, #15]
 800f02a:	1cbb      	adds	r3, r7, #2
 800f02c:	9301      	str	r3, [sp, #4]
 800f02e:	1d3b      	adds	r3, r7, #4
 800f030:	9300      	str	r3, [sp, #0]
 800f032:	4613      	mov	r3, r2
 800f034:	2207      	movs	r2, #7
 800f036:	2100      	movs	r1, #0
 800f038:	f7fd fec2 	bl	800cdc0 <aci_gap_init>
 800f03c:	4603      	mov	r3, r0
 800f03e:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800f040:	88fc      	ldrh	r4, [r7, #6]
 800f042:	88bd      	ldrh	r5, [r7, #4]
 800f044:	68b8      	ldr	r0, [r7, #8]
 800f046:	f7f1 f899 	bl	800017c <strlen>
 800f04a:	4603      	mov	r3, r0
 800f04c:	b2da      	uxtb	r2, r3
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	9300      	str	r3, [sp, #0]
 800f052:	4613      	mov	r3, r2
 800f054:	2200      	movs	r2, #0
 800f056:	4629      	mov	r1, r5
 800f058:	4620      	mov	r0, r4
 800f05a:	f7fe f9f7 	bl	800d44c <aci_gatt_update_char_value>
 800f05e:	4603      	mov	r3, r0
 800f060:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800f062:	88f8      	ldrh	r0, [r7, #6]
 800f064:	8879      	ldrh	r1, [r7, #2]
 800f066:	463b      	mov	r3, r7
 800f068:	9300      	str	r3, [sp, #0]
 800f06a:	2302      	movs	r3, #2
 800f06c:	2200      	movs	r2, #0
 800f06e:	f7fe f9ed 	bl	800d44c <aci_gatt_update_char_value>
 800f072:	4603      	mov	r3, r0
 800f074:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800f076:	2202      	movs	r2, #2
 800f078:	2102      	movs	r1, #2
 800f07a:	2000      	movs	r0, #0
 800f07c:	f7fe fc71 	bl	800d962 <hci_le_set_default_phy>
 800f080:	4603      	mov	r3, r0
 800f082:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800f084:	4b24      	ldr	r3, [pc, #144]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f086:	2201      	movs	r2, #1
 800f088:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800f08a:	4b23      	ldr	r3, [pc, #140]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	4618      	mov	r0, r3
 800f090:	f7fd fd7e 	bl	800cb90 <aci_gap_set_io_capability>
 800f094:	4603      	mov	r3, r0
 800f096:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800f098:	4b1f      	ldr	r3, [pc, #124]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f09a:	2201      	movs	r2, #1
 800f09c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800f09e:	4b1e      	ldr	r3, [pc, #120]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f0a0:	2208      	movs	r2, #8
 800f0a2:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800f0a4:	4b1c      	ldr	r3, [pc, #112]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f0a6:	2210      	movs	r2, #16
 800f0a8:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800f0aa:	4b1b      	ldr	r3, [pc, #108]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800f0b0:	4b19      	ldr	r3, [pc, #100]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f0b2:	4a1a      	ldr	r2, [pc, #104]	; (800f11c <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800f0b4:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800f0b6:	4b18      	ldr	r3, [pc, #96]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800f0bc:	4b16      	ldr	r3, [pc, #88]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f0be:	789c      	ldrb	r4, [r3, #2]
 800f0c0:	4b15      	ldr	r3, [pc, #84]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f0c2:	785d      	ldrb	r5, [r3, #1]
 800f0c4:	4b14      	ldr	r3, [pc, #80]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f0c6:	791b      	ldrb	r3, [r3, #4]
 800f0c8:	4a13      	ldr	r2, [pc, #76]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f0ca:	7952      	ldrb	r2, [r2, #5]
 800f0cc:	4912      	ldr	r1, [pc, #72]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f0ce:	78c9      	ldrb	r1, [r1, #3]
 800f0d0:	4811      	ldr	r0, [pc, #68]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f0d2:	6880      	ldr	r0, [r0, #8]
 800f0d4:	2600      	movs	r6, #0
 800f0d6:	9604      	str	r6, [sp, #16]
 800f0d8:	9003      	str	r0, [sp, #12]
 800f0da:	9102      	str	r1, [sp, #8]
 800f0dc:	9201      	str	r2, [sp, #4]
 800f0de:	9300      	str	r3, [sp, #0]
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	4629      	mov	r1, r5
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f7fd fda6 	bl	800cc38 <aci_gap_set_authentication_requirement>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800f0f0:	4b09      	ldr	r3, [pc, #36]	; (800f118 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800f0f2:	789b      	ldrb	r3, [r3, #2]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d003      	beq.n	800f100 <Ble_Hci_Gap_Gatt_Init+0x184>
  {
    ret = aci_gap_configure_whitelist();
 800f0f8:	f7fd ff81 	bl	800cffe <aci_gap_configure_filter_accept_list>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800f100:	bf00      	nop
 800f102:	371c      	adds	r7, #28
 800f104:	46bd      	mov	sp, r7
 800f106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f108:	200000a0 	.word	0x200000a0
 800f10c:	08010b14 	.word	0x08010b14
 800f110:	08010b24 	.word	0x08010b24
 800f114:	080108c4 	.word	0x080108c4
 800f118:	2000060c 	.word	0x2000060c
 800f11c:	0001b207 	.word	0x0001b207

0800f120 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b08c      	sub	sp, #48	; 0x30
 800f124:	af08      	add	r7, sp, #32
 800f126:	4603      	mov	r3, r0
 800f128:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f12a:	2392      	movs	r3, #146	; 0x92
 800f12c:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800f12e:	79fb      	ldrb	r3, [r7, #7]
 800f130:	2b01      	cmp	r3, #1
 800f132:	d106      	bne.n	800f142 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800f134:	4b2b      	ldr	r3, [pc, #172]	; (800f1e4 <Adv_Request+0xc4>)
 800f136:	881b      	ldrh	r3, [r3, #0]
 800f138:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800f13a:	4b2b      	ldr	r3, [pc, #172]	; (800f1e8 <Adv_Request+0xc8>)
 800f13c:	881b      	ldrh	r3, [r3, #0]
 800f13e:	81bb      	strh	r3, [r7, #12]
 800f140:	e005      	b.n	800f14e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800f142:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800f146:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800f148:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800f14c:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800f14e:	4b27      	ldr	r3, [pc, #156]	; (800f1ec <Adv_Request+0xcc>)
 800f150:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f154:	4618      	mov	r0, r3
 800f156:	f7f2 f9ff 	bl	8001558 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800f15a:	79fb      	ldrb	r3, [r7, #7]
 800f15c:	2b02      	cmp	r3, #2
 800f15e:	d10d      	bne.n	800f17c <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800f160:	4b22      	ldr	r3, [pc, #136]	; (800f1ec <Adv_Request+0xcc>)
 800f162:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f166:	2b01      	cmp	r3, #1
 800f168:	d004      	beq.n	800f174 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800f16a:	4b20      	ldr	r3, [pc, #128]	; (800f1ec <Adv_Request+0xcc>)
 800f16c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f170:	2b02      	cmp	r3, #2
 800f172:	d103      	bne.n	800f17c <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800f174:	f7fd fbee 	bl	800c954 <aci_gap_set_non_discoverable>
 800f178:	4603      	mov	r3, r0
 800f17a:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800f17c:	4a1b      	ldr	r2, [pc, #108]	; (800f1ec <Adv_Request+0xcc>)
 800f17e:	79fb      	ldrb	r3, [r7, #7]
 800f180:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800f184:	4b19      	ldr	r3, [pc, #100]	; (800f1ec <Adv_Request+0xcc>)
 800f186:	7e1b      	ldrb	r3, [r3, #24]
 800f188:	89ba      	ldrh	r2, [r7, #12]
 800f18a:	89f9      	ldrh	r1, [r7, #14]
 800f18c:	2000      	movs	r0, #0
 800f18e:	9006      	str	r0, [sp, #24]
 800f190:	2000      	movs	r0, #0
 800f192:	9005      	str	r0, [sp, #20]
 800f194:	4816      	ldr	r0, [pc, #88]	; (800f1f0 <Adv_Request+0xd0>)
 800f196:	9004      	str	r0, [sp, #16]
 800f198:	9303      	str	r3, [sp, #12]
 800f19a:	4b16      	ldr	r3, [pc, #88]	; (800f1f4 <Adv_Request+0xd4>)
 800f19c:	9302      	str	r3, [sp, #8]
 800f19e:	2308      	movs	r3, #8
 800f1a0:	9301      	str	r3, [sp, #4]
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	9300      	str	r3, [sp, #0]
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	2000      	movs	r0, #0
 800f1aa:	f7fd fbf7 	bl	800c99c <aci_gap_set_discoverable>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800f1b2:	4911      	ldr	r1, [pc, #68]	; (800f1f8 <Adv_Request+0xd8>)
 800f1b4:	200e      	movs	r0, #14
 800f1b6:	f7fd feb0 	bl	800cf1a <aci_gap_update_adv_data>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800f1be:	7afb      	ldrb	r3, [r7, #11]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d10a      	bne.n	800f1da <Adv_Request+0xba>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
    }
  }
  else
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800f1c4:	79fb      	ldrb	r3, [r7, #7]
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d107      	bne.n	800f1da <Adv_Request+0xba>
    {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
      /* Start Timer to STOP ADV - TIMEOUT - and next Restart Low Power Advertising */
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800f1ca:	4b08      	ldr	r3, [pc, #32]	; (800f1ec <Adv_Request+0xcc>)
 800f1cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f1d0:	490a      	ldr	r1, [pc, #40]	; (800f1fc <Adv_Request+0xdc>)
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7f2 fa44 	bl	8001660 <HW_TS_Start>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800f1d8:	bf00      	nop
 800f1da:	bf00      	nop
}
 800f1dc:	3710      	adds	r7, #16
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	20000690 	.word	0x20000690
 800f1e8:	20000692 	.word	0x20000692
 800f1ec:	2000060c 	.word	0x2000060c
 800f1f0:	20000625 	.word	0x20000625
 800f1f4:	08010b34 	.word	0x08010b34
 800f1f8:	200000a0 	.word	0x200000a0
 800f1fc:	0001e046 	.word	0x0001e046

0800f200 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b086      	sub	sp, #24
 800f204:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800f206:	f7ff fd5f 	bl	800ecc8 <LL_FLASH_GetUDN>
 800f20a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f212:	d023      	beq.n	800f25c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800f214:	f7ff fd70 	bl	800ecf8 <LL_FLASH_GetSTCompanyID>
 800f218:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800f21a:	f7ff fd61 	bl	800ece0 <LL_FLASH_GetDeviceID>
 800f21e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	b2da      	uxtb	r2, r3
 800f224:	4b16      	ldr	r3, [pc, #88]	; (800f280 <BleGetBdAddress+0x80>)
 800f226:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	0a1b      	lsrs	r3, r3, #8
 800f22c:	b2da      	uxtb	r2, r3
 800f22e:	4b14      	ldr	r3, [pc, #80]	; (800f280 <BleGetBdAddress+0x80>)
 800f230:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	b2da      	uxtb	r2, r3
 800f236:	4b12      	ldr	r3, [pc, #72]	; (800f280 <BleGetBdAddress+0x80>)
 800f238:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	b2da      	uxtb	r2, r3
 800f23e:	4b10      	ldr	r3, [pc, #64]	; (800f280 <BleGetBdAddress+0x80>)
 800f240:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	0a1b      	lsrs	r3, r3, #8
 800f246:	b2da      	uxtb	r2, r3
 800f248:	4b0d      	ldr	r3, [pc, #52]	; (800f280 <BleGetBdAddress+0x80>)
 800f24a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	0c1b      	lsrs	r3, r3, #16
 800f250:	b2da      	uxtb	r2, r3
 800f252:	4b0b      	ldr	r3, [pc, #44]	; (800f280 <BleGetBdAddress+0x80>)
 800f254:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800f256:	4b0a      	ldr	r3, [pc, #40]	; (800f280 <BleGetBdAddress+0x80>)
 800f258:	617b      	str	r3, [r7, #20]
 800f25a:	e00b      	b.n	800f274 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800f25c:	2000      	movs	r0, #0
 800f25e:	f7ff fc4d 	bl	800eafc <OTP_Read>
 800f262:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d002      	beq.n	800f270 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	617b      	str	r3, [r7, #20]
 800f26e:	e001      	b.n	800f274 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800f270:	4b04      	ldr	r3, [pc, #16]	; (800f284 <BleGetBdAddress+0x84>)
 800f272:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800f274:	697b      	ldr	r3, [r7, #20]
}
 800f276:	4618      	mov	r0, r3
 800f278:	3718      	adds	r7, #24
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	20000604 	.word	0x20000604
 800f284:	08010b0c 	.word	0x08010b0c

0800f288 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800f28e:	4b0a      	ldr	r3, [pc, #40]	; (800f2b8 <Adv_Cancel+0x30>)
 800f290:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f294:	2b05      	cmp	r3, #5
 800f296:	d00a      	beq.n	800f2ae <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f298:	2392      	movs	r3, #146	; 0x92
 800f29a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800f29c:	f7fd fb5a 	bl	800c954 <aci_gap_set_non_discoverable>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f2a4:	4b04      	ldr	r3, [pc, #16]	; (800f2b8 <Adv_Cancel+0x30>)
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800f2ac:	bf00      	nop
 800f2ae:	bf00      	nop
}
 800f2b0:	3708      	adds	r7, #8
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	2000060c 	.word	0x2000060c

0800f2bc <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800f2c0:	2100      	movs	r1, #0
 800f2c2:	2001      	movs	r0, #1
 800f2c4:	f001 f956 	bl	8010574 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 800f2c8:	bf00      	nop
}
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 800f2d0:	bf00      	nop
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr

0800f2da <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800f2da:	b580      	push	{r7, lr}
 800f2dc:	b082      	sub	sp, #8
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800f2e2:	2100      	movs	r1, #0
 800f2e4:	2002      	movs	r0, #2
 800f2e6:	f001 f945 	bl	8010574 <UTIL_SEQ_SetTask>

  return;
 800f2ea:	bf00      	nop
}
 800f2ec:	3708      	adds	r7, #8
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}

0800f2f2 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b082      	sub	sp, #8
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800f2fa:	2001      	movs	r0, #1
 800f2fc:	f001 f9a6 	bl	801064c <UTIL_SEQ_SetEvt>

  return;
 800f300:	bf00      	nop
}
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800f310:	2001      	movs	r0, #1
 800f312:	f001 f9bb 	bl	801068c <UTIL_SEQ_WaitEvt>

  return;
 800f316:	bf00      	nop
}
 800f318:	3708      	adds	r7, #8
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}

0800f31e <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800f31e:	b580      	push	{r7, lr}
 800f320:	b084      	sub	sp, #16
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	3308      	adds	r3, #8
 800f330:	4618      	mov	r0, r3
 800f332:	f7fe fd81 	bl	800de38 <SVCCTL_UserEvtRx>
 800f336:	4603      	mov	r3, r0
 800f338:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800f33a:	7afb      	ldrb	r3, [r7, #11]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d003      	beq.n	800f348 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2201      	movs	r2, #1
 800f344:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800f346:	e003      	b.n	800f350 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2200      	movs	r2, #0
 800f34c:	701a      	strb	r2, [r3, #0]
  return;
 800f34e:	bf00      	nop
}
 800f350:	3710      	adds	r7, #16
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800f356:	b580      	push	{r7, lr}
 800f358:	b084      	sub	sp, #16
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	4603      	mov	r3, r0
 800f35e:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800f360:	79fb      	ldrb	r3, [r7, #7]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d002      	beq.n	800f36c <BLE_StatusNot+0x16>
 800f366:	2b01      	cmp	r3, #1
 800f368:	d006      	beq.n	800f378 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800f36a:	e00b      	b.n	800f384 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800f36c:	2303      	movs	r3, #3
 800f36e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800f370:	68f8      	ldr	r0, [r7, #12]
 800f372:	f001 f92b 	bl	80105cc <UTIL_SEQ_PauseTask>
      break;
 800f376:	e005      	b.n	800f384 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800f378:	2303      	movs	r3, #3
 800f37a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800f37c:	68f8      	ldr	r0, [r7, #12]
 800f37e:	f001 f945 	bl	801060c <UTIL_SEQ_ResumeTask>
      break;
 800f382:	bf00      	nop
  }

  return;
 800f384:	bf00      	nop
}
 800f386:	3710      	adds	r7, #16
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b083      	sub	sp, #12
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	2b03      	cmp	r3, #3
 800f39a:	d006      	beq.n	800f3aa <P2PS_STM_App_Notification+0x1e>
 800f39c:	2b03      	cmp	r3, #3
 800f39e:	dc06      	bgt.n	800f3ae <P2PS_STM_App_Notification+0x22>
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d006      	beq.n	800f3b2 <P2PS_STM_App_Notification+0x26>
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d006      	beq.n	800f3b6 <P2PS_STM_App_Notification+0x2a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800f3a8:	e001      	b.n	800f3ae <P2PS_STM_App_Notification+0x22>
      break;
 800f3aa:	bf00      	nop
 800f3ac:	e004      	b.n	800f3b8 <P2PS_STM_App_Notification+0x2c>
      break;
 800f3ae:	bf00      	nop
 800f3b0:	e002      	b.n	800f3b8 <P2PS_STM_App_Notification+0x2c>
      break;
 800f3b2:	bf00      	nop
 800f3b4:	e000      	b.n	800f3b8 <P2PS_STM_App_Notification+0x2c>
      break;
 800f3b6:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800f3b8:	bf00      	nop
}
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d002      	beq.n	800f3da <P2PS_APP_Notification+0x16>
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d002      	beq.n	800f3de <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800f3d8:	e002      	b.n	800f3e0 <P2PS_APP_Notification+0x1c>
    break;
 800f3da:	bf00      	nop
 800f3dc:	e000      	b.n	800f3e0 <P2PS_APP_Notification+0x1c>
    break;
 800f3de:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800f3e0:	bf00      	nop
}
 800f3e2:	370c      	adds	r7, #12
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr

0800f3ec <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 800f3f0:	bf00      	nop
}
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr
	...

0800f3fc <LL_PWR_EnableBootC2>:
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800f400:	4b05      	ldr	r3, [pc, #20]	; (800f418 <LL_PWR_EnableBootC2+0x1c>)
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	4a04      	ldr	r2, [pc, #16]	; (800f418 <LL_PWR_EnableBootC2+0x1c>)
 800f406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f40a:	60d3      	str	r3, [r2, #12]
}
 800f40c:	bf00      	nop
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop
 800f418:	58000400 	.word	0x58000400

0800f41c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800f424:	4b06      	ldr	r3, [pc, #24]	; (800f440 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f426:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800f42a:	4905      	ldr	r1, [pc, #20]	; (800f440 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	4313      	orrs	r3, r2
 800f430:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800f434:	bf00      	nop
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr
 800f440:	58000800 	.word	0x58000800

0800f444 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800f444:	b480      	push	{r7}
 800f446:	b083      	sub	sp, #12
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800f44c:	4b05      	ldr	r3, [pc, #20]	; (800f464 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f44e:	6a1a      	ldr	r2, [r3, #32]
 800f450:	4904      	ldr	r1, [pc, #16]	; (800f464 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	4313      	orrs	r3, r2
 800f456:	620b      	str	r3, [r1, #32]
}
 800f458:	bf00      	nop
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr
 800f464:	58000800 	.word	0x58000800

0800f468 <LL_AHB3_GRP1_EnableClock>:
{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800f470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f474:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4313      	orrs	r3, r2
 800f47e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800f480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4013      	ands	r3, r2
 800f48a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f48c:	68fb      	ldr	r3, [r7, #12]
}
 800f48e:	bf00      	nop
 800f490:	3714      	adds	r7, #20
 800f492:	46bd      	mov	sp, r7
 800f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f498:	4770      	bx	lr

0800f49a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800f49a:	b480      	push	{r7}
 800f49c:	b085      	sub	sp, #20
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800f4a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4a6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800f4aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800f4b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4ba:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	4013      	ands	r3, r2
 800f4c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
}
 800f4c6:	bf00      	nop
 800f4c8:	3714      	adds	r7, #20
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr

0800f4d2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800f4d2:	b480      	push	{r7}
 800f4d4:	b083      	sub	sp, #12
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	601a      	str	r2, [r3, #0]
}
 800f4e6:	bf00      	nop
 800f4e8:	370c      	adds	r7, #12
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr

0800f4f2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800f4f2:	b480      	push	{r7}
 800f4f4:	b083      	sub	sp, #12
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f043 0201 	orr.w	r2, r3, #1
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	601a      	str	r2, [r3, #0]
}
 800f506:	bf00      	nop
 800f508:	370c      	adds	r7, #12
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr

0800f512 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f512:	b480      	push	{r7}
 800f514:	b083      	sub	sp, #12
 800f516:	af00      	add	r7, sp, #0
 800f518:	6078      	str	r0, [r7, #4]
 800f51a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	685a      	ldr	r2, [r3, #4]
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	041b      	lsls	r3, r3, #16
 800f524:	43db      	mvns	r3, r3
 800f526:	401a      	ands	r2, r3
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	605a      	str	r2, [r3, #4]
}
 800f52c:	bf00      	nop
 800f52e:	370c      	adds	r7, #12
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr

0800f538 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f538:	b480      	push	{r7}
 800f53a:	b083      	sub	sp, #12
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	685a      	ldr	r2, [r3, #4]
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	041b      	lsls	r3, r3, #16
 800f54a:	431a      	orrs	r2, r3
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	605a      	str	r2, [r3, #4]
}
 800f550:	bf00      	nop
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr

0800f55c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	685a      	ldr	r2, [r3, #4]
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	43db      	mvns	r3, r3
 800f56e:	401a      	ands	r2, r3
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	605a      	str	r2, [r3, #4]
}
 800f574:	bf00      	nop
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr

0800f580 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f580:	b480      	push	{r7}
 800f582:	b083      	sub	sp, #12
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	683a      	ldr	r2, [r7, #0]
 800f58e:	609a      	str	r2, [r3, #8]
}
 800f590:	bf00      	nop
 800f592:	370c      	adds	r7, #12
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr

0800f59c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f59c:	b480      	push	{r7}
 800f59e:	b083      	sub	sp, #12
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	041a      	lsls	r2, r3, #16
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	609a      	str	r2, [r3, #8]
}
 800f5ae:	bf00      	nop
 800f5b0:	370c      	adds	r7, #12
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr

0800f5ba <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f5ba:	b480      	push	{r7}
 800f5bc:	b083      	sub	sp, #12
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
 800f5c2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	68da      	ldr	r2, [r3, #12]
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	4013      	ands	r3, r2
 800f5cc:	683a      	ldr	r2, [r7, #0]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d101      	bne.n	800f5d6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	e000      	b.n	800f5d8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800f5d6:	2300      	movs	r3, #0
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	370c      	adds	r7, #12
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr

0800f5e4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	69da      	ldr	r2, [r3, #28]
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	683a      	ldr	r2, [r7, #0]
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d101      	bne.n	800f600 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	e000      	b.n	800f602 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800f600:	2300      	movs	r3, #0
}
 800f602:	4618      	mov	r0, r3
 800f604:	370c      	adds	r7, #12
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr
	...

0800f610 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800f614:	2102      	movs	r1, #2
 800f616:	4818      	ldr	r0, [pc, #96]	; (800f678 <HW_IPCC_Rx_Handler+0x68>)
 800f618:	f7ff ffe4 	bl	800f5e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d008      	beq.n	800f634 <HW_IPCC_Rx_Handler+0x24>
 800f622:	4b15      	ldr	r3, [pc, #84]	; (800f678 <HW_IPCC_Rx_Handler+0x68>)
 800f624:	685b      	ldr	r3, [r3, #4]
 800f626:	f003 0302 	and.w	r3, r3, #2
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d102      	bne.n	800f634 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800f62e:	f000 f8d5 	bl	800f7dc <HW_IPCC_SYS_EvtHandler>
 800f632:	e01e      	b.n	800f672 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800f634:	2101      	movs	r1, #1
 800f636:	4810      	ldr	r0, [pc, #64]	; (800f678 <HW_IPCC_Rx_Handler+0x68>)
 800f638:	f7ff ffd4 	bl	800f5e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f63c:	4603      	mov	r3, r0
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d008      	beq.n	800f654 <HW_IPCC_Rx_Handler+0x44>
 800f642:	4b0d      	ldr	r3, [pc, #52]	; (800f678 <HW_IPCC_Rx_Handler+0x68>)
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	f003 0301 	and.w	r3, r3, #1
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d102      	bne.n	800f654 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800f64e:	f000 f889 	bl	800f764 <HW_IPCC_BLE_EvtHandler>
 800f652:	e00e      	b.n	800f672 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800f654:	2108      	movs	r1, #8
 800f656:	4808      	ldr	r0, [pc, #32]	; (800f678 <HW_IPCC_Rx_Handler+0x68>)
 800f658:	f7ff ffc4 	bl	800f5e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f65c:	4603      	mov	r3, r0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d008      	beq.n	800f674 <HW_IPCC_Rx_Handler+0x64>
 800f662:	4b05      	ldr	r3, [pc, #20]	; (800f678 <HW_IPCC_Rx_Handler+0x68>)
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	f003 0308 	and.w	r3, r3, #8
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d102      	bne.n	800f674 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800f66e:	f000 f901 	bl	800f874 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800f672:	bf00      	nop
 800f674:	bf00      	nop
}
 800f676:	bd80      	pop	{r7, pc}
 800f678:	58000c00 	.word	0x58000c00

0800f67c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800f680:	2102      	movs	r1, #2
 800f682:	4818      	ldr	r0, [pc, #96]	; (800f6e4 <HW_IPCC_Tx_Handler+0x68>)
 800f684:	f7ff ff99 	bl	800f5ba <LL_C1_IPCC_IsActiveFlag_CHx>
 800f688:	4603      	mov	r3, r0
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d108      	bne.n	800f6a0 <HW_IPCC_Tx_Handler+0x24>
 800f68e:	4b15      	ldr	r3, [pc, #84]	; (800f6e4 <HW_IPCC_Tx_Handler+0x68>)
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f696:	2b00      	cmp	r3, #0
 800f698:	d102      	bne.n	800f6a0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800f69a:	f000 f893 	bl	800f7c4 <HW_IPCC_SYS_CmdEvtHandler>
 800f69e:	e01e      	b.n	800f6de <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800f6a0:	2108      	movs	r1, #8
 800f6a2:	4810      	ldr	r0, [pc, #64]	; (800f6e4 <HW_IPCC_Tx_Handler+0x68>)
 800f6a4:	f7ff ff89 	bl	800f5ba <LL_C1_IPCC_IsActiveFlag_CHx>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d108      	bne.n	800f6c0 <HW_IPCC_Tx_Handler+0x44>
 800f6ae:	4b0d      	ldr	r3, [pc, #52]	; (800f6e4 <HW_IPCC_Tx_Handler+0x68>)
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d102      	bne.n	800f6c0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800f6ba:	f000 f8bd 	bl	800f838 <HW_IPCC_MM_FreeBufHandler>
 800f6be:	e00e      	b.n	800f6de <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800f6c0:	2120      	movs	r1, #32
 800f6c2:	4808      	ldr	r0, [pc, #32]	; (800f6e4 <HW_IPCC_Tx_Handler+0x68>)
 800f6c4:	f7ff ff79 	bl	800f5ba <LL_C1_IPCC_IsActiveFlag_CHx>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d108      	bne.n	800f6e0 <HW_IPCC_Tx_Handler+0x64>
 800f6ce:	4b05      	ldr	r3, [pc, #20]	; (800f6e4 <HW_IPCC_Tx_Handler+0x68>)
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d102      	bne.n	800f6e0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800f6da:	f000 f84f 	bl	800f77c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800f6de:	bf00      	nop
 800f6e0:	bf00      	nop
}
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	58000c00 	.word	0x58000c00

0800f6e8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800f6ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f6f0:	f7ff fed3 	bl	800f49a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800f6f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f6f8:	f7ff fea4 	bl	800f444 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800f6fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f700:	f7ff fe8c 	bl	800f41c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800f704:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800f706:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800f708:	f7ff fe78 	bl	800f3fc <LL_PWR_EnableBootC2>

  return;
 800f70c:	bf00      	nop
}
 800f70e:	bd80      	pop	{r7, pc}

0800f710 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800f710:	b580      	push	{r7, lr}
 800f712:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800f714:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f718:	f7ff fea6 	bl	800f468 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800f71c:	4806      	ldr	r0, [pc, #24]	; (800f738 <HW_IPCC_Init+0x28>)
 800f71e:	f7ff fee8 	bl	800f4f2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800f722:	4805      	ldr	r0, [pc, #20]	; (800f738 <HW_IPCC_Init+0x28>)
 800f724:	f7ff fed5 	bl	800f4d2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800f728:	202c      	movs	r0, #44	; 0x2c
 800f72a:	f7f3 fe90 	bl	800344e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800f72e:	202d      	movs	r0, #45	; 0x2d
 800f730:	f7f3 fe8d 	bl	800344e <HAL_NVIC_EnableIRQ>

  return;
 800f734:	bf00      	nop
}
 800f736:	bd80      	pop	{r7, pc}
 800f738:	58000c00 	.word	0x58000c00

0800f73c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800f740:	2101      	movs	r1, #1
 800f742:	4802      	ldr	r0, [pc, #8]	; (800f74c <HW_IPCC_BLE_Init+0x10>)
 800f744:	f7ff ff0a 	bl	800f55c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f748:	bf00      	nop
}
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	58000c00 	.word	0x58000c00

0800f750 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800f750:	b580      	push	{r7, lr}
 800f752:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800f754:	2101      	movs	r1, #1
 800f756:	4802      	ldr	r0, [pc, #8]	; (800f760 <HW_IPCC_BLE_SendCmd+0x10>)
 800f758:	f7ff ff20 	bl	800f59c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800f75c:	bf00      	nop
}
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	58000c00 	.word	0x58000c00

0800f764 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800f764:	b580      	push	{r7, lr}
 800f766:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800f768:	f7ff f810 	bl	800e78c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800f76c:	2101      	movs	r1, #1
 800f76e:	4802      	ldr	r0, [pc, #8]	; (800f778 <HW_IPCC_BLE_EvtHandler+0x14>)
 800f770:	f7ff ff06 	bl	800f580 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f774:	bf00      	nop
}
 800f776:	bd80      	pop	{r7, pc}
 800f778:	58000c00 	.word	0x58000c00

0800f77c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800f780:	2120      	movs	r1, #32
 800f782:	4803      	ldr	r0, [pc, #12]	; (800f790 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800f784:	f7ff fed8 	bl	800f538 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800f788:	f7ff f830 	bl	800e7ec <HW_IPCC_BLE_AclDataAckNot>

  return;
 800f78c:	bf00      	nop
}
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	58000c00 	.word	0x58000c00

0800f794 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800f794:	b580      	push	{r7, lr}
 800f796:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800f798:	2102      	movs	r1, #2
 800f79a:	4802      	ldr	r0, [pc, #8]	; (800f7a4 <HW_IPCC_SYS_Init+0x10>)
 800f79c:	f7ff fede 	bl	800f55c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f7a0:	bf00      	nop
}
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	58000c00 	.word	0x58000c00

0800f7a8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f7ac:	2102      	movs	r1, #2
 800f7ae:	4804      	ldr	r0, [pc, #16]	; (800f7c0 <HW_IPCC_SYS_SendCmd+0x18>)
 800f7b0:	f7ff fef4 	bl	800f59c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f7b4:	2102      	movs	r1, #2
 800f7b6:	4802      	ldr	r0, [pc, #8]	; (800f7c0 <HW_IPCC_SYS_SendCmd+0x18>)
 800f7b8:	f7ff feab 	bl	800f512 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800f7bc:	bf00      	nop
}
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	58000c00 	.word	0x58000c00

0800f7c4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f7c8:	2102      	movs	r1, #2
 800f7ca:	4803      	ldr	r0, [pc, #12]	; (800f7d8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800f7cc:	f7ff feb4 	bl	800f538 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800f7d0:	f7ff f85c 	bl	800e88c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800f7d4:	bf00      	nop
}
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	58000c00 	.word	0x58000c00

0800f7dc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800f7e0:	f7ff f86a 	bl	800e8b8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800f7e4:	2102      	movs	r1, #2
 800f7e6:	4802      	ldr	r0, [pc, #8]	; (800f7f0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800f7e8:	f7ff feca 	bl	800f580 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f7ec:	bf00      	nop
}
 800f7ee:	bd80      	pop	{r7, pc}
 800f7f0:	58000c00 	.word	0x58000c00

0800f7f4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800f7fc:	2108      	movs	r1, #8
 800f7fe:	480c      	ldr	r0, [pc, #48]	; (800f830 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f800:	f7ff fedb 	bl	800f5ba <LL_C1_IPCC_IsActiveFlag_CHx>
 800f804:	4603      	mov	r3, r0
 800f806:	2b00      	cmp	r3, #0
 800f808:	d007      	beq.n	800f81a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800f80a:	4a0a      	ldr	r2, [pc, #40]	; (800f834 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f810:	2108      	movs	r1, #8
 800f812:	4807      	ldr	r0, [pc, #28]	; (800f830 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f814:	f7ff fe7d 	bl	800f512 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800f818:	e006      	b.n	800f828 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f81e:	2108      	movs	r1, #8
 800f820:	4803      	ldr	r0, [pc, #12]	; (800f830 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f822:	f7ff febb 	bl	800f59c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800f826:	bf00      	nop
}
 800f828:	3708      	adds	r7, #8
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop
 800f830:	58000c00 	.word	0x58000c00
 800f834:	20000698 	.word	0x20000698

0800f838 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f83c:	2108      	movs	r1, #8
 800f83e:	4806      	ldr	r0, [pc, #24]	; (800f858 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800f840:	f7ff fe7a 	bl	800f538 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800f844:	4b05      	ldr	r3, [pc, #20]	; (800f85c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f84a:	2108      	movs	r1, #8
 800f84c:	4802      	ldr	r0, [pc, #8]	; (800f858 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800f84e:	f7ff fea5 	bl	800f59c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800f852:	bf00      	nop
}
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	58000c00 	.word	0x58000c00
 800f85c:	20000698 	.word	0x20000698

0800f860 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800f860:	b580      	push	{r7, lr}
 800f862:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800f864:	2108      	movs	r1, #8
 800f866:	4802      	ldr	r0, [pc, #8]	; (800f870 <HW_IPCC_TRACES_Init+0x10>)
 800f868:	f7ff fe78 	bl	800f55c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f86c:	bf00      	nop
}
 800f86e:	bd80      	pop	{r7, pc}
 800f870:	58000c00 	.word	0x58000c00

0800f874 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800f874:	b580      	push	{r7, lr}
 800f876:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800f878:	f7ff f8c6 	bl	800ea08 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800f87c:	2108      	movs	r1, #8
 800f87e:	4802      	ldr	r0, [pc, #8]	; (800f888 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800f880:	f7ff fe7e 	bl	800f580 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f884:	bf00      	nop
}
 800f886:	bd80      	pop	{r7, pc}
 800f888:	58000c00 	.word	0x58000c00

0800f88c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800f890:	2200      	movs	r2, #0
 800f892:	4912      	ldr	r1, [pc, #72]	; (800f8dc <MX_USB_Device_Init+0x50>)
 800f894:	4812      	ldr	r0, [pc, #72]	; (800f8e0 <MX_USB_Device_Init+0x54>)
 800f896:	f7fb fdcd 	bl	800b434 <USBD_Init>
 800f89a:	4603      	mov	r3, r0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d001      	beq.n	800f8a4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800f8a0:	f7f2 f9be 	bl	8001c20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800f8a4:	490f      	ldr	r1, [pc, #60]	; (800f8e4 <MX_USB_Device_Init+0x58>)
 800f8a6:	480e      	ldr	r0, [pc, #56]	; (800f8e0 <MX_USB_Device_Init+0x54>)
 800f8a8:	f7fb fdf4 	bl	800b494 <USBD_RegisterClass>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d001      	beq.n	800f8b6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800f8b2:	f7f2 f9b5 	bl	8001c20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800f8b6:	490c      	ldr	r1, [pc, #48]	; (800f8e8 <MX_USB_Device_Init+0x5c>)
 800f8b8:	4809      	ldr	r0, [pc, #36]	; (800f8e0 <MX_USB_Device_Init+0x54>)
 800f8ba:	f7fb fd2b 	bl	800b314 <USBD_CDC_RegisterInterface>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d001      	beq.n	800f8c8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800f8c4:	f7f2 f9ac 	bl	8001c20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800f8c8:	4805      	ldr	r0, [pc, #20]	; (800f8e0 <MX_USB_Device_Init+0x54>)
 800f8ca:	f7fb fe19 	bl	800b500 <USBD_Start>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d001      	beq.n	800f8d8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800f8d4:	f7f2 f9a4 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800f8d8:	bf00      	nop
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	200000c4 	.word	0x200000c4
 800f8e0:	2000069c 	.word	0x2000069c
 800f8e4:	20000020 	.word	0x20000020
 800f8e8:	200000b0 	.word	0x200000b0

0800f8ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	4905      	ldr	r1, [pc, #20]	; (800f908 <CDC_Init_FS+0x1c>)
 800f8f4:	4805      	ldr	r0, [pc, #20]	; (800f90c <CDC_Init_FS+0x20>)
 800f8f6:	f7fb fd27 	bl	800b348 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f8fa:	4905      	ldr	r1, [pc, #20]	; (800f910 <CDC_Init_FS+0x24>)
 800f8fc:	4803      	ldr	r0, [pc, #12]	; (800f90c <CDC_Init_FS+0x20>)
 800f8fe:	f7fb fd45 	bl	800b38c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f902:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f904:	4618      	mov	r0, r3
 800f906:	bd80      	pop	{r7, pc}
 800f908:	20001178 	.word	0x20001178
 800f90c:	2000069c 	.word	0x2000069c
 800f910:	20000978 	.word	0x20000978

0800f914 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f914:	b480      	push	{r7}
 800f916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f918:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f924:	b480      	push	{r7}
 800f926:	b083      	sub	sp, #12
 800f928:	af00      	add	r7, sp, #0
 800f92a:	4603      	mov	r3, r0
 800f92c:	6039      	str	r1, [r7, #0]
 800f92e:	71fb      	strb	r3, [r7, #7]
 800f930:	4613      	mov	r3, r2
 800f932:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f934:	79fb      	ldrb	r3, [r7, #7]
 800f936:	2b23      	cmp	r3, #35	; 0x23
 800f938:	d84a      	bhi.n	800f9d0 <CDC_Control_FS+0xac>
 800f93a:	a201      	add	r2, pc, #4	; (adr r2, 800f940 <CDC_Control_FS+0x1c>)
 800f93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f940:	0800f9d1 	.word	0x0800f9d1
 800f944:	0800f9d1 	.word	0x0800f9d1
 800f948:	0800f9d1 	.word	0x0800f9d1
 800f94c:	0800f9d1 	.word	0x0800f9d1
 800f950:	0800f9d1 	.word	0x0800f9d1
 800f954:	0800f9d1 	.word	0x0800f9d1
 800f958:	0800f9d1 	.word	0x0800f9d1
 800f95c:	0800f9d1 	.word	0x0800f9d1
 800f960:	0800f9d1 	.word	0x0800f9d1
 800f964:	0800f9d1 	.word	0x0800f9d1
 800f968:	0800f9d1 	.word	0x0800f9d1
 800f96c:	0800f9d1 	.word	0x0800f9d1
 800f970:	0800f9d1 	.word	0x0800f9d1
 800f974:	0800f9d1 	.word	0x0800f9d1
 800f978:	0800f9d1 	.word	0x0800f9d1
 800f97c:	0800f9d1 	.word	0x0800f9d1
 800f980:	0800f9d1 	.word	0x0800f9d1
 800f984:	0800f9d1 	.word	0x0800f9d1
 800f988:	0800f9d1 	.word	0x0800f9d1
 800f98c:	0800f9d1 	.word	0x0800f9d1
 800f990:	0800f9d1 	.word	0x0800f9d1
 800f994:	0800f9d1 	.word	0x0800f9d1
 800f998:	0800f9d1 	.word	0x0800f9d1
 800f99c:	0800f9d1 	.word	0x0800f9d1
 800f9a0:	0800f9d1 	.word	0x0800f9d1
 800f9a4:	0800f9d1 	.word	0x0800f9d1
 800f9a8:	0800f9d1 	.word	0x0800f9d1
 800f9ac:	0800f9d1 	.word	0x0800f9d1
 800f9b0:	0800f9d1 	.word	0x0800f9d1
 800f9b4:	0800f9d1 	.word	0x0800f9d1
 800f9b8:	0800f9d1 	.word	0x0800f9d1
 800f9bc:	0800f9d1 	.word	0x0800f9d1
 800f9c0:	0800f9d1 	.word	0x0800f9d1
 800f9c4:	0800f9d1 	.word	0x0800f9d1
 800f9c8:	0800f9d1 	.word	0x0800f9d1
 800f9cc:	0800f9d1 	.word	0x0800f9d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f9d0:	bf00      	nop
  }

  return (USBD_OK);
 800f9d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	370c      	adds	r7, #12
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr

0800f9e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f9ea:	6879      	ldr	r1, [r7, #4]
 800f9ec:	4805      	ldr	r0, [pc, #20]	; (800fa04 <CDC_Receive_FS+0x24>)
 800f9ee:	f7fb fccd 	bl	800b38c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f9f2:	4804      	ldr	r0, [pc, #16]	; (800fa04 <CDC_Receive_FS+0x24>)
 800f9f4:	f7fb fce8 	bl	800b3c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f9f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3708      	adds	r7, #8
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	2000069c 	.word	0x2000069c

0800fa08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b087      	sub	sp, #28
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	4613      	mov	r3, r2
 800fa14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fa16:	2300      	movs	r3, #0
 800fa18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fa1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	371c      	adds	r7, #28
 800fa22:	46bd      	mov	sp, r7
 800fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa28:	4770      	bx	lr
	...

0800fa2c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b083      	sub	sp, #12
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	4603      	mov	r3, r0
 800fa34:	6039      	str	r1, [r7, #0]
 800fa36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	2212      	movs	r2, #18
 800fa3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800fa3e:	4b03      	ldr	r3, [pc, #12]	; (800fa4c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	370c      	adds	r7, #12
 800fa44:	46bd      	mov	sp, r7
 800fa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4a:	4770      	bx	lr
 800fa4c:	200000e4 	.word	0x200000e4

0800fa50 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	4603      	mov	r3, r0
 800fa58:	6039      	str	r1, [r7, #0]
 800fa5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	2204      	movs	r2, #4
 800fa60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fa62:	4b03      	ldr	r3, [pc, #12]	; (800fa70 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr
 800fa70:	200000f8 	.word	0x200000f8

0800fa74 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	6039      	str	r1, [r7, #0]
 800fa7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa80:	79fb      	ldrb	r3, [r7, #7]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d105      	bne.n	800fa92 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800fa86:	683a      	ldr	r2, [r7, #0]
 800fa88:	4907      	ldr	r1, [pc, #28]	; (800faa8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800fa8a:	4808      	ldr	r0, [pc, #32]	; (800faac <USBD_CDC_ProductStrDescriptor+0x38>)
 800fa8c:	f7fc fe82 	bl	800c794 <USBD_GetString>
 800fa90:	e004      	b.n	800fa9c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800fa92:	683a      	ldr	r2, [r7, #0]
 800fa94:	4904      	ldr	r1, [pc, #16]	; (800faa8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800fa96:	4805      	ldr	r0, [pc, #20]	; (800faac <USBD_CDC_ProductStrDescriptor+0x38>)
 800fa98:	f7fc fe7c 	bl	800c794 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa9c:	4b02      	ldr	r3, [pc, #8]	; (800faa8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	20001978 	.word	0x20001978
 800faac:	080108cc 	.word	0x080108cc

0800fab0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	4603      	mov	r3, r0
 800fab8:	6039      	str	r1, [r7, #0]
 800faba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fabc:	683a      	ldr	r2, [r7, #0]
 800fabe:	4904      	ldr	r1, [pc, #16]	; (800fad0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800fac0:	4804      	ldr	r0, [pc, #16]	; (800fad4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800fac2:	f7fc fe67 	bl	800c794 <USBD_GetString>
  return USBD_StrDesc;
 800fac6:	4b02      	ldr	r3, [pc, #8]	; (800fad0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3708      	adds	r7, #8
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}
 800fad0:	20001978 	.word	0x20001978
 800fad4:	080108e4 	.word	0x080108e4

0800fad8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	4603      	mov	r3, r0
 800fae0:	6039      	str	r1, [r7, #0]
 800fae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	221a      	movs	r2, #26
 800fae8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800faea:	f000 f843 	bl	800fb74 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800faee:	4b02      	ldr	r3, [pc, #8]	; (800faf8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	200000fc 	.word	0x200000fc

0800fafc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	4603      	mov	r3, r0
 800fb04:	6039      	str	r1, [r7, #0]
 800fb06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fb08:	79fb      	ldrb	r3, [r7, #7]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d105      	bne.n	800fb1a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800fb0e:	683a      	ldr	r2, [r7, #0]
 800fb10:	4907      	ldr	r1, [pc, #28]	; (800fb30 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800fb12:	4808      	ldr	r0, [pc, #32]	; (800fb34 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800fb14:	f7fc fe3e 	bl	800c794 <USBD_GetString>
 800fb18:	e004      	b.n	800fb24 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800fb1a:	683a      	ldr	r2, [r7, #0]
 800fb1c:	4904      	ldr	r1, [pc, #16]	; (800fb30 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800fb1e:	4805      	ldr	r0, [pc, #20]	; (800fb34 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800fb20:	f7fc fe38 	bl	800c794 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb24:	4b02      	ldr	r3, [pc, #8]	; (800fb30 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3708      	adds	r7, #8
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop
 800fb30:	20001978 	.word	0x20001978
 800fb34:	080108f8 	.word	0x080108f8

0800fb38 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	4603      	mov	r3, r0
 800fb40:	6039      	str	r1, [r7, #0]
 800fb42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb44:	79fb      	ldrb	r3, [r7, #7]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d105      	bne.n	800fb56 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800fb4a:	683a      	ldr	r2, [r7, #0]
 800fb4c:	4907      	ldr	r1, [pc, #28]	; (800fb6c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800fb4e:	4808      	ldr	r0, [pc, #32]	; (800fb70 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800fb50:	f7fc fe20 	bl	800c794 <USBD_GetString>
 800fb54:	e004      	b.n	800fb60 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800fb56:	683a      	ldr	r2, [r7, #0]
 800fb58:	4904      	ldr	r1, [pc, #16]	; (800fb6c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800fb5a:	4805      	ldr	r0, [pc, #20]	; (800fb70 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800fb5c:	f7fc fe1a 	bl	800c794 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb60:	4b02      	ldr	r3, [pc, #8]	; (800fb6c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3708      	adds	r7, #8
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
 800fb6a:	bf00      	nop
 800fb6c:	20001978 	.word	0x20001978
 800fb70:	08010904 	.word	0x08010904

0800fb74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fb7a:	4b0f      	ldr	r3, [pc, #60]	; (800fbb8 <Get_SerialNum+0x44>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fb80:	4b0e      	ldr	r3, [pc, #56]	; (800fbbc <Get_SerialNum+0x48>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fb86:	4b0e      	ldr	r3, [pc, #56]	; (800fbc0 <Get_SerialNum+0x4c>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fb8c:	68fa      	ldr	r2, [r7, #12]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	4413      	add	r3, r2
 800fb92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d009      	beq.n	800fbae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fb9a:	2208      	movs	r2, #8
 800fb9c:	4909      	ldr	r1, [pc, #36]	; (800fbc4 <Get_SerialNum+0x50>)
 800fb9e:	68f8      	ldr	r0, [r7, #12]
 800fba0:	f000 f814 	bl	800fbcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fba4:	2204      	movs	r2, #4
 800fba6:	4908      	ldr	r1, [pc, #32]	; (800fbc8 <Get_SerialNum+0x54>)
 800fba8:	68b8      	ldr	r0, [r7, #8]
 800fbaa:	f000 f80f 	bl	800fbcc <IntToUnicode>
  }
}
 800fbae:	bf00      	nop
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	1fff7590 	.word	0x1fff7590
 800fbbc:	1fff7594 	.word	0x1fff7594
 800fbc0:	1fff7598 	.word	0x1fff7598
 800fbc4:	200000fe 	.word	0x200000fe
 800fbc8:	2000010e 	.word	0x2000010e

0800fbcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b087      	sub	sp, #28
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fbde:	2300      	movs	r3, #0
 800fbe0:	75fb      	strb	r3, [r7, #23]
 800fbe2:	e027      	b.n	800fc34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	0f1b      	lsrs	r3, r3, #28
 800fbe8:	2b09      	cmp	r3, #9
 800fbea:	d80b      	bhi.n	800fc04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	0f1b      	lsrs	r3, r3, #28
 800fbf0:	b2da      	uxtb	r2, r3
 800fbf2:	7dfb      	ldrb	r3, [r7, #23]
 800fbf4:	005b      	lsls	r3, r3, #1
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	440b      	add	r3, r1
 800fbfc:	3230      	adds	r2, #48	; 0x30
 800fbfe:	b2d2      	uxtb	r2, r2
 800fc00:	701a      	strb	r2, [r3, #0]
 800fc02:	e00a      	b.n	800fc1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	0f1b      	lsrs	r3, r3, #28
 800fc08:	b2da      	uxtb	r2, r3
 800fc0a:	7dfb      	ldrb	r3, [r7, #23]
 800fc0c:	005b      	lsls	r3, r3, #1
 800fc0e:	4619      	mov	r1, r3
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	440b      	add	r3, r1
 800fc14:	3237      	adds	r2, #55	; 0x37
 800fc16:	b2d2      	uxtb	r2, r2
 800fc18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	011b      	lsls	r3, r3, #4
 800fc1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fc20:	7dfb      	ldrb	r3, [r7, #23]
 800fc22:	005b      	lsls	r3, r3, #1
 800fc24:	3301      	adds	r3, #1
 800fc26:	68ba      	ldr	r2, [r7, #8]
 800fc28:	4413      	add	r3, r2
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fc2e:	7dfb      	ldrb	r3, [r7, #23]
 800fc30:	3301      	adds	r3, #1
 800fc32:	75fb      	strb	r3, [r7, #23]
 800fc34:	7dfa      	ldrb	r2, [r7, #23]
 800fc36:	79fb      	ldrb	r3, [r7, #7]
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d3d3      	bcc.n	800fbe4 <IntToUnicode+0x18>
  }
}
 800fc3c:	bf00      	nop
 800fc3e:	bf00      	nop
 800fc40:	371c      	adds	r7, #28
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr

0800fc4a <LL_AHB2_GRP1_EnableClock>:
{
 800fc4a:	b480      	push	{r7}
 800fc4c:	b085      	sub	sp, #20
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800fc52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fc56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800fc62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fc66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	4013      	ands	r3, r2
 800fc6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
}
 800fc70:	bf00      	nop
 800fc72:	3714      	adds	r7, #20
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <LL_APB1_GRP1_EnableClock>:
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b085      	sub	sp, #20
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800fc84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fc88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fc8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4313      	orrs	r3, r2
 800fc92:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800fc94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fc98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	4013      	ands	r3, r2
 800fc9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fca0:	68fb      	ldr	r3, [r7, #12]
}
 800fca2:	bf00      	nop
 800fca4:	3714      	adds	r7, #20
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr
	...

0800fcb0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b088      	sub	sp, #32
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fcb8:	f107 030c 	add.w	r3, r7, #12
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	601a      	str	r2, [r3, #0]
 800fcc0:	605a      	str	r2, [r3, #4]
 800fcc2:	609a      	str	r2, [r3, #8]
 800fcc4:	60da      	str	r2, [r3, #12]
 800fcc6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a13      	ldr	r2, [pc, #76]	; (800fd1c <HAL_PCD_MspInit+0x6c>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d120      	bne.n	800fd14 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fcd2:	2001      	movs	r0, #1
 800fcd4:	f7ff ffb9 	bl	800fc4a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fcd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fcdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fcde:	2302      	movs	r3, #2
 800fce0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fce2:	2300      	movs	r3, #0
 800fce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fce6:	2300      	movs	r3, #0
 800fce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800fcea:	230a      	movs	r3, #10
 800fcec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fcee:	f107 030c 	add.w	r3, r7, #12
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fcf8:	f7f3 fdaa 	bl	8003850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800fcfc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800fd00:	f7ff ffbc 	bl	800fc7c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800fd04:	2200      	movs	r2, #0
 800fd06:	2100      	movs	r1, #0
 800fd08:	2014      	movs	r0, #20
 800fd0a:	f7f3 fb86 	bl	800341a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800fd0e:	2014      	movs	r0, #20
 800fd10:	f7f3 fb9d 	bl	800344e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800fd14:	bf00      	nop
 800fd16:	3720      	adds	r7, #32
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	40006800 	.word	0x40006800

0800fd20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800fd34:	4619      	mov	r1, r3
 800fd36:	4610      	mov	r0, r2
 800fd38:	f7fb fc2f 	bl	800b59a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800fd3c:	bf00      	nop
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800fd56:	78fa      	ldrb	r2, [r7, #3]
 800fd58:	6879      	ldr	r1, [r7, #4]
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	4413      	add	r3, r2
 800fd60:	00db      	lsls	r3, r3, #3
 800fd62:	440b      	add	r3, r1
 800fd64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fd68:	681a      	ldr	r2, [r3, #0]
 800fd6a:	78fb      	ldrb	r3, [r7, #3]
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	f7fb fc69 	bl	800b644 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800fd72:	bf00      	nop
 800fd74:	3708      	adds	r7, #8
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b082      	sub	sp, #8
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
 800fd82:	460b      	mov	r3, r1
 800fd84:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800fd8c:	78fa      	ldrb	r2, [r7, #3]
 800fd8e:	6879      	ldr	r1, [r7, #4]
 800fd90:	4613      	mov	r3, r2
 800fd92:	009b      	lsls	r3, r3, #2
 800fd94:	4413      	add	r3, r2
 800fd96:	00db      	lsls	r3, r3, #3
 800fd98:	440b      	add	r3, r1
 800fd9a:	3324      	adds	r3, #36	; 0x24
 800fd9c:	681a      	ldr	r2, [r3, #0]
 800fd9e:	78fb      	ldrb	r3, [r7, #3]
 800fda0:	4619      	mov	r1, r3
 800fda2:	f7fb fd02 	bl	800b7aa <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800fda6:	bf00      	nop
 800fda8:	3708      	adds	r7, #8
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}

0800fdae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdae:	b580      	push	{r7, lr}
 800fdb0:	b082      	sub	sp, #8
 800fdb2:	af00      	add	r7, sp, #0
 800fdb4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7fb fe3c 	bl	800ba3a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800fdc2:	bf00      	nop
 800fdc4:	3708      	adds	r7, #8
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdca:	b580      	push	{r7, lr}
 800fdcc:	b084      	sub	sp, #16
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	795b      	ldrb	r3, [r3, #5]
 800fdda:	2b02      	cmp	r3, #2
 800fddc:	d001      	beq.n	800fde2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fdde:	f7f1 ff1f 	bl	8001c20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800fde8:	7bfa      	ldrb	r2, [r7, #15]
 800fdea:	4611      	mov	r1, r2
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7fb fde0 	bl	800b9b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7fb fd88 	bl	800b90e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800fdfe:	bf00      	nop
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
	...

0800fe08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7fb fddb 	bl	800b9d2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	7a5b      	ldrb	r3, [r3, #9]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d005      	beq.n	800fe30 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fe24:	4b04      	ldr	r3, [pc, #16]	; (800fe38 <HAL_PCD_SuspendCallback+0x30>)
 800fe26:	691b      	ldr	r3, [r3, #16]
 800fe28:	4a03      	ldr	r2, [pc, #12]	; (800fe38 <HAL_PCD_SuspendCallback+0x30>)
 800fe2a:	f043 0306 	orr.w	r3, r3, #6
 800fe2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800fe30:	bf00      	nop
 800fe32:	3708      	adds	r7, #8
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}
 800fe38:	e000ed00 	.word	0xe000ed00

0800fe3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	7a5b      	ldrb	r3, [r3, #9]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d007      	beq.n	800fe5c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fe4c:	4b08      	ldr	r3, [pc, #32]	; (800fe70 <HAL_PCD_ResumeCallback+0x34>)
 800fe4e:	691b      	ldr	r3, [r3, #16]
 800fe50:	4a07      	ldr	r2, [pc, #28]	; (800fe70 <HAL_PCD_ResumeCallback+0x34>)
 800fe52:	f023 0306 	bic.w	r3, r3, #6
 800fe56:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800fe58:	f000 f9fa 	bl	8010250 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7fb fdd1 	bl	800ba0a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800fe68:	bf00      	nop
 800fe6a:	3708      	adds	r7, #8
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}
 800fe70:	e000ed00 	.word	0xe000ed00

0800fe74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800fe7c:	4a2c      	ldr	r2, [pc, #176]	; (800ff30 <USBD_LL_Init+0xbc>)
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4a2a      	ldr	r2, [pc, #168]	; (800ff30 <USBD_LL_Init+0xbc>)
 800fe88:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800fe8c:	f7f5 fd96 	bl	80059bc <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800fe90:	4b27      	ldr	r3, [pc, #156]	; (800ff30 <USBD_LL_Init+0xbc>)
 800fe92:	4a28      	ldr	r2, [pc, #160]	; (800ff34 <USBD_LL_Init+0xc0>)
 800fe94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800fe96:	4b26      	ldr	r3, [pc, #152]	; (800ff30 <USBD_LL_Init+0xbc>)
 800fe98:	2208      	movs	r2, #8
 800fe9a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800fe9c:	4b24      	ldr	r3, [pc, #144]	; (800ff30 <USBD_LL_Init+0xbc>)
 800fe9e:	2202      	movs	r2, #2
 800fea0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fea2:	4b23      	ldr	r3, [pc, #140]	; (800ff30 <USBD_LL_Init+0xbc>)
 800fea4:	2202      	movs	r2, #2
 800fea6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800fea8:	4b21      	ldr	r3, [pc, #132]	; (800ff30 <USBD_LL_Init+0xbc>)
 800feaa:	2200      	movs	r2, #0
 800feac:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800feae:	4b20      	ldr	r3, [pc, #128]	; (800ff30 <USBD_LL_Init+0xbc>)
 800feb0:	2200      	movs	r2, #0
 800feb2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800feb4:	4b1e      	ldr	r3, [pc, #120]	; (800ff30 <USBD_LL_Init+0xbc>)
 800feb6:	2200      	movs	r2, #0
 800feb8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800feba:	4b1d      	ldr	r3, [pc, #116]	; (800ff30 <USBD_LL_Init+0xbc>)
 800febc:	2200      	movs	r2, #0
 800febe:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800fec0:	481b      	ldr	r0, [pc, #108]	; (800ff30 <USBD_LL_Init+0xbc>)
 800fec2:	f7f4 f829 	bl	8003f18 <HAL_PCD_Init>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d001      	beq.n	800fed0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800fecc:	f7f1 fea8 	bl	8001c20 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fed6:	2318      	movs	r3, #24
 800fed8:	2200      	movs	r2, #0
 800feda:	2100      	movs	r1, #0
 800fedc:	f7f5 fce3 	bl	80058a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fee6:	2358      	movs	r3, #88	; 0x58
 800fee8:	2200      	movs	r2, #0
 800feea:	2180      	movs	r1, #128	; 0x80
 800feec:	f7f5 fcdb 	bl	80058a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fef6:	23c0      	movs	r3, #192	; 0xc0
 800fef8:	2200      	movs	r2, #0
 800fefa:	2181      	movs	r1, #129	; 0x81
 800fefc:	f7f5 fcd3 	bl	80058a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ff06:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	2101      	movs	r1, #1
 800ff0e:	f7f5 fcca 	bl	80058a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ff18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	2182      	movs	r1, #130	; 0x82
 800ff20:	f7f5 fcc1 	bl	80058a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ff24:	2300      	movs	r3, #0
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3708      	adds	r7, #8
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	20001b78 	.word	0x20001b78
 800ff34:	40006800 	.word	0x40006800

0800ff38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff40:	2300      	movs	r3, #0
 800ff42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff44:	2300      	movs	r3, #0
 800ff46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7f4 f8b0 	bl	80040b4 <HAL_PCD_Start>
 800ff54:	4603      	mov	r3, r0
 800ff56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff58:	7bfb      	ldrb	r3, [r7, #15]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f000 f97e 	bl	801025c <USBD_Get_USB_Status>
 800ff60:	4603      	mov	r3, r0
 800ff62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3710      	adds	r7, #16
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}

0800ff6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ff6e:	b580      	push	{r7, lr}
 800ff70:	b084      	sub	sp, #16
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	6078      	str	r0, [r7, #4]
 800ff76:	4608      	mov	r0, r1
 800ff78:	4611      	mov	r1, r2
 800ff7a:	461a      	mov	r2, r3
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	70fb      	strb	r3, [r7, #3]
 800ff80:	460b      	mov	r3, r1
 800ff82:	70bb      	strb	r3, [r7, #2]
 800ff84:	4613      	mov	r3, r2
 800ff86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ff96:	78bb      	ldrb	r3, [r7, #2]
 800ff98:	883a      	ldrh	r2, [r7, #0]
 800ff9a:	78f9      	ldrb	r1, [r7, #3]
 800ff9c:	f7f4 f9f7 	bl	800438e <HAL_PCD_EP_Open>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffa4:	7bfb      	ldrb	r3, [r7, #15]
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f000 f958 	bl	801025c <USBD_Get_USB_Status>
 800ffac:	4603      	mov	r3, r0
 800ffae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}

0800ffba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffba:	b580      	push	{r7, lr}
 800ffbc:	b084      	sub	sp, #16
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	6078      	str	r0, [r7, #4]
 800ffc2:	460b      	mov	r3, r1
 800ffc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ffd4:	78fa      	ldrb	r2, [r7, #3]
 800ffd6:	4611      	mov	r1, r2
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7f4 fa35 	bl	8004448 <HAL_PCD_EP_Close>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffe2:	7bfb      	ldrb	r3, [r7, #15]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f000 f939 	bl	801025c <USBD_Get_USB_Status>
 800ffea:	4603      	mov	r3, r0
 800ffec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffee:	7bbb      	ldrb	r3, [r7, #14]
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3710      	adds	r7, #16
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b084      	sub	sp, #16
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	460b      	mov	r3, r1
 8010002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010004:	2300      	movs	r3, #0
 8010006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010008:	2300      	movs	r3, #0
 801000a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010012:	78fa      	ldrb	r2, [r7, #3]
 8010014:	4611      	mov	r1, r2
 8010016:	4618      	mov	r0, r3
 8010018:	f7f4 fade 	bl	80045d8 <HAL_PCD_EP_SetStall>
 801001c:	4603      	mov	r3, r0
 801001e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010020:	7bfb      	ldrb	r3, [r7, #15]
 8010022:	4618      	mov	r0, r3
 8010024:	f000 f91a 	bl	801025c <USBD_Get_USB_Status>
 8010028:	4603      	mov	r3, r0
 801002a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801002c:	7bbb      	ldrb	r3, [r7, #14]
}
 801002e:	4618      	mov	r0, r3
 8010030:	3710      	adds	r7, #16
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}

08010036 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010036:	b580      	push	{r7, lr}
 8010038:	b084      	sub	sp, #16
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
 801003e:	460b      	mov	r3, r1
 8010040:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010042:	2300      	movs	r3, #0
 8010044:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010046:	2300      	movs	r3, #0
 8010048:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010050:	78fa      	ldrb	r2, [r7, #3]
 8010052:	4611      	mov	r1, r2
 8010054:	4618      	mov	r0, r3
 8010056:	f7f4 fb11 	bl	800467c <HAL_PCD_EP_ClrStall>
 801005a:	4603      	mov	r3, r0
 801005c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801005e:	7bfb      	ldrb	r3, [r7, #15]
 8010060:	4618      	mov	r0, r3
 8010062:	f000 f8fb 	bl	801025c <USBD_Get_USB_Status>
 8010066:	4603      	mov	r3, r0
 8010068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801006a:	7bbb      	ldrb	r3, [r7, #14]
}
 801006c:	4618      	mov	r0, r3
 801006e:	3710      	adds	r7, #16
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	460b      	mov	r3, r1
 801007e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010086:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801008c:	2b00      	cmp	r3, #0
 801008e:	da0b      	bge.n	80100a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010090:	78fb      	ldrb	r3, [r7, #3]
 8010092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010096:	68f9      	ldr	r1, [r7, #12]
 8010098:	4613      	mov	r3, r2
 801009a:	009b      	lsls	r3, r3, #2
 801009c:	4413      	add	r3, r2
 801009e:	00db      	lsls	r3, r3, #3
 80100a0:	440b      	add	r3, r1
 80100a2:	3312      	adds	r3, #18
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	e00b      	b.n	80100c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80100a8:	78fb      	ldrb	r3, [r7, #3]
 80100aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80100ae:	68f9      	ldr	r1, [r7, #12]
 80100b0:	4613      	mov	r3, r2
 80100b2:	009b      	lsls	r3, r3, #2
 80100b4:	4413      	add	r3, r2
 80100b6:	00db      	lsls	r3, r3, #3
 80100b8:	440b      	add	r3, r1
 80100ba:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 80100be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3714      	adds	r7, #20
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b084      	sub	sp, #16
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	460b      	mov	r3, r1
 80100d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100d8:	2300      	movs	r3, #0
 80100da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100dc:	2300      	movs	r3, #0
 80100de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80100e6:	78fa      	ldrb	r2, [r7, #3]
 80100e8:	4611      	mov	r1, r2
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7f4 f92b 	bl	8004346 <HAL_PCD_SetAddress>
 80100f0:	4603      	mov	r3, r0
 80100f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100f4:	7bfb      	ldrb	r3, [r7, #15]
 80100f6:	4618      	mov	r0, r3
 80100f8:	f000 f8b0 	bl	801025c <USBD_Get_USB_Status>
 80100fc:	4603      	mov	r3, r0
 80100fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010100:	7bbb      	ldrb	r3, [r7, #14]
}
 8010102:	4618      	mov	r0, r3
 8010104:	3710      	adds	r7, #16
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}

0801010a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801010a:	b580      	push	{r7, lr}
 801010c:	b086      	sub	sp, #24
 801010e:	af00      	add	r7, sp, #0
 8010110:	60f8      	str	r0, [r7, #12]
 8010112:	607a      	str	r2, [r7, #4]
 8010114:	603b      	str	r3, [r7, #0]
 8010116:	460b      	mov	r3, r1
 8010118:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801011a:	2300      	movs	r3, #0
 801011c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801011e:	2300      	movs	r3, #0
 8010120:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010128:	7af9      	ldrb	r1, [r7, #11]
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	687a      	ldr	r2, [r7, #4]
 801012e:	f7f4 fa1c 	bl	800456a <HAL_PCD_EP_Transmit>
 8010132:	4603      	mov	r3, r0
 8010134:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010136:	7dfb      	ldrb	r3, [r7, #23]
 8010138:	4618      	mov	r0, r3
 801013a:	f000 f88f 	bl	801025c <USBD_Get_USB_Status>
 801013e:	4603      	mov	r3, r0
 8010140:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010142:	7dbb      	ldrb	r3, [r7, #22]
}
 8010144:	4618      	mov	r0, r3
 8010146:	3718      	adds	r7, #24
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b086      	sub	sp, #24
 8010150:	af00      	add	r7, sp, #0
 8010152:	60f8      	str	r0, [r7, #12]
 8010154:	607a      	str	r2, [r7, #4]
 8010156:	603b      	str	r3, [r7, #0]
 8010158:	460b      	mov	r3, r1
 801015a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801015c:	2300      	movs	r3, #0
 801015e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010160:	2300      	movs	r3, #0
 8010162:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801016a:	7af9      	ldrb	r1, [r7, #11]
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	687a      	ldr	r2, [r7, #4]
 8010170:	f7f4 f9b2 	bl	80044d8 <HAL_PCD_EP_Receive>
 8010174:	4603      	mov	r3, r0
 8010176:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010178:	7dfb      	ldrb	r3, [r7, #23]
 801017a:	4618      	mov	r0, r3
 801017c:	f000 f86e 	bl	801025c <USBD_Get_USB_Status>
 8010180:	4603      	mov	r3, r0
 8010182:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010184:	7dbb      	ldrb	r3, [r7, #22]
}
 8010186:	4618      	mov	r0, r3
 8010188:	3718      	adds	r7, #24
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}

0801018e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801018e:	b580      	push	{r7, lr}
 8010190:	b082      	sub	sp, #8
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
 8010196:	460b      	mov	r3, r1
 8010198:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80101a0:	78fa      	ldrb	r2, [r7, #3]
 80101a2:	4611      	mov	r1, r2
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7f4 f9c8 	bl	800453a <HAL_PCD_EP_GetRxCount>
 80101aa:	4603      	mov	r3, r0
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3708      	adds	r7, #8
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}

080101b4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b082      	sub	sp, #8
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	460b      	mov	r3, r1
 80101be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80101c0:	78fb      	ldrb	r3, [r7, #3]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d002      	beq.n	80101cc <HAL_PCDEx_LPM_Callback+0x18>
 80101c6:	2b01      	cmp	r3, #1
 80101c8:	d013      	beq.n	80101f2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80101ca:	e023      	b.n	8010214 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	7a5b      	ldrb	r3, [r3, #9]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d007      	beq.n	80101e4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80101d4:	f000 f83c 	bl	8010250 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80101d8:	4b10      	ldr	r3, [pc, #64]	; (801021c <HAL_PCDEx_LPM_Callback+0x68>)
 80101da:	691b      	ldr	r3, [r3, #16]
 80101dc:	4a0f      	ldr	r2, [pc, #60]	; (801021c <HAL_PCDEx_LPM_Callback+0x68>)
 80101de:	f023 0306 	bic.w	r3, r3, #6
 80101e2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fb fc0d 	bl	800ba0a <USBD_LL_Resume>
    break;
 80101f0:	e010      	b.n	8010214 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fb fbea 	bl	800b9d2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	7a5b      	ldrb	r3, [r3, #9]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d005      	beq.n	8010212 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010206:	4b05      	ldr	r3, [pc, #20]	; (801021c <HAL_PCDEx_LPM_Callback+0x68>)
 8010208:	691b      	ldr	r3, [r3, #16]
 801020a:	4a04      	ldr	r2, [pc, #16]	; (801021c <HAL_PCDEx_LPM_Callback+0x68>)
 801020c:	f043 0306 	orr.w	r3, r3, #6
 8010210:	6113      	str	r3, [r2, #16]
    break;
 8010212:	bf00      	nop
}
 8010214:	bf00      	nop
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	e000ed00 	.word	0xe000ed00

08010220 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010228:	4b03      	ldr	r3, [pc, #12]	; (8010238 <USBD_static_malloc+0x18>)
}
 801022a:	4618      	mov	r0, r3
 801022c:	370c      	adds	r7, #12
 801022e:	46bd      	mov	sp, r7
 8010230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010234:	4770      	bx	lr
 8010236:	bf00      	nop
 8010238:	20001e54 	.word	0x20001e54

0801023c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801023c:	b480      	push	{r7}
 801023e:	b083      	sub	sp, #12
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010244:	bf00      	nop
 8010246:	370c      	adds	r7, #12
 8010248:	46bd      	mov	sp, r7
 801024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024e:	4770      	bx	lr

08010250 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010254:	f7f1 fc40 	bl	8001ad8 <SystemClock_Config>
}
 8010258:	bf00      	nop
 801025a:	bd80      	pop	{r7, pc}

0801025c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801025c:	b480      	push	{r7}
 801025e:	b085      	sub	sp, #20
 8010260:	af00      	add	r7, sp, #0
 8010262:	4603      	mov	r3, r0
 8010264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010266:	2300      	movs	r3, #0
 8010268:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801026a:	79fb      	ldrb	r3, [r7, #7]
 801026c:	2b03      	cmp	r3, #3
 801026e:	d817      	bhi.n	80102a0 <USBD_Get_USB_Status+0x44>
 8010270:	a201      	add	r2, pc, #4	; (adr r2, 8010278 <USBD_Get_USB_Status+0x1c>)
 8010272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010276:	bf00      	nop
 8010278:	08010289 	.word	0x08010289
 801027c:	0801028f 	.word	0x0801028f
 8010280:	08010295 	.word	0x08010295
 8010284:	0801029b 	.word	0x0801029b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010288:	2300      	movs	r3, #0
 801028a:	73fb      	strb	r3, [r7, #15]
    break;
 801028c:	e00b      	b.n	80102a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801028e:	2303      	movs	r3, #3
 8010290:	73fb      	strb	r3, [r7, #15]
    break;
 8010292:	e008      	b.n	80102a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010294:	2301      	movs	r3, #1
 8010296:	73fb      	strb	r3, [r7, #15]
    break;
 8010298:	e005      	b.n	80102a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801029a:	2303      	movs	r3, #3
 801029c:	73fb      	strb	r3, [r7, #15]
    break;
 801029e:	e002      	b.n	80102a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80102a0:	2303      	movs	r3, #3
 80102a2:	73fb      	strb	r3, [r7, #15]
    break;
 80102a4:	bf00      	nop
  }
  return usb_status;
 80102a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3714      	adds	r7, #20
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr

080102b4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80102b4:	b480      	push	{r7}
 80102b6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80102b8:	4b05      	ldr	r3, [pc, #20]	; (80102d0 <UTIL_LPM_Init+0x1c>)
 80102ba:	2200      	movs	r2, #0
 80102bc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80102be:	4b05      	ldr	r3, [pc, #20]	; (80102d4 <UTIL_LPM_Init+0x20>)
 80102c0:	2200      	movs	r2, #0
 80102c2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80102c4:	bf00      	nop
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop
 80102d0:	20002074 	.word	0x20002074
 80102d4:	20002078 	.word	0x20002078

080102d8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80102d8:	b480      	push	{r7}
 80102da:	b087      	sub	sp, #28
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	460b      	mov	r3, r1
 80102e2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102e4:	f3ef 8310 	mrs	r3, PRIMASK
 80102e8:	613b      	str	r3, [r7, #16]
  return(result);
 80102ea:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80102ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80102ee:	b672      	cpsid	i
}
 80102f0:	bf00      	nop
  
  switch(state)
 80102f2:	78fb      	ldrb	r3, [r7, #3]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d008      	beq.n	801030a <UTIL_LPM_SetOffMode+0x32>
 80102f8:	2b01      	cmp	r3, #1
 80102fa:	d10e      	bne.n	801031a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80102fc:	4b0d      	ldr	r3, [pc, #52]	; (8010334 <UTIL_LPM_SetOffMode+0x5c>)
 80102fe:	681a      	ldr	r2, [r3, #0]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	4313      	orrs	r3, r2
 8010304:	4a0b      	ldr	r2, [pc, #44]	; (8010334 <UTIL_LPM_SetOffMode+0x5c>)
 8010306:	6013      	str	r3, [r2, #0]
      break;
 8010308:	e008      	b.n	801031c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	43da      	mvns	r2, r3
 801030e:	4b09      	ldr	r3, [pc, #36]	; (8010334 <UTIL_LPM_SetOffMode+0x5c>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	4013      	ands	r3, r2
 8010314:	4a07      	ldr	r2, [pc, #28]	; (8010334 <UTIL_LPM_SetOffMode+0x5c>)
 8010316:	6013      	str	r3, [r2, #0]
      break;
 8010318:	e000      	b.n	801031c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801031a:	bf00      	nop
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f383 8810 	msr	PRIMASK, r3
}
 8010326:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010328:	bf00      	nop
 801032a:	371c      	adds	r7, #28
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr
 8010334:	20002078 	.word	0x20002078

08010338 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b090      	sub	sp, #64	; 0x40
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8010340:	4b73      	ldr	r3, [pc, #460]	; (8010510 <UTIL_SEQ_Run+0x1d8>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8010346:	4b72      	ldr	r3, [pc, #456]	; (8010510 <UTIL_SEQ_Run+0x1d8>)
 8010348:	681a      	ldr	r2, [r3, #0]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	4013      	ands	r3, r2
 801034e:	4a70      	ldr	r2, [pc, #448]	; (8010510 <UTIL_SEQ_Run+0x1d8>)
 8010350:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8010352:	4b70      	ldr	r3, [pc, #448]	; (8010514 <UTIL_SEQ_Run+0x1dc>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8010358:	4b6f      	ldr	r3, [pc, #444]	; (8010518 <UTIL_SEQ_Run+0x1e0>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801035e:	4b6f      	ldr	r3, [pc, #444]	; (801051c <UTIL_SEQ_Run+0x1e4>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8010364:	4b6e      	ldr	r3, [pc, #440]	; (8010520 <UTIL_SEQ_Run+0x1e8>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801036a:	e08d      	b.n	8010488 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801036c:	2300      	movs	r3, #0
 801036e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010370:	e002      	b.n	8010378 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8010372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010374:	3301      	adds	r3, #1
 8010376:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010378:	4a6a      	ldr	r2, [pc, #424]	; (8010524 <UTIL_SEQ_Run+0x1ec>)
 801037a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801037c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010382:	401a      	ands	r2, r3
 8010384:	4b62      	ldr	r3, [pc, #392]	; (8010510 <UTIL_SEQ_Run+0x1d8>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	4013      	ands	r3, r2
 801038a:	2b00      	cmp	r3, #0
 801038c:	d0f1      	beq.n	8010372 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801038e:	4a65      	ldr	r2, [pc, #404]	; (8010524 <UTIL_SEQ_Run+0x1ec>)
 8010390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010392:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010398:	401a      	ands	r2, r3
 801039a:	4b5d      	ldr	r3, [pc, #372]	; (8010510 <UTIL_SEQ_Run+0x1d8>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	4013      	ands	r3, r2
 80103a0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80103a2:	4a60      	ldr	r2, [pc, #384]	; (8010524 <UTIL_SEQ_Run+0x1ec>)
 80103a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103a6:	00db      	lsls	r3, r3, #3
 80103a8:	4413      	add	r3, r2
 80103aa:	685a      	ldr	r2, [r3, #4]
 80103ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ae:	4013      	ands	r3, r2
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d106      	bne.n	80103c2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80103b4:	4a5b      	ldr	r2, [pc, #364]	; (8010524 <UTIL_SEQ_Run+0x1ec>)
 80103b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103b8:	00db      	lsls	r3, r3, #3
 80103ba:	4413      	add	r3, r2
 80103bc:	f04f 32ff 	mov.w	r2, #4294967295
 80103c0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80103c2:	4a58      	ldr	r2, [pc, #352]	; (8010524 <UTIL_SEQ_Run+0x1ec>)
 80103c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103c6:	00db      	lsls	r3, r3, #3
 80103c8:	4413      	add	r3, r2
 80103ca:	685a      	ldr	r2, [r3, #4]
 80103cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ce:	4013      	ands	r3, r2
 80103d0:	4618      	mov	r0, r3
 80103d2:	f000 f9b3 	bl	801073c <SEQ_BitPosition>
 80103d6:	4603      	mov	r3, r0
 80103d8:	461a      	mov	r2, r3
 80103da:	4b53      	ldr	r3, [pc, #332]	; (8010528 <UTIL_SEQ_Run+0x1f0>)
 80103dc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80103de:	4a51      	ldr	r2, [pc, #324]	; (8010524 <UTIL_SEQ_Run+0x1ec>)
 80103e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103e2:	00db      	lsls	r3, r3, #3
 80103e4:	4413      	add	r3, r2
 80103e6:	685a      	ldr	r2, [r3, #4]
 80103e8:	4b4f      	ldr	r3, [pc, #316]	; (8010528 <UTIL_SEQ_Run+0x1f0>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	2101      	movs	r1, #1
 80103ee:	fa01 f303 	lsl.w	r3, r1, r3
 80103f2:	43db      	mvns	r3, r3
 80103f4:	401a      	ands	r2, r3
 80103f6:	494b      	ldr	r1, [pc, #300]	; (8010524 <UTIL_SEQ_Run+0x1ec>)
 80103f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103fa:	00db      	lsls	r3, r3, #3
 80103fc:	440b      	add	r3, r1
 80103fe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010400:	f3ef 8310 	mrs	r3, PRIMASK
 8010404:	61bb      	str	r3, [r7, #24]
  return(result);
 8010406:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010408:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801040a:	b672      	cpsid	i
}
 801040c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801040e:	4b46      	ldr	r3, [pc, #280]	; (8010528 <UTIL_SEQ_Run+0x1f0>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	2201      	movs	r2, #1
 8010414:	fa02 f303 	lsl.w	r3, r2, r3
 8010418:	43da      	mvns	r2, r3
 801041a:	4b3e      	ldr	r3, [pc, #248]	; (8010514 <UTIL_SEQ_Run+0x1dc>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	4013      	ands	r3, r2
 8010420:	4a3c      	ldr	r2, [pc, #240]	; (8010514 <UTIL_SEQ_Run+0x1dc>)
 8010422:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010424:	2302      	movs	r3, #2
 8010426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010428:	e013      	b.n	8010452 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801042a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801042c:	3b01      	subs	r3, #1
 801042e:	4a3d      	ldr	r2, [pc, #244]	; (8010524 <UTIL_SEQ_Run+0x1ec>)
 8010430:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8010434:	4b3c      	ldr	r3, [pc, #240]	; (8010528 <UTIL_SEQ_Run+0x1f0>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2201      	movs	r2, #1
 801043a:	fa02 f303 	lsl.w	r3, r2, r3
 801043e:	43da      	mvns	r2, r3
 8010440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010442:	3b01      	subs	r3, #1
 8010444:	400a      	ands	r2, r1
 8010446:	4937      	ldr	r1, [pc, #220]	; (8010524 <UTIL_SEQ_Run+0x1ec>)
 8010448:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801044c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801044e:	3b01      	subs	r3, #1
 8010450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1e8      	bne.n	801042a <UTIL_SEQ_Run+0xf2>
 8010458:	6a3b      	ldr	r3, [r7, #32]
 801045a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	f383 8810 	msr	PRIMASK, r3
}
 8010462:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8010464:	4b30      	ldr	r3, [pc, #192]	; (8010528 <UTIL_SEQ_Run+0x1f0>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	4a30      	ldr	r2, [pc, #192]	; (801052c <UTIL_SEQ_Run+0x1f4>)
 801046a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801046e:	4798      	blx	r3

    local_taskset = TaskSet;
 8010470:	4b28      	ldr	r3, [pc, #160]	; (8010514 <UTIL_SEQ_Run+0x1dc>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8010476:	4b28      	ldr	r3, [pc, #160]	; (8010518 <UTIL_SEQ_Run+0x1e0>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801047c:	4b27      	ldr	r3, [pc, #156]	; (801051c <UTIL_SEQ_Run+0x1e4>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8010482:	4b27      	ldr	r3, [pc, #156]	; (8010520 <UTIL_SEQ_Run+0x1e8>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801048a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801048c:	401a      	ands	r2, r3
 801048e:	4b20      	ldr	r3, [pc, #128]	; (8010510 <UTIL_SEQ_Run+0x1d8>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	4013      	ands	r3, r2
 8010494:	2b00      	cmp	r3, #0
 8010496:	d005      	beq.n	80104a4 <UTIL_SEQ_Run+0x16c>
 8010498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801049a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049c:	4013      	ands	r3, r2
 801049e:	2b00      	cmp	r3, #0
 80104a0:	f43f af64 	beq.w	801036c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80104a4:	4b20      	ldr	r3, [pc, #128]	; (8010528 <UTIL_SEQ_Run+0x1f0>)
 80104a6:	f04f 32ff 	mov.w	r2, #4294967295
 80104aa:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80104ac:	f000 f938 	bl	8010720 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104b0:	f3ef 8310 	mrs	r3, PRIMASK
 80104b4:	613b      	str	r3, [r7, #16]
  return(result);
 80104b6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80104b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80104ba:	b672      	cpsid	i
}
 80104bc:	bf00      	nop
  local_taskset = TaskSet;
 80104be:	4b15      	ldr	r3, [pc, #84]	; (8010514 <UTIL_SEQ_Run+0x1dc>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80104c4:	4b14      	ldr	r3, [pc, #80]	; (8010518 <UTIL_SEQ_Run+0x1e0>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80104ca:	4b14      	ldr	r3, [pc, #80]	; (801051c <UTIL_SEQ_Run+0x1e4>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80104d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d4:	401a      	ands	r2, r3
 80104d6:	4b0e      	ldr	r3, [pc, #56]	; (8010510 <UTIL_SEQ_Run+0x1d8>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	4013      	ands	r3, r2
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d107      	bne.n	80104f0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80104e0:	4b0f      	ldr	r3, [pc, #60]	; (8010520 <UTIL_SEQ_Run+0x1e8>)
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104e6:	4013      	ands	r3, r2
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d101      	bne.n	80104f0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80104ec:	f7f0 facb 	bl	8000a86 <UTIL_SEQ_Idle>
 80104f0:	69fb      	ldr	r3, [r7, #28]
 80104f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	f383 8810 	msr	PRIMASK, r3
}
 80104fa:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80104fc:	f000 f917 	bl	801072e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8010500:	4a03      	ldr	r2, [pc, #12]	; (8010510 <UTIL_SEQ_Run+0x1d8>)
 8010502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010504:	6013      	str	r3, [r2, #0]

  return;
 8010506:	bf00      	nop
}
 8010508:	3740      	adds	r7, #64	; 0x40
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	2000011c 	.word	0x2000011c
 8010514:	2000207c 	.word	0x2000207c
 8010518:	20002080 	.word	0x20002080
 801051c:	20000118 	.word	0x20000118
 8010520:	20002084 	.word	0x20002084
 8010524:	2000210c 	.word	0x2000210c
 8010528:	20002088 	.word	0x20002088
 801052c:	2000208c 	.word	0x2000208c

08010530 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b088      	sub	sp, #32
 8010534:	af00      	add	r7, sp, #0
 8010536:	60f8      	str	r0, [r7, #12]
 8010538:	60b9      	str	r1, [r7, #8]
 801053a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801053c:	f3ef 8310 	mrs	r3, PRIMASK
 8010540:	617b      	str	r3, [r7, #20]
  return(result);
 8010542:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8010544:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010546:	b672      	cpsid	i
}
 8010548:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801054a:	68f8      	ldr	r0, [r7, #12]
 801054c:	f000 f8f6 	bl	801073c <SEQ_BitPosition>
 8010550:	4603      	mov	r3, r0
 8010552:	4619      	mov	r1, r3
 8010554:	4a06      	ldr	r2, [pc, #24]	; (8010570 <UTIL_SEQ_RegTask+0x40>)
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801055c:	69fb      	ldr	r3, [r7, #28]
 801055e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010560:	69bb      	ldr	r3, [r7, #24]
 8010562:	f383 8810 	msr	PRIMASK, r3
}
 8010566:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8010568:	bf00      	nop
}
 801056a:	3720      	adds	r7, #32
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}
 8010570:	2000208c 	.word	0x2000208c

08010574 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8010574:	b480      	push	{r7}
 8010576:	b087      	sub	sp, #28
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801057e:	f3ef 8310 	mrs	r3, PRIMASK
 8010582:	60fb      	str	r3, [r7, #12]
  return(result);
 8010584:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010586:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010588:	b672      	cpsid	i
}
 801058a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801058c:	4b0d      	ldr	r3, [pc, #52]	; (80105c4 <UTIL_SEQ_SetTask+0x50>)
 801058e:	681a      	ldr	r2, [r3, #0]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	4313      	orrs	r3, r2
 8010594:	4a0b      	ldr	r2, [pc, #44]	; (80105c4 <UTIL_SEQ_SetTask+0x50>)
 8010596:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8010598:	4a0b      	ldr	r2, [pc, #44]	; (80105c8 <UTIL_SEQ_SetTask+0x54>)
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	431a      	orrs	r2, r3
 80105a4:	4908      	ldr	r1, [pc, #32]	; (80105c8 <UTIL_SEQ_SetTask+0x54>)
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	f383 8810 	msr	PRIMASK, r3
}
 80105b6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80105b8:	bf00      	nop
}
 80105ba:	371c      	adds	r7, #28
 80105bc:	46bd      	mov	sp, r7
 80105be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c2:	4770      	bx	lr
 80105c4:	2000207c 	.word	0x2000207c
 80105c8:	2000210c 	.word	0x2000210c

080105cc <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80105cc:	b480      	push	{r7}
 80105ce:	b087      	sub	sp, #28
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105d4:	f3ef 8310 	mrs	r3, PRIMASK
 80105d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80105da:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80105dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80105de:	b672      	cpsid	i
}
 80105e0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	43da      	mvns	r2, r3
 80105e6:	4b08      	ldr	r3, [pc, #32]	; (8010608 <UTIL_SEQ_PauseTask+0x3c>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	4013      	ands	r3, r2
 80105ec:	4a06      	ldr	r2, [pc, #24]	; (8010608 <UTIL_SEQ_PauseTask+0x3c>)
 80105ee:	6013      	str	r3, [r2, #0]
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	f383 8810 	msr	PRIMASK, r3
}
 80105fa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80105fc:	bf00      	nop
}
 80105fe:	371c      	adds	r7, #28
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr
 8010608:	20000118 	.word	0x20000118

0801060c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801060c:	b480      	push	{r7}
 801060e:	b087      	sub	sp, #28
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010614:	f3ef 8310 	mrs	r3, PRIMASK
 8010618:	60fb      	str	r3, [r7, #12]
  return(result);
 801061a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801061c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801061e:	b672      	cpsid	i
}
 8010620:	bf00      	nop

  TaskMask |= TaskId_bm;
 8010622:	4b09      	ldr	r3, [pc, #36]	; (8010648 <UTIL_SEQ_ResumeTask+0x3c>)
 8010624:	681a      	ldr	r2, [r3, #0]
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	4313      	orrs	r3, r2
 801062a:	4a07      	ldr	r2, [pc, #28]	; (8010648 <UTIL_SEQ_ResumeTask+0x3c>)
 801062c:	6013      	str	r3, [r2, #0]
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010632:	693b      	ldr	r3, [r7, #16]
 8010634:	f383 8810 	msr	PRIMASK, r3
}
 8010638:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801063a:	bf00      	nop
}
 801063c:	371c      	adds	r7, #28
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr
 8010646:	bf00      	nop
 8010648:	20000118 	.word	0x20000118

0801064c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801064c:	b480      	push	{r7}
 801064e:	b087      	sub	sp, #28
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010654:	f3ef 8310 	mrs	r3, PRIMASK
 8010658:	60fb      	str	r3, [r7, #12]
  return(result);
 801065a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801065c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801065e:	b672      	cpsid	i
}
 8010660:	bf00      	nop

  EvtSet |= EvtId_bm;
 8010662:	4b09      	ldr	r3, [pc, #36]	; (8010688 <UTIL_SEQ_SetEvt+0x3c>)
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	4313      	orrs	r3, r2
 801066a:	4a07      	ldr	r2, [pc, #28]	; (8010688 <UTIL_SEQ_SetEvt+0x3c>)
 801066c:	6013      	str	r3, [r2, #0]
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	f383 8810 	msr	PRIMASK, r3
}
 8010678:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801067a:	bf00      	nop
}
 801067c:	371c      	adds	r7, #28
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop
 8010688:	20002080 	.word	0x20002080

0801068c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b088      	sub	sp, #32
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8010694:	4b1f      	ldr	r3, [pc, #124]	; (8010714 <UTIL_SEQ_WaitEvt+0x88>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801069a:	4b1e      	ldr	r3, [pc, #120]	; (8010714 <UTIL_SEQ_WaitEvt+0x88>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106a2:	d102      	bne.n	80106aa <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80106a4:	2300      	movs	r3, #0
 80106a6:	61fb      	str	r3, [r7, #28]
 80106a8:	e005      	b.n	80106b6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80106aa:	4b1a      	ldr	r3, [pc, #104]	; (8010714 <UTIL_SEQ_WaitEvt+0x88>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	2201      	movs	r2, #1
 80106b0:	fa02 f303 	lsl.w	r3, r2, r3
 80106b4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80106b6:	4b18      	ldr	r3, [pc, #96]	; (8010718 <UTIL_SEQ_WaitEvt+0x8c>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80106bc:	4a16      	ldr	r2, [pc, #88]	; (8010718 <UTIL_SEQ_WaitEvt+0x8c>)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80106c2:	e003      	b.n	80106cc <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80106c4:	6879      	ldr	r1, [r7, #4]
 80106c6:	69f8      	ldr	r0, [r7, #28]
 80106c8:	f7f0 f9e4 	bl	8000a94 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80106cc:	4b13      	ldr	r3, [pc, #76]	; (801071c <UTIL_SEQ_WaitEvt+0x90>)
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	4013      	ands	r3, r2
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d0f5      	beq.n	80106c4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80106d8:	4a0e      	ldr	r2, [pc, #56]	; (8010714 <UTIL_SEQ_WaitEvt+0x88>)
 80106da:	69bb      	ldr	r3, [r7, #24]
 80106dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106de:	f3ef 8310 	mrs	r3, PRIMASK
 80106e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80106e4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80106e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80106e8:	b672      	cpsid	i
}
 80106ea:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	43da      	mvns	r2, r3
 80106f0:	4b0a      	ldr	r3, [pc, #40]	; (801071c <UTIL_SEQ_WaitEvt+0x90>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	4013      	ands	r3, r2
 80106f6:	4a09      	ldr	r2, [pc, #36]	; (801071c <UTIL_SEQ_WaitEvt+0x90>)
 80106f8:	6013      	str	r3, [r2, #0]
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	f383 8810 	msr	PRIMASK, r3
}
 8010704:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8010706:	4a04      	ldr	r2, [pc, #16]	; (8010718 <UTIL_SEQ_WaitEvt+0x8c>)
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	6013      	str	r3, [r2, #0]
  return;
 801070c:	bf00      	nop
}
 801070e:	3720      	adds	r7, #32
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	20002088 	.word	0x20002088
 8010718:	20002084 	.word	0x20002084
 801071c:	20002080 	.word	0x20002080

08010720 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8010720:	b480      	push	{r7}
 8010722:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010724:	bf00      	nop
}
 8010726:	46bd      	mov	sp, r7
 8010728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072c:	4770      	bx	lr

0801072e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801072e:	b480      	push	{r7}
 8010730:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010732:	bf00      	nop
}
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801073c:	b480      	push	{r7}
 801073e:	b085      	sub	sp, #20
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8010744:	2300      	movs	r3, #0
 8010746:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	0c1b      	lsrs	r3, r3, #16
 8010750:	041b      	lsls	r3, r3, #16
 8010752:	2b00      	cmp	r3, #0
 8010754:	d104      	bne.n	8010760 <SEQ_BitPosition+0x24>
 8010756:	2310      	movs	r3, #16
 8010758:	73fb      	strb	r3, [r7, #15]
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	041b      	lsls	r3, r3, #16
 801075e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010766:	2b00      	cmp	r3, #0
 8010768:	d105      	bne.n	8010776 <SEQ_BitPosition+0x3a>
 801076a:	7bfb      	ldrb	r3, [r7, #15]
 801076c:	3308      	adds	r3, #8
 801076e:	73fb      	strb	r3, [r7, #15]
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	021b      	lsls	r3, r3, #8
 8010774:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801077c:	2b00      	cmp	r3, #0
 801077e:	d105      	bne.n	801078c <SEQ_BitPosition+0x50>
 8010780:	7bfb      	ldrb	r3, [r7, #15]
 8010782:	3304      	adds	r3, #4
 8010784:	73fb      	strb	r3, [r7, #15]
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	011b      	lsls	r3, r3, #4
 801078a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	0f1b      	lsrs	r3, r3, #28
 8010790:	4a07      	ldr	r2, [pc, #28]	; (80107b0 <SEQ_BitPosition+0x74>)
 8010792:	5cd2      	ldrb	r2, [r2, r3]
 8010794:	7bfb      	ldrb	r3, [r7, #15]
 8010796:	4413      	add	r3, r2
 8010798:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801079a:	7bfb      	ldrb	r3, [r7, #15]
 801079c:	f1c3 031f 	rsb	r3, r3, #31
 80107a0:	b2db      	uxtb	r3, r3
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3714      	adds	r7, #20
 80107a6:	46bd      	mov	sp, r7
 80107a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ac:	4770      	bx	lr
 80107ae:	bf00      	nop
 80107b0:	08010b3c 	.word	0x08010b3c

080107b4 <memset>:
 80107b4:	4402      	add	r2, r0
 80107b6:	4603      	mov	r3, r0
 80107b8:	4293      	cmp	r3, r2
 80107ba:	d100      	bne.n	80107be <memset+0xa>
 80107bc:	4770      	bx	lr
 80107be:	f803 1b01 	strb.w	r1, [r3], #1
 80107c2:	e7f9      	b.n	80107b8 <memset+0x4>

080107c4 <__libc_init_array>:
 80107c4:	b570      	push	{r4, r5, r6, lr}
 80107c6:	4d0d      	ldr	r5, [pc, #52]	; (80107fc <__libc_init_array+0x38>)
 80107c8:	4c0d      	ldr	r4, [pc, #52]	; (8010800 <__libc_init_array+0x3c>)
 80107ca:	1b64      	subs	r4, r4, r5
 80107cc:	10a4      	asrs	r4, r4, #2
 80107ce:	2600      	movs	r6, #0
 80107d0:	42a6      	cmp	r6, r4
 80107d2:	d109      	bne.n	80107e8 <__libc_init_array+0x24>
 80107d4:	4d0b      	ldr	r5, [pc, #44]	; (8010804 <__libc_init_array+0x40>)
 80107d6:	4c0c      	ldr	r4, [pc, #48]	; (8010808 <__libc_init_array+0x44>)
 80107d8:	f000 f826 	bl	8010828 <_init>
 80107dc:	1b64      	subs	r4, r4, r5
 80107de:	10a4      	asrs	r4, r4, #2
 80107e0:	2600      	movs	r6, #0
 80107e2:	42a6      	cmp	r6, r4
 80107e4:	d105      	bne.n	80107f2 <__libc_init_array+0x2e>
 80107e6:	bd70      	pop	{r4, r5, r6, pc}
 80107e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80107ec:	4798      	blx	r3
 80107ee:	3601      	adds	r6, #1
 80107f0:	e7ee      	b.n	80107d0 <__libc_init_array+0xc>
 80107f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80107f6:	4798      	blx	r3
 80107f8:	3601      	adds	r6, #1
 80107fa:	e7f2      	b.n	80107e2 <__libc_init_array+0x1e>
 80107fc:	08010b54 	.word	0x08010b54
 8010800:	08010b54 	.word	0x08010b54
 8010804:	08010b54 	.word	0x08010b54
 8010808:	08010b58 	.word	0x08010b58

0801080c <memcpy>:
 801080c:	440a      	add	r2, r1
 801080e:	4291      	cmp	r1, r2
 8010810:	f100 33ff 	add.w	r3, r0, #4294967295
 8010814:	d100      	bne.n	8010818 <memcpy+0xc>
 8010816:	4770      	bx	lr
 8010818:	b510      	push	{r4, lr}
 801081a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801081e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010822:	4291      	cmp	r1, r2
 8010824:	d1f9      	bne.n	801081a <memcpy+0xe>
 8010826:	bd10      	pop	{r4, pc}

08010828 <_init>:
 8010828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801082a:	bf00      	nop
 801082c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801082e:	bc08      	pop	{r3}
 8010830:	469e      	mov	lr, r3
 8010832:	4770      	bx	lr

08010834 <_fini>:
 8010834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010836:	bf00      	nop
 8010838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801083a:	bc08      	pop	{r3}
 801083c:	469e      	mov	lr, r3
 801083e:	4770      	bx	lr
