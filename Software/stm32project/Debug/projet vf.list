
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018e5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002518  08018ff0  08018ff0  00028ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b508  0801b508  000302f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801b508  0801b508  0002b508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b510  0801b510  000302f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b510  0801b510  0002b510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b514  0801b514  0002b514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  0801b518  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020bc  200002f8  0801b80c  000302f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200023b4  0801b80c  000323b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030324  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b6a2  00000000  00000000  00030367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000061b8  00000000  00000000  0005ba09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022b8  00000000  00000000  00061bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001aba  00000000  00000000  00063e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029faf  00000000  00000000  0006593a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fb50  00000000  00000000  0008f8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e89cd  00000000  00000000  000bf439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ab60  00000000  00000000  001a7e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001b2968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f8 	.word	0x200002f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018fd4 	.word	0x08018fd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002fc 	.word	0x200002fc
 80001cc:	08018fd4 	.word	0x08018fd4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001006:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001008:	4a38      	ldr	r2, [pc, #224]	; (80010ec <MX_ADC1_Init+0xfc>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001012:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001026:	2204      	movs	r2, #4
 8001028:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800102c:	2200      	movs	r2, #0
 800102e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001032:	2201      	movs	r2, #1
 8001034:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001038:	2203      	movs	r2, #3
 800103a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001046:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800104e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800105e:	2200      	movs	r2, #0
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106a:	481f      	ldr	r0, [pc, #124]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800106c:	f004 fc2e 	bl	80058cc <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001076:	f000 fcbc 	bl	80019f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_ADC1_Init+0x100>)
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800107e:	2306      	movs	r3, #6
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001082:	2307      	movs	r3, #7
 8001084:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001086:	237f      	movs	r3, #127	; 0x7f
 8001088:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108a:	2304      	movs	r3, #4
 800108c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001098:	f004 ffb0 	bl	8005ffc <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010a2:	f000 fca6 	bl	80019f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_ADC1_Init+0x104>)
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010aa:	230c      	movs	r3, #12
 80010ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_ADC1_Init+0xf8>)
 80010b4:	f004 ffa2 	bl	8005ffc <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80010be:	f000 fc98 	bl	80019f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MX_ADC1_Init+0x108>)
 80010c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010c6:	2312      	movs	r3, #18
 80010c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_ADC1_Init+0xf8>)
 80010d0:	f004 ff94 	bl	8005ffc <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010da:	f000 fc8a 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000314 	.word	0x20000314
 80010ec:	50040000 	.word	0x50040000
 80010f0:	80000001 	.word	0x80000001
 80010f4:	c7520000 	.word	0xc7520000
 80010f8:	25b00200 	.word	0x25b00200

080010fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <HAL_ADC_MspInit+0xdc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d157      	bne.n	80011ce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001124:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b29      	ldr	r3, [pc, #164]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a28      	ldr	r2, [pc, #160]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800114e:	2310      	movs	r3, #16
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001152:	230b      	movs	r3, #11
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f006 f80c 	bl	8007180 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 800116c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001194:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011a2:	480f      	ldr	r0, [pc, #60]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011a4:	f005 fd6a 	bl	8006c7c <HAL_DMA_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80011ae:	f000 fc20 	bl	80019f2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2012      	movs	r0, #18
 80011c4:	f005 fd23 	bl	8006c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80011c8:	2012      	movs	r0, #18
 80011ca:	f005 fd3c 	bl	8006c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	50040000 	.word	0x50040000
 80011dc:	40021000 	.word	0x40021000
 80011e0:	20000378 	.word	0x20000378
 80011e4:	40020008 	.word	0x40020008

080011e8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80011e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a54      	ldr	r2, [pc, #336]	; (8001348 <HAL_ADC_ConvCpltCallback+0x160>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	f040 8091 	bne.w	8001320 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 80011fe:	4b53      	ldr	r3, [pc, #332]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f98e 	bl	8000524 <__aeabi_i2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	a14a      	add	r1, pc, #296	; (adr r1, 8001338 <HAL_ADC_ConvCpltCallback+0x150>)
 800120e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001212:	f7ff fb1b 	bl	800084c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fce3 	bl	8000be8 <__aeabi_d2f>
 8001222:	4603      	mov	r3, r0
 8001224:	4a4a      	ldr	r2, [pc, #296]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 8001226:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001228:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_ADC_ConvCpltCallback+0x16c>)
 800122a:	ed93 7a00 	vldr	s14, [r3]
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <HAL_ADC_ConvCpltCallback+0x170>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001238:	ee17 0a90 	vmov	r0, s15
 800123c:	f7ff f984 	bl	8000548 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	f04f 0000 	mov.w	r0, #0
 8001248:	4944      	ldr	r1, [pc, #272]	; (800135c <HAL_ADC_ConvCpltCallback+0x174>)
 800124a:	f7ff faff 	bl	800084c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4690      	mov	r8, r2
 8001254:	4699      	mov	r9, r3
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001258:	885b      	ldrh	r3, [r3, #2]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f962 	bl	8000524 <__aeabi_i2d>
 8001260:	4604      	mov	r4, r0
 8001262:	460d      	mov	r5, r1
 8001264:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f96d 	bl	8000548 <__aeabi_f2d>
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <HAL_ADC_ConvCpltCallback+0x178>)
 8001274:	f7ff faea 	bl	800084c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f9ba 	bl	80005f8 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4614      	mov	r4, r2
 800128a:	461d      	mov	r5, r3
 800128c:	4b32      	ldr	r3, [pc, #200]	; (8001358 <HAL_ADC_ConvCpltCallback+0x170>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f959 	bl	8000548 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4620      	mov	r0, r4
 800129c:	4629      	mov	r1, r5
 800129e:	f7fe fff3 	bl	8000288 <__aeabi_dsub>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4640      	mov	r0, r8
 80012a8:	4649      	mov	r1, r9
 80012aa:	f7ff f9a5 	bl	80005f8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc97 	bl	8000be8 <__aeabi_d2f>
 80012ba:	ee07 0a10 	vmov	s14, r0
 80012be:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80012c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_ADC_ConvCpltCallback+0x17c>)
 80012c8:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 80012ce:	889b      	ldrh	r3, [r3, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f927 	bl	8000524 <__aeabi_i2d>
 80012d6:	a31a      	add	r3, pc, #104	; (adr r3, 8001340 <HAL_ADC_ConvCpltCallback+0x158>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff fab6 	bl	800084c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	f7fe ffce 	bl	800028c <__adddf3>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f923 	bl	8000548 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4620      	mov	r0, r4
 8001308:	4629      	mov	r1, r5
 800130a:	f7ff f975 	bl	80005f8 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fc67 	bl	8000be8 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_ADC_ConvCpltCallback+0x180>)
 800131e:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001320:	2203      	movs	r2, #3
 8001322:	490a      	ldr	r1, [pc, #40]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001324:	4811      	ldr	r0, [pc, #68]	; (800136c <HAL_ADC_ConvCpltCallback+0x184>)
 8001326:	f004 fc13 	bl	8005b50 <HAL_ADC_Start_DMA>



}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001334:	f3af 8000 	nop.w
 8001338:	d70a3d70 	.word	0xd70a3d70
 800133c:	40b36323 	.word	0x40b36323
 8001340:	00000000 	.word	0x00000000
 8001344:	40affe00 	.word	0x40affe00
 8001348:	50040000 	.word	0x50040000
 800134c:	20000720 	.word	0x20000720
 8001350:	2000072c 	.word	0x2000072c
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004
 800135c:	40590000 	.word	0x40590000
 8001360:	40080000 	.word	0x40080000
 8001364:	20000728 	.word	0x20000728
 8001368:	20000730 	.word	0x20000730
 800136c:	20000314 	.word	0x20000314

08001370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_DMA_Init+0x60>)
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <MX_DMA_Init+0x60>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6493      	str	r3, [r2, #72]	; 0x48
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_DMA_Init+0x60>)
 8001384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_DMA_Init+0x60>)
 8001390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001392:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <MX_DMA_Init+0x60>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6493      	str	r3, [r2, #72]	; 0x48
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <MX_DMA_Init+0x60>)
 800139c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	200b      	movs	r0, #11
 80013ac:	f005 fc2f 	bl	8006c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b0:	200b      	movs	r0, #11
 80013b2:	f005 fc48 	bl	8006c46 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2045      	movs	r0, #69	; 0x45
 80013bc:	f005 fc27 	bl	8006c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80013c0:	2045      	movs	r0, #69	; 0x45
 80013c2:	f005 fc40 	bl	8006c46 <HAL_NVIC_EnableIRQ>

}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000

080013d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <MX_GPIO_Init+0xf8>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a37      	ldr	r2, [pc, #220]	; (80014cc <MX_GPIO_Init+0xf8>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <MX_GPIO_Init+0xf8>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4b32      	ldr	r3, [pc, #200]	; (80014cc <MX_GPIO_Init+0xf8>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a31      	ldr	r2, [pc, #196]	; (80014cc <MX_GPIO_Init+0xf8>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <MX_GPIO_Init+0xf8>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2102      	movs	r1, #2
 800141e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001422:	f006 f817 	bl	8007454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2101      	movs	r1, #1
 800142a:	4829      	ldr	r0, [pc, #164]	; (80014d0 <MX_GPIO_Init+0xfc>)
 800142c:	f006 f812 	bl	8007454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001430:	2302      	movs	r3, #2
 8001432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144a:	f005 fe99 	bl	8007180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800144e:	2301      	movs	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4619      	mov	r1, r3
 8001464:	481a      	ldr	r0, [pc, #104]	; (80014d0 <MX_GPIO_Init+0xfc>)
 8001466:	f005 fe8b 	bl	8007180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800146a:	2302      	movs	r3, #2
 800146c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800146e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	4814      	ldr	r0, [pc, #80]	; (80014d0 <MX_GPIO_Init+0xfc>)
 8001480:	f005 fe7e 	bl	8007180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800148a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800148e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149e:	f005 fe6f 	bl	8007180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2101      	movs	r1, #1
 80014a6:	2007      	movs	r0, #7
 80014a8:	f005 fbb1 	bl	8006c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014ac:	2007      	movs	r0, #7
 80014ae:	f005 fbca 	bl	8006c46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2101      	movs	r1, #1
 80014b6:	2017      	movs	r0, #23
 80014b8:	f005 fba9 	bl	8006c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014bc:	2017      	movs	r0, #23
 80014be:	f005 fbc2 	bl	8006c46 <HAL_NVIC_EnableIRQ>

}
 80014c2:	bf00      	nop
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	48000400 	.word	0x48000400

080014d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <MX_I2C1_Init+0x74>)
 80014da:	4a1c      	ldr	r2, [pc, #112]	; (800154c <MX_I2C1_Init+0x78>)
 80014dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MX_I2C1_Init+0x74>)
 80014e0:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <MX_I2C1_Init+0x7c>)
 80014e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <MX_I2C1_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <MX_I2C1_Init+0x74>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_I2C1_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_I2C1_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_I2C1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_I2C1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_I2C1_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800150e:	480e      	ldr	r0, [pc, #56]	; (8001548 <MX_I2C1_Init+0x74>)
 8001510:	f005 ffd0 	bl	80074b4 <HAL_I2C_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800151a:	f000 fa6a 	bl	80019f2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800151e:	2100      	movs	r1, #0
 8001520:	4809      	ldr	r0, [pc, #36]	; (8001548 <MX_I2C1_Init+0x74>)
 8001522:	f006 fbdb 	bl	8007cdc <HAL_I2CEx_ConfigAnalogFilter>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800152c:	f000 fa61 	bl	80019f2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001530:	2100      	movs	r1, #0
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_I2C1_Init+0x74>)
 8001534:	f006 fc1d 	bl	8007d72 <HAL_I2CEx_ConfigDigitalFilter>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800153e:	f000 fa58 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200003c0 	.word	0x200003c0
 800154c:	40005400 	.word	0x40005400
 8001550:	00202538 	.word	0x00202538

08001554 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <MX_I2C3_Init+0x7c>)
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <MX_I2C3_Init+0x80>)
 800155c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100618;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001560:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <MX_I2C3_Init+0x84>)
 8001562:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_I2C3_Init+0x7c>)
 800156c:	2201      	movs	r2, #1
 800156e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_I2C3_Init+0x7c>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001584:	2200      	movs	r2, #0
 8001586:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_I2C3_Init+0x7c>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800158e:	4810      	ldr	r0, [pc, #64]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001590:	f005 ff90 	bl	80074b4 <HAL_I2C_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800159a:	f000 fa2a 	bl	80019f2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800159e:	2100      	movs	r1, #0
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <MX_I2C3_Init+0x7c>)
 80015a2:	f006 fb9b 	bl	8007cdc <HAL_I2CEx_ConfigAnalogFilter>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80015ac:	f000 fa21 	bl	80019f2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015b0:	2100      	movs	r1, #0
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <MX_I2C3_Init+0x7c>)
 80015b4:	f006 fbdd 	bl	8007d72 <HAL_I2CEx_ConfigDigitalFilter>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015be:	f000 fa18 	bl	80019f2 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80015c2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80015c6:	f006 fc21 	bl	8007e0c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000414 	.word	0x20000414
 80015d4:	40005c00 	.word	0x40005c00
 80015d8:	00100618 	.word	0x00100618

080015dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0a2      	sub	sp, #136	; 0x88
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f4:	f107 0320 	add.w	r3, r7, #32
 80015f8:	2254      	movs	r2, #84	; 0x54
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f013 fdb8 	bl	8015172 <memset>
  if(i2cHandle->Instance==I2C1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a50      	ldr	r2, [pc, #320]	; (8001748 <HAL_I2C_MspInit+0x16c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d13a      	bne.n	8001682 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800160c:	2340      	movs	r3, #64	; 0x40
 800160e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001610:	2300      	movs	r3, #0
 8001612:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	4618      	mov	r0, r3
 800161a:	f009 f841 	bl	800a6a0 <HAL_RCCEx_PeriphCLKConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001624:	f000 f9e5 	bl	80019f2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b48      	ldr	r3, [pc, #288]	; (800174c <HAL_I2C_MspInit+0x170>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	4a47      	ldr	r2, [pc, #284]	; (800174c <HAL_I2C_MspInit+0x170>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001634:	4b45      	ldr	r3, [pc, #276]	; (800174c <HAL_I2C_MspInit+0x170>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001640:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001644:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001646:	2312      	movs	r3, #18
 8001648:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001654:	2304      	movs	r3, #4
 8001656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800165e:	4619      	mov	r1, r3
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f005 fd8c 	bl	8007180 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001668:	4b38      	ldr	r3, [pc, #224]	; (800174c <HAL_I2C_MspInit+0x170>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	4a37      	ldr	r2, [pc, #220]	; (800174c <HAL_I2C_MspInit+0x170>)
 800166e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001672:	6593      	str	r3, [r2, #88]	; 0x58
 8001674:	4b35      	ldr	r3, [pc, #212]	; (800174c <HAL_I2C_MspInit+0x170>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001680:	e05d      	b.n	800173e <HAL_I2C_MspInit+0x162>
  else if(i2cHandle->Instance==I2C3)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a32      	ldr	r2, [pc, #200]	; (8001750 <HAL_I2C_MspInit+0x174>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d158      	bne.n	800173e <HAL_I2C_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800168c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001690:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8001692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001696:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001698:	f107 0320 	add.w	r3, r7, #32
 800169c:	4618      	mov	r0, r3
 800169e:	f008 ffff 	bl	800a6a0 <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80016a8:	f000 f9a3 	bl	80019f2 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a26      	ldr	r2, [pc, #152]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	4a20      	ldr	r2, [pc, #128]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e0:	2312      	movs	r3, #18
 80016e2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016ee:	2304      	movs	r3, #4
 80016f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fe:	f005 fd3f 	bl	8007180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001702:	2310      	movs	r3, #16
 8001704:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001706:	2312      	movs	r3, #18
 8001708:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001714:	2304      	movs	r3, #4
 8001716:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800171e:	4619      	mov	r1, r3
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <HAL_I2C_MspInit+0x178>)
 8001722:	f005 fd2d 	bl	8007180 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_I2C_MspInit+0x170>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_I2C_MspInit+0x170>)
 800172c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001730:	6593      	str	r3, [r2, #88]	; 0x58
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_I2C_MspInit+0x170>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
}
 800173e:	bf00      	nop
 8001740:	3788      	adds	r7, #136	; 0x88
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40005400 	.word	0x40005400
 800174c:	40021000 	.word	0x40021000
 8001750:	40005c00 	.word	0x40005c00
 8001754:	48000400 	.word	0x48000400

08001758 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_8){
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001768:	d104      	bne.n	8001774 <HAL_GPIO_EXTI_Callback+0x1c>
//		ssd1306_SetCursor(33, 44);
//		ssd1306_WriteString("btna", Font_6x8, White);
//		ssd1306_UpdateScreen();
		BTN_A++;//sert à reconnaitre lorsque le bouto na est appuyer, cette variable est mise à 1 par un e interruption.
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_GPIO_EXTI_Callback+0x38>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_GPIO_EXTI_Callback+0x38>)
 8001772:	6013      	str	r3, [r2, #0]


	}
	if(GPIO_Pin==GPIO_PIN_1){
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d104      	bne.n	8001784 <HAL_GPIO_EXTI_Callback+0x2c>
		//ssd1306_SetCursor(33, 44);
		//ssd1306_WriteString("btnb", Font_6x8, White);
		//ssd1306_UpdateScreen();
		BTN_B++;//de meme pour le bouton b
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_GPIO_EXTI_Callback+0x3c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001782:	6013      	str	r3, [r2, #0]

	}
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	200006f0 	.word	0x200006f0
 8001794:	200006f4 	.word	0x200006f4

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179e:	f003 fe22 	bl	80053e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a2:	f000 f8a5 	bl	80018f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80017a6:	f000 f8f6 	bl	8001996 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017aa:	f7ff fe13 	bl	80013d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017ae:	f7ff fddf 	bl	8001370 <MX_DMA_Init>
  MX_I2C3_Init();
 80017b2:	f7ff fecf 	bl	8001554 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80017b6:	f003 fc53 	bl	8005060 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80017ba:	f7ff fc19 	bl	8000ff0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80017be:	f003 fbe3 	bl	8004f88 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80017c2:	f010 ffa7 	bl	8012714 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80017c6:	f7ff fe85 	bl	80014d4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80017ca:	f003 fc75 	bl	80050b8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80017ce:	f000 fcdd 	bl	800218c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



	ssd1306_Init();
 80017d2:	f000 ff51 	bl	8002678 <ssd1306_Init>

	HAL_Delay(100);
 80017d6:	2064      	movs	r0, #100	; 0x64
 80017d8:	f003 fe7a 	bl	80054d0 <HAL_Delay>
	ssd1306_Fill(Black);
 80017dc:	2000      	movs	r0, #0
 80017de:	f000 ffb5 	bl	800274c <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);
 80017e2:	2301      	movs	r3, #1
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	2340      	movs	r3, #64	; 0x40
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2340      	movs	r3, #64	; 0x40
 80017ec:	4a2f      	ldr	r2, [pc, #188]	; (80018ac <main+0x114>)
 80017ee:	2120      	movs	r1, #32
 80017f0:	2020      	movs	r0, #32
 80017f2:	f001 fa7d 	bl	8002cf0 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80017f6:	f000 ffc1 	bl	800277c <ssd1306_UpdateScreen>

	HAL_Delay(500);
 80017fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017fe:	f003 fe67 	bl	80054d0 <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001802:	2203      	movs	r2, #3
 8001804:	492a      	ldr	r1, [pc, #168]	; (80018b0 <main+0x118>)
 8001806:	482b      	ldr	r0, [pc, #172]	; (80018b4 <main+0x11c>)
 8001808:	f004 f9a2 	bl	8005b50 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 800180c:	482a      	ldr	r0, [pc, #168]	; (80018b8 <main+0x120>)
 800180e:	f00a f9b5 	bl	800bb7c <HAL_TIM_Base_Start>

	HAL_UART_Abort(&hlpuart1);
 8001812:	482a      	ldr	r0, [pc, #168]	; (80018bc <main+0x124>)
 8001814:	f00a fcc6 	bl	800c1a4 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8001818:	2240      	movs	r2, #64	; 0x40
 800181a:	4929      	ldr	r1, [pc, #164]	; (80018c0 <main+0x128>)
 800181c:	4827      	ldr	r0, [pc, #156]	; (80018bc <main+0x124>)
 800181e:	f00a fc75 	bl	800c10c <HAL_UART_Receive_DMA>

	memset(flashread,'1',256);
 8001822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001826:	2131      	movs	r1, #49	; 0x31
 8001828:	4826      	ldr	r0, [pc, #152]	; (80018c4 <main+0x12c>)
 800182a:	f013 fca2 	bl	8015172 <memset>
	memset(flashwrite,'\0',256);
 800182e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001832:	2100      	movs	r1, #0
 8001834:	4824      	ldr	r0, [pc, #144]	; (80018c8 <main+0x130>)
 8001836:	f013 fc9c 	bl	8015172 <memset>

	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_0);
 800183a:	2301      	movs	r3, #1
 800183c:	4a23      	ldr	r2, [pc, #140]	; (80018cc <main+0x134>)
 800183e:	4924      	ldr	r1, [pc, #144]	; (80018d0 <main+0x138>)
 8001840:	4824      	ldr	r0, [pc, #144]	; (80018d4 <main+0x13c>)
 8001842:	f010 fe04 	bl	801244e <SPIF_Init>

	ssd1306_Fill(Black);
 8001846:	2000      	movs	r0, #0
 8001848:	f000 ff80 	bl	800274c <ssd1306_Fill>

	getindex();
 800184c:	f000 fde0 	bl	8002410 <getindex>

	snprintf((uint8_t*)str,20, "off=%d",pageoffset);
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <main+0x140>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a21      	ldr	r2, [pc, #132]	; (80018dc <main+0x144>)
 8001856:	2114      	movs	r1, #20
 8001858:	4821      	ldr	r0, [pc, #132]	; (80018e0 <main+0x148>)
 800185a:	f013 fbf3 	bl	8015044 <sniprintf>
	ssd1306_SetCursor(32,40);
 800185e:	2128      	movs	r1, #40	; 0x28
 8001860:	2020      	movs	r0, #32
 8001862:	f001 f8b5 	bl	80029d0 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 8001866:	4a1f      	ldr	r2, [pc, #124]	; (80018e4 <main+0x14c>)
 8001868:	2301      	movs	r3, #1
 800186a:	ca06      	ldmia	r2, {r1, r2}
 800186c:	481c      	ldr	r0, [pc, #112]	; (80018e0 <main+0x148>)
 800186e:	f001 f889 	bl	8002984 <ssd1306_WriteString>
	snprintf((uint8_t*)str,20, "page=%d",pagenumber);
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <main+0x150>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <main+0x154>)
 8001878:	2114      	movs	r1, #20
 800187a:	4819      	ldr	r0, [pc, #100]	; (80018e0 <main+0x148>)
 800187c:	f013 fbe2 	bl	8015044 <sniprintf>
	ssd1306_SetCursor(32,48);
 8001880:	2130      	movs	r1, #48	; 0x30
 8001882:	2020      	movs	r0, #32
 8001884:	f001 f8a4 	bl	80029d0 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 8001888:	4a16      	ldr	r2, [pc, #88]	; (80018e4 <main+0x14c>)
 800188a:	2301      	movs	r3, #1
 800188c:	ca06      	ldmia	r2, {r1, r2}
 800188e:	4814      	ldr	r0, [pc, #80]	; (80018e0 <main+0x148>)
 8001890:	f001 f878 	bl	8002984 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001894:	f000 ff72 	bl	800277c <ssd1306_UpdateScreen>

	HAL_Delay(1000);
 8001898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800189c:	f003 fe18 	bl	80054d0 <HAL_Delay>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		statemachine();
 80018a0:	f001 fc8e 	bl	80031c0 <statemachine>
		ssd1306_UpdateScreen();
 80018a4:	f000 ff6a 	bl	800277c <ssd1306_UpdateScreen>
		statemachine();
 80018a8:	e7fa      	b.n	80018a0 <main+0x108>
 80018aa:	bf00      	nop
 80018ac:	08019290 	.word	0x08019290
 80018b0:	20000720 	.word	0x20000720
 80018b4:	20000314 	.word	0x20000314
 80018b8:	20000ec8 	.word	0x20000ec8
 80018bc:	20000f14 	.word	0x20000f14
 80018c0:	2000046c 	.word	0x2000046c
 80018c4:	20000834 	.word	0x20000834
 80018c8:	20000734 	.word	0x20000734
 80018cc:	48000400 	.word	0x48000400
 80018d0:	200009c8 	.word	0x200009c8
 80018d4:	20000700 	.word	0x20000700
 80018d8:	20000934 	.word	0x20000934
 80018dc:	08018ff0 	.word	0x08018ff0
 80018e0:	20000e48 	.word	0x20000e48
 80018e4:	20000008 	.word	0x20000008
 80018e8:	20000938 	.word	0x20000938
 80018ec:	08018ff8 	.word	0x08018ff8

080018f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b096      	sub	sp, #88	; 0x58
 80018f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	2244      	movs	r2, #68	; 0x44
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f013 fc37 	bl	8015172 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001904:	463b      	mov	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001912:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001916:	f008 f825 	bl	8009964 <HAL_PWREx_ControlVoltageScaling>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001920:	f000 f867 	bl	80019f2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001924:	2310      	movs	r3, #16
 8001926:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001928:	2301      	movs	r3, #1
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001930:	2360      	movs	r3, #96	; 0x60
 8001932:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001934:	2302      	movs	r3, #2
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001938:	2301      	movs	r3, #1
 800193a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800193c:	2301      	movs	r3, #1
 800193e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001940:	2314      	movs	r3, #20
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001944:	2307      	movs	r3, #7
 8001946:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001948:	2302      	movs	r3, #2
 800194a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800194c:	2302      	movs	r3, #2
 800194e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4618      	mov	r0, r3
 8001956:	f008 f86b 	bl	8009a30 <HAL_RCC_OscConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001960:	f000 f847 	bl	80019f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001964:	230f      	movs	r3, #15
 8001966:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001968:	2303      	movs	r3, #3
 800196a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001970:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001974:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800197a:	463b      	mov	r3, r7
 800197c:	2102      	movs	r1, #2
 800197e:	4618      	mov	r0, r3
 8001980:	f008 fc6a 	bl	800a258 <HAL_RCC_ClockConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800198a:	f000 f832 	bl	80019f2 <Error_Handler>
  }
}
 800198e:	bf00      	nop
 8001990:	3758      	adds	r7, #88	; 0x58
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b096      	sub	sp, #88	; 0x58
 800199a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2254      	movs	r2, #84	; 0x54
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f013 fbe5 	bl	8015172 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80019a8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80019ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80019b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019b8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80019ba:	2301      	movs	r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019be:	2301      	movs	r3, #1
 80019c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80019c2:	2318      	movs	r3, #24
 80019c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019c6:	2307      	movs	r3, #7
 80019c8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80019d2:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80019d6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4618      	mov	r0, r3
 80019dc:	f008 fe60 	bl	800a6a0 <HAL_RCCEx_PeriphCLKConfig>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80019e6:	f000 f804 	bl	80019f2 <Error_Handler>
  }
}
 80019ea:	bf00      	nop
 80019ec:	3758      	adds	r7, #88	; 0x58
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f6:	b672      	cpsid	i
}
 80019f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019fa:	e7fe      	b.n	80019fa <Error_Handler+0x8>

080019fc <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7fe fc33 	bl	8000270 <strlen>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d801      	bhi.n	8001a14 <gps_checksum+0x18>
 8001a10:	2300      	movs	r3, #0
 8001a12:	e038      	b.n	8001a86 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7fe fc2b 	bl	8000270 <strlen>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	3b04      	subs	r3, #4
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe fc22 	bl	8000270 <strlen>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	3b03      	subs	r3, #3
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	e00a      	b.n	8001a58 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	4053      	eors	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	3301      	adds	r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7fe fc09 	bl	8000270 <strlen>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	1f5a      	subs	r2, r3, #5
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d8ec      	bhi.n	8001a42 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8001a68:	f107 0308 	add.w	r3, r7, #8
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f012 fba5 	bl	80141c0 <strtol>
 8001a76:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d101      	bne.n	8001a84 <gps_checksum+0x88>
        return 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001a84:	2300      	movs	r3, #0
    }
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b0b7      	sub	sp, #220	; 0xdc
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001aa0:	f107 0320 	add.w	r3, r7, #32
 8001aa4:	2264      	movs	r2, #100	; 0x64
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f013 fb62 	bl	8015172 <memset>
    char *marker = strtok(inputString, ",");
 8001aae:	49c2      	ldr	r1, [pc, #776]	; (8001db8 <nmea_GPGGA+0x328>)
 8001ab0:	6838      	ldr	r0, [r7, #0]
 8001ab2:	f013 fb79 	bl	80151a8 <strtok>
 8001ab6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001aba:	e027      	b.n	8001b0c <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001abc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001ac0:	f7fe fbd6 	bl	8000270 <strlen>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001acc:	1c63      	adds	r3, r4, #1
 8001ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f011 fbba 	bl	801324c <malloc>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	00a3      	lsls	r3, r4, #2
 8001ade:	33d8      	adds	r3, #216	; 0xd8
 8001ae0:	443b      	add	r3, r7
 8001ae2:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001aea:	3b01      	subs	r3, #1
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	33d8      	adds	r3, #216	; 0xd8
 8001af0:	443b      	add	r3, r7
 8001af2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001af6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f013 fc4d 	bl	801539a <strcpy>
        marker = strtok(NULL, ",");
 8001b00:	49ad      	ldr	r1, [pc, #692]	; (8001db8 <nmea_GPGGA+0x328>)
 8001b02:	2000      	movs	r0, #0
 8001b04:	f013 fb50 	bl	80151a8 <strtok>
 8001b08:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001b0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1d3      	bne.n	8001abc <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	332c      	adds	r3, #44	; 0x2c
 8001b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f013 fc34 	bl	801539a <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001b32:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001b36:	2b53      	cmp	r3, #83	; 0x53
 8001b38:	d004      	beq.n	8001b44 <nmea_GPGGA+0xb4>
 8001b3a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001b3e:	2b4e      	cmp	r3, #78	; 0x4e
 8001b40:	f040 8159 	bne.w	8001df6 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b4a:	e010      	b.n	8001b6e <nmea_GPGGA+0xde>
 8001b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b52:	4413      	add	r3, r2
 8001b54:	7819      	ldrb	r1, [r3, #0]
 8001b56:	f107 021c 	add.w	r2, r7, #28
 8001b5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b5e:	4413      	add	r3, r2
 8001b60:	460a      	mov	r2, r1
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	ddea      	ble.n	8001b4c <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b7c:	e011      	b.n	8001ba2 <nmea_GPGGA+0x112>
 8001b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b84:	3302      	adds	r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	7819      	ldrb	r1, [r3, #0]
 8001b8a:	f107 0214 	add.w	r2, r7, #20
 8001b8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b92:	4413      	add	r3, r2
 8001b94:	460a      	mov	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	dde9      	ble.n	8001b7e <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	220a      	movs	r2, #10
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f012 fb04 	bl	80141c0 <strtol>
 8001bb8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f012 fa12 	bl	8013fec <strtof>
 8001bc8:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001bcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bd8:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001bdc:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001dbc <nmea_GPGGA+0x32c>
 8001be0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	ee17 0a90 	vmov	r0, s15
 8001bec:	f7fe fcac 	bl	8000548 <__aeabi_f2d>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001bfe:	e010      	b.n	8001c22 <nmea_GPGGA+0x192>
 8001c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c06:	4413      	add	r3, r2
 8001c08:	7819      	ldrb	r1, [r3, #0]
 8001c0a:	f107 0210 	add.w	r2, r7, #16
 8001c0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c12:	4413      	add	r3, r2
 8001c14:	460a      	mov	r2, r1
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	ddea      	ble.n	8001c00 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c30:	e011      	b.n	8001c56 <nmea_GPGGA+0x1c6>
 8001c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c38:	3303      	adds	r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	7819      	ldrb	r1, [r3, #0]
 8001c3e:	f107 0208 	add.w	r2, r7, #8
 8001c42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c46:	4413      	add	r3, r2
 8001c48:	460a      	mov	r2, r1
 8001c4a:	701a      	strb	r2, [r3, #0]
 8001c4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c50:	3301      	adds	r3, #1
 8001c52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	dde9      	ble.n	8001c32 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	220a      	movs	r2, #10
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f012 faaa 	bl	80141c0 <strtol>
 8001c6c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f012 f9b8 	bl	8013fec <strtof>
 8001c7c:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8c:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001c90:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001dbc <nmea_GPGGA+0x32c>
 8001c94:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9c:	ee17 0a90 	vmov	r0, s15
 8001ca0:	f7fe fc52 	bl	8000548 <__aeabi_f2d>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001cb8:	f7fe ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d176      	bne.n	8001db0 <nmea_GPGGA+0x320>
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001cce:	f7fe fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d16b      	bne.n	8001db0 <nmea_GPGGA+0x320>
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4b38      	ldr	r3, [pc, #224]	; (8001dc0 <nmea_GPGGA+0x330>)
 8001cde:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001ce2:	f7fe fefb 	bl	8000adc <__aeabi_dcmplt>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d061      	beq.n	8001db0 <nmea_GPGGA+0x320>
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <nmea_GPGGA+0x334>)
 8001cf2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001cf6:	f7fe fef1 	bl	8000adc <__aeabi_dcmplt>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d057      	beq.n	8001db0 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001d06:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001d10:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001d18:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001d22:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8001d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f012 f95f 	bl	8013fec <strtof>
 8001d2e:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8001d32:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	d102      	bne.n	8001d46 <nmea_GPGGA+0x2b6>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	e001      	b.n	8001d4a <nmea_GPGGA+0x2ba>
 8001d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8001d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d50:	220a      	movs	r2, #10
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f012 fa33 	bl	80141c0 <strtol>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8001d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d62:	220a      	movs	r2, #10
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f012 fa2a 	bl	80141c0 <strtol>
 8001d6c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8001d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bfcc      	ite	gt
 8001d78:	2301      	movgt	r3, #1
 8001d7a:	2300      	movle	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f012 f92f 	bl	8013fec <strtof>
 8001d8e:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001d92:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001d96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	d102      	bne.n	8001da6 <nmea_GPGGA+0x316>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	e001      	b.n	8001daa <nmea_GPGGA+0x31a>
 8001da6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001dae:	e022      	b.n	8001df6 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001db6:	e016      	b.n	8001de6 <nmea_GPGGA+0x356>
 8001db8:	08019000 	.word	0x08019000
 8001dbc:	42700000 	.word	0x42700000
 8001dc0:	40568000 	.word	0x40568000
 8001dc4:	40668000 	.word	0x40668000
 8001dc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	33d8      	adds	r3, #216	; 0xd8
 8001dd0:	443b      	add	r3, r7
 8001dd2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f011 fa40 	bl	801325c <free>
 8001ddc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001de0:	3301      	adds	r3, #1
 8001de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001de6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001dee:	429a      	cmp	r2, r3
 8001df0:	dbea      	blt.n	8001dc8 <nmea_GPGGA+0x338>
            return 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e019      	b.n	8001e2a <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001dfc:	e00e      	b.n	8001e1c <nmea_GPGGA+0x38c>
 8001dfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	33d8      	adds	r3, #216	; 0xd8
 8001e06:	443b      	add	r3, r7
 8001e08:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f011 fa25 	bl	801325c <free>
 8001e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e16:	3301      	adds	r3, #1
 8001e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbea      	blt.n	8001dfe <nmea_GPGGA+0x36e>
    return 1;
 8001e28:	2301      	movs	r3, #1
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	37dc      	adds	r7, #220	; 0xdc
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd90      	pop	{r4, r7, pc}
 8001e32:	bf00      	nop

08001e34 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b0a3      	sub	sp, #140	; 0x8c
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	2264      	movs	r2, #100	; 0x64
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f013 f990 	bl	8015172 <memset>
    char *marker = strtok(inputString, ",");
 8001e52:	493b      	ldr	r1, [pc, #236]	; (8001f40 <nmea_GPGSA+0x10c>)
 8001e54:	6838      	ldr	r0, [r7, #0]
 8001e56:	f013 f9a7 	bl	80151a8 <strtok>
 8001e5a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001e5e:	e027      	b.n	8001eb0 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001e60:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001e64:	f7fe fa04 	bl	8000270 <strlen>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001e70:	1c63      	adds	r3, r4, #1
 8001e72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e76:	4610      	mov	r0, r2
 8001e78:	f011 f9e8 	bl	801324c <malloc>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	00a3      	lsls	r3, r4, #2
 8001e82:	3388      	adds	r3, #136	; 0x88
 8001e84:	443b      	add	r3, r7
 8001e86:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	3388      	adds	r3, #136	; 0x88
 8001e94:	443b      	add	r3, r7
 8001e96:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001e9a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f013 fa7b 	bl	801539a <strcpy>
        marker = strtok(NULL, ",");
 8001ea4:	4926      	ldr	r1, [pc, #152]	; (8001f40 <nmea_GPGSA+0x10c>)
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f013 f97e 	bl	80151a8 <strtok>
 8001eac:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1d3      	bne.n	8001e60 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	220a      	movs	r2, #10
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f012 f97e 	bl	80141c0 <strtol>
 8001ec4:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	bfcc      	ite	gt
 8001ecc:	2301      	movgt	r3, #1
 8001ece:	2300      	movle	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001edc:	2303      	movs	r3, #3
 8001ede:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ee0:	e00e      	b.n	8001f00 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	3388      	adds	r3, #136	; 0x88
 8001ee8:	443b      	add	r3, r7
 8001eea:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001ef4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001efa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001efc:	3301      	adds	r3, #1
 8001efe:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f02:	2b0e      	cmp	r3, #14
 8001f04:	dded      	ble.n	8001ee2 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	677b      	str	r3, [r7, #116]	; 0x74
 8001f10:	e00b      	b.n	8001f2a <nmea_GPGSA+0xf6>
 8001f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	3388      	adds	r3, #136	; 0x88
 8001f18:	443b      	add	r3, r7
 8001f1a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f011 f99c 	bl	801325c <free>
 8001f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f26:	3301      	adds	r3, #1
 8001f28:	677b      	str	r3, [r7, #116]	; 0x74
 8001f2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f30:	429a      	cmp	r2, r3
 8001f32:	dbee      	blt.n	8001f12 <nmea_GPGSA+0xde>
    return 1;
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	378c      	adds	r7, #140	; 0x8c
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	08019000 	.word	0x08019000
 8001f44:	00000000 	.word	0x00000000

08001f48 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b0a1      	sub	sp, #132	; 0x84
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	2264      	movs	r2, #100	; 0x64
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f013 f907 	bl	8015172 <memset>
    char *marker = strtok(inputString, ",");
 8001f64:	4930      	ldr	r1, [pc, #192]	; (8002028 <nmea_GNRMC+0xe0>)
 8001f66:	6838      	ldr	r0, [r7, #0]
 8001f68:	f013 f91e 	bl	80151a8 <strtok>
 8001f6c:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001f6e:	e021      	b.n	8001fb4 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001f70:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001f72:	f7fe f97d 	bl	8000270 <strlen>
 8001f76:	4603      	mov	r3, r0
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001f7c:	1c63      	adds	r3, r4, #1
 8001f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f80:	4610      	mov	r0, r2
 8001f82:	f011 f963 	bl	801324c <malloc>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	00a3      	lsls	r3, r4, #2
 8001f8c:	3380      	adds	r3, #128	; 0x80
 8001f8e:	443b      	add	r3, r7
 8001f90:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8001f94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f96:	3b01      	subs	r3, #1
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	3380      	adds	r3, #128	; 0x80
 8001f9c:	443b      	add	r3, r7
 8001f9e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001fa2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f013 f9f8 	bl	801539a <strcpy>
        marker = strtok(NULL, ",");
 8001faa:	491f      	ldr	r1, [pc, #124]	; (8002028 <nmea_GNRMC+0xe0>)
 8001fac:	2000      	movs	r0, #0
 8001fae:	f013 f8fb 	bl	80151a8 <strtok>
 8001fb2:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1da      	bne.n	8001f70 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f012 f814 	bl	8013fec <strtof>
 8001fc4:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8001fc8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001fca:	f7fe fabd 	bl	8000548 <__aeabi_f2d>
 8001fce:	a314      	add	r3, pc, #80	; (adr r3, 8002020 <nmea_GNRMC+0xd8>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f7fe fc3a 	bl	800084c <__aeabi_ddiv>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f7fe fe02 	bl	8000be8 <__aeabi_d2f>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8001fea:	2300      	movs	r3, #0
 8001fec:	677b      	str	r3, [r7, #116]	; 0x74
 8001fee:	e00b      	b.n	8002008 <nmea_GNRMC+0xc0>
 8001ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	3380      	adds	r3, #128	; 0x80
 8001ff6:	443b      	add	r3, r7
 8001ff8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f011 f92d 	bl	801325c <free>
 8002002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002004:	3301      	adds	r3, #1
 8002006:	677b      	str	r3, [r7, #116]	; 0x74
 8002008:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800200a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800200c:	429a      	cmp	r2, r3
 800200e:	dbef      	blt.n	8001ff0 <nmea_GNRMC+0xa8>
    return 1;
 8002010:	2301      	movs	r3, #1
}
 8002012:	4618      	mov	r0, r3
 8002014:	3784      	adds	r7, #132	; 0x84
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}
 800201a:	bf00      	nop
 800201c:	f3af 8000 	nop.w
 8002020:	be76c8b4 	.word	0xbe76c8b4
 8002024:	3fff1a9f 	.word	0x3fff1a9f
 8002028:	08019000 	.word	0x08019000

0800202c <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8002036:	223c      	movs	r2, #60	; 0x3c
 8002038:	2100      	movs	r1, #0
 800203a:	484e      	ldr	r0, [pc, #312]	; (8002174 <nmea_parse+0x148>)
 800203c:	f013 f899 	bl	8015172 <memset>
    char * token = strtok(buffer, "$");
 8002040:	494d      	ldr	r1, [pc, #308]	; (8002178 <nmea_parse+0x14c>)
 8002042:	6838      	ldr	r0, [r7, #0]
 8002044:	f013 f8b0 	bl	80151a8 <strtok>
 8002048:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 800204e:	e01d      	b.n	800208c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002050:	6978      	ldr	r0, [r7, #20]
 8002052:	f7fe f90d 	bl	8000270 <strlen>
 8002056:	4603      	mov	r3, r0
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	693c      	ldr	r4, [r7, #16]
 800205c:	1c63      	adds	r3, r4, #1
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	4610      	mov	r0, r2
 8002062:	f011 f8f3 	bl	801324c <malloc>
 8002066:	4603      	mov	r3, r0
 8002068:	461a      	mov	r2, r3
 800206a:	4b42      	ldr	r3, [pc, #264]	; (8002174 <nmea_parse+0x148>)
 800206c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	3b01      	subs	r3, #1
 8002074:	4a3f      	ldr	r2, [pc, #252]	; (8002174 <nmea_parse+0x148>)
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	6979      	ldr	r1, [r7, #20]
 800207c:	4618      	mov	r0, r3
 800207e:	f013 f98c 	bl	801539a <strcpy>
        token = strtok(NULL, "$");
 8002082:	493d      	ldr	r1, [pc, #244]	; (8002178 <nmea_parse+0x14c>)
 8002084:	2000      	movs	r0, #0
 8002086:	f013 f88f 	bl	80151a8 <strtok>
 800208a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1de      	bne.n	8002050 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	e052      	b.n	800213e <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8002098:	4a36      	ldr	r2, [pc, #216]	; (8002174 <nmea_parse+0x148>)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	4936      	ldr	r1, [pc, #216]	; (800217c <nmea_parse+0x150>)
 80020a2:	4618      	mov	r0, r3
 80020a4:	f013 f8dc 	bl	8015260 <strstr>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d044      	beq.n	8002138 <nmea_parse+0x10c>
 80020ae:	4a31      	ldr	r2, [pc, #196]	; (8002174 <nmea_parse+0x148>)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fca0 	bl	80019fc <gps_checksum>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d03a      	beq.n	8002138 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 80020c2:	4a2c      	ldr	r2, [pc, #176]	; (8002174 <nmea_parse+0x148>)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ca:	492d      	ldr	r1, [pc, #180]	; (8002180 <nmea_parse+0x154>)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f013 f8c7 	bl	8015260 <strstr>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 80020d8:	4a26      	ldr	r2, [pc, #152]	; (8002174 <nmea_parse+0x148>)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	4619      	mov	r1, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ff30 	bl	8001f48 <nmea_GNRMC>
 80020e8:	e026      	b.n	8002138 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 80020ea:	4a22      	ldr	r2, [pc, #136]	; (8002174 <nmea_parse+0x148>)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f2:	4924      	ldr	r1, [pc, #144]	; (8002184 <nmea_parse+0x158>)
 80020f4:	4618      	mov	r0, r3
 80020f6:	f013 f8b3 	bl	8015260 <strstr>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8002100:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <nmea_parse+0x148>)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fe92 	bl	8001e34 <nmea_GPGSA>
 8002110:	e012      	b.n	8002138 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8002112:	4a18      	ldr	r2, [pc, #96]	; (8002174 <nmea_parse+0x148>)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	491b      	ldr	r1, [pc, #108]	; (8002188 <nmea_parse+0x15c>)
 800211c:	4618      	mov	r0, r3
 800211e:	f013 f89f 	bl	8015260 <strstr>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8002128:	4a12      	ldr	r2, [pc, #72]	; (8002174 <nmea_parse+0x148>)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fcac 	bl	8001a90 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3301      	adds	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	429a      	cmp	r2, r3
 8002144:	dba8      	blt.n	8002098 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	e009      	b.n	8002160 <nmea_parse+0x134>
 800214c:	4a09      	ldr	r2, [pc, #36]	; (8002174 <nmea_parse+0x148>)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002154:	4618      	mov	r0, r3
 8002156:	f011 f881 	bl	801325c <free>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	3301      	adds	r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	429a      	cmp	r2, r3
 8002166:	dbf1      	blt.n	800214c <nmea_parse+0x120>


}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd90      	pop	{r4, r7, pc}
 8002172:	bf00      	nop
 8002174:	20000958 	.word	0x20000958
 8002178:	08019004 	.word	0x08019004
 800217c:	08019008 	.word	0x08019008
 8002180:	0801900c 	.word	0x0801900c
 8002184:	08019014 	.word	0x08019014
 8002188:	0801901c 	.word	0x0801901c

0800218c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <MX_SPI1_Init+0x74>)
 8002192:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <MX_SPI1_Init+0x78>)
 8002194:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002196:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <MX_SPI1_Init+0x74>)
 8002198:	f44f 7282 	mov.w	r2, #260	; 0x104
 800219c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <MX_SPI1_Init+0x74>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MX_SPI1_Init+0x74>)
 80021a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <MX_SPI1_Init+0x74>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <MX_SPI1_Init+0x74>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_SPI1_Init+0x74>)
 80021ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <MX_SPI1_Init+0x74>)
 80021c2:	2210      	movs	r2, #16
 80021c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <MX_SPI1_Init+0x74>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <MX_SPI1_Init+0x74>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <MX_SPI1_Init+0x74>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <MX_SPI1_Init+0x74>)
 80021da:	2207      	movs	r2, #7
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <MX_SPI1_Init+0x74>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <MX_SPI1_Init+0x74>)
 80021e6:	2208      	movs	r2, #8
 80021e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021ea:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_SPI1_Init+0x74>)
 80021ec:	f008 fd40 	bl	800ac70 <HAL_SPI_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80021f6:	f7ff fbfc 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200009c8 	.word	0x200009c8
 8002204:	40013000 	.word	0x40013000

08002208 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a25      	ldr	r2, [pc, #148]	; (80022bc <HAL_SPI_MspInit+0xb4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d144      	bne.n	80022b4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 800222c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222e:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 8002230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002234:	6613      	str	r3, [r2, #96]	; 0x60
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 8002238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002272:	2360      	movs	r3, #96	; 0x60
 8002274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002282:	2305      	movs	r3, #5
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002290:	f004 ff76 	bl	8007180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002294:	2320      	movs	r3, #32
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a4:	2305      	movs	r3, #5
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4619      	mov	r1, r3
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <HAL_SPI_MspInit+0xbc>)
 80022b0:	f004 ff66 	bl	8007180 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022b4:	bf00      	nop
 80022b6:	3728      	adds	r7, #40	; 0x28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40013000 	.word	0x40013000
 80022c0:	40021000 	.word	0x40021000
 80022c4:	48000400 	.word	0x48000400

080022c8 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 80022c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022cc:	ed2d 8b02 	vpush	{d8}
 80022d0:	b09c      	sub	sp, #112	; 0x70
 80022d2:	af10      	add	r7, sp, #64	; 0x40
 80022d4:	6278      	str	r0, [r7, #36]	; 0x24
 80022d6:	ed87 0a08 	vstr	s0, [r7, #32]
 80022da:	edc7 0a07 	vstr	s1, [r7, #28]
 80022de:	61b9      	str	r1, [r7, #24]
 80022e0:	617a      	str	r2, [r7, #20]
 80022e2:	ed87 1a04 	vstr	s2, [r7, #16]
	int framesize=0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	framesize=snprintf((uint8_t*)buffer,256, "%0.2f,%0.2f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2);
 80022ea:	6a38      	ldr	r0, [r7, #32]
 80022ec:	f7fe f92c 	bl	8000548 <__aeabi_f2d>
 80022f0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80022f4:	69f8      	ldr	r0, [r7, #28]
 80022f6:	f7fe f927 	bl	8000548 <__aeabi_f2d>
 80022fa:	e9c7 0100 	strd	r0, r1, [r7]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f920 	bl	8000548 <__aeabi_f2d>
 8002308:	a320      	add	r3, pc, #128	; (adr r3, 800238c <csvframe+0xc4>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	f7fe f973 	bl	80005f8 <__aeabi_dmul>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	ec43 2b18 	vmov	d8, r2, r3
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f90c 	bl	8000548 <__aeabi_f2d>
 8002330:	4604      	mov	r4, r0
 8002332:	460d      	mov	r5, r1
 8002334:	6938      	ldr	r0, [r7, #16]
 8002336:	f7fe f907 	bl	8000548 <__aeabi_f2d>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	930c      	str	r3, [sp, #48]	; 0x30
 8002346:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800234a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800234e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002352:	ed8d 8b04 	vstr	d8, [sp, #16]
 8002356:	ed97 7b00 	vldr	d7, [r7]
 800235a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800235e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002362:	ed8d 7b00 	vstr	d7, [sp]
 8002366:	4a08      	ldr	r2, [pc, #32]	; (8002388 <csvframe+0xc0>)
 8002368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800236c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800236e:	f012 fe69 	bl	8015044 <sniprintf>
 8002372:	62f8      	str	r0, [r7, #44]	; 0x2c
	return framesize;
 8002374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002376:	4618      	mov	r0, r3
 8002378:	3730      	adds	r7, #48	; 0x30
 800237a:	46bd      	mov	sp, r7
 800237c:	ecbd 8b02 	vpop	{d8}
 8002380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002384:	f3af 8000 	nop.w
 8002388:	08019024 	.word	0x08019024
 800238c:	cccccccd 	.word	0xcccccccd
 8002390:	400ccccc 	.word	0x400ccccc

08002394 <storeindex>:


void storeindex(void){
 8002394:	b580      	push	{r7, lr}
 8002396:	b09c      	sub	sp, #112	; 0x70
 8002398:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 800239a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800239e:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 80023a0:	463b      	mov	r3, r7
 80023a2:	2264      	movs	r2, #100	; 0x64
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f012 fee3 	bl	8015172 <memset>
	snprintf((uint8_t*)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <storeindex+0x6c>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <storeindex+0x70>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4638      	mov	r0, r7
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	4a13      	ldr	r2, [pc, #76]	; (8002408 <storeindex+0x74>)
 80023bc:	2164      	movs	r1, #100	; 0x64
 80023be:	f012 fe41 	bl	8015044 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 80023c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	da00      	bge.n	80023ca <storeindex+0x36>
 80023c8:	330f      	adds	r3, #15
 80023ca:	111b      	asrs	r3, r3, #4
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f8a9 	bl	8000524 <__aeabi_i2d>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f7fe fbbd 	bl	8000b58 <__aeabi_d2iz>
 80023de:	4603      	mov	r3, r0
 80023e0:	4619      	mov	r1, r3
 80023e2:	480a      	ldr	r0, [pc, #40]	; (800240c <storeindex+0x78>)
 80023e4:	f010 f8c9 	bl	801257a <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 80023e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80023ea:	463a      	mov	r2, r7
 80023ec:	2300      	movs	r3, #0
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2364      	movs	r3, #100	; 0x64
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <storeindex+0x78>)
 80023f4:	f010 f944 	bl	8012680 <SPIF_WritePage>

}
 80023f8:	bf00      	nop
 80023fa:	3768      	adds	r7, #104	; 0x68
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000934 	.word	0x20000934
 8002404:	20000938 	.word	0x20000938
 8002408:	08019054 	.word	0x08019054
 800240c:	20000700 	.word	0x20000700

08002410 <getindex>:

void getindex(void){
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8002416:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800241a:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	2300      	movs	r3, #0
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2332      	movs	r3, #50	; 0x32
 8002424:	4a2b      	ldr	r2, [pc, #172]	; (80024d4 <getindex+0xc4>)
 8002426:	482c      	ldr	r0, [pc, #176]	; (80024d8 <getindex+0xc8>)
 8002428:	f010 f948 	bl	80126bc <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 800242c:	220a      	movs	r2, #10
 800242e:	2124      	movs	r1, #36	; 0x24
 8002430:	482a      	ldr	r0, [pc, #168]	; (80024dc <getindex+0xcc>)
 8002432:	f012 fe9e 	bl	8015172 <memset>
	memset(numbuf2,'$',10);
 8002436:	220a      	movs	r2, #10
 8002438:	2124      	movs	r1, #36	; 0x24
 800243a:	4829      	ldr	r0, [pc, #164]	; (80024e0 <getindex+0xd0>)
 800243c:	f012 fe99 	bl	8015172 <memset>
	int cnt=0;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8002444:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <getindex+0xc4>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	2b09      	cmp	r3, #9
 800244e:	dc3a      	bgt.n	80024c6 <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8002450:	e00b      	b.n	800246a <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8002452:	4a20      	ldr	r2, [pc, #128]	; (80024d4 <getindex+0xc4>)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	7819      	ldrb	r1, [r3, #0]
 800245a:	4a20      	ldr	r2, [pc, #128]	; (80024dc <getindex+0xcc>)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	460a      	mov	r2, r1
 8002462:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3301      	adds	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 800246a:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <getindex+0xc4>)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b24      	cmp	r3, #36	; 0x24
 8002474:	d1ed      	bne.n	8002452 <getindex+0x42>
		  }
		  cnt++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3301      	adds	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8002480:	e00e      	b.n	80024a0 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8002482:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <getindex+0xc4>)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	7819      	ldrb	r1, [r3, #0]
 800248a:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <getindex+0xd0>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4413      	add	r3, r2
 8002490:	460a      	mov	r2, r1
 8002492:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	3301      	adds	r3, #1
 8002498:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3301      	adds	r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 80024a0:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <getindex+0xc4>)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4413      	add	r3, r2
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b24      	cmp	r3, #36	; 0x24
 80024aa:	d1ea      	bne.n	8002482 <getindex+0x72>
		  	  }

		 pageoffset=atoi((uint8_t*)numbuf1);
 80024ac:	480b      	ldr	r0, [pc, #44]	; (80024dc <getindex+0xcc>)
 80024ae:	f010 fec9 	bl	8013244 <atoi>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <getindex+0xd4>)
 80024b6:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((uint8_t*)numbuf2);
 80024b8:	4809      	ldr	r0, [pc, #36]	; (80024e0 <getindex+0xd0>)
 80024ba:	f010 fec3 	bl	8013244 <atoi>
 80024be:	4603      	mov	r3, r0
 80024c0:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <getindex+0xd8>)
 80024c2:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 80024c4:	e001      	b.n	80024ca <getindex+0xba>
		storeindex();
 80024c6:	f7ff ff65 	bl	8002394 <storeindex>
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000994 	.word	0x20000994
 80024d8:	20000700 	.word	0x20000700
 80024dc:	20000940 	.word	0x20000940
 80024e0:	2000094c 	.word	0x2000094c
 80024e4:	20000934 	.word	0x20000934
 80024e8:	20000938 	.word	0x20000938

080024ec <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 80024f6:	4b3f      	ldr	r3, [pc, #252]	; (80025f4 <writebuffertoflash+0x108>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3301      	adds	r3, #1
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	2b00      	cmp	r3, #0
 8002502:	d11b      	bne.n	800253c <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8002504:	4b3c      	ldr	r3, [pc, #240]	; (80025f8 <writebuffertoflash+0x10c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d117      	bne.n	800253c <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <writebuffertoflash+0x108>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	da00      	bge.n	8002518 <writebuffertoflash+0x2c>
 8002516:	330f      	adds	r3, #15
 8002518:	111b      	asrs	r3, r3, #4
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe f802 	bl	8000524 <__aeabi_i2d>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f7fe fb16 	bl	8000b58 <__aeabi_d2iz>
 800252c:	4603      	mov	r3, r0
 800252e:	4619      	mov	r1, r3
 8002530:	4832      	ldr	r0, [pc, #200]	; (80025fc <writebuffertoflash+0x110>)
 8002532:	f010 f822 	bl	801257a <SPIF_EraseSector>
		sectoreraseen=1;
 8002536:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <writebuffertoflash+0x10c>)
 8002538:	2201      	movs	r2, #1
 800253a:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 800253c:	4b30      	ldr	r3, [pc, #192]	; (8002600 <writebuffertoflash+0x114>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4413      	add	r3, r2
 8002544:	2bff      	cmp	r3, #255	; 0xff
 8002546:	dc11      	bgt.n	800256c <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8002548:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <writebuffertoflash+0x108>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4619      	mov	r1, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	4a2b      	ldr	r2, [pc, #172]	; (8002600 <writebuffertoflash+0x114>)
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	9200      	str	r2, [sp, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4828      	ldr	r0, [pc, #160]	; (80025fc <writebuffertoflash+0x110>)
 800255a:	f010 f891 	bl	8012680 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 800255e:	4b28      	ldr	r3, [pc, #160]	; (8002600 <writebuffertoflash+0x114>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	4413      	add	r3, r2
 8002566:	4a26      	ldr	r2, [pc, #152]	; (8002600 <writebuffertoflash+0x114>)
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e03c      	b.n	80025e6 <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 800256c:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <writebuffertoflash+0x108>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	4b23      	ldr	r3, [pc, #140]	; (8002600 <writebuffertoflash+0x114>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800257a:	461a      	mov	r2, r3
 800257c:	4b20      	ldr	r3, [pc, #128]	; (8002600 <writebuffertoflash+0x114>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	4613      	mov	r3, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	481d      	ldr	r0, [pc, #116]	; (80025fc <writebuffertoflash+0x110>)
 8002588:	f010 f87a 	bl	8012680 <SPIF_WritePage>
		HAL_Delay(100);
 800258c:	2064      	movs	r0, #100	; 0x64
 800258e:	f002 ff9f 	bl	80054d0 <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <writebuffertoflash+0x108>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	4618      	mov	r0, r3
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <writebuffertoflash+0x114>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80025a2:	461a      	mov	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	1899      	adds	r1, r3, r2
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <writebuffertoflash+0x114>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	2300      	movs	r3, #0
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	460a      	mov	r2, r1
 80025be:	4601      	mov	r1, r0
 80025c0:	480e      	ldr	r0, [pc, #56]	; (80025fc <writebuffertoflash+0x110>)
 80025c2:	f010 f85d 	bl	8012680 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <writebuffertoflash+0x108>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <writebuffertoflash+0x108>)
 80025ce:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <writebuffertoflash+0x10c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <writebuffertoflash+0x114>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <writebuffertoflash+0x114>)
 80025e4:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 80025e6:	f7ff fed5 	bl	8002394 <storeindex>

}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000938 	.word	0x20000938
 80025f8:	2000093c 	.word	0x2000093c
 80025fc:	20000700 	.word	0x20000700
 8002600:	20000934 	.word	0x20000934

08002604 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern char str[20];

void ssd1306_Reset(void) {
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af04      	add	r7, sp, #16
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
 8002622:	9302      	str	r3, [sp, #8]
 8002624:	2301      	movs	r3, #1
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	1dfb      	adds	r3, r7, #7
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	2200      	movs	r2, #0
 8002630:	2178      	movs	r1, #120	; 0x78
 8002632:	4803      	ldr	r0, [pc, #12]	; (8002640 <ssd1306_WriteCommand+0x2c>)
 8002634:	f004 ffda 	bl	80075ec <HAL_I2C_Mem_Write>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000414 	.word	0x20000414

08002644 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af04      	add	r7, sp, #16
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	f04f 32ff 	mov.w	r2, #4294967295
 8002656:	9202      	str	r2, [sp, #8]
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2301      	movs	r3, #1
 8002660:	2240      	movs	r2, #64	; 0x40
 8002662:	2178      	movs	r1, #120	; 0x78
 8002664:	4803      	ldr	r0, [pc, #12]	; (8002674 <ssd1306_WriteData+0x30>)
 8002666:	f004 ffc1 	bl	80075ec <HAL_I2C_Mem_Write>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000414 	.word	0x20000414

08002678 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800267c:	f7ff ffc2 	bl	8002604 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002680:	2064      	movs	r0, #100	; 0x64
 8002682:	f002 ff25 	bl	80054d0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002686:	2000      	movs	r0, #0
 8002688:	f000 fba0 	bl	8002dcc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800268c:	2020      	movs	r0, #32
 800268e:	f7ff ffc1 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002692:	2000      	movs	r0, #0
 8002694:	f7ff ffbe 	bl	8002614 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002698:	20b0      	movs	r0, #176	; 0xb0
 800269a:	f7ff ffbb 	bl	8002614 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800269e:	20c8      	movs	r0, #200	; 0xc8
 80026a0:	f7ff ffb8 	bl	8002614 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7ff ffb5 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80026aa:	2010      	movs	r0, #16
 80026ac:	f7ff ffb2 	bl	8002614 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80026b0:	2040      	movs	r0, #64	; 0x40
 80026b2:	f7ff ffaf 	bl	8002614 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80026b6:	20ff      	movs	r0, #255	; 0xff
 80026b8:	f000 fb75 	bl	8002da6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80026bc:	20a1      	movs	r0, #161	; 0xa1
 80026be:	f7ff ffa9 	bl	8002614 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80026c2:	20a6      	movs	r0, #166	; 0xa6
 80026c4:	f7ff ffa6 	bl	8002614 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80026c8:	20a8      	movs	r0, #168	; 0xa8
 80026ca:	f7ff ffa3 	bl	8002614 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80026ce:	203f      	movs	r0, #63	; 0x3f
 80026d0:	f7ff ffa0 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80026d4:	20a4      	movs	r0, #164	; 0xa4
 80026d6:	f7ff ff9d 	bl	8002614 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80026da:	20d3      	movs	r0, #211	; 0xd3
 80026dc:	f7ff ff9a 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80026e0:	2000      	movs	r0, #0
 80026e2:	f7ff ff97 	bl	8002614 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80026e6:	20d5      	movs	r0, #213	; 0xd5
 80026e8:	f7ff ff94 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80026ec:	20f0      	movs	r0, #240	; 0xf0
 80026ee:	f7ff ff91 	bl	8002614 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80026f2:	20d9      	movs	r0, #217	; 0xd9
 80026f4:	f7ff ff8e 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80026f8:	2022      	movs	r0, #34	; 0x22
 80026fa:	f7ff ff8b 	bl	8002614 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80026fe:	20da      	movs	r0, #218	; 0xda
 8002700:	f7ff ff88 	bl	8002614 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002704:	2012      	movs	r0, #18
 8002706:	f7ff ff85 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800270a:	20db      	movs	r0, #219	; 0xdb
 800270c:	f7ff ff82 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002710:	2020      	movs	r0, #32
 8002712:	f7ff ff7f 	bl	8002614 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002716:	208d      	movs	r0, #141	; 0x8d
 8002718:	f7ff ff7c 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800271c:	2014      	movs	r0, #20
 800271e:	f7ff ff79 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002722:	2001      	movs	r0, #1
 8002724:	f000 fb52 	bl	8002dcc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002728:	2000      	movs	r0, #0
 800272a:	f000 f80f 	bl	800274c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800272e:	f000 f825 	bl	800277c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <ssd1306_Init+0xd0>)
 8002734:	2200      	movs	r2, #0
 8002736:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <ssd1306_Init+0xd0>)
 800273a:	2200      	movs	r2, #0
 800273c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800273e:	4b02      	ldr	r3, [pc, #8]	; (8002748 <ssd1306_Init+0xd0>)
 8002740:	2201      	movs	r2, #1
 8002742:	711a      	strb	r2, [r3, #4]
}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000e2c 	.word	0x20000e2c

0800274c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <ssd1306_Fill+0x14>
 800275c:	2300      	movs	r3, #0
 800275e:	e000      	b.n	8002762 <ssd1306_Fill+0x16>
 8002760:	23ff      	movs	r3, #255	; 0xff
 8002762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002766:	4619      	mov	r1, r3
 8002768:	4803      	ldr	r0, [pc, #12]	; (8002778 <ssd1306_Fill+0x2c>)
 800276a:	f012 fd02 	bl	8015172 <memset>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000a2c 	.word	0x20000a2c

0800277c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002782:	2300      	movs	r3, #0
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	e016      	b.n	80027b6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	3b50      	subs	r3, #80	; 0x50
 800278c:	b2db      	uxtb	r3, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff40 	bl	8002614 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002794:	2000      	movs	r0, #0
 8002796:	f7ff ff3d 	bl	8002614 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800279a:	2010      	movs	r0, #16
 800279c:	f7ff ff3a 	bl	8002614 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	01db      	lsls	r3, r3, #7
 80027a4:	4a08      	ldr	r2, [pc, #32]	; (80027c8 <ssd1306_UpdateScreen+0x4c>)
 80027a6:	4413      	add	r3, r2
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff4a 	bl	8002644 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	3301      	adds	r3, #1
 80027b4:	71fb      	strb	r3, [r7, #7]
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	2b07      	cmp	r3, #7
 80027ba:	d9e5      	bls.n	8002788 <ssd1306_UpdateScreen+0xc>
    }
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000a2c 	.word	0x20000a2c

080027cc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
 80027d6:	460b      	mov	r3, r1
 80027d8:	71bb      	strb	r3, [r7, #6]
 80027da:	4613      	mov	r3, r2
 80027dc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	db3d      	blt.n	8002862 <ssd1306_DrawPixel+0x96>
 80027e6:	79bb      	ldrb	r3, [r7, #6]
 80027e8:	2b3f      	cmp	r3, #63	; 0x3f
 80027ea:	d83a      	bhi.n	8002862 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80027ec:	797b      	ldrb	r3, [r7, #5]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d11a      	bne.n	8002828 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80027f2:	79fa      	ldrb	r2, [r7, #7]
 80027f4:	79bb      	ldrb	r3, [r7, #6]
 80027f6:	08db      	lsrs	r3, r3, #3
 80027f8:	b2d8      	uxtb	r0, r3
 80027fa:	4603      	mov	r3, r0
 80027fc:	01db      	lsls	r3, r3, #7
 80027fe:	4413      	add	r3, r2
 8002800:	4a1b      	ldr	r2, [pc, #108]	; (8002870 <ssd1306_DrawPixel+0xa4>)
 8002802:	5cd3      	ldrb	r3, [r2, r3]
 8002804:	b25a      	sxtb	r2, r3
 8002806:	79bb      	ldrb	r3, [r7, #6]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	b25b      	sxtb	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	b259      	sxtb	r1, r3
 8002818:	79fa      	ldrb	r2, [r7, #7]
 800281a:	4603      	mov	r3, r0
 800281c:	01db      	lsls	r3, r3, #7
 800281e:	4413      	add	r3, r2
 8002820:	b2c9      	uxtb	r1, r1
 8002822:	4a13      	ldr	r2, [pc, #76]	; (8002870 <ssd1306_DrawPixel+0xa4>)
 8002824:	54d1      	strb	r1, [r2, r3]
 8002826:	e01d      	b.n	8002864 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002828:	79fa      	ldrb	r2, [r7, #7]
 800282a:	79bb      	ldrb	r3, [r7, #6]
 800282c:	08db      	lsrs	r3, r3, #3
 800282e:	b2d8      	uxtb	r0, r3
 8002830:	4603      	mov	r3, r0
 8002832:	01db      	lsls	r3, r3, #7
 8002834:	4413      	add	r3, r2
 8002836:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <ssd1306_DrawPixel+0xa4>)
 8002838:	5cd3      	ldrb	r3, [r2, r3]
 800283a:	b25a      	sxtb	r2, r3
 800283c:	79bb      	ldrb	r3, [r7, #6]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	2101      	movs	r1, #1
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	b25b      	sxtb	r3, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	b25b      	sxtb	r3, r3
 800284e:	4013      	ands	r3, r2
 8002850:	b259      	sxtb	r1, r3
 8002852:	79fa      	ldrb	r2, [r7, #7]
 8002854:	4603      	mov	r3, r0
 8002856:	01db      	lsls	r3, r3, #7
 8002858:	4413      	add	r3, r2
 800285a:	b2c9      	uxtb	r1, r1
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <ssd1306_DrawPixel+0xa4>)
 800285e:	54d1      	strb	r1, [r2, r3]
 8002860:	e000      	b.n	8002864 <ssd1306_DrawPixel+0x98>
        return;
 8002862:	bf00      	nop
    }
}
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000a2c 	.word	0x20000a2c

08002874 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	4604      	mov	r4, r0
 800287c:	1d38      	adds	r0, r7, #4
 800287e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002882:	461a      	mov	r2, r3
 8002884:	4623      	mov	r3, r4
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	4613      	mov	r3, r2
 800288a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b1f      	cmp	r3, #31
 8002890:	d902      	bls.n	8002898 <ssd1306_WriteChar+0x24>
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b7e      	cmp	r3, #126	; 0x7e
 8002896:	d901      	bls.n	800289c <ssd1306_WriteChar+0x28>
        return 0;
 8002898:	2300      	movs	r3, #0
 800289a:	e06d      	b.n	8002978 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800289c:	4b38      	ldr	r3, [pc, #224]	; (8002980 <ssd1306_WriteChar+0x10c>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	793b      	ldrb	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	2b80      	cmp	r3, #128	; 0x80
 80028a8:	dc06      	bgt.n	80028b8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80028aa:	4b35      	ldr	r3, [pc, #212]	; (8002980 <ssd1306_WriteChar+0x10c>)
 80028ac:	885b      	ldrh	r3, [r3, #2]
 80028ae:	461a      	mov	r2, r3
 80028b0:	797b      	ldrb	r3, [r7, #5]
 80028b2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	dd01      	ble.n	80028bc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e05d      	b.n	8002978 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	e04c      	b.n	800295c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	3b20      	subs	r3, #32
 80028c8:	7979      	ldrb	r1, [r7, #5]
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4619      	mov	r1, r3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	440b      	add	r3, r1
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	e034      	b.n	800294c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d012      	beq.n	8002918 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80028f2:	4b23      	ldr	r3, [pc, #140]	; (8002980 <ssd1306_WriteChar+0x10c>)
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	b2d8      	uxtb	r0, r3
 8002900:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <ssd1306_WriteChar+0x10c>)
 8002902:	885b      	ldrh	r3, [r3, #2]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	4413      	add	r3, r2
 800290c:	b2db      	uxtb	r3, r3
 800290e:	7bba      	ldrb	r2, [r7, #14]
 8002910:	4619      	mov	r1, r3
 8002912:	f7ff ff5b 	bl	80027cc <ssd1306_DrawPixel>
 8002916:	e016      	b.n	8002946 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002918:	4b19      	ldr	r3, [pc, #100]	; (8002980 <ssd1306_WriteChar+0x10c>)
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	4413      	add	r3, r2
 8002924:	b2d8      	uxtb	r0, r3
 8002926:	4b16      	ldr	r3, [pc, #88]	; (8002980 <ssd1306_WriteChar+0x10c>)
 8002928:	885b      	ldrh	r3, [r3, #2]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4413      	add	r3, r2
 8002932:	b2d9      	uxtb	r1, r3
 8002934:	7bbb      	ldrb	r3, [r7, #14]
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2300      	movne	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	f7ff ff43 	bl	80027cc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	3301      	adds	r3, #1
 800294a:	61bb      	str	r3, [r7, #24]
 800294c:	793b      	ldrb	r3, [r7, #4]
 800294e:	461a      	mov	r2, r3
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4293      	cmp	r3, r2
 8002954:	d3c5      	bcc.n	80028e2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3301      	adds	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	797b      	ldrb	r3, [r7, #5]
 800295e:	461a      	mov	r2, r3
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	4293      	cmp	r3, r2
 8002964:	d3ad      	bcc.n	80028c2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <ssd1306_WriteChar+0x10c>)
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	793b      	ldrb	r3, [r7, #4]
 800296c:	b29b      	uxth	r3, r3
 800296e:	4413      	add	r3, r2
 8002970:	b29a      	uxth	r2, r3
 8002972:	4b03      	ldr	r3, [pc, #12]	; (8002980 <ssd1306_WriteChar+0x10c>)
 8002974:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002976:	7bfb      	ldrb	r3, [r7, #15]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3724      	adds	r7, #36	; 0x24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}
 8002980:	20000e2c 	.word	0x20000e2c

08002984 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	1d38      	adds	r0, r7, #4
 800298e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002992:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002994:	e012      	b.n	80029bc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	7818      	ldrb	r0, [r3, #0]
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	1d3a      	adds	r2, r7, #4
 800299e:	ca06      	ldmia	r2, {r1, r2}
 80029a0:	f7ff ff68 	bl	8002874 <ssd1306_WriteChar>
 80029a4:	4603      	mov	r3, r0
 80029a6:	461a      	mov	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d002      	beq.n	80029b6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	e008      	b.n	80029c8 <ssd1306_WriteString+0x44>
        }
        str++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e8      	bne.n	8002996 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	781b      	ldrb	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	460a      	mov	r2, r1
 80029da:	71fb      	strb	r3, [r7, #7]
 80029dc:	4613      	mov	r3, r2
 80029de:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <ssd1306_SetCursor+0x2c>)
 80029e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80029e8:	79bb      	ldrb	r3, [r7, #6]
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <ssd1306_SetCursor+0x2c>)
 80029ee:	805a      	strh	r2, [r3, #2]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	20000e2c 	.word	0x20000e2c

08002a00 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4604      	mov	r4, r0
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4623      	mov	r3, r4
 8002a10:	71fb      	strb	r3, [r7, #7]
 8002a12:	4603      	mov	r3, r0
 8002a14:	71bb      	strb	r3, [r7, #6]
 8002a16:	460b      	mov	r3, r1
 8002a18:	717b      	strb	r3, [r7, #5]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002a1e:	797a      	ldrb	r2, [r7, #5]
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bfb8      	it	lt
 8002a28:	425b      	neglt	r3, r3
 8002a2a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002a2c:	793a      	ldrb	r2, [r7, #4]
 8002a2e:	79bb      	ldrb	r3, [r7, #6]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bfb8      	it	lt
 8002a36:	425b      	neglt	r3, r3
 8002a38:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002a3a:	79fa      	ldrb	r2, [r7, #7]
 8002a3c:	797b      	ldrb	r3, [r7, #5]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d201      	bcs.n	8002a46 <ssd1306_Line+0x46>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e001      	b.n	8002a4a <ssd1306_Line+0x4a>
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002a4c:	79ba      	ldrb	r2, [r7, #6]
 8002a4e:	793b      	ldrb	r3, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d201      	bcs.n	8002a58 <ssd1306_Line+0x58>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e001      	b.n	8002a5c <ssd1306_Line+0x5c>
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002a66:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002a6a:	7939      	ldrb	r1, [r7, #4]
 8002a6c:	797b      	ldrb	r3, [r7, #5]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff feac 	bl	80027cc <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002a74:	e024      	b.n	8002ac0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002a76:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002a7a:	79b9      	ldrb	r1, [r7, #6]
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fea4 	bl	80027cc <ssd1306_DrawPixel>
        error2 = error * 2;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	425b      	negs	r3, r3
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dd08      	ble.n	8002aa6 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	da08      	bge.n	8002ac0 <ssd1306_Line+0xc0>
            error += deltaX;
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	79bb      	ldrb	r3, [r7, #6]
 8002abc:	4413      	add	r3, r2
 8002abe:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002ac0:	79fa      	ldrb	r2, [r7, #7]
 8002ac2:	797b      	ldrb	r3, [r7, #5]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1d6      	bne.n	8002a76 <ssd1306_Line+0x76>
 8002ac8:	79ba      	ldrb	r2, [r7, #6]
 8002aca:	793b      	ldrb	r3, [r7, #4]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d1d2      	bne.n	8002a76 <ssd1306_Line+0x76>
        }
    }
    return;
 8002ad0:	bf00      	nop
}
 8002ad2:	3724      	adds	r7, #36	; 0x24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd90      	pop	{r4, r7, pc}

08002ad8 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002ad8:	b590      	push	{r4, r7, lr}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4604      	mov	r4, r0
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	71fb      	strb	r3, [r7, #7]
 8002aea:	4603      	mov	r3, r0
 8002aec:	71bb      	strb	r3, [r7, #6]
 8002aee:	460b      	mov	r3, r1
 8002af0:	717b      	strb	r3, [r7, #5]
 8002af2:	4613      	mov	r3, r2
 8002af4:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8002af6:	797b      	ldrb	r3, [r7, #5]
 8002af8:	425b      	negs	r3, r3
 8002afa:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002b00:	797b      	ldrb	r3, [r7, #5]
 8002b02:	f1c3 0301 	rsb	r3, r3, #1
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	db65      	blt.n	8002bde <ssd1306_DrawCircle+0x106>
 8002b12:	79bb      	ldrb	r3, [r7, #6]
 8002b14:	2b3f      	cmp	r3, #63	; 0x3f
 8002b16:	d862      	bhi.n	8002bde <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	79fa      	ldrb	r2, [r7, #7]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	b2d8      	uxtb	r0, r3
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	79bb      	ldrb	r3, [r7, #6]
 8002b28:	4413      	add	r3, r2
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	793a      	ldrb	r2, [r7, #4]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f7ff fe4c 	bl	80027cc <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	b2d8      	uxtb	r0, r3
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	79bb      	ldrb	r3, [r7, #6]
 8002b44:	4413      	add	r3, r2
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	793a      	ldrb	r2, [r7, #4]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f7ff fe3e 	bl	80027cc <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4413      	add	r3, r2
 8002b58:	b2d8      	uxtb	r0, r3
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	79ba      	ldrb	r2, [r7, #6]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	793a      	ldrb	r2, [r7, #4]
 8002b66:	4619      	mov	r1, r3
 8002b68:	f7ff fe30 	bl	80027cc <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	79fa      	ldrb	r2, [r7, #7]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	b2d8      	uxtb	r0, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	79ba      	ldrb	r2, [r7, #6]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	793a      	ldrb	r2, [r7, #4]
 8002b82:	4619      	mov	r1, r3
 8002b84:	f7ff fe22 	bl	80027cc <ssd1306_DrawPixel>
        e2 = err;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	dc13      	bgt.n	8002bbc <ssd1306_DrawCircle+0xe4>
            y++;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	3301      	adds	r3, #1
 8002b98:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	425b      	negs	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d105      	bne.n	8002bbc <ssd1306_DrawCircle+0xe4>
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	dc01      	bgt.n	8002bbc <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	dd08      	ble.n	8002bd6 <ssd1306_DrawCircle+0xfe>
            x++;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	3301      	adds	r3, #1
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	dd9d      	ble.n	8002b18 <ssd1306_DrawCircle+0x40>

    return;
 8002bdc:	e000      	b.n	8002be0 <ssd1306_DrawCircle+0x108>
        return;
 8002bde:	bf00      	nop
}
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd90      	pop	{r4, r7, pc}

08002be6 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002be6:	b590      	push	{r4, r7, lr}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	4604      	mov	r4, r0
 8002bee:	4608      	mov	r0, r1
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	71fb      	strb	r3, [r7, #7]
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	71bb      	strb	r3, [r7, #6]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	717b      	strb	r3, [r7, #5]
 8002c00:	4613      	mov	r3, r2
 8002c02:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002c04:	79bc      	ldrb	r4, [r7, #6]
 8002c06:	797a      	ldrb	r2, [r7, #5]
 8002c08:	79b9      	ldrb	r1, [r7, #6]
 8002c0a:	79f8      	ldrb	r0, [r7, #7]
 8002c0c:	7e3b      	ldrb	r3, [r7, #24]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4623      	mov	r3, r4
 8002c12:	f7ff fef5 	bl	8002a00 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002c16:	793c      	ldrb	r4, [r7, #4]
 8002c18:	797a      	ldrb	r2, [r7, #5]
 8002c1a:	79b9      	ldrb	r1, [r7, #6]
 8002c1c:	7978      	ldrb	r0, [r7, #5]
 8002c1e:	7e3b      	ldrb	r3, [r7, #24]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	4623      	mov	r3, r4
 8002c24:	f7ff feec 	bl	8002a00 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002c28:	793c      	ldrb	r4, [r7, #4]
 8002c2a:	79fa      	ldrb	r2, [r7, #7]
 8002c2c:	7939      	ldrb	r1, [r7, #4]
 8002c2e:	7978      	ldrb	r0, [r7, #5]
 8002c30:	7e3b      	ldrb	r3, [r7, #24]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	4623      	mov	r3, r4
 8002c36:	f7ff fee3 	bl	8002a00 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002c3a:	79bc      	ldrb	r4, [r7, #6]
 8002c3c:	79fa      	ldrb	r2, [r7, #7]
 8002c3e:	7939      	ldrb	r1, [r7, #4]
 8002c40:	79f8      	ldrb	r0, [r7, #7]
 8002c42:	7e3b      	ldrb	r3, [r7, #24]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	4623      	mov	r3, r4
 8002c48:	f7ff feda 	bl	8002a00 <ssd1306_Line>

    return;
 8002c4c:	bf00      	nop
}
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd90      	pop	{r4, r7, pc}

08002c54 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	4611      	mov	r1, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4623      	mov	r3, r4
 8002c64:	71fb      	strb	r3, [r7, #7]
 8002c66:	4603      	mov	r3, r0
 8002c68:	71bb      	strb	r3, [r7, #6]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	717b      	strb	r3, [r7, #5]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002c72:	79fa      	ldrb	r2, [r7, #7]
 8002c74:	797b      	ldrb	r3, [r7, #5]
 8002c76:	4293      	cmp	r3, r2
 8002c78:	bf28      	it	cs
 8002c7a:	4613      	movcs	r3, r2
 8002c7c:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002c7e:	797a      	ldrb	r2, [r7, #5]
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	4293      	cmp	r3, r2
 8002c84:	bf38      	it	cc
 8002c86:	4613      	movcc	r3, r2
 8002c88:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002c8a:	79ba      	ldrb	r2, [r7, #6]
 8002c8c:	793b      	ldrb	r3, [r7, #4]
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	bf28      	it	cs
 8002c92:	4613      	movcs	r3, r2
 8002c94:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002c96:	793a      	ldrb	r2, [r7, #4]
 8002c98:	79bb      	ldrb	r3, [r7, #6]
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	bf38      	it	cc
 8002c9e:	4613      	movcc	r3, r2
 8002ca0:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
 8002ca4:	73fb      	strb	r3, [r7, #15]
 8002ca6:	e017      	b.n	8002cd8 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002ca8:	7b7b      	ldrb	r3, [r7, #13]
 8002caa:	73bb      	strb	r3, [r7, #14]
 8002cac:	e009      	b.n	8002cc2 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002cae:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002cb2:	7bf9      	ldrb	r1, [r7, #15]
 8002cb4:	7bbb      	ldrb	r3, [r7, #14]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fd88 	bl	80027cc <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002cbc:	7bbb      	ldrb	r3, [r7, #14]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	73bb      	strb	r3, [r7, #14]
 8002cc2:	7bba      	ldrb	r2, [r7, #14]
 8002cc4:	7b3b      	ldrb	r3, [r7, #12]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d803      	bhi.n	8002cd2 <ssd1306_FillRectangle+0x7e>
 8002cca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	daed      	bge.n	8002cae <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	7abb      	ldrb	r3, [r7, #10]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d803      	bhi.n	8002ce8 <ssd1306_FillRectangle+0x94>
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	2b3f      	cmp	r3, #63	; 0x3f
 8002ce4:	d9e0      	bls.n	8002ca8 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8002ce6:	bf00      	nop
 8002ce8:	bf00      	nop
}
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd90      	pop	{r4, r7, pc}

08002cf0 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	603a      	str	r2, [r7, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	71bb      	strb	r3, [r7, #6]
 8002d02:	4613      	mov	r3, r2
 8002d04:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002d06:	797b      	ldrb	r3, [r7, #5]
 8002d08:	3307      	adds	r3, #7
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	da00      	bge.n	8002d10 <ssd1306_DrawBitmap+0x20>
 8002d0e:	3307      	adds	r3, #7
 8002d10:	10db      	asrs	r3, r3, #3
 8002d12:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	db3e      	blt.n	8002d9e <ssd1306_DrawBitmap+0xae>
 8002d20:	79bb      	ldrb	r3, [r7, #6]
 8002d22:	2b3f      	cmp	r3, #63	; 0x3f
 8002d24:	d83b      	bhi.n	8002d9e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8002d26:	2300      	movs	r3, #0
 8002d28:	73bb      	strb	r3, [r7, #14]
 8002d2a:	e033      	b.n	8002d94 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	737b      	strb	r3, [r7, #13]
 8002d30:	e026      	b.n	8002d80 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8002d32:	7b7b      	ldrb	r3, [r7, #13]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
 8002d42:	e00d      	b.n	8002d60 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002d44:	7bbb      	ldrb	r3, [r7, #14]
 8002d46:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	7b7a      	ldrb	r2, [r7, #13]
 8002d50:	08d2      	lsrs	r2, r2, #3
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	4413      	add	r3, r2
 8002d56:	461a      	mov	r2, r3
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	da08      	bge.n	8002d7a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002d68:	79fa      	ldrb	r2, [r7, #7]
 8002d6a:	7b7b      	ldrb	r3, [r7, #13]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	7f3a      	ldrb	r2, [r7, #28]
 8002d72:	79b9      	ldrb	r1, [r7, #6]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fd29 	bl	80027cc <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002d7a:	7b7b      	ldrb	r3, [r7, #13]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	737b      	strb	r3, [r7, #13]
 8002d80:	7b7a      	ldrb	r2, [r7, #13]
 8002d82:	797b      	ldrb	r3, [r7, #5]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d3d4      	bcc.n	8002d32 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002d88:	7bbb      	ldrb	r3, [r7, #14]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	73bb      	strb	r3, [r7, #14]
 8002d8e:	79bb      	ldrb	r3, [r7, #6]
 8002d90:	3301      	adds	r3, #1
 8002d92:	71bb      	strb	r3, [r7, #6]
 8002d94:	7bba      	ldrb	r2, [r7, #14]
 8002d96:	7e3b      	ldrb	r3, [r7, #24]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d3c7      	bcc.n	8002d2c <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002d9c:	e000      	b.n	8002da0 <ssd1306_DrawBitmap+0xb0>
        return;
 8002d9e:	bf00      	nop
}
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002db0:	2381      	movs	r3, #129	; 0x81
 8002db2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fc2c 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fc28 	bl	8002614 <ssd1306_WriteCommand>
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002ddc:	23af      	movs	r3, #175	; 0xaf
 8002dde:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <ssd1306_SetDisplayOn+0x38>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	715a      	strb	r2, [r3, #5]
 8002de6:	e004      	b.n	8002df2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002de8:	23ae      	movs	r3, #174	; 0xae
 8002dea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <ssd1306_SetDisplayOn+0x38>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fc0d 	bl	8002614 <ssd1306_WriteCommand>
}
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000e2c 	.word	0x20000e2c

08002e08 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002e12:	60b8      	str	r0, [r7, #8]
 8002e14:	6079      	str	r1, [r7, #4]
 8002e16:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	330f      	adds	r3, #15
 8002e1e:	b2d8      	uxtb	r0, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	3301      	adds	r3, #1
 8002e26:	b2d9      	uxtb	r1, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	330f      	adds	r3, #15
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3305      	adds	r3, #5
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2401      	movs	r4, #1
 8002e3a:	9400      	str	r4, [sp, #0]
 8002e3c:	f7ff fde0 	bl	8002a00 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3310      	adds	r3, #16
 8002e46:	b2d8      	uxtb	r0, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	b2d9      	uxtb	r1, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	3310      	adds	r3, #16
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3305      	adds	r3, #5
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2401      	movs	r4, #1
 8002e62:	9400      	str	r4, [sp, #0]
 8002e64:	f7ff fdcc 	bl	8002a00 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	b2d8      	uxtb	r0, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	b2d9      	uxtb	r1, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	330e      	adds	r3, #14
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	3306      	adds	r3, #6
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2401      	movs	r4, #1
 8002e82:	9400      	str	r4, [sp, #0]
 8002e84:	f7ff feaf 	bl	8002be6 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7fd fb5d 	bl	8000548 <__aeabi_f2d>
 8002e8e:	a396      	add	r3, pc, #600	; (adr r3, 80030e8 <batterygauge+0x2e0>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd fe2c 	bl	8000af0 <__aeabi_dcmple>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d02a      	beq.n	8002ef4 <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	b2d8      	uxtb	r0, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	3302      	adds	r3, #2
 8002eac:	b2d9      	uxtb	r1, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	3303      	adds	r3, #3
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	3304      	adds	r3, #4
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2401      	movs	r4, #1
 8002ec0:	9400      	str	r4, [sp, #0]
 8002ec2:	f7ff fe90 	bl	8002be6 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d113      	bne.n	8002ef4 <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	b2d8      	uxtb	r0, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	3302      	adds	r3, #2
 8002eda:	b2d9      	uxtb	r1, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	3303      	adds	r3, #3
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3304      	adds	r3, #4
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2401      	movs	r4, #1
 8002eee:	9400      	str	r4, [sp, #0]
 8002ef0:	f7ff fe79 	bl	8002be6 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f7fd fb27 	bl	8000548 <__aeabi_f2d>
 8002efa:	a37b      	add	r3, pc, #492	; (adr r3, 80030e8 <batterygauge+0x2e0>)
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	f7fd fe0a 	bl	8000b18 <__aeabi_dcmpgt>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d035      	beq.n	8002f76 <batterygauge+0x16e>
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f7fd fb1c 	bl	8000548 <__aeabi_f2d>
 8002f10:	a377      	add	r3, pc, #476	; (adr r3, 80030f0 <batterygauge+0x2e8>)
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	f7fd fdeb 	bl	8000af0 <__aeabi_dcmple>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02a      	beq.n	8002f76 <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	3302      	adds	r3, #2
 8002f26:	b2d8      	uxtb	r0, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	b2d9      	uxtb	r1, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3303      	adds	r3, #3
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2401      	movs	r4, #1
 8002f42:	9400      	str	r4, [sp, #0]
 8002f44:	f7ff fe4f 	bl	8002be6 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d113      	bne.n	8002f76 <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	3305      	adds	r3, #5
 8002f54:	b2d8      	uxtb	r0, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	b2d9      	uxtb	r1, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3306      	adds	r3, #6
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2401      	movs	r4, #1
 8002f70:	9400      	str	r4, [sp, #0]
 8002f72:	f7ff fe38 	bl	8002be6 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7fd fae6 	bl	8000548 <__aeabi_f2d>
 8002f7c:	a35c      	add	r3, pc, #368	; (adr r3, 80030f0 <batterygauge+0x2e8>)
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f7fd fdc9 	bl	8000b18 <__aeabi_dcmpgt>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d049      	beq.n	8003020 <batterygauge+0x218>
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7fd fadb 	bl	8000548 <__aeabi_f2d>
 8002f92:	a359      	add	r3, pc, #356	; (adr r3, 80030f8 <batterygauge+0x2f0>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f7fd fdaa 	bl	8000af0 <__aeabi_dcmple>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d03e      	beq.n	8003020 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	b2d8      	uxtb	r0, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	3302      	adds	r3, #2
 8002fb0:	b2d9      	uxtb	r1, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	3303      	adds	r3, #3
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2401      	movs	r4, #1
 8002fc4:	9400      	str	r4, [sp, #0]
 8002fc6:	f7ff fe0e 	bl	8002be6 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	3305      	adds	r3, #5
 8002fd0:	b2d8      	uxtb	r0, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	b2d9      	uxtb	r1, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3306      	adds	r3, #6
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2401      	movs	r4, #1
 8002fec:	9400      	str	r4, [sp, #0]
 8002fee:	f7ff fdfa 	bl	8002be6 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	b2d8      	uxtb	r0, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	3302      	adds	r3, #2
 8003006:	b2d9      	uxtb	r1, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	3309      	adds	r3, #9
 800300e:	b2da      	uxtb	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	3304      	adds	r3, #4
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2401      	movs	r4, #1
 800301a:	9400      	str	r4, [sp, #0]
 800301c:	f7ff fde3 	bl	8002be6 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7fd fa91 	bl	8000548 <__aeabi_f2d>
 8003026:	a334      	add	r3, pc, #208	; (adr r3, 80030f8 <batterygauge+0x2f0>)
 8003028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302c:	f7fd fd74 	bl	8000b18 <__aeabi_dcmpgt>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d100      	bne.n	8003038 <batterygauge+0x230>
	}




}
 8003036:	e052      	b.n	80030de <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	3302      	adds	r3, #2
 800303e:	b2d8      	uxtb	r0, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	3302      	adds	r3, #2
 8003046:	b2d9      	uxtb	r1, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3303      	adds	r3, #3
 800304e:	b2da      	uxtb	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	3304      	adds	r3, #4
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2401      	movs	r4, #1
 800305a:	9400      	str	r4, [sp, #0]
 800305c:	f7ff fdc3 	bl	8002be6 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	3305      	adds	r3, #5
 8003066:	b2d8      	uxtb	r0, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	3302      	adds	r3, #2
 800306e:	b2d9      	uxtb	r1, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	3306      	adds	r3, #6
 8003076:	b2da      	uxtb	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	3304      	adds	r3, #4
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2401      	movs	r4, #1
 8003082:	9400      	str	r4, [sp, #0]
 8003084:	f7ff fdaf 	bl	8002be6 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	3308      	adds	r3, #8
 800308e:	b2d8      	uxtb	r0, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	3302      	adds	r3, #2
 8003096:	b2d9      	uxtb	r1, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3309      	adds	r3, #9
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3304      	adds	r3, #4
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2401      	movs	r4, #1
 80030aa:	9400      	str	r4, [sp, #0]
 80030ac:	f7ff fd9b 	bl	8002be6 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d113      	bne.n	80030de <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	330b      	adds	r3, #11
 80030bc:	b2d8      	uxtb	r0, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	3302      	adds	r3, #2
 80030c4:	b2d9      	uxtb	r1, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	330c      	adds	r3, #12
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	3304      	adds	r3, #4
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2401      	movs	r4, #1
 80030d8:	9400      	str	r4, [sp, #0]
 80030da:	f7ff fd84 	bl	8002be6 <ssd1306_DrawRectangle>
}
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}
 80030e6:	bf00      	nop
 80030e8:	9999999a 	.word	0x9999999a
 80030ec:	400d9999 	.word	0x400d9999
 80030f0:	33333333 	.word	0x33333333
 80030f4:	400f3333 	.word	0x400f3333
 80030f8:	66666666 	.word	0x66666666
 80030fc:	40106666 	.word	0x40106666

08003100 <percentage>:

void percentage(float percent){
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af02      	add	r7, sp, #8
 8003106:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fd fa1c 	bl	8000548 <__aeabi_f2d>
 8003110:	a329      	add	r3, pc, #164	; (adr r3, 80031b8 <percentage+0xb8>)
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f7fd fa6f 	bl	80005f8 <__aeabi_dmul>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <percentage+0xa8>)
 8003128:	f7fd f8b0 	bl	800028c <__adddf3>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	ec43 2b17 	vmov	d7, r2, r3
 8003134:	eeb0 0a47 	vmov.f32	s0, s14
 8003138:	eef0 0a67 	vmov.f32	s1, s15
 800313c:	f014 fe74 	bl	8017e28 <floor>
 8003140:	ec53 2b10 	vmov	r2, r3, d0
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f7fd fd2e 	bl	8000ba8 <__aeabi_d2uiz>
 800314c:	4603      	mov	r3, r0
 800314e:	b2da      	uxtb	r2, r3
 8003150:	2301      	movs	r3, #1
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2338      	movs	r3, #56	; 0x38
 8003156:	2128      	movs	r1, #40	; 0x28
 8003158:	2020      	movs	r0, #32
 800315a:	f7ff fd7b 	bl	8002c54 <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 95, 56, White);
 800315e:	2301      	movs	r3, #1
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2338      	movs	r3, #56	; 0x38
 8003164:	225f      	movs	r2, #95	; 0x5f
 8003166:	2128      	movs	r1, #40	; 0x28
 8003168:	2020      	movs	r0, #32
 800316a:	f7ff fd3c 	bl	8002be6 <ssd1306_DrawRectangle>
	snprintf((uint8_t *)str,20,"%0.2f %%",(float) percent);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd f9ea 	bl	8000548 <__aeabi_f2d>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	e9cd 2300 	strd	r2, r3, [sp]
 800317c:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <percentage+0xac>)
 800317e:	2114      	movs	r1, #20
 8003180:	480b      	ldr	r0, [pc, #44]	; (80031b0 <percentage+0xb0>)
 8003182:	f011 ff5f 	bl	8015044 <sniprintf>
	ssd1306_SetCursor(45,44);
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	202d      	movs	r0, #45	; 0x2d
 800318a:	f7ff fc21 	bl	80029d0 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 800318e:	4a09      	ldr	r2, [pc, #36]	; (80031b4 <percentage+0xb4>)
 8003190:	2301      	movs	r3, #1
 8003192:	ca06      	ldmia	r2, {r1, r2}
 8003194:	4806      	ldr	r0, [pc, #24]	; (80031b0 <percentage+0xb0>)
 8003196:	f7ff fbf5 	bl	8002984 <ssd1306_WriteString>


}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	f3af 8000 	nop.w
 80031a8:	40400000 	.word	0x40400000
 80031ac:	0801905c 	.word	0x0801905c
 80031b0:	20000e48 	.word	0x20000e48
 80031b4:	20000008 	.word	0x20000008
 80031b8:	47ae147b 	.word	0x47ae147b
 80031bc:	3fe47ae1 	.word	0x3fe47ae1

080031c0 <statemachine>:
int erasetime=0;
int erasedisplay=0;
int usbtransmiten=0;
float usbpercent=0;

void statemachine(void){
 80031c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031c2:	ed2d 8b02 	vpush	{d8}
 80031c6:	b09f      	sub	sp, #124	; 0x7c
 80031c8:	af04      	add	r7, sp, #16
	switch(state){
 80031ca:	4b97      	ldr	r3, [pc, #604]	; (8003428 <statemachine+0x268>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	f201 855e 	bhi.w	8004c90 <statemachine+0x1ad0>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <statemachine+0x1c>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	080031f9 	.word	0x080031f9
 80031e0:	08003689 	.word	0x08003689
 80031e4:	08003bd1 	.word	0x08003bd1
 80031e8:	0800423b 	.word	0x0800423b
 80031ec:	080043f3 	.word	0x080043f3
 80031f0:	080045b3 	.word	0x080045b3
 80031f4:	08004825 	.word	0x08004825
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7ff faa7 	bl	800274c <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 80031fe:	2120      	movs	r1, #32
 8003200:	2020      	movs	r0, #32
 8003202:	f7ff fbe5 	bl	80029d0 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 8003206:	4989      	ldr	r1, [pc, #548]	; (800342c <statemachine+0x26c>)
 8003208:	4889      	ldr	r0, [pc, #548]	; (8003430 <statemachine+0x270>)
 800320a:	f7fe ff0f 	bl	800202c <nmea_parse>
				 if(myData.speed>=vitmax){
 800320e:	4b88      	ldr	r3, [pc, #544]	; (8003430 <statemachine+0x270>)
 8003210:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003214:	4b87      	ldr	r3, [pc, #540]	; (8003434 <statemachine+0x274>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003222:	db03      	blt.n	800322c <statemachine+0x6c>
									 vitmax=myData.speed;
 8003224:	4b82      	ldr	r3, [pc, #520]	; (8003430 <statemachine+0x270>)
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	4a82      	ldr	r2, [pc, #520]	; (8003434 <statemachine+0x274>)
 800322a:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	667b      	str	r3, [r7, #100]	; 0x64
								 float sec=0;
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	663b      	str	r3, [r7, #96]	; 0x60
								 if (myData.speed!=0){
 8003238:	4b7d      	ldr	r3, [pc, #500]	; (8003430 <statemachine+0x270>)
 800323a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800323e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003246:	d032      	beq.n	80032ae <statemachine+0xee>
									 pace=1000/(60*myData.speed);
 8003248:	4b79      	ldr	r3, [pc, #484]	; (8003430 <statemachine+0x270>)
 800324a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800324e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003438 <statemachine+0x278>
 8003252:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003256:	eddf 6a79 	vldr	s13, [pc, #484]	; 800343c <statemachine+0x27c>
 800325a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800325e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
									 sec=(pace-floor(pace))*60;
 8003262:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003264:	f7fd f970 	bl	8000548 <__aeabi_f2d>
 8003268:	4604      	mov	r4, r0
 800326a:	460d      	mov	r5, r1
 800326c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800326e:	f7fd f96b 	bl	8000548 <__aeabi_f2d>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	ec43 2b10 	vmov	d0, r2, r3
 800327a:	f014 fdd5 	bl	8017e28 <floor>
 800327e:	ec53 2b10 	vmov	r2, r3, d0
 8003282:	4620      	mov	r0, r4
 8003284:	4629      	mov	r1, r5
 8003286:	f7fc ffff 	bl	8000288 <__aeabi_dsub>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	4b6a      	ldr	r3, [pc, #424]	; (8003440 <statemachine+0x280>)
 8003298:	f7fd f9ae 	bl	80005f8 <__aeabi_dmul>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4610      	mov	r0, r2
 80032a2:	4619      	mov	r1, r3
 80032a4:	f7fd fca0 	bl	8000be8 <__aeabi_d2f>
 80032a8:	4603      	mov	r3, r0
 80032aa:	663b      	str	r3, [r7, #96]	; 0x60
 80032ac:	e001      	b.n	80032b2 <statemachine+0xf2>
								 }
								 else {
									 pace=9999;//en cas de division par 0, techniquement le temps devient infini mais ce n'est pas intérréssant
 80032ae:	4b65      	ldr	r3, [pc, #404]	; (8003444 <statemachine+0x284>)
 80032b0:	667b      	str	r3, [r7, #100]	; 0x64
								 }


				  switch(spdstate){
 80032b2:	4b65      	ldr	r3, [pc, #404]	; (8003448 <statemachine+0x288>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	f000 8160 	beq.w	800357c <statemachine+0x3bc>
 80032bc:	2b02      	cmp	r3, #2
 80032be:	f300 81d0 	bgt.w	8003662 <statemachine+0x4a2>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <statemachine+0x10e>
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	f000 80d0 	beq.w	800346c <statemachine+0x2ac>
 80032cc:	e1c9      	b.n	8003662 <statemachine+0x4a2>


				 case STATE_SUMMARY:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 80032ce:	4b58      	ldr	r3, [pc, #352]	; (8003430 <statemachine+0x270>)
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d16f      	bne.n	80033b6 <statemachine+0x1f6>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 80032d6:	2014      	movs	r0, #20
 80032d8:	f00f ffb8 	bl	801324c <malloc>
 80032dc:	4603      	mov	r3, r0
 80032de:	603b      	str	r3, [r7, #0]
					 				 						snprintf(str,15, "MaxV=%.1f",vitmax*3.6);//amélioration possible la stocker en eeprom
 80032e0:	4b54      	ldr	r3, [pc, #336]	; (8003434 <statemachine+0x274>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd f92f 	bl	8000548 <__aeabi_f2d>
 80032ea:	a34d      	add	r3, pc, #308	; (adr r3, 8003420 <statemachine+0x260>)
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f7fd f982 	bl	80005f8 <__aeabi_dmul>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	e9cd 2300 	strd	r2, r3, [sp]
 80032fc:	4a53      	ldr	r2, [pc, #332]	; (800344c <statemachine+0x28c>)
 80032fe:	210f      	movs	r1, #15
 8003300:	6838      	ldr	r0, [r7, #0]
 8003302:	f011 fe9f 	bl	8015044 <sniprintf>
					 				 						ssd1306_SetCursor(32, 32);
 8003306:	2120      	movs	r1, #32
 8003308:	2020      	movs	r0, #32
 800330a:	f7ff fb61 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 800330e:	4a50      	ldr	r2, [pc, #320]	; (8003450 <statemachine+0x290>)
 8003310:	2301      	movs	r3, #1
 8003312:	ca06      	ldmia	r2, {r1, r2}
 8003314:	6838      	ldr	r0, [r7, #0]
 8003316:	f7ff fb35 	bl	8002984 <ssd1306_WriteString>
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 800331a:	4b45      	ldr	r3, [pc, #276]	; (8003430 <statemachine+0x270>)
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd f912 	bl	8000548 <__aeabi_f2d>
 8003324:	a33e      	add	r3, pc, #248	; (adr r3, 8003420 <statemachine+0x260>)
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f7fd f965 	bl	80005f8 <__aeabi_dmul>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	e9cd 2300 	strd	r2, r3, [sp]
 8003336:	4a47      	ldr	r2, [pc, #284]	; (8003454 <statemachine+0x294>)
 8003338:	210f      	movs	r1, #15
 800333a:	6838      	ldr	r0, [r7, #0]
 800333c:	f011 fe82 	bl	8015044 <sniprintf>
					 				 						ssd1306_SetCursor(32, 42);
 8003340:	212a      	movs	r1, #42	; 0x2a
 8003342:	2020      	movs	r0, #32
 8003344:	f7ff fb44 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003348:	4a41      	ldr	r2, [pc, #260]	; (8003450 <statemachine+0x290>)
 800334a:	2301      	movs	r3, #1
 800334c:	ca06      	ldmia	r2, {r1, r2}
 800334e:	6838      	ldr	r0, [r7, #0]
 8003350:	f7ff fb18 	bl	8002984 <ssd1306_WriteString>
					 				 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));//affichage au format minute puis seconde
 8003354:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003356:	f7fd f8f7 	bl	8000548 <__aeabi_f2d>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	ec43 2b10 	vmov	d0, r2, r3
 8003362:	f014 fd61 	bl	8017e28 <floor>
 8003366:	eeb0 8a40 	vmov.f32	s16, s0
 800336a:	eef0 8a60 	vmov.f32	s17, s1
 800336e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003370:	f7fd f8ea 	bl	8000548 <__aeabi_f2d>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	ec43 2b10 	vmov	d0, r2, r3
 800337c:	f014 fd54 	bl	8017e28 <floor>
 8003380:	eeb0 7a40 	vmov.f32	s14, s0
 8003384:	eef0 7a60 	vmov.f32	s15, s1
 8003388:	ed8d 7b02 	vstr	d7, [sp, #8]
 800338c:	ed8d 8b00 	vstr	d8, [sp]
 8003390:	4a31      	ldr	r2, [pc, #196]	; (8003458 <statemachine+0x298>)
 8003392:	210f      	movs	r1, #15
 8003394:	6838      	ldr	r0, [r7, #0]
 8003396:	f011 fe55 	bl	8015044 <sniprintf>
					 				 						ssd1306_SetCursor(32, 52);
 800339a:	2134      	movs	r1, #52	; 0x34
 800339c:	2020      	movs	r0, #32
 800339e:	f7ff fb17 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 80033a2:	4a2b      	ldr	r2, [pc, #172]	; (8003450 <statemachine+0x290>)
 80033a4:	2301      	movs	r3, #1
 80033a6:	ca06      	ldmia	r2, {r1, r2}
 80033a8:	6838      	ldr	r0, [r7, #0]
 80033aa:	f7ff faeb 	bl	8002984 <ssd1306_WriteString>
					 				 						free(str);
 80033ae:	6838      	ldr	r0, [r7, #0]
 80033b0:	f00f ff54 	bl	801325c <free>
 80033b4:	e025      	b.n	8003402 <statemachine+0x242>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 80033b6:	2014      	movs	r0, #20
 80033b8:	f00f ff48 	bl	801324c <malloc>
 80033bc:	4603      	mov	r3, r0
 80033be:	607b      	str	r3, [r7, #4]
					 				 						ssd1306_SetCursor(32, 32);
 80033c0:	2120      	movs	r1, #32
 80033c2:	2020      	movs	r0, #32
 80033c4:	f7ff fb04 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 1", Font_6x8, White);
 80033c8:	4a21      	ldr	r2, [pc, #132]	; (8003450 <statemachine+0x290>)
 80033ca:	2301      	movs	r3, #1
 80033cc:	ca06      	ldmia	r2, {r1, r2}
 80033ce:	4823      	ldr	r0, [pc, #140]	; (800345c <statemachine+0x29c>)
 80033d0:	f7ff fad8 	bl	8002984 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	2020      	movs	r0, #32
 80033d8:	f7ff fafa 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80033dc:	4a1c      	ldr	r2, [pc, #112]	; (8003450 <statemachine+0x290>)
 80033de:	2301      	movs	r3, #1
 80033e0:	ca06      	ldmia	r2, {r1, r2}
 80033e2:	481f      	ldr	r0, [pc, #124]	; (8003460 <statemachine+0x2a0>)
 80033e4:	f7ff face 	bl	8002984 <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 80033e8:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <statemachine+0x2a4>)
 80033ea:	edd3 7a00 	vldr	s15, [r3]
 80033ee:	2201      	movs	r2, #1
 80033f0:	2136      	movs	r1, #54	; 0x36
 80033f2:	2023      	movs	r0, #35	; 0x23
 80033f4:	eeb0 0a67 	vmov.f32	s0, s15
 80033f8:	f7ff fd06 	bl	8002e08 <batterygauge>
					 				 						free(str);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f00f ff2d 	bl	801325c <free>
					 				 					}
					 if(BTN_B>=1){
 8003402:	4b19      	ldr	r3, [pc, #100]	; (8003468 <statemachine+0x2a8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f340 8126 	ble.w	8003658 <statemachine+0x498>
					 					 				 					spdstate++;
 800340c:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <statemachine+0x288>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	b2da      	uxtb	r2, r3
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <statemachine+0x288>)
 8003416:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <statemachine+0x2a8>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
					 					 				  	}



					 break;
 800341e:	e11b      	b.n	8003658 <statemachine+0x498>
 8003420:	cccccccd 	.word	0xcccccccd
 8003424:	400ccccc 	.word	0x400ccccc
 8003428:	200006f8 	.word	0x200006f8
 800342c:	200004ac 	.word	0x200004ac
 8003430:	200006b0 	.word	0x200006b0
 8003434:	20000e34 	.word	0x20000e34
 8003438:	42700000 	.word	0x42700000
 800343c:	447a0000 	.word	0x447a0000
 8003440:	404e0000 	.word	0x404e0000
 8003444:	461c3c00 	.word	0x461c3c00
 8003448:	200006fa 	.word	0x200006fa
 800344c:	08019068 	.word	0x08019068
 8003450:	20000008 	.word	0x20000008
 8003454:	08019074 	.word	0x08019074
 8003458:	0801907c 	.word	0x0801907c
 800345c:	08019090 	.word	0x08019090
 8003460:	08019098 	.word	0x08019098
 8003464:	20000730 	.word	0x20000730
 8003468:	200006f4 	.word	0x200006f4
				 case STATE_COMPTEUR:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 800346c:	4b96      	ldr	r3, [pc, #600]	; (80036c8 <statemachine+0x508>)
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	2b01      	cmp	r3, #1
 8003472:	d159      	bne.n	8003528 <statemachine+0x368>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8003474:	2014      	movs	r0, #20
 8003476:	f00f fee9 	bl	801324c <malloc>
 800347a:	4603      	mov	r3, r0
 800347c:	60bb      	str	r3, [r7, #8]
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 800347e:	4b92      	ldr	r3, [pc, #584]	; (80036c8 <statemachine+0x508>)
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd f860 	bl	8000548 <__aeabi_f2d>
 8003488:	a38b      	add	r3, pc, #556	; (adr r3, 80036b8 <statemachine+0x4f8>)
 800348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348e:	f7fd f8b3 	bl	80005f8 <__aeabi_dmul>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	e9cd 2300 	strd	r2, r3, [sp]
 800349a:	4a8c      	ldr	r2, [pc, #560]	; (80036cc <statemachine+0x50c>)
 800349c:	210f      	movs	r1, #15
 800349e:	68b8      	ldr	r0, [r7, #8]
 80034a0:	f011 fdd0 	bl	8015044 <sniprintf>
					 				 						ssd1306_SetCursor(32, 54);
 80034a4:	2136      	movs	r1, #54	; 0x36
 80034a6:	2020      	movs	r0, #32
 80034a8:	f7ff fa92 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 80034ac:	4a88      	ldr	r2, [pc, #544]	; (80036d0 <statemachine+0x510>)
 80034ae:	2301      	movs	r3, #1
 80034b0:	ca06      	ldmia	r2, {r1, r2}
 80034b2:	68b8      	ldr	r0, [r7, #8]
 80034b4:	f7ff fa66 	bl	8002984 <ssd1306_WriteString>
					 				 						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 80034b8:	2301      	movs	r3, #1
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	2335      	movs	r3, #53	; 0x35
 80034be:	225f      	movs	r2, #95	; 0x5f
 80034c0:	2126      	movs	r1, #38	; 0x26
 80034c2:	2020      	movs	r0, #32
 80034c4:	f7ff fb8f 	bl	8002be6 <ssd1306_DrawRectangle>
					 				 						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 80034c8:	4b7f      	ldr	r3, [pc, #508]	; (80036c8 <statemachine+0x508>)
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd f83b 	bl	8000548 <__aeabi_f2d>
 80034d2:	a37b      	add	r3, pc, #492	; (adr r3, 80036c0 <statemachine+0x500>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f7fd f88e 	bl	80005f8 <__aeabi_dmul>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	4b7a      	ldr	r3, [pc, #488]	; (80036d4 <statemachine+0x514>)
 80034ea:	f7fc fecf 	bl	800028c <__adddf3>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	ec43 2b17 	vmov	d7, r2, r3
 80034f6:	eeb0 0a47 	vmov.f32	s0, s14
 80034fa:	eef0 0a67 	vmov.f32	s1, s15
 80034fe:	f014 fc93 	bl	8017e28 <floor>
 8003502:	ec53 2b10 	vmov	r2, r3, d0
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	f7fd fb25 	bl	8000b58 <__aeabi_d2iz>
 800350e:	4603      	mov	r3, r0
 8003510:	b2da      	uxtb	r2, r3
 8003512:	2301      	movs	r3, #1
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	2335      	movs	r3, #53	; 0x35
 8003518:	2126      	movs	r1, #38	; 0x26
 800351a:	2020      	movs	r0, #32
 800351c:	f7ff fb9a 	bl	8002c54 <ssd1306_FillRectangle>

					 				 						free(str);
 8003520:	68b8      	ldr	r0, [r7, #8]
 8003522:	f00f fe9b 	bl	801325c <free>
 8003526:	e01b      	b.n	8003560 <statemachine+0x3a0>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8003528:	2014      	movs	r0, #20
 800352a:	f00f fe8f 	bl	801324c <malloc>
 800352e:	4603      	mov	r3, r0
 8003530:	60fb      	str	r3, [r7, #12]
					 				 						ssd1306_SetCursor(32, 32);
 8003532:	2120      	movs	r1, #32
 8003534:	2020      	movs	r0, #32
 8003536:	f7ff fa4b 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 2", Font_6x8, White);
 800353a:	4a65      	ldr	r2, [pc, #404]	; (80036d0 <statemachine+0x510>)
 800353c:	2301      	movs	r3, #1
 800353e:	ca06      	ldmia	r2, {r1, r2}
 8003540:	4865      	ldr	r0, [pc, #404]	; (80036d8 <statemachine+0x518>)
 8003542:	f7ff fa1f 	bl	8002984 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	2020      	movs	r0, #32
 800354a:	f7ff fa41 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800354e:	4a60      	ldr	r2, [pc, #384]	; (80036d0 <statemachine+0x510>)
 8003550:	2301      	movs	r3, #1
 8003552:	ca06      	ldmia	r2, {r1, r2}
 8003554:	4861      	ldr	r0, [pc, #388]	; (80036dc <statemachine+0x51c>)
 8003556:	f7ff fa15 	bl	8002984 <ssd1306_WriteString>
					 				 						free(str);
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f00f fe7e 	bl	801325c <free>
					 				 					}
					 if(BTN_B>=1){
 8003560:	4b5f      	ldr	r3, [pc, #380]	; (80036e0 <statemachine+0x520>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	dd79      	ble.n	800365c <statemachine+0x49c>
					 				 					spdstate++;
 8003568:	4b5e      	ldr	r3, [pc, #376]	; (80036e4 <statemachine+0x524>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	3301      	adds	r3, #1
 800356e:	b2da      	uxtb	r2, r3
 8003570:	4b5c      	ldr	r3, [pc, #368]	; (80036e4 <statemachine+0x524>)
 8003572:	701a      	strb	r2, [r3, #0]
					 				 					BTN_B=0;
 8003574:	4b5a      	ldr	r3, [pc, #360]	; (80036e0 <statemachine+0x520>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 800357a:	e06f      	b.n	800365c <statemachine+0x49c>
				 case STATE_GRAPH:
					 if(myData.fix == 1){
 800357c:	4b52      	ldr	r3, [pc, #328]	; (80036c8 <statemachine+0x508>)
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	2b01      	cmp	r3, #1
 8003582:	d12f      	bne.n	80035e4 <statemachine+0x424>
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8003584:	2014      	movs	r0, #20
 8003586:	f00f fe61 	bl	801324c <malloc>
 800358a:	4603      	mov	r3, r0
 800358c:	613b      	str	r3, [r7, #16]

					 				 						ssd1306_SetCursor(32, 32);
 800358e:	2120      	movs	r1, #32
 8003590:	2020      	movs	r0, #32
 8003592:	f7ff fa1d 	bl	80029d0 <ssd1306_SetCursor>
					 				 						snprintf(str,15, "%0.1f",(myData.speed)*3.6);
 8003596:	4b4c      	ldr	r3, [pc, #304]	; (80036c8 <statemachine+0x508>)
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	4618      	mov	r0, r3
 800359c:	f7fc ffd4 	bl	8000548 <__aeabi_f2d>
 80035a0:	a345      	add	r3, pc, #276	; (adr r3, 80036b8 <statemachine+0x4f8>)
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	f7fd f827 	bl	80005f8 <__aeabi_dmul>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	e9cd 2300 	strd	r2, r3, [sp]
 80035b2:	4a4d      	ldr	r2, [pc, #308]	; (80036e8 <statemachine+0x528>)
 80035b4:	210f      	movs	r1, #15
 80035b6:	6938      	ldr	r0, [r7, #16]
 80035b8:	f011 fd44 	bl	8015044 <sniprintf>
					 				 						ssd1306_WriteString(str, Font_11x18, White);
 80035bc:	4a4b      	ldr	r2, [pc, #300]	; (80036ec <statemachine+0x52c>)
 80035be:	2301      	movs	r3, #1
 80035c0:	ca06      	ldmia	r2, {r1, r2}
 80035c2:	6938      	ldr	r0, [r7, #16]
 80035c4:	f7ff f9de 	bl	8002984 <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 80035c8:	4b49      	ldr	r3, [pc, #292]	; (80036f0 <statemachine+0x530>)
 80035ca:	edd3 7a00 	vldr	s15, [r3]
 80035ce:	2201      	movs	r2, #1
 80035d0:	2136      	movs	r1, #54	; 0x36
 80035d2:	2023      	movs	r0, #35	; 0x23
 80035d4:	eeb0 0a67 	vmov.f32	s0, s15
 80035d8:	f7ff fc16 	bl	8002e08 <batterygauge>

					 				 						free(str);
 80035dc:	6938      	ldr	r0, [r7, #16]
 80035de:	f00f fe3d 	bl	801325c <free>
 80035e2:	e025      	b.n	8003630 <statemachine+0x470>
					 }
					 else{
						 char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 80035e4:	2014      	movs	r0, #20
 80035e6:	f00f fe31 	bl	801324c <malloc>
 80035ea:	4603      	mov	r3, r0
 80035ec:	617b      	str	r3, [r7, #20]
						 ssd1306_SetCursor(32, 32);
 80035ee:	2120      	movs	r1, #32
 80035f0:	2020      	movs	r0, #32
 80035f2:	f7ff f9ed 	bl	80029d0 <ssd1306_SetCursor>
						 ssd1306_WriteString("Speed 3", Font_6x8, White);
 80035f6:	4a36      	ldr	r2, [pc, #216]	; (80036d0 <statemachine+0x510>)
 80035f8:	2301      	movs	r3, #1
 80035fa:	ca06      	ldmia	r2, {r1, r2}
 80035fc:	483d      	ldr	r0, [pc, #244]	; (80036f4 <statemachine+0x534>)
 80035fe:	f7ff f9c1 	bl	8002984 <ssd1306_WriteString>
						 ssd1306_SetCursor(32, 44);
 8003602:	212c      	movs	r1, #44	; 0x2c
 8003604:	2020      	movs	r0, #32
 8003606:	f7ff f9e3 	bl	80029d0 <ssd1306_SetCursor>
						 ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800360a:	4a31      	ldr	r2, [pc, #196]	; (80036d0 <statemachine+0x510>)
 800360c:	2301      	movs	r3, #1
 800360e:	ca06      	ldmia	r2, {r1, r2}
 8003610:	4832      	ldr	r0, [pc, #200]	; (80036dc <statemachine+0x51c>)
 8003612:	f7ff f9b7 	bl	8002984 <ssd1306_WriteString>
						 batterygauge(vbat,35, 54,1);
 8003616:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <statemachine+0x530>)
 8003618:	edd3 7a00 	vldr	s15, [r3]
 800361c:	2201      	movs	r2, #1
 800361e:	2136      	movs	r1, #54	; 0x36
 8003620:	2023      	movs	r0, #35	; 0x23
 8003622:	eeb0 0a67 	vmov.f32	s0, s15
 8003626:	f7ff fbef 	bl	8002e08 <batterygauge>
						 free(str);
 800362a:	6978      	ldr	r0, [r7, #20]
 800362c:	f00f fe16 	bl	801325c <free>
					 }

					 if(BTN_B>=1){
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <statemachine+0x520>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	dd13      	ble.n	8003660 <statemachine+0x4a0>
					 					 				 					spdstate--;
 8003638:	4b2a      	ldr	r3, [pc, #168]	; (80036e4 <statemachine+0x524>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	3b01      	subs	r3, #1
 800363e:	b2da      	uxtb	r2, r3
 8003640:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <statemachine+0x524>)
 8003642:	701a      	strb	r2, [r3, #0]
					 					 				 					spdstate--;
 8003644:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <statemachine+0x524>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	3b01      	subs	r3, #1
 800364a:	b2da      	uxtb	r2, r3
 800364c:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <statemachine+0x524>)
 800364e:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8003650:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <statemachine+0x520>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8003656:	e003      	b.n	8003660 <statemachine+0x4a0>
					 break;
 8003658:	bf00      	nop
 800365a:	e002      	b.n	8003662 <statemachine+0x4a2>
					 break;
 800365c:	bf00      	nop
 800365e:	e000      	b.n	8003662 <statemachine+0x4a2>
					 break;
 8003660:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 8003662:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <statemachine+0x538>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f341 8304 	ble.w	8004c74 <statemachine+0x1ab4>
				 					state++;
 800366c:	4b23      	ldr	r3, [pc, #140]	; (80036fc <statemachine+0x53c>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	b2da      	uxtb	r2, r3
 8003674:	4b21      	ldr	r3, [pc, #132]	; (80036fc <statemachine+0x53c>)
 8003676:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 8003678:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <statemachine+0x538>)
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
				 					BTN_B=0;
 800367e:	4b18      	ldr	r3, [pc, #96]	; (80036e0 <statemachine+0x520>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
				  	}
				  break;
 8003684:	f001 baf6 	b.w	8004c74 <statemachine+0x1ab4>


	case STATE_POS:
			  ssd1306_Fill(Black);
 8003688:	2000      	movs	r0, #0
 800368a:	f7ff f85f 	bl	800274c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 800368e:	491c      	ldr	r1, [pc, #112]	; (8003700 <statemachine+0x540>)
 8003690:	480d      	ldr	r0, [pc, #52]	; (80036c8 <statemachine+0x508>)
 8003692:	f7fe fccb 	bl	800202c <nmea_parse>
			  switch(posstate){
 8003696:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <statemachine+0x544>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b03      	cmp	r3, #3
 800369c:	f200 8285 	bhi.w	8003baa <statemachine+0x9ea>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <statemachine+0x4e8>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	08003709 	.word	0x08003709
 80036ac:	08003821 	.word	0x08003821
 80036b0:	08003917 	.word	0x08003917
 80036b4:	08003a47 	.word	0x08003a47
 80036b8:	cccccccd 	.word	0xcccccccd
 80036bc:	400ccccc 	.word	0x400ccccc
 80036c0:	c28f5c29 	.word	0xc28f5c29
 80036c4:	3fe428f5 	.word	0x3fe428f5
 80036c8:	200006b0 	.word	0x200006b0
 80036cc:	08019074 	.word	0x08019074
 80036d0:	20000008 	.word	0x20000008
 80036d4:	40400000 	.word	0x40400000
 80036d8:	080190a4 	.word	0x080190a4
 80036dc:	08019098 	.word	0x08019098
 80036e0:	200006f4 	.word	0x200006f4
 80036e4:	200006fa 	.word	0x200006fa
 80036e8:	080190ac 	.word	0x080190ac
 80036ec:	20000018 	.word	0x20000018
 80036f0:	20000730 	.word	0x20000730
 80036f4:	080190b4 	.word	0x080190b4
 80036f8:	200006f0 	.word	0x200006f0
 80036fc:	200006f8 	.word	0x200006f8
 8003700:	200004ac 	.word	0x200004ac
 8003704:	200006fb 	.word	0x200006fb

			  case STATE_SUMMARY1:
				  if(myData.fix == 1){
 8003708:	4bab      	ldr	r3, [pc, #684]	; (80039b8 <statemachine+0x7f8>)
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	2b01      	cmp	r3, #1
 800370e:	d14e      	bne.n	80037ae <statemachine+0x5ee>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003710:	2014      	movs	r0, #20
 8003712:	f00f fd9b 	bl	801324c <malloc>
 8003716:	4603      	mov	r3, r0
 8003718:	61bb      	str	r3, [r7, #24]
				  						ssd1306_SetCursor(32, 32);
 800371a:	2120      	movs	r1, #32
 800371c:	2020      	movs	r0, #32
 800371e:	f7ff f957 	bl	80029d0 <ssd1306_SetCursor>
				  						snprintf(str,15, "Latitude:");
 8003722:	4aa6      	ldr	r2, [pc, #664]	; (80039bc <statemachine+0x7fc>)
 8003724:	210f      	movs	r1, #15
 8003726:	69b8      	ldr	r0, [r7, #24]
 8003728:	f011 fc8c 	bl	8015044 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800372c:	4aa4      	ldr	r2, [pc, #656]	; (80039c0 <statemachine+0x800>)
 800372e:	2301      	movs	r3, #1
 8003730:	ca06      	ldmia	r2, {r1, r2}
 8003732:	69b8      	ldr	r0, [r7, #24]
 8003734:	f7ff f926 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003738:	4b9f      	ldr	r3, [pc, #636]	; (80039b8 <statemachine+0x7f8>)
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	e9cd 2300 	strd	r2, r3, [sp]
 8003742:	4aa0      	ldr	r2, [pc, #640]	; (80039c4 <statemachine+0x804>)
 8003744:	210f      	movs	r1, #15
 8003746:	69b8      	ldr	r0, [r7, #24]
 8003748:	f011 fc7c 	bl	8015044 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 800374c:	2128      	movs	r1, #40	; 0x28
 800374e:	2020      	movs	r0, #32
 8003750:	f7ff f93e 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003754:	4a9a      	ldr	r2, [pc, #616]	; (80039c0 <statemachine+0x800>)
 8003756:	2301      	movs	r3, #1
 8003758:	ca06      	ldmia	r2, {r1, r2}
 800375a:	69b8      	ldr	r0, [r7, #24]
 800375c:	f7ff f912 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8003760:	4a99      	ldr	r2, [pc, #612]	; (80039c8 <statemachine+0x808>)
 8003762:	210f      	movs	r1, #15
 8003764:	69b8      	ldr	r0, [r7, #24]
 8003766:	f011 fc6d 	bl	8015044 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 800376a:	2130      	movs	r1, #48	; 0x30
 800376c:	2020      	movs	r0, #32
 800376e:	f7ff f92f 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003772:	4a93      	ldr	r2, [pc, #588]	; (80039c0 <statemachine+0x800>)
 8003774:	2301      	movs	r3, #1
 8003776:	ca06      	ldmia	r2, {r1, r2}
 8003778:	69b8      	ldr	r0, [r7, #24]
 800377a:	f7ff f903 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 800377e:	4b8e      	ldr	r3, [pc, #568]	; (80039b8 <statemachine+0x7f8>)
 8003780:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003784:	e9cd 2300 	strd	r2, r3, [sp]
 8003788:	4a8e      	ldr	r2, [pc, #568]	; (80039c4 <statemachine+0x804>)
 800378a:	210f      	movs	r1, #15
 800378c:	69b8      	ldr	r0, [r7, #24]
 800378e:	f011 fc59 	bl	8015044 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003792:	2138      	movs	r1, #56	; 0x38
 8003794:	2020      	movs	r0, #32
 8003796:	f7ff f91b 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800379a:	4a89      	ldr	r2, [pc, #548]	; (80039c0 <statemachine+0x800>)
 800379c:	2301      	movs	r3, #1
 800379e:	ca06      	ldmia	r2, {r1, r2}
 80037a0:	69b8      	ldr	r0, [r7, #24]
 80037a2:	f7ff f8ef 	bl	8002984 <ssd1306_WriteString>
				  						free(str);
 80037a6:	69b8      	ldr	r0, [r7, #24]
 80037a8:	f00f fd58 	bl	801325c <free>
 80037ac:	e029      	b.n	8003802 <statemachine+0x642>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 80037ae:	2014      	movs	r0, #20
 80037b0:	f00f fd4c 	bl	801324c <malloc>
 80037b4:	4603      	mov	r3, r0
 80037b6:	61fb      	str	r3, [r7, #28]
				  						ssd1306_SetCursor(32, 32);
 80037b8:	2120      	movs	r1, #32
 80037ba:	2020      	movs	r0, #32
 80037bc:	f7ff f908 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos1", Font_6x8, White);
 80037c0:	4a7f      	ldr	r2, [pc, #508]	; (80039c0 <statemachine+0x800>)
 80037c2:	2301      	movs	r3, #1
 80037c4:	ca06      	ldmia	r2, {r1, r2}
 80037c6:	4881      	ldr	r0, [pc, #516]	; (80039cc <statemachine+0x80c>)
 80037c8:	f7ff f8dc 	bl	8002984 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 80037cc:	212c      	movs	r1, #44	; 0x2c
 80037ce:	2020      	movs	r0, #32
 80037d0:	f7ff f8fe 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80037d4:	4a7a      	ldr	r2, [pc, #488]	; (80039c0 <statemachine+0x800>)
 80037d6:	2301      	movs	r3, #1
 80037d8:	ca06      	ldmia	r2, {r1, r2}
 80037da:	487d      	ldr	r0, [pc, #500]	; (80039d0 <statemachine+0x810>)
 80037dc:	f7ff f8d2 	bl	8002984 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 54);
 80037e0:	2136      	movs	r1, #54	; 0x36
 80037e2:	2020      	movs	r0, #32
 80037e4:	f7ff f8f4 	bl	80029d0 <ssd1306_SetCursor>
				  						batterygauge(vbat,35, 54,1);
 80037e8:	4b7a      	ldr	r3, [pc, #488]	; (80039d4 <statemachine+0x814>)
 80037ea:	edd3 7a00 	vldr	s15, [r3]
 80037ee:	2201      	movs	r2, #1
 80037f0:	2136      	movs	r1, #54	; 0x36
 80037f2:	2023      	movs	r0, #35	; 0x23
 80037f4:	eeb0 0a67 	vmov.f32	s0, s15
 80037f8:	f7ff fb06 	bl	8002e08 <batterygauge>
				  						free(str);
 80037fc:	69f8      	ldr	r0, [r7, #28]
 80037fe:	f00f fd2d 	bl	801325c <free>
				  					}
				  if(BTN_B>=1){
 8003802:	4b75      	ldr	r3, [pc, #468]	; (80039d8 <statemachine+0x818>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f340 81c8 	ble.w	8003b9c <statemachine+0x9dc>
					  posstate++;
 800380c:	4b73      	ldr	r3, [pc, #460]	; (80039dc <statemachine+0x81c>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	3301      	adds	r3, #1
 8003812:	b2da      	uxtb	r2, r3
 8003814:	4b71      	ldr	r3, [pc, #452]	; (80039dc <statemachine+0x81c>)
 8003816:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8003818:	4b6f      	ldr	r3, [pc, #444]	; (80039d8 <statemachine+0x818>)
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]





				  break;
 800381e:	e1bd      	b.n	8003b9c <statemachine+0x9dc>
			  case STATE_LAT:
				  if(myData.fix == 1){
 8003820:	4b65      	ldr	r3, [pc, #404]	; (80039b8 <statemachine+0x7f8>)
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	2b01      	cmp	r3, #1
 8003826:	d14b      	bne.n	80038c0 <statemachine+0x700>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003828:	2014      	movs	r0, #20
 800382a:	f00f fd0f 	bl	801324c <malloc>
 800382e:	4603      	mov	r3, r0
 8003830:	623b      	str	r3, [r7, #32]
				  						ssd1306_SetCursor(32, 32);
 8003832:	2120      	movs	r1, #32
 8003834:	2020      	movs	r0, #32
 8003836:	f7ff f8cb 	bl	80029d0 <ssd1306_SetCursor>
				  						snprintf(str,15, "LatSide:");
 800383a:	4a69      	ldr	r2, [pc, #420]	; (80039e0 <statemachine+0x820>)
 800383c:	210f      	movs	r1, #15
 800383e:	6a38      	ldr	r0, [r7, #32]
 8003840:	f011 fc00 	bl	8015044 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003844:	4a5e      	ldr	r2, [pc, #376]	; (80039c0 <statemachine+0x800>)
 8003846:	2301      	movs	r3, #1
 8003848:	ca06      	ldmia	r2, {r1, r2}
 800384a:	6a38      	ldr	r0, [r7, #32]
 800384c:	f7ff f89a 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003850:	4b59      	ldr	r3, [pc, #356]	; (80039b8 <statemachine+0x7f8>)
 8003852:	7a1b      	ldrb	r3, [r3, #8]
 8003854:	4a63      	ldr	r2, [pc, #396]	; (80039e4 <statemachine+0x824>)
 8003856:	210f      	movs	r1, #15
 8003858:	6a38      	ldr	r0, [r7, #32]
 800385a:	f011 fbf3 	bl	8015044 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 800385e:	2128      	movs	r1, #40	; 0x28
 8003860:	2020      	movs	r0, #32
 8003862:	f7ff f8b5 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003866:	4a56      	ldr	r2, [pc, #344]	; (80039c0 <statemachine+0x800>)
 8003868:	2301      	movs	r3, #1
 800386a:	ca06      	ldmia	r2, {r1, r2}
 800386c:	6a38      	ldr	r0, [r7, #32]
 800386e:	f7ff f889 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "Latitude:");
 8003872:	4a52      	ldr	r2, [pc, #328]	; (80039bc <statemachine+0x7fc>)
 8003874:	210f      	movs	r1, #15
 8003876:	6a38      	ldr	r0, [r7, #32]
 8003878:	f011 fbe4 	bl	8015044 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 800387c:	2130      	movs	r1, #48	; 0x30
 800387e:	2020      	movs	r0, #32
 8003880:	f7ff f8a6 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003884:	4a4e      	ldr	r2, [pc, #312]	; (80039c0 <statemachine+0x800>)
 8003886:	2301      	movs	r3, #1
 8003888:	ca06      	ldmia	r2, {r1, r2}
 800388a:	6a38      	ldr	r0, [r7, #32]
 800388c:	f7ff f87a 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);
 8003890:	4b49      	ldr	r3, [pc, #292]	; (80039b8 <statemachine+0x7f8>)
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	e9cd 2300 	strd	r2, r3, [sp]
 800389a:	4a4a      	ldr	r2, [pc, #296]	; (80039c4 <statemachine+0x804>)
 800389c:	210f      	movs	r1, #15
 800389e:	6a38      	ldr	r0, [r7, #32]
 80038a0:	f011 fbd0 	bl	8015044 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80038a4:	2138      	movs	r1, #56	; 0x38
 80038a6:	2020      	movs	r0, #32
 80038a8:	f7ff f892 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80038ac:	4a44      	ldr	r2, [pc, #272]	; (80039c0 <statemachine+0x800>)
 80038ae:	2301      	movs	r3, #1
 80038b0:	ca06      	ldmia	r2, {r1, r2}
 80038b2:	6a38      	ldr	r0, [r7, #32]
 80038b4:	f7ff f866 	bl	8002984 <ssd1306_WriteString>
				  						free(str);
 80038b8:	6a38      	ldr	r0, [r7, #32]
 80038ba:	f00f fccf 	bl	801325c <free>
 80038be:	e01b      	b.n	80038f8 <statemachine+0x738>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 80038c0:	2014      	movs	r0, #20
 80038c2:	f00f fcc3 	bl	801324c <malloc>
 80038c6:	4603      	mov	r3, r0
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
				  						ssd1306_SetCursor(32, 32);
 80038ca:	2120      	movs	r1, #32
 80038cc:	2020      	movs	r0, #32
 80038ce:	f7ff f87f 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos2", Font_6x8, White);
 80038d2:	4a3b      	ldr	r2, [pc, #236]	; (80039c0 <statemachine+0x800>)
 80038d4:	2301      	movs	r3, #1
 80038d6:	ca06      	ldmia	r2, {r1, r2}
 80038d8:	4843      	ldr	r0, [pc, #268]	; (80039e8 <statemachine+0x828>)
 80038da:	f7ff f853 	bl	8002984 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	2020      	movs	r0, #32
 80038e2:	f7ff f875 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80038e6:	4a36      	ldr	r2, [pc, #216]	; (80039c0 <statemachine+0x800>)
 80038e8:	2301      	movs	r3, #1
 80038ea:	ca06      	ldmia	r2, {r1, r2}
 80038ec:	4838      	ldr	r0, [pc, #224]	; (80039d0 <statemachine+0x810>)
 80038ee:	f7ff f849 	bl	8002984 <ssd1306_WriteString>
				  						free(str);
 80038f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038f4:	f00f fcb2 	bl	801325c <free>
				  					}
				  if(BTN_B>=1){
 80038f8:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <statemachine+0x818>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f340 814f 	ble.w	8003ba0 <statemachine+0x9e0>
				  					  posstate++;
 8003902:	4b36      	ldr	r3, [pc, #216]	; (80039dc <statemachine+0x81c>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	3301      	adds	r3, #1
 8003908:	b2da      	uxtb	r2, r3
 800390a:	4b34      	ldr	r3, [pc, #208]	; (80039dc <statemachine+0x81c>)
 800390c:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 800390e:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <statemachine+0x818>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
				  				  }



				  break;
 8003914:	e144      	b.n	8003ba0 <statemachine+0x9e0>
			  case STATE_LONG:
				  if(myData.fix == 1){
 8003916:	4b28      	ldr	r3, [pc, #160]	; (80039b8 <statemachine+0x7f8>)
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	2b01      	cmp	r3, #1
 800391c:	d168      	bne.n	80039f0 <statemachine+0x830>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 800391e:	2014      	movs	r0, #20
 8003920:	f00f fc94 	bl	801324c <malloc>
 8003924:	4603      	mov	r3, r0
 8003926:	62bb      	str	r3, [r7, #40]	; 0x28
				  						ssd1306_SetCursor(32, 32);
 8003928:	2120      	movs	r1, #32
 800392a:	2020      	movs	r0, #32
 800392c:	f7ff f850 	bl	80029d0 <ssd1306_SetCursor>
				  						snprintf(str,15, "LonSide:");
 8003930:	4a2e      	ldr	r2, [pc, #184]	; (80039ec <statemachine+0x82c>)
 8003932:	210f      	movs	r1, #15
 8003934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003936:	f011 fb85 	bl	8015044 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800393a:	4a21      	ldr	r2, [pc, #132]	; (80039c0 <statemachine+0x800>)
 800393c:	2301      	movs	r3, #1
 800393e:	ca06      	ldmia	r2, {r1, r2}
 8003940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003942:	f7ff f81f 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003946:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <statemachine+0x7f8>)
 8003948:	7e1b      	ldrb	r3, [r3, #24]
 800394a:	4a26      	ldr	r2, [pc, #152]	; (80039e4 <statemachine+0x824>)
 800394c:	210f      	movs	r1, #15
 800394e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003950:	f011 fb78 	bl	8015044 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003954:	2128      	movs	r1, #40	; 0x28
 8003956:	2020      	movs	r0, #32
 8003958:	f7ff f83a 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800395c:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <statemachine+0x800>)
 800395e:	2301      	movs	r3, #1
 8003960:	ca06      	ldmia	r2, {r1, r2}
 8003962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003964:	f7ff f80e 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8003968:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <statemachine+0x808>)
 800396a:	210f      	movs	r1, #15
 800396c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800396e:	f011 fb69 	bl	8015044 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003972:	2130      	movs	r1, #48	; 0x30
 8003974:	2020      	movs	r0, #32
 8003976:	f7ff f82b 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800397a:	4a11      	ldr	r2, [pc, #68]	; (80039c0 <statemachine+0x800>)
 800397c:	2301      	movs	r3, #1
 800397e:	ca06      	ldmia	r2, {r1, r2}
 8003980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003982:	f7fe ffff 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8003986:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <statemachine+0x7f8>)
 8003988:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800398c:	e9cd 2300 	strd	r2, r3, [sp]
 8003990:	4a0c      	ldr	r2, [pc, #48]	; (80039c4 <statemachine+0x804>)
 8003992:	210f      	movs	r1, #15
 8003994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003996:	f011 fb55 	bl	8015044 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 800399a:	2138      	movs	r1, #56	; 0x38
 800399c:	2020      	movs	r0, #32
 800399e:	f7ff f817 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80039a2:	4a07      	ldr	r2, [pc, #28]	; (80039c0 <statemachine+0x800>)
 80039a4:	2301      	movs	r3, #1
 80039a6:	ca06      	ldmia	r2, {r1, r2}
 80039a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039aa:	f7fe ffeb 	bl	8002984 <ssd1306_WriteString>
				  						free(str);
 80039ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039b0:	f00f fc54 	bl	801325c <free>
 80039b4:	e038      	b.n	8003a28 <statemachine+0x868>
 80039b6:	bf00      	nop
 80039b8:	200006b0 	.word	0x200006b0
 80039bc:	080190bc 	.word	0x080190bc
 80039c0:	20000008 	.word	0x20000008
 80039c4:	080190c8 	.word	0x080190c8
 80039c8:	080190d0 	.word	0x080190d0
 80039cc:	080190dc 	.word	0x080190dc
 80039d0:	08019098 	.word	0x08019098
 80039d4:	20000730 	.word	0x20000730
 80039d8:	200006f4 	.word	0x200006f4
 80039dc:	200006fb 	.word	0x200006fb
 80039e0:	080190e4 	.word	0x080190e4
 80039e4:	080190f0 	.word	0x080190f0
 80039e8:	080190f4 	.word	0x080190f4
 80039ec:	080190fc 	.word	0x080190fc
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 80039f0:	2014      	movs	r0, #20
 80039f2:	f00f fc2b 	bl	801324c <malloc>
 80039f6:	4603      	mov	r3, r0
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
				  						ssd1306_SetCursor(32, 32);
 80039fa:	2120      	movs	r1, #32
 80039fc:	2020      	movs	r0, #32
 80039fe:	f7fe ffe7 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos3", Font_6x8, White);
 8003a02:	4aa1      	ldr	r2, [pc, #644]	; (8003c88 <statemachine+0xac8>)
 8003a04:	2301      	movs	r3, #1
 8003a06:	ca06      	ldmia	r2, {r1, r2}
 8003a08:	48a0      	ldr	r0, [pc, #640]	; (8003c8c <statemachine+0xacc>)
 8003a0a:	f7fe ffbb 	bl	8002984 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003a0e:	212c      	movs	r1, #44	; 0x2c
 8003a10:	2020      	movs	r0, #32
 8003a12:	f7fe ffdd 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003a16:	4a9c      	ldr	r2, [pc, #624]	; (8003c88 <statemachine+0xac8>)
 8003a18:	2301      	movs	r3, #1
 8003a1a:	ca06      	ldmia	r2, {r1, r2}
 8003a1c:	489c      	ldr	r0, [pc, #624]	; (8003c90 <statemachine+0xad0>)
 8003a1e:	f7fe ffb1 	bl	8002984 <ssd1306_WriteString>
				  						free(str);
 8003a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a24:	f00f fc1a 	bl	801325c <free>
				  					}
				  if(BTN_B>=1){
 8003a28:	4b9a      	ldr	r3, [pc, #616]	; (8003c94 <statemachine+0xad4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f340 80b9 	ble.w	8003ba4 <statemachine+0x9e4>
				  					  posstate++;
 8003a32:	4b99      	ldr	r3, [pc, #612]	; (8003c98 <statemachine+0xad8>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	3301      	adds	r3, #1
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4b97      	ldr	r3, [pc, #604]	; (8003c98 <statemachine+0xad8>)
 8003a3c:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8003a3e:	4b95      	ldr	r3, [pc, #596]	; (8003c94 <statemachine+0xad4>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
				  				  }


				  break;
 8003a44:	e0ae      	b.n	8003ba4 <statemachine+0x9e4>
			  case STATE_ALT:
				  if(myData.fix == 1){
 8003a46:	4b95      	ldr	r3, [pc, #596]	; (8003c9c <statemachine+0xadc>)
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d170      	bne.n	8003b30 <statemachine+0x970>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003a4e:	2014      	movs	r0, #20
 8003a50:	f00f fbfc 	bl	801324c <malloc>
 8003a54:	4603      	mov	r3, r0
 8003a56:	633b      	str	r3, [r7, #48]	; 0x30
				  						ssd1306_SetCursor(32, 32);
 8003a58:	2120      	movs	r1, #32
 8003a5a:	2020      	movs	r0, #32
 8003a5c:	f7fe ffb8 	bl	80029d0 <ssd1306_SetCursor>
				  						snprintf(str,15, "altitude:");
 8003a60:	4a8f      	ldr	r2, [pc, #572]	; (8003ca0 <statemachine+0xae0>)
 8003a62:	210f      	movs	r1, #15
 8003a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a66:	f011 faed 	bl	8015044 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003a6a:	4a87      	ldr	r2, [pc, #540]	; (8003c88 <statemachine+0xac8>)
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	ca06      	ldmia	r2, {r1, r2}
 8003a70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a72:	f7fe ff87 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003a76:	4b89      	ldr	r3, [pc, #548]	; (8003c9c <statemachine+0xadc>)
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fc fd64 	bl	8000548 <__aeabi_f2d>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	e9cd 2300 	strd	r2, r3, [sp]
 8003a88:	4a86      	ldr	r2, [pc, #536]	; (8003ca4 <statemachine+0xae4>)
 8003a8a:	210f      	movs	r1, #15
 8003a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8e:	f011 fad9 	bl	8015044 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003a92:	2128      	movs	r1, #40	; 0x28
 8003a94:	2020      	movs	r0, #32
 8003a96:	f7fe ff9b 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003a9a:	4a7b      	ldr	r2, [pc, #492]	; (8003c88 <statemachine+0xac8>)
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	ca06      	ldmia	r2, {r1, r2}
 8003aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aa2:	f7fe ff6f 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "Pressure:");
 8003aa6:	4a80      	ldr	r2, [pc, #512]	; (8003ca8 <statemachine+0xae8>)
 8003aa8:	210f      	movs	r1, #15
 8003aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aac:	f011 faca 	bl	8015044 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003ab0:	2130      	movs	r1, #48	; 0x30
 8003ab2:	2020      	movs	r0, #32
 8003ab4:	f7fe ff8c 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003ab8:	4a73      	ldr	r2, [pc, #460]	; (8003c88 <statemachine+0xac8>)
 8003aba:	2301      	movs	r3, #1
 8003abc:	ca06      	ldmia	r2, {r1, r2}
 8003abe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ac0:	f7fe ff60 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8003ac4:	4b75      	ldr	r3, [pc, #468]	; (8003c9c <statemachine+0xadc>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fc fd3d 	bl	8000548 <__aeabi_f2d>
 8003ace:	a36c      	add	r3, pc, #432	; (adr r3, 8003c80 <statemachine+0xac0>)
 8003ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad4:	f7fc fd90 	bl	80005f8 <__aeabi_dmul>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4610      	mov	r0, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f7fd f882 	bl	8000be8 <__aeabi_d2f>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	ee00 3a10 	vmov	s0, r3
 8003aea:	f014 f959 	bl	8017da0 <expf>
 8003aee:	eef0 7a40 	vmov.f32	s15, s0
 8003af2:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8003cac <statemachine+0xaec>
 8003af6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003afa:	ee17 0a90 	vmov	r0, s15
 8003afe:	f7fc fd23 	bl	8000548 <__aeabi_f2d>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	e9cd 2300 	strd	r2, r3, [sp]
 8003b0a:	4a69      	ldr	r2, [pc, #420]	; (8003cb0 <statemachine+0xaf0>)
 8003b0c:	210f      	movs	r1, #15
 8003b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b10:	f011 fa98 	bl	8015044 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003b14:	2138      	movs	r1, #56	; 0x38
 8003b16:	2020      	movs	r0, #32
 8003b18:	f7fe ff5a 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003b1c:	4a5a      	ldr	r2, [pc, #360]	; (8003c88 <statemachine+0xac8>)
 8003b1e:	2301      	movs	r3, #1
 8003b20:	ca06      	ldmia	r2, {r1, r2}
 8003b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b24:	f7fe ff2e 	bl	8002984 <ssd1306_WriteString>
				  						free(str);
 8003b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b2a:	f00f fb97 	bl	801325c <free>
 8003b2e:	e01b      	b.n	8003b68 <statemachine+0x9a8>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003b30:	2014      	movs	r0, #20
 8003b32:	f00f fb8b 	bl	801324c <malloc>
 8003b36:	4603      	mov	r3, r0
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
				  						ssd1306_SetCursor(32, 32);
 8003b3a:	2120      	movs	r1, #32
 8003b3c:	2020      	movs	r0, #32
 8003b3e:	f7fe ff47 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos4", Font_6x8, White);
 8003b42:	4a51      	ldr	r2, [pc, #324]	; (8003c88 <statemachine+0xac8>)
 8003b44:	2301      	movs	r3, #1
 8003b46:	ca06      	ldmia	r2, {r1, r2}
 8003b48:	485a      	ldr	r0, [pc, #360]	; (8003cb4 <statemachine+0xaf4>)
 8003b4a:	f7fe ff1b 	bl	8002984 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003b4e:	212c      	movs	r1, #44	; 0x2c
 8003b50:	2020      	movs	r0, #32
 8003b52:	f7fe ff3d 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003b56:	4a4c      	ldr	r2, [pc, #304]	; (8003c88 <statemachine+0xac8>)
 8003b58:	2301      	movs	r3, #1
 8003b5a:	ca06      	ldmia	r2, {r1, r2}
 8003b5c:	484c      	ldr	r0, [pc, #304]	; (8003c90 <statemachine+0xad0>)
 8003b5e:	f7fe ff11 	bl	8002984 <ssd1306_WriteString>
				  						free(str);
 8003b62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b64:	f00f fb7a 	bl	801325c <free>
				  					}
				  if(BTN_B>=1){
 8003b68:	4b4a      	ldr	r3, [pc, #296]	; (8003c94 <statemachine+0xad4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	dd1b      	ble.n	8003ba8 <statemachine+0x9e8>
				  					posstate--;
 8003b70:	4b49      	ldr	r3, [pc, #292]	; (8003c98 <statemachine+0xad8>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	4b47      	ldr	r3, [pc, #284]	; (8003c98 <statemachine+0xad8>)
 8003b7a:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003b7c:	4b46      	ldr	r3, [pc, #280]	; (8003c98 <statemachine+0xad8>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	4b44      	ldr	r3, [pc, #272]	; (8003c98 <statemachine+0xad8>)
 8003b86:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003b88:	4b43      	ldr	r3, [pc, #268]	; (8003c98 <statemachine+0xad8>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	4b41      	ldr	r3, [pc, #260]	; (8003c98 <statemachine+0xad8>)
 8003b92:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8003b94:	4b3f      	ldr	r3, [pc, #252]	; (8003c94 <statemachine+0xad4>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
				  				  }
				  break;
 8003b9a:	e005      	b.n	8003ba8 <statemachine+0x9e8>
				  break;
 8003b9c:	bf00      	nop
 8003b9e:	e004      	b.n	8003baa <statemachine+0x9ea>
				  break;
 8003ba0:	bf00      	nop
 8003ba2:	e002      	b.n	8003baa <statemachine+0x9ea>
				  break;
 8003ba4:	bf00      	nop
 8003ba6:	e000      	b.n	8003baa <statemachine+0x9ea>
				  break;
 8003ba8:	bf00      	nop
			  }

					if(BTN_A>=1){
 8003baa:	4b43      	ldr	r3, [pc, #268]	; (8003cb8 <statemachine+0xaf8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f341 8062 	ble.w	8004c78 <statemachine+0x1ab8>
							state++;
 8003bb4:	4b41      	ldr	r3, [pc, #260]	; (8003cbc <statemachine+0xafc>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	4b3f      	ldr	r3, [pc, #252]	; (8003cbc <statemachine+0xafc>)
 8003bbe:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8003bc0:	4b3d      	ldr	r3, [pc, #244]	; (8003cb8 <statemachine+0xaf8>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8003bc6:	4b33      	ldr	r3, [pc, #204]	; (8003c94 <statemachine+0xad4>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]


						}
			  break;
 8003bcc:	f001 b854 	b.w	8004c78 <statemachine+0x1ab8>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	f7fe fdbb 	bl	800274c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003bd6:	493a      	ldr	r1, [pc, #232]	; (8003cc0 <statemachine+0xb00>)
 8003bd8:	4830      	ldr	r0, [pc, #192]	; (8003c9c <statemachine+0xadc>)
 8003bda:	f7fe fa27 	bl	800202c <nmea_parse>
			  int heure=0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	65fb      	str	r3, [r7, #92]	; 0x5c
			  heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8003be2:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <statemachine+0xadc>)
 8003be4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b29      	ldr	r3, [pc, #164]	; (8003c9c <statemachine+0xadc>)
 8003bf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	4413      	add	r3, r2
 8003c02:	65fb      	str	r3, [r7, #92]	; 0x5c
			  if((heure+2)>=24){
 8003c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c06:	2b15      	cmp	r3, #21
 8003c08:	dd03      	ble.n	8003c12 <statemachine+0xa52>
				  heure=heure-22;
 8003c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c0c:	3b16      	subs	r3, #22
 8003c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c10:	e002      	b.n	8003c18 <statemachine+0xa58>
			  }
			  else{
				  heure=heure+2;
 8003c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c14:	3302      	adds	r3, #2
 8003c16:	65fb      	str	r3, [r7, #92]	; 0x5c
			  }

			  if(myData.fix == 1){
 8003c18:	4b20      	ldr	r3, [pc, #128]	; (8003c9c <statemachine+0xadc>)
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	f040 82e3 	bne.w	80041e8 <statemachine+0x1028>

				  switch(hrstate){
 8003c22:	4b28      	ldr	r3, [pc, #160]	; (8003cc4 <statemachine+0xb04>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <statemachine+0xa72>
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	f000 808f 	beq.w	8003d4e <statemachine+0xb8e>
 8003c30:	e2f0      	b.n	8004214 <statemachine+0x1054>
				  case STATE_DIGIT:
					  char * str = (char*)malloc(sizeof(char)*20);
 8003c32:	2014      	movs	r0, #20
 8003c34:	f00f fb0a 	bl	801324c <malloc>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	63bb      	str	r3, [r7, #56]	; 0x38
					  ssd1306_SetCursor(32, 32);
 8003c3c:	2120      	movs	r1, #32
 8003c3e:	2020      	movs	r0, #32
 8003c40:	f7fe fec6 	bl	80029d0 <ssd1306_SetCursor>
					  ssd1306_WriteString("hr GMT+2:", Font_6x8, White);
 8003c44:	4a10      	ldr	r2, [pc, #64]	; (8003c88 <statemachine+0xac8>)
 8003c46:	2301      	movs	r3, #1
 8003c48:	ca06      	ldmia	r2, {r1, r2}
 8003c4a:	481f      	ldr	r0, [pc, #124]	; (8003cc8 <statemachine+0xb08>)
 8003c4c:	f7fe fe9a 	bl	8002984 <ssd1306_WriteString>
					 ssd1306_SetCursor(34, 42);
 8003c50:	212a      	movs	r1, #42	; 0x2a
 8003c52:	2022      	movs	r0, #34	; 0x22
 8003c54:	f7fe febc 	bl	80029d0 <ssd1306_SetCursor>
					 if(heure>=10){
 8003c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c5a:	2b09      	cmp	r3, #9
 8003c5c:	dd38      	ble.n	8003cd0 <statemachine+0xb10>
					snprintf(str,15, "%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <statemachine+0xadc>)
 8003c60:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003c64:	461a      	mov	r2, r3
 8003c66:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <statemachine+0xadc>)
 8003c68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003c6c:	9301      	str	r3, [sp, #4]
 8003c6e:	9200      	str	r2, [sp, #0]
 8003c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c72:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <statemachine+0xb0c>)
 8003c74:	210f      	movs	r1, #15
 8003c76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c78:	f011 f9e4 	bl	8015044 <sniprintf>
 8003c7c:	e037      	b.n	8003cee <statemachine+0xb2e>
 8003c7e:	bf00      	nop
 8003c80:	fb798882 	.word	0xfb798882
 8003c84:	bf1e1818 	.word	0xbf1e1818
 8003c88:	20000008 	.word	0x20000008
 8003c8c:	08019108 	.word	0x08019108
 8003c90:	08019098 	.word	0x08019098
 8003c94:	200006f4 	.word	0x200006f4
 8003c98:	200006fb 	.word	0x200006fb
 8003c9c:	200006b0 	.word	0x200006b0
 8003ca0:	08019110 	.word	0x08019110
 8003ca4:	0801911c 	.word	0x0801911c
 8003ca8:	08019124 	.word	0x08019124
 8003cac:	447a0000 	.word	0x447a0000
 8003cb0:	08019130 	.word	0x08019130
 8003cb4:	0801913c 	.word	0x0801913c
 8003cb8:	200006f0 	.word	0x200006f0
 8003cbc:	200006f8 	.word	0x200006f8
 8003cc0:	200004ac 	.word	0x200004ac
 8003cc4:	200006f9 	.word	0x200006f9
 8003cc8:	08019144 	.word	0x08019144
 8003ccc:	08019150 	.word	0x08019150
					}
					else{
					 	snprintf(str,15, "0%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8003cd0:	4bb5      	ldr	r3, [pc, #724]	; (8003fa8 <statemachine+0xde8>)
 8003cd2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4bb3      	ldr	r3, [pc, #716]	; (8003fa8 <statemachine+0xde8>)
 8003cda:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	9200      	str	r2, [sp, #0]
 8003ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ce4:	4ab1      	ldr	r2, [pc, #708]	; (8003fac <statemachine+0xdec>)
 8003ce6:	210f      	movs	r1, #15
 8003ce8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cea:	f011 f9ab 	bl	8015044 <sniprintf>
					}
					ssd1306_WriteString(str, Font_7x10, White);
 8003cee:	4ab0      	ldr	r2, [pc, #704]	; (8003fb0 <statemachine+0xdf0>)
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	ca06      	ldmia	r2, {r1, r2}
 8003cf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cf6:	f7fe fe45 	bl	8002984 <ssd1306_WriteString>
					ssd1306_SetCursor(34, 52);
 8003cfa:	2134      	movs	r1, #52	; 0x34
 8003cfc:	2022      	movs	r0, #34	; 0x22
 8003cfe:	f7fe fe67 	bl	80029d0 <ssd1306_SetCursor>
					snprintf(str,15, "%c%c sec",myData.lastMeasure[4],myData.lastMeasure[5]);
 8003d02:	4ba9      	ldr	r3, [pc, #676]	; (8003fa8 <statemachine+0xde8>)
 8003d04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4ba7      	ldr	r3, [pc, #668]	; (8003fa8 <statemachine+0xde8>)
 8003d0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	4613      	mov	r3, r2
 8003d14:	4aa7      	ldr	r2, [pc, #668]	; (8003fb4 <statemachine+0xdf4>)
 8003d16:	210f      	movs	r1, #15
 8003d18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d1a:	f011 f993 	bl	8015044 <sniprintf>
					ssd1306_WriteString(str, Font_6x8, White);
 8003d1e:	4aa6      	ldr	r2, [pc, #664]	; (8003fb8 <statemachine+0xdf8>)
 8003d20:	2301      	movs	r3, #1
 8003d22:	ca06      	ldmia	r2, {r1, r2}
 8003d24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d26:	f7fe fe2d 	bl	8002984 <ssd1306_WriteString>
					free(str);
 8003d2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d2c:	f00f fa96 	bl	801325c <free>
					if(BTN_B>=1){
 8003d30:	4ba2      	ldr	r3, [pc, #648]	; (8003fbc <statemachine+0xdfc>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f340 826a 	ble.w	800420e <statemachine+0x104e>
												hrstate++;
 8003d3a:	4ba1      	ldr	r3, [pc, #644]	; (8003fc0 <statemachine+0xe00>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	4b9f      	ldr	r3, [pc, #636]	; (8003fc0 <statemachine+0xe00>)
 8003d44:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 8003d46:	4b9d      	ldr	r3, [pc, #628]	; (8003fbc <statemachine+0xdfc>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
											}




					  break;
 8003d4c:	e25f      	b.n	800420e <statemachine+0x104e>
				  case STATE_OLD:
					  if(heure>12){
 8003d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d50:	2b0c      	cmp	r3, #12
 8003d52:	dd02      	ble.n	8003d5a <statemachine+0xb9a>
						  heure=heure-12;
 8003d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d56:	3b0c      	subs	r3, #12
 8003d58:	65fb      	str	r3, [r7, #92]	; 0x5c
					  }
					  int minute=0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
					  minute=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8003d5e:	4b92      	ldr	r3, [pc, #584]	; (8003fa8 <statemachine+0xde8>)
 8003d60:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003d64:	f003 020f 	and.w	r2, r3, #15
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	461a      	mov	r2, r3
 8003d72:	4b8d      	ldr	r3, [pc, #564]	; (8003fa8 <statemachine+0xde8>)
 8003d74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	4413      	add	r3, r2
 8003d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
					  ssd1306_DrawCircle(64, 48, 12, White);
 8003d80:	2301      	movs	r3, #1
 8003d82:	220c      	movs	r2, #12
 8003d84:	2130      	movs	r1, #48	; 0x30
 8003d86:	2040      	movs	r0, #64	; 0x40
 8003d88:	f7fe fea6 	bl	8002ad8 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-heure)*M_PI/6)),48-floor(6*sin((3-heure)*M_PI/6)),White);
 8003d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d8e:	f1c3 0303 	rsb	r3, r3, #3
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fc fbc6 	bl	8000524 <__aeabi_i2d>
 8003d98:	a381      	add	r3, pc, #516	; (adr r3, 8003fa0 <statemachine+0xde0>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f7fc fc2b 	bl	80005f8 <__aeabi_dmul>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4610      	mov	r0, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	4b85      	ldr	r3, [pc, #532]	; (8003fc4 <statemachine+0xe04>)
 8003db0:	f7fc fd4c 	bl	800084c <__aeabi_ddiv>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	ec43 2b17 	vmov	d7, r2, r3
 8003dbc:	eeb0 0a47 	vmov.f32	s0, s14
 8003dc0:	eef0 0a67 	vmov.f32	s1, s15
 8003dc4:	f013 ff40 	bl	8017c48 <cos>
 8003dc8:	ec51 0b10 	vmov	r0, r1, d0
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	4b7c      	ldr	r3, [pc, #496]	; (8003fc4 <statemachine+0xe04>)
 8003dd2:	f7fc fc11 	bl	80005f8 <__aeabi_dmul>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	ec43 2b17 	vmov	d7, r2, r3
 8003dde:	eeb0 0a47 	vmov.f32	s0, s14
 8003de2:	eef0 0a67 	vmov.f32	s1, s15
 8003de6:	f014 f81f 	bl	8017e28 <floor>
 8003dea:	ec51 0b10 	vmov	r0, r1, d0
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	4b75      	ldr	r3, [pc, #468]	; (8003fc8 <statemachine+0xe08>)
 8003df4:	f7fc fa4a 	bl	800028c <__adddf3>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f7fc fed2 	bl	8000ba8 <__aeabi_d2uiz>
 8003e04:	4603      	mov	r3, r0
 8003e06:	b2dc      	uxtb	r4, r3
 8003e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0a:	f1c3 0303 	rsb	r3, r3, #3
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fc fb88 	bl	8000524 <__aeabi_i2d>
 8003e14:	a362      	add	r3, pc, #392	; (adr r3, 8003fa0 <statemachine+0xde0>)
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	f7fc fbed 	bl	80005f8 <__aeabi_dmul>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4610      	mov	r0, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <statemachine+0xe04>)
 8003e2c:	f7fc fd0e 	bl	800084c <__aeabi_ddiv>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	ec43 2b17 	vmov	d7, r2, r3
 8003e38:	eeb0 0a47 	vmov.f32	s0, s14
 8003e3c:	eef0 0a67 	vmov.f32	s1, s15
 8003e40:	f013 ff56 	bl	8017cf0 <sin>
 8003e44:	ec51 0b10 	vmov	r0, r1, d0
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	4b5d      	ldr	r3, [pc, #372]	; (8003fc4 <statemachine+0xe04>)
 8003e4e:	f7fc fbd3 	bl	80005f8 <__aeabi_dmul>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	ec43 2b17 	vmov	d7, r2, r3
 8003e5a:	eeb0 0a47 	vmov.f32	s0, s14
 8003e5e:	eef0 0a67 	vmov.f32	s1, s15
 8003e62:	f013 ffe1 	bl	8017e28 <floor>
 8003e66:	ec53 2b10 	vmov	r2, r3, d0
 8003e6a:	f04f 0000 	mov.w	r0, #0
 8003e6e:	4957      	ldr	r1, [pc, #348]	; (8003fcc <statemachine+0xe0c>)
 8003e70:	f7fc fa0a 	bl	8000288 <__aeabi_dsub>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f7fc fe94 	bl	8000ba8 <__aeabi_d2uiz>
 8003e80:	4603      	mov	r3, r0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2201      	movs	r2, #1
 8003e86:	9200      	str	r2, [sp, #0]
 8003e88:	4622      	mov	r2, r4
 8003e8a:	2130      	movs	r1, #48	; 0x30
 8003e8c:	2040      	movs	r0, #64	; 0x40
 8003e8e:	f7fe fdb7 	bl	8002a00 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-minute)*M_PI/30)),48-floor(12*sin((15-minute)*M_PI/30)),White);
 8003e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e94:	f1c3 030f 	rsb	r3, r3, #15
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fc fb43 	bl	8000524 <__aeabi_i2d>
 8003e9e:	a340      	add	r3, pc, #256	; (adr r3, 8003fa0 <statemachine+0xde0>)
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	f7fc fba8 	bl	80005f8 <__aeabi_dmul>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4610      	mov	r0, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <statemachine+0xe10>)
 8003eb6:	f7fc fcc9 	bl	800084c <__aeabi_ddiv>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	ec43 2b17 	vmov	d7, r2, r3
 8003ec2:	eeb0 0a47 	vmov.f32	s0, s14
 8003ec6:	eef0 0a67 	vmov.f32	s1, s15
 8003eca:	f013 febd 	bl	8017c48 <cos>
 8003ece:	ec51 0b10 	vmov	r0, r1, d0
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	4b3f      	ldr	r3, [pc, #252]	; (8003fd4 <statemachine+0xe14>)
 8003ed8:	f7fc fb8e 	bl	80005f8 <__aeabi_dmul>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	ec43 2b17 	vmov	d7, r2, r3
 8003ee4:	eeb0 0a47 	vmov.f32	s0, s14
 8003ee8:	eef0 0a67 	vmov.f32	s1, s15
 8003eec:	f013 ff9c 	bl	8017e28 <floor>
 8003ef0:	ec51 0b10 	vmov	r0, r1, d0
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	4b33      	ldr	r3, [pc, #204]	; (8003fc8 <statemachine+0xe08>)
 8003efa:	f7fc f9c7 	bl	800028c <__adddf3>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4610      	mov	r0, r2
 8003f04:	4619      	mov	r1, r3
 8003f06:	f7fc fe4f 	bl	8000ba8 <__aeabi_d2uiz>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	b2dc      	uxtb	r4, r3
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f10:	f1c3 030f 	rsb	r3, r3, #15
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fc fb05 	bl	8000524 <__aeabi_i2d>
 8003f1a:	a321      	add	r3, pc, #132	; (adr r3, 8003fa0 <statemachine+0xde0>)
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f7fc fb6a 	bl	80005f8 <__aeabi_dmul>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <statemachine+0xe10>)
 8003f32:	f7fc fc8b 	bl	800084c <__aeabi_ddiv>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	ec43 2b17 	vmov	d7, r2, r3
 8003f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8003f42:	eef0 0a67 	vmov.f32	s1, s15
 8003f46:	f013 fed3 	bl	8017cf0 <sin>
 8003f4a:	ec51 0b10 	vmov	r0, r1, d0
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <statemachine+0xe14>)
 8003f54:	f7fc fb50 	bl	80005f8 <__aeabi_dmul>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	ec43 2b17 	vmov	d7, r2, r3
 8003f60:	eeb0 0a47 	vmov.f32	s0, s14
 8003f64:	eef0 0a67 	vmov.f32	s1, s15
 8003f68:	f013 ff5e 	bl	8017e28 <floor>
 8003f6c:	ec53 2b10 	vmov	r2, r3, d0
 8003f70:	f04f 0000 	mov.w	r0, #0
 8003f74:	4915      	ldr	r1, [pc, #84]	; (8003fcc <statemachine+0xe0c>)
 8003f76:	f7fc f987 	bl	8000288 <__aeabi_dsub>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	f7fc fe11 	bl	8000ba8 <__aeabi_d2uiz>
 8003f86:	4603      	mov	r3, r0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	9200      	str	r2, [sp, #0]
 8003f8e:	4622      	mov	r2, r4
 8003f90:	2130      	movs	r1, #48	; 0x30
 8003f92:	2040      	movs	r0, #64	; 0x40
 8003f94:	f7fe fd34 	bl	8002a00 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8003f98:	2300      	movs	r3, #0
 8003f9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f9c:	e112      	b.n	80041c4 <statemachine+0x1004>
 8003f9e:	bf00      	nop
 8003fa0:	54442d18 	.word	0x54442d18
 8003fa4:	400921fb 	.word	0x400921fb
 8003fa8:	200006b0 	.word	0x200006b0
 8003fac:	08019158 	.word	0x08019158
 8003fb0:	20000010 	.word	0x20000010
 8003fb4:	08019164 	.word	0x08019164
 8003fb8:	20000008 	.word	0x20000008
 8003fbc:	200006f4 	.word	0x200006f4
 8003fc0:	200006f9 	.word	0x200006f9
 8003fc4:	40180000 	.word	0x40180000
 8003fc8:	40500000 	.word	0x40500000
 8003fcc:	40480000 	.word	0x40480000
 8003fd0:	403e0000 	.word	0x403e0000
 8003fd4:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 8003fd8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003fda:	f7fc faa3 	bl	8000524 <__aeabi_i2d>
 8003fde:	a3c6      	add	r3, pc, #792	; (adr r3, 80042f8 <statemachine+0x1138>)
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f7fc fb08 	bl	80005f8 <__aeabi_dmul>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4610      	mov	r0, r2
 8003fee:	4619      	mov	r1, r3
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	4bc2      	ldr	r3, [pc, #776]	; (8004300 <statemachine+0x1140>)
 8003ff6:	f7fc fc29 	bl	800084c <__aeabi_ddiv>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	ec43 2b17 	vmov	d7, r2, r3
 8004002:	eeb0 0a47 	vmov.f32	s0, s14
 8004006:	eef0 0a67 	vmov.f32	s1, s15
 800400a:	f013 fe1d 	bl	8017c48 <cos>
 800400e:	ec51 0b10 	vmov	r0, r1, d0
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	4bbb      	ldr	r3, [pc, #748]	; (8004304 <statemachine+0x1144>)
 8004018:	f7fc faee 	bl	80005f8 <__aeabi_dmul>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	ec43 2b17 	vmov	d7, r2, r3
 8004024:	eeb0 0a47 	vmov.f32	s0, s14
 8004028:	eef0 0a67 	vmov.f32	s1, s15
 800402c:	f013 fefc 	bl	8017e28 <floor>
 8004030:	ec51 0b10 	vmov	r0, r1, d0
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	4bb3      	ldr	r3, [pc, #716]	; (8004308 <statemachine+0x1148>)
 800403a:	f7fc f927 	bl	800028c <__adddf3>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4610      	mov	r0, r2
 8004044:	4619      	mov	r1, r3
 8004046:	f7fc fdaf 	bl	8000ba8 <__aeabi_d2uiz>
 800404a:	4603      	mov	r3, r0
 800404c:	b2dc      	uxtb	r4, r3
 800404e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004050:	f7fc fa68 	bl	8000524 <__aeabi_i2d>
 8004054:	a3a8      	add	r3, pc, #672	; (adr r3, 80042f8 <statemachine+0x1138>)
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	f7fc facd 	bl	80005f8 <__aeabi_dmul>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4610      	mov	r0, r2
 8004064:	4619      	mov	r1, r3
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	4ba5      	ldr	r3, [pc, #660]	; (8004300 <statemachine+0x1140>)
 800406c:	f7fc fbee 	bl	800084c <__aeabi_ddiv>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	ec43 2b17 	vmov	d7, r2, r3
 8004078:	eeb0 0a47 	vmov.f32	s0, s14
 800407c:	eef0 0a67 	vmov.f32	s1, s15
 8004080:	f013 fe36 	bl	8017cf0 <sin>
 8004084:	ec51 0b10 	vmov	r0, r1, d0
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	4b9d      	ldr	r3, [pc, #628]	; (8004304 <statemachine+0x1144>)
 800408e:	f7fc fab3 	bl	80005f8 <__aeabi_dmul>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	ec43 2b17 	vmov	d7, r2, r3
 800409a:	eeb0 0a47 	vmov.f32	s0, s14
 800409e:	eef0 0a67 	vmov.f32	s1, s15
 80040a2:	f013 fec1 	bl	8017e28 <floor>
 80040a6:	ec51 0b10 	vmov	r0, r1, d0
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	4b97      	ldr	r3, [pc, #604]	; (800430c <statemachine+0x114c>)
 80040b0:	f7fc f8ec 	bl	800028c <__adddf3>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	f7fc fd74 	bl	8000ba8 <__aeabi_d2uiz>
 80040c0:	4603      	mov	r3, r0
 80040c2:	b2dd      	uxtb	r5, r3
 80040c4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80040c6:	f7fc fa2d 	bl	8000524 <__aeabi_i2d>
 80040ca:	a38b      	add	r3, pc, #556	; (adr r3, 80042f8 <statemachine+0x1138>)
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f7fc fa92 	bl	80005f8 <__aeabi_dmul>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	4b87      	ldr	r3, [pc, #540]	; (8004300 <statemachine+0x1140>)
 80040e2:	f7fc fbb3 	bl	800084c <__aeabi_ddiv>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	ec43 2b17 	vmov	d7, r2, r3
 80040ee:	eeb0 0a47 	vmov.f32	s0, s14
 80040f2:	eef0 0a67 	vmov.f32	s1, s15
 80040f6:	f013 fda7 	bl	8017c48 <cos>
 80040fa:	ec51 0b10 	vmov	r0, r1, d0
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	4b83      	ldr	r3, [pc, #524]	; (8004310 <statemachine+0x1150>)
 8004104:	f7fc fa78 	bl	80005f8 <__aeabi_dmul>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	ec43 2b17 	vmov	d7, r2, r3
 8004110:	eeb0 0a47 	vmov.f32	s0, s14
 8004114:	eef0 0a67 	vmov.f32	s1, s15
 8004118:	f013 fe86 	bl	8017e28 <floor>
 800411c:	ec51 0b10 	vmov	r0, r1, d0
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	4b78      	ldr	r3, [pc, #480]	; (8004308 <statemachine+0x1148>)
 8004126:	f7fc f8b1 	bl	800028c <__adddf3>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4610      	mov	r0, r2
 8004130:	4619      	mov	r1, r3
 8004132:	f7fc fd39 	bl	8000ba8 <__aeabi_d2uiz>
 8004136:	4603      	mov	r3, r0
 8004138:	b2de      	uxtb	r6, r3
 800413a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800413c:	f7fc f9f2 	bl	8000524 <__aeabi_i2d>
 8004140:	a36d      	add	r3, pc, #436	; (adr r3, 80042f8 <statemachine+0x1138>)
 8004142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004146:	f7fc fa57 	bl	80005f8 <__aeabi_dmul>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	4610      	mov	r0, r2
 8004150:	4619      	mov	r1, r3
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	4b6a      	ldr	r3, [pc, #424]	; (8004300 <statemachine+0x1140>)
 8004158:	f7fc fb78 	bl	800084c <__aeabi_ddiv>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	ec43 2b17 	vmov	d7, r2, r3
 8004164:	eeb0 0a47 	vmov.f32	s0, s14
 8004168:	eef0 0a67 	vmov.f32	s1, s15
 800416c:	f013 fdc0 	bl	8017cf0 <sin>
 8004170:	ec51 0b10 	vmov	r0, r1, d0
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	4b65      	ldr	r3, [pc, #404]	; (8004310 <statemachine+0x1150>)
 800417a:	f7fc fa3d 	bl	80005f8 <__aeabi_dmul>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	ec43 2b17 	vmov	d7, r2, r3
 8004186:	eeb0 0a47 	vmov.f32	s0, s14
 800418a:	eef0 0a67 	vmov.f32	s1, s15
 800418e:	f013 fe4b 	bl	8017e28 <floor>
 8004192:	ec51 0b10 	vmov	r0, r1, d0
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	4b5c      	ldr	r3, [pc, #368]	; (800430c <statemachine+0x114c>)
 800419c:	f7fc f876 	bl	800028c <__adddf3>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	f7fc fcfe 	bl	8000ba8 <__aeabi_d2uiz>
 80041ac:	4603      	mov	r3, r0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2201      	movs	r2, #1
 80041b2:	9200      	str	r2, [sp, #0]
 80041b4:	4632      	mov	r2, r6
 80041b6:	4629      	mov	r1, r5
 80041b8:	4620      	mov	r0, r4
 80041ba:	f7fe fc21 	bl	8002a00 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 80041be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041c0:	3301      	adds	r3, #1
 80041c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80041c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041c6:	2b0c      	cmp	r3, #12
 80041c8:	f77f af06 	ble.w	8003fd8 <statemachine+0xe18>
					  }
					  if(BTN_B>=1){
 80041cc:	4b51      	ldr	r3, [pc, #324]	; (8004314 <statemachine+0x1154>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	dd1e      	ble.n	8004212 <statemachine+0x1052>
					  	hrstate--;
 80041d4:	4b50      	ldr	r3, [pc, #320]	; (8004318 <statemachine+0x1158>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	3b01      	subs	r3, #1
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	4b4e      	ldr	r3, [pc, #312]	; (8004318 <statemachine+0x1158>)
 80041de:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 80041e0:	4b4c      	ldr	r3, [pc, #304]	; (8004314 <statemachine+0x1154>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
					  }


					  break;
 80041e6:	e014      	b.n	8004212 <statemachine+0x1052>

				  }

			  			 					}
			  			 	else{ //if the GPS doesn't have a fix, print a message
			  			 						char *str = (char*)malloc(sizeof(char)*20);
 80041e8:	2014      	movs	r0, #20
 80041ea:	f00f f82f 	bl	801324c <malloc>
 80041ee:	4603      	mov	r3, r0
 80041f0:	643b      	str	r3, [r7, #64]	; 0x40
			  			 						ssd1306_SetCursor(32, 44);
 80041f2:	212c      	movs	r1, #44	; 0x2c
 80041f4:	2020      	movs	r0, #32
 80041f6:	f7fe fbeb 	bl	80029d0 <ssd1306_SetCursor>
			  			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80041fa:	4a48      	ldr	r2, [pc, #288]	; (800431c <statemachine+0x115c>)
 80041fc:	2301      	movs	r3, #1
 80041fe:	ca06      	ldmia	r2, {r1, r2}
 8004200:	4847      	ldr	r0, [pc, #284]	; (8004320 <statemachine+0x1160>)
 8004202:	f7fe fbbf 	bl	8002984 <ssd1306_WriteString>
			  			 						free(str);
 8004206:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004208:	f00f f828 	bl	801325c <free>
 800420c:	e002      	b.n	8004214 <statemachine+0x1054>
					  break;
 800420e:	bf00      	nop
 8004210:	e000      	b.n	8004214 <statemachine+0x1054>
					  break;
 8004212:	bf00      	nop
			  			 	}
				  if(BTN_A>=1){
 8004214:	4b43      	ldr	r3, [pc, #268]	; (8004324 <statemachine+0x1164>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f340 852f 	ble.w	8004c7c <statemachine+0x1abc>
			  		state++;
 800421e:	4b42      	ldr	r3, [pc, #264]	; (8004328 <statemachine+0x1168>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	3301      	adds	r3, #1
 8004224:	b2da      	uxtb	r2, r3
 8004226:	4b40      	ldr	r3, [pc, #256]	; (8004328 <statemachine+0x1168>)
 8004228:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 800422a:	4b3e      	ldr	r3, [pc, #248]	; (8004324 <statemachine+0x1164>)
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004230:	4b38      	ldr	r3, [pc, #224]	; (8004314 <statemachine+0x1154>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8004236:	f000 bd21 	b.w	8004c7c <statemachine+0x1abc>
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 800423a:	2000      	movs	r0, #0
 800423c:	f7fe fa86 	bl	800274c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8004240:	493a      	ldr	r1, [pc, #232]	; (800432c <statemachine+0x116c>)
 8004242:	483b      	ldr	r0, [pc, #236]	; (8004330 <statemachine+0x1170>)
 8004244:	f7fd fef2 	bl	800202c <nmea_parse>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8004248:	4b39      	ldr	r3, [pc, #228]	; (8004330 <statemachine+0x1170>)
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	2b01      	cmp	r3, #1
 800424e:	d17b      	bne.n	8004348 <statemachine+0x1188>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 8004250:	2014      	movs	r0, #20
 8004252:	f00e fffb 	bl	801324c <malloc>
 8004256:	4603      	mov	r3, r0
 8004258:	647b      	str	r3, [r7, #68]	; 0x44
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 800425a:	4b35      	ldr	r3, [pc, #212]	; (8004330 <statemachine+0x1170>)
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fc f972 	bl	8000548 <__aeabi_f2d>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	e9cd 2300 	strd	r2, r3, [sp]
 800426c:	4a31      	ldr	r2, [pc, #196]	; (8004334 <statemachine+0x1174>)
 800426e:	210f      	movs	r1, #15
 8004270:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004272:	f010 fee7 	bl	8015044 <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 8004276:	2120      	movs	r1, #32
 8004278:	2020      	movs	r0, #32
 800427a:	f7fe fba9 	bl	80029d0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 800427e:	4a27      	ldr	r2, [pc, #156]	; (800431c <statemachine+0x115c>)
 8004280:	2301      	movs	r3, #1
 8004282:	ca06      	ldmia	r2, {r1, r2}
 8004284:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004286:	f7fe fb7d 	bl	8002984 <ssd1306_WriteString>
			 			 						snprintf(str,20, "v=%0.2fV",vbat);
 800428a:	4b2b      	ldr	r3, [pc, #172]	; (8004338 <statemachine+0x1178>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fc f95a 	bl	8000548 <__aeabi_f2d>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	e9cd 2300 	strd	r2, r3, [sp]
 800429c:	4a27      	ldr	r2, [pc, #156]	; (800433c <statemachine+0x117c>)
 800429e:	2114      	movs	r1, #20
 80042a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80042a2:	f010 fecf 	bl	8015044 <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 80042a6:	212a      	movs	r1, #42	; 0x2a
 80042a8:	2020      	movs	r0, #32
 80042aa:	f7fe fb91 	bl	80029d0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80042ae:	4a1b      	ldr	r2, [pc, #108]	; (800431c <statemachine+0x115c>)
 80042b0:	2301      	movs	r3, #1
 80042b2:	ca06      	ldmia	r2, {r1, r2}
 80042b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80042b6:	f7fe fb65 	bl	8002984 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 80042ba:	2132      	movs	r1, #50	; 0x32
 80042bc:	2020      	movs	r0, #32
 80042be:	f7fe fb87 	bl	80029d0 <ssd1306_SetCursor>
			 			 						snprintf(str,15,  "T=%0.2fC",temp);
 80042c2:	4b1f      	ldr	r3, [pc, #124]	; (8004340 <statemachine+0x1180>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fc f93e 	bl	8000548 <__aeabi_f2d>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	e9cd 2300 	strd	r2, r3, [sp]
 80042d4:	4a1b      	ldr	r2, [pc, #108]	; (8004344 <statemachine+0x1184>)
 80042d6:	210f      	movs	r1, #15
 80042d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80042da:	f010 feb3 	bl	8015044 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80042de:	4a0f      	ldr	r2, [pc, #60]	; (800431c <statemachine+0x115c>)
 80042e0:	2301      	movs	r3, #1
 80042e2:	ca06      	ldmia	r2, {r1, r2}
 80042e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80042e6:	f7fe fb4d 	bl	8002984 <ssd1306_WriteString>
			 			 						free(str);
 80042ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80042ec:	f00e ffb6 	bl	801325c <free>
 80042f0:	e06c      	b.n	80043cc <statemachine+0x120c>
 80042f2:	bf00      	nop
 80042f4:	f3af 8000 	nop.w
 80042f8:	54442d18 	.word	0x54442d18
 80042fc:	400921fb 	.word	0x400921fb
 8004300:	40180000 	.word	0x40180000
 8004304:	40240000 	.word	0x40240000
 8004308:	40500000 	.word	0x40500000
 800430c:	40480000 	.word	0x40480000
 8004310:	40280000 	.word	0x40280000
 8004314:	200006f4 	.word	0x200006f4
 8004318:	200006f9 	.word	0x200006f9
 800431c:	20000008 	.word	0x20000008
 8004320:	08019098 	.word	0x08019098
 8004324:	200006f0 	.word	0x200006f0
 8004328:	200006f8 	.word	0x200006f8
 800432c:	200004ac 	.word	0x200004ac
 8004330:	200006b0 	.word	0x200006b0
 8004334:	08019170 	.word	0x08019170
 8004338:	20000730 	.word	0x20000730
 800433c:	0801917c 	.word	0x0801917c
 8004340:	20000728 	.word	0x20000728
 8004344:	08019188 	.word	0x08019188
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 8004348:	2014      	movs	r0, #20
 800434a:	f00e ff7f 	bl	801324c <malloc>
 800434e:	4603      	mov	r3, r0
 8004350:	64bb      	str	r3, [r7, #72]	; 0x48
			 			 						ssd1306_SetCursor(32, 32);
 8004352:	2120      	movs	r1, #32
 8004354:	2020      	movs	r0, #32
 8004356:	f7fe fb3b 	bl	80029d0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("INFO", Font_6x8, White);
 800435a:	4a9e      	ldr	r2, [pc, #632]	; (80045d4 <statemachine+0x1414>)
 800435c:	2301      	movs	r3, #1
 800435e:	ca06      	ldmia	r2, {r1, r2}
 8004360:	489d      	ldr	r0, [pc, #628]	; (80045d8 <statemachine+0x1418>)
 8004362:	f7fe fb0f 	bl	8002984 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 41);
 8004366:	2129      	movs	r1, #41	; 0x29
 8004368:	2020      	movs	r0, #32
 800436a:	f7fe fb31 	bl	80029d0 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "vbat=%0.2fV",vbat);
 800436e:	4b9b      	ldr	r3, [pc, #620]	; (80045dc <statemachine+0x141c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fc f8e8 	bl	8000548 <__aeabi_f2d>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	e9cd 2300 	strd	r2, r3, [sp]
 8004380:	4a97      	ldr	r2, [pc, #604]	; (80045e0 <statemachine+0x1420>)
 8004382:	210f      	movs	r1, #15
 8004384:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004386:	f010 fe5d 	bl	8015044 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 800438a:	4a92      	ldr	r2, [pc, #584]	; (80045d4 <statemachine+0x1414>)
 800438c:	2301      	movs	r3, #1
 800438e:	ca06      	ldmia	r2, {r1, r2}
 8004390:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004392:	f7fe faf7 	bl	8002984 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8004396:	2132      	movs	r1, #50	; 0x32
 8004398:	2020      	movs	r0, #32
 800439a:	f7fe fb19 	bl	80029d0 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "T=%0.2fC",temp);
 800439e:	4b91      	ldr	r3, [pc, #580]	; (80045e4 <statemachine+0x1424>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fc f8d0 	bl	8000548 <__aeabi_f2d>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	e9cd 2300 	strd	r2, r3, [sp]
 80043b0:	4a8d      	ldr	r2, [pc, #564]	; (80045e8 <statemachine+0x1428>)
 80043b2:	210f      	movs	r1, #15
 80043b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80043b6:	f010 fe45 	bl	8015044 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80043ba:	4a86      	ldr	r2, [pc, #536]	; (80045d4 <statemachine+0x1414>)
 80043bc:	2301      	movs	r3, #1
 80043be:	ca06      	ldmia	r2, {r1, r2}
 80043c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80043c2:	f7fe fadf 	bl	8002984 <ssd1306_WriteString>
			 			 						free(str);
 80043c6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80043c8:	f00e ff48 	bl	801325c <free>
			 			 					}
			  if(BTN_A>=1){
 80043cc:	4b87      	ldr	r3, [pc, #540]	; (80045ec <statemachine+0x142c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f340 8455 	ble.w	8004c80 <statemachine+0x1ac0>
			  		state++;
 80043d6:	4b86      	ldr	r3, [pc, #536]	; (80045f0 <statemachine+0x1430>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	3301      	adds	r3, #1
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	4b84      	ldr	r3, [pc, #528]	; (80045f0 <statemachine+0x1430>)
 80043e0:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 80043e2:	4b82      	ldr	r3, [pc, #520]	; (80045ec <statemachine+0x142c>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 80043e8:	4b82      	ldr	r3, [pc, #520]	; (80045f4 <statemachine+0x1434>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 80043ee:	f000 bc47 	b.w	8004c80 <statemachine+0x1ac0>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 80043f2:	2000      	movs	r0, #0
 80043f4:	f7fe f9aa 	bl	800274c <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 80043f8:	2120      	movs	r1, #32
 80043fa:	2020      	movs	r0, #32
 80043fc:	f7fe fae8 	bl	80029d0 <ssd1306_SetCursor>
			  char *str = (char*)malloc(sizeof(char)*20);
 8004400:	2014      	movs	r0, #20
 8004402:	f00e ff23 	bl	801324c <malloc>
 8004406:	4603      	mov	r3, r0
 8004408:	64fb      	str	r3, [r7, #76]	; 0x4c
			  ssd1306_WriteString("chrono", Font_6x8, White);
 800440a:	4a72      	ldr	r2, [pc, #456]	; (80045d4 <statemachine+0x1414>)
 800440c:	2301      	movs	r3, #1
 800440e:	ca06      	ldmia	r2, {r1, r2}
 8004410:	4879      	ldr	r0, [pc, #484]	; (80045f8 <statemachine+0x1438>)
 8004412:	f7fe fab7 	bl	8002984 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 8004416:	2128      	movs	r1, #40	; 0x28
 8004418:	2020      	movs	r0, #32
 800441a:	f7fe fad9 	bl	80029d0 <ssd1306_SetCursor>

			  switch(chronostate){
 800441e:	4b77      	ldr	r3, [pc, #476]	; (80045fc <statemachine+0x143c>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d038      	beq.n	8004498 <statemachine+0x12d8>
 8004426:	2b02      	cmp	r3, #2
 8004428:	dc4f      	bgt.n	80044ca <statemachine+0x130a>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <statemachine+0x1274>
 800442e:	2b01      	cmp	r3, #1
 8004430:	d01d      	beq.n	800446e <statemachine+0x12ae>
 8004432:	e04a      	b.n	80044ca <statemachine+0x130a>
			  case STATE_RESET:
				  min=0;
 8004434:	4b72      	ldr	r3, [pc, #456]	; (8004600 <statemachine+0x1440>)
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
				  seconde=0;
 800443c:	4b71      	ldr	r3, [pc, #452]	; (8004604 <statemachine+0x1444>)
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8004444:	4b70      	ldr	r3, [pc, #448]	; (8004608 <statemachine+0x1448>)
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
				  	 if(BTN_B>=1){
 800444a:	4b6a      	ldr	r3, [pc, #424]	; (80045f4 <statemachine+0x1434>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	dd36      	ble.n	80044c0 <statemachine+0x1300>
				  		chronostate++;
 8004452:	4b6a      	ldr	r3, [pc, #424]	; (80045fc <statemachine+0x143c>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	3301      	adds	r3, #1
 8004458:	b2da      	uxtb	r2, r3
 800445a:	4b68      	ldr	r3, [pc, #416]	; (80045fc <statemachine+0x143c>)
 800445c:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 800445e:	4b65      	ldr	r3, [pc, #404]	; (80045f4 <statemachine+0x1434>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8004464:	4b69      	ldr	r3, [pc, #420]	; (800460c <statemachine+0x144c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a69      	ldr	r2, [pc, #420]	; (8004610 <statemachine+0x1450>)
 800446a:	6013      	str	r3, [r2, #0]

				  }


				  break;
 800446c:	e028      	b.n	80044c0 <statemachine+0x1300>
			  case STATE_RUN:
				  calctime=uwTick-starttime;
 800446e:	4b67      	ldr	r3, [pc, #412]	; (800460c <statemachine+0x144c>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4b67      	ldr	r3, [pc, #412]	; (8004610 <statemachine+0x1450>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	4a63      	ldr	r2, [pc, #396]	; (8004608 <statemachine+0x1448>)
 800447a:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 800447c:	4b5d      	ldr	r3, [pc, #372]	; (80045f4 <statemachine+0x1434>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	dd1f      	ble.n	80044c4 <statemachine+0x1304>
				  		chronostate++;
 8004484:	4b5d      	ldr	r3, [pc, #372]	; (80045fc <statemachine+0x143c>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	3301      	adds	r3, #1
 800448a:	b2da      	uxtb	r2, r3
 800448c:	4b5b      	ldr	r3, [pc, #364]	; (80045fc <statemachine+0x143c>)
 800448e:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004490:	4b58      	ldr	r3, [pc, #352]	; (80045f4 <statemachine+0x1434>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8004496:	e015      	b.n	80044c4 <statemachine+0x1304>
			  case STATE_PAUSE:
				  if(BTN_B>=1){
 8004498:	4b56      	ldr	r3, [pc, #344]	; (80045f4 <statemachine+0x1434>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	dd13      	ble.n	80044c8 <statemachine+0x1308>
				  			chronostate--;
 80044a0:	4b56      	ldr	r3, [pc, #344]	; (80045fc <statemachine+0x143c>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	4b54      	ldr	r3, [pc, #336]	; (80045fc <statemachine+0x143c>)
 80044aa:	701a      	strb	r2, [r3, #0]
				  			chronostate--;
 80044ac:	4b53      	ldr	r3, [pc, #332]	; (80045fc <statemachine+0x143c>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	4b51      	ldr	r3, [pc, #324]	; (80045fc <statemachine+0x143c>)
 80044b6:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 80044b8:	4b4e      	ldr	r3, [pc, #312]	; (80045f4 <statemachine+0x1434>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
			 }

				  break;
 80044be:	e003      	b.n	80044c8 <statemachine+0x1308>
				  break;
 80044c0:	bf00      	nop
 80044c2:	e002      	b.n	80044ca <statemachine+0x130a>
				  break;
 80044c4:	bf00      	nop
 80044c6:	e000      	b.n	80044ca <statemachine+0x130a>
				  break;
 80044c8:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 80044ca:	4b4f      	ldr	r3, [pc, #316]	; (8004608 <statemachine+0x1448>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	ee07 3a90 	vmov	s15, r3
 80044d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004614 <statemachine+0x1454>
 80044da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80044de:	ee16 0a90 	vmov	r0, s13
 80044e2:	f7fc f831 	bl	8000548 <__aeabi_f2d>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	ec43 2b10 	vmov	d0, r2, r3
 80044ee:	f013 fc9b 	bl	8017e28 <floor>
 80044f2:	ec53 2b10 	vmov	r2, r3, d0
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	f7fc fb75 	bl	8000be8 <__aeabi_d2f>
 80044fe:	4603      	mov	r3, r0
 8004500:	4a3f      	ldr	r2, [pc, #252]	; (8004600 <statemachine+0x1440>)
 8004502:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8004504:	4b40      	ldr	r3, [pc, #256]	; (8004608 <statemachine+0x1448>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	ee07 3a90 	vmov	s15, r3
 800450c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004510:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <statemachine+0x1440>)
 8004512:	edd3 7a00 	vldr	s15, [r3]
 8004516:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8004614 <statemachine+0x1454>
 800451a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800451e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004522:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004618 <statemachine+0x1458>
 8004526:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800452a:	4b36      	ldr	r3, [pc, #216]	; (8004604 <statemachine+0x1444>)
 800452c:	edc3 7a00 	vstr	s15, [r3]
			  snprintf(str,15, "%0.0fmin",min);
 8004530:	4b33      	ldr	r3, [pc, #204]	; (8004600 <statemachine+0x1440>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fc f807 	bl	8000548 <__aeabi_f2d>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	e9cd 2300 	strd	r2, r3, [sp]
 8004542:	4a36      	ldr	r2, [pc, #216]	; (800461c <statemachine+0x145c>)
 8004544:	210f      	movs	r1, #15
 8004546:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004548:	f010 fd7c 	bl	8015044 <sniprintf>
			  ssd1306_WriteString(str, Font_7x10, White);
 800454c:	4a34      	ldr	r2, [pc, #208]	; (8004620 <statemachine+0x1460>)
 800454e:	2301      	movs	r3, #1
 8004550:	ca06      	ldmia	r2, {r1, r2}
 8004552:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004554:	f7fe fa16 	bl	8002984 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8004558:	2132      	movs	r1, #50	; 0x32
 800455a:	2020      	movs	r0, #32
 800455c:	f7fe fa38 	bl	80029d0 <ssd1306_SetCursor>
			  snprintf(str,15, "%0.3fsec",seconde);
 8004560:	4b28      	ldr	r3, [pc, #160]	; (8004604 <statemachine+0x1444>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f7fb ffef 	bl	8000548 <__aeabi_f2d>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	e9cd 2300 	strd	r2, r3, [sp]
 8004572:	4a2c      	ldr	r2, [pc, #176]	; (8004624 <statemachine+0x1464>)
 8004574:	210f      	movs	r1, #15
 8004576:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004578:	f010 fd64 	bl	8015044 <sniprintf>
			  ssd1306_WriteString(str, Font_6x8, White);
 800457c:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <statemachine+0x1414>)
 800457e:	2301      	movs	r3, #1
 8004580:	ca06      	ldmia	r2, {r1, r2}
 8004582:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004584:	f7fe f9fe 	bl	8002984 <ssd1306_WriteString>
			  free(str);
 8004588:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800458a:	f00e fe67 	bl	801325c <free>


			  if(BTN_A>=1){
 800458e:	4b17      	ldr	r3, [pc, #92]	; (80045ec <statemachine+0x142c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f340 8376 	ble.w	8004c84 <statemachine+0x1ac4>
			 	state++;
 8004598:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <statemachine+0x1430>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <statemachine+0x1430>)
 80045a2:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 80045a4:	4b11      	ldr	r3, [pc, #68]	; (80045ec <statemachine+0x142c>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 80045aa:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <statemachine+0x1434>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]


	}
			  break;
 80045b0:	e368      	b.n	8004c84 <statemachine+0x1ac4>

			  case STATE_BALISE:
				  ssd1306_Fill(Black);
 80045b2:	2000      	movs	r0, #0
 80045b4:	f7fe f8ca 	bl	800274c <ssd1306_Fill>
				  switch(balisestate){
 80045b8:	4b1b      	ldr	r3, [pc, #108]	; (8004628 <statemachine+0x1468>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	f000 80f1 	beq.w	80047a4 <statemachine+0x15e4>
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	f300 8360 	bgt.w	8004c88 <statemachine+0x1ac8>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d02f      	beq.n	800462c <statemachine+0x146c>
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d063      	beq.n	8004698 <statemachine+0x14d8>


				  }


				  break;
 80045d0:	e35a      	b.n	8004c88 <statemachine+0x1ac8>
 80045d2:	bf00      	nop
 80045d4:	20000008 	.word	0x20000008
 80045d8:	08019194 	.word	0x08019194
 80045dc:	20000730 	.word	0x20000730
 80045e0:	0801919c 	.word	0x0801919c
 80045e4:	20000728 	.word	0x20000728
 80045e8:	08019188 	.word	0x08019188
 80045ec:	200006f0 	.word	0x200006f0
 80045f0:	200006f8 	.word	0x200006f8
 80045f4:	200006f4 	.word	0x200006f4
 80045f8:	080191a8 	.word	0x080191a8
 80045fc:	200006fc 	.word	0x200006fc
 8004600:	20000e3c 	.word	0x20000e3c
 8004604:	20000e38 	.word	0x20000e38
 8004608:	20000e44 	.word	0x20000e44
 800460c:	2000106c 	.word	0x2000106c
 8004610:	20000e40 	.word	0x20000e40
 8004614:	476a6000 	.word	0x476a6000
 8004618:	447a0000 	.word	0x447a0000
 800461c:	080191b0 	.word	0x080191b0
 8004620:	20000010 	.word	0x20000010
 8004624:	080191bc 	.word	0x080191bc
 8004628:	20000e33 	.word	0x20000e33
					  ssd1306_SetCursor(32,32);
 800462c:	2120      	movs	r1, #32
 800462e:	2020      	movs	r0, #32
 8004630:	f7fe f9ce 	bl	80029d0 <ssd1306_SetCursor>
					  ssd1306_WriteString("balise",Font_6x8,White);
 8004634:	4a88      	ldr	r2, [pc, #544]	; (8004858 <statemachine+0x1698>)
 8004636:	2301      	movs	r3, #1
 8004638:	ca06      	ldmia	r2, {r1, r2}
 800463a:	4888      	ldr	r0, [pc, #544]	; (800485c <statemachine+0x169c>)
 800463c:	f7fe f9a2 	bl	8002984 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 8004640:	2128      	movs	r1, #40	; 0x28
 8004642:	2020      	movs	r0, #32
 8004644:	f7fe f9c4 	bl	80029d0 <ssd1306_SetCursor>
					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8004648:	4a83      	ldr	r2, [pc, #524]	; (8004858 <statemachine+0x1698>)
 800464a:	2301      	movs	r3, #1
 800464c:	ca06      	ldmia	r2, {r1, r2}
 800464e:	4884      	ldr	r0, [pc, #528]	; (8004860 <statemachine+0x16a0>)
 8004650:	f7fe f998 	bl	8002984 <ssd1306_WriteString>
					  if(BTN_B>=1){
 8004654:	4b83      	ldr	r3, [pc, #524]	; (8004864 <statemachine+0x16a4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	dd0b      	ble.n	8004674 <statemachine+0x14b4>
						  balisestate++;
 800465c:	4b82      	ldr	r3, [pc, #520]	; (8004868 <statemachine+0x16a8>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	3301      	adds	r3, #1
 8004662:	b2da      	uxtb	r2, r3
 8004664:	4b80      	ldr	r3, [pc, #512]	; (8004868 <statemachine+0x16a8>)
 8004666:	701a      	strb	r2, [r3, #0]
						  BTN_B=0;
 8004668:	4b7e      	ldr	r3, [pc, #504]	; (8004864 <statemachine+0x16a4>)
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
						  BTN_A=0;
 800466e:	4b7f      	ldr	r3, [pc, #508]	; (800486c <statemachine+0x16ac>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
					  if(BTN_A>=1){
 8004674:	4b7d      	ldr	r3, [pc, #500]	; (800486c <statemachine+0x16ac>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f340 80cd 	ble.w	8004818 <statemachine+0x1658>
					  				  			 	state++;
 800467e:	4b7c      	ldr	r3, [pc, #496]	; (8004870 <statemachine+0x16b0>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	3301      	adds	r3, #1
 8004684:	b2da      	uxtb	r2, r3
 8004686:	4b7a      	ldr	r3, [pc, #488]	; (8004870 <statemachine+0x16b0>)
 8004688:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 800468a:	4b78      	ldr	r3, [pc, #480]	; (800486c <statemachine+0x16ac>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 8004690:	4b74      	ldr	r3, [pc, #464]	; (8004864 <statemachine+0x16a4>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
					  break;
 8004696:	e0bf      	b.n	8004818 <statemachine+0x1658>
					  nmea_parse(&myData, DataBuffer);
 8004698:	4976      	ldr	r1, [pc, #472]	; (8004874 <statemachine+0x16b4>)
 800469a:	4877      	ldr	r0, [pc, #476]	; (8004878 <statemachine+0x16b8>)
 800469c:	f7fd fcc6 	bl	800202c <nmea_parse>
					  if(pagenumber+1<MAX_WRITE_PAGE){
 80046a0:	4b76      	ldr	r3, [pc, #472]	; (800487c <statemachine+0x16bc>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f246 32fd 	movw	r2, #25597	; 0x63fd
 80046a8:	4293      	cmp	r3, r2
 80046aa:	dc77      	bgt.n	800479c <statemachine+0x15dc>
					  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 80046ac:	4b74      	ldr	r3, [pc, #464]	; (8004880 <statemachine+0x16c0>)
 80046ae:	edd3 7a00 	vldr	s15, [r3]
 80046b2:	4b74      	ldr	r3, [pc, #464]	; (8004884 <statemachine+0x16c4>)
 80046b4:	ed93 7a00 	vldr	s14, [r3]
 80046b8:	4b6f      	ldr	r3, [pc, #444]	; (8004878 <statemachine+0x16b8>)
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	4a6e      	ldr	r2, [pc, #440]	; (8004878 <statemachine+0x16b8>)
 80046be:	edd2 6a08 	vldr	s13, [r2, #32]
 80046c2:	eeb0 1a66 	vmov.f32	s2, s13
 80046c6:	461a      	mov	r2, r3
 80046c8:	496b      	ldr	r1, [pc, #428]	; (8004878 <statemachine+0x16b8>)
 80046ca:	eef0 0a47 	vmov.f32	s1, s14
 80046ce:	eeb0 0a67 	vmov.f32	s0, s15
 80046d2:	486d      	ldr	r0, [pc, #436]	; (8004888 <statemachine+0x16c8>)
 80046d4:	f7fd fdf8 	bl	80022c8 <csvframe>
 80046d8:	4603      	mov	r3, r0
 80046da:	4a6c      	ldr	r2, [pc, #432]	; (800488c <statemachine+0x16cc>)
 80046dc:	6013      	str	r3, [r2, #0]
					  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 80046de:	4b6b      	ldr	r3, [pc, #428]	; (800488c <statemachine+0x16cc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4619      	mov	r1, r3
 80046e4:	4868      	ldr	r0, [pc, #416]	; (8004888 <statemachine+0x16c8>)
 80046e6:	f7fd ff01 	bl	80024ec <writebuffertoflash>
					  ssd1306_SetCursor(32,32);
 80046ea:	2120      	movs	r1, #32
 80046ec:	2020      	movs	r0, #32
 80046ee:	f7fe f96f 	bl	80029d0 <ssd1306_SetCursor>
					  snprintf((uint8_t *)str1,50,"p=%d",pagenumber);
 80046f2:	4b62      	ldr	r3, [pc, #392]	; (800487c <statemachine+0x16bc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a66      	ldr	r2, [pc, #408]	; (8004890 <statemachine+0x16d0>)
 80046f8:	2132      	movs	r1, #50	; 0x32
 80046fa:	4866      	ldr	r0, [pc, #408]	; (8004894 <statemachine+0x16d4>)
 80046fc:	f010 fca2 	bl	8015044 <sniprintf>
					  ssd1306_WriteString((uint8_t*)str1,Font_7x10,White);
 8004700:	4a65      	ldr	r2, [pc, #404]	; (8004898 <statemachine+0x16d8>)
 8004702:	2301      	movs	r3, #1
 8004704:	ca06      	ldmia	r2, {r1, r2}
 8004706:	4863      	ldr	r0, [pc, #396]	; (8004894 <statemachine+0x16d4>)
 8004708:	f7fe f93c 	bl	8002984 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,42);
 800470c:	212a      	movs	r1, #42	; 0x2a
 800470e:	2020      	movs	r0, #32
 8004710:	f7fe f95e 	bl	80029d0 <ssd1306_SetCursor>
					  snprintf((uint8_t *)str1,50, "sat=%d",myData.satelliteCount);
 8004714:	4b58      	ldr	r3, [pc, #352]	; (8004878 <statemachine+0x16b8>)
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	4a60      	ldr	r2, [pc, #384]	; (800489c <statemachine+0x16dc>)
 800471a:	2132      	movs	r1, #50	; 0x32
 800471c:	485d      	ldr	r0, [pc, #372]	; (8004894 <statemachine+0x16d4>)
 800471e:	f010 fc91 	bl	8015044 <sniprintf>
					  ssd1306_WriteString((uint8_t*)str1,Font_6x8,White);
 8004722:	4a4d      	ldr	r2, [pc, #308]	; (8004858 <statemachine+0x1698>)
 8004724:	2301      	movs	r3, #1
 8004726:	ca06      	ldmia	r2, {r1, r2}
 8004728:	485a      	ldr	r0, [pc, #360]	; (8004894 <statemachine+0x16d4>)
 800472a:	f7fe f92b 	bl	8002984 <ssd1306_WriteString>
					  batterygauge(vbat,34, 50,1);
 800472e:	4b55      	ldr	r3, [pc, #340]	; (8004884 <statemachine+0x16c4>)
 8004730:	edd3 7a00 	vldr	s15, [r3]
 8004734:	2201      	movs	r2, #1
 8004736:	2132      	movs	r1, #50	; 0x32
 8004738:	2022      	movs	r0, #34	; 0x22
 800473a:	eeb0 0a67 	vmov.f32	s0, s15
 800473e:	f7fe fb63 	bl	8002e08 <batterygauge>
					  ssd1306_SetCursor(60,50);
 8004742:	2132      	movs	r1, #50	; 0x32
 8004744:	203c      	movs	r0, #60	; 0x3c
 8004746:	f7fe f943 	bl	80029d0 <ssd1306_SetCursor>
					  snprintf((uint8_t *)str1,50, "%0.2fV",vbat);
 800474a:	4b4e      	ldr	r3, [pc, #312]	; (8004884 <statemachine+0x16c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7fb fefa 	bl	8000548 <__aeabi_f2d>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	e9cd 2300 	strd	r2, r3, [sp]
 800475c:	4a50      	ldr	r2, [pc, #320]	; (80048a0 <statemachine+0x16e0>)
 800475e:	2132      	movs	r1, #50	; 0x32
 8004760:	484c      	ldr	r0, [pc, #304]	; (8004894 <statemachine+0x16d4>)
 8004762:	f010 fc6f 	bl	8015044 <sniprintf>
					  ssd1306_WriteString((uint8_t*)str1,Font_6x8,White);
 8004766:	4a3c      	ldr	r2, [pc, #240]	; (8004858 <statemachine+0x1698>)
 8004768:	2301      	movs	r3, #1
 800476a:	ca06      	ldmia	r2, {r1, r2}
 800476c:	4849      	ldr	r0, [pc, #292]	; (8004894 <statemachine+0x16d4>)
 800476e:	f7fe f909 	bl	8002984 <ssd1306_WriteString>
					  HAL_Delay(1000);
 8004772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004776:	f000 feab 	bl	80054d0 <HAL_Delay>
					  if(BTN_B>=1){
 800477a:	4b3a      	ldr	r3, [pc, #232]	; (8004864 <statemachine+0x16a4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	dd4c      	ble.n	800481c <statemachine+0x165c>
					  						  balisestate--;
 8004782:	4b39      	ldr	r3, [pc, #228]	; (8004868 <statemachine+0x16a8>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	3b01      	subs	r3, #1
 8004788:	b2da      	uxtb	r2, r3
 800478a:	4b37      	ldr	r3, [pc, #220]	; (8004868 <statemachine+0x16a8>)
 800478c:	701a      	strb	r2, [r3, #0]
					  						  BTN_B=0;
 800478e:	4b35      	ldr	r3, [pc, #212]	; (8004864 <statemachine+0x16a4>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
					  						  BTN_A=0;
 8004794:	4b35      	ldr	r3, [pc, #212]	; (800486c <statemachine+0x16ac>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
					  break;
 800479a:	e03f      	b.n	800481c <statemachine+0x165c>
					 						  balisestate=2;
 800479c:	4b32      	ldr	r3, [pc, #200]	; (8004868 <statemachine+0x16a8>)
 800479e:	2202      	movs	r2, #2
 80047a0:	701a      	strb	r2, [r3, #0]
					  break;
 80047a2:	e03b      	b.n	800481c <statemachine+0x165c>
					  ssd1306_SetCursor(32,32);
 80047a4:	2120      	movs	r1, #32
 80047a6:	2020      	movs	r0, #32
 80047a8:	f7fe f912 	bl	80029d0 <ssd1306_SetCursor>
					  ssd1306_WriteString("fin de",Font_6x8,White);
 80047ac:	4a2a      	ldr	r2, [pc, #168]	; (8004858 <statemachine+0x1698>)
 80047ae:	2301      	movs	r3, #1
 80047b0:	ca06      	ldmia	r2, {r1, r2}
 80047b2:	483c      	ldr	r0, [pc, #240]	; (80048a4 <statemachine+0x16e4>)
 80047b4:	f7fe f8e6 	bl	8002984 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 80047b8:	2128      	movs	r1, #40	; 0x28
 80047ba:	2020      	movs	r0, #32
 80047bc:	f7fe f908 	bl	80029d0 <ssd1306_SetCursor>
					  ssd1306_WriteString("memoire",Font_6x8,White);
 80047c0:	4a25      	ldr	r2, [pc, #148]	; (8004858 <statemachine+0x1698>)
 80047c2:	2301      	movs	r3, #1
 80047c4:	ca06      	ldmia	r2, {r1, r2}
 80047c6:	4838      	ldr	r0, [pc, #224]	; (80048a8 <statemachine+0x16e8>)
 80047c8:	f7fe f8dc 	bl	8002984 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,48);
 80047cc:	2130      	movs	r1, #48	; 0x30
 80047ce:	2020      	movs	r0, #32
 80047d0:	f7fe f8fe 	bl	80029d0 <ssd1306_SetCursor>
					  snprintf((uint8_t *)str1,50,"%d,%d",pageoffset,pagenumber);
 80047d4:	4b35      	ldr	r3, [pc, #212]	; (80048ac <statemachine+0x16ec>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b28      	ldr	r3, [pc, #160]	; (800487c <statemachine+0x16bc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	4613      	mov	r3, r2
 80047e0:	4a33      	ldr	r2, [pc, #204]	; (80048b0 <statemachine+0x16f0>)
 80047e2:	2132      	movs	r1, #50	; 0x32
 80047e4:	482b      	ldr	r0, [pc, #172]	; (8004894 <statemachine+0x16d4>)
 80047e6:	f010 fc2d 	bl	8015044 <sniprintf>
					  ssd1306_WriteString((uint8_t*)str1,Font_6x8,White);
 80047ea:	4a1b      	ldr	r2, [pc, #108]	; (8004858 <statemachine+0x1698>)
 80047ec:	2301      	movs	r3, #1
 80047ee:	ca06      	ldmia	r2, {r1, r2}
 80047f0:	4828      	ldr	r0, [pc, #160]	; (8004894 <statemachine+0x16d4>)
 80047f2:	f7fe f8c7 	bl	8002984 <ssd1306_WriteString>
					  if(BTN_A>=1){
 80047f6:	4b1d      	ldr	r3, [pc, #116]	; (800486c <statemachine+0x16ac>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	dd10      	ble.n	8004820 <statemachine+0x1660>
					  				  			 	state++;
 80047fe:	4b1c      	ldr	r3, [pc, #112]	; (8004870 <statemachine+0x16b0>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	3301      	adds	r3, #1
 8004804:	b2da      	uxtb	r2, r3
 8004806:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <statemachine+0x16b0>)
 8004808:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 800480a:	4b18      	ldr	r3, [pc, #96]	; (800486c <statemachine+0x16ac>)
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 8004810:	4b14      	ldr	r3, [pc, #80]	; (8004864 <statemachine+0x16a4>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
					  break;
 8004816:	e003      	b.n	8004820 <statemachine+0x1660>
					  break;
 8004818:	bf00      	nop
 800481a:	e235      	b.n	8004c88 <statemachine+0x1ac8>
					  break;
 800481c:	bf00      	nop
 800481e:	e233      	b.n	8004c88 <statemachine+0x1ac8>
					  break;
 8004820:	bf00      	nop
				  break;
 8004822:	e231      	b.n	8004c88 <statemachine+0x1ac8>


			  case STATE_USB:
				  ssd1306_Fill(Black);
 8004824:	2000      	movs	r0, #0
 8004826:	f7fd ff91 	bl	800274c <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 800482a:	2120      	movs	r1, #32
 800482c:	2020      	movs	r0, #32
 800482e:	f7fe f8cf 	bl	80029d0 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8004832:	4a09      	ldr	r2, [pc, #36]	; (8004858 <statemachine+0x1698>)
 8004834:	2301      	movs	r3, #1
 8004836:	ca06      	ldmia	r2, {r1, r2}
 8004838:	481e      	ldr	r0, [pc, #120]	; (80048b4 <statemachine+0x16f4>)
 800483a:	f7fe f8a3 	bl	8002984 <ssd1306_WriteString>
				  switch(usbstate){
 800483e:	4b1e      	ldr	r3, [pc, #120]	; (80048b8 <statemachine+0x16f8>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b02      	cmp	r3, #2
 8004844:	f000 80f9 	beq.w	8004a3a <statemachine+0x187a>
 8004848:	2b02      	cmp	r3, #2
 800484a:	f300 821f 	bgt.w	8004c8c <statemachine+0x1acc>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d034      	beq.n	80048bc <statemachine+0x16fc>
 8004852:	2b01      	cmp	r3, #1
 8004854:	d07f      	beq.n	8004956 <statemachine+0x1796>
				 									  			 	BTN_A=0;
				 									  			 	BTN_B=0;
				 									  	}
				 					 break;
				 				  }
				  break;
 8004856:	e219      	b.n	8004c8c <statemachine+0x1acc>
 8004858:	20000008 	.word	0x20000008
 800485c:	080191c8 	.word	0x080191c8
 8004860:	080191d0 	.word	0x080191d0
 8004864:	200006f4 	.word	0x200006f4
 8004868:	20000e33 	.word	0x20000e33
 800486c:	200006f0 	.word	0x200006f0
 8004870:	200006f8 	.word	0x200006f8
 8004874:	200004ac 	.word	0x200004ac
 8004878:	200006b0 	.word	0x200006b0
 800487c:	20000938 	.word	0x20000938
 8004880:	20000728 	.word	0x20000728
 8004884:	20000730 	.word	0x20000730
 8004888:	20000734 	.word	0x20000734
 800488c:	20000eb0 	.word	0x20000eb0
 8004890:	080191dc 	.word	0x080191dc
 8004894:	20000e7c 	.word	0x20000e7c
 8004898:	20000010 	.word	0x20000010
 800489c:	080191e4 	.word	0x080191e4
 80048a0:	080191ec 	.word	0x080191ec
 80048a4:	080191f4 	.word	0x080191f4
 80048a8:	080191fc 	.word	0x080191fc
 80048ac:	20000934 	.word	0x20000934
 80048b0:	08019204 	.word	0x08019204
 80048b4:	0801920c 	.word	0x0801920c
 80048b8:	20000e32 	.word	0x20000e32
				 					  ssd1306_SetCursor(32,40);
 80048bc:	2128      	movs	r1, #40	; 0x28
 80048be:	2020      	movs	r0, #32
 80048c0:	f7fe f886 	bl	80029d0 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 80048c4:	4aa3      	ldr	r2, [pc, #652]	; (8004b54 <statemachine+0x1994>)
 80048c6:	2301      	movs	r3, #1
 80048c8:	ca06      	ldmia	r2, {r1, r2}
 80048ca:	48a3      	ldr	r0, [pc, #652]	; (8004b58 <statemachine+0x1998>)
 80048cc:	f7fe f85a 	bl	8002984 <ssd1306_WriteString>
				 					  usbtransmiten=0;
 80048d0:	4ba2      	ldr	r3, [pc, #648]	; (8004b5c <statemachine+0x199c>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 80048d6:	4ba2      	ldr	r3, [pc, #648]	; (8004b60 <statemachine+0x19a0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	dd0b      	ble.n	80048f6 <statemachine+0x1736>
				 						  usbstate++;
 80048de:	4ba1      	ldr	r3, [pc, #644]	; (8004b64 <statemachine+0x19a4>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	3301      	adds	r3, #1
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	4b9f      	ldr	r3, [pc, #636]	; (8004b64 <statemachine+0x19a4>)
 80048e8:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 80048ea:	4b9d      	ldr	r3, [pc, #628]	; (8004b60 <statemachine+0x19a0>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 80048f0:	4b9d      	ldr	r3, [pc, #628]	; (8004b68 <statemachine+0x19a8>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 80048f6:	4b9c      	ldr	r3, [pc, #624]	; (8004b68 <statemachine+0x19a8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f340 81b4 	ble.w	8004c68 <statemachine+0x1aa8>
				 									  			 	state--;
 8004900:	4b9a      	ldr	r3, [pc, #616]	; (8004b6c <statemachine+0x19ac>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	3b01      	subs	r3, #1
 8004906:	b2da      	uxtb	r2, r3
 8004908:	4b98      	ldr	r3, [pc, #608]	; (8004b6c <statemachine+0x19ac>)
 800490a:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 800490c:	4b97      	ldr	r3, [pc, #604]	; (8004b6c <statemachine+0x19ac>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	3b01      	subs	r3, #1
 8004912:	b2da      	uxtb	r2, r3
 8004914:	4b95      	ldr	r3, [pc, #596]	; (8004b6c <statemachine+0x19ac>)
 8004916:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004918:	4b94      	ldr	r3, [pc, #592]	; (8004b6c <statemachine+0x19ac>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	3b01      	subs	r3, #1
 800491e:	b2da      	uxtb	r2, r3
 8004920:	4b92      	ldr	r3, [pc, #584]	; (8004b6c <statemachine+0x19ac>)
 8004922:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004924:	4b91      	ldr	r3, [pc, #580]	; (8004b6c <statemachine+0x19ac>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	3b01      	subs	r3, #1
 800492a:	b2da      	uxtb	r2, r3
 800492c:	4b8f      	ldr	r3, [pc, #572]	; (8004b6c <statemachine+0x19ac>)
 800492e:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004930:	4b8e      	ldr	r3, [pc, #568]	; (8004b6c <statemachine+0x19ac>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	3b01      	subs	r3, #1
 8004936:	b2da      	uxtb	r2, r3
 8004938:	4b8c      	ldr	r3, [pc, #560]	; (8004b6c <statemachine+0x19ac>)
 800493a:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 800493c:	4b8b      	ldr	r3, [pc, #556]	; (8004b6c <statemachine+0x19ac>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	3b01      	subs	r3, #1
 8004942:	b2da      	uxtb	r2, r3
 8004944:	4b89      	ldr	r3, [pc, #548]	; (8004b6c <statemachine+0x19ac>)
 8004946:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8004948:	4b87      	ldr	r3, [pc, #540]	; (8004b68 <statemachine+0x19a8>)
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 800494e:	4b84      	ldr	r3, [pc, #528]	; (8004b60 <statemachine+0x19a0>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
				 					  break;
 8004954:	e188      	b.n	8004c68 <statemachine+0x1aa8>
				 					 ssd1306_SetCursor(32,40);
 8004956:	2128      	movs	r1, #40	; 0x28
 8004958:	2020      	movs	r0, #32
 800495a:	f7fe f839 	bl	80029d0 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 800495e:	4a7d      	ldr	r2, [pc, #500]	; (8004b54 <statemachine+0x1994>)
 8004960:	2301      	movs	r3, #1
 8004962:	ca06      	ldmia	r2, {r1, r2}
 8004964:	4882      	ldr	r0, [pc, #520]	; (8004b70 <statemachine+0x19b0>)
 8004966:	f7fe f80d 	bl	8002984 <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 800496a:	2130      	movs	r1, #48	; 0x30
 800496c:	2020      	movs	r0, #32
 800496e:	f7fe f82f 	bl	80029d0 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8004972:	4a78      	ldr	r2, [pc, #480]	; (8004b54 <statemachine+0x1994>)
 8004974:	2301      	movs	r3, #1
 8004976:	ca06      	ldmia	r2, {r1, r2}
 8004978:	487e      	ldr	r0, [pc, #504]	; (8004b74 <statemachine+0x19b4>)
 800497a:	f7fe f803 	bl	8002984 <ssd1306_WriteString>
				 					if(erasedisplay==1){
 800497e:	4b7e      	ldr	r3, [pc, #504]	; (8004b78 <statemachine+0x19b8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d120      	bne.n	80049c8 <statemachine+0x1808>
				 						snprintf((uint8_t *)str,50,"t=%0.2f",(float)erasetime/1000);
 8004986:	4b7d      	ldr	r3, [pc, #500]	; (8004b7c <statemachine+0x19bc>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004992:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8004b80 <statemachine+0x19c0>
 8004996:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800499a:	ee16 0a90 	vmov	r0, s13
 800499e:	f7fb fdd3 	bl	8000548 <__aeabi_f2d>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	e9cd 2300 	strd	r2, r3, [sp]
 80049aa:	4a76      	ldr	r2, [pc, #472]	; (8004b84 <statemachine+0x19c4>)
 80049ac:	2132      	movs	r1, #50	; 0x32
 80049ae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80049b0:	f010 fb48 	bl	8015044 <sniprintf>
				 						ssd1306_SetCursor(32,56);
 80049b4:	2138      	movs	r1, #56	; 0x38
 80049b6:	2020      	movs	r0, #32
 80049b8:	f7fe f80a 	bl	80029d0 <ssd1306_SetCursor>
				 						ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 80049bc:	4a65      	ldr	r2, [pc, #404]	; (8004b54 <statemachine+0x1994>)
 80049be:	2301      	movs	r3, #1
 80049c0:	ca06      	ldmia	r2, {r1, r2}
 80049c2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80049c4:	f7fd ffde 	bl	8002984 <ssd1306_WriteString>
				 					if(BTN_A>=1){
 80049c8:	4b67      	ldr	r3, [pc, #412]	; (8004b68 <statemachine+0x19a8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	dd22      	ble.n	8004a16 <statemachine+0x1856>
				 						erasetime=HAL_GetTick();
 80049d0:	f000 fd72 	bl	80054b8 <HAL_GetTick>
 80049d4:	4603      	mov	r3, r0
 80049d6:	461a      	mov	r2, r3
 80049d8:	4b68      	ldr	r3, [pc, #416]	; (8004b7c <statemachine+0x19bc>)
 80049da:	601a      	str	r2, [r3, #0]
				 						SPIF_EraseChip(&hspif1);
 80049dc:	486a      	ldr	r0, [pc, #424]	; (8004b88 <statemachine+0x19c8>)
 80049de:	f00d fd82 	bl	80124e6 <SPIF_EraseChip>
				 						erasetime=HAL_GetTick()-erasetime;
 80049e2:	f000 fd69 	bl	80054b8 <HAL_GetTick>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4a64      	ldr	r2, [pc, #400]	; (8004b7c <statemachine+0x19bc>)
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	461a      	mov	r2, r3
 80049f0:	4b62      	ldr	r3, [pc, #392]	; (8004b7c <statemachine+0x19bc>)
 80049f2:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 80049f4:	4b60      	ldr	r3, [pc, #384]	; (8004b78 <statemachine+0x19b8>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 80049fa:	4b64      	ldr	r3, [pc, #400]	; (8004b8c <statemachine+0x19cc>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 8004a00:	4b63      	ldr	r3, [pc, #396]	; (8004b90 <statemachine+0x19d0>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
				 						storeindex();
 8004a06:	f7fd fcc5 	bl	8002394 <storeindex>
				 						BTN_A=0;
 8004a0a:	4b57      	ldr	r3, [pc, #348]	; (8004b68 <statemachine+0x19a8>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 8004a10:	4b53      	ldr	r3, [pc, #332]	; (8004b60 <statemachine+0x19a0>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 8004a16:	4b52      	ldr	r3, [pc, #328]	; (8004b60 <statemachine+0x19a0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f340 8126 	ble.w	8004c6c <statemachine+0x1aac>
					 						usbstate++;
 8004a20:	4b50      	ldr	r3, [pc, #320]	; (8004b64 <statemachine+0x19a4>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	4b4e      	ldr	r3, [pc, #312]	; (8004b64 <statemachine+0x19a4>)
 8004a2a:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 8004a2c:	4b4c      	ldr	r3, [pc, #304]	; (8004b60 <statemachine+0x19a0>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 8004a32:	4b4d      	ldr	r3, [pc, #308]	; (8004b68 <statemachine+0x19a8>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
				 			  break;
 8004a38:	e118      	b.n	8004c6c <statemachine+0x1aac>
				 					ssd1306_Fill(Black);
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	f7fd fe86 	bl	800274c <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 8004a40:	2128      	movs	r1, #40	; 0x28
 8004a42:	2020      	movs	r0, #32
 8004a44:	f7fd ffc4 	bl	80029d0 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8004a48:	4a42      	ldr	r2, [pc, #264]	; (8004b54 <statemachine+0x1994>)
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	ca06      	ldmia	r2, {r1, r2}
 8004a4e:	4851      	ldr	r0, [pc, #324]	; (8004b94 <statemachine+0x19d4>)
 8004a50:	f7fd ff98 	bl	8002984 <ssd1306_WriteString>
				 					if(pagenumber>0){
 8004a54:	4b4e      	ldr	r3, [pc, #312]	; (8004b90 <statemachine+0x19d0>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f340 80a9 	ble.w	8004bb0 <statemachine+0x19f0>
				 					int i=0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	657b      	str	r3, [r7, #84]	; 0x54
				 					if(usbtransmiten==0){
 8004a62:	4b3e      	ldr	r3, [pc, #248]	; (8004b5c <statemachine+0x199c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d162      	bne.n	8004b30 <statemachine+0x1970>
				 						while(i<pagenumber){
 8004a6a:	e036      	b.n	8004ada <statemachine+0x191a>
				 							ssd1306_Fill(Black);
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	f7fd fe6d 	bl	800274c <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8004a72:	2120      	movs	r1, #32
 8004a74:	2020      	movs	r0, #32
 8004a76:	f7fd ffab 	bl	80029d0 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8004a7a:	4a36      	ldr	r2, [pc, #216]	; (8004b54 <statemachine+0x1994>)
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	ca06      	ldmia	r2, {r1, r2}
 8004a80:	4844      	ldr	r0, [pc, #272]	; (8004b94 <statemachine+0x19d4>)
 8004a82:	f7fd ff7f 	bl	8002984 <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t *)flashread, 256, 0);
 8004a86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a88:	2300      	movs	r3, #0
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a90:	4a41      	ldr	r2, [pc, #260]	; (8004b98 <statemachine+0x19d8>)
 8004a92:	483d      	ldr	r0, [pc, #244]	; (8004b88 <statemachine+0x19c8>)
 8004a94:	f00d fe12 	bl	80126bc <SPIF_ReadPage>
				 							CDC_Transmit_FS((uint8_t * )flashread,256);
 8004a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a9c:	483e      	ldr	r0, [pc, #248]	; (8004b98 <statemachine+0x19d8>)
 8004a9e:	f00d fef7 	bl	8012890 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 8004aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa4:	2264      	movs	r2, #100	; 0x64
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ab2:	4b37      	ldr	r3, [pc, #220]	; (8004b90 <statemachine+0x19d0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004abe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004ac2:	eeb0 0a66 	vmov.f32	s0, s13
 8004ac6:	f7fe fb1b 	bl	8003100 <percentage>
				 							ssd1306_UpdateScreen();
 8004aca:	f7fd fe57 	bl	800277c <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 8004ace:	207d      	movs	r0, #125	; 0x7d
 8004ad0:	f000 fcfe 	bl	80054d0 <HAL_Delay>
				 							i++;
 8004ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	657b      	str	r3, [r7, #84]	; 0x54
				 						while(i<pagenumber){
 8004ada:	4b2d      	ldr	r3, [pc, #180]	; (8004b90 <statemachine+0x19d0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	dbc3      	blt.n	8004a6c <statemachine+0x18ac>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t *)flashread, pageoffset, 0);
 8004ae4:	4b2a      	ldr	r3, [pc, #168]	; (8004b90 <statemachine+0x19d0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4b28      	ldr	r3, [pc, #160]	; (8004b8c <statemachine+0x19cc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	2300      	movs	r3, #0
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	4a28      	ldr	r2, [pc, #160]	; (8004b98 <statemachine+0x19d8>)
 8004af8:	4823      	ldr	r0, [pc, #140]	; (8004b88 <statemachine+0x19c8>)
 8004afa:	f00d fddf 	bl	80126bc <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t * )flashread,pageoffset);
 8004afe:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <statemachine+0x19cc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4619      	mov	r1, r3
 8004b04:	4824      	ldr	r0, [pc, #144]	; (8004b98 <statemachine+0x19d8>)
 8004b06:	f00d fec3 	bl	8012890 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 8004b0a:	207d      	movs	r0, #125	; 0x7d
 8004b0c:	f000 fce0 	bl	80054d0 <HAL_Delay>
				 						int taillefin=0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	653b      	str	r3, [r7, #80]	; 0x50
										taillefin = snprintf((uint8_t *)str1,50,"kawakobeme\n\r");
 8004b14:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <statemachine+0x19dc>)
 8004b16:	2132      	movs	r1, #50	; 0x32
 8004b18:	4821      	ldr	r0, [pc, #132]	; (8004ba0 <statemachine+0x19e0>)
 8004b1a:	f010 fa93 	bl	8015044 <sniprintf>
 8004b1e:	6538      	str	r0, [r7, #80]	; 0x50
				 						CDC_Transmit_FS((uint8_t *)str1,taillefin);
 8004b20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b22:	481f      	ldr	r0, [pc, #124]	; (8004ba0 <statemachine+0x19e0>)
 8004b24:	f00d feb4 	bl	8012890 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8004b28:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <statemachine+0x199c>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e003      	b.n	8004b38 <statemachine+0x1978>
				 						usbpercent=1;
 8004b30:	4b1c      	ldr	r3, [pc, #112]	; (8004ba4 <statemachine+0x19e4>)
 8004b32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004b36:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 8004b38:	2000      	movs	r0, #0
 8004b3a:	f7fd fe07 	bl	800274c <ssd1306_Fill>
				 					ssd1306_SetCursor(32,45);
 8004b3e:	212d      	movs	r1, #45	; 0x2d
 8004b40:	2020      	movs	r0, #32
 8004b42:	f7fd ff45 	bl	80029d0 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8004b46:	4a18      	ldr	r2, [pc, #96]	; (8004ba8 <statemachine+0x19e8>)
 8004b48:	2301      	movs	r3, #1
 8004b4a:	ca06      	ldmia	r2, {r1, r2}
 8004b4c:	4817      	ldr	r0, [pc, #92]	; (8004bac <statemachine+0x19ec>)
 8004b4e:	f7fd ff19 	bl	8002984 <ssd1306_WriteString>
 8004b52:	e044      	b.n	8004bde <statemachine+0x1a1e>
 8004b54:	20000008 	.word	0x20000008
 8004b58:	080191d0 	.word	0x080191d0
 8004b5c:	20000ebc 	.word	0x20000ebc
 8004b60:	200006f4 	.word	0x200006f4
 8004b64:	20000e32 	.word	0x20000e32
 8004b68:	200006f0 	.word	0x200006f0
 8004b6c:	200006f8 	.word	0x200006f8
 8004b70:	08019210 	.word	0x08019210
 8004b74:	08019218 	.word	0x08019218
 8004b78:	20000eb8 	.word	0x20000eb8
 8004b7c:	20000eb4 	.word	0x20000eb4
 8004b80:	447a0000 	.word	0x447a0000
 8004b84:	08019224 	.word	0x08019224
 8004b88:	20000700 	.word	0x20000700
 8004b8c:	20000934 	.word	0x20000934
 8004b90:	20000938 	.word	0x20000938
 8004b94:	0801922c 	.word	0x0801922c
 8004b98:	20000834 	.word	0x20000834
 8004b9c:	08019234 	.word	0x08019234
 8004ba0:	20000e7c 	.word	0x20000e7c
 8004ba4:	20000ec0 	.word	0x20000ec0
 8004ba8:	20000010 	.word	0x20000010
 8004bac:	08019244 	.word	0x08019244
				 							ssd1306_Fill(Black);
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	f7fd fdcb 	bl	800274c <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 8004bb6:	2128      	movs	r1, #40	; 0x28
 8004bb8:	2020      	movs	r0, #32
 8004bba:	f7fd ff09 	bl	80029d0 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8004bbe:	4a37      	ldr	r2, [pc, #220]	; (8004c9c <statemachine+0x1adc>)
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	ca06      	ldmia	r2, {r1, r2}
 8004bc4:	4836      	ldr	r0, [pc, #216]	; (8004ca0 <statemachine+0x1ae0>)
 8004bc6:	f7fd fedd 	bl	8002984 <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,48);
 8004bca:	2130      	movs	r1, #48	; 0x30
 8004bcc:	2020      	movs	r0, #32
 8004bce:	f7fd feff 	bl	80029d0 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 8004bd2:	4a32      	ldr	r2, [pc, #200]	; (8004c9c <statemachine+0x1adc>)
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	ca06      	ldmia	r2, {r1, r2}
 8004bd8:	4832      	ldr	r0, [pc, #200]	; (8004ca4 <statemachine+0x1ae4>)
 8004bda:	f7fd fed3 	bl	8002984 <ssd1306_WriteString>
				 					if(BTN_B>=1){
 8004bde:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <statemachine+0x1ae8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	dd11      	ble.n	8004c0a <statemachine+0x1a4a>
				 									 						usbstate--;
 8004be6:	4b31      	ldr	r3, [pc, #196]	; (8004cac <statemachine+0x1aec>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	4b2f      	ldr	r3, [pc, #188]	; (8004cac <statemachine+0x1aec>)
 8004bf0:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 8004bf2:	4b2e      	ldr	r3, [pc, #184]	; (8004cac <statemachine+0x1aec>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	4b2c      	ldr	r3, [pc, #176]	; (8004cac <statemachine+0x1aec>)
 8004bfc:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 8004bfe:	4b2a      	ldr	r3, [pc, #168]	; (8004ca8 <statemachine+0x1ae8>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 8004c04:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <statemachine+0x1af0>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8004c0a:	4b29      	ldr	r3, [pc, #164]	; (8004cb0 <statemachine+0x1af0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	dd2e      	ble.n	8004c70 <statemachine+0x1ab0>
				 									  			 	state--;
 8004c12:	4b28      	ldr	r3, [pc, #160]	; (8004cb4 <statemachine+0x1af4>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	4b26      	ldr	r3, [pc, #152]	; (8004cb4 <statemachine+0x1af4>)
 8004c1c:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004c1e:	4b25      	ldr	r3, [pc, #148]	; (8004cb4 <statemachine+0x1af4>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4b23      	ldr	r3, [pc, #140]	; (8004cb4 <statemachine+0x1af4>)
 8004c28:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004c2a:	4b22      	ldr	r3, [pc, #136]	; (8004cb4 <statemachine+0x1af4>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <statemachine+0x1af4>)
 8004c34:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004c36:	4b1f      	ldr	r3, [pc, #124]	; (8004cb4 <statemachine+0x1af4>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	4b1d      	ldr	r3, [pc, #116]	; (8004cb4 <statemachine+0x1af4>)
 8004c40:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004c42:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <statemachine+0x1af4>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	4b1a      	ldr	r3, [pc, #104]	; (8004cb4 <statemachine+0x1af4>)
 8004c4c:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004c4e:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <statemachine+0x1af4>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	4b17      	ldr	r3, [pc, #92]	; (8004cb4 <statemachine+0x1af4>)
 8004c58:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8004c5a:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <statemachine+0x1af0>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8004c60:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <statemachine+0x1ae8>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
				 					 break;
 8004c66:	e003      	b.n	8004c70 <statemachine+0x1ab0>
				 					  break;
 8004c68:	bf00      	nop
 8004c6a:	e00f      	b.n	8004c8c <statemachine+0x1acc>
				 			  break;
 8004c6c:	bf00      	nop
 8004c6e:	e00d      	b.n	8004c8c <statemachine+0x1acc>
				 					 break;
 8004c70:	bf00      	nop
				  break;
 8004c72:	e00b      	b.n	8004c8c <statemachine+0x1acc>
				  break;
 8004c74:	bf00      	nop
 8004c76:	e00a      	b.n	8004c8e <statemachine+0x1ace>
			  break;
 8004c78:	bf00      	nop
 8004c7a:	e008      	b.n	8004c8e <statemachine+0x1ace>
			  break;
 8004c7c:	bf00      	nop
 8004c7e:	e006      	b.n	8004c8e <statemachine+0x1ace>
			  break;
 8004c80:	bf00      	nop
 8004c82:	e004      	b.n	8004c8e <statemachine+0x1ace>
			  break;
 8004c84:	bf00      	nop
 8004c86:	e002      	b.n	8004c8e <statemachine+0x1ace>
				  break;
 8004c88:	bf00      	nop
 8004c8a:	e000      	b.n	8004c8e <statemachine+0x1ace>
				  break;
 8004c8c:	bf00      	nop
	}
return ;
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
}
 8004c92:	376c      	adds	r7, #108	; 0x6c
 8004c94:	46bd      	mov	sp, r7
 8004c96:	ecbd 8b02 	vpop	{d8}
 8004c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c9c:	20000008 	.word	0x20000008
 8004ca0:	0801922c 	.word	0x0801922c
 8004ca4:	0801924c 	.word	0x0801924c
 8004ca8:	200006f4 	.word	0x200006f4
 8004cac:	20000e32 	.word	0x20000e32
 8004cb0:	200006f0 	.word	0x200006f0
 8004cb4:	200006f8 	.word	0x200006f8

08004cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cbe:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <HAL_MspInit+0x44>)
 8004cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc2:	4a0e      	ldr	r2, [pc, #56]	; (8004cfc <HAL_MspInit+0x44>)
 8004cc4:	f043 0301 	orr.w	r3, r3, #1
 8004cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <HAL_MspInit+0x44>)
 8004ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cd6:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <HAL_MspInit+0x44>)
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cda:	4a08      	ldr	r2, [pc, #32]	; (8004cfc <HAL_MspInit+0x44>)
 8004cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_MspInit+0x44>)
 8004ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40021000 	.word	0x40021000

08004d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d04:	e7fe      	b.n	8004d04 <NMI_Handler+0x4>

08004d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d06:	b480      	push	{r7}
 8004d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d0a:	e7fe      	b.n	8004d0a <HardFault_Handler+0x4>

08004d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d10:	e7fe      	b.n	8004d10 <MemManage_Handler+0x4>

08004d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d12:	b480      	push	{r7}
 8004d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d16:	e7fe      	b.n	8004d16 <BusFault_Handler+0x4>

08004d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d1c:	e7fe      	b.n	8004d1c <UsageFault_Handler+0x4>

08004d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d22:	bf00      	nop
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d3e:	bf00      	nop
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d4c:	f000 fba0 	bl	8005490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d50:	bf00      	nop
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004d58:	2002      	movs	r0, #2
 8004d5a:	f002 fb93 	bl	8007484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d68:	4802      	ldr	r0, [pc, #8]	; (8004d74 <DMA1_Channel1_IRQHandler+0x10>)
 8004d6a:	f002 f91e 	bl	8006faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004d6e:	bf00      	nop
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20000378 	.word	0x20000378

08004d78 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004d7c:	4802      	ldr	r0, [pc, #8]	; (8004d88 <ADC1_IRQHandler+0x10>)
 8004d7e:	f000 ff6b 	bl	8005c58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004d82:	bf00      	nop
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000314 	.word	0x20000314

08004d8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004d90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d94:	f002 fb76 	bl	8007484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004d98:	bf00      	nop
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004da0:	4802      	ldr	r0, [pc, #8]	; (8004dac <USB_IRQHandler+0x10>)
 8004da2:	f003 f97b 	bl	800809c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8004da6:	bf00      	nop
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20001d50 	.word	0x20001d50

08004db0 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 8004db4:	4802      	ldr	r0, [pc, #8]	; (8004dc0 <DMA2_Channel7_IRQHandler+0x10>)
 8004db6:	f002 f8f8 	bl	8006faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8004dba:	bf00      	nop
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20001024 	.word	0x20001024

08004dc4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004dc8:	4802      	ldr	r0, [pc, #8]	; (8004dd4 <LPUART1_IRQHandler+0x10>)
 8004dca:	f007 fae7 	bl	800c39c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000f14 	.word	0x20000f14

08004dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return 1;
 8004ddc:	2301      	movs	r3, #1
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <_kill>:

int _kill(int pid, int sig)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004df2:	f010 faa5 	bl	8015340 <__errno>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2216      	movs	r2, #22
 8004dfa:	601a      	str	r2, [r3, #0]
  return -1;
 8004dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <_exit>:

void _exit (int status)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e10:	f04f 31ff 	mov.w	r1, #4294967295
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff ffe7 	bl	8004de8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e1a:	e7fe      	b.n	8004e1a <_exit+0x12>

08004e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e00a      	b.n	8004e44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e2e:	f3af 8000 	nop.w
 8004e32:	4601      	mov	r1, r0
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	60ba      	str	r2, [r7, #8]
 8004e3a:	b2ca      	uxtb	r2, r1
 8004e3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	3301      	adds	r3, #1
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	dbf0      	blt.n	8004e2e <_read+0x12>
  }

  return len;
 8004e4c:	687b      	ldr	r3, [r7, #4]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b086      	sub	sp, #24
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	e009      	b.n	8004e7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	60ba      	str	r2, [r7, #8]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	dbf1      	blt.n	8004e68 <_write+0x12>
  }
  return len;
 8004e84:	687b      	ldr	r3, [r7, #4]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <_close>:

int _close(int file)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004eb6:	605a      	str	r2, [r3, #4]
  return 0;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <_isatty>:

int _isatty(int file)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ece:	2301      	movs	r3, #1
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f00:	4a14      	ldr	r2, [pc, #80]	; (8004f54 <_sbrk+0x5c>)
 8004f02:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <_sbrk+0x60>)
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f0c:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <_sbrk+0x64>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d102      	bne.n	8004f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f14:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <_sbrk+0x64>)
 8004f16:	4a12      	ldr	r2, [pc, #72]	; (8004f60 <_sbrk+0x68>)
 8004f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f1a:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <_sbrk+0x64>)
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4413      	add	r3, r2
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d207      	bcs.n	8004f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f28:	f010 fa0a 	bl	8015340 <__errno>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	220c      	movs	r2, #12
 8004f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f32:	f04f 33ff 	mov.w	r3, #4294967295
 8004f36:	e009      	b.n	8004f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f38:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <_sbrk+0x64>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f3e:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <_sbrk+0x64>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4413      	add	r3, r2
 8004f46:	4a05      	ldr	r2, [pc, #20]	; (8004f5c <_sbrk+0x64>)
 8004f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20010000 	.word	0x20010000
 8004f58:	00000400 	.word	0x00000400
 8004f5c:	20000ec4 	.word	0x20000ec4
 8004f60:	200023b8 	.word	0x200023b8

08004f64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004f68:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <SystemInit+0x20>)
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6e:	4a05      	ldr	r2, [pc, #20]	; (8004f84 <SystemInit+0x20>)
 8004f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004f78:	bf00      	nop
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	e000ed00 	.word	0xe000ed00

08004f88 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f8e:	f107 0310 	add.w	r3, r7, #16
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	605a      	str	r2, [r3, #4]
 8004f98:	609a      	str	r2, [r3, #8]
 8004f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f9c:	1d3b      	adds	r3, r7, #4
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	605a      	str	r2, [r3, #4]
 8004fa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004fa6:	4b1e      	ldr	r3, [pc, #120]	; (8005020 <MX_TIM2_Init+0x98>)
 8004fa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004fac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 8004fae:	4b1c      	ldr	r3, [pc, #112]	; (8005020 <MX_TIM2_Init+0x98>)
 8004fb0:	f240 128f 	movw	r2, #399	; 0x18f
 8004fb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fb6:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <MX_TIM2_Init+0x98>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8004fbc:	4b18      	ldr	r3, [pc, #96]	; (8005020 <MX_TIM2_Init+0x98>)
 8004fbe:	f242 720f 	movw	r2, #9999	; 0x270f
 8004fc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fc4:	4b16      	ldr	r3, [pc, #88]	; (8005020 <MX_TIM2_Init+0x98>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fca:	4b15      	ldr	r3, [pc, #84]	; (8005020 <MX_TIM2_Init+0x98>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004fd0:	4813      	ldr	r0, [pc, #76]	; (8005020 <MX_TIM2_Init+0x98>)
 8004fd2:	f006 fd7b 	bl	800bacc <HAL_TIM_Base_Init>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004fdc:	f7fc fd09 	bl	80019f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fe4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004fe6:	f107 0310 	add.w	r3, r7, #16
 8004fea:	4619      	mov	r1, r3
 8004fec:	480c      	ldr	r0, [pc, #48]	; (8005020 <MX_TIM2_Init+0x98>)
 8004fee:	f006 fe11 	bl	800bc14 <HAL_TIM_ConfigClockSource>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004ff8:	f7fc fcfb 	bl	80019f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004ffc:	2320      	movs	r3, #32
 8004ffe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005004:	1d3b      	adds	r3, r7, #4
 8005006:	4619      	mov	r1, r3
 8005008:	4805      	ldr	r0, [pc, #20]	; (8005020 <MX_TIM2_Init+0x98>)
 800500a:	f006 ffcb 	bl	800bfa4 <HAL_TIMEx_MasterConfigSynchronization>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8005014:	f7fc fced 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005018:	bf00      	nop
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20000ec8 	.word	0x20000ec8

08005024 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005034:	d10b      	bne.n	800504e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005036:	4b09      	ldr	r3, [pc, #36]	; (800505c <HAL_TIM_Base_MspInit+0x38>)
 8005038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503a:	4a08      	ldr	r2, [pc, #32]	; (800505c <HAL_TIM_Base_MspInit+0x38>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	6593      	str	r3, [r2, #88]	; 0x58
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <HAL_TIM_Base_MspInit+0x38>)
 8005044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40021000 	.word	0x40021000

08005060 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005064:	4b12      	ldr	r3, [pc, #72]	; (80050b0 <MX_LPUART1_UART_Init+0x50>)
 8005066:	4a13      	ldr	r2, [pc, #76]	; (80050b4 <MX_LPUART1_UART_Init+0x54>)
 8005068:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800506a:	4b11      	ldr	r3, [pc, #68]	; (80050b0 <MX_LPUART1_UART_Init+0x50>)
 800506c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005070:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005072:	4b0f      	ldr	r3, [pc, #60]	; (80050b0 <MX_LPUART1_UART_Init+0x50>)
 8005074:	2200      	movs	r2, #0
 8005076:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005078:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <MX_LPUART1_UART_Init+0x50>)
 800507a:	2200      	movs	r2, #0
 800507c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800507e:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <MX_LPUART1_UART_Init+0x50>)
 8005080:	2200      	movs	r2, #0
 8005082:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005084:	4b0a      	ldr	r3, [pc, #40]	; (80050b0 <MX_LPUART1_UART_Init+0x50>)
 8005086:	220c      	movs	r2, #12
 8005088:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800508a:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <MX_LPUART1_UART_Init+0x50>)
 800508c:	2200      	movs	r2, #0
 800508e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <MX_LPUART1_UART_Init+0x50>)
 8005092:	2200      	movs	r2, #0
 8005094:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <MX_LPUART1_UART_Init+0x50>)
 8005098:	2200      	movs	r2, #0
 800509a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800509c:	4804      	ldr	r0, [pc, #16]	; (80050b0 <MX_LPUART1_UART_Init+0x50>)
 800509e:	f006 ffe7 	bl	800c070 <HAL_UART_Init>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80050a8:	f7fc fca3 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80050ac:	bf00      	nop
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20000f14 	.word	0x20000f14
 80050b4:	40008000 	.word	0x40008000

080050b8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80050bc:	4b14      	ldr	r3, [pc, #80]	; (8005110 <MX_USART1_UART_Init+0x58>)
 80050be:	4a15      	ldr	r2, [pc, #84]	; (8005114 <MX_USART1_UART_Init+0x5c>)
 80050c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80050c2:	4b13      	ldr	r3, [pc, #76]	; (8005110 <MX_USART1_UART_Init+0x58>)
 80050c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80050c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80050ca:	4b11      	ldr	r3, [pc, #68]	; (8005110 <MX_USART1_UART_Init+0x58>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <MX_USART1_UART_Init+0x58>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80050d6:	4b0e      	ldr	r3, [pc, #56]	; (8005110 <MX_USART1_UART_Init+0x58>)
 80050d8:	2200      	movs	r2, #0
 80050da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <MX_USART1_UART_Init+0x58>)
 80050de:	220c      	movs	r2, #12
 80050e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050e2:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <MX_USART1_UART_Init+0x58>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80050e8:	4b09      	ldr	r3, [pc, #36]	; (8005110 <MX_USART1_UART_Init+0x58>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050ee:	4b08      	ldr	r3, [pc, #32]	; (8005110 <MX_USART1_UART_Init+0x58>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050f4:	4b06      	ldr	r3, [pc, #24]	; (8005110 <MX_USART1_UART_Init+0x58>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80050fa:	4805      	ldr	r0, [pc, #20]	; (8005110 <MX_USART1_UART_Init+0x58>)
 80050fc:	f006 ffb8 	bl	800c070 <HAL_UART_Init>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005106:	f7fc fc74 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800510a:	bf00      	nop
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000f9c 	.word	0x20000f9c
 8005114:	40013800 	.word	0x40013800

08005118 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b0a0      	sub	sp, #128	; 0x80
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005120:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	605a      	str	r2, [r3, #4]
 800512a:	609a      	str	r2, [r3, #8]
 800512c:	60da      	str	r2, [r3, #12]
 800512e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005130:	f107 0318 	add.w	r3, r7, #24
 8005134:	2254      	movs	r2, #84	; 0x54
 8005136:	2100      	movs	r1, #0
 8005138:	4618      	mov	r0, r3
 800513a:	f010 f81a 	bl	8015172 <memset>
  if(uartHandle->Instance==LPUART1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a55      	ldr	r2, [pc, #340]	; (8005298 <HAL_UART_MspInit+0x180>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d168      	bne.n	800521a <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005148:	2320      	movs	r3, #32
 800514a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800514c:	2300      	movs	r3, #0
 800514e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005150:	f107 0318 	add.w	r3, r7, #24
 8005154:	4618      	mov	r0, r3
 8005156:	f005 faa3 	bl	800a6a0 <HAL_RCCEx_PeriphCLKConfig>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005160:	f7fc fc47 	bl	80019f2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005164:	4b4d      	ldr	r3, [pc, #308]	; (800529c <HAL_UART_MspInit+0x184>)
 8005166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005168:	4a4c      	ldr	r2, [pc, #304]	; (800529c <HAL_UART_MspInit+0x184>)
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8005170:	4b4a      	ldr	r3, [pc, #296]	; (800529c <HAL_UART_MspInit+0x184>)
 8005172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800517c:	4b47      	ldr	r3, [pc, #284]	; (800529c <HAL_UART_MspInit+0x184>)
 800517e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005180:	4a46      	ldr	r2, [pc, #280]	; (800529c <HAL_UART_MspInit+0x184>)
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005188:	4b44      	ldr	r3, [pc, #272]	; (800529c <HAL_UART_MspInit+0x184>)
 800518a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005194:	230c      	movs	r3, #12
 8005196:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005198:	2302      	movs	r3, #2
 800519a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519c:	2300      	movs	r3, #0
 800519e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051a0:	2303      	movs	r3, #3
 80051a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80051a4:	2308      	movs	r3, #8
 80051a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80051ac:	4619      	mov	r1, r3
 80051ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051b2:	f001 ffe5 	bl	8007180 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 80051b6:	4b3a      	ldr	r3, [pc, #232]	; (80052a0 <HAL_UART_MspInit+0x188>)
 80051b8:	4a3a      	ldr	r2, [pc, #232]	; (80052a4 <HAL_UART_MspInit+0x18c>)
 80051ba:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 80051bc:	4b38      	ldr	r3, [pc, #224]	; (80052a0 <HAL_UART_MspInit+0x188>)
 80051be:	2204      	movs	r2, #4
 80051c0:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051c2:	4b37      	ldr	r3, [pc, #220]	; (80052a0 <HAL_UART_MspInit+0x188>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051c8:	4b35      	ldr	r3, [pc, #212]	; (80052a0 <HAL_UART_MspInit+0x188>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051ce:	4b34      	ldr	r3, [pc, #208]	; (80052a0 <HAL_UART_MspInit+0x188>)
 80051d0:	2280      	movs	r2, #128	; 0x80
 80051d2:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051d4:	4b32      	ldr	r3, [pc, #200]	; (80052a0 <HAL_UART_MspInit+0x188>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051da:	4b31      	ldr	r3, [pc, #196]	; (80052a0 <HAL_UART_MspInit+0x188>)
 80051dc:	2200      	movs	r2, #0
 80051de:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 80051e0:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <HAL_UART_MspInit+0x188>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051e6:	4b2e      	ldr	r3, [pc, #184]	; (80052a0 <HAL_UART_MspInit+0x188>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 80051ec:	482c      	ldr	r0, [pc, #176]	; (80052a0 <HAL_UART_MspInit+0x188>)
 80051ee:	f001 fd45 	bl	8006c7c <HAL_DMA_Init>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80051f8:	f7fc fbfb 	bl	80019f2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a28      	ldr	r2, [pc, #160]	; (80052a0 <HAL_UART_MspInit+0x188>)
 8005200:	675a      	str	r2, [r3, #116]	; 0x74
 8005202:	4a27      	ldr	r2, [pc, #156]	; (80052a0 <HAL_UART_MspInit+0x188>)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8005208:	2200      	movs	r2, #0
 800520a:	2100      	movs	r1, #0
 800520c:	2046      	movs	r0, #70	; 0x46
 800520e:	f001 fcfe 	bl	8006c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005212:	2046      	movs	r0, #70	; 0x46
 8005214:	f001 fd17 	bl	8006c46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005218:	e03a      	b.n	8005290 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART1)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a22      	ldr	r2, [pc, #136]	; (80052a8 <HAL_UART_MspInit+0x190>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d135      	bne.n	8005290 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005224:	2301      	movs	r3, #1
 8005226:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005228:	2300      	movs	r3, #0
 800522a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800522c:	f107 0318 	add.w	r3, r7, #24
 8005230:	4618      	mov	r0, r3
 8005232:	f005 fa35 	bl	800a6a0 <HAL_RCCEx_PeriphCLKConfig>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_UART_MspInit+0x128>
      Error_Handler();
 800523c:	f7fc fbd9 	bl	80019f2 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005240:	4b16      	ldr	r3, [pc, #88]	; (800529c <HAL_UART_MspInit+0x184>)
 8005242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005244:	4a15      	ldr	r2, [pc, #84]	; (800529c <HAL_UART_MspInit+0x184>)
 8005246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800524a:	6613      	str	r3, [r2, #96]	; 0x60
 800524c:	4b13      	ldr	r3, [pc, #76]	; (800529c <HAL_UART_MspInit+0x184>)
 800524e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005258:	4b10      	ldr	r3, [pc, #64]	; (800529c <HAL_UART_MspInit+0x184>)
 800525a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525c:	4a0f      	ldr	r2, [pc, #60]	; (800529c <HAL_UART_MspInit+0x184>)
 800525e:	f043 0302 	orr.w	r3, r3, #2
 8005262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005264:	4b0d      	ldr	r3, [pc, #52]	; (800529c <HAL_UART_MspInit+0x184>)
 8005266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005270:	23c0      	movs	r3, #192	; 0xc0
 8005272:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005274:	2302      	movs	r3, #2
 8005276:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	2300      	movs	r3, #0
 800527a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800527c:	2303      	movs	r3, #3
 800527e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005280:	2307      	movs	r3, #7
 8005282:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005284:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005288:	4619      	mov	r1, r3
 800528a:	4808      	ldr	r0, [pc, #32]	; (80052ac <HAL_UART_MspInit+0x194>)
 800528c:	f001 ff78 	bl	8007180 <HAL_GPIO_Init>
}
 8005290:	bf00      	nop
 8005292:	3780      	adds	r7, #128	; 0x80
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40008000 	.word	0x40008000
 800529c:	40021000 	.word	0x40021000
 80052a0:	20001024 	.word	0x20001024
 80052a4:	40020480 	.word	0x40020480
 80052a8:	40013800 	.word	0x40013800
 80052ac:	48000400 	.word	0x48000400

080052b0 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80052b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 80052b8:	4b30      	ldr	r3, [pc, #192]	; (800537c <HAL_UART_RxCpltCallback+0xcc>)
 80052ba:	881a      	ldrh	r2, [r3, #0]
 80052bc:	4b30      	ldr	r3, [pc, #192]	; (8005380 <HAL_UART_RxCpltCallback+0xd0>)
 80052be:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 80052c0:	4b2f      	ldr	r3, [pc, #188]	; (8005380 <HAL_UART_RxCpltCallback+0xd0>)
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80052c8:	d922      	bls.n	8005310 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80052ca:	4b2d      	ldr	r3, [pc, #180]	; (8005380 <HAL_UART_RxCpltCallback+0xd0>)
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80052d2:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 80052d4:	4b2a      	ldr	r3, [pc, #168]	; (8005380 <HAL_UART_RxCpltCallback+0xd0>)
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <HAL_UART_RxCpltCallback+0xd4>)
 80052dc:	4413      	add	r3, r2
 80052de:	89fa      	ldrh	r2, [r7, #14]
 80052e0:	4929      	ldr	r1, [pc, #164]	; (8005388 <HAL_UART_RxCpltCallback+0xd8>)
 80052e2:	4618      	mov	r0, r3
 80052e4:	f010 f861 	bl	80153aa <memcpy>

				oldPos = 0;  // point to the start of the buffer
 80052e8:	4b25      	ldr	r3, [pc, #148]	; (8005380 <HAL_UART_RxCpltCallback+0xd0>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 80052ee:	89fb      	ldrh	r3, [r7, #14]
 80052f0:	4a25      	ldr	r2, [pc, #148]	; (8005388 <HAL_UART_RxCpltCallback+0xd8>)
 80052f2:	1899      	adds	r1, r3, r2
 80052f4:	89fb      	ldrh	r3, [r7, #14]
 80052f6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80052fa:	461a      	mov	r2, r3
 80052fc:	4821      	ldr	r0, [pc, #132]	; (8005384 <HAL_UART_RxCpltCallback+0xd4>)
 80052fe:	f010 f854 	bl	80153aa <memcpy>
				newPos = (64-datatocopy);  // update the position
 8005302:	89fb      	ldrh	r3, [r7, #14]
 8005304:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005308:	b29a      	uxth	r2, r3
 800530a:	4b1c      	ldr	r3, [pc, #112]	; (800537c <HAL_UART_RxCpltCallback+0xcc>)
 800530c:	801a      	strh	r2, [r3, #0]
 800530e:	e01e      	b.n	800534e <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8005310:	4b1b      	ldr	r3, [pc, #108]	; (8005380 <HAL_UART_RxCpltCallback+0xd0>)
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	4b1b      	ldr	r3, [pc, #108]	; (8005384 <HAL_UART_RxCpltCallback+0xd4>)
 8005318:	441a      	add	r2, r3
 800531a:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <HAL_UART_RxCpltCallback+0xd8>)
 800531c:	4610      	mov	r0, r2
 800531e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005322:	4602      	mov	r2, r0
 8005324:	4619      	mov	r1, r3
 8005326:	f8d1 c000 	ldr.w	ip, [r1]
 800532a:	684e      	ldr	r6, [r1, #4]
 800532c:	688d      	ldr	r5, [r1, #8]
 800532e:	68c9      	ldr	r1, [r1, #12]
 8005330:	f8c2 c000 	str.w	ip, [r2]
 8005334:	6056      	str	r6, [r2, #4]
 8005336:	6095      	str	r5, [r2, #8]
 8005338:	60d1      	str	r1, [r2, #12]
 800533a:	3310      	adds	r3, #16
 800533c:	3010      	adds	r0, #16
 800533e:	42a3      	cmp	r3, r4
 8005340:	d1ef      	bne.n	8005322 <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8005342:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <HAL_UART_RxCpltCallback+0xd0>)
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	3340      	adds	r3, #64	; 0x40
 8005348:	b29a      	uxth	r2, r3
 800534a:	4b0c      	ldr	r3, [pc, #48]	; (800537c <HAL_UART_RxCpltCallback+0xcc>)
 800534c:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 800534e:	2240      	movs	r2, #64	; 0x40
 8005350:	490d      	ldr	r1, [pc, #52]	; (8005388 <HAL_UART_RxCpltCallback+0xd8>)
 8005352:	480e      	ldr	r0, [pc, #56]	; (800538c <HAL_UART_RxCpltCallback+0xdc>)
 8005354:	f006 feda 	bl	800c10c <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8005358:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <HAL_UART_RxCpltCallback+0xe0>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <HAL_UART_RxCpltCallback+0xe0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0204 	bic.w	r2, r2, #4
 8005366:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 8005368:	2240      	movs	r2, #64	; 0x40
 800536a:	4907      	ldr	r1, [pc, #28]	; (8005388 <HAL_UART_RxCpltCallback+0xd8>)
 800536c:	4807      	ldr	r0, [pc, #28]	; (800538c <HAL_UART_RxCpltCallback+0xdc>)
 800536e:	f006 fecd 	bl	800c10c <HAL_UART_Receive_DMA>
}
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800537a:	bf00      	nop
 800537c:	2000046a 	.word	0x2000046a
 8005380:	20000468 	.word	0x20000468
 8005384:	200004ac 	.word	0x200004ac
 8005388:	2000046c 	.word	0x2000046c
 800538c:	20000f14 	.word	0x20000f14
 8005390:	20001024 	.word	0x20001024

08005394 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005398:	f7ff fde4 	bl	8004f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800539c:	480c      	ldr	r0, [pc, #48]	; (80053d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800539e:	490d      	ldr	r1, [pc, #52]	; (80053d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80053a0:	4a0d      	ldr	r2, [pc, #52]	; (80053d8 <LoopForever+0xe>)
  movs r3, #0
 80053a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053a4:	e002      	b.n	80053ac <LoopCopyDataInit>

080053a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053aa:	3304      	adds	r3, #4

080053ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053b0:	d3f9      	bcc.n	80053a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053b2:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80053b4:	4c0a      	ldr	r4, [pc, #40]	; (80053e0 <LoopForever+0x16>)
  movs r3, #0
 80053b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053b8:	e001      	b.n	80053be <LoopFillZerobss>

080053ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053bc:	3204      	adds	r2, #4

080053be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053c0:	d3fb      	bcc.n	80053ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80053c2:	f00f ffc3 	bl	801534c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80053c6:	f7fc f9e7 	bl	8001798 <main>

080053ca <LoopForever>:

LoopForever:
    b LoopForever
 80053ca:	e7fe      	b.n	80053ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80053cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80053d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053d4:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 80053d8:	0801b518 	.word	0x0801b518
  ldr r2, =_sbss
 80053dc:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 80053e0:	200023b4 	.word	0x200023b4

080053e4 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80053e4:	e7fe      	b.n	80053e4 <CAN1_RX0_IRQHandler>

080053e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b082      	sub	sp, #8
 80053ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053f0:	2003      	movs	r0, #3
 80053f2:	f001 fc01 	bl	8006bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053f6:	200f      	movs	r0, #15
 80053f8:	f000 f80e 	bl	8005418 <HAL_InitTick>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	71fb      	strb	r3, [r7, #7]
 8005406:	e001      	b.n	800540c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005408:	f7ff fc56 	bl	8004cb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800540c:	79fb      	ldrb	r3, [r7, #7]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005424:	4b17      	ldr	r3, [pc, #92]	; (8005484 <HAL_InitTick+0x6c>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d023      	beq.n	8005474 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800542c:	4b16      	ldr	r3, [pc, #88]	; (8005488 <HAL_InitTick+0x70>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4b14      	ldr	r3, [pc, #80]	; (8005484 <HAL_InitTick+0x6c>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	4619      	mov	r1, r3
 8005436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800543a:	fbb3 f3f1 	udiv	r3, r3, r1
 800543e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005442:	4618      	mov	r0, r3
 8005444:	f001 fc0d 	bl	8006c62 <HAL_SYSTICK_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10f      	bne.n	800546e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b0f      	cmp	r3, #15
 8005452:	d809      	bhi.n	8005468 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005454:	2200      	movs	r2, #0
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	f04f 30ff 	mov.w	r0, #4294967295
 800545c:	f001 fbd7 	bl	8006c0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005460:	4a0a      	ldr	r2, [pc, #40]	; (800548c <HAL_InitTick+0x74>)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	e007      	b.n	8005478 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	73fb      	strb	r3, [r7, #15]
 800546c:	e004      	b.n	8005478 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	73fb      	strb	r3, [r7, #15]
 8005472:	e001      	b.n	8005478 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005478:	7bfb      	ldrb	r3, [r7, #15]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000028 	.word	0x20000028
 8005488:	20000020 	.word	0x20000020
 800548c:	20000024 	.word	0x20000024

08005490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005494:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <HAL_IncTick+0x20>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <HAL_IncTick+0x24>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4413      	add	r3, r2
 80054a0:	4a04      	ldr	r2, [pc, #16]	; (80054b4 <HAL_IncTick+0x24>)
 80054a2:	6013      	str	r3, [r2, #0]
}
 80054a4:	bf00      	nop
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	20000028 	.word	0x20000028
 80054b4:	2000106c 	.word	0x2000106c

080054b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  return uwTick;
 80054bc:	4b03      	ldr	r3, [pc, #12]	; (80054cc <HAL_GetTick+0x14>)
 80054be:	681b      	ldr	r3, [r3, #0]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	2000106c 	.word	0x2000106c

080054d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054d8:	f7ff ffee 	bl	80054b8 <HAL_GetTick>
 80054dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d005      	beq.n	80054f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80054ea:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <HAL_Delay+0x44>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054f6:	bf00      	nop
 80054f8:	f7ff ffde 	bl	80054b8 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	429a      	cmp	r2, r3
 8005506:	d8f7      	bhi.n	80054f8 <HAL_Delay+0x28>
  {
  }
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000028 	.word	0x20000028

08005518 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	609a      	str	r2, [r3, #8]
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	609a      	str	r2, [r3, #8]
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3360      	adds	r3, #96	; 0x60
 8005592:	461a      	mov	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b08      	ldr	r3, [pc, #32]	; (80055c4 <LL_ADC_SetOffset+0x44>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80055b8:	bf00      	nop
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	03fff000 	.word	0x03fff000

080055c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3360      	adds	r3, #96	; 0x60
 80055d6:	461a      	mov	r2, r3
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3360      	adds	r3, #96	; 0x60
 8005604:	461a      	mov	r2, r3
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	431a      	orrs	r2, r3
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3330      	adds	r3, #48	; 0x30
 8005660:	461a      	mov	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	0a1b      	lsrs	r3, r3, #8
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	f003 030c 	and.w	r3, r3, #12
 800566c:	4413      	add	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	211f      	movs	r1, #31
 800567c:	fa01 f303 	lsl.w	r3, r1, r3
 8005680:	43db      	mvns	r3, r3
 8005682:	401a      	ands	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	0e9b      	lsrs	r3, r3, #26
 8005688:	f003 011f 	and.w	r1, r3, #31
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f003 031f 	and.w	r3, r3, #31
 8005692:	fa01 f303 	lsl.w	r3, r1, r3
 8005696:	431a      	orrs	r2, r3
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800569c:	bf00      	nop
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b087      	sub	sp, #28
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3314      	adds	r3, #20
 80056de:	461a      	mov	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	0e5b      	lsrs	r3, r3, #25
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	4413      	add	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	0d1b      	lsrs	r3, r3, #20
 80056f6:	f003 031f 	and.w	r3, r3, #31
 80056fa:	2107      	movs	r1, #7
 80056fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005700:	43db      	mvns	r3, r3
 8005702:	401a      	ands	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	0d1b      	lsrs	r3, r3, #20
 8005708:	f003 031f 	and.w	r3, r3, #31
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	fa01 f303 	lsl.w	r3, r1, r3
 8005712:	431a      	orrs	r2, r3
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005718:	bf00      	nop
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800573c:	43db      	mvns	r3, r3
 800573e:	401a      	ands	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f003 0318 	and.w	r3, r3, #24
 8005746:	4908      	ldr	r1, [pc, #32]	; (8005768 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005748:	40d9      	lsrs	r1, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	400b      	ands	r3, r1
 800574e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005752:	431a      	orrs	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	0007ffff 	.word	0x0007ffff

0800576c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800577c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6093      	str	r3, [r2, #8]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a4:	d101      	bne.n	80057aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80057c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057f4:	d101      	bne.n	80057fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005818:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800581c:	f043 0201 	orr.w	r2, r3, #1
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <LL_ADC_IsEnabled+0x18>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <LL_ADC_IsEnabled+0x1a>
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005866:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800586a:	f043 0204 	orr.w	r2, r3, #4
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b04      	cmp	r3, #4
 8005890:	d101      	bne.n	8005896 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005892:	2301      	movs	r3, #1
 8005894:	e000      	b.n	8005898 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d101      	bne.n	80058bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e126      	b.n	8005b34 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d109      	bne.n	8005908 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7fb fc01 	bl	80010fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff ff3f 	bl	8005790 <LL_ADC_IsDeepPowerDownEnabled>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d004      	beq.n	8005922 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff ff25 	bl	800576c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff ff5a 	bl	80057e0 <LL_ADC_IsInternalRegulatorEnabled>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d115      	bne.n	800595e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff ff3e 	bl	80057b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800593c:	4b7f      	ldr	r3, [pc, #508]	; (8005b3c <HAL_ADC_Init+0x270>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	099b      	lsrs	r3, r3, #6
 8005942:	4a7f      	ldr	r2, [pc, #508]	; (8005b40 <HAL_ADC_Init+0x274>)
 8005944:	fba2 2303 	umull	r2, r3, r2, r3
 8005948:	099b      	lsrs	r3, r3, #6
 800594a:	3301      	adds	r3, #1
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005950:	e002      	b.n	8005958 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3b01      	subs	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f9      	bne.n	8005952 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff ff3c 	bl	80057e0 <LL_ADC_IsInternalRegulatorEnabled>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10d      	bne.n	800598a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	f043 0210 	orr.w	r2, r3, #16
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597e:	f043 0201 	orr.w	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff ff75 	bl	800587e <LL_ADC_REG_IsConversionOngoing>
 8005994:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f040 80bf 	bne.w	8005b22 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f040 80bb 	bne.w	8005b22 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80059b4:	f043 0202 	orr.w	r2, r3, #2
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff ff35 	bl	8005830 <LL_ADC_IsEnabled>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10b      	bne.n	80059e4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059cc:	485d      	ldr	r0, [pc, #372]	; (8005b44 <HAL_ADC_Init+0x278>)
 80059ce:	f7ff ff2f 	bl	8005830 <LL_ADC_IsEnabled>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d105      	bne.n	80059e4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	4619      	mov	r1, r3
 80059de:	485a      	ldr	r0, [pc, #360]	; (8005b48 <HAL_ADC_Init+0x27c>)
 80059e0:	f7ff fd9a 	bl	8005518 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	7e5b      	ldrb	r3, [r3, #25]
 80059e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80059f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80059fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a02:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005a04:	4313      	orrs	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d106      	bne.n	8005a20 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	3b01      	subs	r3, #1
 8005a18:	045b      	lsls	r3, r3, #17
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d009      	beq.n	8005a3c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	4b42      	ldr	r3, [pc, #264]	; (8005b4c <HAL_ADC_Init+0x280>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	69b9      	ldr	r1, [r7, #24]
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff ff25 	bl	80058a4 <LL_ADC_INJ_IsConversionOngoing>
 8005a5a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d13d      	bne.n	8005ade <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d13a      	bne.n	8005ade <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a6c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a74:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a76:	4313      	orrs	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a84:	f023 0302 	bic.w	r3, r3, #2
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	69b9      	ldr	r1, [r7, #24]
 8005a8e:	430b      	orrs	r3, r1
 8005a90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d118      	bne.n	8005ace <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005aa6:	f023 0304 	bic.w	r3, r3, #4
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ab2:	4311      	orrs	r1, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005ab8:	4311      	orrs	r1, r2
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	611a      	str	r2, [r3, #16]
 8005acc:	e007      	b.n	8005ade <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d10c      	bne.n	8005b00 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	f023 010f 	bic.w	r1, r3, #15
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	1e5a      	subs	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	631a      	str	r2, [r3, #48]	; 0x30
 8005afe:	e007      	b.n	8005b10 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 020f 	bic.w	r2, r2, #15
 8005b0e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b14:	f023 0303 	bic.w	r3, r3, #3
 8005b18:	f043 0201 	orr.w	r2, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	655a      	str	r2, [r3, #84]	; 0x54
 8005b20:	e007      	b.n	8005b32 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b26:	f043 0210 	orr.w	r2, r3, #16
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b32:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3720      	adds	r7, #32
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20000020 	.word	0x20000020
 8005b40:	053e2d63 	.word	0x053e2d63
 8005b44:	50040000 	.word	0x50040000
 8005b48:	50040300 	.word	0x50040300
 8005b4c:	fff0c007 	.word	0xfff0c007

08005b50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff fe8c 	bl	800587e <LL_ADC_REG_IsConversionOngoing>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d167      	bne.n	8005c3c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_ADC_Start_DMA+0x2a>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e063      	b.n	8005c42 <HAL_ADC_Start_DMA+0xf2>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fe1c 	bl	80067c0 <ADC_Enable>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d14f      	bne.n	8005c32 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b9a:	f023 0301 	bic.w	r3, r3, #1
 8005b9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d006      	beq.n	8005bc0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb6:	f023 0206 	bic.w	r2, r3, #6
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	659a      	str	r2, [r3, #88]	; 0x58
 8005bbe:	e002      	b.n	8005bc6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bca:	4a20      	ldr	r2, [pc, #128]	; (8005c4c <HAL_ADC_Start_DMA+0xfc>)
 8005bcc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd2:	4a1f      	ldr	r2, [pc, #124]	; (8005c50 <HAL_ADC_Start_DMA+0x100>)
 8005bd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bda:	4a1e      	ldr	r2, [pc, #120]	; (8005c54 <HAL_ADC_Start_DMA+0x104>)
 8005bdc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	221c      	movs	r2, #28
 8005be4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0210 	orr.w	r2, r2, #16
 8005bfc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0201 	orr.w	r2, r2, #1
 8005c0c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3340      	adds	r3, #64	; 0x40
 8005c18:	4619      	mov	r1, r3
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f001 f8e5 	bl	8006dec <HAL_DMA_Start_IT>
 8005c22:	4603      	mov	r3, r0
 8005c24:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff fe13 	bl	8005856 <LL_ADC_REG_StartConversion>
 8005c30:	e006      	b.n	8005c40 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005c3a:	e001      	b.n	8005c40 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	080068cd 	.word	0x080068cd
 8005c50:	080069a5 	.word	0x080069a5
 8005c54:	080069c1 	.word	0x080069c1

08005c58 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005c60:	2300      	movs	r3, #0
 8005c62:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d017      	beq.n	8005cae <HAL_ADC_IRQHandler+0x56>
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d012      	beq.n	8005cae <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d105      	bne.n	8005ca0 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c98:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fecf 	bl	8006a44 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2202      	movs	r2, #2
 8005cac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d004      	beq.n	8005cc2 <HAL_ADC_IRQHandler+0x6a>
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d05e      	beq.n	8005d8a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d059      	beq.n	8005d8a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d105      	bne.n	8005cee <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fc99 	bl	800562a <LL_ADC_REG_IsTriggerSourceSWStart>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d03e      	beq.n	8005d7c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d135      	bne.n	8005d7c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d12e      	bne.n	8005d7c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fdab 	bl	800587e <LL_ADC_REG_IsConversionOngoing>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d11a      	bne.n	8005d64 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 020c 	bic.w	r2, r2, #12
 8005d3c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d112      	bne.n	8005d7c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5a:	f043 0201 	orr.w	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	655a      	str	r2, [r3, #84]	; 0x54
 8005d62:	e00b      	b.n	8005d7c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d68:	f043 0210 	orr.w	r2, r3, #16
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d74:	f043 0201 	orr.w	r2, r3, #1
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7fb fa33 	bl	80011e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	220c      	movs	r2, #12
 8005d88:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <HAL_ADC_IRQHandler+0x146>
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d109      	bne.n	8005db2 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d072      	beq.n	8005e8e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d06d      	beq.n	8005e8e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db6:	f003 0310 	and.w	r3, r3, #16
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d105      	bne.n	8005dca <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff fc6a 	bl	80056a8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005dd4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff fc25 	bl	800562a <LL_ADC_REG_IsTriggerSourceSWStart>
 8005de0:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d047      	beq.n	8005e80 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <HAL_ADC_IRQHandler+0x1b2>
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d03f      	beq.n	8005e80 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d13a      	bne.n	8005e80 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e14:	2b40      	cmp	r3, #64	; 0x40
 8005e16:	d133      	bne.n	8005e80 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d12e      	bne.n	8005e80 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fd3c 	bl	80058a4 <LL_ADC_INJ_IsConversionOngoing>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d11a      	bne.n	8005e68 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e40:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d112      	bne.n	8005e80 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5e:	f043 0201 	orr.w	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	655a      	str	r2, [r3, #84]	; 0x54
 8005e66:	e00b      	b.n	8005e80 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6c:	f043 0210 	orr.w	r2, r3, #16
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e78:	f043 0201 	orr.w	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fdb7 	bl	80069f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2260      	movs	r2, #96	; 0x60
 8005e8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d011      	beq.n	8005ebc <HAL_ADC_IRQHandler+0x264>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00c      	beq.n	8005ebc <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f890 	bl	8005fd4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2280      	movs	r2, #128	; 0x80
 8005eba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d012      	beq.n	8005eec <HAL_ADC_IRQHandler+0x294>
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00d      	beq.n	8005eec <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fd9d 	bl	8006a1c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d012      	beq.n	8005f1c <HAL_ADC_IRQHandler+0x2c4>
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00d      	beq.n	8005f1c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fd8f 	bl	8006a30 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	f003 0310 	and.w	r3, r3, #16
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d02a      	beq.n	8005f7c <HAL_ADC_IRQHandler+0x324>
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d025      	beq.n	8005f7c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d102      	bne.n	8005f3e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	61fb      	str	r3, [r7, #28]
 8005f3c:	e008      	b.n	8005f50 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d10e      	bne.n	8005f74 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f66:	f043 0202 	orr.w	r2, r3, #2
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f83a 	bl	8005fe8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2210      	movs	r2, #16
 8005f7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d018      	beq.n	8005fb8 <HAL_ADC_IRQHandler+0x360>
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d013      	beq.n	8005fb8 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f94:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa0:	f043 0208 	orr.w	r2, r3, #8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fb0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fd28 	bl	8006a08 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005fb8:	bf00      	nop
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b0b6      	sub	sp, #216	; 0xd8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800600c:	2300      	movs	r3, #0
 800600e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <HAL_ADC_ConfigChannel+0x22>
 800601a:	2302      	movs	r3, #2
 800601c:	e3bb      	b.n	8006796 <HAL_ADC_ConfigChannel+0x79a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff fc27 	bl	800587e <LL_ADC_REG_IsConversionOngoing>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	f040 83a0 	bne.w	8006778 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b05      	cmp	r3, #5
 8006046:	d824      	bhi.n	8006092 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	3b02      	subs	r3, #2
 800604e:	2b03      	cmp	r3, #3
 8006050:	d81b      	bhi.n	800608a <HAL_ADC_ConfigChannel+0x8e>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <HAL_ADC_ConfigChannel+0x5c>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	08006069 	.word	0x08006069
 800605c:	08006071 	.word	0x08006071
 8006060:	08006079 	.word	0x08006079
 8006064:	08006081 	.word	0x08006081
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8006068:	230c      	movs	r3, #12
 800606a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800606e:	e010      	b.n	8006092 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006070:	2312      	movs	r3, #18
 8006072:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006076:	e00c      	b.n	8006092 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8006078:	2318      	movs	r3, #24
 800607a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800607e:	e008      	b.n	8006092 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006088:	e003      	b.n	8006092 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800608a:	2306      	movs	r3, #6
 800608c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006090:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80060a0:	f7ff fad6 	bl	8005650 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff fbe8 	bl	800587e <LL_ADC_REG_IsConversionOngoing>
 80060ae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff fbf4 	bl	80058a4 <LL_ADC_INJ_IsConversionOngoing>
 80060bc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80060c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f040 81a4 	bne.w	8006412 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80060ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f040 819f 	bne.w	8006412 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	6819      	ldr	r1, [r3, #0]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	461a      	mov	r2, r3
 80060e2:	f7ff faf4 	bl	80056ce <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	695a      	ldr	r2, [r3, #20]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	08db      	lsrs	r3, r3, #3
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b04      	cmp	r3, #4
 8006106:	d00a      	beq.n	800611e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	6919      	ldr	r1, [r3, #16]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006118:	f7ff fa32 	bl	8005580 <LL_ADC_SetOffset>
 800611c:	e179      	b.n	8006412 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2100      	movs	r1, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff fa4f 	bl	80055c8 <LL_ADC_GetOffsetChannel>
 800612a:	4603      	mov	r3, r0
 800612c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <HAL_ADC_ConfigChannel+0x14e>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2100      	movs	r1, #0
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fa44 	bl	80055c8 <LL_ADC_GetOffsetChannel>
 8006140:	4603      	mov	r3, r0
 8006142:	0e9b      	lsrs	r3, r3, #26
 8006144:	f003 021f 	and.w	r2, r3, #31
 8006148:	e01e      	b.n	8006188 <HAL_ADC_ConfigChannel+0x18c>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2100      	movs	r1, #0
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff fa39 	bl	80055c8 <LL_ADC_GetOffsetChannel>
 8006156:	4603      	mov	r3, r0
 8006158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006160:	fa93 f3a3 	rbit	r3, r3
 8006164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006168:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800616c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006170:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8006178:	2320      	movs	r3, #32
 800617a:	e004      	b.n	8006186 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800617c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006180:	fab3 f383 	clz	r3, r3
 8006184:	b2db      	uxtb	r3, r3
 8006186:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006190:	2b00      	cmp	r3, #0
 8006192:	d105      	bne.n	80061a0 <HAL_ADC_ConfigChannel+0x1a4>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	0e9b      	lsrs	r3, r3, #26
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	e018      	b.n	80061d2 <HAL_ADC_ConfigChannel+0x1d6>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061ac:	fa93 f3a3 	rbit	r3, r3
 80061b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80061b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80061bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80061c4:	2320      	movs	r3, #32
 80061c6:	e004      	b.n	80061d2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80061c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061cc:	fab3 f383 	clz	r3, r3
 80061d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d106      	bne.n	80061e4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2200      	movs	r2, #0
 80061dc:	2100      	movs	r1, #0
 80061de:	4618      	mov	r0, r3
 80061e0:	f7ff fa08 	bl	80055f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2101      	movs	r1, #1
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff f9ec 	bl	80055c8 <LL_ADC_GetOffsetChannel>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10a      	bne.n	8006210 <HAL_ADC_ConfigChannel+0x214>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2101      	movs	r1, #1
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff f9e1 	bl	80055c8 <LL_ADC_GetOffsetChannel>
 8006206:	4603      	mov	r3, r0
 8006208:	0e9b      	lsrs	r3, r3, #26
 800620a:	f003 021f 	and.w	r2, r3, #31
 800620e:	e01e      	b.n	800624e <HAL_ADC_ConfigChannel+0x252>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2101      	movs	r1, #1
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff f9d6 	bl	80055c8 <LL_ADC_GetOffsetChannel>
 800621c:	4603      	mov	r3, r0
 800621e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006226:	fa93 f3a3 	rbit	r3, r3
 800622a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800622e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006236:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800623e:	2320      	movs	r3, #32
 8006240:	e004      	b.n	800624c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8006242:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006246:	fab3 f383 	clz	r3, r3
 800624a:	b2db      	uxtb	r3, r3
 800624c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006256:	2b00      	cmp	r3, #0
 8006258:	d105      	bne.n	8006266 <HAL_ADC_ConfigChannel+0x26a>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	0e9b      	lsrs	r3, r3, #26
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	e018      	b.n	8006298 <HAL_ADC_ConfigChannel+0x29c>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006272:	fa93 f3a3 	rbit	r3, r3
 8006276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800627a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800627e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8006282:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800628a:	2320      	movs	r3, #32
 800628c:	e004      	b.n	8006298 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800628e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006292:	fab3 f383 	clz	r3, r3
 8006296:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006298:	429a      	cmp	r2, r3
 800629a:	d106      	bne.n	80062aa <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2200      	movs	r2, #0
 80062a2:	2101      	movs	r1, #1
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff f9a5 	bl	80055f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2102      	movs	r1, #2
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7ff f989 	bl	80055c8 <LL_ADC_GetOffsetChannel>
 80062b6:	4603      	mov	r3, r0
 80062b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10a      	bne.n	80062d6 <HAL_ADC_ConfigChannel+0x2da>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2102      	movs	r1, #2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff f97e 	bl	80055c8 <LL_ADC_GetOffsetChannel>
 80062cc:	4603      	mov	r3, r0
 80062ce:	0e9b      	lsrs	r3, r3, #26
 80062d0:	f003 021f 	and.w	r2, r3, #31
 80062d4:	e01e      	b.n	8006314 <HAL_ADC_ConfigChannel+0x318>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2102      	movs	r1, #2
 80062dc:	4618      	mov	r0, r3
 80062de:	f7ff f973 	bl	80055c8 <LL_ADC_GetOffsetChannel>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062ec:	fa93 f3a3 	rbit	r3, r3
 80062f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80062f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80062fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8006304:	2320      	movs	r3, #32
 8006306:	e004      	b.n	8006312 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8006308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800630c:	fab3 f383 	clz	r3, r3
 8006310:	b2db      	uxtb	r3, r3
 8006312:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800631c:	2b00      	cmp	r3, #0
 800631e:	d105      	bne.n	800632c <HAL_ADC_ConfigChannel+0x330>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	0e9b      	lsrs	r3, r3, #26
 8006326:	f003 031f 	and.w	r3, r3, #31
 800632a:	e014      	b.n	8006356 <HAL_ADC_ConfigChannel+0x35a>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006332:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006334:	fa93 f3a3 	rbit	r3, r3
 8006338:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800633a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800633c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8006340:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8006348:	2320      	movs	r3, #32
 800634a:	e004      	b.n	8006356 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800634c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006350:	fab3 f383 	clz	r3, r3
 8006354:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006356:	429a      	cmp	r2, r3
 8006358:	d106      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2200      	movs	r2, #0
 8006360:	2102      	movs	r1, #2
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff f946 	bl	80055f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2103      	movs	r1, #3
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff f92a 	bl	80055c8 <LL_ADC_GetOffsetChannel>
 8006374:	4603      	mov	r3, r0
 8006376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <HAL_ADC_ConfigChannel+0x398>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2103      	movs	r1, #3
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff f91f 	bl	80055c8 <LL_ADC_GetOffsetChannel>
 800638a:	4603      	mov	r3, r0
 800638c:	0e9b      	lsrs	r3, r3, #26
 800638e:	f003 021f 	and.w	r2, r3, #31
 8006392:	e017      	b.n	80063c4 <HAL_ADC_ConfigChannel+0x3c8>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2103      	movs	r1, #3
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff f914 	bl	80055c8 <LL_ADC_GetOffsetChannel>
 80063a0:	4603      	mov	r3, r0
 80063a2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063a6:	fa93 f3a3 	rbit	r3, r3
 80063aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80063ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ae:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80063b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80063b6:	2320      	movs	r3, #32
 80063b8:	e003      	b.n	80063c2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80063ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063bc:	fab3 f383 	clz	r3, r3
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d105      	bne.n	80063dc <HAL_ADC_ConfigChannel+0x3e0>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	0e9b      	lsrs	r3, r3, #26
 80063d6:	f003 031f 	and.w	r3, r3, #31
 80063da:	e011      	b.n	8006400 <HAL_ADC_ConfigChannel+0x404>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063e4:	fa93 f3a3 	rbit	r3, r3
 80063e8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80063ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063ec:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80063ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80063f4:	2320      	movs	r3, #32
 80063f6:	e003      	b.n	8006400 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80063f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063fa:	fab3 f383 	clz	r3, r3
 80063fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006400:	429a      	cmp	r2, r3
 8006402:	d106      	bne.n	8006412 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2200      	movs	r2, #0
 800640a:	2103      	movs	r1, #3
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff f8f1 	bl	80055f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff fa0a 	bl	8005830 <LL_ADC_IsEnabled>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	f040 8140 	bne.w	80066a4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	6819      	ldr	r1, [r3, #0]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	461a      	mov	r2, r3
 8006432:	f7ff f977 	bl	8005724 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	4a8f      	ldr	r2, [pc, #572]	; (8006678 <HAL_ADC_ConfigChannel+0x67c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	f040 8131 	bne.w	80066a4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <HAL_ADC_ConfigChannel+0x46e>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	0e9b      	lsrs	r3, r3, #26
 8006458:	3301      	adds	r3, #1
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	2b09      	cmp	r3, #9
 8006460:	bf94      	ite	ls
 8006462:	2301      	movls	r3, #1
 8006464:	2300      	movhi	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	e019      	b.n	800649e <HAL_ADC_ConfigChannel+0x4a2>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006472:	fa93 f3a3 	rbit	r3, r3
 8006476:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800647a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800647c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8006482:	2320      	movs	r3, #32
 8006484:	e003      	b.n	800648e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8006486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006488:	fab3 f383 	clz	r3, r3
 800648c:	b2db      	uxtb	r3, r3
 800648e:	3301      	adds	r3, #1
 8006490:	f003 031f 	and.w	r3, r3, #31
 8006494:	2b09      	cmp	r3, #9
 8006496:	bf94      	ite	ls
 8006498:	2301      	movls	r3, #1
 800649a:	2300      	movhi	r3, #0
 800649c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d079      	beq.n	8006596 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d107      	bne.n	80064be <HAL_ADC_ConfigChannel+0x4c2>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	0e9b      	lsrs	r3, r3, #26
 80064b4:	3301      	adds	r3, #1
 80064b6:	069b      	lsls	r3, r3, #26
 80064b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064bc:	e015      	b.n	80064ea <HAL_ADC_ConfigChannel+0x4ee>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c6:	fa93 f3a3 	rbit	r3, r3
 80064ca:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80064cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ce:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80064d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80064d6:	2320      	movs	r3, #32
 80064d8:	e003      	b.n	80064e2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80064da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064dc:	fab3 f383 	clz	r3, r3
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	3301      	adds	r3, #1
 80064e4:	069b      	lsls	r3, r3, #26
 80064e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <HAL_ADC_ConfigChannel+0x50e>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	0e9b      	lsrs	r3, r3, #26
 80064fc:	3301      	adds	r3, #1
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	2101      	movs	r1, #1
 8006504:	fa01 f303 	lsl.w	r3, r1, r3
 8006508:	e017      	b.n	800653a <HAL_ADC_ConfigChannel+0x53e>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006512:	fa93 f3a3 	rbit	r3, r3
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800651a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800651c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8006522:	2320      	movs	r3, #32
 8006524:	e003      	b.n	800652e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8006526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006528:	fab3 f383 	clz	r3, r3
 800652c:	b2db      	uxtb	r3, r3
 800652e:	3301      	adds	r3, #1
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	2101      	movs	r1, #1
 8006536:	fa01 f303 	lsl.w	r3, r1, r3
 800653a:	ea42 0103 	orr.w	r1, r2, r3
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10a      	bne.n	8006560 <HAL_ADC_ConfigChannel+0x564>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	0e9b      	lsrs	r3, r3, #26
 8006550:	3301      	adds	r3, #1
 8006552:	f003 021f 	and.w	r2, r3, #31
 8006556:	4613      	mov	r3, r2
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	4413      	add	r3, r2
 800655c:	051b      	lsls	r3, r3, #20
 800655e:	e018      	b.n	8006592 <HAL_ADC_ConfigChannel+0x596>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006568:	fa93 f3a3 	rbit	r3, r3
 800656c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8006578:	2320      	movs	r3, #32
 800657a:	e003      	b.n	8006584 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657e:	fab3 f383 	clz	r3, r3
 8006582:	b2db      	uxtb	r3, r3
 8006584:	3301      	adds	r3, #1
 8006586:	f003 021f 	and.w	r2, r3, #31
 800658a:	4613      	mov	r3, r2
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	4413      	add	r3, r2
 8006590:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006592:	430b      	orrs	r3, r1
 8006594:	e081      	b.n	800669a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d107      	bne.n	80065b2 <HAL_ADC_ConfigChannel+0x5b6>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	0e9b      	lsrs	r3, r3, #26
 80065a8:	3301      	adds	r3, #1
 80065aa:	069b      	lsls	r3, r3, #26
 80065ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065b0:	e015      	b.n	80065de <HAL_ADC_ConfigChannel+0x5e2>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	fa93 f3a3 	rbit	r3, r3
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80065ca:	2320      	movs	r3, #32
 80065cc:	e003      	b.n	80065d6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	fab3 f383 	clz	r3, r3
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	3301      	adds	r3, #1
 80065d8:	069b      	lsls	r3, r3, #26
 80065da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <HAL_ADC_ConfigChannel+0x602>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	0e9b      	lsrs	r3, r3, #26
 80065f0:	3301      	adds	r3, #1
 80065f2:	f003 031f 	and.w	r3, r3, #31
 80065f6:	2101      	movs	r1, #1
 80065f8:	fa01 f303 	lsl.w	r3, r1, r3
 80065fc:	e017      	b.n	800662e <HAL_ADC_ConfigChannel+0x632>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	fa93 f3a3 	rbit	r3, r3
 800660a:	61bb      	str	r3, [r7, #24]
  return result;
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8006616:	2320      	movs	r3, #32
 8006618:	e003      	b.n	8006622 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	fab3 f383 	clz	r3, r3
 8006620:	b2db      	uxtb	r3, r3
 8006622:	3301      	adds	r3, #1
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	2101      	movs	r1, #1
 800662a:	fa01 f303 	lsl.w	r3, r1, r3
 800662e:	ea42 0103 	orr.w	r1, r2, r3
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10d      	bne.n	800665a <HAL_ADC_ConfigChannel+0x65e>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	0e9b      	lsrs	r3, r3, #26
 8006644:	3301      	adds	r3, #1
 8006646:	f003 021f 	and.w	r2, r3, #31
 800664a:	4613      	mov	r3, r2
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	4413      	add	r3, r2
 8006650:	3b1e      	subs	r3, #30
 8006652:	051b      	lsls	r3, r3, #20
 8006654:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006658:	e01e      	b.n	8006698 <HAL_ADC_ConfigChannel+0x69c>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	fa93 f3a3 	rbit	r3, r3
 8006666:	60fb      	str	r3, [r7, #12]
  return result;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d104      	bne.n	800667c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8006672:	2320      	movs	r3, #32
 8006674:	e006      	b.n	8006684 <HAL_ADC_ConfigChannel+0x688>
 8006676:	bf00      	nop
 8006678:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	fab3 f383 	clz	r3, r3
 8006682:	b2db      	uxtb	r3, r3
 8006684:	3301      	adds	r3, #1
 8006686:	f003 021f 	and.w	r2, r3, #31
 800668a:	4613      	mov	r3, r2
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	4413      	add	r3, r2
 8006690:	3b1e      	subs	r3, #30
 8006692:	051b      	lsls	r3, r3, #20
 8006694:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006698:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800669e:	4619      	mov	r1, r3
 80066a0:	f7ff f815 	bl	80056ce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	4b3d      	ldr	r3, [pc, #244]	; (80067a0 <HAL_ADC_ConfigChannel+0x7a4>)
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d06c      	beq.n	800678a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066b0:	483c      	ldr	r0, [pc, #240]	; (80067a4 <HAL_ADC_ConfigChannel+0x7a8>)
 80066b2:	f7fe ff57 	bl	8005564 <LL_ADC_GetCommonPathInternalCh>
 80066b6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a3a      	ldr	r2, [pc, #232]	; (80067a8 <HAL_ADC_ConfigChannel+0x7ac>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d127      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80066c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d121      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a35      	ldr	r2, [pc, #212]	; (80067ac <HAL_ADC_ConfigChannel+0x7b0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d157      	bne.n	800678a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066e2:	4619      	mov	r1, r3
 80066e4:	482f      	ldr	r0, [pc, #188]	; (80067a4 <HAL_ADC_ConfigChannel+0x7a8>)
 80066e6:	f7fe ff2a 	bl	800553e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066ea:	4b31      	ldr	r3, [pc, #196]	; (80067b0 <HAL_ADC_ConfigChannel+0x7b4>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	099b      	lsrs	r3, r3, #6
 80066f0:	4a30      	ldr	r2, [pc, #192]	; (80067b4 <HAL_ADC_ConfigChannel+0x7b8>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	099b      	lsrs	r3, r3, #6
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	4613      	mov	r3, r2
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006704:	e002      	b.n	800670c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	3b01      	subs	r3, #1
 800670a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f9      	bne.n	8006706 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006712:	e03a      	b.n	800678a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a27      	ldr	r2, [pc, #156]	; (80067b8 <HAL_ADC_ConfigChannel+0x7bc>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d113      	bne.n	8006746 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800671e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10d      	bne.n	8006746 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1f      	ldr	r2, [pc, #124]	; (80067ac <HAL_ADC_ConfigChannel+0x7b0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d12a      	bne.n	800678a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006734:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006738:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800673c:	4619      	mov	r1, r3
 800673e:	4819      	ldr	r0, [pc, #100]	; (80067a4 <HAL_ADC_ConfigChannel+0x7a8>)
 8006740:	f7fe fefd 	bl	800553e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006744:	e021      	b.n	800678a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a1c      	ldr	r2, [pc, #112]	; (80067bc <HAL_ADC_ConfigChannel+0x7c0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d11c      	bne.n	800678a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006750:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d116      	bne.n	800678a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a12      	ldr	r2, [pc, #72]	; (80067ac <HAL_ADC_ConfigChannel+0x7b0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d111      	bne.n	800678a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006766:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800676a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800676e:	4619      	mov	r1, r3
 8006770:	480c      	ldr	r0, [pc, #48]	; (80067a4 <HAL_ADC_ConfigChannel+0x7a8>)
 8006772:	f7fe fee4 	bl	800553e <LL_ADC_SetCommonPathInternalCh>
 8006776:	e008      	b.n	800678a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677c:	f043 0220 	orr.w	r2, r3, #32
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006792:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006796:	4618      	mov	r0, r3
 8006798:	37d8      	adds	r7, #216	; 0xd8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	80080000 	.word	0x80080000
 80067a4:	50040300 	.word	0x50040300
 80067a8:	c7520000 	.word	0xc7520000
 80067ac:	50040000 	.word	0x50040000
 80067b0:	20000020 	.word	0x20000020
 80067b4:	053e2d63 	.word	0x053e2d63
 80067b8:	cb840000 	.word	0xcb840000
 80067bc:	80000001 	.word	0x80000001

080067c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80067c8:	2300      	movs	r3, #0
 80067ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff f82d 	bl	8005830 <LL_ADC_IsEnabled>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d169      	bne.n	80068b0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	4b36      	ldr	r3, [pc, #216]	; (80068bc <ADC_Enable+0xfc>)
 80067e4:	4013      	ands	r3, r2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00d      	beq.n	8006806 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	f043 0210 	orr.w	r2, r3, #16
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fa:	f043 0201 	orr.w	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e055      	b.n	80068b2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fffc 	bl	8005808 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006810:	482b      	ldr	r0, [pc, #172]	; (80068c0 <ADC_Enable+0x100>)
 8006812:	f7fe fea7 	bl	8005564 <LL_ADC_GetCommonPathInternalCh>
 8006816:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800681c:	2b00      	cmp	r3, #0
 800681e:	d013      	beq.n	8006848 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006820:	4b28      	ldr	r3, [pc, #160]	; (80068c4 <ADC_Enable+0x104>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	099b      	lsrs	r3, r3, #6
 8006826:	4a28      	ldr	r2, [pc, #160]	; (80068c8 <ADC_Enable+0x108>)
 8006828:	fba2 2303 	umull	r2, r3, r2, r3
 800682c:	099b      	lsrs	r3, r3, #6
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	4613      	mov	r3, r2
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800683a:	e002      	b.n	8006842 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	3b01      	subs	r3, #1
 8006840:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1f9      	bne.n	800683c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006848:	f7fe fe36 	bl	80054b8 <HAL_GetTick>
 800684c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800684e:	e028      	b.n	80068a2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4618      	mov	r0, r3
 8006856:	f7fe ffeb 	bl	8005830 <LL_ADC_IsEnabled>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d104      	bne.n	800686a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe ffcf 	bl	8005808 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800686a:	f7fe fe25 	bl	80054b8 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d914      	bls.n	80068a2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b01      	cmp	r3, #1
 8006884:	d00d      	beq.n	80068a2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688a:	f043 0210 	orr.w	r2, r3, #16
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006896:	f043 0201 	orr.w	r2, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e007      	b.n	80068b2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d1cf      	bne.n	8006850 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	8000003f 	.word	0x8000003f
 80068c0:	50040300 	.word	0x50040300
 80068c4:	20000020 	.word	0x20000020
 80068c8:	053e2d63 	.word	0x053e2d63

080068cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d14b      	bne.n	800697e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d021      	beq.n	8006944 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4618      	mov	r0, r3
 8006906:	f7fe fe90 	bl	800562a <LL_ADC_REG_IsTriggerSourceSWStart>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d032      	beq.n	8006976 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d12b      	bne.n	8006976 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d11f      	bne.n	8006976 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693a:	f043 0201 	orr.w	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	655a      	str	r2, [r3, #84]	; 0x54
 8006942:	e018      	b.n	8006976 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d111      	bne.n	8006976 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006956:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696e:	f043 0201 	orr.w	r2, r3, #1
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7fa fc36 	bl	80011e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800697c:	e00e      	b.n	800699c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff fb2c 	bl	8005fe8 <HAL_ADC_ErrorCallback>
}
 8006990:	e004      	b.n	800699c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	4798      	blx	r3
}
 800699c:	bf00      	nop
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7ff fb04 	bl	8005fc0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069de:	f043 0204 	orr.w	r2, r3, #4
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff fafe 	bl	8005fe8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069ec:	bf00      	nop
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a68:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <__NVIC_SetPriorityGrouping+0x44>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a74:	4013      	ands	r3, r2
 8006a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a8a:	4a04      	ldr	r2, [pc, #16]	; (8006a9c <__NVIC_SetPriorityGrouping+0x44>)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	60d3      	str	r3, [r2, #12]
}
 8006a90:	bf00      	nop
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	e000ed00 	.word	0xe000ed00

08006aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006aa4:	4b04      	ldr	r3, [pc, #16]	; (8006ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	0a1b      	lsrs	r3, r3, #8
 8006aaa:	f003 0307 	and.w	r3, r3, #7
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	e000ed00 	.word	0xe000ed00

08006abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	db0b      	blt.n	8006ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	f003 021f 	and.w	r2, r3, #31
 8006ad4:	4907      	ldr	r1, [pc, #28]	; (8006af4 <__NVIC_EnableIRQ+0x38>)
 8006ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ada:	095b      	lsrs	r3, r3, #5
 8006adc:	2001      	movs	r0, #1
 8006ade:	fa00 f202 	lsl.w	r2, r0, r2
 8006ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	e000e100 	.word	0xe000e100

08006af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	4603      	mov	r3, r0
 8006b00:	6039      	str	r1, [r7, #0]
 8006b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	db0a      	blt.n	8006b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	490c      	ldr	r1, [pc, #48]	; (8006b44 <__NVIC_SetPriority+0x4c>)
 8006b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b16:	0112      	lsls	r2, r2, #4
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b20:	e00a      	b.n	8006b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	4908      	ldr	r1, [pc, #32]	; (8006b48 <__NVIC_SetPriority+0x50>)
 8006b28:	79fb      	ldrb	r3, [r7, #7]
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	3b04      	subs	r3, #4
 8006b30:	0112      	lsls	r2, r2, #4
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	440b      	add	r3, r1
 8006b36:	761a      	strb	r2, [r3, #24]
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	e000e100 	.word	0xe000e100
 8006b48:	e000ed00 	.word	0xe000ed00

08006b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b089      	sub	sp, #36	; 0x24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	f1c3 0307 	rsb	r3, r3, #7
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	bf28      	it	cs
 8006b6a:	2304      	movcs	r3, #4
 8006b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	3304      	adds	r3, #4
 8006b72:	2b06      	cmp	r3, #6
 8006b74:	d902      	bls.n	8006b7c <NVIC_EncodePriority+0x30>
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	3b03      	subs	r3, #3
 8006b7a:	e000      	b.n	8006b7e <NVIC_EncodePriority+0x32>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b80:	f04f 32ff 	mov.w	r2, #4294967295
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	43da      	mvns	r2, r3
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	401a      	ands	r2, r3
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b94:	f04f 31ff 	mov.w	r1, #4294967295
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9e:	43d9      	mvns	r1, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ba4:	4313      	orrs	r3, r2
         );
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3724      	adds	r7, #36	; 0x24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
	...

08006bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bc4:	d301      	bcc.n	8006bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e00f      	b.n	8006bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006bca:	4a0a      	ldr	r2, [pc, #40]	; (8006bf4 <SysTick_Config+0x40>)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006bd2:	210f      	movs	r1, #15
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	f7ff ff8e 	bl	8006af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006bdc:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <SysTick_Config+0x40>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006be2:	4b04      	ldr	r3, [pc, #16]	; (8006bf4 <SysTick_Config+0x40>)
 8006be4:	2207      	movs	r2, #7
 8006be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	e000e010 	.word	0xe000e010

08006bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff ff29 	bl	8006a58 <__NVIC_SetPriorityGrouping>
}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b086      	sub	sp, #24
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	4603      	mov	r3, r0
 8006c16:	60b9      	str	r1, [r7, #8]
 8006c18:	607a      	str	r2, [r7, #4]
 8006c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006c20:	f7ff ff3e 	bl	8006aa0 <__NVIC_GetPriorityGrouping>
 8006c24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	6978      	ldr	r0, [r7, #20]
 8006c2c:	f7ff ff8e 	bl	8006b4c <NVIC_EncodePriority>
 8006c30:	4602      	mov	r2, r0
 8006c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff ff5d 	bl	8006af8 <__NVIC_SetPriority>
}
 8006c3e:	bf00      	nop
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff ff31 	bl	8006abc <__NVIC_EnableIRQ>
}
 8006c5a:	bf00      	nop
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b082      	sub	sp, #8
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff ffa2 	bl	8006bb4 <SysTick_Config>
 8006c70:	4603      	mov	r3, r0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e098      	b.n	8006dc0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	4b4d      	ldr	r3, [pc, #308]	; (8006dcc <HAL_DMA_Init+0x150>)
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d80f      	bhi.n	8006cba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	4b4b      	ldr	r3, [pc, #300]	; (8006dd0 <HAL_DMA_Init+0x154>)
 8006ca2:	4413      	add	r3, r2
 8006ca4:	4a4b      	ldr	r2, [pc, #300]	; (8006dd4 <HAL_DMA_Init+0x158>)
 8006ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8006caa:	091b      	lsrs	r3, r3, #4
 8006cac:	009a      	lsls	r2, r3, #2
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a48      	ldr	r2, [pc, #288]	; (8006dd8 <HAL_DMA_Init+0x15c>)
 8006cb6:	641a      	str	r2, [r3, #64]	; 0x40
 8006cb8:	e00e      	b.n	8006cd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	4b46      	ldr	r3, [pc, #280]	; (8006ddc <HAL_DMA_Init+0x160>)
 8006cc2:	4413      	add	r3, r2
 8006cc4:	4a43      	ldr	r2, [pc, #268]	; (8006dd4 <HAL_DMA_Init+0x158>)
 8006cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cca:	091b      	lsrs	r3, r3, #4
 8006ccc:	009a      	lsls	r2, r3, #2
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a42      	ldr	r2, [pc, #264]	; (8006de0 <HAL_DMA_Init+0x164>)
 8006cd6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d32:	d039      	beq.n	8006da8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	4a27      	ldr	r2, [pc, #156]	; (8006dd8 <HAL_DMA_Init+0x15c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d11a      	bne.n	8006d74 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006d3e:	4b29      	ldr	r3, [pc, #164]	; (8006de4 <HAL_DMA_Init+0x168>)
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d46:	f003 031c 	and.w	r3, r3, #28
 8006d4a:	210f      	movs	r1, #15
 8006d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d50:	43db      	mvns	r3, r3
 8006d52:	4924      	ldr	r1, [pc, #144]	; (8006de4 <HAL_DMA_Init+0x168>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006d58:	4b22      	ldr	r3, [pc, #136]	; (8006de4 <HAL_DMA_Init+0x168>)
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6859      	ldr	r1, [r3, #4]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d64:	f003 031c 	and.w	r3, r3, #28
 8006d68:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6c:	491d      	ldr	r1, [pc, #116]	; (8006de4 <HAL_DMA_Init+0x168>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	600b      	str	r3, [r1, #0]
 8006d72:	e019      	b.n	8006da8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006d74:	4b1c      	ldr	r3, [pc, #112]	; (8006de8 <HAL_DMA_Init+0x16c>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7c:	f003 031c 	and.w	r3, r3, #28
 8006d80:	210f      	movs	r1, #15
 8006d82:	fa01 f303 	lsl.w	r3, r1, r3
 8006d86:	43db      	mvns	r3, r3
 8006d88:	4917      	ldr	r1, [pc, #92]	; (8006de8 <HAL_DMA_Init+0x16c>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006d8e:	4b16      	ldr	r3, [pc, #88]	; (8006de8 <HAL_DMA_Init+0x16c>)
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6859      	ldr	r1, [r3, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9a:	f003 031c 	and.w	r3, r3, #28
 8006d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006da2:	4911      	ldr	r1, [pc, #68]	; (8006de8 <HAL_DMA_Init+0x16c>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	40020407 	.word	0x40020407
 8006dd0:	bffdfff8 	.word	0xbffdfff8
 8006dd4:	cccccccd 	.word	0xcccccccd
 8006dd8:	40020000 	.word	0x40020000
 8006ddc:	bffdfbf8 	.word	0xbffdfbf8
 8006de0:	40020400 	.word	0x40020400
 8006de4:	400200a8 	.word	0x400200a8
 8006de8:	400204a8 	.word	0x400204a8

08006dec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_DMA_Start_IT+0x20>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e04b      	b.n	8006ea4 <HAL_DMA_Start_IT+0xb8>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d13a      	bne.n	8006e96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0201 	bic.w	r2, r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 f96b 	bl	8007120 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d008      	beq.n	8006e64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 020e 	orr.w	r2, r2, #14
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	e00f      	b.n	8006e84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0204 	bic.w	r2, r2, #4
 8006e72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 020a 	orr.w	r2, r2, #10
 8006e82:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f042 0201 	orr.w	r2, r2, #1
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	e005      	b.n	8006ea2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d008      	beq.n	8006ed6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e022      	b.n	8006f1c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 020e 	bic.w	r2, r2, #14
 8006ee4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0201 	bic.w	r2, r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efa:	f003 021c 	and.w	r2, r3, #28
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	2101      	movs	r1, #1
 8006f04:	fa01 f202 	lsl.w	r2, r1, r2
 8006f08:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d005      	beq.n	8006f4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2204      	movs	r2, #4
 8006f44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	73fb      	strb	r3, [r7, #15]
 8006f4a:	e029      	b.n	8006fa0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f022 020e 	bic.w	r2, r2, #14
 8006f5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0201 	bic.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f70:	f003 021c 	and.w	r2, r3, #28
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	2101      	movs	r1, #1
 8006f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8006f7e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d003      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	4798      	blx	r3
    }
  }
  return status;
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc6:	f003 031c 	and.w	r3, r3, #28
 8006fca:	2204      	movs	r2, #4
 8006fcc:	409a      	lsls	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d026      	beq.n	8007024 <HAL_DMA_IRQHandler+0x7a>
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d021      	beq.n	8007024 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d107      	bne.n	8006ffe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0204 	bic.w	r2, r2, #4
 8006ffc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007002:	f003 021c 	and.w	r2, r3, #28
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	2104      	movs	r1, #4
 800700c:	fa01 f202 	lsl.w	r2, r1, r2
 8007010:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	2b00      	cmp	r3, #0
 8007018:	d071      	beq.n	80070fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007022:	e06c      	b.n	80070fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007028:	f003 031c 	and.w	r3, r3, #28
 800702c:	2202      	movs	r2, #2
 800702e:	409a      	lsls	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4013      	ands	r3, r2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d02e      	beq.n	8007096 <HAL_DMA_IRQHandler+0xec>
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d029      	beq.n	8007096 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0320 	and.w	r3, r3, #32
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10b      	bne.n	8007068 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 020a 	bic.w	r2, r2, #10
 800705e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706c:	f003 021c 	and.w	r2, r3, #28
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007074:	2102      	movs	r1, #2
 8007076:	fa01 f202 	lsl.w	r2, r1, r2
 800707a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	2b00      	cmp	r3, #0
 800708a:	d038      	beq.n	80070fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007094:	e033      	b.n	80070fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709a:	f003 031c 	and.w	r3, r3, #28
 800709e:	2208      	movs	r2, #8
 80070a0:	409a      	lsls	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4013      	ands	r3, r2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d02a      	beq.n	8007100 <HAL_DMA_IRQHandler+0x156>
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d025      	beq.n	8007100 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 020e 	bic.w	r2, r2, #14
 80070c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c8:	f003 021c 	and.w	r2, r3, #28
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d0:	2101      	movs	r1, #1
 80070d2:	fa01 f202 	lsl.w	r2, r1, r2
 80070d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d004      	beq.n	8007100 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
}
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007132:	f003 021c 	and.w	r2, r3, #28
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	2101      	movs	r1, #1
 800713c:	fa01 f202 	lsl.w	r2, r1, r2
 8007140:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	2b10      	cmp	r3, #16
 8007150:	d108      	bne.n	8007164 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007162:	e007      	b.n	8007174 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	60da      	str	r2, [r3, #12]
}
 8007174:	bf00      	nop
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800718a:	2300      	movs	r3, #0
 800718c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800718e:	e148      	b.n	8007422 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	2101      	movs	r1, #1
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	fa01 f303 	lsl.w	r3, r1, r3
 800719c:	4013      	ands	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 813a 	beq.w	800741c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f003 0303 	and.w	r3, r3, #3
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d005      	beq.n	80071c0 <HAL_GPIO_Init+0x40>
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f003 0303 	and.w	r3, r3, #3
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d130      	bne.n	8007222 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	2203      	movs	r2, #3
 80071cc:	fa02 f303 	lsl.w	r3, r2, r3
 80071d0:	43db      	mvns	r3, r3
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4013      	ands	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	fa02 f303 	lsl.w	r3, r2, r3
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80071f6:	2201      	movs	r2, #1
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	fa02 f303 	lsl.w	r3, r2, r3
 80071fe:	43db      	mvns	r3, r3
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	4013      	ands	r3, r2
 8007204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	091b      	lsrs	r3, r3, #4
 800720c:	f003 0201 	and.w	r2, r3, #1
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	fa02 f303 	lsl.w	r3, r2, r3
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	4313      	orrs	r3, r2
 800721a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	2b03      	cmp	r3, #3
 800722c:	d017      	beq.n	800725e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	2203      	movs	r2, #3
 800723a:	fa02 f303 	lsl.w	r3, r2, r3
 800723e:	43db      	mvns	r3, r3
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4013      	ands	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	fa02 f303 	lsl.w	r3, r2, r3
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	4313      	orrs	r3, r2
 8007256:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f003 0303 	and.w	r3, r3, #3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d123      	bne.n	80072b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	08da      	lsrs	r2, r3, #3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	3208      	adds	r2, #8
 8007272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	220f      	movs	r2, #15
 8007282:	fa02 f303 	lsl.w	r3, r2, r3
 8007286:	43db      	mvns	r3, r3
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4013      	ands	r3, r2
 800728c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	691a      	ldr	r2, [r3, #16]
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	08da      	lsrs	r2, r3, #3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3208      	adds	r2, #8
 80072ac:	6939      	ldr	r1, [r7, #16]
 80072ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	2203      	movs	r2, #3
 80072be:	fa02 f303 	lsl.w	r3, r2, r3
 80072c2:	43db      	mvns	r3, r3
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	4013      	ands	r3, r2
 80072c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f003 0203 	and.w	r2, r3, #3
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	fa02 f303 	lsl.w	r3, r2, r3
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f000 8094 	beq.w	800741c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072f4:	4b52      	ldr	r3, [pc, #328]	; (8007440 <HAL_GPIO_Init+0x2c0>)
 80072f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f8:	4a51      	ldr	r2, [pc, #324]	; (8007440 <HAL_GPIO_Init+0x2c0>)
 80072fa:	f043 0301 	orr.w	r3, r3, #1
 80072fe:	6613      	str	r3, [r2, #96]	; 0x60
 8007300:	4b4f      	ldr	r3, [pc, #316]	; (8007440 <HAL_GPIO_Init+0x2c0>)
 8007302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	60bb      	str	r3, [r7, #8]
 800730a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800730c:	4a4d      	ldr	r2, [pc, #308]	; (8007444 <HAL_GPIO_Init+0x2c4>)
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	089b      	lsrs	r3, r3, #2
 8007312:	3302      	adds	r3, #2
 8007314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	220f      	movs	r2, #15
 8007324:	fa02 f303 	lsl.w	r3, r2, r3
 8007328:	43db      	mvns	r3, r3
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	4013      	ands	r3, r2
 800732e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007336:	d00d      	beq.n	8007354 <HAL_GPIO_Init+0x1d4>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a43      	ldr	r2, [pc, #268]	; (8007448 <HAL_GPIO_Init+0x2c8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d007      	beq.n	8007350 <HAL_GPIO_Init+0x1d0>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a42      	ldr	r2, [pc, #264]	; (800744c <HAL_GPIO_Init+0x2cc>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d101      	bne.n	800734c <HAL_GPIO_Init+0x1cc>
 8007348:	2302      	movs	r3, #2
 800734a:	e004      	b.n	8007356 <HAL_GPIO_Init+0x1d6>
 800734c:	2307      	movs	r3, #7
 800734e:	e002      	b.n	8007356 <HAL_GPIO_Init+0x1d6>
 8007350:	2301      	movs	r3, #1
 8007352:	e000      	b.n	8007356 <HAL_GPIO_Init+0x1d6>
 8007354:	2300      	movs	r3, #0
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	f002 0203 	and.w	r2, r2, #3
 800735c:	0092      	lsls	r2, r2, #2
 800735e:	4093      	lsls	r3, r2
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	4313      	orrs	r3, r2
 8007364:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007366:	4937      	ldr	r1, [pc, #220]	; (8007444 <HAL_GPIO_Init+0x2c4>)
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	089b      	lsrs	r3, r3, #2
 800736c:	3302      	adds	r3, #2
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007374:	4b36      	ldr	r3, [pc, #216]	; (8007450 <HAL_GPIO_Init+0x2d0>)
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	43db      	mvns	r3, r3
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4013      	ands	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4313      	orrs	r3, r2
 8007396:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007398:	4a2d      	ldr	r2, [pc, #180]	; (8007450 <HAL_GPIO_Init+0x2d0>)
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800739e:	4b2c      	ldr	r3, [pc, #176]	; (8007450 <HAL_GPIO_Init+0x2d0>)
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	43db      	mvns	r3, r3
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4013      	ands	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80073c2:	4a23      	ldr	r2, [pc, #140]	; (8007450 <HAL_GPIO_Init+0x2d0>)
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80073c8:	4b21      	ldr	r3, [pc, #132]	; (8007450 <HAL_GPIO_Init+0x2d0>)
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	43db      	mvns	r3, r3
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4013      	ands	r3, r2
 80073d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80073ec:	4a18      	ldr	r2, [pc, #96]	; (8007450 <HAL_GPIO_Init+0x2d0>)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80073f2:	4b17      	ldr	r3, [pc, #92]	; (8007450 <HAL_GPIO_Init+0x2d0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	43db      	mvns	r3, r3
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4013      	ands	r3, r2
 8007400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007416:	4a0e      	ldr	r2, [pc, #56]	; (8007450 <HAL_GPIO_Init+0x2d0>)
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	3301      	adds	r3, #1
 8007420:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	fa22 f303 	lsr.w	r3, r2, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	f47f aeaf 	bne.w	8007190 <HAL_GPIO_Init+0x10>
  }
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	40021000 	.word	0x40021000
 8007444:	40010000 	.word	0x40010000
 8007448:	48000400 	.word	0x48000400
 800744c:	48000800 	.word	0x48000800
 8007450:	40010400 	.word	0x40010400

08007454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	807b      	strh	r3, [r7, #2]
 8007460:	4613      	mov	r3, r2
 8007462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007464:	787b      	ldrb	r3, [r7, #1]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800746a:	887a      	ldrh	r2, [r7, #2]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007470:	e002      	b.n	8007478 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007472:	887a      	ldrh	r2, [r7, #2]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800748e:	4b08      	ldr	r3, [pc, #32]	; (80074b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007490:	695a      	ldr	r2, [r3, #20]
 8007492:	88fb      	ldrh	r3, [r7, #6]
 8007494:	4013      	ands	r3, r2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d006      	beq.n	80074a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800749a:	4a05      	ldr	r2, [pc, #20]	; (80074b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800749c:	88fb      	ldrh	r3, [r7, #6]
 800749e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80074a0:	88fb      	ldrh	r3, [r7, #6]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fa f958 	bl	8001758 <HAL_GPIO_EXTI_Callback>
  }
}
 80074a8:	bf00      	nop
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	40010400 	.word	0x40010400

080074b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e08d      	b.n	80075e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fa f87e 	bl	80015dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2224      	movs	r2, #36	; 0x24
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0201 	bic.w	r2, r2, #1
 80074f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007504:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007514:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d107      	bne.n	800752e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800752a:	609a      	str	r2, [r3, #8]
 800752c:	e006      	b.n	800753c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689a      	ldr	r2, [r3, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800753a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d108      	bne.n	8007556 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007552:	605a      	str	r2, [r3, #4]
 8007554:	e007      	b.n	8007566 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007564:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	6812      	ldr	r2, [r2, #0]
 8007570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007578:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68da      	ldr	r2, [r3, #12]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007588:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691a      	ldr	r2, [r3, #16]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	69d9      	ldr	r1, [r3, #28]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a1a      	ldr	r2, [r3, #32]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0201 	orr.w	r2, r2, #1
 80075c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b088      	sub	sp, #32
 80075f0:	af02      	add	r7, sp, #8
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	4608      	mov	r0, r1
 80075f6:	4611      	mov	r1, r2
 80075f8:	461a      	mov	r2, r3
 80075fa:	4603      	mov	r3, r0
 80075fc:	817b      	strh	r3, [r7, #10]
 80075fe:	460b      	mov	r3, r1
 8007600:	813b      	strh	r3, [r7, #8]
 8007602:	4613      	mov	r3, r2
 8007604:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b20      	cmp	r3, #32
 8007610:	f040 80f9 	bne.w	8007806 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <HAL_I2C_Mem_Write+0x34>
 800761a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800761c:	2b00      	cmp	r3, #0
 800761e:	d105      	bne.n	800762c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007626:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e0ed      	b.n	8007808 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007632:	2b01      	cmp	r3, #1
 8007634:	d101      	bne.n	800763a <HAL_I2C_Mem_Write+0x4e>
 8007636:	2302      	movs	r3, #2
 8007638:	e0e6      	b.n	8007808 <HAL_I2C_Mem_Write+0x21c>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007642:	f7fd ff39 	bl	80054b8 <HAL_GetTick>
 8007646:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	2319      	movs	r3, #25
 800764e:	2201      	movs	r2, #1
 8007650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 f955 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e0d1      	b.n	8007808 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2221      	movs	r2, #33	; 0x21
 8007668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2240      	movs	r2, #64	; 0x40
 8007670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a3a      	ldr	r2, [r7, #32]
 800767e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800768c:	88f8      	ldrh	r0, [r7, #6]
 800768e:	893a      	ldrh	r2, [r7, #8]
 8007690:	8979      	ldrh	r1, [r7, #10]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	9301      	str	r3, [sp, #4]
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	4603      	mov	r3, r0
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 f8b9 	bl	8007814 <I2C_RequestMemoryWrite>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e0a9      	b.n	8007808 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2bff      	cmp	r3, #255	; 0xff
 80076bc:	d90e      	bls.n	80076dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	22ff      	movs	r2, #255	; 0xff
 80076c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	8979      	ldrh	r1, [r7, #10]
 80076cc:	2300      	movs	r3, #0
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 facf 	bl	8007c78 <I2C_TransferConfig>
 80076da:	e00f      	b.n	80076fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	8979      	ldrh	r1, [r7, #10]
 80076ee:	2300      	movs	r3, #0
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fabe 	bl	8007c78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 f94e 	bl	80079a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e07b      	b.n	8007808 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	781a      	ldrb	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772a:	b29b      	uxth	r3, r3
 800772c:	3b01      	subs	r3, #1
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007744:	b29b      	uxth	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d034      	beq.n	80077b4 <HAL_I2C_Mem_Write+0x1c8>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800774e:	2b00      	cmp	r3, #0
 8007750:	d130      	bne.n	80077b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	2200      	movs	r2, #0
 800775a:	2180      	movs	r1, #128	; 0x80
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 f8d1 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e04d      	b.n	8007808 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007770:	b29b      	uxth	r3, r3
 8007772:	2bff      	cmp	r3, #255	; 0xff
 8007774:	d90e      	bls.n	8007794 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	22ff      	movs	r2, #255	; 0xff
 800777a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007780:	b2da      	uxtb	r2, r3
 8007782:	8979      	ldrh	r1, [r7, #10]
 8007784:	2300      	movs	r3, #0
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 fa73 	bl	8007c78 <I2C_TransferConfig>
 8007792:	e00f      	b.n	80077b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	8979      	ldrh	r1, [r7, #10]
 80077a6:	2300      	movs	r3, #0
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 fa62 	bl	8007c78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d19e      	bne.n	80076fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 f934 	bl	8007a30 <I2C_WaitOnSTOPFlagUntilTimeout>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e01a      	b.n	8007808 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2220      	movs	r2, #32
 80077d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6859      	ldr	r1, [r3, #4]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	4b0a      	ldr	r3, [pc, #40]	; (8007810 <HAL_I2C_Mem_Write+0x224>)
 80077e6:	400b      	ands	r3, r1
 80077e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2220      	movs	r2, #32
 80077ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	e000      	b.n	8007808 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007806:	2302      	movs	r3, #2
  }
}
 8007808:	4618      	mov	r0, r3
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	fe00e800 	.word	0xfe00e800

08007814 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af02      	add	r7, sp, #8
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	4608      	mov	r0, r1
 800781e:	4611      	mov	r1, r2
 8007820:	461a      	mov	r2, r3
 8007822:	4603      	mov	r3, r0
 8007824:	817b      	strh	r3, [r7, #10]
 8007826:	460b      	mov	r3, r1
 8007828:	813b      	strh	r3, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800782e:	88fb      	ldrh	r3, [r7, #6]
 8007830:	b2da      	uxtb	r2, r3
 8007832:	8979      	ldrh	r1, [r7, #10]
 8007834:	4b20      	ldr	r3, [pc, #128]	; (80078b8 <I2C_RequestMemoryWrite+0xa4>)
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fa1b 	bl	8007c78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	69b9      	ldr	r1, [r7, #24]
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 f8ab 	bl	80079a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e02c      	b.n	80078b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007856:	88fb      	ldrh	r3, [r7, #6]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d105      	bne.n	8007868 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800785c:	893b      	ldrh	r3, [r7, #8]
 800785e:	b2da      	uxtb	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	629a      	str	r2, [r3, #40]	; 0x28
 8007866:	e015      	b.n	8007894 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007868:	893b      	ldrh	r3, [r7, #8]
 800786a:	0a1b      	lsrs	r3, r3, #8
 800786c:	b29b      	uxth	r3, r3
 800786e:	b2da      	uxtb	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	69b9      	ldr	r1, [r7, #24]
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 f891 	bl	80079a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e012      	b.n	80078b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800788a:	893b      	ldrh	r3, [r7, #8]
 800788c:	b2da      	uxtb	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	2200      	movs	r2, #0
 800789c:	2180      	movs	r1, #128	; 0x80
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 f830 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e000      	b.n	80078b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	80002000 	.word	0x80002000

080078bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d103      	bne.n	80078da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2200      	movs	r2, #0
 80078d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d007      	beq.n	80078f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699a      	ldr	r2, [r3, #24]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 0201 	orr.w	r2, r2, #1
 80078f6:	619a      	str	r2, [r3, #24]
  }
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	4613      	mov	r3, r2
 8007912:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007914:	e031      	b.n	800797a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791c:	d02d      	beq.n	800797a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800791e:	f7fd fdcb 	bl	80054b8 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d302      	bcc.n	8007934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d122      	bne.n	800797a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	699a      	ldr	r2, [r3, #24]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	4013      	ands	r3, r2
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	429a      	cmp	r2, r3
 8007942:	bf0c      	ite	eq
 8007944:	2301      	moveq	r3, #1
 8007946:	2300      	movne	r3, #0
 8007948:	b2db      	uxtb	r3, r3
 800794a:	461a      	mov	r2, r3
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	429a      	cmp	r2, r3
 8007950:	d113      	bne.n	800797a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007956:	f043 0220 	orr.w	r2, r3, #32
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2220      	movs	r2, #32
 8007962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e00f      	b.n	800799a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	699a      	ldr	r2, [r3, #24]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4013      	ands	r3, r2
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	429a      	cmp	r2, r3
 8007988:	bf0c      	ite	eq
 800798a:	2301      	moveq	r3, #1
 800798c:	2300      	movne	r3, #0
 800798e:	b2db      	uxtb	r3, r3
 8007990:	461a      	mov	r2, r3
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	429a      	cmp	r2, r3
 8007996:	d0be      	beq.n	8007916 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	60f8      	str	r0, [r7, #12]
 80079aa:	60b9      	str	r1, [r7, #8]
 80079ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079ae:	e033      	b.n	8007a18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	68b9      	ldr	r1, [r7, #8]
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f87f 	bl	8007ab8 <I2C_IsErrorOccurred>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e031      	b.n	8007a28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ca:	d025      	beq.n	8007a18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079cc:	f7fd fd74 	bl	80054b8 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d302      	bcc.n	80079e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d11a      	bne.n	8007a18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d013      	beq.n	8007a18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f4:	f043 0220 	orr.w	r2, r3, #32
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2220      	movs	r2, #32
 8007a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e007      	b.n	8007a28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d1c4      	bne.n	80079b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a3c:	e02f      	b.n	8007a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	68b9      	ldr	r1, [r7, #8]
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 f838 	bl	8007ab8 <I2C_IsErrorOccurred>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e02d      	b.n	8007aae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a52:	f7fd fd31 	bl	80054b8 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d302      	bcc.n	8007a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d11a      	bne.n	8007a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b20      	cmp	r3, #32
 8007a74:	d013      	beq.n	8007a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7a:	f043 0220 	orr.w	r2, r3, #32
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e007      	b.n	8007aae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	f003 0320 	and.w	r3, r3, #32
 8007aa8:	2b20      	cmp	r3, #32
 8007aaa:	d1c8      	bne.n	8007a3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	; 0x28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	f003 0310 	and.w	r3, r3, #16
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d068      	beq.n	8007bb6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2210      	movs	r2, #16
 8007aea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007aec:	e049      	b.n	8007b82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af4:	d045      	beq.n	8007b82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007af6:	f7fd fcdf 	bl	80054b8 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d302      	bcc.n	8007b0c <I2C_IsErrorOccurred+0x54>
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d13a      	bne.n	8007b82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b2e:	d121      	bne.n	8007b74 <I2C_IsErrorOccurred+0xbc>
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b36:	d01d      	beq.n	8007b74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007b38:	7cfb      	ldrb	r3, [r7, #19]
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	d01a      	beq.n	8007b74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007b4e:	f7fd fcb3 	bl	80054b8 <HAL_GetTick>
 8007b52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b54:	e00e      	b.n	8007b74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007b56:	f7fd fcaf 	bl	80054b8 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b19      	cmp	r3, #25
 8007b62:	d907      	bls.n	8007b74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	f043 0320 	orr.w	r3, r3, #32
 8007b6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007b72:	e006      	b.n	8007b82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	d1e9      	bne.n	8007b56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d003      	beq.n	8007b98 <I2C_IsErrorOccurred+0xe0>
 8007b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0aa      	beq.n	8007aee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d103      	bne.n	8007ba8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	f043 0304 	orr.w	r3, r3, #4
 8007bae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00b      	beq.n	8007be0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	f043 0301 	orr.w	r3, r3, #1
 8007bce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00b      	beq.n	8007c02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	f043 0308 	orr.w	r3, r3, #8
 8007bf0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007bfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00b      	beq.n	8007c24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	f043 0302 	orr.w	r3, r3, #2
 8007c12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01c      	beq.n	8007c66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff fe45 	bl	80078bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6859      	ldr	r1, [r3, #4]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <I2C_IsErrorOccurred+0x1bc>)
 8007c3e:	400b      	ands	r3, r1
 8007c40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3728      	adds	r7, #40	; 0x28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	fe00e800 	.word	0xfe00e800

08007c78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	607b      	str	r3, [r7, #4]
 8007c82:	460b      	mov	r3, r1
 8007c84:	817b      	strh	r3, [r7, #10]
 8007c86:	4613      	mov	r3, r2
 8007c88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c8a:	897b      	ldrh	r3, [r7, #10]
 8007c8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c90:	7a7b      	ldrb	r3, [r7, #9]
 8007c92:	041b      	lsls	r3, r3, #16
 8007c94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ca6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	0d5b      	lsrs	r3, r3, #21
 8007cb2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007cb6:	4b08      	ldr	r3, [pc, #32]	; (8007cd8 <I2C_TransferConfig+0x60>)
 8007cb8:	430b      	orrs	r3, r1
 8007cba:	43db      	mvns	r3, r3
 8007cbc:	ea02 0103 	and.w	r1, r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007cca:	bf00      	nop
 8007ccc:	371c      	adds	r7, #28
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	03ff63ff 	.word	0x03ff63ff

08007cdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	d138      	bne.n	8007d64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d101      	bne.n	8007d00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	e032      	b.n	8007d66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2224      	movs	r2, #36	; 0x24
 8007d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0201 	bic.w	r2, r2, #1
 8007d1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6819      	ldr	r1, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0201 	orr.w	r2, r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2220      	movs	r2, #32
 8007d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	e000      	b.n	8007d66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d64:	2302      	movs	r3, #2
  }
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b085      	sub	sp, #20
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	d139      	bne.n	8007dfc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d101      	bne.n	8007d96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d92:	2302      	movs	r3, #2
 8007d94:	e033      	b.n	8007dfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2224      	movs	r2, #36	; 0x24
 8007da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0201 	bic.w	r2, r2, #1
 8007db4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007dc4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0201 	orr.w	r2, r2, #1
 8007de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	e000      	b.n	8007dfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007dfc:	2302      	movs	r3, #2
  }
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
	...

08007e0c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e14:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e18:	4a0a      	ldr	r2, [pc, #40]	; (8007e44 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007e1a:	f043 0301 	orr.w	r3, r3, #1
 8007e1e:	6613      	str	r3, [r2, #96]	; 0x60
 8007e20:	4b08      	ldr	r3, [pc, #32]	; (8007e44 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8007e2c:	4b06      	ldr	r3, [pc, #24]	; (8007e48 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	4905      	ldr	r1, [pc, #20]	; (8007e48 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	604b      	str	r3, [r1, #4]
}
 8007e38:	bf00      	nop
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	40021000 	.word	0x40021000
 8007e48:	40010000 	.word	0x40010000

08007e4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e4e:	b08b      	sub	sp, #44	; 0x2c
 8007e50:	af06      	add	r7, sp, #24
 8007e52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e0f8      	b.n	8008050 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d106      	bne.n	8007e78 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f00a fe66 	bl	8012b44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f005 fc0b 	bl	800d6a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	603b      	str	r3, [r7, #0]
 8007e90:	687e      	ldr	r6, [r7, #4]
 8007e92:	466d      	mov	r5, sp
 8007e94:	f106 0410 	add.w	r4, r6, #16
 8007e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	602b      	str	r3, [r5, #0]
 8007ea0:	1d33      	adds	r3, r6, #4
 8007ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ea4:	6838      	ldr	r0, [r7, #0]
 8007ea6:	f005 fbd3 	bl	800d650 <USB_CoreInit>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d005      	beq.n	8007ebc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e0c9      	b.n	8008050 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f005 fc07 	bl	800d6d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ec8:	2300      	movs	r3, #0
 8007eca:	73fb      	strb	r3, [r7, #15]
 8007ecc:	e040      	b.n	8007f50 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
 8007ed0:	6879      	ldr	r1, [r7, #4]
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	440b      	add	r3, r1
 8007ede:	3301      	adds	r3, #1
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	6879      	ldr	r1, [r7, #4]
 8007ee8:	1c5a      	adds	r2, r3, #1
 8007eea:	4613      	mov	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	440b      	add	r3, r1
 8007ef4:	7bfa      	ldrb	r2, [r7, #15]
 8007ef6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	440b      	add	r3, r1
 8007f08:	3303      	adds	r3, #3
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007f0e:	7bfa      	ldrb	r2, [r7, #15]
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	440b      	add	r3, r1
 8007f1c:	3338      	adds	r3, #56	; 0x38
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007f22:	7bfa      	ldrb	r2, [r7, #15]
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	440b      	add	r3, r1
 8007f30:	333c      	adds	r3, #60	; 0x3c
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007f36:	7bfa      	ldrb	r2, [r7, #15]
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	00db      	lsls	r3, r3, #3
 8007f42:	440b      	add	r3, r1
 8007f44:	3340      	adds	r3, #64	; 0x40
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	73fb      	strb	r3, [r7, #15]
 8007f50:	7bfa      	ldrb	r2, [r7, #15]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d3b9      	bcc.n	8007ece <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
 8007f5e:	e044      	b.n	8007fea <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007f60:	7bfa      	ldrb	r2, [r7, #15]
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	4613      	mov	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	00db      	lsls	r3, r3, #3
 8007f6c:	440b      	add	r3, r1
 8007f6e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007f72:	2200      	movs	r2, #0
 8007f74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007f76:	7bfa      	ldrb	r2, [r7, #15]
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	00db      	lsls	r3, r3, #3
 8007f82:	440b      	add	r3, r1
 8007f84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007f88:	7bfa      	ldrb	r2, [r7, #15]
 8007f8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007f8c:	7bfa      	ldrb	r2, [r7, #15]
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	4613      	mov	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	440b      	add	r3, r1
 8007f9a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007fa2:	7bfa      	ldrb	r2, [r7, #15]
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	00db      	lsls	r3, r3, #3
 8007fae:	440b      	add	r3, r1
 8007fb0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007fb8:	7bfa      	ldrb	r2, [r7, #15]
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	440b      	add	r3, r1
 8007fc6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007fce:	7bfa      	ldrb	r2, [r7, #15]
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	00db      	lsls	r3, r3, #3
 8007fda:	440b      	add	r3, r1
 8007fdc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	73fb      	strb	r3, [r7, #15]
 8007fea:	7bfa      	ldrb	r2, [r7, #15]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d3b5      	bcc.n	8007f60 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	603b      	str	r3, [r7, #0]
 8007ffa:	687e      	ldr	r6, [r7, #4]
 8007ffc:	466d      	mov	r5, sp
 8007ffe:	f106 0410 	add.w	r4, r6, #16
 8008002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	602b      	str	r3, [r5, #0]
 800800a:	1d33      	adds	r3, r6, #4
 800800c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800800e:	6838      	ldr	r0, [r7, #0]
 8008010:	f005 fb6e 	bl	800d6f0 <USB_DevInit>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2202      	movs	r2, #2
 800801e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e014      	b.n	8008050 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d102      	bne.n	8008044 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f001 fc58 	bl	80098f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4618      	mov	r0, r3
 800804a:	f007 fdff 	bl	800fc4c <USB_DevDisconnect>

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008058 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008066:	2b01      	cmp	r3, #1
 8008068:	d101      	bne.n	800806e <HAL_PCD_Start+0x16>
 800806a:	2302      	movs	r3, #2
 800806c:	e012      	b.n	8008094 <HAL_PCD_Start+0x3c>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4618      	mov	r0, r3
 800807c:	f005 faf9 	bl	800d672 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4618      	mov	r0, r3
 8008086:	f007 fdca 	bl	800fc1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f007 fde4 	bl	800fc76 <USB_ReadInterrupts>
 80080ae:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fb13 	bl	80086e6 <PCD_EP_ISR_Handler>

    return;
 80080c0:	e110      	b.n	80082e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d013      	beq.n	80080f4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080de:	b292      	uxth	r2, r2
 80080e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f00a fda8 	bl	8012c3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80080ea:	2100      	movs	r1, #0
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f8fc 	bl	80082ea <HAL_PCD_SetAddress>

    return;
 80080f2:	e0f7      	b.n	80082e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00c      	beq.n	8008118 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008106:	b29a      	uxth	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008110:	b292      	uxth	r2, r2
 8008112:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008116:	e0e5      	b.n	80082e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00c      	beq.n	800813c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800812a:	b29a      	uxth	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008134:	b292      	uxth	r2, r2
 8008136:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800813a:	e0d3      	b.n	80082e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d034      	beq.n	80081b0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800814e:	b29a      	uxth	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f022 0204 	bic.w	r2, r2, #4
 8008158:	b292      	uxth	r2, r2
 800815a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008166:	b29a      	uxth	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0208 	bic.w	r2, r2, #8
 8008170:	b292      	uxth	r2, r2
 8008172:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800817c:	2b01      	cmp	r3, #1
 800817e:	d107      	bne.n	8008190 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008188:	2100      	movs	r1, #0
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f00b f806 	bl	801319c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f00a fd8b 	bl	8012cac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800819e:	b29a      	uxth	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081a8:	b292      	uxth	r2, r2
 80081aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80081ae:	e099      	b.n	80082e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d027      	beq.n	800820a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f042 0208 	orr.w	r2, r2, #8
 80081cc:	b292      	uxth	r2, r2
 80081ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80081da:	b29a      	uxth	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081e4:	b292      	uxth	r2, r2
 80081e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f042 0204 	orr.w	r2, r2, #4
 80081fc:	b292      	uxth	r2, r2
 80081fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f00a fd38 	bl	8012c78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008208:	e06c      	b.n	80082e4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008210:	2b00      	cmp	r3, #0
 8008212:	d040      	beq.n	8008296 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800821c:	b29a      	uxth	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008226:	b292      	uxth	r2, r2
 8008228:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d12b      	bne.n	800828e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800823e:	b29a      	uxth	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f042 0204 	orr.w	r2, r2, #4
 8008248:	b292      	uxth	r2, r2
 800824a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008256:	b29a      	uxth	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f042 0208 	orr.w	r2, r2, #8
 8008260:	b292      	uxth	r2, r2
 8008262:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008276:	b29b      	uxth	r3, r3
 8008278:	089b      	lsrs	r3, r3, #2
 800827a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008284:	2101      	movs	r1, #1
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f00a ff88 	bl	801319c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800828c:	e02a      	b.n	80082e4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f00a fcf2 	bl	8012c78 <HAL_PCD_SuspendCallback>
    return;
 8008294:	e026      	b.n	80082e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00f      	beq.n	80082c0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80082b2:	b292      	uxth	r2, r2
 80082b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f00a fcb0 	bl	8012c1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80082be:	e011      	b.n	80082e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00c      	beq.n	80082e4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082dc:	b292      	uxth	r2, r2
 80082de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80082e2:	bf00      	nop
  }
}
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	460b      	mov	r3, r1
 80082f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d101      	bne.n	8008304 <HAL_PCD_SetAddress+0x1a>
 8008300:	2302      	movs	r3, #2
 8008302:	e013      	b.n	800832c <HAL_PCD_SetAddress+0x42>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	78fa      	ldrb	r2, [r7, #3]
 8008310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	78fa      	ldrb	r2, [r7, #3]
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f007 fc6a 	bl	800fbf6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	4608      	mov	r0, r1
 800833e:	4611      	mov	r1, r2
 8008340:	461a      	mov	r2, r3
 8008342:	4603      	mov	r3, r0
 8008344:	70fb      	strb	r3, [r7, #3]
 8008346:	460b      	mov	r3, r1
 8008348:	803b      	strh	r3, [r7, #0]
 800834a:	4613      	mov	r3, r2
 800834c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008356:	2b00      	cmp	r3, #0
 8008358:	da0e      	bge.n	8008378 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	f003 0307 	and.w	r3, r3, #7
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	4613      	mov	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	4413      	add	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2201      	movs	r2, #1
 8008374:	705a      	strb	r2, [r3, #1]
 8008376:	e00e      	b.n	8008396 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008378:	78fb      	ldrb	r3, [r7, #3]
 800837a:	f003 0207 	and.w	r2, r3, #7
 800837e:	4613      	mov	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	00db      	lsls	r3, r3, #3
 8008386:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	4413      	add	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	f003 0307 	and.w	r3, r3, #7
 800839c:	b2da      	uxtb	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80083a2:	883a      	ldrh	r2, [r7, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	78ba      	ldrb	r2, [r7, #2]
 80083ac:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80083ae:	78bb      	ldrb	r3, [r7, #2]
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d102      	bne.n	80083ba <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d101      	bne.n	80083c8 <HAL_PCD_EP_Open+0x94>
 80083c4:	2302      	movs	r3, #2
 80083c6:	e00e      	b.n	80083e6 <HAL_PCD_EP_Open+0xb2>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68f9      	ldr	r1, [r7, #12]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f005 f9ac 	bl	800d734 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80083e4:	7afb      	ldrb	r3, [r7, #11]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	460b      	mov	r3, r1
 80083f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80083fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	da0e      	bge.n	8008420 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008402:	78fb      	ldrb	r3, [r7, #3]
 8008404:	f003 0307 	and.w	r3, r3, #7
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	4613      	mov	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	00db      	lsls	r3, r3, #3
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	4413      	add	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2201      	movs	r2, #1
 800841c:	705a      	strb	r2, [r3, #1]
 800841e:	e00e      	b.n	800843e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	f003 0207 	and.w	r2, r3, #7
 8008426:	4613      	mov	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	00db      	lsls	r3, r3, #3
 800842e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	4413      	add	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800843e:	78fb      	ldrb	r3, [r7, #3]
 8008440:	f003 0307 	and.w	r3, r3, #7
 8008444:	b2da      	uxtb	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008450:	2b01      	cmp	r3, #1
 8008452:	d101      	bne.n	8008458 <HAL_PCD_EP_Close+0x6a>
 8008454:	2302      	movs	r3, #2
 8008456:	e00e      	b.n	8008476 <HAL_PCD_EP_Close+0x88>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68f9      	ldr	r1, [r7, #12]
 8008466:	4618      	mov	r0, r3
 8008468:	f005 fd28 	bl	800debc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b086      	sub	sp, #24
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
 800848a:	460b      	mov	r3, r1
 800848c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800848e:	7afb      	ldrb	r3, [r7, #11]
 8008490:	f003 0207 	and.w	r2, r3, #7
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	2200      	movs	r2, #0
 80084b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2200      	movs	r2, #0
 80084bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084be:	7afb      	ldrb	r3, [r7, #11]
 80084c0:	f003 0307 	and.w	r3, r3, #7
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	6979      	ldr	r1, [r7, #20]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f005 fee0 	bl	800e296 <USB_EPStartXfer>

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	f003 0207 	and.w	r2, r3, #7
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	00db      	lsls	r3, r3, #3
 80084fc:	440b      	add	r3, r1
 80084fe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8008502:	681b      	ldr	r3, [r3, #0]
}
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	607a      	str	r2, [r7, #4]
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	460b      	mov	r3, r1
 800851e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008520:	7afb      	ldrb	r3, [r7, #11]
 8008522:	f003 0307 	and.w	r3, r3, #7
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	4613      	mov	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2200      	movs	r2, #0
 8008554:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2201      	movs	r2, #1
 800855a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800855c:	7afb      	ldrb	r3, [r7, #11]
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	b2da      	uxtb	r2, r3
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6979      	ldr	r1, [r7, #20]
 800856e:	4618      	mov	r0, r3
 8008570:	f005 fe91 	bl	800e296 <USB_EPStartXfer>

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3718      	adds	r7, #24
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b084      	sub	sp, #16
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	460b      	mov	r3, r1
 8008588:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800858a:	78fb      	ldrb	r3, [r7, #3]
 800858c:	f003 0207 	and.w	r2, r3, #7
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	429a      	cmp	r2, r3
 8008596:	d901      	bls.n	800859c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e04c      	b.n	8008636 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800859c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	da0e      	bge.n	80085c2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085a4:	78fb      	ldrb	r3, [r7, #3]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	4613      	mov	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	00db      	lsls	r3, r3, #3
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	4413      	add	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2201      	movs	r2, #1
 80085be:	705a      	strb	r2, [r3, #1]
 80085c0:	e00c      	b.n	80085dc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80085c2:	78fa      	ldrb	r2, [r7, #3]
 80085c4:	4613      	mov	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	4413      	add	r3, r2
 80085d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2201      	movs	r2, #1
 80085e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80085e2:	78fb      	ldrb	r3, [r7, #3]
 80085e4:	f003 0307 	and.w	r3, r3, #7
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d101      	bne.n	80085fc <HAL_PCD_EP_SetStall+0x7e>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e01c      	b.n	8008636 <HAL_PCD_EP_SetStall+0xb8>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68f9      	ldr	r1, [r7, #12]
 800860a:	4618      	mov	r0, r3
 800860c:	f007 f9f4 	bl	800f9f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	f003 0307 	and.w	r3, r3, #7
 8008616:	2b00      	cmp	r3, #0
 8008618:	d108      	bne.n	800862c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008624:	4619      	mov	r1, r3
 8008626:	4610      	mov	r0, r2
 8008628:	f007 fb35 	bl	800fc96 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	f003 020f 	and.w	r2, r3, #15
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	429a      	cmp	r2, r3
 8008656:	d901      	bls.n	800865c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e040      	b.n	80086de <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800865c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008660:	2b00      	cmp	r3, #0
 8008662:	da0e      	bge.n	8008682 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008664:	78fb      	ldrb	r3, [r7, #3]
 8008666:	f003 0307 	and.w	r3, r3, #7
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	4613      	mov	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	4413      	add	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2201      	movs	r2, #1
 800867e:	705a      	strb	r2, [r3, #1]
 8008680:	e00e      	b.n	80086a0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008682:	78fb      	ldrb	r3, [r7, #3]
 8008684:	f003 0207 	and.w	r2, r3, #7
 8008688:	4613      	mov	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	4413      	add	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086a6:	78fb      	ldrb	r3, [r7, #3]
 80086a8:	f003 0307 	and.w	r3, r3, #7
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d101      	bne.n	80086c0 <HAL_PCD_EP_ClrStall+0x82>
 80086bc:	2302      	movs	r3, #2
 80086be:	e00e      	b.n	80086de <HAL_PCD_EP_ClrStall+0xa0>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68f9      	ldr	r1, [r7, #12]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f007 f9e3 	bl	800fa9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b096      	sub	sp, #88	; 0x58
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80086ee:	e3b1      	b.n	8008e54 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80086f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80086fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008700:	b2db      	uxtb	r3, r3
 8008702:	f003 030f 	and.w	r3, r3, #15
 8008706:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800870a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800870e:	2b00      	cmp	r3, #0
 8008710:	f040 8173 	bne.w	80089fa <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008714:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008718:	f003 0310 	and.w	r3, r3, #16
 800871c:	2b00      	cmp	r3, #0
 800871e:	d150      	bne.n	80087c2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	b29b      	uxth	r3, r3
 8008728:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800872c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008730:	81fb      	strh	r3, [r7, #14]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	89fb      	ldrh	r3, [r7, #14]
 8008738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800873c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008740:	b29b      	uxth	r3, r3
 8008742:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	3328      	adds	r3, #40	; 0x28
 8008748:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008752:	b29b      	uxth	r3, r3
 8008754:	461a      	mov	r2, r3
 8008756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	4413      	add	r3, r2
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	6812      	ldr	r2, [r2, #0]
 8008762:	4413      	add	r3, r2
 8008764:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800876e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008770:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008774:	695a      	ldr	r2, [r3, #20]
 8008776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	441a      	add	r2, r3
 800877c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800877e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008780:	2100      	movs	r1, #0
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f00a fa31 	bl	8012bea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 835f 	beq.w	8008e54 <PCD_EP_ISR_Handler+0x76e>
 8008796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	2b00      	cmp	r3, #0
 800879c:	f040 835a 	bne.w	8008e54 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	b292      	uxth	r2, r2
 80087b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80087c0:	e348      	b.n	8008e54 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80087c8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80087d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80087d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d032      	beq.n	8008846 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	461a      	mov	r2, r3
 80087ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	00db      	lsls	r3, r3, #3
 80087f2:	4413      	add	r3, r2
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	6812      	ldr	r2, [r2, #0]
 80087f8:	4413      	add	r3, r2
 80087fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008806:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8008812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008814:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008818:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800881a:	b29b      	uxth	r3, r3
 800881c:	f007 fa89 	bl	800fd32 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	881b      	ldrh	r3, [r3, #0]
 8008826:	b29a      	uxth	r2, r3
 8008828:	f640 738f 	movw	r3, #3983	; 0xf8f
 800882c:	4013      	ands	r3, r2
 800882e:	823b      	strh	r3, [r7, #16]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	8a3a      	ldrh	r2, [r7, #16]
 8008836:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800883a:	b292      	uxth	r2, r2
 800883c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f00a f9a6 	bl	8012b90 <HAL_PCD_SetupStageCallback>
 8008844:	e306      	b.n	8008e54 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008846:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800884a:	2b00      	cmp	r3, #0
 800884c:	f280 8302 	bge.w	8008e54 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	b29a      	uxth	r2, r3
 8008858:	f640 738f 	movw	r3, #3983	; 0xf8f
 800885c:	4013      	ands	r3, r2
 800885e:	83fb      	strh	r3, [r7, #30]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	8bfa      	ldrh	r2, [r7, #30]
 8008866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800886a:	b292      	uxth	r2, r2
 800886c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008876:	b29b      	uxth	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	4413      	add	r3, r2
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6812      	ldr	r2, [r2, #0]
 8008886:	4413      	add	r3, r2
 8008888:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008894:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d019      	beq.n	80088d2 <PCD_EP_ISR_Handler+0x1ec>
 800889e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d015      	beq.n	80088d2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088ac:	6959      	ldr	r1, [r3, #20]
 80088ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088b0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80088b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088b4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	f007 fa3b 	bl	800fd32 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80088bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088be:	695a      	ldr	r2, [r3, #20]
 80088c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	441a      	add	r2, r3
 80088c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088c8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80088ca:	2100      	movs	r1, #0
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f00a f971 	bl	8012bb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	881b      	ldrh	r3, [r3, #0]
 80088d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80088dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80088e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f040 82b5 	bne.w	8008e54 <PCD_EP_ISR_Handler+0x76e>
 80088ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80088ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80088f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80088f6:	f000 82ad 	beq.w	8008e54 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	61bb      	str	r3, [r7, #24]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008908:	b29b      	uxth	r3, r3
 800890a:	461a      	mov	r2, r3
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	4413      	add	r3, r2
 8008910:	61bb      	str	r3, [r7, #24]
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008918:	617b      	str	r3, [r7, #20]
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	b29b      	uxth	r3, r3
 8008920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008924:	b29a      	uxth	r2, r3
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	801a      	strh	r2, [r3, #0]
 800892a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	2b3e      	cmp	r3, #62	; 0x3e
 8008930:	d91d      	bls.n	800896e <PCD_EP_ISR_Handler+0x288>
 8008932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	095b      	lsrs	r3, r3, #5
 8008938:	647b      	str	r3, [r7, #68]	; 0x44
 800893a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	f003 031f 	and.w	r3, r3, #31
 8008942:	2b00      	cmp	r3, #0
 8008944:	d102      	bne.n	800894c <PCD_EP_ISR_Handler+0x266>
 8008946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008948:	3b01      	subs	r3, #1
 800894a:	647b      	str	r3, [r7, #68]	; 0x44
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	b29a      	uxth	r2, r3
 8008952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008954:	b29b      	uxth	r3, r3
 8008956:	029b      	lsls	r3, r3, #10
 8008958:	b29b      	uxth	r3, r3
 800895a:	4313      	orrs	r3, r2
 800895c:	b29b      	uxth	r3, r3
 800895e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008966:	b29a      	uxth	r2, r3
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	801a      	strh	r2, [r3, #0]
 800896c:	e026      	b.n	80089bc <PCD_EP_ISR_Handler+0x2d6>
 800896e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10a      	bne.n	800898c <PCD_EP_ISR_Handler+0x2a6>
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	b29b      	uxth	r3, r3
 800897c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008984:	b29a      	uxth	r2, r3
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	801a      	strh	r2, [r3, #0]
 800898a:	e017      	b.n	80089bc <PCD_EP_ISR_Handler+0x2d6>
 800898c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	085b      	lsrs	r3, r3, #1
 8008992:	647b      	str	r3, [r7, #68]	; 0x44
 8008994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <PCD_EP_ISR_Handler+0x2c0>
 80089a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a2:	3301      	adds	r3, #1
 80089a4:	647b      	str	r3, [r7, #68]	; 0x44
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	029b      	lsls	r3, r3, #10
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	4313      	orrs	r3, r2
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	881b      	ldrh	r3, [r3, #0]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089cc:	827b      	strh	r3, [r7, #18]
 80089ce:	8a7b      	ldrh	r3, [r7, #18]
 80089d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80089d4:	827b      	strh	r3, [r7, #18]
 80089d6:	8a7b      	ldrh	r3, [r7, #18]
 80089d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80089dc:	827b      	strh	r3, [r7, #18]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	8a7b      	ldrh	r3, [r7, #18]
 80089e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	8013      	strh	r3, [r2, #0]
 80089f8:	e22c      	b.n	8008e54 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	881b      	ldrh	r3, [r3, #0]
 8008a0a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008a0e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f280 80f6 	bge.w	8008c04 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008a2e:	4013      	ands	r3, r2
 8008a30:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8008a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a4a:	b292      	uxth	r2, r2
 8008a4c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8008a4e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8008a52:	4613      	mov	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	00db      	lsls	r3, r3, #3
 8008a5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	4413      	add	r3, r2
 8008a62:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a66:	7b1b      	ldrb	r3, [r3, #12]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d123      	bne.n	8008ab4 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	461a      	mov	r2, r3
 8008a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	4413      	add	r3, r2
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6812      	ldr	r2, [r2, #0]
 8008a84:	4413      	add	r3, r2
 8008a86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a90:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8008a94:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 808e 	beq.w	8008bba <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aa4:	6959      	ldr	r1, [r3, #20]
 8008aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aa8:	88da      	ldrh	r2, [r3, #6]
 8008aaa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008aae:	f007 f940 	bl	800fd32 <USB_ReadPMA>
 8008ab2:	e082      	b.n	8008bba <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ab6:	78db      	ldrb	r3, [r3, #3]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d10a      	bne.n	8008ad2 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008abc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f9d3 	bl	8008e70 <HAL_PCD_EP_DB_Receive>
 8008aca:	4603      	mov	r3, r0
 8008acc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8008ad0:	e073      	b.n	8008bba <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	461a      	mov	r2, r3
 8008af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	441a      	add	r2, r3
 8008afe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d022      	beq.n	8008b76 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	00db      	lsls	r3, r3, #3
 8008b42:	4413      	add	r3, r2
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	6812      	ldr	r2, [r2, #0]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b54:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8008b58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d02c      	beq.n	8008bba <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6818      	ldr	r0, [r3, #0]
 8008b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b66:	6959      	ldr	r1, [r3, #20]
 8008b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b6a:	891a      	ldrh	r2, [r3, #8]
 8008b6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008b70:	f007 f8df 	bl	800fd32 <USB_ReadPMA>
 8008b74:	e021      	b.n	8008bba <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	461a      	mov	r2, r3
 8008b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	00db      	lsls	r3, r3, #3
 8008b88:	4413      	add	r3, r2
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	6812      	ldr	r2, [r2, #0]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b9a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8008b9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d009      	beq.n	8008bba <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6818      	ldr	r0, [r3, #0]
 8008baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bac:	6959      	ldr	r1, [r3, #20]
 8008bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bb0:	895a      	ldrh	r2, [r3, #10]
 8008bb2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008bb6:	f007 f8bc 	bl	800fd32 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bbc:	69da      	ldr	r2, [r3, #28]
 8008bbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008bc2:	441a      	add	r2, r3
 8008bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bc6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bca:	695a      	ldr	r2, [r3, #20]
 8008bcc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008bd0:	441a      	add	r2, r3
 8008bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bd4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d005      	beq.n	8008bea <PCD_EP_ISR_Handler+0x504>
 8008bde:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8008be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d206      	bcs.n	8008bf8 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f009 ffdf 	bl	8012bb4 <HAL_PCD_DataOutStageCallback>
 8008bf6:	e005      	b.n	8008c04 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f005 fb49 	bl	800e296 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008c04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 8121 	beq.w	8008e54 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8008c12:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	4613      	mov	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	4413      	add	r3, r2
 8008c24:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	441a      	add	r2, r3
 8008c52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c64:	78db      	ldrb	r3, [r3, #3]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	f040 80a2 	bne.w	8008db0 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8008c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c6e:	2200      	movs	r2, #0
 8008c70:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c74:	7b1b      	ldrb	r3, [r3, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 8093 	beq.w	8008da2 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008c7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d046      	beq.n	8008d16 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c8a:	785b      	ldrb	r3, [r3, #1]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d126      	bne.n	8008cde <PCD_EP_ISR_Handler+0x5f8>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	627b      	str	r3, [r7, #36]	; 0x24
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca4:	4413      	add	r3, r2
 8008ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	00da      	lsls	r2, r3, #3
 8008cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008cb6:	623b      	str	r3, [r7, #32]
 8008cb8:	6a3b      	ldr	r3, [r7, #32]
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	801a      	strh	r2, [r3, #0]
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	801a      	strh	r2, [r3, #0]
 8008cdc:	e061      	b.n	8008da2 <PCD_EP_ISR_Handler+0x6bc>
 8008cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ce0:	785b      	ldrb	r3, [r3, #1]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d15d      	bne.n	8008da2 <PCD_EP_ISR_Handler+0x6bc>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfa:	4413      	add	r3, r2
 8008cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	00da      	lsls	r2, r3, #3
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d06:	4413      	add	r3, r2
 8008d08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d10:	2200      	movs	r2, #0
 8008d12:	801a      	strh	r2, [r3, #0]
 8008d14:	e045      	b.n	8008da2 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d1e:	785b      	ldrb	r3, [r3, #1]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d126      	bne.n	8008d72 <PCD_EP_ISR_Handler+0x68c>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	637b      	str	r3, [r7, #52]	; 0x34
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	461a      	mov	r2, r3
 8008d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d38:	4413      	add	r3, r2
 8008d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	00da      	lsls	r2, r3, #3
 8008d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d44:	4413      	add	r3, r2
 8008d46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4e:	881b      	ldrh	r3, [r3, #0]
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5a:	801a      	strh	r2, [r3, #0]
 8008d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5e:	881b      	ldrh	r3, [r3, #0]
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	801a      	strh	r2, [r3, #0]
 8008d70:	e017      	b.n	8008da2 <PCD_EP_ISR_Handler+0x6bc>
 8008d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d74:	785b      	ldrb	r3, [r3, #1]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d113      	bne.n	8008da2 <PCD_EP_ISR_Handler+0x6bc>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	461a      	mov	r2, r3
 8008d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d88:	4413      	add	r3, r2
 8008d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	00da      	lsls	r2, r3, #3
 8008d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d94:	4413      	add	r3, r2
 8008d96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9e:	2200      	movs	r2, #0
 8008da0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f009 ff1e 	bl	8012bea <HAL_PCD_DataInStageCallback>
 8008dae:	e051      	b.n	8008e54 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008db0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d144      	bne.n	8008e46 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	4413      	add	r3, r2
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	6812      	ldr	r2, [r2, #0]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008de0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8008de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008de6:	699a      	ldr	r2, [r3, #24]
 8008de8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d907      	bls.n	8008e00 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8008df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008df2:	699a      	ldr	r2, [r3, #24]
 8008df4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008df8:	1ad2      	subs	r2, r2, r3
 8008dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dfc:	619a      	str	r2, [r3, #24]
 8008dfe:	e002      	b.n	8008e06 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8008e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e02:	2200      	movs	r2, #0
 8008e04:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d106      	bne.n	8008e1c <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f009 fee8 	bl	8012bea <HAL_PCD_DataInStageCallback>
 8008e1a:	e01b      	b.n	8008e54 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e1e:	695a      	ldr	r2, [r3, #20]
 8008e20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008e24:	441a      	add	r2, r3
 8008e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e28:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e2c:	69da      	ldr	r2, [r3, #28]
 8008e2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008e32:	441a      	add	r2, r3
 8008e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e36:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f005 fa29 	bl	800e296 <USB_EPStartXfer>
 8008e44:	e006      	b.n	8008e54 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008e46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f917 	bl	8009082 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	b21b      	sxth	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f6ff ac45 	blt.w	80086f0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3758      	adds	r7, #88	; 0x58
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b088      	sub	sp, #32
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008e7e:	88fb      	ldrh	r3, [r7, #6]
 8008e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d07c      	beq.n	8008f82 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	461a      	mov	r2, r3
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	00db      	lsls	r3, r3, #3
 8008e9a:	4413      	add	r3, r2
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	6812      	ldr	r2, [r2, #0]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008eac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	699a      	ldr	r2, [r3, #24]
 8008eb2:	8b7b      	ldrh	r3, [r7, #26]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d306      	bcc.n	8008ec6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	699a      	ldr	r2, [r3, #24]
 8008ebc:	8b7b      	ldrh	r3, [r7, #26]
 8008ebe:	1ad2      	subs	r2, r2, r3
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	619a      	str	r2, [r3, #24]
 8008ec4:	e002      	b.n	8008ecc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d123      	bne.n	8008f1c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eee:	833b      	strh	r3, [r7, #24]
 8008ef0:	8b3b      	ldrh	r3, [r7, #24]
 8008ef2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ef6:	833b      	strh	r3, [r7, #24]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	461a      	mov	r2, r3
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	441a      	add	r2, r3
 8008f06:	8b3b      	ldrh	r3, [r7, #24]
 8008f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008f1c:	88fb      	ldrh	r3, [r7, #6]
 8008f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d01f      	beq.n	8008f66 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f40:	82fb      	strh	r3, [r7, #22]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	461a      	mov	r2, r3
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	441a      	add	r2, r3
 8008f50:	8afb      	ldrh	r3, [r7, #22]
 8008f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008f66:	8b7b      	ldrh	r3, [r7, #26]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f000 8085 	beq.w	8009078 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	6959      	ldr	r1, [r3, #20]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	891a      	ldrh	r2, [r3, #8]
 8008f7a:	8b7b      	ldrh	r3, [r7, #26]
 8008f7c:	f006 fed9 	bl	800fd32 <USB_ReadPMA>
 8008f80:	e07a      	b.n	8009078 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	4413      	add	r3, r2
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fa6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	699a      	ldr	r2, [r3, #24]
 8008fac:	8b7b      	ldrh	r3, [r7, #26]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d306      	bcc.n	8008fc0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	699a      	ldr	r2, [r3, #24]
 8008fb6:	8b7b      	ldrh	r3, [r7, #26]
 8008fb8:	1ad2      	subs	r2, r2, r3
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	619a      	str	r2, [r3, #24]
 8008fbe:	e002      	b.n	8008fc6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d123      	bne.n	8009016 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe8:	83fb      	strh	r3, [r7, #30]
 8008fea:	8bfb      	ldrh	r3, [r7, #30]
 8008fec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ff0:	83fb      	strh	r3, [r7, #30]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	441a      	add	r2, r3
 8009000:	8bfb      	ldrh	r3, [r7, #30]
 8009002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800900a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800900e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009012:	b29b      	uxth	r3, r3
 8009014:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009016:	88fb      	ldrh	r3, [r7, #6]
 8009018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901c:	2b00      	cmp	r3, #0
 800901e:	d11f      	bne.n	8009060 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	881b      	ldrh	r3, [r3, #0]
 8009030:	b29b      	uxth	r3, r3
 8009032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800903a:	83bb      	strh	r3, [r7, #28]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	461a      	mov	r2, r3
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	441a      	add	r2, r3
 800904a:	8bbb      	ldrh	r3, [r7, #28]
 800904c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009058:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800905c:	b29b      	uxth	r3, r3
 800905e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009060:	8b7b      	ldrh	r3, [r7, #26]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d008      	beq.n	8009078 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6818      	ldr	r0, [r3, #0]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	6959      	ldr	r1, [r3, #20]
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	895a      	ldrh	r2, [r3, #10]
 8009072:	8b7b      	ldrh	r3, [r7, #26]
 8009074:	f006 fe5d 	bl	800fd32 <USB_ReadPMA>
    }
  }

  return count;
 8009078:	8b7b      	ldrh	r3, [r7, #26]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3720      	adds	r7, #32
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b0a4      	sub	sp, #144	; 0x90
 8009086:	af00      	add	r7, sp, #0
 8009088:	60f8      	str	r0, [r7, #12]
 800908a:	60b9      	str	r1, [r7, #8]
 800908c:	4613      	mov	r3, r2
 800908e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009090:	88fb      	ldrh	r3, [r7, #6]
 8009092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 81db 	beq.w	8009452 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	461a      	mov	r2, r3
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	4413      	add	r3, r2
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	6812      	ldr	r2, [r2, #0]
 80090b4:	4413      	add	r3, r2
 80090b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090c0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	699a      	ldr	r2, [r3, #24]
 80090c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d907      	bls.n	80090e0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	699a      	ldr	r2, [r3, #24]
 80090d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80090d8:	1ad2      	subs	r2, r2, r3
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	619a      	str	r2, [r3, #24]
 80090de:	e002      	b.n	80090e6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2200      	movs	r2, #0
 80090e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f040 80b9 	bne.w	8009262 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	785b      	ldrb	r3, [r3, #1]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d126      	bne.n	8009146 <HAL_PCD_EP_DB_Transmit+0xc4>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009106:	b29b      	uxth	r3, r3
 8009108:	461a      	mov	r2, r3
 800910a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910c:	4413      	add	r3, r2
 800910e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	00da      	lsls	r2, r3, #3
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	4413      	add	r3, r2
 800911a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800911e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800912a:	b29a      	uxth	r2, r3
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	801a      	strh	r2, [r3, #0]
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	b29b      	uxth	r3, r3
 8009136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800913a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800913e:	b29a      	uxth	r2, r3
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	801a      	strh	r2, [r3, #0]
 8009144:	e01a      	b.n	800917c <HAL_PCD_EP_DB_Transmit+0xfa>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	785b      	ldrb	r3, [r3, #1]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d116      	bne.n	800917c <HAL_PCD_EP_DB_Transmit+0xfa>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	637b      	str	r3, [r7, #52]	; 0x34
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800915c:	b29b      	uxth	r3, r3
 800915e:	461a      	mov	r2, r3
 8009160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009162:	4413      	add	r3, r2
 8009164:	637b      	str	r3, [r7, #52]	; 0x34
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	00da      	lsls	r2, r3, #3
 800916c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916e:	4413      	add	r3, r2
 8009170:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009174:	633b      	str	r3, [r7, #48]	; 0x30
 8009176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009178:	2200      	movs	r2, #0
 800917a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	627b      	str	r3, [r7, #36]	; 0x24
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	785b      	ldrb	r3, [r3, #1]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d126      	bne.n	80091d8 <HAL_PCD_EP_DB_Transmit+0x156>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	61fb      	str	r3, [r7, #28]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009198:	b29b      	uxth	r3, r3
 800919a:	461a      	mov	r2, r3
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	4413      	add	r3, r2
 80091a0:	61fb      	str	r3, [r7, #28]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	00da      	lsls	r2, r3, #3
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	4413      	add	r3, r2
 80091ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80091b0:	61bb      	str	r3, [r7, #24]
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	881b      	ldrh	r3, [r3, #0]
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091bc:	b29a      	uxth	r2, r3
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	801a      	strh	r2, [r3, #0]
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	881b      	ldrh	r3, [r3, #0]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	801a      	strh	r2, [r3, #0]
 80091d6:	e017      	b.n	8009208 <HAL_PCD_EP_DB_Transmit+0x186>
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	785b      	ldrb	r3, [r3, #1]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d113      	bne.n	8009208 <HAL_PCD_EP_DB_Transmit+0x186>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	461a      	mov	r2, r3
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ee:	4413      	add	r3, r2
 80091f0:	627b      	str	r3, [r7, #36]	; 0x24
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	00da      	lsls	r2, r3, #3
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	4413      	add	r3, r2
 80091fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009200:	623b      	str	r3, [r7, #32]
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	2200      	movs	r2, #0
 8009206:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	4619      	mov	r1, r3
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f009 fceb 	bl	8012bea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009214:	88fb      	ldrh	r3, [r7, #6]
 8009216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800921a:	2b00      	cmp	r3, #0
 800921c:	f000 82fa 	beq.w	8009814 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	b29b      	uxth	r3, r3
 8009232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923a:	82fb      	strh	r3, [r7, #22]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	461a      	mov	r2, r3
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	441a      	add	r2, r3
 800924a:	8afb      	ldrh	r3, [r7, #22]
 800924c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800925c:	b29b      	uxth	r3, r3
 800925e:	8013      	strh	r3, [r2, #0]
 8009260:	e2d8      	b.n	8009814 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009262:	88fb      	ldrh	r3, [r7, #6]
 8009264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d021      	beq.n	80092b0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	461a      	mov	r2, r3
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	881b      	ldrh	r3, [r3, #0]
 800927c:	b29b      	uxth	r3, r3
 800927e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009286:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	441a      	add	r2, r3
 8009298:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800929c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	f040 82ac 	bne.w	8009814 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	695a      	ldr	r2, [r3, #20]
 80092c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80092c4:	441a      	add	r2, r3
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	69da      	ldr	r2, [r3, #28]
 80092ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80092d2:	441a      	add	r2, r3
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	6a1a      	ldr	r2, [r3, #32]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d30b      	bcc.n	80092fc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	6a1a      	ldr	r2, [r3, #32]
 80092f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092f4:	1ad2      	subs	r2, r2, r3
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	621a      	str	r2, [r3, #32]
 80092fa:	e017      	b.n	800932c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d108      	bne.n	8009316 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8009304:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009308:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009314:	e00a      	b.n	800932c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	2200      	movs	r2, #0
 800932a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	785b      	ldrb	r3, [r3, #1]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d165      	bne.n	8009400 <HAL_PCD_EP_DB_Transmit+0x37e>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009342:	b29b      	uxth	r3, r3
 8009344:	461a      	mov	r2, r3
 8009346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009348:	4413      	add	r3, r2
 800934a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	00da      	lsls	r2, r3, #3
 8009352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009354:	4413      	add	r3, r2
 8009356:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800935a:	63bb      	str	r3, [r7, #56]	; 0x38
 800935c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	b29b      	uxth	r3, r3
 8009362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009366:	b29a      	uxth	r2, r3
 8009368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936a:	801a      	strh	r2, [r3, #0]
 800936c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009370:	2b3e      	cmp	r3, #62	; 0x3e
 8009372:	d91d      	bls.n	80093b0 <HAL_PCD_EP_DB_Transmit+0x32e>
 8009374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009378:	095b      	lsrs	r3, r3, #5
 800937a:	64bb      	str	r3, [r7, #72]	; 0x48
 800937c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009380:	f003 031f 	and.w	r3, r3, #31
 8009384:	2b00      	cmp	r3, #0
 8009386:	d102      	bne.n	800938e <HAL_PCD_EP_DB_Transmit+0x30c>
 8009388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800938a:	3b01      	subs	r3, #1
 800938c:	64bb      	str	r3, [r7, #72]	; 0x48
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	b29a      	uxth	r2, r3
 8009394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009396:	b29b      	uxth	r3, r3
 8009398:	029b      	lsls	r3, r3, #10
 800939a:	b29b      	uxth	r3, r3
 800939c:	4313      	orrs	r3, r2
 800939e:	b29b      	uxth	r3, r3
 80093a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ac:	801a      	strh	r2, [r3, #0]
 80093ae:	e044      	b.n	800943a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80093b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10a      	bne.n	80093ce <HAL_PCD_EP_DB_Transmit+0x34c>
 80093b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ba:	881b      	ldrh	r3, [r3, #0]
 80093bc:	b29b      	uxth	r3, r3
 80093be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ca:	801a      	strh	r2, [r3, #0]
 80093cc:	e035      	b.n	800943a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80093ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093d2:	085b      	lsrs	r3, r3, #1
 80093d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80093d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d002      	beq.n	80093e8 <HAL_PCD_EP_DB_Transmit+0x366>
 80093e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093e4:	3301      	adds	r3, #1
 80093e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80093e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	029b      	lsls	r3, r3, #10
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	4313      	orrs	r3, r2
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	801a      	strh	r2, [r3, #0]
 80093fe:	e01c      	b.n	800943a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	785b      	ldrb	r3, [r3, #1]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d118      	bne.n	800943a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	647b      	str	r3, [r7, #68]	; 0x44
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009416:	b29b      	uxth	r3, r3
 8009418:	461a      	mov	r2, r3
 800941a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800941c:	4413      	add	r3, r2
 800941e:	647b      	str	r3, [r7, #68]	; 0x44
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	00da      	lsls	r2, r3, #3
 8009426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009428:	4413      	add	r3, r2
 800942a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800942e:	643b      	str	r3, [r7, #64]	; 0x40
 8009430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009434:	b29a      	uxth	r2, r3
 8009436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009438:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6818      	ldr	r0, [r3, #0]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	6959      	ldr	r1, [r3, #20]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	891a      	ldrh	r2, [r3, #8]
 8009446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800944a:	b29b      	uxth	r3, r3
 800944c:	f006 fc2f 	bl	800fcae <USB_WritePMA>
 8009450:	e1e0      	b.n	8009814 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800945a:	b29b      	uxth	r3, r3
 800945c:	461a      	mov	r2, r3
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	00db      	lsls	r3, r3, #3
 8009464:	4413      	add	r3, r2
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	6812      	ldr	r2, [r2, #0]
 800946a:	4413      	add	r3, r2
 800946c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009476:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	699a      	ldr	r2, [r3, #24]
 800947e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009482:	429a      	cmp	r2, r3
 8009484:	d307      	bcc.n	8009496 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	699a      	ldr	r2, [r3, #24]
 800948a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800948e:	1ad2      	subs	r2, r2, r3
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	619a      	str	r2, [r3, #24]
 8009494:	e002      	b.n	800949c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2200      	movs	r2, #0
 800949a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f040 80c0 	bne.w	8009626 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	785b      	ldrb	r3, [r3, #1]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d126      	bne.n	80094fc <HAL_PCD_EP_DB_Transmit+0x47a>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094bc:	b29b      	uxth	r3, r3
 80094be:	461a      	mov	r2, r3
 80094c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094c2:	4413      	add	r3, r2
 80094c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	00da      	lsls	r2, r3, #3
 80094cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094ce:	4413      	add	r3, r2
 80094d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80094d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80094d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094d8:	881b      	ldrh	r3, [r3, #0]
 80094da:	b29b      	uxth	r3, r3
 80094dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094e4:	801a      	strh	r2, [r3, #0]
 80094e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094e8:	881b      	ldrh	r3, [r3, #0]
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094f8:	801a      	strh	r2, [r3, #0]
 80094fa:	e01a      	b.n	8009532 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	785b      	ldrb	r3, [r3, #1]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d116      	bne.n	8009532 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	667b      	str	r3, [r7, #100]	; 0x64
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009512:	b29b      	uxth	r3, r3
 8009514:	461a      	mov	r2, r3
 8009516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009518:	4413      	add	r3, r2
 800951a:	667b      	str	r3, [r7, #100]	; 0x64
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	00da      	lsls	r2, r3, #3
 8009522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009524:	4413      	add	r3, r2
 8009526:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800952a:	663b      	str	r3, [r7, #96]	; 0x60
 800952c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800952e:	2200      	movs	r2, #0
 8009530:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	677b      	str	r3, [r7, #116]	; 0x74
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	785b      	ldrb	r3, [r3, #1]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d12b      	bne.n	8009598 <HAL_PCD_EP_DB_Transmit+0x516>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800954e:	b29b      	uxth	r3, r3
 8009550:	461a      	mov	r2, r3
 8009552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009554:	4413      	add	r3, r2
 8009556:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	00da      	lsls	r2, r3, #3
 800955e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009560:	4413      	add	r3, r2
 8009562:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009566:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800956a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	b29b      	uxth	r3, r3
 8009572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009576:	b29a      	uxth	r2, r3
 8009578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800957c:	801a      	strh	r2, [r3, #0]
 800957e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	b29b      	uxth	r3, r3
 8009586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800958a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800958e:	b29a      	uxth	r2, r3
 8009590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009594:	801a      	strh	r2, [r3, #0]
 8009596:	e017      	b.n	80095c8 <HAL_PCD_EP_DB_Transmit+0x546>
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d113      	bne.n	80095c8 <HAL_PCD_EP_DB_Transmit+0x546>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	461a      	mov	r2, r3
 80095ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095ae:	4413      	add	r3, r2
 80095b0:	677b      	str	r3, [r7, #116]	; 0x74
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	00da      	lsls	r2, r3, #3
 80095b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095ba:	4413      	add	r3, r2
 80095bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095c0:	673b      	str	r3, [r7, #112]	; 0x70
 80095c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095c4:	2200      	movs	r2, #0
 80095c6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	4619      	mov	r1, r3
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f009 fb0b 	bl	8012bea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80095d4:	88fb      	ldrh	r3, [r7, #6]
 80095d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f040 811a 	bne.w	8009814 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	461a      	mov	r2, r3
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095fa:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	441a      	add	r2, r3
 800960c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8009610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800961c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009620:	b29b      	uxth	r3, r3
 8009622:	8013      	strh	r3, [r2, #0]
 8009624:	e0f6      	b.n	8009814 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009626:	88fb      	ldrh	r3, [r7, #6]
 8009628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d121      	bne.n	8009674 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	461a      	mov	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	b29b      	uxth	r3, r3
 8009642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800964a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	461a      	mov	r2, r3
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	441a      	add	r2, r3
 800965c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009668:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800966c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009670:	b29b      	uxth	r3, r3
 8009672:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800967a:	2b01      	cmp	r3, #1
 800967c:	f040 80ca 	bne.w	8009814 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	695a      	ldr	r2, [r3, #20]
 8009684:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009688:	441a      	add	r2, r3
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	69da      	ldr	r2, [r3, #28]
 8009692:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009696:	441a      	add	r2, r3
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	6a1a      	ldr	r2, [r3, #32]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d30b      	bcc.n	80096c0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	6a1a      	ldr	r2, [r3, #32]
 80096b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096b8:	1ad2      	subs	r2, r2, r3
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	621a      	str	r2, [r3, #32]
 80096be:	e017      	b.n	80096f0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d108      	bne.n	80096da <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80096c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80096cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80096d8:	e00a      	b.n	80096f0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	2200      	movs	r2, #0
 80096e6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	657b      	str	r3, [r7, #84]	; 0x54
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	785b      	ldrb	r3, [r3, #1]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d165      	bne.n	80097ca <HAL_PCD_EP_DB_Transmit+0x748>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800970c:	b29b      	uxth	r3, r3
 800970e:	461a      	mov	r2, r3
 8009710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009712:	4413      	add	r3, r2
 8009714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	00da      	lsls	r2, r3, #3
 800971c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800971e:	4413      	add	r3, r2
 8009720:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009724:	65bb      	str	r3, [r7, #88]	; 0x58
 8009726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	b29b      	uxth	r3, r3
 800972c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009730:	b29a      	uxth	r2, r3
 8009732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009734:	801a      	strh	r2, [r3, #0]
 8009736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800973a:	2b3e      	cmp	r3, #62	; 0x3e
 800973c:	d91d      	bls.n	800977a <HAL_PCD_EP_DB_Transmit+0x6f8>
 800973e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009742:	095b      	lsrs	r3, r3, #5
 8009744:	66bb      	str	r3, [r7, #104]	; 0x68
 8009746:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800974a:	f003 031f 	and.w	r3, r3, #31
 800974e:	2b00      	cmp	r3, #0
 8009750:	d102      	bne.n	8009758 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8009752:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009754:	3b01      	subs	r3, #1
 8009756:	66bb      	str	r3, [r7, #104]	; 0x68
 8009758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	b29a      	uxth	r2, r3
 800975e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009760:	b29b      	uxth	r3, r3
 8009762:	029b      	lsls	r3, r3, #10
 8009764:	b29b      	uxth	r3, r3
 8009766:	4313      	orrs	r3, r2
 8009768:	b29b      	uxth	r3, r3
 800976a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800976e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009772:	b29a      	uxth	r2, r3
 8009774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009776:	801a      	strh	r2, [r3, #0]
 8009778:	e041      	b.n	80097fe <HAL_PCD_EP_DB_Transmit+0x77c>
 800977a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10a      	bne.n	8009798 <HAL_PCD_EP_DB_Transmit+0x716>
 8009782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009784:	881b      	ldrh	r3, [r3, #0]
 8009786:	b29b      	uxth	r3, r3
 8009788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800978c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009790:	b29a      	uxth	r2, r3
 8009792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009794:	801a      	strh	r2, [r3, #0]
 8009796:	e032      	b.n	80097fe <HAL_PCD_EP_DB_Transmit+0x77c>
 8009798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800979c:	085b      	lsrs	r3, r3, #1
 800979e:	66bb      	str	r3, [r7, #104]	; 0x68
 80097a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <HAL_PCD_EP_DB_Transmit+0x730>
 80097ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097ae:	3301      	adds	r3, #1
 80097b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80097b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	029b      	lsls	r3, r3, #10
 80097be:	b29b      	uxth	r3, r3
 80097c0:	4313      	orrs	r3, r2
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097c6:	801a      	strh	r2, [r3, #0]
 80097c8:	e019      	b.n	80097fe <HAL_PCD_EP_DB_Transmit+0x77c>
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	785b      	ldrb	r3, [r3, #1]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d115      	bne.n	80097fe <HAL_PCD_EP_DB_Transmit+0x77c>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097da:	b29b      	uxth	r3, r3
 80097dc:	461a      	mov	r2, r3
 80097de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097e0:	4413      	add	r3, r2
 80097e2:	657b      	str	r3, [r7, #84]	; 0x54
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	00da      	lsls	r2, r3, #3
 80097ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ec:	4413      	add	r3, r2
 80097ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097f2:	653b      	str	r3, [r7, #80]	; 0x50
 80097f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097fc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6818      	ldr	r0, [r3, #0]
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	6959      	ldr	r1, [r3, #20]
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	895a      	ldrh	r2, [r3, #10]
 800980a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800980e:	b29b      	uxth	r3, r3
 8009810:	f006 fa4d 	bl	800fcae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	461a      	mov	r2, r3
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	b29b      	uxth	r3, r3
 8009826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800982a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800982e:	82bb      	strh	r3, [r7, #20]
 8009830:	8abb      	ldrh	r3, [r7, #20]
 8009832:	f083 0310 	eor.w	r3, r3, #16
 8009836:	82bb      	strh	r3, [r7, #20]
 8009838:	8abb      	ldrh	r3, [r7, #20]
 800983a:	f083 0320 	eor.w	r3, r3, #32
 800983e:	82bb      	strh	r3, [r7, #20]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	461a      	mov	r2, r3
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	441a      	add	r2, r3
 800984e:	8abb      	ldrh	r3, [r7, #20]
 8009850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800985c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009860:	b29b      	uxth	r3, r3
 8009862:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3790      	adds	r7, #144	; 0x90
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800986e:	b480      	push	{r7}
 8009870:	b087      	sub	sp, #28
 8009872:	af00      	add	r7, sp, #0
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	607b      	str	r3, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	817b      	strh	r3, [r7, #10]
 800987c:	4613      	mov	r3, r2
 800987e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8009880:	897b      	ldrh	r3, [r7, #10]
 8009882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009886:	b29b      	uxth	r3, r3
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00b      	beq.n	80098a4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800988c:	897b      	ldrh	r3, [r7, #10]
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	4613      	mov	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	00db      	lsls	r3, r3, #3
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	4413      	add	r3, r2
 80098a0:	617b      	str	r3, [r7, #20]
 80098a2:	e009      	b.n	80098b8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80098a4:	897a      	ldrh	r2, [r7, #10]
 80098a6:	4613      	mov	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	00db      	lsls	r3, r3, #3
 80098ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	4413      	add	r3, r2
 80098b6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80098b8:	893b      	ldrh	r3, [r7, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d107      	bne.n	80098ce <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2200      	movs	r2, #0
 80098c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	80da      	strh	r2, [r3, #6]
 80098cc:	e00b      	b.n	80098e6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	2201      	movs	r2, #1
 80098d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	0c1b      	lsrs	r3, r3, #16
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	371c      	adds	r7, #28
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009918:	b29b      	uxth	r3, r3
 800991a:	f043 0301 	orr.w	r3, r3, #1
 800991e:	b29a      	uxth	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800992c:	b29b      	uxth	r3, r3
 800992e:	f043 0302 	orr.w	r3, r3, #2
 8009932:	b29a      	uxth	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009948:	b480      	push	{r7}
 800994a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800994c:	4b04      	ldr	r3, [pc, #16]	; (8009960 <HAL_PWREx_GetVoltageRange+0x18>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009954:	4618      	mov	r0, r3
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	40007000 	.word	0x40007000

08009964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009972:	d130      	bne.n	80099d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009974:	4b23      	ldr	r3, [pc, #140]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800997c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009980:	d038      	beq.n	80099f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009982:	4b20      	ldr	r3, [pc, #128]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800998a:	4a1e      	ldr	r2, [pc, #120]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800998c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009990:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009992:	4b1d      	ldr	r3, [pc, #116]	; (8009a08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2232      	movs	r2, #50	; 0x32
 8009998:	fb02 f303 	mul.w	r3, r2, r3
 800999c:	4a1b      	ldr	r2, [pc, #108]	; (8009a0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800999e:	fba2 2303 	umull	r2, r3, r2, r3
 80099a2:	0c9b      	lsrs	r3, r3, #18
 80099a4:	3301      	adds	r3, #1
 80099a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80099a8:	e002      	b.n	80099b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80099b0:	4b14      	ldr	r3, [pc, #80]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099bc:	d102      	bne.n	80099c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1f2      	bne.n	80099aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80099c4:	4b0f      	ldr	r3, [pc, #60]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099d0:	d110      	bne.n	80099f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e00f      	b.n	80099f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80099d6:	4b0b      	ldr	r3, [pc, #44]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80099de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099e2:	d007      	beq.n	80099f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80099e4:	4b07      	ldr	r3, [pc, #28]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80099ec:	4a05      	ldr	r2, [pc, #20]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80099ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80099f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	40007000 	.word	0x40007000
 8009a08:	20000020 	.word	0x20000020
 8009a0c:	431bde83 	.word	0x431bde83

08009a10 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009a10:	b480      	push	{r7}
 8009a12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009a14:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	4a04      	ldr	r2, [pc, #16]	; (8009a2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8009a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a1e:	6053      	str	r3, [r2, #4]
}
 8009a20:	bf00      	nop
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	40007000 	.word	0x40007000

08009a30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b088      	sub	sp, #32
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d102      	bne.n	8009a44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	f000 bc02 	b.w	800a248 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a44:	4b96      	ldr	r3, [pc, #600]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f003 030c 	and.w	r3, r3, #12
 8009a4c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a4e:	4b94      	ldr	r3, [pc, #592]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 0310 	and.w	r3, r3, #16
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 80e4 	beq.w	8009c2e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d007      	beq.n	8009a7c <HAL_RCC_OscConfig+0x4c>
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	2b0c      	cmp	r3, #12
 8009a70:	f040 808b 	bne.w	8009b8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	f040 8087 	bne.w	8009b8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009a7c:	4b88      	ldr	r3, [pc, #544]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0302 	and.w	r3, r3, #2
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d005      	beq.n	8009a94 <HAL_RCC_OscConfig+0x64>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	699b      	ldr	r3, [r3, #24]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	e3d9      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a1a      	ldr	r2, [r3, #32]
 8009a98:	4b81      	ldr	r3, [pc, #516]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 0308 	and.w	r3, r3, #8
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d004      	beq.n	8009aae <HAL_RCC_OscConfig+0x7e>
 8009aa4:	4b7e      	ldr	r3, [pc, #504]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aac:	e005      	b.n	8009aba <HAL_RCC_OscConfig+0x8a>
 8009aae:	4b7c      	ldr	r3, [pc, #496]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ab4:	091b      	lsrs	r3, r3, #4
 8009ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d223      	bcs.n	8009b06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 fd8c 	bl	800a5e0 <RCC_SetFlashLatencyFromMSIRange>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e3ba      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009ad2:	4b73      	ldr	r3, [pc, #460]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a72      	ldr	r2, [pc, #456]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009ad8:	f043 0308 	orr.w	r3, r3, #8
 8009adc:	6013      	str	r3, [r2, #0]
 8009ade:	4b70      	ldr	r3, [pc, #448]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	496d      	ldr	r1, [pc, #436]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009aec:	4313      	orrs	r3, r2
 8009aee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009af0:	4b6b      	ldr	r3, [pc, #428]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	69db      	ldr	r3, [r3, #28]
 8009afc:	021b      	lsls	r3, r3, #8
 8009afe:	4968      	ldr	r1, [pc, #416]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009b00:	4313      	orrs	r3, r2
 8009b02:	604b      	str	r3, [r1, #4]
 8009b04:	e025      	b.n	8009b52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009b06:	4b66      	ldr	r3, [pc, #408]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a65      	ldr	r2, [pc, #404]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009b0c:	f043 0308 	orr.w	r3, r3, #8
 8009b10:	6013      	str	r3, [r2, #0]
 8009b12:	4b63      	ldr	r3, [pc, #396]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	4960      	ldr	r1, [pc, #384]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009b20:	4313      	orrs	r3, r2
 8009b22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009b24:	4b5e      	ldr	r3, [pc, #376]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	021b      	lsls	r3, r3, #8
 8009b32:	495b      	ldr	r1, [pc, #364]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009b34:	4313      	orrs	r3, r2
 8009b36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d109      	bne.n	8009b52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 fd4c 	bl	800a5e0 <RCC_SetFlashLatencyFromMSIRange>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e37a      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009b52:	f000 fc81 	bl	800a458 <HAL_RCC_GetSysClockFreq>
 8009b56:	4602      	mov	r2, r0
 8009b58:	4b51      	ldr	r3, [pc, #324]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	091b      	lsrs	r3, r3, #4
 8009b5e:	f003 030f 	and.w	r3, r3, #15
 8009b62:	4950      	ldr	r1, [pc, #320]	; (8009ca4 <HAL_RCC_OscConfig+0x274>)
 8009b64:	5ccb      	ldrb	r3, [r1, r3]
 8009b66:	f003 031f 	and.w	r3, r3, #31
 8009b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b6e:	4a4e      	ldr	r2, [pc, #312]	; (8009ca8 <HAL_RCC_OscConfig+0x278>)
 8009b70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009b72:	4b4e      	ldr	r3, [pc, #312]	; (8009cac <HAL_RCC_OscConfig+0x27c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fb fc4e 	bl	8005418 <HAL_InitTick>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d052      	beq.n	8009c2c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
 8009b88:	e35e      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d032      	beq.n	8009bf8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009b92:	4b43      	ldr	r3, [pc, #268]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a42      	ldr	r2, [pc, #264]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009b98:	f043 0301 	orr.w	r3, r3, #1
 8009b9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009b9e:	f7fb fc8b 	bl	80054b8 <HAL_GetTick>
 8009ba2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009ba4:	e008      	b.n	8009bb8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009ba6:	f7fb fc87 	bl	80054b8 <HAL_GetTick>
 8009baa:	4602      	mov	r2, r0
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d901      	bls.n	8009bb8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	e347      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009bb8:	4b39      	ldr	r3, [pc, #228]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0302 	and.w	r3, r3, #2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d0f0      	beq.n	8009ba6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009bc4:	4b36      	ldr	r3, [pc, #216]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a35      	ldr	r2, [pc, #212]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009bca:	f043 0308 	orr.w	r3, r3, #8
 8009bce:	6013      	str	r3, [r2, #0]
 8009bd0:	4b33      	ldr	r3, [pc, #204]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	4930      	ldr	r1, [pc, #192]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009bde:	4313      	orrs	r3, r2
 8009be0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009be2:	4b2f      	ldr	r3, [pc, #188]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	021b      	lsls	r3, r3, #8
 8009bf0:	492b      	ldr	r1, [pc, #172]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	604b      	str	r3, [r1, #4]
 8009bf6:	e01a      	b.n	8009c2e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009bf8:	4b29      	ldr	r3, [pc, #164]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a28      	ldr	r2, [pc, #160]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009bfe:	f023 0301 	bic.w	r3, r3, #1
 8009c02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009c04:	f7fb fc58 	bl	80054b8 <HAL_GetTick>
 8009c08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009c0a:	e008      	b.n	8009c1e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009c0c:	f7fb fc54 	bl	80054b8 <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d901      	bls.n	8009c1e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e314      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009c1e:	4b20      	ldr	r3, [pc, #128]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0302 	and.w	r3, r3, #2
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1f0      	bne.n	8009c0c <HAL_RCC_OscConfig+0x1dc>
 8009c2a:	e000      	b.n	8009c2e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009c2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d073      	beq.n	8009d22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	2b08      	cmp	r3, #8
 8009c3e:	d005      	beq.n	8009c4c <HAL_RCC_OscConfig+0x21c>
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	2b0c      	cmp	r3, #12
 8009c44:	d10e      	bne.n	8009c64 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	2b03      	cmp	r3, #3
 8009c4a:	d10b      	bne.n	8009c64 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c4c:	4b14      	ldr	r3, [pc, #80]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d063      	beq.n	8009d20 <HAL_RCC_OscConfig+0x2f0>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d15f      	bne.n	8009d20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e2f1      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c6c:	d106      	bne.n	8009c7c <HAL_RCC_OscConfig+0x24c>
 8009c6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a0b      	ldr	r2, [pc, #44]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c78:	6013      	str	r3, [r2, #0]
 8009c7a:	e025      	b.n	8009cc8 <HAL_RCC_OscConfig+0x298>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c84:	d114      	bne.n	8009cb0 <HAL_RCC_OscConfig+0x280>
 8009c86:	4b06      	ldr	r3, [pc, #24]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a05      	ldr	r2, [pc, #20]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c90:	6013      	str	r3, [r2, #0]
 8009c92:	4b03      	ldr	r3, [pc, #12]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a02      	ldr	r2, [pc, #8]	; (8009ca0 <HAL_RCC_OscConfig+0x270>)
 8009c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c9c:	6013      	str	r3, [r2, #0]
 8009c9e:	e013      	b.n	8009cc8 <HAL_RCC_OscConfig+0x298>
 8009ca0:	40021000 	.word	0x40021000
 8009ca4:	0801ae48 	.word	0x0801ae48
 8009ca8:	20000020 	.word	0x20000020
 8009cac:	20000024 	.word	0x20000024
 8009cb0:	4ba0      	ldr	r3, [pc, #640]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a9f      	ldr	r2, [pc, #636]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	4b9d      	ldr	r3, [pc, #628]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a9c      	ldr	r2, [pc, #624]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d013      	beq.n	8009cf8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cd0:	f7fb fbf2 	bl	80054b8 <HAL_GetTick>
 8009cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009cd6:	e008      	b.n	8009cea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009cd8:	f7fb fbee 	bl	80054b8 <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b64      	cmp	r3, #100	; 0x64
 8009ce4:	d901      	bls.n	8009cea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e2ae      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009cea:	4b92      	ldr	r3, [pc, #584]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0f0      	beq.n	8009cd8 <HAL_RCC_OscConfig+0x2a8>
 8009cf6:	e014      	b.n	8009d22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cf8:	f7fb fbde 	bl	80054b8 <HAL_GetTick>
 8009cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009cfe:	e008      	b.n	8009d12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d00:	f7fb fbda 	bl	80054b8 <HAL_GetTick>
 8009d04:	4602      	mov	r2, r0
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	2b64      	cmp	r3, #100	; 0x64
 8009d0c:	d901      	bls.n	8009d12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e29a      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009d12:	4b88      	ldr	r3, [pc, #544]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1f0      	bne.n	8009d00 <HAL_RCC_OscConfig+0x2d0>
 8009d1e:	e000      	b.n	8009d22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d060      	beq.n	8009df0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	2b04      	cmp	r3, #4
 8009d32:	d005      	beq.n	8009d40 <HAL_RCC_OscConfig+0x310>
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	2b0c      	cmp	r3, #12
 8009d38:	d119      	bne.n	8009d6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d116      	bne.n	8009d6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d40:	4b7c      	ldr	r3, [pc, #496]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d005      	beq.n	8009d58 <HAL_RCC_OscConfig+0x328>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e277      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d58:	4b76      	ldr	r3, [pc, #472]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	061b      	lsls	r3, r3, #24
 8009d66:	4973      	ldr	r1, [pc, #460]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d6c:	e040      	b.n	8009df0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d023      	beq.n	8009dbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009d76:	4b6f      	ldr	r3, [pc, #444]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a6e      	ldr	r2, [pc, #440]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d82:	f7fb fb99 	bl	80054b8 <HAL_GetTick>
 8009d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d88:	e008      	b.n	8009d9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d8a:	f7fb fb95 	bl	80054b8 <HAL_GetTick>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d901      	bls.n	8009d9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e255      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d9c:	4b65      	ldr	r3, [pc, #404]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d0f0      	beq.n	8009d8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009da8:	4b62      	ldr	r3, [pc, #392]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	061b      	lsls	r3, r3, #24
 8009db6:	495f      	ldr	r1, [pc, #380]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	604b      	str	r3, [r1, #4]
 8009dbc:	e018      	b.n	8009df0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009dbe:	4b5d      	ldr	r3, [pc, #372]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a5c      	ldr	r2, [pc, #368]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dca:	f7fb fb75 	bl	80054b8 <HAL_GetTick>
 8009dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009dd0:	e008      	b.n	8009de4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009dd2:	f7fb fb71 	bl	80054b8 <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d901      	bls.n	8009de4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009de0:	2303      	movs	r3, #3
 8009de2:	e231      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009de4:	4b53      	ldr	r3, [pc, #332]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1f0      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 0308 	and.w	r3, r3, #8
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d03c      	beq.n	8009e76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	695b      	ldr	r3, [r3, #20]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d01c      	beq.n	8009e3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e04:	4b4b      	ldr	r3, [pc, #300]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e0a:	4a4a      	ldr	r2, [pc, #296]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009e0c:	f043 0301 	orr.w	r3, r3, #1
 8009e10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e14:	f7fb fb50 	bl	80054b8 <HAL_GetTick>
 8009e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009e1a:	e008      	b.n	8009e2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e1c:	f7fb fb4c 	bl	80054b8 <HAL_GetTick>
 8009e20:	4602      	mov	r2, r0
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d901      	bls.n	8009e2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e20c      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009e2e:	4b41      	ldr	r3, [pc, #260]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e34:	f003 0302 	and.w	r3, r3, #2
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d0ef      	beq.n	8009e1c <HAL_RCC_OscConfig+0x3ec>
 8009e3c:	e01b      	b.n	8009e76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e3e:	4b3d      	ldr	r3, [pc, #244]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e44:	4a3b      	ldr	r2, [pc, #236]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009e46:	f023 0301 	bic.w	r3, r3, #1
 8009e4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e4e:	f7fb fb33 	bl	80054b8 <HAL_GetTick>
 8009e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009e54:	e008      	b.n	8009e68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e56:	f7fb fb2f 	bl	80054b8 <HAL_GetTick>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d901      	bls.n	8009e68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e1ef      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009e68:	4b32      	ldr	r3, [pc, #200]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e6e:	f003 0302 	and.w	r3, r3, #2
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1ef      	bne.n	8009e56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 0304 	and.w	r3, r3, #4
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	f000 80a6 	beq.w	8009fd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e84:	2300      	movs	r3, #0
 8009e86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009e88:	4b2a      	ldr	r3, [pc, #168]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10d      	bne.n	8009eb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e94:	4b27      	ldr	r3, [pc, #156]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e98:	4a26      	ldr	r2, [pc, #152]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8009ea0:	4b24      	ldr	r3, [pc, #144]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ea8:	60bb      	str	r3, [r7, #8]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009eac:	2301      	movs	r3, #1
 8009eae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009eb0:	4b21      	ldr	r3, [pc, #132]	; (8009f38 <HAL_RCC_OscConfig+0x508>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d118      	bne.n	8009eee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ebc:	4b1e      	ldr	r3, [pc, #120]	; (8009f38 <HAL_RCC_OscConfig+0x508>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a1d      	ldr	r2, [pc, #116]	; (8009f38 <HAL_RCC_OscConfig+0x508>)
 8009ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ec6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ec8:	f7fb faf6 	bl	80054b8 <HAL_GetTick>
 8009ecc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ece:	e008      	b.n	8009ee2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ed0:	f7fb faf2 	bl	80054b8 <HAL_GetTick>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d901      	bls.n	8009ee2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e1b2      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ee2:	4b15      	ldr	r3, [pc, #84]	; (8009f38 <HAL_RCC_OscConfig+0x508>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d0f0      	beq.n	8009ed0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d108      	bne.n	8009f08 <HAL_RCC_OscConfig+0x4d8>
 8009ef6:	4b0f      	ldr	r3, [pc, #60]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009efc:	4a0d      	ldr	r2, [pc, #52]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009efe:	f043 0301 	orr.w	r3, r3, #1
 8009f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009f06:	e029      	b.n	8009f5c <HAL_RCC_OscConfig+0x52c>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	2b05      	cmp	r3, #5
 8009f0e:	d115      	bne.n	8009f3c <HAL_RCC_OscConfig+0x50c>
 8009f10:	4b08      	ldr	r3, [pc, #32]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f16:	4a07      	ldr	r2, [pc, #28]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009f18:	f043 0304 	orr.w	r3, r3, #4
 8009f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009f20:	4b04      	ldr	r3, [pc, #16]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f26:	4a03      	ldr	r2, [pc, #12]	; (8009f34 <HAL_RCC_OscConfig+0x504>)
 8009f28:	f043 0301 	orr.w	r3, r3, #1
 8009f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009f30:	e014      	b.n	8009f5c <HAL_RCC_OscConfig+0x52c>
 8009f32:	bf00      	nop
 8009f34:	40021000 	.word	0x40021000
 8009f38:	40007000 	.word	0x40007000
 8009f3c:	4b9a      	ldr	r3, [pc, #616]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 8009f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f42:	4a99      	ldr	r2, [pc, #612]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 8009f44:	f023 0301 	bic.w	r3, r3, #1
 8009f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009f4c:	4b96      	ldr	r3, [pc, #600]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 8009f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f52:	4a95      	ldr	r2, [pc, #596]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 8009f54:	f023 0304 	bic.w	r3, r3, #4
 8009f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d016      	beq.n	8009f92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f64:	f7fb faa8 	bl	80054b8 <HAL_GetTick>
 8009f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f6a:	e00a      	b.n	8009f82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f6c:	f7fb faa4 	bl	80054b8 <HAL_GetTick>
 8009f70:	4602      	mov	r2, r0
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d901      	bls.n	8009f82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e162      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f82:	4b89      	ldr	r3, [pc, #548]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 8009f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f88:	f003 0302 	and.w	r3, r3, #2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d0ed      	beq.n	8009f6c <HAL_RCC_OscConfig+0x53c>
 8009f90:	e015      	b.n	8009fbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f92:	f7fb fa91 	bl	80054b8 <HAL_GetTick>
 8009f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f98:	e00a      	b.n	8009fb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f9a:	f7fb fa8d 	bl	80054b8 <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d901      	bls.n	8009fb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e14b      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009fb0:	4b7d      	ldr	r3, [pc, #500]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 8009fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb6:	f003 0302 	and.w	r3, r3, #2
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1ed      	bne.n	8009f9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009fbe:	7ffb      	ldrb	r3, [r7, #31]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d105      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009fc4:	4b78      	ldr	r3, [pc, #480]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 8009fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc8:	4a77      	ldr	r2, [pc, #476]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 8009fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0320 	and.w	r3, r3, #32
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d03c      	beq.n	800a056 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d01c      	beq.n	800a01e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009fe4:	4b70      	ldr	r3, [pc, #448]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 8009fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fea:	4a6f      	ldr	r2, [pc, #444]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 8009fec:	f043 0301 	orr.w	r3, r3, #1
 8009ff0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ff4:	f7fb fa60 	bl	80054b8 <HAL_GetTick>
 8009ff8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009ffa:	e008      	b.n	800a00e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ffc:	f7fb fa5c 	bl	80054b8 <HAL_GetTick>
 800a000:	4602      	mov	r2, r0
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	2b02      	cmp	r3, #2
 800a008:	d901      	bls.n	800a00e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e11c      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a00e:	4b66      	ldr	r3, [pc, #408]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a010:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a014:	f003 0302 	and.w	r3, r3, #2
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d0ef      	beq.n	8009ffc <HAL_RCC_OscConfig+0x5cc>
 800a01c:	e01b      	b.n	800a056 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a01e:	4b62      	ldr	r3, [pc, #392]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a020:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a024:	4a60      	ldr	r2, [pc, #384]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a026:	f023 0301 	bic.w	r3, r3, #1
 800a02a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a02e:	f7fb fa43 	bl	80054b8 <HAL_GetTick>
 800a032:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a034:	e008      	b.n	800a048 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a036:	f7fb fa3f 	bl	80054b8 <HAL_GetTick>
 800a03a:	4602      	mov	r2, r0
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	2b02      	cmp	r3, #2
 800a042:	d901      	bls.n	800a048 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a044:	2303      	movs	r3, #3
 800a046:	e0ff      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a048:	4b57      	ldr	r3, [pc, #348]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a04a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1ef      	bne.n	800a036 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 80f3 	beq.w	800a246 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a064:	2b02      	cmp	r3, #2
 800a066:	f040 80c9 	bne.w	800a1fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a06a:	4b4f      	ldr	r3, [pc, #316]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	f003 0203 	and.w	r2, r3, #3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d12c      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a088:	3b01      	subs	r3, #1
 800a08a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d123      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a09a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d11b      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d113      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ba:	085b      	lsrs	r3, r3, #1
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d109      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ce:	085b      	lsrs	r3, r3, #1
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d06b      	beq.n	800a1b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	2b0c      	cmp	r3, #12
 800a0dc:	d062      	beq.n	800a1a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a0de:	4b32      	ldr	r3, [pc, #200]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e0ac      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a0ee:	4b2e      	ldr	r3, [pc, #184]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a2d      	ldr	r2, [pc, #180]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a0f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a0fa:	f7fb f9dd 	bl	80054b8 <HAL_GetTick>
 800a0fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a100:	e008      	b.n	800a114 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a102:	f7fb f9d9 	bl	80054b8 <HAL_GetTick>
 800a106:	4602      	mov	r2, r0
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d901      	bls.n	800a114 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800a110:	2303      	movs	r3, #3
 800a112:	e099      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a114:	4b24      	ldr	r3, [pc, #144]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1f0      	bne.n	800a102 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a120:	4b21      	ldr	r3, [pc, #132]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a122:	68da      	ldr	r2, [r3, #12]
 800a124:	4b21      	ldr	r3, [pc, #132]	; (800a1ac <HAL_RCC_OscConfig+0x77c>)
 800a126:	4013      	ands	r3, r2
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a130:	3a01      	subs	r2, #1
 800a132:	0112      	lsls	r2, r2, #4
 800a134:	4311      	orrs	r1, r2
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a13a:	0212      	lsls	r2, r2, #8
 800a13c:	4311      	orrs	r1, r2
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a142:	0852      	lsrs	r2, r2, #1
 800a144:	3a01      	subs	r2, #1
 800a146:	0552      	lsls	r2, r2, #21
 800a148:	4311      	orrs	r1, r2
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a14e:	0852      	lsrs	r2, r2, #1
 800a150:	3a01      	subs	r2, #1
 800a152:	0652      	lsls	r2, r2, #25
 800a154:	4311      	orrs	r1, r2
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a15a:	06d2      	lsls	r2, r2, #27
 800a15c:	430a      	orrs	r2, r1
 800a15e:	4912      	ldr	r1, [pc, #72]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a160:	4313      	orrs	r3, r2
 800a162:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a164:	4b10      	ldr	r3, [pc, #64]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a0f      	ldr	r2, [pc, #60]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a16a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a16e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a170:	4b0d      	ldr	r3, [pc, #52]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	4a0c      	ldr	r2, [pc, #48]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a17a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a17c:	f7fb f99c 	bl	80054b8 <HAL_GetTick>
 800a180:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a182:	e008      	b.n	800a196 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a184:	f7fb f998 	bl	80054b8 <HAL_GetTick>
 800a188:	4602      	mov	r2, r0
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d901      	bls.n	800a196 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e058      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a196:	4b04      	ldr	r3, [pc, #16]	; (800a1a8 <HAL_RCC_OscConfig+0x778>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d0f0      	beq.n	800a184 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a1a2:	e050      	b.n	800a246 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e04f      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
 800a1a8:	40021000 	.word	0x40021000
 800a1ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1b0:	4b27      	ldr	r3, [pc, #156]	; (800a250 <HAL_RCC_OscConfig+0x820>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d144      	bne.n	800a246 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a1bc:	4b24      	ldr	r3, [pc, #144]	; (800a250 <HAL_RCC_OscConfig+0x820>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a23      	ldr	r2, [pc, #140]	; (800a250 <HAL_RCC_OscConfig+0x820>)
 800a1c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a1c8:	4b21      	ldr	r3, [pc, #132]	; (800a250 <HAL_RCC_OscConfig+0x820>)
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	4a20      	ldr	r2, [pc, #128]	; (800a250 <HAL_RCC_OscConfig+0x820>)
 800a1ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a1d4:	f7fb f970 	bl	80054b8 <HAL_GetTick>
 800a1d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1da:	e008      	b.n	800a1ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1dc:	f7fb f96c 	bl	80054b8 <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d901      	bls.n	800a1ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e02c      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1ee:	4b18      	ldr	r3, [pc, #96]	; (800a250 <HAL_RCC_OscConfig+0x820>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d0f0      	beq.n	800a1dc <HAL_RCC_OscConfig+0x7ac>
 800a1fa:	e024      	b.n	800a246 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	2b0c      	cmp	r3, #12
 800a200:	d01f      	beq.n	800a242 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a202:	4b13      	ldr	r3, [pc, #76]	; (800a250 <HAL_RCC_OscConfig+0x820>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a12      	ldr	r2, [pc, #72]	; (800a250 <HAL_RCC_OscConfig+0x820>)
 800a208:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a20c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a20e:	f7fb f953 	bl	80054b8 <HAL_GetTick>
 800a212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a214:	e008      	b.n	800a228 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a216:	f7fb f94f 	bl	80054b8 <HAL_GetTick>
 800a21a:	4602      	mov	r2, r0
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	2b02      	cmp	r3, #2
 800a222:	d901      	bls.n	800a228 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	e00f      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a228:	4b09      	ldr	r3, [pc, #36]	; (800a250 <HAL_RCC_OscConfig+0x820>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1f0      	bne.n	800a216 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800a234:	4b06      	ldr	r3, [pc, #24]	; (800a250 <HAL_RCC_OscConfig+0x820>)
 800a236:	68da      	ldr	r2, [r3, #12]
 800a238:	4905      	ldr	r1, [pc, #20]	; (800a250 <HAL_RCC_OscConfig+0x820>)
 800a23a:	4b06      	ldr	r3, [pc, #24]	; (800a254 <HAL_RCC_OscConfig+0x824>)
 800a23c:	4013      	ands	r3, r2
 800a23e:	60cb      	str	r3, [r1, #12]
 800a240:	e001      	b.n	800a246 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e000      	b.n	800a248 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3720      	adds	r7, #32
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	40021000 	.word	0x40021000
 800a254:	feeefffc 	.word	0xfeeefffc

0800a258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	e0e7      	b.n	800a43c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a26c:	4b75      	ldr	r3, [pc, #468]	; (800a444 <HAL_RCC_ClockConfig+0x1ec>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0307 	and.w	r3, r3, #7
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	429a      	cmp	r2, r3
 800a278:	d910      	bls.n	800a29c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a27a:	4b72      	ldr	r3, [pc, #456]	; (800a444 <HAL_RCC_ClockConfig+0x1ec>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f023 0207 	bic.w	r2, r3, #7
 800a282:	4970      	ldr	r1, [pc, #448]	; (800a444 <HAL_RCC_ClockConfig+0x1ec>)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	4313      	orrs	r3, r2
 800a288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a28a:	4b6e      	ldr	r3, [pc, #440]	; (800a444 <HAL_RCC_ClockConfig+0x1ec>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 0307 	and.w	r3, r3, #7
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	429a      	cmp	r2, r3
 800a296:	d001      	beq.n	800a29c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e0cf      	b.n	800a43c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 0302 	and.w	r3, r3, #2
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d010      	beq.n	800a2ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	4b66      	ldr	r3, [pc, #408]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d908      	bls.n	800a2ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2b8:	4b63      	ldr	r3, [pc, #396]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	4960      	ldr	r1, [pc, #384]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d04c      	beq.n	800a370 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	d107      	bne.n	800a2ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a2de:	4b5a      	ldr	r3, [pc, #360]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d121      	bne.n	800a32e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e0a6      	b.n	800a43c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d107      	bne.n	800a306 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a2f6:	4b54      	ldr	r3, [pc, #336]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d115      	bne.n	800a32e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e09a      	b.n	800a43c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d107      	bne.n	800a31e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a30e:	4b4e      	ldr	r3, [pc, #312]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f003 0302 	and.w	r3, r3, #2
 800a316:	2b00      	cmp	r3, #0
 800a318:	d109      	bne.n	800a32e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e08e      	b.n	800a43c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a31e:	4b4a      	ldr	r3, [pc, #296]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e086      	b.n	800a43c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a32e:	4b46      	ldr	r3, [pc, #280]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	f023 0203 	bic.w	r2, r3, #3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	4943      	ldr	r1, [pc, #268]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a340:	f7fb f8ba 	bl	80054b8 <HAL_GetTick>
 800a344:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a346:	e00a      	b.n	800a35e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a348:	f7fb f8b6 	bl	80054b8 <HAL_GetTick>
 800a34c:	4602      	mov	r2, r0
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	f241 3288 	movw	r2, #5000	; 0x1388
 800a356:	4293      	cmp	r3, r2
 800a358:	d901      	bls.n	800a35e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a35a:	2303      	movs	r3, #3
 800a35c:	e06e      	b.n	800a43c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a35e:	4b3a      	ldr	r3, [pc, #232]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	f003 020c 	and.w	r2, r3, #12
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d1eb      	bne.n	800a348 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 0302 	and.w	r3, r3, #2
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d010      	beq.n	800a39e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	689a      	ldr	r2, [r3, #8]
 800a380:	4b31      	ldr	r3, [pc, #196]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a388:	429a      	cmp	r2, r3
 800a38a:	d208      	bcs.n	800a39e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a38c:	4b2e      	ldr	r3, [pc, #184]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	492b      	ldr	r1, [pc, #172]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a39a:	4313      	orrs	r3, r2
 800a39c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a39e:	4b29      	ldr	r3, [pc, #164]	; (800a444 <HAL_RCC_ClockConfig+0x1ec>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 0307 	and.w	r3, r3, #7
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d210      	bcs.n	800a3ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3ac:	4b25      	ldr	r3, [pc, #148]	; (800a444 <HAL_RCC_ClockConfig+0x1ec>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f023 0207 	bic.w	r2, r3, #7
 800a3b4:	4923      	ldr	r1, [pc, #140]	; (800a444 <HAL_RCC_ClockConfig+0x1ec>)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3bc:	4b21      	ldr	r3, [pc, #132]	; (800a444 <HAL_RCC_ClockConfig+0x1ec>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 0307 	and.w	r3, r3, #7
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d001      	beq.n	800a3ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e036      	b.n	800a43c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f003 0304 	and.w	r3, r3, #4
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d008      	beq.n	800a3ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a3da:	4b1b      	ldr	r3, [pc, #108]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	4918      	ldr	r1, [pc, #96]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0308 	and.w	r3, r3, #8
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d009      	beq.n	800a40c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a3f8:	4b13      	ldr	r3, [pc, #76]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	00db      	lsls	r3, r3, #3
 800a406:	4910      	ldr	r1, [pc, #64]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a408:	4313      	orrs	r3, r2
 800a40a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a40c:	f000 f824 	bl	800a458 <HAL_RCC_GetSysClockFreq>
 800a410:	4602      	mov	r2, r0
 800a412:	4b0d      	ldr	r3, [pc, #52]	; (800a448 <HAL_RCC_ClockConfig+0x1f0>)
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	091b      	lsrs	r3, r3, #4
 800a418:	f003 030f 	and.w	r3, r3, #15
 800a41c:	490b      	ldr	r1, [pc, #44]	; (800a44c <HAL_RCC_ClockConfig+0x1f4>)
 800a41e:	5ccb      	ldrb	r3, [r1, r3]
 800a420:	f003 031f 	and.w	r3, r3, #31
 800a424:	fa22 f303 	lsr.w	r3, r2, r3
 800a428:	4a09      	ldr	r2, [pc, #36]	; (800a450 <HAL_RCC_ClockConfig+0x1f8>)
 800a42a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a42c:	4b09      	ldr	r3, [pc, #36]	; (800a454 <HAL_RCC_ClockConfig+0x1fc>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4618      	mov	r0, r3
 800a432:	f7fa fff1 	bl	8005418 <HAL_InitTick>
 800a436:	4603      	mov	r3, r0
 800a438:	72fb      	strb	r3, [r7, #11]

  return status;
 800a43a:	7afb      	ldrb	r3, [r7, #11]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	40022000 	.word	0x40022000
 800a448:	40021000 	.word	0x40021000
 800a44c:	0801ae48 	.word	0x0801ae48
 800a450:	20000020 	.word	0x20000020
 800a454:	20000024 	.word	0x20000024

0800a458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a458:	b480      	push	{r7}
 800a45a:	b089      	sub	sp, #36	; 0x24
 800a45c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a45e:	2300      	movs	r3, #0
 800a460:	61fb      	str	r3, [r7, #28]
 800a462:	2300      	movs	r3, #0
 800a464:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a466:	4b3e      	ldr	r3, [pc, #248]	; (800a560 <HAL_RCC_GetSysClockFreq+0x108>)
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	f003 030c 	and.w	r3, r3, #12
 800a46e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a470:	4b3b      	ldr	r3, [pc, #236]	; (800a560 <HAL_RCC_GetSysClockFreq+0x108>)
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	f003 0303 	and.w	r3, r3, #3
 800a478:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d005      	beq.n	800a48c <HAL_RCC_GetSysClockFreq+0x34>
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	2b0c      	cmp	r3, #12
 800a484:	d121      	bne.n	800a4ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d11e      	bne.n	800a4ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a48c:	4b34      	ldr	r3, [pc, #208]	; (800a560 <HAL_RCC_GetSysClockFreq+0x108>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0308 	and.w	r3, r3, #8
 800a494:	2b00      	cmp	r3, #0
 800a496:	d107      	bne.n	800a4a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a498:	4b31      	ldr	r3, [pc, #196]	; (800a560 <HAL_RCC_GetSysClockFreq+0x108>)
 800a49a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a49e:	0a1b      	lsrs	r3, r3, #8
 800a4a0:	f003 030f 	and.w	r3, r3, #15
 800a4a4:	61fb      	str	r3, [r7, #28]
 800a4a6:	e005      	b.n	800a4b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a4a8:	4b2d      	ldr	r3, [pc, #180]	; (800a560 <HAL_RCC_GetSysClockFreq+0x108>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	091b      	lsrs	r3, r3, #4
 800a4ae:	f003 030f 	and.w	r3, r3, #15
 800a4b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a4b4:	4a2b      	ldr	r2, [pc, #172]	; (800a564 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d10d      	bne.n	800a4e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a4c8:	e00a      	b.n	800a4e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	2b04      	cmp	r3, #4
 800a4ce:	d102      	bne.n	800a4d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a4d0:	4b25      	ldr	r3, [pc, #148]	; (800a568 <HAL_RCC_GetSysClockFreq+0x110>)
 800a4d2:	61bb      	str	r3, [r7, #24]
 800a4d4:	e004      	b.n	800a4e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	2b08      	cmp	r3, #8
 800a4da:	d101      	bne.n	800a4e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a4dc:	4b23      	ldr	r3, [pc, #140]	; (800a56c <HAL_RCC_GetSysClockFreq+0x114>)
 800a4de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	2b0c      	cmp	r3, #12
 800a4e4:	d134      	bne.n	800a550 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a4e6:	4b1e      	ldr	r3, [pc, #120]	; (800a560 <HAL_RCC_GetSysClockFreq+0x108>)
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	f003 0303 	and.w	r3, r3, #3
 800a4ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d003      	beq.n	800a4fe <HAL_RCC_GetSysClockFreq+0xa6>
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2b03      	cmp	r3, #3
 800a4fa:	d003      	beq.n	800a504 <HAL_RCC_GetSysClockFreq+0xac>
 800a4fc:	e005      	b.n	800a50a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a4fe:	4b1a      	ldr	r3, [pc, #104]	; (800a568 <HAL_RCC_GetSysClockFreq+0x110>)
 800a500:	617b      	str	r3, [r7, #20]
      break;
 800a502:	e005      	b.n	800a510 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a504:	4b19      	ldr	r3, [pc, #100]	; (800a56c <HAL_RCC_GetSysClockFreq+0x114>)
 800a506:	617b      	str	r3, [r7, #20]
      break;
 800a508:	e002      	b.n	800a510 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	617b      	str	r3, [r7, #20]
      break;
 800a50e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a510:	4b13      	ldr	r3, [pc, #76]	; (800a560 <HAL_RCC_GetSysClockFreq+0x108>)
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	091b      	lsrs	r3, r3, #4
 800a516:	f003 0307 	and.w	r3, r3, #7
 800a51a:	3301      	adds	r3, #1
 800a51c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a51e:	4b10      	ldr	r3, [pc, #64]	; (800a560 <HAL_RCC_GetSysClockFreq+0x108>)
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	0a1b      	lsrs	r3, r3, #8
 800a524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	fb03 f202 	mul.w	r2, r3, r2
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	fbb2 f3f3 	udiv	r3, r2, r3
 800a534:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a536:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <HAL_RCC_GetSysClockFreq+0x108>)
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	0e5b      	lsrs	r3, r3, #25
 800a53c:	f003 0303 	and.w	r3, r3, #3
 800a540:	3301      	adds	r3, #1
 800a542:	005b      	lsls	r3, r3, #1
 800a544:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a54e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a550:	69bb      	ldr	r3, [r7, #24]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3724      	adds	r7, #36	; 0x24
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	40021000 	.word	0x40021000
 800a564:	0801ae60 	.word	0x0801ae60
 800a568:	00f42400 	.word	0x00f42400
 800a56c:	007a1200 	.word	0x007a1200

0800a570 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a570:	b480      	push	{r7}
 800a572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a574:	4b03      	ldr	r3, [pc, #12]	; (800a584 <HAL_RCC_GetHCLKFreq+0x14>)
 800a576:	681b      	ldr	r3, [r3, #0]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	20000020 	.word	0x20000020

0800a588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a58c:	f7ff fff0 	bl	800a570 <HAL_RCC_GetHCLKFreq>
 800a590:	4602      	mov	r2, r0
 800a592:	4b06      	ldr	r3, [pc, #24]	; (800a5ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	0a1b      	lsrs	r3, r3, #8
 800a598:	f003 0307 	and.w	r3, r3, #7
 800a59c:	4904      	ldr	r1, [pc, #16]	; (800a5b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a59e:	5ccb      	ldrb	r3, [r1, r3]
 800a5a0:	f003 031f 	and.w	r3, r3, #31
 800a5a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	40021000 	.word	0x40021000
 800a5b0:	0801ae58 	.word	0x0801ae58

0800a5b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a5b8:	f7ff ffda 	bl	800a570 <HAL_RCC_GetHCLKFreq>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	4b06      	ldr	r3, [pc, #24]	; (800a5d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	0adb      	lsrs	r3, r3, #11
 800a5c4:	f003 0307 	and.w	r3, r3, #7
 800a5c8:	4904      	ldr	r1, [pc, #16]	; (800a5dc <HAL_RCC_GetPCLK2Freq+0x28>)
 800a5ca:	5ccb      	ldrb	r3, [r1, r3]
 800a5cc:	f003 031f 	and.w	r3, r3, #31
 800a5d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	40021000 	.word	0x40021000
 800a5dc:	0801ae58 	.word	0x0801ae58

0800a5e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a5ec:	4b2a      	ldr	r3, [pc, #168]	; (800a698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a5ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d003      	beq.n	800a600 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a5f8:	f7ff f9a6 	bl	8009948 <HAL_PWREx_GetVoltageRange>
 800a5fc:	6178      	str	r0, [r7, #20]
 800a5fe:	e014      	b.n	800a62a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a600:	4b25      	ldr	r3, [pc, #148]	; (800a698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a604:	4a24      	ldr	r2, [pc, #144]	; (800a698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a60a:	6593      	str	r3, [r2, #88]	; 0x58
 800a60c:	4b22      	ldr	r3, [pc, #136]	; (800a698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a614:	60fb      	str	r3, [r7, #12]
 800a616:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a618:	f7ff f996 	bl	8009948 <HAL_PWREx_GetVoltageRange>
 800a61c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a61e:	4b1e      	ldr	r3, [pc, #120]	; (800a698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a622:	4a1d      	ldr	r2, [pc, #116]	; (800a698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a628:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a630:	d10b      	bne.n	800a64a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b80      	cmp	r3, #128	; 0x80
 800a636:	d919      	bls.n	800a66c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2ba0      	cmp	r3, #160	; 0xa0
 800a63c:	d902      	bls.n	800a644 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a63e:	2302      	movs	r3, #2
 800a640:	613b      	str	r3, [r7, #16]
 800a642:	e013      	b.n	800a66c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a644:	2301      	movs	r3, #1
 800a646:	613b      	str	r3, [r7, #16]
 800a648:	e010      	b.n	800a66c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b80      	cmp	r3, #128	; 0x80
 800a64e:	d902      	bls.n	800a656 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a650:	2303      	movs	r3, #3
 800a652:	613b      	str	r3, [r7, #16]
 800a654:	e00a      	b.n	800a66c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b80      	cmp	r3, #128	; 0x80
 800a65a:	d102      	bne.n	800a662 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a65c:	2302      	movs	r3, #2
 800a65e:	613b      	str	r3, [r7, #16]
 800a660:	e004      	b.n	800a66c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b70      	cmp	r3, #112	; 0x70
 800a666:	d101      	bne.n	800a66c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a668:	2301      	movs	r3, #1
 800a66a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a66c:	4b0b      	ldr	r3, [pc, #44]	; (800a69c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f023 0207 	bic.w	r2, r3, #7
 800a674:	4909      	ldr	r1, [pc, #36]	; (800a69c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	4313      	orrs	r3, r2
 800a67a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a67c:	4b07      	ldr	r3, [pc, #28]	; (800a69c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f003 0307 	and.w	r3, r3, #7
 800a684:	693a      	ldr	r2, [r7, #16]
 800a686:	429a      	cmp	r2, r3
 800a688:	d001      	beq.n	800a68e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e000      	b.n	800a690 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3718      	adds	r7, #24
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	40021000 	.word	0x40021000
 800a69c:	40022000 	.word	0x40022000

0800a6a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d031      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a6c4:	d01a      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a6c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a6ca:	d814      	bhi.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d009      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a6d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6d4:	d10f      	bne.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800a6d6:	4b5d      	ldr	r3, [pc, #372]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	4a5c      	ldr	r2, [pc, #368]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a6dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a6e2:	e00c      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 f9ce 	bl	800aa8c <RCCEx_PLLSAI1_Config>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a6f4:	e003      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	74fb      	strb	r3, [r7, #19]
      break;
 800a6fa:	e000      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800a6fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6fe:	7cfb      	ldrb	r3, [r7, #19]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10b      	bne.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a704:	4b51      	ldr	r3, [pc, #324]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a70a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a712:	494e      	ldr	r1, [pc, #312]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a714:	4313      	orrs	r3, r2
 800a716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a71a:	e001      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a71c:	7cfb      	ldrb	r3, [r7, #19]
 800a71e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 809e 	beq.w	800a86a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a72e:	2300      	movs	r3, #0
 800a730:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a732:	4b46      	ldr	r3, [pc, #280]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d101      	bne.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800a73e:	2301      	movs	r3, #1
 800a740:	e000      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800a742:	2300      	movs	r3, #0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00d      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a748:	4b40      	ldr	r3, [pc, #256]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a74a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a74c:	4a3f      	ldr	r2, [pc, #252]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a74e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a752:	6593      	str	r3, [r2, #88]	; 0x58
 800a754:	4b3d      	ldr	r3, [pc, #244]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a75c:	60bb      	str	r3, [r7, #8]
 800a75e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a760:	2301      	movs	r3, #1
 800a762:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a764:	4b3a      	ldr	r3, [pc, #232]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a39      	ldr	r2, [pc, #228]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a76a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a76e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a770:	f7fa fea2 	bl	80054b8 <HAL_GetTick>
 800a774:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a776:	e009      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a778:	f7fa fe9e 	bl	80054b8 <HAL_GetTick>
 800a77c:	4602      	mov	r2, r0
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	2b02      	cmp	r3, #2
 800a784:	d902      	bls.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	74fb      	strb	r3, [r7, #19]
        break;
 800a78a:	e005      	b.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a78c:	4b30      	ldr	r3, [pc, #192]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a794:	2b00      	cmp	r3, #0
 800a796:	d0ef      	beq.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800a798:	7cfb      	ldrb	r3, [r7, #19]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d15a      	bne.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a79e:	4b2b      	ldr	r3, [pc, #172]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a7a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d01e      	beq.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d019      	beq.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a7ba:	4b24      	ldr	r3, [pc, #144]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a7bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a7c6:	4b21      	ldr	r3, [pc, #132]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a7c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7cc:	4a1f      	ldr	r2, [pc, #124]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a7ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a7d6:	4b1d      	ldr	r3, [pc, #116]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a7d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7dc:	4a1b      	ldr	r2, [pc, #108]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a7de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a7e6:	4a19      	ldr	r2, [pc, #100]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	f003 0301 	and.w	r3, r3, #1
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d016      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7f8:	f7fa fe5e 	bl	80054b8 <HAL_GetTick>
 800a7fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a7fe:	e00b      	b.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a800:	f7fa fe5a 	bl	80054b8 <HAL_GetTick>
 800a804:	4602      	mov	r2, r0
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a80e:	4293      	cmp	r3, r2
 800a810:	d902      	bls.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800a812:	2303      	movs	r3, #3
 800a814:	74fb      	strb	r3, [r7, #19]
            break;
 800a816:	e006      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a818:	4b0c      	ldr	r3, [pc, #48]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a81e:	f003 0302 	and.w	r3, r3, #2
 800a822:	2b00      	cmp	r3, #0
 800a824:	d0ec      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800a826:	7cfb      	ldrb	r3, [r7, #19]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10b      	bne.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a82c:	4b07      	ldr	r3, [pc, #28]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a832:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a83a:	4904      	ldr	r1, [pc, #16]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a83c:	4313      	orrs	r3, r2
 800a83e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a842:	e009      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a844:	7cfb      	ldrb	r3, [r7, #19]
 800a846:	74bb      	strb	r3, [r7, #18]
 800a848:	e006      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800a84a:	bf00      	nop
 800a84c:	40021000 	.word	0x40021000
 800a850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a854:	7cfb      	ldrb	r3, [r7, #19]
 800a856:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a858:	7c7b      	ldrb	r3, [r7, #17]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d105      	bne.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a85e:	4b8a      	ldr	r3, [pc, #552]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a862:	4a89      	ldr	r2, [pc, #548]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a868:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00a      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a876:	4b84      	ldr	r3, [pc, #528]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a87c:	f023 0203 	bic.w	r2, r3, #3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6a1b      	ldr	r3, [r3, #32]
 800a884:	4980      	ldr	r1, [pc, #512]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a886:	4313      	orrs	r3, r2
 800a888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 0302 	and.w	r3, r3, #2
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00a      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a898:	4b7b      	ldr	r3, [pc, #492]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a89e:	f023 020c 	bic.w	r2, r3, #12
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	4978      	ldr	r1, [pc, #480]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0320 	and.w	r3, r3, #32
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a8ba:	4b73      	ldr	r3, [pc, #460]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a8bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c8:	496f      	ldr	r1, [pc, #444]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00a      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8dc:	4b6a      	ldr	r3, [pc, #424]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a8de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8e2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ea:	4967      	ldr	r1, [pc, #412]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00a      	beq.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a8fe:	4b62      	ldr	r3, [pc, #392]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a904:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90c:	495e      	ldr	r1, [pc, #376]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a90e:	4313      	orrs	r3, r2
 800a910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00a      	beq.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a920:	4b59      	ldr	r3, [pc, #356]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a926:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92e:	4956      	ldr	r1, [pc, #344]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a930:	4313      	orrs	r3, r2
 800a932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00a      	beq.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a942:	4b51      	ldr	r3, [pc, #324]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a950:	494d      	ldr	r1, [pc, #308]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a952:	4313      	orrs	r3, r2
 800a954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a960:	2b00      	cmp	r3, #0
 800a962:	d028      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a964:	4b48      	ldr	r3, [pc, #288]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a96a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a972:	4945      	ldr	r1, [pc, #276]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a974:	4313      	orrs	r3, r2
 800a976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a982:	d106      	bne.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a984:	4b40      	ldr	r3, [pc, #256]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	4a3f      	ldr	r2, [pc, #252]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a98a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a98e:	60d3      	str	r3, [r2, #12]
 800a990:	e011      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a99a:	d10c      	bne.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	3304      	adds	r3, #4
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 f872 	bl	800aa8c <RCCEx_PLLSAI1_Config>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a9ac:	7cfb      	ldrb	r3, [r7, #19]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800a9b2:	7cfb      	ldrb	r3, [r7, #19]
 800a9b4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d028      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a9c2:	4b31      	ldr	r3, [pc, #196]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a9c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9d0:	492d      	ldr	r1, [pc, #180]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9e0:	d106      	bne.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a9e2:	4b29      	ldr	r3, [pc, #164]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	4a28      	ldr	r2, [pc, #160]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a9e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9ec:	60d3      	str	r3, [r2, #12]
 800a9ee:	e011      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9f8:	d10c      	bne.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	2101      	movs	r1, #1
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 f843 	bl	800aa8c <RCCEx_PLLSAI1_Config>
 800aa06:	4603      	mov	r3, r0
 800aa08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800aa0a:	7cfb      	ldrb	r3, [r7, #19]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800aa10:	7cfb      	ldrb	r3, [r7, #19]
 800aa12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d01c      	beq.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aa20:	4b19      	ldr	r3, [pc, #100]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aa22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa2e:	4916      	ldr	r1, [pc, #88]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aa30:	4313      	orrs	r3, r2
 800aa32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa3e:	d10c      	bne.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	3304      	adds	r3, #4
 800aa44:	2102      	movs	r1, #2
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 f820 	bl	800aa8c <RCCEx_PLLSAI1_Config>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800aa50:	7cfb      	ldrb	r3, [r7, #19]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800aa56:	7cfb      	ldrb	r3, [r7, #19]
 800aa58:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00a      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800aa66:	4b08      	ldr	r3, [pc, #32]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aa68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa6c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa74:	4904      	ldr	r1, [pc, #16]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aa76:	4313      	orrs	r3, r2
 800aa78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800aa7c:	7cbb      	ldrb	r3, [r7, #18]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3718      	adds	r7, #24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	40021000 	.word	0x40021000

0800aa8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa96:	2300      	movs	r3, #0
 800aa98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800aa9a:	4b74      	ldr	r3, [pc, #464]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	f003 0303 	and.w	r3, r3, #3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d018      	beq.n	800aad8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800aaa6:	4b71      	ldr	r3, [pc, #452]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	f003 0203 	and.w	r2, r3, #3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d10d      	bne.n	800aad2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
       ||
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d009      	beq.n	800aad2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800aabe:	4b6b      	ldr	r3, [pc, #428]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	091b      	lsrs	r3, r3, #4
 800aac4:	f003 0307 	and.w	r3, r3, #7
 800aac8:	1c5a      	adds	r2, r3, #1
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
       ||
 800aace:	429a      	cmp	r2, r3
 800aad0:	d047      	beq.n	800ab62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	73fb      	strb	r3, [r7, #15]
 800aad6:	e044      	b.n	800ab62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b03      	cmp	r3, #3
 800aade:	d018      	beq.n	800ab12 <RCCEx_PLLSAI1_Config+0x86>
 800aae0:	2b03      	cmp	r3, #3
 800aae2:	d825      	bhi.n	800ab30 <RCCEx_PLLSAI1_Config+0xa4>
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d002      	beq.n	800aaee <RCCEx_PLLSAI1_Config+0x62>
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d009      	beq.n	800ab00 <RCCEx_PLLSAI1_Config+0x74>
 800aaec:	e020      	b.n	800ab30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800aaee:	4b5f      	ldr	r3, [pc, #380]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 0302 	and.w	r3, r3, #2
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d11d      	bne.n	800ab36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aafe:	e01a      	b.n	800ab36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ab00:	4b5a      	ldr	r3, [pc, #360]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d116      	bne.n	800ab3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab10:	e013      	b.n	800ab3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ab12:	4b56      	ldr	r3, [pc, #344]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10f      	bne.n	800ab3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ab1e:	4b53      	ldr	r3, [pc, #332]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d109      	bne.n	800ab3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ab2e:	e006      	b.n	800ab3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	73fb      	strb	r3, [r7, #15]
      break;
 800ab34:	e004      	b.n	800ab40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ab36:	bf00      	nop
 800ab38:	e002      	b.n	800ab40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ab3a:	bf00      	nop
 800ab3c:	e000      	b.n	800ab40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ab3e:	bf00      	nop
    }

    if(status == HAL_OK)
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d10d      	bne.n	800ab62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ab46:	4b49      	ldr	r3, [pc, #292]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6819      	ldr	r1, [r3, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	3b01      	subs	r3, #1
 800ab58:	011b      	lsls	r3, r3, #4
 800ab5a:	430b      	orrs	r3, r1
 800ab5c:	4943      	ldr	r1, [pc, #268]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ab62:	7bfb      	ldrb	r3, [r7, #15]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d17c      	bne.n	800ac62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ab68:	4b40      	ldr	r3, [pc, #256]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a3f      	ldr	r2, [pc, #252]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ab72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab74:	f7fa fca0 	bl	80054b8 <HAL_GetTick>
 800ab78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ab7a:	e009      	b.n	800ab90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ab7c:	f7fa fc9c 	bl	80054b8 <HAL_GetTick>
 800ab80:	4602      	mov	r2, r0
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d902      	bls.n	800ab90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	73fb      	strb	r3, [r7, #15]
        break;
 800ab8e:	e005      	b.n	800ab9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ab90:	4b36      	ldr	r3, [pc, #216]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1ef      	bne.n	800ab7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d15f      	bne.n	800ac62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d110      	bne.n	800abca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aba8:	4b30      	ldr	r3, [pc, #192]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800abb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	6892      	ldr	r2, [r2, #8]
 800abb8:	0211      	lsls	r1, r2, #8
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	68d2      	ldr	r2, [r2, #12]
 800abbe:	06d2      	lsls	r2, r2, #27
 800abc0:	430a      	orrs	r2, r1
 800abc2:	492a      	ldr	r1, [pc, #168]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	610b      	str	r3, [r1, #16]
 800abc8:	e027      	b.n	800ac1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d112      	bne.n	800abf6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800abd0:	4b26      	ldr	r3, [pc, #152]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800abd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	6892      	ldr	r2, [r2, #8]
 800abe0:	0211      	lsls	r1, r2, #8
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	6912      	ldr	r2, [r2, #16]
 800abe6:	0852      	lsrs	r2, r2, #1
 800abe8:	3a01      	subs	r2, #1
 800abea:	0552      	lsls	r2, r2, #21
 800abec:	430a      	orrs	r2, r1
 800abee:	491f      	ldr	r1, [pc, #124]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800abf0:	4313      	orrs	r3, r2
 800abf2:	610b      	str	r3, [r1, #16]
 800abf4:	e011      	b.n	800ac1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800abf6:	4b1d      	ldr	r3, [pc, #116]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800abfe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	6892      	ldr	r2, [r2, #8]
 800ac06:	0211      	lsls	r1, r2, #8
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	6952      	ldr	r2, [r2, #20]
 800ac0c:	0852      	lsrs	r2, r2, #1
 800ac0e:	3a01      	subs	r2, #1
 800ac10:	0652      	lsls	r2, r2, #25
 800ac12:	430a      	orrs	r2, r1
 800ac14:	4915      	ldr	r1, [pc, #84]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ac16:	4313      	orrs	r3, r2
 800ac18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ac1a:	4b14      	ldr	r3, [pc, #80]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a13      	ldr	r2, [pc, #76]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ac20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ac24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac26:	f7fa fc47 	bl	80054b8 <HAL_GetTick>
 800ac2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ac2c:	e009      	b.n	800ac42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ac2e:	f7fa fc43 	bl	80054b8 <HAL_GetTick>
 800ac32:	4602      	mov	r2, r0
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d902      	bls.n	800ac42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	73fb      	strb	r3, [r7, #15]
          break;
 800ac40:	e005      	b.n	800ac4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ac42:	4b0a      	ldr	r3, [pc, #40]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d0ef      	beq.n	800ac2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800ac4e:	7bfb      	ldrb	r3, [r7, #15]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d106      	bne.n	800ac62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800ac54:	4b05      	ldr	r3, [pc, #20]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ac56:	691a      	ldr	r2, [r3, #16]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	699b      	ldr	r3, [r3, #24]
 800ac5c:	4903      	ldr	r1, [pc, #12]	; (800ac6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800ac62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	40021000 	.word	0x40021000

0800ac70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d101      	bne.n	800ac82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e095      	b.n	800adae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d108      	bne.n	800ac9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac92:	d009      	beq.n	800aca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	61da      	str	r2, [r3, #28]
 800ac9a:	e005      	b.n	800aca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d106      	bne.n	800acc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7f7 faa0 	bl	8002208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2202      	movs	r2, #2
 800accc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ace8:	d902      	bls.n	800acf0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800acea:	2300      	movs	r3, #0
 800acec:	60fb      	str	r3, [r7, #12]
 800acee:	e002      	b.n	800acf6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800acf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acf4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800acfe:	d007      	beq.n	800ad10 <HAL_SPI_Init+0xa0>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ad08:	d002      	beq.n	800ad10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ad20:	431a      	orrs	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	f003 0302 	and.w	r3, r3, #2
 800ad2a:	431a      	orrs	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	f003 0301 	and.w	r3, r3, #1
 800ad34:	431a      	orrs	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	699b      	ldr	r3, [r3, #24]
 800ad3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad3e:	431a      	orrs	r2, r3
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	69db      	ldr	r3, [r3, #28]
 800ad44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad48:	431a      	orrs	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad52:	ea42 0103 	orr.w	r1, r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	430a      	orrs	r2, r1
 800ad64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	699b      	ldr	r3, [r3, #24]
 800ad6a:	0c1b      	lsrs	r3, r3, #16
 800ad6c:	f003 0204 	and.w	r2, r3, #4
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad74:	f003 0310 	and.w	r3, r3, #16
 800ad78:	431a      	orrs	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad7e:	f003 0308 	and.w	r3, r3, #8
 800ad82:	431a      	orrs	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ad8c:	ea42 0103 	orr.w	r1, r2, r3
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	430a      	orrs	r2, r1
 800ad9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b088      	sub	sp, #32
 800adba:	af00      	add	r7, sp, #0
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	60b9      	str	r1, [r7, #8]
 800adc0:	603b      	str	r3, [r7, #0]
 800adc2:	4613      	mov	r3, r2
 800adc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800add0:	2b01      	cmp	r3, #1
 800add2:	d101      	bne.n	800add8 <HAL_SPI_Transmit+0x22>
 800add4:	2302      	movs	r3, #2
 800add6:	e15f      	b.n	800b098 <HAL_SPI_Transmit+0x2e2>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ade0:	f7fa fb6a 	bl	80054b8 <HAL_GetTick>
 800ade4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ade6:	88fb      	ldrh	r3, [r7, #6]
 800ade8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d002      	beq.n	800adfc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800adf6:	2302      	movs	r3, #2
 800adf8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800adfa:	e148      	b.n	800b08e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d002      	beq.n	800ae08 <HAL_SPI_Transmit+0x52>
 800ae02:	88fb      	ldrh	r3, [r7, #6]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d102      	bne.n	800ae0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ae0c:	e13f      	b.n	800b08e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2203      	movs	r2, #3
 800ae12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	88fa      	ldrh	r2, [r7, #6]
 800ae26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	88fa      	ldrh	r2, [r7, #6]
 800ae2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2200      	movs	r2, #0
 800ae48:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae58:	d10f      	bne.n	800ae7a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae84:	2b40      	cmp	r3, #64	; 0x40
 800ae86:	d007      	beq.n	800ae98 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aea0:	d94f      	bls.n	800af42 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d002      	beq.n	800aeb0 <HAL_SPI_Transmit+0xfa>
 800aeaa:	8afb      	ldrh	r3, [r7, #22]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d142      	bne.n	800af36 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb4:	881a      	ldrh	r2, [r3, #0]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec0:	1c9a      	adds	r2, r3, #2
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	3b01      	subs	r3, #1
 800aece:	b29a      	uxth	r2, r3
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800aed4:	e02f      	b.n	800af36 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	f003 0302 	and.w	r3, r3, #2
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d112      	bne.n	800af0a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee8:	881a      	ldrh	r2, [r3, #0]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef4:	1c9a      	adds	r2, r3, #2
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aefe:	b29b      	uxth	r3, r3
 800af00:	3b01      	subs	r3, #1
 800af02:	b29a      	uxth	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	87da      	strh	r2, [r3, #62]	; 0x3e
 800af08:	e015      	b.n	800af36 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af0a:	f7fa fad5 	bl	80054b8 <HAL_GetTick>
 800af0e:	4602      	mov	r2, r0
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	683a      	ldr	r2, [r7, #0]
 800af16:	429a      	cmp	r2, r3
 800af18:	d803      	bhi.n	800af22 <HAL_SPI_Transmit+0x16c>
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af20:	d102      	bne.n	800af28 <HAL_SPI_Transmit+0x172>
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d106      	bne.n	800af36 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800af28:	2303      	movs	r3, #3
 800af2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800af34:	e0ab      	b.n	800b08e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1ca      	bne.n	800aed6 <HAL_SPI_Transmit+0x120>
 800af40:	e080      	b.n	800b044 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d002      	beq.n	800af50 <HAL_SPI_Transmit+0x19a>
 800af4a:	8afb      	ldrh	r3, [r7, #22]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d174      	bne.n	800b03a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af54:	b29b      	uxth	r3, r3
 800af56:	2b01      	cmp	r3, #1
 800af58:	d912      	bls.n	800af80 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af5e:	881a      	ldrh	r2, [r3, #0]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af6a:	1c9a      	adds	r2, r3, #2
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af74:	b29b      	uxth	r3, r3
 800af76:	3b02      	subs	r3, #2
 800af78:	b29a      	uxth	r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800af7e:	e05c      	b.n	800b03a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	330c      	adds	r3, #12
 800af8a:	7812      	ldrb	r2, [r2, #0]
 800af8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af92:	1c5a      	adds	r2, r3, #1
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	3b01      	subs	r3, #1
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800afa6:	e048      	b.n	800b03a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	f003 0302 	and.w	r3, r3, #2
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d12b      	bne.n	800b00e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afba:	b29b      	uxth	r3, r3
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d912      	bls.n	800afe6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc4:	881a      	ldrh	r2, [r3, #0]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd0:	1c9a      	adds	r2, r3, #2
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afda:	b29b      	uxth	r3, r3
 800afdc:	3b02      	subs	r3, #2
 800afde:	b29a      	uxth	r2, r3
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800afe4:	e029      	b.n	800b03a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	330c      	adds	r3, #12
 800aff0:	7812      	ldrb	r2, [r2, #0]
 800aff2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff8:	1c5a      	adds	r2, r3, #1
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b002:	b29b      	uxth	r3, r3
 800b004:	3b01      	subs	r3, #1
 800b006:	b29a      	uxth	r2, r3
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b00c:	e015      	b.n	800b03a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b00e:	f7fa fa53 	bl	80054b8 <HAL_GetTick>
 800b012:	4602      	mov	r2, r0
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	683a      	ldr	r2, [r7, #0]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d803      	bhi.n	800b026 <HAL_SPI_Transmit+0x270>
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b024:	d102      	bne.n	800b02c <HAL_SPI_Transmit+0x276>
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d106      	bne.n	800b03a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800b02c:	2303      	movs	r3, #3
 800b02e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b038:	e029      	b.n	800b08e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b03e:	b29b      	uxth	r3, r3
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1b1      	bne.n	800afa8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b044:	69ba      	ldr	r2, [r7, #24]
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f000 fcf9 	bl	800ba40 <SPI_EndRxTxTransaction>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d002      	beq.n	800b05a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2220      	movs	r2, #32
 800b058:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10a      	bne.n	800b078 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b062:	2300      	movs	r3, #0
 800b064:	613b      	str	r3, [r7, #16]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	613b      	str	r3, [r7, #16]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	613b      	str	r3, [r7, #16]
 800b076:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	77fb      	strb	r3, [r7, #31]
 800b084:	e003      	b.n	800b08e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2201      	movs	r2, #1
 800b08a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b096:	7ffb      	ldrb	r3, [r7, #31]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3720      	adds	r7, #32
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b088      	sub	sp, #32
 800b0a4:	af02      	add	r7, sp, #8
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	603b      	str	r3, [r7, #0]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d002      	beq.n	800b0c6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b0c4:	e11a      	b.n	800b2fc <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0ce:	d112      	bne.n	800b0f6 <HAL_SPI_Receive+0x56>
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10e      	bne.n	800b0f6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2204      	movs	r2, #4
 800b0dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b0e0:	88fa      	ldrh	r2, [r7, #6]
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	68ba      	ldr	r2, [r7, #8]
 800b0ea:	68b9      	ldr	r1, [r7, #8]
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f000 f90e 	bl	800b30e <HAL_SPI_TransmitReceive>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	e107      	b.n	800b306 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d101      	bne.n	800b104 <HAL_SPI_Receive+0x64>
 800b100:	2302      	movs	r3, #2
 800b102:	e100      	b.n	800b306 <HAL_SPI_Receive+0x266>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b10c:	f7fa f9d4 	bl	80054b8 <HAL_GetTick>
 800b110:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <HAL_SPI_Receive+0x7e>
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d102      	bne.n	800b124 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b122:	e0eb      	b.n	800b2fc <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2204      	movs	r2, #4
 800b128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2200      	movs	r2, #0
 800b130:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	88fa      	ldrh	r2, [r7, #6]
 800b13c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	88fa      	ldrh	r2, [r7, #6]
 800b144:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2200      	movs	r2, #0
 800b14c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2200      	movs	r2, #0
 800b152:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b16e:	d908      	bls.n	800b182 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b17e:	605a      	str	r2, [r3, #4]
 800b180:	e007      	b.n	800b192 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	685a      	ldr	r2, [r3, #4]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b190:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b19a:	d10f      	bne.n	800b1bc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b1ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c6:	2b40      	cmp	r3, #64	; 0x40
 800b1c8:	d007      	beq.n	800b1da <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b1e2:	d86f      	bhi.n	800b2c4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b1e4:	e034      	b.n	800b250 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	f003 0301 	and.w	r3, r3, #1
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d117      	bne.n	800b224 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f103 020c 	add.w	r2, r3, #12
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b200:	7812      	ldrb	r2, [r2, #0]
 800b202:	b2d2      	uxtb	r2, r2
 800b204:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20a:	1c5a      	adds	r2, r3, #1
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b216:	b29b      	uxth	r3, r3
 800b218:	3b01      	subs	r3, #1
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b222:	e015      	b.n	800b250 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b224:	f7fa f948 	bl	80054b8 <HAL_GetTick>
 800b228:	4602      	mov	r2, r0
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	683a      	ldr	r2, [r7, #0]
 800b230:	429a      	cmp	r2, r3
 800b232:	d803      	bhi.n	800b23c <HAL_SPI_Receive+0x19c>
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23a:	d102      	bne.n	800b242 <HAL_SPI_Receive+0x1a2>
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d106      	bne.n	800b250 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800b242:	2303      	movs	r3, #3
 800b244:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2201      	movs	r2, #1
 800b24a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b24e:	e055      	b.n	800b2fc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b256:	b29b      	uxth	r3, r3
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d1c4      	bne.n	800b1e6 <HAL_SPI_Receive+0x146>
 800b25c:	e038      	b.n	800b2d0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	f003 0301 	and.w	r3, r3, #1
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d115      	bne.n	800b298 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68da      	ldr	r2, [r3, #12]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b276:	b292      	uxth	r2, r2
 800b278:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27e:	1c9a      	adds	r2, r3, #2
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	3b01      	subs	r3, #1
 800b28e:	b29a      	uxth	r2, r3
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b296:	e015      	b.n	800b2c4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b298:	f7fa f90e 	bl	80054b8 <HAL_GetTick>
 800b29c:	4602      	mov	r2, r0
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d803      	bhi.n	800b2b0 <HAL_SPI_Receive+0x210>
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ae:	d102      	bne.n	800b2b6 <HAL_SPI_Receive+0x216>
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d106      	bne.n	800b2c4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b2c2:	e01b      	b.n	800b2fc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1c6      	bne.n	800b25e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f000 fb5b 	bl	800b990 <SPI_EndRxTransaction>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2220      	movs	r2, #32
 800b2e4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d002      	beq.n	800b2f4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	75fb      	strb	r3, [r7, #23]
 800b2f2:	e003      	b.n	800b2fc <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b304:	7dfb      	ldrb	r3, [r7, #23]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3718      	adds	r7, #24
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b08a      	sub	sp, #40	; 0x28
 800b312:	af00      	add	r7, sp, #0
 800b314:	60f8      	str	r0, [r7, #12]
 800b316:	60b9      	str	r1, [r7, #8]
 800b318:	607a      	str	r2, [r7, #4]
 800b31a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b31c:	2301      	movs	r3, #1
 800b31e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d101      	bne.n	800b334 <HAL_SPI_TransmitReceive+0x26>
 800b330:	2302      	movs	r3, #2
 800b332:	e20a      	b.n	800b74a <HAL_SPI_TransmitReceive+0x43c>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b33c:	f7fa f8bc 	bl	80054b8 <HAL_GetTick>
 800b340:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b348:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b350:	887b      	ldrh	r3, [r7, #2]
 800b352:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b354:	887b      	ldrh	r3, [r7, #2]
 800b356:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b358:	7efb      	ldrb	r3, [r7, #27]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d00e      	beq.n	800b37c <HAL_SPI_TransmitReceive+0x6e>
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b364:	d106      	bne.n	800b374 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d102      	bne.n	800b374 <HAL_SPI_TransmitReceive+0x66>
 800b36e:	7efb      	ldrb	r3, [r7, #27]
 800b370:	2b04      	cmp	r3, #4
 800b372:	d003      	beq.n	800b37c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b374:	2302      	movs	r3, #2
 800b376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b37a:	e1e0      	b.n	800b73e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d005      	beq.n	800b38e <HAL_SPI_TransmitReceive+0x80>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <HAL_SPI_TransmitReceive+0x80>
 800b388:	887b      	ldrh	r3, [r7, #2]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d103      	bne.n	800b396 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b394:	e1d3      	b.n	800b73e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	2b04      	cmp	r3, #4
 800b3a0:	d003      	beq.n	800b3aa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2205      	movs	r2, #5
 800b3a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	887a      	ldrh	r2, [r7, #2]
 800b3ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	887a      	ldrh	r2, [r7, #2]
 800b3c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	887a      	ldrh	r2, [r7, #2]
 800b3d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	887a      	ldrh	r2, [r7, #2]
 800b3d6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b3ec:	d802      	bhi.n	800b3f4 <HAL_SPI_TransmitReceive+0xe6>
 800b3ee:	8a3b      	ldrh	r3, [r7, #16]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d908      	bls.n	800b406 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	685a      	ldr	r2, [r3, #4]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b402:	605a      	str	r2, [r3, #4]
 800b404:	e007      	b.n	800b416 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b414:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b420:	2b40      	cmp	r3, #64	; 0x40
 800b422:	d007      	beq.n	800b434 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b432:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b43c:	f240 8081 	bls.w	800b542 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d002      	beq.n	800b44e <HAL_SPI_TransmitReceive+0x140>
 800b448:	8a7b      	ldrh	r3, [r7, #18]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d16d      	bne.n	800b52a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b452:	881a      	ldrh	r2, [r3, #0]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45e:	1c9a      	adds	r2, r3, #2
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b468:	b29b      	uxth	r3, r3
 800b46a:	3b01      	subs	r3, #1
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b472:	e05a      	b.n	800b52a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	f003 0302 	and.w	r3, r3, #2
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d11b      	bne.n	800b4ba <HAL_SPI_TransmitReceive+0x1ac>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b486:	b29b      	uxth	r3, r3
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d016      	beq.n	800b4ba <HAL_SPI_TransmitReceive+0x1ac>
 800b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d113      	bne.n	800b4ba <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b496:	881a      	ldrh	r2, [r3, #0]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a2:	1c9a      	adds	r2, r3, #2
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f003 0301 	and.w	r3, r3, #1
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d11c      	bne.n	800b502 <HAL_SPI_TransmitReceive+0x1f4>
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d016      	beq.n	800b502 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68da      	ldr	r2, [r3, #12]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4de:	b292      	uxth	r2, r2
 800b4e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e6:	1c9a      	adds	r2, r3, #2
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b4fe:	2301      	movs	r3, #1
 800b500:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b502:	f7f9 ffd9 	bl	80054b8 <HAL_GetTick>
 800b506:	4602      	mov	r2, r0
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	1ad3      	subs	r3, r2, r3
 800b50c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b50e:	429a      	cmp	r2, r3
 800b510:	d80b      	bhi.n	800b52a <HAL_SPI_TransmitReceive+0x21c>
 800b512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b518:	d007      	beq.n	800b52a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800b51a:	2303      	movs	r3, #3
 800b51c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2201      	movs	r2, #1
 800b524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800b528:	e109      	b.n	800b73e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b52e:	b29b      	uxth	r3, r3
 800b530:	2b00      	cmp	r3, #0
 800b532:	d19f      	bne.n	800b474 <HAL_SPI_TransmitReceive+0x166>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d199      	bne.n	800b474 <HAL_SPI_TransmitReceive+0x166>
 800b540:	e0e3      	b.n	800b70a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d003      	beq.n	800b552 <HAL_SPI_TransmitReceive+0x244>
 800b54a:	8a7b      	ldrh	r3, [r7, #18]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	f040 80cf 	bne.w	800b6f0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b556:	b29b      	uxth	r3, r3
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d912      	bls.n	800b582 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b560:	881a      	ldrh	r2, [r3, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56c:	1c9a      	adds	r2, r3, #2
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b576:	b29b      	uxth	r3, r3
 800b578:	3b02      	subs	r3, #2
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b580:	e0b6      	b.n	800b6f0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	330c      	adds	r3, #12
 800b58c:	7812      	ldrb	r2, [r2, #0]
 800b58e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b594:	1c5a      	adds	r2, r3, #1
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5a8:	e0a2      	b.n	800b6f0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	f003 0302 	and.w	r3, r3, #2
 800b5b4:	2b02      	cmp	r3, #2
 800b5b6:	d134      	bne.n	800b622 <HAL_SPI_TransmitReceive+0x314>
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d02f      	beq.n	800b622 <HAL_SPI_TransmitReceive+0x314>
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d12c      	bne.n	800b622 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d912      	bls.n	800b5f8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d6:	881a      	ldrh	r2, [r3, #0]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e2:	1c9a      	adds	r2, r3, #2
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	3b02      	subs	r3, #2
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b5f6:	e012      	b.n	800b61e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	330c      	adds	r3, #12
 800b602:	7812      	ldrb	r2, [r2, #0]
 800b604:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b614:	b29b      	uxth	r3, r3
 800b616:	3b01      	subs	r3, #1
 800b618:	b29a      	uxth	r2, r3
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	f003 0301 	and.w	r3, r3, #1
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d148      	bne.n	800b6c2 <HAL_SPI_TransmitReceive+0x3b4>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b636:	b29b      	uxth	r3, r3
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d042      	beq.n	800b6c2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b642:	b29b      	uxth	r3, r3
 800b644:	2b01      	cmp	r3, #1
 800b646:	d923      	bls.n	800b690 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68da      	ldr	r2, [r3, #12]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b652:	b292      	uxth	r2, r2
 800b654:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	1c9a      	adds	r2, r3, #2
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b666:	b29b      	uxth	r3, r3
 800b668:	3b02      	subs	r3, #2
 800b66a:	b29a      	uxth	r2, r3
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b678:	b29b      	uxth	r3, r3
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d81f      	bhi.n	800b6be <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	685a      	ldr	r2, [r3, #4]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b68c:	605a      	str	r2, [r3, #4]
 800b68e:	e016      	b.n	800b6be <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f103 020c 	add.w	r2, r3, #12
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69c:	7812      	ldrb	r2, [r2, #0]
 800b69e:	b2d2      	uxtb	r2, r2
 800b6a0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b6c2:	f7f9 fef9 	bl	80054b8 <HAL_GetTick>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	1ad3      	subs	r3, r2, r3
 800b6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d803      	bhi.n	800b6da <HAL_SPI_TransmitReceive+0x3cc>
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d8:	d102      	bne.n	800b6e0 <HAL_SPI_TransmitReceive+0x3d2>
 800b6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d107      	bne.n	800b6f0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800b6ee:	e026      	b.n	800b73e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f47f af57 	bne.w	800b5aa <HAL_SPI_TransmitReceive+0x29c>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b702:	b29b      	uxth	r3, r3
 800b704:	2b00      	cmp	r3, #0
 800b706:	f47f af50 	bne.w	800b5aa <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b70a:	69fa      	ldr	r2, [r7, #28]
 800b70c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f000 f996 	bl	800ba40 <SPI_EndRxTxTransaction>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d005      	beq.n	800b726 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2220      	movs	r2, #32
 800b724:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d003      	beq.n	800b736 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b734:	e003      	b.n	800b73e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2200      	movs	r2, #0
 800b742:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b746:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3728      	adds	r7, #40	; 0x28
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
	...

0800b754 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	603b      	str	r3, [r7, #0]
 800b760:	4613      	mov	r3, r2
 800b762:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b764:	f7f9 fea8 	bl	80054b8 <HAL_GetTick>
 800b768:	4602      	mov	r2, r0
 800b76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76c:	1a9b      	subs	r3, r3, r2
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	4413      	add	r3, r2
 800b772:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b774:	f7f9 fea0 	bl	80054b8 <HAL_GetTick>
 800b778:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b77a:	4b39      	ldr	r3, [pc, #228]	; (800b860 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	015b      	lsls	r3, r3, #5
 800b780:	0d1b      	lsrs	r3, r3, #20
 800b782:	69fa      	ldr	r2, [r7, #28]
 800b784:	fb02 f303 	mul.w	r3, r2, r3
 800b788:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b78a:	e054      	b.n	800b836 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b792:	d050      	beq.n	800b836 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b794:	f7f9 fe90 	bl	80054b8 <HAL_GetTick>
 800b798:	4602      	mov	r2, r0
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	1ad3      	subs	r3, r2, r3
 800b79e:	69fa      	ldr	r2, [r7, #28]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d902      	bls.n	800b7aa <SPI_WaitFlagStateUntilTimeout+0x56>
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d13d      	bne.n	800b826 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	685a      	ldr	r2, [r3, #4]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b7b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7c2:	d111      	bne.n	800b7e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7cc:	d004      	beq.n	800b7d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7d6:	d107      	bne.n	800b7e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7f0:	d10f      	bne.n	800b812 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b800:	601a      	str	r2, [r3, #0]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b810:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b822:	2303      	movs	r3, #3
 800b824:	e017      	b.n	800b856 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b82c:	2300      	movs	r3, #0
 800b82e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	3b01      	subs	r3, #1
 800b834:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	689a      	ldr	r2, [r3, #8]
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	4013      	ands	r3, r2
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	429a      	cmp	r2, r3
 800b844:	bf0c      	ite	eq
 800b846:	2301      	moveq	r3, #1
 800b848:	2300      	movne	r3, #0
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	461a      	mov	r2, r3
 800b84e:	79fb      	ldrb	r3, [r7, #7]
 800b850:	429a      	cmp	r2, r3
 800b852:	d19b      	bne.n	800b78c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	3720      	adds	r7, #32
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	20000020 	.word	0x20000020

0800b864 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b08a      	sub	sp, #40	; 0x28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
 800b870:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b872:	2300      	movs	r3, #0
 800b874:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b876:	f7f9 fe1f 	bl	80054b8 <HAL_GetTick>
 800b87a:	4602      	mov	r2, r0
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	1a9b      	subs	r3, r3, r2
 800b880:	683a      	ldr	r2, [r7, #0]
 800b882:	4413      	add	r3, r2
 800b884:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b886:	f7f9 fe17 	bl	80054b8 <HAL_GetTick>
 800b88a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	330c      	adds	r3, #12
 800b892:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b894:	4b3d      	ldr	r3, [pc, #244]	; (800b98c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	4613      	mov	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	00da      	lsls	r2, r3, #3
 800b8a0:	1ad3      	subs	r3, r2, r3
 800b8a2:	0d1b      	lsrs	r3, r3, #20
 800b8a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a6:	fb02 f303 	mul.w	r3, r2, r3
 800b8aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b8ac:	e060      	b.n	800b970 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b8b4:	d107      	bne.n	800b8c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d104      	bne.n	800b8c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8cc:	d050      	beq.n	800b970 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b8ce:	f7f9 fdf3 	bl	80054b8 <HAL_GetTick>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	6a3b      	ldr	r3, [r7, #32]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d902      	bls.n	800b8e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d13d      	bne.n	800b960 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	685a      	ldr	r2, [r3, #4]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b8f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8fc:	d111      	bne.n	800b922 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b906:	d004      	beq.n	800b912 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b910:	d107      	bne.n	800b922 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b920:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b92a:	d10f      	bne.n	800b94c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b93a:	601a      	str	r2, [r3, #0]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b94a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b95c:	2303      	movs	r3, #3
 800b95e:	e010      	b.n	800b982 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b966:	2300      	movs	r3, #0
 800b968:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	689a      	ldr	r2, [r3, #8]
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	4013      	ands	r3, r2
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d196      	bne.n	800b8ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3728      	adds	r7, #40	; 0x28
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	20000020 	.word	0x20000020

0800b990 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af02      	add	r7, sp, #8
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9a4:	d111      	bne.n	800b9ca <SPI_EndRxTransaction+0x3a>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9ae:	d004      	beq.n	800b9ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9b8:	d107      	bne.n	800b9ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	2180      	movs	r1, #128	; 0x80
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f7ff febd 	bl	800b754 <SPI_WaitFlagStateUntilTimeout>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d007      	beq.n	800b9f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9e4:	f043 0220 	orr.w	r2, r3, #32
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	e023      	b.n	800ba38 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9f8:	d11d      	bne.n	800ba36 <SPI_EndRxTransaction+0xa6>
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba02:	d004      	beq.n	800ba0e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba0c:	d113      	bne.n	800ba36 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	9300      	str	r3, [sp, #0]
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f7ff ff22 	bl	800b864 <SPI_WaitFifoStateUntilTimeout>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d007      	beq.n	800ba36 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba2a:	f043 0220 	orr.w	r2, r3, #32
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ba32:	2303      	movs	r3, #3
 800ba34:	e000      	b.n	800ba38 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b086      	sub	sp, #24
 800ba44:	af02      	add	r7, sp, #8
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f7ff ff03 	bl	800b864 <SPI_WaitFifoStateUntilTimeout>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d007      	beq.n	800ba74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba68:	f043 0220 	orr.w	r2, r3, #32
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ba70:	2303      	movs	r3, #3
 800ba72:	e027      	b.n	800bac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	2180      	movs	r1, #128	; 0x80
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	f7ff fe68 	bl	800b754 <SPI_WaitFlagStateUntilTimeout>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d007      	beq.n	800ba9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba8e:	f043 0220 	orr.w	r2, r3, #32
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ba96:	2303      	movs	r3, #3
 800ba98:	e014      	b.n	800bac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	9300      	str	r3, [sp, #0]
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f7ff fedc 	bl	800b864 <SPI_WaitFifoStateUntilTimeout>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d007      	beq.n	800bac2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bab6:	f043 0220 	orr.w	r2, r3, #32
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800babe:	2303      	movs	r3, #3
 800bac0:	e000      	b.n	800bac4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3710      	adds	r7, #16
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d101      	bne.n	800bade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	e049      	b.n	800bb72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d106      	bne.n	800baf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7f9 fa96 	bl	8005024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2202      	movs	r2, #2
 800bafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	3304      	adds	r3, #4
 800bb08:	4619      	mov	r1, r3
 800bb0a:	4610      	mov	r0, r2
 800bb0c:	f000 f94c 	bl	800bda8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
	...

0800bb7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d001      	beq.n	800bb94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bb90:	2301      	movs	r3, #1
 800bb92:	e033      	b.n	800bbfc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2202      	movs	r2, #2
 800bb98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a19      	ldr	r2, [pc, #100]	; (800bc08 <HAL_TIM_Base_Start+0x8c>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d009      	beq.n	800bbba <HAL_TIM_Base_Start+0x3e>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbae:	d004      	beq.n	800bbba <HAL_TIM_Base_Start+0x3e>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a15      	ldr	r2, [pc, #84]	; (800bc0c <HAL_TIM_Base_Start+0x90>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d115      	bne.n	800bbe6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	689a      	ldr	r2, [r3, #8]
 800bbc0:	4b13      	ldr	r3, [pc, #76]	; (800bc10 <HAL_TIM_Base_Start+0x94>)
 800bbc2:	4013      	ands	r3, r2
 800bbc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2b06      	cmp	r3, #6
 800bbca:	d015      	beq.n	800bbf8 <HAL_TIM_Base_Start+0x7c>
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbd2:	d011      	beq.n	800bbf8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f042 0201 	orr.w	r2, r2, #1
 800bbe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbe4:	e008      	b.n	800bbf8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f042 0201 	orr.w	r2, r2, #1
 800bbf4:	601a      	str	r2, [r3, #0]
 800bbf6:	e000      	b.n	800bbfa <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3714      	adds	r7, #20
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr
 800bc08:	40012c00 	.word	0x40012c00
 800bc0c:	40014000 	.word	0x40014000
 800bc10:	00010007 	.word	0x00010007

0800bc14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d101      	bne.n	800bc30 <HAL_TIM_ConfigClockSource+0x1c>
 800bc2c:	2302      	movs	r3, #2
 800bc2e:	e0b6      	b.n	800bd9e <HAL_TIM_ConfigClockSource+0x18a>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2201      	movs	r2, #1
 800bc34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2202      	movs	r2, #2
 800bc3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bc52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc6c:	d03e      	beq.n	800bcec <HAL_TIM_ConfigClockSource+0xd8>
 800bc6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc72:	f200 8087 	bhi.w	800bd84 <HAL_TIM_ConfigClockSource+0x170>
 800bc76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc7a:	f000 8086 	beq.w	800bd8a <HAL_TIM_ConfigClockSource+0x176>
 800bc7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc82:	d87f      	bhi.n	800bd84 <HAL_TIM_ConfigClockSource+0x170>
 800bc84:	2b70      	cmp	r3, #112	; 0x70
 800bc86:	d01a      	beq.n	800bcbe <HAL_TIM_ConfigClockSource+0xaa>
 800bc88:	2b70      	cmp	r3, #112	; 0x70
 800bc8a:	d87b      	bhi.n	800bd84 <HAL_TIM_ConfigClockSource+0x170>
 800bc8c:	2b60      	cmp	r3, #96	; 0x60
 800bc8e:	d050      	beq.n	800bd32 <HAL_TIM_ConfigClockSource+0x11e>
 800bc90:	2b60      	cmp	r3, #96	; 0x60
 800bc92:	d877      	bhi.n	800bd84 <HAL_TIM_ConfigClockSource+0x170>
 800bc94:	2b50      	cmp	r3, #80	; 0x50
 800bc96:	d03c      	beq.n	800bd12 <HAL_TIM_ConfigClockSource+0xfe>
 800bc98:	2b50      	cmp	r3, #80	; 0x50
 800bc9a:	d873      	bhi.n	800bd84 <HAL_TIM_ConfigClockSource+0x170>
 800bc9c:	2b40      	cmp	r3, #64	; 0x40
 800bc9e:	d058      	beq.n	800bd52 <HAL_TIM_ConfigClockSource+0x13e>
 800bca0:	2b40      	cmp	r3, #64	; 0x40
 800bca2:	d86f      	bhi.n	800bd84 <HAL_TIM_ConfigClockSource+0x170>
 800bca4:	2b30      	cmp	r3, #48	; 0x30
 800bca6:	d064      	beq.n	800bd72 <HAL_TIM_ConfigClockSource+0x15e>
 800bca8:	2b30      	cmp	r3, #48	; 0x30
 800bcaa:	d86b      	bhi.n	800bd84 <HAL_TIM_ConfigClockSource+0x170>
 800bcac:	2b20      	cmp	r3, #32
 800bcae:	d060      	beq.n	800bd72 <HAL_TIM_ConfigClockSource+0x15e>
 800bcb0:	2b20      	cmp	r3, #32
 800bcb2:	d867      	bhi.n	800bd84 <HAL_TIM_ConfigClockSource+0x170>
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d05c      	beq.n	800bd72 <HAL_TIM_ConfigClockSource+0x15e>
 800bcb8:	2b10      	cmp	r3, #16
 800bcba:	d05a      	beq.n	800bd72 <HAL_TIM_ConfigClockSource+0x15e>
 800bcbc:	e062      	b.n	800bd84 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bcce:	f000 f949 	bl	800bf64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68ba      	ldr	r2, [r7, #8]
 800bce8:	609a      	str	r2, [r3, #8]
      break;
 800bcea:	e04f      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bcfc:	f000 f932 	bl	800bf64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	689a      	ldr	r2, [r3, #8]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd0e:	609a      	str	r2, [r3, #8]
      break;
 800bd10:	e03c      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd1e:	461a      	mov	r2, r3
 800bd20:	f000 f8a6 	bl	800be70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2150      	movs	r1, #80	; 0x50
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f000 f8ff 	bl	800bf2e <TIM_ITRx_SetConfig>
      break;
 800bd30:	e02c      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd3e:	461a      	mov	r2, r3
 800bd40:	f000 f8c5 	bl	800bece <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2160      	movs	r1, #96	; 0x60
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 f8ef 	bl	800bf2e <TIM_ITRx_SetConfig>
      break;
 800bd50:	e01c      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd5e:	461a      	mov	r2, r3
 800bd60:	f000 f886 	bl	800be70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2140      	movs	r1, #64	; 0x40
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 f8df 	bl	800bf2e <TIM_ITRx_SetConfig>
      break;
 800bd70:	e00c      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	f000 f8d6 	bl	800bf2e <TIM_ITRx_SetConfig>
      break;
 800bd82:	e003      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	73fb      	strb	r3, [r7, #15]
      break;
 800bd88:	e000      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800bd8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
	...

0800bda8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4a2a      	ldr	r2, [pc, #168]	; (800be64 <TIM_Base_SetConfig+0xbc>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d003      	beq.n	800bdc8 <TIM_Base_SetConfig+0x20>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdc6:	d108      	bne.n	800bdda <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4a21      	ldr	r2, [pc, #132]	; (800be64 <TIM_Base_SetConfig+0xbc>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d00b      	beq.n	800bdfa <TIM_Base_SetConfig+0x52>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bde8:	d007      	beq.n	800bdfa <TIM_Base_SetConfig+0x52>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4a1e      	ldr	r2, [pc, #120]	; (800be68 <TIM_Base_SetConfig+0xc0>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d003      	beq.n	800bdfa <TIM_Base_SetConfig+0x52>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4a1d      	ldr	r2, [pc, #116]	; (800be6c <TIM_Base_SetConfig+0xc4>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d108      	bne.n	800be0c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	4313      	orrs	r3, r2
 800be0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	695b      	ldr	r3, [r3, #20]
 800be16:	4313      	orrs	r3, r2
 800be18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	689a      	ldr	r2, [r3, #8]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a0c      	ldr	r2, [pc, #48]	; (800be64 <TIM_Base_SetConfig+0xbc>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d007      	beq.n	800be48 <TIM_Base_SetConfig+0xa0>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a0b      	ldr	r2, [pc, #44]	; (800be68 <TIM_Base_SetConfig+0xc0>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d003      	beq.n	800be48 <TIM_Base_SetConfig+0xa0>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	4a0a      	ldr	r2, [pc, #40]	; (800be6c <TIM_Base_SetConfig+0xc4>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d103      	bne.n	800be50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	691a      	ldr	r2, [r3, #16]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2201      	movs	r2, #1
 800be54:	615a      	str	r2, [r3, #20]
}
 800be56:	bf00      	nop
 800be58:	3714      	adds	r7, #20
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	40012c00 	.word	0x40012c00
 800be68:	40014000 	.word	0x40014000
 800be6c:	40014400 	.word	0x40014400

0800be70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be70:	b480      	push	{r7}
 800be72:	b087      	sub	sp, #28
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6a1b      	ldr	r3, [r3, #32]
 800be80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	6a1b      	ldr	r3, [r3, #32]
 800be86:	f023 0201 	bic.w	r2, r3, #1
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	011b      	lsls	r3, r3, #4
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	f023 030a 	bic.w	r3, r3, #10
 800beac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800beae:	697a      	ldr	r2, [r7, #20]
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	621a      	str	r2, [r3, #32]
}
 800bec2:	bf00      	nop
 800bec4:	371c      	adds	r7, #28
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bece:	b480      	push	{r7}
 800bed0:	b087      	sub	sp, #28
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	60f8      	str	r0, [r7, #12]
 800bed6:	60b9      	str	r1, [r7, #8]
 800bed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6a1b      	ldr	r3, [r3, #32]
 800bede:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6a1b      	ldr	r3, [r3, #32]
 800bee4:	f023 0210 	bic.w	r2, r3, #16
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	699b      	ldr	r3, [r3, #24]
 800bef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	031b      	lsls	r3, r3, #12
 800befe:	693a      	ldr	r2, [r7, #16]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bf0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	011b      	lsls	r3, r3, #4
 800bf10:	697a      	ldr	r2, [r7, #20]
 800bf12:	4313      	orrs	r3, r2
 800bf14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	693a      	ldr	r2, [r7, #16]
 800bf1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	697a      	ldr	r2, [r7, #20]
 800bf20:	621a      	str	r2, [r3, #32]
}
 800bf22:	bf00      	nop
 800bf24:	371c      	adds	r7, #28
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b085      	sub	sp, #20
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	f043 0307 	orr.w	r3, r3, #7
 800bf50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	609a      	str	r2, [r3, #8]
}
 800bf58:	bf00      	nop
 800bf5a:	3714      	adds	r7, #20
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b087      	sub	sp, #28
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
 800bf70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	021a      	lsls	r2, r3, #8
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	431a      	orrs	r2, r3
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	697a      	ldr	r2, [r7, #20]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	697a      	ldr	r2, [r7, #20]
 800bf96:	609a      	str	r2, [r3, #8]
}
 800bf98:	bf00      	nop
 800bf9a:	371c      	adds	r7, #28
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b085      	sub	sp, #20
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d101      	bne.n	800bfbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfb8:	2302      	movs	r3, #2
 800bfba:	e04f      	b.n	800c05c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2202      	movs	r2, #2
 800bfc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a21      	ldr	r2, [pc, #132]	; (800c068 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d108      	bne.n	800bff8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bfec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	68fa      	ldr	r2, [r7, #12]
 800bff4:	4313      	orrs	r3, r2
 800bff6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	4313      	orrs	r3, r2
 800c008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a14      	ldr	r2, [pc, #80]	; (800c068 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d009      	beq.n	800c030 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c024:	d004      	beq.n	800c030 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a10      	ldr	r2, [pc, #64]	; (800c06c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d10c      	bne.n	800c04a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	4313      	orrs	r3, r2
 800c040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68ba      	ldr	r2, [r7, #8]
 800c048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2201      	movs	r2, #1
 800c04e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	40012c00 	.word	0x40012c00
 800c06c:	40014000 	.word	0x40014000

0800c070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d101      	bne.n	800c082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c07e:	2301      	movs	r3, #1
 800c080:	e040      	b.n	800c104 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c086:	2b00      	cmp	r3, #0
 800c088:	d106      	bne.n	800c098 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7f9 f840 	bl	8005118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2224      	movs	r2, #36	; 0x24
 800c09c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f022 0201 	bic.w	r2, r2, #1
 800c0ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d002      	beq.n	800c0bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 feb0 	bl	800ce1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fc81 	bl	800c9c4 <UART_SetConfig>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d101      	bne.n	800c0cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e01b      	b.n	800c104 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	685a      	ldr	r2, [r3, #4]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c0da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	689a      	ldr	r2, [r3, #8]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c0ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f042 0201 	orr.w	r2, r2, #1
 800c0fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 ff2f 	bl	800cf60 <UART_CheckIdleState>
 800c102:	4603      	mov	r3, r0
}
 800c104:	4618      	mov	r0, r3
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b08a      	sub	sp, #40	; 0x28
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	4613      	mov	r3, r2
 800c118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c120:	2b20      	cmp	r3, #32
 800c122:	d137      	bne.n	800c194 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d002      	beq.n	800c130 <HAL_UART_Receive_DMA+0x24>
 800c12a:	88fb      	ldrh	r3, [r7, #6]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d101      	bne.n	800c134 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c130:	2301      	movs	r3, #1
 800c132:	e030      	b.n	800c196 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a18      	ldr	r2, [pc, #96]	; (800c1a0 <HAL_UART_Receive_DMA+0x94>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d01f      	beq.n	800c184 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d018      	beq.n	800c184 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	e853 3f00 	ldrex	r3, [r3]
 800c15e:	613b      	str	r3, [r7, #16]
   return(result);
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c166:	627b      	str	r3, [r7, #36]	; 0x24
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	461a      	mov	r2, r3
 800c16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c170:	623b      	str	r3, [r7, #32]
 800c172:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c174:	69f9      	ldr	r1, [r7, #28]
 800c176:	6a3a      	ldr	r2, [r7, #32]
 800c178:	e841 2300 	strex	r3, r2, [r1]
 800c17c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1e6      	bne.n	800c152 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c184:	88fb      	ldrh	r3, [r7, #6]
 800c186:	461a      	mov	r2, r3
 800c188:	68b9      	ldr	r1, [r7, #8]
 800c18a:	68f8      	ldr	r0, [r7, #12]
 800c18c:	f000 fff8 	bl	800d180 <UART_Start_Receive_DMA>
 800c190:	4603      	mov	r3, r0
 800c192:	e000      	b.n	800c196 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c194:	2302      	movs	r3, #2
  }
}
 800c196:	4618      	mov	r0, r3
 800c198:	3728      	adds	r7, #40	; 0x28
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	40008000 	.word	0x40008000

0800c1a4 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b0a0      	sub	sp, #128	; 0x80
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1b4:	e853 3f00 	ldrex	r3, [r3]
 800c1b8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c1ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1bc:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800c1c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800c1cc:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ce:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c1d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c1d2:	e841 2300 	strex	r3, r2, [r1]
 800c1d6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c1d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1e6      	bne.n	800c1ac <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	3308      	adds	r3, #8
 800c1e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1e8:	e853 3f00 	ldrex	r3, [r3]
 800c1ec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c1ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1f0:	f023 0301 	bic.w	r3, r3, #1
 800c1f4:	67bb      	str	r3, [r7, #120]	; 0x78
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c1fe:	657a      	str	r2, [r7, #84]	; 0x54
 800c200:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c202:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c206:	e841 2300 	strex	r3, r2, [r1]
 800c20a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c20c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1e5      	bne.n	800c1de <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c216:	2b01      	cmp	r3, #1
 800c218:	d118      	bne.n	800c24c <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c222:	e853 3f00 	ldrex	r3, [r3]
 800c226:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22a:	f023 0310 	bic.w	r3, r3, #16
 800c22e:	677b      	str	r3, [r7, #116]	; 0x74
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	461a      	mov	r2, r3
 800c236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c238:	643b      	str	r3, [r7, #64]	; 0x40
 800c23a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c23c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c23e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c240:	e841 2300 	strex	r3, r2, [r1]
 800c244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1e6      	bne.n	800c21a <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c256:	2b80      	cmp	r3, #128	; 0x80
 800c258:	d137      	bne.n	800c2ca <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	3308      	adds	r3, #8
 800c260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c262:	6a3b      	ldr	r3, [r7, #32]
 800c264:	e853 3f00 	ldrex	r3, [r3]
 800c268:	61fb      	str	r3, [r7, #28]
   return(result);
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c270:	673b      	str	r3, [r7, #112]	; 0x70
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3308      	adds	r3, #8
 800c278:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c27a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c27c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c282:	e841 2300 	strex	r3, r2, [r1]
 800c286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1e5      	bne.n	800c25a <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c292:	2b00      	cmp	r3, #0
 800c294:	d019      	beq.n	800c2ca <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c29a:	2200      	movs	r2, #0
 800c29c:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fa fe02 	bl	8006eac <HAL_DMA_Abort>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00d      	beq.n	800c2ca <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fa ff28 	bl	8007108 <HAL_DMA_GetError>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b20      	cmp	r3, #32
 800c2bc:	d105      	bne.n	800c2ca <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2210      	movs	r2, #16
 800c2c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c2c6:	2303      	movs	r3, #3
 800c2c8:	e063      	b.n	800c392 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2d4:	2b40      	cmp	r3, #64	; 0x40
 800c2d6:	d137      	bne.n	800c348 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3308      	adds	r3, #8
 800c2de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	e853 3f00 	ldrex	r3, [r3]
 800c2e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	3308      	adds	r3, #8
 800c2f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c2f8:	61ba      	str	r2, [r7, #24]
 800c2fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fc:	6979      	ldr	r1, [r7, #20]
 800c2fe:	69ba      	ldr	r2, [r7, #24]
 800c300:	e841 2300 	strex	r3, r2, [r1]
 800c304:	613b      	str	r3, [r7, #16]
   return(result);
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1e5      	bne.n	800c2d8 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c310:	2b00      	cmp	r3, #0
 800c312:	d019      	beq.n	800c348 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c318:	2200      	movs	r2, #0
 800c31a:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c320:	4618      	mov	r0, r3
 800c322:	f7fa fdc3 	bl	8006eac <HAL_DMA_Abort>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00d      	beq.n	800c348 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c330:	4618      	mov	r0, r3
 800c332:	f7fa fee9 	bl	8007108 <HAL_DMA_GetError>
 800c336:	4603      	mov	r3, r0
 800c338:	2b20      	cmp	r3, #32
 800c33a:	d105      	bne.n	800c348 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2210      	movs	r2, #16
 800c340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c344:	2303      	movs	r3, #3
 800c346:	e024      	b.n	800c392 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	220f      	movs	r2, #15
 800c35e:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	8b1b      	ldrh	r3, [r3, #24]
 800c366:	b29a      	uxth	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f042 0208 	orr.w	r2, r2, #8
 800c370:	b292      	uxth	r2, r2
 800c372:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2220      	movs	r2, #32
 800c378:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2220      	movs	r2, #32
 800c37e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	3780      	adds	r7, #128	; 0x80
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
	...

0800c39c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b0ba      	sub	sp, #232	; 0xe8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	69db      	ldr	r3, [r3, #28]
 800c3aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c3c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c3c6:	f640 030f 	movw	r3, #2063	; 0x80f
 800c3ca:	4013      	ands	r3, r2
 800c3cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c3d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d115      	bne.n	800c404 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3dc:	f003 0320 	and.w	r3, r3, #32
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00f      	beq.n	800c404 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c3e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3e8:	f003 0320 	and.w	r3, r3, #32
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d009      	beq.n	800c404 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f000 82ae 	beq.w	800c956 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	4798      	blx	r3
      }
      return;
 800c402:	e2a8      	b.n	800c956 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f000 8117 	beq.w	800c63c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c40e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c412:	f003 0301 	and.w	r3, r3, #1
 800c416:	2b00      	cmp	r3, #0
 800c418:	d106      	bne.n	800c428 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c41a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c41e:	4b85      	ldr	r3, [pc, #532]	; (800c634 <HAL_UART_IRQHandler+0x298>)
 800c420:	4013      	ands	r3, r2
 800c422:	2b00      	cmp	r3, #0
 800c424:	f000 810a 	beq.w	800c63c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c42c:	f003 0301 	and.w	r3, r3, #1
 800c430:	2b00      	cmp	r3, #0
 800c432:	d011      	beq.n	800c458 <HAL_UART_IRQHandler+0xbc>
 800c434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00b      	beq.n	800c458 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2201      	movs	r2, #1
 800c446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c44e:	f043 0201 	orr.w	r2, r3, #1
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c45c:	f003 0302 	and.w	r3, r3, #2
 800c460:	2b00      	cmp	r3, #0
 800c462:	d011      	beq.n	800c488 <HAL_UART_IRQHandler+0xec>
 800c464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c468:	f003 0301 	and.w	r3, r3, #1
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d00b      	beq.n	800c488 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2202      	movs	r2, #2
 800c476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c47e:	f043 0204 	orr.w	r2, r3, #4
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c48c:	f003 0304 	and.w	r3, r3, #4
 800c490:	2b00      	cmp	r3, #0
 800c492:	d011      	beq.n	800c4b8 <HAL_UART_IRQHandler+0x11c>
 800c494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c498:	f003 0301 	and.w	r3, r3, #1
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00b      	beq.n	800c4b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2204      	movs	r2, #4
 800c4a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4ae:	f043 0202 	orr.w	r2, r3, #2
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4bc:	f003 0308 	and.w	r3, r3, #8
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d017      	beq.n	800c4f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4c8:	f003 0320 	and.w	r3, r3, #32
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d105      	bne.n	800c4dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c4d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00b      	beq.n	800c4f4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2208      	movs	r2, #8
 800c4e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4ea:	f043 0208 	orr.w	r2, r3, #8
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c4f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d012      	beq.n	800c526 <HAL_UART_IRQHandler+0x18a>
 800c500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c504:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00c      	beq.n	800c526 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c514:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c51c:	f043 0220 	orr.w	r2, r3, #32
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f000 8214 	beq.w	800c95a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c536:	f003 0320 	and.w	r3, r3, #32
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00d      	beq.n	800c55a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c53e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c542:	f003 0320 	and.w	r3, r3, #32
 800c546:	2b00      	cmp	r3, #0
 800c548:	d007      	beq.n	800c55a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d003      	beq.n	800c55a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c560:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c56e:	2b40      	cmp	r3, #64	; 0x40
 800c570:	d005      	beq.n	800c57e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c576:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d04f      	beq.n	800c61e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fec4 	bl	800d30c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c58e:	2b40      	cmp	r3, #64	; 0x40
 800c590:	d141      	bne.n	800c616 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	3308      	adds	r3, #8
 800c598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c59c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5a0:	e853 3f00 	ldrex	r3, [r3]
 800c5a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c5a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c5be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c5c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c5ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c5ce:	e841 2300 	strex	r3, r2, [r1]
 800c5d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c5d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1d9      	bne.n	800c592 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d013      	beq.n	800c60e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5ea:	4a13      	ldr	r2, [pc, #76]	; (800c638 <HAL_UART_IRQHandler+0x29c>)
 800c5ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fa fc98 	bl	8006f28 <HAL_DMA_Abort_IT>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d017      	beq.n	800c62e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c608:	4610      	mov	r0, r2
 800c60a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c60c:	e00f      	b.n	800c62e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 f9c2 	bl	800c998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c614:	e00b      	b.n	800c62e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 f9be 	bl	800c998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c61c:	e007      	b.n	800c62e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f9ba 	bl	800c998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800c62c:	e195      	b.n	800c95a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c62e:	bf00      	nop
    return;
 800c630:	e193      	b.n	800c95a <HAL_UART_IRQHandler+0x5be>
 800c632:	bf00      	nop
 800c634:	04000120 	.word	0x04000120
 800c638:	0800d5bd 	.word	0x0800d5bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c640:	2b01      	cmp	r3, #1
 800c642:	f040 814e 	bne.w	800c8e2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c64a:	f003 0310 	and.w	r3, r3, #16
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f000 8147 	beq.w	800c8e2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c658:	f003 0310 	and.w	r3, r3, #16
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f000 8140 	beq.w	800c8e2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2210      	movs	r2, #16
 800c668:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	689b      	ldr	r3, [r3, #8]
 800c670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c674:	2b40      	cmp	r3, #64	; 0x40
 800c676:	f040 80b8 	bne.w	800c7ea <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c686:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f000 8167 	beq.w	800c95e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c69a:	429a      	cmp	r2, r3
 800c69c:	f080 815f 	bcs.w	800c95e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c6a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f003 0320 	and.w	r3, r3, #32
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	f040 8086 	bne.w	800c7c8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6c8:	e853 3f00 	ldrex	r3, [r3]
 800c6cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c6d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c6d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c6e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c6ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c6f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c6f6:	e841 2300 	strex	r3, r2, [r1]
 800c6fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c6fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1da      	bne.n	800c6bc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	3308      	adds	r3, #8
 800c70c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c70e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c710:	e853 3f00 	ldrex	r3, [r3]
 800c714:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c718:	f023 0301 	bic.w	r3, r3, #1
 800c71c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	3308      	adds	r3, #8
 800c726:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c72a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c72e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c730:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c732:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c736:	e841 2300 	strex	r3, r2, [r1]
 800c73a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c73c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d1e1      	bne.n	800c706 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	3308      	adds	r3, #8
 800c748:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c74c:	e853 3f00 	ldrex	r3, [r3]
 800c750:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	3308      	adds	r3, #8
 800c762:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c766:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c768:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c76c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c76e:	e841 2300 	strex	r3, r2, [r1]
 800c772:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1e3      	bne.n	800c742 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2220      	movs	r2, #32
 800c77e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c78e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c790:	e853 3f00 	ldrex	r3, [r3]
 800c794:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c798:	f023 0310 	bic.w	r3, r3, #16
 800c79c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c7aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800c7ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c7b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7b2:	e841 2300 	strex	r3, r2, [r1]
 800c7b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c7b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1e4      	bne.n	800c788 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fa fb72 	bl	8006eac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2202      	movs	r2, #2
 800c7cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f8e2 	bl	800c9ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c7e8:	e0b9      	b.n	800c95e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c804:	b29b      	uxth	r3, r3
 800c806:	2b00      	cmp	r3, #0
 800c808:	f000 80ab 	beq.w	800c962 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800c80c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c810:	2b00      	cmp	r3, #0
 800c812:	f000 80a6 	beq.w	800c962 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81e:	e853 3f00 	ldrex	r3, [r3]
 800c822:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c82a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	461a      	mov	r2, r3
 800c834:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c838:	647b      	str	r3, [r7, #68]	; 0x44
 800c83a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c83e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c840:	e841 2300 	strex	r3, r2, [r1]
 800c844:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d1e4      	bne.n	800c816 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	3308      	adds	r3, #8
 800c852:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c856:	e853 3f00 	ldrex	r3, [r3]
 800c85a:	623b      	str	r3, [r7, #32]
   return(result);
 800c85c:	6a3b      	ldr	r3, [r7, #32]
 800c85e:	f023 0301 	bic.w	r3, r3, #1
 800c862:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	3308      	adds	r3, #8
 800c86c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c870:	633a      	str	r2, [r7, #48]	; 0x30
 800c872:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c874:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c878:	e841 2300 	strex	r3, r2, [r1]
 800c87c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c880:	2b00      	cmp	r3, #0
 800c882:	d1e3      	bne.n	800c84c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2220      	movs	r2, #32
 800c888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	e853 3f00 	ldrex	r3, [r3]
 800c8a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f023 0310 	bic.w	r3, r3, #16
 800c8ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c8ba:	61fb      	str	r3, [r7, #28]
 800c8bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8be:	69b9      	ldr	r1, [r7, #24]
 800c8c0:	69fa      	ldr	r2, [r7, #28]
 800c8c2:	e841 2300 	strex	r3, r2, [r1]
 800c8c6:	617b      	str	r3, [r7, #20]
   return(result);
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1e4      	bne.n	800c898 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2202      	movs	r2, #2
 800c8d2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c8d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c8d8:	4619      	mov	r1, r3
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 f866 	bl	800c9ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8e0:	e03f      	b.n	800c962 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c8e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00e      	beq.n	800c90c <HAL_UART_IRQHandler+0x570>
 800c8ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d008      	beq.n	800c90c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c902:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 fe99 	bl	800d63c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c90a:	e02d      	b.n	800c968 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00e      	beq.n	800c936 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c91c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c920:	2b00      	cmp	r3, #0
 800c922:	d008      	beq.n	800c936 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d01c      	beq.n	800c966 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	4798      	blx	r3
    }
    return;
 800c934:	e017      	b.n	800c966 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c93a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d012      	beq.n	800c968 <HAL_UART_IRQHandler+0x5cc>
 800c942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00c      	beq.n	800c968 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fe4a 	bl	800d5e8 <UART_EndTransmit_IT>
    return;
 800c954:	e008      	b.n	800c968 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c956:	bf00      	nop
 800c958:	e006      	b.n	800c968 <HAL_UART_IRQHandler+0x5cc>
    return;
 800c95a:	bf00      	nop
 800c95c:	e004      	b.n	800c968 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c95e:	bf00      	nop
 800c960:	e002      	b.n	800c968 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c962:	bf00      	nop
 800c964:	e000      	b.n	800c968 <HAL_UART_IRQHandler+0x5cc>
    return;
 800c966:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c968:	37e8      	adds	r7, #232	; 0xe8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop

0800c970 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c978:	bf00      	nop
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c98c:	bf00      	nop
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr

0800c998 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c9a0:	bf00      	nop
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c9b8:	bf00      	nop
 800c9ba:	370c      	adds	r7, #12
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c9c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c9c8:	b08a      	sub	sp, #40	; 0x28
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	689a      	ldr	r2, [r3, #8]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	431a      	orrs	r2, r3
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	695b      	ldr	r3, [r3, #20]
 800c9e2:	431a      	orrs	r2, r3
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	69db      	ldr	r3, [r3, #28]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	4bb4      	ldr	r3, [pc, #720]	; (800ccc4 <UART_SetConfig+0x300>)
 800c9f4:	4013      	ands	r3, r2
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	6812      	ldr	r2, [r2, #0]
 800c9fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9fc:	430b      	orrs	r3, r1
 800c9fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	68da      	ldr	r2, [r3, #12]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	430a      	orrs	r2, r1
 800ca14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	699b      	ldr	r3, [r3, #24]
 800ca1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4aa9      	ldr	r2, [pc, #676]	; (800ccc8 <UART_SetConfig+0x304>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d004      	beq.n	800ca30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	6a1b      	ldr	r3, [r3, #32]
 800ca2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca40:	430a      	orrs	r2, r1
 800ca42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4aa0      	ldr	r2, [pc, #640]	; (800cccc <UART_SetConfig+0x308>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d126      	bne.n	800ca9c <UART_SetConfig+0xd8>
 800ca4e:	4ba0      	ldr	r3, [pc, #640]	; (800ccd0 <UART_SetConfig+0x30c>)
 800ca50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca54:	f003 0303 	and.w	r3, r3, #3
 800ca58:	2b03      	cmp	r3, #3
 800ca5a:	d81b      	bhi.n	800ca94 <UART_SetConfig+0xd0>
 800ca5c:	a201      	add	r2, pc, #4	; (adr r2, 800ca64 <UART_SetConfig+0xa0>)
 800ca5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca62:	bf00      	nop
 800ca64:	0800ca75 	.word	0x0800ca75
 800ca68:	0800ca85 	.word	0x0800ca85
 800ca6c:	0800ca7d 	.word	0x0800ca7d
 800ca70:	0800ca8d 	.word	0x0800ca8d
 800ca74:	2301      	movs	r3, #1
 800ca76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca7a:	e080      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca82:	e07c      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800ca84:	2304      	movs	r3, #4
 800ca86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca8a:	e078      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800ca8c:	2308      	movs	r3, #8
 800ca8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca92:	e074      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800ca94:	2310      	movs	r3, #16
 800ca96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca9a:	e070      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a8c      	ldr	r2, [pc, #560]	; (800ccd4 <UART_SetConfig+0x310>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d138      	bne.n	800cb18 <UART_SetConfig+0x154>
 800caa6:	4b8a      	ldr	r3, [pc, #552]	; (800ccd0 <UART_SetConfig+0x30c>)
 800caa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caac:	f003 030c 	and.w	r3, r3, #12
 800cab0:	2b0c      	cmp	r3, #12
 800cab2:	d82d      	bhi.n	800cb10 <UART_SetConfig+0x14c>
 800cab4:	a201      	add	r2, pc, #4	; (adr r2, 800cabc <UART_SetConfig+0xf8>)
 800cab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caba:	bf00      	nop
 800cabc:	0800caf1 	.word	0x0800caf1
 800cac0:	0800cb11 	.word	0x0800cb11
 800cac4:	0800cb11 	.word	0x0800cb11
 800cac8:	0800cb11 	.word	0x0800cb11
 800cacc:	0800cb01 	.word	0x0800cb01
 800cad0:	0800cb11 	.word	0x0800cb11
 800cad4:	0800cb11 	.word	0x0800cb11
 800cad8:	0800cb11 	.word	0x0800cb11
 800cadc:	0800caf9 	.word	0x0800caf9
 800cae0:	0800cb11 	.word	0x0800cb11
 800cae4:	0800cb11 	.word	0x0800cb11
 800cae8:	0800cb11 	.word	0x0800cb11
 800caec:	0800cb09 	.word	0x0800cb09
 800caf0:	2300      	movs	r3, #0
 800caf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800caf6:	e042      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800caf8:	2302      	movs	r3, #2
 800cafa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cafe:	e03e      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800cb00:	2304      	movs	r3, #4
 800cb02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb06:	e03a      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800cb08:	2308      	movs	r3, #8
 800cb0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb0e:	e036      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800cb10:	2310      	movs	r3, #16
 800cb12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb16:	e032      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a6a      	ldr	r2, [pc, #424]	; (800ccc8 <UART_SetConfig+0x304>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d12a      	bne.n	800cb78 <UART_SetConfig+0x1b4>
 800cb22:	4b6b      	ldr	r3, [pc, #428]	; (800ccd0 <UART_SetConfig+0x30c>)
 800cb24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cb2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cb30:	d01a      	beq.n	800cb68 <UART_SetConfig+0x1a4>
 800cb32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cb36:	d81b      	bhi.n	800cb70 <UART_SetConfig+0x1ac>
 800cb38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb3c:	d00c      	beq.n	800cb58 <UART_SetConfig+0x194>
 800cb3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb42:	d815      	bhi.n	800cb70 <UART_SetConfig+0x1ac>
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d003      	beq.n	800cb50 <UART_SetConfig+0x18c>
 800cb48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb4c:	d008      	beq.n	800cb60 <UART_SetConfig+0x19c>
 800cb4e:	e00f      	b.n	800cb70 <UART_SetConfig+0x1ac>
 800cb50:	2300      	movs	r3, #0
 800cb52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb56:	e012      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800cb58:	2302      	movs	r3, #2
 800cb5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb5e:	e00e      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800cb60:	2304      	movs	r3, #4
 800cb62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb66:	e00a      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800cb68:	2308      	movs	r3, #8
 800cb6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb6e:	e006      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800cb70:	2310      	movs	r3, #16
 800cb72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb76:	e002      	b.n	800cb7e <UART_SetConfig+0x1ba>
 800cb78:	2310      	movs	r3, #16
 800cb7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a51      	ldr	r2, [pc, #324]	; (800ccc8 <UART_SetConfig+0x304>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d17a      	bne.n	800cc7e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cb88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cb8c:	2b08      	cmp	r3, #8
 800cb8e:	d824      	bhi.n	800cbda <UART_SetConfig+0x216>
 800cb90:	a201      	add	r2, pc, #4	; (adr r2, 800cb98 <UART_SetConfig+0x1d4>)
 800cb92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb96:	bf00      	nop
 800cb98:	0800cbbd 	.word	0x0800cbbd
 800cb9c:	0800cbdb 	.word	0x0800cbdb
 800cba0:	0800cbc5 	.word	0x0800cbc5
 800cba4:	0800cbdb 	.word	0x0800cbdb
 800cba8:	0800cbcb 	.word	0x0800cbcb
 800cbac:	0800cbdb 	.word	0x0800cbdb
 800cbb0:	0800cbdb 	.word	0x0800cbdb
 800cbb4:	0800cbdb 	.word	0x0800cbdb
 800cbb8:	0800cbd3 	.word	0x0800cbd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbbc:	f7fd fce4 	bl	800a588 <HAL_RCC_GetPCLK1Freq>
 800cbc0:	61f8      	str	r0, [r7, #28]
        break;
 800cbc2:	e010      	b.n	800cbe6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cbc4:	4b44      	ldr	r3, [pc, #272]	; (800ccd8 <UART_SetConfig+0x314>)
 800cbc6:	61fb      	str	r3, [r7, #28]
        break;
 800cbc8:	e00d      	b.n	800cbe6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbca:	f7fd fc45 	bl	800a458 <HAL_RCC_GetSysClockFreq>
 800cbce:	61f8      	str	r0, [r7, #28]
        break;
 800cbd0:	e009      	b.n	800cbe6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbd6:	61fb      	str	r3, [r7, #28]
        break;
 800cbd8:	e005      	b.n	800cbe6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cbe4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	f000 8107 	beq.w	800cdfc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	685a      	ldr	r2, [r3, #4]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	005b      	lsls	r3, r3, #1
 800cbf6:	4413      	add	r3, r2
 800cbf8:	69fa      	ldr	r2, [r7, #28]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d305      	bcc.n	800cc0a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cc04:	69fa      	ldr	r2, [r7, #28]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d903      	bls.n	800cc12 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cc10:	e0f4      	b.n	800cdfc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	2200      	movs	r2, #0
 800cc16:	461c      	mov	r4, r3
 800cc18:	4615      	mov	r5, r2
 800cc1a:	f04f 0200 	mov.w	r2, #0
 800cc1e:	f04f 0300 	mov.w	r3, #0
 800cc22:	022b      	lsls	r3, r5, #8
 800cc24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800cc28:	0222      	lsls	r2, r4, #8
 800cc2a:	68f9      	ldr	r1, [r7, #12]
 800cc2c:	6849      	ldr	r1, [r1, #4]
 800cc2e:	0849      	lsrs	r1, r1, #1
 800cc30:	2000      	movs	r0, #0
 800cc32:	4688      	mov	r8, r1
 800cc34:	4681      	mov	r9, r0
 800cc36:	eb12 0a08 	adds.w	sl, r2, r8
 800cc3a:	eb43 0b09 	adc.w	fp, r3, r9
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	603b      	str	r3, [r7, #0]
 800cc46:	607a      	str	r2, [r7, #4]
 800cc48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc4c:	4650      	mov	r0, sl
 800cc4e:	4659      	mov	r1, fp
 800cc50:	f7f4 f81a 	bl	8000c88 <__aeabi_uldivmod>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	4613      	mov	r3, r2
 800cc5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc62:	d308      	bcc.n	800cc76 <UART_SetConfig+0x2b2>
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc6a:	d204      	bcs.n	800cc76 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	69ba      	ldr	r2, [r7, #24]
 800cc72:	60da      	str	r2, [r3, #12]
 800cc74:	e0c2      	b.n	800cdfc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cc7c:	e0be      	b.n	800cdfc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	69db      	ldr	r3, [r3, #28]
 800cc82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc86:	d16a      	bne.n	800cd5e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800cc88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc8c:	2b08      	cmp	r3, #8
 800cc8e:	d834      	bhi.n	800ccfa <UART_SetConfig+0x336>
 800cc90:	a201      	add	r2, pc, #4	; (adr r2, 800cc98 <UART_SetConfig+0x2d4>)
 800cc92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc96:	bf00      	nop
 800cc98:	0800ccbd 	.word	0x0800ccbd
 800cc9c:	0800ccdd 	.word	0x0800ccdd
 800cca0:	0800cce5 	.word	0x0800cce5
 800cca4:	0800ccfb 	.word	0x0800ccfb
 800cca8:	0800cceb 	.word	0x0800cceb
 800ccac:	0800ccfb 	.word	0x0800ccfb
 800ccb0:	0800ccfb 	.word	0x0800ccfb
 800ccb4:	0800ccfb 	.word	0x0800ccfb
 800ccb8:	0800ccf3 	.word	0x0800ccf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccbc:	f7fd fc64 	bl	800a588 <HAL_RCC_GetPCLK1Freq>
 800ccc0:	61f8      	str	r0, [r7, #28]
        break;
 800ccc2:	e020      	b.n	800cd06 <UART_SetConfig+0x342>
 800ccc4:	efff69f3 	.word	0xefff69f3
 800ccc8:	40008000 	.word	0x40008000
 800cccc:	40013800 	.word	0x40013800
 800ccd0:	40021000 	.word	0x40021000
 800ccd4:	40004400 	.word	0x40004400
 800ccd8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccdc:	f7fd fc6a 	bl	800a5b4 <HAL_RCC_GetPCLK2Freq>
 800cce0:	61f8      	str	r0, [r7, #28]
        break;
 800cce2:	e010      	b.n	800cd06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cce4:	4b4c      	ldr	r3, [pc, #304]	; (800ce18 <UART_SetConfig+0x454>)
 800cce6:	61fb      	str	r3, [r7, #28]
        break;
 800cce8:	e00d      	b.n	800cd06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ccea:	f7fd fbb5 	bl	800a458 <HAL_RCC_GetSysClockFreq>
 800ccee:	61f8      	str	r0, [r7, #28]
        break;
 800ccf0:	e009      	b.n	800cd06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccf6:	61fb      	str	r3, [r7, #28]
        break;
 800ccf8:	e005      	b.n	800cd06 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cd04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d077      	beq.n	800cdfc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	005a      	lsls	r2, r3, #1
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	085b      	lsrs	r3, r3, #1
 800cd16:	441a      	add	r2, r3
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	2b0f      	cmp	r3, #15
 800cd26:	d916      	bls.n	800cd56 <UART_SetConfig+0x392>
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd2e:	d212      	bcs.n	800cd56 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	f023 030f 	bic.w	r3, r3, #15
 800cd38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	085b      	lsrs	r3, r3, #1
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	f003 0307 	and.w	r3, r3, #7
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	8afb      	ldrh	r3, [r7, #22]
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	8afa      	ldrh	r2, [r7, #22]
 800cd52:	60da      	str	r2, [r3, #12]
 800cd54:	e052      	b.n	800cdfc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800cd56:	2301      	movs	r3, #1
 800cd58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cd5c:	e04e      	b.n	800cdfc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cd62:	2b08      	cmp	r3, #8
 800cd64:	d827      	bhi.n	800cdb6 <UART_SetConfig+0x3f2>
 800cd66:	a201      	add	r2, pc, #4	; (adr r2, 800cd6c <UART_SetConfig+0x3a8>)
 800cd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd6c:	0800cd91 	.word	0x0800cd91
 800cd70:	0800cd99 	.word	0x0800cd99
 800cd74:	0800cda1 	.word	0x0800cda1
 800cd78:	0800cdb7 	.word	0x0800cdb7
 800cd7c:	0800cda7 	.word	0x0800cda7
 800cd80:	0800cdb7 	.word	0x0800cdb7
 800cd84:	0800cdb7 	.word	0x0800cdb7
 800cd88:	0800cdb7 	.word	0x0800cdb7
 800cd8c:	0800cdaf 	.word	0x0800cdaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd90:	f7fd fbfa 	bl	800a588 <HAL_RCC_GetPCLK1Freq>
 800cd94:	61f8      	str	r0, [r7, #28]
        break;
 800cd96:	e014      	b.n	800cdc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd98:	f7fd fc0c 	bl	800a5b4 <HAL_RCC_GetPCLK2Freq>
 800cd9c:	61f8      	str	r0, [r7, #28]
        break;
 800cd9e:	e010      	b.n	800cdc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cda0:	4b1d      	ldr	r3, [pc, #116]	; (800ce18 <UART_SetConfig+0x454>)
 800cda2:	61fb      	str	r3, [r7, #28]
        break;
 800cda4:	e00d      	b.n	800cdc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cda6:	f7fd fb57 	bl	800a458 <HAL_RCC_GetSysClockFreq>
 800cdaa:	61f8      	str	r0, [r7, #28]
        break;
 800cdac:	e009      	b.n	800cdc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdb2:	61fb      	str	r3, [r7, #28]
        break;
 800cdb4:	e005      	b.n	800cdc2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cdc0:	bf00      	nop
    }

    if (pclk != 0U)
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d019      	beq.n	800cdfc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	085a      	lsrs	r2, r3, #1
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	441a      	add	r2, r3
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	2b0f      	cmp	r3, #15
 800cde0:	d909      	bls.n	800cdf6 <UART_SetConfig+0x432>
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cde8:	d205      	bcs.n	800cdf6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdea:	69bb      	ldr	r3, [r7, #24]
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	60da      	str	r2, [r3, #12]
 800cdf4:	e002      	b.n	800cdfc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2200      	movs	r2, #0
 800ce06:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ce08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3728      	adds	r7, #40	; 0x28
 800ce10:	46bd      	mov	sp, r7
 800ce12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce16:	bf00      	nop
 800ce18:	00f42400 	.word	0x00f42400

0800ce1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce28:	f003 0308 	and.w	r3, r3, #8
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00a      	beq.n	800ce46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	430a      	orrs	r2, r1
 800ce44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4a:	f003 0301 	and.w	r3, r3, #1
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00a      	beq.n	800ce68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	430a      	orrs	r2, r1
 800ce66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6c:	f003 0302 	and.w	r3, r3, #2
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00a      	beq.n	800ce8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	430a      	orrs	r2, r1
 800ce88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8e:	f003 0304 	and.w	r3, r3, #4
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00a      	beq.n	800ceac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	430a      	orrs	r2, r1
 800ceaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb0:	f003 0310 	and.w	r3, r3, #16
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d00a      	beq.n	800cece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	430a      	orrs	r2, r1
 800cecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced2:	f003 0320 	and.w	r3, r3, #32
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00a      	beq.n	800cef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	430a      	orrs	r2, r1
 800ceee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d01a      	beq.n	800cf32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	430a      	orrs	r2, r1
 800cf10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf1a:	d10a      	bne.n	800cf32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	430a      	orrs	r2, r1
 800cf30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00a      	beq.n	800cf54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	430a      	orrs	r2, r1
 800cf52:	605a      	str	r2, [r3, #4]
  }
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b098      	sub	sp, #96	; 0x60
 800cf64:	af02      	add	r7, sp, #8
 800cf66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf70:	f7f8 faa2 	bl	80054b8 <HAL_GetTick>
 800cf74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f003 0308 	and.w	r3, r3, #8
 800cf80:	2b08      	cmp	r3, #8
 800cf82:	d12e      	bne.n	800cfe2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 f88c 	bl	800d0b0 <UART_WaitOnFlagUntilTimeout>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d021      	beq.n	800cfe2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa6:	e853 3f00 	ldrex	r3, [r3]
 800cfaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfb2:	653b      	str	r3, [r7, #80]	; 0x50
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	461a      	mov	r2, r3
 800cfba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfbc:	647b      	str	r3, [r7, #68]	; 0x44
 800cfbe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cfc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfc4:	e841 2300 	strex	r3, r2, [r1]
 800cfc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cfca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1e6      	bne.n	800cf9e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2220      	movs	r2, #32
 800cfd4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfde:	2303      	movs	r3, #3
 800cfe0:	e062      	b.n	800d0a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f003 0304 	and.w	r3, r3, #4
 800cfec:	2b04      	cmp	r3, #4
 800cfee:	d149      	bne.n	800d084 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cff8:	2200      	movs	r2, #0
 800cffa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 f856 	bl	800d0b0 <UART_WaitOnFlagUntilTimeout>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d03c      	beq.n	800d084 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d012:	e853 3f00 	ldrex	r3, [r3]
 800d016:	623b      	str	r3, [r7, #32]
   return(result);
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d01e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	461a      	mov	r2, r3
 800d026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d028:	633b      	str	r3, [r7, #48]	; 0x30
 800d02a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d02c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d02e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d030:	e841 2300 	strex	r3, r2, [r1]
 800d034:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1e6      	bne.n	800d00a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	3308      	adds	r3, #8
 800d042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	e853 3f00 	ldrex	r3, [r3]
 800d04a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f023 0301 	bic.w	r3, r3, #1
 800d052:	64bb      	str	r3, [r7, #72]	; 0x48
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	3308      	adds	r3, #8
 800d05a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d05c:	61fa      	str	r2, [r7, #28]
 800d05e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d060:	69b9      	ldr	r1, [r7, #24]
 800d062:	69fa      	ldr	r2, [r7, #28]
 800d064:	e841 2300 	strex	r3, r2, [r1]
 800d068:	617b      	str	r3, [r7, #20]
   return(result);
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1e5      	bne.n	800d03c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2220      	movs	r2, #32
 800d074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d080:	2303      	movs	r3, #3
 800d082:	e011      	b.n	800d0a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2220      	movs	r2, #32
 800d088:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2220      	movs	r2, #32
 800d08e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800d0a6:	2300      	movs	r3, #0
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3758      	adds	r7, #88	; 0x58
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	603b      	str	r3, [r7, #0]
 800d0bc:	4613      	mov	r3, r2
 800d0be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0c0:	e049      	b.n	800d156 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c8:	d045      	beq.n	800d156 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0ca:	f7f8 f9f5 	bl	80054b8 <HAL_GetTick>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	69ba      	ldr	r2, [r7, #24]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d302      	bcc.n	800d0e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d101      	bne.n	800d0e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d0e0:	2303      	movs	r3, #3
 800d0e2:	e048      	b.n	800d176 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f003 0304 	and.w	r3, r3, #4
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d031      	beq.n	800d156 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	69db      	ldr	r3, [r3, #28]
 800d0f8:	f003 0308 	and.w	r3, r3, #8
 800d0fc:	2b08      	cmp	r3, #8
 800d0fe:	d110      	bne.n	800d122 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2208      	movs	r2, #8
 800d106:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f000 f8ff 	bl	800d30c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2208      	movs	r2, #8
 800d112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	e029      	b.n	800d176 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	69db      	ldr	r3, [r3, #28]
 800d128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d12c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d130:	d111      	bne.n	800d156 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d13a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f000 f8e5 	bl	800d30c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2220      	movs	r2, #32
 800d146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800d152:	2303      	movs	r3, #3
 800d154:	e00f      	b.n	800d176 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	69da      	ldr	r2, [r3, #28]
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	4013      	ands	r3, r2
 800d160:	68ba      	ldr	r2, [r7, #8]
 800d162:	429a      	cmp	r2, r3
 800d164:	bf0c      	ite	eq
 800d166:	2301      	moveq	r3, #1
 800d168:	2300      	movne	r3, #0
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	461a      	mov	r2, r3
 800d16e:	79fb      	ldrb	r3, [r7, #7]
 800d170:	429a      	cmp	r2, r3
 800d172:	d0a6      	beq.n	800d0c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
	...

0800d180 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b096      	sub	sp, #88	; 0x58
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	4613      	mov	r3, r2
 800d18c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	68ba      	ldr	r2, [r7, #8]
 800d192:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	88fa      	ldrh	r2, [r7, #6]
 800d198:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2222      	movs	r2, #34	; 0x22
 800d1a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d028      	beq.n	800d206 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1b8:	4a3e      	ldr	r2, [pc, #248]	; (800d2b4 <UART_Start_Receive_DMA+0x134>)
 800d1ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1c0:	4a3d      	ldr	r2, [pc, #244]	; (800d2b8 <UART_Start_Receive_DMA+0x138>)
 800d1c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1c8:	4a3c      	ldr	r2, [pc, #240]	; (800d2bc <UART_Start_Receive_DMA+0x13c>)
 800d1ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3324      	adds	r3, #36	; 0x24
 800d1de:	4619      	mov	r1, r3
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	88fb      	ldrh	r3, [r7, #6]
 800d1e8:	f7f9 fe00 	bl	8006dec <HAL_DMA_Start_IT>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d009      	beq.n	800d206 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2210      	movs	r2, #16
 800d1f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2220      	movs	r2, #32
 800d1fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800d202:	2301      	movs	r3, #1
 800d204:	e051      	b.n	800d2aa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d018      	beq.n	800d240 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d216:	e853 3f00 	ldrex	r3, [r3]
 800d21a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d222:	657b      	str	r3, [r7, #84]	; 0x54
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	461a      	mov	r2, r3
 800d22a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d22c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d22e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d230:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d234:	e841 2300 	strex	r3, r2, [r1]
 800d238:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d23a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1e6      	bne.n	800d20e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	3308      	adds	r3, #8
 800d246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24a:	e853 3f00 	ldrex	r3, [r3]
 800d24e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	f043 0301 	orr.w	r3, r3, #1
 800d256:	653b      	str	r3, [r7, #80]	; 0x50
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	3308      	adds	r3, #8
 800d25e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d260:	637a      	str	r2, [r7, #52]	; 0x34
 800d262:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d268:	e841 2300 	strex	r3, r2, [r1]
 800d26c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d270:	2b00      	cmp	r3, #0
 800d272:	d1e5      	bne.n	800d240 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	3308      	adds	r3, #8
 800d27a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	e853 3f00 	ldrex	r3, [r3]
 800d282:	613b      	str	r3, [r7, #16]
   return(result);
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d28a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	3308      	adds	r3, #8
 800d292:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d294:	623a      	str	r2, [r7, #32]
 800d296:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d298:	69f9      	ldr	r1, [r7, #28]
 800d29a:	6a3a      	ldr	r2, [r7, #32]
 800d29c:	e841 2300 	strex	r3, r2, [r1]
 800d2a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d1e5      	bne.n	800d274 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3758      	adds	r7, #88	; 0x58
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	0800d3d5 	.word	0x0800d3d5
 800d2b8:	0800d501 	.word	0x0800d501
 800d2bc:	0800d53f 	.word	0x0800d53f

0800d2c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b089      	sub	sp, #36	; 0x24
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	e853 3f00 	ldrex	r3, [r3]
 800d2d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d2dc:	61fb      	str	r3, [r7, #28]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	61bb      	str	r3, [r7, #24]
 800d2e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ea:	6979      	ldr	r1, [r7, #20]
 800d2ec:	69ba      	ldr	r2, [r7, #24]
 800d2ee:	e841 2300 	strex	r3, r2, [r1]
 800d2f2:	613b      	str	r3, [r7, #16]
   return(result);
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d1e6      	bne.n	800d2c8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2220      	movs	r2, #32
 800d2fe:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800d300:	bf00      	nop
 800d302:	3724      	adds	r7, #36	; 0x24
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b095      	sub	sp, #84	; 0x54
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31c:	e853 3f00 	ldrex	r3, [r3]
 800d320:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d324:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d328:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	461a      	mov	r2, r3
 800d330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d332:	643b      	str	r3, [r7, #64]	; 0x40
 800d334:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d336:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d33a:	e841 2300 	strex	r3, r2, [r1]
 800d33e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1e6      	bne.n	800d314 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	3308      	adds	r3, #8
 800d34c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d34e:	6a3b      	ldr	r3, [r7, #32]
 800d350:	e853 3f00 	ldrex	r3, [r3]
 800d354:	61fb      	str	r3, [r7, #28]
   return(result);
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	f023 0301 	bic.w	r3, r3, #1
 800d35c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	3308      	adds	r3, #8
 800d364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d366:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d368:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d36c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d36e:	e841 2300 	strex	r3, r2, [r1]
 800d372:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1e5      	bne.n	800d346 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d118      	bne.n	800d3b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	e853 3f00 	ldrex	r3, [r3]
 800d38e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	f023 0310 	bic.w	r3, r3, #16
 800d396:	647b      	str	r3, [r7, #68]	; 0x44
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	461a      	mov	r2, r3
 800d39e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3a0:	61bb      	str	r3, [r7, #24]
 800d3a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a4:	6979      	ldr	r1, [r7, #20]
 800d3a6:	69ba      	ldr	r2, [r7, #24]
 800d3a8:	e841 2300 	strex	r3, r2, [r1]
 800d3ac:	613b      	str	r3, [r7, #16]
   return(result);
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d1e6      	bne.n	800d382 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2220      	movs	r2, #32
 800d3b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800d3c8:	bf00      	nop
 800d3ca:	3754      	adds	r7, #84	; 0x54
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b09c      	sub	sp, #112	; 0x70
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f003 0320 	and.w	r3, r3, #32
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d171      	bne.n	800d4d4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d3f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d400:	e853 3f00 	ldrex	r3, [r3]
 800d404:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d40c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d40e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	461a      	mov	r2, r3
 800d414:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d416:	65bb      	str	r3, [r7, #88]	; 0x58
 800d418:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d41c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d41e:	e841 2300 	strex	r3, r2, [r1]
 800d422:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1e6      	bne.n	800d3f8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d42a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3308      	adds	r3, #8
 800d430:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d434:	e853 3f00 	ldrex	r3, [r3]
 800d438:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d43c:	f023 0301 	bic.w	r3, r3, #1
 800d440:	667b      	str	r3, [r7, #100]	; 0x64
 800d442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	3308      	adds	r3, #8
 800d448:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d44a:	647a      	str	r2, [r7, #68]	; 0x44
 800d44c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d44e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d452:	e841 2300 	strex	r3, r2, [r1]
 800d456:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1e5      	bne.n	800d42a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d45e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	3308      	adds	r3, #8
 800d464:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d468:	e853 3f00 	ldrex	r3, [r3]
 800d46c:	623b      	str	r3, [r7, #32]
   return(result);
 800d46e:	6a3b      	ldr	r3, [r7, #32]
 800d470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d474:	663b      	str	r3, [r7, #96]	; 0x60
 800d476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	3308      	adds	r3, #8
 800d47c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d47e:	633a      	str	r2, [r7, #48]	; 0x30
 800d480:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d486:	e841 2300 	strex	r3, r2, [r1]
 800d48a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1e5      	bne.n	800d45e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d494:	2220      	movs	r2, #32
 800d496:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d49a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d49c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d118      	bne.n	800d4d4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	e853 3f00 	ldrex	r3, [r3]
 800d4ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f023 0310 	bic.w	r3, r3, #16
 800d4b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4c0:	61fb      	str	r3, [r7, #28]
 800d4c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c4:	69b9      	ldr	r1, [r7, #24]
 800d4c6:	69fa      	ldr	r2, [r7, #28]
 800d4c8:	e841 2300 	strex	r3, r2, [r1]
 800d4cc:	617b      	str	r3, [r7, #20]
   return(result);
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1e6      	bne.n	800d4a2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d107      	bne.n	800d4f2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d4ec:	f7ff fa5e 	bl	800c9ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d4f0:	e002      	b.n	800d4f8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800d4f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d4f4:	f7f7 fedc 	bl	80052b0 <HAL_UART_RxCpltCallback>
}
 800d4f8:	bf00      	nop
 800d4fa:	3770      	adds	r7, #112	; 0x70
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d50c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2201      	movs	r2, #1
 800d512:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d109      	bne.n	800d530 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d522:	085b      	lsrs	r3, r3, #1
 800d524:	b29b      	uxth	r3, r3
 800d526:	4619      	mov	r1, r3
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f7ff fa3f 	bl	800c9ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d52e:	e002      	b.n	800d536 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f7ff fa27 	bl	800c984 <HAL_UART_RxHalfCpltCallback>
}
 800d536:	bf00      	nop
 800d538:	3710      	adds	r7, #16
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d53e:	b580      	push	{r7, lr}
 800d540:	b086      	sub	sp, #24
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d54a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d550:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d558:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d564:	2b80      	cmp	r3, #128	; 0x80
 800d566:	d109      	bne.n	800d57c <UART_DMAError+0x3e>
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	2b21      	cmp	r3, #33	; 0x21
 800d56c:	d106      	bne.n	800d57c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	2200      	movs	r2, #0
 800d572:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800d576:	6978      	ldr	r0, [r7, #20]
 800d578:	f7ff fea2 	bl	800d2c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d586:	2b40      	cmp	r3, #64	; 0x40
 800d588:	d109      	bne.n	800d59e <UART_DMAError+0x60>
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2b22      	cmp	r3, #34	; 0x22
 800d58e:	d106      	bne.n	800d59e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	2200      	movs	r2, #0
 800d594:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800d598:	6978      	ldr	r0, [r7, #20]
 800d59a:	f7ff feb7 	bl	800d30c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5a4:	f043 0210 	orr.w	r2, r3, #16
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5ae:	6978      	ldr	r0, [r7, #20]
 800d5b0:	f7ff f9f2 	bl	800c998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5b4:	bf00      	nop
 800d5b6:	3718      	adds	r7, #24
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5da:	68f8      	ldr	r0, [r7, #12]
 800d5dc:	f7ff f9dc 	bl	800c998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5e0:	bf00      	nop
 800d5e2:	3710      	adds	r7, #16
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b088      	sub	sp, #32
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	e853 3f00 	ldrex	r3, [r3]
 800d5fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d604:	61fb      	str	r3, [r7, #28]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	461a      	mov	r2, r3
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	61bb      	str	r3, [r7, #24]
 800d610:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d612:	6979      	ldr	r1, [r7, #20]
 800d614:	69ba      	ldr	r2, [r7, #24]
 800d616:	e841 2300 	strex	r3, r2, [r1]
 800d61a:	613b      	str	r3, [r7, #16]
   return(result);
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1e6      	bne.n	800d5f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2220      	movs	r2, #32
 800d626:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f7ff f99e 	bl	800c970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d634:	bf00      	nop
 800d636:	3720      	adds	r7, #32
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d644:	bf00      	nop
 800d646:	370c      	adds	r7, #12
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d650:	b084      	sub	sp, #16
 800d652:	b480      	push	{r7}
 800d654:	b083      	sub	sp, #12
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
 800d65a:	f107 0014 	add.w	r0, r7, #20
 800d65e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	b004      	add	sp, #16
 800d670:	4770      	bx	lr

0800d672 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800d672:	b480      	push	{r7}
 800d674:	b085      	sub	sp, #20
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2200      	movs	r2, #0
 800d67e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d682:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d686:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3714      	adds	r7, #20
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d6a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d6ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	43db      	mvns	r3, r3
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	4013      	ands	r3, r2
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3714      	adds	r7, #20
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr

0800d6d6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800d6d6:	b480      	push	{r7}
 800d6d8:	b083      	sub	sp, #12
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
 800d6de:	460b      	mov	r3, r1
 800d6e0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800d6e2:	2300      	movs	r3, #0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d6f0:	b084      	sub	sp, #16
 800d6f2:	b480      	push	{r7}
 800d6f4:	b083      	sub	sp, #12
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
 800d6fa:	f107 0014 	add.w	r0, r7, #20
 800d6fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2201      	movs	r2, #1
 800d706:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2200      	movs	r2, #0
 800d716:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d722:	2300      	movs	r3, #0
}
 800d724:	4618      	mov	r0, r3
 800d726:	370c      	adds	r7, #12
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	b004      	add	sp, #16
 800d730:	4770      	bx	lr
	...

0800d734 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d734:	b480      	push	{r7}
 800d736:	b09d      	sub	sp, #116	; 0x74
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d73e:	2300      	movs	r3, #0
 800d740:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	4413      	add	r3, r2
 800d74e:	881b      	ldrh	r3, [r3, #0]
 800d750:	b29b      	uxth	r3, r3
 800d752:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800d756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d75a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	78db      	ldrb	r3, [r3, #3]
 800d762:	2b03      	cmp	r3, #3
 800d764:	d81f      	bhi.n	800d7a6 <USB_ActivateEndpoint+0x72>
 800d766:	a201      	add	r2, pc, #4	; (adr r2, 800d76c <USB_ActivateEndpoint+0x38>)
 800d768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76c:	0800d77d 	.word	0x0800d77d
 800d770:	0800d799 	.word	0x0800d799
 800d774:	0800d7af 	.word	0x0800d7af
 800d778:	0800d78b 	.word	0x0800d78b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d77c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d780:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d784:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d788:	e012      	b.n	800d7b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d78a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d78e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800d792:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d796:	e00b      	b.n	800d7b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d798:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d79c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d7a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d7a4:	e004      	b.n	800d7b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800d7ac:	e000      	b.n	800d7b0 <USB_ActivateEndpoint+0x7c>
      break;
 800d7ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	441a      	add	r2, r3
 800d7ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d7be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	4413      	add	r3, r2
 800d7dc:	881b      	ldrh	r3, [r3, #0]
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	b21b      	sxth	r3, r3
 800d7e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7ea:	b21a      	sxth	r2, r3
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	b21b      	sxth	r3, r3
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	b21b      	sxth	r3, r3
 800d7f6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	441a      	add	r2, r3
 800d804:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d80c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d818:	b29b      	uxth	r3, r3
 800d81a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	7b1b      	ldrb	r3, [r3, #12]
 800d820:	2b00      	cmp	r3, #0
 800d822:	f040 8178 	bne.w	800db16 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	785b      	ldrb	r3, [r3, #1]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	f000 8084 	beq.w	800d938 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	61bb      	str	r3, [r7, #24]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	461a      	mov	r2, r3
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	4413      	add	r3, r2
 800d842:	61bb      	str	r3, [r7, #24]
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	00da      	lsls	r2, r3, #3
 800d84a:	69bb      	ldr	r3, [r7, #24]
 800d84c:	4413      	add	r3, r2
 800d84e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d852:	617b      	str	r3, [r7, #20]
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	88db      	ldrh	r3, [r3, #6]
 800d858:	085b      	lsrs	r3, r3, #1
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	005b      	lsls	r3, r3, #1
 800d85e:	b29a      	uxth	r2, r3
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	4413      	add	r3, r2
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	827b      	strh	r3, [r7, #18]
 800d872:	8a7b      	ldrh	r3, [r7, #18]
 800d874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d01b      	beq.n	800d8b4 <USB_ActivateEndpoint+0x180>
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	4413      	add	r3, r2
 800d886:	881b      	ldrh	r3, [r3, #0]
 800d888:	b29b      	uxth	r3, r3
 800d88a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d88e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d892:	823b      	strh	r3, [r7, #16]
 800d894:	687a      	ldr	r2, [r7, #4]
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	441a      	add	r2, r3
 800d89e:	8a3b      	ldrh	r3, [r7, #16]
 800d8a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d8a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d8a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d8ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	78db      	ldrb	r3, [r3, #3]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d020      	beq.n	800d8fe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d8bc:	687a      	ldr	r2, [r7, #4]
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	4413      	add	r3, r2
 800d8c6:	881b      	ldrh	r3, [r3, #0]
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8d2:	81bb      	strh	r3, [r7, #12]
 800d8d4:	89bb      	ldrh	r3, [r7, #12]
 800d8d6:	f083 0320 	eor.w	r3, r3, #32
 800d8da:	81bb      	strh	r3, [r7, #12]
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	441a      	add	r2, r3
 800d8e6:	89bb      	ldrh	r3, [r7, #12]
 800d8e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d8ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d8f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d8f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	8013      	strh	r3, [r2, #0]
 800d8fc:	e2d5      	b.n	800deaa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	4413      	add	r3, r2
 800d908:	881b      	ldrh	r3, [r3, #0]
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d914:	81fb      	strh	r3, [r7, #14]
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	441a      	add	r2, r3
 800d920:	89fb      	ldrh	r3, [r7, #14]
 800d922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d92a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d92e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d932:	b29b      	uxth	r3, r3
 800d934:	8013      	strh	r3, [r2, #0]
 800d936:	e2b8      	b.n	800deaa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	633b      	str	r3, [r7, #48]	; 0x30
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d942:	b29b      	uxth	r3, r3
 800d944:	461a      	mov	r2, r3
 800d946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d948:	4413      	add	r3, r2
 800d94a:	633b      	str	r3, [r7, #48]	; 0x30
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	00da      	lsls	r2, r3, #3
 800d952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d954:	4413      	add	r3, r2
 800d956:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d95a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	88db      	ldrh	r3, [r3, #6]
 800d960:	085b      	lsrs	r3, r3, #1
 800d962:	b29b      	uxth	r3, r3
 800d964:	005b      	lsls	r3, r3, #1
 800d966:	b29a      	uxth	r2, r3
 800d968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d976:	b29b      	uxth	r3, r3
 800d978:	461a      	mov	r2, r3
 800d97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97c:	4413      	add	r3, r2
 800d97e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	00da      	lsls	r2, r3, #3
 800d986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d988:	4413      	add	r3, r2
 800d98a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d98e:	627b      	str	r3, [r7, #36]	; 0x24
 800d990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d992:	881b      	ldrh	r3, [r3, #0]
 800d994:	b29b      	uxth	r3, r3
 800d996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99e:	801a      	strh	r2, [r3, #0]
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	691b      	ldr	r3, [r3, #16]
 800d9a4:	2b3e      	cmp	r3, #62	; 0x3e
 800d9a6:	d91d      	bls.n	800d9e4 <USB_ActivateEndpoint+0x2b0>
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	691b      	ldr	r3, [r3, #16]
 800d9ac:	095b      	lsrs	r3, r3, #5
 800d9ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	f003 031f 	and.w	r3, r3, #31
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d102      	bne.n	800d9c2 <USB_ActivateEndpoint+0x28e>
 800d9bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c4:	881b      	ldrh	r3, [r3, #0]
 800d9c6:	b29a      	uxth	r2, r3
 800d9c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	029b      	lsls	r3, r3, #10
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9dc:	b29a      	uxth	r2, r3
 800d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e0:	801a      	strh	r2, [r3, #0]
 800d9e2:	e026      	b.n	800da32 <USB_ActivateEndpoint+0x2fe>
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	691b      	ldr	r3, [r3, #16]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d10a      	bne.n	800da02 <USB_ActivateEndpoint+0x2ce>
 800d9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ee:	881b      	ldrh	r3, [r3, #0]
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9fa:	b29a      	uxth	r2, r3
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fe:	801a      	strh	r2, [r3, #0]
 800da00:	e017      	b.n	800da32 <USB_ActivateEndpoint+0x2fe>
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	691b      	ldr	r3, [r3, #16]
 800da06:	085b      	lsrs	r3, r3, #1
 800da08:	66bb      	str	r3, [r7, #104]	; 0x68
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	691b      	ldr	r3, [r3, #16]
 800da0e:	f003 0301 	and.w	r3, r3, #1
 800da12:	2b00      	cmp	r3, #0
 800da14:	d002      	beq.n	800da1c <USB_ActivateEndpoint+0x2e8>
 800da16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da18:	3301      	adds	r3, #1
 800da1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800da1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1e:	881b      	ldrh	r3, [r3, #0]
 800da20:	b29a      	uxth	r2, r3
 800da22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da24:	b29b      	uxth	r3, r3
 800da26:	029b      	lsls	r3, r3, #10
 800da28:	b29b      	uxth	r3, r3
 800da2a:	4313      	orrs	r3, r2
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	4413      	add	r3, r2
 800da3c:	881b      	ldrh	r3, [r3, #0]
 800da3e:	847b      	strh	r3, [r7, #34]	; 0x22
 800da40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da46:	2b00      	cmp	r3, #0
 800da48:	d01b      	beq.n	800da82 <USB_ActivateEndpoint+0x34e>
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	4413      	add	r3, r2
 800da54:	881b      	ldrh	r3, [r3, #0]
 800da56:	b29b      	uxth	r3, r3
 800da58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da60:	843b      	strh	r3, [r7, #32]
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	441a      	add	r2, r3
 800da6c:	8c3b      	ldrh	r3, [r7, #32]
 800da6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800da7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da7e:	b29b      	uxth	r3, r3
 800da80:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d124      	bne.n	800dad4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	4413      	add	r3, r2
 800da94:	881b      	ldrh	r3, [r3, #0]
 800da96:	b29b      	uxth	r3, r3
 800da98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daa0:	83bb      	strh	r3, [r7, #28]
 800daa2:	8bbb      	ldrh	r3, [r7, #28]
 800daa4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800daa8:	83bb      	strh	r3, [r7, #28]
 800daaa:	8bbb      	ldrh	r3, [r7, #28]
 800daac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dab0:	83bb      	strh	r3, [r7, #28]
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	009b      	lsls	r3, r3, #2
 800daba:	441a      	add	r2, r3
 800dabc:	8bbb      	ldrh	r3, [r7, #28]
 800dabe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800daca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dace:	b29b      	uxth	r3, r3
 800dad0:	8013      	strh	r3, [r2, #0]
 800dad2:	e1ea      	b.n	800deaa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	009b      	lsls	r3, r3, #2
 800dadc:	4413      	add	r3, r2
 800dade:	881b      	ldrh	r3, [r3, #0]
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daea:	83fb      	strh	r3, [r7, #30]
 800daec:	8bfb      	ldrh	r3, [r7, #30]
 800daee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800daf2:	83fb      	strh	r3, [r7, #30]
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	441a      	add	r2, r3
 800dafe:	8bfb      	ldrh	r3, [r7, #30]
 800db00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db10:	b29b      	uxth	r3, r3
 800db12:	8013      	strh	r3, [r2, #0]
 800db14:	e1c9      	b.n	800deaa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	78db      	ldrb	r3, [r3, #3]
 800db1a:	2b02      	cmp	r3, #2
 800db1c:	d11e      	bne.n	800db5c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	4413      	add	r3, r2
 800db28:	881b      	ldrh	r3, [r3, #0]
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db34:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	441a      	add	r2, r3
 800db42:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800db46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db4e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800db52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db56:	b29b      	uxth	r3, r3
 800db58:	8013      	strh	r3, [r2, #0]
 800db5a:	e01d      	b.n	800db98 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	4413      	add	r3, r2
 800db66:	881b      	ldrh	r3, [r3, #0]
 800db68:	b29b      	uxth	r3, r3
 800db6a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800db6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db72:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	009b      	lsls	r3, r3, #2
 800db7e:	441a      	add	r2, r3
 800db80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800db84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db94:	b29b      	uxth	r3, r3
 800db96:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	461a      	mov	r2, r3
 800dba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dba8:	4413      	add	r3, r2
 800dbaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	00da      	lsls	r2, r3, #3
 800dbb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbb4:	4413      	add	r3, r2
 800dbb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dbba:	65bb      	str	r3, [r7, #88]	; 0x58
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	891b      	ldrh	r3, [r3, #8]
 800dbc0:	085b      	lsrs	r3, r3, #1
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	b29a      	uxth	r2, r3
 800dbc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbca:	801a      	strh	r2, [r3, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	657b      	str	r3, [r7, #84]	; 0x54
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	461a      	mov	r2, r3
 800dbda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbdc:	4413      	add	r3, r2
 800dbde:	657b      	str	r3, [r7, #84]	; 0x54
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	00da      	lsls	r2, r3, #3
 800dbe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbe8:	4413      	add	r3, r2
 800dbea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dbee:	653b      	str	r3, [r7, #80]	; 0x50
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	895b      	ldrh	r3, [r3, #10]
 800dbf4:	085b      	lsrs	r3, r3, #1
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	005b      	lsls	r3, r3, #1
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbfe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	785b      	ldrb	r3, [r3, #1]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f040 8093 	bne.w	800dd30 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	4413      	add	r3, r2
 800dc14:	881b      	ldrh	r3, [r3, #0]
 800dc16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800dc1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dc1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d01b      	beq.n	800dc5e <USB_ActivateEndpoint+0x52a>
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	4413      	add	r3, r2
 800dc30:	881b      	ldrh	r3, [r3, #0]
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	441a      	add	r2, r3
 800dc48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dc4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dc56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	4413      	add	r3, r2
 800dc68:	881b      	ldrh	r3, [r3, #0]
 800dc6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800dc6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dc6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d01b      	beq.n	800dcae <USB_ActivateEndpoint+0x57a>
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	4413      	add	r3, r2
 800dc80:	881b      	ldrh	r3, [r3, #0]
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc8c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	441a      	add	r2, r3
 800dc98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dc9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dca6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	4413      	add	r3, r2
 800dcb8:	881b      	ldrh	r3, [r3, #0]
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dcc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcc4:	873b      	strh	r3, [r7, #56]	; 0x38
 800dcc6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dcc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dccc:	873b      	strh	r3, [r7, #56]	; 0x38
 800dcce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dcd0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dcd4:	873b      	strh	r3, [r7, #56]	; 0x38
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	441a      	add	r2, r3
 800dce0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dcea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	4413      	add	r3, r2
 800dd00:	881b      	ldrh	r3, [r3, #0]
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	441a      	add	r2, r3
 800dd18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dd1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	8013      	strh	r3, [r2, #0]
 800dd2e:	e0bc      	b.n	800deaa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	4413      	add	r3, r2
 800dd3a:	881b      	ldrh	r3, [r3, #0]
 800dd3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800dd40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dd44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d01d      	beq.n	800dd88 <USB_ActivateEndpoint+0x654>
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4413      	add	r3, r2
 800dd56:	881b      	ldrh	r3, [r3, #0]
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd62:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	441a      	add	r2, r3
 800dd70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800dd74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dd80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	4413      	add	r3, r2
 800dd92:	881b      	ldrh	r3, [r3, #0]
 800dd94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800dd98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800dd9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d01d      	beq.n	800dde0 <USB_ActivateEndpoint+0x6ac>
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4413      	add	r3, r2
 800ddae:	881b      	ldrh	r3, [r3, #0]
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	441a      	add	r2, r3
 800ddc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ddcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ddd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ddd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ddd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	78db      	ldrb	r3, [r3, #3]
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d024      	beq.n	800de32 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	4413      	add	r3, r2
 800ddf2:	881b      	ldrh	r3, [r3, #0]
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddfe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800de02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800de06:	f083 0320 	eor.w	r3, r3, #32
 800de0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	441a      	add	r2, r3
 800de18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800de1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	8013      	strh	r3, [r2, #0]
 800de30:	e01d      	b.n	800de6e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	4413      	add	r3, r2
 800de3c:	881b      	ldrh	r3, [r3, #0]
 800de3e:	b29b      	uxth	r3, r3
 800de40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de48:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	441a      	add	r2, r3
 800de56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800de6e:	687a      	ldr	r2, [r7, #4]
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	4413      	add	r3, r2
 800de78:	881b      	ldrh	r3, [r3, #0]
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800de80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	441a      	add	r2, r3
 800de92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800deaa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3774      	adds	r7, #116	; 0x74
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop

0800debc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800debc:	b480      	push	{r7}
 800debe:	b08d      	sub	sp, #52	; 0x34
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	7b1b      	ldrb	r3, [r3, #12]
 800deca:	2b00      	cmp	r3, #0
 800decc:	f040 808e 	bne.w	800dfec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	785b      	ldrb	r3, [r3, #1]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d044      	beq.n	800df62 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	4413      	add	r3, r2
 800dee2:	881b      	ldrh	r3, [r3, #0]
 800dee4:	81bb      	strh	r3, [r7, #12]
 800dee6:	89bb      	ldrh	r3, [r7, #12]
 800dee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deec:	2b00      	cmp	r3, #0
 800deee:	d01b      	beq.n	800df28 <USB_DeactivateEndpoint+0x6c>
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	4413      	add	r3, r2
 800defa:	881b      	ldrh	r3, [r3, #0]
 800defc:	b29b      	uxth	r3, r3
 800defe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df06:	817b      	strh	r3, [r7, #10]
 800df08:	687a      	ldr	r2, [r7, #4]
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	441a      	add	r2, r3
 800df12:	897b      	ldrh	r3, [r7, #10]
 800df14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800df24:	b29b      	uxth	r3, r3
 800df26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	4413      	add	r3, r2
 800df32:	881b      	ldrh	r3, [r3, #0]
 800df34:	b29b      	uxth	r3, r3
 800df36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df3e:	813b      	strh	r3, [r7, #8]
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	441a      	add	r2, r3
 800df4a:	893b      	ldrh	r3, [r7, #8]
 800df4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	8013      	strh	r3, [r2, #0]
 800df60:	e192      	b.n	800e288 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	4413      	add	r3, r2
 800df6c:	881b      	ldrh	r3, [r3, #0]
 800df6e:	827b      	strh	r3, [r7, #18]
 800df70:	8a7b      	ldrh	r3, [r7, #18]
 800df72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df76:	2b00      	cmp	r3, #0
 800df78:	d01b      	beq.n	800dfb2 <USB_DeactivateEndpoint+0xf6>
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	4413      	add	r3, r2
 800df84:	881b      	ldrh	r3, [r3, #0]
 800df86:	b29b      	uxth	r3, r3
 800df88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df90:	823b      	strh	r3, [r7, #16]
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	441a      	add	r2, r3
 800df9c:	8a3b      	ldrh	r3, [r7, #16]
 800df9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dfa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dfa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dfaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	881b      	ldrh	r3, [r3, #0]
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dfc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfc8:	81fb      	strh	r3, [r7, #14]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	441a      	add	r2, r3
 800dfd4:	89fb      	ldrh	r3, [r7, #14]
 800dfd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dfda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dfde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dfe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	8013      	strh	r3, [r2, #0]
 800dfea:	e14d      	b.n	800e288 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	785b      	ldrb	r3, [r3, #1]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f040 80a5 	bne.w	800e140 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	4413      	add	r3, r2
 800e000:	881b      	ldrh	r3, [r3, #0]
 800e002:	843b      	strh	r3, [r7, #32]
 800e004:	8c3b      	ldrh	r3, [r7, #32]
 800e006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d01b      	beq.n	800e046 <USB_DeactivateEndpoint+0x18a>
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	4413      	add	r3, r2
 800e018:	881b      	ldrh	r3, [r3, #0]
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e024:	83fb      	strh	r3, [r7, #30]
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	441a      	add	r2, r3
 800e030:	8bfb      	ldrh	r3, [r7, #30]
 800e032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e03a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e03e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e042:	b29b      	uxth	r3, r3
 800e044:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	4413      	add	r3, r2
 800e050:	881b      	ldrh	r3, [r3, #0]
 800e052:	83bb      	strh	r3, [r7, #28]
 800e054:	8bbb      	ldrh	r3, [r7, #28]
 800e056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d01b      	beq.n	800e096 <USB_DeactivateEndpoint+0x1da>
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4413      	add	r3, r2
 800e068:	881b      	ldrh	r3, [r3, #0]
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e074:	837b      	strh	r3, [r7, #26]
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	009b      	lsls	r3, r3, #2
 800e07e:	441a      	add	r2, r3
 800e080:	8b7b      	ldrh	r3, [r7, #26]
 800e082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e08a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e08e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e092:	b29b      	uxth	r3, r3
 800e094:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	4413      	add	r3, r2
 800e0a0:	881b      	ldrh	r3, [r3, #0]
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e0a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0ac:	833b      	strh	r3, [r7, #24]
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	441a      	add	r2, r3
 800e0b8:	8b3b      	ldrh	r3, [r7, #24]
 800e0ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	4413      	add	r3, r2
 800e0d8:	881b      	ldrh	r3, [r3, #0]
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e0e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0e4:	82fb      	strh	r3, [r7, #22]
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	441a      	add	r2, r3
 800e0f0:	8afb      	ldrh	r3, [r7, #22]
 800e0f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e102:	b29b      	uxth	r3, r3
 800e104:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e106:	687a      	ldr	r2, [r7, #4]
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	4413      	add	r3, r2
 800e110:	881b      	ldrh	r3, [r3, #0]
 800e112:	b29b      	uxth	r3, r3
 800e114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e11c:	82bb      	strh	r3, [r7, #20]
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	009b      	lsls	r3, r3, #2
 800e126:	441a      	add	r2, r3
 800e128:	8abb      	ldrh	r3, [r7, #20]
 800e12a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e12e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	8013      	strh	r3, [r2, #0]
 800e13e:	e0a3      	b.n	800e288 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	4413      	add	r3, r2
 800e14a:	881b      	ldrh	r3, [r3, #0]
 800e14c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e14e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e154:	2b00      	cmp	r3, #0
 800e156:	d01b      	beq.n	800e190 <USB_DeactivateEndpoint+0x2d4>
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4413      	add	r3, r2
 800e162:	881b      	ldrh	r3, [r3, #0]
 800e164:	b29b      	uxth	r3, r3
 800e166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e16a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e16e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	441a      	add	r2, r3
 800e17a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e17c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e184:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	4413      	add	r3, r2
 800e19a:	881b      	ldrh	r3, [r3, #0]
 800e19c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e19e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e1a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d01b      	beq.n	800e1e0 <USB_DeactivateEndpoint+0x324>
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	4413      	add	r3, r2
 800e1b2:	881b      	ldrh	r3, [r3, #0]
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e1ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1be:	853b      	strh	r3, [r7, #40]	; 0x28
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	441a      	add	r2, r3
 800e1ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e1cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e1e0:	687a      	ldr	r2, [r7, #4]
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	009b      	lsls	r3, r3, #2
 800e1e8:	4413      	add	r3, r2
 800e1ea:	881b      	ldrh	r3, [r3, #0]
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e1f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	441a      	add	r2, r3
 800e202:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e20c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e214:	b29b      	uxth	r3, r3
 800e216:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4413      	add	r3, r2
 800e222:	881b      	ldrh	r3, [r3, #0]
 800e224:	b29b      	uxth	r3, r3
 800e226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e22a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e22e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	441a      	add	r2, r3
 800e23a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e23c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4413      	add	r3, r2
 800e25a:	881b      	ldrh	r3, [r3, #0]
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e266:	847b      	strh	r3, [r7, #34]	; 0x22
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	441a      	add	r2, r3
 800e272:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e27c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e284:	b29b      	uxth	r3, r3
 800e286:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e288:	2300      	movs	r3, #0
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3734      	adds	r7, #52	; 0x34
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr

0800e296 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e296:	b580      	push	{r7, lr}
 800e298:	b0c2      	sub	sp, #264	; 0x108
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2a4:	6018      	str	r0, [r3, #0]
 800e2a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e2b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	785b      	ldrb	r3, [r3, #1]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	f040 86b7 	bne.w	800f030 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	699a      	ldr	r2, [r3, #24]
 800e2ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	691b      	ldr	r3, [r3, #16]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d908      	bls.n	800e2f0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800e2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e2ee:	e007      	b.n	800e300 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800e2f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	699b      	ldr	r3, [r3, #24]
 800e2fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	7b1b      	ldrb	r3, [r3, #12]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d13a      	bne.n	800e386 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	6959      	ldr	r1, [r3, #20]
 800e31c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	88da      	ldrh	r2, [r3, #6]
 800e328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e332:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e336:	6800      	ldr	r0, [r0, #0]
 800e338:	f001 fcb9 	bl	800fcae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e33c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e340:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	613b      	str	r3, [r7, #16]
 800e348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e34c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e356:	b29b      	uxth	r3, r3
 800e358:	461a      	mov	r2, r3
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	4413      	add	r3, r2
 800e35e:	613b      	str	r3, [r7, #16]
 800e360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	00da      	lsls	r2, r3, #3
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	4413      	add	r3, r2
 800e372:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e376:	60fb      	str	r3, [r7, #12]
 800e378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e37c:	b29a      	uxth	r2, r3
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	801a      	strh	r2, [r3, #0]
 800e382:	f000 be1f 	b.w	800efc4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e38a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	78db      	ldrb	r3, [r3, #3]
 800e392:	2b02      	cmp	r3, #2
 800e394:	f040 8462 	bne.w	800ec5c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e39c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	6a1a      	ldr	r2, [r3, #32]
 800e3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	691b      	ldr	r3, [r3, #16]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	f240 83df 	bls.w	800eb74 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e3b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	4413      	add	r3, r2
 800e3d0:	881b      	ldrh	r3, [r3, #0]
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e3d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800e3e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	441a      	add	r2, r3
 800e3fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e3fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e406:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e40a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e40e:	b29b      	uxth	r3, r3
 800e410:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	6a1a      	ldr	r2, [r3, #32]
 800e41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e422:	1ad2      	subs	r2, r2, r3
 800e424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e43e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	4413      	add	r3, r2
 800e44a:	881b      	ldrh	r3, [r3, #0]
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e452:	2b00      	cmp	r3, #0
 800e454:	f000 81c7 	beq.w	800e7e6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e45c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	633b      	str	r3, [r7, #48]	; 0x30
 800e464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	785b      	ldrb	r3, [r3, #1]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d177      	bne.n	800e564 <USB_EPStartXfer+0x2ce>
 800e474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e478:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e48e:	b29b      	uxth	r3, r3
 800e490:	461a      	mov	r2, r3
 800e492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e494:	4413      	add	r3, r2
 800e496:	62bb      	str	r3, [r7, #40]	; 0x28
 800e498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e49c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	00da      	lsls	r2, r3, #3
 800e4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a8:	4413      	add	r3, r2
 800e4aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e4ae:	627b      	str	r3, [r7, #36]	; 0x24
 800e4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b2:	881b      	ldrh	r3, [r3, #0]
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e4ba:	b29a      	uxth	r2, r3
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	801a      	strh	r2, [r3, #0]
 800e4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4c4:	2b3e      	cmp	r3, #62	; 0x3e
 800e4c6:	d921      	bls.n	800e50c <USB_EPStartXfer+0x276>
 800e4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4cc:	095b      	lsrs	r3, r3, #5
 800e4ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e4d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4d6:	f003 031f 	and.w	r3, r3, #31
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d104      	bne.n	800e4e8 <USB_EPStartXfer+0x252>
 800e4de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e4e2:	3b01      	subs	r3, #1
 800e4e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ea:	881b      	ldrh	r3, [r3, #0]
 800e4ec:	b29a      	uxth	r2, r3
 800e4ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	029b      	lsls	r3, r3, #10
 800e4f6:	b29b      	uxth	r3, r3
 800e4f8:	4313      	orrs	r3, r2
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e504:	b29a      	uxth	r2, r3
 800e506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e508:	801a      	strh	r2, [r3, #0]
 800e50a:	e050      	b.n	800e5ae <USB_EPStartXfer+0x318>
 800e50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e510:	2b00      	cmp	r3, #0
 800e512:	d10a      	bne.n	800e52a <USB_EPStartXfer+0x294>
 800e514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e516:	881b      	ldrh	r3, [r3, #0]
 800e518:	b29b      	uxth	r3, r3
 800e51a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e51e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e522:	b29a      	uxth	r2, r3
 800e524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e526:	801a      	strh	r2, [r3, #0]
 800e528:	e041      	b.n	800e5ae <USB_EPStartXfer+0x318>
 800e52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e52e:	085b      	lsrs	r3, r3, #1
 800e530:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e538:	f003 0301 	and.w	r3, r3, #1
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d004      	beq.n	800e54a <USB_EPStartXfer+0x2b4>
 800e540:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e544:	3301      	adds	r3, #1
 800e546:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54c:	881b      	ldrh	r3, [r3, #0]
 800e54e:	b29a      	uxth	r2, r3
 800e550:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e554:	b29b      	uxth	r3, r3
 800e556:	029b      	lsls	r3, r3, #10
 800e558:	b29b      	uxth	r3, r3
 800e55a:	4313      	orrs	r3, r2
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e560:	801a      	strh	r2, [r3, #0]
 800e562:	e024      	b.n	800e5ae <USB_EPStartXfer+0x318>
 800e564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	785b      	ldrb	r3, [r3, #1]
 800e570:	2b01      	cmp	r3, #1
 800e572:	d11c      	bne.n	800e5ae <USB_EPStartXfer+0x318>
 800e574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e582:	b29b      	uxth	r3, r3
 800e584:	461a      	mov	r2, r3
 800e586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e588:	4413      	add	r3, r2
 800e58a:	633b      	str	r3, [r7, #48]	; 0x30
 800e58c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	00da      	lsls	r2, r3, #3
 800e59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e59c:	4413      	add	r3, r2
 800e59e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5a8:	b29a      	uxth	r2, r3
 800e5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e5ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	895b      	ldrh	r3, [r3, #10]
 800e5ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e5be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6959      	ldr	r1, [r3, #20]
 800e5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e5d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e5d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e5dc:	6800      	ldr	r0, [r0, #0]
 800e5de:	f001 fb66 	bl	800fcae <USB_WritePMA>
            ep->xfer_buff += len;
 800e5e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	695a      	ldr	r2, [r3, #20]
 800e5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5f2:	441a      	add	r2, r3
 800e5f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	6a1a      	ldr	r2, [r3, #32]
 800e60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	691b      	ldr	r3, [r3, #16]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d90f      	bls.n	800e63c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800e61c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	6a1a      	ldr	r2, [r3, #32]
 800e628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e62c:	1ad2      	subs	r2, r2, r3
 800e62e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	621a      	str	r2, [r3, #32]
 800e63a:	e00e      	b.n	800e65a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800e63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	6a1b      	ldr	r3, [r3, #32]
 800e648:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e64c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2200      	movs	r2, #0
 800e658:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e65a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e65e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	785b      	ldrb	r3, [r3, #1]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d177      	bne.n	800e75a <USB_EPStartXfer+0x4c4>
 800e66a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e66e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	61bb      	str	r3, [r7, #24]
 800e676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e67a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e684:	b29b      	uxth	r3, r3
 800e686:	461a      	mov	r2, r3
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	4413      	add	r3, r2
 800e68c:	61bb      	str	r3, [r7, #24]
 800e68e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	00da      	lsls	r2, r3, #3
 800e69c:	69bb      	ldr	r3, [r7, #24]
 800e69e:	4413      	add	r3, r2
 800e6a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e6a4:	617b      	str	r3, [r7, #20]
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	881b      	ldrh	r3, [r3, #0]
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	801a      	strh	r2, [r3, #0]
 800e6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6ba:	2b3e      	cmp	r3, #62	; 0x3e
 800e6bc:	d921      	bls.n	800e702 <USB_EPStartXfer+0x46c>
 800e6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6c2:	095b      	lsrs	r3, r3, #5
 800e6c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6cc:	f003 031f 	and.w	r3, r3, #31
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d104      	bne.n	800e6de <USB_EPStartXfer+0x448>
 800e6d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e6d8:	3b01      	subs	r3, #1
 800e6da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	881b      	ldrh	r3, [r3, #0]
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	029b      	lsls	r3, r3, #10
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	4313      	orrs	r3, r2
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e6f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6fa:	b29a      	uxth	r2, r3
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	801a      	strh	r2, [r3, #0]
 800e700:	e056      	b.n	800e7b0 <USB_EPStartXfer+0x51a>
 800e702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e706:	2b00      	cmp	r3, #0
 800e708:	d10a      	bne.n	800e720 <USB_EPStartXfer+0x48a>
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	881b      	ldrh	r3, [r3, #0]
 800e70e:	b29b      	uxth	r3, r3
 800e710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e718:	b29a      	uxth	r2, r3
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	801a      	strh	r2, [r3, #0]
 800e71e:	e047      	b.n	800e7b0 <USB_EPStartXfer+0x51a>
 800e720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e724:	085b      	lsrs	r3, r3, #1
 800e726:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e72e:	f003 0301 	and.w	r3, r3, #1
 800e732:	2b00      	cmp	r3, #0
 800e734:	d004      	beq.n	800e740 <USB_EPStartXfer+0x4aa>
 800e736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e73a:	3301      	adds	r3, #1
 800e73c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	881b      	ldrh	r3, [r3, #0]
 800e744:	b29a      	uxth	r2, r3
 800e746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e74a:	b29b      	uxth	r3, r3
 800e74c:	029b      	lsls	r3, r3, #10
 800e74e:	b29b      	uxth	r3, r3
 800e750:	4313      	orrs	r3, r2
 800e752:	b29a      	uxth	r2, r3
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	801a      	strh	r2, [r3, #0]
 800e758:	e02a      	b.n	800e7b0 <USB_EPStartXfer+0x51a>
 800e75a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e75e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	785b      	ldrb	r3, [r3, #1]
 800e766:	2b01      	cmp	r3, #1
 800e768:	d122      	bne.n	800e7b0 <USB_EPStartXfer+0x51a>
 800e76a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e76e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	623b      	str	r3, [r7, #32]
 800e776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e77a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e784:	b29b      	uxth	r3, r3
 800e786:	461a      	mov	r2, r3
 800e788:	6a3b      	ldr	r3, [r7, #32]
 800e78a:	4413      	add	r3, r2
 800e78c:	623b      	str	r3, [r7, #32]
 800e78e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	781b      	ldrb	r3, [r3, #0]
 800e79a:	00da      	lsls	r2, r3, #3
 800e79c:	6a3b      	ldr	r3, [r7, #32]
 800e79e:	4413      	add	r3, r2
 800e7a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e7a4:	61fb      	str	r3, [r7, #28]
 800e7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e7b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	891b      	ldrh	r3, [r3, #8]
 800e7bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	6959      	ldr	r1, [r3, #20]
 800e7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e7d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e7da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e7de:	6800      	ldr	r0, [r0, #0]
 800e7e0:	f001 fa65 	bl	800fcae <USB_WritePMA>
 800e7e4:	e3ee      	b.n	800efc4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e7e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	785b      	ldrb	r3, [r3, #1]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d177      	bne.n	800e8e6 <USB_EPStartXfer+0x650>
 800e7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	64bb      	str	r3, [r7, #72]	; 0x48
 800e802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e806:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e810:	b29b      	uxth	r3, r3
 800e812:	461a      	mov	r2, r3
 800e814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e816:	4413      	add	r3, r2
 800e818:	64bb      	str	r3, [r7, #72]	; 0x48
 800e81a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e81e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	00da      	lsls	r2, r3, #3
 800e828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e82a:	4413      	add	r3, r2
 800e82c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e830:	647b      	str	r3, [r7, #68]	; 0x44
 800e832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e834:	881b      	ldrh	r3, [r3, #0]
 800e836:	b29b      	uxth	r3, r3
 800e838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e83c:	b29a      	uxth	r2, r3
 800e83e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e840:	801a      	strh	r2, [r3, #0]
 800e842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e846:	2b3e      	cmp	r3, #62	; 0x3e
 800e848:	d921      	bls.n	800e88e <USB_EPStartXfer+0x5f8>
 800e84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e84e:	095b      	lsrs	r3, r3, #5
 800e850:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e858:	f003 031f 	and.w	r3, r3, #31
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d104      	bne.n	800e86a <USB_EPStartXfer+0x5d4>
 800e860:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e864:	3b01      	subs	r3, #1
 800e866:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e86a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e86c:	881b      	ldrh	r3, [r3, #0]
 800e86e:	b29a      	uxth	r2, r3
 800e870:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e874:	b29b      	uxth	r3, r3
 800e876:	029b      	lsls	r3, r3, #10
 800e878:	b29b      	uxth	r3, r3
 800e87a:	4313      	orrs	r3, r2
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e886:	b29a      	uxth	r2, r3
 800e888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e88a:	801a      	strh	r2, [r3, #0]
 800e88c:	e056      	b.n	800e93c <USB_EPStartXfer+0x6a6>
 800e88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e892:	2b00      	cmp	r3, #0
 800e894:	d10a      	bne.n	800e8ac <USB_EPStartXfer+0x616>
 800e896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e898:	881b      	ldrh	r3, [r3, #0]
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e8a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8a8:	801a      	strh	r2, [r3, #0]
 800e8aa:	e047      	b.n	800e93c <USB_EPStartXfer+0x6a6>
 800e8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8b0:	085b      	lsrs	r3, r3, #1
 800e8b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8ba:	f003 0301 	and.w	r3, r3, #1
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d004      	beq.n	800e8cc <USB_EPStartXfer+0x636>
 800e8c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e8cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8ce:	881b      	ldrh	r3, [r3, #0]
 800e8d0:	b29a      	uxth	r2, r3
 800e8d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	029b      	lsls	r3, r3, #10
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	4313      	orrs	r3, r2
 800e8de:	b29a      	uxth	r2, r3
 800e8e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8e2:	801a      	strh	r2, [r3, #0]
 800e8e4:	e02a      	b.n	800e93c <USB_EPStartXfer+0x6a6>
 800e8e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	785b      	ldrb	r3, [r3, #1]
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d122      	bne.n	800e93c <USB_EPStartXfer+0x6a6>
 800e8f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	653b      	str	r3, [r7, #80]	; 0x50
 800e902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e910:	b29b      	uxth	r3, r3
 800e912:	461a      	mov	r2, r3
 800e914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e916:	4413      	add	r3, r2
 800e918:	653b      	str	r3, [r7, #80]	; 0x50
 800e91a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e91e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	00da      	lsls	r2, r3, #3
 800e928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e92a:	4413      	add	r3, r2
 800e92c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e930:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e936:	b29a      	uxth	r2, r3
 800e938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e93a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e93c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	891b      	ldrh	r3, [r3, #8]
 800e948:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	6959      	ldr	r1, [r3, #20]
 800e958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e962:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e966:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e96a:	6800      	ldr	r0, [r0, #0]
 800e96c:	f001 f99f 	bl	800fcae <USB_WritePMA>
            ep->xfer_buff += len;
 800e970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	695a      	ldr	r2, [r3, #20]
 800e97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e980:	441a      	add	r2, r3
 800e982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e98e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6a1a      	ldr	r2, [r3, #32]
 800e99a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e99e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	691b      	ldr	r3, [r3, #16]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d90f      	bls.n	800e9ca <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800e9aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	6a1a      	ldr	r2, [r3, #32]
 800e9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9ba:	1ad2      	subs	r2, r2, r3
 800e9bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	621a      	str	r2, [r3, #32]
 800e9c8:	e00e      	b.n	800e9e8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800e9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	6a1b      	ldr	r3, [r3, #32]
 800e9d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e9da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e9e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	643b      	str	r3, [r7, #64]	; 0x40
 800e9f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	785b      	ldrb	r3, [r3, #1]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d177      	bne.n	800eaf4 <USB_EPStartXfer+0x85e>
 800ea04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	461a      	mov	r2, r3
 800ea22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea24:	4413      	add	r3, r2
 800ea26:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	00da      	lsls	r2, r3, #3
 800ea36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea38:	4413      	add	r3, r2
 800ea3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ea3e:	637b      	str	r3, [r7, #52]	; 0x34
 800ea40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea42:	881b      	ldrh	r3, [r3, #0]
 800ea44:	b29b      	uxth	r3, r3
 800ea46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea4e:	801a      	strh	r2, [r3, #0]
 800ea50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea54:	2b3e      	cmp	r3, #62	; 0x3e
 800ea56:	d921      	bls.n	800ea9c <USB_EPStartXfer+0x806>
 800ea58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea5c:	095b      	lsrs	r3, r3, #5
 800ea5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ea62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea66:	f003 031f 	and.w	r3, r3, #31
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d104      	bne.n	800ea78 <USB_EPStartXfer+0x7e2>
 800ea6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea72:	3b01      	subs	r3, #1
 800ea74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ea78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea7a:	881b      	ldrh	r3, [r3, #0]
 800ea7c:	b29a      	uxth	r2, r3
 800ea7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	029b      	lsls	r3, r3, #10
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea94:	b29a      	uxth	r2, r3
 800ea96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea98:	801a      	strh	r2, [r3, #0]
 800ea9a:	e050      	b.n	800eb3e <USB_EPStartXfer+0x8a8>
 800ea9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d10a      	bne.n	800eaba <USB_EPStartXfer+0x824>
 800eaa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaa6:	881b      	ldrh	r3, [r3, #0]
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eaae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eab2:	b29a      	uxth	r2, r3
 800eab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab6:	801a      	strh	r2, [r3, #0]
 800eab8:	e041      	b.n	800eb3e <USB_EPStartXfer+0x8a8>
 800eaba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eabe:	085b      	lsrs	r3, r3, #1
 800eac0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800eac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eac8:	f003 0301 	and.w	r3, r3, #1
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d004      	beq.n	800eada <USB_EPStartXfer+0x844>
 800ead0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ead4:	3301      	adds	r3, #1
 800ead6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800eada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eadc:	881b      	ldrh	r3, [r3, #0]
 800eade:	b29a      	uxth	r2, r3
 800eae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	029b      	lsls	r3, r3, #10
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	4313      	orrs	r3, r2
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf0:	801a      	strh	r2, [r3, #0]
 800eaf2:	e024      	b.n	800eb3e <USB_EPStartXfer+0x8a8>
 800eaf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eaf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	785b      	ldrb	r3, [r3, #1]
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d11c      	bne.n	800eb3e <USB_EPStartXfer+0x8a8>
 800eb04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	461a      	mov	r2, r3
 800eb16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb18:	4413      	add	r3, r2
 800eb1a:	643b      	str	r3, [r7, #64]	; 0x40
 800eb1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	781b      	ldrb	r3, [r3, #0]
 800eb28:	00da      	lsls	r2, r3, #3
 800eb2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb2c:	4413      	add	r3, r2
 800eb2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800eb32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb38:	b29a      	uxth	r2, r3
 800eb3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800eb3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	895b      	ldrh	r3, [r3, #10]
 800eb4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	6959      	ldr	r1, [r3, #20]
 800eb5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800eb64:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800eb68:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800eb6c:	6800      	ldr	r0, [r0, #0]
 800eb6e:	f001 f89e 	bl	800fcae <USB_WritePMA>
 800eb72:	e227      	b.n	800efc4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800eb74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	6a1b      	ldr	r3, [r3, #32]
 800eb80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800eb84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	4413      	add	r3, r2
 800eb9e:	881b      	ldrh	r3, [r3, #0]
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800eba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebaa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ebae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebb6:	681a      	ldr	r2, [r3, #0]
 800ebb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	009b      	lsls	r3, r3, #2
 800ebc6:	441a      	add	r2, r3
 800ebc8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ebcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ebd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ebd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ebd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ebe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ebec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec00:	4413      	add	r3, r2
 800ec02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	00da      	lsls	r2, r3, #3
 800ec12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec14:	4413      	add	r3, r2
 800ec16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ec1a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec20:	b29a      	uxth	r2, r3
 800ec22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ec26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	891b      	ldrh	r3, [r3, #8]
 800ec32:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ec36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	6959      	ldr	r1, [r3, #20]
 800ec42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ec4c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ec50:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ec54:	6800      	ldr	r0, [r0, #0]
 800ec56:	f001 f82a 	bl	800fcae <USB_WritePMA>
 800ec5a:	e1b3      	b.n	800efc4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ec5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	6a1a      	ldr	r2, [r3, #32]
 800ec68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec6c:	1ad2      	subs	r2, r2, r3
 800ec6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ec7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	009b      	lsls	r3, r3, #2
 800ec92:	4413      	add	r3, r2
 800ec94:	881b      	ldrh	r3, [r3, #0]
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	f000 80c6 	beq.w	800ee2e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eca6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	673b      	str	r3, [r7, #112]	; 0x70
 800ecae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	785b      	ldrb	r3, [r3, #1]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d177      	bne.n	800edae <USB_EPStartXfer+0xb18>
 800ecbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	66bb      	str	r3, [r7, #104]	; 0x68
 800ecca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	461a      	mov	r2, r3
 800ecdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ecde:	4413      	add	r3, r2
 800ece0:	66bb      	str	r3, [r7, #104]	; 0x68
 800ece2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ece6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	00da      	lsls	r2, r3, #3
 800ecf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ecf2:	4413      	add	r3, r2
 800ecf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ecf8:	667b      	str	r3, [r7, #100]	; 0x64
 800ecfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ecfc:	881b      	ldrh	r3, [r3, #0]
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed08:	801a      	strh	r2, [r3, #0]
 800ed0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed0e:	2b3e      	cmp	r3, #62	; 0x3e
 800ed10:	d921      	bls.n	800ed56 <USB_EPStartXfer+0xac0>
 800ed12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed16:	095b      	lsrs	r3, r3, #5
 800ed18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ed1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed20:	f003 031f 	and.w	r3, r3, #31
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d104      	bne.n	800ed32 <USB_EPStartXfer+0xa9c>
 800ed28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed2c:	3b01      	subs	r3, #1
 800ed2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ed32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed34:	881b      	ldrh	r3, [r3, #0]
 800ed36:	b29a      	uxth	r2, r3
 800ed38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	029b      	lsls	r3, r3, #10
 800ed40:	b29b      	uxth	r3, r3
 800ed42:	4313      	orrs	r3, r2
 800ed44:	b29b      	uxth	r3, r3
 800ed46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed4e:	b29a      	uxth	r2, r3
 800ed50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed52:	801a      	strh	r2, [r3, #0]
 800ed54:	e050      	b.n	800edf8 <USB_EPStartXfer+0xb62>
 800ed56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d10a      	bne.n	800ed74 <USB_EPStartXfer+0xade>
 800ed5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed60:	881b      	ldrh	r3, [r3, #0]
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed6c:	b29a      	uxth	r2, r3
 800ed6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed70:	801a      	strh	r2, [r3, #0]
 800ed72:	e041      	b.n	800edf8 <USB_EPStartXfer+0xb62>
 800ed74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed78:	085b      	lsrs	r3, r3, #1
 800ed7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ed7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed82:	f003 0301 	and.w	r3, r3, #1
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d004      	beq.n	800ed94 <USB_EPStartXfer+0xafe>
 800ed8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed8e:	3301      	adds	r3, #1
 800ed90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ed94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed96:	881b      	ldrh	r3, [r3, #0]
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	029b      	lsls	r3, r3, #10
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	4313      	orrs	r3, r2
 800eda6:	b29a      	uxth	r2, r3
 800eda8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edaa:	801a      	strh	r2, [r3, #0]
 800edac:	e024      	b.n	800edf8 <USB_EPStartXfer+0xb62>
 800edae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	785b      	ldrb	r3, [r3, #1]
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d11c      	bne.n	800edf8 <USB_EPStartXfer+0xb62>
 800edbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800edcc:	b29b      	uxth	r3, r3
 800edce:	461a      	mov	r2, r3
 800edd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800edd2:	4413      	add	r3, r2
 800edd4:	673b      	str	r3, [r7, #112]	; 0x70
 800edd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	00da      	lsls	r2, r3, #3
 800ede4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ede6:	4413      	add	r3, r2
 800ede8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800edec:	66fb      	str	r3, [r7, #108]	; 0x6c
 800edee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800edf2:	b29a      	uxth	r2, r3
 800edf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edf6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800edf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	895b      	ldrh	r3, [r3, #10]
 800ee04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ee08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	6959      	ldr	r1, [r3, #20]
 800ee14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ee1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ee22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ee26:	6800      	ldr	r0, [r0, #0]
 800ee28:	f000 ff41 	bl	800fcae <USB_WritePMA>
 800ee2c:	e0ca      	b.n	800efc4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ee2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	785b      	ldrb	r3, [r3, #1]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d177      	bne.n	800ef2e <USB_EPStartXfer+0xc98>
 800ee3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee5e:	4413      	add	r3, r2
 800ee60:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	00da      	lsls	r2, r3, #3
 800ee70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee72:	4413      	add	r3, r2
 800ee74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ee78:	67bb      	str	r3, [r7, #120]	; 0x78
 800ee7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee7c:	881b      	ldrh	r3, [r3, #0]
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ee84:	b29a      	uxth	r2, r3
 800ee86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee88:	801a      	strh	r2, [r3, #0]
 800ee8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee8e:	2b3e      	cmp	r3, #62	; 0x3e
 800ee90:	d921      	bls.n	800eed6 <USB_EPStartXfer+0xc40>
 800ee92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee96:	095b      	lsrs	r3, r3, #5
 800ee98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ee9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eea0:	f003 031f 	and.w	r3, r3, #31
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d104      	bne.n	800eeb2 <USB_EPStartXfer+0xc1c>
 800eea8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eeac:	3b01      	subs	r3, #1
 800eeae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eeb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eeb4:	881b      	ldrh	r3, [r3, #0]
 800eeb6:	b29a      	uxth	r2, r3
 800eeb8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	029b      	lsls	r3, r3, #10
 800eec0:	b29b      	uxth	r3, r3
 800eec2:	4313      	orrs	r3, r2
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eeca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eece:	b29a      	uxth	r2, r3
 800eed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eed2:	801a      	strh	r2, [r3, #0]
 800eed4:	e05c      	b.n	800ef90 <USB_EPStartXfer+0xcfa>
 800eed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d10a      	bne.n	800eef4 <USB_EPStartXfer+0xc5e>
 800eede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eee0:	881b      	ldrh	r3, [r3, #0]
 800eee2:	b29b      	uxth	r3, r3
 800eee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eef0:	801a      	strh	r2, [r3, #0]
 800eef2:	e04d      	b.n	800ef90 <USB_EPStartXfer+0xcfa>
 800eef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eef8:	085b      	lsrs	r3, r3, #1
 800eefa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eefe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef02:	f003 0301 	and.w	r3, r3, #1
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d004      	beq.n	800ef14 <USB_EPStartXfer+0xc7e>
 800ef0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ef0e:	3301      	adds	r3, #1
 800ef10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ef14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef16:	881b      	ldrh	r3, [r3, #0]
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	029b      	lsls	r3, r3, #10
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	4313      	orrs	r3, r2
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef2a:	801a      	strh	r2, [r3, #0]
 800ef2c:	e030      	b.n	800ef90 <USB_EPStartXfer+0xcfa>
 800ef2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	785b      	ldrb	r3, [r3, #1]
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d128      	bne.n	800ef90 <USB_EPStartXfer+0xcfa>
 800ef3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ef4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef62:	4413      	add	r3, r2
 800ef64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ef68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	00da      	lsls	r2, r3, #3
 800ef76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef7a:	4413      	add	r3, r2
 800ef7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ef80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ef84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef88:	b29a      	uxth	r2, r3
 800ef8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ef8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ef90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	891b      	ldrh	r3, [r3, #8]
 800ef9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800efa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	6959      	ldr	r1, [r3, #20]
 800efac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800efb6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800efba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800efbe:	6800      	ldr	r0, [r0, #0]
 800efc0:	f000 fe75 	bl	800fcae <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800efc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	4413      	add	r3, r2
 800efde:	881b      	ldrh	r3, [r3, #0]
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800efe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800efea:	817b      	strh	r3, [r7, #10]
 800efec:	897b      	ldrh	r3, [r7, #10]
 800efee:	f083 0310 	eor.w	r3, r3, #16
 800eff2:	817b      	strh	r3, [r7, #10]
 800eff4:	897b      	ldrh	r3, [r7, #10]
 800eff6:	f083 0320 	eor.w	r3, r3, #32
 800effa:	817b      	strh	r3, [r7, #10]
 800effc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f000:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f00a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	009b      	lsls	r3, r3, #2
 800f014:	441a      	add	r2, r3
 800f016:	897b      	ldrh	r3, [r7, #10]
 800f018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f01c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f028:	b29b      	uxth	r3, r3
 800f02a:	8013      	strh	r3, [r2, #0]
 800f02c:	f000 bcde 	b.w	800f9ec <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	7b1b      	ldrb	r3, [r3, #12]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	f040 80bb 	bne.w	800f1b8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	699a      	ldr	r2, [r3, #24]
 800f04e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	691b      	ldr	r3, [r3, #16]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d917      	bls.n	800f08e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800f05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	691b      	ldr	r3, [r3, #16]
 800f06a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800f06e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	699a      	ldr	r2, [r3, #24]
 800f07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f07e:	1ad2      	subs	r2, r2, r3
 800f080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	619a      	str	r2, [r3, #24]
 800f08c:	e00e      	b.n	800f0ac <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800f08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	699b      	ldr	r3, [r3, #24]
 800f09a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800f09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f0ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f0ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f0d0:	4413      	add	r3, r2
 800f0d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f0d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	00da      	lsls	r2, r3, #3
 800f0e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f0e8:	4413      	add	r3, r2
 800f0ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f0ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f0f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f0f6:	881b      	ldrh	r3, [r3, #0]
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f104:	801a      	strh	r2, [r3, #0]
 800f106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f10a:	2b3e      	cmp	r3, #62	; 0x3e
 800f10c:	d924      	bls.n	800f158 <USB_EPStartXfer+0xec2>
 800f10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f112:	095b      	lsrs	r3, r3, #5
 800f114:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f11c:	f003 031f 	and.w	r3, r3, #31
 800f120:	2b00      	cmp	r3, #0
 800f122:	d104      	bne.n	800f12e <USB_EPStartXfer+0xe98>
 800f124:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f128:	3b01      	subs	r3, #1
 800f12a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f12e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f132:	881b      	ldrh	r3, [r3, #0]
 800f134:	b29a      	uxth	r2, r3
 800f136:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	029b      	lsls	r3, r3, #10
 800f13e:	b29b      	uxth	r3, r3
 800f140:	4313      	orrs	r3, r2
 800f142:	b29b      	uxth	r3, r3
 800f144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f14c:	b29a      	uxth	r2, r3
 800f14e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f152:	801a      	strh	r2, [r3, #0]
 800f154:	f000 bc10 	b.w	800f978 <USB_EPStartXfer+0x16e2>
 800f158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d10c      	bne.n	800f17a <USB_EPStartXfer+0xee4>
 800f160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f164:	881b      	ldrh	r3, [r3, #0]
 800f166:	b29b      	uxth	r3, r3
 800f168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f16c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f170:	b29a      	uxth	r2, r3
 800f172:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f176:	801a      	strh	r2, [r3, #0]
 800f178:	e3fe      	b.n	800f978 <USB_EPStartXfer+0x16e2>
 800f17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f17e:	085b      	lsrs	r3, r3, #1
 800f180:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f188:	f003 0301 	and.w	r3, r3, #1
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d004      	beq.n	800f19a <USB_EPStartXfer+0xf04>
 800f190:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f194:	3301      	adds	r3, #1
 800f196:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f19a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f19e:	881b      	ldrh	r3, [r3, #0]
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	029b      	lsls	r3, r3, #10
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	4313      	orrs	r3, r2
 800f1ae:	b29a      	uxth	r2, r3
 800f1b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f1b4:	801a      	strh	r2, [r3, #0]
 800f1b6:	e3df      	b.n	800f978 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f1b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	78db      	ldrb	r3, [r3, #3]
 800f1c4:	2b02      	cmp	r3, #2
 800f1c6:	f040 8218 	bne.w	800f5fa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f1ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	785b      	ldrb	r3, [r3, #1]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	f040 809d 	bne.w	800f316 <USB_EPStartXfer+0x1080>
 800f1dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f1ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f200:	4413      	add	r3, r2
 800f202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f20a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	00da      	lsls	r2, r3, #3
 800f214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f218:	4413      	add	r3, r2
 800f21a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f21e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f226:	881b      	ldrh	r3, [r3, #0]
 800f228:	b29b      	uxth	r3, r3
 800f22a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f22e:	b29a      	uxth	r2, r3
 800f230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f234:	801a      	strh	r2, [r3, #0]
 800f236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f23a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	691b      	ldr	r3, [r3, #16]
 800f242:	2b3e      	cmp	r3, #62	; 0x3e
 800f244:	d92b      	bls.n	800f29e <USB_EPStartXfer+0x1008>
 800f246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f24a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	691b      	ldr	r3, [r3, #16]
 800f252:	095b      	lsrs	r3, r3, #5
 800f254:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f25c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	691b      	ldr	r3, [r3, #16]
 800f264:	f003 031f 	and.w	r3, r3, #31
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d104      	bne.n	800f276 <USB_EPStartXfer+0xfe0>
 800f26c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f270:	3b01      	subs	r3, #1
 800f272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f276:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f27a:	881b      	ldrh	r3, [r3, #0]
 800f27c:	b29a      	uxth	r2, r3
 800f27e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f282:	b29b      	uxth	r3, r3
 800f284:	029b      	lsls	r3, r3, #10
 800f286:	b29b      	uxth	r3, r3
 800f288:	4313      	orrs	r3, r2
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f294:	b29a      	uxth	r2, r3
 800f296:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f29a:	801a      	strh	r2, [r3, #0]
 800f29c:	e070      	b.n	800f380 <USB_EPStartXfer+0x10ea>
 800f29e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	691b      	ldr	r3, [r3, #16]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d10c      	bne.n	800f2c8 <USB_EPStartXfer+0x1032>
 800f2ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f2b2:	881b      	ldrh	r3, [r3, #0]
 800f2b4:	b29b      	uxth	r3, r3
 800f2b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f2ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f2c4:	801a      	strh	r2, [r3, #0]
 800f2c6:	e05b      	b.n	800f380 <USB_EPStartXfer+0x10ea>
 800f2c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	691b      	ldr	r3, [r3, #16]
 800f2d4:	085b      	lsrs	r3, r3, #1
 800f2d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f2da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	691b      	ldr	r3, [r3, #16]
 800f2e6:	f003 0301 	and.w	r3, r3, #1
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d004      	beq.n	800f2f8 <USB_EPStartXfer+0x1062>
 800f2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f2f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f2fc:	881b      	ldrh	r3, [r3, #0]
 800f2fe:	b29a      	uxth	r2, r3
 800f300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f304:	b29b      	uxth	r3, r3
 800f306:	029b      	lsls	r3, r3, #10
 800f308:	b29b      	uxth	r3, r3
 800f30a:	4313      	orrs	r3, r2
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f312:	801a      	strh	r2, [r3, #0]
 800f314:	e034      	b.n	800f380 <USB_EPStartXfer+0x10ea>
 800f316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f31a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	785b      	ldrb	r3, [r3, #1]
 800f322:	2b01      	cmp	r3, #1
 800f324:	d12c      	bne.n	800f380 <USB_EPStartXfer+0x10ea>
 800f326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f32a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f338:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f342:	b29b      	uxth	r3, r3
 800f344:	461a      	mov	r2, r3
 800f346:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f34a:	4413      	add	r3, r2
 800f34c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	00da      	lsls	r2, r3, #3
 800f35e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f362:	4413      	add	r3, r2
 800f364:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	691b      	ldr	r3, [r3, #16]
 800f378:	b29a      	uxth	r2, r3
 800f37a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f37e:	801a      	strh	r2, [r3, #0]
 800f380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f38e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	785b      	ldrb	r3, [r3, #1]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	f040 809d 	bne.w	800f4da <USB_EPStartXfer+0x1244>
 800f3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3bc:	b29b      	uxth	r3, r3
 800f3be:	461a      	mov	r2, r3
 800f3c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f3c4:	4413      	add	r3, r2
 800f3c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	00da      	lsls	r2, r3, #3
 800f3d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f3dc:	4413      	add	r3, r2
 800f3de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f3e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f3e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f3ea:	881b      	ldrh	r3, [r3, #0]
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f3f2:	b29a      	uxth	r2, r3
 800f3f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f3f8:	801a      	strh	r2, [r3, #0]
 800f3fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	691b      	ldr	r3, [r3, #16]
 800f406:	2b3e      	cmp	r3, #62	; 0x3e
 800f408:	d92b      	bls.n	800f462 <USB_EPStartXfer+0x11cc>
 800f40a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f40e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	691b      	ldr	r3, [r3, #16]
 800f416:	095b      	lsrs	r3, r3, #5
 800f418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f41c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	691b      	ldr	r3, [r3, #16]
 800f428:	f003 031f 	and.w	r3, r3, #31
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d104      	bne.n	800f43a <USB_EPStartXfer+0x11a4>
 800f430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f434:	3b01      	subs	r3, #1
 800f436:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f43a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f43e:	881b      	ldrh	r3, [r3, #0]
 800f440:	b29a      	uxth	r2, r3
 800f442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f446:	b29b      	uxth	r3, r3
 800f448:	029b      	lsls	r3, r3, #10
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	4313      	orrs	r3, r2
 800f44e:	b29b      	uxth	r3, r3
 800f450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f458:	b29a      	uxth	r2, r3
 800f45a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f45e:	801a      	strh	r2, [r3, #0]
 800f460:	e069      	b.n	800f536 <USB_EPStartXfer+0x12a0>
 800f462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	691b      	ldr	r3, [r3, #16]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d10c      	bne.n	800f48c <USB_EPStartXfer+0x11f6>
 800f472:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f476:	881b      	ldrh	r3, [r3, #0]
 800f478:	b29b      	uxth	r3, r3
 800f47a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f47e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f482:	b29a      	uxth	r2, r3
 800f484:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f488:	801a      	strh	r2, [r3, #0]
 800f48a:	e054      	b.n	800f536 <USB_EPStartXfer+0x12a0>
 800f48c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	691b      	ldr	r3, [r3, #16]
 800f498:	085b      	lsrs	r3, r3, #1
 800f49a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f49e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	691b      	ldr	r3, [r3, #16]
 800f4aa:	f003 0301 	and.w	r3, r3, #1
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d004      	beq.n	800f4bc <USB_EPStartXfer+0x1226>
 800f4b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f4bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	b29a      	uxth	r2, r3
 800f4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	029b      	lsls	r3, r3, #10
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	4313      	orrs	r3, r2
 800f4d0:	b29a      	uxth	r2, r3
 800f4d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f4d6:	801a      	strh	r2, [r3, #0]
 800f4d8:	e02d      	b.n	800f536 <USB_EPStartXfer+0x12a0>
 800f4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	785b      	ldrb	r3, [r3, #1]
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d125      	bne.n	800f536 <USB_EPStartXfer+0x12a0>
 800f4ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f500:	4413      	add	r3, r2
 800f502:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f50a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	00da      	lsls	r2, r3, #3
 800f514:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f518:	4413      	add	r3, r2
 800f51a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f51e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	691b      	ldr	r3, [r3, #16]
 800f52e:	b29a      	uxth	r2, r3
 800f530:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f534:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f53a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	69db      	ldr	r3, [r3, #28]
 800f542:	2b00      	cmp	r3, #0
 800f544:	f000 8218 	beq.w	800f978 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f54c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f550:	681a      	ldr	r2, [r3, #0]
 800f552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	009b      	lsls	r3, r3, #2
 800f560:	4413      	add	r3, r2
 800f562:	881b      	ldrh	r3, [r3, #0]
 800f564:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f568:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f56c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f570:	2b00      	cmp	r3, #0
 800f572:	d005      	beq.n	800f580 <USB_EPStartXfer+0x12ea>
 800f574:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d10d      	bne.n	800f59c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f580:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f040 81f5 	bne.w	800f978 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f58e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f596:	2b00      	cmp	r3, #0
 800f598:	f040 81ee 	bne.w	800f978 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f59c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	009b      	lsls	r3, r3, #2
 800f5b4:	4413      	add	r3, r2
 800f5b6:	881b      	ldrh	r3, [r3, #0]
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5c2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800f5c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	441a      	add	r2, r3
 800f5e0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800f5e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	8013      	strh	r3, [r2, #0]
 800f5f8:	e1be      	b.n	800f978 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f5fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	78db      	ldrb	r3, [r3, #3]
 800f606:	2b01      	cmp	r3, #1
 800f608:	f040 81b4 	bne.w	800f974 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	699a      	ldr	r2, [r3, #24]
 800f618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f61c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	691b      	ldr	r3, [r3, #16]
 800f624:	429a      	cmp	r2, r3
 800f626:	d917      	bls.n	800f658 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800f628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f62c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	691b      	ldr	r3, [r3, #16]
 800f634:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800f638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f63c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	699a      	ldr	r2, [r3, #24]
 800f644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f648:	1ad2      	subs	r2, r2, r3
 800f64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f64e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	619a      	str	r2, [r3, #24]
 800f656:	e00e      	b.n	800f676 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800f658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f65c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	699b      	ldr	r3, [r3, #24]
 800f664:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800f668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f66c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2200      	movs	r2, #0
 800f674:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f67a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	785b      	ldrb	r3, [r3, #1]
 800f682:	2b00      	cmp	r3, #0
 800f684:	f040 8085 	bne.w	800f792 <USB_EPStartXfer+0x14fc>
 800f688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f68c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f69a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f6a4:	b29b      	uxth	r3, r3
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f6ac:	4413      	add	r3, r2
 800f6ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f6b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	00da      	lsls	r2, r3, #3
 800f6c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f6c4:	4413      	add	r3, r2
 800f6c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f6ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f6ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f6d2:	881b      	ldrh	r3, [r3, #0]
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f6e0:	801a      	strh	r2, [r3, #0]
 800f6e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6e6:	2b3e      	cmp	r3, #62	; 0x3e
 800f6e8:	d923      	bls.n	800f732 <USB_EPStartXfer+0x149c>
 800f6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6ee:	095b      	lsrs	r3, r3, #5
 800f6f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6f8:	f003 031f 	and.w	r3, r3, #31
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d104      	bne.n	800f70a <USB_EPStartXfer+0x1474>
 800f700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f704:	3b01      	subs	r3, #1
 800f706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f70a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f70e:	881b      	ldrh	r3, [r3, #0]
 800f710:	b29a      	uxth	r2, r3
 800f712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f716:	b29b      	uxth	r3, r3
 800f718:	029b      	lsls	r3, r3, #10
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	4313      	orrs	r3, r2
 800f71e:	b29b      	uxth	r3, r3
 800f720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f728:	b29a      	uxth	r2, r3
 800f72a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f72e:	801a      	strh	r2, [r3, #0]
 800f730:	e060      	b.n	800f7f4 <USB_EPStartXfer+0x155e>
 800f732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f736:	2b00      	cmp	r3, #0
 800f738:	d10c      	bne.n	800f754 <USB_EPStartXfer+0x14be>
 800f73a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f73e:	881b      	ldrh	r3, [r3, #0]
 800f740:	b29b      	uxth	r3, r3
 800f742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f74a:	b29a      	uxth	r2, r3
 800f74c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f750:	801a      	strh	r2, [r3, #0]
 800f752:	e04f      	b.n	800f7f4 <USB_EPStartXfer+0x155e>
 800f754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f758:	085b      	lsrs	r3, r3, #1
 800f75a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f762:	f003 0301 	and.w	r3, r3, #1
 800f766:	2b00      	cmp	r3, #0
 800f768:	d004      	beq.n	800f774 <USB_EPStartXfer+0x14de>
 800f76a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f76e:	3301      	adds	r3, #1
 800f770:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f778:	881b      	ldrh	r3, [r3, #0]
 800f77a:	b29a      	uxth	r2, r3
 800f77c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f780:	b29b      	uxth	r3, r3
 800f782:	029b      	lsls	r3, r3, #10
 800f784:	b29b      	uxth	r3, r3
 800f786:	4313      	orrs	r3, r2
 800f788:	b29a      	uxth	r2, r3
 800f78a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f78e:	801a      	strh	r2, [r3, #0]
 800f790:	e030      	b.n	800f7f4 <USB_EPStartXfer+0x155e>
 800f792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	785b      	ldrb	r3, [r3, #1]
 800f79e:	2b01      	cmp	r3, #1
 800f7a0:	d128      	bne.n	800f7f4 <USB_EPStartXfer+0x155e>
 800f7a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f7b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f7be:	b29b      	uxth	r3, r3
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f7c6:	4413      	add	r3, r2
 800f7c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	00da      	lsls	r2, r3, #3
 800f7da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f7de:	4413      	add	r3, r2
 800f7e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f7e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f7f2:	801a      	strh	r2, [r3, #0]
 800f7f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	785b      	ldrb	r3, [r3, #1]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	f040 8085 	bne.w	800f91e <USB_EPStartXfer+0x1688>
 800f814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f818:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f830:	b29b      	uxth	r3, r3
 800f832:	461a      	mov	r2, r3
 800f834:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f838:	4413      	add	r3, r2
 800f83a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f83e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	00da      	lsls	r2, r3, #3
 800f84c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f850:	4413      	add	r3, r2
 800f852:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f856:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f85a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f85e:	881b      	ldrh	r3, [r3, #0]
 800f860:	b29b      	uxth	r3, r3
 800f862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f866:	b29a      	uxth	r2, r3
 800f868:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f86c:	801a      	strh	r2, [r3, #0]
 800f86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f872:	2b3e      	cmp	r3, #62	; 0x3e
 800f874:	d923      	bls.n	800f8be <USB_EPStartXfer+0x1628>
 800f876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f87a:	095b      	lsrs	r3, r3, #5
 800f87c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f884:	f003 031f 	and.w	r3, r3, #31
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d104      	bne.n	800f896 <USB_EPStartXfer+0x1600>
 800f88c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f890:	3b01      	subs	r3, #1
 800f892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f896:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f89a:	881b      	ldrh	r3, [r3, #0]
 800f89c:	b29a      	uxth	r2, r3
 800f89e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	029b      	lsls	r3, r3, #10
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	4313      	orrs	r3, r2
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f8b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f8b4:	b29a      	uxth	r2, r3
 800f8b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f8ba:	801a      	strh	r2, [r3, #0]
 800f8bc:	e05c      	b.n	800f978 <USB_EPStartXfer+0x16e2>
 800f8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d10c      	bne.n	800f8e0 <USB_EPStartXfer+0x164a>
 800f8c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f8ca:	881b      	ldrh	r3, [r3, #0]
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f8d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f8d6:	b29a      	uxth	r2, r3
 800f8d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f8dc:	801a      	strh	r2, [r3, #0]
 800f8de:	e04b      	b.n	800f978 <USB_EPStartXfer+0x16e2>
 800f8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8e4:	085b      	lsrs	r3, r3, #1
 800f8e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8ee:	f003 0301 	and.w	r3, r3, #1
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d004      	beq.n	800f900 <USB_EPStartXfer+0x166a>
 800f8f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f900:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f904:	881b      	ldrh	r3, [r3, #0]
 800f906:	b29a      	uxth	r2, r3
 800f908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	029b      	lsls	r3, r3, #10
 800f910:	b29b      	uxth	r3, r3
 800f912:	4313      	orrs	r3, r2
 800f914:	b29a      	uxth	r2, r3
 800f916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f91a:	801a      	strh	r2, [r3, #0]
 800f91c:	e02c      	b.n	800f978 <USB_EPStartXfer+0x16e2>
 800f91e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	785b      	ldrb	r3, [r3, #1]
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	d124      	bne.n	800f978 <USB_EPStartXfer+0x16e2>
 800f92e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	461a      	mov	r2, r3
 800f940:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f944:	4413      	add	r3, r2
 800f946:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f94e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	00da      	lsls	r2, r3, #3
 800f958:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f95c:	4413      	add	r3, r2
 800f95e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f96a:	b29a      	uxth	r2, r3
 800f96c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f970:	801a      	strh	r2, [r3, #0]
 800f972:	e001      	b.n	800f978 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800f974:	2301      	movs	r3, #1
 800f976:	e03a      	b.n	800f9ee <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f97c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	009b      	lsls	r3, r3, #2
 800f990:	4413      	add	r3, r2
 800f992:	881b      	ldrh	r3, [r3, #0]
 800f994:	b29b      	uxth	r3, r3
 800f996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f99a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f99e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f9a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f9a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f9aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f9ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f9b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f9b6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f9ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	009b      	lsls	r3, r3, #2
 800f9d2:	441a      	add	r2, r3
 800f9d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f9d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f9e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f9e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9e8:	b29b      	uxth	r3, r3
 800f9ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f9ec:	2300      	movs	r3, #0
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	785b      	ldrb	r3, [r3, #1]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d020      	beq.n	800fa4c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800fa0a:	687a      	ldr	r2, [r7, #4]
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	4413      	add	r3, r2
 800fa14:	881b      	ldrh	r3, [r3, #0]
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa20:	81bb      	strh	r3, [r7, #12]
 800fa22:	89bb      	ldrh	r3, [r7, #12]
 800fa24:	f083 0310 	eor.w	r3, r3, #16
 800fa28:	81bb      	strh	r3, [r7, #12]
 800fa2a:	687a      	ldr	r2, [r7, #4]
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	009b      	lsls	r3, r3, #2
 800fa32:	441a      	add	r2, r3
 800fa34:	89bb      	ldrh	r3, [r7, #12]
 800fa36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	8013      	strh	r3, [r2, #0]
 800fa4a:	e01f      	b.n	800fa8c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800fa4c:	687a      	ldr	r2, [r7, #4]
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	4413      	add	r3, r2
 800fa56:	881b      	ldrh	r3, [r3, #0]
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa62:	81fb      	strh	r3, [r7, #14]
 800fa64:	89fb      	ldrh	r3, [r7, #14]
 800fa66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fa6a:	81fb      	strh	r3, [r7, #14]
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	009b      	lsls	r3, r3, #2
 800fa74:	441a      	add	r2, r3
 800fa76:	89fb      	ldrh	r3, [r7, #14]
 800fa78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800fa8c:	2300      	movs	r3, #0
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3714      	adds	r7, #20
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr

0800fa9a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fa9a:	b480      	push	{r7}
 800fa9c:	b087      	sub	sp, #28
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
 800faa2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	7b1b      	ldrb	r3, [r3, #12]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f040 809d 	bne.w	800fbe8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	785b      	ldrb	r3, [r3, #1]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d04c      	beq.n	800fb50 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fab6:	687a      	ldr	r2, [r7, #4]
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	009b      	lsls	r3, r3, #2
 800fabe:	4413      	add	r3, r2
 800fac0:	881b      	ldrh	r3, [r3, #0]
 800fac2:	823b      	strh	r3, [r7, #16]
 800fac4:	8a3b      	ldrh	r3, [r7, #16]
 800fac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faca:	2b00      	cmp	r3, #0
 800facc:	d01b      	beq.n	800fb06 <USB_EPClearStall+0x6c>
 800face:	687a      	ldr	r2, [r7, #4]
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	009b      	lsls	r3, r3, #2
 800fad6:	4413      	add	r3, r2
 800fad8:	881b      	ldrh	r3, [r3, #0]
 800fada:	b29b      	uxth	r3, r3
 800fadc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fae4:	81fb      	strh	r3, [r7, #14]
 800fae6:	687a      	ldr	r2, [r7, #4]
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	009b      	lsls	r3, r3, #2
 800faee:	441a      	add	r2, r3
 800faf0:	89fb      	ldrh	r3, [r7, #14]
 800faf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800faf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fafa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fafe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	78db      	ldrb	r3, [r3, #3]
 800fb0a:	2b01      	cmp	r3, #1
 800fb0c:	d06c      	beq.n	800fbe8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	4413      	add	r3, r2
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb24:	81bb      	strh	r3, [r7, #12]
 800fb26:	89bb      	ldrh	r3, [r7, #12]
 800fb28:	f083 0320 	eor.w	r3, r3, #32
 800fb2c:	81bb      	strh	r3, [r7, #12]
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	009b      	lsls	r3, r3, #2
 800fb36:	441a      	add	r2, r3
 800fb38:	89bb      	ldrh	r3, [r7, #12]
 800fb3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	8013      	strh	r3, [r2, #0]
 800fb4e:	e04b      	b.n	800fbe8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	009b      	lsls	r3, r3, #2
 800fb58:	4413      	add	r3, r2
 800fb5a:	881b      	ldrh	r3, [r3, #0]
 800fb5c:	82fb      	strh	r3, [r7, #22]
 800fb5e:	8afb      	ldrh	r3, [r7, #22]
 800fb60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d01b      	beq.n	800fba0 <USB_EPClearStall+0x106>
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	009b      	lsls	r3, r3, #2
 800fb70:	4413      	add	r3, r2
 800fb72:	881b      	ldrh	r3, [r3, #0]
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb7e:	82bb      	strh	r3, [r7, #20]
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	441a      	add	r2, r3
 800fb8a:	8abb      	ldrh	r3, [r7, #20]
 800fb8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fb98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb9c:	b29b      	uxth	r3, r3
 800fb9e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	009b      	lsls	r3, r3, #2
 800fba8:	4413      	add	r3, r2
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fbb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbb6:	827b      	strh	r3, [r7, #18]
 800fbb8:	8a7b      	ldrh	r3, [r7, #18]
 800fbba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fbbe:	827b      	strh	r3, [r7, #18]
 800fbc0:	8a7b      	ldrh	r3, [r7, #18]
 800fbc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fbc6:	827b      	strh	r3, [r7, #18]
 800fbc8:	687a      	ldr	r2, [r7, #4]
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	009b      	lsls	r3, r3, #2
 800fbd0:	441a      	add	r2, r3
 800fbd2:	8a7b      	ldrh	r3, [r7, #18]
 800fbd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fbd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fbdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fbe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800fbe8:	2300      	movs	r3, #0
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	371c      	adds	r7, #28
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf4:	4770      	bx	lr

0800fbf6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800fbf6:	b480      	push	{r7}
 800fbf8:	b083      	sub	sp, #12
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
 800fbfe:	460b      	mov	r3, r1
 800fc00:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800fc02:	78fb      	ldrb	r3, [r7, #3]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d103      	bne.n	800fc10 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2280      	movs	r2, #128	; 0x80
 800fc0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800fc10:	2300      	movs	r3, #0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	370c      	adds	r7, #12
 800fc16:	46bd      	mov	sp, r7
 800fc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1c:	4770      	bx	lr

0800fc1e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800fc1e:	b480      	push	{r7}
 800fc20:	b083      	sub	sp, #12
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fc2c:	b29b      	uxth	r3, r3
 800fc2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc36:	b29a      	uxth	r2, r3
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800fc3e:	2300      	movs	r3, #0
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	370c      	adds	r7, #12
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr

0800fc4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b083      	sub	sp, #12
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800fc68:	2300      	movs	r3, #0
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	370c      	adds	r7, #12
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr

0800fc76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800fc76:	b480      	push	{r7}
 800fc78:	b085      	sub	sp, #20
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800fc88:	68fb      	ldr	r3, [r7, #12]
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3714      	adds	r7, #20
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc94:	4770      	bx	lr

0800fc96 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800fc96:	b480      	push	{r7}
 800fc98:	b083      	sub	sp, #12
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	6078      	str	r0, [r7, #4]
 800fc9e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800fca0:	2300      	movs	r3, #0
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	370c      	adds	r7, #12
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr

0800fcae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fcae:	b480      	push	{r7}
 800fcb0:	b08b      	sub	sp, #44	; 0x2c
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	60f8      	str	r0, [r7, #12]
 800fcb6:	60b9      	str	r1, [r7, #8]
 800fcb8:	4611      	mov	r1, r2
 800fcba:	461a      	mov	r2, r3
 800fcbc:	460b      	mov	r3, r1
 800fcbe:	80fb      	strh	r3, [r7, #6]
 800fcc0:	4613      	mov	r3, r2
 800fcc2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800fcc4:	88bb      	ldrh	r3, [r7, #4]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	085b      	lsrs	r3, r3, #1
 800fcca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fcd4:	88fa      	ldrh	r2, [r7, #6]
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	4413      	add	r3, r2
 800fcda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fcde:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800fce0:	69bb      	ldr	r3, [r7, #24]
 800fce2:	627b      	str	r3, [r7, #36]	; 0x24
 800fce4:	e01b      	b.n	800fd1e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800fce6:	69fb      	ldr	r3, [r7, #28]
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	3301      	adds	r3, #1
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	021b      	lsls	r3, r3, #8
 800fcf4:	b21a      	sxth	r2, r3
 800fcf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	b21b      	sxth	r3, r3
 800fcfe:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800fd00:	6a3b      	ldr	r3, [r7, #32]
 800fd02:	8a7a      	ldrh	r2, [r7, #18]
 800fd04:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800fd06:	6a3b      	ldr	r3, [r7, #32]
 800fd08:	3302      	adds	r3, #2
 800fd0a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800fd0c:	69fb      	ldr	r3, [r7, #28]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800fd12:	69fb      	ldr	r3, [r7, #28]
 800fd14:	3301      	adds	r3, #1
 800fd16:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800fd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1a:	3b01      	subs	r3, #1
 800fd1c:	627b      	str	r3, [r7, #36]	; 0x24
 800fd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d1e0      	bne.n	800fce6 <USB_WritePMA+0x38>
  }
}
 800fd24:	bf00      	nop
 800fd26:	bf00      	nop
 800fd28:	372c      	adds	r7, #44	; 0x2c
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr

0800fd32 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fd32:	b480      	push	{r7}
 800fd34:	b08b      	sub	sp, #44	; 0x2c
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	60f8      	str	r0, [r7, #12]
 800fd3a:	60b9      	str	r1, [r7, #8]
 800fd3c:	4611      	mov	r1, r2
 800fd3e:	461a      	mov	r2, r3
 800fd40:	460b      	mov	r3, r1
 800fd42:	80fb      	strh	r3, [r7, #6]
 800fd44:	4613      	mov	r3, r2
 800fd46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800fd48:	88bb      	ldrh	r3, [r7, #4]
 800fd4a:	085b      	lsrs	r3, r3, #1
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fd58:	88fa      	ldrh	r2, [r7, #6]
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fd62:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800fd64:	69bb      	ldr	r3, [r7, #24]
 800fd66:	627b      	str	r3, [r7, #36]	; 0x24
 800fd68:	e018      	b.n	800fd9c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800fd6a:	6a3b      	ldr	r3, [r7, #32]
 800fd6c:	881b      	ldrh	r3, [r3, #0]
 800fd6e:	b29b      	uxth	r3, r3
 800fd70:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800fd72:	6a3b      	ldr	r3, [r7, #32]
 800fd74:	3302      	adds	r3, #2
 800fd76:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	b2da      	uxtb	r2, r3
 800fd7c:	69fb      	ldr	r3, [r7, #28]
 800fd7e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fd80:	69fb      	ldr	r3, [r7, #28]
 800fd82:	3301      	adds	r3, #1
 800fd84:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	0a1b      	lsrs	r3, r3, #8
 800fd8a:	b2da      	uxtb	r2, r3
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fd90:	69fb      	ldr	r3, [r7, #28]
 800fd92:	3301      	adds	r3, #1
 800fd94:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800fd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd98:	3b01      	subs	r3, #1
 800fd9a:	627b      	str	r3, [r7, #36]	; 0x24
 800fd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d1e3      	bne.n	800fd6a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800fda2:	88bb      	ldrh	r3, [r7, #4]
 800fda4:	f003 0301 	and.w	r3, r3, #1
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d007      	beq.n	800fdbe <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800fdae:	6a3b      	ldr	r3, [r7, #32]
 800fdb0:	881b      	ldrh	r3, [r3, #0]
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	b2da      	uxtb	r2, r3
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	701a      	strb	r2, [r3, #0]
  }
}
 800fdbe:	bf00      	nop
 800fdc0:	372c      	adds	r7, #44	; 0x2c
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc8:	4770      	bx	lr
	...

0800fdcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b084      	sub	sp, #16
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fdd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fddc:	f003 fa14 	bl	8013208 <USBD_static_malloc>
 800fde0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d109      	bne.n	800fdfc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	32b0      	adds	r2, #176	; 0xb0
 800fdf2:	2100      	movs	r1, #0
 800fdf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fdf8:	2302      	movs	r3, #2
 800fdfa:	e0d4      	b.n	800ffa6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fdfc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800fe00:	2100      	movs	r1, #0
 800fe02:	68f8      	ldr	r0, [r7, #12]
 800fe04:	f005 f9b5 	bl	8015172 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	32b0      	adds	r2, #176	; 0xb0
 800fe12:	68f9      	ldr	r1, [r7, #12]
 800fe14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	32b0      	adds	r2, #176	; 0xb0
 800fe22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	7c1b      	ldrb	r3, [r3, #16]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d138      	bne.n	800fea6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fe34:	4b5e      	ldr	r3, [pc, #376]	; (800ffb0 <USBD_CDC_Init+0x1e4>)
 800fe36:	7819      	ldrb	r1, [r3, #0]
 800fe38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe3c:	2202      	movs	r2, #2
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f002 ffe4 	bl	8012e0c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fe44:	4b5a      	ldr	r3, [pc, #360]	; (800ffb0 <USBD_CDC_Init+0x1e4>)
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	f003 020f 	and.w	r2, r3, #15
 800fe4c:	6879      	ldr	r1, [r7, #4]
 800fe4e:	4613      	mov	r3, r2
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	4413      	add	r3, r2
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	440b      	add	r3, r1
 800fe58:	3324      	adds	r3, #36	; 0x24
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fe5e:	4b55      	ldr	r3, [pc, #340]	; (800ffb4 <USBD_CDC_Init+0x1e8>)
 800fe60:	7819      	ldrb	r1, [r3, #0]
 800fe62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe66:	2202      	movs	r2, #2
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f002 ffcf 	bl	8012e0c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fe6e:	4b51      	ldr	r3, [pc, #324]	; (800ffb4 <USBD_CDC_Init+0x1e8>)
 800fe70:	781b      	ldrb	r3, [r3, #0]
 800fe72:	f003 020f 	and.w	r2, r3, #15
 800fe76:	6879      	ldr	r1, [r7, #4]
 800fe78:	4613      	mov	r3, r2
 800fe7a:	009b      	lsls	r3, r3, #2
 800fe7c:	4413      	add	r3, r2
 800fe7e:	009b      	lsls	r3, r3, #2
 800fe80:	440b      	add	r3, r1
 800fe82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fe86:	2201      	movs	r2, #1
 800fe88:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fe8a:	4b4b      	ldr	r3, [pc, #300]	; (800ffb8 <USBD_CDC_Init+0x1ec>)
 800fe8c:	781b      	ldrb	r3, [r3, #0]
 800fe8e:	f003 020f 	and.w	r2, r3, #15
 800fe92:	6879      	ldr	r1, [r7, #4]
 800fe94:	4613      	mov	r3, r2
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	4413      	add	r3, r2
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	440b      	add	r3, r1
 800fe9e:	3326      	adds	r3, #38	; 0x26
 800fea0:	2210      	movs	r2, #16
 800fea2:	801a      	strh	r2, [r3, #0]
 800fea4:	e035      	b.n	800ff12 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fea6:	4b42      	ldr	r3, [pc, #264]	; (800ffb0 <USBD_CDC_Init+0x1e4>)
 800fea8:	7819      	ldrb	r1, [r3, #0]
 800feaa:	2340      	movs	r3, #64	; 0x40
 800feac:	2202      	movs	r2, #2
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f002 ffac 	bl	8012e0c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800feb4:	4b3e      	ldr	r3, [pc, #248]	; (800ffb0 <USBD_CDC_Init+0x1e4>)
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	f003 020f 	and.w	r2, r3, #15
 800febc:	6879      	ldr	r1, [r7, #4]
 800febe:	4613      	mov	r3, r2
 800fec0:	009b      	lsls	r3, r3, #2
 800fec2:	4413      	add	r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	440b      	add	r3, r1
 800fec8:	3324      	adds	r3, #36	; 0x24
 800feca:	2201      	movs	r2, #1
 800fecc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fece:	4b39      	ldr	r3, [pc, #228]	; (800ffb4 <USBD_CDC_Init+0x1e8>)
 800fed0:	7819      	ldrb	r1, [r3, #0]
 800fed2:	2340      	movs	r3, #64	; 0x40
 800fed4:	2202      	movs	r2, #2
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f002 ff98 	bl	8012e0c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fedc:	4b35      	ldr	r3, [pc, #212]	; (800ffb4 <USBD_CDC_Init+0x1e8>)
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	f003 020f 	and.w	r2, r3, #15
 800fee4:	6879      	ldr	r1, [r7, #4]
 800fee6:	4613      	mov	r3, r2
 800fee8:	009b      	lsls	r3, r3, #2
 800feea:	4413      	add	r3, r2
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	440b      	add	r3, r1
 800fef0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fef4:	2201      	movs	r2, #1
 800fef6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fef8:	4b2f      	ldr	r3, [pc, #188]	; (800ffb8 <USBD_CDC_Init+0x1ec>)
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	f003 020f 	and.w	r2, r3, #15
 800ff00:	6879      	ldr	r1, [r7, #4]
 800ff02:	4613      	mov	r3, r2
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	4413      	add	r3, r2
 800ff08:	009b      	lsls	r3, r3, #2
 800ff0a:	440b      	add	r3, r1
 800ff0c:	3326      	adds	r3, #38	; 0x26
 800ff0e:	2210      	movs	r2, #16
 800ff10:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ff12:	4b29      	ldr	r3, [pc, #164]	; (800ffb8 <USBD_CDC_Init+0x1ec>)
 800ff14:	7819      	ldrb	r1, [r3, #0]
 800ff16:	2308      	movs	r3, #8
 800ff18:	2203      	movs	r2, #3
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f002 ff76 	bl	8012e0c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ff20:	4b25      	ldr	r3, [pc, #148]	; (800ffb8 <USBD_CDC_Init+0x1ec>)
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	f003 020f 	and.w	r2, r3, #15
 800ff28:	6879      	ldr	r1, [r7, #4]
 800ff2a:	4613      	mov	r3, r2
 800ff2c:	009b      	lsls	r3, r3, #2
 800ff2e:	4413      	add	r3, r2
 800ff30:	009b      	lsls	r3, r3, #2
 800ff32:	440b      	add	r3, r1
 800ff34:	3324      	adds	r3, #36	; 0x24
 800ff36:	2201      	movs	r2, #1
 800ff38:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	33b0      	adds	r3, #176	; 0xb0
 800ff4c:	009b      	lsls	r3, r3, #2
 800ff4e:	4413      	add	r3, r2
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2200      	movs	r2, #0
 800ff62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d101      	bne.n	800ff74 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ff70:	2302      	movs	r3, #2
 800ff72:	e018      	b.n	800ffa6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	7c1b      	ldrb	r3, [r3, #16]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d10a      	bne.n	800ff92 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ff7c:	4b0d      	ldr	r3, [pc, #52]	; (800ffb4 <USBD_CDC_Init+0x1e8>)
 800ff7e:	7819      	ldrb	r1, [r3, #0]
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ff86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f003 f8ba 	bl	8013104 <USBD_LL_PrepareReceive>
 800ff90:	e008      	b.n	800ffa4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ff92:	4b08      	ldr	r3, [pc, #32]	; (800ffb4 <USBD_CDC_Init+0x1e8>)
 800ff94:	7819      	ldrb	r1, [r3, #0]
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ff9c:	2340      	movs	r3, #64	; 0x40
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f003 f8b0 	bl	8013104 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ffa4:	2300      	movs	r3, #0
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3710      	adds	r7, #16
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop
 800ffb0:	200000b3 	.word	0x200000b3
 800ffb4:	200000b4 	.word	0x200000b4
 800ffb8:	200000b5 	.word	0x200000b5

0800ffbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	460b      	mov	r3, r1
 800ffc6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ffc8:	4b3a      	ldr	r3, [pc, #232]	; (80100b4 <USBD_CDC_DeInit+0xf8>)
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	4619      	mov	r1, r3
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f002 ff5a 	bl	8012e88 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ffd4:	4b37      	ldr	r3, [pc, #220]	; (80100b4 <USBD_CDC_DeInit+0xf8>)
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	f003 020f 	and.w	r2, r3, #15
 800ffdc:	6879      	ldr	r1, [r7, #4]
 800ffde:	4613      	mov	r3, r2
 800ffe0:	009b      	lsls	r3, r3, #2
 800ffe2:	4413      	add	r3, r2
 800ffe4:	009b      	lsls	r3, r3, #2
 800ffe6:	440b      	add	r3, r1
 800ffe8:	3324      	adds	r3, #36	; 0x24
 800ffea:	2200      	movs	r2, #0
 800ffec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ffee:	4b32      	ldr	r3, [pc, #200]	; (80100b8 <USBD_CDC_DeInit+0xfc>)
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	4619      	mov	r1, r3
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f002 ff47 	bl	8012e88 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fffa:	4b2f      	ldr	r3, [pc, #188]	; (80100b8 <USBD_CDC_DeInit+0xfc>)
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	f003 020f 	and.w	r2, r3, #15
 8010002:	6879      	ldr	r1, [r7, #4]
 8010004:	4613      	mov	r3, r2
 8010006:	009b      	lsls	r3, r3, #2
 8010008:	4413      	add	r3, r2
 801000a:	009b      	lsls	r3, r3, #2
 801000c:	440b      	add	r3, r1
 801000e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010012:	2200      	movs	r2, #0
 8010014:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010016:	4b29      	ldr	r3, [pc, #164]	; (80100bc <USBD_CDC_DeInit+0x100>)
 8010018:	781b      	ldrb	r3, [r3, #0]
 801001a:	4619      	mov	r1, r3
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f002 ff33 	bl	8012e88 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010022:	4b26      	ldr	r3, [pc, #152]	; (80100bc <USBD_CDC_DeInit+0x100>)
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	f003 020f 	and.w	r2, r3, #15
 801002a:	6879      	ldr	r1, [r7, #4]
 801002c:	4613      	mov	r3, r2
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	4413      	add	r3, r2
 8010032:	009b      	lsls	r3, r3, #2
 8010034:	440b      	add	r3, r1
 8010036:	3324      	adds	r3, #36	; 0x24
 8010038:	2200      	movs	r2, #0
 801003a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801003c:	4b1f      	ldr	r3, [pc, #124]	; (80100bc <USBD_CDC_DeInit+0x100>)
 801003e:	781b      	ldrb	r3, [r3, #0]
 8010040:	f003 020f 	and.w	r2, r3, #15
 8010044:	6879      	ldr	r1, [r7, #4]
 8010046:	4613      	mov	r3, r2
 8010048:	009b      	lsls	r3, r3, #2
 801004a:	4413      	add	r3, r2
 801004c:	009b      	lsls	r3, r3, #2
 801004e:	440b      	add	r3, r1
 8010050:	3326      	adds	r3, #38	; 0x26
 8010052:	2200      	movs	r2, #0
 8010054:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	32b0      	adds	r2, #176	; 0xb0
 8010060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d01f      	beq.n	80100a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	33b0      	adds	r3, #176	; 0xb0
 8010072:	009b      	lsls	r3, r3, #2
 8010074:	4413      	add	r3, r2
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	32b0      	adds	r2, #176	; 0xb0
 8010086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801008a:	4618      	mov	r0, r3
 801008c:	f003 f8ca 	bl	8013224 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	32b0      	adds	r2, #176	; 0xb0
 801009a:	2100      	movs	r1, #0
 801009c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2200      	movs	r2, #0
 80100a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80100a8:	2300      	movs	r3, #0
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3708      	adds	r7, #8
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
 80100b2:	bf00      	nop
 80100b4:	200000b3 	.word	0x200000b3
 80100b8:	200000b4 	.word	0x200000b4
 80100bc:	200000b5 	.word	0x200000b5

080100c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b086      	sub	sp, #24
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	32b0      	adds	r2, #176	; 0xb0
 80100d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80100da:	2300      	movs	r3, #0
 80100dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80100de:	2300      	movs	r3, #0
 80100e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80100e2:	2300      	movs	r3, #0
 80100e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d101      	bne.n	80100f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80100ec:	2303      	movs	r3, #3
 80100ee:	e0bf      	b.n	8010270 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d050      	beq.n	801019e <USBD_CDC_Setup+0xde>
 80100fc:	2b20      	cmp	r3, #32
 80100fe:	f040 80af 	bne.w	8010260 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	88db      	ldrh	r3, [r3, #6]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d03a      	beq.n	8010180 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	b25b      	sxtb	r3, r3
 8010110:	2b00      	cmp	r3, #0
 8010112:	da1b      	bge.n	801014c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801011a:	687a      	ldr	r2, [r7, #4]
 801011c:	33b0      	adds	r3, #176	; 0xb0
 801011e:	009b      	lsls	r3, r3, #2
 8010120:	4413      	add	r3, r2
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	689b      	ldr	r3, [r3, #8]
 8010126:	683a      	ldr	r2, [r7, #0]
 8010128:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801012a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801012c:	683a      	ldr	r2, [r7, #0]
 801012e:	88d2      	ldrh	r2, [r2, #6]
 8010130:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	88db      	ldrh	r3, [r3, #6]
 8010136:	2b07      	cmp	r3, #7
 8010138:	bf28      	it	cs
 801013a:	2307      	movcs	r3, #7
 801013c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	89fa      	ldrh	r2, [r7, #14]
 8010142:	4619      	mov	r1, r3
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f001 fd21 	bl	8011b8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801014a:	e090      	b.n	801026e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	785a      	ldrb	r2, [r3, #1]
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	88db      	ldrh	r3, [r3, #6]
 801015a:	2b3f      	cmp	r3, #63	; 0x3f
 801015c:	d803      	bhi.n	8010166 <USBD_CDC_Setup+0xa6>
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	88db      	ldrh	r3, [r3, #6]
 8010162:	b2da      	uxtb	r2, r3
 8010164:	e000      	b.n	8010168 <USBD_CDC_Setup+0xa8>
 8010166:	2240      	movs	r2, #64	; 0x40
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801016e:	6939      	ldr	r1, [r7, #16]
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010176:	461a      	mov	r2, r3
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f001 fd33 	bl	8011be4 <USBD_CtlPrepareRx>
      break;
 801017e:	e076      	b.n	801026e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010186:	687a      	ldr	r2, [r7, #4]
 8010188:	33b0      	adds	r3, #176	; 0xb0
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	4413      	add	r3, r2
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	689b      	ldr	r3, [r3, #8]
 8010192:	683a      	ldr	r2, [r7, #0]
 8010194:	7850      	ldrb	r0, [r2, #1]
 8010196:	2200      	movs	r2, #0
 8010198:	6839      	ldr	r1, [r7, #0]
 801019a:	4798      	blx	r3
      break;
 801019c:	e067      	b.n	801026e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	785b      	ldrb	r3, [r3, #1]
 80101a2:	2b0b      	cmp	r3, #11
 80101a4:	d851      	bhi.n	801024a <USBD_CDC_Setup+0x18a>
 80101a6:	a201      	add	r2, pc, #4	; (adr r2, 80101ac <USBD_CDC_Setup+0xec>)
 80101a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ac:	080101dd 	.word	0x080101dd
 80101b0:	08010259 	.word	0x08010259
 80101b4:	0801024b 	.word	0x0801024b
 80101b8:	0801024b 	.word	0x0801024b
 80101bc:	0801024b 	.word	0x0801024b
 80101c0:	0801024b 	.word	0x0801024b
 80101c4:	0801024b 	.word	0x0801024b
 80101c8:	0801024b 	.word	0x0801024b
 80101cc:	0801024b 	.word	0x0801024b
 80101d0:	0801024b 	.word	0x0801024b
 80101d4:	08010207 	.word	0x08010207
 80101d8:	08010231 	.word	0x08010231
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	2b03      	cmp	r3, #3
 80101e6:	d107      	bne.n	80101f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80101e8:	f107 030a 	add.w	r3, r7, #10
 80101ec:	2202      	movs	r2, #2
 80101ee:	4619      	mov	r1, r3
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f001 fccb 	bl	8011b8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80101f6:	e032      	b.n	801025e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80101f8:	6839      	ldr	r1, [r7, #0]
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f001 fc55 	bl	8011aaa <USBD_CtlError>
            ret = USBD_FAIL;
 8010200:	2303      	movs	r3, #3
 8010202:	75fb      	strb	r3, [r7, #23]
          break;
 8010204:	e02b      	b.n	801025e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801020c:	b2db      	uxtb	r3, r3
 801020e:	2b03      	cmp	r3, #3
 8010210:	d107      	bne.n	8010222 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010212:	f107 030d 	add.w	r3, r7, #13
 8010216:	2201      	movs	r2, #1
 8010218:	4619      	mov	r1, r3
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f001 fcb6 	bl	8011b8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010220:	e01d      	b.n	801025e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010222:	6839      	ldr	r1, [r7, #0]
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f001 fc40 	bl	8011aaa <USBD_CtlError>
            ret = USBD_FAIL;
 801022a:	2303      	movs	r3, #3
 801022c:	75fb      	strb	r3, [r7, #23]
          break;
 801022e:	e016      	b.n	801025e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010236:	b2db      	uxtb	r3, r3
 8010238:	2b03      	cmp	r3, #3
 801023a:	d00f      	beq.n	801025c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801023c:	6839      	ldr	r1, [r7, #0]
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f001 fc33 	bl	8011aaa <USBD_CtlError>
            ret = USBD_FAIL;
 8010244:	2303      	movs	r3, #3
 8010246:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010248:	e008      	b.n	801025c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801024a:	6839      	ldr	r1, [r7, #0]
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f001 fc2c 	bl	8011aaa <USBD_CtlError>
          ret = USBD_FAIL;
 8010252:	2303      	movs	r3, #3
 8010254:	75fb      	strb	r3, [r7, #23]
          break;
 8010256:	e002      	b.n	801025e <USBD_CDC_Setup+0x19e>
          break;
 8010258:	bf00      	nop
 801025a:	e008      	b.n	801026e <USBD_CDC_Setup+0x1ae>
          break;
 801025c:	bf00      	nop
      }
      break;
 801025e:	e006      	b.n	801026e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010260:	6839      	ldr	r1, [r7, #0]
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f001 fc21 	bl	8011aaa <USBD_CtlError>
      ret = USBD_FAIL;
 8010268:	2303      	movs	r3, #3
 801026a:	75fb      	strb	r3, [r7, #23]
      break;
 801026c:	bf00      	nop
  }

  return (uint8_t)ret;
 801026e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010270:	4618      	mov	r0, r3
 8010272:	3718      	adds	r7, #24
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	460b      	mov	r3, r1
 8010282:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801028a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	32b0      	adds	r2, #176	; 0xb0
 8010296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d101      	bne.n	80102a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801029e:	2303      	movs	r3, #3
 80102a0:	e065      	b.n	801036e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	32b0      	adds	r2, #176	; 0xb0
 80102ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80102b2:	78fb      	ldrb	r3, [r7, #3]
 80102b4:	f003 020f 	and.w	r2, r3, #15
 80102b8:	6879      	ldr	r1, [r7, #4]
 80102ba:	4613      	mov	r3, r2
 80102bc:	009b      	lsls	r3, r3, #2
 80102be:	4413      	add	r3, r2
 80102c0:	009b      	lsls	r3, r3, #2
 80102c2:	440b      	add	r3, r1
 80102c4:	3318      	adds	r3, #24
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d02f      	beq.n	801032c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80102cc:	78fb      	ldrb	r3, [r7, #3]
 80102ce:	f003 020f 	and.w	r2, r3, #15
 80102d2:	6879      	ldr	r1, [r7, #4]
 80102d4:	4613      	mov	r3, r2
 80102d6:	009b      	lsls	r3, r3, #2
 80102d8:	4413      	add	r3, r2
 80102da:	009b      	lsls	r3, r3, #2
 80102dc:	440b      	add	r3, r1
 80102de:	3318      	adds	r3, #24
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	78fb      	ldrb	r3, [r7, #3]
 80102e4:	f003 010f 	and.w	r1, r3, #15
 80102e8:	68f8      	ldr	r0, [r7, #12]
 80102ea:	460b      	mov	r3, r1
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	440b      	add	r3, r1
 80102f0:	00db      	lsls	r3, r3, #3
 80102f2:	4403      	add	r3, r0
 80102f4:	3338      	adds	r3, #56	; 0x38
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80102fc:	fb01 f303 	mul.w	r3, r1, r3
 8010300:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010302:	2b00      	cmp	r3, #0
 8010304:	d112      	bne.n	801032c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010306:	78fb      	ldrb	r3, [r7, #3]
 8010308:	f003 020f 	and.w	r2, r3, #15
 801030c:	6879      	ldr	r1, [r7, #4]
 801030e:	4613      	mov	r3, r2
 8010310:	009b      	lsls	r3, r3, #2
 8010312:	4413      	add	r3, r2
 8010314:	009b      	lsls	r3, r3, #2
 8010316:	440b      	add	r3, r1
 8010318:	3318      	adds	r3, #24
 801031a:	2200      	movs	r2, #0
 801031c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801031e:	78f9      	ldrb	r1, [r7, #3]
 8010320:	2300      	movs	r3, #0
 8010322:	2200      	movs	r2, #0
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f002 feb5 	bl	8013094 <USBD_LL_Transmit>
 801032a:	e01f      	b.n	801036c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	2200      	movs	r2, #0
 8010330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801033a:	687a      	ldr	r2, [r7, #4]
 801033c:	33b0      	adds	r3, #176	; 0xb0
 801033e:	009b      	lsls	r3, r3, #2
 8010340:	4413      	add	r3, r2
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	691b      	ldr	r3, [r3, #16]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d010      	beq.n	801036c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	33b0      	adds	r3, #176	; 0xb0
 8010354:	009b      	lsls	r3, r3, #2
 8010356:	4413      	add	r3, r2
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	691b      	ldr	r3, [r3, #16]
 801035c:	68ba      	ldr	r2, [r7, #8]
 801035e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010362:	68ba      	ldr	r2, [r7, #8]
 8010364:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010368:	78fa      	ldrb	r2, [r7, #3]
 801036a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801036c:	2300      	movs	r3, #0
}
 801036e:	4618      	mov	r0, r3
 8010370:	3710      	adds	r7, #16
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}

08010376 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010376:	b580      	push	{r7, lr}
 8010378:	b084      	sub	sp, #16
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
 801037e:	460b      	mov	r3, r1
 8010380:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	32b0      	adds	r2, #176	; 0xb0
 801038c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010390:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	32b0      	adds	r2, #176	; 0xb0
 801039c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d101      	bne.n	80103a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80103a4:	2303      	movs	r3, #3
 80103a6:	e01a      	b.n	80103de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80103a8:	78fb      	ldrb	r3, [r7, #3]
 80103aa:	4619      	mov	r1, r3
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f002 fee1 	bl	8013174 <USBD_LL_GetRxDataSize>
 80103b2:	4602      	mov	r2, r0
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	33b0      	adds	r3, #176	; 0xb0
 80103c4:	009b      	lsls	r3, r3, #2
 80103c6:	4413      	add	r3, r2
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	68db      	ldr	r3, [r3, #12]
 80103cc:	68fa      	ldr	r2, [r7, #12]
 80103ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80103d2:	68fa      	ldr	r2, [r7, #12]
 80103d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80103d8:	4611      	mov	r1, r2
 80103da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80103dc:	2300      	movs	r3, #0
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3710      	adds	r7, #16
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}

080103e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80103e6:	b580      	push	{r7, lr}
 80103e8:	b084      	sub	sp, #16
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	32b0      	adds	r2, #176	; 0xb0
 80103f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d101      	bne.n	8010408 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010404:	2303      	movs	r3, #3
 8010406:	e025      	b.n	8010454 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801040e:	687a      	ldr	r2, [r7, #4]
 8010410:	33b0      	adds	r3, #176	; 0xb0
 8010412:	009b      	lsls	r3, r3, #2
 8010414:	4413      	add	r3, r2
 8010416:	685b      	ldr	r3, [r3, #4]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d01a      	beq.n	8010452 <USBD_CDC_EP0_RxReady+0x6c>
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010422:	2bff      	cmp	r3, #255	; 0xff
 8010424:	d015      	beq.n	8010452 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801042c:	687a      	ldr	r2, [r7, #4]
 801042e:	33b0      	adds	r3, #176	; 0xb0
 8010430:	009b      	lsls	r3, r3, #2
 8010432:	4413      	add	r3, r2
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	689b      	ldr	r3, [r3, #8]
 8010438:	68fa      	ldr	r2, [r7, #12]
 801043a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801043e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010440:	68fa      	ldr	r2, [r7, #12]
 8010442:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010446:	b292      	uxth	r2, r2
 8010448:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	22ff      	movs	r2, #255	; 0xff
 801044e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010452:	2300      	movs	r3, #0
}
 8010454:	4618      	mov	r0, r3
 8010456:	3710      	adds	r7, #16
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b086      	sub	sp, #24
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010464:	2182      	movs	r1, #130	; 0x82
 8010466:	4818      	ldr	r0, [pc, #96]	; (80104c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010468:	f000 fcbd 	bl	8010de6 <USBD_GetEpDesc>
 801046c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801046e:	2101      	movs	r1, #1
 8010470:	4815      	ldr	r0, [pc, #84]	; (80104c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010472:	f000 fcb8 	bl	8010de6 <USBD_GetEpDesc>
 8010476:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010478:	2181      	movs	r1, #129	; 0x81
 801047a:	4813      	ldr	r0, [pc, #76]	; (80104c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801047c:	f000 fcb3 	bl	8010de6 <USBD_GetEpDesc>
 8010480:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d002      	beq.n	801048e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	2210      	movs	r2, #16
 801048c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d006      	beq.n	80104a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	2200      	movs	r2, #0
 8010498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801049c:	711a      	strb	r2, [r3, #4]
 801049e:	2200      	movs	r2, #0
 80104a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d006      	beq.n	80104b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	2200      	movs	r2, #0
 80104ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80104b0:	711a      	strb	r2, [r3, #4]
 80104b2:	2200      	movs	r2, #0
 80104b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2243      	movs	r2, #67	; 0x43
 80104ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80104bc:	4b02      	ldr	r3, [pc, #8]	; (80104c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3718      	adds	r7, #24
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	20000070 	.word	0x20000070

080104cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b086      	sub	sp, #24
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80104d4:	2182      	movs	r1, #130	; 0x82
 80104d6:	4818      	ldr	r0, [pc, #96]	; (8010538 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80104d8:	f000 fc85 	bl	8010de6 <USBD_GetEpDesc>
 80104dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80104de:	2101      	movs	r1, #1
 80104e0:	4815      	ldr	r0, [pc, #84]	; (8010538 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80104e2:	f000 fc80 	bl	8010de6 <USBD_GetEpDesc>
 80104e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80104e8:	2181      	movs	r1, #129	; 0x81
 80104ea:	4813      	ldr	r0, [pc, #76]	; (8010538 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80104ec:	f000 fc7b 	bl	8010de6 <USBD_GetEpDesc>
 80104f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d002      	beq.n	80104fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	2210      	movs	r2, #16
 80104fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d006      	beq.n	8010512 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	2200      	movs	r2, #0
 8010508:	711a      	strb	r2, [r3, #4]
 801050a:	2200      	movs	r2, #0
 801050c:	f042 0202 	orr.w	r2, r2, #2
 8010510:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d006      	beq.n	8010526 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2200      	movs	r2, #0
 801051c:	711a      	strb	r2, [r3, #4]
 801051e:	2200      	movs	r2, #0
 8010520:	f042 0202 	orr.w	r2, r2, #2
 8010524:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2243      	movs	r2, #67	; 0x43
 801052a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801052c:	4b02      	ldr	r3, [pc, #8]	; (8010538 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801052e:	4618      	mov	r0, r3
 8010530:	3718      	adds	r7, #24
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
 8010536:	bf00      	nop
 8010538:	20000070 	.word	0x20000070

0801053c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b086      	sub	sp, #24
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010544:	2182      	movs	r1, #130	; 0x82
 8010546:	4818      	ldr	r0, [pc, #96]	; (80105a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010548:	f000 fc4d 	bl	8010de6 <USBD_GetEpDesc>
 801054c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801054e:	2101      	movs	r1, #1
 8010550:	4815      	ldr	r0, [pc, #84]	; (80105a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010552:	f000 fc48 	bl	8010de6 <USBD_GetEpDesc>
 8010556:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010558:	2181      	movs	r1, #129	; 0x81
 801055a:	4813      	ldr	r0, [pc, #76]	; (80105a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801055c:	f000 fc43 	bl	8010de6 <USBD_GetEpDesc>
 8010560:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d002      	beq.n	801056e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	2210      	movs	r2, #16
 801056c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d006      	beq.n	8010582 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	2200      	movs	r2, #0
 8010578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801057c:	711a      	strb	r2, [r3, #4]
 801057e:	2200      	movs	r2, #0
 8010580:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d006      	beq.n	8010596 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2200      	movs	r2, #0
 801058c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010590:	711a      	strb	r2, [r3, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2243      	movs	r2, #67	; 0x43
 801059a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801059c:	4b02      	ldr	r3, [pc, #8]	; (80105a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3718      	adds	r7, #24
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	20000070 	.word	0x20000070

080105ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b083      	sub	sp, #12
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	220a      	movs	r2, #10
 80105b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80105ba:	4b03      	ldr	r3, [pc, #12]	; (80105c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80105bc:	4618      	mov	r0, r3
 80105be:	370c      	adds	r7, #12
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr
 80105c8:	2000002c 	.word	0x2000002c

080105cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d101      	bne.n	80105e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80105dc:	2303      	movs	r3, #3
 80105de:	e009      	b.n	80105f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	33b0      	adds	r3, #176	; 0xb0
 80105ea:	009b      	lsls	r3, r3, #2
 80105ec:	4413      	add	r3, r2
 80105ee:	683a      	ldr	r2, [r7, #0]
 80105f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80105f2:	2300      	movs	r3, #0
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	370c      	adds	r7, #12
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr

08010600 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010600:	b480      	push	{r7}
 8010602:	b087      	sub	sp, #28
 8010604:	af00      	add	r7, sp, #0
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	32b0      	adds	r2, #176	; 0xb0
 8010616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801061a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d101      	bne.n	8010626 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010622:	2303      	movs	r3, #3
 8010624:	e008      	b.n	8010638 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	68ba      	ldr	r2, [r7, #8]
 801062a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	687a      	ldr	r2, [r7, #4]
 8010632:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010636:	2300      	movs	r3, #0
}
 8010638:	4618      	mov	r0, r3
 801063a:	371c      	adds	r7, #28
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010644:	b480      	push	{r7}
 8010646:	b085      	sub	sp, #20
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	32b0      	adds	r2, #176	; 0xb0
 8010658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801065c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d101      	bne.n	8010668 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010664:	2303      	movs	r3, #3
 8010666:	e004      	b.n	8010672 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	683a      	ldr	r2, [r7, #0]
 801066c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010670:	2300      	movs	r3, #0
}
 8010672:	4618      	mov	r0, r3
 8010674:	3714      	adds	r7, #20
 8010676:	46bd      	mov	sp, r7
 8010678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067c:	4770      	bx	lr
	...

08010680 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b084      	sub	sp, #16
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	32b0      	adds	r2, #176	; 0xb0
 8010692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010696:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8010698:	2301      	movs	r3, #1
 801069a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d101      	bne.n	80106a6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80106a2:	2303      	movs	r3, #3
 80106a4:	e025      	b.n	80106f2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d11f      	bne.n	80106f0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	2201      	movs	r2, #1
 80106b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80106b8:	4b10      	ldr	r3, [pc, #64]	; (80106fc <USBD_CDC_TransmitPacket+0x7c>)
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	f003 020f 	and.w	r2, r3, #15
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	4613      	mov	r3, r2
 80106ca:	009b      	lsls	r3, r3, #2
 80106cc:	4413      	add	r3, r2
 80106ce:	009b      	lsls	r3, r3, #2
 80106d0:	4403      	add	r3, r0
 80106d2:	3318      	adds	r3, #24
 80106d4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80106d6:	4b09      	ldr	r3, [pc, #36]	; (80106fc <USBD_CDC_TransmitPacket+0x7c>)
 80106d8:	7819      	ldrb	r1, [r3, #0]
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f002 fcd4 	bl	8013094 <USBD_LL_Transmit>

    ret = USBD_OK;
 80106ec:	2300      	movs	r3, #0
 80106ee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80106f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3710      	adds	r7, #16
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	200000b3 	.word	0x200000b3

08010700 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	32b0      	adds	r2, #176	; 0xb0
 8010712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010716:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	32b0      	adds	r2, #176	; 0xb0
 8010722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d101      	bne.n	801072e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801072a:	2303      	movs	r3, #3
 801072c:	e018      	b.n	8010760 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	7c1b      	ldrb	r3, [r3, #16]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d10a      	bne.n	801074c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010736:	4b0c      	ldr	r3, [pc, #48]	; (8010768 <USBD_CDC_ReceivePacket+0x68>)
 8010738:	7819      	ldrb	r1, [r3, #0]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f002 fcdd 	bl	8013104 <USBD_LL_PrepareReceive>
 801074a:	e008      	b.n	801075e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801074c:	4b06      	ldr	r3, [pc, #24]	; (8010768 <USBD_CDC_ReceivePacket+0x68>)
 801074e:	7819      	ldrb	r1, [r3, #0]
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010756:	2340      	movs	r3, #64	; 0x40
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f002 fcd3 	bl	8013104 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801075e:	2300      	movs	r3, #0
}
 8010760:	4618      	mov	r0, r3
 8010762:	3710      	adds	r7, #16
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	200000b4 	.word	0x200000b4

0801076c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b086      	sub	sp, #24
 8010770:	af00      	add	r7, sp, #0
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	60b9      	str	r1, [r7, #8]
 8010776:	4613      	mov	r3, r2
 8010778:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d101      	bne.n	8010784 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010780:	2303      	movs	r3, #3
 8010782:	e01f      	b.n	80107c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	2200      	movs	r2, #0
 8010788:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2200      	movs	r2, #0
 8010790:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2200      	movs	r2, #0
 8010798:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d003      	beq.n	80107aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	68ba      	ldr	r2, [r7, #8]
 80107a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2201      	movs	r2, #1
 80107ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	79fa      	ldrb	r2, [r7, #7]
 80107b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80107b8:	68f8      	ldr	r0, [r7, #12]
 80107ba:	f002 fa93 	bl	8012ce4 <USBD_LL_Init>
 80107be:	4603      	mov	r3, r0
 80107c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80107c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3718      	adds	r7, #24
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80107d6:	2300      	movs	r3, #0
 80107d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d101      	bne.n	80107e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80107e0:	2303      	movs	r3, #3
 80107e2:	e025      	b.n	8010830 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	683a      	ldr	r2, [r7, #0]
 80107e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	32ae      	adds	r2, #174	; 0xae
 80107f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d00f      	beq.n	8010820 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	32ae      	adds	r2, #174	; 0xae
 801080a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801080e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010810:	f107 020e 	add.w	r2, r7, #14
 8010814:	4610      	mov	r0, r2
 8010816:	4798      	blx	r3
 8010818:	4602      	mov	r2, r0
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8010826:	1c5a      	adds	r2, r3, #1
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801082e:	2300      	movs	r3, #0
}
 8010830:	4618      	mov	r0, r3
 8010832:	3710      	adds	r7, #16
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f002 fab1 	bl	8012da8 <USBD_LL_Start>
 8010846:	4603      	mov	r3, r0
}
 8010848:	4618      	mov	r0, r3
 801084a:	3708      	adds	r7, #8
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010850:	b480      	push	{r7}
 8010852:	b083      	sub	sp, #12
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010858:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801085a:	4618      	mov	r0, r3
 801085c:	370c      	adds	r7, #12
 801085e:	46bd      	mov	sp, r7
 8010860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010864:	4770      	bx	lr

08010866 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010866:	b580      	push	{r7, lr}
 8010868:	b084      	sub	sp, #16
 801086a:	af00      	add	r7, sp, #0
 801086c:	6078      	str	r0, [r7, #4]
 801086e:	460b      	mov	r3, r1
 8010870:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010872:	2300      	movs	r3, #0
 8010874:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801087c:	2b00      	cmp	r3, #0
 801087e:	d009      	beq.n	8010894 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	78fa      	ldrb	r2, [r7, #3]
 801088a:	4611      	mov	r1, r2
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	4798      	blx	r3
 8010890:	4603      	mov	r3, r0
 8010892:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010894:	7bfb      	ldrb	r3, [r7, #15]
}
 8010896:	4618      	mov	r0, r3
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}

0801089e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801089e:	b580      	push	{r7, lr}
 80108a0:	b084      	sub	sp, #16
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	6078      	str	r0, [r7, #4]
 80108a6:	460b      	mov	r3, r1
 80108a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80108aa:	2300      	movs	r3, #0
 80108ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	78fa      	ldrb	r2, [r7, #3]
 80108b8:	4611      	mov	r1, r2
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	4798      	blx	r3
 80108be:	4603      	mov	r3, r0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d001      	beq.n	80108c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80108c4:	2303      	movs	r3, #3
 80108c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80108c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3710      	adds	r7, #16
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}

080108d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80108d2:	b580      	push	{r7, lr}
 80108d4:	b084      	sub	sp, #16
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
 80108da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80108e2:	6839      	ldr	r1, [r7, #0]
 80108e4:	4618      	mov	r0, r3
 80108e6:	f001 f8a6 	bl	8011a36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2201      	movs	r2, #1
 80108ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80108f8:	461a      	mov	r2, r3
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010906:	f003 031f 	and.w	r3, r3, #31
 801090a:	2b02      	cmp	r3, #2
 801090c:	d01a      	beq.n	8010944 <USBD_LL_SetupStage+0x72>
 801090e:	2b02      	cmp	r3, #2
 8010910:	d822      	bhi.n	8010958 <USBD_LL_SetupStage+0x86>
 8010912:	2b00      	cmp	r3, #0
 8010914:	d002      	beq.n	801091c <USBD_LL_SetupStage+0x4a>
 8010916:	2b01      	cmp	r3, #1
 8010918:	d00a      	beq.n	8010930 <USBD_LL_SetupStage+0x5e>
 801091a:	e01d      	b.n	8010958 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010922:	4619      	mov	r1, r3
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f000 fad3 	bl	8010ed0 <USBD_StdDevReq>
 801092a:	4603      	mov	r3, r0
 801092c:	73fb      	strb	r3, [r7, #15]
      break;
 801092e:	e020      	b.n	8010972 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010936:	4619      	mov	r1, r3
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f000 fb3b 	bl	8010fb4 <USBD_StdItfReq>
 801093e:	4603      	mov	r3, r0
 8010940:	73fb      	strb	r3, [r7, #15]
      break;
 8010942:	e016      	b.n	8010972 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801094a:	4619      	mov	r1, r3
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f000 fb9d 	bl	801108c <USBD_StdEPReq>
 8010952:	4603      	mov	r3, r0
 8010954:	73fb      	strb	r3, [r7, #15]
      break;
 8010956:	e00c      	b.n	8010972 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801095e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010962:	b2db      	uxtb	r3, r3
 8010964:	4619      	mov	r1, r3
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f002 fac4 	bl	8012ef4 <USBD_LL_StallEP>
 801096c:	4603      	mov	r3, r0
 801096e:	73fb      	strb	r3, [r7, #15]
      break;
 8010970:	bf00      	nop
  }

  return ret;
 8010972:	7bfb      	ldrb	r3, [r7, #15]
}
 8010974:	4618      	mov	r0, r3
 8010976:	3710      	adds	r7, #16
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b086      	sub	sp, #24
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	460b      	mov	r3, r1
 8010986:	607a      	str	r2, [r7, #4]
 8010988:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801098a:	2300      	movs	r3, #0
 801098c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801098e:	7afb      	ldrb	r3, [r7, #11]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d16e      	bne.n	8010a72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801099a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80109a2:	2b03      	cmp	r3, #3
 80109a4:	f040 8098 	bne.w	8010ad8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	689a      	ldr	r2, [r3, #8]
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d913      	bls.n	80109dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	689a      	ldr	r2, [r3, #8]
 80109b8:	693b      	ldr	r3, [r7, #16]
 80109ba:	68db      	ldr	r3, [r3, #12]
 80109bc:	1ad2      	subs	r2, r2, r3
 80109be:	693b      	ldr	r3, [r7, #16]
 80109c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80109c2:	693b      	ldr	r3, [r7, #16]
 80109c4:	68da      	ldr	r2, [r3, #12]
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	689b      	ldr	r3, [r3, #8]
 80109ca:	4293      	cmp	r3, r2
 80109cc:	bf28      	it	cs
 80109ce:	4613      	movcs	r3, r2
 80109d0:	461a      	mov	r2, r3
 80109d2:	6879      	ldr	r1, [r7, #4]
 80109d4:	68f8      	ldr	r0, [r7, #12]
 80109d6:	f001 f922 	bl	8011c1e <USBD_CtlContinueRx>
 80109da:	e07d      	b.n	8010ad8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80109e2:	f003 031f 	and.w	r3, r3, #31
 80109e6:	2b02      	cmp	r3, #2
 80109e8:	d014      	beq.n	8010a14 <USBD_LL_DataOutStage+0x98>
 80109ea:	2b02      	cmp	r3, #2
 80109ec:	d81d      	bhi.n	8010a2a <USBD_LL_DataOutStage+0xae>
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d002      	beq.n	80109f8 <USBD_LL_DataOutStage+0x7c>
 80109f2:	2b01      	cmp	r3, #1
 80109f4:	d003      	beq.n	80109fe <USBD_LL_DataOutStage+0x82>
 80109f6:	e018      	b.n	8010a2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80109f8:	2300      	movs	r3, #0
 80109fa:	75bb      	strb	r3, [r7, #22]
            break;
 80109fc:	e018      	b.n	8010a30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8010a04:	b2db      	uxtb	r3, r3
 8010a06:	4619      	mov	r1, r3
 8010a08:	68f8      	ldr	r0, [r7, #12]
 8010a0a:	f000 f9d2 	bl	8010db2 <USBD_CoreFindIF>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	75bb      	strb	r3, [r7, #22]
            break;
 8010a12:	e00d      	b.n	8010a30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	68f8      	ldr	r0, [r7, #12]
 8010a20:	f000 f9d4 	bl	8010dcc <USBD_CoreFindEP>
 8010a24:	4603      	mov	r3, r0
 8010a26:	75bb      	strb	r3, [r7, #22]
            break;
 8010a28:	e002      	b.n	8010a30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	75bb      	strb	r3, [r7, #22]
            break;
 8010a2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010a30:	7dbb      	ldrb	r3, [r7, #22]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d119      	bne.n	8010a6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	2b03      	cmp	r3, #3
 8010a40:	d113      	bne.n	8010a6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010a42:	7dba      	ldrb	r2, [r7, #22]
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	32ae      	adds	r2, #174	; 0xae
 8010a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a4c:	691b      	ldr	r3, [r3, #16]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d00b      	beq.n	8010a6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010a52:	7dba      	ldrb	r2, [r7, #22]
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010a5a:	7dba      	ldrb	r2, [r7, #22]
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	32ae      	adds	r2, #174	; 0xae
 8010a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a64:	691b      	ldr	r3, [r3, #16]
 8010a66:	68f8      	ldr	r0, [r7, #12]
 8010a68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010a6a:	68f8      	ldr	r0, [r7, #12]
 8010a6c:	f001 f8e8 	bl	8011c40 <USBD_CtlSendStatus>
 8010a70:	e032      	b.n	8010ad8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010a72:	7afb      	ldrb	r3, [r7, #11]
 8010a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a78:	b2db      	uxtb	r3, r3
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	68f8      	ldr	r0, [r7, #12]
 8010a7e:	f000 f9a5 	bl	8010dcc <USBD_CoreFindEP>
 8010a82:	4603      	mov	r3, r0
 8010a84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010a86:	7dbb      	ldrb	r3, [r7, #22]
 8010a88:	2bff      	cmp	r3, #255	; 0xff
 8010a8a:	d025      	beq.n	8010ad8 <USBD_LL_DataOutStage+0x15c>
 8010a8c:	7dbb      	ldrb	r3, [r7, #22]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d122      	bne.n	8010ad8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a98:	b2db      	uxtb	r3, r3
 8010a9a:	2b03      	cmp	r3, #3
 8010a9c:	d117      	bne.n	8010ace <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010a9e:	7dba      	ldrb	r2, [r7, #22]
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	32ae      	adds	r2, #174	; 0xae
 8010aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010aa8:	699b      	ldr	r3, [r3, #24]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00f      	beq.n	8010ace <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010aae:	7dba      	ldrb	r2, [r7, #22]
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010ab6:	7dba      	ldrb	r2, [r7, #22]
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	32ae      	adds	r2, #174	; 0xae
 8010abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ac0:	699b      	ldr	r3, [r3, #24]
 8010ac2:	7afa      	ldrb	r2, [r7, #11]
 8010ac4:	4611      	mov	r1, r2
 8010ac6:	68f8      	ldr	r0, [r7, #12]
 8010ac8:	4798      	blx	r3
 8010aca:	4603      	mov	r3, r0
 8010acc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010ace:	7dfb      	ldrb	r3, [r7, #23]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d001      	beq.n	8010ad8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010ad4:	7dfb      	ldrb	r3, [r7, #23]
 8010ad6:	e000      	b.n	8010ada <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010ad8:	2300      	movs	r3, #0
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3718      	adds	r7, #24
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}

08010ae2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010ae2:	b580      	push	{r7, lr}
 8010ae4:	b086      	sub	sp, #24
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	60f8      	str	r0, [r7, #12]
 8010aea:	460b      	mov	r3, r1
 8010aec:	607a      	str	r2, [r7, #4]
 8010aee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010af0:	7afb      	ldrb	r3, [r7, #11]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d16f      	bne.n	8010bd6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	3314      	adds	r3, #20
 8010afa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010b02:	2b02      	cmp	r3, #2
 8010b04:	d15a      	bne.n	8010bbc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	689a      	ldr	r2, [r3, #8]
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d914      	bls.n	8010b3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	689a      	ldr	r2, [r3, #8]
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	1ad2      	subs	r2, r2, r3
 8010b1c:	693b      	ldr	r3, [r7, #16]
 8010b1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	689b      	ldr	r3, [r3, #8]
 8010b24:	461a      	mov	r2, r3
 8010b26:	6879      	ldr	r1, [r7, #4]
 8010b28:	68f8      	ldr	r0, [r7, #12]
 8010b2a:	f001 f84a 	bl	8011bc2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010b2e:	2300      	movs	r3, #0
 8010b30:	2200      	movs	r2, #0
 8010b32:	2100      	movs	r1, #0
 8010b34:	68f8      	ldr	r0, [r7, #12]
 8010b36:	f002 fae5 	bl	8013104 <USBD_LL_PrepareReceive>
 8010b3a:	e03f      	b.n	8010bbc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	68da      	ldr	r2, [r3, #12]
 8010b40:	693b      	ldr	r3, [r7, #16]
 8010b42:	689b      	ldr	r3, [r3, #8]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d11c      	bne.n	8010b82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	685a      	ldr	r2, [r3, #4]
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d316      	bcc.n	8010b82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	685a      	ldr	r2, [r3, #4]
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d20f      	bcs.n	8010b82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010b62:	2200      	movs	r2, #0
 8010b64:	2100      	movs	r1, #0
 8010b66:	68f8      	ldr	r0, [r7, #12]
 8010b68:	f001 f82b 	bl	8011bc2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010b74:	2300      	movs	r3, #0
 8010b76:	2200      	movs	r2, #0
 8010b78:	2100      	movs	r1, #0
 8010b7a:	68f8      	ldr	r0, [r7, #12]
 8010b7c:	f002 fac2 	bl	8013104 <USBD_LL_PrepareReceive>
 8010b80:	e01c      	b.n	8010bbc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	2b03      	cmp	r3, #3
 8010b8c:	d10f      	bne.n	8010bae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b94:	68db      	ldr	r3, [r3, #12]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d009      	beq.n	8010bae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ba8:	68db      	ldr	r3, [r3, #12]
 8010baa:	68f8      	ldr	r0, [r7, #12]
 8010bac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010bae:	2180      	movs	r1, #128	; 0x80
 8010bb0:	68f8      	ldr	r0, [r7, #12]
 8010bb2:	f002 f99f 	bl	8012ef4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010bb6:	68f8      	ldr	r0, [r7, #12]
 8010bb8:	f001 f855 	bl	8011c66 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d03a      	beq.n	8010c3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010bc6:	68f8      	ldr	r0, [r7, #12]
 8010bc8:	f7ff fe42 	bl	8010850 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010bd4:	e032      	b.n	8010c3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010bd6:	7afb      	ldrb	r3, [r7, #11]
 8010bd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	4619      	mov	r1, r3
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f000 f8f3 	bl	8010dcc <USBD_CoreFindEP>
 8010be6:	4603      	mov	r3, r0
 8010be8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010bea:	7dfb      	ldrb	r3, [r7, #23]
 8010bec:	2bff      	cmp	r3, #255	; 0xff
 8010bee:	d025      	beq.n	8010c3c <USBD_LL_DataInStage+0x15a>
 8010bf0:	7dfb      	ldrb	r3, [r7, #23]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d122      	bne.n	8010c3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	2b03      	cmp	r3, #3
 8010c00:	d11c      	bne.n	8010c3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010c02:	7dfa      	ldrb	r2, [r7, #23]
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	32ae      	adds	r2, #174	; 0xae
 8010c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c0c:	695b      	ldr	r3, [r3, #20]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d014      	beq.n	8010c3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010c12:	7dfa      	ldrb	r2, [r7, #23]
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010c1a:	7dfa      	ldrb	r2, [r7, #23]
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	32ae      	adds	r2, #174	; 0xae
 8010c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c24:	695b      	ldr	r3, [r3, #20]
 8010c26:	7afa      	ldrb	r2, [r7, #11]
 8010c28:	4611      	mov	r1, r2
 8010c2a:	68f8      	ldr	r0, [r7, #12]
 8010c2c:	4798      	blx	r3
 8010c2e:	4603      	mov	r3, r0
 8010c30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010c32:	7dbb      	ldrb	r3, [r7, #22]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d001      	beq.n	8010c3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010c38:	7dbb      	ldrb	r3, [r7, #22]
 8010c3a:	e000      	b.n	8010c3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010c3c:	2300      	movs	r3, #0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3718      	adds	r7, #24
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010c46:	b580      	push	{r7, lr}
 8010c48:	b084      	sub	sp, #16
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2201      	movs	r2, #1
 8010c56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2200      	movs	r2, #0
 8010c66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2200      	movs	r2, #0
 8010c74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d014      	beq.n	8010cac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d00e      	beq.n	8010cac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	687a      	ldr	r2, [r7, #4]
 8010c98:	6852      	ldr	r2, [r2, #4]
 8010c9a:	b2d2      	uxtb	r2, r2
 8010c9c:	4611      	mov	r1, r2
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	4798      	blx	r3
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d001      	beq.n	8010cac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010ca8:	2303      	movs	r3, #3
 8010caa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010cac:	2340      	movs	r3, #64	; 0x40
 8010cae:	2200      	movs	r2, #0
 8010cb0:	2100      	movs	r1, #0
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f002 f8aa 	bl	8012e0c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2201      	movs	r2, #1
 8010cbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2240      	movs	r2, #64	; 0x40
 8010cc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010cc8:	2340      	movs	r3, #64	; 0x40
 8010cca:	2200      	movs	r2, #0
 8010ccc:	2180      	movs	r1, #128	; 0x80
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f002 f89c 	bl	8012e0c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2201      	movs	r2, #1
 8010cd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2240      	movs	r2, #64	; 0x40
 8010cde:	621a      	str	r2, [r3, #32]

  return ret;
 8010ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3710      	adds	r7, #16
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}

08010cea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010cea:	b480      	push	{r7}
 8010cec:	b083      	sub	sp, #12
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
 8010cf2:	460b      	mov	r3, r1
 8010cf4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	78fa      	ldrb	r2, [r7, #3]
 8010cfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010cfc:	2300      	movs	r3, #0
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	370c      	adds	r7, #12
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr

08010d0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010d0a:	b480      	push	{r7}
 8010d0c:	b083      	sub	sp, #12
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	2b04      	cmp	r3, #4
 8010d1c:	d006      	beq.n	8010d2c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d24:	b2da      	uxtb	r2, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2204      	movs	r2, #4
 8010d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010d34:	2300      	movs	r3, #0
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	370c      	adds	r7, #12
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr

08010d42 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010d42:	b480      	push	{r7}
 8010d44:	b083      	sub	sp, #12
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d50:	b2db      	uxtb	r3, r3
 8010d52:	2b04      	cmp	r3, #4
 8010d54:	d106      	bne.n	8010d64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010d5c:	b2da      	uxtb	r2, r3
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010d64:	2300      	movs	r3, #0
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	370c      	adds	r7, #12
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d70:	4770      	bx	lr

08010d72 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010d72:	b580      	push	{r7, lr}
 8010d74:	b082      	sub	sp, #8
 8010d76:	af00      	add	r7, sp, #0
 8010d78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	2b03      	cmp	r3, #3
 8010d84:	d110      	bne.n	8010da8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d00b      	beq.n	8010da8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d96:	69db      	ldr	r3, [r3, #28]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d005      	beq.n	8010da8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010da2:	69db      	ldr	r3, [r3, #28]
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010da8:	2300      	movs	r3, #0
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3708      	adds	r7, #8
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}

08010db2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010db2:	b480      	push	{r7}
 8010db4:	b083      	sub	sp, #12
 8010db6:	af00      	add	r7, sp, #0
 8010db8:	6078      	str	r0, [r7, #4]
 8010dba:	460b      	mov	r3, r1
 8010dbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010dbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	370c      	adds	r7, #12
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr

08010dcc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b083      	sub	sp, #12
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010dd8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	370c      	adds	r7, #12
 8010dde:	46bd      	mov	sp, r7
 8010de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de4:	4770      	bx	lr

08010de6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010de6:	b580      	push	{r7, lr}
 8010de8:	b086      	sub	sp, #24
 8010dea:	af00      	add	r7, sp, #0
 8010dec:	6078      	str	r0, [r7, #4]
 8010dee:	460b      	mov	r3, r1
 8010df0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	885b      	ldrh	r3, [r3, #2]
 8010e02:	b29a      	uxth	r2, r3
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	781b      	ldrb	r3, [r3, #0]
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d920      	bls.n	8010e50 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	b29b      	uxth	r3, r3
 8010e14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010e16:	e013      	b.n	8010e40 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010e18:	f107 030a 	add.w	r3, r7, #10
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	6978      	ldr	r0, [r7, #20]
 8010e20:	f000 f81b 	bl	8010e5a <USBD_GetNextDesc>
 8010e24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	785b      	ldrb	r3, [r3, #1]
 8010e2a:	2b05      	cmp	r3, #5
 8010e2c:	d108      	bne.n	8010e40 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	789b      	ldrb	r3, [r3, #2]
 8010e36:	78fa      	ldrb	r2, [r7, #3]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d008      	beq.n	8010e4e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	885b      	ldrh	r3, [r3, #2]
 8010e44:	b29a      	uxth	r2, r3
 8010e46:	897b      	ldrh	r3, [r7, #10]
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d8e5      	bhi.n	8010e18 <USBD_GetEpDesc+0x32>
 8010e4c:	e000      	b.n	8010e50 <USBD_GetEpDesc+0x6a>
          break;
 8010e4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010e50:	693b      	ldr	r3, [r7, #16]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3718      	adds	r7, #24
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010e5a:	b480      	push	{r7}
 8010e5c:	b085      	sub	sp, #20
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
 8010e62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	881a      	ldrh	r2, [r3, #0]
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	b29b      	uxth	r3, r3
 8010e72:	4413      	add	r3, r2
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	461a      	mov	r2, r3
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	4413      	add	r3, r2
 8010e84:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010e86:	68fb      	ldr	r3, [r7, #12]
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3714      	adds	r7, #20
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr

08010e94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b087      	sub	sp, #28
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	3301      	adds	r3, #1
 8010eaa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010eb2:	8a3b      	ldrh	r3, [r7, #16]
 8010eb4:	021b      	lsls	r3, r3, #8
 8010eb6:	b21a      	sxth	r2, r3
 8010eb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010ebc:	4313      	orrs	r3, r2
 8010ebe:	b21b      	sxth	r3, r3
 8010ec0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010ec2:	89fb      	ldrh	r3, [r7, #14]
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	371c      	adds	r7, #28
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr

08010ed0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b084      	sub	sp, #16
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
 8010ed8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010eda:	2300      	movs	r3, #0
 8010edc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010ee6:	2b40      	cmp	r3, #64	; 0x40
 8010ee8:	d005      	beq.n	8010ef6 <USBD_StdDevReq+0x26>
 8010eea:	2b40      	cmp	r3, #64	; 0x40
 8010eec:	d857      	bhi.n	8010f9e <USBD_StdDevReq+0xce>
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d00f      	beq.n	8010f12 <USBD_StdDevReq+0x42>
 8010ef2:	2b20      	cmp	r3, #32
 8010ef4:	d153      	bne.n	8010f9e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	32ae      	adds	r2, #174	; 0xae
 8010f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f04:	689b      	ldr	r3, [r3, #8]
 8010f06:	6839      	ldr	r1, [r7, #0]
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	4798      	blx	r3
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8010f10:	e04a      	b.n	8010fa8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	785b      	ldrb	r3, [r3, #1]
 8010f16:	2b09      	cmp	r3, #9
 8010f18:	d83b      	bhi.n	8010f92 <USBD_StdDevReq+0xc2>
 8010f1a:	a201      	add	r2, pc, #4	; (adr r2, 8010f20 <USBD_StdDevReq+0x50>)
 8010f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f20:	08010f75 	.word	0x08010f75
 8010f24:	08010f89 	.word	0x08010f89
 8010f28:	08010f93 	.word	0x08010f93
 8010f2c:	08010f7f 	.word	0x08010f7f
 8010f30:	08010f93 	.word	0x08010f93
 8010f34:	08010f53 	.word	0x08010f53
 8010f38:	08010f49 	.word	0x08010f49
 8010f3c:	08010f93 	.word	0x08010f93
 8010f40:	08010f6b 	.word	0x08010f6b
 8010f44:	08010f5d 	.word	0x08010f5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010f48:	6839      	ldr	r1, [r7, #0]
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f000 fa3c 	bl	80113c8 <USBD_GetDescriptor>
          break;
 8010f50:	e024      	b.n	8010f9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010f52:	6839      	ldr	r1, [r7, #0]
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f000 fbcb 	bl	80116f0 <USBD_SetAddress>
          break;
 8010f5a:	e01f      	b.n	8010f9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010f5c:	6839      	ldr	r1, [r7, #0]
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f000 fc0a 	bl	8011778 <USBD_SetConfig>
 8010f64:	4603      	mov	r3, r0
 8010f66:	73fb      	strb	r3, [r7, #15]
          break;
 8010f68:	e018      	b.n	8010f9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010f6a:	6839      	ldr	r1, [r7, #0]
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f000 fcad 	bl	80118cc <USBD_GetConfig>
          break;
 8010f72:	e013      	b.n	8010f9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010f74:	6839      	ldr	r1, [r7, #0]
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f000 fcde 	bl	8011938 <USBD_GetStatus>
          break;
 8010f7c:	e00e      	b.n	8010f9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010f7e:	6839      	ldr	r1, [r7, #0]
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f000 fd0d 	bl	80119a0 <USBD_SetFeature>
          break;
 8010f86:	e009      	b.n	8010f9c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010f88:	6839      	ldr	r1, [r7, #0]
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 fd31 	bl	80119f2 <USBD_ClrFeature>
          break;
 8010f90:	e004      	b.n	8010f9c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010f92:	6839      	ldr	r1, [r7, #0]
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f000 fd88 	bl	8011aaa <USBD_CtlError>
          break;
 8010f9a:	bf00      	nop
      }
      break;
 8010f9c:	e004      	b.n	8010fa8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010f9e:	6839      	ldr	r1, [r7, #0]
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f000 fd82 	bl	8011aaa <USBD_CtlError>
      break;
 8010fa6:	bf00      	nop
  }

  return ret;
 8010fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3710      	adds	r7, #16
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
 8010fb2:	bf00      	nop

08010fb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b084      	sub	sp, #16
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010fca:	2b40      	cmp	r3, #64	; 0x40
 8010fcc:	d005      	beq.n	8010fda <USBD_StdItfReq+0x26>
 8010fce:	2b40      	cmp	r3, #64	; 0x40
 8010fd0:	d852      	bhi.n	8011078 <USBD_StdItfReq+0xc4>
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d001      	beq.n	8010fda <USBD_StdItfReq+0x26>
 8010fd6:	2b20      	cmp	r3, #32
 8010fd8:	d14e      	bne.n	8011078 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fe0:	b2db      	uxtb	r3, r3
 8010fe2:	3b01      	subs	r3, #1
 8010fe4:	2b02      	cmp	r3, #2
 8010fe6:	d840      	bhi.n	801106a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	889b      	ldrh	r3, [r3, #4]
 8010fec:	b2db      	uxtb	r3, r3
 8010fee:	2b01      	cmp	r3, #1
 8010ff0:	d836      	bhi.n	8011060 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	889b      	ldrh	r3, [r3, #4]
 8010ff6:	b2db      	uxtb	r3, r3
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f7ff fed9 	bl	8010db2 <USBD_CoreFindIF>
 8011000:	4603      	mov	r3, r0
 8011002:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011004:	7bbb      	ldrb	r3, [r7, #14]
 8011006:	2bff      	cmp	r3, #255	; 0xff
 8011008:	d01d      	beq.n	8011046 <USBD_StdItfReq+0x92>
 801100a:	7bbb      	ldrb	r3, [r7, #14]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d11a      	bne.n	8011046 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011010:	7bba      	ldrb	r2, [r7, #14]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	32ae      	adds	r2, #174	; 0xae
 8011016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801101a:	689b      	ldr	r3, [r3, #8]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d00f      	beq.n	8011040 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011020:	7bba      	ldrb	r2, [r7, #14]
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011028:	7bba      	ldrb	r2, [r7, #14]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	32ae      	adds	r2, #174	; 0xae
 801102e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011032:	689b      	ldr	r3, [r3, #8]
 8011034:	6839      	ldr	r1, [r7, #0]
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	4798      	blx	r3
 801103a:	4603      	mov	r3, r0
 801103c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801103e:	e004      	b.n	801104a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011040:	2303      	movs	r3, #3
 8011042:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011044:	e001      	b.n	801104a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011046:	2303      	movs	r3, #3
 8011048:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	88db      	ldrh	r3, [r3, #6]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d110      	bne.n	8011074 <USBD_StdItfReq+0xc0>
 8011052:	7bfb      	ldrb	r3, [r7, #15]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d10d      	bne.n	8011074 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 fdf1 	bl	8011c40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801105e:	e009      	b.n	8011074 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011060:	6839      	ldr	r1, [r7, #0]
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f000 fd21 	bl	8011aaa <USBD_CtlError>
          break;
 8011068:	e004      	b.n	8011074 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801106a:	6839      	ldr	r1, [r7, #0]
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f000 fd1c 	bl	8011aaa <USBD_CtlError>
          break;
 8011072:	e000      	b.n	8011076 <USBD_StdItfReq+0xc2>
          break;
 8011074:	bf00      	nop
      }
      break;
 8011076:	e004      	b.n	8011082 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011078:	6839      	ldr	r1, [r7, #0]
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f000 fd15 	bl	8011aaa <USBD_CtlError>
      break;
 8011080:	bf00      	nop
  }

  return ret;
 8011082:	7bfb      	ldrb	r3, [r7, #15]
}
 8011084:	4618      	mov	r0, r3
 8011086:	3710      	adds	r7, #16
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b084      	sub	sp, #16
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011096:	2300      	movs	r3, #0
 8011098:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	889b      	ldrh	r3, [r3, #4]
 801109e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80110a8:	2b40      	cmp	r3, #64	; 0x40
 80110aa:	d007      	beq.n	80110bc <USBD_StdEPReq+0x30>
 80110ac:	2b40      	cmp	r3, #64	; 0x40
 80110ae:	f200 817f 	bhi.w	80113b0 <USBD_StdEPReq+0x324>
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d02a      	beq.n	801110c <USBD_StdEPReq+0x80>
 80110b6:	2b20      	cmp	r3, #32
 80110b8:	f040 817a 	bne.w	80113b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80110bc:	7bbb      	ldrb	r3, [r7, #14]
 80110be:	4619      	mov	r1, r3
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f7ff fe83 	bl	8010dcc <USBD_CoreFindEP>
 80110c6:	4603      	mov	r3, r0
 80110c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80110ca:	7b7b      	ldrb	r3, [r7, #13]
 80110cc:	2bff      	cmp	r3, #255	; 0xff
 80110ce:	f000 8174 	beq.w	80113ba <USBD_StdEPReq+0x32e>
 80110d2:	7b7b      	ldrb	r3, [r7, #13]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	f040 8170 	bne.w	80113ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80110da:	7b7a      	ldrb	r2, [r7, #13]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80110e2:	7b7a      	ldrb	r2, [r7, #13]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	32ae      	adds	r2, #174	; 0xae
 80110e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110ec:	689b      	ldr	r3, [r3, #8]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	f000 8163 	beq.w	80113ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80110f4:	7b7a      	ldrb	r2, [r7, #13]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	32ae      	adds	r2, #174	; 0xae
 80110fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110fe:	689b      	ldr	r3, [r3, #8]
 8011100:	6839      	ldr	r1, [r7, #0]
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	4798      	blx	r3
 8011106:	4603      	mov	r3, r0
 8011108:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801110a:	e156      	b.n	80113ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	785b      	ldrb	r3, [r3, #1]
 8011110:	2b03      	cmp	r3, #3
 8011112:	d008      	beq.n	8011126 <USBD_StdEPReq+0x9a>
 8011114:	2b03      	cmp	r3, #3
 8011116:	f300 8145 	bgt.w	80113a4 <USBD_StdEPReq+0x318>
 801111a:	2b00      	cmp	r3, #0
 801111c:	f000 809b 	beq.w	8011256 <USBD_StdEPReq+0x1ca>
 8011120:	2b01      	cmp	r3, #1
 8011122:	d03c      	beq.n	801119e <USBD_StdEPReq+0x112>
 8011124:	e13e      	b.n	80113a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801112c:	b2db      	uxtb	r3, r3
 801112e:	2b02      	cmp	r3, #2
 8011130:	d002      	beq.n	8011138 <USBD_StdEPReq+0xac>
 8011132:	2b03      	cmp	r3, #3
 8011134:	d016      	beq.n	8011164 <USBD_StdEPReq+0xd8>
 8011136:	e02c      	b.n	8011192 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011138:	7bbb      	ldrb	r3, [r7, #14]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d00d      	beq.n	801115a <USBD_StdEPReq+0xce>
 801113e:	7bbb      	ldrb	r3, [r7, #14]
 8011140:	2b80      	cmp	r3, #128	; 0x80
 8011142:	d00a      	beq.n	801115a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011144:	7bbb      	ldrb	r3, [r7, #14]
 8011146:	4619      	mov	r1, r3
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f001 fed3 	bl	8012ef4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801114e:	2180      	movs	r1, #128	; 0x80
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f001 fecf 	bl	8012ef4 <USBD_LL_StallEP>
 8011156:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011158:	e020      	b.n	801119c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801115a:	6839      	ldr	r1, [r7, #0]
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 fca4 	bl	8011aaa <USBD_CtlError>
              break;
 8011162:	e01b      	b.n	801119c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	885b      	ldrh	r3, [r3, #2]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d10e      	bne.n	801118a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801116c:	7bbb      	ldrb	r3, [r7, #14]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d00b      	beq.n	801118a <USBD_StdEPReq+0xfe>
 8011172:	7bbb      	ldrb	r3, [r7, #14]
 8011174:	2b80      	cmp	r3, #128	; 0x80
 8011176:	d008      	beq.n	801118a <USBD_StdEPReq+0xfe>
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	88db      	ldrh	r3, [r3, #6]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d104      	bne.n	801118a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011180:	7bbb      	ldrb	r3, [r7, #14]
 8011182:	4619      	mov	r1, r3
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f001 feb5 	bl	8012ef4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f000 fd58 	bl	8011c40 <USBD_CtlSendStatus>

              break;
 8011190:	e004      	b.n	801119c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011192:	6839      	ldr	r1, [r7, #0]
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f000 fc88 	bl	8011aaa <USBD_CtlError>
              break;
 801119a:	bf00      	nop
          }
          break;
 801119c:	e107      	b.n	80113ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111a4:	b2db      	uxtb	r3, r3
 80111a6:	2b02      	cmp	r3, #2
 80111a8:	d002      	beq.n	80111b0 <USBD_StdEPReq+0x124>
 80111aa:	2b03      	cmp	r3, #3
 80111ac:	d016      	beq.n	80111dc <USBD_StdEPReq+0x150>
 80111ae:	e04b      	b.n	8011248 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80111b0:	7bbb      	ldrb	r3, [r7, #14]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d00d      	beq.n	80111d2 <USBD_StdEPReq+0x146>
 80111b6:	7bbb      	ldrb	r3, [r7, #14]
 80111b8:	2b80      	cmp	r3, #128	; 0x80
 80111ba:	d00a      	beq.n	80111d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80111bc:	7bbb      	ldrb	r3, [r7, #14]
 80111be:	4619      	mov	r1, r3
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f001 fe97 	bl	8012ef4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80111c6:	2180      	movs	r1, #128	; 0x80
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f001 fe93 	bl	8012ef4 <USBD_LL_StallEP>
 80111ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80111d0:	e040      	b.n	8011254 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80111d2:	6839      	ldr	r1, [r7, #0]
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 fc68 	bl	8011aaa <USBD_CtlError>
              break;
 80111da:	e03b      	b.n	8011254 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	885b      	ldrh	r3, [r3, #2]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d136      	bne.n	8011252 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80111e4:	7bbb      	ldrb	r3, [r7, #14]
 80111e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d004      	beq.n	80111f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80111ee:	7bbb      	ldrb	r3, [r7, #14]
 80111f0:	4619      	mov	r1, r3
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f001 feb4 	bl	8012f60 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f000 fd21 	bl	8011c40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80111fe:	7bbb      	ldrb	r3, [r7, #14]
 8011200:	4619      	mov	r1, r3
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f7ff fde2 	bl	8010dcc <USBD_CoreFindEP>
 8011208:	4603      	mov	r3, r0
 801120a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801120c:	7b7b      	ldrb	r3, [r7, #13]
 801120e:	2bff      	cmp	r3, #255	; 0xff
 8011210:	d01f      	beq.n	8011252 <USBD_StdEPReq+0x1c6>
 8011212:	7b7b      	ldrb	r3, [r7, #13]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d11c      	bne.n	8011252 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011218:	7b7a      	ldrb	r2, [r7, #13]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011220:	7b7a      	ldrb	r2, [r7, #13]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	32ae      	adds	r2, #174	; 0xae
 8011226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801122a:	689b      	ldr	r3, [r3, #8]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d010      	beq.n	8011252 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011230:	7b7a      	ldrb	r2, [r7, #13]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	32ae      	adds	r2, #174	; 0xae
 8011236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801123a:	689b      	ldr	r3, [r3, #8]
 801123c:	6839      	ldr	r1, [r7, #0]
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	4798      	blx	r3
 8011242:	4603      	mov	r3, r0
 8011244:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011246:	e004      	b.n	8011252 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011248:	6839      	ldr	r1, [r7, #0]
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f000 fc2d 	bl	8011aaa <USBD_CtlError>
              break;
 8011250:	e000      	b.n	8011254 <USBD_StdEPReq+0x1c8>
              break;
 8011252:	bf00      	nop
          }
          break;
 8011254:	e0ab      	b.n	80113ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801125c:	b2db      	uxtb	r3, r3
 801125e:	2b02      	cmp	r3, #2
 8011260:	d002      	beq.n	8011268 <USBD_StdEPReq+0x1dc>
 8011262:	2b03      	cmp	r3, #3
 8011264:	d032      	beq.n	80112cc <USBD_StdEPReq+0x240>
 8011266:	e097      	b.n	8011398 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011268:	7bbb      	ldrb	r3, [r7, #14]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d007      	beq.n	801127e <USBD_StdEPReq+0x1f2>
 801126e:	7bbb      	ldrb	r3, [r7, #14]
 8011270:	2b80      	cmp	r3, #128	; 0x80
 8011272:	d004      	beq.n	801127e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011274:	6839      	ldr	r1, [r7, #0]
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f000 fc17 	bl	8011aaa <USBD_CtlError>
                break;
 801127c:	e091      	b.n	80113a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801127e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011282:	2b00      	cmp	r3, #0
 8011284:	da0b      	bge.n	801129e <USBD_StdEPReq+0x212>
 8011286:	7bbb      	ldrb	r3, [r7, #14]
 8011288:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801128c:	4613      	mov	r3, r2
 801128e:	009b      	lsls	r3, r3, #2
 8011290:	4413      	add	r3, r2
 8011292:	009b      	lsls	r3, r3, #2
 8011294:	3310      	adds	r3, #16
 8011296:	687a      	ldr	r2, [r7, #4]
 8011298:	4413      	add	r3, r2
 801129a:	3304      	adds	r3, #4
 801129c:	e00b      	b.n	80112b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801129e:	7bbb      	ldrb	r3, [r7, #14]
 80112a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80112a4:	4613      	mov	r3, r2
 80112a6:	009b      	lsls	r3, r3, #2
 80112a8:	4413      	add	r3, r2
 80112aa:	009b      	lsls	r3, r3, #2
 80112ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80112b0:	687a      	ldr	r2, [r7, #4]
 80112b2:	4413      	add	r3, r2
 80112b4:	3304      	adds	r3, #4
 80112b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	2200      	movs	r2, #0
 80112bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	2202      	movs	r2, #2
 80112c2:	4619      	mov	r1, r3
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f000 fc61 	bl	8011b8c <USBD_CtlSendData>
              break;
 80112ca:	e06a      	b.n	80113a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80112cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	da11      	bge.n	80112f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80112d4:	7bbb      	ldrb	r3, [r7, #14]
 80112d6:	f003 020f 	and.w	r2, r3, #15
 80112da:	6879      	ldr	r1, [r7, #4]
 80112dc:	4613      	mov	r3, r2
 80112de:	009b      	lsls	r3, r3, #2
 80112e0:	4413      	add	r3, r2
 80112e2:	009b      	lsls	r3, r3, #2
 80112e4:	440b      	add	r3, r1
 80112e6:	3324      	adds	r3, #36	; 0x24
 80112e8:	881b      	ldrh	r3, [r3, #0]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d117      	bne.n	801131e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80112ee:	6839      	ldr	r1, [r7, #0]
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f000 fbda 	bl	8011aaa <USBD_CtlError>
                  break;
 80112f6:	e054      	b.n	80113a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80112f8:	7bbb      	ldrb	r3, [r7, #14]
 80112fa:	f003 020f 	and.w	r2, r3, #15
 80112fe:	6879      	ldr	r1, [r7, #4]
 8011300:	4613      	mov	r3, r2
 8011302:	009b      	lsls	r3, r3, #2
 8011304:	4413      	add	r3, r2
 8011306:	009b      	lsls	r3, r3, #2
 8011308:	440b      	add	r3, r1
 801130a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801130e:	881b      	ldrh	r3, [r3, #0]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d104      	bne.n	801131e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011314:	6839      	ldr	r1, [r7, #0]
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f000 fbc7 	bl	8011aaa <USBD_CtlError>
                  break;
 801131c:	e041      	b.n	80113a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801131e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011322:	2b00      	cmp	r3, #0
 8011324:	da0b      	bge.n	801133e <USBD_StdEPReq+0x2b2>
 8011326:	7bbb      	ldrb	r3, [r7, #14]
 8011328:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801132c:	4613      	mov	r3, r2
 801132e:	009b      	lsls	r3, r3, #2
 8011330:	4413      	add	r3, r2
 8011332:	009b      	lsls	r3, r3, #2
 8011334:	3310      	adds	r3, #16
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	4413      	add	r3, r2
 801133a:	3304      	adds	r3, #4
 801133c:	e00b      	b.n	8011356 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801133e:	7bbb      	ldrb	r3, [r7, #14]
 8011340:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011344:	4613      	mov	r3, r2
 8011346:	009b      	lsls	r3, r3, #2
 8011348:	4413      	add	r3, r2
 801134a:	009b      	lsls	r3, r3, #2
 801134c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011350:	687a      	ldr	r2, [r7, #4]
 8011352:	4413      	add	r3, r2
 8011354:	3304      	adds	r3, #4
 8011356:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011358:	7bbb      	ldrb	r3, [r7, #14]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d002      	beq.n	8011364 <USBD_StdEPReq+0x2d8>
 801135e:	7bbb      	ldrb	r3, [r7, #14]
 8011360:	2b80      	cmp	r3, #128	; 0x80
 8011362:	d103      	bne.n	801136c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	2200      	movs	r2, #0
 8011368:	601a      	str	r2, [r3, #0]
 801136a:	e00e      	b.n	801138a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801136c:	7bbb      	ldrb	r3, [r7, #14]
 801136e:	4619      	mov	r1, r3
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f001 fe2b 	bl	8012fcc <USBD_LL_IsStallEP>
 8011376:	4603      	mov	r3, r0
 8011378:	2b00      	cmp	r3, #0
 801137a:	d003      	beq.n	8011384 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	2201      	movs	r2, #1
 8011380:	601a      	str	r2, [r3, #0]
 8011382:	e002      	b.n	801138a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	2200      	movs	r2, #0
 8011388:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	2202      	movs	r2, #2
 801138e:	4619      	mov	r1, r3
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f000 fbfb 	bl	8011b8c <USBD_CtlSendData>
              break;
 8011396:	e004      	b.n	80113a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011398:	6839      	ldr	r1, [r7, #0]
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f000 fb85 	bl	8011aaa <USBD_CtlError>
              break;
 80113a0:	bf00      	nop
          }
          break;
 80113a2:	e004      	b.n	80113ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80113a4:	6839      	ldr	r1, [r7, #0]
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f000 fb7f 	bl	8011aaa <USBD_CtlError>
          break;
 80113ac:	bf00      	nop
      }
      break;
 80113ae:	e005      	b.n	80113bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80113b0:	6839      	ldr	r1, [r7, #0]
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f000 fb79 	bl	8011aaa <USBD_CtlError>
      break;
 80113b8:	e000      	b.n	80113bc <USBD_StdEPReq+0x330>
      break;
 80113ba:	bf00      	nop
  }

  return ret;
 80113bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3710      	adds	r7, #16
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
	...

080113c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b084      	sub	sp, #16
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80113d2:	2300      	movs	r3, #0
 80113d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80113d6:	2300      	movs	r3, #0
 80113d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80113da:	2300      	movs	r3, #0
 80113dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	885b      	ldrh	r3, [r3, #2]
 80113e2:	0a1b      	lsrs	r3, r3, #8
 80113e4:	b29b      	uxth	r3, r3
 80113e6:	3b01      	subs	r3, #1
 80113e8:	2b0e      	cmp	r3, #14
 80113ea:	f200 8152 	bhi.w	8011692 <USBD_GetDescriptor+0x2ca>
 80113ee:	a201      	add	r2, pc, #4	; (adr r2, 80113f4 <USBD_GetDescriptor+0x2c>)
 80113f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f4:	08011465 	.word	0x08011465
 80113f8:	0801147d 	.word	0x0801147d
 80113fc:	080114bd 	.word	0x080114bd
 8011400:	08011693 	.word	0x08011693
 8011404:	08011693 	.word	0x08011693
 8011408:	08011633 	.word	0x08011633
 801140c:	0801165f 	.word	0x0801165f
 8011410:	08011693 	.word	0x08011693
 8011414:	08011693 	.word	0x08011693
 8011418:	08011693 	.word	0x08011693
 801141c:	08011693 	.word	0x08011693
 8011420:	08011693 	.word	0x08011693
 8011424:	08011693 	.word	0x08011693
 8011428:	08011693 	.word	0x08011693
 801142c:	08011431 	.word	0x08011431
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011436:	69db      	ldr	r3, [r3, #28]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d00b      	beq.n	8011454 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011442:	69db      	ldr	r3, [r3, #28]
 8011444:	687a      	ldr	r2, [r7, #4]
 8011446:	7c12      	ldrb	r2, [r2, #16]
 8011448:	f107 0108 	add.w	r1, r7, #8
 801144c:	4610      	mov	r0, r2
 801144e:	4798      	blx	r3
 8011450:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011452:	e126      	b.n	80116a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011454:	6839      	ldr	r1, [r7, #0]
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f000 fb27 	bl	8011aaa <USBD_CtlError>
        err++;
 801145c:	7afb      	ldrb	r3, [r7, #11]
 801145e:	3301      	adds	r3, #1
 8011460:	72fb      	strb	r3, [r7, #11]
      break;
 8011462:	e11e      	b.n	80116a2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	7c12      	ldrb	r2, [r2, #16]
 8011470:	f107 0108 	add.w	r1, r7, #8
 8011474:	4610      	mov	r0, r2
 8011476:	4798      	blx	r3
 8011478:	60f8      	str	r0, [r7, #12]
      break;
 801147a:	e112      	b.n	80116a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	7c1b      	ldrb	r3, [r3, #16]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d10d      	bne.n	80114a0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801148c:	f107 0208 	add.w	r2, r7, #8
 8011490:	4610      	mov	r0, r2
 8011492:	4798      	blx	r3
 8011494:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	3301      	adds	r3, #1
 801149a:	2202      	movs	r2, #2
 801149c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801149e:	e100      	b.n	80116a2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114a8:	f107 0208 	add.w	r2, r7, #8
 80114ac:	4610      	mov	r0, r2
 80114ae:	4798      	blx	r3
 80114b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	3301      	adds	r3, #1
 80114b6:	2202      	movs	r2, #2
 80114b8:	701a      	strb	r2, [r3, #0]
      break;
 80114ba:	e0f2      	b.n	80116a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	885b      	ldrh	r3, [r3, #2]
 80114c0:	b2db      	uxtb	r3, r3
 80114c2:	2b05      	cmp	r3, #5
 80114c4:	f200 80ac 	bhi.w	8011620 <USBD_GetDescriptor+0x258>
 80114c8:	a201      	add	r2, pc, #4	; (adr r2, 80114d0 <USBD_GetDescriptor+0x108>)
 80114ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ce:	bf00      	nop
 80114d0:	080114e9 	.word	0x080114e9
 80114d4:	0801151d 	.word	0x0801151d
 80114d8:	08011551 	.word	0x08011551
 80114dc:	08011585 	.word	0x08011585
 80114e0:	080115b9 	.word	0x080115b9
 80114e4:	080115ed 	.word	0x080115ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d00b      	beq.n	801150c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	687a      	ldr	r2, [r7, #4]
 80114fe:	7c12      	ldrb	r2, [r2, #16]
 8011500:	f107 0108 	add.w	r1, r7, #8
 8011504:	4610      	mov	r0, r2
 8011506:	4798      	blx	r3
 8011508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801150a:	e091      	b.n	8011630 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801150c:	6839      	ldr	r1, [r7, #0]
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f000 facb 	bl	8011aaa <USBD_CtlError>
            err++;
 8011514:	7afb      	ldrb	r3, [r7, #11]
 8011516:	3301      	adds	r3, #1
 8011518:	72fb      	strb	r3, [r7, #11]
          break;
 801151a:	e089      	b.n	8011630 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011522:	689b      	ldr	r3, [r3, #8]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d00b      	beq.n	8011540 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801152e:	689b      	ldr	r3, [r3, #8]
 8011530:	687a      	ldr	r2, [r7, #4]
 8011532:	7c12      	ldrb	r2, [r2, #16]
 8011534:	f107 0108 	add.w	r1, r7, #8
 8011538:	4610      	mov	r0, r2
 801153a:	4798      	blx	r3
 801153c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801153e:	e077      	b.n	8011630 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011540:	6839      	ldr	r1, [r7, #0]
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f000 fab1 	bl	8011aaa <USBD_CtlError>
            err++;
 8011548:	7afb      	ldrb	r3, [r7, #11]
 801154a:	3301      	adds	r3, #1
 801154c:	72fb      	strb	r3, [r7, #11]
          break;
 801154e:	e06f      	b.n	8011630 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d00b      	beq.n	8011574 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011562:	68db      	ldr	r3, [r3, #12]
 8011564:	687a      	ldr	r2, [r7, #4]
 8011566:	7c12      	ldrb	r2, [r2, #16]
 8011568:	f107 0108 	add.w	r1, r7, #8
 801156c:	4610      	mov	r0, r2
 801156e:	4798      	blx	r3
 8011570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011572:	e05d      	b.n	8011630 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011574:	6839      	ldr	r1, [r7, #0]
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 fa97 	bl	8011aaa <USBD_CtlError>
            err++;
 801157c:	7afb      	ldrb	r3, [r7, #11]
 801157e:	3301      	adds	r3, #1
 8011580:	72fb      	strb	r3, [r7, #11]
          break;
 8011582:	e055      	b.n	8011630 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801158a:	691b      	ldr	r3, [r3, #16]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d00b      	beq.n	80115a8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011596:	691b      	ldr	r3, [r3, #16]
 8011598:	687a      	ldr	r2, [r7, #4]
 801159a:	7c12      	ldrb	r2, [r2, #16]
 801159c:	f107 0108 	add.w	r1, r7, #8
 80115a0:	4610      	mov	r0, r2
 80115a2:	4798      	blx	r3
 80115a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80115a6:	e043      	b.n	8011630 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80115a8:	6839      	ldr	r1, [r7, #0]
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	f000 fa7d 	bl	8011aaa <USBD_CtlError>
            err++;
 80115b0:	7afb      	ldrb	r3, [r7, #11]
 80115b2:	3301      	adds	r3, #1
 80115b4:	72fb      	strb	r3, [r7, #11]
          break;
 80115b6:	e03b      	b.n	8011630 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115be:	695b      	ldr	r3, [r3, #20]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d00b      	beq.n	80115dc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115ca:	695b      	ldr	r3, [r3, #20]
 80115cc:	687a      	ldr	r2, [r7, #4]
 80115ce:	7c12      	ldrb	r2, [r2, #16]
 80115d0:	f107 0108 	add.w	r1, r7, #8
 80115d4:	4610      	mov	r0, r2
 80115d6:	4798      	blx	r3
 80115d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80115da:	e029      	b.n	8011630 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80115dc:	6839      	ldr	r1, [r7, #0]
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f000 fa63 	bl	8011aaa <USBD_CtlError>
            err++;
 80115e4:	7afb      	ldrb	r3, [r7, #11]
 80115e6:	3301      	adds	r3, #1
 80115e8:	72fb      	strb	r3, [r7, #11]
          break;
 80115ea:	e021      	b.n	8011630 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115f2:	699b      	ldr	r3, [r3, #24]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d00b      	beq.n	8011610 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115fe:	699b      	ldr	r3, [r3, #24]
 8011600:	687a      	ldr	r2, [r7, #4]
 8011602:	7c12      	ldrb	r2, [r2, #16]
 8011604:	f107 0108 	add.w	r1, r7, #8
 8011608:	4610      	mov	r0, r2
 801160a:	4798      	blx	r3
 801160c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801160e:	e00f      	b.n	8011630 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011610:	6839      	ldr	r1, [r7, #0]
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f000 fa49 	bl	8011aaa <USBD_CtlError>
            err++;
 8011618:	7afb      	ldrb	r3, [r7, #11]
 801161a:	3301      	adds	r3, #1
 801161c:	72fb      	strb	r3, [r7, #11]
          break;
 801161e:	e007      	b.n	8011630 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011620:	6839      	ldr	r1, [r7, #0]
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f000 fa41 	bl	8011aaa <USBD_CtlError>
          err++;
 8011628:	7afb      	ldrb	r3, [r7, #11]
 801162a:	3301      	adds	r3, #1
 801162c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801162e:	bf00      	nop
      }
      break;
 8011630:	e037      	b.n	80116a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	7c1b      	ldrb	r3, [r3, #16]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d109      	bne.n	801164e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011642:	f107 0208 	add.w	r2, r7, #8
 8011646:	4610      	mov	r0, r2
 8011648:	4798      	blx	r3
 801164a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801164c:	e029      	b.n	80116a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801164e:	6839      	ldr	r1, [r7, #0]
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f000 fa2a 	bl	8011aaa <USBD_CtlError>
        err++;
 8011656:	7afb      	ldrb	r3, [r7, #11]
 8011658:	3301      	adds	r3, #1
 801165a:	72fb      	strb	r3, [r7, #11]
      break;
 801165c:	e021      	b.n	80116a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	7c1b      	ldrb	r3, [r3, #16]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d10d      	bne.n	8011682 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801166e:	f107 0208 	add.w	r2, r7, #8
 8011672:	4610      	mov	r0, r2
 8011674:	4798      	blx	r3
 8011676:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	3301      	adds	r3, #1
 801167c:	2207      	movs	r2, #7
 801167e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011680:	e00f      	b.n	80116a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011682:	6839      	ldr	r1, [r7, #0]
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f000 fa10 	bl	8011aaa <USBD_CtlError>
        err++;
 801168a:	7afb      	ldrb	r3, [r7, #11]
 801168c:	3301      	adds	r3, #1
 801168e:	72fb      	strb	r3, [r7, #11]
      break;
 8011690:	e007      	b.n	80116a2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011692:	6839      	ldr	r1, [r7, #0]
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f000 fa08 	bl	8011aaa <USBD_CtlError>
      err++;
 801169a:	7afb      	ldrb	r3, [r7, #11]
 801169c:	3301      	adds	r3, #1
 801169e:	72fb      	strb	r3, [r7, #11]
      break;
 80116a0:	bf00      	nop
  }

  if (err != 0U)
 80116a2:	7afb      	ldrb	r3, [r7, #11]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d11e      	bne.n	80116e6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	88db      	ldrh	r3, [r3, #6]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d016      	beq.n	80116de <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80116b0:	893b      	ldrh	r3, [r7, #8]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d00e      	beq.n	80116d4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	88da      	ldrh	r2, [r3, #6]
 80116ba:	893b      	ldrh	r3, [r7, #8]
 80116bc:	4293      	cmp	r3, r2
 80116be:	bf28      	it	cs
 80116c0:	4613      	movcs	r3, r2
 80116c2:	b29b      	uxth	r3, r3
 80116c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80116c6:	893b      	ldrh	r3, [r7, #8]
 80116c8:	461a      	mov	r2, r3
 80116ca:	68f9      	ldr	r1, [r7, #12]
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f000 fa5d 	bl	8011b8c <USBD_CtlSendData>
 80116d2:	e009      	b.n	80116e8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80116d4:	6839      	ldr	r1, [r7, #0]
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f000 f9e7 	bl	8011aaa <USBD_CtlError>
 80116dc:	e004      	b.n	80116e8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f000 faae 	bl	8011c40 <USBD_CtlSendStatus>
 80116e4:	e000      	b.n	80116e8 <USBD_GetDescriptor+0x320>
    return;
 80116e6:	bf00      	nop
  }
}
 80116e8:	3710      	adds	r7, #16
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
 80116ee:	bf00      	nop

080116f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	889b      	ldrh	r3, [r3, #4]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d131      	bne.n	8011766 <USBD_SetAddress+0x76>
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	88db      	ldrh	r3, [r3, #6]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d12d      	bne.n	8011766 <USBD_SetAddress+0x76>
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	885b      	ldrh	r3, [r3, #2]
 801170e:	2b7f      	cmp	r3, #127	; 0x7f
 8011710:	d829      	bhi.n	8011766 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	885b      	ldrh	r3, [r3, #2]
 8011716:	b2db      	uxtb	r3, r3
 8011718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801171c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011724:	b2db      	uxtb	r3, r3
 8011726:	2b03      	cmp	r3, #3
 8011728:	d104      	bne.n	8011734 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801172a:	6839      	ldr	r1, [r7, #0]
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f000 f9bc 	bl	8011aaa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011732:	e01d      	b.n	8011770 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	7bfa      	ldrb	r2, [r7, #15]
 8011738:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801173c:	7bfb      	ldrb	r3, [r7, #15]
 801173e:	4619      	mov	r1, r3
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f001 fc71 	bl	8013028 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f000 fa7a 	bl	8011c40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801174c:	7bfb      	ldrb	r3, [r7, #15]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d004      	beq.n	801175c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2202      	movs	r2, #2
 8011756:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801175a:	e009      	b.n	8011770 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2201      	movs	r2, #1
 8011760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011764:	e004      	b.n	8011770 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011766:	6839      	ldr	r1, [r7, #0]
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f000 f99e 	bl	8011aaa <USBD_CtlError>
  }
}
 801176e:	bf00      	nop
 8011770:	bf00      	nop
 8011772:	3710      	adds	r7, #16
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}

08011778 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b084      	sub	sp, #16
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
 8011780:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011782:	2300      	movs	r3, #0
 8011784:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	885b      	ldrh	r3, [r3, #2]
 801178a:	b2da      	uxtb	r2, r3
 801178c:	4b4e      	ldr	r3, [pc, #312]	; (80118c8 <USBD_SetConfig+0x150>)
 801178e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011790:	4b4d      	ldr	r3, [pc, #308]	; (80118c8 <USBD_SetConfig+0x150>)
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	2b01      	cmp	r3, #1
 8011796:	d905      	bls.n	80117a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011798:	6839      	ldr	r1, [r7, #0]
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f000 f985 	bl	8011aaa <USBD_CtlError>
    return USBD_FAIL;
 80117a0:	2303      	movs	r3, #3
 80117a2:	e08c      	b.n	80118be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117aa:	b2db      	uxtb	r3, r3
 80117ac:	2b02      	cmp	r3, #2
 80117ae:	d002      	beq.n	80117b6 <USBD_SetConfig+0x3e>
 80117b0:	2b03      	cmp	r3, #3
 80117b2:	d029      	beq.n	8011808 <USBD_SetConfig+0x90>
 80117b4:	e075      	b.n	80118a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80117b6:	4b44      	ldr	r3, [pc, #272]	; (80118c8 <USBD_SetConfig+0x150>)
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d020      	beq.n	8011800 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80117be:	4b42      	ldr	r3, [pc, #264]	; (80118c8 <USBD_SetConfig+0x150>)
 80117c0:	781b      	ldrb	r3, [r3, #0]
 80117c2:	461a      	mov	r2, r3
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80117c8:	4b3f      	ldr	r3, [pc, #252]	; (80118c8 <USBD_SetConfig+0x150>)
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	4619      	mov	r1, r3
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f7ff f849 	bl	8010866 <USBD_SetClassConfig>
 80117d4:	4603      	mov	r3, r0
 80117d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80117d8:	7bfb      	ldrb	r3, [r7, #15]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d008      	beq.n	80117f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80117de:	6839      	ldr	r1, [r7, #0]
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f000 f962 	bl	8011aaa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2202      	movs	r2, #2
 80117ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80117ee:	e065      	b.n	80118bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f000 fa25 	bl	8011c40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2203      	movs	r2, #3
 80117fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80117fe:	e05d      	b.n	80118bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f000 fa1d 	bl	8011c40 <USBD_CtlSendStatus>
      break;
 8011806:	e059      	b.n	80118bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011808:	4b2f      	ldr	r3, [pc, #188]	; (80118c8 <USBD_SetConfig+0x150>)
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d112      	bne.n	8011836 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2202      	movs	r2, #2
 8011814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011818:	4b2b      	ldr	r3, [pc, #172]	; (80118c8 <USBD_SetConfig+0x150>)
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	461a      	mov	r2, r3
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011822:	4b29      	ldr	r3, [pc, #164]	; (80118c8 <USBD_SetConfig+0x150>)
 8011824:	781b      	ldrb	r3, [r3, #0]
 8011826:	4619      	mov	r1, r3
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f7ff f838 	bl	801089e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f000 fa06 	bl	8011c40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011834:	e042      	b.n	80118bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011836:	4b24      	ldr	r3, [pc, #144]	; (80118c8 <USBD_SetConfig+0x150>)
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	461a      	mov	r2, r3
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	429a      	cmp	r2, r3
 8011842:	d02a      	beq.n	801189a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	b2db      	uxtb	r3, r3
 801184a:	4619      	mov	r1, r3
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f7ff f826 	bl	801089e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011852:	4b1d      	ldr	r3, [pc, #116]	; (80118c8 <USBD_SetConfig+0x150>)
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	461a      	mov	r2, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801185c:	4b1a      	ldr	r3, [pc, #104]	; (80118c8 <USBD_SetConfig+0x150>)
 801185e:	781b      	ldrb	r3, [r3, #0]
 8011860:	4619      	mov	r1, r3
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f7fe ffff 	bl	8010866 <USBD_SetClassConfig>
 8011868:	4603      	mov	r3, r0
 801186a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801186c:	7bfb      	ldrb	r3, [r7, #15]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d00f      	beq.n	8011892 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011872:	6839      	ldr	r1, [r7, #0]
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f000 f918 	bl	8011aaa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	b2db      	uxtb	r3, r3
 8011880:	4619      	mov	r1, r3
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f7ff f80b 	bl	801089e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2202      	movs	r2, #2
 801188c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011890:	e014      	b.n	80118bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f000 f9d4 	bl	8011c40 <USBD_CtlSendStatus>
      break;
 8011898:	e010      	b.n	80118bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f000 f9d0 	bl	8011c40 <USBD_CtlSendStatus>
      break;
 80118a0:	e00c      	b.n	80118bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80118a2:	6839      	ldr	r1, [r7, #0]
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f000 f900 	bl	8011aaa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80118aa:	4b07      	ldr	r3, [pc, #28]	; (80118c8 <USBD_SetConfig+0x150>)
 80118ac:	781b      	ldrb	r3, [r3, #0]
 80118ae:	4619      	mov	r1, r3
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f7fe fff4 	bl	801089e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80118b6:	2303      	movs	r3, #3
 80118b8:	73fb      	strb	r3, [r7, #15]
      break;
 80118ba:	bf00      	nop
  }

  return ret;
 80118bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3710      	adds	r7, #16
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}
 80118c6:	bf00      	nop
 80118c8:	20001070 	.word	0x20001070

080118cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	88db      	ldrh	r3, [r3, #6]
 80118da:	2b01      	cmp	r3, #1
 80118dc:	d004      	beq.n	80118e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80118de:	6839      	ldr	r1, [r7, #0]
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f000 f8e2 	bl	8011aaa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80118e6:	e023      	b.n	8011930 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118ee:	b2db      	uxtb	r3, r3
 80118f0:	2b02      	cmp	r3, #2
 80118f2:	dc02      	bgt.n	80118fa <USBD_GetConfig+0x2e>
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	dc03      	bgt.n	8011900 <USBD_GetConfig+0x34>
 80118f8:	e015      	b.n	8011926 <USBD_GetConfig+0x5a>
 80118fa:	2b03      	cmp	r3, #3
 80118fc:	d00b      	beq.n	8011916 <USBD_GetConfig+0x4a>
 80118fe:	e012      	b.n	8011926 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2200      	movs	r2, #0
 8011904:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	3308      	adds	r3, #8
 801190a:	2201      	movs	r2, #1
 801190c:	4619      	mov	r1, r3
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	f000 f93c 	bl	8011b8c <USBD_CtlSendData>
        break;
 8011914:	e00c      	b.n	8011930 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	3304      	adds	r3, #4
 801191a:	2201      	movs	r2, #1
 801191c:	4619      	mov	r1, r3
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f000 f934 	bl	8011b8c <USBD_CtlSendData>
        break;
 8011924:	e004      	b.n	8011930 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011926:	6839      	ldr	r1, [r7, #0]
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f000 f8be 	bl	8011aaa <USBD_CtlError>
        break;
 801192e:	bf00      	nop
}
 8011930:	bf00      	nop
 8011932:	3708      	adds	r7, #8
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011948:	b2db      	uxtb	r3, r3
 801194a:	3b01      	subs	r3, #1
 801194c:	2b02      	cmp	r3, #2
 801194e:	d81e      	bhi.n	801198e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	88db      	ldrh	r3, [r3, #6]
 8011954:	2b02      	cmp	r3, #2
 8011956:	d004      	beq.n	8011962 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011958:	6839      	ldr	r1, [r7, #0]
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f000 f8a5 	bl	8011aaa <USBD_CtlError>
        break;
 8011960:	e01a      	b.n	8011998 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2201      	movs	r2, #1
 8011966:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801196e:	2b00      	cmp	r3, #0
 8011970:	d005      	beq.n	801197e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	68db      	ldr	r3, [r3, #12]
 8011976:	f043 0202 	orr.w	r2, r3, #2
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	330c      	adds	r3, #12
 8011982:	2202      	movs	r2, #2
 8011984:	4619      	mov	r1, r3
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f000 f900 	bl	8011b8c <USBD_CtlSendData>
      break;
 801198c:	e004      	b.n	8011998 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801198e:	6839      	ldr	r1, [r7, #0]
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f000 f88a 	bl	8011aaa <USBD_CtlError>
      break;
 8011996:	bf00      	nop
  }
}
 8011998:	bf00      	nop
 801199a:	3708      	adds	r7, #8
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}

080119a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	885b      	ldrh	r3, [r3, #2]
 80119ae:	2b01      	cmp	r3, #1
 80119b0:	d107      	bne.n	80119c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2201      	movs	r2, #1
 80119b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f000 f940 	bl	8011c40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80119c0:	e013      	b.n	80119ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	885b      	ldrh	r3, [r3, #2]
 80119c6:	2b02      	cmp	r3, #2
 80119c8:	d10b      	bne.n	80119e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	889b      	ldrh	r3, [r3, #4]
 80119ce:	0a1b      	lsrs	r3, r3, #8
 80119d0:	b29b      	uxth	r3, r3
 80119d2:	b2da      	uxtb	r2, r3
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f000 f930 	bl	8011c40 <USBD_CtlSendStatus>
}
 80119e0:	e003      	b.n	80119ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80119e2:	6839      	ldr	r1, [r7, #0]
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f000 f860 	bl	8011aaa <USBD_CtlError>
}
 80119ea:	bf00      	nop
 80119ec:	3708      	adds	r7, #8
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}

080119f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119f2:	b580      	push	{r7, lr}
 80119f4:	b082      	sub	sp, #8
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	6078      	str	r0, [r7, #4]
 80119fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a02:	b2db      	uxtb	r3, r3
 8011a04:	3b01      	subs	r3, #1
 8011a06:	2b02      	cmp	r3, #2
 8011a08:	d80b      	bhi.n	8011a22 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	885b      	ldrh	r3, [r3, #2]
 8011a0e:	2b01      	cmp	r3, #1
 8011a10:	d10c      	bne.n	8011a2c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2200      	movs	r2, #0
 8011a16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f000 f910 	bl	8011c40 <USBD_CtlSendStatus>
      }
      break;
 8011a20:	e004      	b.n	8011a2c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011a22:	6839      	ldr	r1, [r7, #0]
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f000 f840 	bl	8011aaa <USBD_CtlError>
      break;
 8011a2a:	e000      	b.n	8011a2e <USBD_ClrFeature+0x3c>
      break;
 8011a2c:	bf00      	nop
  }
}
 8011a2e:	bf00      	nop
 8011a30:	3708      	adds	r7, #8
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}

08011a36 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011a36:	b580      	push	{r7, lr}
 8011a38:	b084      	sub	sp, #16
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6078      	str	r0, [r7, #4]
 8011a3e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	781a      	ldrb	r2, [r3, #0]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	3301      	adds	r3, #1
 8011a50:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	781a      	ldrb	r2, [r3, #0]
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011a60:	68f8      	ldr	r0, [r7, #12]
 8011a62:	f7ff fa17 	bl	8010e94 <SWAPBYTE>
 8011a66:	4603      	mov	r3, r0
 8011a68:	461a      	mov	r2, r3
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	3301      	adds	r3, #1
 8011a72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	3301      	adds	r3, #1
 8011a78:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011a7a:	68f8      	ldr	r0, [r7, #12]
 8011a7c:	f7ff fa0a 	bl	8010e94 <SWAPBYTE>
 8011a80:	4603      	mov	r3, r0
 8011a82:	461a      	mov	r2, r3
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	3301      	adds	r3, #1
 8011a8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	3301      	adds	r3, #1
 8011a92:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011a94:	68f8      	ldr	r0, [r7, #12]
 8011a96:	f7ff f9fd 	bl	8010e94 <SWAPBYTE>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	80da      	strh	r2, [r3, #6]
}
 8011aa2:	bf00      	nop
 8011aa4:	3710      	adds	r7, #16
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	b082      	sub	sp, #8
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	6078      	str	r0, [r7, #4]
 8011ab2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ab4:	2180      	movs	r1, #128	; 0x80
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f001 fa1c 	bl	8012ef4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011abc:	2100      	movs	r1, #0
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f001 fa18 	bl	8012ef4 <USBD_LL_StallEP>
}
 8011ac4:	bf00      	nop
 8011ac6:	3708      	adds	r7, #8
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}

08011acc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b086      	sub	sp, #24
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	60b9      	str	r1, [r7, #8]
 8011ad6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011ad8:	2300      	movs	r3, #0
 8011ada:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d036      	beq.n	8011b50 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011ae6:	6938      	ldr	r0, [r7, #16]
 8011ae8:	f000 f836 	bl	8011b58 <USBD_GetLen>
 8011aec:	4603      	mov	r3, r0
 8011aee:	3301      	adds	r3, #1
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	005b      	lsls	r3, r3, #1
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011afa:	7dfb      	ldrb	r3, [r7, #23]
 8011afc:	68ba      	ldr	r2, [r7, #8]
 8011afe:	4413      	add	r3, r2
 8011b00:	687a      	ldr	r2, [r7, #4]
 8011b02:	7812      	ldrb	r2, [r2, #0]
 8011b04:	701a      	strb	r2, [r3, #0]
  idx++;
 8011b06:	7dfb      	ldrb	r3, [r7, #23]
 8011b08:	3301      	adds	r3, #1
 8011b0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011b0c:	7dfb      	ldrb	r3, [r7, #23]
 8011b0e:	68ba      	ldr	r2, [r7, #8]
 8011b10:	4413      	add	r3, r2
 8011b12:	2203      	movs	r2, #3
 8011b14:	701a      	strb	r2, [r3, #0]
  idx++;
 8011b16:	7dfb      	ldrb	r3, [r7, #23]
 8011b18:	3301      	adds	r3, #1
 8011b1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011b1c:	e013      	b.n	8011b46 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011b1e:	7dfb      	ldrb	r3, [r7, #23]
 8011b20:	68ba      	ldr	r2, [r7, #8]
 8011b22:	4413      	add	r3, r2
 8011b24:	693a      	ldr	r2, [r7, #16]
 8011b26:	7812      	ldrb	r2, [r2, #0]
 8011b28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	613b      	str	r3, [r7, #16]
    idx++;
 8011b30:	7dfb      	ldrb	r3, [r7, #23]
 8011b32:	3301      	adds	r3, #1
 8011b34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011b36:	7dfb      	ldrb	r3, [r7, #23]
 8011b38:	68ba      	ldr	r2, [r7, #8]
 8011b3a:	4413      	add	r3, r2
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	701a      	strb	r2, [r3, #0]
    idx++;
 8011b40:	7dfb      	ldrb	r3, [r7, #23]
 8011b42:	3301      	adds	r3, #1
 8011b44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011b46:	693b      	ldr	r3, [r7, #16]
 8011b48:	781b      	ldrb	r3, [r3, #0]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d1e7      	bne.n	8011b1e <USBD_GetString+0x52>
 8011b4e:	e000      	b.n	8011b52 <USBD_GetString+0x86>
    return;
 8011b50:	bf00      	nop
  }
}
 8011b52:	3718      	adds	r7, #24
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}

08011b58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b085      	sub	sp, #20
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011b60:	2300      	movs	r3, #0
 8011b62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011b68:	e005      	b.n	8011b76 <USBD_GetLen+0x1e>
  {
    len++;
 8011b6a:	7bfb      	ldrb	r3, [r7, #15]
 8011b6c:	3301      	adds	r3, #1
 8011b6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	3301      	adds	r3, #1
 8011b74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d1f5      	bne.n	8011b6a <USBD_GetLen+0x12>
  }

  return len;
 8011b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3714      	adds	r7, #20
 8011b84:	46bd      	mov	sp, r7
 8011b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8a:	4770      	bx	lr

08011b8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b084      	sub	sp, #16
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	60f8      	str	r0, [r7, #12]
 8011b94:	60b9      	str	r1, [r7, #8]
 8011b96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2202      	movs	r2, #2
 8011b9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	687a      	ldr	r2, [r7, #4]
 8011ba4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	687a      	ldr	r2, [r7, #4]
 8011baa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	68ba      	ldr	r2, [r7, #8]
 8011bb0:	2100      	movs	r1, #0
 8011bb2:	68f8      	ldr	r0, [r7, #12]
 8011bb4:	f001 fa6e 	bl	8013094 <USBD_LL_Transmit>

  return USBD_OK;
 8011bb8:	2300      	movs	r3, #0
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3710      	adds	r7, #16
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}

08011bc2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011bc2:	b580      	push	{r7, lr}
 8011bc4:	b084      	sub	sp, #16
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	60f8      	str	r0, [r7, #12]
 8011bca:	60b9      	str	r1, [r7, #8]
 8011bcc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	68ba      	ldr	r2, [r7, #8]
 8011bd2:	2100      	movs	r1, #0
 8011bd4:	68f8      	ldr	r0, [r7, #12]
 8011bd6:	f001 fa5d 	bl	8013094 <USBD_LL_Transmit>

  return USBD_OK;
 8011bda:	2300      	movs	r3, #0
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3710      	adds	r7, #16
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b084      	sub	sp, #16
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	60f8      	str	r0, [r7, #12]
 8011bec:	60b9      	str	r1, [r7, #8]
 8011bee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	2203      	movs	r2, #3
 8011bf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	687a      	ldr	r2, [r7, #4]
 8011bfc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	68ba      	ldr	r2, [r7, #8]
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	68f8      	ldr	r0, [r7, #12]
 8011c10:	f001 fa78 	bl	8013104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c14:	2300      	movs	r3, #0
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3710      	adds	r7, #16
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}

08011c1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011c1e:	b580      	push	{r7, lr}
 8011c20:	b084      	sub	sp, #16
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	60f8      	str	r0, [r7, #12]
 8011c26:	60b9      	str	r1, [r7, #8]
 8011c28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	68ba      	ldr	r2, [r7, #8]
 8011c2e:	2100      	movs	r1, #0
 8011c30:	68f8      	ldr	r0, [r7, #12]
 8011c32:	f001 fa67 	bl	8013104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c36:	2300      	movs	r3, #0
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3710      	adds	r7, #16
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}

08011c40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2204      	movs	r2, #4
 8011c4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011c50:	2300      	movs	r3, #0
 8011c52:	2200      	movs	r2, #0
 8011c54:	2100      	movs	r1, #0
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f001 fa1c 	bl	8013094 <USBD_LL_Transmit>

  return USBD_OK;
 8011c5c:	2300      	movs	r3, #0
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3708      	adds	r7, #8
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}

08011c66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011c66:	b580      	push	{r7, lr}
 8011c68:	b082      	sub	sp, #8
 8011c6a:	af00      	add	r7, sp, #0
 8011c6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2205      	movs	r2, #5
 8011c72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011c76:	2300      	movs	r3, #0
 8011c78:	2200      	movs	r2, #0
 8011c7a:	2100      	movs	r1, #0
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f001 fa41 	bl	8013104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c82:	2300      	movs	r3, #0
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3708      	adds	r7, #8
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}

08011c8c <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f7f3 fc1b 	bl	80054d0 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8011c9a:	bf00      	nop
 8011c9c:	3708      	adds	r7, #8
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8011ca2:	b580      	push	{r7, lr}
 8011ca4:	b082      	sub	sp, #8
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8011caa:	e002      	b.n	8011cb2 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8011cac:	2001      	movs	r0, #1
 8011cae:	f7ff ffed 	bl	8011c8c <SPIF_Delay>
  while (Handle->Lock)
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	7b1b      	ldrb	r3, [r3, #12]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d1f8      	bne.n	8011cac <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	731a      	strb	r2, [r3, #12]
}
 8011cc0:	bf00      	nop
 8011cc2:	3708      	adds	r7, #8
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}

08011cc8 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b083      	sub	sp, #12
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	731a      	strb	r2, [r3, #12]
}
 8011cd6:	bf00      	nop
 8011cd8:	370c      	adds	r7, #12
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce0:	4770      	bx	lr

08011ce2 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8011ce2:	b580      	push	{r7, lr}
 8011ce4:	b084      	sub	sp, #16
 8011ce6:	af00      	add	r7, sp, #0
 8011ce8:	6078      	str	r0, [r7, #4]
 8011cea:	460b      	mov	r3, r1
 8011cec:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6858      	ldr	r0, [r3, #4]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	691b      	ldr	r3, [r3, #16]
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	78fa      	ldrb	r2, [r7, #3]
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	f7f5 fbaa 	bl	8007454 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8011d00:	2300      	movs	r3, #0
 8011d02:	60fb      	str	r3, [r7, #12]
 8011d04:	e002      	b.n	8011d0c <SPIF_CsPin+0x2a>
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	3301      	adds	r3, #1
 8011d0a:	60fb      	str	r3, [r7, #12]
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	2b09      	cmp	r3, #9
 8011d10:	ddf9      	ble.n	8011d06 <SPIF_CsPin+0x24>
}
 8011d12:	bf00      	nop
 8011d14:	bf00      	nop
 8011d16:	3710      	adds	r7, #16
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}

08011d1c <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b088      	sub	sp, #32
 8011d20:	af02      	add	r7, sp, #8
 8011d22:	60f8      	str	r0, [r7, #12]
 8011d24:	60b9      	str	r1, [r7, #8]
 8011d26:	607a      	str	r2, [r7, #4]
 8011d28:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	6818      	ldr	r0, [r3, #0]
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	b29a      	uxth	r2, r3
 8011d36:	6a3b      	ldr	r3, [r7, #32]
 8011d38:	9300      	str	r3, [sp, #0]
 8011d3a:	4613      	mov	r3, r2
 8011d3c:	687a      	ldr	r2, [r7, #4]
 8011d3e:	68b9      	ldr	r1, [r7, #8]
 8011d40:	f7f9 fae5 	bl	800b30e <HAL_SPI_TransmitReceive>
 8011d44:	4603      	mov	r3, r0
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d101      	bne.n	8011d4e <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8011d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3718      	adds	r7, #24
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b086      	sub	sp, #24
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	60f8      	str	r0, [r7, #12]
 8011d60:	60b9      	str	r1, [r7, #8]
 8011d62:	607a      	str	r2, [r7, #4]
 8011d64:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8011d66:	2300      	movs	r3, #0
 8011d68:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	6818      	ldr	r0, [r3, #0]
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	b29a      	uxth	r2, r3
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	68b9      	ldr	r1, [r7, #8]
 8011d76:	f7f9 f81e 	bl	800adb6 <HAL_SPI_Transmit>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d101      	bne.n	8011d84 <SPIF_Transmit+0x2c>
  {
    retVal = true;
 8011d80:	2301      	movs	r3, #1
 8011d82:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8011d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3718      	adds	r7, #24
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}

08011d8e <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8011d8e:	b580      	push	{r7, lr}
 8011d90:	b086      	sub	sp, #24
 8011d92:	af00      	add	r7, sp, #0
 8011d94:	60f8      	str	r0, [r7, #12]
 8011d96:	60b9      	str	r1, [r7, #8]
 8011d98:	607a      	str	r2, [r7, #4]
 8011d9a:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	6818      	ldr	r0, [r3, #0]
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	68b9      	ldr	r1, [r7, #8]
 8011dac:	f7f9 f978 	bl	800b0a0 <HAL_SPI_Receive>
 8011db0:	4603      	mov	r3, r0
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d101      	bne.n	8011dba <SPIF_Receive+0x2c>
  {
    retVal = true;
 8011db6:	2301      	movs	r3, #1
 8011db8:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8011dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3718      	adds	r7, #24
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}

08011dc4 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b084      	sub	sp, #16
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8011dcc:	2301      	movs	r3, #1
 8011dce:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8011dd0:	2306      	movs	r3, #6
 8011dd2:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8011dd4:	2100      	movs	r1, #0
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f7ff ff83 	bl	8011ce2 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8011ddc:	f107 010c 	add.w	r1, r7, #12
 8011de0:	2364      	movs	r3, #100	; 0x64
 8011de2:	2201      	movs	r2, #1
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f7ff ffb7 	bl	8011d58 <SPIF_Transmit>
 8011dea:	4603      	mov	r3, r0
 8011dec:	f083 0301 	eor.w	r3, r3, #1
 8011df0:	b2db      	uxtb	r3, r3
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d001      	beq.n	8011dfa <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8011df6:	2300      	movs	r3, #0
 8011df8:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8011dfa:	2101      	movs	r1, #1
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f7ff ff70 	bl	8011ce2 <SPIF_CsPin>
  return retVal;
 8011e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3710      	adds	r7, #16
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}

08011e0c <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8011e14:	2301      	movs	r3, #1
 8011e16:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8011e18:	2304      	movs	r3, #4
 8011e1a:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8011e1c:	2100      	movs	r1, #0
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f7ff ff5f 	bl	8011ce2 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8011e24:	f107 010c 	add.w	r1, r7, #12
 8011e28:	2364      	movs	r3, #100	; 0x64
 8011e2a:	2201      	movs	r2, #1
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f7ff ff93 	bl	8011d58 <SPIF_Transmit>
 8011e32:	4603      	mov	r3, r0
 8011e34:	f083 0301 	eor.w	r3, r3, #1
 8011e38:	b2db      	uxtb	r3, r3
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d001      	beq.n	8011e42 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8011e3e:	2300      	movs	r3, #0
 8011e40:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8011e42:	2101      	movs	r1, #1
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f7ff ff4c 	bl	8011ce2 <SPIF_CsPin>
  return retVal;
 8011e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	3710      	adds	r7, #16
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}

08011e54 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b086      	sub	sp, #24
 8011e58:	af02      	add	r7, sp, #8
 8011e5a:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8011e60:	f24a 5305 	movw	r3, #42245	; 0xa505
 8011e64:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8011e66:	2100      	movs	r1, #0
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f7ff ff3a 	bl	8011ce2 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8011e6e:	f107 0208 	add.w	r2, r7, #8
 8011e72:	f107 010c 	add.w	r1, r7, #12
 8011e76:	2364      	movs	r3, #100	; 0x64
 8011e78:	9300      	str	r3, [sp, #0]
 8011e7a:	2302      	movs	r3, #2
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7ff ff4d 	bl	8011d1c <SPIF_TransmitReceive>
 8011e82:	4603      	mov	r3, r0
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d001      	beq.n	8011e8c <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 8011e88:	7a7b      	ldrb	r3, [r7, #9]
 8011e8a:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 8011e8c:	2101      	movs	r1, #1
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f7ff ff27 	bl	8011ce2 <SPIF_CsPin>
  return retVal;
 8011e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3710      	adds	r7, #16
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}

08011e9e <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8011e9e:	b580      	push	{r7, lr}
 8011ea0:	b084      	sub	sp, #16
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
 8011ea6:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 8011eac:	f7f3 fb04 	bl	80054b8 <HAL_GetTick>
 8011eb0:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8011eb2:	2001      	movs	r0, #1
 8011eb4:	f7ff feea 	bl	8011c8c <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 8011eb8:	f7f3 fafe 	bl	80054b8 <HAL_GetTick>
 8011ebc:	4602      	mov	r2, r0
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	1ad3      	subs	r3, r2, r3
 8011ec2:	683a      	ldr	r2, [r7, #0]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d90a      	bls.n	8011ede <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f7ff ffc3 	bl	8011e54 <SPIF_ReadReg1>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	f003 0301 	and.w	r3, r3, #1
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d1ec      	bne.n	8011eb2 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 8011ed8:	2301      	movs	r3, #1
 8011eda:	73fb      	strb	r3, [r7, #15]
      break;
 8011edc:	e000      	b.n	8011ee0 <SPIF_WaitForWriting+0x42>
      break;
 8011ede:	bf00      	nop
    }
  }
  return retVal;
 8011ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3710      	adds	r7, #16
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}
	...

08011eec <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b088      	sub	sp, #32
 8011ef0:	af02      	add	r7, sp, #8
 8011ef2:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8011ef4:	f06f 0360 	mvn.w	r3, #96	; 0x60
 8011ef8:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 8011efa:	2300      	movs	r3, #0
 8011efc:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 8011efe:	2100      	movs	r1, #0
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f7ff feee 	bl	8011ce2 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 8011f06:	f107 020c 	add.w	r2, r7, #12
 8011f0a:	f107 0110 	add.w	r1, r7, #16
 8011f0e:	2364      	movs	r3, #100	; 0x64
 8011f10:	9300      	str	r3, [sp, #0]
 8011f12:	2304      	movs	r3, #4
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f7ff ff01 	bl	8011d1c <SPIF_TransmitReceive>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	f083 0301 	eor.w	r3, r3, #1
 8011f20:	b2db      	uxtb	r3, r3
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d004      	beq.n	8011f30 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8011f26:	2101      	movs	r1, #1
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f7ff feda 	bl	8011ce2 <SPIF_CsPin>
      break;
 8011f2e:	e16f      	b.n	8012210 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8011f30:	2101      	movs	r1, #1
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f7ff fed5 	bl	8011ce2 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8011f38:	7b7a      	ldrb	r2, [r7, #13]
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 8011f3e:	7bba      	ldrb	r2, [r7, #14]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8011f44:	7bfa      	ldrb	r2, [r7, #15]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	7a1b      	ldrb	r3, [r3, #8]
 8011f4e:	2bef      	cmp	r3, #239	; 0xef
 8011f50:	f000 80f0 	beq.w	8012134 <SPIF_FindChip+0x248>
 8011f54:	2bef      	cmp	r3, #239	; 0xef
 8011f56:	f300 80e9 	bgt.w	801212c <SPIF_FindChip+0x240>
 8011f5a:	2bc8      	cmp	r3, #200	; 0xc8
 8011f5c:	f300 80e6 	bgt.w	801212c <SPIF_FindChip+0x240>
 8011f60:	2b85      	cmp	r3, #133	; 0x85
 8011f62:	da0c      	bge.n	8011f7e <SPIF_FindChip+0x92>
 8011f64:	2b62      	cmp	r3, #98	; 0x62
 8011f66:	f000 80e7 	beq.w	8012138 <SPIF_FindChip+0x24c>
 8011f6a:	2b62      	cmp	r3, #98	; 0x62
 8011f6c:	f300 80de 	bgt.w	801212c <SPIF_FindChip+0x240>
 8011f70:	2b20      	cmp	r3, #32
 8011f72:	f300 80d9 	bgt.w	8012128 <SPIF_FindChip+0x23c>
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	f300 8090 	bgt.w	801209c <SPIF_FindChip+0x1b0>
 8011f7c:	e0d6      	b.n	801212c <SPIF_FindChip+0x240>
 8011f7e:	3b85      	subs	r3, #133	; 0x85
 8011f80:	2b43      	cmp	r3, #67	; 0x43
 8011f82:	f200 80d3 	bhi.w	801212c <SPIF_FindChip+0x240>
 8011f86:	a201      	add	r2, pc, #4	; (adr r2, 8011f8c <SPIF_FindChip+0xa0>)
 8011f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f8c:	0801213d 	.word	0x0801213d
 8011f90:	0801212d 	.word	0x0801212d
 8011f94:	0801212d 	.word	0x0801212d
 8011f98:	0801212d 	.word	0x0801212d
 8011f9c:	0801213d 	.word	0x0801213d
 8011fa0:	0801212d 	.word	0x0801212d
 8011fa4:	0801212d 	.word	0x0801212d
 8011fa8:	0801213d 	.word	0x0801213d
 8011fac:	0801212d 	.word	0x0801212d
 8011fb0:	0801212d 	.word	0x0801212d
 8011fb4:	0801212d 	.word	0x0801212d
 8011fb8:	0801212d 	.word	0x0801212d
 8011fbc:	0801212d 	.word	0x0801212d
 8011fc0:	0801212d 	.word	0x0801212d
 8011fc4:	0801212d 	.word	0x0801212d
 8011fc8:	0801212d 	.word	0x0801212d
 8011fcc:	0801212d 	.word	0x0801212d
 8011fd0:	0801212d 	.word	0x0801212d
 8011fd4:	0801212d 	.word	0x0801212d
 8011fd8:	0801212d 	.word	0x0801212d
 8011fdc:	0801212d 	.word	0x0801212d
 8011fe0:	0801212d 	.word	0x0801212d
 8011fe4:	0801212d 	.word	0x0801212d
 8011fe8:	0801212d 	.word	0x0801212d
 8011fec:	0801213d 	.word	0x0801213d
 8011ff0:	0801212d 	.word	0x0801212d
 8011ff4:	0801212d 	.word	0x0801212d
 8011ff8:	0801212d 	.word	0x0801212d
 8011ffc:	0801213d 	.word	0x0801213d
 8012000:	0801212d 	.word	0x0801212d
 8012004:	0801212d 	.word	0x0801212d
 8012008:	0801212d 	.word	0x0801212d
 801200c:	0801212d 	.word	0x0801212d
 8012010:	0801212d 	.word	0x0801212d
 8012014:	0801212d 	.word	0x0801212d
 8012018:	0801212d 	.word	0x0801212d
 801201c:	0801212d 	.word	0x0801212d
 8012020:	0801212d 	.word	0x0801212d
 8012024:	0801212d 	.word	0x0801212d
 8012028:	0801212d 	.word	0x0801212d
 801202c:	0801213d 	.word	0x0801213d
 8012030:	0801212d 	.word	0x0801212d
 8012034:	0801212d 	.word	0x0801212d
 8012038:	0801212d 	.word	0x0801212d
 801203c:	0801212d 	.word	0x0801212d
 8012040:	0801212d 	.word	0x0801212d
 8012044:	0801212d 	.word	0x0801212d
 8012048:	0801212d 	.word	0x0801212d
 801204c:	0801212d 	.word	0x0801212d
 8012050:	0801212d 	.word	0x0801212d
 8012054:	0801212d 	.word	0x0801212d
 8012058:	0801212d 	.word	0x0801212d
 801205c:	0801212d 	.word	0x0801212d
 8012060:	0801212d 	.word	0x0801212d
 8012064:	0801212d 	.word	0x0801212d
 8012068:	0801212d 	.word	0x0801212d
 801206c:	0801212d 	.word	0x0801212d
 8012070:	0801212d 	.word	0x0801212d
 8012074:	0801213d 	.word	0x0801213d
 8012078:	0801212d 	.word	0x0801212d
 801207c:	0801212d 	.word	0x0801212d
 8012080:	0801213d 	.word	0x0801213d
 8012084:	0801212d 	.word	0x0801212d
 8012088:	0801212d 	.word	0x0801212d
 801208c:	0801212d 	.word	0x0801212d
 8012090:	0801212d 	.word	0x0801212d
 8012094:	0801212d 	.word	0x0801212d
 8012098:	0801213d 	.word	0x0801213d
 801209c:	3b01      	subs	r3, #1
 801209e:	2b1f      	cmp	r3, #31
 80120a0:	d844      	bhi.n	801212c <SPIF_FindChip+0x240>
 80120a2:	a201      	add	r2, pc, #4	; (adr r2, 80120a8 <SPIF_FindChip+0x1bc>)
 80120a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120a8:	08012141 	.word	0x08012141
 80120ac:	0801212d 	.word	0x0801212d
 80120b0:	0801212d 	.word	0x0801212d
 80120b4:	08012141 	.word	0x08012141
 80120b8:	0801212d 	.word	0x0801212d
 80120bc:	0801212d 	.word	0x0801212d
 80120c0:	0801212d 	.word	0x0801212d
 80120c4:	0801212d 	.word	0x0801212d
 80120c8:	0801212d 	.word	0x0801212d
 80120cc:	0801212d 	.word	0x0801212d
 80120d0:	0801212d 	.word	0x0801212d
 80120d4:	0801212d 	.word	0x0801212d
 80120d8:	0801212d 	.word	0x0801212d
 80120dc:	0801212d 	.word	0x0801212d
 80120e0:	0801212d 	.word	0x0801212d
 80120e4:	0801212d 	.word	0x0801212d
 80120e8:	0801212d 	.word	0x0801212d
 80120ec:	0801212d 	.word	0x0801212d
 80120f0:	0801212d 	.word	0x0801212d
 80120f4:	0801212d 	.word	0x0801212d
 80120f8:	0801212d 	.word	0x0801212d
 80120fc:	0801212d 	.word	0x0801212d
 8012100:	0801212d 	.word	0x0801212d
 8012104:	0801212d 	.word	0x0801212d
 8012108:	0801212d 	.word	0x0801212d
 801210c:	0801212d 	.word	0x0801212d
 8012110:	0801212d 	.word	0x0801212d
 8012114:	08012141 	.word	0x08012141
 8012118:	0801212d 	.word	0x0801212d
 801211c:	0801212d 	.word	0x0801212d
 8012120:	0801212d 	.word	0x0801212d
 8012124:	08012141 	.word	0x08012141
 8012128:	2b37      	cmp	r3, #55	; 0x37
 801212a:	d00b      	beq.n	8012144 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2200      	movs	r2, #0
 8012130:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8012132:	e008      	b.n	8012146 <SPIF_FindChip+0x25a>
      break;
 8012134:	bf00      	nop
 8012136:	e006      	b.n	8012146 <SPIF_FindChip+0x25a>
      break;
 8012138:	bf00      	nop
 801213a:	e004      	b.n	8012146 <SPIF_FindChip+0x25a>
      break;
 801213c:	bf00      	nop
 801213e:	e002      	b.n	8012146 <SPIF_FindChip+0x25a>
      break;
 8012140:	bf00      	nop
 8012142:	e000      	b.n	8012146 <SPIF_FindChip+0x25a>
      break;
 8012144:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	7a5b      	ldrb	r3, [r3, #9]
 801214a:	3b11      	subs	r3, #17
 801214c:	2b0f      	cmp	r3, #15
 801214e:	d84e      	bhi.n	80121ee <SPIF_FindChip+0x302>
 8012150:	a201      	add	r2, pc, #4	; (adr r2, 8012158 <SPIF_FindChip+0x26c>)
 8012152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012156:	bf00      	nop
 8012158:	08012199 	.word	0x08012199
 801215c:	080121a1 	.word	0x080121a1
 8012160:	080121a9 	.word	0x080121a9
 8012164:	080121b1 	.word	0x080121b1
 8012168:	080121b9 	.word	0x080121b9
 801216c:	080121c1 	.word	0x080121c1
 8012170:	080121c9 	.word	0x080121c9
 8012174:	080121d1 	.word	0x080121d1
 8012178:	080121db 	.word	0x080121db
 801217c:	080121ef 	.word	0x080121ef
 8012180:	080121ef 	.word	0x080121ef
 8012184:	080121ef 	.word	0x080121ef
 8012188:	080121ef 	.word	0x080121ef
 801218c:	080121ef 	.word	0x080121ef
 8012190:	080121ef 	.word	0x080121ef
 8012194:	080121e5 	.word	0x080121e5
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2202      	movs	r2, #2
 801219c:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 801219e:	e02a      	b.n	80121f6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2204      	movs	r2, #4
 80121a4:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 80121a6:	e026      	b.n	80121f6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2208      	movs	r2, #8
 80121ac:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 80121ae:	e022      	b.n	80121f6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2210      	movs	r2, #16
 80121b4:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 80121b6:	e01e      	b.n	80121f6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2220      	movs	r2, #32
 80121bc:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 80121be:	e01a      	b.n	80121f6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2240      	movs	r2, #64	; 0x40
 80121c4:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 80121c6:	e016      	b.n	80121f6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	2280      	movs	r2, #128	; 0x80
 80121cc:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 80121ce:	e012      	b.n	80121f6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80121d6:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 80121d8:	e00d      	b.n	80121f6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80121e0:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 80121e2:	e008      	b.n	80121f6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80121ea:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 80121ec:	e003      	b.n	80121f6 <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2200      	movs	r2, #0
 80121f2:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 80121f4:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	69db      	ldr	r3, [r3, #28]
 80121fa:	011a      	lsls	r2, r3, #4
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	699b      	ldr	r3, [r3, #24]
 8012204:	031b      	lsls	r3, r3, #12
 8012206:	0a1a      	lsrs	r2, r3, #8
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 801220c:	2301      	movs	r3, #1
 801220e:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8012210:	7dfb      	ldrb	r3, [r7, #23]
}
 8012212:	4618      	mov	r0, r3
 8012214:	3718      	adds	r7, #24
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
 801221a:	bf00      	nop

0801221c <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b08a      	sub	sp, #40	; 0x28
 8012220:	af00      	add	r7, sp, #0
 8012222:	60f8      	str	r0, [r7, #12]
 8012224:	60b9      	str	r1, [r7, #8]
 8012226:	607a      	str	r2, [r7, #4]
 8012228:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801222a:	2300      	movs	r3, #0
 801222c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8012230:	2300      	movs	r3, #0
 8012232:	623b      	str	r3, [r7, #32]
 8012234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012236:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801223a:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	695b      	ldr	r3, [r3, #20]
 8012240:	68ba      	ldr	r2, [r7, #8]
 8012242:	429a      	cmp	r2, r3
 8012244:	f080 8084 	bcs.w	8012350 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8012248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801224a:	2bff      	cmp	r3, #255	; 0xff
 801224c:	f200 8082 	bhi.w	8012354 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8012250:	683a      	ldr	r2, [r7, #0]
 8012252:	69fb      	ldr	r3, [r7, #28]
 8012254:	429a      	cmp	r2, r3
 8012256:	d901      	bls.n	801225c <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8012258:	69fb      	ldr	r3, [r7, #28]
 801225a:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	021b      	lsls	r3, r3, #8
 8012260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012262:	4413      	add	r3, r2
 8012264:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 8012266:	68f8      	ldr	r0, [r7, #12]
 8012268:	f7ff fdac 	bl	8011dc4 <SPIF_WriteEnable>
 801226c:	4603      	mov	r3, r0
 801226e:	f083 0301 	eor.w	r3, r3, #1
 8012272:	b2db      	uxtb	r3, r3
 8012274:	2b00      	cmp	r3, #0
 8012276:	d16f      	bne.n	8012358 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8012278:	2100      	movs	r1, #0
 801227a:	68f8      	ldr	r0, [r7, #12]
 801227c:	f7ff fd31 	bl	8011ce2 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	69db      	ldr	r3, [r3, #28]
 8012284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012288:	d322      	bcc.n	80122d0 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 801228a:	2312      	movs	r3, #18
 801228c:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 801228e:	6a3b      	ldr	r3, [r7, #32]
 8012290:	0e1b      	lsrs	r3, r3, #24
 8012292:	b2db      	uxtb	r3, r3
 8012294:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 8012296:	6a3b      	ldr	r3, [r7, #32]
 8012298:	0c1b      	lsrs	r3, r3, #16
 801229a:	b2db      	uxtb	r3, r3
 801229c:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 801229e:	6a3b      	ldr	r3, [r7, #32]
 80122a0:	0a1b      	lsrs	r3, r3, #8
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 80122a6:	6a3b      	ldr	r3, [r7, #32]
 80122a8:	b2db      	uxtb	r3, r3
 80122aa:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80122ac:	f107 0114 	add.w	r1, r7, #20
 80122b0:	2364      	movs	r3, #100	; 0x64
 80122b2:	2205      	movs	r2, #5
 80122b4:	68f8      	ldr	r0, [r7, #12]
 80122b6:	f7ff fd4f 	bl	8011d58 <SPIF_Transmit>
 80122ba:	4603      	mov	r3, r0
 80122bc:	f083 0301 	eor.w	r3, r3, #1
 80122c0:	b2db      	uxtb	r3, r3
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d023      	beq.n	801230e <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80122c6:	2101      	movs	r1, #1
 80122c8:	68f8      	ldr	r0, [r7, #12]
 80122ca:	f7ff fd0a 	bl	8011ce2 <SPIF_CsPin>
        break;
 80122ce:	e044      	b.n	801235a <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 80122d0:	2302      	movs	r3, #2
 80122d2:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 80122d4:	6a3b      	ldr	r3, [r7, #32]
 80122d6:	0c1b      	lsrs	r3, r3, #16
 80122d8:	b2db      	uxtb	r3, r3
 80122da:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 80122dc:	6a3b      	ldr	r3, [r7, #32]
 80122de:	0a1b      	lsrs	r3, r3, #8
 80122e0:	b2db      	uxtb	r3, r3
 80122e2:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 80122e4:	6a3b      	ldr	r3, [r7, #32]
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80122ea:	f107 0114 	add.w	r1, r7, #20
 80122ee:	2364      	movs	r3, #100	; 0x64
 80122f0:	2204      	movs	r2, #4
 80122f2:	68f8      	ldr	r0, [r7, #12]
 80122f4:	f7ff fd30 	bl	8011d58 <SPIF_Transmit>
 80122f8:	4603      	mov	r3, r0
 80122fa:	f083 0301 	eor.w	r3, r3, #1
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	2b00      	cmp	r3, #0
 8012302:	d004      	beq.n	801230e <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8012304:	2101      	movs	r1, #1
 8012306:	68f8      	ldr	r0, [r7, #12]
 8012308:	f7ff fceb 	bl	8011ce2 <SPIF_CsPin>
        break;
 801230c:	e025      	b.n	801235a <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 801230e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012312:	683a      	ldr	r2, [r7, #0]
 8012314:	6879      	ldr	r1, [r7, #4]
 8012316:	68f8      	ldr	r0, [r7, #12]
 8012318:	f7ff fd1e 	bl	8011d58 <SPIF_Transmit>
 801231c:	4603      	mov	r3, r0
 801231e:	f083 0301 	eor.w	r3, r3, #1
 8012322:	b2db      	uxtb	r3, r3
 8012324:	2b00      	cmp	r3, #0
 8012326:	d004      	beq.n	8012332 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8012328:	2101      	movs	r1, #1
 801232a:	68f8      	ldr	r0, [r7, #12]
 801232c:	f7ff fcd9 	bl	8011ce2 <SPIF_CsPin>
      break;
 8012330:	e013      	b.n	801235a <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8012332:	2101      	movs	r1, #1
 8012334:	68f8      	ldr	r0, [r7, #12]
 8012336:	f7ff fcd4 	bl	8011ce2 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 801233a:	2164      	movs	r1, #100	; 0x64
 801233c:	68f8      	ldr	r0, [r7, #12]
 801233e:	f7ff fdae 	bl	8011e9e <SPIF_WaitForWriting>
 8012342:	4603      	mov	r3, r0
 8012344:	2b00      	cmp	r3, #0
 8012346:	d008      	beq.n	801235a <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8012348:	2301      	movs	r3, #1
 801234a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801234e:	e004      	b.n	801235a <SPIF_WriteFn+0x13e>
      break;
 8012350:	bf00      	nop
 8012352:	e002      	b.n	801235a <SPIF_WriteFn+0x13e>
      break;
 8012354:	bf00      	nop
 8012356:	e000      	b.n	801235a <SPIF_WriteFn+0x13e>
      break;
 8012358:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 801235a:	68f8      	ldr	r0, [r7, #12]
 801235c:	f7ff fd56 	bl	8011e0c <SPIF_WriteDisable>
  return retVal;
 8012360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012364:	4618      	mov	r0, r3
 8012366:	3728      	adds	r7, #40	; 0x28
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b086      	sub	sp, #24
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	607a      	str	r2, [r7, #4]
 8012378:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801237a:	2300      	movs	r3, #0
 801237c:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 801237e:	2100      	movs	r1, #0
 8012380:	68f8      	ldr	r0, [r7, #12]
 8012382:	f7ff fcae 	bl	8011ce2 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	69db      	ldr	r3, [r3, #28]
 801238a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801238e:	d322      	bcc.n	80123d6 <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8012390:	2313      	movs	r3, #19
 8012392:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	0e1b      	lsrs	r3, r3, #24
 8012398:	b2db      	uxtb	r3, r3
 801239a:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	0c1b      	lsrs	r3, r3, #16
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	0a1b      	lsrs	r3, r3, #8
 80123a8:	b2db      	uxtb	r3, r3
 80123aa:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80123b2:	f107 0110 	add.w	r1, r7, #16
 80123b6:	2364      	movs	r3, #100	; 0x64
 80123b8:	2205      	movs	r2, #5
 80123ba:	68f8      	ldr	r0, [r7, #12]
 80123bc:	f7ff fccc 	bl	8011d58 <SPIF_Transmit>
 80123c0:	4603      	mov	r3, r0
 80123c2:	f083 0301 	eor.w	r3, r3, #1
 80123c6:	b2db      	uxtb	r3, r3
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d023      	beq.n	8012414 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 80123cc:	2101      	movs	r1, #1
 80123ce:	68f8      	ldr	r0, [r7, #12]
 80123d0:	f7ff fc87 	bl	8011ce2 <SPIF_CsPin>
        break;
 80123d4:	e036      	b.n	8012444 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 80123d6:	2303      	movs	r3, #3
 80123d8:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	0c1b      	lsrs	r3, r3, #16
 80123de:	b2db      	uxtb	r3, r3
 80123e0:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	0a1b      	lsrs	r3, r3, #8
 80123e6:	b2db      	uxtb	r3, r3
 80123e8:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	b2db      	uxtb	r3, r3
 80123ee:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80123f0:	f107 0110 	add.w	r1, r7, #16
 80123f4:	2364      	movs	r3, #100	; 0x64
 80123f6:	2204      	movs	r2, #4
 80123f8:	68f8      	ldr	r0, [r7, #12]
 80123fa:	f7ff fcad 	bl	8011d58 <SPIF_Transmit>
 80123fe:	4603      	mov	r3, r0
 8012400:	f083 0301 	eor.w	r3, r3, #1
 8012404:	b2db      	uxtb	r3, r3
 8012406:	2b00      	cmp	r3, #0
 8012408:	d004      	beq.n	8012414 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 801240a:	2101      	movs	r1, #1
 801240c:	68f8      	ldr	r0, [r7, #12]
 801240e:	f7ff fc68 	bl	8011ce2 <SPIF_CsPin>
        break;
 8012412:	e017      	b.n	8012444 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8012414:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8012418:	683a      	ldr	r2, [r7, #0]
 801241a:	6879      	ldr	r1, [r7, #4]
 801241c:	68f8      	ldr	r0, [r7, #12]
 801241e:	f7ff fcb6 	bl	8011d8e <SPIF_Receive>
 8012422:	4603      	mov	r3, r0
 8012424:	f083 0301 	eor.w	r3, r3, #1
 8012428:	b2db      	uxtb	r3, r3
 801242a:	2b00      	cmp	r3, #0
 801242c:	d004      	beq.n	8012438 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 801242e:	2101      	movs	r1, #1
 8012430:	68f8      	ldr	r0, [r7, #12]
 8012432:	f7ff fc56 	bl	8011ce2 <SPIF_CsPin>
      break;
 8012436:	e005      	b.n	8012444 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8012438:	2101      	movs	r1, #1
 801243a:	68f8      	ldr	r0, [r7, #12]
 801243c:	f7ff fc51 	bl	8011ce2 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8012440:	2301      	movs	r3, #1
 8012442:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8012444:	7dfb      	ldrb	r3, [r7, #23]
}
 8012446:	4618      	mov	r0, r3
 8012448:	3718      	adds	r7, #24
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}

0801244e <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 801244e:	b580      	push	{r7, lr}
 8012450:	b086      	sub	sp, #24
 8012452:	af00      	add	r7, sp, #0
 8012454:	60f8      	str	r0, [r7, #12]
 8012456:	60b9      	str	r1, [r7, #8]
 8012458:	607a      	str	r2, [r7, #4]
 801245a:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 801245c:	2300      	movs	r3, #0
 801245e:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d03a      	beq.n	80124dc <SPIF_Init+0x8e>
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d037      	beq.n	80124dc <SPIF_Init+0x8e>
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d034      	beq.n	80124dc <SPIF_Init+0x8e>
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	7a9b      	ldrb	r3, [r3, #10]
 8012476:	2b01      	cmp	r3, #1
 8012478:	d030      	beq.n	80124dc <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 801247a:	2220      	movs	r2, #32
 801247c:	2100      	movs	r1, #0
 801247e:	68f8      	ldr	r0, [r7, #12]
 8012480:	f002 fe77 	bl	8015172 <memset>
    Handle->HSpi = HSpi;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	68ba      	ldr	r2, [r7, #8]
 8012488:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	687a      	ldr	r2, [r7, #4]
 801248e:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8012490:	887a      	ldrh	r2, [r7, #2]
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 8012496:	2101      	movs	r1, #1
 8012498:	68f8      	ldr	r0, [r7, #12]
 801249a:	f7ff fc22 	bl	8011ce2 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 801249e:	e002      	b.n	80124a6 <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 80124a0:	2001      	movs	r0, #1
 80124a2:	f7ff fbf3 	bl	8011c8c <SPIF_Delay>
    while (HAL_GetTick() < 20)
 80124a6:	f7f3 f807 	bl	80054b8 <HAL_GetTick>
 80124aa:	4603      	mov	r3, r0
 80124ac:	2b13      	cmp	r3, #19
 80124ae:	d9f7      	bls.n	80124a0 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 80124b0:	68f8      	ldr	r0, [r7, #12]
 80124b2:	f7ff fcab 	bl	8011e0c <SPIF_WriteDisable>
 80124b6:	4603      	mov	r3, r0
 80124b8:	f083 0301 	eor.w	r3, r3, #1
 80124bc:	b2db      	uxtb	r3, r3
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d10b      	bne.n	80124da <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 80124c2:	68f8      	ldr	r0, [r7, #12]
 80124c4:	f7ff fd12 	bl	8011eec <SPIF_FindChip>
 80124c8:	4603      	mov	r3, r0
 80124ca:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 80124cc:	7dfb      	ldrb	r3, [r7, #23]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d004      	beq.n	80124dc <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2201      	movs	r2, #1
 80124d6:	729a      	strb	r2, [r3, #10]
 80124d8:	e000      	b.n	80124dc <SPIF_Init+0x8e>
      break;
 80124da:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 80124dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80124de:	4618      	mov	r0, r3
 80124e0:	3718      	adds	r7, #24
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}

080124e6 <SPIF_EraseChip>:
  * @param  *Handle: Pointer to SPIF_HandleTypeDef structure
  *
  * @retval bool: true or false
  */
bool SPIF_EraseChip(SPIF_HandleTypeDef *Handle)
{
 80124e6:	b580      	push	{r7, lr}
 80124e8:	b084      	sub	sp, #16
 80124ea:	af00      	add	r7, sp, #0
 80124ec:	6078      	str	r0, [r7, #4]
  SPIF_Lock(Handle);
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f7ff fbd7 	bl	8011ca2 <SPIF_Lock>
  bool retVal = false;
 80124f4:	2300      	movs	r3, #0
 80124f6:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_CHIPERASE1};
 80124f8:	2360      	movs	r3, #96	; 0x60
 80124fa:	733b      	strb	r3, [r7, #12]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseChip() START\r\n");
    if (SPIF_WriteEnable(Handle) == false)
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f7ff fc61 	bl	8011dc4 <SPIF_WriteEnable>
 8012502:	4603      	mov	r3, r0
 8012504:	f083 0301 	eor.w	r3, r3, #1
 8012508:	b2db      	uxtb	r3, r3
 801250a:	2b00      	cmp	r3, #0
 801250c:	d129      	bne.n	8012562 <SPIF_EraseChip+0x7c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 801250e:	2100      	movs	r1, #0
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f7ff fbe6 	bl	8011ce2 <SPIF_CsPin>
    if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8012516:	f107 010c 	add.w	r1, r7, #12
 801251a:	2364      	movs	r3, #100	; 0x64
 801251c:	2201      	movs	r2, #1
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f7ff fc1a 	bl	8011d58 <SPIF_Transmit>
 8012524:	4603      	mov	r3, r0
 8012526:	f083 0301 	eor.w	r3, r3, #1
 801252a:	b2db      	uxtb	r3, r3
 801252c:	2b00      	cmp	r3, #0
 801252e:	d004      	beq.n	801253a <SPIF_EraseChip+0x54>
    {
      SPIF_CsPin(Handle, 1);
 8012530:	2101      	movs	r1, #1
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	f7ff fbd5 	bl	8011ce2 <SPIF_CsPin>
      break;
 8012538:	e014      	b.n	8012564 <SPIF_EraseChip+0x7e>
    }
    SPIF_CsPin(Handle, 1);
 801253a:	2101      	movs	r1, #1
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f7ff fbd0 	bl	8011ce2 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, Handle->BlockCnt * 1000))
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	69db      	ldr	r3, [r3, #28]
 8012546:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801254a:	fb02 f303 	mul.w	r3, r2, r3
 801254e:	4619      	mov	r1, r3
 8012550:	6878      	ldr	r0, [r7, #4]
 8012552:	f7ff fca4 	bl	8011e9e <SPIF_WaitForWriting>
 8012556:	4603      	mov	r3, r0
 8012558:	2b00      	cmp	r3, #0
 801255a:	d003      	beq.n	8012564 <SPIF_EraseChip+0x7e>
    {
      dprintf("SPIF_EraseChip() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 801255c:	2301      	movs	r3, #1
 801255e:	73fb      	strb	r3, [r7, #15]
 8012560:	e000      	b.n	8012564 <SPIF_EraseChip+0x7e>
      break;
 8012562:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f7ff fc51 	bl	8011e0c <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f7ff fbac 	bl	8011cc8 <SPIF_UnLock>
  return retVal;
 8012570:	7bfb      	ldrb	r3, [r7, #15]
}
 8012572:	4618      	mov	r0, r3
 8012574:	3710      	adds	r7, #16
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}

0801257a <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 801257a:	b580      	push	{r7, lr}
 801257c:	b086      	sub	sp, #24
 801257e:	af00      	add	r7, sp, #0
 8012580:	6078      	str	r0, [r7, #4]
 8012582:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f7ff fb8c 	bl	8011ca2 <SPIF_Lock>
  bool retVal = false;
 801258a:	2300      	movs	r3, #0
 801258c:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	031b      	lsls	r3, r3, #12
 8012592:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	699b      	ldr	r3, [r3, #24]
 8012598:	683a      	ldr	r2, [r7, #0]
 801259a:	429a      	cmp	r2, r3
 801259c:	d262      	bcs.n	8012664 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	f7ff fc10 	bl	8011dc4 <SPIF_WriteEnable>
 80125a4:	4603      	mov	r3, r0
 80125a6:	f083 0301 	eor.w	r3, r3, #1
 80125aa:	b2db      	uxtb	r3, r3
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d15b      	bne.n	8012668 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80125b0:	2100      	movs	r1, #0
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f7ff fb95 	bl	8011ce2 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	69db      	ldr	r3, [r3, #28]
 80125bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80125c0:	d322      	bcc.n	8012608 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 80125c2:	2321      	movs	r3, #33	; 0x21
 80125c4:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	0e1b      	lsrs	r3, r3, #24
 80125ca:	b2db      	uxtb	r3, r3
 80125cc:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	0c1b      	lsrs	r3, r3, #16
 80125d2:	b2db      	uxtb	r3, r3
 80125d4:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	0a1b      	lsrs	r3, r3, #8
 80125da:	b2db      	uxtb	r3, r3
 80125dc:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	b2db      	uxtb	r3, r3
 80125e2:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80125e4:	f107 0108 	add.w	r1, r7, #8
 80125e8:	2364      	movs	r3, #100	; 0x64
 80125ea:	2205      	movs	r2, #5
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f7ff fbb3 	bl	8011d58 <SPIF_Transmit>
 80125f2:	4603      	mov	r3, r0
 80125f4:	f083 0301 	eor.w	r3, r3, #1
 80125f8:	b2db      	uxtb	r3, r3
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d023      	beq.n	8012646 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80125fe:	2101      	movs	r1, #1
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f7ff fb6e 	bl	8011ce2 <SPIF_CsPin>
        break;
 8012606:	e030      	b.n	801266a <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8012608:	2320      	movs	r3, #32
 801260a:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 801260c:	693b      	ldr	r3, [r7, #16]
 801260e:	0c1b      	lsrs	r3, r3, #16
 8012610:	b2db      	uxtb	r3, r3
 8012612:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	0a1b      	lsrs	r3, r3, #8
 8012618:	b2db      	uxtb	r3, r3
 801261a:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	b2db      	uxtb	r3, r3
 8012620:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8012622:	f107 0108 	add.w	r1, r7, #8
 8012626:	2364      	movs	r3, #100	; 0x64
 8012628:	2204      	movs	r2, #4
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f7ff fb94 	bl	8011d58 <SPIF_Transmit>
 8012630:	4603      	mov	r3, r0
 8012632:	f083 0301 	eor.w	r3, r3, #1
 8012636:	b2db      	uxtb	r3, r3
 8012638:	2b00      	cmp	r3, #0
 801263a:	d004      	beq.n	8012646 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 801263c:	2101      	movs	r1, #1
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f7ff fb4f 	bl	8011ce2 <SPIF_CsPin>
        break;
 8012644:	e011      	b.n	801266a <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8012646:	2101      	movs	r1, #1
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f7ff fb4a 	bl	8011ce2 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 801264e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f7ff fc23 	bl	8011e9e <SPIF_WaitForWriting>
 8012658:	4603      	mov	r3, r0
 801265a:	2b00      	cmp	r3, #0
 801265c:	d005      	beq.n	801266a <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 801265e:	2301      	movs	r3, #1
 8012660:	75fb      	strb	r3, [r7, #23]
 8012662:	e002      	b.n	801266a <SPIF_EraseSector+0xf0>
      break;
 8012664:	bf00      	nop
 8012666:	e000      	b.n	801266a <SPIF_EraseSector+0xf0>
      break;
 8012668:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f7ff fbce 	bl	8011e0c <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f7ff fb29 	bl	8011cc8 <SPIF_UnLock>
  return retVal;
 8012676:	7dfb      	ldrb	r3, [r7, #23]
}
 8012678:	4618      	mov	r0, r3
 801267a:	3718      	adds	r7, #24
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b088      	sub	sp, #32
 8012684:	af02      	add	r7, sp, #8
 8012686:	60f8      	str	r0, [r7, #12]
 8012688:	60b9      	str	r1, [r7, #8]
 801268a:	607a      	str	r2, [r7, #4]
 801268c:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 801268e:	68f8      	ldr	r0, [r7, #12]
 8012690:	f7ff fb07 	bl	8011ca2 <SPIF_Lock>
  bool retVal = false;
 8012694:	2300      	movs	r3, #0
 8012696:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8012698:	6a3b      	ldr	r3, [r7, #32]
 801269a:	9300      	str	r3, [sp, #0]
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	687a      	ldr	r2, [r7, #4]
 80126a0:	68b9      	ldr	r1, [r7, #8]
 80126a2:	68f8      	ldr	r0, [r7, #12]
 80126a4:	f7ff fdba 	bl	801221c <SPIF_WriteFn>
 80126a8:	4603      	mov	r3, r0
 80126aa:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 80126ac:	68f8      	ldr	r0, [r7, #12]
 80126ae:	f7ff fb0b 	bl	8011cc8 <SPIF_UnLock>
  return retVal;
 80126b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80126b4:	4618      	mov	r0, r3
 80126b6:	3718      	adds	r7, #24
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}

080126bc <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b088      	sub	sp, #32
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	60f8      	str	r0, [r7, #12]
 80126c4:	60b9      	str	r1, [r7, #8]
 80126c6:	607a      	str	r2, [r7, #4]
 80126c8:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 80126ca:	68f8      	ldr	r0, [r7, #12]
 80126cc:	f7ff fae9 	bl	8011ca2 <SPIF_Lock>
  bool retVal = false;
 80126d0:	2300      	movs	r3, #0
 80126d2:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	021b      	lsls	r3, r3, #8
 80126d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126da:	4413      	add	r3, r2
 80126dc:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 80126de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80126e4:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 80126e6:	683a      	ldr	r2, [r7, #0]
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d901      	bls.n	80126f2 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	687a      	ldr	r2, [r7, #4]
 80126f6:	69b9      	ldr	r1, [r7, #24]
 80126f8:	68f8      	ldr	r0, [r7, #12]
 80126fa:	f7ff fe37 	bl	801236c <SPIF_ReadFn>
 80126fe:	4603      	mov	r3, r0
 8012700:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8012702:	68f8      	ldr	r0, [r7, #12]
 8012704:	f7ff fae0 	bl	8011cc8 <SPIF_UnLock>
  return retVal;
 8012708:	7ffb      	ldrb	r3, [r7, #31]
}
 801270a:	4618      	mov	r0, r3
 801270c:	3720      	adds	r7, #32
 801270e:	46bd      	mov	sp, r7
 8012710:	bd80      	pop	{r7, pc}
	...

08012714 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012718:	2200      	movs	r2, #0
 801271a:	4912      	ldr	r1, [pc, #72]	; (8012764 <MX_USB_DEVICE_Init+0x50>)
 801271c:	4812      	ldr	r0, [pc, #72]	; (8012768 <MX_USB_DEVICE_Init+0x54>)
 801271e:	f7fe f825 	bl	801076c <USBD_Init>
 8012722:	4603      	mov	r3, r0
 8012724:	2b00      	cmp	r3, #0
 8012726:	d001      	beq.n	801272c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012728:	f7ef f963 	bl	80019f2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801272c:	490f      	ldr	r1, [pc, #60]	; (801276c <MX_USB_DEVICE_Init+0x58>)
 801272e:	480e      	ldr	r0, [pc, #56]	; (8012768 <MX_USB_DEVICE_Init+0x54>)
 8012730:	f7fe f84c 	bl	80107cc <USBD_RegisterClass>
 8012734:	4603      	mov	r3, r0
 8012736:	2b00      	cmp	r3, #0
 8012738:	d001      	beq.n	801273e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801273a:	f7ef f95a 	bl	80019f2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801273e:	490c      	ldr	r1, [pc, #48]	; (8012770 <MX_USB_DEVICE_Init+0x5c>)
 8012740:	4809      	ldr	r0, [pc, #36]	; (8012768 <MX_USB_DEVICE_Init+0x54>)
 8012742:	f7fd ff43 	bl	80105cc <USBD_CDC_RegisterInterface>
 8012746:	4603      	mov	r3, r0
 8012748:	2b00      	cmp	r3, #0
 801274a:	d001      	beq.n	8012750 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801274c:	f7ef f951 	bl	80019f2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012750:	4805      	ldr	r0, [pc, #20]	; (8012768 <MX_USB_DEVICE_Init+0x54>)
 8012752:	f7fe f871 	bl	8010838 <USBD_Start>
 8012756:	4603      	mov	r3, r0
 8012758:	2b00      	cmp	r3, #0
 801275a:	d001      	beq.n	8012760 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801275c:	f7ef f949 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012760:	bf00      	nop
 8012762:	bd80      	pop	{r7, pc}
 8012764:	200000cc 	.word	0x200000cc
 8012768:	20001074 	.word	0x20001074
 801276c:	20000038 	.word	0x20000038
 8012770:	200000b8 	.word	0x200000b8

08012774 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012778:	2200      	movs	r2, #0
 801277a:	4905      	ldr	r1, [pc, #20]	; (8012790 <CDC_Init_FS+0x1c>)
 801277c:	4805      	ldr	r0, [pc, #20]	; (8012794 <CDC_Init_FS+0x20>)
 801277e:	f7fd ff3f 	bl	8010600 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012782:	4905      	ldr	r1, [pc, #20]	; (8012798 <CDC_Init_FS+0x24>)
 8012784:	4803      	ldr	r0, [pc, #12]	; (8012794 <CDC_Init_FS+0x20>)
 8012786:	f7fd ff5d 	bl	8010644 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801278a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801278c:	4618      	mov	r0, r3
 801278e:	bd80      	pop	{r7, pc}
 8012790:	20001750 	.word	0x20001750
 8012794:	20001074 	.word	0x20001074
 8012798:	20001350 	.word	0x20001350

0801279c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801279c:	b480      	push	{r7}
 801279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80127a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80127a2:	4618      	mov	r0, r3
 80127a4:	46bd      	mov	sp, r7
 80127a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127aa:	4770      	bx	lr

080127ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80127ac:	b480      	push	{r7}
 80127ae:	b083      	sub	sp, #12
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	4603      	mov	r3, r0
 80127b4:	6039      	str	r1, [r7, #0]
 80127b6:	71fb      	strb	r3, [r7, #7]
 80127b8:	4613      	mov	r3, r2
 80127ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80127bc:	79fb      	ldrb	r3, [r7, #7]
 80127be:	2b23      	cmp	r3, #35	; 0x23
 80127c0:	d84a      	bhi.n	8012858 <CDC_Control_FS+0xac>
 80127c2:	a201      	add	r2, pc, #4	; (adr r2, 80127c8 <CDC_Control_FS+0x1c>)
 80127c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127c8:	08012859 	.word	0x08012859
 80127cc:	08012859 	.word	0x08012859
 80127d0:	08012859 	.word	0x08012859
 80127d4:	08012859 	.word	0x08012859
 80127d8:	08012859 	.word	0x08012859
 80127dc:	08012859 	.word	0x08012859
 80127e0:	08012859 	.word	0x08012859
 80127e4:	08012859 	.word	0x08012859
 80127e8:	08012859 	.word	0x08012859
 80127ec:	08012859 	.word	0x08012859
 80127f0:	08012859 	.word	0x08012859
 80127f4:	08012859 	.word	0x08012859
 80127f8:	08012859 	.word	0x08012859
 80127fc:	08012859 	.word	0x08012859
 8012800:	08012859 	.word	0x08012859
 8012804:	08012859 	.word	0x08012859
 8012808:	08012859 	.word	0x08012859
 801280c:	08012859 	.word	0x08012859
 8012810:	08012859 	.word	0x08012859
 8012814:	08012859 	.word	0x08012859
 8012818:	08012859 	.word	0x08012859
 801281c:	08012859 	.word	0x08012859
 8012820:	08012859 	.word	0x08012859
 8012824:	08012859 	.word	0x08012859
 8012828:	08012859 	.word	0x08012859
 801282c:	08012859 	.word	0x08012859
 8012830:	08012859 	.word	0x08012859
 8012834:	08012859 	.word	0x08012859
 8012838:	08012859 	.word	0x08012859
 801283c:	08012859 	.word	0x08012859
 8012840:	08012859 	.word	0x08012859
 8012844:	08012859 	.word	0x08012859
 8012848:	08012859 	.word	0x08012859
 801284c:	08012859 	.word	0x08012859
 8012850:	08012859 	.word	0x08012859
 8012854:	08012859 	.word	0x08012859
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012858:	bf00      	nop
  }

  return (USBD_OK);
 801285a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801285c:	4618      	mov	r0, r3
 801285e:	370c      	adds	r7, #12
 8012860:	46bd      	mov	sp, r7
 8012862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012866:	4770      	bx	lr

08012868 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012872:	6879      	ldr	r1, [r7, #4]
 8012874:	4805      	ldr	r0, [pc, #20]	; (801288c <CDC_Receive_FS+0x24>)
 8012876:	f7fd fee5 	bl	8010644 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801287a:	4804      	ldr	r0, [pc, #16]	; (801288c <CDC_Receive_FS+0x24>)
 801287c:	f7fd ff40 	bl	8010700 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012880:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012882:	4618      	mov	r0, r3
 8012884:	3708      	adds	r7, #8
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}
 801288a:	bf00      	nop
 801288c:	20001074 	.word	0x20001074

08012890 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b084      	sub	sp, #16
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	460b      	mov	r3, r1
 801289a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801289c:	2300      	movs	r3, #0
 801289e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80128a0:	4b0d      	ldr	r3, [pc, #52]	; (80128d8 <CDC_Transmit_FS+0x48>)
 80128a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80128a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d001      	beq.n	80128b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80128b2:	2301      	movs	r3, #1
 80128b4:	e00b      	b.n	80128ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80128b6:	887b      	ldrh	r3, [r7, #2]
 80128b8:	461a      	mov	r2, r3
 80128ba:	6879      	ldr	r1, [r7, #4]
 80128bc:	4806      	ldr	r0, [pc, #24]	; (80128d8 <CDC_Transmit_FS+0x48>)
 80128be:	f7fd fe9f 	bl	8010600 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80128c2:	4805      	ldr	r0, [pc, #20]	; (80128d8 <CDC_Transmit_FS+0x48>)
 80128c4:	f7fd fedc 	bl	8010680 <USBD_CDC_TransmitPacket>
 80128c8:	4603      	mov	r3, r0
 80128ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80128cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3710      	adds	r7, #16
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop
 80128d8:	20001074 	.word	0x20001074

080128dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80128dc:	b480      	push	{r7}
 80128de:	b087      	sub	sp, #28
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	60f8      	str	r0, [r7, #12]
 80128e4:	60b9      	str	r1, [r7, #8]
 80128e6:	4613      	mov	r3, r2
 80128e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80128ea:	2300      	movs	r3, #0
 80128ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80128ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	371c      	adds	r7, #28
 80128f6:	46bd      	mov	sp, r7
 80128f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fc:	4770      	bx	lr
	...

08012900 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012900:	b480      	push	{r7}
 8012902:	b083      	sub	sp, #12
 8012904:	af00      	add	r7, sp, #0
 8012906:	4603      	mov	r3, r0
 8012908:	6039      	str	r1, [r7, #0]
 801290a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	2212      	movs	r2, #18
 8012910:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012912:	4b03      	ldr	r3, [pc, #12]	; (8012920 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012914:	4618      	mov	r0, r3
 8012916:	370c      	adds	r7, #12
 8012918:	46bd      	mov	sp, r7
 801291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291e:	4770      	bx	lr
 8012920:	200000ec 	.word	0x200000ec

08012924 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	4603      	mov	r3, r0
 801292c:	6039      	str	r1, [r7, #0]
 801292e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	2204      	movs	r2, #4
 8012934:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012936:	4b03      	ldr	r3, [pc, #12]	; (8012944 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012938:	4618      	mov	r0, r3
 801293a:	370c      	adds	r7, #12
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr
 8012944:	2000010c 	.word	0x2000010c

08012948 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	4603      	mov	r3, r0
 8012950:	6039      	str	r1, [r7, #0]
 8012952:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012954:	79fb      	ldrb	r3, [r7, #7]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d105      	bne.n	8012966 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801295a:	683a      	ldr	r2, [r7, #0]
 801295c:	4907      	ldr	r1, [pc, #28]	; (801297c <USBD_FS_ProductStrDescriptor+0x34>)
 801295e:	4808      	ldr	r0, [pc, #32]	; (8012980 <USBD_FS_ProductStrDescriptor+0x38>)
 8012960:	f7ff f8b4 	bl	8011acc <USBD_GetString>
 8012964:	e004      	b.n	8012970 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012966:	683a      	ldr	r2, [r7, #0]
 8012968:	4904      	ldr	r1, [pc, #16]	; (801297c <USBD_FS_ProductStrDescriptor+0x34>)
 801296a:	4805      	ldr	r0, [pc, #20]	; (8012980 <USBD_FS_ProductStrDescriptor+0x38>)
 801296c:	f7ff f8ae 	bl	8011acc <USBD_GetString>
  }
  return USBD_StrDesc;
 8012970:	4b02      	ldr	r3, [pc, #8]	; (801297c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012972:	4618      	mov	r0, r3
 8012974:	3708      	adds	r7, #8
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
 801297a:	bf00      	nop
 801297c:	20001b50 	.word	0x20001b50
 8012980:	08019254 	.word	0x08019254

08012984 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	4603      	mov	r3, r0
 801298c:	6039      	str	r1, [r7, #0]
 801298e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012990:	683a      	ldr	r2, [r7, #0]
 8012992:	4904      	ldr	r1, [pc, #16]	; (80129a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012994:	4804      	ldr	r0, [pc, #16]	; (80129a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012996:	f7ff f899 	bl	8011acc <USBD_GetString>
  return USBD_StrDesc;
 801299a:	4b02      	ldr	r3, [pc, #8]	; (80129a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801299c:	4618      	mov	r0, r3
 801299e:	3708      	adds	r7, #8
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}
 80129a4:	20001b50 	.word	0x20001b50
 80129a8:	08019260 	.word	0x08019260

080129ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b082      	sub	sp, #8
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	4603      	mov	r3, r0
 80129b4:	6039      	str	r1, [r7, #0]
 80129b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	221a      	movs	r2, #26
 80129bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80129be:	f000 f855 	bl	8012a6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80129c2:	4b02      	ldr	r3, [pc, #8]	; (80129cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	3708      	adds	r7, #8
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	20000110 	.word	0x20000110

080129d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	4603      	mov	r3, r0
 80129d8:	6039      	str	r1, [r7, #0]
 80129da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80129dc:	79fb      	ldrb	r3, [r7, #7]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d105      	bne.n	80129ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80129e2:	683a      	ldr	r2, [r7, #0]
 80129e4:	4907      	ldr	r1, [pc, #28]	; (8012a04 <USBD_FS_ConfigStrDescriptor+0x34>)
 80129e6:	4808      	ldr	r0, [pc, #32]	; (8012a08 <USBD_FS_ConfigStrDescriptor+0x38>)
 80129e8:	f7ff f870 	bl	8011acc <USBD_GetString>
 80129ec:	e004      	b.n	80129f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80129ee:	683a      	ldr	r2, [r7, #0]
 80129f0:	4904      	ldr	r1, [pc, #16]	; (8012a04 <USBD_FS_ConfigStrDescriptor+0x34>)
 80129f2:	4805      	ldr	r0, [pc, #20]	; (8012a08 <USBD_FS_ConfigStrDescriptor+0x38>)
 80129f4:	f7ff f86a 	bl	8011acc <USBD_GetString>
  }
  return USBD_StrDesc;
 80129f8:	4b02      	ldr	r3, [pc, #8]	; (8012a04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	3708      	adds	r7, #8
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}
 8012a02:	bf00      	nop
 8012a04:	20001b50 	.word	0x20001b50
 8012a08:	08019274 	.word	0x08019274

08012a0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b082      	sub	sp, #8
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	4603      	mov	r3, r0
 8012a14:	6039      	str	r1, [r7, #0]
 8012a16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012a18:	79fb      	ldrb	r3, [r7, #7]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d105      	bne.n	8012a2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012a1e:	683a      	ldr	r2, [r7, #0]
 8012a20:	4907      	ldr	r1, [pc, #28]	; (8012a40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012a22:	4808      	ldr	r0, [pc, #32]	; (8012a44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012a24:	f7ff f852 	bl	8011acc <USBD_GetString>
 8012a28:	e004      	b.n	8012a34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012a2a:	683a      	ldr	r2, [r7, #0]
 8012a2c:	4904      	ldr	r1, [pc, #16]	; (8012a40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012a2e:	4805      	ldr	r0, [pc, #20]	; (8012a44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012a30:	f7ff f84c 	bl	8011acc <USBD_GetString>
  }
  return USBD_StrDesc;
 8012a34:	4b02      	ldr	r3, [pc, #8]	; (8012a40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3708      	adds	r7, #8
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
 8012a3e:	bf00      	nop
 8012a40:	20001b50 	.word	0x20001b50
 8012a44:	08019280 	.word	0x08019280

08012a48 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b083      	sub	sp, #12
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	4603      	mov	r3, r0
 8012a50:	6039      	str	r1, [r7, #0]
 8012a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	220c      	movs	r2, #12
 8012a58:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8012a5a:	4b03      	ldr	r3, [pc, #12]	; (8012a68 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	370c      	adds	r7, #12
 8012a60:	46bd      	mov	sp, r7
 8012a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a66:	4770      	bx	lr
 8012a68:	20000100 	.word	0x20000100

08012a6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b084      	sub	sp, #16
 8012a70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012a72:	4b0f      	ldr	r3, [pc, #60]	; (8012ab0 <Get_SerialNum+0x44>)
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012a78:	4b0e      	ldr	r3, [pc, #56]	; (8012ab4 <Get_SerialNum+0x48>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012a7e:	4b0e      	ldr	r3, [pc, #56]	; (8012ab8 <Get_SerialNum+0x4c>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012a84:	68fa      	ldr	r2, [r7, #12]
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	4413      	add	r3, r2
 8012a8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d009      	beq.n	8012aa6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012a92:	2208      	movs	r2, #8
 8012a94:	4909      	ldr	r1, [pc, #36]	; (8012abc <Get_SerialNum+0x50>)
 8012a96:	68f8      	ldr	r0, [r7, #12]
 8012a98:	f000 f814 	bl	8012ac4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012a9c:	2204      	movs	r2, #4
 8012a9e:	4908      	ldr	r1, [pc, #32]	; (8012ac0 <Get_SerialNum+0x54>)
 8012aa0:	68b8      	ldr	r0, [r7, #8]
 8012aa2:	f000 f80f 	bl	8012ac4 <IntToUnicode>
  }
}
 8012aa6:	bf00      	nop
 8012aa8:	3710      	adds	r7, #16
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	1fff7590 	.word	0x1fff7590
 8012ab4:	1fff7594 	.word	0x1fff7594
 8012ab8:	1fff7598 	.word	0x1fff7598
 8012abc:	20000112 	.word	0x20000112
 8012ac0:	20000122 	.word	0x20000122

08012ac4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	b087      	sub	sp, #28
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	60f8      	str	r0, [r7, #12]
 8012acc:	60b9      	str	r1, [r7, #8]
 8012ace:	4613      	mov	r3, r2
 8012ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	75fb      	strb	r3, [r7, #23]
 8012ada:	e027      	b.n	8012b2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	0f1b      	lsrs	r3, r3, #28
 8012ae0:	2b09      	cmp	r3, #9
 8012ae2:	d80b      	bhi.n	8012afc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	0f1b      	lsrs	r3, r3, #28
 8012ae8:	b2da      	uxtb	r2, r3
 8012aea:	7dfb      	ldrb	r3, [r7, #23]
 8012aec:	005b      	lsls	r3, r3, #1
 8012aee:	4619      	mov	r1, r3
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	440b      	add	r3, r1
 8012af4:	3230      	adds	r2, #48	; 0x30
 8012af6:	b2d2      	uxtb	r2, r2
 8012af8:	701a      	strb	r2, [r3, #0]
 8012afa:	e00a      	b.n	8012b12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	0f1b      	lsrs	r3, r3, #28
 8012b00:	b2da      	uxtb	r2, r3
 8012b02:	7dfb      	ldrb	r3, [r7, #23]
 8012b04:	005b      	lsls	r3, r3, #1
 8012b06:	4619      	mov	r1, r3
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	440b      	add	r3, r1
 8012b0c:	3237      	adds	r2, #55	; 0x37
 8012b0e:	b2d2      	uxtb	r2, r2
 8012b10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	011b      	lsls	r3, r3, #4
 8012b16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012b18:	7dfb      	ldrb	r3, [r7, #23]
 8012b1a:	005b      	lsls	r3, r3, #1
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	68ba      	ldr	r2, [r7, #8]
 8012b20:	4413      	add	r3, r2
 8012b22:	2200      	movs	r2, #0
 8012b24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012b26:	7dfb      	ldrb	r3, [r7, #23]
 8012b28:	3301      	adds	r3, #1
 8012b2a:	75fb      	strb	r3, [r7, #23]
 8012b2c:	7dfa      	ldrb	r2, [r7, #23]
 8012b2e:	79fb      	ldrb	r3, [r7, #7]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d3d3      	bcc.n	8012adc <IntToUnicode+0x18>
  }
}
 8012b34:	bf00      	nop
 8012b36:	bf00      	nop
 8012b38:	371c      	adds	r7, #28
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b40:	4770      	bx	lr
	...

08012b44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b084      	sub	sp, #16
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	4a0d      	ldr	r2, [pc, #52]	; (8012b88 <HAL_PCD_MspInit+0x44>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d113      	bne.n	8012b7e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012b56:	4b0d      	ldr	r3, [pc, #52]	; (8012b8c <HAL_PCD_MspInit+0x48>)
 8012b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b5a:	4a0c      	ldr	r2, [pc, #48]	; (8012b8c <HAL_PCD_MspInit+0x48>)
 8012b5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012b60:	6593      	str	r3, [r2, #88]	; 0x58
 8012b62:	4b0a      	ldr	r3, [pc, #40]	; (8012b8c <HAL_PCD_MspInit+0x48>)
 8012b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012b6a:	60fb      	str	r3, [r7, #12]
 8012b6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8012b6e:	2200      	movs	r2, #0
 8012b70:	2100      	movs	r1, #0
 8012b72:	2043      	movs	r0, #67	; 0x43
 8012b74:	f7f4 f84b 	bl	8006c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8012b78:	2043      	movs	r0, #67	; 0x43
 8012b7a:	f7f4 f864 	bl	8006c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012b7e:	bf00      	nop
 8012b80:	3710      	adds	r7, #16
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}
 8012b86:	bf00      	nop
 8012b88:	40006800 	.word	0x40006800
 8012b8c:	40021000 	.word	0x40021000

08012b90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b082      	sub	sp, #8
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	4610      	mov	r0, r2
 8012ba8:	f7fd fe93 	bl	80108d2 <USBD_LL_SetupStage>
}
 8012bac:	bf00      	nop
 8012bae:	3708      	adds	r7, #8
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}

08012bb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b082      	sub	sp, #8
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	460b      	mov	r3, r1
 8012bbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8012bc6:	78fa      	ldrb	r2, [r7, #3]
 8012bc8:	6879      	ldr	r1, [r7, #4]
 8012bca:	4613      	mov	r3, r2
 8012bcc:	009b      	lsls	r3, r3, #2
 8012bce:	4413      	add	r3, r2
 8012bd0:	00db      	lsls	r3, r3, #3
 8012bd2:	440b      	add	r3, r1
 8012bd4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	78fb      	ldrb	r3, [r7, #3]
 8012bdc:	4619      	mov	r1, r3
 8012bde:	f7fd fecd 	bl	801097c <USBD_LL_DataOutStage>
}
 8012be2:	bf00      	nop
 8012be4:	3708      	adds	r7, #8
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}

08012bea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bea:	b580      	push	{r7, lr}
 8012bec:	b082      	sub	sp, #8
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	6078      	str	r0, [r7, #4]
 8012bf2:	460b      	mov	r3, r1
 8012bf4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8012bfc:	78fa      	ldrb	r2, [r7, #3]
 8012bfe:	6879      	ldr	r1, [r7, #4]
 8012c00:	4613      	mov	r3, r2
 8012c02:	009b      	lsls	r3, r3, #2
 8012c04:	4413      	add	r3, r2
 8012c06:	00db      	lsls	r3, r3, #3
 8012c08:	440b      	add	r3, r1
 8012c0a:	333c      	adds	r3, #60	; 0x3c
 8012c0c:	681a      	ldr	r2, [r3, #0]
 8012c0e:	78fb      	ldrb	r3, [r7, #3]
 8012c10:	4619      	mov	r1, r3
 8012c12:	f7fd ff66 	bl	8010ae2 <USBD_LL_DataInStage>
}
 8012c16:	bf00      	nop
 8012c18:	3708      	adds	r7, #8
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}

08012c1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c1e:	b580      	push	{r7, lr}
 8012c20:	b082      	sub	sp, #8
 8012c22:	af00      	add	r7, sp, #0
 8012c24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7fe f8a0 	bl	8010d72 <USBD_LL_SOF>
}
 8012c32:	bf00      	nop
 8012c34:	3708      	adds	r7, #8
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}

08012c3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c3a:	b580      	push	{r7, lr}
 8012c3c:	b084      	sub	sp, #16
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012c42:	2301      	movs	r3, #1
 8012c44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	689b      	ldr	r3, [r3, #8]
 8012c4a:	2b02      	cmp	r3, #2
 8012c4c:	d001      	beq.n	8012c52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012c4e:	f7ee fed0 	bl	80019f2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012c58:	7bfa      	ldrb	r2, [r7, #15]
 8012c5a:	4611      	mov	r1, r2
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f7fe f844 	bl	8010cea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f7fd ffec 	bl	8010c46 <USBD_LL_Reset>
}
 8012c6e:	bf00      	nop
 8012c70:	3710      	adds	r7, #16
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}
	...

08012c78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7fe f83f 	bl	8010d0a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	699b      	ldr	r3, [r3, #24]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d005      	beq.n	8012ca0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012c94:	4b04      	ldr	r3, [pc, #16]	; (8012ca8 <HAL_PCD_SuspendCallback+0x30>)
 8012c96:	691b      	ldr	r3, [r3, #16]
 8012c98:	4a03      	ldr	r2, [pc, #12]	; (8012ca8 <HAL_PCD_SuspendCallback+0x30>)
 8012c9a:	f043 0306 	orr.w	r3, r3, #6
 8012c9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012ca0:	bf00      	nop
 8012ca2:	3708      	adds	r7, #8
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	e000ed00 	.word	0xe000ed00

08012cac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b082      	sub	sp, #8
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	699b      	ldr	r3, [r3, #24]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d007      	beq.n	8012ccc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012cbc:	4b08      	ldr	r3, [pc, #32]	; (8012ce0 <HAL_PCD_ResumeCallback+0x34>)
 8012cbe:	691b      	ldr	r3, [r3, #16]
 8012cc0:	4a07      	ldr	r2, [pc, #28]	; (8012ce0 <HAL_PCD_ResumeCallback+0x34>)
 8012cc2:	f023 0306 	bic.w	r3, r3, #6
 8012cc6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012cc8:	f000 fab6 	bl	8013238 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7fe f835 	bl	8010d42 <USBD_LL_Resume>
}
 8012cd8:	bf00      	nop
 8012cda:	3708      	adds	r7, #8
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}
 8012ce0:	e000ed00 	.word	0xe000ed00

08012ce4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b082      	sub	sp, #8
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8012cec:	f7f6 fe90 	bl	8009a10 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8012cf0:	4a2b      	ldr	r2, [pc, #172]	; (8012da0 <USBD_LL_Init+0xbc>)
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	4a29      	ldr	r2, [pc, #164]	; (8012da0 <USBD_LL_Init+0xbc>)
 8012cfc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 8012d00:	4b27      	ldr	r3, [pc, #156]	; (8012da0 <USBD_LL_Init+0xbc>)
 8012d02:	4a28      	ldr	r2, [pc, #160]	; (8012da4 <USBD_LL_Init+0xc0>)
 8012d04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012d06:	4b26      	ldr	r3, [pc, #152]	; (8012da0 <USBD_LL_Init+0xbc>)
 8012d08:	2208      	movs	r2, #8
 8012d0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012d0c:	4b24      	ldr	r3, [pc, #144]	; (8012da0 <USBD_LL_Init+0xbc>)
 8012d0e:	2202      	movs	r2, #2
 8012d10:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012d12:	4b23      	ldr	r3, [pc, #140]	; (8012da0 <USBD_LL_Init+0xbc>)
 8012d14:	2202      	movs	r2, #2
 8012d16:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012d18:	4b21      	ldr	r3, [pc, #132]	; (8012da0 <USBD_LL_Init+0xbc>)
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012d1e:	4b20      	ldr	r3, [pc, #128]	; (8012da0 <USBD_LL_Init+0xbc>)
 8012d20:	2200      	movs	r2, #0
 8012d22:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012d24:	4b1e      	ldr	r3, [pc, #120]	; (8012da0 <USBD_LL_Init+0xbc>)
 8012d26:	2200      	movs	r2, #0
 8012d28:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012d2a:	4b1d      	ldr	r3, [pc, #116]	; (8012da0 <USBD_LL_Init+0xbc>)
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012d30:	481b      	ldr	r0, [pc, #108]	; (8012da0 <USBD_LL_Init+0xbc>)
 8012d32:	f7f5 f88b 	bl	8007e4c <HAL_PCD_Init>
 8012d36:	4603      	mov	r3, r0
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d001      	beq.n	8012d40 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8012d3c:	f7ee fe59 	bl	80019f2 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012d46:	2318      	movs	r3, #24
 8012d48:	2200      	movs	r2, #0
 8012d4a:	2100      	movs	r1, #0
 8012d4c:	f7f6 fd8f 	bl	800986e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012d56:	2358      	movs	r3, #88	; 0x58
 8012d58:	2200      	movs	r2, #0
 8012d5a:	2180      	movs	r1, #128	; 0x80
 8012d5c:	f7f6 fd87 	bl	800986e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012d66:	23c0      	movs	r3, #192	; 0xc0
 8012d68:	2200      	movs	r2, #0
 8012d6a:	2181      	movs	r1, #129	; 0x81
 8012d6c:	f7f6 fd7f 	bl	800986e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012d76:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	2101      	movs	r1, #1
 8012d7e:	f7f6 fd76 	bl	800986e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	2182      	movs	r1, #130	; 0x82
 8012d90:	f7f6 fd6d 	bl	800986e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012d94:	2300      	movs	r3, #0
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3708      	adds	r7, #8
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
 8012d9e:	bf00      	nop
 8012da0:	20001d50 	.word	0x20001d50
 8012da4:	40006800 	.word	0x40006800

08012da8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b084      	sub	sp, #16
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012db0:	2300      	movs	r3, #0
 8012db2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012db4:	2300      	movs	r3, #0
 8012db6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7f5 f94a 	bl	8008058 <HAL_PCD_Start>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012dc8:	7bbb      	ldrb	r3, [r7, #14]
 8012dca:	2b03      	cmp	r3, #3
 8012dcc:	d816      	bhi.n	8012dfc <USBD_LL_Start+0x54>
 8012dce:	a201      	add	r2, pc, #4	; (adr r2, 8012dd4 <USBD_LL_Start+0x2c>)
 8012dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dd4:	08012de5 	.word	0x08012de5
 8012dd8:	08012deb 	.word	0x08012deb
 8012ddc:	08012df1 	.word	0x08012df1
 8012de0:	08012df7 	.word	0x08012df7
    case HAL_OK :
      usb_status = USBD_OK;
 8012de4:	2300      	movs	r3, #0
 8012de6:	73fb      	strb	r3, [r7, #15]
    break;
 8012de8:	e00b      	b.n	8012e02 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012dea:	2303      	movs	r3, #3
 8012dec:	73fb      	strb	r3, [r7, #15]
    break;
 8012dee:	e008      	b.n	8012e02 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012df0:	2301      	movs	r3, #1
 8012df2:	73fb      	strb	r3, [r7, #15]
    break;
 8012df4:	e005      	b.n	8012e02 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012df6:	2303      	movs	r3, #3
 8012df8:	73fb      	strb	r3, [r7, #15]
    break;
 8012dfa:	e002      	b.n	8012e02 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8012dfc:	2303      	movs	r3, #3
 8012dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8012e00:	bf00      	nop
  }
  return usb_status;
 8012e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e04:	4618      	mov	r0, r3
 8012e06:	3710      	adds	r7, #16
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b084      	sub	sp, #16
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	4608      	mov	r0, r1
 8012e16:	4611      	mov	r1, r2
 8012e18:	461a      	mov	r2, r3
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	70fb      	strb	r3, [r7, #3]
 8012e1e:	460b      	mov	r3, r1
 8012e20:	70bb      	strb	r3, [r7, #2]
 8012e22:	4613      	mov	r3, r2
 8012e24:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e26:	2300      	movs	r3, #0
 8012e28:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012e34:	78bb      	ldrb	r3, [r7, #2]
 8012e36:	883a      	ldrh	r2, [r7, #0]
 8012e38:	78f9      	ldrb	r1, [r7, #3]
 8012e3a:	f7f5 fa7b 	bl	8008334 <HAL_PCD_EP_Open>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012e42:	7bbb      	ldrb	r3, [r7, #14]
 8012e44:	2b03      	cmp	r3, #3
 8012e46:	d817      	bhi.n	8012e78 <USBD_LL_OpenEP+0x6c>
 8012e48:	a201      	add	r2, pc, #4	; (adr r2, 8012e50 <USBD_LL_OpenEP+0x44>)
 8012e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e4e:	bf00      	nop
 8012e50:	08012e61 	.word	0x08012e61
 8012e54:	08012e67 	.word	0x08012e67
 8012e58:	08012e6d 	.word	0x08012e6d
 8012e5c:	08012e73 	.word	0x08012e73
    case HAL_OK :
      usb_status = USBD_OK;
 8012e60:	2300      	movs	r3, #0
 8012e62:	73fb      	strb	r3, [r7, #15]
    break;
 8012e64:	e00b      	b.n	8012e7e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012e66:	2303      	movs	r3, #3
 8012e68:	73fb      	strb	r3, [r7, #15]
    break;
 8012e6a:	e008      	b.n	8012e7e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8012e70:	e005      	b.n	8012e7e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012e72:	2303      	movs	r3, #3
 8012e74:	73fb      	strb	r3, [r7, #15]
    break;
 8012e76:	e002      	b.n	8012e7e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8012e78:	2303      	movs	r3, #3
 8012e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8012e7c:	bf00      	nop
  }
  return usb_status;
 8012e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3710      	adds	r7, #16
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b084      	sub	sp, #16
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	460b      	mov	r3, r1
 8012e92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e94:	2300      	movs	r3, #0
 8012e96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012ea2:	78fa      	ldrb	r2, [r7, #3]
 8012ea4:	4611      	mov	r1, r2
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7f5 faa1 	bl	80083ee <HAL_PCD_EP_Close>
 8012eac:	4603      	mov	r3, r0
 8012eae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012eb0:	7bbb      	ldrb	r3, [r7, #14]
 8012eb2:	2b03      	cmp	r3, #3
 8012eb4:	d816      	bhi.n	8012ee4 <USBD_LL_CloseEP+0x5c>
 8012eb6:	a201      	add	r2, pc, #4	; (adr r2, 8012ebc <USBD_LL_CloseEP+0x34>)
 8012eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ebc:	08012ecd 	.word	0x08012ecd
 8012ec0:	08012ed3 	.word	0x08012ed3
 8012ec4:	08012ed9 	.word	0x08012ed9
 8012ec8:	08012edf 	.word	0x08012edf
    case HAL_OK :
      usb_status = USBD_OK;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	73fb      	strb	r3, [r7, #15]
    break;
 8012ed0:	e00b      	b.n	8012eea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012ed2:	2303      	movs	r3, #3
 8012ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8012ed6:	e008      	b.n	8012eea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012ed8:	2301      	movs	r3, #1
 8012eda:	73fb      	strb	r3, [r7, #15]
    break;
 8012edc:	e005      	b.n	8012eea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012ede:	2303      	movs	r3, #3
 8012ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8012ee2:	e002      	b.n	8012eea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012ee4:	2303      	movs	r3, #3
 8012ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8012ee8:	bf00      	nop
  }
  return usb_status;
 8012eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	3710      	adds	r7, #16
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}

08012ef4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b084      	sub	sp, #16
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
 8012efc:	460b      	mov	r3, r1
 8012efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f00:	2300      	movs	r3, #0
 8012f02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f04:	2300      	movs	r3, #0
 8012f06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012f0e:	78fa      	ldrb	r2, [r7, #3]
 8012f10:	4611      	mov	r1, r2
 8012f12:	4618      	mov	r0, r3
 8012f14:	f7f5 fb33 	bl	800857e <HAL_PCD_EP_SetStall>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012f1c:	7bbb      	ldrb	r3, [r7, #14]
 8012f1e:	2b03      	cmp	r3, #3
 8012f20:	d816      	bhi.n	8012f50 <USBD_LL_StallEP+0x5c>
 8012f22:	a201      	add	r2, pc, #4	; (adr r2, 8012f28 <USBD_LL_StallEP+0x34>)
 8012f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f28:	08012f39 	.word	0x08012f39
 8012f2c:	08012f3f 	.word	0x08012f3f
 8012f30:	08012f45 	.word	0x08012f45
 8012f34:	08012f4b 	.word	0x08012f4b
    case HAL_OK :
      usb_status = USBD_OK;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8012f3c:	e00b      	b.n	8012f56 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012f3e:	2303      	movs	r3, #3
 8012f40:	73fb      	strb	r3, [r7, #15]
    break;
 8012f42:	e008      	b.n	8012f56 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012f44:	2301      	movs	r3, #1
 8012f46:	73fb      	strb	r3, [r7, #15]
    break;
 8012f48:	e005      	b.n	8012f56 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012f4a:	2303      	movs	r3, #3
 8012f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8012f4e:	e002      	b.n	8012f56 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012f50:	2303      	movs	r3, #3
 8012f52:	73fb      	strb	r3, [r7, #15]
    break;
 8012f54:	bf00      	nop
  }
  return usb_status;
 8012f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3710      	adds	r7, #16
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b084      	sub	sp, #16
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
 8012f68:	460b      	mov	r3, r1
 8012f6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f70:	2300      	movs	r3, #0
 8012f72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012f7a:	78fa      	ldrb	r2, [r7, #3]
 8012f7c:	4611      	mov	r1, r2
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7f5 fb5d 	bl	800863e <HAL_PCD_EP_ClrStall>
 8012f84:	4603      	mov	r3, r0
 8012f86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012f88:	7bbb      	ldrb	r3, [r7, #14]
 8012f8a:	2b03      	cmp	r3, #3
 8012f8c:	d816      	bhi.n	8012fbc <USBD_LL_ClearStallEP+0x5c>
 8012f8e:	a201      	add	r2, pc, #4	; (adr r2, 8012f94 <USBD_LL_ClearStallEP+0x34>)
 8012f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f94:	08012fa5 	.word	0x08012fa5
 8012f98:	08012fab 	.word	0x08012fab
 8012f9c:	08012fb1 	.word	0x08012fb1
 8012fa0:	08012fb7 	.word	0x08012fb7
    case HAL_OK :
      usb_status = USBD_OK;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8012fa8:	e00b      	b.n	8012fc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012faa:	2303      	movs	r3, #3
 8012fac:	73fb      	strb	r3, [r7, #15]
    break;
 8012fae:	e008      	b.n	8012fc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8012fb4:	e005      	b.n	8012fc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012fb6:	2303      	movs	r3, #3
 8012fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8012fba:	e002      	b.n	8012fc2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012fbc:	2303      	movs	r3, #3
 8012fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8012fc0:	bf00      	nop
  }
  return usb_status;
 8012fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	3710      	adds	r7, #16
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}

08012fcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012fcc:	b480      	push	{r7}
 8012fce:	b085      	sub	sp, #20
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012fde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	da0c      	bge.n	8013002 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012fe8:	78fb      	ldrb	r3, [r7, #3]
 8012fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012fee:	68f9      	ldr	r1, [r7, #12]
 8012ff0:	1c5a      	adds	r2, r3, #1
 8012ff2:	4613      	mov	r3, r2
 8012ff4:	009b      	lsls	r3, r3, #2
 8012ff6:	4413      	add	r3, r2
 8012ff8:	00db      	lsls	r3, r3, #3
 8012ffa:	440b      	add	r3, r1
 8012ffc:	3302      	adds	r3, #2
 8012ffe:	781b      	ldrb	r3, [r3, #0]
 8013000:	e00b      	b.n	801301a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013002:	78fb      	ldrb	r3, [r7, #3]
 8013004:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013008:	68f9      	ldr	r1, [r7, #12]
 801300a:	4613      	mov	r3, r2
 801300c:	009b      	lsls	r3, r3, #2
 801300e:	4413      	add	r3, r2
 8013010:	00db      	lsls	r3, r3, #3
 8013012:	440b      	add	r3, r1
 8013014:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8013018:	781b      	ldrb	r3, [r3, #0]
  }
}
 801301a:	4618      	mov	r0, r3
 801301c:	3714      	adds	r7, #20
 801301e:	46bd      	mov	sp, r7
 8013020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013024:	4770      	bx	lr
	...

08013028 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b084      	sub	sp, #16
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	460b      	mov	r3, r1
 8013032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013034:	2300      	movs	r3, #0
 8013036:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013038:	2300      	movs	r3, #0
 801303a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013042:	78fa      	ldrb	r2, [r7, #3]
 8013044:	4611      	mov	r1, r2
 8013046:	4618      	mov	r0, r3
 8013048:	f7f5 f94f 	bl	80082ea <HAL_PCD_SetAddress>
 801304c:	4603      	mov	r3, r0
 801304e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013050:	7bbb      	ldrb	r3, [r7, #14]
 8013052:	2b03      	cmp	r3, #3
 8013054:	d816      	bhi.n	8013084 <USBD_LL_SetUSBAddress+0x5c>
 8013056:	a201      	add	r2, pc, #4	; (adr r2, 801305c <USBD_LL_SetUSBAddress+0x34>)
 8013058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801305c:	0801306d 	.word	0x0801306d
 8013060:	08013073 	.word	0x08013073
 8013064:	08013079 	.word	0x08013079
 8013068:	0801307f 	.word	0x0801307f
    case HAL_OK :
      usb_status = USBD_OK;
 801306c:	2300      	movs	r3, #0
 801306e:	73fb      	strb	r3, [r7, #15]
    break;
 8013070:	e00b      	b.n	801308a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013072:	2303      	movs	r3, #3
 8013074:	73fb      	strb	r3, [r7, #15]
    break;
 8013076:	e008      	b.n	801308a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013078:	2301      	movs	r3, #1
 801307a:	73fb      	strb	r3, [r7, #15]
    break;
 801307c:	e005      	b.n	801308a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801307e:	2303      	movs	r3, #3
 8013080:	73fb      	strb	r3, [r7, #15]
    break;
 8013082:	e002      	b.n	801308a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8013084:	2303      	movs	r3, #3
 8013086:	73fb      	strb	r3, [r7, #15]
    break;
 8013088:	bf00      	nop
  }
  return usb_status;
 801308a:	7bfb      	ldrb	r3, [r7, #15]
}
 801308c:	4618      	mov	r0, r3
 801308e:	3710      	adds	r7, #16
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}

08013094 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b086      	sub	sp, #24
 8013098:	af00      	add	r7, sp, #0
 801309a:	60f8      	str	r0, [r7, #12]
 801309c:	607a      	str	r2, [r7, #4]
 801309e:	603b      	str	r3, [r7, #0]
 80130a0:	460b      	mov	r3, r1
 80130a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130a4:	2300      	movs	r3, #0
 80130a6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130a8:	2300      	movs	r3, #0
 80130aa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80130b2:	7af9      	ldrb	r1, [r7, #11]
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	687a      	ldr	r2, [r7, #4]
 80130b8:	f7f5 fa2a 	bl	8008510 <HAL_PCD_EP_Transmit>
 80130bc:	4603      	mov	r3, r0
 80130be:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80130c0:	7dbb      	ldrb	r3, [r7, #22]
 80130c2:	2b03      	cmp	r3, #3
 80130c4:	d816      	bhi.n	80130f4 <USBD_LL_Transmit+0x60>
 80130c6:	a201      	add	r2, pc, #4	; (adr r2, 80130cc <USBD_LL_Transmit+0x38>)
 80130c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130cc:	080130dd 	.word	0x080130dd
 80130d0:	080130e3 	.word	0x080130e3
 80130d4:	080130e9 	.word	0x080130e9
 80130d8:	080130ef 	.word	0x080130ef
    case HAL_OK :
      usb_status = USBD_OK;
 80130dc:	2300      	movs	r3, #0
 80130de:	75fb      	strb	r3, [r7, #23]
    break;
 80130e0:	e00b      	b.n	80130fa <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80130e2:	2303      	movs	r3, #3
 80130e4:	75fb      	strb	r3, [r7, #23]
    break;
 80130e6:	e008      	b.n	80130fa <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80130e8:	2301      	movs	r3, #1
 80130ea:	75fb      	strb	r3, [r7, #23]
    break;
 80130ec:	e005      	b.n	80130fa <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80130ee:	2303      	movs	r3, #3
 80130f0:	75fb      	strb	r3, [r7, #23]
    break;
 80130f2:	e002      	b.n	80130fa <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80130f4:	2303      	movs	r3, #3
 80130f6:	75fb      	strb	r3, [r7, #23]
    break;
 80130f8:	bf00      	nop
  }
  return usb_status;
 80130fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	3718      	adds	r7, #24
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}

08013104 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b086      	sub	sp, #24
 8013108:	af00      	add	r7, sp, #0
 801310a:	60f8      	str	r0, [r7, #12]
 801310c:	607a      	str	r2, [r7, #4]
 801310e:	603b      	str	r3, [r7, #0]
 8013110:	460b      	mov	r3, r1
 8013112:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013114:	2300      	movs	r3, #0
 8013116:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013118:	2300      	movs	r3, #0
 801311a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013122:	7af9      	ldrb	r1, [r7, #11]
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	f7f5 f9a9 	bl	800847e <HAL_PCD_EP_Receive>
 801312c:	4603      	mov	r3, r0
 801312e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013130:	7dbb      	ldrb	r3, [r7, #22]
 8013132:	2b03      	cmp	r3, #3
 8013134:	d816      	bhi.n	8013164 <USBD_LL_PrepareReceive+0x60>
 8013136:	a201      	add	r2, pc, #4	; (adr r2, 801313c <USBD_LL_PrepareReceive+0x38>)
 8013138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801313c:	0801314d 	.word	0x0801314d
 8013140:	08013153 	.word	0x08013153
 8013144:	08013159 	.word	0x08013159
 8013148:	0801315f 	.word	0x0801315f
    case HAL_OK :
      usb_status = USBD_OK;
 801314c:	2300      	movs	r3, #0
 801314e:	75fb      	strb	r3, [r7, #23]
    break;
 8013150:	e00b      	b.n	801316a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013152:	2303      	movs	r3, #3
 8013154:	75fb      	strb	r3, [r7, #23]
    break;
 8013156:	e008      	b.n	801316a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013158:	2301      	movs	r3, #1
 801315a:	75fb      	strb	r3, [r7, #23]
    break;
 801315c:	e005      	b.n	801316a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801315e:	2303      	movs	r3, #3
 8013160:	75fb      	strb	r3, [r7, #23]
    break;
 8013162:	e002      	b.n	801316a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8013164:	2303      	movs	r3, #3
 8013166:	75fb      	strb	r3, [r7, #23]
    break;
 8013168:	bf00      	nop
  }
  return usb_status;
 801316a:	7dfb      	ldrb	r3, [r7, #23]
}
 801316c:	4618      	mov	r0, r3
 801316e:	3718      	adds	r7, #24
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}

08013174 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b082      	sub	sp, #8
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
 801317c:	460b      	mov	r3, r1
 801317e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013186:	78fa      	ldrb	r2, [r7, #3]
 8013188:	4611      	mov	r1, r2
 801318a:	4618      	mov	r0, r3
 801318c:	f7f5 f9a8 	bl	80084e0 <HAL_PCD_EP_GetRxCount>
 8013190:	4603      	mov	r3, r0
}
 8013192:	4618      	mov	r0, r3
 8013194:	3708      	adds	r7, #8
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
	...

0801319c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b082      	sub	sp, #8
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	460b      	mov	r3, r1
 80131a6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80131a8:	78fb      	ldrb	r3, [r7, #3]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d002      	beq.n	80131b4 <HAL_PCDEx_LPM_Callback+0x18>
 80131ae:	2b01      	cmp	r3, #1
 80131b0:	d013      	beq.n	80131da <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80131b2:	e023      	b.n	80131fc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	699b      	ldr	r3, [r3, #24]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d007      	beq.n	80131cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80131bc:	f000 f83c 	bl	8013238 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80131c0:	4b10      	ldr	r3, [pc, #64]	; (8013204 <HAL_PCDEx_LPM_Callback+0x68>)
 80131c2:	691b      	ldr	r3, [r3, #16]
 80131c4:	4a0f      	ldr	r2, [pc, #60]	; (8013204 <HAL_PCDEx_LPM_Callback+0x68>)
 80131c6:	f023 0306 	bic.w	r3, r3, #6
 80131ca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7fd fdb5 	bl	8010d42 <USBD_LL_Resume>
    break;
 80131d8:	e010      	b.n	80131fc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80131e0:	4618      	mov	r0, r3
 80131e2:	f7fd fd92 	bl	8010d0a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	699b      	ldr	r3, [r3, #24]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d005      	beq.n	80131fa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80131ee:	4b05      	ldr	r3, [pc, #20]	; (8013204 <HAL_PCDEx_LPM_Callback+0x68>)
 80131f0:	691b      	ldr	r3, [r3, #16]
 80131f2:	4a04      	ldr	r2, [pc, #16]	; (8013204 <HAL_PCDEx_LPM_Callback+0x68>)
 80131f4:	f043 0306 	orr.w	r3, r3, #6
 80131f8:	6113      	str	r3, [r2, #16]
    break;
 80131fa:	bf00      	nop
}
 80131fc:	bf00      	nop
 80131fe:	3708      	adds	r7, #8
 8013200:	46bd      	mov	sp, r7
 8013202:	bd80      	pop	{r7, pc}
 8013204:	e000ed00 	.word	0xe000ed00

08013208 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013208:	b480      	push	{r7}
 801320a:	b083      	sub	sp, #12
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013210:	4b03      	ldr	r3, [pc, #12]	; (8013220 <USBD_static_malloc+0x18>)
}
 8013212:	4618      	mov	r0, r3
 8013214:	370c      	adds	r7, #12
 8013216:	46bd      	mov	sp, r7
 8013218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321c:	4770      	bx	lr
 801321e:	bf00      	nop
 8013220:	20002048 	.word	0x20002048

08013224 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013224:	b480      	push	{r7}
 8013226:	b083      	sub	sp, #12
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]

}
 801322c:	bf00      	nop
 801322e:	370c      	adds	r7, #12
 8013230:	46bd      	mov	sp, r7
 8013232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013236:	4770      	bx	lr

08013238 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801323c:	f7ee fb58 	bl	80018f0 <SystemClock_Config>
}
 8013240:	bf00      	nop
 8013242:	bd80      	pop	{r7, pc}

08013244 <atoi>:
 8013244:	220a      	movs	r2, #10
 8013246:	2100      	movs	r1, #0
 8013248:	f000 bfba 	b.w	80141c0 <strtol>

0801324c <malloc>:
 801324c:	4b02      	ldr	r3, [pc, #8]	; (8013258 <malloc+0xc>)
 801324e:	4601      	mov	r1, r0
 8013250:	6818      	ldr	r0, [r3, #0]
 8013252:	f000 b82b 	b.w	80132ac <_malloc_r>
 8013256:	bf00      	nop
 8013258:	200002f0 	.word	0x200002f0

0801325c <free>:
 801325c:	4b02      	ldr	r3, [pc, #8]	; (8013268 <free+0xc>)
 801325e:	4601      	mov	r1, r0
 8013260:	6818      	ldr	r0, [r3, #0]
 8013262:	f002 bf57 	b.w	8016114 <_free_r>
 8013266:	bf00      	nop
 8013268:	200002f0 	.word	0x200002f0

0801326c <sbrk_aligned>:
 801326c:	b570      	push	{r4, r5, r6, lr}
 801326e:	4e0e      	ldr	r6, [pc, #56]	; (80132a8 <sbrk_aligned+0x3c>)
 8013270:	460c      	mov	r4, r1
 8013272:	6831      	ldr	r1, [r6, #0]
 8013274:	4605      	mov	r5, r0
 8013276:	b911      	cbnz	r1, 801327e <sbrk_aligned+0x12>
 8013278:	f002 f840 	bl	80152fc <_sbrk_r>
 801327c:	6030      	str	r0, [r6, #0]
 801327e:	4621      	mov	r1, r4
 8013280:	4628      	mov	r0, r5
 8013282:	f002 f83b 	bl	80152fc <_sbrk_r>
 8013286:	1c43      	adds	r3, r0, #1
 8013288:	d00a      	beq.n	80132a0 <sbrk_aligned+0x34>
 801328a:	1cc4      	adds	r4, r0, #3
 801328c:	f024 0403 	bic.w	r4, r4, #3
 8013290:	42a0      	cmp	r0, r4
 8013292:	d007      	beq.n	80132a4 <sbrk_aligned+0x38>
 8013294:	1a21      	subs	r1, r4, r0
 8013296:	4628      	mov	r0, r5
 8013298:	f002 f830 	bl	80152fc <_sbrk_r>
 801329c:	3001      	adds	r0, #1
 801329e:	d101      	bne.n	80132a4 <sbrk_aligned+0x38>
 80132a0:	f04f 34ff 	mov.w	r4, #4294967295
 80132a4:	4620      	mov	r0, r4
 80132a6:	bd70      	pop	{r4, r5, r6, pc}
 80132a8:	2000226c 	.word	0x2000226c

080132ac <_malloc_r>:
 80132ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132b0:	1ccd      	adds	r5, r1, #3
 80132b2:	f025 0503 	bic.w	r5, r5, #3
 80132b6:	3508      	adds	r5, #8
 80132b8:	2d0c      	cmp	r5, #12
 80132ba:	bf38      	it	cc
 80132bc:	250c      	movcc	r5, #12
 80132be:	2d00      	cmp	r5, #0
 80132c0:	4607      	mov	r7, r0
 80132c2:	db01      	blt.n	80132c8 <_malloc_r+0x1c>
 80132c4:	42a9      	cmp	r1, r5
 80132c6:	d905      	bls.n	80132d4 <_malloc_r+0x28>
 80132c8:	230c      	movs	r3, #12
 80132ca:	603b      	str	r3, [r7, #0]
 80132cc:	2600      	movs	r6, #0
 80132ce:	4630      	mov	r0, r6
 80132d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80133a8 <_malloc_r+0xfc>
 80132d8:	f000 f868 	bl	80133ac <__malloc_lock>
 80132dc:	f8d8 3000 	ldr.w	r3, [r8]
 80132e0:	461c      	mov	r4, r3
 80132e2:	bb5c      	cbnz	r4, 801333c <_malloc_r+0x90>
 80132e4:	4629      	mov	r1, r5
 80132e6:	4638      	mov	r0, r7
 80132e8:	f7ff ffc0 	bl	801326c <sbrk_aligned>
 80132ec:	1c43      	adds	r3, r0, #1
 80132ee:	4604      	mov	r4, r0
 80132f0:	d155      	bne.n	801339e <_malloc_r+0xf2>
 80132f2:	f8d8 4000 	ldr.w	r4, [r8]
 80132f6:	4626      	mov	r6, r4
 80132f8:	2e00      	cmp	r6, #0
 80132fa:	d145      	bne.n	8013388 <_malloc_r+0xdc>
 80132fc:	2c00      	cmp	r4, #0
 80132fe:	d048      	beq.n	8013392 <_malloc_r+0xe6>
 8013300:	6823      	ldr	r3, [r4, #0]
 8013302:	4631      	mov	r1, r6
 8013304:	4638      	mov	r0, r7
 8013306:	eb04 0903 	add.w	r9, r4, r3
 801330a:	f001 fff7 	bl	80152fc <_sbrk_r>
 801330e:	4581      	cmp	r9, r0
 8013310:	d13f      	bne.n	8013392 <_malloc_r+0xe6>
 8013312:	6821      	ldr	r1, [r4, #0]
 8013314:	1a6d      	subs	r5, r5, r1
 8013316:	4629      	mov	r1, r5
 8013318:	4638      	mov	r0, r7
 801331a:	f7ff ffa7 	bl	801326c <sbrk_aligned>
 801331e:	3001      	adds	r0, #1
 8013320:	d037      	beq.n	8013392 <_malloc_r+0xe6>
 8013322:	6823      	ldr	r3, [r4, #0]
 8013324:	442b      	add	r3, r5
 8013326:	6023      	str	r3, [r4, #0]
 8013328:	f8d8 3000 	ldr.w	r3, [r8]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d038      	beq.n	80133a2 <_malloc_r+0xf6>
 8013330:	685a      	ldr	r2, [r3, #4]
 8013332:	42a2      	cmp	r2, r4
 8013334:	d12b      	bne.n	801338e <_malloc_r+0xe2>
 8013336:	2200      	movs	r2, #0
 8013338:	605a      	str	r2, [r3, #4]
 801333a:	e00f      	b.n	801335c <_malloc_r+0xb0>
 801333c:	6822      	ldr	r2, [r4, #0]
 801333e:	1b52      	subs	r2, r2, r5
 8013340:	d41f      	bmi.n	8013382 <_malloc_r+0xd6>
 8013342:	2a0b      	cmp	r2, #11
 8013344:	d917      	bls.n	8013376 <_malloc_r+0xca>
 8013346:	1961      	adds	r1, r4, r5
 8013348:	42a3      	cmp	r3, r4
 801334a:	6025      	str	r5, [r4, #0]
 801334c:	bf18      	it	ne
 801334e:	6059      	strne	r1, [r3, #4]
 8013350:	6863      	ldr	r3, [r4, #4]
 8013352:	bf08      	it	eq
 8013354:	f8c8 1000 	streq.w	r1, [r8]
 8013358:	5162      	str	r2, [r4, r5]
 801335a:	604b      	str	r3, [r1, #4]
 801335c:	4638      	mov	r0, r7
 801335e:	f104 060b 	add.w	r6, r4, #11
 8013362:	f000 f829 	bl	80133b8 <__malloc_unlock>
 8013366:	f026 0607 	bic.w	r6, r6, #7
 801336a:	1d23      	adds	r3, r4, #4
 801336c:	1af2      	subs	r2, r6, r3
 801336e:	d0ae      	beq.n	80132ce <_malloc_r+0x22>
 8013370:	1b9b      	subs	r3, r3, r6
 8013372:	50a3      	str	r3, [r4, r2]
 8013374:	e7ab      	b.n	80132ce <_malloc_r+0x22>
 8013376:	42a3      	cmp	r3, r4
 8013378:	6862      	ldr	r2, [r4, #4]
 801337a:	d1dd      	bne.n	8013338 <_malloc_r+0x8c>
 801337c:	f8c8 2000 	str.w	r2, [r8]
 8013380:	e7ec      	b.n	801335c <_malloc_r+0xb0>
 8013382:	4623      	mov	r3, r4
 8013384:	6864      	ldr	r4, [r4, #4]
 8013386:	e7ac      	b.n	80132e2 <_malloc_r+0x36>
 8013388:	4634      	mov	r4, r6
 801338a:	6876      	ldr	r6, [r6, #4]
 801338c:	e7b4      	b.n	80132f8 <_malloc_r+0x4c>
 801338e:	4613      	mov	r3, r2
 8013390:	e7cc      	b.n	801332c <_malloc_r+0x80>
 8013392:	230c      	movs	r3, #12
 8013394:	603b      	str	r3, [r7, #0]
 8013396:	4638      	mov	r0, r7
 8013398:	f000 f80e 	bl	80133b8 <__malloc_unlock>
 801339c:	e797      	b.n	80132ce <_malloc_r+0x22>
 801339e:	6025      	str	r5, [r4, #0]
 80133a0:	e7dc      	b.n	801335c <_malloc_r+0xb0>
 80133a2:	605b      	str	r3, [r3, #4]
 80133a4:	deff      	udf	#255	; 0xff
 80133a6:	bf00      	nop
 80133a8:	20002268 	.word	0x20002268

080133ac <__malloc_lock>:
 80133ac:	4801      	ldr	r0, [pc, #4]	; (80133b4 <__malloc_lock+0x8>)
 80133ae:	f001 bff2 	b.w	8015396 <__retarget_lock_acquire_recursive>
 80133b2:	bf00      	nop
 80133b4:	200023b0 	.word	0x200023b0

080133b8 <__malloc_unlock>:
 80133b8:	4801      	ldr	r0, [pc, #4]	; (80133c0 <__malloc_unlock+0x8>)
 80133ba:	f001 bfed 	b.w	8015398 <__retarget_lock_release_recursive>
 80133be:	bf00      	nop
 80133c0:	200023b0 	.word	0x200023b0

080133c4 <sulp>:
 80133c4:	b570      	push	{r4, r5, r6, lr}
 80133c6:	4604      	mov	r4, r0
 80133c8:	460d      	mov	r5, r1
 80133ca:	ec45 4b10 	vmov	d0, r4, r5
 80133ce:	4616      	mov	r6, r2
 80133d0:	f003 fdc2 	bl	8016f58 <__ulp>
 80133d4:	ec51 0b10 	vmov	r0, r1, d0
 80133d8:	b17e      	cbz	r6, 80133fa <sulp+0x36>
 80133da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80133de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	dd09      	ble.n	80133fa <sulp+0x36>
 80133e6:	051b      	lsls	r3, r3, #20
 80133e8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80133ec:	2400      	movs	r4, #0
 80133ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80133f2:	4622      	mov	r2, r4
 80133f4:	462b      	mov	r3, r5
 80133f6:	f7ed f8ff 	bl	80005f8 <__aeabi_dmul>
 80133fa:	bd70      	pop	{r4, r5, r6, pc}
 80133fc:	0000      	movs	r0, r0
	...

08013400 <_strtod_l>:
 8013400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013404:	ed2d 8b02 	vpush	{d8}
 8013408:	b09b      	sub	sp, #108	; 0x6c
 801340a:	4604      	mov	r4, r0
 801340c:	9213      	str	r2, [sp, #76]	; 0x4c
 801340e:	2200      	movs	r2, #0
 8013410:	9216      	str	r2, [sp, #88]	; 0x58
 8013412:	460d      	mov	r5, r1
 8013414:	f04f 0800 	mov.w	r8, #0
 8013418:	f04f 0900 	mov.w	r9, #0
 801341c:	460a      	mov	r2, r1
 801341e:	9215      	str	r2, [sp, #84]	; 0x54
 8013420:	7811      	ldrb	r1, [r2, #0]
 8013422:	292b      	cmp	r1, #43	; 0x2b
 8013424:	d04c      	beq.n	80134c0 <_strtod_l+0xc0>
 8013426:	d83a      	bhi.n	801349e <_strtod_l+0x9e>
 8013428:	290d      	cmp	r1, #13
 801342a:	d834      	bhi.n	8013496 <_strtod_l+0x96>
 801342c:	2908      	cmp	r1, #8
 801342e:	d834      	bhi.n	801349a <_strtod_l+0x9a>
 8013430:	2900      	cmp	r1, #0
 8013432:	d03d      	beq.n	80134b0 <_strtod_l+0xb0>
 8013434:	2200      	movs	r2, #0
 8013436:	920a      	str	r2, [sp, #40]	; 0x28
 8013438:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801343a:	7832      	ldrb	r2, [r6, #0]
 801343c:	2a30      	cmp	r2, #48	; 0x30
 801343e:	f040 80b4 	bne.w	80135aa <_strtod_l+0x1aa>
 8013442:	7872      	ldrb	r2, [r6, #1]
 8013444:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013448:	2a58      	cmp	r2, #88	; 0x58
 801344a:	d170      	bne.n	801352e <_strtod_l+0x12e>
 801344c:	9302      	str	r3, [sp, #8]
 801344e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013450:	9301      	str	r3, [sp, #4]
 8013452:	ab16      	add	r3, sp, #88	; 0x58
 8013454:	9300      	str	r3, [sp, #0]
 8013456:	4a8e      	ldr	r2, [pc, #568]	; (8013690 <_strtod_l+0x290>)
 8013458:	ab17      	add	r3, sp, #92	; 0x5c
 801345a:	a915      	add	r1, sp, #84	; 0x54
 801345c:	4620      	mov	r0, r4
 801345e:	f002 ff0d 	bl	801627c <__gethex>
 8013462:	f010 070f 	ands.w	r7, r0, #15
 8013466:	4605      	mov	r5, r0
 8013468:	d005      	beq.n	8013476 <_strtod_l+0x76>
 801346a:	2f06      	cmp	r7, #6
 801346c:	d12a      	bne.n	80134c4 <_strtod_l+0xc4>
 801346e:	3601      	adds	r6, #1
 8013470:	2300      	movs	r3, #0
 8013472:	9615      	str	r6, [sp, #84]	; 0x54
 8013474:	930a      	str	r3, [sp, #40]	; 0x28
 8013476:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013478:	2b00      	cmp	r3, #0
 801347a:	f040 857f 	bne.w	8013f7c <_strtod_l+0xb7c>
 801347e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013480:	b1db      	cbz	r3, 80134ba <_strtod_l+0xba>
 8013482:	4642      	mov	r2, r8
 8013484:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013488:	ec43 2b10 	vmov	d0, r2, r3
 801348c:	b01b      	add	sp, #108	; 0x6c
 801348e:	ecbd 8b02 	vpop	{d8}
 8013492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013496:	2920      	cmp	r1, #32
 8013498:	d1cc      	bne.n	8013434 <_strtod_l+0x34>
 801349a:	3201      	adds	r2, #1
 801349c:	e7bf      	b.n	801341e <_strtod_l+0x1e>
 801349e:	292d      	cmp	r1, #45	; 0x2d
 80134a0:	d1c8      	bne.n	8013434 <_strtod_l+0x34>
 80134a2:	2101      	movs	r1, #1
 80134a4:	910a      	str	r1, [sp, #40]	; 0x28
 80134a6:	1c51      	adds	r1, r2, #1
 80134a8:	9115      	str	r1, [sp, #84]	; 0x54
 80134aa:	7852      	ldrb	r2, [r2, #1]
 80134ac:	2a00      	cmp	r2, #0
 80134ae:	d1c3      	bne.n	8013438 <_strtod_l+0x38>
 80134b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80134b2:	9515      	str	r5, [sp, #84]	; 0x54
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	f040 855f 	bne.w	8013f78 <_strtod_l+0xb78>
 80134ba:	4642      	mov	r2, r8
 80134bc:	464b      	mov	r3, r9
 80134be:	e7e3      	b.n	8013488 <_strtod_l+0x88>
 80134c0:	2100      	movs	r1, #0
 80134c2:	e7ef      	b.n	80134a4 <_strtod_l+0xa4>
 80134c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80134c6:	b13a      	cbz	r2, 80134d8 <_strtod_l+0xd8>
 80134c8:	2135      	movs	r1, #53	; 0x35
 80134ca:	a818      	add	r0, sp, #96	; 0x60
 80134cc:	f003 fe41 	bl	8017152 <__copybits>
 80134d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80134d2:	4620      	mov	r0, r4
 80134d4:	f003 fa14 	bl	8016900 <_Bfree>
 80134d8:	3f01      	subs	r7, #1
 80134da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80134dc:	2f04      	cmp	r7, #4
 80134de:	d806      	bhi.n	80134ee <_strtod_l+0xee>
 80134e0:	e8df f007 	tbb	[pc, r7]
 80134e4:	201d0314 	.word	0x201d0314
 80134e8:	14          	.byte	0x14
 80134e9:	00          	.byte	0x00
 80134ea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80134ee:	05e9      	lsls	r1, r5, #23
 80134f0:	bf48      	it	mi
 80134f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80134f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80134fa:	0d1b      	lsrs	r3, r3, #20
 80134fc:	051b      	lsls	r3, r3, #20
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d1b9      	bne.n	8013476 <_strtod_l+0x76>
 8013502:	f001 ff1d 	bl	8015340 <__errno>
 8013506:	2322      	movs	r3, #34	; 0x22
 8013508:	6003      	str	r3, [r0, #0]
 801350a:	e7b4      	b.n	8013476 <_strtod_l+0x76>
 801350c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8013510:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013514:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013518:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801351c:	e7e7      	b.n	80134ee <_strtod_l+0xee>
 801351e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013698 <_strtod_l+0x298>
 8013522:	e7e4      	b.n	80134ee <_strtod_l+0xee>
 8013524:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013528:	f04f 38ff 	mov.w	r8, #4294967295
 801352c:	e7df      	b.n	80134ee <_strtod_l+0xee>
 801352e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013530:	1c5a      	adds	r2, r3, #1
 8013532:	9215      	str	r2, [sp, #84]	; 0x54
 8013534:	785b      	ldrb	r3, [r3, #1]
 8013536:	2b30      	cmp	r3, #48	; 0x30
 8013538:	d0f9      	beq.n	801352e <_strtod_l+0x12e>
 801353a:	2b00      	cmp	r3, #0
 801353c:	d09b      	beq.n	8013476 <_strtod_l+0x76>
 801353e:	2301      	movs	r3, #1
 8013540:	f04f 0a00 	mov.w	sl, #0
 8013544:	9304      	str	r3, [sp, #16]
 8013546:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013548:	930b      	str	r3, [sp, #44]	; 0x2c
 801354a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801354e:	46d3      	mov	fp, sl
 8013550:	220a      	movs	r2, #10
 8013552:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013554:	7806      	ldrb	r6, [r0, #0]
 8013556:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801355a:	b2d9      	uxtb	r1, r3
 801355c:	2909      	cmp	r1, #9
 801355e:	d926      	bls.n	80135ae <_strtod_l+0x1ae>
 8013560:	494c      	ldr	r1, [pc, #304]	; (8013694 <_strtod_l+0x294>)
 8013562:	2201      	movs	r2, #1
 8013564:	f001 fe0d 	bl	8015182 <strncmp>
 8013568:	2800      	cmp	r0, #0
 801356a:	d030      	beq.n	80135ce <_strtod_l+0x1ce>
 801356c:	2000      	movs	r0, #0
 801356e:	4632      	mov	r2, r6
 8013570:	9005      	str	r0, [sp, #20]
 8013572:	465e      	mov	r6, fp
 8013574:	4603      	mov	r3, r0
 8013576:	2a65      	cmp	r2, #101	; 0x65
 8013578:	d001      	beq.n	801357e <_strtod_l+0x17e>
 801357a:	2a45      	cmp	r2, #69	; 0x45
 801357c:	d113      	bne.n	80135a6 <_strtod_l+0x1a6>
 801357e:	b91e      	cbnz	r6, 8013588 <_strtod_l+0x188>
 8013580:	9a04      	ldr	r2, [sp, #16]
 8013582:	4302      	orrs	r2, r0
 8013584:	d094      	beq.n	80134b0 <_strtod_l+0xb0>
 8013586:	2600      	movs	r6, #0
 8013588:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801358a:	1c6a      	adds	r2, r5, #1
 801358c:	9215      	str	r2, [sp, #84]	; 0x54
 801358e:	786a      	ldrb	r2, [r5, #1]
 8013590:	2a2b      	cmp	r2, #43	; 0x2b
 8013592:	d074      	beq.n	801367e <_strtod_l+0x27e>
 8013594:	2a2d      	cmp	r2, #45	; 0x2d
 8013596:	d078      	beq.n	801368a <_strtod_l+0x28a>
 8013598:	f04f 0c00 	mov.w	ip, #0
 801359c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80135a0:	2909      	cmp	r1, #9
 80135a2:	d97f      	bls.n	80136a4 <_strtod_l+0x2a4>
 80135a4:	9515      	str	r5, [sp, #84]	; 0x54
 80135a6:	2700      	movs	r7, #0
 80135a8:	e09e      	b.n	80136e8 <_strtod_l+0x2e8>
 80135aa:	2300      	movs	r3, #0
 80135ac:	e7c8      	b.n	8013540 <_strtod_l+0x140>
 80135ae:	f1bb 0f08 	cmp.w	fp, #8
 80135b2:	bfd8      	it	le
 80135b4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80135b6:	f100 0001 	add.w	r0, r0, #1
 80135ba:	bfda      	itte	le
 80135bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80135c0:	9309      	strle	r3, [sp, #36]	; 0x24
 80135c2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80135c6:	f10b 0b01 	add.w	fp, fp, #1
 80135ca:	9015      	str	r0, [sp, #84]	; 0x54
 80135cc:	e7c1      	b.n	8013552 <_strtod_l+0x152>
 80135ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80135d0:	1c5a      	adds	r2, r3, #1
 80135d2:	9215      	str	r2, [sp, #84]	; 0x54
 80135d4:	785a      	ldrb	r2, [r3, #1]
 80135d6:	f1bb 0f00 	cmp.w	fp, #0
 80135da:	d037      	beq.n	801364c <_strtod_l+0x24c>
 80135dc:	9005      	str	r0, [sp, #20]
 80135de:	465e      	mov	r6, fp
 80135e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80135e4:	2b09      	cmp	r3, #9
 80135e6:	d912      	bls.n	801360e <_strtod_l+0x20e>
 80135e8:	2301      	movs	r3, #1
 80135ea:	e7c4      	b.n	8013576 <_strtod_l+0x176>
 80135ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80135ee:	1c5a      	adds	r2, r3, #1
 80135f0:	9215      	str	r2, [sp, #84]	; 0x54
 80135f2:	785a      	ldrb	r2, [r3, #1]
 80135f4:	3001      	adds	r0, #1
 80135f6:	2a30      	cmp	r2, #48	; 0x30
 80135f8:	d0f8      	beq.n	80135ec <_strtod_l+0x1ec>
 80135fa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80135fe:	2b08      	cmp	r3, #8
 8013600:	f200 84c1 	bhi.w	8013f86 <_strtod_l+0xb86>
 8013604:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013606:	9005      	str	r0, [sp, #20]
 8013608:	2000      	movs	r0, #0
 801360a:	930b      	str	r3, [sp, #44]	; 0x2c
 801360c:	4606      	mov	r6, r0
 801360e:	3a30      	subs	r2, #48	; 0x30
 8013610:	f100 0301 	add.w	r3, r0, #1
 8013614:	d014      	beq.n	8013640 <_strtod_l+0x240>
 8013616:	9905      	ldr	r1, [sp, #20]
 8013618:	4419      	add	r1, r3
 801361a:	9105      	str	r1, [sp, #20]
 801361c:	4633      	mov	r3, r6
 801361e:	eb00 0c06 	add.w	ip, r0, r6
 8013622:	210a      	movs	r1, #10
 8013624:	4563      	cmp	r3, ip
 8013626:	d113      	bne.n	8013650 <_strtod_l+0x250>
 8013628:	1833      	adds	r3, r6, r0
 801362a:	2b08      	cmp	r3, #8
 801362c:	f106 0601 	add.w	r6, r6, #1
 8013630:	4406      	add	r6, r0
 8013632:	dc1a      	bgt.n	801366a <_strtod_l+0x26a>
 8013634:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013636:	230a      	movs	r3, #10
 8013638:	fb03 2301 	mla	r3, r3, r1, r2
 801363c:	9309      	str	r3, [sp, #36]	; 0x24
 801363e:	2300      	movs	r3, #0
 8013640:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013642:	1c51      	adds	r1, r2, #1
 8013644:	9115      	str	r1, [sp, #84]	; 0x54
 8013646:	7852      	ldrb	r2, [r2, #1]
 8013648:	4618      	mov	r0, r3
 801364a:	e7c9      	b.n	80135e0 <_strtod_l+0x1e0>
 801364c:	4658      	mov	r0, fp
 801364e:	e7d2      	b.n	80135f6 <_strtod_l+0x1f6>
 8013650:	2b08      	cmp	r3, #8
 8013652:	f103 0301 	add.w	r3, r3, #1
 8013656:	dc03      	bgt.n	8013660 <_strtod_l+0x260>
 8013658:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801365a:	434f      	muls	r7, r1
 801365c:	9709      	str	r7, [sp, #36]	; 0x24
 801365e:	e7e1      	b.n	8013624 <_strtod_l+0x224>
 8013660:	2b10      	cmp	r3, #16
 8013662:	bfd8      	it	le
 8013664:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013668:	e7dc      	b.n	8013624 <_strtod_l+0x224>
 801366a:	2e10      	cmp	r6, #16
 801366c:	bfdc      	itt	le
 801366e:	230a      	movle	r3, #10
 8013670:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8013674:	e7e3      	b.n	801363e <_strtod_l+0x23e>
 8013676:	2300      	movs	r3, #0
 8013678:	9305      	str	r3, [sp, #20]
 801367a:	2301      	movs	r3, #1
 801367c:	e780      	b.n	8013580 <_strtod_l+0x180>
 801367e:	f04f 0c00 	mov.w	ip, #0
 8013682:	1caa      	adds	r2, r5, #2
 8013684:	9215      	str	r2, [sp, #84]	; 0x54
 8013686:	78aa      	ldrb	r2, [r5, #2]
 8013688:	e788      	b.n	801359c <_strtod_l+0x19c>
 801368a:	f04f 0c01 	mov.w	ip, #1
 801368e:	e7f8      	b.n	8013682 <_strtod_l+0x282>
 8013690:	0801ae94 	.word	0x0801ae94
 8013694:	0801ae90 	.word	0x0801ae90
 8013698:	7ff00000 	.word	0x7ff00000
 801369c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801369e:	1c51      	adds	r1, r2, #1
 80136a0:	9115      	str	r1, [sp, #84]	; 0x54
 80136a2:	7852      	ldrb	r2, [r2, #1]
 80136a4:	2a30      	cmp	r2, #48	; 0x30
 80136a6:	d0f9      	beq.n	801369c <_strtod_l+0x29c>
 80136a8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80136ac:	2908      	cmp	r1, #8
 80136ae:	f63f af7a 	bhi.w	80135a6 <_strtod_l+0x1a6>
 80136b2:	3a30      	subs	r2, #48	; 0x30
 80136b4:	9208      	str	r2, [sp, #32]
 80136b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80136b8:	920c      	str	r2, [sp, #48]	; 0x30
 80136ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80136bc:	1c57      	adds	r7, r2, #1
 80136be:	9715      	str	r7, [sp, #84]	; 0x54
 80136c0:	7852      	ldrb	r2, [r2, #1]
 80136c2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80136c6:	f1be 0f09 	cmp.w	lr, #9
 80136ca:	d938      	bls.n	801373e <_strtod_l+0x33e>
 80136cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80136ce:	1a7f      	subs	r7, r7, r1
 80136d0:	2f08      	cmp	r7, #8
 80136d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80136d6:	dc03      	bgt.n	80136e0 <_strtod_l+0x2e0>
 80136d8:	9908      	ldr	r1, [sp, #32]
 80136da:	428f      	cmp	r7, r1
 80136dc:	bfa8      	it	ge
 80136de:	460f      	movge	r7, r1
 80136e0:	f1bc 0f00 	cmp.w	ip, #0
 80136e4:	d000      	beq.n	80136e8 <_strtod_l+0x2e8>
 80136e6:	427f      	negs	r7, r7
 80136e8:	2e00      	cmp	r6, #0
 80136ea:	d14f      	bne.n	801378c <_strtod_l+0x38c>
 80136ec:	9904      	ldr	r1, [sp, #16]
 80136ee:	4301      	orrs	r1, r0
 80136f0:	f47f aec1 	bne.w	8013476 <_strtod_l+0x76>
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	f47f aedb 	bne.w	80134b0 <_strtod_l+0xb0>
 80136fa:	2a69      	cmp	r2, #105	; 0x69
 80136fc:	d029      	beq.n	8013752 <_strtod_l+0x352>
 80136fe:	dc26      	bgt.n	801374e <_strtod_l+0x34e>
 8013700:	2a49      	cmp	r2, #73	; 0x49
 8013702:	d026      	beq.n	8013752 <_strtod_l+0x352>
 8013704:	2a4e      	cmp	r2, #78	; 0x4e
 8013706:	f47f aed3 	bne.w	80134b0 <_strtod_l+0xb0>
 801370a:	499b      	ldr	r1, [pc, #620]	; (8013978 <_strtod_l+0x578>)
 801370c:	a815      	add	r0, sp, #84	; 0x54
 801370e:	f002 fff5 	bl	80166fc <__match>
 8013712:	2800      	cmp	r0, #0
 8013714:	f43f aecc 	beq.w	80134b0 <_strtod_l+0xb0>
 8013718:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	2b28      	cmp	r3, #40	; 0x28
 801371e:	d12f      	bne.n	8013780 <_strtod_l+0x380>
 8013720:	4996      	ldr	r1, [pc, #600]	; (801397c <_strtod_l+0x57c>)
 8013722:	aa18      	add	r2, sp, #96	; 0x60
 8013724:	a815      	add	r0, sp, #84	; 0x54
 8013726:	f002 fffd 	bl	8016724 <__hexnan>
 801372a:	2805      	cmp	r0, #5
 801372c:	d128      	bne.n	8013780 <_strtod_l+0x380>
 801372e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013730:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013734:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013738:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801373c:	e69b      	b.n	8013476 <_strtod_l+0x76>
 801373e:	9f08      	ldr	r7, [sp, #32]
 8013740:	210a      	movs	r1, #10
 8013742:	fb01 2107 	mla	r1, r1, r7, r2
 8013746:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801374a:	9208      	str	r2, [sp, #32]
 801374c:	e7b5      	b.n	80136ba <_strtod_l+0x2ba>
 801374e:	2a6e      	cmp	r2, #110	; 0x6e
 8013750:	e7d9      	b.n	8013706 <_strtod_l+0x306>
 8013752:	498b      	ldr	r1, [pc, #556]	; (8013980 <_strtod_l+0x580>)
 8013754:	a815      	add	r0, sp, #84	; 0x54
 8013756:	f002 ffd1 	bl	80166fc <__match>
 801375a:	2800      	cmp	r0, #0
 801375c:	f43f aea8 	beq.w	80134b0 <_strtod_l+0xb0>
 8013760:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013762:	4988      	ldr	r1, [pc, #544]	; (8013984 <_strtod_l+0x584>)
 8013764:	3b01      	subs	r3, #1
 8013766:	a815      	add	r0, sp, #84	; 0x54
 8013768:	9315      	str	r3, [sp, #84]	; 0x54
 801376a:	f002 ffc7 	bl	80166fc <__match>
 801376e:	b910      	cbnz	r0, 8013776 <_strtod_l+0x376>
 8013770:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013772:	3301      	adds	r3, #1
 8013774:	9315      	str	r3, [sp, #84]	; 0x54
 8013776:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8013994 <_strtod_l+0x594>
 801377a:	f04f 0800 	mov.w	r8, #0
 801377e:	e67a      	b.n	8013476 <_strtod_l+0x76>
 8013780:	4881      	ldr	r0, [pc, #516]	; (8013988 <_strtod_l+0x588>)
 8013782:	f001 fe21 	bl	80153c8 <nan>
 8013786:	ec59 8b10 	vmov	r8, r9, d0
 801378a:	e674      	b.n	8013476 <_strtod_l+0x76>
 801378c:	9b05      	ldr	r3, [sp, #20]
 801378e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013790:	1afb      	subs	r3, r7, r3
 8013792:	f1bb 0f00 	cmp.w	fp, #0
 8013796:	bf08      	it	eq
 8013798:	46b3      	moveq	fp, r6
 801379a:	2e10      	cmp	r6, #16
 801379c:	9308      	str	r3, [sp, #32]
 801379e:	4635      	mov	r5, r6
 80137a0:	bfa8      	it	ge
 80137a2:	2510      	movge	r5, #16
 80137a4:	f7ec feae 	bl	8000504 <__aeabi_ui2d>
 80137a8:	2e09      	cmp	r6, #9
 80137aa:	4680      	mov	r8, r0
 80137ac:	4689      	mov	r9, r1
 80137ae:	dd13      	ble.n	80137d8 <_strtod_l+0x3d8>
 80137b0:	4b76      	ldr	r3, [pc, #472]	; (801398c <_strtod_l+0x58c>)
 80137b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80137b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80137ba:	f7ec ff1d 	bl	80005f8 <__aeabi_dmul>
 80137be:	4680      	mov	r8, r0
 80137c0:	4650      	mov	r0, sl
 80137c2:	4689      	mov	r9, r1
 80137c4:	f7ec fe9e 	bl	8000504 <__aeabi_ui2d>
 80137c8:	4602      	mov	r2, r0
 80137ca:	460b      	mov	r3, r1
 80137cc:	4640      	mov	r0, r8
 80137ce:	4649      	mov	r1, r9
 80137d0:	f7ec fd5c 	bl	800028c <__adddf3>
 80137d4:	4680      	mov	r8, r0
 80137d6:	4689      	mov	r9, r1
 80137d8:	2e0f      	cmp	r6, #15
 80137da:	dc38      	bgt.n	801384e <_strtod_l+0x44e>
 80137dc:	9b08      	ldr	r3, [sp, #32]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	f43f ae49 	beq.w	8013476 <_strtod_l+0x76>
 80137e4:	dd24      	ble.n	8013830 <_strtod_l+0x430>
 80137e6:	2b16      	cmp	r3, #22
 80137e8:	dc0b      	bgt.n	8013802 <_strtod_l+0x402>
 80137ea:	4968      	ldr	r1, [pc, #416]	; (801398c <_strtod_l+0x58c>)
 80137ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80137f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137f4:	4642      	mov	r2, r8
 80137f6:	464b      	mov	r3, r9
 80137f8:	f7ec fefe 	bl	80005f8 <__aeabi_dmul>
 80137fc:	4680      	mov	r8, r0
 80137fe:	4689      	mov	r9, r1
 8013800:	e639      	b.n	8013476 <_strtod_l+0x76>
 8013802:	9a08      	ldr	r2, [sp, #32]
 8013804:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8013808:	4293      	cmp	r3, r2
 801380a:	db20      	blt.n	801384e <_strtod_l+0x44e>
 801380c:	4c5f      	ldr	r4, [pc, #380]	; (801398c <_strtod_l+0x58c>)
 801380e:	f1c6 060f 	rsb	r6, r6, #15
 8013812:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8013816:	4642      	mov	r2, r8
 8013818:	464b      	mov	r3, r9
 801381a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801381e:	f7ec feeb 	bl	80005f8 <__aeabi_dmul>
 8013822:	9b08      	ldr	r3, [sp, #32]
 8013824:	1b9e      	subs	r6, r3, r6
 8013826:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801382a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801382e:	e7e3      	b.n	80137f8 <_strtod_l+0x3f8>
 8013830:	9b08      	ldr	r3, [sp, #32]
 8013832:	3316      	adds	r3, #22
 8013834:	db0b      	blt.n	801384e <_strtod_l+0x44e>
 8013836:	9b05      	ldr	r3, [sp, #20]
 8013838:	1bdf      	subs	r7, r3, r7
 801383a:	4b54      	ldr	r3, [pc, #336]	; (801398c <_strtod_l+0x58c>)
 801383c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013844:	4640      	mov	r0, r8
 8013846:	4649      	mov	r1, r9
 8013848:	f7ed f800 	bl	800084c <__aeabi_ddiv>
 801384c:	e7d6      	b.n	80137fc <_strtod_l+0x3fc>
 801384e:	9b08      	ldr	r3, [sp, #32]
 8013850:	1b75      	subs	r5, r6, r5
 8013852:	441d      	add	r5, r3
 8013854:	2d00      	cmp	r5, #0
 8013856:	dd70      	ble.n	801393a <_strtod_l+0x53a>
 8013858:	f015 030f 	ands.w	r3, r5, #15
 801385c:	d00a      	beq.n	8013874 <_strtod_l+0x474>
 801385e:	494b      	ldr	r1, [pc, #300]	; (801398c <_strtod_l+0x58c>)
 8013860:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013864:	4642      	mov	r2, r8
 8013866:	464b      	mov	r3, r9
 8013868:	e9d1 0100 	ldrd	r0, r1, [r1]
 801386c:	f7ec fec4 	bl	80005f8 <__aeabi_dmul>
 8013870:	4680      	mov	r8, r0
 8013872:	4689      	mov	r9, r1
 8013874:	f035 050f 	bics.w	r5, r5, #15
 8013878:	d04d      	beq.n	8013916 <_strtod_l+0x516>
 801387a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801387e:	dd22      	ble.n	80138c6 <_strtod_l+0x4c6>
 8013880:	2500      	movs	r5, #0
 8013882:	46ab      	mov	fp, r5
 8013884:	9509      	str	r5, [sp, #36]	; 0x24
 8013886:	9505      	str	r5, [sp, #20]
 8013888:	2322      	movs	r3, #34	; 0x22
 801388a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013994 <_strtod_l+0x594>
 801388e:	6023      	str	r3, [r4, #0]
 8013890:	f04f 0800 	mov.w	r8, #0
 8013894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013896:	2b00      	cmp	r3, #0
 8013898:	f43f aded 	beq.w	8013476 <_strtod_l+0x76>
 801389c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801389e:	4620      	mov	r0, r4
 80138a0:	f003 f82e 	bl	8016900 <_Bfree>
 80138a4:	9905      	ldr	r1, [sp, #20]
 80138a6:	4620      	mov	r0, r4
 80138a8:	f003 f82a 	bl	8016900 <_Bfree>
 80138ac:	4659      	mov	r1, fp
 80138ae:	4620      	mov	r0, r4
 80138b0:	f003 f826 	bl	8016900 <_Bfree>
 80138b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80138b6:	4620      	mov	r0, r4
 80138b8:	f003 f822 	bl	8016900 <_Bfree>
 80138bc:	4629      	mov	r1, r5
 80138be:	4620      	mov	r0, r4
 80138c0:	f003 f81e 	bl	8016900 <_Bfree>
 80138c4:	e5d7      	b.n	8013476 <_strtod_l+0x76>
 80138c6:	4b32      	ldr	r3, [pc, #200]	; (8013990 <_strtod_l+0x590>)
 80138c8:	9304      	str	r3, [sp, #16]
 80138ca:	2300      	movs	r3, #0
 80138cc:	112d      	asrs	r5, r5, #4
 80138ce:	4640      	mov	r0, r8
 80138d0:	4649      	mov	r1, r9
 80138d2:	469a      	mov	sl, r3
 80138d4:	2d01      	cmp	r5, #1
 80138d6:	dc21      	bgt.n	801391c <_strtod_l+0x51c>
 80138d8:	b10b      	cbz	r3, 80138de <_strtod_l+0x4de>
 80138da:	4680      	mov	r8, r0
 80138dc:	4689      	mov	r9, r1
 80138de:	492c      	ldr	r1, [pc, #176]	; (8013990 <_strtod_l+0x590>)
 80138e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80138e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80138e8:	4642      	mov	r2, r8
 80138ea:	464b      	mov	r3, r9
 80138ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80138f0:	f7ec fe82 	bl	80005f8 <__aeabi_dmul>
 80138f4:	4b27      	ldr	r3, [pc, #156]	; (8013994 <_strtod_l+0x594>)
 80138f6:	460a      	mov	r2, r1
 80138f8:	400b      	ands	r3, r1
 80138fa:	4927      	ldr	r1, [pc, #156]	; (8013998 <_strtod_l+0x598>)
 80138fc:	428b      	cmp	r3, r1
 80138fe:	4680      	mov	r8, r0
 8013900:	d8be      	bhi.n	8013880 <_strtod_l+0x480>
 8013902:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013906:	428b      	cmp	r3, r1
 8013908:	bf86      	itte	hi
 801390a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801399c <_strtod_l+0x59c>
 801390e:	f04f 38ff 	movhi.w	r8, #4294967295
 8013912:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8013916:	2300      	movs	r3, #0
 8013918:	9304      	str	r3, [sp, #16]
 801391a:	e07b      	b.n	8013a14 <_strtod_l+0x614>
 801391c:	07ea      	lsls	r2, r5, #31
 801391e:	d505      	bpl.n	801392c <_strtod_l+0x52c>
 8013920:	9b04      	ldr	r3, [sp, #16]
 8013922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013926:	f7ec fe67 	bl	80005f8 <__aeabi_dmul>
 801392a:	2301      	movs	r3, #1
 801392c:	9a04      	ldr	r2, [sp, #16]
 801392e:	3208      	adds	r2, #8
 8013930:	f10a 0a01 	add.w	sl, sl, #1
 8013934:	106d      	asrs	r5, r5, #1
 8013936:	9204      	str	r2, [sp, #16]
 8013938:	e7cc      	b.n	80138d4 <_strtod_l+0x4d4>
 801393a:	d0ec      	beq.n	8013916 <_strtod_l+0x516>
 801393c:	426d      	negs	r5, r5
 801393e:	f015 020f 	ands.w	r2, r5, #15
 8013942:	d00a      	beq.n	801395a <_strtod_l+0x55a>
 8013944:	4b11      	ldr	r3, [pc, #68]	; (801398c <_strtod_l+0x58c>)
 8013946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801394a:	4640      	mov	r0, r8
 801394c:	4649      	mov	r1, r9
 801394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013952:	f7ec ff7b 	bl	800084c <__aeabi_ddiv>
 8013956:	4680      	mov	r8, r0
 8013958:	4689      	mov	r9, r1
 801395a:	112d      	asrs	r5, r5, #4
 801395c:	d0db      	beq.n	8013916 <_strtod_l+0x516>
 801395e:	2d1f      	cmp	r5, #31
 8013960:	dd1e      	ble.n	80139a0 <_strtod_l+0x5a0>
 8013962:	2500      	movs	r5, #0
 8013964:	46ab      	mov	fp, r5
 8013966:	9509      	str	r5, [sp, #36]	; 0x24
 8013968:	9505      	str	r5, [sp, #20]
 801396a:	2322      	movs	r3, #34	; 0x22
 801396c:	f04f 0800 	mov.w	r8, #0
 8013970:	f04f 0900 	mov.w	r9, #0
 8013974:	6023      	str	r3, [r4, #0]
 8013976:	e78d      	b.n	8013894 <_strtod_l+0x494>
 8013978:	0801aff6 	.word	0x0801aff6
 801397c:	0801aea8 	.word	0x0801aea8
 8013980:	0801afee 	.word	0x0801afee
 8013984:	0801b0da 	.word	0x0801b0da
 8013988:	0801b0d6 	.word	0x0801b0d6
 801398c:	0801b230 	.word	0x0801b230
 8013990:	0801b208 	.word	0x0801b208
 8013994:	7ff00000 	.word	0x7ff00000
 8013998:	7ca00000 	.word	0x7ca00000
 801399c:	7fefffff 	.word	0x7fefffff
 80139a0:	f015 0310 	ands.w	r3, r5, #16
 80139a4:	bf18      	it	ne
 80139a6:	236a      	movne	r3, #106	; 0x6a
 80139a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8013d4c <_strtod_l+0x94c>
 80139ac:	9304      	str	r3, [sp, #16]
 80139ae:	4640      	mov	r0, r8
 80139b0:	4649      	mov	r1, r9
 80139b2:	2300      	movs	r3, #0
 80139b4:	07ea      	lsls	r2, r5, #31
 80139b6:	d504      	bpl.n	80139c2 <_strtod_l+0x5c2>
 80139b8:	e9da 2300 	ldrd	r2, r3, [sl]
 80139bc:	f7ec fe1c 	bl	80005f8 <__aeabi_dmul>
 80139c0:	2301      	movs	r3, #1
 80139c2:	106d      	asrs	r5, r5, #1
 80139c4:	f10a 0a08 	add.w	sl, sl, #8
 80139c8:	d1f4      	bne.n	80139b4 <_strtod_l+0x5b4>
 80139ca:	b10b      	cbz	r3, 80139d0 <_strtod_l+0x5d0>
 80139cc:	4680      	mov	r8, r0
 80139ce:	4689      	mov	r9, r1
 80139d0:	9b04      	ldr	r3, [sp, #16]
 80139d2:	b1bb      	cbz	r3, 8013a04 <_strtod_l+0x604>
 80139d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80139d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80139dc:	2b00      	cmp	r3, #0
 80139de:	4649      	mov	r1, r9
 80139e0:	dd10      	ble.n	8013a04 <_strtod_l+0x604>
 80139e2:	2b1f      	cmp	r3, #31
 80139e4:	f340 811e 	ble.w	8013c24 <_strtod_l+0x824>
 80139e8:	2b34      	cmp	r3, #52	; 0x34
 80139ea:	bfde      	ittt	le
 80139ec:	f04f 33ff 	movle.w	r3, #4294967295
 80139f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80139f4:	4093      	lslle	r3, r2
 80139f6:	f04f 0800 	mov.w	r8, #0
 80139fa:	bfcc      	ite	gt
 80139fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013a00:	ea03 0901 	andle.w	r9, r3, r1
 8013a04:	2200      	movs	r2, #0
 8013a06:	2300      	movs	r3, #0
 8013a08:	4640      	mov	r0, r8
 8013a0a:	4649      	mov	r1, r9
 8013a0c:	f7ed f85c 	bl	8000ac8 <__aeabi_dcmpeq>
 8013a10:	2800      	cmp	r0, #0
 8013a12:	d1a6      	bne.n	8013962 <_strtod_l+0x562>
 8013a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a16:	9300      	str	r3, [sp, #0]
 8013a18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013a1a:	4633      	mov	r3, r6
 8013a1c:	465a      	mov	r2, fp
 8013a1e:	4620      	mov	r0, r4
 8013a20:	f002 ffd6 	bl	80169d0 <__s2b>
 8013a24:	9009      	str	r0, [sp, #36]	; 0x24
 8013a26:	2800      	cmp	r0, #0
 8013a28:	f43f af2a 	beq.w	8013880 <_strtod_l+0x480>
 8013a2c:	9a08      	ldr	r2, [sp, #32]
 8013a2e:	9b05      	ldr	r3, [sp, #20]
 8013a30:	2a00      	cmp	r2, #0
 8013a32:	eba3 0307 	sub.w	r3, r3, r7
 8013a36:	bfa8      	it	ge
 8013a38:	2300      	movge	r3, #0
 8013a3a:	930c      	str	r3, [sp, #48]	; 0x30
 8013a3c:	2500      	movs	r5, #0
 8013a3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013a42:	9312      	str	r3, [sp, #72]	; 0x48
 8013a44:	46ab      	mov	fp, r5
 8013a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a48:	4620      	mov	r0, r4
 8013a4a:	6859      	ldr	r1, [r3, #4]
 8013a4c:	f002 ff18 	bl	8016880 <_Balloc>
 8013a50:	9005      	str	r0, [sp, #20]
 8013a52:	2800      	cmp	r0, #0
 8013a54:	f43f af18 	beq.w	8013888 <_strtod_l+0x488>
 8013a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a5a:	691a      	ldr	r2, [r3, #16]
 8013a5c:	3202      	adds	r2, #2
 8013a5e:	f103 010c 	add.w	r1, r3, #12
 8013a62:	0092      	lsls	r2, r2, #2
 8013a64:	300c      	adds	r0, #12
 8013a66:	f001 fca0 	bl	80153aa <memcpy>
 8013a6a:	ec49 8b10 	vmov	d0, r8, r9
 8013a6e:	aa18      	add	r2, sp, #96	; 0x60
 8013a70:	a917      	add	r1, sp, #92	; 0x5c
 8013a72:	4620      	mov	r0, r4
 8013a74:	f003 fae0 	bl	8017038 <__d2b>
 8013a78:	ec49 8b18 	vmov	d8, r8, r9
 8013a7c:	9016      	str	r0, [sp, #88]	; 0x58
 8013a7e:	2800      	cmp	r0, #0
 8013a80:	f43f af02 	beq.w	8013888 <_strtod_l+0x488>
 8013a84:	2101      	movs	r1, #1
 8013a86:	4620      	mov	r0, r4
 8013a88:	f003 f83a 	bl	8016b00 <__i2b>
 8013a8c:	4683      	mov	fp, r0
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	f43f aefa 	beq.w	8013888 <_strtod_l+0x488>
 8013a94:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013a96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013a98:	2e00      	cmp	r6, #0
 8013a9a:	bfab      	itete	ge
 8013a9c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8013a9e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013aa0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013aa2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8013aa6:	bfac      	ite	ge
 8013aa8:	eb06 0a03 	addge.w	sl, r6, r3
 8013aac:	1b9f      	sublt	r7, r3, r6
 8013aae:	9b04      	ldr	r3, [sp, #16]
 8013ab0:	1af6      	subs	r6, r6, r3
 8013ab2:	4416      	add	r6, r2
 8013ab4:	4ba0      	ldr	r3, [pc, #640]	; (8013d38 <_strtod_l+0x938>)
 8013ab6:	3e01      	subs	r6, #1
 8013ab8:	429e      	cmp	r6, r3
 8013aba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013abe:	f280 80c4 	bge.w	8013c4a <_strtod_l+0x84a>
 8013ac2:	1b9b      	subs	r3, r3, r6
 8013ac4:	2b1f      	cmp	r3, #31
 8013ac6:	eba2 0203 	sub.w	r2, r2, r3
 8013aca:	f04f 0101 	mov.w	r1, #1
 8013ace:	f300 80b0 	bgt.w	8013c32 <_strtod_l+0x832>
 8013ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8013ad6:	930e      	str	r3, [sp, #56]	; 0x38
 8013ad8:	2300      	movs	r3, #0
 8013ada:	930d      	str	r3, [sp, #52]	; 0x34
 8013adc:	eb0a 0602 	add.w	r6, sl, r2
 8013ae0:	9b04      	ldr	r3, [sp, #16]
 8013ae2:	45b2      	cmp	sl, r6
 8013ae4:	4417      	add	r7, r2
 8013ae6:	441f      	add	r7, r3
 8013ae8:	4653      	mov	r3, sl
 8013aea:	bfa8      	it	ge
 8013aec:	4633      	movge	r3, r6
 8013aee:	42bb      	cmp	r3, r7
 8013af0:	bfa8      	it	ge
 8013af2:	463b      	movge	r3, r7
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	bfc2      	ittt	gt
 8013af8:	1af6      	subgt	r6, r6, r3
 8013afa:	1aff      	subgt	r7, r7, r3
 8013afc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8013b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	dd17      	ble.n	8013b36 <_strtod_l+0x736>
 8013b06:	4659      	mov	r1, fp
 8013b08:	461a      	mov	r2, r3
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	f003 f8b8 	bl	8016c80 <__pow5mult>
 8013b10:	4683      	mov	fp, r0
 8013b12:	2800      	cmp	r0, #0
 8013b14:	f43f aeb8 	beq.w	8013888 <_strtod_l+0x488>
 8013b18:	4601      	mov	r1, r0
 8013b1a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	f003 f805 	bl	8016b2c <__multiply>
 8013b22:	900b      	str	r0, [sp, #44]	; 0x2c
 8013b24:	2800      	cmp	r0, #0
 8013b26:	f43f aeaf 	beq.w	8013888 <_strtod_l+0x488>
 8013b2a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013b2c:	4620      	mov	r0, r4
 8013b2e:	f002 fee7 	bl	8016900 <_Bfree>
 8013b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b34:	9316      	str	r3, [sp, #88]	; 0x58
 8013b36:	2e00      	cmp	r6, #0
 8013b38:	f300 808c 	bgt.w	8013c54 <_strtod_l+0x854>
 8013b3c:	9b08      	ldr	r3, [sp, #32]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	dd08      	ble.n	8013b54 <_strtod_l+0x754>
 8013b42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b44:	9905      	ldr	r1, [sp, #20]
 8013b46:	4620      	mov	r0, r4
 8013b48:	f003 f89a 	bl	8016c80 <__pow5mult>
 8013b4c:	9005      	str	r0, [sp, #20]
 8013b4e:	2800      	cmp	r0, #0
 8013b50:	f43f ae9a 	beq.w	8013888 <_strtod_l+0x488>
 8013b54:	2f00      	cmp	r7, #0
 8013b56:	dd08      	ble.n	8013b6a <_strtod_l+0x76a>
 8013b58:	9905      	ldr	r1, [sp, #20]
 8013b5a:	463a      	mov	r2, r7
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	f003 f8e9 	bl	8016d34 <__lshift>
 8013b62:	9005      	str	r0, [sp, #20]
 8013b64:	2800      	cmp	r0, #0
 8013b66:	f43f ae8f 	beq.w	8013888 <_strtod_l+0x488>
 8013b6a:	f1ba 0f00 	cmp.w	sl, #0
 8013b6e:	dd08      	ble.n	8013b82 <_strtod_l+0x782>
 8013b70:	4659      	mov	r1, fp
 8013b72:	4652      	mov	r2, sl
 8013b74:	4620      	mov	r0, r4
 8013b76:	f003 f8dd 	bl	8016d34 <__lshift>
 8013b7a:	4683      	mov	fp, r0
 8013b7c:	2800      	cmp	r0, #0
 8013b7e:	f43f ae83 	beq.w	8013888 <_strtod_l+0x488>
 8013b82:	9a05      	ldr	r2, [sp, #20]
 8013b84:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013b86:	4620      	mov	r0, r4
 8013b88:	f003 f95c 	bl	8016e44 <__mdiff>
 8013b8c:	4605      	mov	r5, r0
 8013b8e:	2800      	cmp	r0, #0
 8013b90:	f43f ae7a 	beq.w	8013888 <_strtod_l+0x488>
 8013b94:	68c3      	ldr	r3, [r0, #12]
 8013b96:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b98:	2300      	movs	r3, #0
 8013b9a:	60c3      	str	r3, [r0, #12]
 8013b9c:	4659      	mov	r1, fp
 8013b9e:	f003 f935 	bl	8016e0c <__mcmp>
 8013ba2:	2800      	cmp	r0, #0
 8013ba4:	da60      	bge.n	8013c68 <_strtod_l+0x868>
 8013ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ba8:	ea53 0308 	orrs.w	r3, r3, r8
 8013bac:	f040 8084 	bne.w	8013cb8 <_strtod_l+0x8b8>
 8013bb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d17f      	bne.n	8013cb8 <_strtod_l+0x8b8>
 8013bb8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013bbc:	0d1b      	lsrs	r3, r3, #20
 8013bbe:	051b      	lsls	r3, r3, #20
 8013bc0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013bc4:	d978      	bls.n	8013cb8 <_strtod_l+0x8b8>
 8013bc6:	696b      	ldr	r3, [r5, #20]
 8013bc8:	b913      	cbnz	r3, 8013bd0 <_strtod_l+0x7d0>
 8013bca:	692b      	ldr	r3, [r5, #16]
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	dd73      	ble.n	8013cb8 <_strtod_l+0x8b8>
 8013bd0:	4629      	mov	r1, r5
 8013bd2:	2201      	movs	r2, #1
 8013bd4:	4620      	mov	r0, r4
 8013bd6:	f003 f8ad 	bl	8016d34 <__lshift>
 8013bda:	4659      	mov	r1, fp
 8013bdc:	4605      	mov	r5, r0
 8013bde:	f003 f915 	bl	8016e0c <__mcmp>
 8013be2:	2800      	cmp	r0, #0
 8013be4:	dd68      	ble.n	8013cb8 <_strtod_l+0x8b8>
 8013be6:	9904      	ldr	r1, [sp, #16]
 8013be8:	4a54      	ldr	r2, [pc, #336]	; (8013d3c <_strtod_l+0x93c>)
 8013bea:	464b      	mov	r3, r9
 8013bec:	2900      	cmp	r1, #0
 8013bee:	f000 8084 	beq.w	8013cfa <_strtod_l+0x8fa>
 8013bf2:	ea02 0109 	and.w	r1, r2, r9
 8013bf6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013bfa:	dc7e      	bgt.n	8013cfa <_strtod_l+0x8fa>
 8013bfc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013c00:	f77f aeb3 	ble.w	801396a <_strtod_l+0x56a>
 8013c04:	4b4e      	ldr	r3, [pc, #312]	; (8013d40 <_strtod_l+0x940>)
 8013c06:	4640      	mov	r0, r8
 8013c08:	4649      	mov	r1, r9
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	f7ec fcf4 	bl	80005f8 <__aeabi_dmul>
 8013c10:	4b4a      	ldr	r3, [pc, #296]	; (8013d3c <_strtod_l+0x93c>)
 8013c12:	400b      	ands	r3, r1
 8013c14:	4680      	mov	r8, r0
 8013c16:	4689      	mov	r9, r1
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	f47f ae3f 	bne.w	801389c <_strtod_l+0x49c>
 8013c1e:	2322      	movs	r3, #34	; 0x22
 8013c20:	6023      	str	r3, [r4, #0]
 8013c22:	e63b      	b.n	801389c <_strtod_l+0x49c>
 8013c24:	f04f 32ff 	mov.w	r2, #4294967295
 8013c28:	fa02 f303 	lsl.w	r3, r2, r3
 8013c2c:	ea03 0808 	and.w	r8, r3, r8
 8013c30:	e6e8      	b.n	8013a04 <_strtod_l+0x604>
 8013c32:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013c36:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013c3a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013c3e:	36e2      	adds	r6, #226	; 0xe2
 8013c40:	fa01 f306 	lsl.w	r3, r1, r6
 8013c44:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8013c48:	e748      	b.n	8013adc <_strtod_l+0x6dc>
 8013c4a:	2100      	movs	r1, #0
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8013c52:	e743      	b.n	8013adc <_strtod_l+0x6dc>
 8013c54:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013c56:	4632      	mov	r2, r6
 8013c58:	4620      	mov	r0, r4
 8013c5a:	f003 f86b 	bl	8016d34 <__lshift>
 8013c5e:	9016      	str	r0, [sp, #88]	; 0x58
 8013c60:	2800      	cmp	r0, #0
 8013c62:	f47f af6b 	bne.w	8013b3c <_strtod_l+0x73c>
 8013c66:	e60f      	b.n	8013888 <_strtod_l+0x488>
 8013c68:	46ca      	mov	sl, r9
 8013c6a:	d171      	bne.n	8013d50 <_strtod_l+0x950>
 8013c6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013c6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013c72:	b352      	cbz	r2, 8013cca <_strtod_l+0x8ca>
 8013c74:	4a33      	ldr	r2, [pc, #204]	; (8013d44 <_strtod_l+0x944>)
 8013c76:	4293      	cmp	r3, r2
 8013c78:	d12a      	bne.n	8013cd0 <_strtod_l+0x8d0>
 8013c7a:	9b04      	ldr	r3, [sp, #16]
 8013c7c:	4641      	mov	r1, r8
 8013c7e:	b1fb      	cbz	r3, 8013cc0 <_strtod_l+0x8c0>
 8013c80:	4b2e      	ldr	r3, [pc, #184]	; (8013d3c <_strtod_l+0x93c>)
 8013c82:	ea09 0303 	and.w	r3, r9, r3
 8013c86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c8e:	d81a      	bhi.n	8013cc6 <_strtod_l+0x8c6>
 8013c90:	0d1b      	lsrs	r3, r3, #20
 8013c92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013c96:	fa02 f303 	lsl.w	r3, r2, r3
 8013c9a:	4299      	cmp	r1, r3
 8013c9c:	d118      	bne.n	8013cd0 <_strtod_l+0x8d0>
 8013c9e:	4b2a      	ldr	r3, [pc, #168]	; (8013d48 <_strtod_l+0x948>)
 8013ca0:	459a      	cmp	sl, r3
 8013ca2:	d102      	bne.n	8013caa <_strtod_l+0x8aa>
 8013ca4:	3101      	adds	r1, #1
 8013ca6:	f43f adef 	beq.w	8013888 <_strtod_l+0x488>
 8013caa:	4b24      	ldr	r3, [pc, #144]	; (8013d3c <_strtod_l+0x93c>)
 8013cac:	ea0a 0303 	and.w	r3, sl, r3
 8013cb0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013cb4:	f04f 0800 	mov.w	r8, #0
 8013cb8:	9b04      	ldr	r3, [sp, #16]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d1a2      	bne.n	8013c04 <_strtod_l+0x804>
 8013cbe:	e5ed      	b.n	801389c <_strtod_l+0x49c>
 8013cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8013cc4:	e7e9      	b.n	8013c9a <_strtod_l+0x89a>
 8013cc6:	4613      	mov	r3, r2
 8013cc8:	e7e7      	b.n	8013c9a <_strtod_l+0x89a>
 8013cca:	ea53 0308 	orrs.w	r3, r3, r8
 8013cce:	d08a      	beq.n	8013be6 <_strtod_l+0x7e6>
 8013cd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013cd2:	b1e3      	cbz	r3, 8013d0e <_strtod_l+0x90e>
 8013cd4:	ea13 0f0a 	tst.w	r3, sl
 8013cd8:	d0ee      	beq.n	8013cb8 <_strtod_l+0x8b8>
 8013cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cdc:	9a04      	ldr	r2, [sp, #16]
 8013cde:	4640      	mov	r0, r8
 8013ce0:	4649      	mov	r1, r9
 8013ce2:	b1c3      	cbz	r3, 8013d16 <_strtod_l+0x916>
 8013ce4:	f7ff fb6e 	bl	80133c4 <sulp>
 8013ce8:	4602      	mov	r2, r0
 8013cea:	460b      	mov	r3, r1
 8013cec:	ec51 0b18 	vmov	r0, r1, d8
 8013cf0:	f7ec facc 	bl	800028c <__adddf3>
 8013cf4:	4680      	mov	r8, r0
 8013cf6:	4689      	mov	r9, r1
 8013cf8:	e7de      	b.n	8013cb8 <_strtod_l+0x8b8>
 8013cfa:	4013      	ands	r3, r2
 8013cfc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013d00:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013d04:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013d08:	f04f 38ff 	mov.w	r8, #4294967295
 8013d0c:	e7d4      	b.n	8013cb8 <_strtod_l+0x8b8>
 8013d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d10:	ea13 0f08 	tst.w	r3, r8
 8013d14:	e7e0      	b.n	8013cd8 <_strtod_l+0x8d8>
 8013d16:	f7ff fb55 	bl	80133c4 <sulp>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	460b      	mov	r3, r1
 8013d1e:	ec51 0b18 	vmov	r0, r1, d8
 8013d22:	f7ec fab1 	bl	8000288 <__aeabi_dsub>
 8013d26:	2200      	movs	r2, #0
 8013d28:	2300      	movs	r3, #0
 8013d2a:	4680      	mov	r8, r0
 8013d2c:	4689      	mov	r9, r1
 8013d2e:	f7ec fecb 	bl	8000ac8 <__aeabi_dcmpeq>
 8013d32:	2800      	cmp	r0, #0
 8013d34:	d0c0      	beq.n	8013cb8 <_strtod_l+0x8b8>
 8013d36:	e618      	b.n	801396a <_strtod_l+0x56a>
 8013d38:	fffffc02 	.word	0xfffffc02
 8013d3c:	7ff00000 	.word	0x7ff00000
 8013d40:	39500000 	.word	0x39500000
 8013d44:	000fffff 	.word	0x000fffff
 8013d48:	7fefffff 	.word	0x7fefffff
 8013d4c:	0801aec0 	.word	0x0801aec0
 8013d50:	4659      	mov	r1, fp
 8013d52:	4628      	mov	r0, r5
 8013d54:	f003 f9ca 	bl	80170ec <__ratio>
 8013d58:	ec57 6b10 	vmov	r6, r7, d0
 8013d5c:	ee10 0a10 	vmov	r0, s0
 8013d60:	2200      	movs	r2, #0
 8013d62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013d66:	4639      	mov	r1, r7
 8013d68:	f7ec fec2 	bl	8000af0 <__aeabi_dcmple>
 8013d6c:	2800      	cmp	r0, #0
 8013d6e:	d071      	beq.n	8013e54 <_strtod_l+0xa54>
 8013d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d17c      	bne.n	8013e70 <_strtod_l+0xa70>
 8013d76:	f1b8 0f00 	cmp.w	r8, #0
 8013d7a:	d15a      	bne.n	8013e32 <_strtod_l+0xa32>
 8013d7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d15d      	bne.n	8013e40 <_strtod_l+0xa40>
 8013d84:	4b90      	ldr	r3, [pc, #576]	; (8013fc8 <_strtod_l+0xbc8>)
 8013d86:	2200      	movs	r2, #0
 8013d88:	4630      	mov	r0, r6
 8013d8a:	4639      	mov	r1, r7
 8013d8c:	f7ec fea6 	bl	8000adc <__aeabi_dcmplt>
 8013d90:	2800      	cmp	r0, #0
 8013d92:	d15c      	bne.n	8013e4e <_strtod_l+0xa4e>
 8013d94:	4630      	mov	r0, r6
 8013d96:	4639      	mov	r1, r7
 8013d98:	4b8c      	ldr	r3, [pc, #560]	; (8013fcc <_strtod_l+0xbcc>)
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	f7ec fc2c 	bl	80005f8 <__aeabi_dmul>
 8013da0:	4606      	mov	r6, r0
 8013da2:	460f      	mov	r7, r1
 8013da4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013da8:	9606      	str	r6, [sp, #24]
 8013daa:	9307      	str	r3, [sp, #28]
 8013dac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013db0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013db4:	4b86      	ldr	r3, [pc, #536]	; (8013fd0 <_strtod_l+0xbd0>)
 8013db6:	ea0a 0303 	and.w	r3, sl, r3
 8013dba:	930d      	str	r3, [sp, #52]	; 0x34
 8013dbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013dbe:	4b85      	ldr	r3, [pc, #532]	; (8013fd4 <_strtod_l+0xbd4>)
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	f040 8090 	bne.w	8013ee6 <_strtod_l+0xae6>
 8013dc6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013dca:	ec49 8b10 	vmov	d0, r8, r9
 8013dce:	f003 f8c3 	bl	8016f58 <__ulp>
 8013dd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013dd6:	ec51 0b10 	vmov	r0, r1, d0
 8013dda:	f7ec fc0d 	bl	80005f8 <__aeabi_dmul>
 8013dde:	4642      	mov	r2, r8
 8013de0:	464b      	mov	r3, r9
 8013de2:	f7ec fa53 	bl	800028c <__adddf3>
 8013de6:	460b      	mov	r3, r1
 8013de8:	4979      	ldr	r1, [pc, #484]	; (8013fd0 <_strtod_l+0xbd0>)
 8013dea:	4a7b      	ldr	r2, [pc, #492]	; (8013fd8 <_strtod_l+0xbd8>)
 8013dec:	4019      	ands	r1, r3
 8013dee:	4291      	cmp	r1, r2
 8013df0:	4680      	mov	r8, r0
 8013df2:	d944      	bls.n	8013e7e <_strtod_l+0xa7e>
 8013df4:	ee18 2a90 	vmov	r2, s17
 8013df8:	4b78      	ldr	r3, [pc, #480]	; (8013fdc <_strtod_l+0xbdc>)
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d104      	bne.n	8013e08 <_strtod_l+0xa08>
 8013dfe:	ee18 3a10 	vmov	r3, s16
 8013e02:	3301      	adds	r3, #1
 8013e04:	f43f ad40 	beq.w	8013888 <_strtod_l+0x488>
 8013e08:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8013fdc <_strtod_l+0xbdc>
 8013e0c:	f04f 38ff 	mov.w	r8, #4294967295
 8013e10:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013e12:	4620      	mov	r0, r4
 8013e14:	f002 fd74 	bl	8016900 <_Bfree>
 8013e18:	9905      	ldr	r1, [sp, #20]
 8013e1a:	4620      	mov	r0, r4
 8013e1c:	f002 fd70 	bl	8016900 <_Bfree>
 8013e20:	4659      	mov	r1, fp
 8013e22:	4620      	mov	r0, r4
 8013e24:	f002 fd6c 	bl	8016900 <_Bfree>
 8013e28:	4629      	mov	r1, r5
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	f002 fd68 	bl	8016900 <_Bfree>
 8013e30:	e609      	b.n	8013a46 <_strtod_l+0x646>
 8013e32:	f1b8 0f01 	cmp.w	r8, #1
 8013e36:	d103      	bne.n	8013e40 <_strtod_l+0xa40>
 8013e38:	f1b9 0f00 	cmp.w	r9, #0
 8013e3c:	f43f ad95 	beq.w	801396a <_strtod_l+0x56a>
 8013e40:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8013f98 <_strtod_l+0xb98>
 8013e44:	4f60      	ldr	r7, [pc, #384]	; (8013fc8 <_strtod_l+0xbc8>)
 8013e46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013e4a:	2600      	movs	r6, #0
 8013e4c:	e7ae      	b.n	8013dac <_strtod_l+0x9ac>
 8013e4e:	4f5f      	ldr	r7, [pc, #380]	; (8013fcc <_strtod_l+0xbcc>)
 8013e50:	2600      	movs	r6, #0
 8013e52:	e7a7      	b.n	8013da4 <_strtod_l+0x9a4>
 8013e54:	4b5d      	ldr	r3, [pc, #372]	; (8013fcc <_strtod_l+0xbcc>)
 8013e56:	4630      	mov	r0, r6
 8013e58:	4639      	mov	r1, r7
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	f7ec fbcc 	bl	80005f8 <__aeabi_dmul>
 8013e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e62:	4606      	mov	r6, r0
 8013e64:	460f      	mov	r7, r1
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d09c      	beq.n	8013da4 <_strtod_l+0x9a4>
 8013e6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013e6e:	e79d      	b.n	8013dac <_strtod_l+0x9ac>
 8013e70:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8013fa0 <_strtod_l+0xba0>
 8013e74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013e78:	ec57 6b17 	vmov	r6, r7, d7
 8013e7c:	e796      	b.n	8013dac <_strtod_l+0x9ac>
 8013e7e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013e82:	9b04      	ldr	r3, [sp, #16]
 8013e84:	46ca      	mov	sl, r9
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d1c2      	bne.n	8013e10 <_strtod_l+0xa10>
 8013e8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013e8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e90:	0d1b      	lsrs	r3, r3, #20
 8013e92:	051b      	lsls	r3, r3, #20
 8013e94:	429a      	cmp	r2, r3
 8013e96:	d1bb      	bne.n	8013e10 <_strtod_l+0xa10>
 8013e98:	4630      	mov	r0, r6
 8013e9a:	4639      	mov	r1, r7
 8013e9c:	f7ec ff0c 	bl	8000cb8 <__aeabi_d2lz>
 8013ea0:	f7ec fb7c 	bl	800059c <__aeabi_l2d>
 8013ea4:	4602      	mov	r2, r0
 8013ea6:	460b      	mov	r3, r1
 8013ea8:	4630      	mov	r0, r6
 8013eaa:	4639      	mov	r1, r7
 8013eac:	f7ec f9ec 	bl	8000288 <__aeabi_dsub>
 8013eb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013eb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013eb6:	ea43 0308 	orr.w	r3, r3, r8
 8013eba:	4313      	orrs	r3, r2
 8013ebc:	4606      	mov	r6, r0
 8013ebe:	460f      	mov	r7, r1
 8013ec0:	d054      	beq.n	8013f6c <_strtod_l+0xb6c>
 8013ec2:	a339      	add	r3, pc, #228	; (adr r3, 8013fa8 <_strtod_l+0xba8>)
 8013ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec8:	f7ec fe08 	bl	8000adc <__aeabi_dcmplt>
 8013ecc:	2800      	cmp	r0, #0
 8013ece:	f47f ace5 	bne.w	801389c <_strtod_l+0x49c>
 8013ed2:	a337      	add	r3, pc, #220	; (adr r3, 8013fb0 <_strtod_l+0xbb0>)
 8013ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed8:	4630      	mov	r0, r6
 8013eda:	4639      	mov	r1, r7
 8013edc:	f7ec fe1c 	bl	8000b18 <__aeabi_dcmpgt>
 8013ee0:	2800      	cmp	r0, #0
 8013ee2:	d095      	beq.n	8013e10 <_strtod_l+0xa10>
 8013ee4:	e4da      	b.n	801389c <_strtod_l+0x49c>
 8013ee6:	9b04      	ldr	r3, [sp, #16]
 8013ee8:	b333      	cbz	r3, 8013f38 <_strtod_l+0xb38>
 8013eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013eec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013ef0:	d822      	bhi.n	8013f38 <_strtod_l+0xb38>
 8013ef2:	a331      	add	r3, pc, #196	; (adr r3, 8013fb8 <_strtod_l+0xbb8>)
 8013ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ef8:	4630      	mov	r0, r6
 8013efa:	4639      	mov	r1, r7
 8013efc:	f7ec fdf8 	bl	8000af0 <__aeabi_dcmple>
 8013f00:	b1a0      	cbz	r0, 8013f2c <_strtod_l+0xb2c>
 8013f02:	4639      	mov	r1, r7
 8013f04:	4630      	mov	r0, r6
 8013f06:	f7ec fe4f 	bl	8000ba8 <__aeabi_d2uiz>
 8013f0a:	2801      	cmp	r0, #1
 8013f0c:	bf38      	it	cc
 8013f0e:	2001      	movcc	r0, #1
 8013f10:	f7ec faf8 	bl	8000504 <__aeabi_ui2d>
 8013f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f16:	4606      	mov	r6, r0
 8013f18:	460f      	mov	r7, r1
 8013f1a:	bb23      	cbnz	r3, 8013f66 <_strtod_l+0xb66>
 8013f1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f20:	9010      	str	r0, [sp, #64]	; 0x40
 8013f22:	9311      	str	r3, [sp, #68]	; 0x44
 8013f24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013f28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013f2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f30:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013f34:	1a9b      	subs	r3, r3, r2
 8013f36:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013f3c:	eeb0 0a48 	vmov.f32	s0, s16
 8013f40:	eef0 0a68 	vmov.f32	s1, s17
 8013f44:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013f48:	f003 f806 	bl	8016f58 <__ulp>
 8013f4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013f50:	ec53 2b10 	vmov	r2, r3, d0
 8013f54:	f7ec fb50 	bl	80005f8 <__aeabi_dmul>
 8013f58:	ec53 2b18 	vmov	r2, r3, d8
 8013f5c:	f7ec f996 	bl	800028c <__adddf3>
 8013f60:	4680      	mov	r8, r0
 8013f62:	4689      	mov	r9, r1
 8013f64:	e78d      	b.n	8013e82 <_strtod_l+0xa82>
 8013f66:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013f6a:	e7db      	b.n	8013f24 <_strtod_l+0xb24>
 8013f6c:	a314      	add	r3, pc, #80	; (adr r3, 8013fc0 <_strtod_l+0xbc0>)
 8013f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f72:	f7ec fdb3 	bl	8000adc <__aeabi_dcmplt>
 8013f76:	e7b3      	b.n	8013ee0 <_strtod_l+0xae0>
 8013f78:	2300      	movs	r3, #0
 8013f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8013f7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013f7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f80:	6013      	str	r3, [r2, #0]
 8013f82:	f7ff ba7c 	b.w	801347e <_strtod_l+0x7e>
 8013f86:	2a65      	cmp	r2, #101	; 0x65
 8013f88:	f43f ab75 	beq.w	8013676 <_strtod_l+0x276>
 8013f8c:	2a45      	cmp	r2, #69	; 0x45
 8013f8e:	f43f ab72 	beq.w	8013676 <_strtod_l+0x276>
 8013f92:	2301      	movs	r3, #1
 8013f94:	f7ff bbaa 	b.w	80136ec <_strtod_l+0x2ec>
 8013f98:	00000000 	.word	0x00000000
 8013f9c:	bff00000 	.word	0xbff00000
 8013fa0:	00000000 	.word	0x00000000
 8013fa4:	3ff00000 	.word	0x3ff00000
 8013fa8:	94a03595 	.word	0x94a03595
 8013fac:	3fdfffff 	.word	0x3fdfffff
 8013fb0:	35afe535 	.word	0x35afe535
 8013fb4:	3fe00000 	.word	0x3fe00000
 8013fb8:	ffc00000 	.word	0xffc00000
 8013fbc:	41dfffff 	.word	0x41dfffff
 8013fc0:	94a03595 	.word	0x94a03595
 8013fc4:	3fcfffff 	.word	0x3fcfffff
 8013fc8:	3ff00000 	.word	0x3ff00000
 8013fcc:	3fe00000 	.word	0x3fe00000
 8013fd0:	7ff00000 	.word	0x7ff00000
 8013fd4:	7fe00000 	.word	0x7fe00000
 8013fd8:	7c9fffff 	.word	0x7c9fffff
 8013fdc:	7fefffff 	.word	0x7fefffff

08013fe0 <_strtod_r>:
 8013fe0:	4b01      	ldr	r3, [pc, #4]	; (8013fe8 <_strtod_r+0x8>)
 8013fe2:	f7ff ba0d 	b.w	8013400 <_strtod_l>
 8013fe6:	bf00      	nop
 8013fe8:	20000138 	.word	0x20000138

08013fec <strtof>:
 8013fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ff0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80140b4 <strtof+0xc8>
 8013ff4:	4b2a      	ldr	r3, [pc, #168]	; (80140a0 <strtof+0xb4>)
 8013ff6:	460a      	mov	r2, r1
 8013ff8:	ed2d 8b02 	vpush	{d8}
 8013ffc:	4601      	mov	r1, r0
 8013ffe:	f8d8 0000 	ldr.w	r0, [r8]
 8014002:	f7ff f9fd 	bl	8013400 <_strtod_l>
 8014006:	ec55 4b10 	vmov	r4, r5, d0
 801400a:	ee10 2a10 	vmov	r2, s0
 801400e:	ee10 0a10 	vmov	r0, s0
 8014012:	462b      	mov	r3, r5
 8014014:	4629      	mov	r1, r5
 8014016:	f7ec fd89 	bl	8000b2c <__aeabi_dcmpun>
 801401a:	b190      	cbz	r0, 8014042 <strtof+0x56>
 801401c:	2d00      	cmp	r5, #0
 801401e:	4821      	ldr	r0, [pc, #132]	; (80140a4 <strtof+0xb8>)
 8014020:	da09      	bge.n	8014036 <strtof+0x4a>
 8014022:	f001 f9d9 	bl	80153d8 <nanf>
 8014026:	eeb1 8a40 	vneg.f32	s16, s0
 801402a:	eeb0 0a48 	vmov.f32	s0, s16
 801402e:	ecbd 8b02 	vpop	{d8}
 8014032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014036:	ecbd 8b02 	vpop	{d8}
 801403a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801403e:	f001 b9cb 	b.w	80153d8 <nanf>
 8014042:	4620      	mov	r0, r4
 8014044:	4629      	mov	r1, r5
 8014046:	f7ec fdcf 	bl	8000be8 <__aeabi_d2f>
 801404a:	ee08 0a10 	vmov	s16, r0
 801404e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80140a8 <strtof+0xbc>
 8014052:	eeb0 7ac8 	vabs.f32	s14, s16
 8014056:	eeb4 7a67 	vcmp.f32	s14, s15
 801405a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801405e:	dd11      	ble.n	8014084 <strtof+0x98>
 8014060:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8014064:	4b11      	ldr	r3, [pc, #68]	; (80140ac <strtof+0xc0>)
 8014066:	f04f 32ff 	mov.w	r2, #4294967295
 801406a:	4620      	mov	r0, r4
 801406c:	4639      	mov	r1, r7
 801406e:	f7ec fd5d 	bl	8000b2c <__aeabi_dcmpun>
 8014072:	b980      	cbnz	r0, 8014096 <strtof+0xaa>
 8014074:	4b0d      	ldr	r3, [pc, #52]	; (80140ac <strtof+0xc0>)
 8014076:	f04f 32ff 	mov.w	r2, #4294967295
 801407a:	4620      	mov	r0, r4
 801407c:	4639      	mov	r1, r7
 801407e:	f7ec fd37 	bl	8000af0 <__aeabi_dcmple>
 8014082:	b940      	cbnz	r0, 8014096 <strtof+0xaa>
 8014084:	ee18 3a10 	vmov	r3, s16
 8014088:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801408c:	d1cd      	bne.n	801402a <strtof+0x3e>
 801408e:	4b08      	ldr	r3, [pc, #32]	; (80140b0 <strtof+0xc4>)
 8014090:	402b      	ands	r3, r5
 8014092:	2b00      	cmp	r3, #0
 8014094:	d0c9      	beq.n	801402a <strtof+0x3e>
 8014096:	f8d8 3000 	ldr.w	r3, [r8]
 801409a:	2222      	movs	r2, #34	; 0x22
 801409c:	601a      	str	r2, [r3, #0]
 801409e:	e7c4      	b.n	801402a <strtof+0x3e>
 80140a0:	20000138 	.word	0x20000138
 80140a4:	0801b0d6 	.word	0x0801b0d6
 80140a8:	7f7fffff 	.word	0x7f7fffff
 80140ac:	7fefffff 	.word	0x7fefffff
 80140b0:	7ff00000 	.word	0x7ff00000
 80140b4:	200002f0 	.word	0x200002f0

080140b8 <_strtol_l.constprop.0>:
 80140b8:	2b01      	cmp	r3, #1
 80140ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140be:	d001      	beq.n	80140c4 <_strtol_l.constprop.0+0xc>
 80140c0:	2b24      	cmp	r3, #36	; 0x24
 80140c2:	d906      	bls.n	80140d2 <_strtol_l.constprop.0+0x1a>
 80140c4:	f001 f93c 	bl	8015340 <__errno>
 80140c8:	2316      	movs	r3, #22
 80140ca:	6003      	str	r3, [r0, #0]
 80140cc:	2000      	movs	r0, #0
 80140ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80141b8 <_strtol_l.constprop.0+0x100>
 80140d6:	460d      	mov	r5, r1
 80140d8:	462e      	mov	r6, r5
 80140da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80140de:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80140e2:	f017 0708 	ands.w	r7, r7, #8
 80140e6:	d1f7      	bne.n	80140d8 <_strtol_l.constprop.0+0x20>
 80140e8:	2c2d      	cmp	r4, #45	; 0x2d
 80140ea:	d132      	bne.n	8014152 <_strtol_l.constprop.0+0x9a>
 80140ec:	782c      	ldrb	r4, [r5, #0]
 80140ee:	2701      	movs	r7, #1
 80140f0:	1cb5      	adds	r5, r6, #2
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d05b      	beq.n	80141ae <_strtol_l.constprop.0+0xf6>
 80140f6:	2b10      	cmp	r3, #16
 80140f8:	d109      	bne.n	801410e <_strtol_l.constprop.0+0x56>
 80140fa:	2c30      	cmp	r4, #48	; 0x30
 80140fc:	d107      	bne.n	801410e <_strtol_l.constprop.0+0x56>
 80140fe:	782c      	ldrb	r4, [r5, #0]
 8014100:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014104:	2c58      	cmp	r4, #88	; 0x58
 8014106:	d14d      	bne.n	80141a4 <_strtol_l.constprop.0+0xec>
 8014108:	786c      	ldrb	r4, [r5, #1]
 801410a:	2310      	movs	r3, #16
 801410c:	3502      	adds	r5, #2
 801410e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014112:	f108 38ff 	add.w	r8, r8, #4294967295
 8014116:	f04f 0e00 	mov.w	lr, #0
 801411a:	fbb8 f9f3 	udiv	r9, r8, r3
 801411e:	4676      	mov	r6, lr
 8014120:	fb03 8a19 	mls	sl, r3, r9, r8
 8014124:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014128:	f1bc 0f09 	cmp.w	ip, #9
 801412c:	d816      	bhi.n	801415c <_strtol_l.constprop.0+0xa4>
 801412e:	4664      	mov	r4, ip
 8014130:	42a3      	cmp	r3, r4
 8014132:	dd24      	ble.n	801417e <_strtol_l.constprop.0+0xc6>
 8014134:	f1be 3fff 	cmp.w	lr, #4294967295
 8014138:	d008      	beq.n	801414c <_strtol_l.constprop.0+0x94>
 801413a:	45b1      	cmp	r9, r6
 801413c:	d31c      	bcc.n	8014178 <_strtol_l.constprop.0+0xc0>
 801413e:	d101      	bne.n	8014144 <_strtol_l.constprop.0+0x8c>
 8014140:	45a2      	cmp	sl, r4
 8014142:	db19      	blt.n	8014178 <_strtol_l.constprop.0+0xc0>
 8014144:	fb06 4603 	mla	r6, r6, r3, r4
 8014148:	f04f 0e01 	mov.w	lr, #1
 801414c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014150:	e7e8      	b.n	8014124 <_strtol_l.constprop.0+0x6c>
 8014152:	2c2b      	cmp	r4, #43	; 0x2b
 8014154:	bf04      	itt	eq
 8014156:	782c      	ldrbeq	r4, [r5, #0]
 8014158:	1cb5      	addeq	r5, r6, #2
 801415a:	e7ca      	b.n	80140f2 <_strtol_l.constprop.0+0x3a>
 801415c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014160:	f1bc 0f19 	cmp.w	ip, #25
 8014164:	d801      	bhi.n	801416a <_strtol_l.constprop.0+0xb2>
 8014166:	3c37      	subs	r4, #55	; 0x37
 8014168:	e7e2      	b.n	8014130 <_strtol_l.constprop.0+0x78>
 801416a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801416e:	f1bc 0f19 	cmp.w	ip, #25
 8014172:	d804      	bhi.n	801417e <_strtol_l.constprop.0+0xc6>
 8014174:	3c57      	subs	r4, #87	; 0x57
 8014176:	e7db      	b.n	8014130 <_strtol_l.constprop.0+0x78>
 8014178:	f04f 3eff 	mov.w	lr, #4294967295
 801417c:	e7e6      	b.n	801414c <_strtol_l.constprop.0+0x94>
 801417e:	f1be 3fff 	cmp.w	lr, #4294967295
 8014182:	d105      	bne.n	8014190 <_strtol_l.constprop.0+0xd8>
 8014184:	2322      	movs	r3, #34	; 0x22
 8014186:	6003      	str	r3, [r0, #0]
 8014188:	4646      	mov	r6, r8
 801418a:	b942      	cbnz	r2, 801419e <_strtol_l.constprop.0+0xe6>
 801418c:	4630      	mov	r0, r6
 801418e:	e79e      	b.n	80140ce <_strtol_l.constprop.0+0x16>
 8014190:	b107      	cbz	r7, 8014194 <_strtol_l.constprop.0+0xdc>
 8014192:	4276      	negs	r6, r6
 8014194:	2a00      	cmp	r2, #0
 8014196:	d0f9      	beq.n	801418c <_strtol_l.constprop.0+0xd4>
 8014198:	f1be 0f00 	cmp.w	lr, #0
 801419c:	d000      	beq.n	80141a0 <_strtol_l.constprop.0+0xe8>
 801419e:	1e69      	subs	r1, r5, #1
 80141a0:	6011      	str	r1, [r2, #0]
 80141a2:	e7f3      	b.n	801418c <_strtol_l.constprop.0+0xd4>
 80141a4:	2430      	movs	r4, #48	; 0x30
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d1b1      	bne.n	801410e <_strtol_l.constprop.0+0x56>
 80141aa:	2308      	movs	r3, #8
 80141ac:	e7af      	b.n	801410e <_strtol_l.constprop.0+0x56>
 80141ae:	2c30      	cmp	r4, #48	; 0x30
 80141b0:	d0a5      	beq.n	80140fe <_strtol_l.constprop.0+0x46>
 80141b2:	230a      	movs	r3, #10
 80141b4:	e7ab      	b.n	801410e <_strtol_l.constprop.0+0x56>
 80141b6:	bf00      	nop
 80141b8:	0801aee9 	.word	0x0801aee9

080141bc <_strtol_r>:
 80141bc:	f7ff bf7c 	b.w	80140b8 <_strtol_l.constprop.0>

080141c0 <strtol>:
 80141c0:	4613      	mov	r3, r2
 80141c2:	460a      	mov	r2, r1
 80141c4:	4601      	mov	r1, r0
 80141c6:	4802      	ldr	r0, [pc, #8]	; (80141d0 <strtol+0x10>)
 80141c8:	6800      	ldr	r0, [r0, #0]
 80141ca:	f7ff bf75 	b.w	80140b8 <_strtol_l.constprop.0>
 80141ce:	bf00      	nop
 80141d0:	200002f0 	.word	0x200002f0

080141d4 <__cvt>:
 80141d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80141d8:	ec55 4b10 	vmov	r4, r5, d0
 80141dc:	2d00      	cmp	r5, #0
 80141de:	460e      	mov	r6, r1
 80141e0:	4619      	mov	r1, r3
 80141e2:	462b      	mov	r3, r5
 80141e4:	bfbb      	ittet	lt
 80141e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80141ea:	461d      	movlt	r5, r3
 80141ec:	2300      	movge	r3, #0
 80141ee:	232d      	movlt	r3, #45	; 0x2d
 80141f0:	700b      	strb	r3, [r1, #0]
 80141f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80141f8:	4691      	mov	r9, r2
 80141fa:	f023 0820 	bic.w	r8, r3, #32
 80141fe:	bfbc      	itt	lt
 8014200:	4622      	movlt	r2, r4
 8014202:	4614      	movlt	r4, r2
 8014204:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014208:	d005      	beq.n	8014216 <__cvt+0x42>
 801420a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801420e:	d100      	bne.n	8014212 <__cvt+0x3e>
 8014210:	3601      	adds	r6, #1
 8014212:	2102      	movs	r1, #2
 8014214:	e000      	b.n	8014218 <__cvt+0x44>
 8014216:	2103      	movs	r1, #3
 8014218:	ab03      	add	r3, sp, #12
 801421a:	9301      	str	r3, [sp, #4]
 801421c:	ab02      	add	r3, sp, #8
 801421e:	9300      	str	r3, [sp, #0]
 8014220:	ec45 4b10 	vmov	d0, r4, r5
 8014224:	4653      	mov	r3, sl
 8014226:	4632      	mov	r2, r6
 8014228:	f001 f982 	bl	8015530 <_dtoa_r>
 801422c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014230:	4607      	mov	r7, r0
 8014232:	d102      	bne.n	801423a <__cvt+0x66>
 8014234:	f019 0f01 	tst.w	r9, #1
 8014238:	d022      	beq.n	8014280 <__cvt+0xac>
 801423a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801423e:	eb07 0906 	add.w	r9, r7, r6
 8014242:	d110      	bne.n	8014266 <__cvt+0x92>
 8014244:	783b      	ldrb	r3, [r7, #0]
 8014246:	2b30      	cmp	r3, #48	; 0x30
 8014248:	d10a      	bne.n	8014260 <__cvt+0x8c>
 801424a:	2200      	movs	r2, #0
 801424c:	2300      	movs	r3, #0
 801424e:	4620      	mov	r0, r4
 8014250:	4629      	mov	r1, r5
 8014252:	f7ec fc39 	bl	8000ac8 <__aeabi_dcmpeq>
 8014256:	b918      	cbnz	r0, 8014260 <__cvt+0x8c>
 8014258:	f1c6 0601 	rsb	r6, r6, #1
 801425c:	f8ca 6000 	str.w	r6, [sl]
 8014260:	f8da 3000 	ldr.w	r3, [sl]
 8014264:	4499      	add	r9, r3
 8014266:	2200      	movs	r2, #0
 8014268:	2300      	movs	r3, #0
 801426a:	4620      	mov	r0, r4
 801426c:	4629      	mov	r1, r5
 801426e:	f7ec fc2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8014272:	b108      	cbz	r0, 8014278 <__cvt+0xa4>
 8014274:	f8cd 900c 	str.w	r9, [sp, #12]
 8014278:	2230      	movs	r2, #48	; 0x30
 801427a:	9b03      	ldr	r3, [sp, #12]
 801427c:	454b      	cmp	r3, r9
 801427e:	d307      	bcc.n	8014290 <__cvt+0xbc>
 8014280:	9b03      	ldr	r3, [sp, #12]
 8014282:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014284:	1bdb      	subs	r3, r3, r7
 8014286:	4638      	mov	r0, r7
 8014288:	6013      	str	r3, [r2, #0]
 801428a:	b004      	add	sp, #16
 801428c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014290:	1c59      	adds	r1, r3, #1
 8014292:	9103      	str	r1, [sp, #12]
 8014294:	701a      	strb	r2, [r3, #0]
 8014296:	e7f0      	b.n	801427a <__cvt+0xa6>

08014298 <__exponent>:
 8014298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801429a:	4603      	mov	r3, r0
 801429c:	2900      	cmp	r1, #0
 801429e:	bfb8      	it	lt
 80142a0:	4249      	neglt	r1, r1
 80142a2:	f803 2b02 	strb.w	r2, [r3], #2
 80142a6:	bfb4      	ite	lt
 80142a8:	222d      	movlt	r2, #45	; 0x2d
 80142aa:	222b      	movge	r2, #43	; 0x2b
 80142ac:	2909      	cmp	r1, #9
 80142ae:	7042      	strb	r2, [r0, #1]
 80142b0:	dd2a      	ble.n	8014308 <__exponent+0x70>
 80142b2:	f10d 0207 	add.w	r2, sp, #7
 80142b6:	4617      	mov	r7, r2
 80142b8:	260a      	movs	r6, #10
 80142ba:	4694      	mov	ip, r2
 80142bc:	fb91 f5f6 	sdiv	r5, r1, r6
 80142c0:	fb06 1415 	mls	r4, r6, r5, r1
 80142c4:	3430      	adds	r4, #48	; 0x30
 80142c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80142ca:	460c      	mov	r4, r1
 80142cc:	2c63      	cmp	r4, #99	; 0x63
 80142ce:	f102 32ff 	add.w	r2, r2, #4294967295
 80142d2:	4629      	mov	r1, r5
 80142d4:	dcf1      	bgt.n	80142ba <__exponent+0x22>
 80142d6:	3130      	adds	r1, #48	; 0x30
 80142d8:	f1ac 0402 	sub.w	r4, ip, #2
 80142dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80142e0:	1c41      	adds	r1, r0, #1
 80142e2:	4622      	mov	r2, r4
 80142e4:	42ba      	cmp	r2, r7
 80142e6:	d30a      	bcc.n	80142fe <__exponent+0x66>
 80142e8:	f10d 0209 	add.w	r2, sp, #9
 80142ec:	eba2 020c 	sub.w	r2, r2, ip
 80142f0:	42bc      	cmp	r4, r7
 80142f2:	bf88      	it	hi
 80142f4:	2200      	movhi	r2, #0
 80142f6:	4413      	add	r3, r2
 80142f8:	1a18      	subs	r0, r3, r0
 80142fa:	b003      	add	sp, #12
 80142fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014302:	f801 5f01 	strb.w	r5, [r1, #1]!
 8014306:	e7ed      	b.n	80142e4 <__exponent+0x4c>
 8014308:	2330      	movs	r3, #48	; 0x30
 801430a:	3130      	adds	r1, #48	; 0x30
 801430c:	7083      	strb	r3, [r0, #2]
 801430e:	70c1      	strb	r1, [r0, #3]
 8014310:	1d03      	adds	r3, r0, #4
 8014312:	e7f1      	b.n	80142f8 <__exponent+0x60>

08014314 <_printf_float>:
 8014314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014318:	ed2d 8b02 	vpush	{d8}
 801431c:	b08d      	sub	sp, #52	; 0x34
 801431e:	460c      	mov	r4, r1
 8014320:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014324:	4616      	mov	r6, r2
 8014326:	461f      	mov	r7, r3
 8014328:	4605      	mov	r5, r0
 801432a:	f000 ffaf 	bl	801528c <_localeconv_r>
 801432e:	f8d0 a000 	ldr.w	sl, [r0]
 8014332:	4650      	mov	r0, sl
 8014334:	f7eb ff9c 	bl	8000270 <strlen>
 8014338:	2300      	movs	r3, #0
 801433a:	930a      	str	r3, [sp, #40]	; 0x28
 801433c:	6823      	ldr	r3, [r4, #0]
 801433e:	9305      	str	r3, [sp, #20]
 8014340:	f8d8 3000 	ldr.w	r3, [r8]
 8014344:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014348:	3307      	adds	r3, #7
 801434a:	f023 0307 	bic.w	r3, r3, #7
 801434e:	f103 0208 	add.w	r2, r3, #8
 8014352:	f8c8 2000 	str.w	r2, [r8]
 8014356:	e9d3 8900 	ldrd	r8, r9, [r3]
 801435a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801435e:	9307      	str	r3, [sp, #28]
 8014360:	f8cd 8018 	str.w	r8, [sp, #24]
 8014364:	ee08 0a10 	vmov	s16, r0
 8014368:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801436c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014370:	4b9e      	ldr	r3, [pc, #632]	; (80145ec <_printf_float+0x2d8>)
 8014372:	f04f 32ff 	mov.w	r2, #4294967295
 8014376:	f7ec fbd9 	bl	8000b2c <__aeabi_dcmpun>
 801437a:	bb88      	cbnz	r0, 80143e0 <_printf_float+0xcc>
 801437c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014380:	4b9a      	ldr	r3, [pc, #616]	; (80145ec <_printf_float+0x2d8>)
 8014382:	f04f 32ff 	mov.w	r2, #4294967295
 8014386:	f7ec fbb3 	bl	8000af0 <__aeabi_dcmple>
 801438a:	bb48      	cbnz	r0, 80143e0 <_printf_float+0xcc>
 801438c:	2200      	movs	r2, #0
 801438e:	2300      	movs	r3, #0
 8014390:	4640      	mov	r0, r8
 8014392:	4649      	mov	r1, r9
 8014394:	f7ec fba2 	bl	8000adc <__aeabi_dcmplt>
 8014398:	b110      	cbz	r0, 80143a0 <_printf_float+0x8c>
 801439a:	232d      	movs	r3, #45	; 0x2d
 801439c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80143a0:	4a93      	ldr	r2, [pc, #588]	; (80145f0 <_printf_float+0x2dc>)
 80143a2:	4b94      	ldr	r3, [pc, #592]	; (80145f4 <_printf_float+0x2e0>)
 80143a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80143a8:	bf94      	ite	ls
 80143aa:	4690      	movls	r8, r2
 80143ac:	4698      	movhi	r8, r3
 80143ae:	2303      	movs	r3, #3
 80143b0:	6123      	str	r3, [r4, #16]
 80143b2:	9b05      	ldr	r3, [sp, #20]
 80143b4:	f023 0304 	bic.w	r3, r3, #4
 80143b8:	6023      	str	r3, [r4, #0]
 80143ba:	f04f 0900 	mov.w	r9, #0
 80143be:	9700      	str	r7, [sp, #0]
 80143c0:	4633      	mov	r3, r6
 80143c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80143c4:	4621      	mov	r1, r4
 80143c6:	4628      	mov	r0, r5
 80143c8:	f000 f9da 	bl	8014780 <_printf_common>
 80143cc:	3001      	adds	r0, #1
 80143ce:	f040 8090 	bne.w	80144f2 <_printf_float+0x1de>
 80143d2:	f04f 30ff 	mov.w	r0, #4294967295
 80143d6:	b00d      	add	sp, #52	; 0x34
 80143d8:	ecbd 8b02 	vpop	{d8}
 80143dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143e0:	4642      	mov	r2, r8
 80143e2:	464b      	mov	r3, r9
 80143e4:	4640      	mov	r0, r8
 80143e6:	4649      	mov	r1, r9
 80143e8:	f7ec fba0 	bl	8000b2c <__aeabi_dcmpun>
 80143ec:	b140      	cbz	r0, 8014400 <_printf_float+0xec>
 80143ee:	464b      	mov	r3, r9
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	bfbc      	itt	lt
 80143f4:	232d      	movlt	r3, #45	; 0x2d
 80143f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80143fa:	4a7f      	ldr	r2, [pc, #508]	; (80145f8 <_printf_float+0x2e4>)
 80143fc:	4b7f      	ldr	r3, [pc, #508]	; (80145fc <_printf_float+0x2e8>)
 80143fe:	e7d1      	b.n	80143a4 <_printf_float+0x90>
 8014400:	6863      	ldr	r3, [r4, #4]
 8014402:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014406:	9206      	str	r2, [sp, #24]
 8014408:	1c5a      	adds	r2, r3, #1
 801440a:	d13f      	bne.n	801448c <_printf_float+0x178>
 801440c:	2306      	movs	r3, #6
 801440e:	6063      	str	r3, [r4, #4]
 8014410:	9b05      	ldr	r3, [sp, #20]
 8014412:	6861      	ldr	r1, [r4, #4]
 8014414:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014418:	2300      	movs	r3, #0
 801441a:	9303      	str	r3, [sp, #12]
 801441c:	ab0a      	add	r3, sp, #40	; 0x28
 801441e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014422:	ab09      	add	r3, sp, #36	; 0x24
 8014424:	ec49 8b10 	vmov	d0, r8, r9
 8014428:	9300      	str	r3, [sp, #0]
 801442a:	6022      	str	r2, [r4, #0]
 801442c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014430:	4628      	mov	r0, r5
 8014432:	f7ff fecf 	bl	80141d4 <__cvt>
 8014436:	9b06      	ldr	r3, [sp, #24]
 8014438:	9909      	ldr	r1, [sp, #36]	; 0x24
 801443a:	2b47      	cmp	r3, #71	; 0x47
 801443c:	4680      	mov	r8, r0
 801443e:	d108      	bne.n	8014452 <_printf_float+0x13e>
 8014440:	1cc8      	adds	r0, r1, #3
 8014442:	db02      	blt.n	801444a <_printf_float+0x136>
 8014444:	6863      	ldr	r3, [r4, #4]
 8014446:	4299      	cmp	r1, r3
 8014448:	dd41      	ble.n	80144ce <_printf_float+0x1ba>
 801444a:	f1ab 0302 	sub.w	r3, fp, #2
 801444e:	fa5f fb83 	uxtb.w	fp, r3
 8014452:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014456:	d820      	bhi.n	801449a <_printf_float+0x186>
 8014458:	3901      	subs	r1, #1
 801445a:	465a      	mov	r2, fp
 801445c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014460:	9109      	str	r1, [sp, #36]	; 0x24
 8014462:	f7ff ff19 	bl	8014298 <__exponent>
 8014466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014468:	1813      	adds	r3, r2, r0
 801446a:	2a01      	cmp	r2, #1
 801446c:	4681      	mov	r9, r0
 801446e:	6123      	str	r3, [r4, #16]
 8014470:	dc02      	bgt.n	8014478 <_printf_float+0x164>
 8014472:	6822      	ldr	r2, [r4, #0]
 8014474:	07d2      	lsls	r2, r2, #31
 8014476:	d501      	bpl.n	801447c <_printf_float+0x168>
 8014478:	3301      	adds	r3, #1
 801447a:	6123      	str	r3, [r4, #16]
 801447c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014480:	2b00      	cmp	r3, #0
 8014482:	d09c      	beq.n	80143be <_printf_float+0xaa>
 8014484:	232d      	movs	r3, #45	; 0x2d
 8014486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801448a:	e798      	b.n	80143be <_printf_float+0xaa>
 801448c:	9a06      	ldr	r2, [sp, #24]
 801448e:	2a47      	cmp	r2, #71	; 0x47
 8014490:	d1be      	bne.n	8014410 <_printf_float+0xfc>
 8014492:	2b00      	cmp	r3, #0
 8014494:	d1bc      	bne.n	8014410 <_printf_float+0xfc>
 8014496:	2301      	movs	r3, #1
 8014498:	e7b9      	b.n	801440e <_printf_float+0xfa>
 801449a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801449e:	d118      	bne.n	80144d2 <_printf_float+0x1be>
 80144a0:	2900      	cmp	r1, #0
 80144a2:	6863      	ldr	r3, [r4, #4]
 80144a4:	dd0b      	ble.n	80144be <_printf_float+0x1aa>
 80144a6:	6121      	str	r1, [r4, #16]
 80144a8:	b913      	cbnz	r3, 80144b0 <_printf_float+0x19c>
 80144aa:	6822      	ldr	r2, [r4, #0]
 80144ac:	07d0      	lsls	r0, r2, #31
 80144ae:	d502      	bpl.n	80144b6 <_printf_float+0x1a2>
 80144b0:	3301      	adds	r3, #1
 80144b2:	440b      	add	r3, r1
 80144b4:	6123      	str	r3, [r4, #16]
 80144b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80144b8:	f04f 0900 	mov.w	r9, #0
 80144bc:	e7de      	b.n	801447c <_printf_float+0x168>
 80144be:	b913      	cbnz	r3, 80144c6 <_printf_float+0x1b2>
 80144c0:	6822      	ldr	r2, [r4, #0]
 80144c2:	07d2      	lsls	r2, r2, #31
 80144c4:	d501      	bpl.n	80144ca <_printf_float+0x1b6>
 80144c6:	3302      	adds	r3, #2
 80144c8:	e7f4      	b.n	80144b4 <_printf_float+0x1a0>
 80144ca:	2301      	movs	r3, #1
 80144cc:	e7f2      	b.n	80144b4 <_printf_float+0x1a0>
 80144ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80144d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144d4:	4299      	cmp	r1, r3
 80144d6:	db05      	blt.n	80144e4 <_printf_float+0x1d0>
 80144d8:	6823      	ldr	r3, [r4, #0]
 80144da:	6121      	str	r1, [r4, #16]
 80144dc:	07d8      	lsls	r0, r3, #31
 80144de:	d5ea      	bpl.n	80144b6 <_printf_float+0x1a2>
 80144e0:	1c4b      	adds	r3, r1, #1
 80144e2:	e7e7      	b.n	80144b4 <_printf_float+0x1a0>
 80144e4:	2900      	cmp	r1, #0
 80144e6:	bfd4      	ite	le
 80144e8:	f1c1 0202 	rsble	r2, r1, #2
 80144ec:	2201      	movgt	r2, #1
 80144ee:	4413      	add	r3, r2
 80144f0:	e7e0      	b.n	80144b4 <_printf_float+0x1a0>
 80144f2:	6823      	ldr	r3, [r4, #0]
 80144f4:	055a      	lsls	r2, r3, #21
 80144f6:	d407      	bmi.n	8014508 <_printf_float+0x1f4>
 80144f8:	6923      	ldr	r3, [r4, #16]
 80144fa:	4642      	mov	r2, r8
 80144fc:	4631      	mov	r1, r6
 80144fe:	4628      	mov	r0, r5
 8014500:	47b8      	blx	r7
 8014502:	3001      	adds	r0, #1
 8014504:	d12c      	bne.n	8014560 <_printf_float+0x24c>
 8014506:	e764      	b.n	80143d2 <_printf_float+0xbe>
 8014508:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801450c:	f240 80e0 	bls.w	80146d0 <_printf_float+0x3bc>
 8014510:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014514:	2200      	movs	r2, #0
 8014516:	2300      	movs	r3, #0
 8014518:	f7ec fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 801451c:	2800      	cmp	r0, #0
 801451e:	d034      	beq.n	801458a <_printf_float+0x276>
 8014520:	4a37      	ldr	r2, [pc, #220]	; (8014600 <_printf_float+0x2ec>)
 8014522:	2301      	movs	r3, #1
 8014524:	4631      	mov	r1, r6
 8014526:	4628      	mov	r0, r5
 8014528:	47b8      	blx	r7
 801452a:	3001      	adds	r0, #1
 801452c:	f43f af51 	beq.w	80143d2 <_printf_float+0xbe>
 8014530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014534:	429a      	cmp	r2, r3
 8014536:	db02      	blt.n	801453e <_printf_float+0x22a>
 8014538:	6823      	ldr	r3, [r4, #0]
 801453a:	07d8      	lsls	r0, r3, #31
 801453c:	d510      	bpl.n	8014560 <_printf_float+0x24c>
 801453e:	ee18 3a10 	vmov	r3, s16
 8014542:	4652      	mov	r2, sl
 8014544:	4631      	mov	r1, r6
 8014546:	4628      	mov	r0, r5
 8014548:	47b8      	blx	r7
 801454a:	3001      	adds	r0, #1
 801454c:	f43f af41 	beq.w	80143d2 <_printf_float+0xbe>
 8014550:	f04f 0800 	mov.w	r8, #0
 8014554:	f104 091a 	add.w	r9, r4, #26
 8014558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801455a:	3b01      	subs	r3, #1
 801455c:	4543      	cmp	r3, r8
 801455e:	dc09      	bgt.n	8014574 <_printf_float+0x260>
 8014560:	6823      	ldr	r3, [r4, #0]
 8014562:	079b      	lsls	r3, r3, #30
 8014564:	f100 8107 	bmi.w	8014776 <_printf_float+0x462>
 8014568:	68e0      	ldr	r0, [r4, #12]
 801456a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801456c:	4298      	cmp	r0, r3
 801456e:	bfb8      	it	lt
 8014570:	4618      	movlt	r0, r3
 8014572:	e730      	b.n	80143d6 <_printf_float+0xc2>
 8014574:	2301      	movs	r3, #1
 8014576:	464a      	mov	r2, r9
 8014578:	4631      	mov	r1, r6
 801457a:	4628      	mov	r0, r5
 801457c:	47b8      	blx	r7
 801457e:	3001      	adds	r0, #1
 8014580:	f43f af27 	beq.w	80143d2 <_printf_float+0xbe>
 8014584:	f108 0801 	add.w	r8, r8, #1
 8014588:	e7e6      	b.n	8014558 <_printf_float+0x244>
 801458a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801458c:	2b00      	cmp	r3, #0
 801458e:	dc39      	bgt.n	8014604 <_printf_float+0x2f0>
 8014590:	4a1b      	ldr	r2, [pc, #108]	; (8014600 <_printf_float+0x2ec>)
 8014592:	2301      	movs	r3, #1
 8014594:	4631      	mov	r1, r6
 8014596:	4628      	mov	r0, r5
 8014598:	47b8      	blx	r7
 801459a:	3001      	adds	r0, #1
 801459c:	f43f af19 	beq.w	80143d2 <_printf_float+0xbe>
 80145a0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80145a4:	4313      	orrs	r3, r2
 80145a6:	d102      	bne.n	80145ae <_printf_float+0x29a>
 80145a8:	6823      	ldr	r3, [r4, #0]
 80145aa:	07d9      	lsls	r1, r3, #31
 80145ac:	d5d8      	bpl.n	8014560 <_printf_float+0x24c>
 80145ae:	ee18 3a10 	vmov	r3, s16
 80145b2:	4652      	mov	r2, sl
 80145b4:	4631      	mov	r1, r6
 80145b6:	4628      	mov	r0, r5
 80145b8:	47b8      	blx	r7
 80145ba:	3001      	adds	r0, #1
 80145bc:	f43f af09 	beq.w	80143d2 <_printf_float+0xbe>
 80145c0:	f04f 0900 	mov.w	r9, #0
 80145c4:	f104 0a1a 	add.w	sl, r4, #26
 80145c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145ca:	425b      	negs	r3, r3
 80145cc:	454b      	cmp	r3, r9
 80145ce:	dc01      	bgt.n	80145d4 <_printf_float+0x2c0>
 80145d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145d2:	e792      	b.n	80144fa <_printf_float+0x1e6>
 80145d4:	2301      	movs	r3, #1
 80145d6:	4652      	mov	r2, sl
 80145d8:	4631      	mov	r1, r6
 80145da:	4628      	mov	r0, r5
 80145dc:	47b8      	blx	r7
 80145de:	3001      	adds	r0, #1
 80145e0:	f43f aef7 	beq.w	80143d2 <_printf_float+0xbe>
 80145e4:	f109 0901 	add.w	r9, r9, #1
 80145e8:	e7ee      	b.n	80145c8 <_printf_float+0x2b4>
 80145ea:	bf00      	nop
 80145ec:	7fefffff 	.word	0x7fefffff
 80145f0:	0801afe9 	.word	0x0801afe9
 80145f4:	0801afed 	.word	0x0801afed
 80145f8:	0801aff1 	.word	0x0801aff1
 80145fc:	0801aff5 	.word	0x0801aff5
 8014600:	0801aff9 	.word	0x0801aff9
 8014604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014606:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014608:	429a      	cmp	r2, r3
 801460a:	bfa8      	it	ge
 801460c:	461a      	movge	r2, r3
 801460e:	2a00      	cmp	r2, #0
 8014610:	4691      	mov	r9, r2
 8014612:	dc37      	bgt.n	8014684 <_printf_float+0x370>
 8014614:	f04f 0b00 	mov.w	fp, #0
 8014618:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801461c:	f104 021a 	add.w	r2, r4, #26
 8014620:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014622:	9305      	str	r3, [sp, #20]
 8014624:	eba3 0309 	sub.w	r3, r3, r9
 8014628:	455b      	cmp	r3, fp
 801462a:	dc33      	bgt.n	8014694 <_printf_float+0x380>
 801462c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014630:	429a      	cmp	r2, r3
 8014632:	db3b      	blt.n	80146ac <_printf_float+0x398>
 8014634:	6823      	ldr	r3, [r4, #0]
 8014636:	07da      	lsls	r2, r3, #31
 8014638:	d438      	bmi.n	80146ac <_printf_float+0x398>
 801463a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801463e:	eba2 0903 	sub.w	r9, r2, r3
 8014642:	9b05      	ldr	r3, [sp, #20]
 8014644:	1ad2      	subs	r2, r2, r3
 8014646:	4591      	cmp	r9, r2
 8014648:	bfa8      	it	ge
 801464a:	4691      	movge	r9, r2
 801464c:	f1b9 0f00 	cmp.w	r9, #0
 8014650:	dc35      	bgt.n	80146be <_printf_float+0x3aa>
 8014652:	f04f 0800 	mov.w	r8, #0
 8014656:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801465a:	f104 0a1a 	add.w	sl, r4, #26
 801465e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014662:	1a9b      	subs	r3, r3, r2
 8014664:	eba3 0309 	sub.w	r3, r3, r9
 8014668:	4543      	cmp	r3, r8
 801466a:	f77f af79 	ble.w	8014560 <_printf_float+0x24c>
 801466e:	2301      	movs	r3, #1
 8014670:	4652      	mov	r2, sl
 8014672:	4631      	mov	r1, r6
 8014674:	4628      	mov	r0, r5
 8014676:	47b8      	blx	r7
 8014678:	3001      	adds	r0, #1
 801467a:	f43f aeaa 	beq.w	80143d2 <_printf_float+0xbe>
 801467e:	f108 0801 	add.w	r8, r8, #1
 8014682:	e7ec      	b.n	801465e <_printf_float+0x34a>
 8014684:	4613      	mov	r3, r2
 8014686:	4631      	mov	r1, r6
 8014688:	4642      	mov	r2, r8
 801468a:	4628      	mov	r0, r5
 801468c:	47b8      	blx	r7
 801468e:	3001      	adds	r0, #1
 8014690:	d1c0      	bne.n	8014614 <_printf_float+0x300>
 8014692:	e69e      	b.n	80143d2 <_printf_float+0xbe>
 8014694:	2301      	movs	r3, #1
 8014696:	4631      	mov	r1, r6
 8014698:	4628      	mov	r0, r5
 801469a:	9205      	str	r2, [sp, #20]
 801469c:	47b8      	blx	r7
 801469e:	3001      	adds	r0, #1
 80146a0:	f43f ae97 	beq.w	80143d2 <_printf_float+0xbe>
 80146a4:	9a05      	ldr	r2, [sp, #20]
 80146a6:	f10b 0b01 	add.w	fp, fp, #1
 80146aa:	e7b9      	b.n	8014620 <_printf_float+0x30c>
 80146ac:	ee18 3a10 	vmov	r3, s16
 80146b0:	4652      	mov	r2, sl
 80146b2:	4631      	mov	r1, r6
 80146b4:	4628      	mov	r0, r5
 80146b6:	47b8      	blx	r7
 80146b8:	3001      	adds	r0, #1
 80146ba:	d1be      	bne.n	801463a <_printf_float+0x326>
 80146bc:	e689      	b.n	80143d2 <_printf_float+0xbe>
 80146be:	9a05      	ldr	r2, [sp, #20]
 80146c0:	464b      	mov	r3, r9
 80146c2:	4442      	add	r2, r8
 80146c4:	4631      	mov	r1, r6
 80146c6:	4628      	mov	r0, r5
 80146c8:	47b8      	blx	r7
 80146ca:	3001      	adds	r0, #1
 80146cc:	d1c1      	bne.n	8014652 <_printf_float+0x33e>
 80146ce:	e680      	b.n	80143d2 <_printf_float+0xbe>
 80146d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146d2:	2a01      	cmp	r2, #1
 80146d4:	dc01      	bgt.n	80146da <_printf_float+0x3c6>
 80146d6:	07db      	lsls	r3, r3, #31
 80146d8:	d53a      	bpl.n	8014750 <_printf_float+0x43c>
 80146da:	2301      	movs	r3, #1
 80146dc:	4642      	mov	r2, r8
 80146de:	4631      	mov	r1, r6
 80146e0:	4628      	mov	r0, r5
 80146e2:	47b8      	blx	r7
 80146e4:	3001      	adds	r0, #1
 80146e6:	f43f ae74 	beq.w	80143d2 <_printf_float+0xbe>
 80146ea:	ee18 3a10 	vmov	r3, s16
 80146ee:	4652      	mov	r2, sl
 80146f0:	4631      	mov	r1, r6
 80146f2:	4628      	mov	r0, r5
 80146f4:	47b8      	blx	r7
 80146f6:	3001      	adds	r0, #1
 80146f8:	f43f ae6b 	beq.w	80143d2 <_printf_float+0xbe>
 80146fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014700:	2200      	movs	r2, #0
 8014702:	2300      	movs	r3, #0
 8014704:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8014708:	f7ec f9de 	bl	8000ac8 <__aeabi_dcmpeq>
 801470c:	b9d8      	cbnz	r0, 8014746 <_printf_float+0x432>
 801470e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014712:	f108 0201 	add.w	r2, r8, #1
 8014716:	4631      	mov	r1, r6
 8014718:	4628      	mov	r0, r5
 801471a:	47b8      	blx	r7
 801471c:	3001      	adds	r0, #1
 801471e:	d10e      	bne.n	801473e <_printf_float+0x42a>
 8014720:	e657      	b.n	80143d2 <_printf_float+0xbe>
 8014722:	2301      	movs	r3, #1
 8014724:	4652      	mov	r2, sl
 8014726:	4631      	mov	r1, r6
 8014728:	4628      	mov	r0, r5
 801472a:	47b8      	blx	r7
 801472c:	3001      	adds	r0, #1
 801472e:	f43f ae50 	beq.w	80143d2 <_printf_float+0xbe>
 8014732:	f108 0801 	add.w	r8, r8, #1
 8014736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014738:	3b01      	subs	r3, #1
 801473a:	4543      	cmp	r3, r8
 801473c:	dcf1      	bgt.n	8014722 <_printf_float+0x40e>
 801473e:	464b      	mov	r3, r9
 8014740:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014744:	e6da      	b.n	80144fc <_printf_float+0x1e8>
 8014746:	f04f 0800 	mov.w	r8, #0
 801474a:	f104 0a1a 	add.w	sl, r4, #26
 801474e:	e7f2      	b.n	8014736 <_printf_float+0x422>
 8014750:	2301      	movs	r3, #1
 8014752:	4642      	mov	r2, r8
 8014754:	e7df      	b.n	8014716 <_printf_float+0x402>
 8014756:	2301      	movs	r3, #1
 8014758:	464a      	mov	r2, r9
 801475a:	4631      	mov	r1, r6
 801475c:	4628      	mov	r0, r5
 801475e:	47b8      	blx	r7
 8014760:	3001      	adds	r0, #1
 8014762:	f43f ae36 	beq.w	80143d2 <_printf_float+0xbe>
 8014766:	f108 0801 	add.w	r8, r8, #1
 801476a:	68e3      	ldr	r3, [r4, #12]
 801476c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801476e:	1a5b      	subs	r3, r3, r1
 8014770:	4543      	cmp	r3, r8
 8014772:	dcf0      	bgt.n	8014756 <_printf_float+0x442>
 8014774:	e6f8      	b.n	8014568 <_printf_float+0x254>
 8014776:	f04f 0800 	mov.w	r8, #0
 801477a:	f104 0919 	add.w	r9, r4, #25
 801477e:	e7f4      	b.n	801476a <_printf_float+0x456>

08014780 <_printf_common>:
 8014780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014784:	4616      	mov	r6, r2
 8014786:	4699      	mov	r9, r3
 8014788:	688a      	ldr	r2, [r1, #8]
 801478a:	690b      	ldr	r3, [r1, #16]
 801478c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014790:	4293      	cmp	r3, r2
 8014792:	bfb8      	it	lt
 8014794:	4613      	movlt	r3, r2
 8014796:	6033      	str	r3, [r6, #0]
 8014798:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801479c:	4607      	mov	r7, r0
 801479e:	460c      	mov	r4, r1
 80147a0:	b10a      	cbz	r2, 80147a6 <_printf_common+0x26>
 80147a2:	3301      	adds	r3, #1
 80147a4:	6033      	str	r3, [r6, #0]
 80147a6:	6823      	ldr	r3, [r4, #0]
 80147a8:	0699      	lsls	r1, r3, #26
 80147aa:	bf42      	ittt	mi
 80147ac:	6833      	ldrmi	r3, [r6, #0]
 80147ae:	3302      	addmi	r3, #2
 80147b0:	6033      	strmi	r3, [r6, #0]
 80147b2:	6825      	ldr	r5, [r4, #0]
 80147b4:	f015 0506 	ands.w	r5, r5, #6
 80147b8:	d106      	bne.n	80147c8 <_printf_common+0x48>
 80147ba:	f104 0a19 	add.w	sl, r4, #25
 80147be:	68e3      	ldr	r3, [r4, #12]
 80147c0:	6832      	ldr	r2, [r6, #0]
 80147c2:	1a9b      	subs	r3, r3, r2
 80147c4:	42ab      	cmp	r3, r5
 80147c6:	dc26      	bgt.n	8014816 <_printf_common+0x96>
 80147c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80147cc:	1e13      	subs	r3, r2, #0
 80147ce:	6822      	ldr	r2, [r4, #0]
 80147d0:	bf18      	it	ne
 80147d2:	2301      	movne	r3, #1
 80147d4:	0692      	lsls	r2, r2, #26
 80147d6:	d42b      	bmi.n	8014830 <_printf_common+0xb0>
 80147d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80147dc:	4649      	mov	r1, r9
 80147de:	4638      	mov	r0, r7
 80147e0:	47c0      	blx	r8
 80147e2:	3001      	adds	r0, #1
 80147e4:	d01e      	beq.n	8014824 <_printf_common+0xa4>
 80147e6:	6823      	ldr	r3, [r4, #0]
 80147e8:	6922      	ldr	r2, [r4, #16]
 80147ea:	f003 0306 	and.w	r3, r3, #6
 80147ee:	2b04      	cmp	r3, #4
 80147f0:	bf02      	ittt	eq
 80147f2:	68e5      	ldreq	r5, [r4, #12]
 80147f4:	6833      	ldreq	r3, [r6, #0]
 80147f6:	1aed      	subeq	r5, r5, r3
 80147f8:	68a3      	ldr	r3, [r4, #8]
 80147fa:	bf0c      	ite	eq
 80147fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014800:	2500      	movne	r5, #0
 8014802:	4293      	cmp	r3, r2
 8014804:	bfc4      	itt	gt
 8014806:	1a9b      	subgt	r3, r3, r2
 8014808:	18ed      	addgt	r5, r5, r3
 801480a:	2600      	movs	r6, #0
 801480c:	341a      	adds	r4, #26
 801480e:	42b5      	cmp	r5, r6
 8014810:	d11a      	bne.n	8014848 <_printf_common+0xc8>
 8014812:	2000      	movs	r0, #0
 8014814:	e008      	b.n	8014828 <_printf_common+0xa8>
 8014816:	2301      	movs	r3, #1
 8014818:	4652      	mov	r2, sl
 801481a:	4649      	mov	r1, r9
 801481c:	4638      	mov	r0, r7
 801481e:	47c0      	blx	r8
 8014820:	3001      	adds	r0, #1
 8014822:	d103      	bne.n	801482c <_printf_common+0xac>
 8014824:	f04f 30ff 	mov.w	r0, #4294967295
 8014828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801482c:	3501      	adds	r5, #1
 801482e:	e7c6      	b.n	80147be <_printf_common+0x3e>
 8014830:	18e1      	adds	r1, r4, r3
 8014832:	1c5a      	adds	r2, r3, #1
 8014834:	2030      	movs	r0, #48	; 0x30
 8014836:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801483a:	4422      	add	r2, r4
 801483c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014840:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014844:	3302      	adds	r3, #2
 8014846:	e7c7      	b.n	80147d8 <_printf_common+0x58>
 8014848:	2301      	movs	r3, #1
 801484a:	4622      	mov	r2, r4
 801484c:	4649      	mov	r1, r9
 801484e:	4638      	mov	r0, r7
 8014850:	47c0      	blx	r8
 8014852:	3001      	adds	r0, #1
 8014854:	d0e6      	beq.n	8014824 <_printf_common+0xa4>
 8014856:	3601      	adds	r6, #1
 8014858:	e7d9      	b.n	801480e <_printf_common+0x8e>
	...

0801485c <_printf_i>:
 801485c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014860:	7e0f      	ldrb	r7, [r1, #24]
 8014862:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014864:	2f78      	cmp	r7, #120	; 0x78
 8014866:	4691      	mov	r9, r2
 8014868:	4680      	mov	r8, r0
 801486a:	460c      	mov	r4, r1
 801486c:	469a      	mov	sl, r3
 801486e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014872:	d807      	bhi.n	8014884 <_printf_i+0x28>
 8014874:	2f62      	cmp	r7, #98	; 0x62
 8014876:	d80a      	bhi.n	801488e <_printf_i+0x32>
 8014878:	2f00      	cmp	r7, #0
 801487a:	f000 80d4 	beq.w	8014a26 <_printf_i+0x1ca>
 801487e:	2f58      	cmp	r7, #88	; 0x58
 8014880:	f000 80c0 	beq.w	8014a04 <_printf_i+0x1a8>
 8014884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014888:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801488c:	e03a      	b.n	8014904 <_printf_i+0xa8>
 801488e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014892:	2b15      	cmp	r3, #21
 8014894:	d8f6      	bhi.n	8014884 <_printf_i+0x28>
 8014896:	a101      	add	r1, pc, #4	; (adr r1, 801489c <_printf_i+0x40>)
 8014898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801489c:	080148f5 	.word	0x080148f5
 80148a0:	08014909 	.word	0x08014909
 80148a4:	08014885 	.word	0x08014885
 80148a8:	08014885 	.word	0x08014885
 80148ac:	08014885 	.word	0x08014885
 80148b0:	08014885 	.word	0x08014885
 80148b4:	08014909 	.word	0x08014909
 80148b8:	08014885 	.word	0x08014885
 80148bc:	08014885 	.word	0x08014885
 80148c0:	08014885 	.word	0x08014885
 80148c4:	08014885 	.word	0x08014885
 80148c8:	08014a0d 	.word	0x08014a0d
 80148cc:	08014935 	.word	0x08014935
 80148d0:	080149c7 	.word	0x080149c7
 80148d4:	08014885 	.word	0x08014885
 80148d8:	08014885 	.word	0x08014885
 80148dc:	08014a2f 	.word	0x08014a2f
 80148e0:	08014885 	.word	0x08014885
 80148e4:	08014935 	.word	0x08014935
 80148e8:	08014885 	.word	0x08014885
 80148ec:	08014885 	.word	0x08014885
 80148f0:	080149cf 	.word	0x080149cf
 80148f4:	682b      	ldr	r3, [r5, #0]
 80148f6:	1d1a      	adds	r2, r3, #4
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	602a      	str	r2, [r5, #0]
 80148fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014904:	2301      	movs	r3, #1
 8014906:	e09f      	b.n	8014a48 <_printf_i+0x1ec>
 8014908:	6820      	ldr	r0, [r4, #0]
 801490a:	682b      	ldr	r3, [r5, #0]
 801490c:	0607      	lsls	r7, r0, #24
 801490e:	f103 0104 	add.w	r1, r3, #4
 8014912:	6029      	str	r1, [r5, #0]
 8014914:	d501      	bpl.n	801491a <_printf_i+0xbe>
 8014916:	681e      	ldr	r6, [r3, #0]
 8014918:	e003      	b.n	8014922 <_printf_i+0xc6>
 801491a:	0646      	lsls	r6, r0, #25
 801491c:	d5fb      	bpl.n	8014916 <_printf_i+0xba>
 801491e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014922:	2e00      	cmp	r6, #0
 8014924:	da03      	bge.n	801492e <_printf_i+0xd2>
 8014926:	232d      	movs	r3, #45	; 0x2d
 8014928:	4276      	negs	r6, r6
 801492a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801492e:	485a      	ldr	r0, [pc, #360]	; (8014a98 <_printf_i+0x23c>)
 8014930:	230a      	movs	r3, #10
 8014932:	e012      	b.n	801495a <_printf_i+0xfe>
 8014934:	682b      	ldr	r3, [r5, #0]
 8014936:	6820      	ldr	r0, [r4, #0]
 8014938:	1d19      	adds	r1, r3, #4
 801493a:	6029      	str	r1, [r5, #0]
 801493c:	0605      	lsls	r5, r0, #24
 801493e:	d501      	bpl.n	8014944 <_printf_i+0xe8>
 8014940:	681e      	ldr	r6, [r3, #0]
 8014942:	e002      	b.n	801494a <_printf_i+0xee>
 8014944:	0641      	lsls	r1, r0, #25
 8014946:	d5fb      	bpl.n	8014940 <_printf_i+0xe4>
 8014948:	881e      	ldrh	r6, [r3, #0]
 801494a:	4853      	ldr	r0, [pc, #332]	; (8014a98 <_printf_i+0x23c>)
 801494c:	2f6f      	cmp	r7, #111	; 0x6f
 801494e:	bf0c      	ite	eq
 8014950:	2308      	moveq	r3, #8
 8014952:	230a      	movne	r3, #10
 8014954:	2100      	movs	r1, #0
 8014956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801495a:	6865      	ldr	r5, [r4, #4]
 801495c:	60a5      	str	r5, [r4, #8]
 801495e:	2d00      	cmp	r5, #0
 8014960:	bfa2      	ittt	ge
 8014962:	6821      	ldrge	r1, [r4, #0]
 8014964:	f021 0104 	bicge.w	r1, r1, #4
 8014968:	6021      	strge	r1, [r4, #0]
 801496a:	b90e      	cbnz	r6, 8014970 <_printf_i+0x114>
 801496c:	2d00      	cmp	r5, #0
 801496e:	d04b      	beq.n	8014a08 <_printf_i+0x1ac>
 8014970:	4615      	mov	r5, r2
 8014972:	fbb6 f1f3 	udiv	r1, r6, r3
 8014976:	fb03 6711 	mls	r7, r3, r1, r6
 801497a:	5dc7      	ldrb	r7, [r0, r7]
 801497c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014980:	4637      	mov	r7, r6
 8014982:	42bb      	cmp	r3, r7
 8014984:	460e      	mov	r6, r1
 8014986:	d9f4      	bls.n	8014972 <_printf_i+0x116>
 8014988:	2b08      	cmp	r3, #8
 801498a:	d10b      	bne.n	80149a4 <_printf_i+0x148>
 801498c:	6823      	ldr	r3, [r4, #0]
 801498e:	07de      	lsls	r6, r3, #31
 8014990:	d508      	bpl.n	80149a4 <_printf_i+0x148>
 8014992:	6923      	ldr	r3, [r4, #16]
 8014994:	6861      	ldr	r1, [r4, #4]
 8014996:	4299      	cmp	r1, r3
 8014998:	bfde      	ittt	le
 801499a:	2330      	movle	r3, #48	; 0x30
 801499c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80149a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80149a4:	1b52      	subs	r2, r2, r5
 80149a6:	6122      	str	r2, [r4, #16]
 80149a8:	f8cd a000 	str.w	sl, [sp]
 80149ac:	464b      	mov	r3, r9
 80149ae:	aa03      	add	r2, sp, #12
 80149b0:	4621      	mov	r1, r4
 80149b2:	4640      	mov	r0, r8
 80149b4:	f7ff fee4 	bl	8014780 <_printf_common>
 80149b8:	3001      	adds	r0, #1
 80149ba:	d14a      	bne.n	8014a52 <_printf_i+0x1f6>
 80149bc:	f04f 30ff 	mov.w	r0, #4294967295
 80149c0:	b004      	add	sp, #16
 80149c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149c6:	6823      	ldr	r3, [r4, #0]
 80149c8:	f043 0320 	orr.w	r3, r3, #32
 80149cc:	6023      	str	r3, [r4, #0]
 80149ce:	4833      	ldr	r0, [pc, #204]	; (8014a9c <_printf_i+0x240>)
 80149d0:	2778      	movs	r7, #120	; 0x78
 80149d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80149d6:	6823      	ldr	r3, [r4, #0]
 80149d8:	6829      	ldr	r1, [r5, #0]
 80149da:	061f      	lsls	r7, r3, #24
 80149dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80149e0:	d402      	bmi.n	80149e8 <_printf_i+0x18c>
 80149e2:	065f      	lsls	r7, r3, #25
 80149e4:	bf48      	it	mi
 80149e6:	b2b6      	uxthmi	r6, r6
 80149e8:	07df      	lsls	r7, r3, #31
 80149ea:	bf48      	it	mi
 80149ec:	f043 0320 	orrmi.w	r3, r3, #32
 80149f0:	6029      	str	r1, [r5, #0]
 80149f2:	bf48      	it	mi
 80149f4:	6023      	strmi	r3, [r4, #0]
 80149f6:	b91e      	cbnz	r6, 8014a00 <_printf_i+0x1a4>
 80149f8:	6823      	ldr	r3, [r4, #0]
 80149fa:	f023 0320 	bic.w	r3, r3, #32
 80149fe:	6023      	str	r3, [r4, #0]
 8014a00:	2310      	movs	r3, #16
 8014a02:	e7a7      	b.n	8014954 <_printf_i+0xf8>
 8014a04:	4824      	ldr	r0, [pc, #144]	; (8014a98 <_printf_i+0x23c>)
 8014a06:	e7e4      	b.n	80149d2 <_printf_i+0x176>
 8014a08:	4615      	mov	r5, r2
 8014a0a:	e7bd      	b.n	8014988 <_printf_i+0x12c>
 8014a0c:	682b      	ldr	r3, [r5, #0]
 8014a0e:	6826      	ldr	r6, [r4, #0]
 8014a10:	6961      	ldr	r1, [r4, #20]
 8014a12:	1d18      	adds	r0, r3, #4
 8014a14:	6028      	str	r0, [r5, #0]
 8014a16:	0635      	lsls	r5, r6, #24
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	d501      	bpl.n	8014a20 <_printf_i+0x1c4>
 8014a1c:	6019      	str	r1, [r3, #0]
 8014a1e:	e002      	b.n	8014a26 <_printf_i+0x1ca>
 8014a20:	0670      	lsls	r0, r6, #25
 8014a22:	d5fb      	bpl.n	8014a1c <_printf_i+0x1c0>
 8014a24:	8019      	strh	r1, [r3, #0]
 8014a26:	2300      	movs	r3, #0
 8014a28:	6123      	str	r3, [r4, #16]
 8014a2a:	4615      	mov	r5, r2
 8014a2c:	e7bc      	b.n	80149a8 <_printf_i+0x14c>
 8014a2e:	682b      	ldr	r3, [r5, #0]
 8014a30:	1d1a      	adds	r2, r3, #4
 8014a32:	602a      	str	r2, [r5, #0]
 8014a34:	681d      	ldr	r5, [r3, #0]
 8014a36:	6862      	ldr	r2, [r4, #4]
 8014a38:	2100      	movs	r1, #0
 8014a3a:	4628      	mov	r0, r5
 8014a3c:	f7eb fbc8 	bl	80001d0 <memchr>
 8014a40:	b108      	cbz	r0, 8014a46 <_printf_i+0x1ea>
 8014a42:	1b40      	subs	r0, r0, r5
 8014a44:	6060      	str	r0, [r4, #4]
 8014a46:	6863      	ldr	r3, [r4, #4]
 8014a48:	6123      	str	r3, [r4, #16]
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a50:	e7aa      	b.n	80149a8 <_printf_i+0x14c>
 8014a52:	6923      	ldr	r3, [r4, #16]
 8014a54:	462a      	mov	r2, r5
 8014a56:	4649      	mov	r1, r9
 8014a58:	4640      	mov	r0, r8
 8014a5a:	47d0      	blx	sl
 8014a5c:	3001      	adds	r0, #1
 8014a5e:	d0ad      	beq.n	80149bc <_printf_i+0x160>
 8014a60:	6823      	ldr	r3, [r4, #0]
 8014a62:	079b      	lsls	r3, r3, #30
 8014a64:	d413      	bmi.n	8014a8e <_printf_i+0x232>
 8014a66:	68e0      	ldr	r0, [r4, #12]
 8014a68:	9b03      	ldr	r3, [sp, #12]
 8014a6a:	4298      	cmp	r0, r3
 8014a6c:	bfb8      	it	lt
 8014a6e:	4618      	movlt	r0, r3
 8014a70:	e7a6      	b.n	80149c0 <_printf_i+0x164>
 8014a72:	2301      	movs	r3, #1
 8014a74:	4632      	mov	r2, r6
 8014a76:	4649      	mov	r1, r9
 8014a78:	4640      	mov	r0, r8
 8014a7a:	47d0      	blx	sl
 8014a7c:	3001      	adds	r0, #1
 8014a7e:	d09d      	beq.n	80149bc <_printf_i+0x160>
 8014a80:	3501      	adds	r5, #1
 8014a82:	68e3      	ldr	r3, [r4, #12]
 8014a84:	9903      	ldr	r1, [sp, #12]
 8014a86:	1a5b      	subs	r3, r3, r1
 8014a88:	42ab      	cmp	r3, r5
 8014a8a:	dcf2      	bgt.n	8014a72 <_printf_i+0x216>
 8014a8c:	e7eb      	b.n	8014a66 <_printf_i+0x20a>
 8014a8e:	2500      	movs	r5, #0
 8014a90:	f104 0619 	add.w	r6, r4, #25
 8014a94:	e7f5      	b.n	8014a82 <_printf_i+0x226>
 8014a96:	bf00      	nop
 8014a98:	0801affb 	.word	0x0801affb
 8014a9c:	0801b00c 	.word	0x0801b00c

08014aa0 <_scanf_float>:
 8014aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aa4:	b087      	sub	sp, #28
 8014aa6:	4617      	mov	r7, r2
 8014aa8:	9303      	str	r3, [sp, #12]
 8014aaa:	688b      	ldr	r3, [r1, #8]
 8014aac:	1e5a      	subs	r2, r3, #1
 8014aae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014ab2:	bf83      	ittte	hi
 8014ab4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014ab8:	195b      	addhi	r3, r3, r5
 8014aba:	9302      	strhi	r3, [sp, #8]
 8014abc:	2300      	movls	r3, #0
 8014abe:	bf86      	itte	hi
 8014ac0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014ac4:	608b      	strhi	r3, [r1, #8]
 8014ac6:	9302      	strls	r3, [sp, #8]
 8014ac8:	680b      	ldr	r3, [r1, #0]
 8014aca:	468b      	mov	fp, r1
 8014acc:	2500      	movs	r5, #0
 8014ace:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014ad2:	f84b 3b1c 	str.w	r3, [fp], #28
 8014ad6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014ada:	4680      	mov	r8, r0
 8014adc:	460c      	mov	r4, r1
 8014ade:	465e      	mov	r6, fp
 8014ae0:	46aa      	mov	sl, r5
 8014ae2:	46a9      	mov	r9, r5
 8014ae4:	9501      	str	r5, [sp, #4]
 8014ae6:	68a2      	ldr	r2, [r4, #8]
 8014ae8:	b152      	cbz	r2, 8014b00 <_scanf_float+0x60>
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	781b      	ldrb	r3, [r3, #0]
 8014aee:	2b4e      	cmp	r3, #78	; 0x4e
 8014af0:	d864      	bhi.n	8014bbc <_scanf_float+0x11c>
 8014af2:	2b40      	cmp	r3, #64	; 0x40
 8014af4:	d83c      	bhi.n	8014b70 <_scanf_float+0xd0>
 8014af6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014afa:	b2c8      	uxtb	r0, r1
 8014afc:	280e      	cmp	r0, #14
 8014afe:	d93a      	bls.n	8014b76 <_scanf_float+0xd6>
 8014b00:	f1b9 0f00 	cmp.w	r9, #0
 8014b04:	d003      	beq.n	8014b0e <_scanf_float+0x6e>
 8014b06:	6823      	ldr	r3, [r4, #0]
 8014b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014b0c:	6023      	str	r3, [r4, #0]
 8014b0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014b12:	f1ba 0f01 	cmp.w	sl, #1
 8014b16:	f200 8113 	bhi.w	8014d40 <_scanf_float+0x2a0>
 8014b1a:	455e      	cmp	r6, fp
 8014b1c:	f200 8105 	bhi.w	8014d2a <_scanf_float+0x28a>
 8014b20:	2501      	movs	r5, #1
 8014b22:	4628      	mov	r0, r5
 8014b24:	b007      	add	sp, #28
 8014b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b2a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014b2e:	2a0d      	cmp	r2, #13
 8014b30:	d8e6      	bhi.n	8014b00 <_scanf_float+0x60>
 8014b32:	a101      	add	r1, pc, #4	; (adr r1, 8014b38 <_scanf_float+0x98>)
 8014b34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014b38:	08014c77 	.word	0x08014c77
 8014b3c:	08014b01 	.word	0x08014b01
 8014b40:	08014b01 	.word	0x08014b01
 8014b44:	08014b01 	.word	0x08014b01
 8014b48:	08014cd7 	.word	0x08014cd7
 8014b4c:	08014caf 	.word	0x08014caf
 8014b50:	08014b01 	.word	0x08014b01
 8014b54:	08014b01 	.word	0x08014b01
 8014b58:	08014c85 	.word	0x08014c85
 8014b5c:	08014b01 	.word	0x08014b01
 8014b60:	08014b01 	.word	0x08014b01
 8014b64:	08014b01 	.word	0x08014b01
 8014b68:	08014b01 	.word	0x08014b01
 8014b6c:	08014c3d 	.word	0x08014c3d
 8014b70:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014b74:	e7db      	b.n	8014b2e <_scanf_float+0x8e>
 8014b76:	290e      	cmp	r1, #14
 8014b78:	d8c2      	bhi.n	8014b00 <_scanf_float+0x60>
 8014b7a:	a001      	add	r0, pc, #4	; (adr r0, 8014b80 <_scanf_float+0xe0>)
 8014b7c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014b80:	08014c2f 	.word	0x08014c2f
 8014b84:	08014b01 	.word	0x08014b01
 8014b88:	08014c2f 	.word	0x08014c2f
 8014b8c:	08014cc3 	.word	0x08014cc3
 8014b90:	08014b01 	.word	0x08014b01
 8014b94:	08014bdd 	.word	0x08014bdd
 8014b98:	08014c19 	.word	0x08014c19
 8014b9c:	08014c19 	.word	0x08014c19
 8014ba0:	08014c19 	.word	0x08014c19
 8014ba4:	08014c19 	.word	0x08014c19
 8014ba8:	08014c19 	.word	0x08014c19
 8014bac:	08014c19 	.word	0x08014c19
 8014bb0:	08014c19 	.word	0x08014c19
 8014bb4:	08014c19 	.word	0x08014c19
 8014bb8:	08014c19 	.word	0x08014c19
 8014bbc:	2b6e      	cmp	r3, #110	; 0x6e
 8014bbe:	d809      	bhi.n	8014bd4 <_scanf_float+0x134>
 8014bc0:	2b60      	cmp	r3, #96	; 0x60
 8014bc2:	d8b2      	bhi.n	8014b2a <_scanf_float+0x8a>
 8014bc4:	2b54      	cmp	r3, #84	; 0x54
 8014bc6:	d077      	beq.n	8014cb8 <_scanf_float+0x218>
 8014bc8:	2b59      	cmp	r3, #89	; 0x59
 8014bca:	d199      	bne.n	8014b00 <_scanf_float+0x60>
 8014bcc:	2d07      	cmp	r5, #7
 8014bce:	d197      	bne.n	8014b00 <_scanf_float+0x60>
 8014bd0:	2508      	movs	r5, #8
 8014bd2:	e029      	b.n	8014c28 <_scanf_float+0x188>
 8014bd4:	2b74      	cmp	r3, #116	; 0x74
 8014bd6:	d06f      	beq.n	8014cb8 <_scanf_float+0x218>
 8014bd8:	2b79      	cmp	r3, #121	; 0x79
 8014bda:	e7f6      	b.n	8014bca <_scanf_float+0x12a>
 8014bdc:	6821      	ldr	r1, [r4, #0]
 8014bde:	05c8      	lsls	r0, r1, #23
 8014be0:	d51a      	bpl.n	8014c18 <_scanf_float+0x178>
 8014be2:	9b02      	ldr	r3, [sp, #8]
 8014be4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014be8:	6021      	str	r1, [r4, #0]
 8014bea:	f109 0901 	add.w	r9, r9, #1
 8014bee:	b11b      	cbz	r3, 8014bf8 <_scanf_float+0x158>
 8014bf0:	3b01      	subs	r3, #1
 8014bf2:	3201      	adds	r2, #1
 8014bf4:	9302      	str	r3, [sp, #8]
 8014bf6:	60a2      	str	r2, [r4, #8]
 8014bf8:	68a3      	ldr	r3, [r4, #8]
 8014bfa:	3b01      	subs	r3, #1
 8014bfc:	60a3      	str	r3, [r4, #8]
 8014bfe:	6923      	ldr	r3, [r4, #16]
 8014c00:	3301      	adds	r3, #1
 8014c02:	6123      	str	r3, [r4, #16]
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	3b01      	subs	r3, #1
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	607b      	str	r3, [r7, #4]
 8014c0c:	f340 8084 	ble.w	8014d18 <_scanf_float+0x278>
 8014c10:	683b      	ldr	r3, [r7, #0]
 8014c12:	3301      	adds	r3, #1
 8014c14:	603b      	str	r3, [r7, #0]
 8014c16:	e766      	b.n	8014ae6 <_scanf_float+0x46>
 8014c18:	eb1a 0f05 	cmn.w	sl, r5
 8014c1c:	f47f af70 	bne.w	8014b00 <_scanf_float+0x60>
 8014c20:	6822      	ldr	r2, [r4, #0]
 8014c22:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8014c26:	6022      	str	r2, [r4, #0]
 8014c28:	f806 3b01 	strb.w	r3, [r6], #1
 8014c2c:	e7e4      	b.n	8014bf8 <_scanf_float+0x158>
 8014c2e:	6822      	ldr	r2, [r4, #0]
 8014c30:	0610      	lsls	r0, r2, #24
 8014c32:	f57f af65 	bpl.w	8014b00 <_scanf_float+0x60>
 8014c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014c3a:	e7f4      	b.n	8014c26 <_scanf_float+0x186>
 8014c3c:	f1ba 0f00 	cmp.w	sl, #0
 8014c40:	d10e      	bne.n	8014c60 <_scanf_float+0x1c0>
 8014c42:	f1b9 0f00 	cmp.w	r9, #0
 8014c46:	d10e      	bne.n	8014c66 <_scanf_float+0x1c6>
 8014c48:	6822      	ldr	r2, [r4, #0]
 8014c4a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014c4e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014c52:	d108      	bne.n	8014c66 <_scanf_float+0x1c6>
 8014c54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014c58:	6022      	str	r2, [r4, #0]
 8014c5a:	f04f 0a01 	mov.w	sl, #1
 8014c5e:	e7e3      	b.n	8014c28 <_scanf_float+0x188>
 8014c60:	f1ba 0f02 	cmp.w	sl, #2
 8014c64:	d055      	beq.n	8014d12 <_scanf_float+0x272>
 8014c66:	2d01      	cmp	r5, #1
 8014c68:	d002      	beq.n	8014c70 <_scanf_float+0x1d0>
 8014c6a:	2d04      	cmp	r5, #4
 8014c6c:	f47f af48 	bne.w	8014b00 <_scanf_float+0x60>
 8014c70:	3501      	adds	r5, #1
 8014c72:	b2ed      	uxtb	r5, r5
 8014c74:	e7d8      	b.n	8014c28 <_scanf_float+0x188>
 8014c76:	f1ba 0f01 	cmp.w	sl, #1
 8014c7a:	f47f af41 	bne.w	8014b00 <_scanf_float+0x60>
 8014c7e:	f04f 0a02 	mov.w	sl, #2
 8014c82:	e7d1      	b.n	8014c28 <_scanf_float+0x188>
 8014c84:	b97d      	cbnz	r5, 8014ca6 <_scanf_float+0x206>
 8014c86:	f1b9 0f00 	cmp.w	r9, #0
 8014c8a:	f47f af3c 	bne.w	8014b06 <_scanf_float+0x66>
 8014c8e:	6822      	ldr	r2, [r4, #0]
 8014c90:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014c94:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014c98:	f47f af39 	bne.w	8014b0e <_scanf_float+0x6e>
 8014c9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014ca0:	6022      	str	r2, [r4, #0]
 8014ca2:	2501      	movs	r5, #1
 8014ca4:	e7c0      	b.n	8014c28 <_scanf_float+0x188>
 8014ca6:	2d03      	cmp	r5, #3
 8014ca8:	d0e2      	beq.n	8014c70 <_scanf_float+0x1d0>
 8014caa:	2d05      	cmp	r5, #5
 8014cac:	e7de      	b.n	8014c6c <_scanf_float+0x1cc>
 8014cae:	2d02      	cmp	r5, #2
 8014cb0:	f47f af26 	bne.w	8014b00 <_scanf_float+0x60>
 8014cb4:	2503      	movs	r5, #3
 8014cb6:	e7b7      	b.n	8014c28 <_scanf_float+0x188>
 8014cb8:	2d06      	cmp	r5, #6
 8014cba:	f47f af21 	bne.w	8014b00 <_scanf_float+0x60>
 8014cbe:	2507      	movs	r5, #7
 8014cc0:	e7b2      	b.n	8014c28 <_scanf_float+0x188>
 8014cc2:	6822      	ldr	r2, [r4, #0]
 8014cc4:	0591      	lsls	r1, r2, #22
 8014cc6:	f57f af1b 	bpl.w	8014b00 <_scanf_float+0x60>
 8014cca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014cce:	6022      	str	r2, [r4, #0]
 8014cd0:	f8cd 9004 	str.w	r9, [sp, #4]
 8014cd4:	e7a8      	b.n	8014c28 <_scanf_float+0x188>
 8014cd6:	6822      	ldr	r2, [r4, #0]
 8014cd8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8014cdc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8014ce0:	d006      	beq.n	8014cf0 <_scanf_float+0x250>
 8014ce2:	0550      	lsls	r0, r2, #21
 8014ce4:	f57f af0c 	bpl.w	8014b00 <_scanf_float+0x60>
 8014ce8:	f1b9 0f00 	cmp.w	r9, #0
 8014cec:	f43f af0f 	beq.w	8014b0e <_scanf_float+0x6e>
 8014cf0:	0591      	lsls	r1, r2, #22
 8014cf2:	bf58      	it	pl
 8014cf4:	9901      	ldrpl	r1, [sp, #4]
 8014cf6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014cfa:	bf58      	it	pl
 8014cfc:	eba9 0101 	subpl.w	r1, r9, r1
 8014d00:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014d04:	bf58      	it	pl
 8014d06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014d0a:	6022      	str	r2, [r4, #0]
 8014d0c:	f04f 0900 	mov.w	r9, #0
 8014d10:	e78a      	b.n	8014c28 <_scanf_float+0x188>
 8014d12:	f04f 0a03 	mov.w	sl, #3
 8014d16:	e787      	b.n	8014c28 <_scanf_float+0x188>
 8014d18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014d1c:	4639      	mov	r1, r7
 8014d1e:	4640      	mov	r0, r8
 8014d20:	4798      	blx	r3
 8014d22:	2800      	cmp	r0, #0
 8014d24:	f43f aedf 	beq.w	8014ae6 <_scanf_float+0x46>
 8014d28:	e6ea      	b.n	8014b00 <_scanf_float+0x60>
 8014d2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014d2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014d32:	463a      	mov	r2, r7
 8014d34:	4640      	mov	r0, r8
 8014d36:	4798      	blx	r3
 8014d38:	6923      	ldr	r3, [r4, #16]
 8014d3a:	3b01      	subs	r3, #1
 8014d3c:	6123      	str	r3, [r4, #16]
 8014d3e:	e6ec      	b.n	8014b1a <_scanf_float+0x7a>
 8014d40:	1e6b      	subs	r3, r5, #1
 8014d42:	2b06      	cmp	r3, #6
 8014d44:	d825      	bhi.n	8014d92 <_scanf_float+0x2f2>
 8014d46:	2d02      	cmp	r5, #2
 8014d48:	d836      	bhi.n	8014db8 <_scanf_float+0x318>
 8014d4a:	455e      	cmp	r6, fp
 8014d4c:	f67f aee8 	bls.w	8014b20 <_scanf_float+0x80>
 8014d50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014d54:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014d58:	463a      	mov	r2, r7
 8014d5a:	4640      	mov	r0, r8
 8014d5c:	4798      	blx	r3
 8014d5e:	6923      	ldr	r3, [r4, #16]
 8014d60:	3b01      	subs	r3, #1
 8014d62:	6123      	str	r3, [r4, #16]
 8014d64:	e7f1      	b.n	8014d4a <_scanf_float+0x2aa>
 8014d66:	9802      	ldr	r0, [sp, #8]
 8014d68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014d6c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8014d70:	9002      	str	r0, [sp, #8]
 8014d72:	463a      	mov	r2, r7
 8014d74:	4640      	mov	r0, r8
 8014d76:	4798      	blx	r3
 8014d78:	6923      	ldr	r3, [r4, #16]
 8014d7a:	3b01      	subs	r3, #1
 8014d7c:	6123      	str	r3, [r4, #16]
 8014d7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d82:	fa5f fa8a 	uxtb.w	sl, sl
 8014d86:	f1ba 0f02 	cmp.w	sl, #2
 8014d8a:	d1ec      	bne.n	8014d66 <_scanf_float+0x2c6>
 8014d8c:	3d03      	subs	r5, #3
 8014d8e:	b2ed      	uxtb	r5, r5
 8014d90:	1b76      	subs	r6, r6, r5
 8014d92:	6823      	ldr	r3, [r4, #0]
 8014d94:	05da      	lsls	r2, r3, #23
 8014d96:	d52f      	bpl.n	8014df8 <_scanf_float+0x358>
 8014d98:	055b      	lsls	r3, r3, #21
 8014d9a:	d510      	bpl.n	8014dbe <_scanf_float+0x31e>
 8014d9c:	455e      	cmp	r6, fp
 8014d9e:	f67f aebf 	bls.w	8014b20 <_scanf_float+0x80>
 8014da2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014da6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014daa:	463a      	mov	r2, r7
 8014dac:	4640      	mov	r0, r8
 8014dae:	4798      	blx	r3
 8014db0:	6923      	ldr	r3, [r4, #16]
 8014db2:	3b01      	subs	r3, #1
 8014db4:	6123      	str	r3, [r4, #16]
 8014db6:	e7f1      	b.n	8014d9c <_scanf_float+0x2fc>
 8014db8:	46aa      	mov	sl, r5
 8014dba:	9602      	str	r6, [sp, #8]
 8014dbc:	e7df      	b.n	8014d7e <_scanf_float+0x2de>
 8014dbe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014dc2:	6923      	ldr	r3, [r4, #16]
 8014dc4:	2965      	cmp	r1, #101	; 0x65
 8014dc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8014dca:	f106 35ff 	add.w	r5, r6, #4294967295
 8014dce:	6123      	str	r3, [r4, #16]
 8014dd0:	d00c      	beq.n	8014dec <_scanf_float+0x34c>
 8014dd2:	2945      	cmp	r1, #69	; 0x45
 8014dd4:	d00a      	beq.n	8014dec <_scanf_float+0x34c>
 8014dd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014dda:	463a      	mov	r2, r7
 8014ddc:	4640      	mov	r0, r8
 8014dde:	4798      	blx	r3
 8014de0:	6923      	ldr	r3, [r4, #16]
 8014de2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014de6:	3b01      	subs	r3, #1
 8014de8:	1eb5      	subs	r5, r6, #2
 8014dea:	6123      	str	r3, [r4, #16]
 8014dec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014df0:	463a      	mov	r2, r7
 8014df2:	4640      	mov	r0, r8
 8014df4:	4798      	blx	r3
 8014df6:	462e      	mov	r6, r5
 8014df8:	6825      	ldr	r5, [r4, #0]
 8014dfa:	f015 0510 	ands.w	r5, r5, #16
 8014dfe:	d158      	bne.n	8014eb2 <_scanf_float+0x412>
 8014e00:	7035      	strb	r5, [r6, #0]
 8014e02:	6823      	ldr	r3, [r4, #0]
 8014e04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014e0c:	d11c      	bne.n	8014e48 <_scanf_float+0x3a8>
 8014e0e:	9b01      	ldr	r3, [sp, #4]
 8014e10:	454b      	cmp	r3, r9
 8014e12:	eba3 0209 	sub.w	r2, r3, r9
 8014e16:	d124      	bne.n	8014e62 <_scanf_float+0x3c2>
 8014e18:	2200      	movs	r2, #0
 8014e1a:	4659      	mov	r1, fp
 8014e1c:	4640      	mov	r0, r8
 8014e1e:	f7ff f8df 	bl	8013fe0 <_strtod_r>
 8014e22:	9b03      	ldr	r3, [sp, #12]
 8014e24:	6821      	ldr	r1, [r4, #0]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	f011 0f02 	tst.w	r1, #2
 8014e2c:	ec57 6b10 	vmov	r6, r7, d0
 8014e30:	f103 0204 	add.w	r2, r3, #4
 8014e34:	d020      	beq.n	8014e78 <_scanf_float+0x3d8>
 8014e36:	9903      	ldr	r1, [sp, #12]
 8014e38:	600a      	str	r2, [r1, #0]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	e9c3 6700 	strd	r6, r7, [r3]
 8014e40:	68e3      	ldr	r3, [r4, #12]
 8014e42:	3301      	adds	r3, #1
 8014e44:	60e3      	str	r3, [r4, #12]
 8014e46:	e66c      	b.n	8014b22 <_scanf_float+0x82>
 8014e48:	9b04      	ldr	r3, [sp, #16]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d0e4      	beq.n	8014e18 <_scanf_float+0x378>
 8014e4e:	9905      	ldr	r1, [sp, #20]
 8014e50:	230a      	movs	r3, #10
 8014e52:	462a      	mov	r2, r5
 8014e54:	3101      	adds	r1, #1
 8014e56:	4640      	mov	r0, r8
 8014e58:	f7ff f9b0 	bl	80141bc <_strtol_r>
 8014e5c:	9b04      	ldr	r3, [sp, #16]
 8014e5e:	9e05      	ldr	r6, [sp, #20]
 8014e60:	1ac2      	subs	r2, r0, r3
 8014e62:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014e66:	429e      	cmp	r6, r3
 8014e68:	bf28      	it	cs
 8014e6a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8014e6e:	4912      	ldr	r1, [pc, #72]	; (8014eb8 <_scanf_float+0x418>)
 8014e70:	4630      	mov	r0, r6
 8014e72:	f000 f91b 	bl	80150ac <siprintf>
 8014e76:	e7cf      	b.n	8014e18 <_scanf_float+0x378>
 8014e78:	f011 0f04 	tst.w	r1, #4
 8014e7c:	9903      	ldr	r1, [sp, #12]
 8014e7e:	600a      	str	r2, [r1, #0]
 8014e80:	d1db      	bne.n	8014e3a <_scanf_float+0x39a>
 8014e82:	f8d3 8000 	ldr.w	r8, [r3]
 8014e86:	ee10 2a10 	vmov	r2, s0
 8014e8a:	ee10 0a10 	vmov	r0, s0
 8014e8e:	463b      	mov	r3, r7
 8014e90:	4639      	mov	r1, r7
 8014e92:	f7eb fe4b 	bl	8000b2c <__aeabi_dcmpun>
 8014e96:	b128      	cbz	r0, 8014ea4 <_scanf_float+0x404>
 8014e98:	4808      	ldr	r0, [pc, #32]	; (8014ebc <_scanf_float+0x41c>)
 8014e9a:	f000 fa9d 	bl	80153d8 <nanf>
 8014e9e:	ed88 0a00 	vstr	s0, [r8]
 8014ea2:	e7cd      	b.n	8014e40 <_scanf_float+0x3a0>
 8014ea4:	4630      	mov	r0, r6
 8014ea6:	4639      	mov	r1, r7
 8014ea8:	f7eb fe9e 	bl	8000be8 <__aeabi_d2f>
 8014eac:	f8c8 0000 	str.w	r0, [r8]
 8014eb0:	e7c6      	b.n	8014e40 <_scanf_float+0x3a0>
 8014eb2:	2500      	movs	r5, #0
 8014eb4:	e635      	b.n	8014b22 <_scanf_float+0x82>
 8014eb6:	bf00      	nop
 8014eb8:	0801b01d 	.word	0x0801b01d
 8014ebc:	0801b0d6 	.word	0x0801b0d6

08014ec0 <std>:
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	b510      	push	{r4, lr}
 8014ec4:	4604      	mov	r4, r0
 8014ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8014eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ece:	6083      	str	r3, [r0, #8]
 8014ed0:	8181      	strh	r1, [r0, #12]
 8014ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8014ed4:	81c2      	strh	r2, [r0, #14]
 8014ed6:	6183      	str	r3, [r0, #24]
 8014ed8:	4619      	mov	r1, r3
 8014eda:	2208      	movs	r2, #8
 8014edc:	305c      	adds	r0, #92	; 0x5c
 8014ede:	f000 f948 	bl	8015172 <memset>
 8014ee2:	4b0d      	ldr	r3, [pc, #52]	; (8014f18 <std+0x58>)
 8014ee4:	6263      	str	r3, [r4, #36]	; 0x24
 8014ee6:	4b0d      	ldr	r3, [pc, #52]	; (8014f1c <std+0x5c>)
 8014ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8014eea:	4b0d      	ldr	r3, [pc, #52]	; (8014f20 <std+0x60>)
 8014eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014eee:	4b0d      	ldr	r3, [pc, #52]	; (8014f24 <std+0x64>)
 8014ef0:	6323      	str	r3, [r4, #48]	; 0x30
 8014ef2:	4b0d      	ldr	r3, [pc, #52]	; (8014f28 <std+0x68>)
 8014ef4:	6224      	str	r4, [r4, #32]
 8014ef6:	429c      	cmp	r4, r3
 8014ef8:	d006      	beq.n	8014f08 <std+0x48>
 8014efa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014efe:	4294      	cmp	r4, r2
 8014f00:	d002      	beq.n	8014f08 <std+0x48>
 8014f02:	33d0      	adds	r3, #208	; 0xd0
 8014f04:	429c      	cmp	r4, r3
 8014f06:	d105      	bne.n	8014f14 <std+0x54>
 8014f08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f10:	f000 ba40 	b.w	8015394 <__retarget_lock_init_recursive>
 8014f14:	bd10      	pop	{r4, pc}
 8014f16:	bf00      	nop
 8014f18:	080150ed 	.word	0x080150ed
 8014f1c:	0801510f 	.word	0x0801510f
 8014f20:	08015147 	.word	0x08015147
 8014f24:	0801516b 	.word	0x0801516b
 8014f28:	20002270 	.word	0x20002270

08014f2c <stdio_exit_handler>:
 8014f2c:	4a02      	ldr	r2, [pc, #8]	; (8014f38 <stdio_exit_handler+0xc>)
 8014f2e:	4903      	ldr	r1, [pc, #12]	; (8014f3c <stdio_exit_handler+0x10>)
 8014f30:	4803      	ldr	r0, [pc, #12]	; (8014f40 <stdio_exit_handler+0x14>)
 8014f32:	f000 b869 	b.w	8015008 <_fwalk_sglue>
 8014f36:	bf00      	nop
 8014f38:	2000012c 	.word	0x2000012c
 8014f3c:	080175b1 	.word	0x080175b1
 8014f40:	200002a4 	.word	0x200002a4

08014f44 <cleanup_stdio>:
 8014f44:	6841      	ldr	r1, [r0, #4]
 8014f46:	4b0c      	ldr	r3, [pc, #48]	; (8014f78 <cleanup_stdio+0x34>)
 8014f48:	4299      	cmp	r1, r3
 8014f4a:	b510      	push	{r4, lr}
 8014f4c:	4604      	mov	r4, r0
 8014f4e:	d001      	beq.n	8014f54 <cleanup_stdio+0x10>
 8014f50:	f002 fb2e 	bl	80175b0 <_fflush_r>
 8014f54:	68a1      	ldr	r1, [r4, #8]
 8014f56:	4b09      	ldr	r3, [pc, #36]	; (8014f7c <cleanup_stdio+0x38>)
 8014f58:	4299      	cmp	r1, r3
 8014f5a:	d002      	beq.n	8014f62 <cleanup_stdio+0x1e>
 8014f5c:	4620      	mov	r0, r4
 8014f5e:	f002 fb27 	bl	80175b0 <_fflush_r>
 8014f62:	68e1      	ldr	r1, [r4, #12]
 8014f64:	4b06      	ldr	r3, [pc, #24]	; (8014f80 <cleanup_stdio+0x3c>)
 8014f66:	4299      	cmp	r1, r3
 8014f68:	d004      	beq.n	8014f74 <cleanup_stdio+0x30>
 8014f6a:	4620      	mov	r0, r4
 8014f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f70:	f002 bb1e 	b.w	80175b0 <_fflush_r>
 8014f74:	bd10      	pop	{r4, pc}
 8014f76:	bf00      	nop
 8014f78:	20002270 	.word	0x20002270
 8014f7c:	200022d8 	.word	0x200022d8
 8014f80:	20002340 	.word	0x20002340

08014f84 <global_stdio_init.part.0>:
 8014f84:	b510      	push	{r4, lr}
 8014f86:	4b0b      	ldr	r3, [pc, #44]	; (8014fb4 <global_stdio_init.part.0+0x30>)
 8014f88:	4c0b      	ldr	r4, [pc, #44]	; (8014fb8 <global_stdio_init.part.0+0x34>)
 8014f8a:	4a0c      	ldr	r2, [pc, #48]	; (8014fbc <global_stdio_init.part.0+0x38>)
 8014f8c:	601a      	str	r2, [r3, #0]
 8014f8e:	4620      	mov	r0, r4
 8014f90:	2200      	movs	r2, #0
 8014f92:	2104      	movs	r1, #4
 8014f94:	f7ff ff94 	bl	8014ec0 <std>
 8014f98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014f9c:	2201      	movs	r2, #1
 8014f9e:	2109      	movs	r1, #9
 8014fa0:	f7ff ff8e 	bl	8014ec0 <std>
 8014fa4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014fa8:	2202      	movs	r2, #2
 8014faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fae:	2112      	movs	r1, #18
 8014fb0:	f7ff bf86 	b.w	8014ec0 <std>
 8014fb4:	200023a8 	.word	0x200023a8
 8014fb8:	20002270 	.word	0x20002270
 8014fbc:	08014f2d 	.word	0x08014f2d

08014fc0 <__sfp_lock_acquire>:
 8014fc0:	4801      	ldr	r0, [pc, #4]	; (8014fc8 <__sfp_lock_acquire+0x8>)
 8014fc2:	f000 b9e8 	b.w	8015396 <__retarget_lock_acquire_recursive>
 8014fc6:	bf00      	nop
 8014fc8:	200023b1 	.word	0x200023b1

08014fcc <__sfp_lock_release>:
 8014fcc:	4801      	ldr	r0, [pc, #4]	; (8014fd4 <__sfp_lock_release+0x8>)
 8014fce:	f000 b9e3 	b.w	8015398 <__retarget_lock_release_recursive>
 8014fd2:	bf00      	nop
 8014fd4:	200023b1 	.word	0x200023b1

08014fd8 <__sinit>:
 8014fd8:	b510      	push	{r4, lr}
 8014fda:	4604      	mov	r4, r0
 8014fdc:	f7ff fff0 	bl	8014fc0 <__sfp_lock_acquire>
 8014fe0:	6a23      	ldr	r3, [r4, #32]
 8014fe2:	b11b      	cbz	r3, 8014fec <__sinit+0x14>
 8014fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fe8:	f7ff bff0 	b.w	8014fcc <__sfp_lock_release>
 8014fec:	4b04      	ldr	r3, [pc, #16]	; (8015000 <__sinit+0x28>)
 8014fee:	6223      	str	r3, [r4, #32]
 8014ff0:	4b04      	ldr	r3, [pc, #16]	; (8015004 <__sinit+0x2c>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d1f5      	bne.n	8014fe4 <__sinit+0xc>
 8014ff8:	f7ff ffc4 	bl	8014f84 <global_stdio_init.part.0>
 8014ffc:	e7f2      	b.n	8014fe4 <__sinit+0xc>
 8014ffe:	bf00      	nop
 8015000:	08014f45 	.word	0x08014f45
 8015004:	200023a8 	.word	0x200023a8

08015008 <_fwalk_sglue>:
 8015008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801500c:	4607      	mov	r7, r0
 801500e:	4688      	mov	r8, r1
 8015010:	4614      	mov	r4, r2
 8015012:	2600      	movs	r6, #0
 8015014:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015018:	f1b9 0901 	subs.w	r9, r9, #1
 801501c:	d505      	bpl.n	801502a <_fwalk_sglue+0x22>
 801501e:	6824      	ldr	r4, [r4, #0]
 8015020:	2c00      	cmp	r4, #0
 8015022:	d1f7      	bne.n	8015014 <_fwalk_sglue+0xc>
 8015024:	4630      	mov	r0, r6
 8015026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801502a:	89ab      	ldrh	r3, [r5, #12]
 801502c:	2b01      	cmp	r3, #1
 801502e:	d907      	bls.n	8015040 <_fwalk_sglue+0x38>
 8015030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015034:	3301      	adds	r3, #1
 8015036:	d003      	beq.n	8015040 <_fwalk_sglue+0x38>
 8015038:	4629      	mov	r1, r5
 801503a:	4638      	mov	r0, r7
 801503c:	47c0      	blx	r8
 801503e:	4306      	orrs	r6, r0
 8015040:	3568      	adds	r5, #104	; 0x68
 8015042:	e7e9      	b.n	8015018 <_fwalk_sglue+0x10>

08015044 <sniprintf>:
 8015044:	b40c      	push	{r2, r3}
 8015046:	b530      	push	{r4, r5, lr}
 8015048:	4b17      	ldr	r3, [pc, #92]	; (80150a8 <sniprintf+0x64>)
 801504a:	1e0c      	subs	r4, r1, #0
 801504c:	681d      	ldr	r5, [r3, #0]
 801504e:	b09d      	sub	sp, #116	; 0x74
 8015050:	da08      	bge.n	8015064 <sniprintf+0x20>
 8015052:	238b      	movs	r3, #139	; 0x8b
 8015054:	602b      	str	r3, [r5, #0]
 8015056:	f04f 30ff 	mov.w	r0, #4294967295
 801505a:	b01d      	add	sp, #116	; 0x74
 801505c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015060:	b002      	add	sp, #8
 8015062:	4770      	bx	lr
 8015064:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015068:	f8ad 3014 	strh.w	r3, [sp, #20]
 801506c:	bf14      	ite	ne
 801506e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015072:	4623      	moveq	r3, r4
 8015074:	9304      	str	r3, [sp, #16]
 8015076:	9307      	str	r3, [sp, #28]
 8015078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801507c:	9002      	str	r0, [sp, #8]
 801507e:	9006      	str	r0, [sp, #24]
 8015080:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015084:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015086:	ab21      	add	r3, sp, #132	; 0x84
 8015088:	a902      	add	r1, sp, #8
 801508a:	4628      	mov	r0, r5
 801508c:	9301      	str	r3, [sp, #4]
 801508e:	f002 f90b 	bl	80172a8 <_svfiprintf_r>
 8015092:	1c43      	adds	r3, r0, #1
 8015094:	bfbc      	itt	lt
 8015096:	238b      	movlt	r3, #139	; 0x8b
 8015098:	602b      	strlt	r3, [r5, #0]
 801509a:	2c00      	cmp	r4, #0
 801509c:	d0dd      	beq.n	801505a <sniprintf+0x16>
 801509e:	9b02      	ldr	r3, [sp, #8]
 80150a0:	2200      	movs	r2, #0
 80150a2:	701a      	strb	r2, [r3, #0]
 80150a4:	e7d9      	b.n	801505a <sniprintf+0x16>
 80150a6:	bf00      	nop
 80150a8:	200002f0 	.word	0x200002f0

080150ac <siprintf>:
 80150ac:	b40e      	push	{r1, r2, r3}
 80150ae:	b500      	push	{lr}
 80150b0:	b09c      	sub	sp, #112	; 0x70
 80150b2:	ab1d      	add	r3, sp, #116	; 0x74
 80150b4:	9002      	str	r0, [sp, #8]
 80150b6:	9006      	str	r0, [sp, #24]
 80150b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80150bc:	4809      	ldr	r0, [pc, #36]	; (80150e4 <siprintf+0x38>)
 80150be:	9107      	str	r1, [sp, #28]
 80150c0:	9104      	str	r1, [sp, #16]
 80150c2:	4909      	ldr	r1, [pc, #36]	; (80150e8 <siprintf+0x3c>)
 80150c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80150c8:	9105      	str	r1, [sp, #20]
 80150ca:	6800      	ldr	r0, [r0, #0]
 80150cc:	9301      	str	r3, [sp, #4]
 80150ce:	a902      	add	r1, sp, #8
 80150d0:	f002 f8ea 	bl	80172a8 <_svfiprintf_r>
 80150d4:	9b02      	ldr	r3, [sp, #8]
 80150d6:	2200      	movs	r2, #0
 80150d8:	701a      	strb	r2, [r3, #0]
 80150da:	b01c      	add	sp, #112	; 0x70
 80150dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80150e0:	b003      	add	sp, #12
 80150e2:	4770      	bx	lr
 80150e4:	200002f0 	.word	0x200002f0
 80150e8:	ffff0208 	.word	0xffff0208

080150ec <__sread>:
 80150ec:	b510      	push	{r4, lr}
 80150ee:	460c      	mov	r4, r1
 80150f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150f4:	f000 f8f0 	bl	80152d8 <_read_r>
 80150f8:	2800      	cmp	r0, #0
 80150fa:	bfab      	itete	ge
 80150fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80150fe:	89a3      	ldrhlt	r3, [r4, #12]
 8015100:	181b      	addge	r3, r3, r0
 8015102:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015106:	bfac      	ite	ge
 8015108:	6563      	strge	r3, [r4, #84]	; 0x54
 801510a:	81a3      	strhlt	r3, [r4, #12]
 801510c:	bd10      	pop	{r4, pc}

0801510e <__swrite>:
 801510e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015112:	461f      	mov	r7, r3
 8015114:	898b      	ldrh	r3, [r1, #12]
 8015116:	05db      	lsls	r3, r3, #23
 8015118:	4605      	mov	r5, r0
 801511a:	460c      	mov	r4, r1
 801511c:	4616      	mov	r6, r2
 801511e:	d505      	bpl.n	801512c <__swrite+0x1e>
 8015120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015124:	2302      	movs	r3, #2
 8015126:	2200      	movs	r2, #0
 8015128:	f000 f8c4 	bl	80152b4 <_lseek_r>
 801512c:	89a3      	ldrh	r3, [r4, #12]
 801512e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015132:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015136:	81a3      	strh	r3, [r4, #12]
 8015138:	4632      	mov	r2, r6
 801513a:	463b      	mov	r3, r7
 801513c:	4628      	mov	r0, r5
 801513e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015142:	f000 b8eb 	b.w	801531c <_write_r>

08015146 <__sseek>:
 8015146:	b510      	push	{r4, lr}
 8015148:	460c      	mov	r4, r1
 801514a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801514e:	f000 f8b1 	bl	80152b4 <_lseek_r>
 8015152:	1c43      	adds	r3, r0, #1
 8015154:	89a3      	ldrh	r3, [r4, #12]
 8015156:	bf15      	itete	ne
 8015158:	6560      	strne	r0, [r4, #84]	; 0x54
 801515a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801515e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015162:	81a3      	strheq	r3, [r4, #12]
 8015164:	bf18      	it	ne
 8015166:	81a3      	strhne	r3, [r4, #12]
 8015168:	bd10      	pop	{r4, pc}

0801516a <__sclose>:
 801516a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801516e:	f000 b891 	b.w	8015294 <_close_r>

08015172 <memset>:
 8015172:	4402      	add	r2, r0
 8015174:	4603      	mov	r3, r0
 8015176:	4293      	cmp	r3, r2
 8015178:	d100      	bne.n	801517c <memset+0xa>
 801517a:	4770      	bx	lr
 801517c:	f803 1b01 	strb.w	r1, [r3], #1
 8015180:	e7f9      	b.n	8015176 <memset+0x4>

08015182 <strncmp>:
 8015182:	b510      	push	{r4, lr}
 8015184:	b16a      	cbz	r2, 80151a2 <strncmp+0x20>
 8015186:	3901      	subs	r1, #1
 8015188:	1884      	adds	r4, r0, r2
 801518a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801518e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015192:	429a      	cmp	r2, r3
 8015194:	d103      	bne.n	801519e <strncmp+0x1c>
 8015196:	42a0      	cmp	r0, r4
 8015198:	d001      	beq.n	801519e <strncmp+0x1c>
 801519a:	2a00      	cmp	r2, #0
 801519c:	d1f5      	bne.n	801518a <strncmp+0x8>
 801519e:	1ad0      	subs	r0, r2, r3
 80151a0:	bd10      	pop	{r4, pc}
 80151a2:	4610      	mov	r0, r2
 80151a4:	e7fc      	b.n	80151a0 <strncmp+0x1e>
	...

080151a8 <strtok>:
 80151a8:	4b16      	ldr	r3, [pc, #88]	; (8015204 <strtok+0x5c>)
 80151aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80151ac:	681e      	ldr	r6, [r3, #0]
 80151ae:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80151b0:	4605      	mov	r5, r0
 80151b2:	b9fc      	cbnz	r4, 80151f4 <strtok+0x4c>
 80151b4:	2050      	movs	r0, #80	; 0x50
 80151b6:	9101      	str	r1, [sp, #4]
 80151b8:	f7fe f848 	bl	801324c <malloc>
 80151bc:	9901      	ldr	r1, [sp, #4]
 80151be:	6470      	str	r0, [r6, #68]	; 0x44
 80151c0:	4602      	mov	r2, r0
 80151c2:	b920      	cbnz	r0, 80151ce <strtok+0x26>
 80151c4:	4b10      	ldr	r3, [pc, #64]	; (8015208 <strtok+0x60>)
 80151c6:	4811      	ldr	r0, [pc, #68]	; (801520c <strtok+0x64>)
 80151c8:	215b      	movs	r1, #91	; 0x5b
 80151ca:	f000 f90b 	bl	80153e4 <__assert_func>
 80151ce:	e9c0 4400 	strd	r4, r4, [r0]
 80151d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80151d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80151da:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80151de:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80151e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80151e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80151ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80151ee:	6184      	str	r4, [r0, #24]
 80151f0:	7704      	strb	r4, [r0, #28]
 80151f2:	6244      	str	r4, [r0, #36]	; 0x24
 80151f4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80151f6:	2301      	movs	r3, #1
 80151f8:	4628      	mov	r0, r5
 80151fa:	b002      	add	sp, #8
 80151fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015200:	f000 b806 	b.w	8015210 <__strtok_r>
 8015204:	200002f0 	.word	0x200002f0
 8015208:	0801b022 	.word	0x0801b022
 801520c:	0801b039 	.word	0x0801b039

08015210 <__strtok_r>:
 8015210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015212:	b908      	cbnz	r0, 8015218 <__strtok_r+0x8>
 8015214:	6810      	ldr	r0, [r2, #0]
 8015216:	b188      	cbz	r0, 801523c <__strtok_r+0x2c>
 8015218:	4604      	mov	r4, r0
 801521a:	4620      	mov	r0, r4
 801521c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015220:	460f      	mov	r7, r1
 8015222:	f817 6b01 	ldrb.w	r6, [r7], #1
 8015226:	b91e      	cbnz	r6, 8015230 <__strtok_r+0x20>
 8015228:	b965      	cbnz	r5, 8015244 <__strtok_r+0x34>
 801522a:	6015      	str	r5, [r2, #0]
 801522c:	4628      	mov	r0, r5
 801522e:	e005      	b.n	801523c <__strtok_r+0x2c>
 8015230:	42b5      	cmp	r5, r6
 8015232:	d1f6      	bne.n	8015222 <__strtok_r+0x12>
 8015234:	2b00      	cmp	r3, #0
 8015236:	d1f0      	bne.n	801521a <__strtok_r+0xa>
 8015238:	6014      	str	r4, [r2, #0]
 801523a:	7003      	strb	r3, [r0, #0]
 801523c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801523e:	461c      	mov	r4, r3
 8015240:	e00c      	b.n	801525c <__strtok_r+0x4c>
 8015242:	b915      	cbnz	r5, 801524a <__strtok_r+0x3a>
 8015244:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015248:	460e      	mov	r6, r1
 801524a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801524e:	42ab      	cmp	r3, r5
 8015250:	d1f7      	bne.n	8015242 <__strtok_r+0x32>
 8015252:	2b00      	cmp	r3, #0
 8015254:	d0f3      	beq.n	801523e <__strtok_r+0x2e>
 8015256:	2300      	movs	r3, #0
 8015258:	f804 3c01 	strb.w	r3, [r4, #-1]
 801525c:	6014      	str	r4, [r2, #0]
 801525e:	e7ed      	b.n	801523c <__strtok_r+0x2c>

08015260 <strstr>:
 8015260:	780a      	ldrb	r2, [r1, #0]
 8015262:	b570      	push	{r4, r5, r6, lr}
 8015264:	b96a      	cbnz	r2, 8015282 <strstr+0x22>
 8015266:	bd70      	pop	{r4, r5, r6, pc}
 8015268:	429a      	cmp	r2, r3
 801526a:	d109      	bne.n	8015280 <strstr+0x20>
 801526c:	460c      	mov	r4, r1
 801526e:	4605      	mov	r5, r0
 8015270:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015274:	2b00      	cmp	r3, #0
 8015276:	d0f6      	beq.n	8015266 <strstr+0x6>
 8015278:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801527c:	429e      	cmp	r6, r3
 801527e:	d0f7      	beq.n	8015270 <strstr+0x10>
 8015280:	3001      	adds	r0, #1
 8015282:	7803      	ldrb	r3, [r0, #0]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d1ef      	bne.n	8015268 <strstr+0x8>
 8015288:	4618      	mov	r0, r3
 801528a:	e7ec      	b.n	8015266 <strstr+0x6>

0801528c <_localeconv_r>:
 801528c:	4800      	ldr	r0, [pc, #0]	; (8015290 <_localeconv_r+0x4>)
 801528e:	4770      	bx	lr
 8015290:	20000228 	.word	0x20000228

08015294 <_close_r>:
 8015294:	b538      	push	{r3, r4, r5, lr}
 8015296:	4d06      	ldr	r5, [pc, #24]	; (80152b0 <_close_r+0x1c>)
 8015298:	2300      	movs	r3, #0
 801529a:	4604      	mov	r4, r0
 801529c:	4608      	mov	r0, r1
 801529e:	602b      	str	r3, [r5, #0]
 80152a0:	f7ef fdf5 	bl	8004e8e <_close>
 80152a4:	1c43      	adds	r3, r0, #1
 80152a6:	d102      	bne.n	80152ae <_close_r+0x1a>
 80152a8:	682b      	ldr	r3, [r5, #0]
 80152aa:	b103      	cbz	r3, 80152ae <_close_r+0x1a>
 80152ac:	6023      	str	r3, [r4, #0]
 80152ae:	bd38      	pop	{r3, r4, r5, pc}
 80152b0:	200023ac 	.word	0x200023ac

080152b4 <_lseek_r>:
 80152b4:	b538      	push	{r3, r4, r5, lr}
 80152b6:	4d07      	ldr	r5, [pc, #28]	; (80152d4 <_lseek_r+0x20>)
 80152b8:	4604      	mov	r4, r0
 80152ba:	4608      	mov	r0, r1
 80152bc:	4611      	mov	r1, r2
 80152be:	2200      	movs	r2, #0
 80152c0:	602a      	str	r2, [r5, #0]
 80152c2:	461a      	mov	r2, r3
 80152c4:	f7ef fe0a 	bl	8004edc <_lseek>
 80152c8:	1c43      	adds	r3, r0, #1
 80152ca:	d102      	bne.n	80152d2 <_lseek_r+0x1e>
 80152cc:	682b      	ldr	r3, [r5, #0]
 80152ce:	b103      	cbz	r3, 80152d2 <_lseek_r+0x1e>
 80152d0:	6023      	str	r3, [r4, #0]
 80152d2:	bd38      	pop	{r3, r4, r5, pc}
 80152d4:	200023ac 	.word	0x200023ac

080152d8 <_read_r>:
 80152d8:	b538      	push	{r3, r4, r5, lr}
 80152da:	4d07      	ldr	r5, [pc, #28]	; (80152f8 <_read_r+0x20>)
 80152dc:	4604      	mov	r4, r0
 80152de:	4608      	mov	r0, r1
 80152e0:	4611      	mov	r1, r2
 80152e2:	2200      	movs	r2, #0
 80152e4:	602a      	str	r2, [r5, #0]
 80152e6:	461a      	mov	r2, r3
 80152e8:	f7ef fd98 	bl	8004e1c <_read>
 80152ec:	1c43      	adds	r3, r0, #1
 80152ee:	d102      	bne.n	80152f6 <_read_r+0x1e>
 80152f0:	682b      	ldr	r3, [r5, #0]
 80152f2:	b103      	cbz	r3, 80152f6 <_read_r+0x1e>
 80152f4:	6023      	str	r3, [r4, #0]
 80152f6:	bd38      	pop	{r3, r4, r5, pc}
 80152f8:	200023ac 	.word	0x200023ac

080152fc <_sbrk_r>:
 80152fc:	b538      	push	{r3, r4, r5, lr}
 80152fe:	4d06      	ldr	r5, [pc, #24]	; (8015318 <_sbrk_r+0x1c>)
 8015300:	2300      	movs	r3, #0
 8015302:	4604      	mov	r4, r0
 8015304:	4608      	mov	r0, r1
 8015306:	602b      	str	r3, [r5, #0]
 8015308:	f7ef fdf6 	bl	8004ef8 <_sbrk>
 801530c:	1c43      	adds	r3, r0, #1
 801530e:	d102      	bne.n	8015316 <_sbrk_r+0x1a>
 8015310:	682b      	ldr	r3, [r5, #0]
 8015312:	b103      	cbz	r3, 8015316 <_sbrk_r+0x1a>
 8015314:	6023      	str	r3, [r4, #0]
 8015316:	bd38      	pop	{r3, r4, r5, pc}
 8015318:	200023ac 	.word	0x200023ac

0801531c <_write_r>:
 801531c:	b538      	push	{r3, r4, r5, lr}
 801531e:	4d07      	ldr	r5, [pc, #28]	; (801533c <_write_r+0x20>)
 8015320:	4604      	mov	r4, r0
 8015322:	4608      	mov	r0, r1
 8015324:	4611      	mov	r1, r2
 8015326:	2200      	movs	r2, #0
 8015328:	602a      	str	r2, [r5, #0]
 801532a:	461a      	mov	r2, r3
 801532c:	f7ef fd93 	bl	8004e56 <_write>
 8015330:	1c43      	adds	r3, r0, #1
 8015332:	d102      	bne.n	801533a <_write_r+0x1e>
 8015334:	682b      	ldr	r3, [r5, #0]
 8015336:	b103      	cbz	r3, 801533a <_write_r+0x1e>
 8015338:	6023      	str	r3, [r4, #0]
 801533a:	bd38      	pop	{r3, r4, r5, pc}
 801533c:	200023ac 	.word	0x200023ac

08015340 <__errno>:
 8015340:	4b01      	ldr	r3, [pc, #4]	; (8015348 <__errno+0x8>)
 8015342:	6818      	ldr	r0, [r3, #0]
 8015344:	4770      	bx	lr
 8015346:	bf00      	nop
 8015348:	200002f0 	.word	0x200002f0

0801534c <__libc_init_array>:
 801534c:	b570      	push	{r4, r5, r6, lr}
 801534e:	4d0d      	ldr	r5, [pc, #52]	; (8015384 <__libc_init_array+0x38>)
 8015350:	4c0d      	ldr	r4, [pc, #52]	; (8015388 <__libc_init_array+0x3c>)
 8015352:	1b64      	subs	r4, r4, r5
 8015354:	10a4      	asrs	r4, r4, #2
 8015356:	2600      	movs	r6, #0
 8015358:	42a6      	cmp	r6, r4
 801535a:	d109      	bne.n	8015370 <__libc_init_array+0x24>
 801535c:	4d0b      	ldr	r5, [pc, #44]	; (801538c <__libc_init_array+0x40>)
 801535e:	4c0c      	ldr	r4, [pc, #48]	; (8015390 <__libc_init_array+0x44>)
 8015360:	f003 fe38 	bl	8018fd4 <_init>
 8015364:	1b64      	subs	r4, r4, r5
 8015366:	10a4      	asrs	r4, r4, #2
 8015368:	2600      	movs	r6, #0
 801536a:	42a6      	cmp	r6, r4
 801536c:	d105      	bne.n	801537a <__libc_init_array+0x2e>
 801536e:	bd70      	pop	{r4, r5, r6, pc}
 8015370:	f855 3b04 	ldr.w	r3, [r5], #4
 8015374:	4798      	blx	r3
 8015376:	3601      	adds	r6, #1
 8015378:	e7ee      	b.n	8015358 <__libc_init_array+0xc>
 801537a:	f855 3b04 	ldr.w	r3, [r5], #4
 801537e:	4798      	blx	r3
 8015380:	3601      	adds	r6, #1
 8015382:	e7f2      	b.n	801536a <__libc_init_array+0x1e>
 8015384:	0801b510 	.word	0x0801b510
 8015388:	0801b510 	.word	0x0801b510
 801538c:	0801b510 	.word	0x0801b510
 8015390:	0801b514 	.word	0x0801b514

08015394 <__retarget_lock_init_recursive>:
 8015394:	4770      	bx	lr

08015396 <__retarget_lock_acquire_recursive>:
 8015396:	4770      	bx	lr

08015398 <__retarget_lock_release_recursive>:
 8015398:	4770      	bx	lr

0801539a <strcpy>:
 801539a:	4603      	mov	r3, r0
 801539c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80153a0:	f803 2b01 	strb.w	r2, [r3], #1
 80153a4:	2a00      	cmp	r2, #0
 80153a6:	d1f9      	bne.n	801539c <strcpy+0x2>
 80153a8:	4770      	bx	lr

080153aa <memcpy>:
 80153aa:	440a      	add	r2, r1
 80153ac:	4291      	cmp	r1, r2
 80153ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80153b2:	d100      	bne.n	80153b6 <memcpy+0xc>
 80153b4:	4770      	bx	lr
 80153b6:	b510      	push	{r4, lr}
 80153b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80153bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80153c0:	4291      	cmp	r1, r2
 80153c2:	d1f9      	bne.n	80153b8 <memcpy+0xe>
 80153c4:	bd10      	pop	{r4, pc}
	...

080153c8 <nan>:
 80153c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80153d0 <nan+0x8>
 80153cc:	4770      	bx	lr
 80153ce:	bf00      	nop
 80153d0:	00000000 	.word	0x00000000
 80153d4:	7ff80000 	.word	0x7ff80000

080153d8 <nanf>:
 80153d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80153e0 <nanf+0x8>
 80153dc:	4770      	bx	lr
 80153de:	bf00      	nop
 80153e0:	7fc00000 	.word	0x7fc00000

080153e4 <__assert_func>:
 80153e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80153e6:	4614      	mov	r4, r2
 80153e8:	461a      	mov	r2, r3
 80153ea:	4b09      	ldr	r3, [pc, #36]	; (8015410 <__assert_func+0x2c>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	4605      	mov	r5, r0
 80153f0:	68d8      	ldr	r0, [r3, #12]
 80153f2:	b14c      	cbz	r4, 8015408 <__assert_func+0x24>
 80153f4:	4b07      	ldr	r3, [pc, #28]	; (8015414 <__assert_func+0x30>)
 80153f6:	9100      	str	r1, [sp, #0]
 80153f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80153fc:	4906      	ldr	r1, [pc, #24]	; (8015418 <__assert_func+0x34>)
 80153fe:	462b      	mov	r3, r5
 8015400:	f002 f8fe 	bl	8017600 <fiprintf>
 8015404:	f002 f928 	bl	8017658 <abort>
 8015408:	4b04      	ldr	r3, [pc, #16]	; (801541c <__assert_func+0x38>)
 801540a:	461c      	mov	r4, r3
 801540c:	e7f3      	b.n	80153f6 <__assert_func+0x12>
 801540e:	bf00      	nop
 8015410:	200002f0 	.word	0x200002f0
 8015414:	0801b09b 	.word	0x0801b09b
 8015418:	0801b0a8 	.word	0x0801b0a8
 801541c:	0801b0d6 	.word	0x0801b0d6

08015420 <quorem>:
 8015420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015424:	6903      	ldr	r3, [r0, #16]
 8015426:	690c      	ldr	r4, [r1, #16]
 8015428:	42a3      	cmp	r3, r4
 801542a:	4607      	mov	r7, r0
 801542c:	db7e      	blt.n	801552c <quorem+0x10c>
 801542e:	3c01      	subs	r4, #1
 8015430:	f101 0814 	add.w	r8, r1, #20
 8015434:	f100 0514 	add.w	r5, r0, #20
 8015438:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801543c:	9301      	str	r3, [sp, #4]
 801543e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015442:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015446:	3301      	adds	r3, #1
 8015448:	429a      	cmp	r2, r3
 801544a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801544e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015452:	fbb2 f6f3 	udiv	r6, r2, r3
 8015456:	d331      	bcc.n	80154bc <quorem+0x9c>
 8015458:	f04f 0e00 	mov.w	lr, #0
 801545c:	4640      	mov	r0, r8
 801545e:	46ac      	mov	ip, r5
 8015460:	46f2      	mov	sl, lr
 8015462:	f850 2b04 	ldr.w	r2, [r0], #4
 8015466:	b293      	uxth	r3, r2
 8015468:	fb06 e303 	mla	r3, r6, r3, lr
 801546c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015470:	0c1a      	lsrs	r2, r3, #16
 8015472:	b29b      	uxth	r3, r3
 8015474:	ebaa 0303 	sub.w	r3, sl, r3
 8015478:	f8dc a000 	ldr.w	sl, [ip]
 801547c:	fa13 f38a 	uxtah	r3, r3, sl
 8015480:	fb06 220e 	mla	r2, r6, lr, r2
 8015484:	9300      	str	r3, [sp, #0]
 8015486:	9b00      	ldr	r3, [sp, #0]
 8015488:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801548c:	b292      	uxth	r2, r2
 801548e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015492:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015496:	f8bd 3000 	ldrh.w	r3, [sp]
 801549a:	4581      	cmp	r9, r0
 801549c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80154a0:	f84c 3b04 	str.w	r3, [ip], #4
 80154a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80154a8:	d2db      	bcs.n	8015462 <quorem+0x42>
 80154aa:	f855 300b 	ldr.w	r3, [r5, fp]
 80154ae:	b92b      	cbnz	r3, 80154bc <quorem+0x9c>
 80154b0:	9b01      	ldr	r3, [sp, #4]
 80154b2:	3b04      	subs	r3, #4
 80154b4:	429d      	cmp	r5, r3
 80154b6:	461a      	mov	r2, r3
 80154b8:	d32c      	bcc.n	8015514 <quorem+0xf4>
 80154ba:	613c      	str	r4, [r7, #16]
 80154bc:	4638      	mov	r0, r7
 80154be:	f001 fca5 	bl	8016e0c <__mcmp>
 80154c2:	2800      	cmp	r0, #0
 80154c4:	db22      	blt.n	801550c <quorem+0xec>
 80154c6:	3601      	adds	r6, #1
 80154c8:	4629      	mov	r1, r5
 80154ca:	2000      	movs	r0, #0
 80154cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80154d0:	f8d1 c000 	ldr.w	ip, [r1]
 80154d4:	b293      	uxth	r3, r2
 80154d6:	1ac3      	subs	r3, r0, r3
 80154d8:	0c12      	lsrs	r2, r2, #16
 80154da:	fa13 f38c 	uxtah	r3, r3, ip
 80154de:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80154e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80154e6:	b29b      	uxth	r3, r3
 80154e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80154ec:	45c1      	cmp	r9, r8
 80154ee:	f841 3b04 	str.w	r3, [r1], #4
 80154f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80154f6:	d2e9      	bcs.n	80154cc <quorem+0xac>
 80154f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80154fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015500:	b922      	cbnz	r2, 801550c <quorem+0xec>
 8015502:	3b04      	subs	r3, #4
 8015504:	429d      	cmp	r5, r3
 8015506:	461a      	mov	r2, r3
 8015508:	d30a      	bcc.n	8015520 <quorem+0x100>
 801550a:	613c      	str	r4, [r7, #16]
 801550c:	4630      	mov	r0, r6
 801550e:	b003      	add	sp, #12
 8015510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015514:	6812      	ldr	r2, [r2, #0]
 8015516:	3b04      	subs	r3, #4
 8015518:	2a00      	cmp	r2, #0
 801551a:	d1ce      	bne.n	80154ba <quorem+0x9a>
 801551c:	3c01      	subs	r4, #1
 801551e:	e7c9      	b.n	80154b4 <quorem+0x94>
 8015520:	6812      	ldr	r2, [r2, #0]
 8015522:	3b04      	subs	r3, #4
 8015524:	2a00      	cmp	r2, #0
 8015526:	d1f0      	bne.n	801550a <quorem+0xea>
 8015528:	3c01      	subs	r4, #1
 801552a:	e7eb      	b.n	8015504 <quorem+0xe4>
 801552c:	2000      	movs	r0, #0
 801552e:	e7ee      	b.n	801550e <quorem+0xee>

08015530 <_dtoa_r>:
 8015530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015534:	ed2d 8b04 	vpush	{d8-d9}
 8015538:	69c5      	ldr	r5, [r0, #28]
 801553a:	b093      	sub	sp, #76	; 0x4c
 801553c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015540:	ec57 6b10 	vmov	r6, r7, d0
 8015544:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015548:	9107      	str	r1, [sp, #28]
 801554a:	4604      	mov	r4, r0
 801554c:	920a      	str	r2, [sp, #40]	; 0x28
 801554e:	930d      	str	r3, [sp, #52]	; 0x34
 8015550:	b975      	cbnz	r5, 8015570 <_dtoa_r+0x40>
 8015552:	2010      	movs	r0, #16
 8015554:	f7fd fe7a 	bl	801324c <malloc>
 8015558:	4602      	mov	r2, r0
 801555a:	61e0      	str	r0, [r4, #28]
 801555c:	b920      	cbnz	r0, 8015568 <_dtoa_r+0x38>
 801555e:	4bae      	ldr	r3, [pc, #696]	; (8015818 <_dtoa_r+0x2e8>)
 8015560:	21ef      	movs	r1, #239	; 0xef
 8015562:	48ae      	ldr	r0, [pc, #696]	; (801581c <_dtoa_r+0x2ec>)
 8015564:	f7ff ff3e 	bl	80153e4 <__assert_func>
 8015568:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801556c:	6005      	str	r5, [r0, #0]
 801556e:	60c5      	str	r5, [r0, #12]
 8015570:	69e3      	ldr	r3, [r4, #28]
 8015572:	6819      	ldr	r1, [r3, #0]
 8015574:	b151      	cbz	r1, 801558c <_dtoa_r+0x5c>
 8015576:	685a      	ldr	r2, [r3, #4]
 8015578:	604a      	str	r2, [r1, #4]
 801557a:	2301      	movs	r3, #1
 801557c:	4093      	lsls	r3, r2
 801557e:	608b      	str	r3, [r1, #8]
 8015580:	4620      	mov	r0, r4
 8015582:	f001 f9bd 	bl	8016900 <_Bfree>
 8015586:	69e3      	ldr	r3, [r4, #28]
 8015588:	2200      	movs	r2, #0
 801558a:	601a      	str	r2, [r3, #0]
 801558c:	1e3b      	subs	r3, r7, #0
 801558e:	bfbb      	ittet	lt
 8015590:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015594:	9303      	strlt	r3, [sp, #12]
 8015596:	2300      	movge	r3, #0
 8015598:	2201      	movlt	r2, #1
 801559a:	bfac      	ite	ge
 801559c:	f8c8 3000 	strge.w	r3, [r8]
 80155a0:	f8c8 2000 	strlt.w	r2, [r8]
 80155a4:	4b9e      	ldr	r3, [pc, #632]	; (8015820 <_dtoa_r+0x2f0>)
 80155a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80155aa:	ea33 0308 	bics.w	r3, r3, r8
 80155ae:	d11b      	bne.n	80155e8 <_dtoa_r+0xb8>
 80155b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80155b6:	6013      	str	r3, [r2, #0]
 80155b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80155bc:	4333      	orrs	r3, r6
 80155be:	f000 8593 	beq.w	80160e8 <_dtoa_r+0xbb8>
 80155c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80155c4:	b963      	cbnz	r3, 80155e0 <_dtoa_r+0xb0>
 80155c6:	4b97      	ldr	r3, [pc, #604]	; (8015824 <_dtoa_r+0x2f4>)
 80155c8:	e027      	b.n	801561a <_dtoa_r+0xea>
 80155ca:	4b97      	ldr	r3, [pc, #604]	; (8015828 <_dtoa_r+0x2f8>)
 80155cc:	9300      	str	r3, [sp, #0]
 80155ce:	3308      	adds	r3, #8
 80155d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80155d2:	6013      	str	r3, [r2, #0]
 80155d4:	9800      	ldr	r0, [sp, #0]
 80155d6:	b013      	add	sp, #76	; 0x4c
 80155d8:	ecbd 8b04 	vpop	{d8-d9}
 80155dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155e0:	4b90      	ldr	r3, [pc, #576]	; (8015824 <_dtoa_r+0x2f4>)
 80155e2:	9300      	str	r3, [sp, #0]
 80155e4:	3303      	adds	r3, #3
 80155e6:	e7f3      	b.n	80155d0 <_dtoa_r+0xa0>
 80155e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80155ec:	2200      	movs	r2, #0
 80155ee:	ec51 0b17 	vmov	r0, r1, d7
 80155f2:	eeb0 8a47 	vmov.f32	s16, s14
 80155f6:	eef0 8a67 	vmov.f32	s17, s15
 80155fa:	2300      	movs	r3, #0
 80155fc:	f7eb fa64 	bl	8000ac8 <__aeabi_dcmpeq>
 8015600:	4681      	mov	r9, r0
 8015602:	b160      	cbz	r0, 801561e <_dtoa_r+0xee>
 8015604:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015606:	2301      	movs	r3, #1
 8015608:	6013      	str	r3, [r2, #0]
 801560a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801560c:	2b00      	cmp	r3, #0
 801560e:	f000 8568 	beq.w	80160e2 <_dtoa_r+0xbb2>
 8015612:	4b86      	ldr	r3, [pc, #536]	; (801582c <_dtoa_r+0x2fc>)
 8015614:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015616:	6013      	str	r3, [r2, #0]
 8015618:	3b01      	subs	r3, #1
 801561a:	9300      	str	r3, [sp, #0]
 801561c:	e7da      	b.n	80155d4 <_dtoa_r+0xa4>
 801561e:	aa10      	add	r2, sp, #64	; 0x40
 8015620:	a911      	add	r1, sp, #68	; 0x44
 8015622:	4620      	mov	r0, r4
 8015624:	eeb0 0a48 	vmov.f32	s0, s16
 8015628:	eef0 0a68 	vmov.f32	s1, s17
 801562c:	f001 fd04 	bl	8017038 <__d2b>
 8015630:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015634:	4682      	mov	sl, r0
 8015636:	2d00      	cmp	r5, #0
 8015638:	d07f      	beq.n	801573a <_dtoa_r+0x20a>
 801563a:	ee18 3a90 	vmov	r3, s17
 801563e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015642:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8015646:	ec51 0b18 	vmov	r0, r1, d8
 801564a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801564e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015652:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8015656:	4619      	mov	r1, r3
 8015658:	2200      	movs	r2, #0
 801565a:	4b75      	ldr	r3, [pc, #468]	; (8015830 <_dtoa_r+0x300>)
 801565c:	f7ea fe14 	bl	8000288 <__aeabi_dsub>
 8015660:	a367      	add	r3, pc, #412	; (adr r3, 8015800 <_dtoa_r+0x2d0>)
 8015662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015666:	f7ea ffc7 	bl	80005f8 <__aeabi_dmul>
 801566a:	a367      	add	r3, pc, #412	; (adr r3, 8015808 <_dtoa_r+0x2d8>)
 801566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015670:	f7ea fe0c 	bl	800028c <__adddf3>
 8015674:	4606      	mov	r6, r0
 8015676:	4628      	mov	r0, r5
 8015678:	460f      	mov	r7, r1
 801567a:	f7ea ff53 	bl	8000524 <__aeabi_i2d>
 801567e:	a364      	add	r3, pc, #400	; (adr r3, 8015810 <_dtoa_r+0x2e0>)
 8015680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015684:	f7ea ffb8 	bl	80005f8 <__aeabi_dmul>
 8015688:	4602      	mov	r2, r0
 801568a:	460b      	mov	r3, r1
 801568c:	4630      	mov	r0, r6
 801568e:	4639      	mov	r1, r7
 8015690:	f7ea fdfc 	bl	800028c <__adddf3>
 8015694:	4606      	mov	r6, r0
 8015696:	460f      	mov	r7, r1
 8015698:	f7eb fa5e 	bl	8000b58 <__aeabi_d2iz>
 801569c:	2200      	movs	r2, #0
 801569e:	4683      	mov	fp, r0
 80156a0:	2300      	movs	r3, #0
 80156a2:	4630      	mov	r0, r6
 80156a4:	4639      	mov	r1, r7
 80156a6:	f7eb fa19 	bl	8000adc <__aeabi_dcmplt>
 80156aa:	b148      	cbz	r0, 80156c0 <_dtoa_r+0x190>
 80156ac:	4658      	mov	r0, fp
 80156ae:	f7ea ff39 	bl	8000524 <__aeabi_i2d>
 80156b2:	4632      	mov	r2, r6
 80156b4:	463b      	mov	r3, r7
 80156b6:	f7eb fa07 	bl	8000ac8 <__aeabi_dcmpeq>
 80156ba:	b908      	cbnz	r0, 80156c0 <_dtoa_r+0x190>
 80156bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80156c0:	f1bb 0f16 	cmp.w	fp, #22
 80156c4:	d857      	bhi.n	8015776 <_dtoa_r+0x246>
 80156c6:	4b5b      	ldr	r3, [pc, #364]	; (8015834 <_dtoa_r+0x304>)
 80156c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80156cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156d0:	ec51 0b18 	vmov	r0, r1, d8
 80156d4:	f7eb fa02 	bl	8000adc <__aeabi_dcmplt>
 80156d8:	2800      	cmp	r0, #0
 80156da:	d04e      	beq.n	801577a <_dtoa_r+0x24a>
 80156dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80156e0:	2300      	movs	r3, #0
 80156e2:	930c      	str	r3, [sp, #48]	; 0x30
 80156e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80156e6:	1b5b      	subs	r3, r3, r5
 80156e8:	1e5a      	subs	r2, r3, #1
 80156ea:	bf45      	ittet	mi
 80156ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80156f0:	9305      	strmi	r3, [sp, #20]
 80156f2:	2300      	movpl	r3, #0
 80156f4:	2300      	movmi	r3, #0
 80156f6:	9206      	str	r2, [sp, #24]
 80156f8:	bf54      	ite	pl
 80156fa:	9305      	strpl	r3, [sp, #20]
 80156fc:	9306      	strmi	r3, [sp, #24]
 80156fe:	f1bb 0f00 	cmp.w	fp, #0
 8015702:	db3c      	blt.n	801577e <_dtoa_r+0x24e>
 8015704:	9b06      	ldr	r3, [sp, #24]
 8015706:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801570a:	445b      	add	r3, fp
 801570c:	9306      	str	r3, [sp, #24]
 801570e:	2300      	movs	r3, #0
 8015710:	9308      	str	r3, [sp, #32]
 8015712:	9b07      	ldr	r3, [sp, #28]
 8015714:	2b09      	cmp	r3, #9
 8015716:	d868      	bhi.n	80157ea <_dtoa_r+0x2ba>
 8015718:	2b05      	cmp	r3, #5
 801571a:	bfc4      	itt	gt
 801571c:	3b04      	subgt	r3, #4
 801571e:	9307      	strgt	r3, [sp, #28]
 8015720:	9b07      	ldr	r3, [sp, #28]
 8015722:	f1a3 0302 	sub.w	r3, r3, #2
 8015726:	bfcc      	ite	gt
 8015728:	2500      	movgt	r5, #0
 801572a:	2501      	movle	r5, #1
 801572c:	2b03      	cmp	r3, #3
 801572e:	f200 8085 	bhi.w	801583c <_dtoa_r+0x30c>
 8015732:	e8df f003 	tbb	[pc, r3]
 8015736:	3b2e      	.short	0x3b2e
 8015738:	5839      	.short	0x5839
 801573a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801573e:	441d      	add	r5, r3
 8015740:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015744:	2b20      	cmp	r3, #32
 8015746:	bfc1      	itttt	gt
 8015748:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801574c:	fa08 f803 	lslgt.w	r8, r8, r3
 8015750:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8015754:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015758:	bfd6      	itet	le
 801575a:	f1c3 0320 	rsble	r3, r3, #32
 801575e:	ea48 0003 	orrgt.w	r0, r8, r3
 8015762:	fa06 f003 	lslle.w	r0, r6, r3
 8015766:	f7ea fecd 	bl	8000504 <__aeabi_ui2d>
 801576a:	2201      	movs	r2, #1
 801576c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015770:	3d01      	subs	r5, #1
 8015772:	920e      	str	r2, [sp, #56]	; 0x38
 8015774:	e76f      	b.n	8015656 <_dtoa_r+0x126>
 8015776:	2301      	movs	r3, #1
 8015778:	e7b3      	b.n	80156e2 <_dtoa_r+0x1b2>
 801577a:	900c      	str	r0, [sp, #48]	; 0x30
 801577c:	e7b2      	b.n	80156e4 <_dtoa_r+0x1b4>
 801577e:	9b05      	ldr	r3, [sp, #20]
 8015780:	eba3 030b 	sub.w	r3, r3, fp
 8015784:	9305      	str	r3, [sp, #20]
 8015786:	f1cb 0300 	rsb	r3, fp, #0
 801578a:	9308      	str	r3, [sp, #32]
 801578c:	2300      	movs	r3, #0
 801578e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015790:	e7bf      	b.n	8015712 <_dtoa_r+0x1e2>
 8015792:	2300      	movs	r3, #0
 8015794:	9309      	str	r3, [sp, #36]	; 0x24
 8015796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015798:	2b00      	cmp	r3, #0
 801579a:	dc52      	bgt.n	8015842 <_dtoa_r+0x312>
 801579c:	2301      	movs	r3, #1
 801579e:	9301      	str	r3, [sp, #4]
 80157a0:	9304      	str	r3, [sp, #16]
 80157a2:	461a      	mov	r2, r3
 80157a4:	920a      	str	r2, [sp, #40]	; 0x28
 80157a6:	e00b      	b.n	80157c0 <_dtoa_r+0x290>
 80157a8:	2301      	movs	r3, #1
 80157aa:	e7f3      	b.n	8015794 <_dtoa_r+0x264>
 80157ac:	2300      	movs	r3, #0
 80157ae:	9309      	str	r3, [sp, #36]	; 0x24
 80157b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157b2:	445b      	add	r3, fp
 80157b4:	9301      	str	r3, [sp, #4]
 80157b6:	3301      	adds	r3, #1
 80157b8:	2b01      	cmp	r3, #1
 80157ba:	9304      	str	r3, [sp, #16]
 80157bc:	bfb8      	it	lt
 80157be:	2301      	movlt	r3, #1
 80157c0:	69e0      	ldr	r0, [r4, #28]
 80157c2:	2100      	movs	r1, #0
 80157c4:	2204      	movs	r2, #4
 80157c6:	f102 0614 	add.w	r6, r2, #20
 80157ca:	429e      	cmp	r6, r3
 80157cc:	d93d      	bls.n	801584a <_dtoa_r+0x31a>
 80157ce:	6041      	str	r1, [r0, #4]
 80157d0:	4620      	mov	r0, r4
 80157d2:	f001 f855 	bl	8016880 <_Balloc>
 80157d6:	9000      	str	r0, [sp, #0]
 80157d8:	2800      	cmp	r0, #0
 80157da:	d139      	bne.n	8015850 <_dtoa_r+0x320>
 80157dc:	4b16      	ldr	r3, [pc, #88]	; (8015838 <_dtoa_r+0x308>)
 80157de:	4602      	mov	r2, r0
 80157e0:	f240 11af 	movw	r1, #431	; 0x1af
 80157e4:	e6bd      	b.n	8015562 <_dtoa_r+0x32>
 80157e6:	2301      	movs	r3, #1
 80157e8:	e7e1      	b.n	80157ae <_dtoa_r+0x27e>
 80157ea:	2501      	movs	r5, #1
 80157ec:	2300      	movs	r3, #0
 80157ee:	9307      	str	r3, [sp, #28]
 80157f0:	9509      	str	r5, [sp, #36]	; 0x24
 80157f2:	f04f 33ff 	mov.w	r3, #4294967295
 80157f6:	9301      	str	r3, [sp, #4]
 80157f8:	9304      	str	r3, [sp, #16]
 80157fa:	2200      	movs	r2, #0
 80157fc:	2312      	movs	r3, #18
 80157fe:	e7d1      	b.n	80157a4 <_dtoa_r+0x274>
 8015800:	636f4361 	.word	0x636f4361
 8015804:	3fd287a7 	.word	0x3fd287a7
 8015808:	8b60c8b3 	.word	0x8b60c8b3
 801580c:	3fc68a28 	.word	0x3fc68a28
 8015810:	509f79fb 	.word	0x509f79fb
 8015814:	3fd34413 	.word	0x3fd34413
 8015818:	0801b022 	.word	0x0801b022
 801581c:	0801b0e4 	.word	0x0801b0e4
 8015820:	7ff00000 	.word	0x7ff00000
 8015824:	0801b0e0 	.word	0x0801b0e0
 8015828:	0801b0d7 	.word	0x0801b0d7
 801582c:	0801affa 	.word	0x0801affa
 8015830:	3ff80000 	.word	0x3ff80000
 8015834:	0801b230 	.word	0x0801b230
 8015838:	0801b13c 	.word	0x0801b13c
 801583c:	2301      	movs	r3, #1
 801583e:	9309      	str	r3, [sp, #36]	; 0x24
 8015840:	e7d7      	b.n	80157f2 <_dtoa_r+0x2c2>
 8015842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015844:	9301      	str	r3, [sp, #4]
 8015846:	9304      	str	r3, [sp, #16]
 8015848:	e7ba      	b.n	80157c0 <_dtoa_r+0x290>
 801584a:	3101      	adds	r1, #1
 801584c:	0052      	lsls	r2, r2, #1
 801584e:	e7ba      	b.n	80157c6 <_dtoa_r+0x296>
 8015850:	69e3      	ldr	r3, [r4, #28]
 8015852:	9a00      	ldr	r2, [sp, #0]
 8015854:	601a      	str	r2, [r3, #0]
 8015856:	9b04      	ldr	r3, [sp, #16]
 8015858:	2b0e      	cmp	r3, #14
 801585a:	f200 80a8 	bhi.w	80159ae <_dtoa_r+0x47e>
 801585e:	2d00      	cmp	r5, #0
 8015860:	f000 80a5 	beq.w	80159ae <_dtoa_r+0x47e>
 8015864:	f1bb 0f00 	cmp.w	fp, #0
 8015868:	dd38      	ble.n	80158dc <_dtoa_r+0x3ac>
 801586a:	4bc0      	ldr	r3, [pc, #768]	; (8015b6c <_dtoa_r+0x63c>)
 801586c:	f00b 020f 	and.w	r2, fp, #15
 8015870:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015874:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015878:	e9d3 6700 	ldrd	r6, r7, [r3]
 801587c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8015880:	d019      	beq.n	80158b6 <_dtoa_r+0x386>
 8015882:	4bbb      	ldr	r3, [pc, #748]	; (8015b70 <_dtoa_r+0x640>)
 8015884:	ec51 0b18 	vmov	r0, r1, d8
 8015888:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801588c:	f7ea ffde 	bl	800084c <__aeabi_ddiv>
 8015890:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015894:	f008 080f 	and.w	r8, r8, #15
 8015898:	2503      	movs	r5, #3
 801589a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015b70 <_dtoa_r+0x640>
 801589e:	f1b8 0f00 	cmp.w	r8, #0
 80158a2:	d10a      	bne.n	80158ba <_dtoa_r+0x38a>
 80158a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80158a8:	4632      	mov	r2, r6
 80158aa:	463b      	mov	r3, r7
 80158ac:	f7ea ffce 	bl	800084c <__aeabi_ddiv>
 80158b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80158b4:	e02b      	b.n	801590e <_dtoa_r+0x3de>
 80158b6:	2502      	movs	r5, #2
 80158b8:	e7ef      	b.n	801589a <_dtoa_r+0x36a>
 80158ba:	f018 0f01 	tst.w	r8, #1
 80158be:	d008      	beq.n	80158d2 <_dtoa_r+0x3a2>
 80158c0:	4630      	mov	r0, r6
 80158c2:	4639      	mov	r1, r7
 80158c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80158c8:	f7ea fe96 	bl	80005f8 <__aeabi_dmul>
 80158cc:	3501      	adds	r5, #1
 80158ce:	4606      	mov	r6, r0
 80158d0:	460f      	mov	r7, r1
 80158d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80158d6:	f109 0908 	add.w	r9, r9, #8
 80158da:	e7e0      	b.n	801589e <_dtoa_r+0x36e>
 80158dc:	f000 809f 	beq.w	8015a1e <_dtoa_r+0x4ee>
 80158e0:	f1cb 0600 	rsb	r6, fp, #0
 80158e4:	4ba1      	ldr	r3, [pc, #644]	; (8015b6c <_dtoa_r+0x63c>)
 80158e6:	4fa2      	ldr	r7, [pc, #648]	; (8015b70 <_dtoa_r+0x640>)
 80158e8:	f006 020f 	and.w	r2, r6, #15
 80158ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80158f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158f4:	ec51 0b18 	vmov	r0, r1, d8
 80158f8:	f7ea fe7e 	bl	80005f8 <__aeabi_dmul>
 80158fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015900:	1136      	asrs	r6, r6, #4
 8015902:	2300      	movs	r3, #0
 8015904:	2502      	movs	r5, #2
 8015906:	2e00      	cmp	r6, #0
 8015908:	d17e      	bne.n	8015a08 <_dtoa_r+0x4d8>
 801590a:	2b00      	cmp	r3, #0
 801590c:	d1d0      	bne.n	80158b0 <_dtoa_r+0x380>
 801590e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015910:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015914:	2b00      	cmp	r3, #0
 8015916:	f000 8084 	beq.w	8015a22 <_dtoa_r+0x4f2>
 801591a:	4b96      	ldr	r3, [pc, #600]	; (8015b74 <_dtoa_r+0x644>)
 801591c:	2200      	movs	r2, #0
 801591e:	4640      	mov	r0, r8
 8015920:	4649      	mov	r1, r9
 8015922:	f7eb f8db 	bl	8000adc <__aeabi_dcmplt>
 8015926:	2800      	cmp	r0, #0
 8015928:	d07b      	beq.n	8015a22 <_dtoa_r+0x4f2>
 801592a:	9b04      	ldr	r3, [sp, #16]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d078      	beq.n	8015a22 <_dtoa_r+0x4f2>
 8015930:	9b01      	ldr	r3, [sp, #4]
 8015932:	2b00      	cmp	r3, #0
 8015934:	dd39      	ble.n	80159aa <_dtoa_r+0x47a>
 8015936:	4b90      	ldr	r3, [pc, #576]	; (8015b78 <_dtoa_r+0x648>)
 8015938:	2200      	movs	r2, #0
 801593a:	4640      	mov	r0, r8
 801593c:	4649      	mov	r1, r9
 801593e:	f7ea fe5b 	bl	80005f8 <__aeabi_dmul>
 8015942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015946:	9e01      	ldr	r6, [sp, #4]
 8015948:	f10b 37ff 	add.w	r7, fp, #4294967295
 801594c:	3501      	adds	r5, #1
 801594e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015952:	4628      	mov	r0, r5
 8015954:	f7ea fde6 	bl	8000524 <__aeabi_i2d>
 8015958:	4642      	mov	r2, r8
 801595a:	464b      	mov	r3, r9
 801595c:	f7ea fe4c 	bl	80005f8 <__aeabi_dmul>
 8015960:	4b86      	ldr	r3, [pc, #536]	; (8015b7c <_dtoa_r+0x64c>)
 8015962:	2200      	movs	r2, #0
 8015964:	f7ea fc92 	bl	800028c <__adddf3>
 8015968:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801596c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015970:	9303      	str	r3, [sp, #12]
 8015972:	2e00      	cmp	r6, #0
 8015974:	d158      	bne.n	8015a28 <_dtoa_r+0x4f8>
 8015976:	4b82      	ldr	r3, [pc, #520]	; (8015b80 <_dtoa_r+0x650>)
 8015978:	2200      	movs	r2, #0
 801597a:	4640      	mov	r0, r8
 801597c:	4649      	mov	r1, r9
 801597e:	f7ea fc83 	bl	8000288 <__aeabi_dsub>
 8015982:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015986:	4680      	mov	r8, r0
 8015988:	4689      	mov	r9, r1
 801598a:	f7eb f8c5 	bl	8000b18 <__aeabi_dcmpgt>
 801598e:	2800      	cmp	r0, #0
 8015990:	f040 8296 	bne.w	8015ec0 <_dtoa_r+0x990>
 8015994:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015998:	4640      	mov	r0, r8
 801599a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801599e:	4649      	mov	r1, r9
 80159a0:	f7eb f89c 	bl	8000adc <__aeabi_dcmplt>
 80159a4:	2800      	cmp	r0, #0
 80159a6:	f040 8289 	bne.w	8015ebc <_dtoa_r+0x98c>
 80159aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80159ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	f2c0 814e 	blt.w	8015c52 <_dtoa_r+0x722>
 80159b6:	f1bb 0f0e 	cmp.w	fp, #14
 80159ba:	f300 814a 	bgt.w	8015c52 <_dtoa_r+0x722>
 80159be:	4b6b      	ldr	r3, [pc, #428]	; (8015b6c <_dtoa_r+0x63c>)
 80159c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80159c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80159c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	f280 80dc 	bge.w	8015b88 <_dtoa_r+0x658>
 80159d0:	9b04      	ldr	r3, [sp, #16]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	f300 80d8 	bgt.w	8015b88 <_dtoa_r+0x658>
 80159d8:	f040 826f 	bne.w	8015eba <_dtoa_r+0x98a>
 80159dc:	4b68      	ldr	r3, [pc, #416]	; (8015b80 <_dtoa_r+0x650>)
 80159de:	2200      	movs	r2, #0
 80159e0:	4640      	mov	r0, r8
 80159e2:	4649      	mov	r1, r9
 80159e4:	f7ea fe08 	bl	80005f8 <__aeabi_dmul>
 80159e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80159ec:	f7eb f88a 	bl	8000b04 <__aeabi_dcmpge>
 80159f0:	9e04      	ldr	r6, [sp, #16]
 80159f2:	4637      	mov	r7, r6
 80159f4:	2800      	cmp	r0, #0
 80159f6:	f040 8245 	bne.w	8015e84 <_dtoa_r+0x954>
 80159fa:	9d00      	ldr	r5, [sp, #0]
 80159fc:	2331      	movs	r3, #49	; 0x31
 80159fe:	f805 3b01 	strb.w	r3, [r5], #1
 8015a02:	f10b 0b01 	add.w	fp, fp, #1
 8015a06:	e241      	b.n	8015e8c <_dtoa_r+0x95c>
 8015a08:	07f2      	lsls	r2, r6, #31
 8015a0a:	d505      	bpl.n	8015a18 <_dtoa_r+0x4e8>
 8015a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015a10:	f7ea fdf2 	bl	80005f8 <__aeabi_dmul>
 8015a14:	3501      	adds	r5, #1
 8015a16:	2301      	movs	r3, #1
 8015a18:	1076      	asrs	r6, r6, #1
 8015a1a:	3708      	adds	r7, #8
 8015a1c:	e773      	b.n	8015906 <_dtoa_r+0x3d6>
 8015a1e:	2502      	movs	r5, #2
 8015a20:	e775      	b.n	801590e <_dtoa_r+0x3de>
 8015a22:	9e04      	ldr	r6, [sp, #16]
 8015a24:	465f      	mov	r7, fp
 8015a26:	e792      	b.n	801594e <_dtoa_r+0x41e>
 8015a28:	9900      	ldr	r1, [sp, #0]
 8015a2a:	4b50      	ldr	r3, [pc, #320]	; (8015b6c <_dtoa_r+0x63c>)
 8015a2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015a30:	4431      	add	r1, r6
 8015a32:	9102      	str	r1, [sp, #8]
 8015a34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a36:	eeb0 9a47 	vmov.f32	s18, s14
 8015a3a:	eef0 9a67 	vmov.f32	s19, s15
 8015a3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015a42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015a46:	2900      	cmp	r1, #0
 8015a48:	d044      	beq.n	8015ad4 <_dtoa_r+0x5a4>
 8015a4a:	494e      	ldr	r1, [pc, #312]	; (8015b84 <_dtoa_r+0x654>)
 8015a4c:	2000      	movs	r0, #0
 8015a4e:	f7ea fefd 	bl	800084c <__aeabi_ddiv>
 8015a52:	ec53 2b19 	vmov	r2, r3, d9
 8015a56:	f7ea fc17 	bl	8000288 <__aeabi_dsub>
 8015a5a:	9d00      	ldr	r5, [sp, #0]
 8015a5c:	ec41 0b19 	vmov	d9, r0, r1
 8015a60:	4649      	mov	r1, r9
 8015a62:	4640      	mov	r0, r8
 8015a64:	f7eb f878 	bl	8000b58 <__aeabi_d2iz>
 8015a68:	4606      	mov	r6, r0
 8015a6a:	f7ea fd5b 	bl	8000524 <__aeabi_i2d>
 8015a6e:	4602      	mov	r2, r0
 8015a70:	460b      	mov	r3, r1
 8015a72:	4640      	mov	r0, r8
 8015a74:	4649      	mov	r1, r9
 8015a76:	f7ea fc07 	bl	8000288 <__aeabi_dsub>
 8015a7a:	3630      	adds	r6, #48	; 0x30
 8015a7c:	f805 6b01 	strb.w	r6, [r5], #1
 8015a80:	ec53 2b19 	vmov	r2, r3, d9
 8015a84:	4680      	mov	r8, r0
 8015a86:	4689      	mov	r9, r1
 8015a88:	f7eb f828 	bl	8000adc <__aeabi_dcmplt>
 8015a8c:	2800      	cmp	r0, #0
 8015a8e:	d164      	bne.n	8015b5a <_dtoa_r+0x62a>
 8015a90:	4642      	mov	r2, r8
 8015a92:	464b      	mov	r3, r9
 8015a94:	4937      	ldr	r1, [pc, #220]	; (8015b74 <_dtoa_r+0x644>)
 8015a96:	2000      	movs	r0, #0
 8015a98:	f7ea fbf6 	bl	8000288 <__aeabi_dsub>
 8015a9c:	ec53 2b19 	vmov	r2, r3, d9
 8015aa0:	f7eb f81c 	bl	8000adc <__aeabi_dcmplt>
 8015aa4:	2800      	cmp	r0, #0
 8015aa6:	f040 80b6 	bne.w	8015c16 <_dtoa_r+0x6e6>
 8015aaa:	9b02      	ldr	r3, [sp, #8]
 8015aac:	429d      	cmp	r5, r3
 8015aae:	f43f af7c 	beq.w	80159aa <_dtoa_r+0x47a>
 8015ab2:	4b31      	ldr	r3, [pc, #196]	; (8015b78 <_dtoa_r+0x648>)
 8015ab4:	ec51 0b19 	vmov	r0, r1, d9
 8015ab8:	2200      	movs	r2, #0
 8015aba:	f7ea fd9d 	bl	80005f8 <__aeabi_dmul>
 8015abe:	4b2e      	ldr	r3, [pc, #184]	; (8015b78 <_dtoa_r+0x648>)
 8015ac0:	ec41 0b19 	vmov	d9, r0, r1
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	4640      	mov	r0, r8
 8015ac8:	4649      	mov	r1, r9
 8015aca:	f7ea fd95 	bl	80005f8 <__aeabi_dmul>
 8015ace:	4680      	mov	r8, r0
 8015ad0:	4689      	mov	r9, r1
 8015ad2:	e7c5      	b.n	8015a60 <_dtoa_r+0x530>
 8015ad4:	ec51 0b17 	vmov	r0, r1, d7
 8015ad8:	f7ea fd8e 	bl	80005f8 <__aeabi_dmul>
 8015adc:	9b02      	ldr	r3, [sp, #8]
 8015ade:	9d00      	ldr	r5, [sp, #0]
 8015ae0:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ae2:	ec41 0b19 	vmov	d9, r0, r1
 8015ae6:	4649      	mov	r1, r9
 8015ae8:	4640      	mov	r0, r8
 8015aea:	f7eb f835 	bl	8000b58 <__aeabi_d2iz>
 8015aee:	4606      	mov	r6, r0
 8015af0:	f7ea fd18 	bl	8000524 <__aeabi_i2d>
 8015af4:	3630      	adds	r6, #48	; 0x30
 8015af6:	4602      	mov	r2, r0
 8015af8:	460b      	mov	r3, r1
 8015afa:	4640      	mov	r0, r8
 8015afc:	4649      	mov	r1, r9
 8015afe:	f7ea fbc3 	bl	8000288 <__aeabi_dsub>
 8015b02:	f805 6b01 	strb.w	r6, [r5], #1
 8015b06:	9b02      	ldr	r3, [sp, #8]
 8015b08:	429d      	cmp	r5, r3
 8015b0a:	4680      	mov	r8, r0
 8015b0c:	4689      	mov	r9, r1
 8015b0e:	f04f 0200 	mov.w	r2, #0
 8015b12:	d124      	bne.n	8015b5e <_dtoa_r+0x62e>
 8015b14:	4b1b      	ldr	r3, [pc, #108]	; (8015b84 <_dtoa_r+0x654>)
 8015b16:	ec51 0b19 	vmov	r0, r1, d9
 8015b1a:	f7ea fbb7 	bl	800028c <__adddf3>
 8015b1e:	4602      	mov	r2, r0
 8015b20:	460b      	mov	r3, r1
 8015b22:	4640      	mov	r0, r8
 8015b24:	4649      	mov	r1, r9
 8015b26:	f7ea fff7 	bl	8000b18 <__aeabi_dcmpgt>
 8015b2a:	2800      	cmp	r0, #0
 8015b2c:	d173      	bne.n	8015c16 <_dtoa_r+0x6e6>
 8015b2e:	ec53 2b19 	vmov	r2, r3, d9
 8015b32:	4914      	ldr	r1, [pc, #80]	; (8015b84 <_dtoa_r+0x654>)
 8015b34:	2000      	movs	r0, #0
 8015b36:	f7ea fba7 	bl	8000288 <__aeabi_dsub>
 8015b3a:	4602      	mov	r2, r0
 8015b3c:	460b      	mov	r3, r1
 8015b3e:	4640      	mov	r0, r8
 8015b40:	4649      	mov	r1, r9
 8015b42:	f7ea ffcb 	bl	8000adc <__aeabi_dcmplt>
 8015b46:	2800      	cmp	r0, #0
 8015b48:	f43f af2f 	beq.w	80159aa <_dtoa_r+0x47a>
 8015b4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015b4e:	1e6b      	subs	r3, r5, #1
 8015b50:	930f      	str	r3, [sp, #60]	; 0x3c
 8015b52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015b56:	2b30      	cmp	r3, #48	; 0x30
 8015b58:	d0f8      	beq.n	8015b4c <_dtoa_r+0x61c>
 8015b5a:	46bb      	mov	fp, r7
 8015b5c:	e04a      	b.n	8015bf4 <_dtoa_r+0x6c4>
 8015b5e:	4b06      	ldr	r3, [pc, #24]	; (8015b78 <_dtoa_r+0x648>)
 8015b60:	f7ea fd4a 	bl	80005f8 <__aeabi_dmul>
 8015b64:	4680      	mov	r8, r0
 8015b66:	4689      	mov	r9, r1
 8015b68:	e7bd      	b.n	8015ae6 <_dtoa_r+0x5b6>
 8015b6a:	bf00      	nop
 8015b6c:	0801b230 	.word	0x0801b230
 8015b70:	0801b208 	.word	0x0801b208
 8015b74:	3ff00000 	.word	0x3ff00000
 8015b78:	40240000 	.word	0x40240000
 8015b7c:	401c0000 	.word	0x401c0000
 8015b80:	40140000 	.word	0x40140000
 8015b84:	3fe00000 	.word	0x3fe00000
 8015b88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015b8c:	9d00      	ldr	r5, [sp, #0]
 8015b8e:	4642      	mov	r2, r8
 8015b90:	464b      	mov	r3, r9
 8015b92:	4630      	mov	r0, r6
 8015b94:	4639      	mov	r1, r7
 8015b96:	f7ea fe59 	bl	800084c <__aeabi_ddiv>
 8015b9a:	f7ea ffdd 	bl	8000b58 <__aeabi_d2iz>
 8015b9e:	9001      	str	r0, [sp, #4]
 8015ba0:	f7ea fcc0 	bl	8000524 <__aeabi_i2d>
 8015ba4:	4642      	mov	r2, r8
 8015ba6:	464b      	mov	r3, r9
 8015ba8:	f7ea fd26 	bl	80005f8 <__aeabi_dmul>
 8015bac:	4602      	mov	r2, r0
 8015bae:	460b      	mov	r3, r1
 8015bb0:	4630      	mov	r0, r6
 8015bb2:	4639      	mov	r1, r7
 8015bb4:	f7ea fb68 	bl	8000288 <__aeabi_dsub>
 8015bb8:	9e01      	ldr	r6, [sp, #4]
 8015bba:	9f04      	ldr	r7, [sp, #16]
 8015bbc:	3630      	adds	r6, #48	; 0x30
 8015bbe:	f805 6b01 	strb.w	r6, [r5], #1
 8015bc2:	9e00      	ldr	r6, [sp, #0]
 8015bc4:	1bae      	subs	r6, r5, r6
 8015bc6:	42b7      	cmp	r7, r6
 8015bc8:	4602      	mov	r2, r0
 8015bca:	460b      	mov	r3, r1
 8015bcc:	d134      	bne.n	8015c38 <_dtoa_r+0x708>
 8015bce:	f7ea fb5d 	bl	800028c <__adddf3>
 8015bd2:	4642      	mov	r2, r8
 8015bd4:	464b      	mov	r3, r9
 8015bd6:	4606      	mov	r6, r0
 8015bd8:	460f      	mov	r7, r1
 8015bda:	f7ea ff9d 	bl	8000b18 <__aeabi_dcmpgt>
 8015bde:	b9c8      	cbnz	r0, 8015c14 <_dtoa_r+0x6e4>
 8015be0:	4642      	mov	r2, r8
 8015be2:	464b      	mov	r3, r9
 8015be4:	4630      	mov	r0, r6
 8015be6:	4639      	mov	r1, r7
 8015be8:	f7ea ff6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8015bec:	b110      	cbz	r0, 8015bf4 <_dtoa_r+0x6c4>
 8015bee:	9b01      	ldr	r3, [sp, #4]
 8015bf0:	07db      	lsls	r3, r3, #31
 8015bf2:	d40f      	bmi.n	8015c14 <_dtoa_r+0x6e4>
 8015bf4:	4651      	mov	r1, sl
 8015bf6:	4620      	mov	r0, r4
 8015bf8:	f000 fe82 	bl	8016900 <_Bfree>
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015c00:	702b      	strb	r3, [r5, #0]
 8015c02:	f10b 0301 	add.w	r3, fp, #1
 8015c06:	6013      	str	r3, [r2, #0]
 8015c08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	f43f ace2 	beq.w	80155d4 <_dtoa_r+0xa4>
 8015c10:	601d      	str	r5, [r3, #0]
 8015c12:	e4df      	b.n	80155d4 <_dtoa_r+0xa4>
 8015c14:	465f      	mov	r7, fp
 8015c16:	462b      	mov	r3, r5
 8015c18:	461d      	mov	r5, r3
 8015c1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015c1e:	2a39      	cmp	r2, #57	; 0x39
 8015c20:	d106      	bne.n	8015c30 <_dtoa_r+0x700>
 8015c22:	9a00      	ldr	r2, [sp, #0]
 8015c24:	429a      	cmp	r2, r3
 8015c26:	d1f7      	bne.n	8015c18 <_dtoa_r+0x6e8>
 8015c28:	9900      	ldr	r1, [sp, #0]
 8015c2a:	2230      	movs	r2, #48	; 0x30
 8015c2c:	3701      	adds	r7, #1
 8015c2e:	700a      	strb	r2, [r1, #0]
 8015c30:	781a      	ldrb	r2, [r3, #0]
 8015c32:	3201      	adds	r2, #1
 8015c34:	701a      	strb	r2, [r3, #0]
 8015c36:	e790      	b.n	8015b5a <_dtoa_r+0x62a>
 8015c38:	4ba3      	ldr	r3, [pc, #652]	; (8015ec8 <_dtoa_r+0x998>)
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	f7ea fcdc 	bl	80005f8 <__aeabi_dmul>
 8015c40:	2200      	movs	r2, #0
 8015c42:	2300      	movs	r3, #0
 8015c44:	4606      	mov	r6, r0
 8015c46:	460f      	mov	r7, r1
 8015c48:	f7ea ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8015c4c:	2800      	cmp	r0, #0
 8015c4e:	d09e      	beq.n	8015b8e <_dtoa_r+0x65e>
 8015c50:	e7d0      	b.n	8015bf4 <_dtoa_r+0x6c4>
 8015c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c54:	2a00      	cmp	r2, #0
 8015c56:	f000 80ca 	beq.w	8015dee <_dtoa_r+0x8be>
 8015c5a:	9a07      	ldr	r2, [sp, #28]
 8015c5c:	2a01      	cmp	r2, #1
 8015c5e:	f300 80ad 	bgt.w	8015dbc <_dtoa_r+0x88c>
 8015c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c64:	2a00      	cmp	r2, #0
 8015c66:	f000 80a5 	beq.w	8015db4 <_dtoa_r+0x884>
 8015c6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015c6e:	9e08      	ldr	r6, [sp, #32]
 8015c70:	9d05      	ldr	r5, [sp, #20]
 8015c72:	9a05      	ldr	r2, [sp, #20]
 8015c74:	441a      	add	r2, r3
 8015c76:	9205      	str	r2, [sp, #20]
 8015c78:	9a06      	ldr	r2, [sp, #24]
 8015c7a:	2101      	movs	r1, #1
 8015c7c:	441a      	add	r2, r3
 8015c7e:	4620      	mov	r0, r4
 8015c80:	9206      	str	r2, [sp, #24]
 8015c82:	f000 ff3d 	bl	8016b00 <__i2b>
 8015c86:	4607      	mov	r7, r0
 8015c88:	b165      	cbz	r5, 8015ca4 <_dtoa_r+0x774>
 8015c8a:	9b06      	ldr	r3, [sp, #24]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	dd09      	ble.n	8015ca4 <_dtoa_r+0x774>
 8015c90:	42ab      	cmp	r3, r5
 8015c92:	9a05      	ldr	r2, [sp, #20]
 8015c94:	bfa8      	it	ge
 8015c96:	462b      	movge	r3, r5
 8015c98:	1ad2      	subs	r2, r2, r3
 8015c9a:	9205      	str	r2, [sp, #20]
 8015c9c:	9a06      	ldr	r2, [sp, #24]
 8015c9e:	1aed      	subs	r5, r5, r3
 8015ca0:	1ad3      	subs	r3, r2, r3
 8015ca2:	9306      	str	r3, [sp, #24]
 8015ca4:	9b08      	ldr	r3, [sp, #32]
 8015ca6:	b1f3      	cbz	r3, 8015ce6 <_dtoa_r+0x7b6>
 8015ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	f000 80a3 	beq.w	8015df6 <_dtoa_r+0x8c6>
 8015cb0:	2e00      	cmp	r6, #0
 8015cb2:	dd10      	ble.n	8015cd6 <_dtoa_r+0x7a6>
 8015cb4:	4639      	mov	r1, r7
 8015cb6:	4632      	mov	r2, r6
 8015cb8:	4620      	mov	r0, r4
 8015cba:	f000 ffe1 	bl	8016c80 <__pow5mult>
 8015cbe:	4652      	mov	r2, sl
 8015cc0:	4601      	mov	r1, r0
 8015cc2:	4607      	mov	r7, r0
 8015cc4:	4620      	mov	r0, r4
 8015cc6:	f000 ff31 	bl	8016b2c <__multiply>
 8015cca:	4651      	mov	r1, sl
 8015ccc:	4680      	mov	r8, r0
 8015cce:	4620      	mov	r0, r4
 8015cd0:	f000 fe16 	bl	8016900 <_Bfree>
 8015cd4:	46c2      	mov	sl, r8
 8015cd6:	9b08      	ldr	r3, [sp, #32]
 8015cd8:	1b9a      	subs	r2, r3, r6
 8015cda:	d004      	beq.n	8015ce6 <_dtoa_r+0x7b6>
 8015cdc:	4651      	mov	r1, sl
 8015cde:	4620      	mov	r0, r4
 8015ce0:	f000 ffce 	bl	8016c80 <__pow5mult>
 8015ce4:	4682      	mov	sl, r0
 8015ce6:	2101      	movs	r1, #1
 8015ce8:	4620      	mov	r0, r4
 8015cea:	f000 ff09 	bl	8016b00 <__i2b>
 8015cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	4606      	mov	r6, r0
 8015cf4:	f340 8081 	ble.w	8015dfa <_dtoa_r+0x8ca>
 8015cf8:	461a      	mov	r2, r3
 8015cfa:	4601      	mov	r1, r0
 8015cfc:	4620      	mov	r0, r4
 8015cfe:	f000 ffbf 	bl	8016c80 <__pow5mult>
 8015d02:	9b07      	ldr	r3, [sp, #28]
 8015d04:	2b01      	cmp	r3, #1
 8015d06:	4606      	mov	r6, r0
 8015d08:	dd7a      	ble.n	8015e00 <_dtoa_r+0x8d0>
 8015d0a:	f04f 0800 	mov.w	r8, #0
 8015d0e:	6933      	ldr	r3, [r6, #16]
 8015d10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015d14:	6918      	ldr	r0, [r3, #16]
 8015d16:	f000 fea5 	bl	8016a64 <__hi0bits>
 8015d1a:	f1c0 0020 	rsb	r0, r0, #32
 8015d1e:	9b06      	ldr	r3, [sp, #24]
 8015d20:	4418      	add	r0, r3
 8015d22:	f010 001f 	ands.w	r0, r0, #31
 8015d26:	f000 8094 	beq.w	8015e52 <_dtoa_r+0x922>
 8015d2a:	f1c0 0320 	rsb	r3, r0, #32
 8015d2e:	2b04      	cmp	r3, #4
 8015d30:	f340 8085 	ble.w	8015e3e <_dtoa_r+0x90e>
 8015d34:	9b05      	ldr	r3, [sp, #20]
 8015d36:	f1c0 001c 	rsb	r0, r0, #28
 8015d3a:	4403      	add	r3, r0
 8015d3c:	9305      	str	r3, [sp, #20]
 8015d3e:	9b06      	ldr	r3, [sp, #24]
 8015d40:	4403      	add	r3, r0
 8015d42:	4405      	add	r5, r0
 8015d44:	9306      	str	r3, [sp, #24]
 8015d46:	9b05      	ldr	r3, [sp, #20]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	dd05      	ble.n	8015d58 <_dtoa_r+0x828>
 8015d4c:	4651      	mov	r1, sl
 8015d4e:	461a      	mov	r2, r3
 8015d50:	4620      	mov	r0, r4
 8015d52:	f000 ffef 	bl	8016d34 <__lshift>
 8015d56:	4682      	mov	sl, r0
 8015d58:	9b06      	ldr	r3, [sp, #24]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	dd05      	ble.n	8015d6a <_dtoa_r+0x83a>
 8015d5e:	4631      	mov	r1, r6
 8015d60:	461a      	mov	r2, r3
 8015d62:	4620      	mov	r0, r4
 8015d64:	f000 ffe6 	bl	8016d34 <__lshift>
 8015d68:	4606      	mov	r6, r0
 8015d6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d072      	beq.n	8015e56 <_dtoa_r+0x926>
 8015d70:	4631      	mov	r1, r6
 8015d72:	4650      	mov	r0, sl
 8015d74:	f001 f84a 	bl	8016e0c <__mcmp>
 8015d78:	2800      	cmp	r0, #0
 8015d7a:	da6c      	bge.n	8015e56 <_dtoa_r+0x926>
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	4651      	mov	r1, sl
 8015d80:	220a      	movs	r2, #10
 8015d82:	4620      	mov	r0, r4
 8015d84:	f000 fdde 	bl	8016944 <__multadd>
 8015d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015d8e:	4682      	mov	sl, r0
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	f000 81b0 	beq.w	80160f6 <_dtoa_r+0xbc6>
 8015d96:	2300      	movs	r3, #0
 8015d98:	4639      	mov	r1, r7
 8015d9a:	220a      	movs	r2, #10
 8015d9c:	4620      	mov	r0, r4
 8015d9e:	f000 fdd1 	bl	8016944 <__multadd>
 8015da2:	9b01      	ldr	r3, [sp, #4]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	4607      	mov	r7, r0
 8015da8:	f300 8096 	bgt.w	8015ed8 <_dtoa_r+0x9a8>
 8015dac:	9b07      	ldr	r3, [sp, #28]
 8015dae:	2b02      	cmp	r3, #2
 8015db0:	dc59      	bgt.n	8015e66 <_dtoa_r+0x936>
 8015db2:	e091      	b.n	8015ed8 <_dtoa_r+0x9a8>
 8015db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015db6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015dba:	e758      	b.n	8015c6e <_dtoa_r+0x73e>
 8015dbc:	9b04      	ldr	r3, [sp, #16]
 8015dbe:	1e5e      	subs	r6, r3, #1
 8015dc0:	9b08      	ldr	r3, [sp, #32]
 8015dc2:	42b3      	cmp	r3, r6
 8015dc4:	bfbf      	itttt	lt
 8015dc6:	9b08      	ldrlt	r3, [sp, #32]
 8015dc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8015dca:	9608      	strlt	r6, [sp, #32]
 8015dcc:	1af3      	sublt	r3, r6, r3
 8015dce:	bfb4      	ite	lt
 8015dd0:	18d2      	addlt	r2, r2, r3
 8015dd2:	1b9e      	subge	r6, r3, r6
 8015dd4:	9b04      	ldr	r3, [sp, #16]
 8015dd6:	bfbc      	itt	lt
 8015dd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8015dda:	2600      	movlt	r6, #0
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	bfb7      	itett	lt
 8015de0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8015de4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015de8:	1a9d      	sublt	r5, r3, r2
 8015dea:	2300      	movlt	r3, #0
 8015dec:	e741      	b.n	8015c72 <_dtoa_r+0x742>
 8015dee:	9e08      	ldr	r6, [sp, #32]
 8015df0:	9d05      	ldr	r5, [sp, #20]
 8015df2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015df4:	e748      	b.n	8015c88 <_dtoa_r+0x758>
 8015df6:	9a08      	ldr	r2, [sp, #32]
 8015df8:	e770      	b.n	8015cdc <_dtoa_r+0x7ac>
 8015dfa:	9b07      	ldr	r3, [sp, #28]
 8015dfc:	2b01      	cmp	r3, #1
 8015dfe:	dc19      	bgt.n	8015e34 <_dtoa_r+0x904>
 8015e00:	9b02      	ldr	r3, [sp, #8]
 8015e02:	b9bb      	cbnz	r3, 8015e34 <_dtoa_r+0x904>
 8015e04:	9b03      	ldr	r3, [sp, #12]
 8015e06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015e0a:	b99b      	cbnz	r3, 8015e34 <_dtoa_r+0x904>
 8015e0c:	9b03      	ldr	r3, [sp, #12]
 8015e0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015e12:	0d1b      	lsrs	r3, r3, #20
 8015e14:	051b      	lsls	r3, r3, #20
 8015e16:	b183      	cbz	r3, 8015e3a <_dtoa_r+0x90a>
 8015e18:	9b05      	ldr	r3, [sp, #20]
 8015e1a:	3301      	adds	r3, #1
 8015e1c:	9305      	str	r3, [sp, #20]
 8015e1e:	9b06      	ldr	r3, [sp, #24]
 8015e20:	3301      	adds	r3, #1
 8015e22:	9306      	str	r3, [sp, #24]
 8015e24:	f04f 0801 	mov.w	r8, #1
 8015e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	f47f af6f 	bne.w	8015d0e <_dtoa_r+0x7de>
 8015e30:	2001      	movs	r0, #1
 8015e32:	e774      	b.n	8015d1e <_dtoa_r+0x7ee>
 8015e34:	f04f 0800 	mov.w	r8, #0
 8015e38:	e7f6      	b.n	8015e28 <_dtoa_r+0x8f8>
 8015e3a:	4698      	mov	r8, r3
 8015e3c:	e7f4      	b.n	8015e28 <_dtoa_r+0x8f8>
 8015e3e:	d082      	beq.n	8015d46 <_dtoa_r+0x816>
 8015e40:	9a05      	ldr	r2, [sp, #20]
 8015e42:	331c      	adds	r3, #28
 8015e44:	441a      	add	r2, r3
 8015e46:	9205      	str	r2, [sp, #20]
 8015e48:	9a06      	ldr	r2, [sp, #24]
 8015e4a:	441a      	add	r2, r3
 8015e4c:	441d      	add	r5, r3
 8015e4e:	9206      	str	r2, [sp, #24]
 8015e50:	e779      	b.n	8015d46 <_dtoa_r+0x816>
 8015e52:	4603      	mov	r3, r0
 8015e54:	e7f4      	b.n	8015e40 <_dtoa_r+0x910>
 8015e56:	9b04      	ldr	r3, [sp, #16]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	dc37      	bgt.n	8015ecc <_dtoa_r+0x99c>
 8015e5c:	9b07      	ldr	r3, [sp, #28]
 8015e5e:	2b02      	cmp	r3, #2
 8015e60:	dd34      	ble.n	8015ecc <_dtoa_r+0x99c>
 8015e62:	9b04      	ldr	r3, [sp, #16]
 8015e64:	9301      	str	r3, [sp, #4]
 8015e66:	9b01      	ldr	r3, [sp, #4]
 8015e68:	b963      	cbnz	r3, 8015e84 <_dtoa_r+0x954>
 8015e6a:	4631      	mov	r1, r6
 8015e6c:	2205      	movs	r2, #5
 8015e6e:	4620      	mov	r0, r4
 8015e70:	f000 fd68 	bl	8016944 <__multadd>
 8015e74:	4601      	mov	r1, r0
 8015e76:	4606      	mov	r6, r0
 8015e78:	4650      	mov	r0, sl
 8015e7a:	f000 ffc7 	bl	8016e0c <__mcmp>
 8015e7e:	2800      	cmp	r0, #0
 8015e80:	f73f adbb 	bgt.w	80159fa <_dtoa_r+0x4ca>
 8015e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e86:	9d00      	ldr	r5, [sp, #0]
 8015e88:	ea6f 0b03 	mvn.w	fp, r3
 8015e8c:	f04f 0800 	mov.w	r8, #0
 8015e90:	4631      	mov	r1, r6
 8015e92:	4620      	mov	r0, r4
 8015e94:	f000 fd34 	bl	8016900 <_Bfree>
 8015e98:	2f00      	cmp	r7, #0
 8015e9a:	f43f aeab 	beq.w	8015bf4 <_dtoa_r+0x6c4>
 8015e9e:	f1b8 0f00 	cmp.w	r8, #0
 8015ea2:	d005      	beq.n	8015eb0 <_dtoa_r+0x980>
 8015ea4:	45b8      	cmp	r8, r7
 8015ea6:	d003      	beq.n	8015eb0 <_dtoa_r+0x980>
 8015ea8:	4641      	mov	r1, r8
 8015eaa:	4620      	mov	r0, r4
 8015eac:	f000 fd28 	bl	8016900 <_Bfree>
 8015eb0:	4639      	mov	r1, r7
 8015eb2:	4620      	mov	r0, r4
 8015eb4:	f000 fd24 	bl	8016900 <_Bfree>
 8015eb8:	e69c      	b.n	8015bf4 <_dtoa_r+0x6c4>
 8015eba:	2600      	movs	r6, #0
 8015ebc:	4637      	mov	r7, r6
 8015ebe:	e7e1      	b.n	8015e84 <_dtoa_r+0x954>
 8015ec0:	46bb      	mov	fp, r7
 8015ec2:	4637      	mov	r7, r6
 8015ec4:	e599      	b.n	80159fa <_dtoa_r+0x4ca>
 8015ec6:	bf00      	nop
 8015ec8:	40240000 	.word	0x40240000
 8015ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	f000 80c8 	beq.w	8016064 <_dtoa_r+0xb34>
 8015ed4:	9b04      	ldr	r3, [sp, #16]
 8015ed6:	9301      	str	r3, [sp, #4]
 8015ed8:	2d00      	cmp	r5, #0
 8015eda:	dd05      	ble.n	8015ee8 <_dtoa_r+0x9b8>
 8015edc:	4639      	mov	r1, r7
 8015ede:	462a      	mov	r2, r5
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	f000 ff27 	bl	8016d34 <__lshift>
 8015ee6:	4607      	mov	r7, r0
 8015ee8:	f1b8 0f00 	cmp.w	r8, #0
 8015eec:	d05b      	beq.n	8015fa6 <_dtoa_r+0xa76>
 8015eee:	6879      	ldr	r1, [r7, #4]
 8015ef0:	4620      	mov	r0, r4
 8015ef2:	f000 fcc5 	bl	8016880 <_Balloc>
 8015ef6:	4605      	mov	r5, r0
 8015ef8:	b928      	cbnz	r0, 8015f06 <_dtoa_r+0x9d6>
 8015efa:	4b83      	ldr	r3, [pc, #524]	; (8016108 <_dtoa_r+0xbd8>)
 8015efc:	4602      	mov	r2, r0
 8015efe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8015f02:	f7ff bb2e 	b.w	8015562 <_dtoa_r+0x32>
 8015f06:	693a      	ldr	r2, [r7, #16]
 8015f08:	3202      	adds	r2, #2
 8015f0a:	0092      	lsls	r2, r2, #2
 8015f0c:	f107 010c 	add.w	r1, r7, #12
 8015f10:	300c      	adds	r0, #12
 8015f12:	f7ff fa4a 	bl	80153aa <memcpy>
 8015f16:	2201      	movs	r2, #1
 8015f18:	4629      	mov	r1, r5
 8015f1a:	4620      	mov	r0, r4
 8015f1c:	f000 ff0a 	bl	8016d34 <__lshift>
 8015f20:	9b00      	ldr	r3, [sp, #0]
 8015f22:	3301      	adds	r3, #1
 8015f24:	9304      	str	r3, [sp, #16]
 8015f26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015f2a:	4413      	add	r3, r2
 8015f2c:	9308      	str	r3, [sp, #32]
 8015f2e:	9b02      	ldr	r3, [sp, #8]
 8015f30:	f003 0301 	and.w	r3, r3, #1
 8015f34:	46b8      	mov	r8, r7
 8015f36:	9306      	str	r3, [sp, #24]
 8015f38:	4607      	mov	r7, r0
 8015f3a:	9b04      	ldr	r3, [sp, #16]
 8015f3c:	4631      	mov	r1, r6
 8015f3e:	3b01      	subs	r3, #1
 8015f40:	4650      	mov	r0, sl
 8015f42:	9301      	str	r3, [sp, #4]
 8015f44:	f7ff fa6c 	bl	8015420 <quorem>
 8015f48:	4641      	mov	r1, r8
 8015f4a:	9002      	str	r0, [sp, #8]
 8015f4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015f50:	4650      	mov	r0, sl
 8015f52:	f000 ff5b 	bl	8016e0c <__mcmp>
 8015f56:	463a      	mov	r2, r7
 8015f58:	9005      	str	r0, [sp, #20]
 8015f5a:	4631      	mov	r1, r6
 8015f5c:	4620      	mov	r0, r4
 8015f5e:	f000 ff71 	bl	8016e44 <__mdiff>
 8015f62:	68c2      	ldr	r2, [r0, #12]
 8015f64:	4605      	mov	r5, r0
 8015f66:	bb02      	cbnz	r2, 8015faa <_dtoa_r+0xa7a>
 8015f68:	4601      	mov	r1, r0
 8015f6a:	4650      	mov	r0, sl
 8015f6c:	f000 ff4e 	bl	8016e0c <__mcmp>
 8015f70:	4602      	mov	r2, r0
 8015f72:	4629      	mov	r1, r5
 8015f74:	4620      	mov	r0, r4
 8015f76:	9209      	str	r2, [sp, #36]	; 0x24
 8015f78:	f000 fcc2 	bl	8016900 <_Bfree>
 8015f7c:	9b07      	ldr	r3, [sp, #28]
 8015f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f80:	9d04      	ldr	r5, [sp, #16]
 8015f82:	ea43 0102 	orr.w	r1, r3, r2
 8015f86:	9b06      	ldr	r3, [sp, #24]
 8015f88:	4319      	orrs	r1, r3
 8015f8a:	d110      	bne.n	8015fae <_dtoa_r+0xa7e>
 8015f8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015f90:	d029      	beq.n	8015fe6 <_dtoa_r+0xab6>
 8015f92:	9b05      	ldr	r3, [sp, #20]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	dd02      	ble.n	8015f9e <_dtoa_r+0xa6e>
 8015f98:	9b02      	ldr	r3, [sp, #8]
 8015f9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8015f9e:	9b01      	ldr	r3, [sp, #4]
 8015fa0:	f883 9000 	strb.w	r9, [r3]
 8015fa4:	e774      	b.n	8015e90 <_dtoa_r+0x960>
 8015fa6:	4638      	mov	r0, r7
 8015fa8:	e7ba      	b.n	8015f20 <_dtoa_r+0x9f0>
 8015faa:	2201      	movs	r2, #1
 8015fac:	e7e1      	b.n	8015f72 <_dtoa_r+0xa42>
 8015fae:	9b05      	ldr	r3, [sp, #20]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	db04      	blt.n	8015fbe <_dtoa_r+0xa8e>
 8015fb4:	9907      	ldr	r1, [sp, #28]
 8015fb6:	430b      	orrs	r3, r1
 8015fb8:	9906      	ldr	r1, [sp, #24]
 8015fba:	430b      	orrs	r3, r1
 8015fbc:	d120      	bne.n	8016000 <_dtoa_r+0xad0>
 8015fbe:	2a00      	cmp	r2, #0
 8015fc0:	dded      	ble.n	8015f9e <_dtoa_r+0xa6e>
 8015fc2:	4651      	mov	r1, sl
 8015fc4:	2201      	movs	r2, #1
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	f000 feb4 	bl	8016d34 <__lshift>
 8015fcc:	4631      	mov	r1, r6
 8015fce:	4682      	mov	sl, r0
 8015fd0:	f000 ff1c 	bl	8016e0c <__mcmp>
 8015fd4:	2800      	cmp	r0, #0
 8015fd6:	dc03      	bgt.n	8015fe0 <_dtoa_r+0xab0>
 8015fd8:	d1e1      	bne.n	8015f9e <_dtoa_r+0xa6e>
 8015fda:	f019 0f01 	tst.w	r9, #1
 8015fde:	d0de      	beq.n	8015f9e <_dtoa_r+0xa6e>
 8015fe0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015fe4:	d1d8      	bne.n	8015f98 <_dtoa_r+0xa68>
 8015fe6:	9a01      	ldr	r2, [sp, #4]
 8015fe8:	2339      	movs	r3, #57	; 0x39
 8015fea:	7013      	strb	r3, [r2, #0]
 8015fec:	462b      	mov	r3, r5
 8015fee:	461d      	mov	r5, r3
 8015ff0:	3b01      	subs	r3, #1
 8015ff2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015ff6:	2a39      	cmp	r2, #57	; 0x39
 8015ff8:	d06c      	beq.n	80160d4 <_dtoa_r+0xba4>
 8015ffa:	3201      	adds	r2, #1
 8015ffc:	701a      	strb	r2, [r3, #0]
 8015ffe:	e747      	b.n	8015e90 <_dtoa_r+0x960>
 8016000:	2a00      	cmp	r2, #0
 8016002:	dd07      	ble.n	8016014 <_dtoa_r+0xae4>
 8016004:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016008:	d0ed      	beq.n	8015fe6 <_dtoa_r+0xab6>
 801600a:	9a01      	ldr	r2, [sp, #4]
 801600c:	f109 0301 	add.w	r3, r9, #1
 8016010:	7013      	strb	r3, [r2, #0]
 8016012:	e73d      	b.n	8015e90 <_dtoa_r+0x960>
 8016014:	9b04      	ldr	r3, [sp, #16]
 8016016:	9a08      	ldr	r2, [sp, #32]
 8016018:	f803 9c01 	strb.w	r9, [r3, #-1]
 801601c:	4293      	cmp	r3, r2
 801601e:	d043      	beq.n	80160a8 <_dtoa_r+0xb78>
 8016020:	4651      	mov	r1, sl
 8016022:	2300      	movs	r3, #0
 8016024:	220a      	movs	r2, #10
 8016026:	4620      	mov	r0, r4
 8016028:	f000 fc8c 	bl	8016944 <__multadd>
 801602c:	45b8      	cmp	r8, r7
 801602e:	4682      	mov	sl, r0
 8016030:	f04f 0300 	mov.w	r3, #0
 8016034:	f04f 020a 	mov.w	r2, #10
 8016038:	4641      	mov	r1, r8
 801603a:	4620      	mov	r0, r4
 801603c:	d107      	bne.n	801604e <_dtoa_r+0xb1e>
 801603e:	f000 fc81 	bl	8016944 <__multadd>
 8016042:	4680      	mov	r8, r0
 8016044:	4607      	mov	r7, r0
 8016046:	9b04      	ldr	r3, [sp, #16]
 8016048:	3301      	adds	r3, #1
 801604a:	9304      	str	r3, [sp, #16]
 801604c:	e775      	b.n	8015f3a <_dtoa_r+0xa0a>
 801604e:	f000 fc79 	bl	8016944 <__multadd>
 8016052:	4639      	mov	r1, r7
 8016054:	4680      	mov	r8, r0
 8016056:	2300      	movs	r3, #0
 8016058:	220a      	movs	r2, #10
 801605a:	4620      	mov	r0, r4
 801605c:	f000 fc72 	bl	8016944 <__multadd>
 8016060:	4607      	mov	r7, r0
 8016062:	e7f0      	b.n	8016046 <_dtoa_r+0xb16>
 8016064:	9b04      	ldr	r3, [sp, #16]
 8016066:	9301      	str	r3, [sp, #4]
 8016068:	9d00      	ldr	r5, [sp, #0]
 801606a:	4631      	mov	r1, r6
 801606c:	4650      	mov	r0, sl
 801606e:	f7ff f9d7 	bl	8015420 <quorem>
 8016072:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8016076:	9b00      	ldr	r3, [sp, #0]
 8016078:	f805 9b01 	strb.w	r9, [r5], #1
 801607c:	1aea      	subs	r2, r5, r3
 801607e:	9b01      	ldr	r3, [sp, #4]
 8016080:	4293      	cmp	r3, r2
 8016082:	dd07      	ble.n	8016094 <_dtoa_r+0xb64>
 8016084:	4651      	mov	r1, sl
 8016086:	2300      	movs	r3, #0
 8016088:	220a      	movs	r2, #10
 801608a:	4620      	mov	r0, r4
 801608c:	f000 fc5a 	bl	8016944 <__multadd>
 8016090:	4682      	mov	sl, r0
 8016092:	e7ea      	b.n	801606a <_dtoa_r+0xb3a>
 8016094:	9b01      	ldr	r3, [sp, #4]
 8016096:	2b00      	cmp	r3, #0
 8016098:	bfc8      	it	gt
 801609a:	461d      	movgt	r5, r3
 801609c:	9b00      	ldr	r3, [sp, #0]
 801609e:	bfd8      	it	le
 80160a0:	2501      	movle	r5, #1
 80160a2:	441d      	add	r5, r3
 80160a4:	f04f 0800 	mov.w	r8, #0
 80160a8:	4651      	mov	r1, sl
 80160aa:	2201      	movs	r2, #1
 80160ac:	4620      	mov	r0, r4
 80160ae:	f000 fe41 	bl	8016d34 <__lshift>
 80160b2:	4631      	mov	r1, r6
 80160b4:	4682      	mov	sl, r0
 80160b6:	f000 fea9 	bl	8016e0c <__mcmp>
 80160ba:	2800      	cmp	r0, #0
 80160bc:	dc96      	bgt.n	8015fec <_dtoa_r+0xabc>
 80160be:	d102      	bne.n	80160c6 <_dtoa_r+0xb96>
 80160c0:	f019 0f01 	tst.w	r9, #1
 80160c4:	d192      	bne.n	8015fec <_dtoa_r+0xabc>
 80160c6:	462b      	mov	r3, r5
 80160c8:	461d      	mov	r5, r3
 80160ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80160ce:	2a30      	cmp	r2, #48	; 0x30
 80160d0:	d0fa      	beq.n	80160c8 <_dtoa_r+0xb98>
 80160d2:	e6dd      	b.n	8015e90 <_dtoa_r+0x960>
 80160d4:	9a00      	ldr	r2, [sp, #0]
 80160d6:	429a      	cmp	r2, r3
 80160d8:	d189      	bne.n	8015fee <_dtoa_r+0xabe>
 80160da:	f10b 0b01 	add.w	fp, fp, #1
 80160de:	2331      	movs	r3, #49	; 0x31
 80160e0:	e796      	b.n	8016010 <_dtoa_r+0xae0>
 80160e2:	4b0a      	ldr	r3, [pc, #40]	; (801610c <_dtoa_r+0xbdc>)
 80160e4:	f7ff ba99 	b.w	801561a <_dtoa_r+0xea>
 80160e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	f47f aa6d 	bne.w	80155ca <_dtoa_r+0x9a>
 80160f0:	4b07      	ldr	r3, [pc, #28]	; (8016110 <_dtoa_r+0xbe0>)
 80160f2:	f7ff ba92 	b.w	801561a <_dtoa_r+0xea>
 80160f6:	9b01      	ldr	r3, [sp, #4]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	dcb5      	bgt.n	8016068 <_dtoa_r+0xb38>
 80160fc:	9b07      	ldr	r3, [sp, #28]
 80160fe:	2b02      	cmp	r3, #2
 8016100:	f73f aeb1 	bgt.w	8015e66 <_dtoa_r+0x936>
 8016104:	e7b0      	b.n	8016068 <_dtoa_r+0xb38>
 8016106:	bf00      	nop
 8016108:	0801b13c 	.word	0x0801b13c
 801610c:	0801aff9 	.word	0x0801aff9
 8016110:	0801b0d7 	.word	0x0801b0d7

08016114 <_free_r>:
 8016114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016116:	2900      	cmp	r1, #0
 8016118:	d044      	beq.n	80161a4 <_free_r+0x90>
 801611a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801611e:	9001      	str	r0, [sp, #4]
 8016120:	2b00      	cmp	r3, #0
 8016122:	f1a1 0404 	sub.w	r4, r1, #4
 8016126:	bfb8      	it	lt
 8016128:	18e4      	addlt	r4, r4, r3
 801612a:	f7fd f93f 	bl	80133ac <__malloc_lock>
 801612e:	4a1e      	ldr	r2, [pc, #120]	; (80161a8 <_free_r+0x94>)
 8016130:	9801      	ldr	r0, [sp, #4]
 8016132:	6813      	ldr	r3, [r2, #0]
 8016134:	b933      	cbnz	r3, 8016144 <_free_r+0x30>
 8016136:	6063      	str	r3, [r4, #4]
 8016138:	6014      	str	r4, [r2, #0]
 801613a:	b003      	add	sp, #12
 801613c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016140:	f7fd b93a 	b.w	80133b8 <__malloc_unlock>
 8016144:	42a3      	cmp	r3, r4
 8016146:	d908      	bls.n	801615a <_free_r+0x46>
 8016148:	6825      	ldr	r5, [r4, #0]
 801614a:	1961      	adds	r1, r4, r5
 801614c:	428b      	cmp	r3, r1
 801614e:	bf01      	itttt	eq
 8016150:	6819      	ldreq	r1, [r3, #0]
 8016152:	685b      	ldreq	r3, [r3, #4]
 8016154:	1949      	addeq	r1, r1, r5
 8016156:	6021      	streq	r1, [r4, #0]
 8016158:	e7ed      	b.n	8016136 <_free_r+0x22>
 801615a:	461a      	mov	r2, r3
 801615c:	685b      	ldr	r3, [r3, #4]
 801615e:	b10b      	cbz	r3, 8016164 <_free_r+0x50>
 8016160:	42a3      	cmp	r3, r4
 8016162:	d9fa      	bls.n	801615a <_free_r+0x46>
 8016164:	6811      	ldr	r1, [r2, #0]
 8016166:	1855      	adds	r5, r2, r1
 8016168:	42a5      	cmp	r5, r4
 801616a:	d10b      	bne.n	8016184 <_free_r+0x70>
 801616c:	6824      	ldr	r4, [r4, #0]
 801616e:	4421      	add	r1, r4
 8016170:	1854      	adds	r4, r2, r1
 8016172:	42a3      	cmp	r3, r4
 8016174:	6011      	str	r1, [r2, #0]
 8016176:	d1e0      	bne.n	801613a <_free_r+0x26>
 8016178:	681c      	ldr	r4, [r3, #0]
 801617a:	685b      	ldr	r3, [r3, #4]
 801617c:	6053      	str	r3, [r2, #4]
 801617e:	440c      	add	r4, r1
 8016180:	6014      	str	r4, [r2, #0]
 8016182:	e7da      	b.n	801613a <_free_r+0x26>
 8016184:	d902      	bls.n	801618c <_free_r+0x78>
 8016186:	230c      	movs	r3, #12
 8016188:	6003      	str	r3, [r0, #0]
 801618a:	e7d6      	b.n	801613a <_free_r+0x26>
 801618c:	6825      	ldr	r5, [r4, #0]
 801618e:	1961      	adds	r1, r4, r5
 8016190:	428b      	cmp	r3, r1
 8016192:	bf04      	itt	eq
 8016194:	6819      	ldreq	r1, [r3, #0]
 8016196:	685b      	ldreq	r3, [r3, #4]
 8016198:	6063      	str	r3, [r4, #4]
 801619a:	bf04      	itt	eq
 801619c:	1949      	addeq	r1, r1, r5
 801619e:	6021      	streq	r1, [r4, #0]
 80161a0:	6054      	str	r4, [r2, #4]
 80161a2:	e7ca      	b.n	801613a <_free_r+0x26>
 80161a4:	b003      	add	sp, #12
 80161a6:	bd30      	pop	{r4, r5, pc}
 80161a8:	20002268 	.word	0x20002268

080161ac <rshift>:
 80161ac:	6903      	ldr	r3, [r0, #16]
 80161ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80161b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80161ba:	f100 0414 	add.w	r4, r0, #20
 80161be:	dd45      	ble.n	801624c <rshift+0xa0>
 80161c0:	f011 011f 	ands.w	r1, r1, #31
 80161c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80161c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80161cc:	d10c      	bne.n	80161e8 <rshift+0x3c>
 80161ce:	f100 0710 	add.w	r7, r0, #16
 80161d2:	4629      	mov	r1, r5
 80161d4:	42b1      	cmp	r1, r6
 80161d6:	d334      	bcc.n	8016242 <rshift+0x96>
 80161d8:	1a9b      	subs	r3, r3, r2
 80161da:	009b      	lsls	r3, r3, #2
 80161dc:	1eea      	subs	r2, r5, #3
 80161de:	4296      	cmp	r6, r2
 80161e0:	bf38      	it	cc
 80161e2:	2300      	movcc	r3, #0
 80161e4:	4423      	add	r3, r4
 80161e6:	e015      	b.n	8016214 <rshift+0x68>
 80161e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80161ec:	f1c1 0820 	rsb	r8, r1, #32
 80161f0:	40cf      	lsrs	r7, r1
 80161f2:	f105 0e04 	add.w	lr, r5, #4
 80161f6:	46a1      	mov	r9, r4
 80161f8:	4576      	cmp	r6, lr
 80161fa:	46f4      	mov	ip, lr
 80161fc:	d815      	bhi.n	801622a <rshift+0x7e>
 80161fe:	1a9a      	subs	r2, r3, r2
 8016200:	0092      	lsls	r2, r2, #2
 8016202:	3a04      	subs	r2, #4
 8016204:	3501      	adds	r5, #1
 8016206:	42ae      	cmp	r6, r5
 8016208:	bf38      	it	cc
 801620a:	2200      	movcc	r2, #0
 801620c:	18a3      	adds	r3, r4, r2
 801620e:	50a7      	str	r7, [r4, r2]
 8016210:	b107      	cbz	r7, 8016214 <rshift+0x68>
 8016212:	3304      	adds	r3, #4
 8016214:	1b1a      	subs	r2, r3, r4
 8016216:	42a3      	cmp	r3, r4
 8016218:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801621c:	bf08      	it	eq
 801621e:	2300      	moveq	r3, #0
 8016220:	6102      	str	r2, [r0, #16]
 8016222:	bf08      	it	eq
 8016224:	6143      	streq	r3, [r0, #20]
 8016226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801622a:	f8dc c000 	ldr.w	ip, [ip]
 801622e:	fa0c fc08 	lsl.w	ip, ip, r8
 8016232:	ea4c 0707 	orr.w	r7, ip, r7
 8016236:	f849 7b04 	str.w	r7, [r9], #4
 801623a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801623e:	40cf      	lsrs	r7, r1
 8016240:	e7da      	b.n	80161f8 <rshift+0x4c>
 8016242:	f851 cb04 	ldr.w	ip, [r1], #4
 8016246:	f847 cf04 	str.w	ip, [r7, #4]!
 801624a:	e7c3      	b.n	80161d4 <rshift+0x28>
 801624c:	4623      	mov	r3, r4
 801624e:	e7e1      	b.n	8016214 <rshift+0x68>

08016250 <__hexdig_fun>:
 8016250:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016254:	2b09      	cmp	r3, #9
 8016256:	d802      	bhi.n	801625e <__hexdig_fun+0xe>
 8016258:	3820      	subs	r0, #32
 801625a:	b2c0      	uxtb	r0, r0
 801625c:	4770      	bx	lr
 801625e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016262:	2b05      	cmp	r3, #5
 8016264:	d801      	bhi.n	801626a <__hexdig_fun+0x1a>
 8016266:	3847      	subs	r0, #71	; 0x47
 8016268:	e7f7      	b.n	801625a <__hexdig_fun+0xa>
 801626a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801626e:	2b05      	cmp	r3, #5
 8016270:	d801      	bhi.n	8016276 <__hexdig_fun+0x26>
 8016272:	3827      	subs	r0, #39	; 0x27
 8016274:	e7f1      	b.n	801625a <__hexdig_fun+0xa>
 8016276:	2000      	movs	r0, #0
 8016278:	4770      	bx	lr
	...

0801627c <__gethex>:
 801627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016280:	4617      	mov	r7, r2
 8016282:	680a      	ldr	r2, [r1, #0]
 8016284:	b085      	sub	sp, #20
 8016286:	f102 0b02 	add.w	fp, r2, #2
 801628a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801628e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016292:	4681      	mov	r9, r0
 8016294:	468a      	mov	sl, r1
 8016296:	9302      	str	r3, [sp, #8]
 8016298:	32fe      	adds	r2, #254	; 0xfe
 801629a:	eb02 030b 	add.w	r3, r2, fp
 801629e:	46d8      	mov	r8, fp
 80162a0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80162a4:	9301      	str	r3, [sp, #4]
 80162a6:	2830      	cmp	r0, #48	; 0x30
 80162a8:	d0f7      	beq.n	801629a <__gethex+0x1e>
 80162aa:	f7ff ffd1 	bl	8016250 <__hexdig_fun>
 80162ae:	4604      	mov	r4, r0
 80162b0:	2800      	cmp	r0, #0
 80162b2:	d138      	bne.n	8016326 <__gethex+0xaa>
 80162b4:	49a7      	ldr	r1, [pc, #668]	; (8016554 <__gethex+0x2d8>)
 80162b6:	2201      	movs	r2, #1
 80162b8:	4640      	mov	r0, r8
 80162ba:	f7fe ff62 	bl	8015182 <strncmp>
 80162be:	4606      	mov	r6, r0
 80162c0:	2800      	cmp	r0, #0
 80162c2:	d169      	bne.n	8016398 <__gethex+0x11c>
 80162c4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80162c8:	465d      	mov	r5, fp
 80162ca:	f7ff ffc1 	bl	8016250 <__hexdig_fun>
 80162ce:	2800      	cmp	r0, #0
 80162d0:	d064      	beq.n	801639c <__gethex+0x120>
 80162d2:	465a      	mov	r2, fp
 80162d4:	7810      	ldrb	r0, [r2, #0]
 80162d6:	2830      	cmp	r0, #48	; 0x30
 80162d8:	4690      	mov	r8, r2
 80162da:	f102 0201 	add.w	r2, r2, #1
 80162de:	d0f9      	beq.n	80162d4 <__gethex+0x58>
 80162e0:	f7ff ffb6 	bl	8016250 <__hexdig_fun>
 80162e4:	2301      	movs	r3, #1
 80162e6:	fab0 f480 	clz	r4, r0
 80162ea:	0964      	lsrs	r4, r4, #5
 80162ec:	465e      	mov	r6, fp
 80162ee:	9301      	str	r3, [sp, #4]
 80162f0:	4642      	mov	r2, r8
 80162f2:	4615      	mov	r5, r2
 80162f4:	3201      	adds	r2, #1
 80162f6:	7828      	ldrb	r0, [r5, #0]
 80162f8:	f7ff ffaa 	bl	8016250 <__hexdig_fun>
 80162fc:	2800      	cmp	r0, #0
 80162fe:	d1f8      	bne.n	80162f2 <__gethex+0x76>
 8016300:	4994      	ldr	r1, [pc, #592]	; (8016554 <__gethex+0x2d8>)
 8016302:	2201      	movs	r2, #1
 8016304:	4628      	mov	r0, r5
 8016306:	f7fe ff3c 	bl	8015182 <strncmp>
 801630a:	b978      	cbnz	r0, 801632c <__gethex+0xb0>
 801630c:	b946      	cbnz	r6, 8016320 <__gethex+0xa4>
 801630e:	1c6e      	adds	r6, r5, #1
 8016310:	4632      	mov	r2, r6
 8016312:	4615      	mov	r5, r2
 8016314:	3201      	adds	r2, #1
 8016316:	7828      	ldrb	r0, [r5, #0]
 8016318:	f7ff ff9a 	bl	8016250 <__hexdig_fun>
 801631c:	2800      	cmp	r0, #0
 801631e:	d1f8      	bne.n	8016312 <__gethex+0x96>
 8016320:	1b73      	subs	r3, r6, r5
 8016322:	009e      	lsls	r6, r3, #2
 8016324:	e004      	b.n	8016330 <__gethex+0xb4>
 8016326:	2400      	movs	r4, #0
 8016328:	4626      	mov	r6, r4
 801632a:	e7e1      	b.n	80162f0 <__gethex+0x74>
 801632c:	2e00      	cmp	r6, #0
 801632e:	d1f7      	bne.n	8016320 <__gethex+0xa4>
 8016330:	782b      	ldrb	r3, [r5, #0]
 8016332:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016336:	2b50      	cmp	r3, #80	; 0x50
 8016338:	d13d      	bne.n	80163b6 <__gethex+0x13a>
 801633a:	786b      	ldrb	r3, [r5, #1]
 801633c:	2b2b      	cmp	r3, #43	; 0x2b
 801633e:	d02f      	beq.n	80163a0 <__gethex+0x124>
 8016340:	2b2d      	cmp	r3, #45	; 0x2d
 8016342:	d031      	beq.n	80163a8 <__gethex+0x12c>
 8016344:	1c69      	adds	r1, r5, #1
 8016346:	f04f 0b00 	mov.w	fp, #0
 801634a:	7808      	ldrb	r0, [r1, #0]
 801634c:	f7ff ff80 	bl	8016250 <__hexdig_fun>
 8016350:	1e42      	subs	r2, r0, #1
 8016352:	b2d2      	uxtb	r2, r2
 8016354:	2a18      	cmp	r2, #24
 8016356:	d82e      	bhi.n	80163b6 <__gethex+0x13a>
 8016358:	f1a0 0210 	sub.w	r2, r0, #16
 801635c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016360:	f7ff ff76 	bl	8016250 <__hexdig_fun>
 8016364:	f100 3cff 	add.w	ip, r0, #4294967295
 8016368:	fa5f fc8c 	uxtb.w	ip, ip
 801636c:	f1bc 0f18 	cmp.w	ip, #24
 8016370:	d91d      	bls.n	80163ae <__gethex+0x132>
 8016372:	f1bb 0f00 	cmp.w	fp, #0
 8016376:	d000      	beq.n	801637a <__gethex+0xfe>
 8016378:	4252      	negs	r2, r2
 801637a:	4416      	add	r6, r2
 801637c:	f8ca 1000 	str.w	r1, [sl]
 8016380:	b1dc      	cbz	r4, 80163ba <__gethex+0x13e>
 8016382:	9b01      	ldr	r3, [sp, #4]
 8016384:	2b00      	cmp	r3, #0
 8016386:	bf14      	ite	ne
 8016388:	f04f 0800 	movne.w	r8, #0
 801638c:	f04f 0806 	moveq.w	r8, #6
 8016390:	4640      	mov	r0, r8
 8016392:	b005      	add	sp, #20
 8016394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016398:	4645      	mov	r5, r8
 801639a:	4626      	mov	r6, r4
 801639c:	2401      	movs	r4, #1
 801639e:	e7c7      	b.n	8016330 <__gethex+0xb4>
 80163a0:	f04f 0b00 	mov.w	fp, #0
 80163a4:	1ca9      	adds	r1, r5, #2
 80163a6:	e7d0      	b.n	801634a <__gethex+0xce>
 80163a8:	f04f 0b01 	mov.w	fp, #1
 80163ac:	e7fa      	b.n	80163a4 <__gethex+0x128>
 80163ae:	230a      	movs	r3, #10
 80163b0:	fb03 0002 	mla	r0, r3, r2, r0
 80163b4:	e7d0      	b.n	8016358 <__gethex+0xdc>
 80163b6:	4629      	mov	r1, r5
 80163b8:	e7e0      	b.n	801637c <__gethex+0x100>
 80163ba:	eba5 0308 	sub.w	r3, r5, r8
 80163be:	3b01      	subs	r3, #1
 80163c0:	4621      	mov	r1, r4
 80163c2:	2b07      	cmp	r3, #7
 80163c4:	dc0a      	bgt.n	80163dc <__gethex+0x160>
 80163c6:	4648      	mov	r0, r9
 80163c8:	f000 fa5a 	bl	8016880 <_Balloc>
 80163cc:	4604      	mov	r4, r0
 80163ce:	b940      	cbnz	r0, 80163e2 <__gethex+0x166>
 80163d0:	4b61      	ldr	r3, [pc, #388]	; (8016558 <__gethex+0x2dc>)
 80163d2:	4602      	mov	r2, r0
 80163d4:	21e4      	movs	r1, #228	; 0xe4
 80163d6:	4861      	ldr	r0, [pc, #388]	; (801655c <__gethex+0x2e0>)
 80163d8:	f7ff f804 	bl	80153e4 <__assert_func>
 80163dc:	3101      	adds	r1, #1
 80163de:	105b      	asrs	r3, r3, #1
 80163e0:	e7ef      	b.n	80163c2 <__gethex+0x146>
 80163e2:	f100 0a14 	add.w	sl, r0, #20
 80163e6:	2300      	movs	r3, #0
 80163e8:	495a      	ldr	r1, [pc, #360]	; (8016554 <__gethex+0x2d8>)
 80163ea:	f8cd a004 	str.w	sl, [sp, #4]
 80163ee:	469b      	mov	fp, r3
 80163f0:	45a8      	cmp	r8, r5
 80163f2:	d342      	bcc.n	801647a <__gethex+0x1fe>
 80163f4:	9801      	ldr	r0, [sp, #4]
 80163f6:	f840 bb04 	str.w	fp, [r0], #4
 80163fa:	eba0 000a 	sub.w	r0, r0, sl
 80163fe:	1080      	asrs	r0, r0, #2
 8016400:	6120      	str	r0, [r4, #16]
 8016402:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8016406:	4658      	mov	r0, fp
 8016408:	f000 fb2c 	bl	8016a64 <__hi0bits>
 801640c:	683d      	ldr	r5, [r7, #0]
 801640e:	eba8 0000 	sub.w	r0, r8, r0
 8016412:	42a8      	cmp	r0, r5
 8016414:	dd59      	ble.n	80164ca <__gethex+0x24e>
 8016416:	eba0 0805 	sub.w	r8, r0, r5
 801641a:	4641      	mov	r1, r8
 801641c:	4620      	mov	r0, r4
 801641e:	f000 febb 	bl	8017198 <__any_on>
 8016422:	4683      	mov	fp, r0
 8016424:	b1b8      	cbz	r0, 8016456 <__gethex+0x1da>
 8016426:	f108 33ff 	add.w	r3, r8, #4294967295
 801642a:	1159      	asrs	r1, r3, #5
 801642c:	f003 021f 	and.w	r2, r3, #31
 8016430:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016434:	f04f 0b01 	mov.w	fp, #1
 8016438:	fa0b f202 	lsl.w	r2, fp, r2
 801643c:	420a      	tst	r2, r1
 801643e:	d00a      	beq.n	8016456 <__gethex+0x1da>
 8016440:	455b      	cmp	r3, fp
 8016442:	dd06      	ble.n	8016452 <__gethex+0x1d6>
 8016444:	f1a8 0102 	sub.w	r1, r8, #2
 8016448:	4620      	mov	r0, r4
 801644a:	f000 fea5 	bl	8017198 <__any_on>
 801644e:	2800      	cmp	r0, #0
 8016450:	d138      	bne.n	80164c4 <__gethex+0x248>
 8016452:	f04f 0b02 	mov.w	fp, #2
 8016456:	4641      	mov	r1, r8
 8016458:	4620      	mov	r0, r4
 801645a:	f7ff fea7 	bl	80161ac <rshift>
 801645e:	4446      	add	r6, r8
 8016460:	68bb      	ldr	r3, [r7, #8]
 8016462:	42b3      	cmp	r3, r6
 8016464:	da41      	bge.n	80164ea <__gethex+0x26e>
 8016466:	4621      	mov	r1, r4
 8016468:	4648      	mov	r0, r9
 801646a:	f000 fa49 	bl	8016900 <_Bfree>
 801646e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016470:	2300      	movs	r3, #0
 8016472:	6013      	str	r3, [r2, #0]
 8016474:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8016478:	e78a      	b.n	8016390 <__gethex+0x114>
 801647a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801647e:	2a2e      	cmp	r2, #46	; 0x2e
 8016480:	d014      	beq.n	80164ac <__gethex+0x230>
 8016482:	2b20      	cmp	r3, #32
 8016484:	d106      	bne.n	8016494 <__gethex+0x218>
 8016486:	9b01      	ldr	r3, [sp, #4]
 8016488:	f843 bb04 	str.w	fp, [r3], #4
 801648c:	f04f 0b00 	mov.w	fp, #0
 8016490:	9301      	str	r3, [sp, #4]
 8016492:	465b      	mov	r3, fp
 8016494:	7828      	ldrb	r0, [r5, #0]
 8016496:	9303      	str	r3, [sp, #12]
 8016498:	f7ff feda 	bl	8016250 <__hexdig_fun>
 801649c:	9b03      	ldr	r3, [sp, #12]
 801649e:	f000 000f 	and.w	r0, r0, #15
 80164a2:	4098      	lsls	r0, r3
 80164a4:	ea4b 0b00 	orr.w	fp, fp, r0
 80164a8:	3304      	adds	r3, #4
 80164aa:	e7a1      	b.n	80163f0 <__gethex+0x174>
 80164ac:	45a8      	cmp	r8, r5
 80164ae:	d8e8      	bhi.n	8016482 <__gethex+0x206>
 80164b0:	2201      	movs	r2, #1
 80164b2:	4628      	mov	r0, r5
 80164b4:	9303      	str	r3, [sp, #12]
 80164b6:	f7fe fe64 	bl	8015182 <strncmp>
 80164ba:	4926      	ldr	r1, [pc, #152]	; (8016554 <__gethex+0x2d8>)
 80164bc:	9b03      	ldr	r3, [sp, #12]
 80164be:	2800      	cmp	r0, #0
 80164c0:	d1df      	bne.n	8016482 <__gethex+0x206>
 80164c2:	e795      	b.n	80163f0 <__gethex+0x174>
 80164c4:	f04f 0b03 	mov.w	fp, #3
 80164c8:	e7c5      	b.n	8016456 <__gethex+0x1da>
 80164ca:	da0b      	bge.n	80164e4 <__gethex+0x268>
 80164cc:	eba5 0800 	sub.w	r8, r5, r0
 80164d0:	4621      	mov	r1, r4
 80164d2:	4642      	mov	r2, r8
 80164d4:	4648      	mov	r0, r9
 80164d6:	f000 fc2d 	bl	8016d34 <__lshift>
 80164da:	eba6 0608 	sub.w	r6, r6, r8
 80164de:	4604      	mov	r4, r0
 80164e0:	f100 0a14 	add.w	sl, r0, #20
 80164e4:	f04f 0b00 	mov.w	fp, #0
 80164e8:	e7ba      	b.n	8016460 <__gethex+0x1e4>
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	42b3      	cmp	r3, r6
 80164ee:	dd73      	ble.n	80165d8 <__gethex+0x35c>
 80164f0:	1b9e      	subs	r6, r3, r6
 80164f2:	42b5      	cmp	r5, r6
 80164f4:	dc34      	bgt.n	8016560 <__gethex+0x2e4>
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	2b02      	cmp	r3, #2
 80164fa:	d023      	beq.n	8016544 <__gethex+0x2c8>
 80164fc:	2b03      	cmp	r3, #3
 80164fe:	d025      	beq.n	801654c <__gethex+0x2d0>
 8016500:	2b01      	cmp	r3, #1
 8016502:	d115      	bne.n	8016530 <__gethex+0x2b4>
 8016504:	42b5      	cmp	r5, r6
 8016506:	d113      	bne.n	8016530 <__gethex+0x2b4>
 8016508:	2d01      	cmp	r5, #1
 801650a:	d10b      	bne.n	8016524 <__gethex+0x2a8>
 801650c:	9a02      	ldr	r2, [sp, #8]
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	6013      	str	r3, [r2, #0]
 8016512:	2301      	movs	r3, #1
 8016514:	6123      	str	r3, [r4, #16]
 8016516:	f8ca 3000 	str.w	r3, [sl]
 801651a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801651c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8016520:	601c      	str	r4, [r3, #0]
 8016522:	e735      	b.n	8016390 <__gethex+0x114>
 8016524:	1e69      	subs	r1, r5, #1
 8016526:	4620      	mov	r0, r4
 8016528:	f000 fe36 	bl	8017198 <__any_on>
 801652c:	2800      	cmp	r0, #0
 801652e:	d1ed      	bne.n	801650c <__gethex+0x290>
 8016530:	4621      	mov	r1, r4
 8016532:	4648      	mov	r0, r9
 8016534:	f000 f9e4 	bl	8016900 <_Bfree>
 8016538:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801653a:	2300      	movs	r3, #0
 801653c:	6013      	str	r3, [r2, #0]
 801653e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8016542:	e725      	b.n	8016390 <__gethex+0x114>
 8016544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016546:	2b00      	cmp	r3, #0
 8016548:	d1f2      	bne.n	8016530 <__gethex+0x2b4>
 801654a:	e7df      	b.n	801650c <__gethex+0x290>
 801654c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801654e:	2b00      	cmp	r3, #0
 8016550:	d1dc      	bne.n	801650c <__gethex+0x290>
 8016552:	e7ed      	b.n	8016530 <__gethex+0x2b4>
 8016554:	0801ae90 	.word	0x0801ae90
 8016558:	0801b13c 	.word	0x0801b13c
 801655c:	0801b14d 	.word	0x0801b14d
 8016560:	f106 38ff 	add.w	r8, r6, #4294967295
 8016564:	f1bb 0f00 	cmp.w	fp, #0
 8016568:	d133      	bne.n	80165d2 <__gethex+0x356>
 801656a:	f1b8 0f00 	cmp.w	r8, #0
 801656e:	d004      	beq.n	801657a <__gethex+0x2fe>
 8016570:	4641      	mov	r1, r8
 8016572:	4620      	mov	r0, r4
 8016574:	f000 fe10 	bl	8017198 <__any_on>
 8016578:	4683      	mov	fp, r0
 801657a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801657e:	2301      	movs	r3, #1
 8016580:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016584:	f008 081f 	and.w	r8, r8, #31
 8016588:	fa03 f308 	lsl.w	r3, r3, r8
 801658c:	4213      	tst	r3, r2
 801658e:	4631      	mov	r1, r6
 8016590:	4620      	mov	r0, r4
 8016592:	bf18      	it	ne
 8016594:	f04b 0b02 	orrne.w	fp, fp, #2
 8016598:	1bad      	subs	r5, r5, r6
 801659a:	f7ff fe07 	bl	80161ac <rshift>
 801659e:	687e      	ldr	r6, [r7, #4]
 80165a0:	f04f 0802 	mov.w	r8, #2
 80165a4:	f1bb 0f00 	cmp.w	fp, #0
 80165a8:	d04a      	beq.n	8016640 <__gethex+0x3c4>
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	2b02      	cmp	r3, #2
 80165ae:	d016      	beq.n	80165de <__gethex+0x362>
 80165b0:	2b03      	cmp	r3, #3
 80165b2:	d018      	beq.n	80165e6 <__gethex+0x36a>
 80165b4:	2b01      	cmp	r3, #1
 80165b6:	d109      	bne.n	80165cc <__gethex+0x350>
 80165b8:	f01b 0f02 	tst.w	fp, #2
 80165bc:	d006      	beq.n	80165cc <__gethex+0x350>
 80165be:	f8da 3000 	ldr.w	r3, [sl]
 80165c2:	ea4b 0b03 	orr.w	fp, fp, r3
 80165c6:	f01b 0f01 	tst.w	fp, #1
 80165ca:	d10f      	bne.n	80165ec <__gethex+0x370>
 80165cc:	f048 0810 	orr.w	r8, r8, #16
 80165d0:	e036      	b.n	8016640 <__gethex+0x3c4>
 80165d2:	f04f 0b01 	mov.w	fp, #1
 80165d6:	e7d0      	b.n	801657a <__gethex+0x2fe>
 80165d8:	f04f 0801 	mov.w	r8, #1
 80165dc:	e7e2      	b.n	80165a4 <__gethex+0x328>
 80165de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165e0:	f1c3 0301 	rsb	r3, r3, #1
 80165e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80165e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d0ef      	beq.n	80165cc <__gethex+0x350>
 80165ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80165f0:	f104 0214 	add.w	r2, r4, #20
 80165f4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80165f8:	9301      	str	r3, [sp, #4]
 80165fa:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80165fe:	2300      	movs	r3, #0
 8016600:	4694      	mov	ip, r2
 8016602:	f852 1b04 	ldr.w	r1, [r2], #4
 8016606:	f1b1 3fff 	cmp.w	r1, #4294967295
 801660a:	d01e      	beq.n	801664a <__gethex+0x3ce>
 801660c:	3101      	adds	r1, #1
 801660e:	f8cc 1000 	str.w	r1, [ip]
 8016612:	f1b8 0f02 	cmp.w	r8, #2
 8016616:	f104 0214 	add.w	r2, r4, #20
 801661a:	d13d      	bne.n	8016698 <__gethex+0x41c>
 801661c:	683b      	ldr	r3, [r7, #0]
 801661e:	3b01      	subs	r3, #1
 8016620:	42ab      	cmp	r3, r5
 8016622:	d10b      	bne.n	801663c <__gethex+0x3c0>
 8016624:	1169      	asrs	r1, r5, #5
 8016626:	2301      	movs	r3, #1
 8016628:	f005 051f 	and.w	r5, r5, #31
 801662c:	fa03 f505 	lsl.w	r5, r3, r5
 8016630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016634:	421d      	tst	r5, r3
 8016636:	bf18      	it	ne
 8016638:	f04f 0801 	movne.w	r8, #1
 801663c:	f048 0820 	orr.w	r8, r8, #32
 8016640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016642:	601c      	str	r4, [r3, #0]
 8016644:	9b02      	ldr	r3, [sp, #8]
 8016646:	601e      	str	r6, [r3, #0]
 8016648:	e6a2      	b.n	8016390 <__gethex+0x114>
 801664a:	4290      	cmp	r0, r2
 801664c:	f842 3c04 	str.w	r3, [r2, #-4]
 8016650:	d8d6      	bhi.n	8016600 <__gethex+0x384>
 8016652:	68a2      	ldr	r2, [r4, #8]
 8016654:	4593      	cmp	fp, r2
 8016656:	db17      	blt.n	8016688 <__gethex+0x40c>
 8016658:	6861      	ldr	r1, [r4, #4]
 801665a:	4648      	mov	r0, r9
 801665c:	3101      	adds	r1, #1
 801665e:	f000 f90f 	bl	8016880 <_Balloc>
 8016662:	4682      	mov	sl, r0
 8016664:	b918      	cbnz	r0, 801666e <__gethex+0x3f2>
 8016666:	4b1b      	ldr	r3, [pc, #108]	; (80166d4 <__gethex+0x458>)
 8016668:	4602      	mov	r2, r0
 801666a:	2184      	movs	r1, #132	; 0x84
 801666c:	e6b3      	b.n	80163d6 <__gethex+0x15a>
 801666e:	6922      	ldr	r2, [r4, #16]
 8016670:	3202      	adds	r2, #2
 8016672:	f104 010c 	add.w	r1, r4, #12
 8016676:	0092      	lsls	r2, r2, #2
 8016678:	300c      	adds	r0, #12
 801667a:	f7fe fe96 	bl	80153aa <memcpy>
 801667e:	4621      	mov	r1, r4
 8016680:	4648      	mov	r0, r9
 8016682:	f000 f93d 	bl	8016900 <_Bfree>
 8016686:	4654      	mov	r4, sl
 8016688:	6922      	ldr	r2, [r4, #16]
 801668a:	1c51      	adds	r1, r2, #1
 801668c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016690:	6121      	str	r1, [r4, #16]
 8016692:	2101      	movs	r1, #1
 8016694:	6151      	str	r1, [r2, #20]
 8016696:	e7bc      	b.n	8016612 <__gethex+0x396>
 8016698:	6921      	ldr	r1, [r4, #16]
 801669a:	4559      	cmp	r1, fp
 801669c:	dd0b      	ble.n	80166b6 <__gethex+0x43a>
 801669e:	2101      	movs	r1, #1
 80166a0:	4620      	mov	r0, r4
 80166a2:	f7ff fd83 	bl	80161ac <rshift>
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	3601      	adds	r6, #1
 80166aa:	42b3      	cmp	r3, r6
 80166ac:	f6ff aedb 	blt.w	8016466 <__gethex+0x1ea>
 80166b0:	f04f 0801 	mov.w	r8, #1
 80166b4:	e7c2      	b.n	801663c <__gethex+0x3c0>
 80166b6:	f015 051f 	ands.w	r5, r5, #31
 80166ba:	d0f9      	beq.n	80166b0 <__gethex+0x434>
 80166bc:	9b01      	ldr	r3, [sp, #4]
 80166be:	441a      	add	r2, r3
 80166c0:	f1c5 0520 	rsb	r5, r5, #32
 80166c4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80166c8:	f000 f9cc 	bl	8016a64 <__hi0bits>
 80166cc:	42a8      	cmp	r0, r5
 80166ce:	dbe6      	blt.n	801669e <__gethex+0x422>
 80166d0:	e7ee      	b.n	80166b0 <__gethex+0x434>
 80166d2:	bf00      	nop
 80166d4:	0801b13c 	.word	0x0801b13c

080166d8 <L_shift>:
 80166d8:	f1c2 0208 	rsb	r2, r2, #8
 80166dc:	0092      	lsls	r2, r2, #2
 80166de:	b570      	push	{r4, r5, r6, lr}
 80166e0:	f1c2 0620 	rsb	r6, r2, #32
 80166e4:	6843      	ldr	r3, [r0, #4]
 80166e6:	6804      	ldr	r4, [r0, #0]
 80166e8:	fa03 f506 	lsl.w	r5, r3, r6
 80166ec:	432c      	orrs	r4, r5
 80166ee:	40d3      	lsrs	r3, r2
 80166f0:	6004      	str	r4, [r0, #0]
 80166f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80166f6:	4288      	cmp	r0, r1
 80166f8:	d3f4      	bcc.n	80166e4 <L_shift+0xc>
 80166fa:	bd70      	pop	{r4, r5, r6, pc}

080166fc <__match>:
 80166fc:	b530      	push	{r4, r5, lr}
 80166fe:	6803      	ldr	r3, [r0, #0]
 8016700:	3301      	adds	r3, #1
 8016702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016706:	b914      	cbnz	r4, 801670e <__match+0x12>
 8016708:	6003      	str	r3, [r0, #0]
 801670a:	2001      	movs	r0, #1
 801670c:	bd30      	pop	{r4, r5, pc}
 801670e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016712:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016716:	2d19      	cmp	r5, #25
 8016718:	bf98      	it	ls
 801671a:	3220      	addls	r2, #32
 801671c:	42a2      	cmp	r2, r4
 801671e:	d0f0      	beq.n	8016702 <__match+0x6>
 8016720:	2000      	movs	r0, #0
 8016722:	e7f3      	b.n	801670c <__match+0x10>

08016724 <__hexnan>:
 8016724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016728:	680b      	ldr	r3, [r1, #0]
 801672a:	6801      	ldr	r1, [r0, #0]
 801672c:	115e      	asrs	r6, r3, #5
 801672e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016732:	f013 031f 	ands.w	r3, r3, #31
 8016736:	b087      	sub	sp, #28
 8016738:	bf18      	it	ne
 801673a:	3604      	addne	r6, #4
 801673c:	2500      	movs	r5, #0
 801673e:	1f37      	subs	r7, r6, #4
 8016740:	4682      	mov	sl, r0
 8016742:	4690      	mov	r8, r2
 8016744:	9301      	str	r3, [sp, #4]
 8016746:	f846 5c04 	str.w	r5, [r6, #-4]
 801674a:	46b9      	mov	r9, r7
 801674c:	463c      	mov	r4, r7
 801674e:	9502      	str	r5, [sp, #8]
 8016750:	46ab      	mov	fp, r5
 8016752:	784a      	ldrb	r2, [r1, #1]
 8016754:	1c4b      	adds	r3, r1, #1
 8016756:	9303      	str	r3, [sp, #12]
 8016758:	b342      	cbz	r2, 80167ac <__hexnan+0x88>
 801675a:	4610      	mov	r0, r2
 801675c:	9105      	str	r1, [sp, #20]
 801675e:	9204      	str	r2, [sp, #16]
 8016760:	f7ff fd76 	bl	8016250 <__hexdig_fun>
 8016764:	2800      	cmp	r0, #0
 8016766:	d14f      	bne.n	8016808 <__hexnan+0xe4>
 8016768:	9a04      	ldr	r2, [sp, #16]
 801676a:	9905      	ldr	r1, [sp, #20]
 801676c:	2a20      	cmp	r2, #32
 801676e:	d818      	bhi.n	80167a2 <__hexnan+0x7e>
 8016770:	9b02      	ldr	r3, [sp, #8]
 8016772:	459b      	cmp	fp, r3
 8016774:	dd13      	ble.n	801679e <__hexnan+0x7a>
 8016776:	454c      	cmp	r4, r9
 8016778:	d206      	bcs.n	8016788 <__hexnan+0x64>
 801677a:	2d07      	cmp	r5, #7
 801677c:	dc04      	bgt.n	8016788 <__hexnan+0x64>
 801677e:	462a      	mov	r2, r5
 8016780:	4649      	mov	r1, r9
 8016782:	4620      	mov	r0, r4
 8016784:	f7ff ffa8 	bl	80166d8 <L_shift>
 8016788:	4544      	cmp	r4, r8
 801678a:	d950      	bls.n	801682e <__hexnan+0x10a>
 801678c:	2300      	movs	r3, #0
 801678e:	f1a4 0904 	sub.w	r9, r4, #4
 8016792:	f844 3c04 	str.w	r3, [r4, #-4]
 8016796:	f8cd b008 	str.w	fp, [sp, #8]
 801679a:	464c      	mov	r4, r9
 801679c:	461d      	mov	r5, r3
 801679e:	9903      	ldr	r1, [sp, #12]
 80167a0:	e7d7      	b.n	8016752 <__hexnan+0x2e>
 80167a2:	2a29      	cmp	r2, #41	; 0x29
 80167a4:	d155      	bne.n	8016852 <__hexnan+0x12e>
 80167a6:	3102      	adds	r1, #2
 80167a8:	f8ca 1000 	str.w	r1, [sl]
 80167ac:	f1bb 0f00 	cmp.w	fp, #0
 80167b0:	d04f      	beq.n	8016852 <__hexnan+0x12e>
 80167b2:	454c      	cmp	r4, r9
 80167b4:	d206      	bcs.n	80167c4 <__hexnan+0xa0>
 80167b6:	2d07      	cmp	r5, #7
 80167b8:	dc04      	bgt.n	80167c4 <__hexnan+0xa0>
 80167ba:	462a      	mov	r2, r5
 80167bc:	4649      	mov	r1, r9
 80167be:	4620      	mov	r0, r4
 80167c0:	f7ff ff8a 	bl	80166d8 <L_shift>
 80167c4:	4544      	cmp	r4, r8
 80167c6:	d934      	bls.n	8016832 <__hexnan+0x10e>
 80167c8:	f1a8 0204 	sub.w	r2, r8, #4
 80167cc:	4623      	mov	r3, r4
 80167ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80167d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80167d6:	429f      	cmp	r7, r3
 80167d8:	d2f9      	bcs.n	80167ce <__hexnan+0xaa>
 80167da:	1b3b      	subs	r3, r7, r4
 80167dc:	f023 0303 	bic.w	r3, r3, #3
 80167e0:	3304      	adds	r3, #4
 80167e2:	3e03      	subs	r6, #3
 80167e4:	3401      	adds	r4, #1
 80167e6:	42a6      	cmp	r6, r4
 80167e8:	bf38      	it	cc
 80167ea:	2304      	movcc	r3, #4
 80167ec:	4443      	add	r3, r8
 80167ee:	2200      	movs	r2, #0
 80167f0:	f843 2b04 	str.w	r2, [r3], #4
 80167f4:	429f      	cmp	r7, r3
 80167f6:	d2fb      	bcs.n	80167f0 <__hexnan+0xcc>
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	b91b      	cbnz	r3, 8016804 <__hexnan+0xe0>
 80167fc:	4547      	cmp	r7, r8
 80167fe:	d126      	bne.n	801684e <__hexnan+0x12a>
 8016800:	2301      	movs	r3, #1
 8016802:	603b      	str	r3, [r7, #0]
 8016804:	2005      	movs	r0, #5
 8016806:	e025      	b.n	8016854 <__hexnan+0x130>
 8016808:	3501      	adds	r5, #1
 801680a:	2d08      	cmp	r5, #8
 801680c:	f10b 0b01 	add.w	fp, fp, #1
 8016810:	dd06      	ble.n	8016820 <__hexnan+0xfc>
 8016812:	4544      	cmp	r4, r8
 8016814:	d9c3      	bls.n	801679e <__hexnan+0x7a>
 8016816:	2300      	movs	r3, #0
 8016818:	f844 3c04 	str.w	r3, [r4, #-4]
 801681c:	2501      	movs	r5, #1
 801681e:	3c04      	subs	r4, #4
 8016820:	6822      	ldr	r2, [r4, #0]
 8016822:	f000 000f 	and.w	r0, r0, #15
 8016826:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801682a:	6020      	str	r0, [r4, #0]
 801682c:	e7b7      	b.n	801679e <__hexnan+0x7a>
 801682e:	2508      	movs	r5, #8
 8016830:	e7b5      	b.n	801679e <__hexnan+0x7a>
 8016832:	9b01      	ldr	r3, [sp, #4]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d0df      	beq.n	80167f8 <__hexnan+0xd4>
 8016838:	f1c3 0320 	rsb	r3, r3, #32
 801683c:	f04f 32ff 	mov.w	r2, #4294967295
 8016840:	40da      	lsrs	r2, r3
 8016842:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016846:	4013      	ands	r3, r2
 8016848:	f846 3c04 	str.w	r3, [r6, #-4]
 801684c:	e7d4      	b.n	80167f8 <__hexnan+0xd4>
 801684e:	3f04      	subs	r7, #4
 8016850:	e7d2      	b.n	80167f8 <__hexnan+0xd4>
 8016852:	2004      	movs	r0, #4
 8016854:	b007      	add	sp, #28
 8016856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801685a <__ascii_mbtowc>:
 801685a:	b082      	sub	sp, #8
 801685c:	b901      	cbnz	r1, 8016860 <__ascii_mbtowc+0x6>
 801685e:	a901      	add	r1, sp, #4
 8016860:	b142      	cbz	r2, 8016874 <__ascii_mbtowc+0x1a>
 8016862:	b14b      	cbz	r3, 8016878 <__ascii_mbtowc+0x1e>
 8016864:	7813      	ldrb	r3, [r2, #0]
 8016866:	600b      	str	r3, [r1, #0]
 8016868:	7812      	ldrb	r2, [r2, #0]
 801686a:	1e10      	subs	r0, r2, #0
 801686c:	bf18      	it	ne
 801686e:	2001      	movne	r0, #1
 8016870:	b002      	add	sp, #8
 8016872:	4770      	bx	lr
 8016874:	4610      	mov	r0, r2
 8016876:	e7fb      	b.n	8016870 <__ascii_mbtowc+0x16>
 8016878:	f06f 0001 	mvn.w	r0, #1
 801687c:	e7f8      	b.n	8016870 <__ascii_mbtowc+0x16>
	...

08016880 <_Balloc>:
 8016880:	b570      	push	{r4, r5, r6, lr}
 8016882:	69c6      	ldr	r6, [r0, #28]
 8016884:	4604      	mov	r4, r0
 8016886:	460d      	mov	r5, r1
 8016888:	b976      	cbnz	r6, 80168a8 <_Balloc+0x28>
 801688a:	2010      	movs	r0, #16
 801688c:	f7fc fcde 	bl	801324c <malloc>
 8016890:	4602      	mov	r2, r0
 8016892:	61e0      	str	r0, [r4, #28]
 8016894:	b920      	cbnz	r0, 80168a0 <_Balloc+0x20>
 8016896:	4b18      	ldr	r3, [pc, #96]	; (80168f8 <_Balloc+0x78>)
 8016898:	4818      	ldr	r0, [pc, #96]	; (80168fc <_Balloc+0x7c>)
 801689a:	216b      	movs	r1, #107	; 0x6b
 801689c:	f7fe fda2 	bl	80153e4 <__assert_func>
 80168a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80168a4:	6006      	str	r6, [r0, #0]
 80168a6:	60c6      	str	r6, [r0, #12]
 80168a8:	69e6      	ldr	r6, [r4, #28]
 80168aa:	68f3      	ldr	r3, [r6, #12]
 80168ac:	b183      	cbz	r3, 80168d0 <_Balloc+0x50>
 80168ae:	69e3      	ldr	r3, [r4, #28]
 80168b0:	68db      	ldr	r3, [r3, #12]
 80168b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80168b6:	b9b8      	cbnz	r0, 80168e8 <_Balloc+0x68>
 80168b8:	2101      	movs	r1, #1
 80168ba:	fa01 f605 	lsl.w	r6, r1, r5
 80168be:	1d72      	adds	r2, r6, #5
 80168c0:	0092      	lsls	r2, r2, #2
 80168c2:	4620      	mov	r0, r4
 80168c4:	f000 fecf 	bl	8017666 <_calloc_r>
 80168c8:	b160      	cbz	r0, 80168e4 <_Balloc+0x64>
 80168ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80168ce:	e00e      	b.n	80168ee <_Balloc+0x6e>
 80168d0:	2221      	movs	r2, #33	; 0x21
 80168d2:	2104      	movs	r1, #4
 80168d4:	4620      	mov	r0, r4
 80168d6:	f000 fec6 	bl	8017666 <_calloc_r>
 80168da:	69e3      	ldr	r3, [r4, #28]
 80168dc:	60f0      	str	r0, [r6, #12]
 80168de:	68db      	ldr	r3, [r3, #12]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d1e4      	bne.n	80168ae <_Balloc+0x2e>
 80168e4:	2000      	movs	r0, #0
 80168e6:	bd70      	pop	{r4, r5, r6, pc}
 80168e8:	6802      	ldr	r2, [r0, #0]
 80168ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80168ee:	2300      	movs	r3, #0
 80168f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80168f4:	e7f7      	b.n	80168e6 <_Balloc+0x66>
 80168f6:	bf00      	nop
 80168f8:	0801b022 	.word	0x0801b022
 80168fc:	0801b1ad 	.word	0x0801b1ad

08016900 <_Bfree>:
 8016900:	b570      	push	{r4, r5, r6, lr}
 8016902:	69c6      	ldr	r6, [r0, #28]
 8016904:	4605      	mov	r5, r0
 8016906:	460c      	mov	r4, r1
 8016908:	b976      	cbnz	r6, 8016928 <_Bfree+0x28>
 801690a:	2010      	movs	r0, #16
 801690c:	f7fc fc9e 	bl	801324c <malloc>
 8016910:	4602      	mov	r2, r0
 8016912:	61e8      	str	r0, [r5, #28]
 8016914:	b920      	cbnz	r0, 8016920 <_Bfree+0x20>
 8016916:	4b09      	ldr	r3, [pc, #36]	; (801693c <_Bfree+0x3c>)
 8016918:	4809      	ldr	r0, [pc, #36]	; (8016940 <_Bfree+0x40>)
 801691a:	218f      	movs	r1, #143	; 0x8f
 801691c:	f7fe fd62 	bl	80153e4 <__assert_func>
 8016920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016924:	6006      	str	r6, [r0, #0]
 8016926:	60c6      	str	r6, [r0, #12]
 8016928:	b13c      	cbz	r4, 801693a <_Bfree+0x3a>
 801692a:	69eb      	ldr	r3, [r5, #28]
 801692c:	6862      	ldr	r2, [r4, #4]
 801692e:	68db      	ldr	r3, [r3, #12]
 8016930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016934:	6021      	str	r1, [r4, #0]
 8016936:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801693a:	bd70      	pop	{r4, r5, r6, pc}
 801693c:	0801b022 	.word	0x0801b022
 8016940:	0801b1ad 	.word	0x0801b1ad

08016944 <__multadd>:
 8016944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016948:	690d      	ldr	r5, [r1, #16]
 801694a:	4607      	mov	r7, r0
 801694c:	460c      	mov	r4, r1
 801694e:	461e      	mov	r6, r3
 8016950:	f101 0c14 	add.w	ip, r1, #20
 8016954:	2000      	movs	r0, #0
 8016956:	f8dc 3000 	ldr.w	r3, [ip]
 801695a:	b299      	uxth	r1, r3
 801695c:	fb02 6101 	mla	r1, r2, r1, r6
 8016960:	0c1e      	lsrs	r6, r3, #16
 8016962:	0c0b      	lsrs	r3, r1, #16
 8016964:	fb02 3306 	mla	r3, r2, r6, r3
 8016968:	b289      	uxth	r1, r1
 801696a:	3001      	adds	r0, #1
 801696c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016970:	4285      	cmp	r5, r0
 8016972:	f84c 1b04 	str.w	r1, [ip], #4
 8016976:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801697a:	dcec      	bgt.n	8016956 <__multadd+0x12>
 801697c:	b30e      	cbz	r6, 80169c2 <__multadd+0x7e>
 801697e:	68a3      	ldr	r3, [r4, #8]
 8016980:	42ab      	cmp	r3, r5
 8016982:	dc19      	bgt.n	80169b8 <__multadd+0x74>
 8016984:	6861      	ldr	r1, [r4, #4]
 8016986:	4638      	mov	r0, r7
 8016988:	3101      	adds	r1, #1
 801698a:	f7ff ff79 	bl	8016880 <_Balloc>
 801698e:	4680      	mov	r8, r0
 8016990:	b928      	cbnz	r0, 801699e <__multadd+0x5a>
 8016992:	4602      	mov	r2, r0
 8016994:	4b0c      	ldr	r3, [pc, #48]	; (80169c8 <__multadd+0x84>)
 8016996:	480d      	ldr	r0, [pc, #52]	; (80169cc <__multadd+0x88>)
 8016998:	21ba      	movs	r1, #186	; 0xba
 801699a:	f7fe fd23 	bl	80153e4 <__assert_func>
 801699e:	6922      	ldr	r2, [r4, #16]
 80169a0:	3202      	adds	r2, #2
 80169a2:	f104 010c 	add.w	r1, r4, #12
 80169a6:	0092      	lsls	r2, r2, #2
 80169a8:	300c      	adds	r0, #12
 80169aa:	f7fe fcfe 	bl	80153aa <memcpy>
 80169ae:	4621      	mov	r1, r4
 80169b0:	4638      	mov	r0, r7
 80169b2:	f7ff ffa5 	bl	8016900 <_Bfree>
 80169b6:	4644      	mov	r4, r8
 80169b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80169bc:	3501      	adds	r5, #1
 80169be:	615e      	str	r6, [r3, #20]
 80169c0:	6125      	str	r5, [r4, #16]
 80169c2:	4620      	mov	r0, r4
 80169c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169c8:	0801b13c 	.word	0x0801b13c
 80169cc:	0801b1ad 	.word	0x0801b1ad

080169d0 <__s2b>:
 80169d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169d4:	460c      	mov	r4, r1
 80169d6:	4615      	mov	r5, r2
 80169d8:	461f      	mov	r7, r3
 80169da:	2209      	movs	r2, #9
 80169dc:	3308      	adds	r3, #8
 80169de:	4606      	mov	r6, r0
 80169e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80169e4:	2100      	movs	r1, #0
 80169e6:	2201      	movs	r2, #1
 80169e8:	429a      	cmp	r2, r3
 80169ea:	db09      	blt.n	8016a00 <__s2b+0x30>
 80169ec:	4630      	mov	r0, r6
 80169ee:	f7ff ff47 	bl	8016880 <_Balloc>
 80169f2:	b940      	cbnz	r0, 8016a06 <__s2b+0x36>
 80169f4:	4602      	mov	r2, r0
 80169f6:	4b19      	ldr	r3, [pc, #100]	; (8016a5c <__s2b+0x8c>)
 80169f8:	4819      	ldr	r0, [pc, #100]	; (8016a60 <__s2b+0x90>)
 80169fa:	21d3      	movs	r1, #211	; 0xd3
 80169fc:	f7fe fcf2 	bl	80153e4 <__assert_func>
 8016a00:	0052      	lsls	r2, r2, #1
 8016a02:	3101      	adds	r1, #1
 8016a04:	e7f0      	b.n	80169e8 <__s2b+0x18>
 8016a06:	9b08      	ldr	r3, [sp, #32]
 8016a08:	6143      	str	r3, [r0, #20]
 8016a0a:	2d09      	cmp	r5, #9
 8016a0c:	f04f 0301 	mov.w	r3, #1
 8016a10:	6103      	str	r3, [r0, #16]
 8016a12:	dd16      	ble.n	8016a42 <__s2b+0x72>
 8016a14:	f104 0909 	add.w	r9, r4, #9
 8016a18:	46c8      	mov	r8, r9
 8016a1a:	442c      	add	r4, r5
 8016a1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016a20:	4601      	mov	r1, r0
 8016a22:	3b30      	subs	r3, #48	; 0x30
 8016a24:	220a      	movs	r2, #10
 8016a26:	4630      	mov	r0, r6
 8016a28:	f7ff ff8c 	bl	8016944 <__multadd>
 8016a2c:	45a0      	cmp	r8, r4
 8016a2e:	d1f5      	bne.n	8016a1c <__s2b+0x4c>
 8016a30:	f1a5 0408 	sub.w	r4, r5, #8
 8016a34:	444c      	add	r4, r9
 8016a36:	1b2d      	subs	r5, r5, r4
 8016a38:	1963      	adds	r3, r4, r5
 8016a3a:	42bb      	cmp	r3, r7
 8016a3c:	db04      	blt.n	8016a48 <__s2b+0x78>
 8016a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a42:	340a      	adds	r4, #10
 8016a44:	2509      	movs	r5, #9
 8016a46:	e7f6      	b.n	8016a36 <__s2b+0x66>
 8016a48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016a4c:	4601      	mov	r1, r0
 8016a4e:	3b30      	subs	r3, #48	; 0x30
 8016a50:	220a      	movs	r2, #10
 8016a52:	4630      	mov	r0, r6
 8016a54:	f7ff ff76 	bl	8016944 <__multadd>
 8016a58:	e7ee      	b.n	8016a38 <__s2b+0x68>
 8016a5a:	bf00      	nop
 8016a5c:	0801b13c 	.word	0x0801b13c
 8016a60:	0801b1ad 	.word	0x0801b1ad

08016a64 <__hi0bits>:
 8016a64:	0c03      	lsrs	r3, r0, #16
 8016a66:	041b      	lsls	r3, r3, #16
 8016a68:	b9d3      	cbnz	r3, 8016aa0 <__hi0bits+0x3c>
 8016a6a:	0400      	lsls	r0, r0, #16
 8016a6c:	2310      	movs	r3, #16
 8016a6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016a72:	bf04      	itt	eq
 8016a74:	0200      	lsleq	r0, r0, #8
 8016a76:	3308      	addeq	r3, #8
 8016a78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016a7c:	bf04      	itt	eq
 8016a7e:	0100      	lsleq	r0, r0, #4
 8016a80:	3304      	addeq	r3, #4
 8016a82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016a86:	bf04      	itt	eq
 8016a88:	0080      	lsleq	r0, r0, #2
 8016a8a:	3302      	addeq	r3, #2
 8016a8c:	2800      	cmp	r0, #0
 8016a8e:	db05      	blt.n	8016a9c <__hi0bits+0x38>
 8016a90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016a94:	f103 0301 	add.w	r3, r3, #1
 8016a98:	bf08      	it	eq
 8016a9a:	2320      	moveq	r3, #32
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	4770      	bx	lr
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	e7e4      	b.n	8016a6e <__hi0bits+0xa>

08016aa4 <__lo0bits>:
 8016aa4:	6803      	ldr	r3, [r0, #0]
 8016aa6:	f013 0207 	ands.w	r2, r3, #7
 8016aaa:	d00c      	beq.n	8016ac6 <__lo0bits+0x22>
 8016aac:	07d9      	lsls	r1, r3, #31
 8016aae:	d422      	bmi.n	8016af6 <__lo0bits+0x52>
 8016ab0:	079a      	lsls	r2, r3, #30
 8016ab2:	bf49      	itett	mi
 8016ab4:	085b      	lsrmi	r3, r3, #1
 8016ab6:	089b      	lsrpl	r3, r3, #2
 8016ab8:	6003      	strmi	r3, [r0, #0]
 8016aba:	2201      	movmi	r2, #1
 8016abc:	bf5c      	itt	pl
 8016abe:	6003      	strpl	r3, [r0, #0]
 8016ac0:	2202      	movpl	r2, #2
 8016ac2:	4610      	mov	r0, r2
 8016ac4:	4770      	bx	lr
 8016ac6:	b299      	uxth	r1, r3
 8016ac8:	b909      	cbnz	r1, 8016ace <__lo0bits+0x2a>
 8016aca:	0c1b      	lsrs	r3, r3, #16
 8016acc:	2210      	movs	r2, #16
 8016ace:	b2d9      	uxtb	r1, r3
 8016ad0:	b909      	cbnz	r1, 8016ad6 <__lo0bits+0x32>
 8016ad2:	3208      	adds	r2, #8
 8016ad4:	0a1b      	lsrs	r3, r3, #8
 8016ad6:	0719      	lsls	r1, r3, #28
 8016ad8:	bf04      	itt	eq
 8016ada:	091b      	lsreq	r3, r3, #4
 8016adc:	3204      	addeq	r2, #4
 8016ade:	0799      	lsls	r1, r3, #30
 8016ae0:	bf04      	itt	eq
 8016ae2:	089b      	lsreq	r3, r3, #2
 8016ae4:	3202      	addeq	r2, #2
 8016ae6:	07d9      	lsls	r1, r3, #31
 8016ae8:	d403      	bmi.n	8016af2 <__lo0bits+0x4e>
 8016aea:	085b      	lsrs	r3, r3, #1
 8016aec:	f102 0201 	add.w	r2, r2, #1
 8016af0:	d003      	beq.n	8016afa <__lo0bits+0x56>
 8016af2:	6003      	str	r3, [r0, #0]
 8016af4:	e7e5      	b.n	8016ac2 <__lo0bits+0x1e>
 8016af6:	2200      	movs	r2, #0
 8016af8:	e7e3      	b.n	8016ac2 <__lo0bits+0x1e>
 8016afa:	2220      	movs	r2, #32
 8016afc:	e7e1      	b.n	8016ac2 <__lo0bits+0x1e>
	...

08016b00 <__i2b>:
 8016b00:	b510      	push	{r4, lr}
 8016b02:	460c      	mov	r4, r1
 8016b04:	2101      	movs	r1, #1
 8016b06:	f7ff febb 	bl	8016880 <_Balloc>
 8016b0a:	4602      	mov	r2, r0
 8016b0c:	b928      	cbnz	r0, 8016b1a <__i2b+0x1a>
 8016b0e:	4b05      	ldr	r3, [pc, #20]	; (8016b24 <__i2b+0x24>)
 8016b10:	4805      	ldr	r0, [pc, #20]	; (8016b28 <__i2b+0x28>)
 8016b12:	f240 1145 	movw	r1, #325	; 0x145
 8016b16:	f7fe fc65 	bl	80153e4 <__assert_func>
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	6144      	str	r4, [r0, #20]
 8016b1e:	6103      	str	r3, [r0, #16]
 8016b20:	bd10      	pop	{r4, pc}
 8016b22:	bf00      	nop
 8016b24:	0801b13c 	.word	0x0801b13c
 8016b28:	0801b1ad 	.word	0x0801b1ad

08016b2c <__multiply>:
 8016b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b30:	4691      	mov	r9, r2
 8016b32:	690a      	ldr	r2, [r1, #16]
 8016b34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016b38:	429a      	cmp	r2, r3
 8016b3a:	bfb8      	it	lt
 8016b3c:	460b      	movlt	r3, r1
 8016b3e:	460c      	mov	r4, r1
 8016b40:	bfbc      	itt	lt
 8016b42:	464c      	movlt	r4, r9
 8016b44:	4699      	movlt	r9, r3
 8016b46:	6927      	ldr	r7, [r4, #16]
 8016b48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016b4c:	68a3      	ldr	r3, [r4, #8]
 8016b4e:	6861      	ldr	r1, [r4, #4]
 8016b50:	eb07 060a 	add.w	r6, r7, sl
 8016b54:	42b3      	cmp	r3, r6
 8016b56:	b085      	sub	sp, #20
 8016b58:	bfb8      	it	lt
 8016b5a:	3101      	addlt	r1, #1
 8016b5c:	f7ff fe90 	bl	8016880 <_Balloc>
 8016b60:	b930      	cbnz	r0, 8016b70 <__multiply+0x44>
 8016b62:	4602      	mov	r2, r0
 8016b64:	4b44      	ldr	r3, [pc, #272]	; (8016c78 <__multiply+0x14c>)
 8016b66:	4845      	ldr	r0, [pc, #276]	; (8016c7c <__multiply+0x150>)
 8016b68:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8016b6c:	f7fe fc3a 	bl	80153e4 <__assert_func>
 8016b70:	f100 0514 	add.w	r5, r0, #20
 8016b74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016b78:	462b      	mov	r3, r5
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	4543      	cmp	r3, r8
 8016b7e:	d321      	bcc.n	8016bc4 <__multiply+0x98>
 8016b80:	f104 0314 	add.w	r3, r4, #20
 8016b84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016b88:	f109 0314 	add.w	r3, r9, #20
 8016b8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016b90:	9202      	str	r2, [sp, #8]
 8016b92:	1b3a      	subs	r2, r7, r4
 8016b94:	3a15      	subs	r2, #21
 8016b96:	f022 0203 	bic.w	r2, r2, #3
 8016b9a:	3204      	adds	r2, #4
 8016b9c:	f104 0115 	add.w	r1, r4, #21
 8016ba0:	428f      	cmp	r7, r1
 8016ba2:	bf38      	it	cc
 8016ba4:	2204      	movcc	r2, #4
 8016ba6:	9201      	str	r2, [sp, #4]
 8016ba8:	9a02      	ldr	r2, [sp, #8]
 8016baa:	9303      	str	r3, [sp, #12]
 8016bac:	429a      	cmp	r2, r3
 8016bae:	d80c      	bhi.n	8016bca <__multiply+0x9e>
 8016bb0:	2e00      	cmp	r6, #0
 8016bb2:	dd03      	ble.n	8016bbc <__multiply+0x90>
 8016bb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d05b      	beq.n	8016c74 <__multiply+0x148>
 8016bbc:	6106      	str	r6, [r0, #16]
 8016bbe:	b005      	add	sp, #20
 8016bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bc4:	f843 2b04 	str.w	r2, [r3], #4
 8016bc8:	e7d8      	b.n	8016b7c <__multiply+0x50>
 8016bca:	f8b3 a000 	ldrh.w	sl, [r3]
 8016bce:	f1ba 0f00 	cmp.w	sl, #0
 8016bd2:	d024      	beq.n	8016c1e <__multiply+0xf2>
 8016bd4:	f104 0e14 	add.w	lr, r4, #20
 8016bd8:	46a9      	mov	r9, r5
 8016bda:	f04f 0c00 	mov.w	ip, #0
 8016bde:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016be2:	f8d9 1000 	ldr.w	r1, [r9]
 8016be6:	fa1f fb82 	uxth.w	fp, r2
 8016bea:	b289      	uxth	r1, r1
 8016bec:	fb0a 110b 	mla	r1, sl, fp, r1
 8016bf0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016bf4:	f8d9 2000 	ldr.w	r2, [r9]
 8016bf8:	4461      	add	r1, ip
 8016bfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016bfe:	fb0a c20b 	mla	r2, sl, fp, ip
 8016c02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016c06:	b289      	uxth	r1, r1
 8016c08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016c0c:	4577      	cmp	r7, lr
 8016c0e:	f849 1b04 	str.w	r1, [r9], #4
 8016c12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016c16:	d8e2      	bhi.n	8016bde <__multiply+0xb2>
 8016c18:	9a01      	ldr	r2, [sp, #4]
 8016c1a:	f845 c002 	str.w	ip, [r5, r2]
 8016c1e:	9a03      	ldr	r2, [sp, #12]
 8016c20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016c24:	3304      	adds	r3, #4
 8016c26:	f1b9 0f00 	cmp.w	r9, #0
 8016c2a:	d021      	beq.n	8016c70 <__multiply+0x144>
 8016c2c:	6829      	ldr	r1, [r5, #0]
 8016c2e:	f104 0c14 	add.w	ip, r4, #20
 8016c32:	46ae      	mov	lr, r5
 8016c34:	f04f 0a00 	mov.w	sl, #0
 8016c38:	f8bc b000 	ldrh.w	fp, [ip]
 8016c3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016c40:	fb09 220b 	mla	r2, r9, fp, r2
 8016c44:	4452      	add	r2, sl
 8016c46:	b289      	uxth	r1, r1
 8016c48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016c4c:	f84e 1b04 	str.w	r1, [lr], #4
 8016c50:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016c54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016c58:	f8be 1000 	ldrh.w	r1, [lr]
 8016c5c:	fb09 110a 	mla	r1, r9, sl, r1
 8016c60:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8016c64:	4567      	cmp	r7, ip
 8016c66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016c6a:	d8e5      	bhi.n	8016c38 <__multiply+0x10c>
 8016c6c:	9a01      	ldr	r2, [sp, #4]
 8016c6e:	50a9      	str	r1, [r5, r2]
 8016c70:	3504      	adds	r5, #4
 8016c72:	e799      	b.n	8016ba8 <__multiply+0x7c>
 8016c74:	3e01      	subs	r6, #1
 8016c76:	e79b      	b.n	8016bb0 <__multiply+0x84>
 8016c78:	0801b13c 	.word	0x0801b13c
 8016c7c:	0801b1ad 	.word	0x0801b1ad

08016c80 <__pow5mult>:
 8016c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c84:	4615      	mov	r5, r2
 8016c86:	f012 0203 	ands.w	r2, r2, #3
 8016c8a:	4606      	mov	r6, r0
 8016c8c:	460f      	mov	r7, r1
 8016c8e:	d007      	beq.n	8016ca0 <__pow5mult+0x20>
 8016c90:	4c25      	ldr	r4, [pc, #148]	; (8016d28 <__pow5mult+0xa8>)
 8016c92:	3a01      	subs	r2, #1
 8016c94:	2300      	movs	r3, #0
 8016c96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016c9a:	f7ff fe53 	bl	8016944 <__multadd>
 8016c9e:	4607      	mov	r7, r0
 8016ca0:	10ad      	asrs	r5, r5, #2
 8016ca2:	d03d      	beq.n	8016d20 <__pow5mult+0xa0>
 8016ca4:	69f4      	ldr	r4, [r6, #28]
 8016ca6:	b97c      	cbnz	r4, 8016cc8 <__pow5mult+0x48>
 8016ca8:	2010      	movs	r0, #16
 8016caa:	f7fc facf 	bl	801324c <malloc>
 8016cae:	4602      	mov	r2, r0
 8016cb0:	61f0      	str	r0, [r6, #28]
 8016cb2:	b928      	cbnz	r0, 8016cc0 <__pow5mult+0x40>
 8016cb4:	4b1d      	ldr	r3, [pc, #116]	; (8016d2c <__pow5mult+0xac>)
 8016cb6:	481e      	ldr	r0, [pc, #120]	; (8016d30 <__pow5mult+0xb0>)
 8016cb8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016cbc:	f7fe fb92 	bl	80153e4 <__assert_func>
 8016cc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016cc4:	6004      	str	r4, [r0, #0]
 8016cc6:	60c4      	str	r4, [r0, #12]
 8016cc8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016ccc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016cd0:	b94c      	cbnz	r4, 8016ce6 <__pow5mult+0x66>
 8016cd2:	f240 2171 	movw	r1, #625	; 0x271
 8016cd6:	4630      	mov	r0, r6
 8016cd8:	f7ff ff12 	bl	8016b00 <__i2b>
 8016cdc:	2300      	movs	r3, #0
 8016cde:	f8c8 0008 	str.w	r0, [r8, #8]
 8016ce2:	4604      	mov	r4, r0
 8016ce4:	6003      	str	r3, [r0, #0]
 8016ce6:	f04f 0900 	mov.w	r9, #0
 8016cea:	07eb      	lsls	r3, r5, #31
 8016cec:	d50a      	bpl.n	8016d04 <__pow5mult+0x84>
 8016cee:	4639      	mov	r1, r7
 8016cf0:	4622      	mov	r2, r4
 8016cf2:	4630      	mov	r0, r6
 8016cf4:	f7ff ff1a 	bl	8016b2c <__multiply>
 8016cf8:	4639      	mov	r1, r7
 8016cfa:	4680      	mov	r8, r0
 8016cfc:	4630      	mov	r0, r6
 8016cfe:	f7ff fdff 	bl	8016900 <_Bfree>
 8016d02:	4647      	mov	r7, r8
 8016d04:	106d      	asrs	r5, r5, #1
 8016d06:	d00b      	beq.n	8016d20 <__pow5mult+0xa0>
 8016d08:	6820      	ldr	r0, [r4, #0]
 8016d0a:	b938      	cbnz	r0, 8016d1c <__pow5mult+0x9c>
 8016d0c:	4622      	mov	r2, r4
 8016d0e:	4621      	mov	r1, r4
 8016d10:	4630      	mov	r0, r6
 8016d12:	f7ff ff0b 	bl	8016b2c <__multiply>
 8016d16:	6020      	str	r0, [r4, #0]
 8016d18:	f8c0 9000 	str.w	r9, [r0]
 8016d1c:	4604      	mov	r4, r0
 8016d1e:	e7e4      	b.n	8016cea <__pow5mult+0x6a>
 8016d20:	4638      	mov	r0, r7
 8016d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d26:	bf00      	nop
 8016d28:	0801b2f8 	.word	0x0801b2f8
 8016d2c:	0801b022 	.word	0x0801b022
 8016d30:	0801b1ad 	.word	0x0801b1ad

08016d34 <__lshift>:
 8016d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d38:	460c      	mov	r4, r1
 8016d3a:	6849      	ldr	r1, [r1, #4]
 8016d3c:	6923      	ldr	r3, [r4, #16]
 8016d3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016d42:	68a3      	ldr	r3, [r4, #8]
 8016d44:	4607      	mov	r7, r0
 8016d46:	4691      	mov	r9, r2
 8016d48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016d4c:	f108 0601 	add.w	r6, r8, #1
 8016d50:	42b3      	cmp	r3, r6
 8016d52:	db0b      	blt.n	8016d6c <__lshift+0x38>
 8016d54:	4638      	mov	r0, r7
 8016d56:	f7ff fd93 	bl	8016880 <_Balloc>
 8016d5a:	4605      	mov	r5, r0
 8016d5c:	b948      	cbnz	r0, 8016d72 <__lshift+0x3e>
 8016d5e:	4602      	mov	r2, r0
 8016d60:	4b28      	ldr	r3, [pc, #160]	; (8016e04 <__lshift+0xd0>)
 8016d62:	4829      	ldr	r0, [pc, #164]	; (8016e08 <__lshift+0xd4>)
 8016d64:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8016d68:	f7fe fb3c 	bl	80153e4 <__assert_func>
 8016d6c:	3101      	adds	r1, #1
 8016d6e:	005b      	lsls	r3, r3, #1
 8016d70:	e7ee      	b.n	8016d50 <__lshift+0x1c>
 8016d72:	2300      	movs	r3, #0
 8016d74:	f100 0114 	add.w	r1, r0, #20
 8016d78:	f100 0210 	add.w	r2, r0, #16
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	4553      	cmp	r3, sl
 8016d80:	db33      	blt.n	8016dea <__lshift+0xb6>
 8016d82:	6920      	ldr	r0, [r4, #16]
 8016d84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016d88:	f104 0314 	add.w	r3, r4, #20
 8016d8c:	f019 091f 	ands.w	r9, r9, #31
 8016d90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016d94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016d98:	d02b      	beq.n	8016df2 <__lshift+0xbe>
 8016d9a:	f1c9 0e20 	rsb	lr, r9, #32
 8016d9e:	468a      	mov	sl, r1
 8016da0:	2200      	movs	r2, #0
 8016da2:	6818      	ldr	r0, [r3, #0]
 8016da4:	fa00 f009 	lsl.w	r0, r0, r9
 8016da8:	4310      	orrs	r0, r2
 8016daa:	f84a 0b04 	str.w	r0, [sl], #4
 8016dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8016db2:	459c      	cmp	ip, r3
 8016db4:	fa22 f20e 	lsr.w	r2, r2, lr
 8016db8:	d8f3      	bhi.n	8016da2 <__lshift+0x6e>
 8016dba:	ebac 0304 	sub.w	r3, ip, r4
 8016dbe:	3b15      	subs	r3, #21
 8016dc0:	f023 0303 	bic.w	r3, r3, #3
 8016dc4:	3304      	adds	r3, #4
 8016dc6:	f104 0015 	add.w	r0, r4, #21
 8016dca:	4584      	cmp	ip, r0
 8016dcc:	bf38      	it	cc
 8016dce:	2304      	movcc	r3, #4
 8016dd0:	50ca      	str	r2, [r1, r3]
 8016dd2:	b10a      	cbz	r2, 8016dd8 <__lshift+0xa4>
 8016dd4:	f108 0602 	add.w	r6, r8, #2
 8016dd8:	3e01      	subs	r6, #1
 8016dda:	4638      	mov	r0, r7
 8016ddc:	612e      	str	r6, [r5, #16]
 8016dde:	4621      	mov	r1, r4
 8016de0:	f7ff fd8e 	bl	8016900 <_Bfree>
 8016de4:	4628      	mov	r0, r5
 8016de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dea:	f842 0f04 	str.w	r0, [r2, #4]!
 8016dee:	3301      	adds	r3, #1
 8016df0:	e7c5      	b.n	8016d7e <__lshift+0x4a>
 8016df2:	3904      	subs	r1, #4
 8016df4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016df8:	f841 2f04 	str.w	r2, [r1, #4]!
 8016dfc:	459c      	cmp	ip, r3
 8016dfe:	d8f9      	bhi.n	8016df4 <__lshift+0xc0>
 8016e00:	e7ea      	b.n	8016dd8 <__lshift+0xa4>
 8016e02:	bf00      	nop
 8016e04:	0801b13c 	.word	0x0801b13c
 8016e08:	0801b1ad 	.word	0x0801b1ad

08016e0c <__mcmp>:
 8016e0c:	b530      	push	{r4, r5, lr}
 8016e0e:	6902      	ldr	r2, [r0, #16]
 8016e10:	690c      	ldr	r4, [r1, #16]
 8016e12:	1b12      	subs	r2, r2, r4
 8016e14:	d10e      	bne.n	8016e34 <__mcmp+0x28>
 8016e16:	f100 0314 	add.w	r3, r0, #20
 8016e1a:	3114      	adds	r1, #20
 8016e1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016e20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016e24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016e28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016e2c:	42a5      	cmp	r5, r4
 8016e2e:	d003      	beq.n	8016e38 <__mcmp+0x2c>
 8016e30:	d305      	bcc.n	8016e3e <__mcmp+0x32>
 8016e32:	2201      	movs	r2, #1
 8016e34:	4610      	mov	r0, r2
 8016e36:	bd30      	pop	{r4, r5, pc}
 8016e38:	4283      	cmp	r3, r0
 8016e3a:	d3f3      	bcc.n	8016e24 <__mcmp+0x18>
 8016e3c:	e7fa      	b.n	8016e34 <__mcmp+0x28>
 8016e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8016e42:	e7f7      	b.n	8016e34 <__mcmp+0x28>

08016e44 <__mdiff>:
 8016e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e48:	460c      	mov	r4, r1
 8016e4a:	4606      	mov	r6, r0
 8016e4c:	4611      	mov	r1, r2
 8016e4e:	4620      	mov	r0, r4
 8016e50:	4690      	mov	r8, r2
 8016e52:	f7ff ffdb 	bl	8016e0c <__mcmp>
 8016e56:	1e05      	subs	r5, r0, #0
 8016e58:	d110      	bne.n	8016e7c <__mdiff+0x38>
 8016e5a:	4629      	mov	r1, r5
 8016e5c:	4630      	mov	r0, r6
 8016e5e:	f7ff fd0f 	bl	8016880 <_Balloc>
 8016e62:	b930      	cbnz	r0, 8016e72 <__mdiff+0x2e>
 8016e64:	4b3a      	ldr	r3, [pc, #232]	; (8016f50 <__mdiff+0x10c>)
 8016e66:	4602      	mov	r2, r0
 8016e68:	f240 2137 	movw	r1, #567	; 0x237
 8016e6c:	4839      	ldr	r0, [pc, #228]	; (8016f54 <__mdiff+0x110>)
 8016e6e:	f7fe fab9 	bl	80153e4 <__assert_func>
 8016e72:	2301      	movs	r3, #1
 8016e74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e7c:	bfa4      	itt	ge
 8016e7e:	4643      	movge	r3, r8
 8016e80:	46a0      	movge	r8, r4
 8016e82:	4630      	mov	r0, r6
 8016e84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016e88:	bfa6      	itte	ge
 8016e8a:	461c      	movge	r4, r3
 8016e8c:	2500      	movge	r5, #0
 8016e8e:	2501      	movlt	r5, #1
 8016e90:	f7ff fcf6 	bl	8016880 <_Balloc>
 8016e94:	b920      	cbnz	r0, 8016ea0 <__mdiff+0x5c>
 8016e96:	4b2e      	ldr	r3, [pc, #184]	; (8016f50 <__mdiff+0x10c>)
 8016e98:	4602      	mov	r2, r0
 8016e9a:	f240 2145 	movw	r1, #581	; 0x245
 8016e9e:	e7e5      	b.n	8016e6c <__mdiff+0x28>
 8016ea0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016ea4:	6926      	ldr	r6, [r4, #16]
 8016ea6:	60c5      	str	r5, [r0, #12]
 8016ea8:	f104 0914 	add.w	r9, r4, #20
 8016eac:	f108 0514 	add.w	r5, r8, #20
 8016eb0:	f100 0e14 	add.w	lr, r0, #20
 8016eb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016eb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016ebc:	f108 0210 	add.w	r2, r8, #16
 8016ec0:	46f2      	mov	sl, lr
 8016ec2:	2100      	movs	r1, #0
 8016ec4:	f859 3b04 	ldr.w	r3, [r9], #4
 8016ec8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016ecc:	fa11 f88b 	uxtah	r8, r1, fp
 8016ed0:	b299      	uxth	r1, r3
 8016ed2:	0c1b      	lsrs	r3, r3, #16
 8016ed4:	eba8 0801 	sub.w	r8, r8, r1
 8016ed8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016edc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016ee0:	fa1f f888 	uxth.w	r8, r8
 8016ee4:	1419      	asrs	r1, r3, #16
 8016ee6:	454e      	cmp	r6, r9
 8016ee8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016eec:	f84a 3b04 	str.w	r3, [sl], #4
 8016ef0:	d8e8      	bhi.n	8016ec4 <__mdiff+0x80>
 8016ef2:	1b33      	subs	r3, r6, r4
 8016ef4:	3b15      	subs	r3, #21
 8016ef6:	f023 0303 	bic.w	r3, r3, #3
 8016efa:	3304      	adds	r3, #4
 8016efc:	3415      	adds	r4, #21
 8016efe:	42a6      	cmp	r6, r4
 8016f00:	bf38      	it	cc
 8016f02:	2304      	movcc	r3, #4
 8016f04:	441d      	add	r5, r3
 8016f06:	4473      	add	r3, lr
 8016f08:	469e      	mov	lr, r3
 8016f0a:	462e      	mov	r6, r5
 8016f0c:	4566      	cmp	r6, ip
 8016f0e:	d30e      	bcc.n	8016f2e <__mdiff+0xea>
 8016f10:	f10c 0203 	add.w	r2, ip, #3
 8016f14:	1b52      	subs	r2, r2, r5
 8016f16:	f022 0203 	bic.w	r2, r2, #3
 8016f1a:	3d03      	subs	r5, #3
 8016f1c:	45ac      	cmp	ip, r5
 8016f1e:	bf38      	it	cc
 8016f20:	2200      	movcc	r2, #0
 8016f22:	4413      	add	r3, r2
 8016f24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016f28:	b17a      	cbz	r2, 8016f4a <__mdiff+0x106>
 8016f2a:	6107      	str	r7, [r0, #16]
 8016f2c:	e7a4      	b.n	8016e78 <__mdiff+0x34>
 8016f2e:	f856 8b04 	ldr.w	r8, [r6], #4
 8016f32:	fa11 f288 	uxtah	r2, r1, r8
 8016f36:	1414      	asrs	r4, r2, #16
 8016f38:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016f3c:	b292      	uxth	r2, r2
 8016f3e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016f42:	f84e 2b04 	str.w	r2, [lr], #4
 8016f46:	1421      	asrs	r1, r4, #16
 8016f48:	e7e0      	b.n	8016f0c <__mdiff+0xc8>
 8016f4a:	3f01      	subs	r7, #1
 8016f4c:	e7ea      	b.n	8016f24 <__mdiff+0xe0>
 8016f4e:	bf00      	nop
 8016f50:	0801b13c 	.word	0x0801b13c
 8016f54:	0801b1ad 	.word	0x0801b1ad

08016f58 <__ulp>:
 8016f58:	b082      	sub	sp, #8
 8016f5a:	ed8d 0b00 	vstr	d0, [sp]
 8016f5e:	9a01      	ldr	r2, [sp, #4]
 8016f60:	4b0f      	ldr	r3, [pc, #60]	; (8016fa0 <__ulp+0x48>)
 8016f62:	4013      	ands	r3, r2
 8016f64:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	dc08      	bgt.n	8016f7e <__ulp+0x26>
 8016f6c:	425b      	negs	r3, r3
 8016f6e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8016f72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016f76:	da04      	bge.n	8016f82 <__ulp+0x2a>
 8016f78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016f7c:	4113      	asrs	r3, r2
 8016f7e:	2200      	movs	r2, #0
 8016f80:	e008      	b.n	8016f94 <__ulp+0x3c>
 8016f82:	f1a2 0314 	sub.w	r3, r2, #20
 8016f86:	2b1e      	cmp	r3, #30
 8016f88:	bfda      	itte	le
 8016f8a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8016f8e:	40da      	lsrle	r2, r3
 8016f90:	2201      	movgt	r2, #1
 8016f92:	2300      	movs	r3, #0
 8016f94:	4619      	mov	r1, r3
 8016f96:	4610      	mov	r0, r2
 8016f98:	ec41 0b10 	vmov	d0, r0, r1
 8016f9c:	b002      	add	sp, #8
 8016f9e:	4770      	bx	lr
 8016fa0:	7ff00000 	.word	0x7ff00000

08016fa4 <__b2d>:
 8016fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fa8:	6906      	ldr	r6, [r0, #16]
 8016faa:	f100 0814 	add.w	r8, r0, #20
 8016fae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016fb2:	1f37      	subs	r7, r6, #4
 8016fb4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016fb8:	4610      	mov	r0, r2
 8016fba:	f7ff fd53 	bl	8016a64 <__hi0bits>
 8016fbe:	f1c0 0320 	rsb	r3, r0, #32
 8016fc2:	280a      	cmp	r0, #10
 8016fc4:	600b      	str	r3, [r1, #0]
 8016fc6:	491b      	ldr	r1, [pc, #108]	; (8017034 <__b2d+0x90>)
 8016fc8:	dc15      	bgt.n	8016ff6 <__b2d+0x52>
 8016fca:	f1c0 0c0b 	rsb	ip, r0, #11
 8016fce:	fa22 f30c 	lsr.w	r3, r2, ip
 8016fd2:	45b8      	cmp	r8, r7
 8016fd4:	ea43 0501 	orr.w	r5, r3, r1
 8016fd8:	bf34      	ite	cc
 8016fda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016fde:	2300      	movcs	r3, #0
 8016fe0:	3015      	adds	r0, #21
 8016fe2:	fa02 f000 	lsl.w	r0, r2, r0
 8016fe6:	fa23 f30c 	lsr.w	r3, r3, ip
 8016fea:	4303      	orrs	r3, r0
 8016fec:	461c      	mov	r4, r3
 8016fee:	ec45 4b10 	vmov	d0, r4, r5
 8016ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ff6:	45b8      	cmp	r8, r7
 8016ff8:	bf3a      	itte	cc
 8016ffa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016ffe:	f1a6 0708 	subcc.w	r7, r6, #8
 8017002:	2300      	movcs	r3, #0
 8017004:	380b      	subs	r0, #11
 8017006:	d012      	beq.n	801702e <__b2d+0x8a>
 8017008:	f1c0 0120 	rsb	r1, r0, #32
 801700c:	fa23 f401 	lsr.w	r4, r3, r1
 8017010:	4082      	lsls	r2, r0
 8017012:	4322      	orrs	r2, r4
 8017014:	4547      	cmp	r7, r8
 8017016:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801701a:	bf8c      	ite	hi
 801701c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017020:	2200      	movls	r2, #0
 8017022:	4083      	lsls	r3, r0
 8017024:	40ca      	lsrs	r2, r1
 8017026:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801702a:	4313      	orrs	r3, r2
 801702c:	e7de      	b.n	8016fec <__b2d+0x48>
 801702e:	ea42 0501 	orr.w	r5, r2, r1
 8017032:	e7db      	b.n	8016fec <__b2d+0x48>
 8017034:	3ff00000 	.word	0x3ff00000

08017038 <__d2b>:
 8017038:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801703c:	460f      	mov	r7, r1
 801703e:	2101      	movs	r1, #1
 8017040:	ec59 8b10 	vmov	r8, r9, d0
 8017044:	4616      	mov	r6, r2
 8017046:	f7ff fc1b 	bl	8016880 <_Balloc>
 801704a:	4604      	mov	r4, r0
 801704c:	b930      	cbnz	r0, 801705c <__d2b+0x24>
 801704e:	4602      	mov	r2, r0
 8017050:	4b24      	ldr	r3, [pc, #144]	; (80170e4 <__d2b+0xac>)
 8017052:	4825      	ldr	r0, [pc, #148]	; (80170e8 <__d2b+0xb0>)
 8017054:	f240 310f 	movw	r1, #783	; 0x30f
 8017058:	f7fe f9c4 	bl	80153e4 <__assert_func>
 801705c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017060:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017064:	bb2d      	cbnz	r5, 80170b2 <__d2b+0x7a>
 8017066:	9301      	str	r3, [sp, #4]
 8017068:	f1b8 0300 	subs.w	r3, r8, #0
 801706c:	d026      	beq.n	80170bc <__d2b+0x84>
 801706e:	4668      	mov	r0, sp
 8017070:	9300      	str	r3, [sp, #0]
 8017072:	f7ff fd17 	bl	8016aa4 <__lo0bits>
 8017076:	e9dd 1200 	ldrd	r1, r2, [sp]
 801707a:	b1e8      	cbz	r0, 80170b8 <__d2b+0x80>
 801707c:	f1c0 0320 	rsb	r3, r0, #32
 8017080:	fa02 f303 	lsl.w	r3, r2, r3
 8017084:	430b      	orrs	r3, r1
 8017086:	40c2      	lsrs	r2, r0
 8017088:	6163      	str	r3, [r4, #20]
 801708a:	9201      	str	r2, [sp, #4]
 801708c:	9b01      	ldr	r3, [sp, #4]
 801708e:	61a3      	str	r3, [r4, #24]
 8017090:	2b00      	cmp	r3, #0
 8017092:	bf14      	ite	ne
 8017094:	2202      	movne	r2, #2
 8017096:	2201      	moveq	r2, #1
 8017098:	6122      	str	r2, [r4, #16]
 801709a:	b1bd      	cbz	r5, 80170cc <__d2b+0x94>
 801709c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80170a0:	4405      	add	r5, r0
 80170a2:	603d      	str	r5, [r7, #0]
 80170a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80170a8:	6030      	str	r0, [r6, #0]
 80170aa:	4620      	mov	r0, r4
 80170ac:	b003      	add	sp, #12
 80170ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80170b6:	e7d6      	b.n	8017066 <__d2b+0x2e>
 80170b8:	6161      	str	r1, [r4, #20]
 80170ba:	e7e7      	b.n	801708c <__d2b+0x54>
 80170bc:	a801      	add	r0, sp, #4
 80170be:	f7ff fcf1 	bl	8016aa4 <__lo0bits>
 80170c2:	9b01      	ldr	r3, [sp, #4]
 80170c4:	6163      	str	r3, [r4, #20]
 80170c6:	3020      	adds	r0, #32
 80170c8:	2201      	movs	r2, #1
 80170ca:	e7e5      	b.n	8017098 <__d2b+0x60>
 80170cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80170d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80170d4:	6038      	str	r0, [r7, #0]
 80170d6:	6918      	ldr	r0, [r3, #16]
 80170d8:	f7ff fcc4 	bl	8016a64 <__hi0bits>
 80170dc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80170e0:	e7e2      	b.n	80170a8 <__d2b+0x70>
 80170e2:	bf00      	nop
 80170e4:	0801b13c 	.word	0x0801b13c
 80170e8:	0801b1ad 	.word	0x0801b1ad

080170ec <__ratio>:
 80170ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170f0:	4688      	mov	r8, r1
 80170f2:	4669      	mov	r1, sp
 80170f4:	4681      	mov	r9, r0
 80170f6:	f7ff ff55 	bl	8016fa4 <__b2d>
 80170fa:	a901      	add	r1, sp, #4
 80170fc:	4640      	mov	r0, r8
 80170fe:	ec55 4b10 	vmov	r4, r5, d0
 8017102:	f7ff ff4f 	bl	8016fa4 <__b2d>
 8017106:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801710a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801710e:	eba3 0c02 	sub.w	ip, r3, r2
 8017112:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017116:	1a9b      	subs	r3, r3, r2
 8017118:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801711c:	ec51 0b10 	vmov	r0, r1, d0
 8017120:	2b00      	cmp	r3, #0
 8017122:	bfd6      	itet	le
 8017124:	460a      	movle	r2, r1
 8017126:	462a      	movgt	r2, r5
 8017128:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801712c:	468b      	mov	fp, r1
 801712e:	462f      	mov	r7, r5
 8017130:	bfd4      	ite	le
 8017132:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017136:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801713a:	4620      	mov	r0, r4
 801713c:	ee10 2a10 	vmov	r2, s0
 8017140:	465b      	mov	r3, fp
 8017142:	4639      	mov	r1, r7
 8017144:	f7e9 fb82 	bl	800084c <__aeabi_ddiv>
 8017148:	ec41 0b10 	vmov	d0, r0, r1
 801714c:	b003      	add	sp, #12
 801714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017152 <__copybits>:
 8017152:	3901      	subs	r1, #1
 8017154:	b570      	push	{r4, r5, r6, lr}
 8017156:	1149      	asrs	r1, r1, #5
 8017158:	6914      	ldr	r4, [r2, #16]
 801715a:	3101      	adds	r1, #1
 801715c:	f102 0314 	add.w	r3, r2, #20
 8017160:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017164:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017168:	1f05      	subs	r5, r0, #4
 801716a:	42a3      	cmp	r3, r4
 801716c:	d30c      	bcc.n	8017188 <__copybits+0x36>
 801716e:	1aa3      	subs	r3, r4, r2
 8017170:	3b11      	subs	r3, #17
 8017172:	f023 0303 	bic.w	r3, r3, #3
 8017176:	3211      	adds	r2, #17
 8017178:	42a2      	cmp	r2, r4
 801717a:	bf88      	it	hi
 801717c:	2300      	movhi	r3, #0
 801717e:	4418      	add	r0, r3
 8017180:	2300      	movs	r3, #0
 8017182:	4288      	cmp	r0, r1
 8017184:	d305      	bcc.n	8017192 <__copybits+0x40>
 8017186:	bd70      	pop	{r4, r5, r6, pc}
 8017188:	f853 6b04 	ldr.w	r6, [r3], #4
 801718c:	f845 6f04 	str.w	r6, [r5, #4]!
 8017190:	e7eb      	b.n	801716a <__copybits+0x18>
 8017192:	f840 3b04 	str.w	r3, [r0], #4
 8017196:	e7f4      	b.n	8017182 <__copybits+0x30>

08017198 <__any_on>:
 8017198:	f100 0214 	add.w	r2, r0, #20
 801719c:	6900      	ldr	r0, [r0, #16]
 801719e:	114b      	asrs	r3, r1, #5
 80171a0:	4298      	cmp	r0, r3
 80171a2:	b510      	push	{r4, lr}
 80171a4:	db11      	blt.n	80171ca <__any_on+0x32>
 80171a6:	dd0a      	ble.n	80171be <__any_on+0x26>
 80171a8:	f011 011f 	ands.w	r1, r1, #31
 80171ac:	d007      	beq.n	80171be <__any_on+0x26>
 80171ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80171b2:	fa24 f001 	lsr.w	r0, r4, r1
 80171b6:	fa00 f101 	lsl.w	r1, r0, r1
 80171ba:	428c      	cmp	r4, r1
 80171bc:	d10b      	bne.n	80171d6 <__any_on+0x3e>
 80171be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80171c2:	4293      	cmp	r3, r2
 80171c4:	d803      	bhi.n	80171ce <__any_on+0x36>
 80171c6:	2000      	movs	r0, #0
 80171c8:	bd10      	pop	{r4, pc}
 80171ca:	4603      	mov	r3, r0
 80171cc:	e7f7      	b.n	80171be <__any_on+0x26>
 80171ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80171d2:	2900      	cmp	r1, #0
 80171d4:	d0f5      	beq.n	80171c2 <__any_on+0x2a>
 80171d6:	2001      	movs	r0, #1
 80171d8:	e7f6      	b.n	80171c8 <__any_on+0x30>

080171da <__ascii_wctomb>:
 80171da:	b149      	cbz	r1, 80171f0 <__ascii_wctomb+0x16>
 80171dc:	2aff      	cmp	r2, #255	; 0xff
 80171de:	bf85      	ittet	hi
 80171e0:	238a      	movhi	r3, #138	; 0x8a
 80171e2:	6003      	strhi	r3, [r0, #0]
 80171e4:	700a      	strbls	r2, [r1, #0]
 80171e6:	f04f 30ff 	movhi.w	r0, #4294967295
 80171ea:	bf98      	it	ls
 80171ec:	2001      	movls	r0, #1
 80171ee:	4770      	bx	lr
 80171f0:	4608      	mov	r0, r1
 80171f2:	4770      	bx	lr

080171f4 <__ssputs_r>:
 80171f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171f8:	688e      	ldr	r6, [r1, #8]
 80171fa:	461f      	mov	r7, r3
 80171fc:	42be      	cmp	r6, r7
 80171fe:	680b      	ldr	r3, [r1, #0]
 8017200:	4682      	mov	sl, r0
 8017202:	460c      	mov	r4, r1
 8017204:	4690      	mov	r8, r2
 8017206:	d82c      	bhi.n	8017262 <__ssputs_r+0x6e>
 8017208:	898a      	ldrh	r2, [r1, #12]
 801720a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801720e:	d026      	beq.n	801725e <__ssputs_r+0x6a>
 8017210:	6965      	ldr	r5, [r4, #20]
 8017212:	6909      	ldr	r1, [r1, #16]
 8017214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017218:	eba3 0901 	sub.w	r9, r3, r1
 801721c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017220:	1c7b      	adds	r3, r7, #1
 8017222:	444b      	add	r3, r9
 8017224:	106d      	asrs	r5, r5, #1
 8017226:	429d      	cmp	r5, r3
 8017228:	bf38      	it	cc
 801722a:	461d      	movcc	r5, r3
 801722c:	0553      	lsls	r3, r2, #21
 801722e:	d527      	bpl.n	8017280 <__ssputs_r+0x8c>
 8017230:	4629      	mov	r1, r5
 8017232:	f7fc f83b 	bl	80132ac <_malloc_r>
 8017236:	4606      	mov	r6, r0
 8017238:	b360      	cbz	r0, 8017294 <__ssputs_r+0xa0>
 801723a:	6921      	ldr	r1, [r4, #16]
 801723c:	464a      	mov	r2, r9
 801723e:	f7fe f8b4 	bl	80153aa <memcpy>
 8017242:	89a3      	ldrh	r3, [r4, #12]
 8017244:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801724c:	81a3      	strh	r3, [r4, #12]
 801724e:	6126      	str	r6, [r4, #16]
 8017250:	6165      	str	r5, [r4, #20]
 8017252:	444e      	add	r6, r9
 8017254:	eba5 0509 	sub.w	r5, r5, r9
 8017258:	6026      	str	r6, [r4, #0]
 801725a:	60a5      	str	r5, [r4, #8]
 801725c:	463e      	mov	r6, r7
 801725e:	42be      	cmp	r6, r7
 8017260:	d900      	bls.n	8017264 <__ssputs_r+0x70>
 8017262:	463e      	mov	r6, r7
 8017264:	6820      	ldr	r0, [r4, #0]
 8017266:	4632      	mov	r2, r6
 8017268:	4641      	mov	r1, r8
 801726a:	f000 f9db 	bl	8017624 <memmove>
 801726e:	68a3      	ldr	r3, [r4, #8]
 8017270:	1b9b      	subs	r3, r3, r6
 8017272:	60a3      	str	r3, [r4, #8]
 8017274:	6823      	ldr	r3, [r4, #0]
 8017276:	4433      	add	r3, r6
 8017278:	6023      	str	r3, [r4, #0]
 801727a:	2000      	movs	r0, #0
 801727c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017280:	462a      	mov	r2, r5
 8017282:	f000 fa06 	bl	8017692 <_realloc_r>
 8017286:	4606      	mov	r6, r0
 8017288:	2800      	cmp	r0, #0
 801728a:	d1e0      	bne.n	801724e <__ssputs_r+0x5a>
 801728c:	6921      	ldr	r1, [r4, #16]
 801728e:	4650      	mov	r0, sl
 8017290:	f7fe ff40 	bl	8016114 <_free_r>
 8017294:	230c      	movs	r3, #12
 8017296:	f8ca 3000 	str.w	r3, [sl]
 801729a:	89a3      	ldrh	r3, [r4, #12]
 801729c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172a0:	81a3      	strh	r3, [r4, #12]
 80172a2:	f04f 30ff 	mov.w	r0, #4294967295
 80172a6:	e7e9      	b.n	801727c <__ssputs_r+0x88>

080172a8 <_svfiprintf_r>:
 80172a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172ac:	4698      	mov	r8, r3
 80172ae:	898b      	ldrh	r3, [r1, #12]
 80172b0:	061b      	lsls	r3, r3, #24
 80172b2:	b09d      	sub	sp, #116	; 0x74
 80172b4:	4607      	mov	r7, r0
 80172b6:	460d      	mov	r5, r1
 80172b8:	4614      	mov	r4, r2
 80172ba:	d50e      	bpl.n	80172da <_svfiprintf_r+0x32>
 80172bc:	690b      	ldr	r3, [r1, #16]
 80172be:	b963      	cbnz	r3, 80172da <_svfiprintf_r+0x32>
 80172c0:	2140      	movs	r1, #64	; 0x40
 80172c2:	f7fb fff3 	bl	80132ac <_malloc_r>
 80172c6:	6028      	str	r0, [r5, #0]
 80172c8:	6128      	str	r0, [r5, #16]
 80172ca:	b920      	cbnz	r0, 80172d6 <_svfiprintf_r+0x2e>
 80172cc:	230c      	movs	r3, #12
 80172ce:	603b      	str	r3, [r7, #0]
 80172d0:	f04f 30ff 	mov.w	r0, #4294967295
 80172d4:	e0d0      	b.n	8017478 <_svfiprintf_r+0x1d0>
 80172d6:	2340      	movs	r3, #64	; 0x40
 80172d8:	616b      	str	r3, [r5, #20]
 80172da:	2300      	movs	r3, #0
 80172dc:	9309      	str	r3, [sp, #36]	; 0x24
 80172de:	2320      	movs	r3, #32
 80172e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80172e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80172e8:	2330      	movs	r3, #48	; 0x30
 80172ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017490 <_svfiprintf_r+0x1e8>
 80172ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80172f2:	f04f 0901 	mov.w	r9, #1
 80172f6:	4623      	mov	r3, r4
 80172f8:	469a      	mov	sl, r3
 80172fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172fe:	b10a      	cbz	r2, 8017304 <_svfiprintf_r+0x5c>
 8017300:	2a25      	cmp	r2, #37	; 0x25
 8017302:	d1f9      	bne.n	80172f8 <_svfiprintf_r+0x50>
 8017304:	ebba 0b04 	subs.w	fp, sl, r4
 8017308:	d00b      	beq.n	8017322 <_svfiprintf_r+0x7a>
 801730a:	465b      	mov	r3, fp
 801730c:	4622      	mov	r2, r4
 801730e:	4629      	mov	r1, r5
 8017310:	4638      	mov	r0, r7
 8017312:	f7ff ff6f 	bl	80171f4 <__ssputs_r>
 8017316:	3001      	adds	r0, #1
 8017318:	f000 80a9 	beq.w	801746e <_svfiprintf_r+0x1c6>
 801731c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801731e:	445a      	add	r2, fp
 8017320:	9209      	str	r2, [sp, #36]	; 0x24
 8017322:	f89a 3000 	ldrb.w	r3, [sl]
 8017326:	2b00      	cmp	r3, #0
 8017328:	f000 80a1 	beq.w	801746e <_svfiprintf_r+0x1c6>
 801732c:	2300      	movs	r3, #0
 801732e:	f04f 32ff 	mov.w	r2, #4294967295
 8017332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017336:	f10a 0a01 	add.w	sl, sl, #1
 801733a:	9304      	str	r3, [sp, #16]
 801733c:	9307      	str	r3, [sp, #28]
 801733e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017342:	931a      	str	r3, [sp, #104]	; 0x68
 8017344:	4654      	mov	r4, sl
 8017346:	2205      	movs	r2, #5
 8017348:	f814 1b01 	ldrb.w	r1, [r4], #1
 801734c:	4850      	ldr	r0, [pc, #320]	; (8017490 <_svfiprintf_r+0x1e8>)
 801734e:	f7e8 ff3f 	bl	80001d0 <memchr>
 8017352:	9a04      	ldr	r2, [sp, #16]
 8017354:	b9d8      	cbnz	r0, 801738e <_svfiprintf_r+0xe6>
 8017356:	06d0      	lsls	r0, r2, #27
 8017358:	bf44      	itt	mi
 801735a:	2320      	movmi	r3, #32
 801735c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017360:	0711      	lsls	r1, r2, #28
 8017362:	bf44      	itt	mi
 8017364:	232b      	movmi	r3, #43	; 0x2b
 8017366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801736a:	f89a 3000 	ldrb.w	r3, [sl]
 801736e:	2b2a      	cmp	r3, #42	; 0x2a
 8017370:	d015      	beq.n	801739e <_svfiprintf_r+0xf6>
 8017372:	9a07      	ldr	r2, [sp, #28]
 8017374:	4654      	mov	r4, sl
 8017376:	2000      	movs	r0, #0
 8017378:	f04f 0c0a 	mov.w	ip, #10
 801737c:	4621      	mov	r1, r4
 801737e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017382:	3b30      	subs	r3, #48	; 0x30
 8017384:	2b09      	cmp	r3, #9
 8017386:	d94d      	bls.n	8017424 <_svfiprintf_r+0x17c>
 8017388:	b1b0      	cbz	r0, 80173b8 <_svfiprintf_r+0x110>
 801738a:	9207      	str	r2, [sp, #28]
 801738c:	e014      	b.n	80173b8 <_svfiprintf_r+0x110>
 801738e:	eba0 0308 	sub.w	r3, r0, r8
 8017392:	fa09 f303 	lsl.w	r3, r9, r3
 8017396:	4313      	orrs	r3, r2
 8017398:	9304      	str	r3, [sp, #16]
 801739a:	46a2      	mov	sl, r4
 801739c:	e7d2      	b.n	8017344 <_svfiprintf_r+0x9c>
 801739e:	9b03      	ldr	r3, [sp, #12]
 80173a0:	1d19      	adds	r1, r3, #4
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	9103      	str	r1, [sp, #12]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	bfbb      	ittet	lt
 80173aa:	425b      	neglt	r3, r3
 80173ac:	f042 0202 	orrlt.w	r2, r2, #2
 80173b0:	9307      	strge	r3, [sp, #28]
 80173b2:	9307      	strlt	r3, [sp, #28]
 80173b4:	bfb8      	it	lt
 80173b6:	9204      	strlt	r2, [sp, #16]
 80173b8:	7823      	ldrb	r3, [r4, #0]
 80173ba:	2b2e      	cmp	r3, #46	; 0x2e
 80173bc:	d10c      	bne.n	80173d8 <_svfiprintf_r+0x130>
 80173be:	7863      	ldrb	r3, [r4, #1]
 80173c0:	2b2a      	cmp	r3, #42	; 0x2a
 80173c2:	d134      	bne.n	801742e <_svfiprintf_r+0x186>
 80173c4:	9b03      	ldr	r3, [sp, #12]
 80173c6:	1d1a      	adds	r2, r3, #4
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	9203      	str	r2, [sp, #12]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	bfb8      	it	lt
 80173d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80173d4:	3402      	adds	r4, #2
 80173d6:	9305      	str	r3, [sp, #20]
 80173d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80174a0 <_svfiprintf_r+0x1f8>
 80173dc:	7821      	ldrb	r1, [r4, #0]
 80173de:	2203      	movs	r2, #3
 80173e0:	4650      	mov	r0, sl
 80173e2:	f7e8 fef5 	bl	80001d0 <memchr>
 80173e6:	b138      	cbz	r0, 80173f8 <_svfiprintf_r+0x150>
 80173e8:	9b04      	ldr	r3, [sp, #16]
 80173ea:	eba0 000a 	sub.w	r0, r0, sl
 80173ee:	2240      	movs	r2, #64	; 0x40
 80173f0:	4082      	lsls	r2, r0
 80173f2:	4313      	orrs	r3, r2
 80173f4:	3401      	adds	r4, #1
 80173f6:	9304      	str	r3, [sp, #16]
 80173f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173fc:	4825      	ldr	r0, [pc, #148]	; (8017494 <_svfiprintf_r+0x1ec>)
 80173fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017402:	2206      	movs	r2, #6
 8017404:	f7e8 fee4 	bl	80001d0 <memchr>
 8017408:	2800      	cmp	r0, #0
 801740a:	d038      	beq.n	801747e <_svfiprintf_r+0x1d6>
 801740c:	4b22      	ldr	r3, [pc, #136]	; (8017498 <_svfiprintf_r+0x1f0>)
 801740e:	bb1b      	cbnz	r3, 8017458 <_svfiprintf_r+0x1b0>
 8017410:	9b03      	ldr	r3, [sp, #12]
 8017412:	3307      	adds	r3, #7
 8017414:	f023 0307 	bic.w	r3, r3, #7
 8017418:	3308      	adds	r3, #8
 801741a:	9303      	str	r3, [sp, #12]
 801741c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801741e:	4433      	add	r3, r6
 8017420:	9309      	str	r3, [sp, #36]	; 0x24
 8017422:	e768      	b.n	80172f6 <_svfiprintf_r+0x4e>
 8017424:	fb0c 3202 	mla	r2, ip, r2, r3
 8017428:	460c      	mov	r4, r1
 801742a:	2001      	movs	r0, #1
 801742c:	e7a6      	b.n	801737c <_svfiprintf_r+0xd4>
 801742e:	2300      	movs	r3, #0
 8017430:	3401      	adds	r4, #1
 8017432:	9305      	str	r3, [sp, #20]
 8017434:	4619      	mov	r1, r3
 8017436:	f04f 0c0a 	mov.w	ip, #10
 801743a:	4620      	mov	r0, r4
 801743c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017440:	3a30      	subs	r2, #48	; 0x30
 8017442:	2a09      	cmp	r2, #9
 8017444:	d903      	bls.n	801744e <_svfiprintf_r+0x1a6>
 8017446:	2b00      	cmp	r3, #0
 8017448:	d0c6      	beq.n	80173d8 <_svfiprintf_r+0x130>
 801744a:	9105      	str	r1, [sp, #20]
 801744c:	e7c4      	b.n	80173d8 <_svfiprintf_r+0x130>
 801744e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017452:	4604      	mov	r4, r0
 8017454:	2301      	movs	r3, #1
 8017456:	e7f0      	b.n	801743a <_svfiprintf_r+0x192>
 8017458:	ab03      	add	r3, sp, #12
 801745a:	9300      	str	r3, [sp, #0]
 801745c:	462a      	mov	r2, r5
 801745e:	4b0f      	ldr	r3, [pc, #60]	; (801749c <_svfiprintf_r+0x1f4>)
 8017460:	a904      	add	r1, sp, #16
 8017462:	4638      	mov	r0, r7
 8017464:	f7fc ff56 	bl	8014314 <_printf_float>
 8017468:	1c42      	adds	r2, r0, #1
 801746a:	4606      	mov	r6, r0
 801746c:	d1d6      	bne.n	801741c <_svfiprintf_r+0x174>
 801746e:	89ab      	ldrh	r3, [r5, #12]
 8017470:	065b      	lsls	r3, r3, #25
 8017472:	f53f af2d 	bmi.w	80172d0 <_svfiprintf_r+0x28>
 8017476:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017478:	b01d      	add	sp, #116	; 0x74
 801747a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801747e:	ab03      	add	r3, sp, #12
 8017480:	9300      	str	r3, [sp, #0]
 8017482:	462a      	mov	r2, r5
 8017484:	4b05      	ldr	r3, [pc, #20]	; (801749c <_svfiprintf_r+0x1f4>)
 8017486:	a904      	add	r1, sp, #16
 8017488:	4638      	mov	r0, r7
 801748a:	f7fd f9e7 	bl	801485c <_printf_i>
 801748e:	e7eb      	b.n	8017468 <_svfiprintf_r+0x1c0>
 8017490:	0801b304 	.word	0x0801b304
 8017494:	0801b30e 	.word	0x0801b30e
 8017498:	08014315 	.word	0x08014315
 801749c:	080171f5 	.word	0x080171f5
 80174a0:	0801b30a 	.word	0x0801b30a

080174a4 <__sflush_r>:
 80174a4:	898a      	ldrh	r2, [r1, #12]
 80174a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174aa:	4605      	mov	r5, r0
 80174ac:	0710      	lsls	r0, r2, #28
 80174ae:	460c      	mov	r4, r1
 80174b0:	d458      	bmi.n	8017564 <__sflush_r+0xc0>
 80174b2:	684b      	ldr	r3, [r1, #4]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	dc05      	bgt.n	80174c4 <__sflush_r+0x20>
 80174b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	dc02      	bgt.n	80174c4 <__sflush_r+0x20>
 80174be:	2000      	movs	r0, #0
 80174c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80174c6:	2e00      	cmp	r6, #0
 80174c8:	d0f9      	beq.n	80174be <__sflush_r+0x1a>
 80174ca:	2300      	movs	r3, #0
 80174cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80174d0:	682f      	ldr	r7, [r5, #0]
 80174d2:	6a21      	ldr	r1, [r4, #32]
 80174d4:	602b      	str	r3, [r5, #0]
 80174d6:	d032      	beq.n	801753e <__sflush_r+0x9a>
 80174d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80174da:	89a3      	ldrh	r3, [r4, #12]
 80174dc:	075a      	lsls	r2, r3, #29
 80174de:	d505      	bpl.n	80174ec <__sflush_r+0x48>
 80174e0:	6863      	ldr	r3, [r4, #4]
 80174e2:	1ac0      	subs	r0, r0, r3
 80174e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80174e6:	b10b      	cbz	r3, 80174ec <__sflush_r+0x48>
 80174e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80174ea:	1ac0      	subs	r0, r0, r3
 80174ec:	2300      	movs	r3, #0
 80174ee:	4602      	mov	r2, r0
 80174f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80174f2:	6a21      	ldr	r1, [r4, #32]
 80174f4:	4628      	mov	r0, r5
 80174f6:	47b0      	blx	r6
 80174f8:	1c43      	adds	r3, r0, #1
 80174fa:	89a3      	ldrh	r3, [r4, #12]
 80174fc:	d106      	bne.n	801750c <__sflush_r+0x68>
 80174fe:	6829      	ldr	r1, [r5, #0]
 8017500:	291d      	cmp	r1, #29
 8017502:	d82b      	bhi.n	801755c <__sflush_r+0xb8>
 8017504:	4a29      	ldr	r2, [pc, #164]	; (80175ac <__sflush_r+0x108>)
 8017506:	410a      	asrs	r2, r1
 8017508:	07d6      	lsls	r6, r2, #31
 801750a:	d427      	bmi.n	801755c <__sflush_r+0xb8>
 801750c:	2200      	movs	r2, #0
 801750e:	6062      	str	r2, [r4, #4]
 8017510:	04d9      	lsls	r1, r3, #19
 8017512:	6922      	ldr	r2, [r4, #16]
 8017514:	6022      	str	r2, [r4, #0]
 8017516:	d504      	bpl.n	8017522 <__sflush_r+0x7e>
 8017518:	1c42      	adds	r2, r0, #1
 801751a:	d101      	bne.n	8017520 <__sflush_r+0x7c>
 801751c:	682b      	ldr	r3, [r5, #0]
 801751e:	b903      	cbnz	r3, 8017522 <__sflush_r+0x7e>
 8017520:	6560      	str	r0, [r4, #84]	; 0x54
 8017522:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017524:	602f      	str	r7, [r5, #0]
 8017526:	2900      	cmp	r1, #0
 8017528:	d0c9      	beq.n	80174be <__sflush_r+0x1a>
 801752a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801752e:	4299      	cmp	r1, r3
 8017530:	d002      	beq.n	8017538 <__sflush_r+0x94>
 8017532:	4628      	mov	r0, r5
 8017534:	f7fe fdee 	bl	8016114 <_free_r>
 8017538:	2000      	movs	r0, #0
 801753a:	6360      	str	r0, [r4, #52]	; 0x34
 801753c:	e7c0      	b.n	80174c0 <__sflush_r+0x1c>
 801753e:	2301      	movs	r3, #1
 8017540:	4628      	mov	r0, r5
 8017542:	47b0      	blx	r6
 8017544:	1c41      	adds	r1, r0, #1
 8017546:	d1c8      	bne.n	80174da <__sflush_r+0x36>
 8017548:	682b      	ldr	r3, [r5, #0]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d0c5      	beq.n	80174da <__sflush_r+0x36>
 801754e:	2b1d      	cmp	r3, #29
 8017550:	d001      	beq.n	8017556 <__sflush_r+0xb2>
 8017552:	2b16      	cmp	r3, #22
 8017554:	d101      	bne.n	801755a <__sflush_r+0xb6>
 8017556:	602f      	str	r7, [r5, #0]
 8017558:	e7b1      	b.n	80174be <__sflush_r+0x1a>
 801755a:	89a3      	ldrh	r3, [r4, #12]
 801755c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017560:	81a3      	strh	r3, [r4, #12]
 8017562:	e7ad      	b.n	80174c0 <__sflush_r+0x1c>
 8017564:	690f      	ldr	r7, [r1, #16]
 8017566:	2f00      	cmp	r7, #0
 8017568:	d0a9      	beq.n	80174be <__sflush_r+0x1a>
 801756a:	0793      	lsls	r3, r2, #30
 801756c:	680e      	ldr	r6, [r1, #0]
 801756e:	bf08      	it	eq
 8017570:	694b      	ldreq	r3, [r1, #20]
 8017572:	600f      	str	r7, [r1, #0]
 8017574:	bf18      	it	ne
 8017576:	2300      	movne	r3, #0
 8017578:	eba6 0807 	sub.w	r8, r6, r7
 801757c:	608b      	str	r3, [r1, #8]
 801757e:	f1b8 0f00 	cmp.w	r8, #0
 8017582:	dd9c      	ble.n	80174be <__sflush_r+0x1a>
 8017584:	6a21      	ldr	r1, [r4, #32]
 8017586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017588:	4643      	mov	r3, r8
 801758a:	463a      	mov	r2, r7
 801758c:	4628      	mov	r0, r5
 801758e:	47b0      	blx	r6
 8017590:	2800      	cmp	r0, #0
 8017592:	dc06      	bgt.n	80175a2 <__sflush_r+0xfe>
 8017594:	89a3      	ldrh	r3, [r4, #12]
 8017596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801759a:	81a3      	strh	r3, [r4, #12]
 801759c:	f04f 30ff 	mov.w	r0, #4294967295
 80175a0:	e78e      	b.n	80174c0 <__sflush_r+0x1c>
 80175a2:	4407      	add	r7, r0
 80175a4:	eba8 0800 	sub.w	r8, r8, r0
 80175a8:	e7e9      	b.n	801757e <__sflush_r+0xda>
 80175aa:	bf00      	nop
 80175ac:	dfbffffe 	.word	0xdfbffffe

080175b0 <_fflush_r>:
 80175b0:	b538      	push	{r3, r4, r5, lr}
 80175b2:	690b      	ldr	r3, [r1, #16]
 80175b4:	4605      	mov	r5, r0
 80175b6:	460c      	mov	r4, r1
 80175b8:	b913      	cbnz	r3, 80175c0 <_fflush_r+0x10>
 80175ba:	2500      	movs	r5, #0
 80175bc:	4628      	mov	r0, r5
 80175be:	bd38      	pop	{r3, r4, r5, pc}
 80175c0:	b118      	cbz	r0, 80175ca <_fflush_r+0x1a>
 80175c2:	6a03      	ldr	r3, [r0, #32]
 80175c4:	b90b      	cbnz	r3, 80175ca <_fflush_r+0x1a>
 80175c6:	f7fd fd07 	bl	8014fd8 <__sinit>
 80175ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d0f3      	beq.n	80175ba <_fflush_r+0xa>
 80175d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80175d4:	07d0      	lsls	r0, r2, #31
 80175d6:	d404      	bmi.n	80175e2 <_fflush_r+0x32>
 80175d8:	0599      	lsls	r1, r3, #22
 80175da:	d402      	bmi.n	80175e2 <_fflush_r+0x32>
 80175dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80175de:	f7fd feda 	bl	8015396 <__retarget_lock_acquire_recursive>
 80175e2:	4628      	mov	r0, r5
 80175e4:	4621      	mov	r1, r4
 80175e6:	f7ff ff5d 	bl	80174a4 <__sflush_r>
 80175ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80175ec:	07da      	lsls	r2, r3, #31
 80175ee:	4605      	mov	r5, r0
 80175f0:	d4e4      	bmi.n	80175bc <_fflush_r+0xc>
 80175f2:	89a3      	ldrh	r3, [r4, #12]
 80175f4:	059b      	lsls	r3, r3, #22
 80175f6:	d4e1      	bmi.n	80175bc <_fflush_r+0xc>
 80175f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80175fa:	f7fd fecd 	bl	8015398 <__retarget_lock_release_recursive>
 80175fe:	e7dd      	b.n	80175bc <_fflush_r+0xc>

08017600 <fiprintf>:
 8017600:	b40e      	push	{r1, r2, r3}
 8017602:	b503      	push	{r0, r1, lr}
 8017604:	4601      	mov	r1, r0
 8017606:	ab03      	add	r3, sp, #12
 8017608:	4805      	ldr	r0, [pc, #20]	; (8017620 <fiprintf+0x20>)
 801760a:	f853 2b04 	ldr.w	r2, [r3], #4
 801760e:	6800      	ldr	r0, [r0, #0]
 8017610:	9301      	str	r3, [sp, #4]
 8017612:	f000 f897 	bl	8017744 <_vfiprintf_r>
 8017616:	b002      	add	sp, #8
 8017618:	f85d eb04 	ldr.w	lr, [sp], #4
 801761c:	b003      	add	sp, #12
 801761e:	4770      	bx	lr
 8017620:	200002f0 	.word	0x200002f0

08017624 <memmove>:
 8017624:	4288      	cmp	r0, r1
 8017626:	b510      	push	{r4, lr}
 8017628:	eb01 0402 	add.w	r4, r1, r2
 801762c:	d902      	bls.n	8017634 <memmove+0x10>
 801762e:	4284      	cmp	r4, r0
 8017630:	4623      	mov	r3, r4
 8017632:	d807      	bhi.n	8017644 <memmove+0x20>
 8017634:	1e43      	subs	r3, r0, #1
 8017636:	42a1      	cmp	r1, r4
 8017638:	d008      	beq.n	801764c <memmove+0x28>
 801763a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801763e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017642:	e7f8      	b.n	8017636 <memmove+0x12>
 8017644:	4402      	add	r2, r0
 8017646:	4601      	mov	r1, r0
 8017648:	428a      	cmp	r2, r1
 801764a:	d100      	bne.n	801764e <memmove+0x2a>
 801764c:	bd10      	pop	{r4, pc}
 801764e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017656:	e7f7      	b.n	8017648 <memmove+0x24>

08017658 <abort>:
 8017658:	b508      	push	{r3, lr}
 801765a:	2006      	movs	r0, #6
 801765c:	f000 fa4a 	bl	8017af4 <raise>
 8017660:	2001      	movs	r0, #1
 8017662:	f7ed fbd1 	bl	8004e08 <_exit>

08017666 <_calloc_r>:
 8017666:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017668:	fba1 2402 	umull	r2, r4, r1, r2
 801766c:	b94c      	cbnz	r4, 8017682 <_calloc_r+0x1c>
 801766e:	4611      	mov	r1, r2
 8017670:	9201      	str	r2, [sp, #4]
 8017672:	f7fb fe1b 	bl	80132ac <_malloc_r>
 8017676:	9a01      	ldr	r2, [sp, #4]
 8017678:	4605      	mov	r5, r0
 801767a:	b930      	cbnz	r0, 801768a <_calloc_r+0x24>
 801767c:	4628      	mov	r0, r5
 801767e:	b003      	add	sp, #12
 8017680:	bd30      	pop	{r4, r5, pc}
 8017682:	220c      	movs	r2, #12
 8017684:	6002      	str	r2, [r0, #0]
 8017686:	2500      	movs	r5, #0
 8017688:	e7f8      	b.n	801767c <_calloc_r+0x16>
 801768a:	4621      	mov	r1, r4
 801768c:	f7fd fd71 	bl	8015172 <memset>
 8017690:	e7f4      	b.n	801767c <_calloc_r+0x16>

08017692 <_realloc_r>:
 8017692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017696:	4680      	mov	r8, r0
 8017698:	4614      	mov	r4, r2
 801769a:	460e      	mov	r6, r1
 801769c:	b921      	cbnz	r1, 80176a8 <_realloc_r+0x16>
 801769e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176a2:	4611      	mov	r1, r2
 80176a4:	f7fb be02 	b.w	80132ac <_malloc_r>
 80176a8:	b92a      	cbnz	r2, 80176b6 <_realloc_r+0x24>
 80176aa:	f7fe fd33 	bl	8016114 <_free_r>
 80176ae:	4625      	mov	r5, r4
 80176b0:	4628      	mov	r0, r5
 80176b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176b6:	f000 fa39 	bl	8017b2c <_malloc_usable_size_r>
 80176ba:	4284      	cmp	r4, r0
 80176bc:	4607      	mov	r7, r0
 80176be:	d802      	bhi.n	80176c6 <_realloc_r+0x34>
 80176c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80176c4:	d812      	bhi.n	80176ec <_realloc_r+0x5a>
 80176c6:	4621      	mov	r1, r4
 80176c8:	4640      	mov	r0, r8
 80176ca:	f7fb fdef 	bl	80132ac <_malloc_r>
 80176ce:	4605      	mov	r5, r0
 80176d0:	2800      	cmp	r0, #0
 80176d2:	d0ed      	beq.n	80176b0 <_realloc_r+0x1e>
 80176d4:	42bc      	cmp	r4, r7
 80176d6:	4622      	mov	r2, r4
 80176d8:	4631      	mov	r1, r6
 80176da:	bf28      	it	cs
 80176dc:	463a      	movcs	r2, r7
 80176de:	f7fd fe64 	bl	80153aa <memcpy>
 80176e2:	4631      	mov	r1, r6
 80176e4:	4640      	mov	r0, r8
 80176e6:	f7fe fd15 	bl	8016114 <_free_r>
 80176ea:	e7e1      	b.n	80176b0 <_realloc_r+0x1e>
 80176ec:	4635      	mov	r5, r6
 80176ee:	e7df      	b.n	80176b0 <_realloc_r+0x1e>

080176f0 <__sfputc_r>:
 80176f0:	6893      	ldr	r3, [r2, #8]
 80176f2:	3b01      	subs	r3, #1
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	b410      	push	{r4}
 80176f8:	6093      	str	r3, [r2, #8]
 80176fa:	da08      	bge.n	801770e <__sfputc_r+0x1e>
 80176fc:	6994      	ldr	r4, [r2, #24]
 80176fe:	42a3      	cmp	r3, r4
 8017700:	db01      	blt.n	8017706 <__sfputc_r+0x16>
 8017702:	290a      	cmp	r1, #10
 8017704:	d103      	bne.n	801770e <__sfputc_r+0x1e>
 8017706:	f85d 4b04 	ldr.w	r4, [sp], #4
 801770a:	f000 b935 	b.w	8017978 <__swbuf_r>
 801770e:	6813      	ldr	r3, [r2, #0]
 8017710:	1c58      	adds	r0, r3, #1
 8017712:	6010      	str	r0, [r2, #0]
 8017714:	7019      	strb	r1, [r3, #0]
 8017716:	4608      	mov	r0, r1
 8017718:	f85d 4b04 	ldr.w	r4, [sp], #4
 801771c:	4770      	bx	lr

0801771e <__sfputs_r>:
 801771e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017720:	4606      	mov	r6, r0
 8017722:	460f      	mov	r7, r1
 8017724:	4614      	mov	r4, r2
 8017726:	18d5      	adds	r5, r2, r3
 8017728:	42ac      	cmp	r4, r5
 801772a:	d101      	bne.n	8017730 <__sfputs_r+0x12>
 801772c:	2000      	movs	r0, #0
 801772e:	e007      	b.n	8017740 <__sfputs_r+0x22>
 8017730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017734:	463a      	mov	r2, r7
 8017736:	4630      	mov	r0, r6
 8017738:	f7ff ffda 	bl	80176f0 <__sfputc_r>
 801773c:	1c43      	adds	r3, r0, #1
 801773e:	d1f3      	bne.n	8017728 <__sfputs_r+0xa>
 8017740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017744 <_vfiprintf_r>:
 8017744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017748:	460d      	mov	r5, r1
 801774a:	b09d      	sub	sp, #116	; 0x74
 801774c:	4614      	mov	r4, r2
 801774e:	4698      	mov	r8, r3
 8017750:	4606      	mov	r6, r0
 8017752:	b118      	cbz	r0, 801775c <_vfiprintf_r+0x18>
 8017754:	6a03      	ldr	r3, [r0, #32]
 8017756:	b90b      	cbnz	r3, 801775c <_vfiprintf_r+0x18>
 8017758:	f7fd fc3e 	bl	8014fd8 <__sinit>
 801775c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801775e:	07d9      	lsls	r1, r3, #31
 8017760:	d405      	bmi.n	801776e <_vfiprintf_r+0x2a>
 8017762:	89ab      	ldrh	r3, [r5, #12]
 8017764:	059a      	lsls	r2, r3, #22
 8017766:	d402      	bmi.n	801776e <_vfiprintf_r+0x2a>
 8017768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801776a:	f7fd fe14 	bl	8015396 <__retarget_lock_acquire_recursive>
 801776e:	89ab      	ldrh	r3, [r5, #12]
 8017770:	071b      	lsls	r3, r3, #28
 8017772:	d501      	bpl.n	8017778 <_vfiprintf_r+0x34>
 8017774:	692b      	ldr	r3, [r5, #16]
 8017776:	b99b      	cbnz	r3, 80177a0 <_vfiprintf_r+0x5c>
 8017778:	4629      	mov	r1, r5
 801777a:	4630      	mov	r0, r6
 801777c:	f000 f93a 	bl	80179f4 <__swsetup_r>
 8017780:	b170      	cbz	r0, 80177a0 <_vfiprintf_r+0x5c>
 8017782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017784:	07dc      	lsls	r4, r3, #31
 8017786:	d504      	bpl.n	8017792 <_vfiprintf_r+0x4e>
 8017788:	f04f 30ff 	mov.w	r0, #4294967295
 801778c:	b01d      	add	sp, #116	; 0x74
 801778e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017792:	89ab      	ldrh	r3, [r5, #12]
 8017794:	0598      	lsls	r0, r3, #22
 8017796:	d4f7      	bmi.n	8017788 <_vfiprintf_r+0x44>
 8017798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801779a:	f7fd fdfd 	bl	8015398 <__retarget_lock_release_recursive>
 801779e:	e7f3      	b.n	8017788 <_vfiprintf_r+0x44>
 80177a0:	2300      	movs	r3, #0
 80177a2:	9309      	str	r3, [sp, #36]	; 0x24
 80177a4:	2320      	movs	r3, #32
 80177a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80177aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80177ae:	2330      	movs	r3, #48	; 0x30
 80177b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017964 <_vfiprintf_r+0x220>
 80177b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80177b8:	f04f 0901 	mov.w	r9, #1
 80177bc:	4623      	mov	r3, r4
 80177be:	469a      	mov	sl, r3
 80177c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80177c4:	b10a      	cbz	r2, 80177ca <_vfiprintf_r+0x86>
 80177c6:	2a25      	cmp	r2, #37	; 0x25
 80177c8:	d1f9      	bne.n	80177be <_vfiprintf_r+0x7a>
 80177ca:	ebba 0b04 	subs.w	fp, sl, r4
 80177ce:	d00b      	beq.n	80177e8 <_vfiprintf_r+0xa4>
 80177d0:	465b      	mov	r3, fp
 80177d2:	4622      	mov	r2, r4
 80177d4:	4629      	mov	r1, r5
 80177d6:	4630      	mov	r0, r6
 80177d8:	f7ff ffa1 	bl	801771e <__sfputs_r>
 80177dc:	3001      	adds	r0, #1
 80177de:	f000 80a9 	beq.w	8017934 <_vfiprintf_r+0x1f0>
 80177e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80177e4:	445a      	add	r2, fp
 80177e6:	9209      	str	r2, [sp, #36]	; 0x24
 80177e8:	f89a 3000 	ldrb.w	r3, [sl]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	f000 80a1 	beq.w	8017934 <_vfiprintf_r+0x1f0>
 80177f2:	2300      	movs	r3, #0
 80177f4:	f04f 32ff 	mov.w	r2, #4294967295
 80177f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177fc:	f10a 0a01 	add.w	sl, sl, #1
 8017800:	9304      	str	r3, [sp, #16]
 8017802:	9307      	str	r3, [sp, #28]
 8017804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017808:	931a      	str	r3, [sp, #104]	; 0x68
 801780a:	4654      	mov	r4, sl
 801780c:	2205      	movs	r2, #5
 801780e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017812:	4854      	ldr	r0, [pc, #336]	; (8017964 <_vfiprintf_r+0x220>)
 8017814:	f7e8 fcdc 	bl	80001d0 <memchr>
 8017818:	9a04      	ldr	r2, [sp, #16]
 801781a:	b9d8      	cbnz	r0, 8017854 <_vfiprintf_r+0x110>
 801781c:	06d1      	lsls	r1, r2, #27
 801781e:	bf44      	itt	mi
 8017820:	2320      	movmi	r3, #32
 8017822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017826:	0713      	lsls	r3, r2, #28
 8017828:	bf44      	itt	mi
 801782a:	232b      	movmi	r3, #43	; 0x2b
 801782c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017830:	f89a 3000 	ldrb.w	r3, [sl]
 8017834:	2b2a      	cmp	r3, #42	; 0x2a
 8017836:	d015      	beq.n	8017864 <_vfiprintf_r+0x120>
 8017838:	9a07      	ldr	r2, [sp, #28]
 801783a:	4654      	mov	r4, sl
 801783c:	2000      	movs	r0, #0
 801783e:	f04f 0c0a 	mov.w	ip, #10
 8017842:	4621      	mov	r1, r4
 8017844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017848:	3b30      	subs	r3, #48	; 0x30
 801784a:	2b09      	cmp	r3, #9
 801784c:	d94d      	bls.n	80178ea <_vfiprintf_r+0x1a6>
 801784e:	b1b0      	cbz	r0, 801787e <_vfiprintf_r+0x13a>
 8017850:	9207      	str	r2, [sp, #28]
 8017852:	e014      	b.n	801787e <_vfiprintf_r+0x13a>
 8017854:	eba0 0308 	sub.w	r3, r0, r8
 8017858:	fa09 f303 	lsl.w	r3, r9, r3
 801785c:	4313      	orrs	r3, r2
 801785e:	9304      	str	r3, [sp, #16]
 8017860:	46a2      	mov	sl, r4
 8017862:	e7d2      	b.n	801780a <_vfiprintf_r+0xc6>
 8017864:	9b03      	ldr	r3, [sp, #12]
 8017866:	1d19      	adds	r1, r3, #4
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	9103      	str	r1, [sp, #12]
 801786c:	2b00      	cmp	r3, #0
 801786e:	bfbb      	ittet	lt
 8017870:	425b      	neglt	r3, r3
 8017872:	f042 0202 	orrlt.w	r2, r2, #2
 8017876:	9307      	strge	r3, [sp, #28]
 8017878:	9307      	strlt	r3, [sp, #28]
 801787a:	bfb8      	it	lt
 801787c:	9204      	strlt	r2, [sp, #16]
 801787e:	7823      	ldrb	r3, [r4, #0]
 8017880:	2b2e      	cmp	r3, #46	; 0x2e
 8017882:	d10c      	bne.n	801789e <_vfiprintf_r+0x15a>
 8017884:	7863      	ldrb	r3, [r4, #1]
 8017886:	2b2a      	cmp	r3, #42	; 0x2a
 8017888:	d134      	bne.n	80178f4 <_vfiprintf_r+0x1b0>
 801788a:	9b03      	ldr	r3, [sp, #12]
 801788c:	1d1a      	adds	r2, r3, #4
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	9203      	str	r2, [sp, #12]
 8017892:	2b00      	cmp	r3, #0
 8017894:	bfb8      	it	lt
 8017896:	f04f 33ff 	movlt.w	r3, #4294967295
 801789a:	3402      	adds	r4, #2
 801789c:	9305      	str	r3, [sp, #20]
 801789e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017974 <_vfiprintf_r+0x230>
 80178a2:	7821      	ldrb	r1, [r4, #0]
 80178a4:	2203      	movs	r2, #3
 80178a6:	4650      	mov	r0, sl
 80178a8:	f7e8 fc92 	bl	80001d0 <memchr>
 80178ac:	b138      	cbz	r0, 80178be <_vfiprintf_r+0x17a>
 80178ae:	9b04      	ldr	r3, [sp, #16]
 80178b0:	eba0 000a 	sub.w	r0, r0, sl
 80178b4:	2240      	movs	r2, #64	; 0x40
 80178b6:	4082      	lsls	r2, r0
 80178b8:	4313      	orrs	r3, r2
 80178ba:	3401      	adds	r4, #1
 80178bc:	9304      	str	r3, [sp, #16]
 80178be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178c2:	4829      	ldr	r0, [pc, #164]	; (8017968 <_vfiprintf_r+0x224>)
 80178c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80178c8:	2206      	movs	r2, #6
 80178ca:	f7e8 fc81 	bl	80001d0 <memchr>
 80178ce:	2800      	cmp	r0, #0
 80178d0:	d03f      	beq.n	8017952 <_vfiprintf_r+0x20e>
 80178d2:	4b26      	ldr	r3, [pc, #152]	; (801796c <_vfiprintf_r+0x228>)
 80178d4:	bb1b      	cbnz	r3, 801791e <_vfiprintf_r+0x1da>
 80178d6:	9b03      	ldr	r3, [sp, #12]
 80178d8:	3307      	adds	r3, #7
 80178da:	f023 0307 	bic.w	r3, r3, #7
 80178de:	3308      	adds	r3, #8
 80178e0:	9303      	str	r3, [sp, #12]
 80178e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178e4:	443b      	add	r3, r7
 80178e6:	9309      	str	r3, [sp, #36]	; 0x24
 80178e8:	e768      	b.n	80177bc <_vfiprintf_r+0x78>
 80178ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80178ee:	460c      	mov	r4, r1
 80178f0:	2001      	movs	r0, #1
 80178f2:	e7a6      	b.n	8017842 <_vfiprintf_r+0xfe>
 80178f4:	2300      	movs	r3, #0
 80178f6:	3401      	adds	r4, #1
 80178f8:	9305      	str	r3, [sp, #20]
 80178fa:	4619      	mov	r1, r3
 80178fc:	f04f 0c0a 	mov.w	ip, #10
 8017900:	4620      	mov	r0, r4
 8017902:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017906:	3a30      	subs	r2, #48	; 0x30
 8017908:	2a09      	cmp	r2, #9
 801790a:	d903      	bls.n	8017914 <_vfiprintf_r+0x1d0>
 801790c:	2b00      	cmp	r3, #0
 801790e:	d0c6      	beq.n	801789e <_vfiprintf_r+0x15a>
 8017910:	9105      	str	r1, [sp, #20]
 8017912:	e7c4      	b.n	801789e <_vfiprintf_r+0x15a>
 8017914:	fb0c 2101 	mla	r1, ip, r1, r2
 8017918:	4604      	mov	r4, r0
 801791a:	2301      	movs	r3, #1
 801791c:	e7f0      	b.n	8017900 <_vfiprintf_r+0x1bc>
 801791e:	ab03      	add	r3, sp, #12
 8017920:	9300      	str	r3, [sp, #0]
 8017922:	462a      	mov	r2, r5
 8017924:	4b12      	ldr	r3, [pc, #72]	; (8017970 <_vfiprintf_r+0x22c>)
 8017926:	a904      	add	r1, sp, #16
 8017928:	4630      	mov	r0, r6
 801792a:	f7fc fcf3 	bl	8014314 <_printf_float>
 801792e:	4607      	mov	r7, r0
 8017930:	1c78      	adds	r0, r7, #1
 8017932:	d1d6      	bne.n	80178e2 <_vfiprintf_r+0x19e>
 8017934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017936:	07d9      	lsls	r1, r3, #31
 8017938:	d405      	bmi.n	8017946 <_vfiprintf_r+0x202>
 801793a:	89ab      	ldrh	r3, [r5, #12]
 801793c:	059a      	lsls	r2, r3, #22
 801793e:	d402      	bmi.n	8017946 <_vfiprintf_r+0x202>
 8017940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017942:	f7fd fd29 	bl	8015398 <__retarget_lock_release_recursive>
 8017946:	89ab      	ldrh	r3, [r5, #12]
 8017948:	065b      	lsls	r3, r3, #25
 801794a:	f53f af1d 	bmi.w	8017788 <_vfiprintf_r+0x44>
 801794e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017950:	e71c      	b.n	801778c <_vfiprintf_r+0x48>
 8017952:	ab03      	add	r3, sp, #12
 8017954:	9300      	str	r3, [sp, #0]
 8017956:	462a      	mov	r2, r5
 8017958:	4b05      	ldr	r3, [pc, #20]	; (8017970 <_vfiprintf_r+0x22c>)
 801795a:	a904      	add	r1, sp, #16
 801795c:	4630      	mov	r0, r6
 801795e:	f7fc ff7d 	bl	801485c <_printf_i>
 8017962:	e7e4      	b.n	801792e <_vfiprintf_r+0x1ea>
 8017964:	0801b304 	.word	0x0801b304
 8017968:	0801b30e 	.word	0x0801b30e
 801796c:	08014315 	.word	0x08014315
 8017970:	0801771f 	.word	0x0801771f
 8017974:	0801b30a 	.word	0x0801b30a

08017978 <__swbuf_r>:
 8017978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801797a:	460e      	mov	r6, r1
 801797c:	4614      	mov	r4, r2
 801797e:	4605      	mov	r5, r0
 8017980:	b118      	cbz	r0, 801798a <__swbuf_r+0x12>
 8017982:	6a03      	ldr	r3, [r0, #32]
 8017984:	b90b      	cbnz	r3, 801798a <__swbuf_r+0x12>
 8017986:	f7fd fb27 	bl	8014fd8 <__sinit>
 801798a:	69a3      	ldr	r3, [r4, #24]
 801798c:	60a3      	str	r3, [r4, #8]
 801798e:	89a3      	ldrh	r3, [r4, #12]
 8017990:	071a      	lsls	r2, r3, #28
 8017992:	d525      	bpl.n	80179e0 <__swbuf_r+0x68>
 8017994:	6923      	ldr	r3, [r4, #16]
 8017996:	b31b      	cbz	r3, 80179e0 <__swbuf_r+0x68>
 8017998:	6823      	ldr	r3, [r4, #0]
 801799a:	6922      	ldr	r2, [r4, #16]
 801799c:	1a98      	subs	r0, r3, r2
 801799e:	6963      	ldr	r3, [r4, #20]
 80179a0:	b2f6      	uxtb	r6, r6
 80179a2:	4283      	cmp	r3, r0
 80179a4:	4637      	mov	r7, r6
 80179a6:	dc04      	bgt.n	80179b2 <__swbuf_r+0x3a>
 80179a8:	4621      	mov	r1, r4
 80179aa:	4628      	mov	r0, r5
 80179ac:	f7ff fe00 	bl	80175b0 <_fflush_r>
 80179b0:	b9e0      	cbnz	r0, 80179ec <__swbuf_r+0x74>
 80179b2:	68a3      	ldr	r3, [r4, #8]
 80179b4:	3b01      	subs	r3, #1
 80179b6:	60a3      	str	r3, [r4, #8]
 80179b8:	6823      	ldr	r3, [r4, #0]
 80179ba:	1c5a      	adds	r2, r3, #1
 80179bc:	6022      	str	r2, [r4, #0]
 80179be:	701e      	strb	r6, [r3, #0]
 80179c0:	6962      	ldr	r2, [r4, #20]
 80179c2:	1c43      	adds	r3, r0, #1
 80179c4:	429a      	cmp	r2, r3
 80179c6:	d004      	beq.n	80179d2 <__swbuf_r+0x5a>
 80179c8:	89a3      	ldrh	r3, [r4, #12]
 80179ca:	07db      	lsls	r3, r3, #31
 80179cc:	d506      	bpl.n	80179dc <__swbuf_r+0x64>
 80179ce:	2e0a      	cmp	r6, #10
 80179d0:	d104      	bne.n	80179dc <__swbuf_r+0x64>
 80179d2:	4621      	mov	r1, r4
 80179d4:	4628      	mov	r0, r5
 80179d6:	f7ff fdeb 	bl	80175b0 <_fflush_r>
 80179da:	b938      	cbnz	r0, 80179ec <__swbuf_r+0x74>
 80179dc:	4638      	mov	r0, r7
 80179de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179e0:	4621      	mov	r1, r4
 80179e2:	4628      	mov	r0, r5
 80179e4:	f000 f806 	bl	80179f4 <__swsetup_r>
 80179e8:	2800      	cmp	r0, #0
 80179ea:	d0d5      	beq.n	8017998 <__swbuf_r+0x20>
 80179ec:	f04f 37ff 	mov.w	r7, #4294967295
 80179f0:	e7f4      	b.n	80179dc <__swbuf_r+0x64>
	...

080179f4 <__swsetup_r>:
 80179f4:	b538      	push	{r3, r4, r5, lr}
 80179f6:	4b2a      	ldr	r3, [pc, #168]	; (8017aa0 <__swsetup_r+0xac>)
 80179f8:	4605      	mov	r5, r0
 80179fa:	6818      	ldr	r0, [r3, #0]
 80179fc:	460c      	mov	r4, r1
 80179fe:	b118      	cbz	r0, 8017a08 <__swsetup_r+0x14>
 8017a00:	6a03      	ldr	r3, [r0, #32]
 8017a02:	b90b      	cbnz	r3, 8017a08 <__swsetup_r+0x14>
 8017a04:	f7fd fae8 	bl	8014fd8 <__sinit>
 8017a08:	89a3      	ldrh	r3, [r4, #12]
 8017a0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a0e:	0718      	lsls	r0, r3, #28
 8017a10:	d422      	bmi.n	8017a58 <__swsetup_r+0x64>
 8017a12:	06d9      	lsls	r1, r3, #27
 8017a14:	d407      	bmi.n	8017a26 <__swsetup_r+0x32>
 8017a16:	2309      	movs	r3, #9
 8017a18:	602b      	str	r3, [r5, #0]
 8017a1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017a1e:	81a3      	strh	r3, [r4, #12]
 8017a20:	f04f 30ff 	mov.w	r0, #4294967295
 8017a24:	e034      	b.n	8017a90 <__swsetup_r+0x9c>
 8017a26:	0758      	lsls	r0, r3, #29
 8017a28:	d512      	bpl.n	8017a50 <__swsetup_r+0x5c>
 8017a2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a2c:	b141      	cbz	r1, 8017a40 <__swsetup_r+0x4c>
 8017a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a32:	4299      	cmp	r1, r3
 8017a34:	d002      	beq.n	8017a3c <__swsetup_r+0x48>
 8017a36:	4628      	mov	r0, r5
 8017a38:	f7fe fb6c 	bl	8016114 <_free_r>
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	6363      	str	r3, [r4, #52]	; 0x34
 8017a40:	89a3      	ldrh	r3, [r4, #12]
 8017a42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017a46:	81a3      	strh	r3, [r4, #12]
 8017a48:	2300      	movs	r3, #0
 8017a4a:	6063      	str	r3, [r4, #4]
 8017a4c:	6923      	ldr	r3, [r4, #16]
 8017a4e:	6023      	str	r3, [r4, #0]
 8017a50:	89a3      	ldrh	r3, [r4, #12]
 8017a52:	f043 0308 	orr.w	r3, r3, #8
 8017a56:	81a3      	strh	r3, [r4, #12]
 8017a58:	6923      	ldr	r3, [r4, #16]
 8017a5a:	b94b      	cbnz	r3, 8017a70 <__swsetup_r+0x7c>
 8017a5c:	89a3      	ldrh	r3, [r4, #12]
 8017a5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a66:	d003      	beq.n	8017a70 <__swsetup_r+0x7c>
 8017a68:	4621      	mov	r1, r4
 8017a6a:	4628      	mov	r0, r5
 8017a6c:	f000 f88c 	bl	8017b88 <__smakebuf_r>
 8017a70:	89a0      	ldrh	r0, [r4, #12]
 8017a72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a76:	f010 0301 	ands.w	r3, r0, #1
 8017a7a:	d00a      	beq.n	8017a92 <__swsetup_r+0x9e>
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	60a3      	str	r3, [r4, #8]
 8017a80:	6963      	ldr	r3, [r4, #20]
 8017a82:	425b      	negs	r3, r3
 8017a84:	61a3      	str	r3, [r4, #24]
 8017a86:	6923      	ldr	r3, [r4, #16]
 8017a88:	b943      	cbnz	r3, 8017a9c <__swsetup_r+0xa8>
 8017a8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017a8e:	d1c4      	bne.n	8017a1a <__swsetup_r+0x26>
 8017a90:	bd38      	pop	{r3, r4, r5, pc}
 8017a92:	0781      	lsls	r1, r0, #30
 8017a94:	bf58      	it	pl
 8017a96:	6963      	ldrpl	r3, [r4, #20]
 8017a98:	60a3      	str	r3, [r4, #8]
 8017a9a:	e7f4      	b.n	8017a86 <__swsetup_r+0x92>
 8017a9c:	2000      	movs	r0, #0
 8017a9e:	e7f7      	b.n	8017a90 <__swsetup_r+0x9c>
 8017aa0:	200002f0 	.word	0x200002f0

08017aa4 <_raise_r>:
 8017aa4:	291f      	cmp	r1, #31
 8017aa6:	b538      	push	{r3, r4, r5, lr}
 8017aa8:	4604      	mov	r4, r0
 8017aaa:	460d      	mov	r5, r1
 8017aac:	d904      	bls.n	8017ab8 <_raise_r+0x14>
 8017aae:	2316      	movs	r3, #22
 8017ab0:	6003      	str	r3, [r0, #0]
 8017ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ab6:	bd38      	pop	{r3, r4, r5, pc}
 8017ab8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017aba:	b112      	cbz	r2, 8017ac2 <_raise_r+0x1e>
 8017abc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017ac0:	b94b      	cbnz	r3, 8017ad6 <_raise_r+0x32>
 8017ac2:	4620      	mov	r0, r4
 8017ac4:	f000 f830 	bl	8017b28 <_getpid_r>
 8017ac8:	462a      	mov	r2, r5
 8017aca:	4601      	mov	r1, r0
 8017acc:	4620      	mov	r0, r4
 8017ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ad2:	f000 b817 	b.w	8017b04 <_kill_r>
 8017ad6:	2b01      	cmp	r3, #1
 8017ad8:	d00a      	beq.n	8017af0 <_raise_r+0x4c>
 8017ada:	1c59      	adds	r1, r3, #1
 8017adc:	d103      	bne.n	8017ae6 <_raise_r+0x42>
 8017ade:	2316      	movs	r3, #22
 8017ae0:	6003      	str	r3, [r0, #0]
 8017ae2:	2001      	movs	r0, #1
 8017ae4:	e7e7      	b.n	8017ab6 <_raise_r+0x12>
 8017ae6:	2400      	movs	r4, #0
 8017ae8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017aec:	4628      	mov	r0, r5
 8017aee:	4798      	blx	r3
 8017af0:	2000      	movs	r0, #0
 8017af2:	e7e0      	b.n	8017ab6 <_raise_r+0x12>

08017af4 <raise>:
 8017af4:	4b02      	ldr	r3, [pc, #8]	; (8017b00 <raise+0xc>)
 8017af6:	4601      	mov	r1, r0
 8017af8:	6818      	ldr	r0, [r3, #0]
 8017afa:	f7ff bfd3 	b.w	8017aa4 <_raise_r>
 8017afe:	bf00      	nop
 8017b00:	200002f0 	.word	0x200002f0

08017b04 <_kill_r>:
 8017b04:	b538      	push	{r3, r4, r5, lr}
 8017b06:	4d07      	ldr	r5, [pc, #28]	; (8017b24 <_kill_r+0x20>)
 8017b08:	2300      	movs	r3, #0
 8017b0a:	4604      	mov	r4, r0
 8017b0c:	4608      	mov	r0, r1
 8017b0e:	4611      	mov	r1, r2
 8017b10:	602b      	str	r3, [r5, #0]
 8017b12:	f7ed f969 	bl	8004de8 <_kill>
 8017b16:	1c43      	adds	r3, r0, #1
 8017b18:	d102      	bne.n	8017b20 <_kill_r+0x1c>
 8017b1a:	682b      	ldr	r3, [r5, #0]
 8017b1c:	b103      	cbz	r3, 8017b20 <_kill_r+0x1c>
 8017b1e:	6023      	str	r3, [r4, #0]
 8017b20:	bd38      	pop	{r3, r4, r5, pc}
 8017b22:	bf00      	nop
 8017b24:	200023ac 	.word	0x200023ac

08017b28 <_getpid_r>:
 8017b28:	f7ed b956 	b.w	8004dd8 <_getpid>

08017b2c <_malloc_usable_size_r>:
 8017b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b30:	1f18      	subs	r0, r3, #4
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	bfbc      	itt	lt
 8017b36:	580b      	ldrlt	r3, [r1, r0]
 8017b38:	18c0      	addlt	r0, r0, r3
 8017b3a:	4770      	bx	lr

08017b3c <__swhatbuf_r>:
 8017b3c:	b570      	push	{r4, r5, r6, lr}
 8017b3e:	460c      	mov	r4, r1
 8017b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b44:	2900      	cmp	r1, #0
 8017b46:	b096      	sub	sp, #88	; 0x58
 8017b48:	4615      	mov	r5, r2
 8017b4a:	461e      	mov	r6, r3
 8017b4c:	da0d      	bge.n	8017b6a <__swhatbuf_r+0x2e>
 8017b4e:	89a3      	ldrh	r3, [r4, #12]
 8017b50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017b54:	f04f 0100 	mov.w	r1, #0
 8017b58:	bf0c      	ite	eq
 8017b5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017b5e:	2340      	movne	r3, #64	; 0x40
 8017b60:	2000      	movs	r0, #0
 8017b62:	6031      	str	r1, [r6, #0]
 8017b64:	602b      	str	r3, [r5, #0]
 8017b66:	b016      	add	sp, #88	; 0x58
 8017b68:	bd70      	pop	{r4, r5, r6, pc}
 8017b6a:	466a      	mov	r2, sp
 8017b6c:	f000 f848 	bl	8017c00 <_fstat_r>
 8017b70:	2800      	cmp	r0, #0
 8017b72:	dbec      	blt.n	8017b4e <__swhatbuf_r+0x12>
 8017b74:	9901      	ldr	r1, [sp, #4]
 8017b76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017b7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017b7e:	4259      	negs	r1, r3
 8017b80:	4159      	adcs	r1, r3
 8017b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017b86:	e7eb      	b.n	8017b60 <__swhatbuf_r+0x24>

08017b88 <__smakebuf_r>:
 8017b88:	898b      	ldrh	r3, [r1, #12]
 8017b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017b8c:	079d      	lsls	r5, r3, #30
 8017b8e:	4606      	mov	r6, r0
 8017b90:	460c      	mov	r4, r1
 8017b92:	d507      	bpl.n	8017ba4 <__smakebuf_r+0x1c>
 8017b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017b98:	6023      	str	r3, [r4, #0]
 8017b9a:	6123      	str	r3, [r4, #16]
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	6163      	str	r3, [r4, #20]
 8017ba0:	b002      	add	sp, #8
 8017ba2:	bd70      	pop	{r4, r5, r6, pc}
 8017ba4:	ab01      	add	r3, sp, #4
 8017ba6:	466a      	mov	r2, sp
 8017ba8:	f7ff ffc8 	bl	8017b3c <__swhatbuf_r>
 8017bac:	9900      	ldr	r1, [sp, #0]
 8017bae:	4605      	mov	r5, r0
 8017bb0:	4630      	mov	r0, r6
 8017bb2:	f7fb fb7b 	bl	80132ac <_malloc_r>
 8017bb6:	b948      	cbnz	r0, 8017bcc <__smakebuf_r+0x44>
 8017bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017bbc:	059a      	lsls	r2, r3, #22
 8017bbe:	d4ef      	bmi.n	8017ba0 <__smakebuf_r+0x18>
 8017bc0:	f023 0303 	bic.w	r3, r3, #3
 8017bc4:	f043 0302 	orr.w	r3, r3, #2
 8017bc8:	81a3      	strh	r3, [r4, #12]
 8017bca:	e7e3      	b.n	8017b94 <__smakebuf_r+0xc>
 8017bcc:	89a3      	ldrh	r3, [r4, #12]
 8017bce:	6020      	str	r0, [r4, #0]
 8017bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bd4:	81a3      	strh	r3, [r4, #12]
 8017bd6:	9b00      	ldr	r3, [sp, #0]
 8017bd8:	6163      	str	r3, [r4, #20]
 8017bda:	9b01      	ldr	r3, [sp, #4]
 8017bdc:	6120      	str	r0, [r4, #16]
 8017bde:	b15b      	cbz	r3, 8017bf8 <__smakebuf_r+0x70>
 8017be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017be4:	4630      	mov	r0, r6
 8017be6:	f000 f81d 	bl	8017c24 <_isatty_r>
 8017bea:	b128      	cbz	r0, 8017bf8 <__smakebuf_r+0x70>
 8017bec:	89a3      	ldrh	r3, [r4, #12]
 8017bee:	f023 0303 	bic.w	r3, r3, #3
 8017bf2:	f043 0301 	orr.w	r3, r3, #1
 8017bf6:	81a3      	strh	r3, [r4, #12]
 8017bf8:	89a3      	ldrh	r3, [r4, #12]
 8017bfa:	431d      	orrs	r5, r3
 8017bfc:	81a5      	strh	r5, [r4, #12]
 8017bfe:	e7cf      	b.n	8017ba0 <__smakebuf_r+0x18>

08017c00 <_fstat_r>:
 8017c00:	b538      	push	{r3, r4, r5, lr}
 8017c02:	4d07      	ldr	r5, [pc, #28]	; (8017c20 <_fstat_r+0x20>)
 8017c04:	2300      	movs	r3, #0
 8017c06:	4604      	mov	r4, r0
 8017c08:	4608      	mov	r0, r1
 8017c0a:	4611      	mov	r1, r2
 8017c0c:	602b      	str	r3, [r5, #0]
 8017c0e:	f7ed f94a 	bl	8004ea6 <_fstat>
 8017c12:	1c43      	adds	r3, r0, #1
 8017c14:	d102      	bne.n	8017c1c <_fstat_r+0x1c>
 8017c16:	682b      	ldr	r3, [r5, #0]
 8017c18:	b103      	cbz	r3, 8017c1c <_fstat_r+0x1c>
 8017c1a:	6023      	str	r3, [r4, #0]
 8017c1c:	bd38      	pop	{r3, r4, r5, pc}
 8017c1e:	bf00      	nop
 8017c20:	200023ac 	.word	0x200023ac

08017c24 <_isatty_r>:
 8017c24:	b538      	push	{r3, r4, r5, lr}
 8017c26:	4d06      	ldr	r5, [pc, #24]	; (8017c40 <_isatty_r+0x1c>)
 8017c28:	2300      	movs	r3, #0
 8017c2a:	4604      	mov	r4, r0
 8017c2c:	4608      	mov	r0, r1
 8017c2e:	602b      	str	r3, [r5, #0]
 8017c30:	f7ed f949 	bl	8004ec6 <_isatty>
 8017c34:	1c43      	adds	r3, r0, #1
 8017c36:	d102      	bne.n	8017c3e <_isatty_r+0x1a>
 8017c38:	682b      	ldr	r3, [r5, #0]
 8017c3a:	b103      	cbz	r3, 8017c3e <_isatty_r+0x1a>
 8017c3c:	6023      	str	r3, [r4, #0]
 8017c3e:	bd38      	pop	{r3, r4, r5, pc}
 8017c40:	200023ac 	.word	0x200023ac
 8017c44:	00000000 	.word	0x00000000

08017c48 <cos>:
 8017c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017c4a:	ec53 2b10 	vmov	r2, r3, d0
 8017c4e:	4826      	ldr	r0, [pc, #152]	; (8017ce8 <cos+0xa0>)
 8017c50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017c54:	4281      	cmp	r1, r0
 8017c56:	dc06      	bgt.n	8017c66 <cos+0x1e>
 8017c58:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8017ce0 <cos+0x98>
 8017c5c:	b005      	add	sp, #20
 8017c5e:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c62:	f000 b961 	b.w	8017f28 <__kernel_cos>
 8017c66:	4821      	ldr	r0, [pc, #132]	; (8017cec <cos+0xa4>)
 8017c68:	4281      	cmp	r1, r0
 8017c6a:	dd09      	ble.n	8017c80 <cos+0x38>
 8017c6c:	ee10 0a10 	vmov	r0, s0
 8017c70:	4619      	mov	r1, r3
 8017c72:	f7e8 fb09 	bl	8000288 <__aeabi_dsub>
 8017c76:	ec41 0b10 	vmov	d0, r0, r1
 8017c7a:	b005      	add	sp, #20
 8017c7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c80:	4668      	mov	r0, sp
 8017c82:	f000 fad9 	bl	8018238 <__ieee754_rem_pio2>
 8017c86:	f000 0003 	and.w	r0, r0, #3
 8017c8a:	2801      	cmp	r0, #1
 8017c8c:	d00b      	beq.n	8017ca6 <cos+0x5e>
 8017c8e:	2802      	cmp	r0, #2
 8017c90:	d016      	beq.n	8017cc0 <cos+0x78>
 8017c92:	b9e0      	cbnz	r0, 8017cce <cos+0x86>
 8017c94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017c98:	ed9d 0b00 	vldr	d0, [sp]
 8017c9c:	f000 f944 	bl	8017f28 <__kernel_cos>
 8017ca0:	ec51 0b10 	vmov	r0, r1, d0
 8017ca4:	e7e7      	b.n	8017c76 <cos+0x2e>
 8017ca6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017caa:	ed9d 0b00 	vldr	d0, [sp]
 8017cae:	f000 fa03 	bl	80180b8 <__kernel_sin>
 8017cb2:	ec53 2b10 	vmov	r2, r3, d0
 8017cb6:	ee10 0a10 	vmov	r0, s0
 8017cba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017cbe:	e7da      	b.n	8017c76 <cos+0x2e>
 8017cc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017cc4:	ed9d 0b00 	vldr	d0, [sp]
 8017cc8:	f000 f92e 	bl	8017f28 <__kernel_cos>
 8017ccc:	e7f1      	b.n	8017cb2 <cos+0x6a>
 8017cce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017cd2:	ed9d 0b00 	vldr	d0, [sp]
 8017cd6:	2001      	movs	r0, #1
 8017cd8:	f000 f9ee 	bl	80180b8 <__kernel_sin>
 8017cdc:	e7e0      	b.n	8017ca0 <cos+0x58>
 8017cde:	bf00      	nop
	...
 8017ce8:	3fe921fb 	.word	0x3fe921fb
 8017cec:	7fefffff 	.word	0x7fefffff

08017cf0 <sin>:
 8017cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017cf2:	ec53 2b10 	vmov	r2, r3, d0
 8017cf6:	4828      	ldr	r0, [pc, #160]	; (8017d98 <sin+0xa8>)
 8017cf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017cfc:	4281      	cmp	r1, r0
 8017cfe:	dc07      	bgt.n	8017d10 <sin+0x20>
 8017d00:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8017d90 <sin+0xa0>
 8017d04:	2000      	movs	r0, #0
 8017d06:	b005      	add	sp, #20
 8017d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d0c:	f000 b9d4 	b.w	80180b8 <__kernel_sin>
 8017d10:	4822      	ldr	r0, [pc, #136]	; (8017d9c <sin+0xac>)
 8017d12:	4281      	cmp	r1, r0
 8017d14:	dd09      	ble.n	8017d2a <sin+0x3a>
 8017d16:	ee10 0a10 	vmov	r0, s0
 8017d1a:	4619      	mov	r1, r3
 8017d1c:	f7e8 fab4 	bl	8000288 <__aeabi_dsub>
 8017d20:	ec41 0b10 	vmov	d0, r0, r1
 8017d24:	b005      	add	sp, #20
 8017d26:	f85d fb04 	ldr.w	pc, [sp], #4
 8017d2a:	4668      	mov	r0, sp
 8017d2c:	f000 fa84 	bl	8018238 <__ieee754_rem_pio2>
 8017d30:	f000 0003 	and.w	r0, r0, #3
 8017d34:	2801      	cmp	r0, #1
 8017d36:	d00c      	beq.n	8017d52 <sin+0x62>
 8017d38:	2802      	cmp	r0, #2
 8017d3a:	d011      	beq.n	8017d60 <sin+0x70>
 8017d3c:	b9f0      	cbnz	r0, 8017d7c <sin+0x8c>
 8017d3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017d42:	ed9d 0b00 	vldr	d0, [sp]
 8017d46:	2001      	movs	r0, #1
 8017d48:	f000 f9b6 	bl	80180b8 <__kernel_sin>
 8017d4c:	ec51 0b10 	vmov	r0, r1, d0
 8017d50:	e7e6      	b.n	8017d20 <sin+0x30>
 8017d52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017d56:	ed9d 0b00 	vldr	d0, [sp]
 8017d5a:	f000 f8e5 	bl	8017f28 <__kernel_cos>
 8017d5e:	e7f5      	b.n	8017d4c <sin+0x5c>
 8017d60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017d64:	ed9d 0b00 	vldr	d0, [sp]
 8017d68:	2001      	movs	r0, #1
 8017d6a:	f000 f9a5 	bl	80180b8 <__kernel_sin>
 8017d6e:	ec53 2b10 	vmov	r2, r3, d0
 8017d72:	ee10 0a10 	vmov	r0, s0
 8017d76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017d7a:	e7d1      	b.n	8017d20 <sin+0x30>
 8017d7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017d80:	ed9d 0b00 	vldr	d0, [sp]
 8017d84:	f000 f8d0 	bl	8017f28 <__kernel_cos>
 8017d88:	e7f1      	b.n	8017d6e <sin+0x7e>
 8017d8a:	bf00      	nop
 8017d8c:	f3af 8000 	nop.w
	...
 8017d98:	3fe921fb 	.word	0x3fe921fb
 8017d9c:	7fefffff 	.word	0x7fefffff

08017da0 <expf>:
 8017da0:	b508      	push	{r3, lr}
 8017da2:	ed2d 8b02 	vpush	{d8}
 8017da6:	eef0 8a40 	vmov.f32	s17, s0
 8017daa:	f000 fc55 	bl	8018658 <__ieee754_expf>
 8017dae:	eeb0 8a40 	vmov.f32	s16, s0
 8017db2:	eeb0 0a68 	vmov.f32	s0, s17
 8017db6:	f000 f829 	bl	8017e0c <finitef>
 8017dba:	b160      	cbz	r0, 8017dd6 <expf+0x36>
 8017dbc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8017dfc <expf+0x5c>
 8017dc0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dc8:	dd0a      	ble.n	8017de0 <expf+0x40>
 8017dca:	f7fd fab9 	bl	8015340 <__errno>
 8017dce:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8017e00 <expf+0x60>
 8017dd2:	2322      	movs	r3, #34	; 0x22
 8017dd4:	6003      	str	r3, [r0, #0]
 8017dd6:	eeb0 0a48 	vmov.f32	s0, s16
 8017dda:	ecbd 8b02 	vpop	{d8}
 8017dde:	bd08      	pop	{r3, pc}
 8017de0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8017e04 <expf+0x64>
 8017de4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dec:	d5f3      	bpl.n	8017dd6 <expf+0x36>
 8017dee:	f7fd faa7 	bl	8015340 <__errno>
 8017df2:	2322      	movs	r3, #34	; 0x22
 8017df4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8017e08 <expf+0x68>
 8017df8:	6003      	str	r3, [r0, #0]
 8017dfa:	e7ec      	b.n	8017dd6 <expf+0x36>
 8017dfc:	42b17217 	.word	0x42b17217
 8017e00:	7f800000 	.word	0x7f800000
 8017e04:	c2cff1b5 	.word	0xc2cff1b5
 8017e08:	00000000 	.word	0x00000000

08017e0c <finitef>:
 8017e0c:	b082      	sub	sp, #8
 8017e0e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017e12:	9801      	ldr	r0, [sp, #4]
 8017e14:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017e18:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8017e1c:	bfac      	ite	ge
 8017e1e:	2000      	movge	r0, #0
 8017e20:	2001      	movlt	r0, #1
 8017e22:	b002      	add	sp, #8
 8017e24:	4770      	bx	lr
	...

08017e28 <floor>:
 8017e28:	ec51 0b10 	vmov	r0, r1, d0
 8017e2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e34:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8017e38:	2e13      	cmp	r6, #19
 8017e3a:	ee10 5a10 	vmov	r5, s0
 8017e3e:	ee10 8a10 	vmov	r8, s0
 8017e42:	460c      	mov	r4, r1
 8017e44:	dc31      	bgt.n	8017eaa <floor+0x82>
 8017e46:	2e00      	cmp	r6, #0
 8017e48:	da14      	bge.n	8017e74 <floor+0x4c>
 8017e4a:	a333      	add	r3, pc, #204	; (adr r3, 8017f18 <floor+0xf0>)
 8017e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e50:	f7e8 fa1c 	bl	800028c <__adddf3>
 8017e54:	2200      	movs	r2, #0
 8017e56:	2300      	movs	r3, #0
 8017e58:	f7e8 fe5e 	bl	8000b18 <__aeabi_dcmpgt>
 8017e5c:	b138      	cbz	r0, 8017e6e <floor+0x46>
 8017e5e:	2c00      	cmp	r4, #0
 8017e60:	da53      	bge.n	8017f0a <floor+0xe2>
 8017e62:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8017e66:	4325      	orrs	r5, r4
 8017e68:	d052      	beq.n	8017f10 <floor+0xe8>
 8017e6a:	4c2d      	ldr	r4, [pc, #180]	; (8017f20 <floor+0xf8>)
 8017e6c:	2500      	movs	r5, #0
 8017e6e:	4621      	mov	r1, r4
 8017e70:	4628      	mov	r0, r5
 8017e72:	e024      	b.n	8017ebe <floor+0x96>
 8017e74:	4f2b      	ldr	r7, [pc, #172]	; (8017f24 <floor+0xfc>)
 8017e76:	4137      	asrs	r7, r6
 8017e78:	ea01 0307 	and.w	r3, r1, r7
 8017e7c:	4303      	orrs	r3, r0
 8017e7e:	d01e      	beq.n	8017ebe <floor+0x96>
 8017e80:	a325      	add	r3, pc, #148	; (adr r3, 8017f18 <floor+0xf0>)
 8017e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e86:	f7e8 fa01 	bl	800028c <__adddf3>
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	f7e8 fe43 	bl	8000b18 <__aeabi_dcmpgt>
 8017e92:	2800      	cmp	r0, #0
 8017e94:	d0eb      	beq.n	8017e6e <floor+0x46>
 8017e96:	2c00      	cmp	r4, #0
 8017e98:	bfbe      	ittt	lt
 8017e9a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8017e9e:	4133      	asrlt	r3, r6
 8017ea0:	18e4      	addlt	r4, r4, r3
 8017ea2:	ea24 0407 	bic.w	r4, r4, r7
 8017ea6:	2500      	movs	r5, #0
 8017ea8:	e7e1      	b.n	8017e6e <floor+0x46>
 8017eaa:	2e33      	cmp	r6, #51	; 0x33
 8017eac:	dd0b      	ble.n	8017ec6 <floor+0x9e>
 8017eae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017eb2:	d104      	bne.n	8017ebe <floor+0x96>
 8017eb4:	ee10 2a10 	vmov	r2, s0
 8017eb8:	460b      	mov	r3, r1
 8017eba:	f7e8 f9e7 	bl	800028c <__adddf3>
 8017ebe:	ec41 0b10 	vmov	d0, r0, r1
 8017ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ec6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8017eca:	f04f 37ff 	mov.w	r7, #4294967295
 8017ece:	40df      	lsrs	r7, r3
 8017ed0:	4238      	tst	r0, r7
 8017ed2:	d0f4      	beq.n	8017ebe <floor+0x96>
 8017ed4:	a310      	add	r3, pc, #64	; (adr r3, 8017f18 <floor+0xf0>)
 8017ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017eda:	f7e8 f9d7 	bl	800028c <__adddf3>
 8017ede:	2200      	movs	r2, #0
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	f7e8 fe19 	bl	8000b18 <__aeabi_dcmpgt>
 8017ee6:	2800      	cmp	r0, #0
 8017ee8:	d0c1      	beq.n	8017e6e <floor+0x46>
 8017eea:	2c00      	cmp	r4, #0
 8017eec:	da0a      	bge.n	8017f04 <floor+0xdc>
 8017eee:	2e14      	cmp	r6, #20
 8017ef0:	d101      	bne.n	8017ef6 <floor+0xce>
 8017ef2:	3401      	adds	r4, #1
 8017ef4:	e006      	b.n	8017f04 <floor+0xdc>
 8017ef6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017efa:	2301      	movs	r3, #1
 8017efc:	40b3      	lsls	r3, r6
 8017efe:	441d      	add	r5, r3
 8017f00:	45a8      	cmp	r8, r5
 8017f02:	d8f6      	bhi.n	8017ef2 <floor+0xca>
 8017f04:	ea25 0507 	bic.w	r5, r5, r7
 8017f08:	e7b1      	b.n	8017e6e <floor+0x46>
 8017f0a:	2500      	movs	r5, #0
 8017f0c:	462c      	mov	r4, r5
 8017f0e:	e7ae      	b.n	8017e6e <floor+0x46>
 8017f10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8017f14:	e7ab      	b.n	8017e6e <floor+0x46>
 8017f16:	bf00      	nop
 8017f18:	8800759c 	.word	0x8800759c
 8017f1c:	7e37e43c 	.word	0x7e37e43c
 8017f20:	bff00000 	.word	0xbff00000
 8017f24:	000fffff 	.word	0x000fffff

08017f28 <__kernel_cos>:
 8017f28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f2c:	ec57 6b10 	vmov	r6, r7, d0
 8017f30:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8017f34:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8017f38:	ed8d 1b00 	vstr	d1, [sp]
 8017f3c:	da07      	bge.n	8017f4e <__kernel_cos+0x26>
 8017f3e:	ee10 0a10 	vmov	r0, s0
 8017f42:	4639      	mov	r1, r7
 8017f44:	f7e8 fe08 	bl	8000b58 <__aeabi_d2iz>
 8017f48:	2800      	cmp	r0, #0
 8017f4a:	f000 8088 	beq.w	801805e <__kernel_cos+0x136>
 8017f4e:	4632      	mov	r2, r6
 8017f50:	463b      	mov	r3, r7
 8017f52:	4630      	mov	r0, r6
 8017f54:	4639      	mov	r1, r7
 8017f56:	f7e8 fb4f 	bl	80005f8 <__aeabi_dmul>
 8017f5a:	4b51      	ldr	r3, [pc, #324]	; (80180a0 <__kernel_cos+0x178>)
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	4604      	mov	r4, r0
 8017f60:	460d      	mov	r5, r1
 8017f62:	f7e8 fb49 	bl	80005f8 <__aeabi_dmul>
 8017f66:	a340      	add	r3, pc, #256	; (adr r3, 8018068 <__kernel_cos+0x140>)
 8017f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f6c:	4682      	mov	sl, r0
 8017f6e:	468b      	mov	fp, r1
 8017f70:	4620      	mov	r0, r4
 8017f72:	4629      	mov	r1, r5
 8017f74:	f7e8 fb40 	bl	80005f8 <__aeabi_dmul>
 8017f78:	a33d      	add	r3, pc, #244	; (adr r3, 8018070 <__kernel_cos+0x148>)
 8017f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f7e:	f7e8 f985 	bl	800028c <__adddf3>
 8017f82:	4622      	mov	r2, r4
 8017f84:	462b      	mov	r3, r5
 8017f86:	f7e8 fb37 	bl	80005f8 <__aeabi_dmul>
 8017f8a:	a33b      	add	r3, pc, #236	; (adr r3, 8018078 <__kernel_cos+0x150>)
 8017f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f90:	f7e8 f97a 	bl	8000288 <__aeabi_dsub>
 8017f94:	4622      	mov	r2, r4
 8017f96:	462b      	mov	r3, r5
 8017f98:	f7e8 fb2e 	bl	80005f8 <__aeabi_dmul>
 8017f9c:	a338      	add	r3, pc, #224	; (adr r3, 8018080 <__kernel_cos+0x158>)
 8017f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fa2:	f7e8 f973 	bl	800028c <__adddf3>
 8017fa6:	4622      	mov	r2, r4
 8017fa8:	462b      	mov	r3, r5
 8017faa:	f7e8 fb25 	bl	80005f8 <__aeabi_dmul>
 8017fae:	a336      	add	r3, pc, #216	; (adr r3, 8018088 <__kernel_cos+0x160>)
 8017fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fb4:	f7e8 f968 	bl	8000288 <__aeabi_dsub>
 8017fb8:	4622      	mov	r2, r4
 8017fba:	462b      	mov	r3, r5
 8017fbc:	f7e8 fb1c 	bl	80005f8 <__aeabi_dmul>
 8017fc0:	a333      	add	r3, pc, #204	; (adr r3, 8018090 <__kernel_cos+0x168>)
 8017fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fc6:	f7e8 f961 	bl	800028c <__adddf3>
 8017fca:	4622      	mov	r2, r4
 8017fcc:	462b      	mov	r3, r5
 8017fce:	f7e8 fb13 	bl	80005f8 <__aeabi_dmul>
 8017fd2:	4622      	mov	r2, r4
 8017fd4:	462b      	mov	r3, r5
 8017fd6:	f7e8 fb0f 	bl	80005f8 <__aeabi_dmul>
 8017fda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017fde:	4604      	mov	r4, r0
 8017fe0:	460d      	mov	r5, r1
 8017fe2:	4630      	mov	r0, r6
 8017fe4:	4639      	mov	r1, r7
 8017fe6:	f7e8 fb07 	bl	80005f8 <__aeabi_dmul>
 8017fea:	460b      	mov	r3, r1
 8017fec:	4602      	mov	r2, r0
 8017fee:	4629      	mov	r1, r5
 8017ff0:	4620      	mov	r0, r4
 8017ff2:	f7e8 f949 	bl	8000288 <__aeabi_dsub>
 8017ff6:	4b2b      	ldr	r3, [pc, #172]	; (80180a4 <__kernel_cos+0x17c>)
 8017ff8:	4598      	cmp	r8, r3
 8017ffa:	4606      	mov	r6, r0
 8017ffc:	460f      	mov	r7, r1
 8017ffe:	dc10      	bgt.n	8018022 <__kernel_cos+0xfa>
 8018000:	4602      	mov	r2, r0
 8018002:	460b      	mov	r3, r1
 8018004:	4650      	mov	r0, sl
 8018006:	4659      	mov	r1, fp
 8018008:	f7e8 f93e 	bl	8000288 <__aeabi_dsub>
 801800c:	460b      	mov	r3, r1
 801800e:	4926      	ldr	r1, [pc, #152]	; (80180a8 <__kernel_cos+0x180>)
 8018010:	4602      	mov	r2, r0
 8018012:	2000      	movs	r0, #0
 8018014:	f7e8 f938 	bl	8000288 <__aeabi_dsub>
 8018018:	ec41 0b10 	vmov	d0, r0, r1
 801801c:	b003      	add	sp, #12
 801801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018022:	4b22      	ldr	r3, [pc, #136]	; (80180ac <__kernel_cos+0x184>)
 8018024:	4920      	ldr	r1, [pc, #128]	; (80180a8 <__kernel_cos+0x180>)
 8018026:	4598      	cmp	r8, r3
 8018028:	bfcc      	ite	gt
 801802a:	4d21      	ldrgt	r5, [pc, #132]	; (80180b0 <__kernel_cos+0x188>)
 801802c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8018030:	2400      	movs	r4, #0
 8018032:	4622      	mov	r2, r4
 8018034:	462b      	mov	r3, r5
 8018036:	2000      	movs	r0, #0
 8018038:	f7e8 f926 	bl	8000288 <__aeabi_dsub>
 801803c:	4622      	mov	r2, r4
 801803e:	4680      	mov	r8, r0
 8018040:	4689      	mov	r9, r1
 8018042:	462b      	mov	r3, r5
 8018044:	4650      	mov	r0, sl
 8018046:	4659      	mov	r1, fp
 8018048:	f7e8 f91e 	bl	8000288 <__aeabi_dsub>
 801804c:	4632      	mov	r2, r6
 801804e:	463b      	mov	r3, r7
 8018050:	f7e8 f91a 	bl	8000288 <__aeabi_dsub>
 8018054:	4602      	mov	r2, r0
 8018056:	460b      	mov	r3, r1
 8018058:	4640      	mov	r0, r8
 801805a:	4649      	mov	r1, r9
 801805c:	e7da      	b.n	8018014 <__kernel_cos+0xec>
 801805e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8018098 <__kernel_cos+0x170>
 8018062:	e7db      	b.n	801801c <__kernel_cos+0xf4>
 8018064:	f3af 8000 	nop.w
 8018068:	be8838d4 	.word	0xbe8838d4
 801806c:	bda8fae9 	.word	0xbda8fae9
 8018070:	bdb4b1c4 	.word	0xbdb4b1c4
 8018074:	3e21ee9e 	.word	0x3e21ee9e
 8018078:	809c52ad 	.word	0x809c52ad
 801807c:	3e927e4f 	.word	0x3e927e4f
 8018080:	19cb1590 	.word	0x19cb1590
 8018084:	3efa01a0 	.word	0x3efa01a0
 8018088:	16c15177 	.word	0x16c15177
 801808c:	3f56c16c 	.word	0x3f56c16c
 8018090:	5555554c 	.word	0x5555554c
 8018094:	3fa55555 	.word	0x3fa55555
 8018098:	00000000 	.word	0x00000000
 801809c:	3ff00000 	.word	0x3ff00000
 80180a0:	3fe00000 	.word	0x3fe00000
 80180a4:	3fd33332 	.word	0x3fd33332
 80180a8:	3ff00000 	.word	0x3ff00000
 80180ac:	3fe90000 	.word	0x3fe90000
 80180b0:	3fd20000 	.word	0x3fd20000
 80180b4:	00000000 	.word	0x00000000

080180b8 <__kernel_sin>:
 80180b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180bc:	ed2d 8b04 	vpush	{d8-d9}
 80180c0:	eeb0 8a41 	vmov.f32	s16, s2
 80180c4:	eef0 8a61 	vmov.f32	s17, s3
 80180c8:	ec55 4b10 	vmov	r4, r5, d0
 80180cc:	b083      	sub	sp, #12
 80180ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80180d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80180d6:	9001      	str	r0, [sp, #4]
 80180d8:	da06      	bge.n	80180e8 <__kernel_sin+0x30>
 80180da:	ee10 0a10 	vmov	r0, s0
 80180de:	4629      	mov	r1, r5
 80180e0:	f7e8 fd3a 	bl	8000b58 <__aeabi_d2iz>
 80180e4:	2800      	cmp	r0, #0
 80180e6:	d051      	beq.n	801818c <__kernel_sin+0xd4>
 80180e8:	4622      	mov	r2, r4
 80180ea:	462b      	mov	r3, r5
 80180ec:	4620      	mov	r0, r4
 80180ee:	4629      	mov	r1, r5
 80180f0:	f7e8 fa82 	bl	80005f8 <__aeabi_dmul>
 80180f4:	4682      	mov	sl, r0
 80180f6:	468b      	mov	fp, r1
 80180f8:	4602      	mov	r2, r0
 80180fa:	460b      	mov	r3, r1
 80180fc:	4620      	mov	r0, r4
 80180fe:	4629      	mov	r1, r5
 8018100:	f7e8 fa7a 	bl	80005f8 <__aeabi_dmul>
 8018104:	a341      	add	r3, pc, #260	; (adr r3, 801820c <__kernel_sin+0x154>)
 8018106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801810a:	4680      	mov	r8, r0
 801810c:	4689      	mov	r9, r1
 801810e:	4650      	mov	r0, sl
 8018110:	4659      	mov	r1, fp
 8018112:	f7e8 fa71 	bl	80005f8 <__aeabi_dmul>
 8018116:	a33f      	add	r3, pc, #252	; (adr r3, 8018214 <__kernel_sin+0x15c>)
 8018118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801811c:	f7e8 f8b4 	bl	8000288 <__aeabi_dsub>
 8018120:	4652      	mov	r2, sl
 8018122:	465b      	mov	r3, fp
 8018124:	f7e8 fa68 	bl	80005f8 <__aeabi_dmul>
 8018128:	a33c      	add	r3, pc, #240	; (adr r3, 801821c <__kernel_sin+0x164>)
 801812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801812e:	f7e8 f8ad 	bl	800028c <__adddf3>
 8018132:	4652      	mov	r2, sl
 8018134:	465b      	mov	r3, fp
 8018136:	f7e8 fa5f 	bl	80005f8 <__aeabi_dmul>
 801813a:	a33a      	add	r3, pc, #232	; (adr r3, 8018224 <__kernel_sin+0x16c>)
 801813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018140:	f7e8 f8a2 	bl	8000288 <__aeabi_dsub>
 8018144:	4652      	mov	r2, sl
 8018146:	465b      	mov	r3, fp
 8018148:	f7e8 fa56 	bl	80005f8 <__aeabi_dmul>
 801814c:	a337      	add	r3, pc, #220	; (adr r3, 801822c <__kernel_sin+0x174>)
 801814e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018152:	f7e8 f89b 	bl	800028c <__adddf3>
 8018156:	9b01      	ldr	r3, [sp, #4]
 8018158:	4606      	mov	r6, r0
 801815a:	460f      	mov	r7, r1
 801815c:	b9eb      	cbnz	r3, 801819a <__kernel_sin+0xe2>
 801815e:	4602      	mov	r2, r0
 8018160:	460b      	mov	r3, r1
 8018162:	4650      	mov	r0, sl
 8018164:	4659      	mov	r1, fp
 8018166:	f7e8 fa47 	bl	80005f8 <__aeabi_dmul>
 801816a:	a325      	add	r3, pc, #148	; (adr r3, 8018200 <__kernel_sin+0x148>)
 801816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018170:	f7e8 f88a 	bl	8000288 <__aeabi_dsub>
 8018174:	4642      	mov	r2, r8
 8018176:	464b      	mov	r3, r9
 8018178:	f7e8 fa3e 	bl	80005f8 <__aeabi_dmul>
 801817c:	4602      	mov	r2, r0
 801817e:	460b      	mov	r3, r1
 8018180:	4620      	mov	r0, r4
 8018182:	4629      	mov	r1, r5
 8018184:	f7e8 f882 	bl	800028c <__adddf3>
 8018188:	4604      	mov	r4, r0
 801818a:	460d      	mov	r5, r1
 801818c:	ec45 4b10 	vmov	d0, r4, r5
 8018190:	b003      	add	sp, #12
 8018192:	ecbd 8b04 	vpop	{d8-d9}
 8018196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801819a:	4b1b      	ldr	r3, [pc, #108]	; (8018208 <__kernel_sin+0x150>)
 801819c:	ec51 0b18 	vmov	r0, r1, d8
 80181a0:	2200      	movs	r2, #0
 80181a2:	f7e8 fa29 	bl	80005f8 <__aeabi_dmul>
 80181a6:	4632      	mov	r2, r6
 80181a8:	ec41 0b19 	vmov	d9, r0, r1
 80181ac:	463b      	mov	r3, r7
 80181ae:	4640      	mov	r0, r8
 80181b0:	4649      	mov	r1, r9
 80181b2:	f7e8 fa21 	bl	80005f8 <__aeabi_dmul>
 80181b6:	4602      	mov	r2, r0
 80181b8:	460b      	mov	r3, r1
 80181ba:	ec51 0b19 	vmov	r0, r1, d9
 80181be:	f7e8 f863 	bl	8000288 <__aeabi_dsub>
 80181c2:	4652      	mov	r2, sl
 80181c4:	465b      	mov	r3, fp
 80181c6:	f7e8 fa17 	bl	80005f8 <__aeabi_dmul>
 80181ca:	ec53 2b18 	vmov	r2, r3, d8
 80181ce:	f7e8 f85b 	bl	8000288 <__aeabi_dsub>
 80181d2:	a30b      	add	r3, pc, #44	; (adr r3, 8018200 <__kernel_sin+0x148>)
 80181d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181d8:	4606      	mov	r6, r0
 80181da:	460f      	mov	r7, r1
 80181dc:	4640      	mov	r0, r8
 80181de:	4649      	mov	r1, r9
 80181e0:	f7e8 fa0a 	bl	80005f8 <__aeabi_dmul>
 80181e4:	4602      	mov	r2, r0
 80181e6:	460b      	mov	r3, r1
 80181e8:	4630      	mov	r0, r6
 80181ea:	4639      	mov	r1, r7
 80181ec:	f7e8 f84e 	bl	800028c <__adddf3>
 80181f0:	4602      	mov	r2, r0
 80181f2:	460b      	mov	r3, r1
 80181f4:	4620      	mov	r0, r4
 80181f6:	4629      	mov	r1, r5
 80181f8:	f7e8 f846 	bl	8000288 <__aeabi_dsub>
 80181fc:	e7c4      	b.n	8018188 <__kernel_sin+0xd0>
 80181fe:	bf00      	nop
 8018200:	55555549 	.word	0x55555549
 8018204:	3fc55555 	.word	0x3fc55555
 8018208:	3fe00000 	.word	0x3fe00000
 801820c:	5acfd57c 	.word	0x5acfd57c
 8018210:	3de5d93a 	.word	0x3de5d93a
 8018214:	8a2b9ceb 	.word	0x8a2b9ceb
 8018218:	3e5ae5e6 	.word	0x3e5ae5e6
 801821c:	57b1fe7d 	.word	0x57b1fe7d
 8018220:	3ec71de3 	.word	0x3ec71de3
 8018224:	19c161d5 	.word	0x19c161d5
 8018228:	3f2a01a0 	.word	0x3f2a01a0
 801822c:	1110f8a6 	.word	0x1110f8a6
 8018230:	3f811111 	.word	0x3f811111
 8018234:	00000000 	.word	0x00000000

08018238 <__ieee754_rem_pio2>:
 8018238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801823c:	ed2d 8b02 	vpush	{d8}
 8018240:	ec55 4b10 	vmov	r4, r5, d0
 8018244:	4bca      	ldr	r3, [pc, #808]	; (8018570 <__ieee754_rem_pio2+0x338>)
 8018246:	b08b      	sub	sp, #44	; 0x2c
 8018248:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801824c:	4598      	cmp	r8, r3
 801824e:	4682      	mov	sl, r0
 8018250:	9502      	str	r5, [sp, #8]
 8018252:	dc08      	bgt.n	8018266 <__ieee754_rem_pio2+0x2e>
 8018254:	2200      	movs	r2, #0
 8018256:	2300      	movs	r3, #0
 8018258:	ed80 0b00 	vstr	d0, [r0]
 801825c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018260:	f04f 0b00 	mov.w	fp, #0
 8018264:	e028      	b.n	80182b8 <__ieee754_rem_pio2+0x80>
 8018266:	4bc3      	ldr	r3, [pc, #780]	; (8018574 <__ieee754_rem_pio2+0x33c>)
 8018268:	4598      	cmp	r8, r3
 801826a:	dc78      	bgt.n	801835e <__ieee754_rem_pio2+0x126>
 801826c:	9b02      	ldr	r3, [sp, #8]
 801826e:	4ec2      	ldr	r6, [pc, #776]	; (8018578 <__ieee754_rem_pio2+0x340>)
 8018270:	2b00      	cmp	r3, #0
 8018272:	ee10 0a10 	vmov	r0, s0
 8018276:	a3b0      	add	r3, pc, #704	; (adr r3, 8018538 <__ieee754_rem_pio2+0x300>)
 8018278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801827c:	4629      	mov	r1, r5
 801827e:	dd39      	ble.n	80182f4 <__ieee754_rem_pio2+0xbc>
 8018280:	f7e8 f802 	bl	8000288 <__aeabi_dsub>
 8018284:	45b0      	cmp	r8, r6
 8018286:	4604      	mov	r4, r0
 8018288:	460d      	mov	r5, r1
 801828a:	d01b      	beq.n	80182c4 <__ieee754_rem_pio2+0x8c>
 801828c:	a3ac      	add	r3, pc, #688	; (adr r3, 8018540 <__ieee754_rem_pio2+0x308>)
 801828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018292:	f7e7 fff9 	bl	8000288 <__aeabi_dsub>
 8018296:	4602      	mov	r2, r0
 8018298:	460b      	mov	r3, r1
 801829a:	e9ca 2300 	strd	r2, r3, [sl]
 801829e:	4620      	mov	r0, r4
 80182a0:	4629      	mov	r1, r5
 80182a2:	f7e7 fff1 	bl	8000288 <__aeabi_dsub>
 80182a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8018540 <__ieee754_rem_pio2+0x308>)
 80182a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ac:	f7e7 ffec 	bl	8000288 <__aeabi_dsub>
 80182b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80182b4:	f04f 0b01 	mov.w	fp, #1
 80182b8:	4658      	mov	r0, fp
 80182ba:	b00b      	add	sp, #44	; 0x2c
 80182bc:	ecbd 8b02 	vpop	{d8}
 80182c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182c4:	a3a0      	add	r3, pc, #640	; (adr r3, 8018548 <__ieee754_rem_pio2+0x310>)
 80182c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ca:	f7e7 ffdd 	bl	8000288 <__aeabi_dsub>
 80182ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8018550 <__ieee754_rem_pio2+0x318>)
 80182d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182d4:	4604      	mov	r4, r0
 80182d6:	460d      	mov	r5, r1
 80182d8:	f7e7 ffd6 	bl	8000288 <__aeabi_dsub>
 80182dc:	4602      	mov	r2, r0
 80182de:	460b      	mov	r3, r1
 80182e0:	e9ca 2300 	strd	r2, r3, [sl]
 80182e4:	4620      	mov	r0, r4
 80182e6:	4629      	mov	r1, r5
 80182e8:	f7e7 ffce 	bl	8000288 <__aeabi_dsub>
 80182ec:	a398      	add	r3, pc, #608	; (adr r3, 8018550 <__ieee754_rem_pio2+0x318>)
 80182ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182f2:	e7db      	b.n	80182ac <__ieee754_rem_pio2+0x74>
 80182f4:	f7e7 ffca 	bl	800028c <__adddf3>
 80182f8:	45b0      	cmp	r8, r6
 80182fa:	4604      	mov	r4, r0
 80182fc:	460d      	mov	r5, r1
 80182fe:	d016      	beq.n	801832e <__ieee754_rem_pio2+0xf6>
 8018300:	a38f      	add	r3, pc, #572	; (adr r3, 8018540 <__ieee754_rem_pio2+0x308>)
 8018302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018306:	f7e7 ffc1 	bl	800028c <__adddf3>
 801830a:	4602      	mov	r2, r0
 801830c:	460b      	mov	r3, r1
 801830e:	e9ca 2300 	strd	r2, r3, [sl]
 8018312:	4620      	mov	r0, r4
 8018314:	4629      	mov	r1, r5
 8018316:	f7e7 ffb7 	bl	8000288 <__aeabi_dsub>
 801831a:	a389      	add	r3, pc, #548	; (adr r3, 8018540 <__ieee754_rem_pio2+0x308>)
 801831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018320:	f7e7 ffb4 	bl	800028c <__adddf3>
 8018324:	f04f 3bff 	mov.w	fp, #4294967295
 8018328:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801832c:	e7c4      	b.n	80182b8 <__ieee754_rem_pio2+0x80>
 801832e:	a386      	add	r3, pc, #536	; (adr r3, 8018548 <__ieee754_rem_pio2+0x310>)
 8018330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018334:	f7e7 ffaa 	bl	800028c <__adddf3>
 8018338:	a385      	add	r3, pc, #532	; (adr r3, 8018550 <__ieee754_rem_pio2+0x318>)
 801833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801833e:	4604      	mov	r4, r0
 8018340:	460d      	mov	r5, r1
 8018342:	f7e7 ffa3 	bl	800028c <__adddf3>
 8018346:	4602      	mov	r2, r0
 8018348:	460b      	mov	r3, r1
 801834a:	e9ca 2300 	strd	r2, r3, [sl]
 801834e:	4620      	mov	r0, r4
 8018350:	4629      	mov	r1, r5
 8018352:	f7e7 ff99 	bl	8000288 <__aeabi_dsub>
 8018356:	a37e      	add	r3, pc, #504	; (adr r3, 8018550 <__ieee754_rem_pio2+0x318>)
 8018358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801835c:	e7e0      	b.n	8018320 <__ieee754_rem_pio2+0xe8>
 801835e:	4b87      	ldr	r3, [pc, #540]	; (801857c <__ieee754_rem_pio2+0x344>)
 8018360:	4598      	cmp	r8, r3
 8018362:	f300 80d8 	bgt.w	8018516 <__ieee754_rem_pio2+0x2de>
 8018366:	f000 f96d 	bl	8018644 <fabs>
 801836a:	ec55 4b10 	vmov	r4, r5, d0
 801836e:	ee10 0a10 	vmov	r0, s0
 8018372:	a379      	add	r3, pc, #484	; (adr r3, 8018558 <__ieee754_rem_pio2+0x320>)
 8018374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018378:	4629      	mov	r1, r5
 801837a:	f7e8 f93d 	bl	80005f8 <__aeabi_dmul>
 801837e:	4b80      	ldr	r3, [pc, #512]	; (8018580 <__ieee754_rem_pio2+0x348>)
 8018380:	2200      	movs	r2, #0
 8018382:	f7e7 ff83 	bl	800028c <__adddf3>
 8018386:	f7e8 fbe7 	bl	8000b58 <__aeabi_d2iz>
 801838a:	4683      	mov	fp, r0
 801838c:	f7e8 f8ca 	bl	8000524 <__aeabi_i2d>
 8018390:	4602      	mov	r2, r0
 8018392:	460b      	mov	r3, r1
 8018394:	ec43 2b18 	vmov	d8, r2, r3
 8018398:	a367      	add	r3, pc, #412	; (adr r3, 8018538 <__ieee754_rem_pio2+0x300>)
 801839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801839e:	f7e8 f92b 	bl	80005f8 <__aeabi_dmul>
 80183a2:	4602      	mov	r2, r0
 80183a4:	460b      	mov	r3, r1
 80183a6:	4620      	mov	r0, r4
 80183a8:	4629      	mov	r1, r5
 80183aa:	f7e7 ff6d 	bl	8000288 <__aeabi_dsub>
 80183ae:	a364      	add	r3, pc, #400	; (adr r3, 8018540 <__ieee754_rem_pio2+0x308>)
 80183b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183b4:	4606      	mov	r6, r0
 80183b6:	460f      	mov	r7, r1
 80183b8:	ec51 0b18 	vmov	r0, r1, d8
 80183bc:	f7e8 f91c 	bl	80005f8 <__aeabi_dmul>
 80183c0:	f1bb 0f1f 	cmp.w	fp, #31
 80183c4:	4604      	mov	r4, r0
 80183c6:	460d      	mov	r5, r1
 80183c8:	dc0d      	bgt.n	80183e6 <__ieee754_rem_pio2+0x1ae>
 80183ca:	4b6e      	ldr	r3, [pc, #440]	; (8018584 <__ieee754_rem_pio2+0x34c>)
 80183cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80183d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80183d4:	4543      	cmp	r3, r8
 80183d6:	d006      	beq.n	80183e6 <__ieee754_rem_pio2+0x1ae>
 80183d8:	4622      	mov	r2, r4
 80183da:	462b      	mov	r3, r5
 80183dc:	4630      	mov	r0, r6
 80183de:	4639      	mov	r1, r7
 80183e0:	f7e7 ff52 	bl	8000288 <__aeabi_dsub>
 80183e4:	e00e      	b.n	8018404 <__ieee754_rem_pio2+0x1cc>
 80183e6:	462b      	mov	r3, r5
 80183e8:	4622      	mov	r2, r4
 80183ea:	4630      	mov	r0, r6
 80183ec:	4639      	mov	r1, r7
 80183ee:	f7e7 ff4b 	bl	8000288 <__aeabi_dsub>
 80183f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80183f6:	9303      	str	r3, [sp, #12]
 80183f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80183fc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8018400:	2b10      	cmp	r3, #16
 8018402:	dc02      	bgt.n	801840a <__ieee754_rem_pio2+0x1d2>
 8018404:	e9ca 0100 	strd	r0, r1, [sl]
 8018408:	e039      	b.n	801847e <__ieee754_rem_pio2+0x246>
 801840a:	a34f      	add	r3, pc, #316	; (adr r3, 8018548 <__ieee754_rem_pio2+0x310>)
 801840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018410:	ec51 0b18 	vmov	r0, r1, d8
 8018414:	f7e8 f8f0 	bl	80005f8 <__aeabi_dmul>
 8018418:	4604      	mov	r4, r0
 801841a:	460d      	mov	r5, r1
 801841c:	4602      	mov	r2, r0
 801841e:	460b      	mov	r3, r1
 8018420:	4630      	mov	r0, r6
 8018422:	4639      	mov	r1, r7
 8018424:	f7e7 ff30 	bl	8000288 <__aeabi_dsub>
 8018428:	4602      	mov	r2, r0
 801842a:	460b      	mov	r3, r1
 801842c:	4680      	mov	r8, r0
 801842e:	4689      	mov	r9, r1
 8018430:	4630      	mov	r0, r6
 8018432:	4639      	mov	r1, r7
 8018434:	f7e7 ff28 	bl	8000288 <__aeabi_dsub>
 8018438:	4622      	mov	r2, r4
 801843a:	462b      	mov	r3, r5
 801843c:	f7e7 ff24 	bl	8000288 <__aeabi_dsub>
 8018440:	a343      	add	r3, pc, #268	; (adr r3, 8018550 <__ieee754_rem_pio2+0x318>)
 8018442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018446:	4604      	mov	r4, r0
 8018448:	460d      	mov	r5, r1
 801844a:	ec51 0b18 	vmov	r0, r1, d8
 801844e:	f7e8 f8d3 	bl	80005f8 <__aeabi_dmul>
 8018452:	4622      	mov	r2, r4
 8018454:	462b      	mov	r3, r5
 8018456:	f7e7 ff17 	bl	8000288 <__aeabi_dsub>
 801845a:	4602      	mov	r2, r0
 801845c:	460b      	mov	r3, r1
 801845e:	4604      	mov	r4, r0
 8018460:	460d      	mov	r5, r1
 8018462:	4640      	mov	r0, r8
 8018464:	4649      	mov	r1, r9
 8018466:	f7e7 ff0f 	bl	8000288 <__aeabi_dsub>
 801846a:	9a03      	ldr	r2, [sp, #12]
 801846c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018470:	1ad3      	subs	r3, r2, r3
 8018472:	2b31      	cmp	r3, #49	; 0x31
 8018474:	dc24      	bgt.n	80184c0 <__ieee754_rem_pio2+0x288>
 8018476:	e9ca 0100 	strd	r0, r1, [sl]
 801847a:	4646      	mov	r6, r8
 801847c:	464f      	mov	r7, r9
 801847e:	e9da 8900 	ldrd	r8, r9, [sl]
 8018482:	4630      	mov	r0, r6
 8018484:	4642      	mov	r2, r8
 8018486:	464b      	mov	r3, r9
 8018488:	4639      	mov	r1, r7
 801848a:	f7e7 fefd 	bl	8000288 <__aeabi_dsub>
 801848e:	462b      	mov	r3, r5
 8018490:	4622      	mov	r2, r4
 8018492:	f7e7 fef9 	bl	8000288 <__aeabi_dsub>
 8018496:	9b02      	ldr	r3, [sp, #8]
 8018498:	2b00      	cmp	r3, #0
 801849a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801849e:	f6bf af0b 	bge.w	80182b8 <__ieee754_rem_pio2+0x80>
 80184a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80184a6:	f8ca 3004 	str.w	r3, [sl, #4]
 80184aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80184ae:	f8ca 8000 	str.w	r8, [sl]
 80184b2:	f8ca 0008 	str.w	r0, [sl, #8]
 80184b6:	f8ca 300c 	str.w	r3, [sl, #12]
 80184ba:	f1cb 0b00 	rsb	fp, fp, #0
 80184be:	e6fb      	b.n	80182b8 <__ieee754_rem_pio2+0x80>
 80184c0:	a327      	add	r3, pc, #156	; (adr r3, 8018560 <__ieee754_rem_pio2+0x328>)
 80184c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184c6:	ec51 0b18 	vmov	r0, r1, d8
 80184ca:	f7e8 f895 	bl	80005f8 <__aeabi_dmul>
 80184ce:	4604      	mov	r4, r0
 80184d0:	460d      	mov	r5, r1
 80184d2:	4602      	mov	r2, r0
 80184d4:	460b      	mov	r3, r1
 80184d6:	4640      	mov	r0, r8
 80184d8:	4649      	mov	r1, r9
 80184da:	f7e7 fed5 	bl	8000288 <__aeabi_dsub>
 80184de:	4602      	mov	r2, r0
 80184e0:	460b      	mov	r3, r1
 80184e2:	4606      	mov	r6, r0
 80184e4:	460f      	mov	r7, r1
 80184e6:	4640      	mov	r0, r8
 80184e8:	4649      	mov	r1, r9
 80184ea:	f7e7 fecd 	bl	8000288 <__aeabi_dsub>
 80184ee:	4622      	mov	r2, r4
 80184f0:	462b      	mov	r3, r5
 80184f2:	f7e7 fec9 	bl	8000288 <__aeabi_dsub>
 80184f6:	a31c      	add	r3, pc, #112	; (adr r3, 8018568 <__ieee754_rem_pio2+0x330>)
 80184f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184fc:	4604      	mov	r4, r0
 80184fe:	460d      	mov	r5, r1
 8018500:	ec51 0b18 	vmov	r0, r1, d8
 8018504:	f7e8 f878 	bl	80005f8 <__aeabi_dmul>
 8018508:	4622      	mov	r2, r4
 801850a:	462b      	mov	r3, r5
 801850c:	f7e7 febc 	bl	8000288 <__aeabi_dsub>
 8018510:	4604      	mov	r4, r0
 8018512:	460d      	mov	r5, r1
 8018514:	e760      	b.n	80183d8 <__ieee754_rem_pio2+0x1a0>
 8018516:	4b1c      	ldr	r3, [pc, #112]	; (8018588 <__ieee754_rem_pio2+0x350>)
 8018518:	4598      	cmp	r8, r3
 801851a:	dd37      	ble.n	801858c <__ieee754_rem_pio2+0x354>
 801851c:	ee10 2a10 	vmov	r2, s0
 8018520:	462b      	mov	r3, r5
 8018522:	4620      	mov	r0, r4
 8018524:	4629      	mov	r1, r5
 8018526:	f7e7 feaf 	bl	8000288 <__aeabi_dsub>
 801852a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801852e:	e9ca 0100 	strd	r0, r1, [sl]
 8018532:	e695      	b.n	8018260 <__ieee754_rem_pio2+0x28>
 8018534:	f3af 8000 	nop.w
 8018538:	54400000 	.word	0x54400000
 801853c:	3ff921fb 	.word	0x3ff921fb
 8018540:	1a626331 	.word	0x1a626331
 8018544:	3dd0b461 	.word	0x3dd0b461
 8018548:	1a600000 	.word	0x1a600000
 801854c:	3dd0b461 	.word	0x3dd0b461
 8018550:	2e037073 	.word	0x2e037073
 8018554:	3ba3198a 	.word	0x3ba3198a
 8018558:	6dc9c883 	.word	0x6dc9c883
 801855c:	3fe45f30 	.word	0x3fe45f30
 8018560:	2e000000 	.word	0x2e000000
 8018564:	3ba3198a 	.word	0x3ba3198a
 8018568:	252049c1 	.word	0x252049c1
 801856c:	397b839a 	.word	0x397b839a
 8018570:	3fe921fb 	.word	0x3fe921fb
 8018574:	4002d97b 	.word	0x4002d97b
 8018578:	3ff921fb 	.word	0x3ff921fb
 801857c:	413921fb 	.word	0x413921fb
 8018580:	3fe00000 	.word	0x3fe00000
 8018584:	0801b318 	.word	0x0801b318
 8018588:	7fefffff 	.word	0x7fefffff
 801858c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8018590:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8018594:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8018598:	4620      	mov	r0, r4
 801859a:	460d      	mov	r5, r1
 801859c:	f7e8 fadc 	bl	8000b58 <__aeabi_d2iz>
 80185a0:	f7e7 ffc0 	bl	8000524 <__aeabi_i2d>
 80185a4:	4602      	mov	r2, r0
 80185a6:	460b      	mov	r3, r1
 80185a8:	4620      	mov	r0, r4
 80185aa:	4629      	mov	r1, r5
 80185ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80185b0:	f7e7 fe6a 	bl	8000288 <__aeabi_dsub>
 80185b4:	4b21      	ldr	r3, [pc, #132]	; (801863c <__ieee754_rem_pio2+0x404>)
 80185b6:	2200      	movs	r2, #0
 80185b8:	f7e8 f81e 	bl	80005f8 <__aeabi_dmul>
 80185bc:	460d      	mov	r5, r1
 80185be:	4604      	mov	r4, r0
 80185c0:	f7e8 faca 	bl	8000b58 <__aeabi_d2iz>
 80185c4:	f7e7 ffae 	bl	8000524 <__aeabi_i2d>
 80185c8:	4602      	mov	r2, r0
 80185ca:	460b      	mov	r3, r1
 80185cc:	4620      	mov	r0, r4
 80185ce:	4629      	mov	r1, r5
 80185d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80185d4:	f7e7 fe58 	bl	8000288 <__aeabi_dsub>
 80185d8:	4b18      	ldr	r3, [pc, #96]	; (801863c <__ieee754_rem_pio2+0x404>)
 80185da:	2200      	movs	r2, #0
 80185dc:	f7e8 f80c 	bl	80005f8 <__aeabi_dmul>
 80185e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80185e4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80185e8:	2703      	movs	r7, #3
 80185ea:	2400      	movs	r4, #0
 80185ec:	2500      	movs	r5, #0
 80185ee:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80185f2:	4622      	mov	r2, r4
 80185f4:	462b      	mov	r3, r5
 80185f6:	46b9      	mov	r9, r7
 80185f8:	3f01      	subs	r7, #1
 80185fa:	f7e8 fa65 	bl	8000ac8 <__aeabi_dcmpeq>
 80185fe:	2800      	cmp	r0, #0
 8018600:	d1f5      	bne.n	80185ee <__ieee754_rem_pio2+0x3b6>
 8018602:	4b0f      	ldr	r3, [pc, #60]	; (8018640 <__ieee754_rem_pio2+0x408>)
 8018604:	9301      	str	r3, [sp, #4]
 8018606:	2302      	movs	r3, #2
 8018608:	9300      	str	r3, [sp, #0]
 801860a:	4632      	mov	r2, r6
 801860c:	464b      	mov	r3, r9
 801860e:	4651      	mov	r1, sl
 8018610:	a804      	add	r0, sp, #16
 8018612:	f000 f911 	bl	8018838 <__kernel_rem_pio2>
 8018616:	9b02      	ldr	r3, [sp, #8]
 8018618:	2b00      	cmp	r3, #0
 801861a:	4683      	mov	fp, r0
 801861c:	f6bf ae4c 	bge.w	80182b8 <__ieee754_rem_pio2+0x80>
 8018620:	e9da 2100 	ldrd	r2, r1, [sl]
 8018624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018628:	e9ca 2300 	strd	r2, r3, [sl]
 801862c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8018630:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018634:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8018638:	e73f      	b.n	80184ba <__ieee754_rem_pio2+0x282>
 801863a:	bf00      	nop
 801863c:	41700000 	.word	0x41700000
 8018640:	0801b398 	.word	0x0801b398

08018644 <fabs>:
 8018644:	ec51 0b10 	vmov	r0, r1, d0
 8018648:	ee10 2a10 	vmov	r2, s0
 801864c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018650:	ec43 2b10 	vmov	d0, r2, r3
 8018654:	4770      	bx	lr
	...

08018658 <__ieee754_expf>:
 8018658:	ee10 2a10 	vmov	r2, s0
 801865c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8018660:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018664:	d902      	bls.n	801866c <__ieee754_expf+0x14>
 8018666:	ee30 0a00 	vadd.f32	s0, s0, s0
 801866a:	4770      	bx	lr
 801866c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8018670:	d106      	bne.n	8018680 <__ieee754_expf+0x28>
 8018672:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80187ac <__ieee754_expf+0x154>
 8018676:	2900      	cmp	r1, #0
 8018678:	bf18      	it	ne
 801867a:	eeb0 0a67 	vmovne.f32	s0, s15
 801867e:	4770      	bx	lr
 8018680:	484b      	ldr	r0, [pc, #300]	; (80187b0 <__ieee754_expf+0x158>)
 8018682:	4282      	cmp	r2, r0
 8018684:	dd02      	ble.n	801868c <__ieee754_expf+0x34>
 8018686:	2000      	movs	r0, #0
 8018688:	f000 b8d0 	b.w	801882c <__math_oflowf>
 801868c:	2a00      	cmp	r2, #0
 801868e:	da05      	bge.n	801869c <__ieee754_expf+0x44>
 8018690:	4a48      	ldr	r2, [pc, #288]	; (80187b4 <__ieee754_expf+0x15c>)
 8018692:	4293      	cmp	r3, r2
 8018694:	d902      	bls.n	801869c <__ieee754_expf+0x44>
 8018696:	2000      	movs	r0, #0
 8018698:	f000 b8c2 	b.w	8018820 <__math_uflowf>
 801869c:	4a46      	ldr	r2, [pc, #280]	; (80187b8 <__ieee754_expf+0x160>)
 801869e:	4293      	cmp	r3, r2
 80186a0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80186a4:	d952      	bls.n	801874c <__ieee754_expf+0xf4>
 80186a6:	4a45      	ldr	r2, [pc, #276]	; (80187bc <__ieee754_expf+0x164>)
 80186a8:	4293      	cmp	r3, r2
 80186aa:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80186ae:	d834      	bhi.n	801871a <__ieee754_expf+0xc2>
 80186b0:	4b43      	ldr	r3, [pc, #268]	; (80187c0 <__ieee754_expf+0x168>)
 80186b2:	4413      	add	r3, r2
 80186b4:	ed93 7a00 	vldr	s14, [r3]
 80186b8:	4b42      	ldr	r3, [pc, #264]	; (80187c4 <__ieee754_expf+0x16c>)
 80186ba:	4413      	add	r3, r2
 80186bc:	ee30 7a47 	vsub.f32	s14, s0, s14
 80186c0:	f1c1 0201 	rsb	r2, r1, #1
 80186c4:	edd3 7a00 	vldr	s15, [r3]
 80186c8:	1a52      	subs	r2, r2, r1
 80186ca:	ee37 0a67 	vsub.f32	s0, s14, s15
 80186ce:	ee20 6a00 	vmul.f32	s12, s0, s0
 80186d2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80187c8 <__ieee754_expf+0x170>
 80186d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80187cc <__ieee754_expf+0x174>
 80186da:	eee6 6a05 	vfma.f32	s13, s12, s10
 80186de:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80187d0 <__ieee754_expf+0x178>
 80186e2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80186e6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80187d4 <__ieee754_expf+0x17c>
 80186ea:	eee5 6a06 	vfma.f32	s13, s10, s12
 80186ee:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80187d8 <__ieee754_expf+0x180>
 80186f2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80186f6:	eef0 6a40 	vmov.f32	s13, s0
 80186fa:	eee5 6a46 	vfms.f32	s13, s10, s12
 80186fe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8018702:	ee20 5a26 	vmul.f32	s10, s0, s13
 8018706:	bb92      	cbnz	r2, 801876e <__ieee754_expf+0x116>
 8018708:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801870c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8018710:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018714:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8018718:	4770      	bx	lr
 801871a:	4b30      	ldr	r3, [pc, #192]	; (80187dc <__ieee754_expf+0x184>)
 801871c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80187e0 <__ieee754_expf+0x188>
 8018720:	eddf 6a30 	vldr	s13, [pc, #192]	; 80187e4 <__ieee754_expf+0x18c>
 8018724:	4413      	add	r3, r2
 8018726:	edd3 7a00 	vldr	s15, [r3]
 801872a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801872e:	eeb0 7a40 	vmov.f32	s14, s0
 8018732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018736:	ee17 2a90 	vmov	r2, s15
 801873a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801873e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8018742:	eddf 6a29 	vldr	s13, [pc, #164]	; 80187e8 <__ieee754_expf+0x190>
 8018746:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801874a:	e7be      	b.n	80186ca <__ieee754_expf+0x72>
 801874c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8018750:	d20b      	bcs.n	801876a <__ieee754_expf+0x112>
 8018752:	eddf 6a26 	vldr	s13, [pc, #152]	; 80187ec <__ieee754_expf+0x194>
 8018756:	ee70 6a26 	vadd.f32	s13, s0, s13
 801875a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801875e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018762:	dd02      	ble.n	801876a <__ieee754_expf+0x112>
 8018764:	ee30 0a25 	vadd.f32	s0, s0, s11
 8018768:	4770      	bx	lr
 801876a:	2200      	movs	r2, #0
 801876c:	e7af      	b.n	80186ce <__ieee754_expf+0x76>
 801876e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8018772:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8018776:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801877a:	bfb8      	it	lt
 801877c:	3264      	addlt	r2, #100	; 0x64
 801877e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018782:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018786:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801878a:	ee17 3a90 	vmov	r3, s15
 801878e:	bfab      	itete	ge
 8018790:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8018794:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8018798:	ee00 3a10 	vmovge	s0, r3
 801879c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80187f0 <__ieee754_expf+0x198>
 80187a0:	bfbc      	itt	lt
 80187a2:	ee00 3a10 	vmovlt	s0, r3
 80187a6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80187aa:	4770      	bx	lr
 80187ac:	00000000 	.word	0x00000000
 80187b0:	42b17217 	.word	0x42b17217
 80187b4:	42cff1b5 	.word	0x42cff1b5
 80187b8:	3eb17218 	.word	0x3eb17218
 80187bc:	3f851591 	.word	0x3f851591
 80187c0:	0801b4a8 	.word	0x0801b4a8
 80187c4:	0801b4b0 	.word	0x0801b4b0
 80187c8:	3331bb4c 	.word	0x3331bb4c
 80187cc:	b5ddea0e 	.word	0xb5ddea0e
 80187d0:	388ab355 	.word	0x388ab355
 80187d4:	bb360b61 	.word	0xbb360b61
 80187d8:	3e2aaaab 	.word	0x3e2aaaab
 80187dc:	0801b4a0 	.word	0x0801b4a0
 80187e0:	3fb8aa3b 	.word	0x3fb8aa3b
 80187e4:	3f317180 	.word	0x3f317180
 80187e8:	3717f7d1 	.word	0x3717f7d1
 80187ec:	7149f2ca 	.word	0x7149f2ca
 80187f0:	0d800000 	.word	0x0d800000

080187f4 <with_errnof>:
 80187f4:	b513      	push	{r0, r1, r4, lr}
 80187f6:	4604      	mov	r4, r0
 80187f8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80187fc:	f7fc fda0 	bl	8015340 <__errno>
 8018800:	ed9d 0a01 	vldr	s0, [sp, #4]
 8018804:	6004      	str	r4, [r0, #0]
 8018806:	b002      	add	sp, #8
 8018808:	bd10      	pop	{r4, pc}

0801880a <xflowf>:
 801880a:	b130      	cbz	r0, 801881a <xflowf+0x10>
 801880c:	eef1 7a40 	vneg.f32	s15, s0
 8018810:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018814:	2022      	movs	r0, #34	; 0x22
 8018816:	f7ff bfed 	b.w	80187f4 <with_errnof>
 801881a:	eef0 7a40 	vmov.f32	s15, s0
 801881e:	e7f7      	b.n	8018810 <xflowf+0x6>

08018820 <__math_uflowf>:
 8018820:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018828 <__math_uflowf+0x8>
 8018824:	f7ff bff1 	b.w	801880a <xflowf>
 8018828:	10000000 	.word	0x10000000

0801882c <__math_oflowf>:
 801882c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018834 <__math_oflowf+0x8>
 8018830:	f7ff bfeb 	b.w	801880a <xflowf>
 8018834:	70000000 	.word	0x70000000

08018838 <__kernel_rem_pio2>:
 8018838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801883c:	ed2d 8b02 	vpush	{d8}
 8018840:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8018844:	f112 0f14 	cmn.w	r2, #20
 8018848:	9306      	str	r3, [sp, #24]
 801884a:	9104      	str	r1, [sp, #16]
 801884c:	4bc2      	ldr	r3, [pc, #776]	; (8018b58 <__kernel_rem_pio2+0x320>)
 801884e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8018850:	9009      	str	r0, [sp, #36]	; 0x24
 8018852:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018856:	9300      	str	r3, [sp, #0]
 8018858:	9b06      	ldr	r3, [sp, #24]
 801885a:	f103 33ff 	add.w	r3, r3, #4294967295
 801885e:	bfa8      	it	ge
 8018860:	1ed4      	subge	r4, r2, #3
 8018862:	9305      	str	r3, [sp, #20]
 8018864:	bfb2      	itee	lt
 8018866:	2400      	movlt	r4, #0
 8018868:	2318      	movge	r3, #24
 801886a:	fb94 f4f3 	sdivge	r4, r4, r3
 801886e:	f06f 0317 	mvn.w	r3, #23
 8018872:	fb04 3303 	mla	r3, r4, r3, r3
 8018876:	eb03 0a02 	add.w	sl, r3, r2
 801887a:	9b00      	ldr	r3, [sp, #0]
 801887c:	9a05      	ldr	r2, [sp, #20]
 801887e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8018b48 <__kernel_rem_pio2+0x310>
 8018882:	eb03 0802 	add.w	r8, r3, r2
 8018886:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8018888:	1aa7      	subs	r7, r4, r2
 801888a:	ae20      	add	r6, sp, #128	; 0x80
 801888c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8018890:	2500      	movs	r5, #0
 8018892:	4545      	cmp	r5, r8
 8018894:	dd13      	ble.n	80188be <__kernel_rem_pio2+0x86>
 8018896:	9b06      	ldr	r3, [sp, #24]
 8018898:	aa20      	add	r2, sp, #128	; 0x80
 801889a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801889e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80188a2:	f04f 0800 	mov.w	r8, #0
 80188a6:	9b00      	ldr	r3, [sp, #0]
 80188a8:	4598      	cmp	r8, r3
 80188aa:	dc31      	bgt.n	8018910 <__kernel_rem_pio2+0xd8>
 80188ac:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8018b48 <__kernel_rem_pio2+0x310>
 80188b0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80188b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80188b8:	462f      	mov	r7, r5
 80188ba:	2600      	movs	r6, #0
 80188bc:	e01b      	b.n	80188f6 <__kernel_rem_pio2+0xbe>
 80188be:	42ef      	cmn	r7, r5
 80188c0:	d407      	bmi.n	80188d2 <__kernel_rem_pio2+0x9a>
 80188c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80188c6:	f7e7 fe2d 	bl	8000524 <__aeabi_i2d>
 80188ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80188ce:	3501      	adds	r5, #1
 80188d0:	e7df      	b.n	8018892 <__kernel_rem_pio2+0x5a>
 80188d2:	ec51 0b18 	vmov	r0, r1, d8
 80188d6:	e7f8      	b.n	80188ca <__kernel_rem_pio2+0x92>
 80188d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80188dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80188e0:	f7e7 fe8a 	bl	80005f8 <__aeabi_dmul>
 80188e4:	4602      	mov	r2, r0
 80188e6:	460b      	mov	r3, r1
 80188e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80188ec:	f7e7 fcce 	bl	800028c <__adddf3>
 80188f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80188f4:	3601      	adds	r6, #1
 80188f6:	9b05      	ldr	r3, [sp, #20]
 80188f8:	429e      	cmp	r6, r3
 80188fa:	f1a7 0708 	sub.w	r7, r7, #8
 80188fe:	ddeb      	ble.n	80188d8 <__kernel_rem_pio2+0xa0>
 8018900:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018904:	f108 0801 	add.w	r8, r8, #1
 8018908:	ecab 7b02 	vstmia	fp!, {d7}
 801890c:	3508      	adds	r5, #8
 801890e:	e7ca      	b.n	80188a6 <__kernel_rem_pio2+0x6e>
 8018910:	9b00      	ldr	r3, [sp, #0]
 8018912:	aa0c      	add	r2, sp, #48	; 0x30
 8018914:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018918:	930b      	str	r3, [sp, #44]	; 0x2c
 801891a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801891c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018920:	9c00      	ldr	r4, [sp, #0]
 8018922:	930a      	str	r3, [sp, #40]	; 0x28
 8018924:	00e3      	lsls	r3, r4, #3
 8018926:	9308      	str	r3, [sp, #32]
 8018928:	ab98      	add	r3, sp, #608	; 0x260
 801892a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801892e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8018932:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8018936:	ab70      	add	r3, sp, #448	; 0x1c0
 8018938:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801893c:	46c3      	mov	fp, r8
 801893e:	46a1      	mov	r9, r4
 8018940:	f1b9 0f00 	cmp.w	r9, #0
 8018944:	f1a5 0508 	sub.w	r5, r5, #8
 8018948:	dc77      	bgt.n	8018a3a <__kernel_rem_pio2+0x202>
 801894a:	ec47 6b10 	vmov	d0, r6, r7
 801894e:	4650      	mov	r0, sl
 8018950:	f000 fac2 	bl	8018ed8 <scalbn>
 8018954:	ec57 6b10 	vmov	r6, r7, d0
 8018958:	2200      	movs	r2, #0
 801895a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801895e:	ee10 0a10 	vmov	r0, s0
 8018962:	4639      	mov	r1, r7
 8018964:	f7e7 fe48 	bl	80005f8 <__aeabi_dmul>
 8018968:	ec41 0b10 	vmov	d0, r0, r1
 801896c:	f7ff fa5c 	bl	8017e28 <floor>
 8018970:	4b7a      	ldr	r3, [pc, #488]	; (8018b5c <__kernel_rem_pio2+0x324>)
 8018972:	ec51 0b10 	vmov	r0, r1, d0
 8018976:	2200      	movs	r2, #0
 8018978:	f7e7 fe3e 	bl	80005f8 <__aeabi_dmul>
 801897c:	4602      	mov	r2, r0
 801897e:	460b      	mov	r3, r1
 8018980:	4630      	mov	r0, r6
 8018982:	4639      	mov	r1, r7
 8018984:	f7e7 fc80 	bl	8000288 <__aeabi_dsub>
 8018988:	460f      	mov	r7, r1
 801898a:	4606      	mov	r6, r0
 801898c:	f7e8 f8e4 	bl	8000b58 <__aeabi_d2iz>
 8018990:	9002      	str	r0, [sp, #8]
 8018992:	f7e7 fdc7 	bl	8000524 <__aeabi_i2d>
 8018996:	4602      	mov	r2, r0
 8018998:	460b      	mov	r3, r1
 801899a:	4630      	mov	r0, r6
 801899c:	4639      	mov	r1, r7
 801899e:	f7e7 fc73 	bl	8000288 <__aeabi_dsub>
 80189a2:	f1ba 0f00 	cmp.w	sl, #0
 80189a6:	4606      	mov	r6, r0
 80189a8:	460f      	mov	r7, r1
 80189aa:	dd6d      	ble.n	8018a88 <__kernel_rem_pio2+0x250>
 80189ac:	1e61      	subs	r1, r4, #1
 80189ae:	ab0c      	add	r3, sp, #48	; 0x30
 80189b0:	9d02      	ldr	r5, [sp, #8]
 80189b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80189b6:	f1ca 0018 	rsb	r0, sl, #24
 80189ba:	fa43 f200 	asr.w	r2, r3, r0
 80189be:	4415      	add	r5, r2
 80189c0:	4082      	lsls	r2, r0
 80189c2:	1a9b      	subs	r3, r3, r2
 80189c4:	aa0c      	add	r2, sp, #48	; 0x30
 80189c6:	9502      	str	r5, [sp, #8]
 80189c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80189cc:	f1ca 0217 	rsb	r2, sl, #23
 80189d0:	fa43 fb02 	asr.w	fp, r3, r2
 80189d4:	f1bb 0f00 	cmp.w	fp, #0
 80189d8:	dd65      	ble.n	8018aa6 <__kernel_rem_pio2+0x26e>
 80189da:	9b02      	ldr	r3, [sp, #8]
 80189dc:	2200      	movs	r2, #0
 80189de:	3301      	adds	r3, #1
 80189e0:	9302      	str	r3, [sp, #8]
 80189e2:	4615      	mov	r5, r2
 80189e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80189e8:	4294      	cmp	r4, r2
 80189ea:	f300 809f 	bgt.w	8018b2c <__kernel_rem_pio2+0x2f4>
 80189ee:	f1ba 0f00 	cmp.w	sl, #0
 80189f2:	dd07      	ble.n	8018a04 <__kernel_rem_pio2+0x1cc>
 80189f4:	f1ba 0f01 	cmp.w	sl, #1
 80189f8:	f000 80c1 	beq.w	8018b7e <__kernel_rem_pio2+0x346>
 80189fc:	f1ba 0f02 	cmp.w	sl, #2
 8018a00:	f000 80c7 	beq.w	8018b92 <__kernel_rem_pio2+0x35a>
 8018a04:	f1bb 0f02 	cmp.w	fp, #2
 8018a08:	d14d      	bne.n	8018aa6 <__kernel_rem_pio2+0x26e>
 8018a0a:	4632      	mov	r2, r6
 8018a0c:	463b      	mov	r3, r7
 8018a0e:	4954      	ldr	r1, [pc, #336]	; (8018b60 <__kernel_rem_pio2+0x328>)
 8018a10:	2000      	movs	r0, #0
 8018a12:	f7e7 fc39 	bl	8000288 <__aeabi_dsub>
 8018a16:	4606      	mov	r6, r0
 8018a18:	460f      	mov	r7, r1
 8018a1a:	2d00      	cmp	r5, #0
 8018a1c:	d043      	beq.n	8018aa6 <__kernel_rem_pio2+0x26e>
 8018a1e:	4650      	mov	r0, sl
 8018a20:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8018b50 <__kernel_rem_pio2+0x318>
 8018a24:	f000 fa58 	bl	8018ed8 <scalbn>
 8018a28:	4630      	mov	r0, r6
 8018a2a:	4639      	mov	r1, r7
 8018a2c:	ec53 2b10 	vmov	r2, r3, d0
 8018a30:	f7e7 fc2a 	bl	8000288 <__aeabi_dsub>
 8018a34:	4606      	mov	r6, r0
 8018a36:	460f      	mov	r7, r1
 8018a38:	e035      	b.n	8018aa6 <__kernel_rem_pio2+0x26e>
 8018a3a:	4b4a      	ldr	r3, [pc, #296]	; (8018b64 <__kernel_rem_pio2+0x32c>)
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	4630      	mov	r0, r6
 8018a40:	4639      	mov	r1, r7
 8018a42:	f7e7 fdd9 	bl	80005f8 <__aeabi_dmul>
 8018a46:	f7e8 f887 	bl	8000b58 <__aeabi_d2iz>
 8018a4a:	f7e7 fd6b 	bl	8000524 <__aeabi_i2d>
 8018a4e:	4602      	mov	r2, r0
 8018a50:	460b      	mov	r3, r1
 8018a52:	ec43 2b18 	vmov	d8, r2, r3
 8018a56:	4b44      	ldr	r3, [pc, #272]	; (8018b68 <__kernel_rem_pio2+0x330>)
 8018a58:	2200      	movs	r2, #0
 8018a5a:	f7e7 fdcd 	bl	80005f8 <__aeabi_dmul>
 8018a5e:	4602      	mov	r2, r0
 8018a60:	460b      	mov	r3, r1
 8018a62:	4630      	mov	r0, r6
 8018a64:	4639      	mov	r1, r7
 8018a66:	f7e7 fc0f 	bl	8000288 <__aeabi_dsub>
 8018a6a:	f7e8 f875 	bl	8000b58 <__aeabi_d2iz>
 8018a6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018a72:	f84b 0b04 	str.w	r0, [fp], #4
 8018a76:	ec51 0b18 	vmov	r0, r1, d8
 8018a7a:	f7e7 fc07 	bl	800028c <__adddf3>
 8018a7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8018a82:	4606      	mov	r6, r0
 8018a84:	460f      	mov	r7, r1
 8018a86:	e75b      	b.n	8018940 <__kernel_rem_pio2+0x108>
 8018a88:	d106      	bne.n	8018a98 <__kernel_rem_pio2+0x260>
 8018a8a:	1e63      	subs	r3, r4, #1
 8018a8c:	aa0c      	add	r2, sp, #48	; 0x30
 8018a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018a92:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8018a96:	e79d      	b.n	80189d4 <__kernel_rem_pio2+0x19c>
 8018a98:	4b34      	ldr	r3, [pc, #208]	; (8018b6c <__kernel_rem_pio2+0x334>)
 8018a9a:	2200      	movs	r2, #0
 8018a9c:	f7e8 f832 	bl	8000b04 <__aeabi_dcmpge>
 8018aa0:	2800      	cmp	r0, #0
 8018aa2:	d140      	bne.n	8018b26 <__kernel_rem_pio2+0x2ee>
 8018aa4:	4683      	mov	fp, r0
 8018aa6:	2200      	movs	r2, #0
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	4630      	mov	r0, r6
 8018aac:	4639      	mov	r1, r7
 8018aae:	f7e8 f80b 	bl	8000ac8 <__aeabi_dcmpeq>
 8018ab2:	2800      	cmp	r0, #0
 8018ab4:	f000 80c1 	beq.w	8018c3a <__kernel_rem_pio2+0x402>
 8018ab8:	1e65      	subs	r5, r4, #1
 8018aba:	462b      	mov	r3, r5
 8018abc:	2200      	movs	r2, #0
 8018abe:	9900      	ldr	r1, [sp, #0]
 8018ac0:	428b      	cmp	r3, r1
 8018ac2:	da6d      	bge.n	8018ba0 <__kernel_rem_pio2+0x368>
 8018ac4:	2a00      	cmp	r2, #0
 8018ac6:	f000 808a 	beq.w	8018bde <__kernel_rem_pio2+0x3a6>
 8018aca:	ab0c      	add	r3, sp, #48	; 0x30
 8018acc:	f1aa 0a18 	sub.w	sl, sl, #24
 8018ad0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	f000 80ae 	beq.w	8018c36 <__kernel_rem_pio2+0x3fe>
 8018ada:	4650      	mov	r0, sl
 8018adc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8018b50 <__kernel_rem_pio2+0x318>
 8018ae0:	f000 f9fa 	bl	8018ed8 <scalbn>
 8018ae4:	1c6b      	adds	r3, r5, #1
 8018ae6:	00da      	lsls	r2, r3, #3
 8018ae8:	9205      	str	r2, [sp, #20]
 8018aea:	ec57 6b10 	vmov	r6, r7, d0
 8018aee:	aa70      	add	r2, sp, #448	; 0x1c0
 8018af0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8018b64 <__kernel_rem_pio2+0x32c>
 8018af4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8018af8:	462c      	mov	r4, r5
 8018afa:	f04f 0800 	mov.w	r8, #0
 8018afe:	2c00      	cmp	r4, #0
 8018b00:	f280 80d4 	bge.w	8018cac <__kernel_rem_pio2+0x474>
 8018b04:	462c      	mov	r4, r5
 8018b06:	2c00      	cmp	r4, #0
 8018b08:	f2c0 8102 	blt.w	8018d10 <__kernel_rem_pio2+0x4d8>
 8018b0c:	4b18      	ldr	r3, [pc, #96]	; (8018b70 <__kernel_rem_pio2+0x338>)
 8018b0e:	461e      	mov	r6, r3
 8018b10:	ab70      	add	r3, sp, #448	; 0x1c0
 8018b12:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8018b16:	1b2b      	subs	r3, r5, r4
 8018b18:	f04f 0900 	mov.w	r9, #0
 8018b1c:	f04f 0a00 	mov.w	sl, #0
 8018b20:	2700      	movs	r7, #0
 8018b22:	9306      	str	r3, [sp, #24]
 8018b24:	e0e6      	b.n	8018cf4 <__kernel_rem_pio2+0x4bc>
 8018b26:	f04f 0b02 	mov.w	fp, #2
 8018b2a:	e756      	b.n	80189da <__kernel_rem_pio2+0x1a2>
 8018b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8018b30:	bb05      	cbnz	r5, 8018b74 <__kernel_rem_pio2+0x33c>
 8018b32:	b123      	cbz	r3, 8018b3e <__kernel_rem_pio2+0x306>
 8018b34:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8018b38:	f8c8 3000 	str.w	r3, [r8]
 8018b3c:	2301      	movs	r3, #1
 8018b3e:	3201      	adds	r2, #1
 8018b40:	f108 0804 	add.w	r8, r8, #4
 8018b44:	461d      	mov	r5, r3
 8018b46:	e74f      	b.n	80189e8 <__kernel_rem_pio2+0x1b0>
	...
 8018b54:	3ff00000 	.word	0x3ff00000
 8018b58:	0801b4f8 	.word	0x0801b4f8
 8018b5c:	40200000 	.word	0x40200000
 8018b60:	3ff00000 	.word	0x3ff00000
 8018b64:	3e700000 	.word	0x3e700000
 8018b68:	41700000 	.word	0x41700000
 8018b6c:	3fe00000 	.word	0x3fe00000
 8018b70:	0801b4b8 	.word	0x0801b4b8
 8018b74:	1acb      	subs	r3, r1, r3
 8018b76:	f8c8 3000 	str.w	r3, [r8]
 8018b7a:	462b      	mov	r3, r5
 8018b7c:	e7df      	b.n	8018b3e <__kernel_rem_pio2+0x306>
 8018b7e:	1e62      	subs	r2, r4, #1
 8018b80:	ab0c      	add	r3, sp, #48	; 0x30
 8018b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b86:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018b8a:	a90c      	add	r1, sp, #48	; 0x30
 8018b8c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018b90:	e738      	b.n	8018a04 <__kernel_rem_pio2+0x1cc>
 8018b92:	1e62      	subs	r2, r4, #1
 8018b94:	ab0c      	add	r3, sp, #48	; 0x30
 8018b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b9a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018b9e:	e7f4      	b.n	8018b8a <__kernel_rem_pio2+0x352>
 8018ba0:	a90c      	add	r1, sp, #48	; 0x30
 8018ba2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8018ba6:	3b01      	subs	r3, #1
 8018ba8:	430a      	orrs	r2, r1
 8018baa:	e788      	b.n	8018abe <__kernel_rem_pio2+0x286>
 8018bac:	3301      	adds	r3, #1
 8018bae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8018bb2:	2900      	cmp	r1, #0
 8018bb4:	d0fa      	beq.n	8018bac <__kernel_rem_pio2+0x374>
 8018bb6:	9a08      	ldr	r2, [sp, #32]
 8018bb8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8018bbc:	446a      	add	r2, sp
 8018bbe:	3a98      	subs	r2, #152	; 0x98
 8018bc0:	9208      	str	r2, [sp, #32]
 8018bc2:	9a06      	ldr	r2, [sp, #24]
 8018bc4:	a920      	add	r1, sp, #128	; 0x80
 8018bc6:	18a2      	adds	r2, r4, r2
 8018bc8:	18e3      	adds	r3, r4, r3
 8018bca:	f104 0801 	add.w	r8, r4, #1
 8018bce:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8018bd2:	9302      	str	r3, [sp, #8]
 8018bd4:	9b02      	ldr	r3, [sp, #8]
 8018bd6:	4543      	cmp	r3, r8
 8018bd8:	da04      	bge.n	8018be4 <__kernel_rem_pio2+0x3ac>
 8018bda:	461c      	mov	r4, r3
 8018bdc:	e6a2      	b.n	8018924 <__kernel_rem_pio2+0xec>
 8018bde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018be0:	2301      	movs	r3, #1
 8018be2:	e7e4      	b.n	8018bae <__kernel_rem_pio2+0x376>
 8018be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018be6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018bea:	f7e7 fc9b 	bl	8000524 <__aeabi_i2d>
 8018bee:	e8e5 0102 	strd	r0, r1, [r5], #8
 8018bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bf4:	46ab      	mov	fp, r5
 8018bf6:	461c      	mov	r4, r3
 8018bf8:	f04f 0900 	mov.w	r9, #0
 8018bfc:	2600      	movs	r6, #0
 8018bfe:	2700      	movs	r7, #0
 8018c00:	9b05      	ldr	r3, [sp, #20]
 8018c02:	4599      	cmp	r9, r3
 8018c04:	dd06      	ble.n	8018c14 <__kernel_rem_pio2+0x3dc>
 8018c06:	9b08      	ldr	r3, [sp, #32]
 8018c08:	e8e3 6702 	strd	r6, r7, [r3], #8
 8018c0c:	f108 0801 	add.w	r8, r8, #1
 8018c10:	9308      	str	r3, [sp, #32]
 8018c12:	e7df      	b.n	8018bd4 <__kernel_rem_pio2+0x39c>
 8018c14:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8018c18:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8018c1c:	f7e7 fcec 	bl	80005f8 <__aeabi_dmul>
 8018c20:	4602      	mov	r2, r0
 8018c22:	460b      	mov	r3, r1
 8018c24:	4630      	mov	r0, r6
 8018c26:	4639      	mov	r1, r7
 8018c28:	f7e7 fb30 	bl	800028c <__adddf3>
 8018c2c:	f109 0901 	add.w	r9, r9, #1
 8018c30:	4606      	mov	r6, r0
 8018c32:	460f      	mov	r7, r1
 8018c34:	e7e4      	b.n	8018c00 <__kernel_rem_pio2+0x3c8>
 8018c36:	3d01      	subs	r5, #1
 8018c38:	e747      	b.n	8018aca <__kernel_rem_pio2+0x292>
 8018c3a:	ec47 6b10 	vmov	d0, r6, r7
 8018c3e:	f1ca 0000 	rsb	r0, sl, #0
 8018c42:	f000 f949 	bl	8018ed8 <scalbn>
 8018c46:	ec57 6b10 	vmov	r6, r7, d0
 8018c4a:	4ba0      	ldr	r3, [pc, #640]	; (8018ecc <__kernel_rem_pio2+0x694>)
 8018c4c:	ee10 0a10 	vmov	r0, s0
 8018c50:	2200      	movs	r2, #0
 8018c52:	4639      	mov	r1, r7
 8018c54:	f7e7 ff56 	bl	8000b04 <__aeabi_dcmpge>
 8018c58:	b1f8      	cbz	r0, 8018c9a <__kernel_rem_pio2+0x462>
 8018c5a:	4b9d      	ldr	r3, [pc, #628]	; (8018ed0 <__kernel_rem_pio2+0x698>)
 8018c5c:	2200      	movs	r2, #0
 8018c5e:	4630      	mov	r0, r6
 8018c60:	4639      	mov	r1, r7
 8018c62:	f7e7 fcc9 	bl	80005f8 <__aeabi_dmul>
 8018c66:	f7e7 ff77 	bl	8000b58 <__aeabi_d2iz>
 8018c6a:	4680      	mov	r8, r0
 8018c6c:	f7e7 fc5a 	bl	8000524 <__aeabi_i2d>
 8018c70:	4b96      	ldr	r3, [pc, #600]	; (8018ecc <__kernel_rem_pio2+0x694>)
 8018c72:	2200      	movs	r2, #0
 8018c74:	f7e7 fcc0 	bl	80005f8 <__aeabi_dmul>
 8018c78:	460b      	mov	r3, r1
 8018c7a:	4602      	mov	r2, r0
 8018c7c:	4639      	mov	r1, r7
 8018c7e:	4630      	mov	r0, r6
 8018c80:	f7e7 fb02 	bl	8000288 <__aeabi_dsub>
 8018c84:	f7e7 ff68 	bl	8000b58 <__aeabi_d2iz>
 8018c88:	1c65      	adds	r5, r4, #1
 8018c8a:	ab0c      	add	r3, sp, #48	; 0x30
 8018c8c:	f10a 0a18 	add.w	sl, sl, #24
 8018c90:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018c94:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8018c98:	e71f      	b.n	8018ada <__kernel_rem_pio2+0x2a2>
 8018c9a:	4630      	mov	r0, r6
 8018c9c:	4639      	mov	r1, r7
 8018c9e:	f7e7 ff5b 	bl	8000b58 <__aeabi_d2iz>
 8018ca2:	ab0c      	add	r3, sp, #48	; 0x30
 8018ca4:	4625      	mov	r5, r4
 8018ca6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018caa:	e716      	b.n	8018ada <__kernel_rem_pio2+0x2a2>
 8018cac:	ab0c      	add	r3, sp, #48	; 0x30
 8018cae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018cb2:	f7e7 fc37 	bl	8000524 <__aeabi_i2d>
 8018cb6:	4632      	mov	r2, r6
 8018cb8:	463b      	mov	r3, r7
 8018cba:	f7e7 fc9d 	bl	80005f8 <__aeabi_dmul>
 8018cbe:	4642      	mov	r2, r8
 8018cc0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8018cc4:	464b      	mov	r3, r9
 8018cc6:	4630      	mov	r0, r6
 8018cc8:	4639      	mov	r1, r7
 8018cca:	f7e7 fc95 	bl	80005f8 <__aeabi_dmul>
 8018cce:	3c01      	subs	r4, #1
 8018cd0:	4606      	mov	r6, r0
 8018cd2:	460f      	mov	r7, r1
 8018cd4:	e713      	b.n	8018afe <__kernel_rem_pio2+0x2c6>
 8018cd6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8018cda:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8018cde:	f7e7 fc8b 	bl	80005f8 <__aeabi_dmul>
 8018ce2:	4602      	mov	r2, r0
 8018ce4:	460b      	mov	r3, r1
 8018ce6:	4648      	mov	r0, r9
 8018ce8:	4651      	mov	r1, sl
 8018cea:	f7e7 facf 	bl	800028c <__adddf3>
 8018cee:	3701      	adds	r7, #1
 8018cf0:	4681      	mov	r9, r0
 8018cf2:	468a      	mov	sl, r1
 8018cf4:	9b00      	ldr	r3, [sp, #0]
 8018cf6:	429f      	cmp	r7, r3
 8018cf8:	dc02      	bgt.n	8018d00 <__kernel_rem_pio2+0x4c8>
 8018cfa:	9b06      	ldr	r3, [sp, #24]
 8018cfc:	429f      	cmp	r7, r3
 8018cfe:	ddea      	ble.n	8018cd6 <__kernel_rem_pio2+0x49e>
 8018d00:	9a06      	ldr	r2, [sp, #24]
 8018d02:	ab48      	add	r3, sp, #288	; 0x120
 8018d04:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8018d08:	e9c6 9a00 	strd	r9, sl, [r6]
 8018d0c:	3c01      	subs	r4, #1
 8018d0e:	e6fa      	b.n	8018b06 <__kernel_rem_pio2+0x2ce>
 8018d10:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8018d12:	2b02      	cmp	r3, #2
 8018d14:	dc0b      	bgt.n	8018d2e <__kernel_rem_pio2+0x4f6>
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	dc39      	bgt.n	8018d8e <__kernel_rem_pio2+0x556>
 8018d1a:	d05d      	beq.n	8018dd8 <__kernel_rem_pio2+0x5a0>
 8018d1c:	9b02      	ldr	r3, [sp, #8]
 8018d1e:	f003 0007 	and.w	r0, r3, #7
 8018d22:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8018d26:	ecbd 8b02 	vpop	{d8}
 8018d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d2e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8018d30:	2b03      	cmp	r3, #3
 8018d32:	d1f3      	bne.n	8018d1c <__kernel_rem_pio2+0x4e4>
 8018d34:	9b05      	ldr	r3, [sp, #20]
 8018d36:	9500      	str	r5, [sp, #0]
 8018d38:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8018d3c:	eb0d 0403 	add.w	r4, sp, r3
 8018d40:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8018d44:	46a2      	mov	sl, r4
 8018d46:	9b00      	ldr	r3, [sp, #0]
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	f1aa 0a08 	sub.w	sl, sl, #8
 8018d4e:	dc69      	bgt.n	8018e24 <__kernel_rem_pio2+0x5ec>
 8018d50:	46aa      	mov	sl, r5
 8018d52:	f1ba 0f01 	cmp.w	sl, #1
 8018d56:	f1a4 0408 	sub.w	r4, r4, #8
 8018d5a:	f300 8083 	bgt.w	8018e64 <__kernel_rem_pio2+0x62c>
 8018d5e:	9c05      	ldr	r4, [sp, #20]
 8018d60:	ab48      	add	r3, sp, #288	; 0x120
 8018d62:	441c      	add	r4, r3
 8018d64:	2000      	movs	r0, #0
 8018d66:	2100      	movs	r1, #0
 8018d68:	2d01      	cmp	r5, #1
 8018d6a:	f300 809a 	bgt.w	8018ea2 <__kernel_rem_pio2+0x66a>
 8018d6e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8018d72:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8018d76:	f1bb 0f00 	cmp.w	fp, #0
 8018d7a:	f040 8098 	bne.w	8018eae <__kernel_rem_pio2+0x676>
 8018d7e:	9b04      	ldr	r3, [sp, #16]
 8018d80:	e9c3 7800 	strd	r7, r8, [r3]
 8018d84:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8018d88:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8018d8c:	e7c6      	b.n	8018d1c <__kernel_rem_pio2+0x4e4>
 8018d8e:	9e05      	ldr	r6, [sp, #20]
 8018d90:	ab48      	add	r3, sp, #288	; 0x120
 8018d92:	441e      	add	r6, r3
 8018d94:	462c      	mov	r4, r5
 8018d96:	2000      	movs	r0, #0
 8018d98:	2100      	movs	r1, #0
 8018d9a:	2c00      	cmp	r4, #0
 8018d9c:	da33      	bge.n	8018e06 <__kernel_rem_pio2+0x5ce>
 8018d9e:	f1bb 0f00 	cmp.w	fp, #0
 8018da2:	d036      	beq.n	8018e12 <__kernel_rem_pio2+0x5da>
 8018da4:	4602      	mov	r2, r0
 8018da6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018daa:	9c04      	ldr	r4, [sp, #16]
 8018dac:	e9c4 2300 	strd	r2, r3, [r4]
 8018db0:	4602      	mov	r2, r0
 8018db2:	460b      	mov	r3, r1
 8018db4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8018db8:	f7e7 fa66 	bl	8000288 <__aeabi_dsub>
 8018dbc:	ae4a      	add	r6, sp, #296	; 0x128
 8018dbe:	2401      	movs	r4, #1
 8018dc0:	42a5      	cmp	r5, r4
 8018dc2:	da29      	bge.n	8018e18 <__kernel_rem_pio2+0x5e0>
 8018dc4:	f1bb 0f00 	cmp.w	fp, #0
 8018dc8:	d002      	beq.n	8018dd0 <__kernel_rem_pio2+0x598>
 8018dca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018dce:	4619      	mov	r1, r3
 8018dd0:	9b04      	ldr	r3, [sp, #16]
 8018dd2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8018dd6:	e7a1      	b.n	8018d1c <__kernel_rem_pio2+0x4e4>
 8018dd8:	9c05      	ldr	r4, [sp, #20]
 8018dda:	ab48      	add	r3, sp, #288	; 0x120
 8018ddc:	441c      	add	r4, r3
 8018dde:	2000      	movs	r0, #0
 8018de0:	2100      	movs	r1, #0
 8018de2:	2d00      	cmp	r5, #0
 8018de4:	da09      	bge.n	8018dfa <__kernel_rem_pio2+0x5c2>
 8018de6:	f1bb 0f00 	cmp.w	fp, #0
 8018dea:	d002      	beq.n	8018df2 <__kernel_rem_pio2+0x5ba>
 8018dec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018df0:	4619      	mov	r1, r3
 8018df2:	9b04      	ldr	r3, [sp, #16]
 8018df4:	e9c3 0100 	strd	r0, r1, [r3]
 8018df8:	e790      	b.n	8018d1c <__kernel_rem_pio2+0x4e4>
 8018dfa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018dfe:	f7e7 fa45 	bl	800028c <__adddf3>
 8018e02:	3d01      	subs	r5, #1
 8018e04:	e7ed      	b.n	8018de2 <__kernel_rem_pio2+0x5aa>
 8018e06:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8018e0a:	f7e7 fa3f 	bl	800028c <__adddf3>
 8018e0e:	3c01      	subs	r4, #1
 8018e10:	e7c3      	b.n	8018d9a <__kernel_rem_pio2+0x562>
 8018e12:	4602      	mov	r2, r0
 8018e14:	460b      	mov	r3, r1
 8018e16:	e7c8      	b.n	8018daa <__kernel_rem_pio2+0x572>
 8018e18:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8018e1c:	f7e7 fa36 	bl	800028c <__adddf3>
 8018e20:	3401      	adds	r4, #1
 8018e22:	e7cd      	b.n	8018dc0 <__kernel_rem_pio2+0x588>
 8018e24:	e9da 8900 	ldrd	r8, r9, [sl]
 8018e28:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8018e2c:	9b00      	ldr	r3, [sp, #0]
 8018e2e:	3b01      	subs	r3, #1
 8018e30:	9300      	str	r3, [sp, #0]
 8018e32:	4632      	mov	r2, r6
 8018e34:	463b      	mov	r3, r7
 8018e36:	4640      	mov	r0, r8
 8018e38:	4649      	mov	r1, r9
 8018e3a:	f7e7 fa27 	bl	800028c <__adddf3>
 8018e3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018e42:	4602      	mov	r2, r0
 8018e44:	460b      	mov	r3, r1
 8018e46:	4640      	mov	r0, r8
 8018e48:	4649      	mov	r1, r9
 8018e4a:	f7e7 fa1d 	bl	8000288 <__aeabi_dsub>
 8018e4e:	4632      	mov	r2, r6
 8018e50:	463b      	mov	r3, r7
 8018e52:	f7e7 fa1b 	bl	800028c <__adddf3>
 8018e56:	ed9d 7b06 	vldr	d7, [sp, #24]
 8018e5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018e5e:	ed8a 7b00 	vstr	d7, [sl]
 8018e62:	e770      	b.n	8018d46 <__kernel_rem_pio2+0x50e>
 8018e64:	e9d4 8900 	ldrd	r8, r9, [r4]
 8018e68:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8018e6c:	4640      	mov	r0, r8
 8018e6e:	4632      	mov	r2, r6
 8018e70:	463b      	mov	r3, r7
 8018e72:	4649      	mov	r1, r9
 8018e74:	f7e7 fa0a 	bl	800028c <__adddf3>
 8018e78:	e9cd 0100 	strd	r0, r1, [sp]
 8018e7c:	4602      	mov	r2, r0
 8018e7e:	460b      	mov	r3, r1
 8018e80:	4640      	mov	r0, r8
 8018e82:	4649      	mov	r1, r9
 8018e84:	f7e7 fa00 	bl	8000288 <__aeabi_dsub>
 8018e88:	4632      	mov	r2, r6
 8018e8a:	463b      	mov	r3, r7
 8018e8c:	f7e7 f9fe 	bl	800028c <__adddf3>
 8018e90:	ed9d 7b00 	vldr	d7, [sp]
 8018e94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8018e98:	ed84 7b00 	vstr	d7, [r4]
 8018e9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018ea0:	e757      	b.n	8018d52 <__kernel_rem_pio2+0x51a>
 8018ea2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018ea6:	f7e7 f9f1 	bl	800028c <__adddf3>
 8018eaa:	3d01      	subs	r5, #1
 8018eac:	e75c      	b.n	8018d68 <__kernel_rem_pio2+0x530>
 8018eae:	9b04      	ldr	r3, [sp, #16]
 8018eb0:	9a04      	ldr	r2, [sp, #16]
 8018eb2:	601f      	str	r7, [r3, #0]
 8018eb4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8018eb8:	605c      	str	r4, [r3, #4]
 8018eba:	609d      	str	r5, [r3, #8]
 8018ebc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8018ec0:	60d3      	str	r3, [r2, #12]
 8018ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018ec6:	6110      	str	r0, [r2, #16]
 8018ec8:	6153      	str	r3, [r2, #20]
 8018eca:	e727      	b.n	8018d1c <__kernel_rem_pio2+0x4e4>
 8018ecc:	41700000 	.word	0x41700000
 8018ed0:	3e700000 	.word	0x3e700000
 8018ed4:	00000000 	.word	0x00000000

08018ed8 <scalbn>:
 8018ed8:	b570      	push	{r4, r5, r6, lr}
 8018eda:	ec55 4b10 	vmov	r4, r5, d0
 8018ede:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8018ee2:	4606      	mov	r6, r0
 8018ee4:	462b      	mov	r3, r5
 8018ee6:	b999      	cbnz	r1, 8018f10 <scalbn+0x38>
 8018ee8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018eec:	4323      	orrs	r3, r4
 8018eee:	d03f      	beq.n	8018f70 <scalbn+0x98>
 8018ef0:	4b35      	ldr	r3, [pc, #212]	; (8018fc8 <scalbn+0xf0>)
 8018ef2:	4629      	mov	r1, r5
 8018ef4:	ee10 0a10 	vmov	r0, s0
 8018ef8:	2200      	movs	r2, #0
 8018efa:	f7e7 fb7d 	bl	80005f8 <__aeabi_dmul>
 8018efe:	4b33      	ldr	r3, [pc, #204]	; (8018fcc <scalbn+0xf4>)
 8018f00:	429e      	cmp	r6, r3
 8018f02:	4604      	mov	r4, r0
 8018f04:	460d      	mov	r5, r1
 8018f06:	da10      	bge.n	8018f2a <scalbn+0x52>
 8018f08:	a327      	add	r3, pc, #156	; (adr r3, 8018fa8 <scalbn+0xd0>)
 8018f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f0e:	e01f      	b.n	8018f50 <scalbn+0x78>
 8018f10:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8018f14:	4291      	cmp	r1, r2
 8018f16:	d10c      	bne.n	8018f32 <scalbn+0x5a>
 8018f18:	ee10 2a10 	vmov	r2, s0
 8018f1c:	4620      	mov	r0, r4
 8018f1e:	4629      	mov	r1, r5
 8018f20:	f7e7 f9b4 	bl	800028c <__adddf3>
 8018f24:	4604      	mov	r4, r0
 8018f26:	460d      	mov	r5, r1
 8018f28:	e022      	b.n	8018f70 <scalbn+0x98>
 8018f2a:	460b      	mov	r3, r1
 8018f2c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8018f30:	3936      	subs	r1, #54	; 0x36
 8018f32:	f24c 3250 	movw	r2, #50000	; 0xc350
 8018f36:	4296      	cmp	r6, r2
 8018f38:	dd0d      	ble.n	8018f56 <scalbn+0x7e>
 8018f3a:	2d00      	cmp	r5, #0
 8018f3c:	a11c      	add	r1, pc, #112	; (adr r1, 8018fb0 <scalbn+0xd8>)
 8018f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f42:	da02      	bge.n	8018f4a <scalbn+0x72>
 8018f44:	a11c      	add	r1, pc, #112	; (adr r1, 8018fb8 <scalbn+0xe0>)
 8018f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f4a:	a319      	add	r3, pc, #100	; (adr r3, 8018fb0 <scalbn+0xd8>)
 8018f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f50:	f7e7 fb52 	bl	80005f8 <__aeabi_dmul>
 8018f54:	e7e6      	b.n	8018f24 <scalbn+0x4c>
 8018f56:	1872      	adds	r2, r6, r1
 8018f58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018f5c:	428a      	cmp	r2, r1
 8018f5e:	dcec      	bgt.n	8018f3a <scalbn+0x62>
 8018f60:	2a00      	cmp	r2, #0
 8018f62:	dd08      	ble.n	8018f76 <scalbn+0x9e>
 8018f64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018f68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018f6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018f70:	ec45 4b10 	vmov	d0, r4, r5
 8018f74:	bd70      	pop	{r4, r5, r6, pc}
 8018f76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018f7a:	da08      	bge.n	8018f8e <scalbn+0xb6>
 8018f7c:	2d00      	cmp	r5, #0
 8018f7e:	a10a      	add	r1, pc, #40	; (adr r1, 8018fa8 <scalbn+0xd0>)
 8018f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f84:	dac0      	bge.n	8018f08 <scalbn+0x30>
 8018f86:	a10e      	add	r1, pc, #56	; (adr r1, 8018fc0 <scalbn+0xe8>)
 8018f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f8c:	e7bc      	b.n	8018f08 <scalbn+0x30>
 8018f8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018f92:	3236      	adds	r2, #54	; 0x36
 8018f94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018f98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8018f9c:	4620      	mov	r0, r4
 8018f9e:	4b0c      	ldr	r3, [pc, #48]	; (8018fd0 <scalbn+0xf8>)
 8018fa0:	2200      	movs	r2, #0
 8018fa2:	e7d5      	b.n	8018f50 <scalbn+0x78>
 8018fa4:	f3af 8000 	nop.w
 8018fa8:	c2f8f359 	.word	0xc2f8f359
 8018fac:	01a56e1f 	.word	0x01a56e1f
 8018fb0:	8800759c 	.word	0x8800759c
 8018fb4:	7e37e43c 	.word	0x7e37e43c
 8018fb8:	8800759c 	.word	0x8800759c
 8018fbc:	fe37e43c 	.word	0xfe37e43c
 8018fc0:	c2f8f359 	.word	0xc2f8f359
 8018fc4:	81a56e1f 	.word	0x81a56e1f
 8018fc8:	43500000 	.word	0x43500000
 8018fcc:	ffff3cb0 	.word	0xffff3cb0
 8018fd0:	3c900000 	.word	0x3c900000

08018fd4 <_init>:
 8018fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fd6:	bf00      	nop
 8018fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018fda:	bc08      	pop	{r3}
 8018fdc:	469e      	mov	lr, r3
 8018fde:	4770      	bx	lr

08018fe0 <_fini>:
 8018fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fe2:	bf00      	nop
 8018fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018fe6:	bc08      	pop	{r3}
 8018fe8:	469e      	mov	lr, r3
 8018fea:	4770      	bx	lr
